

Microchip Technology PIC18 PRO Macro Assembler V2.00 build -1524193055 
                                                                                               Wed Aug 29 13:58:56 2018

Microchip Technology Omniscient Code Generator v2.00 (PRO mode) build 20180527130849
     1                           	processor	18LF14K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=2
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=2
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=2
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=2
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1
    66                           	psect	text53,global,reloc=2,class=CODE,delta=1
    67                           	psect	text54,global,reloc=2,class=CODE,delta=1
    68                           	psect	text55,global,reloc=2,class=CODE,delta=1
    69                           	psect	text56,global,reloc=2,class=CODE,delta=1
    70                           	psect	text57,global,reloc=2,class=CODE,delta=1
    71                           	psect	text58,global,reloc=2,class=CODE,delta=1
    72                           	psect	text59,global,reloc=2,class=CODE,delta=1
    73                           	psect	text60,global,reloc=2,class=CODE,delta=1
    74                           	psect	text61,global,reloc=2,class=CODE,delta=1
    75                           	psect	text62,global,reloc=2,class=CODE,delta=1
    76                           	psect	text63,global,reloc=2,class=CODE,delta=1
    77                           	psect	text64,global,reloc=2,class=CODE,delta=1
    78                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    79                           	psect	text65,global,reloc=2,class=CODE,delta=1
    80                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    81                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    82  0000                     
    83                           ; Version 2.00
    84                           ; Generated 27/05/2018 GMT
    85                           ; 
    86                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    87                           ; All rights reserved.
    88                           ; 
    89                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    90                           ; 
    91                           ; Redistribution and use in source and binary forms, with or without modification, are
    92                           ; permitted provided that the following conditions are met:
    93                           ; 
    94                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    95                           ;        conditions and the following disclaimer.
    96                           ; 
    97                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    98                           ;        of conditions and the following disclaimer in the documentation and/or other
    99                           ;        materials provided with the distribution.
   100                           ; 
   101                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   102                           ;        software without specific prior written permission.
   103                           ; 
   104                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   105                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   106                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   107                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   108                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   109                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   110                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   111                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   112                           ; 
   113                           ; 
   114                           ; Code-generator required, PIC18LF14K22 Definitions
   115                           ; 
   116                           ; SFR Addresses
   117  0000                     
   118                           	psect	nvCOMRAM
   119  000048                     __pnvCOMRAM:
   120                           	opt stack 0
   121  000048                     _ESP_external_message_handler:
   122                           	opt stack 0
   123  000048                     	ds	2
   124  00004A                     _TMR1_InterruptHandler:
   125                           	opt stack 0
   126  00004A                     	ds	2
   127  00004C                     _timer1ReloadVal:
   128                           	opt stack 0
   129  00004C                     	ds	2
   130  00004E                     _EUSART_RxDefaultInterruptHandler:
   131                           	opt stack 0
   132  00004E                     	ds	2
   133  000050                     _EUSART_TxDefaultInterruptHandler:
   134                           	opt stack 0
   135  000050                     	ds	2
   136  000052                     _IOCA4_InterruptHandler:
   137                           	opt stack 0
   138  000052                     	ds	2
   139  000054                     _IOC_value:
   140                           	opt stack 0
   141  000054                     	ds	1
   142  000055                     _eusartTxBufferRemaining:
   143                           	opt stack 0
   144  000055                     	ds	1
   145  0000                     _TMR1	set	4046
   146  0000                     _PORTAbits	set	3968
   147  0000                     _LATAbits	set	3977
   148  0000                     _EEDATA	set	4008
   149  0000                     _EEADR	set	4009
   150  0000                     _EECON2	set	4007
   151  0000                     _EECON1bits	set	4006
   152  0000                     _T1CONbits	set	4045
   153  0000                     _T1CON	set	4045
   154  0000                     _TMR1L	set	4046
   155  0000                     _TMR1H	set	4047
   156  0000                     _ADCON0bits	set	4034
   157  0000                     _ADRESH	set	4036
   158  0000                     _ADRESL	set	4035
   159  0000                     _ADCON2	set	4032
   160  0000                     _ADCON1	set	4033
   161  0000                     _ADCON0	set	4034
   162  0000                     _RCREG	set	4014
   163  0000                     _RCSTAbits	set	4011
   164  0000                     _TXREG	set	4013
   165  0000                     _SPBRGH	set	4016
   166  0000                     _SPBRG	set	4015
   167  0000                     _TXSTA	set	4012
   168  0000                     _RCSTA	set	4011
   169  0000                     _BAUDCON	set	4024
   170  0000                     _PIR1bits	set	3998
   171  0000                     _PIE1bits	set	3997
   172  0000                     _RCONbits	set	4048
   173  0000                     _OSCTUNE	set	3995
   174  0000                     _OSCCON2	set	4050
   175  0000                     _OSCCON	set	4051
   176  0000                     _INTCONbits	set	4082
   177  0000                     _IOCAbits	set	3961
   178  0000                     _INTCON2bits	set	4081
   179  0000                     _WPUA	set	3959
   180  0000                     _WPUB	set	3960
   181  0000                     _ANSELbits	set	3966
   182  0000                     _ANSELHbits	set	3967
   183  0000                     _TRISC	set	3988
   184  0000                     _TRISB	set	3987
   185  0000                     _TRISA	set	3986
   186  0000                     _LATC	set	3979
   187  0000                     _LATB	set	3978
   188  0000                     _LATA	set	3977
   189                           
   190                           	psect	smallconst
   191  000200                     __psmallconst:
   192                           	opt stack 0
   193  000200  00                 	db	0
   194  000201                     STR_28:
   195  000201  65                 	db	101	;'e'
   196  000202  6E                 	db	110	;'n'
   197  000203  74                 	db	116	;'t'
   198  000204  65                 	db	101	;'e'
   199  000205  72                 	db	114	;'r'
   200  000206  20                 	db	32
   201  000207  77                 	db	119	;'w'
   202  000208  6C                 	db	108	;'l'
   203  000209  61                 	db	97	;'a'
   204  00020A  6E                 	db	110	;'n'
   205  00020B  20                 	db	32
   206  00020C  70                 	db	112	;'p'
   207  00020D  61                 	db	97	;'a'
   208  00020E  73                 	db	115	;'s'
   209  00020F  73                 	db	115	;'s'
   210  000210  77                 	db	119	;'w'
   211  000211  6F                 	db	111	;'o'
   212  000212  72                 	db	114	;'r'
   213  000213  64                 	db	100	;'d'
   214  000214  3A                 	db	58	;':'
   215  000215  0A                 	db	10
   216  000216  00                 	db	0
   217  000217                     STR_14:
   218  000217  41                 	db	65	;'A'
   219  000218  54                 	db	84	;'T'
   220  000219  2B                 	db	43
   221  00021A  43                 	db	67	;'C'
   222  00021B  49                 	db	73	;'I'
   223  00021C  50                 	db	80	;'P'
   224  00021D  53                 	db	83	;'S'
   225  00021E  45                 	db	69	;'E'
   226  00021F  52                 	db	82	;'R'
   227  000220  56                 	db	86	;'V'
   228  000221  45                 	db	69	;'E'
   229  000222  52                 	db	82	;'R'
   230  000223  3D                 	db	61	;'='
   231  000224  31                 	db	49	;'1'
   232  000225  2C                 	db	44
   233  000226  38                 	db	56	;'8'
   234  000227  30                 	db	48	;'0'
   235  000228  0D                 	db	13
   236  000229  0A                 	db	10
   237  00022A  00                 	db	0
   238  00022B                     STR_26:
   239  00022B  65                 	db	101	;'e'
   240  00022C  6E                 	db	110	;'n'
   241  00022D  74                 	db	116	;'t'
   242  00022E  65                 	db	101	;'e'
   243  00022F  72                 	db	114	;'r'
   244  000230  20                 	db	32
   245  000231  77                 	db	119	;'w'
   246  000232  6C                 	db	108	;'l'
   247  000233  61                 	db	97	;'a'
   248  000234  6E                 	db	110	;'n'
   249  000235  20                 	db	32
   250  000236  6E                 	db	110	;'n'
   251  000237  61                 	db	97	;'a'
   252  000238  6D                 	db	109	;'m'
   253  000239  65                 	db	101	;'e'
   254  00023A  3A                 	db	58	;':'
   255  00023B  0A                 	db	10
   256  00023C  00                 	db	0
   257  00023D                     STR_9:
   258  00023D  41                 	db	65	;'A'
   259  00023E  54                 	db	84	;'T'
   260  00023F  2B                 	db	43
   261  000240  43                 	db	67	;'C'
   262  000241  57                 	db	87	;'W'
   263  000242  4D                 	db	77	;'M'
   264  000243  4F                 	db	79	;'O'
   265  000244  44                 	db	68	;'D'
   266  000245  45                 	db	69	;'E'
   267  000246  3D                 	db	61	;'='
   268  000247  31                 	db	49	;'1'
   269  000248  0D                 	db	13
   270  000249  0A                 	db	10
   271  00024A  00                 	db	0
   272  00024B                     STR_13:
   273  00024B  41                 	db	65	;'A'
   274  00024C  54                 	db	84	;'T'
   275  00024D  2B                 	db	43
   276  00024E  43                 	db	67	;'C'
   277  00024F  49                 	db	73	;'I'
   278  000250  50                 	db	80	;'P'
   279  000251  4D                 	db	77	;'M'
   280  000252  55                 	db	85	;'U'
   281  000253  58                 	db	88	;'X'
   282  000254  3D                 	db	61	;'='
   283  000255  31                 	db	49	;'1'
   284  000256  0D                 	db	13
   285  000257  0A                 	db	10
   286  000258  00                 	db	0
   287  000259                     STR_25:
   288  000259  4C                 	db	76	;'L'
   289  00025A  6F                 	db	111	;'o'
   290  00025B  67                 	db	103	;'g'
   291  00025C  67                 	db	103	;'g'
   292  00025D  65                 	db	101	;'e'
   293  00025E  72                 	db	114	;'r'
   294  00025F  20                 	db	32
   295  000260  56                 	db	86	;'V'
   296  000261  31                 	db	49	;'1'
   297  000262  2E                 	db	46
   298  000263  30                 	db	48	;'0'
   299  000264  0A                 	db	10
   300  000265  00                 	db	0
   301  000266                     STR_27:
   302  000266  62                 	db	98	;'b'
   303  000267  75                 	db	117	;'u'
   304  000268  66                 	db	102	;'f'
   305  000269  66                 	db	102	;'f'
   306  00026A  65                 	db	101	;'e'
   307  00026B  72                 	db	114	;'r'
   308  00026C  20                 	db	32
   309  00026D  65                 	db	101	;'e'
   310  00026E  72                 	db	114	;'r'
   311  00026F  72                 	db	114	;'r'
   312  000270  6F                 	db	111	;'o'
   313  000271  72                 	db	114	;'r'
   314  000272  00                 	db	0
   315  000273                     STR_16:
   316  000273  41                 	db	65	;'A'
   317  000274  54                 	db	84	;'T'
   318  000275  2B                 	db	43
   319  000276  43                 	db	67	;'C'
   320  000277  49                 	db	73	;'I'
   321  000278  50                 	db	80	;'P'
   322  000279  53                 	db	83	;'S'
   323  00027A  45                 	db	69	;'E'
   324  00027B  4E                 	db	78	;'N'
   325  00027C  44                 	db	68	;'D'
   326  00027D  3D                 	db	61	;'='
   327  00027E  00                 	db	0
   328  00027F                     STR_10:
   329  00027F  41                 	db	65	;'A'
   330  000280  54                 	db	84	;'T'
   331  000281  2B                 	db	43
   332  000282  43                 	db	67	;'C'
   333  000283  57                 	db	87	;'W'
   334  000284  4A                 	db	74	;'J'
   335  000285  41                 	db	65	;'A'
   336  000286  50                 	db	80	;'P'
   337  000287  3D                 	db	61	;'='
   338  000288  22                 	db	34
   339  000289  00                 	db	0
   340  00028A                     STR_3:
   341  00028A  53                 	db	83	;'S'
   342  00028B  45                 	db	69	;'E'
   343  00028C  4E                 	db	78	;'N'
   344  00028D  44                 	db	68	;'D'
   345  00028E  20                 	db	32
   346  00028F  46                 	db	70	;'F'
   347  000290  41                 	db	65	;'A'
   348  000291  49                 	db	73	;'I'
   349  000292  4C                 	db	76	;'L'
   350  000293  00                 	db	0
   351  000294                     STR_1:
   352  000294  53                 	db	83	;'S'
   353  000295  45                 	db	69	;'E'
   354  000296  4E                 	db	78	;'N'
   355  000297  44                 	db	68	;'D'
   356  000298  20                 	db	32
   357  000299  4F                 	db	79	;'O'
   358  00029A  4B                 	db	75	;'K'
   359  00029B  00                 	db	0
   360  00029C                     STR_6:
   361  00029C  43                 	db	67	;'C'
   362  00029D  4F                 	db	79	;'O'
   363  00029E  4E                 	db	78	;'N'
   364  00029F  4E                 	db	78	;'N'
   365  0002A0  45                 	db	69	;'E'
   366  0002A1  43                 	db	67	;'C'
   367  0002A2  54                 	db	84	;'T'
   368  0002A3  00                 	db	0
   369  0002A4                     STR_22:
   370  0002A4  62                 	db	98	;'b'
   371  0002A5  6D                 	db	109	;'m'
   372  0002A6  6F                 	db	111	;'o'
   373  0002A7  64                 	db	100	;'d'
   374  0002A8  65                 	db	101	;'e'
   375  0002A9  0A                 	db	10
   376  0002AA  00                 	db	0
   377  0002AB                     STR_21:
   378  0002AB  74                 	db	116	;'t'
   379  0002AC  6D                 	db	109	;'m'
   380  0002AD  6F                 	db	111	;'o'
   381  0002AE  64                 	db	100	;'d'
   382  0002AF  65                 	db	101	;'e'
   383  0002B0  0A                 	db	10
   384  0002B1  00                 	db	0
   385  0002B2                     STR_7:
   386  0002B2  43                 	db	67	;'C'
   387  0002B3  4C                 	db	76	;'L'
   388  0002B4  4F                 	db	79	;'O'
   389  0002B5  53                 	db	83	;'S'
   390  0002B6  45                 	db	69	;'E'
   391  0002B7  44                 	db	68	;'D'
   392  0002B8  00                 	db	0
   393  0002B9                     STR_4:
   394  0002B9  45                 	db	69	;'E'
   395  0002BA  52                 	db	82	;'R'
   396  0002BB  52                 	db	82	;'R'
   397  0002BC  4F                 	db	79	;'O'
   398  0002BD  52                 	db	82	;'R'
   399  0002BE  00                 	db	0
   400  0002BF                     STR_8:
   401  0002BF  41                 	db	65	;'A'
   402  0002C0  54                 	db	84	;'T'
   403  0002C1  0D                 	db	13
   404  0002C2  0A                 	db	10
   405  0002C3  00                 	db	0
   406  0002C4                     STR_5:
   407  0002C4  2B                 	db	43
   408  0002C5  49                 	db	73	;'I'
   409  0002C6  50                 	db	80	;'P'
   410  0002C7  44                 	db	68	;'D'
   411  0002C8  00                 	db	0
   412  0002C9                     STR_20:
   413  0002C9  4F                 	db	79	;'O'
   414  0002CA  6B                 	db	107	;'k'
   415  0002CB  0A                 	db	10
   416  0002CC  00                 	db	0
   417  0002CD                     STR_12:
   418  0002CD  22                 	db	34
   419  0002CE  0D                 	db	13
   420  0002CF  0A                 	db	10
   421  0002D0  00                 	db	0
   422  0002D1                     STR_11:
   423  0002D1  22                 	db	34
   424  0002D2  2C                 	db	44
   425  0002D3  22                 	db	34
   426  0002D4  00                 	db	0
   427  0002D5                     STR_23:
   428  0002D5  43                 	db	67	;'C'
   429  0002D6  48                 	db	72	;'H'
   430  0002D7  00                 	db	0
   431  0002D8                     STR_24:
   432  0002D8  43                 	db	67	;'C'
   433  0002D9  4C                 	db	76	;'L'
   434  0002DA  00                 	db	0
   435  0002DB                     STR_17:
   436  0002DB  2C                 	db	44
   437  0002DC  00                 	db	0
   438  0002DD                     STR_15:
   439  0002DD  3A                 	db	58	;':'
   440  0002DE  00                 	db	0
   441  0000                     
   442                           ; #config settings
   443  0002DF  00                 	db	0	; dummy byte at the end
   444  0000                     
   445                           	psect	cinit
   446  000DE0                     __pcinit:
   447                           	opt stack 0
   448  000DE0                     start_initialization:
   449                           	opt stack 0
   450  000DE0                     __initialization:
   451                           	opt stack 0
   452                           
   453                           ; Clear objects allocated to BANK1 (64 bytes)
   454  000DE0  EE01  F000         	lfsr	0,__pbssBANK1
   455  000DE4  0E40               	movlw	64
   456  000DE6                     clear_0:
   457  000DE6  6AEE               	clrf	postinc0,c
   458  000DE8  06E8               	decf	wreg,f,c
   459  000DEA  E1FD               	bnz	clear_0
   460                           
   461                           ; Clear objects allocated to BANK0 (144 bytes)
   462  000DEC  EE00  F060         	lfsr	0,__pbssBANK0
   463  000DF0  0E90               	movlw	144
   464  000DF2                     clear_1:
   465  000DF2  6AEE               	clrf	postinc0,c
   466  000DF4  06E8               	decf	wreg,f,c
   467  000DF6  E1FD               	bnz	clear_1
   468                           
   469                           ; Clear objects allocated to COMRAM (16 bytes)
   470  000DF8  EE00  F038         	lfsr	0,__pbssCOMRAM
   471  000DFC  0E10               	movlw	16
   472  000DFE                     clear_2:
   473  000DFE  6AEE               	clrf	postinc0,c
   474  000E00  06E8               	decf	wreg,f,c
   475  000E02  E1FD               	bnz	clear_2
   476  000E04                     end_of_initialization:
   477                           	opt stack 0
   478  000E04                     __end_of__initialization:
   479                           	opt stack 0
   480  000E04  9056               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   481  000E06  9256               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   482  000E08  0E00               	movlw	low (__Lmediumconst shr (0+16))
   483  000E0A  6EF8               	movwf	tblptru,c
   484  000E0C  0100               	movlb	0
   485  000E0E  EFAF  F004         	goto	_main	;jump to C main() function
   486                           tblptru	equ	0xFF8
   487                           postinc0	equ	0xFEE
   488                           wreg	equ	0xFE8
   489                           
   490                           	psect	bssCOMRAM
   491  000038                     __pbssCOMRAM:
   492                           	opt stack 0
   493  000038                     _ADC_value:
   494                           	opt stack 0
   495  000038                     	ds	2
   496  00003A                     _WIFI_tx_buf_ind:
   497                           	opt stack 0
   498  00003A                     	ds	1
   499  00003B                     _TMR1_state:
   500                           	opt stack 0
   501  00003B                     	ds	1
   502  00003C                     _message_format:
   503                           	opt stack 0
   504  00003C                     	ds	1
   505  00003D                     _esp_channel:
   506                           	opt stack 0
   507  00003D                     	ds	1
   508  00003E                     _esp_read_data_index:
   509                           	opt stack 0
   510  00003E                     	ds	1
   511  00003F                     _ESP_wait_exception:
   512                           	opt stack 0
   513  00003F                     	ds	1
   514  000040                     _IOC_state:
   515                           	opt stack 0
   516  000040                     	ds	1
   517  000041                     _eusartRxCount:
   518                           	opt stack 0
   519  000041                     	ds	1
   520  000042                     _eusartRxTail:
   521                           	opt stack 0
   522  000042                     	ds	1
   523  000043                     _eusartRxHead:
   524                           	opt stack 0
   525  000043                     	ds	1
   526  000044                     _eusartTxTail:
   527                           	opt stack 0
   528  000044                     	ds	1
   529  000045                     _eusartTxHead:
   530                           	opt stack 0
   531  000045                     	ds	1
   532  000046                     _ADC_state:
   533                           	opt stack 0
   534  000046                     	ds	1
   535  000047                     _ADC_count:
   536                           	opt stack 0
   537  000047                     	ds	1
   538                           tblptru	equ	0xFF8
   539                           postinc0	equ	0xFEE
   540                           wreg	equ	0xFE8
   541                           
   542                           	psect	bssBANK0
   543  000060                     __pbssBANK0:
   544                           	opt stack 0
   545  000060                     _eusartTxBuffer:
   546                           	opt stack 0
   547  000060                     	ds	64
   548  0000A0                     _WIFI_tx_buf:
   549                           	opt stack 0
   550  0000A0                     	ds	64
   551  0000E0                     _esp_read_data:
   552                           	opt stack 0
   553  0000E0                     	ds	16
   554                           tblptru	equ	0xFF8
   555                           postinc0	equ	0xFEE
   556                           wreg	equ	0xFE8
   557                           
   558                           	psect	bssBANK1
   559  000100                     __pbssBANK1:
   560                           	opt stack 0
   561  000100                     _eusartRxBuffer:
   562                           	opt stack 0
   563  000100                     	ds	64
   564                           tblptru	equ	0xFF8
   565                           postinc0	equ	0xFEE
   566                           wreg	equ	0xFE8
   567                           
   568                           	psect	cstackBANK1
   569  000140                     __pcstackBANK1:
   570                           	opt stack 0
   571  000140                     read_wifi_settings@pass:
   572                           	opt stack 0
   573                           
   574                           ; 14 bytes @ 0x0
   575  000140                     	ds	14
   576  00014E                     read_wifi_settings@wifi:
   577                           	opt stack 0
   578                           
   579                           ; 10 bytes @ 0xE
   580  00014E                     	ds	10
   581  000158                     read_wifi_settings@len_wifi:
   582                           	opt stack 0
   583                           
   584                           ; 1 bytes @ 0x18
   585  000158                     	ds	1
   586  000159                     read_wifi_settings@len_pass:
   587                           	opt stack 0
   588                           
   589                           ; 1 bytes @ 0x19
   590  000159                     	ds	1
   591  00015A                     read_wifi_settings@i:
   592                           	opt stack 0
   593                           
   594                           ; 1 bytes @ 0x1A
   595  00015A                     	ds	1
   596  00015B                     read_wifi_settings@add:
   597                           	opt stack 0
   598                           
   599                           ; 1 bytes @ 0x1B
   600  00015B                     	ds	1
   601                           tblptru	equ	0xFF8
   602                           postinc0	equ	0xFEE
   603                           wreg	equ	0xFE8
   604                           
   605                           	psect	cstackCOMRAM
   606  000001                     __pcstackCOMRAM:
   607                           	opt stack 0
   608  000001                     ?_ADC1_GetConversionResult:
   609                           	opt stack 0
   610  000001                     TMR1_WriteTimer@timerVal:
   611                           	opt stack 0
   612                           
   613                           ; 2 bytes @ 0x0
   614  000001                     	ds	2
   615  000003                     ??_ADC1_GetConversionResult:
   616  000003                     
   617                           ; 1 bytes @ 0x2
   618  000003                     	ds	2
   619  000005                     ??_INTERRUPT_InterruptManager:
   620                           
   621                           ; 1 bytes @ 0x4
   622  000005                     	ds	4
   623  000009                     ??_ADC1_SelectChannel:
   624  000009                     ?_strlen:
   625                           	opt stack 0
   626  000009                     ?_strncmp:
   627                           	opt stack 0
   628  000009                     ?_strchr:
   629                           	opt stack 0
   630  000009                     ?___awdiv:
   631                           	opt stack 0
   632  000009                     ?___lwdiv:
   633                           	opt stack 0
   634  000009                     ?___lwmod:
   635                           	opt stack 0
   636  000009                     EUSART_Read@readValue:
   637                           	opt stack 0
   638  000009                     EUSART_Write@txData:
   639                           	opt stack 0
   640  000009                     DATAEE_WriteByte@bData:
   641                           	opt stack 0
   642  000009                     DATAEE_ReadByte@bAdd:
   643                           	opt stack 0
   644  000009                     ___lbmod@divisor:
   645                           	opt stack 0
   646  000009                     strlen@s:
   647                           	opt stack 0
   648  000009                     IOCA4_SetInterruptHandler@InterruptHandler:
   649                           	opt stack 0
   650  000009                     EUSART_SetTxInterruptHandler@interruptHandler:
   651                           	opt stack 0
   652  000009                     EUSART_SetRxInterruptHandler@interruptHandler:
   653                           	opt stack 0
   654  000009                     TMR1_SetInterruptHandler@InterruptHandler:
   655                           	opt stack 0
   656  000009                     ESP_Set_application_handler@applicationHandler:
   657                           	opt stack 0
   658  000009                     ___awdiv@dividend:
   659                           	opt stack 0
   660  000009                     ___lwdiv@dividend:
   661                           	opt stack 0
   662  000009                     ___lwmod@dividend:
   663                           	opt stack 0
   664  000009                     strchr@s:
   665                           	opt stack 0
   666  000009                     strncmp@_l:
   667                           	opt stack 0
   668                           
   669                           ; 2 bytes @ 0x8
   670  000009                     	ds	1
   671  00000A                     ADC1_SelectChannel@channel:
   672                           	opt stack 0
   673  00000A                     DATAEE_WriteByte@bAdd:
   674                           	opt stack 0
   675  00000A                     __puts@pt:
   676                           	opt stack 0
   677  00000A                     __gets@pt:
   678                           	opt stack 0
   679  00000A                     ___lbmod@dividend:
   680                           	opt stack 0
   681  00000A                     write@pt:
   682                           	opt stack 0
   683                           
   684                           ; 2 bytes @ 0x9
   685  00000A                     	ds	1
   686  00000B                     ??__puts:
   687  00000B                     DATAEE_WriteByte@GIEBitValue:
   688                           	opt stack 0
   689  00000B                     __gets@length:
   690                           	opt stack 0
   691  00000B                     ___lbmod@counter:
   692                           	opt stack 0
   693  00000B                     strlen@a:
   694                           	opt stack 0
   695  00000B                     strncmp@_r:
   696                           	opt stack 0
   697  00000B                     ___awdiv@divisor:
   698                           	opt stack 0
   699  00000B                     ___lwdiv@divisor:
   700                           	opt stack 0
   701  00000B                     ___lwmod@divisor:
   702                           	opt stack 0
   703  00000B                     strchr@c:
   704                           	opt stack 0
   705                           
   706                           ; 2 bytes @ 0xA
   707  00000B                     	ds	1
   708  00000C                     ??__gets:
   709  00000C                     __puts@index:
   710                           	opt stack 0
   711  00000C                     write@lenght:
   712                           	opt stack 0
   713  00000C                     ___lbmod@rem:
   714                           	opt stack 0
   715  00000C                     strncmp@n:
   716                           	opt stack 0
   717                           
   718                           ; 2 bytes @ 0xB
   719  00000C                     	ds	1
   720  00000D                     ??_write:
   721  00000D                     __gets@index:
   722                           	opt stack 0
   723  00000D                     ___awdiv@counter:
   724                           	opt stack 0
   725  00000D                     ___lwmod@counter:
   726                           	opt stack 0
   727  00000D                     ___lwdiv@quotient:
   728                           	opt stack 0
   729                           
   730                           ; 2 bytes @ 0xC
   731  00000D                     	ds	1
   732  00000E                     ??_strncmp:
   733  00000E                     ___awdiv@sign:
   734                           	opt stack 0
   735  00000E                     config_wifi_settings@line:
   736                           	opt stack 0
   737                           
   738                           ; 16 bytes @ 0xD
   739  00000E                     	ds	1
   740  00000F                     write@i:
   741                           	opt stack 0
   742  00000F                     ___lwdiv@counter:
   743                           	opt stack 0
   744  00000F                     ___awdiv@quotient:
   745                           	opt stack 0
   746  00000F                     strncmp@l:
   747                           	opt stack 0
   748                           
   749                           ; 2 bytes @ 0xE
   750  00000F                     	ds	1
   751  000010                     __sprintf@mess:
   752                           	opt stack 0
   753                           
   754                           ; 1 bytes @ 0xF
   755  000010                     	ds	1
   756  000011                     strncmp@r:
   757                           	opt stack 0
   758  000011                     __sprintf@val:
   759                           	opt stack 0
   760                           
   761                           ; 2 bytes @ 0x10
   762  000011                     	ds	1
   763  000012                     ?_strstr:
   764                           	opt stack 0
   765  000012                     strstr@h:
   766                           	opt stack 0
   767                           
   768                           ; 2 bytes @ 0x11
   769  000012                     	ds	1
   770  000013                     __sprintf@aux:
   771                           	opt stack 0
   772                           
   773                           ; 2 bytes @ 0x12
   774  000013                     	ds	1
   775  000014                     strstr@n:
   776                           	opt stack 0
   777                           
   778                           ; 1 bytes @ 0x13
   779  000014                     	ds	1
   780  000015                     strstr@nl:
   781                           	opt stack 0
   782                           
   783                           ; 2 bytes @ 0x14
   784  000015                     	ds	2
   785  000017                     ESP_process_message@aux:
   786                           	opt stack 0
   787                           
   788                           ; 2 bytes @ 0x16
   789  000017                     	ds	2
   790  000019                     ??_ESP_read:
   791                           
   792                           ; 1 bytes @ 0x18
   793  000019                     	ds	1
   794  00001A                     ESP_read@ret:
   795                           	opt stack 0
   796                           
   797                           ; 1 bytes @ 0x19
   798  00001A                     	ds	1
   799  00001B                     ESP_wait_for@esp_mess:
   800                           	opt stack 0
   801                           
   802                           ; 1 bytes @ 0x1A
   803  00001B                     	ds	1
   804  00001C                     ESP_wait_for@ret:
   805                           	opt stack 0
   806                           
   807                           ; 1 bytes @ 0x1B
   808  00001C                     	ds	1
   809  00001D                     ESP_config@wifi:
   810                           	opt stack 0
   811  00001D                     ESP_write@pt:
   812                           	opt stack 0
   813                           
   814                           ; 2 bytes @ 0x1C
   815  00001D                     	ds	1
   816  00001E                     config_wifi_settings@i:
   817                           	opt stack 0
   818                           
   819                           ; 1 bytes @ 0x1D
   820  00001E                     	ds	1
   821  00001F                     ESP_config@len_wifi:
   822                           	opt stack 0
   823  00001F                     ESP_write@length:
   824                           	opt stack 0
   825  00001F                     config_wifi_settings@address:
   826                           	opt stack 0
   827                           
   828                           ; 1 bytes @ 0x1E
   829  00001F                     	ds	1
   830  000020                     ESP_write@res:
   831                           	opt stack 0
   832  000020                     config_wifi_settings@len:
   833                           	opt stack 0
   834  000020                     ESP_config@pass:
   835                           	opt stack 0
   836                           
   837                           ; 2 bytes @ 0x1F
   838  000020                     	ds	1
   839  000021                     ESP_write@aux:
   840                           	opt stack 0
   841                           
   842                           ; 1 bytes @ 0x20
   843  000021                     	ds	1
   844  000022                     ??_read_analog:
   845  000022                     ??_process_message:
   846  000022                     ESP_config@len_pass:
   847                           	opt stack 0
   848                           
   849                           ; 1 bytes @ 0x21
   850  000022                     	ds	1
   851  000023                     ??_ESP_config:
   852                           
   853                           ; 1 bytes @ 0x22
   854  000023                     	ds	1
   855  000024                     process_message@message:
   856                           	opt stack 0
   857                           
   858                           ; 1 bytes @ 0x23
   859  000024                     	ds	1
   860  000025                     ESP_process_rx_data@index:
   861                           	opt stack 0
   862                           
   863                           ; 2 bytes @ 0x24
   864  000025                     	ds	2
   865  000027                     ESP_process_rx_data@aux:
   866                           	opt stack 0
   867                           
   868                           ; 1 bytes @ 0x26
   869  000027                     	ds	1
   870  000028                     ??_ESP_message_handler:
   871                           
   872                           ; 1 bytes @ 0x27
   873  000028                     	ds	2
   874  00002A                     ESP_message_handler@ret:
   875                           	opt stack 0
   876  00002A                     read_analog@mess:
   877                           	opt stack 0
   878                           
   879                           ; 6 bytes @ 0x29
   880  00002A                     	ds	6
   881  000030                     read_analog@aux1:
   882                           	opt stack 0
   883                           
   884                           ; 4 bytes @ 0x2F
   885  000030                     	ds	4
   886  000034                     read_analog@adc_val:
   887                           	opt stack 0
   888                           
   889                           ; 2 bytes @ 0x33
   890  000034                     	ds	2
   891  000036                     ??_main:
   892                           
   893                           ; 1 bytes @ 0x35
   894  000036                     	ds	2
   895                           tblptru	equ	0xFF8
   896                           postinc0	equ	0xFEE
   897                           wreg	equ	0xFE8
   898                           
   899 ;;
   900 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   901 ;;
   902 ;; *************** function _main *****************
   903 ;; Defined at:
   904 ;;		line 51 in file "main.c"
   905 ;; Parameters:    Size  Location     Type
   906 ;;		None
   907 ;; Auto vars:     Size  Location     Type
   908 ;;		None
   909 ;; Return value:  Size  Location     Type
   910 ;;                  1    wreg      void 
   911 ;; Registers used:
   912 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   913 ;; Tracked objects:
   914 ;;		On entry : 0/0
   915 ;;		On exit  : 0/0
   916 ;;		Unchanged: 0/0
   917 ;; Data sizes:     COMRAM   BANK0   BANK1
   918 ;;      Params:         0       0       0
   919 ;;      Locals:         0       0       0
   920 ;;      Temps:          2       0       0
   921 ;;      Totals:         2       0       0
   922 ;;Total ram usage:        2 bytes
   923 ;; Hardware stack levels required when called:   14
   924 ;; This function calls:
   925 ;;		_ESP_initialize
   926 ;;		_ESP_message_handler
   927 ;;		_EUSART_is_rx_ready
   928 ;;		_SYSTEM_Initialize
   929 ;;		_config_wifi_settings
   930 ;;		_logger_initialize
   931 ;;		_process_ioc
   932 ;;		_process_message
   933 ;;		_read_analog
   934 ;;		_read_wifi_settings
   935 ;; This function is called by:
   936 ;;		Startup code after reset
   937 ;; This function uses a non-reentrant model
   938 ;;
   939                           
   940                           	psect	text0
   941  00095E                     __ptext0:
   942                           	opt stack 0
   943  00095E                     _main:
   944                           	opt stack 17
   945                           
   946                           ;main.c: 54:     SYSTEM_Initialize();
   947                           
   948                           ;incstack = 0
   949  00095E  EC0D  F008         	call	_SYSTEM_Initialize	;wreg free
   950                           
   951                           ;main.c: 57:     ESP_initialize();
   952  000962  EC36  F008         	call	_ESP_initialize	;wreg free
   953                           
   954                           ;main.c: 60:     logger_initialize();
   955  000966  ECCC  F005         	call	_logger_initialize	;wreg free
   956                           
   957                           ;main.c: 67:     (INTCONbits.GIE = 1);
   958  00096A  8EF2               	bsf	intcon,7,c	;volatile
   959                           
   960                           ;main.c: 73:     (INTCONbits.PEIE = 1);
   961  00096C  8CF2               	bsf	intcon,6,c	;volatile
   962  00096E  8A89               	bsf	3977,5,c	;volatile
   963                           
   964                           ;main.c: 79:     _delay((unsigned long)((200)*(64000000/4000.0)));
   965  000970  0E11               	movlw	17
   966  000972  6E37               	movwf	(??_main+1)& (0+255),c
   967  000974  0E3C               	movlw	60
   968  000976  6E36               	movwf	??_main& (0+255),c
   969  000978  0ECB               	movlw	203
   970  00097A                     u2677:
   971  00097A  2EE8               	decfsz	wreg,f,c
   972  00097C  D7FE               	bra	u2677
   973  00097E  2E36               	decfsz	??_main& (0+255),f,c
   974  000980  D7FC               	bra	u2677
   975  000982  2E37               	decfsz	(??_main+1)& (0+255),f,c
   976  000984  D7FA               	bra	u2677
   977  000986  F000               	nop	
   978  000988  9A89               	bcf	3977,5,c	;volatile
   979                           
   980                           ;main.c: 81:     _delay((unsigned long)((200)*(64000000/4000.0)));
   981  00098A  0E11               	movlw	17
   982  00098C  6E37               	movwf	(??_main+1)& (0+255),c
   983  00098E  0E3C               	movlw	60
   984  000990  6E36               	movwf	??_main& (0+255),c
   985  000992  0ECB               	movlw	203
   986  000994                     u2687:
   987  000994  2EE8               	decfsz	wreg,f,c
   988  000996  D7FE               	bra	u2687
   989  000998  2E36               	decfsz	??_main& (0+255),f,c
   990  00099A  D7FC               	bra	u2687
   991  00099C  2E37               	decfsz	(??_main+1)& (0+255),f,c
   992  00099E  D7FA               	bra	u2687
   993  0009A0  F000               	nop	
   994                           
   995                           ;main.c: 84:     if (!PORTAbits.RA4) {
   996  0009A2  A880               	btfss	3968,4,c	;volatile
   997                           
   998                           ;main.c: 85:         config_wifi_settings();
   999  0009A4  EC98  F003         	call	_config_wifi_settings	;wreg free
  1000                           
  1001                           ;main.c: 88:     read_wifi_settings();
  1002                           
  1003                           ;main.c: 86:     }
  1004  0009A8  EC30  F004         	call	_read_wifi_settings	;wreg free
  1005  0009AC                     l3829:
  1006                           
  1007                           ;main.c: 95:     {;main.c: 98:         if (EUSART_is_rx_ready()) {
  1008  0009AC  EC6F  F008         	call	_EUSART_is_rx_ready	;wreg free
  1009  0009B0  0900               	iorlw	0
  1010  0009B2  E002               	bz	l3833
  1011                           
  1012                           ;main.c: 102:                 ESP_message_handler();
  1013  0009B4  ECBB  F006         	call	_ESP_message_handler	;wreg free
  1014  0009B8                     l3833:
  1015                           
  1016                           ;main.c: 106:         if (ADC_state == ADC_READY) {
  1017  0009B8  0446               	decf	_ADC_state,w,c	;volatile
  1018  0009BA  E102               	bnz	l3837
  1019                           
  1020                           ;main.c: 107:             read_analog();
  1021  0009BC  EC70  F001         	call	_read_analog	;wreg free
  1022  0009C0                     l3837:
  1023                           
  1024                           ;main.c: 110:         if (IOC_state == IOC_READY) {
  1025  0009C0  0440               	decf	_IOC_state,w,c	;volatile
  1026  0009C2  E102               	bnz	l3841
  1027                           
  1028                           ;main.c: 111:             process_ioc();
  1029  0009C4  EC85  F006         	call	_process_ioc	;wreg free
  1030  0009C8                     l3841:
  1031                           
  1032                           ;main.c: 115:         if (ESP_wait_exception) {
  1033  0009C8  503F               	movf	_ESP_wait_exception,w,c	;volatile
  1034  0009CA  E004               	bz	l432
  1035                           
  1036                           ;main.c: 116:             ESP_wait_exception = 0;
  1037  0009CC  6A3F               	clrf	_ESP_wait_exception,c	;volatile
  1038                           
  1039                           ;main.c: 117:             process_message('S');
  1040  0009CE  0E53               	movlw	83
  1041  0009D0  EC28  F005         	call	_process_message
  1042  0009D4                     l432:
  1043  0009D4  0004               	clrwdt		;# 
  1044  0009D6  D7EA               	goto	l3829
  1045  0009D8                     __end_of_main:
  1046                           	opt stack 0
  1047                           tblptru	equ	0xFF8
  1048                           intcon	equ	0xFF2
  1049                           postinc0	equ	0xFEE
  1050                           wreg	equ	0xFE8
  1051                           
  1052 ;; *************** function _read_wifi_settings *****************
  1053 ;; Defined at:
  1054 ;;		line 244 in file "logger.c"
  1055 ;; Parameters:    Size  Location     Type
  1056 ;;		None
  1057 ;; Auto vars:     Size  Location     Type
  1058 ;;  pass           14    0[BANK1 ] unsigned char [14]
  1059 ;;  wifi           10   14[BANK1 ] unsigned char [10]
  1060 ;;  add             1   27[BANK1 ] unsigned char 
  1061 ;;  i               1   26[BANK1 ] unsigned char 
  1062 ;;  len_pass        1   25[BANK1 ] unsigned char 
  1063 ;;  len_wifi        1   24[BANK1 ] unsigned char 
  1064 ;; Return value:  Size  Location     Type
  1065 ;;                  1    wreg      void 
  1066 ;; Registers used:
  1067 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1068 ;; Tracked objects:
  1069 ;;		On entry : 0/0
  1070 ;;		On exit  : 0/0
  1071 ;;		Unchanged: 0/0
  1072 ;; Data sizes:     COMRAM   BANK0   BANK1
  1073 ;;      Params:         0       0       0
  1074 ;;      Locals:         0       0      28
  1075 ;;      Temps:          0       0       0
  1076 ;;      Totals:         0       0      28
  1077 ;;Total ram usage:       28 bytes
  1078 ;; Hardware stack levels used:    1
  1079 ;; Hardware stack levels required when called:   10
  1080 ;; This function calls:
  1081 ;;		_DATAEE_ReadByte
  1082 ;;		_ESP_config
  1083 ;; This function is called by:
  1084 ;;		_main
  1085 ;; This function uses a non-reentrant model
  1086 ;;
  1087                           
  1088                           	psect	text1
  1089  000860                     __ptext1:
  1090                           	opt stack 0
  1091  000860                     _read_wifi_settings:
  1092                           	opt stack 20
  1093                           
  1094                           ;logger.c: 246:     unsigned char i,len_wifi,len_pass,add;;logger.c: 249:     add = 0;
  1095                           
  1096                           ;incstack = 0
  1097  000860  0101               	movlb	1	; () banked
  1098  000862  6B5B               	clrf	read_wifi_settings@add& (0+255),b
  1099                           
  1100                           ; BSR set to: 1
  1101                           ;logger.c: 250:     len_wifi = DATAEE_ReadByte(add);
  1102  000864  0E00               	movlw	0
  1103  000866  EC19  F008         	call	_DATAEE_ReadByte
  1104  00086A  0101               	movlb	1	; () banked
  1105  00086C  6F58               	movwf	read_wifi_settings@len_wifi& (0+255),b
  1106                           
  1107                           ; BSR set to: 1
  1108                           ;logger.c: 251:     add++;
  1109  00086E  2B5B               	incf	read_wifi_settings@add& (0+255),f,b
  1110                           
  1111                           ; BSR set to: 1
  1112                           ;logger.c: 252:     for (i = 0; i < len_wifi; i++) {
  1113  000870  6B5A               	clrf	read_wifi_settings@i& (0+255),b
  1114  000872  D00D               	goto	l3791
  1115  000874                     l3785:
  1116                           
  1117                           ; BSR set to: 1
  1118                           ;logger.c: 253:         wifi[i] = DATAEE_ReadByte(add);
  1119  000874  0E4E               	movlw	low read_wifi_settings@wifi
  1120  000876  255A               	addwf	read_wifi_settings@i& (0+255),w,b
  1121  000878  6ED9               	movwf	fsr2l,c
  1122  00087A  6ADA               	clrf	fsr2h,c
  1123  00087C  0E01               	movlw	high read_wifi_settings@wifi
  1124  00087E  22DA               	addwfc	fsr2h,f,c
  1125  000880  515B               	movf	read_wifi_settings@add& (0+255),w,b
  1126  000882  EC19  F008         	call	_DATAEE_ReadByte
  1127  000886  6EDF               	movwf	indf2,c
  1128                           
  1129                           ;logger.c: 254:         add++;
  1130  000888  0101               	movlb	1	; () banked
  1131  00088A  2B5B               	incf	read_wifi_settings@add& (0+255),f,b
  1132                           
  1133                           ; BSR set to: 1
  1134                           ;logger.c: 255:     }
  1135  00088C  2B5A               	incf	read_wifi_settings@i& (0+255),f,b
  1136  00088E                     l3791:
  1137                           
  1138                           ; BSR set to: 1
  1139  00088E  5158               	movf	read_wifi_settings@len_wifi& (0+255),w,b
  1140  000890  5D5A               	subwf	read_wifi_settings@i& (0+255),w,b
  1141  000892  E3F0               	bnc	l3785
  1142                           
  1143                           ; BSR set to: 1
  1144                           ;logger.c: 257:     add = 20;
  1145  000894  0E14               	movlw	20
  1146  000896  6F5B               	movwf	read_wifi_settings@add& (0+255),b
  1147                           
  1148                           ; BSR set to: 1
  1149                           ;logger.c: 258:     len_pass = DATAEE_ReadByte(add);
  1150  000898  EC19  F008         	call	_DATAEE_ReadByte
  1151  00089C  0101               	movlb	1	; () banked
  1152  00089E  6F59               	movwf	read_wifi_settings@len_pass& (0+255),b
  1153                           
  1154                           ; BSR set to: 1
  1155                           ;logger.c: 259:     add++;
  1156  0008A0  2B5B               	incf	read_wifi_settings@add& (0+255),f,b
  1157                           
  1158                           ; BSR set to: 1
  1159                           ;logger.c: 260:     for (i = 0; i < len_pass; i++) {
  1160  0008A2  6B5A               	clrf	read_wifi_settings@i& (0+255),b
  1161  0008A4  D00D               	goto	l3807
  1162  0008A6                     l3801:
  1163                           
  1164                           ; BSR set to: 1
  1165                           ;logger.c: 261:         pass[i] = DATAEE_ReadByte(add);
  1166  0008A6  0E40               	movlw	low read_wifi_settings@pass
  1167  0008A8  255A               	addwf	read_wifi_settings@i& (0+255),w,b
  1168  0008AA  6ED9               	movwf	fsr2l,c
  1169  0008AC  6ADA               	clrf	fsr2h,c
  1170  0008AE  0E01               	movlw	high read_wifi_settings@pass
  1171  0008B0  22DA               	addwfc	fsr2h,f,c
  1172  0008B2  515B               	movf	read_wifi_settings@add& (0+255),w,b
  1173  0008B4  EC19  F008         	call	_DATAEE_ReadByte
  1174  0008B8  6EDF               	movwf	indf2,c
  1175                           
  1176                           ;logger.c: 262:         add++;
  1177  0008BA  0101               	movlb	1	; () banked
  1178  0008BC  2B5B               	incf	read_wifi_settings@add& (0+255),f,b
  1179                           
  1180                           ; BSR set to: 1
  1181                           ;logger.c: 263:     }
  1182  0008BE  2B5A               	incf	read_wifi_settings@i& (0+255),f,b
  1183  0008C0                     l3807:
  1184                           
  1185                           ; BSR set to: 1
  1186  0008C0  5159               	movf	read_wifi_settings@len_pass& (0+255),w,b
  1187  0008C2  5D5A               	subwf	read_wifi_settings@i& (0+255),w,b
  1188  0008C4  E3F0               	bnc	l3801
  1189                           
  1190                           ; BSR set to: 1
  1191                           ;logger.c: 272:     ESP_config(wifi,len_wifi,pass,len_pass);
  1192  0008C6  0E4E               	movlw	low read_wifi_settings@wifi
  1193  0008C8  6E1D               	movwf	ESP_config@wifi,c
  1194  0008CA  0E01               	movlw	high read_wifi_settings@wifi
  1195  0008CC  6E1E               	movwf	ESP_config@wifi+1,c
  1196  0008CE  C158  F01F         	movff	read_wifi_settings@len_wifi,ESP_config@len_wifi
  1197  0008D2  0E40               	movlw	low read_wifi_settings@pass
  1198  0008D4  6E20               	movwf	ESP_config@pass,c
  1199  0008D6  0E01               	movlw	high read_wifi_settings@pass
  1200  0008D8  6E21               	movwf	ESP_config@pass+1,c
  1201  0008DA  C159  F022         	movff	read_wifi_settings@len_pass,ESP_config@len_pass
  1202  0008DE  EFE8  F002         	goto	_ESP_config	;wreg free
  1203  0008E2                     __end_of_read_wifi_settings:
  1204                           	opt stack 0
  1205                           tblptru	equ	0xFF8
  1206                           intcon	equ	0xFF2
  1207                           postinc0	equ	0xFEE
  1208                           wreg	equ	0xFE8
  1209                           indf2	equ	0xFDF
  1210                           fsr2h	equ	0xFDA
  1211                           fsr2l	equ	0xFD9
  1212                           
  1213 ;; *************** function _ESP_config *****************
  1214 ;; Defined at:
  1215 ;;		line 82 in file "esp1.c"
  1216 ;; Parameters:    Size  Location     Type
  1217 ;;  wifi            2   28[COMRAM] PTR unsigned char 
  1218 ;;		 -> read_wifi_settings@wifi(10), 
  1219 ;;  len_wifi        1   30[COMRAM] unsigned char 
  1220 ;;  pass            2   31[COMRAM] PTR unsigned char 
  1221 ;;		 -> read_wifi_settings@pass(14), 
  1222 ;;  len_pass        1   33[COMRAM] unsigned char 
  1223 ;; Auto vars:     Size  Location     Type
  1224 ;;		None
  1225 ;; Return value:  Size  Location     Type
  1226 ;;                  1    wreg      void 
  1227 ;; Registers used:
  1228 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1229 ;; Tracked objects:
  1230 ;;		On entry : 3F/1
  1231 ;;		On exit  : 0/0
  1232 ;;		Unchanged: 0/0
  1233 ;; Data sizes:     COMRAM   BANK0   BANK1
  1234 ;;      Params:         6       0       0
  1235 ;;      Locals:         0       0       0
  1236 ;;      Temps:          2       0       0
  1237 ;;      Totals:         8       0       0
  1238 ;;Total ram usage:        8 bytes
  1239 ;; Hardware stack levels used:    1
  1240 ;; Hardware stack levels required when called:    9
  1241 ;; This function calls:
  1242 ;;		_ESP_wait_for
  1243 ;;		_EUSART_Read
  1244 ;;		_EUSART_is_rx_ready
  1245 ;;		__puts
  1246 ;;		_write
  1247 ;; This function is called by:
  1248 ;;		_read_wifi_settings
  1249 ;; This function uses a non-reentrant model
  1250 ;;
  1251                           
  1252                           	psect	text2
  1253  0005D0                     __ptext2:
  1254                           	opt stack 0
  1255  0005D0                     _ESP_config:
  1256                           	opt stack 20
  1257                           
  1258                           ; BSR set to: 1
  1259                           ;esp1.c: 82: void ESP_config(unsigned char *wifi, unsigned char len_wifi, unsigned char 
      +                          *pass, unsigned char len_pass);esp1.c: 83: {;esp1.c: 86:     _delay((unsigned long)((250
      +                          )*(64000000/4000.0)));
  1260                           
  1261                           ;incstack = 0
  1262  0005D0  0E15               	movlw	21
  1263  0005D2  6E24               	movwf	(??_ESP_config+1)& (0+255),c
  1264  0005D4  0E4B               	movlw	75
  1265  0005D6  6E23               	movwf	??_ESP_config& (0+255),c
  1266  0005D8  0EBE               	movlw	190
  1267  0005DA                     u2697:
  1268  0005DA  2EE8               	decfsz	wreg,f,c
  1269  0005DC  D7FE               	bra	u2697
  1270  0005DE  2E23               	decfsz	??_ESP_config& (0+255),f,c
  1271  0005E0  D7FC               	bra	u2697
  1272  0005E2  2E24               	decfsz	(??_ESP_config+1)& (0+255),f,c
  1273  0005E4  D7FA               	bra	u2697
  1274  0005E6  D000               	nop2	
  1275                           
  1276                           ;esp1.c: 87:     _delay((unsigned long)((250)*(64000000/4000.0)));
  1277  0005E8  0E15               	movlw	21
  1278  0005EA  6E24               	movwf	(??_ESP_config+1)& (0+255),c
  1279  0005EC  0E4B               	movlw	75
  1280  0005EE  6E23               	movwf	??_ESP_config& (0+255),c
  1281  0005F0  0EBE               	movlw	190
  1282  0005F2                     u2707:
  1283  0005F2  2EE8               	decfsz	wreg,f,c
  1284  0005F4  D7FE               	bra	u2707
  1285  0005F6  2E23               	decfsz	??_ESP_config& (0+255),f,c
  1286  0005F8  D7FC               	bra	u2707
  1287  0005FA  2E24               	decfsz	(??_ESP_config+1)& (0+255),f,c
  1288  0005FC  D7FA               	bra	u2707
  1289  0005FE  D000               	nop2	
  1290                           
  1291                           ;esp1.c: 88:     while(EUSART_is_rx_ready())
  1292  000600  D002               	goto	l3773
  1293  000602                     l3771:
  1294                           
  1295                           ;esp1.c: 89:         EUSART_Read();
  1296  000602  EC63  F007         	call	_EUSART_Read	;wreg free
  1297  000606                     l3773:
  1298                           
  1299                           ;esp1.c: 88:     while(EUSART_is_rx_ready())
  1300  000606  EC6F  F008         	call	_EUSART_is_rx_ready	;wreg free
  1301  00060A  0900               	iorlw	0
  1302  00060C  E1FA               	bnz	l3771
  1303                           
  1304                           ;esp1.c: 91:     _puts("AT\r\n");
  1305  00060E  0EBF               	movlw	low STR_8
  1306  000610  6E0A               	movwf	__puts@pt,c
  1307  000612  EC4B  F006         	call	__puts	;wreg free
  1308                           
  1309                           ;esp1.c: 92:     ESP_wait_for(ESP_OK);
  1310  000616  0E02               	movlw	2
  1311  000618  EC68  F006         	call	_ESP_wait_for
  1312                           
  1313                           ;esp1.c: 95:     _puts("AT+CWMODE=1\r\n");
  1314  00061C  0E3D               	movlw	low STR_9
  1315  00061E  6E0A               	movwf	__puts@pt,c
  1316  000620  EC4B  F006         	call	__puts	;wreg free
  1317                           
  1318                           ;esp1.c: 96:     ESP_wait_for(ESP_OK);
  1319  000624  0E02               	movlw	2
  1320  000626  EC68  F006         	call	_ESP_wait_for
  1321                           
  1322                           ;esp1.c: 100:     _puts("AT+CWJAP=\"");
  1323  00062A  0E7F               	movlw	low STR_10
  1324  00062C  6E0A               	movwf	__puts@pt,c
  1325  00062E  EC4B  F006         	call	__puts	;wreg free
  1326                           
  1327                           ;esp1.c: 101:     write(wifi,len_wifi);
  1328  000632  C01D  F00A         	movff	ESP_config@wifi,write@pt
  1329  000636  C01E  F00B         	movff	ESP_config@wifi+1,write@pt+1
  1330  00063A  C01F  F00C         	movff	ESP_config@len_wifi,write@lenght
  1331  00063E  ECA9  F005         	call	_write	;wreg free
  1332                           
  1333                           ;esp1.c: 102:     _puts("\",\"");
  1334  000642  0ED1               	movlw	low STR_11
  1335  000644  6E0A               	movwf	__puts@pt,c
  1336  000646  EC4B  F006         	call	__puts	;wreg free
  1337                           
  1338                           ;esp1.c: 103:     write(pass,len_pass);
  1339  00064A  C020  F00A         	movff	ESP_config@pass,write@pt
  1340  00064E  C021  F00B         	movff	ESP_config@pass+1,write@pt+1
  1341  000652  C022  F00C         	movff	ESP_config@len_pass,write@lenght
  1342  000656  ECA9  F005         	call	_write	;wreg free
  1343                           
  1344                           ;esp1.c: 104:     _puts("\"\r\n");
  1345  00065A  0ECD               	movlw	low STR_12
  1346  00065C  6E0A               	movwf	__puts@pt,c
  1347  00065E  EC4B  F006         	call	__puts	;wreg free
  1348                           
  1349                           ;esp1.c: 106:     ESP_wait_for(ESP_OK);
  1350  000662  0E02               	movlw	2
  1351  000664  EC68  F006         	call	_ESP_wait_for
  1352                           
  1353                           ;esp1.c: 109:     _puts("AT+CIPMUX=1\r\n");
  1354  000668  0E4B               	movlw	low STR_13
  1355  00066A  6E0A               	movwf	__puts@pt,c
  1356  00066C  EC4B  F006         	call	__puts	;wreg free
  1357                           
  1358                           ;esp1.c: 110:     ESP_wait_for(ESP_OK);
  1359  000670  0E02               	movlw	2
  1360  000672  EC68  F006         	call	_ESP_wait_for
  1361                           
  1362                           ;esp1.c: 113:     _puts("AT+CIPSERVER=1,80\r\n");
  1363  000676  0E17               	movlw	low STR_14
  1364  000678  6E0A               	movwf	__puts@pt,c
  1365  00067A  EC4B  F006         	call	__puts	;wreg free
  1366                           
  1367                           ;esp1.c: 114:     ESP_wait_for(ESP_OK);
  1368  00067E  0E02               	movlw	2
  1369  000680  EF68  F006         	goto	_ESP_wait_for
  1370  000684                     __end_of_ESP_config:
  1371                           	opt stack 0
  1372                           tblptru	equ	0xFF8
  1373                           intcon	equ	0xFF2
  1374                           postinc0	equ	0xFEE
  1375                           wreg	equ	0xFE8
  1376                           indf2	equ	0xFDF
  1377                           fsr2h	equ	0xFDA
  1378                           fsr2l	equ	0xFD9
  1379                           
  1380 ;; *************** function _EUSART_is_rx_ready *****************
  1381 ;; Defined at:
  1382 ;;		line 118 in file "mcc_generated_files/eusart.c"
  1383 ;; Parameters:    Size  Location     Type
  1384 ;;		None
  1385 ;; Auto vars:     Size  Location     Type
  1386 ;;		None
  1387 ;; Return value:  Size  Location     Type
  1388 ;;                  1    wreg      unsigned char 
  1389 ;; Registers used:
  1390 ;;		wreg, status,2
  1391 ;; Tracked objects:
  1392 ;;		On entry : 0/0
  1393 ;;		On exit  : 0/0
  1394 ;;		Unchanged: 0/0
  1395 ;; Data sizes:     COMRAM   BANK0   BANK1
  1396 ;;      Params:         0       0       0
  1397 ;;      Locals:         0       0       0
  1398 ;;      Temps:          0       0       0
  1399 ;;      Totals:         0       0       0
  1400 ;;Total ram usage:        0 bytes
  1401 ;; Hardware stack levels used:    1
  1402 ;; Hardware stack levels required when called:    4
  1403 ;; This function calls:
  1404 ;;		Nothing
  1405 ;; This function is called by:
  1406 ;;		_main
  1407 ;;		_ESP_config
  1408 ;; This function uses a non-reentrant model
  1409 ;;
  1410                           
  1411                           	psect	text3
  1412  0010DE                     __ptext3:
  1413                           	opt stack 0
  1414  0010DE                     _EUSART_is_rx_ready:
  1415                           	opt stack 24
  1416                           
  1417                           ;mcc_generated_files/eusart.c: 120:     return eusartRxCount;
  1418                           
  1419                           ;incstack = 0
  1420  0010DE  5041               	movf	_eusartRxCount,w,c	;volatile
  1421  0010E0  0012               	return		;funcret
  1422  0010E2                     __end_of_EUSART_is_rx_ready:
  1423                           	opt stack 0
  1424                           tblptru	equ	0xFF8
  1425                           intcon	equ	0xFF2
  1426                           postinc0	equ	0xFEE
  1427                           wreg	equ	0xFE8
  1428                           indf2	equ	0xFDF
  1429                           fsr2h	equ	0xFDA
  1430                           fsr2l	equ	0xFD9
  1431                           
  1432 ;; *************** function _DATAEE_ReadByte *****************
  1433 ;; Defined at:
  1434 ;;		line 195 in file "mcc_generated_files/memory.c"
  1435 ;; Parameters:    Size  Location     Type
  1436 ;;  bAdd            1    wreg     unsigned char 
  1437 ;; Auto vars:     Size  Location     Type
  1438 ;;  bAdd            1    8[COMRAM] unsigned char 
  1439 ;; Return value:  Size  Location     Type
  1440 ;;                  1    wreg      unsigned char 
  1441 ;; Registers used:
  1442 ;;		wreg, status,2
  1443 ;; Tracked objects:
  1444 ;;		On entry : 3F/1
  1445 ;;		On exit  : 0/0
  1446 ;;		Unchanged: 0/0
  1447 ;; Data sizes:     COMRAM   BANK0   BANK1
  1448 ;;      Params:         0       0       0
  1449 ;;      Locals:         1       0       0
  1450 ;;      Temps:          0       0       0
  1451 ;;      Totals:         1       0       0
  1452 ;;Total ram usage:        1 bytes
  1453 ;; Hardware stack levels used:    1
  1454 ;; Hardware stack levels required when called:    4
  1455 ;; This function calls:
  1456 ;;		Nothing
  1457 ;; This function is called by:
  1458 ;;		_read_wifi_settings
  1459 ;; This function uses a non-reentrant model
  1460 ;;
  1461                           
  1462                           	psect	text4
  1463  001032                     __ptext4:
  1464                           	opt stack 0
  1465  001032                     _DATAEE_ReadByte:
  1466                           	opt stack 25
  1467                           
  1468                           ;incstack = 0
  1469                           ;DATAEE_ReadByte@bAdd stored from wreg
  1470  001032  6E09               	movwf	DATAEE_ReadByte@bAdd,c
  1471                           
  1472                           ;mcc_generated_files/memory.c: 195: uint8_t DATAEE_ReadByte(uint8_t bAdd);mcc_generated_
      +                          files/memory.c: 196: {;mcc_generated_files/memory.c: 197:     EEADR = (uint8_t)(bAdd & 0
      +                          xFF);
  1473  001034  C009  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
  1474                           
  1475                           ;mcc_generated_files/memory.c: 198:     EECON1bits.CFGS = 0;
  1476  001038  9CA6               	bcf	4006,6,c	;volsfr
  1477                           
  1478                           ;mcc_generated_files/memory.c: 199:     EECON1bits.EEPGD = 0;
  1479  00103A  9EA6               	bcf	4006,7,c	;volsfr
  1480                           
  1481                           ;mcc_generated_files/memory.c: 200:     EECON1bits.RD = 1;
  1482  00103C  80A6               	bsf	4006,0,c	;volsfr
  1483                           
  1484                           ;mcc_generated_files/memory.c: 201:     __nop();
  1485  00103E  F000               	nop	
  1486                           
  1487                           ;mcc_generated_files/memory.c: 202:     __nop();
  1488  001040  F000               	nop	
  1489                           
  1490                           ;mcc_generated_files/memory.c: 204:     return (EEDATA);
  1491  001042  50A8               	movf	4008,w,c	;volatile
  1492  001044  0012               	return		;funcret
  1493  001046                     __end_of_DATAEE_ReadByte:
  1494                           	opt stack 0
  1495                           tblptru	equ	0xFF8
  1496                           intcon	equ	0xFF2
  1497                           postinc0	equ	0xFEE
  1498                           wreg	equ	0xFE8
  1499                           indf2	equ	0xFDF
  1500                           fsr2h	equ	0xFDA
  1501                           fsr2l	equ	0xFD9
  1502                           
  1503 ;; *************** function _read_analog *****************
  1504 ;; Defined at:
  1505 ;;		line 97 in file "logger.c"
  1506 ;; Parameters:    Size  Location     Type
  1507 ;;		None
  1508 ;; Auto vars:     Size  Location     Type
  1509 ;;  mess            6   41[COMRAM] unsigned char [6]
  1510 ;;  aux1            4   47[COMRAM] unsigned long 
  1511 ;;  adc_val         2   51[COMRAM] unsigned short 
  1512 ;; Return value:  Size  Location     Type
  1513 ;;                  1    wreg      void 
  1514 ;; Registers used:
  1515 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1516 ;; Tracked objects:
  1517 ;;		On entry : 0/0
  1518 ;;		On exit  : 0/0
  1519 ;;		Unchanged: 0/0
  1520 ;; Data sizes:     COMRAM   BANK0   BANK1
  1521 ;;      Params:         0       0       0
  1522 ;;      Locals:        12       0       0
  1523 ;;      Temps:          8       0       0
  1524 ;;      Totals:        20       0       0
  1525 ;;Total ram usage:       20 bytes
  1526 ;; Hardware stack levels used:    1
  1527 ;; Hardware stack levels required when called:   10
  1528 ;; This function calls:
  1529 ;;		_ESP_wait_for
  1530 ;;		_ESP_write
  1531 ;;		__sprintf
  1532 ;; This function is called by:
  1533 ;;		_main
  1534 ;; This function uses a non-reentrant model
  1535 ;;
  1536                           
  1537                           	psect	text5
  1538  0002E0                     __ptext5:
  1539                           	opt stack 0
  1540  0002E0                     _read_analog:
  1541                           	opt stack 20
  1542                           
  1543                           ;logger.c: 99:     unsigned short adc_val;;logger.c: 101:     unsigned long aux1;;logger
      +                          .c: 102:     unsigned char mess[6];;logger.c: 104:     adc_val = ADC_value;
  1544                           
  1545                           ;incstack = 0
  1546  0002E0  C038  F034         	movff	_ADC_value,read_analog@adc_val	;volatile
  1547  0002E4  C039  F035         	movff	_ADC_value+1,read_analog@adc_val+1	;volatile
  1548                           
  1549                           ;logger.c: 105:     ADC_state = ADC_IDLE;
  1550  0002E8  6A46               	clrf	_ADC_state,c	;volatile
  1551                           
  1552                           ;logger.c: 107:     if (message_format == MESSAGE_BINARY) {
  1553  0002EA  503C               	movf	_message_format,w,c	;volatile
  1554  0002EC  E11E               	bnz	l3673
  1555                           
  1556                           ;logger.c: 108:        WIFI_tx_buf[WIFI_tx_buf_ind++] = (unsigned char)(adc_val & 0xff);
  1557  0002EE  503A               	movf	_WIFI_tx_buf_ind,w,c
  1558  0002F0  0FA0               	addlw	low _WIFI_tx_buf
  1559  0002F2  6ED9               	movwf	fsr2l,c
  1560  0002F4  6ADA               	clrf	fsr2h,c
  1561  0002F6  C034  FFDF         	movff	read_analog@adc_val,indf2
  1562  0002FA  2A3A               	incf	_WIFI_tx_buf_ind,f,c	;volatile
  1563                           
  1564                           ;logger.c: 109:        WIFI_tx_buf[WIFI_tx_buf_ind++] = (unsigned char)((adc_val >> 8) &
      +                           0xff);
  1565  0002FC  503A               	movf	_WIFI_tx_buf_ind,w,c
  1566  0002FE  0FA0               	addlw	low _WIFI_tx_buf
  1567  000300  6ED9               	movwf	fsr2l,c
  1568  000302  6ADA               	clrf	fsr2h,c
  1569  000304  C035  FFDF         	movff	read_analog@adc_val+1,indf2
  1570  000308  2A3A               	incf	_WIFI_tx_buf_ind,f,c	;volatile
  1571                           
  1572                           ;logger.c: 111:        if (WIFI_tx_buf_ind == 64) {
  1573  00030A  0E40               	movlw	64
  1574  00030C  183A               	xorwf	_WIFI_tx_buf_ind,w,c	;volatile
  1575  00030E  A4D8               	btfss	status,2,c
  1576  000310  0012               	return	
  1577                           
  1578                           ;logger.c: 115:                 ESP_write(WIFI_tx_buf,64);
  1579  000312  0EA0               	movlw	low _WIFI_tx_buf
  1580  000314  6E1D               	movwf	ESP_write@pt,c
  1581  000316  6A1E               	clrf	ESP_write@pt+1,c
  1582  000318  0E40               	movlw	64
  1583  00031A  6E1F               	movwf	ESP_write@length,c
  1584  00031C  EC42  F003         	call	_ESP_write	;wreg free
  1585                           
  1586                           ;logger.c: 116:                 ESP_wait_for(ESP_SEND_OK);
  1587  000320  0E01               	movlw	1
  1588  000322  EC68  F006         	call	_ESP_wait_for
  1589                           
  1590                           ;logger.c: 118:             WIFI_tx_buf_ind = 0;
  1591  000326  6A3A               	clrf	_WIFI_tx_buf_ind,c	;volatile
  1592  000328  0012               	return	
  1593  00032A                     l3673:
  1594                           
  1595                           ;logger.c: 122:         aux1 = (unsigned long)adc_val*3300UL;
  1596  00032A  5034               	movf	read_analog@adc_val,w,c
  1597  00032C  6E22               	movwf	??_read_analog& (0+255),c
  1598  00032E  5035               	movf	read_analog@adc_val+1,w,c
  1599  000330  6E23               	movwf	(??_read_analog+1)& (0+255),c
  1600  000332  6A24               	clrf	(??_read_analog+2)& (0+255),c
  1601  000334  6A25               	clrf	(??_read_analog+3)& (0+255),c
  1602  000336  0EE4               	movlw	228
  1603  000338  0222               	mulwf	??_read_analog& (0+255),c
  1604  00033A  CFF3 F026          	movff	prodl,??_read_analog+4
  1605  00033E  CFF4 F027          	movff	prodh,??_read_analog+5
  1606  000342  6A28               	clrf	(??_read_analog+6)& (0+255),c
  1607  000344  6A29               	clrf	(??_read_analog+7)& (0+255),c
  1608  000346  0223               	mulwf	(??_read_analog+1)& (0+255),c
  1609  000348  50F3               	movf	prodl,w,c
  1610  00034A  2627               	addwf	(??_read_analog+5)& (0+255),f,c
  1611  00034C  50F4               	movf	prodh,w,c
  1612  00034E  2228               	addwfc	(??_read_analog+6)& (0+255),f,c
  1613  000350  0E00               	movlw	0
  1614  000352  2229               	addwfc	(??_read_analog+7)& (0+255),f,c
  1615  000354  0E0C               	movlw	12
  1616  000356  0222               	mulwf	??_read_analog& (0+255),c
  1617  000358  50F3               	movf	prodl,w,c
  1618  00035A  2627               	addwf	(??_read_analog+5)& (0+255),f,c
  1619  00035C  50F4               	movf	prodh,w,c
  1620  00035E  2228               	addwfc	(??_read_analog+6)& (0+255),f,c
  1621  000360  0E00               	movlw	0
  1622  000362  2229               	addwfc	(??_read_analog+7)& (0+255),f,c
  1623  000364  0EE4               	movlw	228
  1624  000366  0224               	mulwf	(??_read_analog+2)& (0+255),c
  1625  000368  50F3               	movf	prodl,w,c
  1626  00036A  2628               	addwf	(??_read_analog+6)& (0+255),f,c
  1627  00036C  50F4               	movf	prodh,w,c
  1628  00036E  2229               	addwfc	(??_read_analog+7)& (0+255),f,c
  1629  000370  0E0C               	movlw	12
  1630  000372  0223               	mulwf	(??_read_analog+1)& (0+255),c
  1631  000374  50F3               	movf	prodl,w,c
  1632  000376  2628               	addwf	(??_read_analog+6)& (0+255),f,c
  1633  000378  50F4               	movf	prodh,w,c
  1634  00037A  2229               	addwfc	(??_read_analog+7)& (0+255),f,c
  1635  00037C  0E00               	movlw	0
  1636  00037E  0222               	mulwf	??_read_analog& (0+255),c
  1637  000380  50F3               	movf	prodl,w,c
  1638  000382  2628               	addwf	(??_read_analog+6)& (0+255),f,c
  1639  000384  50F4               	movf	prodh,w,c
  1640  000386  2229               	addwfc	(??_read_analog+7)& (0+255),f,c
  1641  000388  0EE4               	movlw	228
  1642  00038A  0225               	mulwf	(??_read_analog+3)& (0+255),c
  1643  00038C  50F3               	movf	prodl,w,c
  1644  00038E  2629               	addwf	(??_read_analog+7)& (0+255),f,c
  1645  000390  0E0C               	movlw	12
  1646  000392  0224               	mulwf	(??_read_analog+2)& (0+255),c
  1647  000394  50F3               	movf	prodl,w,c
  1648  000396  2629               	addwf	(??_read_analog+7)& (0+255),f,c
  1649  000398  0E00               	movlw	0
  1650  00039A  0223               	mulwf	(??_read_analog+1)& (0+255),c
  1651  00039C  50F3               	movf	prodl,w,c
  1652  00039E  2629               	addwf	(??_read_analog+7)& (0+255),f,c
  1653  0003A0  0E00               	movlw	0
  1654  0003A2  0222               	mulwf	??_read_analog& (0+255),c
  1655  0003A4  50F3               	movf	prodl,w,c
  1656  0003A6  2629               	addwf	(??_read_analog+7)& (0+255),f,c
  1657  0003A8  C026  F030         	movff	??_read_analog+4,read_analog@aux1
  1658  0003AC  C027  F031         	movff	??_read_analog+5,read_analog@aux1+1
  1659  0003B0  C028  F032         	movff	??_read_analog+6,read_analog@aux1+2
  1660  0003B4  C029  F033         	movff	??_read_analog+7,read_analog@aux1+3
  1661                           
  1662                           ;logger.c: 123:         adc_val = (unsigned short)(aux1 >> 10);
  1663  0003B8  C030  F022         	movff	read_analog@aux1,??_read_analog
  1664  0003BC  C031  F023         	movff	read_analog@aux1+1,??_read_analog+1
  1665  0003C0  C032  F024         	movff	read_analog@aux1+2,??_read_analog+2
  1666  0003C4  C033  F025         	movff	read_analog@aux1+3,??_read_analog+3
  1667  0003C8  0E0B               	movlw	11
  1668  0003CA  D005               	goto	u2520
  1669  0003CC                     u2525:
  1670  0003CC  90D8               	bcf	status,0,c
  1671  0003CE  3225               	rrcf	??_read_analog+3,f,c
  1672  0003D0  3224               	rrcf	??_read_analog+2,f,c
  1673  0003D2  3223               	rrcf	??_read_analog+1,f,c
  1674  0003D4  3222               	rrcf	??_read_analog,f,c
  1675  0003D6                     u2520:
  1676  0003D6  2EE8               	decfsz	wreg,f,c
  1677  0003D8  D7F9               	goto	u2525
  1678  0003DA  C022  F034         	movff	??_read_analog,read_analog@adc_val
  1679  0003DE  C023  F035         	movff	??_read_analog+1,read_analog@adc_val+1
  1680                           
  1681                           ;logger.c: 125:         _sprintf(mess,adc_val);
  1682  0003E2  0E2A               	movlw	low read_analog@mess
  1683  0003E4  6E10               	movwf	__sprintf@mess,c
  1684  0003E6  C034  F011         	movff	read_analog@adc_val,__sprintf@val
  1685  0003EA  C035  F012         	movff	read_analog@adc_val+1,__sprintf@val+1
  1686  0003EE  EC05  F002         	call	__sprintf	;wreg free
  1687                           
  1688                           ;logger.c: 126:         mess[5] = '\n';
  1689  0003F2  0E0A               	movlw	10
  1690  0003F4  6E2F               	movwf	read_analog@mess+5,c
  1691                           
  1692                           ;logger.c: 130:             ESP_write(mess,6);
  1693  0003F6  0E2A               	movlw	low read_analog@mess
  1694  0003F8  6E1D               	movwf	ESP_write@pt,c
  1695  0003FA  6A1E               	clrf	ESP_write@pt+1,c
  1696  0003FC  0E06               	movlw	6
  1697  0003FE  6E1F               	movwf	ESP_write@length,c
  1698  000400  EC42  F003         	call	_ESP_write	;wreg free
  1699                           
  1700                           ;logger.c: 131:             ESP_wait_for(ESP_SEND_OK);
  1701  000404  0E01               	movlw	1
  1702  000406  EF68  F006         	goto	_ESP_wait_for
  1703  00040A                     __end_of_read_analog:
  1704                           	opt stack 0
  1705                           tblptru	equ	0xFF8
  1706                           prodh	equ	0xFF4
  1707                           prodl	equ	0xFF3
  1708                           intcon	equ	0xFF2
  1709                           postinc0	equ	0xFEE
  1710                           wreg	equ	0xFE8
  1711                           indf2	equ	0xFDF
  1712                           fsr2h	equ	0xFDA
  1713                           fsr2l	equ	0xFD9
  1714                           status	equ	0xFD8
  1715                           
  1716 ;; *************** function __sprintf *****************
  1717 ;; Defined at:
  1718 ;;		line 25 in file "comm.c"
  1719 ;; Parameters:    Size  Location     Type
  1720 ;;  mess            1   15[COMRAM] PTR unsigned char 
  1721 ;;		 -> read_analog@mess(6), 
  1722 ;;  val             2   16[COMRAM] unsigned short 
  1723 ;; Auto vars:     Size  Location     Type
  1724 ;;  aux             2   18[COMRAM] unsigned short 
  1725 ;; Return value:  Size  Location     Type
  1726 ;;                  1    wreg      void 
  1727 ;; Registers used:
  1728 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1729 ;; Tracked objects:
  1730 ;;		On entry : 0/0
  1731 ;;		On exit  : 0/0
  1732 ;;		Unchanged: 0/0
  1733 ;; Data sizes:     COMRAM   BANK0   BANK1
  1734 ;;      Params:         3       0       0
  1735 ;;      Locals:         2       0       0
  1736 ;;      Temps:          0       0       0
  1737 ;;      Totals:         5       0       0
  1738 ;;Total ram usage:        5 bytes
  1739 ;; Hardware stack levels used:    1
  1740 ;; Hardware stack levels required when called:    5
  1741 ;; This function calls:
  1742 ;;		___lwdiv
  1743 ;;		___lwmod
  1744 ;; This function is called by:
  1745 ;;		_read_analog
  1746 ;; This function uses a non-reentrant model
  1747 ;;
  1748                           
  1749                           	psect	text6
  1750  00040A                     __ptext6:
  1751                           	opt stack 0
  1752  00040A                     __sprintf:
  1753                           	opt stack 24
  1754                           
  1755                           ;comm.c: 25: void _sprintf(char *mess, unsigned short val);comm.c: 26: {;comm.c: 27:   u
      +                          nsigned short aux;;comm.c: 31:   aux = val%10;
  1756                           
  1757                           ;incstack = 0
  1758  00040A  C011  F009         	movff	__sprintf@val,___lwmod@dividend
  1759  00040E  C012  F00A         	movff	__sprintf@val+1,___lwmod@dividend+1
  1760  000412  6A0C               	clrf	___lwmod@divisor+1,c
  1761  000414  0E0A               	movlw	10
  1762  000416  6E0B               	movwf	___lwmod@divisor,c
  1763  000418  EC2C  F006         	call	___lwmod	;wreg free
  1764  00041C  C009  F013         	movff	?___lwmod,__sprintf@aux
  1765  000420  C00A  F014         	movff	?___lwmod+1,__sprintf@aux+1
  1766                           
  1767                           ;comm.c: 32:   val /= 10;
  1768  000424  C011  F009         	movff	__sprintf@val,___lwdiv@dividend
  1769  000428  C012  F00A         	movff	__sprintf@val+1,___lwdiv@dividend+1
  1770  00042C  6A0C               	clrf	___lwdiv@divisor+1,c
  1771  00042E  0E0A               	movlw	10
  1772  000430  6E0B               	movwf	___lwdiv@divisor,c
  1773  000432  EC84  F005         	call	___lwdiv	;wreg free
  1774  000436  C009  F011         	movff	?___lwdiv,__sprintf@val
  1775  00043A  C00A  F012         	movff	?___lwdiv+1,__sprintf@val+1
  1776                           
  1777                           ;comm.c: 34:   mess[5] = 0x00;
  1778  00043E  5010               	movf	__sprintf@mess,w,c
  1779  000440  6ED9               	movwf	fsr2l,c
  1780  000442  6ADA               	clrf	fsr2h,c
  1781  000444  0E05               	movlw	5
  1782  000446  26D9               	addwf	fsr2l,f,c
  1783  000448  6ADF               	clrf	indf2,c
  1784                           
  1785                           ;comm.c: 36:   mess[4] = (unsigned char)aux+'0';
  1786  00044A  5010               	movf	__sprintf@mess,w,c
  1787  00044C  6ED9               	movwf	fsr2l,c
  1788  00044E  6ADA               	clrf	fsr2h,c
  1789  000450  0E04               	movlw	4
  1790  000452  26D9               	addwf	fsr2l,f,c
  1791  000454  5013               	movf	__sprintf@aux,w,c
  1792  000456  0F30               	addlw	48
  1793  000458  6EDF               	movwf	indf2,c
  1794                           
  1795                           ;comm.c: 38:   aux = val%10;
  1796  00045A  C011  F009         	movff	__sprintf@val,___lwmod@dividend
  1797  00045E  C012  F00A         	movff	__sprintf@val+1,___lwmod@dividend+1
  1798  000462  6A0C               	clrf	___lwmod@divisor+1,c
  1799  000464  0E0A               	movlw	10
  1800  000466  6E0B               	movwf	___lwmod@divisor,c
  1801  000468  EC2C  F006         	call	___lwmod	;wreg free
  1802  00046C  C009  F013         	movff	?___lwmod,__sprintf@aux
  1803  000470  C00A  F014         	movff	?___lwmod+1,__sprintf@aux+1
  1804                           
  1805                           ;comm.c: 39:   val /= 10;
  1806  000474  C011  F009         	movff	__sprintf@val,___lwdiv@dividend
  1807  000478  C012  F00A         	movff	__sprintf@val+1,___lwdiv@dividend+1
  1808  00047C  6A0C               	clrf	___lwdiv@divisor+1,c
  1809  00047E  0E0A               	movlw	10
  1810  000480  6E0B               	movwf	___lwdiv@divisor,c
  1811  000482  EC84  F005         	call	___lwdiv	;wreg free
  1812  000486  C009  F011         	movff	?___lwdiv,__sprintf@val
  1813  00048A  C00A  F012         	movff	?___lwdiv+1,__sprintf@val+1
  1814                           
  1815                           ;comm.c: 41:   mess[3] = (unsigned char)aux+'0';
  1816  00048E  5010               	movf	__sprintf@mess,w,c
  1817  000490  6ED9               	movwf	fsr2l,c
  1818  000492  6ADA               	clrf	fsr2h,c
  1819  000494  0E03               	movlw	3
  1820  000496  26D9               	addwf	fsr2l,f,c
  1821  000498  5013               	movf	__sprintf@aux,w,c
  1822  00049A  0F30               	addlw	48
  1823  00049C  6EDF               	movwf	indf2,c
  1824                           
  1825                           ;comm.c: 43:   aux = val%10;
  1826  00049E  C011  F009         	movff	__sprintf@val,___lwmod@dividend
  1827  0004A2  C012  F00A         	movff	__sprintf@val+1,___lwmod@dividend+1
  1828  0004A6  6A0C               	clrf	___lwmod@divisor+1,c
  1829  0004A8  0E0A               	movlw	10
  1830  0004AA  6E0B               	movwf	___lwmod@divisor,c
  1831  0004AC  EC2C  F006         	call	___lwmod	;wreg free
  1832  0004B0  C009  F013         	movff	?___lwmod,__sprintf@aux
  1833  0004B4  C00A  F014         	movff	?___lwmod+1,__sprintf@aux+1
  1834                           
  1835                           ;comm.c: 44:   val /= 10;
  1836  0004B8  C011  F009         	movff	__sprintf@val,___lwdiv@dividend
  1837  0004BC  C012  F00A         	movff	__sprintf@val+1,___lwdiv@dividend+1
  1838  0004C0  6A0C               	clrf	___lwdiv@divisor+1,c
  1839  0004C2  0E0A               	movlw	10
  1840  0004C4  6E0B               	movwf	___lwdiv@divisor,c
  1841  0004C6  EC84  F005         	call	___lwdiv	;wreg free
  1842  0004CA  C009  F011         	movff	?___lwdiv,__sprintf@val
  1843  0004CE  C00A  F012         	movff	?___lwdiv+1,__sprintf@val+1
  1844                           
  1845                           ;comm.c: 46:   mess[2] = (unsigned char)aux+'0';
  1846  0004D2  5010               	movf	__sprintf@mess,w,c
  1847  0004D4  6ED9               	movwf	fsr2l,c
  1848  0004D6  6ADA               	clrf	fsr2h,c
  1849  0004D8  0E02               	movlw	2
  1850  0004DA  26D9               	addwf	fsr2l,f,c
  1851  0004DC  5013               	movf	__sprintf@aux,w,c
  1852  0004DE  0F30               	addlw	48
  1853  0004E0  6EDF               	movwf	indf2,c
  1854                           
  1855                           ;comm.c: 47:   mess[1] = '.';
  1856  0004E2  5010               	movf	__sprintf@mess,w,c
  1857  0004E4  6ED9               	movwf	fsr2l,c
  1858  0004E6  6ADA               	clrf	fsr2h,c
  1859  0004E8  2AD9               	incf	fsr2l,f,c
  1860  0004EA  0E2E               	movlw	46
  1861  0004EC  6EDF               	movwf	indf2,c
  1862                           
  1863                           ;comm.c: 48:   mess[0] = (unsigned char)val+'0';
  1864  0004EE  5010               	movf	__sprintf@mess,w,c
  1865  0004F0  6ED9               	movwf	fsr2l,c
  1866  0004F2  6ADA               	clrf	fsr2h,c
  1867  0004F4  5011               	movf	__sprintf@val,w,c
  1868  0004F6  0F30               	addlw	48
  1869  0004F8  6EDF               	movwf	indf2,c
  1870  0004FA  0012               	return		;funcret
  1871  0004FC                     __end_of__sprintf:
  1872                           	opt stack 0
  1873                           tblptru	equ	0xFF8
  1874                           prodh	equ	0xFF4
  1875                           prodl	equ	0xFF3
  1876                           intcon	equ	0xFF2
  1877                           postinc0	equ	0xFEE
  1878                           wreg	equ	0xFE8
  1879                           indf2	equ	0xFDF
  1880                           fsr2h	equ	0xFDA
  1881                           fsr2l	equ	0xFD9
  1882                           status	equ	0xFD8
  1883                           
  1884 ;; *************** function ___lwmod *****************
  1885 ;; Defined at:
  1886 ;;		line 7 in file "/opt/microchip/xc8/v2.00/pic/sources/c99/common/lwmod.c"
  1887 ;; Parameters:    Size  Location     Type
  1888 ;;  dividend        2    8[COMRAM] unsigned int 
  1889 ;;  divisor         2   10[COMRAM] unsigned int 
  1890 ;; Auto vars:     Size  Location     Type
  1891 ;;  counter         1   12[COMRAM] unsigned char 
  1892 ;; Return value:  Size  Location     Type
  1893 ;;                  2    8[COMRAM] unsigned int 
  1894 ;; Registers used:
  1895 ;;		wreg, status,2, status,0
  1896 ;; Tracked objects:
  1897 ;;		On entry : 0/0
  1898 ;;		On exit  : 0/0
  1899 ;;		Unchanged: 0/0
  1900 ;; Data sizes:     COMRAM   BANK0   BANK1
  1901 ;;      Params:         4       0       0
  1902 ;;      Locals:         1       0       0
  1903 ;;      Temps:          0       0       0
  1904 ;;      Totals:         5       0       0
  1905 ;;Total ram usage:        5 bytes
  1906 ;; Hardware stack levels used:    1
  1907 ;; Hardware stack levels required when called:    4
  1908 ;; This function calls:
  1909 ;;		Nothing
  1910 ;; This function is called by:
  1911 ;;		__sprintf
  1912 ;; This function uses a non-reentrant model
  1913 ;;
  1914                           
  1915                           	psect	text7
  1916  000C58                     __ptext7:
  1917                           	opt stack 0
  1918  000C58                     ___lwmod:
  1919                           	opt stack 24
  1920                           
  1921                           ;incstack = 0
  1922  000C58  500B               	movf	___lwmod@divisor,w,c
  1923  000C5A  100C               	iorwf	___lwmod@divisor+1,w,c
  1924  000C5C  E017               	bz	l1198
  1925  000C5E  0E01               	movlw	1
  1926  000C60  6E0D               	movwf	___lwmod@counter,c
  1927  000C62  D004               	goto	l2701
  1928  000C64                     l2699:
  1929  000C64  90D8               	bcf	status,0,c
  1930  000C66  360B               	rlcf	___lwmod@divisor,f,c
  1931  000C68  360C               	rlcf	___lwmod@divisor+1,f,c
  1932  000C6A  2A0D               	incf	___lwmod@counter,f,c
  1933  000C6C                     l2701:
  1934  000C6C  AE0C               	btfss	___lwmod@divisor+1,7,c
  1935  000C6E  D7FA               	goto	l2699
  1936  000C70                     u1520:
  1937  000C70  500B               	movf	___lwmod@divisor,w,c
  1938  000C72  5C09               	subwf	___lwmod@dividend,w,c
  1939  000C74  500C               	movf	___lwmod@divisor+1,w,c
  1940  000C76  580A               	subwfb	___lwmod@dividend+1,w,c
  1941  000C78  E304               	bnc	l2707
  1942  000C7A  500B               	movf	___lwmod@divisor,w,c
  1943  000C7C  5E09               	subwf	___lwmod@dividend,f,c
  1944  000C7E  500C               	movf	___lwmod@divisor+1,w,c
  1945  000C80  5A0A               	subwfb	___lwmod@dividend+1,f,c
  1946  000C82                     l2707:
  1947  000C82  90D8               	bcf	status,0,c
  1948  000C84  320C               	rrcf	___lwmod@divisor+1,f,c
  1949  000C86  320B               	rrcf	___lwmod@divisor,f,c
  1950  000C88  2E0D               	decfsz	___lwmod@counter,f,c
  1951  000C8A  D7F2               	goto	u1520
  1952  000C8C                     l1198:
  1953  000C8C  C009  F009         	movff	___lwmod@dividend,?___lwmod
  1954  000C90  C00A  F00A         	movff	___lwmod@dividend+1,?___lwmod+1
  1955  000C94  0012               	return		;funcret
  1956  000C96                     __end_of___lwmod:
  1957                           	opt stack 0
  1958                           tblptru	equ	0xFF8
  1959                           prodh	equ	0xFF4
  1960                           prodl	equ	0xFF3
  1961                           intcon	equ	0xFF2
  1962                           postinc0	equ	0xFEE
  1963                           wreg	equ	0xFE8
  1964                           indf2	equ	0xFDF
  1965                           fsr2h	equ	0xFDA
  1966                           fsr2l	equ	0xFD9
  1967                           status	equ	0xFD8
  1968                           
  1969 ;; *************** function ___lwdiv *****************
  1970 ;; Defined at:
  1971 ;;		line 7 in file "/opt/microchip/xc8/v2.00/pic/sources/c99/common/lwdiv.c"
  1972 ;; Parameters:    Size  Location     Type
  1973 ;;  dividend        2    8[COMRAM] unsigned int 
  1974 ;;  divisor         2   10[COMRAM] unsigned int 
  1975 ;; Auto vars:     Size  Location     Type
  1976 ;;  quotient        2   12[COMRAM] unsigned int 
  1977 ;;  counter         1   14[COMRAM] unsigned char 
  1978 ;; Return value:  Size  Location     Type
  1979 ;;                  2    8[COMRAM] unsigned int 
  1980 ;; Registers used:
  1981 ;;		wreg, status,2, status,0
  1982 ;; Tracked objects:
  1983 ;;		On entry : 0/0
  1984 ;;		On exit  : 0/0
  1985 ;;		Unchanged: 0/0
  1986 ;; Data sizes:     COMRAM   BANK0   BANK1
  1987 ;;      Params:         4       0       0
  1988 ;;      Locals:         3       0       0
  1989 ;;      Temps:          0       0       0
  1990 ;;      Totals:         7       0       0
  1991 ;;Total ram usage:        7 bytes
  1992 ;; Hardware stack levels used:    1
  1993 ;; Hardware stack levels required when called:    4
  1994 ;; This function calls:
  1995 ;;		Nothing
  1996 ;; This function is called by:
  1997 ;;		__sprintf
  1998 ;; This function uses a non-reentrant model
  1999 ;;
  2000                           
  2001                           	psect	text8
  2002  000B08                     __ptext8:
  2003                           	opt stack 0
  2004  000B08                     ___lwdiv:
  2005                           	opt stack 24
  2006                           
  2007                           ;incstack = 0
  2008  000B08  6A0D               	clrf	___lwdiv@quotient,c
  2009  000B0A  6A0E               	clrf	___lwdiv@quotient+1,c
  2010  000B0C  500B               	movf	___lwdiv@divisor,w,c
  2011  000B0E  100C               	iorwf	___lwdiv@divisor+1,w,c
  2012  000B10  E01B               	bz	l1188
  2013  000B12  0E01               	movlw	1
  2014  000B14  6E0F               	movwf	___lwdiv@counter,c
  2015  000B16  D004               	goto	l2681
  2016  000B18                     l2679:
  2017  000B18  90D8               	bcf	status,0,c
  2018  000B1A  360B               	rlcf	___lwdiv@divisor,f,c
  2019  000B1C  360C               	rlcf	___lwdiv@divisor+1,f,c
  2020  000B1E  2A0F               	incf	___lwdiv@counter,f,c
  2021  000B20                     l2681:
  2022  000B20  AE0C               	btfss	___lwdiv@divisor+1,7,c
  2023  000B22  D7FA               	goto	l2679
  2024  000B24                     u1490:
  2025  000B24  90D8               	bcf	status,0,c
  2026  000B26  360D               	rlcf	___lwdiv@quotient,f,c
  2027  000B28  360E               	rlcf	___lwdiv@quotient+1,f,c
  2028  000B2A  500B               	movf	___lwdiv@divisor,w,c
  2029  000B2C  5C09               	subwf	___lwdiv@dividend,w,c
  2030  000B2E  500C               	movf	___lwdiv@divisor+1,w,c
  2031  000B30  580A               	subwfb	___lwdiv@dividend+1,w,c
  2032  000B32  E305               	bnc	l2691
  2033  000B34  500B               	movf	___lwdiv@divisor,w,c
  2034  000B36  5E09               	subwf	___lwdiv@dividend,f,c
  2035  000B38  500C               	movf	___lwdiv@divisor+1,w,c
  2036  000B3A  5A0A               	subwfb	___lwdiv@dividend+1,f,c
  2037  000B3C  800D               	bsf	___lwdiv@quotient,0,c
  2038  000B3E                     l2691:
  2039  000B3E  90D8               	bcf	status,0,c
  2040  000B40  320C               	rrcf	___lwdiv@divisor+1,f,c
  2041  000B42  320B               	rrcf	___lwdiv@divisor,f,c
  2042  000B44  2E0F               	decfsz	___lwdiv@counter,f,c
  2043  000B46  D7EE               	goto	u1490
  2044  000B48                     l1188:
  2045  000B48  C00D  F009         	movff	___lwdiv@quotient,?___lwdiv
  2046  000B4C  C00E  F00A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2047  000B50  0012               	return		;funcret
  2048  000B52                     __end_of___lwdiv:
  2049                           	opt stack 0
  2050                           tblptru	equ	0xFF8
  2051                           prodh	equ	0xFF4
  2052                           prodl	equ	0xFF3
  2053                           intcon	equ	0xFF2
  2054                           postinc0	equ	0xFEE
  2055                           wreg	equ	0xFE8
  2056                           indf2	equ	0xFDF
  2057                           fsr2h	equ	0xFDA
  2058                           fsr2l	equ	0xFD9
  2059                           status	equ	0xFD8
  2060                           
  2061 ;; *************** function _process_ioc *****************
  2062 ;; Defined at:
  2063 ;;		line 172 in file "logger.c"
  2064 ;; Parameters:    Size  Location     Type
  2065 ;;		None
  2066 ;; Auto vars:     Size  Location     Type
  2067 ;;		None
  2068 ;; Return value:  Size  Location     Type
  2069 ;;                  1    wreg      void 
  2070 ;; Registers used:
  2071 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2072 ;; Tracked objects:
  2073 ;;		On entry : 0/0
  2074 ;;		On exit  : 0/0
  2075 ;;		Unchanged: 0/0
  2076 ;; Data sizes:     COMRAM   BANK0   BANK1
  2077 ;;      Params:         0       0       0
  2078 ;;      Locals:         0       0       0
  2079 ;;      Temps:          0       0       0
  2080 ;;      Totals:         0       0       0
  2081 ;;Total ram usage:        0 bytes
  2082 ;; Hardware stack levels used:    1
  2083 ;; Hardware stack levels required when called:   10
  2084 ;; This function calls:
  2085 ;;		_ESP_wait_for
  2086 ;;		_ESP_write
  2087 ;; This function is called by:
  2088 ;;		_main
  2089 ;; This function uses a non-reentrant model
  2090 ;;
  2091                           
  2092                           	psect	text9
  2093  000D0A                     __ptext9:
  2094                           	opt stack 0
  2095  000D0A                     _process_ioc:
  2096                           	opt stack 20
  2097                           
  2098                           ;logger.c: 174:     IOC_state = IOC_IDLE;
  2099                           
  2100                           ;incstack = 0
  2101  000D0A  6A40               	clrf	_IOC_state,c	;volatile
  2102                           
  2103                           ;logger.c: 175:      if (IOC_value) {
  2104  000D0C  5054               	movf	_IOC_value,w,c	;volatile
  2105  000D0E  E00B               	bz	l3691
  2106                           
  2107                           ;logger.c: 179:             ESP_write("CH",2);
  2108  000D10  0ED5               	movlw	low STR_23
  2109  000D12  6E1D               	movwf	ESP_write@pt,c
  2110  000D14  501D               	movf	ESP_write@pt,w,c
  2111  000D16  A4D8               	btfss	status,2,c
  2112  000D18  0E02               	movlw	high __smallconst
  2113  000D1A  6E1E               	movwf	ESP_write@pt+1,c
  2114  000D1C  0E02               	movlw	2
  2115  000D1E  6E1F               	movwf	ESP_write@length,c
  2116  000D20  EC42  F003         	call	_ESP_write	;wreg free
  2117  000D24  D00A               	goto	L3
  2118  000D26                     l3691:
  2119                           
  2120                           ;logger.c: 186:             ESP_write("CL",2);
  2121  000D26  0ED8               	movlw	low STR_24
  2122  000D28  6E1D               	movwf	ESP_write@pt,c
  2123  000D2A  501D               	movf	ESP_write@pt,w,c
  2124  000D2C  A4D8               	btfss	status,2,c
  2125  000D2E  0E02               	movlw	high __smallconst
  2126  000D30  6E1E               	movwf	ESP_write@pt+1,c
  2127  000D32  0E02               	movlw	2
  2128  000D34  6E1F               	movwf	ESP_write@length,c
  2129  000D36  EC42  F003         	call	_ESP_write	;wreg free
  2130  000D3A                     L3:
  2131                           
  2132                           ;logger.c: 187:             ESP_wait_for(ESP_SEND_OK);
  2133  000D3A  0E01               	movlw	1
  2134  000D3C  EF68  F006         	goto	_ESP_wait_for
  2135  000D40                     __end_of_process_ioc:
  2136                           	opt stack 0
  2137                           tblptru	equ	0xFF8
  2138                           prodh	equ	0xFF4
  2139                           prodl	equ	0xFF3
  2140                           intcon	equ	0xFF2
  2141                           postinc0	equ	0xFEE
  2142                           wreg	equ	0xFE8
  2143                           indf2	equ	0xFDF
  2144                           fsr2h	equ	0xFDA
  2145                           fsr2l	equ	0xFD9
  2146                           status	equ	0xFD8
  2147                           
  2148 ;; *************** function _logger_initialize *****************
  2149 ;; Defined at:
  2150 ;;		line 20 in file "logger.c"
  2151 ;; Parameters:    Size  Location     Type
  2152 ;;		None
  2153 ;; Auto vars:     Size  Location     Type
  2154 ;;		None
  2155 ;; Return value:  Size  Location     Type
  2156 ;;                  1    wreg      void 
  2157 ;; Registers used:
  2158 ;;		wreg, status,2, status,0, cstack
  2159 ;; Tracked objects:
  2160 ;;		On entry : 0/0
  2161 ;;		On exit  : 0/0
  2162 ;;		Unchanged: 0/0
  2163 ;; Data sizes:     COMRAM   BANK0   BANK1
  2164 ;;      Params:         0       0       0
  2165 ;;      Locals:         0       0       0
  2166 ;;      Temps:          0       0       0
  2167 ;;      Totals:         0       0       0
  2168 ;;Total ram usage:        0 bytes
  2169 ;; Hardware stack levels used:    1
  2170 ;; Hardware stack levels required when called:    5
  2171 ;; This function calls:
  2172 ;;		_ADC1_SelectChannel
  2173 ;;		_ESP_Set_application_handler
  2174 ;;		_IOCA4_SetInterruptHandler
  2175 ;;		_TMR1_SetInterruptHandler
  2176 ;;		_TMR1_StopTimer
  2177 ;; This function is called by:
  2178 ;;		_main
  2179 ;; This function uses a non-reentrant model
  2180 ;;
  2181                           
  2182                           	psect	text10
  2183  000B98                     __ptext10:
  2184                           	opt stack 0
  2185  000B98                     _logger_initialize:
  2186                           	opt stack 25
  2187                           
  2188                           ;logger.c: 22:     message_format = MESSAGE_BINARY;
  2189                           
  2190                           ;incstack = 0
  2191  000B98  6A3C               	clrf	_message_format,c	;volatile
  2192                           
  2193                           ;logger.c: 24:     ADC1_SelectChannel(channel_AN2);
  2194  000B9A  0E02               	movlw	2
  2195  000B9C  EC01  F008         	call	_ADC1_SelectChannel
  2196                           
  2197                           ;logger.c: 25:     ADC_state = ADC_IDLE;
  2198  000BA0  6A46               	clrf	_ADC_state,c	;volatile
  2199                           
  2200                           ;logger.c: 26:     ADC_value = 0;
  2201  000BA2  6A38               	clrf	_ADC_value,c	;volatile
  2202  000BA4  6A39               	clrf	_ADC_value+1,c	;volatile
  2203                           
  2204                           ;logger.c: 27:     ADC_count = 0;
  2205  000BA6  6A47               	clrf	_ADC_count,c	;volatile
  2206                           
  2207                           ;logger.c: 29:     TMR1_StopTimer();
  2208  000BA8  EC75  F008         	call	_TMR1_StopTimer	;wreg free
  2209                           
  2210                           ;logger.c: 30:     TMR1_state = TMR1_STOP;
  2211  000BAC  6A3B               	clrf	_TMR1_state,c	;volatile
  2212                           
  2213                           ;logger.c: 31:     TMR1_SetInterruptHandler(_TMR1_Ready);
  2214  000BAE  0ECA               	movlw	low __TMR1_Ready
  2215  000BB0  6E09               	movwf	TMR1_SetInterruptHandler@InterruptHandler,c
  2216  000BB2  0E10               	movlw	high __TMR1_Ready
  2217  000BB4  6E0A               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1,c
  2218  000BB6  EC4C  F008         	call	_TMR1_SetInterruptHandler	;wreg free
  2219                           
  2220                           ;logger.c: 33:     IOCA4_SetInterruptHandler(_IOC_Ready);
  2221  000BBA  0E8A               	movlw	low __IOC_Ready
  2222  000BBC  6E09               	movwf	IOCA4_SetInterruptHandler@InterruptHandler,c
  2223  000BBE  0E10               	movlw	high __IOC_Ready
  2224  000BC0  6E0A               	movwf	IOCA4_SetInterruptHandler@InterruptHandler+1,c
  2225  000BC2  EC51  F008         	call	_IOCA4_SetInterruptHandler	;wreg free
  2226                           
  2227                           ;logger.c: 34:     IOC_state = IOC_IDLE;
  2228  000BC6  6A40               	clrf	_IOC_state,c	;volatile
  2229                           
  2230                           ;logger.c: 35:     IOC_value = 1;
  2231  000BC8  0E01               	movlw	1
  2232  000BCA  6E54               	movwf	_IOC_value,c	;volatile
  2233                           
  2234                           ;logger.c: 37:     ESP_Set_application_handler(process_message);
  2235  000BCC  0E50               	movlw	low _process_message
  2236  000BCE  6E09               	movwf	ESP_Set_application_handler@applicationHandler,c
  2237  000BD0  0E0A               	movlw	high _process_message
  2238  000BD2  6E0A               	movwf	ESP_Set_application_handler@applicationHandler+1,c
  2239  000BD4  EF60  F008         	goto	_ESP_Set_application_handler	;wreg free
  2240  000BD8                     __end_of_logger_initialize:
  2241                           	opt stack 0
  2242                           tblptru	equ	0xFF8
  2243                           prodh	equ	0xFF4
  2244                           prodl	equ	0xFF3
  2245                           intcon	equ	0xFF2
  2246                           postinc0	equ	0xFEE
  2247                           wreg	equ	0xFE8
  2248                           indf2	equ	0xFDF
  2249                           fsr2h	equ	0xFDA
  2250                           fsr2l	equ	0xFD9
  2251                           status	equ	0xFD8
  2252                           
  2253 ;; *************** function _ADC1_SelectChannel *****************
  2254 ;; Defined at:
  2255 ;;		line 83 in file "mcc_generated_files/adc1.c"
  2256 ;; Parameters:    Size  Location     Type
  2257 ;;  channel         1    wreg     enum E2441
  2258 ;; Auto vars:     Size  Location     Type
  2259 ;;  channel         1    9[COMRAM] enum E2441
  2260 ;; Return value:  Size  Location     Type
  2261 ;;                  1    wreg      void 
  2262 ;; Registers used:
  2263 ;;		wreg, status,2, status,0
  2264 ;; Tracked objects:
  2265 ;;		On entry : 0/0
  2266 ;;		On exit  : 0/0
  2267 ;;		Unchanged: 0/0
  2268 ;; Data sizes:     COMRAM   BANK0   BANK1
  2269 ;;      Params:         0       0       0
  2270 ;;      Locals:         1       0       0
  2271 ;;      Temps:          1       0       0
  2272 ;;      Totals:         2       0       0
  2273 ;;Total ram usage:        2 bytes
  2274 ;; Hardware stack levels used:    1
  2275 ;; Hardware stack levels required when called:    4
  2276 ;; This function calls:
  2277 ;;		Nothing
  2278 ;; This function is called by:
  2279 ;;		_logger_initialize
  2280 ;; This function uses a non-reentrant model
  2281 ;;
  2282                           
  2283                           	psect	text11
  2284  001002                     __ptext11:
  2285                           	opt stack 0
  2286  001002                     _ADC1_SelectChannel:
  2287                           	opt stack 25
  2288                           
  2289                           ;incstack = 0
  2290                           ;ADC1_SelectChannel@channel stored from wreg
  2291  001002  6E0A               	movwf	ADC1_SelectChannel@channel,c
  2292                           
  2293                           ;mcc_generated_files/adc1.c: 83: void ADC1_SelectChannel(adc_channel_t channel);mcc_gene
      +                          rated_files/adc1.c: 84: {;mcc_generated_files/adc1.c: 86:     ADCON0bits.CHS = channel;
  2294  001004  C00A  F009         	movff	ADC1_SelectChannel@channel,??_ADC1_SelectChannel
  2295  001008  4609               	rlncf	??_ADC1_SelectChannel,f,c
  2296  00100A  4609               	rlncf	??_ADC1_SelectChannel,f,c
  2297  00100C  50C2               	movf	4034,w,c	;volatile
  2298  00100E  1809               	xorwf	??_ADC1_SelectChannel,w,c
  2299  001010  0BC3               	andlw	-61
  2300  001012  1809               	xorwf	??_ADC1_SelectChannel,w,c
  2301  001014  6EC2               	movwf	4034,c	;volatile
  2302                           
  2303                           ;mcc_generated_files/adc1.c: 88:     ADCON0bits.ADON = 1;
  2304  001016  80C2               	bsf	4034,0,c	;volatile
  2305  001018  0012               	return		;funcret
  2306  00101A                     __end_of_ADC1_SelectChannel:
  2307                           	opt stack 0
  2308                           tblptru	equ	0xFF8
  2309                           prodh	equ	0xFF4
  2310                           prodl	equ	0xFF3
  2311                           intcon	equ	0xFF2
  2312                           postinc0	equ	0xFEE
  2313                           wreg	equ	0xFE8
  2314                           indf2	equ	0xFDF
  2315                           fsr2h	equ	0xFDA
  2316                           fsr2l	equ	0xFD9
  2317                           status	equ	0xFD8
  2318                           
  2319 ;; *************** function _config_wifi_settings *****************
  2320 ;; Defined at:
  2321 ;;		line 193 in file "logger.c"
  2322 ;; Parameters:    Size  Location     Type
  2323 ;;		None
  2324 ;; Auto vars:     Size  Location     Type
  2325 ;;  line           16   13[COMRAM] unsigned char [16]
  2326 ;;  len             1   31[COMRAM] unsigned char 
  2327 ;;  address         1   30[COMRAM] unsigned char 
  2328 ;;  i               1   29[COMRAM] unsigned char 
  2329 ;; Return value:  Size  Location     Type
  2330 ;;                  1    wreg      void 
  2331 ;; Registers used:
  2332 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2333 ;; Tracked objects:
  2334 ;;		On entry : 0/0
  2335 ;;		On exit  : 0/0
  2336 ;;		Unchanged: 0/0
  2337 ;; Data sizes:     COMRAM   BANK0   BANK1
  2338 ;;      Params:         0       0       0
  2339 ;;      Locals:        19       0       0
  2340 ;;      Temps:          0       0       0
  2341 ;;      Totals:        19       0       0
  2342 ;;Total ram usage:       19 bytes
  2343 ;; Hardware stack levels used:    1
  2344 ;; Hardware stack levels required when called:    6
  2345 ;; This function calls:
  2346 ;;		_DATAEE_WriteByte
  2347 ;;		__gets
  2348 ;;		__puts
  2349 ;; This function is called by:
  2350 ;;		_main
  2351 ;; This function uses a non-reentrant model
  2352 ;;
  2353                           
  2354                           	psect	text12
  2355  000730                     __ptext12:
  2356                           	opt stack 0
  2357  000730                     _config_wifi_settings:
  2358                           	opt stack 24
  2359                           
  2360                           ;logger.c: 195:     unsigned char line[16];;logger.c: 196:     unsigned char len, addres
      +                          s, i;;logger.c: 198:     _puts("Logger V1.0\n");
  2361                           
  2362                           ;incstack = 0
  2363  000730  0E59               	movlw	low STR_25
  2364  000732  6E0A               	movwf	__puts@pt,c
  2365  000734  EC4B  F006         	call	__puts	;wreg free
  2366                           
  2367                           ;logger.c: 199:     _puts("enter wlan name:\n");
  2368  000738  0E2B               	movlw	low STR_26
  2369  00073A  6E0A               	movwf	__puts@pt,c
  2370  00073C  EC4B  F006         	call	__puts	;wreg free
  2371                           
  2372                           ;logger.c: 201:     len = _gets(line,16);
  2373  000740  0E0E               	movlw	low config_wifi_settings@line
  2374  000742  6E0A               	movwf	__gets@pt,c
  2375  000744  0E10               	movlw	16
  2376  000746  6E0B               	movwf	__gets@length,c
  2377  000748  ECD6  F006         	call	__gets	;wreg free
  2378  00074C  6E20               	movwf	config_wifi_settings@len,c
  2379                           
  2380                           ;logger.c: 203:     if (!len) {
  2381  00074E  5020               	movf	config_wifi_settings@len,w,c
  2382  000750  E101               	bnz	l683
  2383  000752  D024               	goto	u2460
  2384  000754                     l683:
  2385                           
  2386                           ;logger.c: 208:     address = 0;
  2387  000754  6A1F               	clrf	config_wifi_settings@address,c
  2388                           
  2389                           ;logger.c: 209:     DATAEE_WriteByte(address,len);
  2390  000756  C020  F009         	movff	config_wifi_settings@len,DATAEE_WriteByte@bData
  2391  00075A  0E00               	movlw	0
  2392  00075C  ECA0  F006         	call	_DATAEE_WriteByte
  2393                           
  2394                           ;logger.c: 210:     address++;
  2395  000760  2A1F               	incf	config_wifi_settings@address,f,c
  2396                           
  2397                           ;logger.c: 211:     for (i=0; i < len; i++) {
  2398  000762  6A1E               	clrf	config_wifi_settings@i,c
  2399  000764  D00B               	goto	l3583
  2400  000766                     l3577:
  2401                           
  2402                           ;logger.c: 212:         DATAEE_WriteByte(address,line[i]);
  2403  000766  501E               	movf	config_wifi_settings@i,w,c
  2404  000768  0F0E               	addlw	low config_wifi_settings@line
  2405  00076A  6ED9               	movwf	fsr2l,c
  2406  00076C  6ADA               	clrf	fsr2h,c
  2407  00076E  50DF               	movf	indf2,w,c
  2408  000770  6E09               	movwf	DATAEE_WriteByte@bData,c
  2409  000772  501F               	movf	config_wifi_settings@address,w,c
  2410  000774  ECA0  F006         	call	_DATAEE_WriteByte
  2411                           
  2412                           ;logger.c: 213:         address++;
  2413  000778  2A1F               	incf	config_wifi_settings@address,f,c
  2414                           
  2415                           ;logger.c: 214:     }
  2416  00077A  2A1E               	incf	config_wifi_settings@i,f,c
  2417  00077C                     l3583:
  2418  00077C  5020               	movf	config_wifi_settings@len,w,c
  2419  00077E  5C1E               	subwf	config_wifi_settings@i,w,c
  2420  000780  E3F2               	bnc	l3577
  2421                           
  2422                           ;logger.c: 216:     _puts("enter wlan password:\n");
  2423  000782  0E01               	movlw	low STR_28
  2424  000784  6E0A               	movwf	__puts@pt,c
  2425  000786  EC4B  F006         	call	__puts	;wreg free
  2426                           
  2427                           ;logger.c: 218:     len = _gets(line,16);
  2428  00078A  0E0E               	movlw	low config_wifi_settings@line
  2429  00078C  6E0A               	movwf	__gets@pt,c
  2430  00078E  0E10               	movlw	16
  2431  000790  6E0B               	movwf	__gets@length,c
  2432  000792  ECD6  F006         	call	__gets	;wreg free
  2433  000796  6E20               	movwf	config_wifi_settings@len,c
  2434                           
  2435                           ;logger.c: 220:     if (!len) {
  2436  000798  5020               	movf	config_wifi_settings@len,w,c
  2437  00079A  E104               	bnz	l3595
  2438  00079C                     u2460:
  2439                           
  2440                           ;logger.c: 221:         _puts("buffer error");
  2441  00079C  0E66               	movlw	low STR_27
  2442  00079E  6E0A               	movwf	__puts@pt,c
  2443  0007A0  EF4B  F006         	goto	__puts	;wreg free
  2444  0007A4                     l3595:
  2445                           
  2446                           ;logger.c: 225:     address = 20;
  2447  0007A4  0E14               	movlw	20
  2448  0007A6  6E1F               	movwf	config_wifi_settings@address,c
  2449                           
  2450                           ;logger.c: 226:     DATAEE_WriteByte(address,len);
  2451  0007A8  C020  F009         	movff	config_wifi_settings@len,DATAEE_WriteByte@bData
  2452  0007AC  ECA0  F006         	call	_DATAEE_WriteByte
  2453                           
  2454                           ;logger.c: 227:     address++;
  2455  0007B0  2A1F               	incf	config_wifi_settings@address,f,c
  2456                           
  2457                           ;logger.c: 228:     for (i=0; i < len; i++) {
  2458  0007B2  6A1E               	clrf	config_wifi_settings@i,c
  2459  0007B4  D00B               	goto	l3609
  2460  0007B6                     l3603:
  2461                           
  2462                           ;logger.c: 229:         DATAEE_WriteByte(address,line[i]);
  2463  0007B6  501E               	movf	config_wifi_settings@i,w,c
  2464  0007B8  0F0E               	addlw	low config_wifi_settings@line
  2465  0007BA  6ED9               	movwf	fsr2l,c
  2466  0007BC  6ADA               	clrf	fsr2h,c
  2467  0007BE  50DF               	movf	indf2,w,c
  2468  0007C0  6E09               	movwf	DATAEE_WriteByte@bData,c
  2469  0007C2  501F               	movf	config_wifi_settings@address,w,c
  2470  0007C4  ECA0  F006         	call	_DATAEE_WriteByte
  2471                           
  2472                           ;logger.c: 230:         address++;
  2473  0007C8  2A1F               	incf	config_wifi_settings@address,f,c
  2474                           
  2475                           ;logger.c: 231:     }
  2476  0007CA  2A1E               	incf	config_wifi_settings@i,f,c
  2477  0007CC                     l3609:
  2478  0007CC  5020               	movf	config_wifi_settings@len,w,c
  2479  0007CE  5C1E               	subwf	config_wifi_settings@i,w,c
  2480  0007D0  E3F2               	bnc	l3603
  2481  0007D2  0012               	return		;funcret
  2482  0007D4                     __end_of_config_wifi_settings:
  2483                           	opt stack 0
  2484                           tblptru	equ	0xFF8
  2485                           prodh	equ	0xFF4
  2486                           prodl	equ	0xFF3
  2487                           intcon	equ	0xFF2
  2488                           postinc0	equ	0xFEE
  2489                           wreg	equ	0xFE8
  2490                           indf2	equ	0xFDF
  2491                           fsr2h	equ	0xFDA
  2492                           fsr2l	equ	0xFD9
  2493                           status	equ	0xFD8
  2494                           
  2495 ;; *************** function __gets *****************
  2496 ;; Defined at:
  2497 ;;		line 51 in file "comm.c"
  2498 ;; Parameters:    Size  Location     Type
  2499 ;;  pt              1    9[COMRAM] PTR unsigned char 
  2500 ;;		 -> config_wifi_settings@line(16), 
  2501 ;;  length          1   10[COMRAM] unsigned char 
  2502 ;; Auto vars:     Size  Location     Type
  2503 ;;  index           1   12[COMRAM] unsigned char 
  2504 ;; Return value:  Size  Location     Type
  2505 ;;                  1    wreg      unsigned char 
  2506 ;; Registers used:
  2507 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2508 ;; Tracked objects:
  2509 ;;		On entry : 0/0
  2510 ;;		On exit  : 0/0
  2511 ;;		Unchanged: 0/0
  2512 ;; Data sizes:     COMRAM   BANK0   BANK1
  2513 ;;      Params:         2       0       0
  2514 ;;      Locals:         1       0       0
  2515 ;;      Temps:          1       0       0
  2516 ;;      Totals:         4       0       0
  2517 ;;Total ram usage:        4 bytes
  2518 ;; Hardware stack levels used:    1
  2519 ;; Hardware stack levels required when called:    5
  2520 ;; This function calls:
  2521 ;;		_EUSART_Read
  2522 ;; This function is called by:
  2523 ;;		_config_wifi_settings
  2524 ;; This function uses a non-reentrant model
  2525 ;;
  2526                           
  2527                           	psect	text13
  2528  000DAC                     __ptext13:
  2529                           	opt stack 0
  2530  000DAC                     __gets:
  2531                           	opt stack 24
  2532                           
  2533                           ;comm.c: 51: unsigned char _gets(unsigned char *pt, unsigned char length);comm.c: 52: {;
      +                          comm.c: 53:     unsigned char index;;comm.c: 55:     index = 0;
  2534                           
  2535                           ;incstack = 0
  2536  000DAC  6A0D               	clrf	__gets@index,c
  2537                           
  2538                           ;comm.c: 56:     while (index < length) {
  2539  000DAE  D014               	goto	l3515
  2540  000DB0                     l3503:
  2541                           
  2542                           ;comm.c: 57:         pt[index] = EUSART_Read();
  2543  000DB0  EC63  F007         	call	_EUSART_Read	;wreg free
  2544  000DB4  6E0C               	movwf	??__gets& (0+255),c
  2545  000DB6  500A               	movf	__gets@pt,w,c
  2546  000DB8  240D               	addwf	__gets@index,w,c
  2547  000DBA  6ED9               	movwf	fsr2l,c
  2548  000DBC  6ADA               	clrf	fsr2h,c
  2549  000DBE  C00C  FFDF         	movff	??__gets,indf2
  2550                           
  2551                           ;comm.c: 58:         if (pt[index] == 0x0a) {
  2552  000DC2  500A               	movf	__gets@pt,w,c
  2553  000DC4  240D               	addwf	__gets@index,w,c
  2554  000DC6  6ED9               	movwf	fsr2l,c
  2555  000DC8  6ADA               	clrf	fsr2h,c
  2556  000DCA  0E0A               	movlw	10
  2557  000DCC  18DE               	xorwf	postinc2,w,c
  2558  000DCE  E103               	bnz	l3513
  2559                           
  2560                           ;comm.c: 59:             index --;
  2561  000DD0  060D               	decf	__gets@index,f,c
  2562                           
  2563                           ;comm.c: 60:             return index;
  2564  000DD2  500D               	movf	__gets@index,w,c
  2565  000DD4  0012               	return	
  2566  000DD6                     l3513:
  2567                           
  2568                           ;comm.c: 62:         index++;
  2569  000DD6  2A0D               	incf	__gets@index,f,c
  2570  000DD8                     l3515:
  2571                           
  2572                           ;comm.c: 56:     while (index < length) {
  2573  000DD8  500B               	movf	__gets@length,w,c
  2574  000DDA  5C0D               	subwf	__gets@index,w,c
  2575  000DDC  E3E9               	bnc	l3503
  2576                           
  2577                           ;comm.c: 66:     return 0;
  2578  000DDE  0C00               	retlw	0	;funcret
  2579  000DE0                     __end_of__gets:
  2580                           	opt stack 0
  2581                           tblptru	equ	0xFF8
  2582                           prodh	equ	0xFF4
  2583                           prodl	equ	0xFF3
  2584                           intcon	equ	0xFF2
  2585                           postinc0	equ	0xFEE
  2586                           wreg	equ	0xFE8
  2587                           indf2	equ	0xFDF
  2588                           postinc2	equ	0xFDE
  2589                           fsr2h	equ	0xFDA
  2590                           fsr2l	equ	0xFD9
  2591                           status	equ	0xFD8
  2592                           
  2593 ;; *************** function _DATAEE_WriteByte *****************
  2594 ;; Defined at:
  2595 ;;		line 173 in file "mcc_generated_files/memory.c"
  2596 ;; Parameters:    Size  Location     Type
  2597 ;;  bAdd            1    wreg     unsigned char 
  2598 ;;  bData           1    8[COMRAM] unsigned char 
  2599 ;; Auto vars:     Size  Location     Type
  2600 ;;  bAdd            1    9[COMRAM] unsigned char 
  2601 ;;  GIEBitValue     1   10[COMRAM] unsigned char 
  2602 ;; Return value:  Size  Location     Type
  2603 ;;                  1    wreg      void 
  2604 ;; Registers used:
  2605 ;;		wreg, status,2
  2606 ;; Tracked objects:
  2607 ;;		On entry : 0/0
  2608 ;;		On exit  : 0/0
  2609 ;;		Unchanged: 0/0
  2610 ;; Data sizes:     COMRAM   BANK0   BANK1
  2611 ;;      Params:         1       0       0
  2612 ;;      Locals:         2       0       0
  2613 ;;      Temps:          0       0       0
  2614 ;;      Totals:         3       0       0
  2615 ;;Total ram usage:        3 bytes
  2616 ;; Hardware stack levels used:    1
  2617 ;; Hardware stack levels required when called:    4
  2618 ;; This function calls:
  2619 ;;		Nothing
  2620 ;; This function is called by:
  2621 ;;		_config_wifi_settings
  2622 ;; This function uses a non-reentrant model
  2623 ;;
  2624                           
  2625                           	psect	text14
  2626  000D40                     __ptext14:
  2627                           	opt stack 0
  2628  000D40                     _DATAEE_WriteByte:
  2629                           	opt stack 25
  2630                           
  2631                           ;incstack = 0
  2632                           ;DATAEE_WriteByte@bAdd stored from wreg
  2633  000D40  6E0A               	movwf	DATAEE_WriteByte@bAdd,c
  2634                           
  2635                           ;mcc_generated_files/memory.c: 173: void DATAEE_WriteByte(uint8_t bAdd, uint8_t bData);m
      +                          cc_generated_files/memory.c: 174: {;mcc_generated_files/memory.c: 175:     uint8_t GIEBi
      +                          tValue = INTCONbits.GIE;
  2636  000D42  0E00               	movlw	0
  2637  000D44  BEF2               	btfsc	intcon,7,c	;volatile
  2638  000D46  0E01               	movlw	1
  2639  000D48  6E0B               	movwf	DATAEE_WriteByte@GIEBitValue,c
  2640                           
  2641                           ;mcc_generated_files/memory.c: 177:     EEADR = (uint8_t)(bAdd & 0xFF);
  2642  000D4A  C00A  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
  2643                           
  2644                           ;mcc_generated_files/memory.c: 178:     EEDATA = bData;
  2645  000D4E  C009  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
  2646                           
  2647                           ;mcc_generated_files/memory.c: 179:     EECON1bits.EEPGD = 0;
  2648  000D52  9EA6               	bcf	4006,7,c	;volsfr
  2649                           
  2650                           ;mcc_generated_files/memory.c: 180:     EECON1bits.CFGS = 0;
  2651  000D54  9CA6               	bcf	4006,6,c	;volsfr
  2652                           
  2653                           ;mcc_generated_files/memory.c: 181:     EECON1bits.WREN = 1;
  2654  000D56  84A6               	bsf	4006,2,c	;volsfr
  2655                           
  2656                           ;mcc_generated_files/memory.c: 182:     INTCONbits.GIE = 0;
  2657  000D58  9EF2               	bcf	intcon,7,c	;volatile
  2658                           
  2659                           ;mcc_generated_files/memory.c: 183:     EECON2 = 0x55;
  2660  000D5A  0E55               	movlw	85
  2661  000D5C  6EA7               	movwf	4007,c	;volsfr
  2662                           
  2663                           ;mcc_generated_files/memory.c: 184:     EECON2 = 0xAA;
  2664  000D5E  0EAA               	movlw	170
  2665  000D60  6EA7               	movwf	4007,c	;volsfr
  2666                           
  2667                           ;mcc_generated_files/memory.c: 185:     EECON1bits.WR = 1;
  2668  000D62  82A6               	bsf	4006,1,c	;volsfr
  2669  000D64                     l371:
  2670                           
  2671                           ;mcc_generated_files/memory.c: 187:     while (EECON1bits.WR)
  2672  000D64  B2A6               	btfsc	4006,1,c	;volsfr
  2673  000D66  D7FE               	goto	l371
  2674                           
  2675                           ;mcc_generated_files/memory.c: 191:     EECON1bits.WREN = 0;
  2676  000D68  94A6               	bcf	4006,2,c	;volsfr
  2677                           
  2678                           ;mcc_generated_files/memory.c: 192:     INTCONbits.GIE = GIEBitValue;
  2679  000D6A  B00B               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
  2680  000D6C  D002               	bra	u1585
  2681  000D6E  9EF2               	bcf	intcon,7,c	;volatile
  2682  000D70  D001               	bra	u1586
  2683  000D72                     u1585:
  2684  000D72  8EF2               	bsf	intcon,7,c	;volatile
  2685  000D74                     u1586:
  2686  000D74  0012               	return		;funcret
  2687  000D76                     __end_of_DATAEE_WriteByte:
  2688                           	opt stack 0
  2689                           tblptru	equ	0xFF8
  2690                           prodh	equ	0xFF4
  2691                           prodl	equ	0xFF3
  2692                           intcon	equ	0xFF2
  2693                           postinc0	equ	0xFEE
  2694                           wreg	equ	0xFE8
  2695                           indf2	equ	0xFDF
  2696                           postinc2	equ	0xFDE
  2697                           fsr2h	equ	0xFDA
  2698                           fsr2l	equ	0xFD9
  2699                           status	equ	0xFD8
  2700                           
  2701 ;; *************** function _SYSTEM_Initialize *****************
  2702 ;; Defined at:
  2703 ;;		line 50 in file "mcc_generated_files/mcc.c"
  2704 ;; Parameters:    Size  Location     Type
  2705 ;;		None
  2706 ;; Auto vars:     Size  Location     Type
  2707 ;;		None
  2708 ;; Return value:  Size  Location     Type
  2709 ;;                  1    wreg      void 
  2710 ;; Registers used:
  2711 ;;		wreg, status,2, status,0, cstack
  2712 ;; Tracked objects:
  2713 ;;		On entry : 0/0
  2714 ;;		On exit  : 0/0
  2715 ;;		Unchanged: 0/0
  2716 ;; Data sizes:     COMRAM   BANK0   BANK1
  2717 ;;      Params:         0       0       0
  2718 ;;      Locals:         0       0       0
  2719 ;;      Temps:          0       0       0
  2720 ;;      Totals:         0       0       0
  2721 ;;Total ram usage:        0 bytes
  2722 ;; Hardware stack levels used:    1
  2723 ;; Hardware stack levels required when called:    6
  2724 ;; This function calls:
  2725 ;;		_ADC1_Initialize
  2726 ;;		_EUSART_Initialize
  2727 ;;		_INTERRUPT_Initialize
  2728 ;;		_OSCILLATOR_Initialize
  2729 ;;		_PIN_MANAGER_Initialize
  2730 ;;		_TMR1_Initialize
  2731 ;; This function is called by:
  2732 ;;		_main
  2733 ;; This function uses a non-reentrant model
  2734 ;;
  2735                           
  2736                           	psect	text15
  2737  00101A                     __ptext15:
  2738                           	opt stack 0
  2739  00101A                     _SYSTEM_Initialize:
  2740                           	opt stack 24
  2741                           
  2742                           ;mcc_generated_files/mcc.c: 53:     INTERRUPT_Initialize();
  2743                           
  2744                           ;incstack = 0
  2745  00101A  EC71  F008         	call	_INTERRUPT_Initialize	;wreg free
  2746                           
  2747                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
  2748  00101E  EC09  F007         	call	_PIN_MANAGER_Initialize	;wreg free
  2749                           
  2750                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
  2751  001022  EC3E  F008         	call	_OSCILLATOR_Initialize	;wreg free
  2752                           
  2753                           ;mcc_generated_files/mcc.c: 56:     ADC1_Initialize();
  2754  001026  EC2D  F008         	call	_ADC1_Initialize	;wreg free
  2755                           
  2756                           ;mcc_generated_files/mcc.c: 57:     TMR1_Initialize();
  2757  00102A  EC77  F007         	call	_TMR1_Initialize	;wreg free
  2758                           
  2759                           ;mcc_generated_files/mcc.c: 58:     EUSART_Initialize();
  2760  00102E  EFEC  F005         	goto	_EUSART_Initialize	;wreg free
  2761  001032                     __end_of_SYSTEM_Initialize:
  2762                           	opt stack 0
  2763                           tblptru	equ	0xFF8
  2764                           prodh	equ	0xFF4
  2765                           prodl	equ	0xFF3
  2766                           intcon	equ	0xFF2
  2767                           postinc0	equ	0xFEE
  2768                           wreg	equ	0xFE8
  2769                           indf2	equ	0xFDF
  2770                           postinc2	equ	0xFDE
  2771                           fsr2h	equ	0xFDA
  2772                           fsr2l	equ	0xFD9
  2773                           status	equ	0xFD8
  2774                           
  2775 ;; *************** function _TMR1_Initialize *****************
  2776 ;; Defined at:
  2777 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  2778 ;; Parameters:    Size  Location     Type
  2779 ;;		None
  2780 ;; Auto vars:     Size  Location     Type
  2781 ;;		None
  2782 ;; Return value:  Size  Location     Type
  2783 ;;                  1    wreg      void 
  2784 ;; Registers used:
  2785 ;;		wreg, status,2, status,0, cstack
  2786 ;; Tracked objects:
  2787 ;;		On entry : 0/0
  2788 ;;		On exit  : 0/0
  2789 ;;		Unchanged: 0/0
  2790 ;; Data sizes:     COMRAM   BANK0   BANK1
  2791 ;;      Params:         0       0       0
  2792 ;;      Locals:         0       0       0
  2793 ;;      Temps:          0       0       0
  2794 ;;      Totals:         0       0       0
  2795 ;;Total ram usage:        0 bytes
  2796 ;; Hardware stack levels used:    1
  2797 ;; Hardware stack levels required when called:    5
  2798 ;; This function calls:
  2799 ;;		_TMR1_SetInterruptHandler
  2800 ;; This function is called by:
  2801 ;;		_SYSTEM_Initialize
  2802 ;; This function uses a non-reentrant model
  2803 ;;
  2804                           
  2805                           	psect	text16
  2806  000EEE                     __ptext16:
  2807                           	opt stack 0
  2808  000EEE                     _TMR1_Initialize:
  2809                           	opt stack 24
  2810                           
  2811                           ;mcc_generated_files/tmr1.c: 69:   TMR1H = 0x63;
  2812                           
  2813                           ;incstack = 0
  2814  000EEE  0E63               	movlw	99
  2815  000EF0  6ECF               	movwf	4047,c	;volatile
  2816                           
  2817                           ;mcc_generated_files/tmr1.c: 72:   TMR1L = 0xC0;
  2818  000EF2  0EC0               	movlw	192
  2819  000EF4  6ECE               	movwf	4046,c	;volatile
  2820                           
  2821                           ;mcc_generated_files/tmr1.c: 75:     timer1ReloadVal=TMR1;
  2822  000EF6  CFCE F04C          	movff	4046,_timer1ReloadVal	;volatile
  2823  000EFA  CFCF F04D          	movff	4047,_timer1ReloadVal+1	;volatile
  2824                           
  2825                           ;mcc_generated_files/tmr1.c: 78:     PIR1bits.TMR1IF = 0;
  2826  000EFE  909E               	bcf	3998,0,c	;volatile
  2827                           
  2828                           ;mcc_generated_files/tmr1.c: 81:     PIE1bits.TMR1IE = 1;
  2829  000F00  809D               	bsf	3997,0,c	;volatile
  2830                           
  2831                           ;mcc_generated_files/tmr1.c: 84:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
  2832  000F02  0E00               	movlw	low _TMR1_DefaultInterruptHandler
  2833  000F04  6E09               	movwf	TMR1_SetInterruptHandler@InterruptHandler,c
  2834  000F06  0E11               	movlw	high _TMR1_DefaultInterruptHandler
  2835  000F08  6E0A               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1,c
  2836  000F0A  EC4C  F008         	call	_TMR1_SetInterruptHandler	;wreg free
  2837                           
  2838                           ;mcc_generated_files/tmr1.c: 87:     T1CON = 0x21;
  2839  000F0E  0E21               	movlw	33
  2840  000F10  6ECD               	movwf	4045,c	;volatile
  2841  000F12  0C21               	retlw	33	;funcret
  2842  000F14                     __end_of_TMR1_Initialize:
  2843                           	opt stack 0
  2844                           tblptru	equ	0xFF8
  2845                           prodh	equ	0xFF4
  2846                           prodl	equ	0xFF3
  2847                           intcon	equ	0xFF2
  2848                           postinc0	equ	0xFEE
  2849                           wreg	equ	0xFE8
  2850                           indf2	equ	0xFDF
  2851                           postinc2	equ	0xFDE
  2852                           fsr2h	equ	0xFDA
  2853                           fsr2l	equ	0xFD9
  2854                           status	equ	0xFD8
  2855                           
  2856 ;; *************** function _TMR1_SetInterruptHandler *****************
  2857 ;; Defined at:
  2858 ;;		line 159 in file "mcc_generated_files/tmr1.c"
  2859 ;; Parameters:    Size  Location     Type
  2860 ;;  InterruptHan    2    8[COMRAM] PTR FTN()void 
  2861 ;;		 -> _TMR1_Ready(1), TMR1_DefaultInterruptHandler(1), 
  2862 ;; Auto vars:     Size  Location     Type
  2863 ;;		None
  2864 ;; Return value:  Size  Location     Type
  2865 ;;                  1    wreg      void 
  2866 ;; Registers used:
  2867 ;;		wreg, status,2, status,0
  2868 ;; Tracked objects:
  2869 ;;		On entry : 0/0
  2870 ;;		On exit  : 0/0
  2871 ;;		Unchanged: 0/0
  2872 ;; Data sizes:     COMRAM   BANK0   BANK1
  2873 ;;      Params:         2       0       0
  2874 ;;      Locals:         0       0       0
  2875 ;;      Temps:          0       0       0
  2876 ;;      Totals:         2       0       0
  2877 ;;Total ram usage:        2 bytes
  2878 ;; Hardware stack levels used:    1
  2879 ;; Hardware stack levels required when called:    4
  2880 ;; This function calls:
  2881 ;;		Nothing
  2882 ;; This function is called by:
  2883 ;;		_TMR1_Initialize
  2884 ;;		_logger_initialize
  2885 ;; This function uses a non-reentrant model
  2886 ;;
  2887                           
  2888                           	psect	text17
  2889  001098                     __ptext17:
  2890                           	opt stack 0
  2891  001098                     _TMR1_SetInterruptHandler:
  2892                           	opt stack 25
  2893                           
  2894                           ;mcc_generated_files/tmr1.c: 160:     TMR1_InterruptHandler = InterruptHandler;
  2895                           
  2896                           ;incstack = 0
  2897  001098  C009  F04A         	movff	TMR1_SetInterruptHandler@InterruptHandler,_TMR1_InterruptHandler
  2898  00109C  C00A  F04B         	movff	TMR1_SetInterruptHandler@InterruptHandler+1,_TMR1_InterruptHandler+1
  2899  0010A0  0012               	return		;funcret
  2900  0010A2                     __end_of_TMR1_SetInterruptHandler:
  2901                           	opt stack 0
  2902                           tblptru	equ	0xFF8
  2903                           prodh	equ	0xFF4
  2904                           prodl	equ	0xFF3
  2905                           intcon	equ	0xFF2
  2906                           postinc0	equ	0xFEE
  2907                           wreg	equ	0xFE8
  2908                           indf2	equ	0xFDF
  2909                           postinc2	equ	0xFDE
  2910                           fsr2h	equ	0xFDA
  2911                           fsr2l	equ	0xFD9
  2912                           status	equ	0xFD8
  2913                           
  2914 ;; *************** function _PIN_MANAGER_Initialize *****************
  2915 ;; Defined at:
  2916 ;;		line 59 in file "mcc_generated_files/pin_manager.c"
  2917 ;; Parameters:    Size  Location     Type
  2918 ;;		None
  2919 ;; Auto vars:     Size  Location     Type
  2920 ;;		None
  2921 ;; Return value:  Size  Location     Type
  2922 ;;                  1    wreg      void 
  2923 ;; Registers used:
  2924 ;;		wreg, status,2, status,0, cstack
  2925 ;; Tracked objects:
  2926 ;;		On entry : 0/0
  2927 ;;		On exit  : 0/0
  2928 ;;		Unchanged: 0/0
  2929 ;; Data sizes:     COMRAM   BANK0   BANK1
  2930 ;;      Params:         0       0       0
  2931 ;;      Locals:         0       0       0
  2932 ;;      Temps:          0       0       0
  2933 ;;      Totals:         0       0       0
  2934 ;;Total ram usage:        0 bytes
  2935 ;; Hardware stack levels used:    1
  2936 ;; Hardware stack levels required when called:    5
  2937 ;; This function calls:
  2938 ;;		_IOCA4_SetInterruptHandler
  2939 ;; This function is called by:
  2940 ;;		_SYSTEM_Initialize
  2941 ;; This function uses a non-reentrant model
  2942 ;;
  2943                           
  2944                           	psect	text18
  2945  000E12                     __ptext18:
  2946                           	opt stack 0
  2947  000E12                     _PIN_MANAGER_Initialize:
  2948                           	opt stack 24
  2949                           
  2950                           ;mcc_generated_files/pin_manager.c: 64:     LATA = 0x00;
  2951                           
  2952                           ;incstack = 0
  2953  000E12  6A89               	clrf	3977,c	;volatile
  2954                           
  2955                           ;mcc_generated_files/pin_manager.c: 65:     LATB = 0x00;
  2956  000E14  6A8A               	clrf	3978,c	;volatile
  2957                           
  2958                           ;mcc_generated_files/pin_manager.c: 66:     LATC = 0x00;
  2959  000E16  6A8B               	clrf	3979,c	;volatile
  2960                           
  2961                           ;mcc_generated_files/pin_manager.c: 71:     TRISA = 0x17;
  2962  000E18  0E17               	movlw	23
  2963  000E1A  6E92               	movwf	3986,c	;volatile
  2964                           
  2965                           ;mcc_generated_files/pin_manager.c: 72:     TRISB = 0x70;
  2966  000E1C  0E70               	movlw	112
  2967  000E1E  6E93               	movwf	3987,c	;volatile
  2968                           
  2969                           ;mcc_generated_files/pin_manager.c: 73:     TRISC = 0xFF;
  2970  000E20  6894               	setf	3988,c	;volatile
  2971                           
  2972                           ;mcc_generated_files/pin_manager.c: 78:     ANSELHbits.ANS11 = 0;
  2973  000E22  967F               	bcf	3967,3,c	;volatile
  2974                           
  2975                           ;mcc_generated_files/pin_manager.c: 79:     ANSELbits.ANS3 = 0;
  2976  000E24  967E               	bcf	3966,3,c	;volatile
  2977                           
  2978                           ;mcc_generated_files/pin_manager.c: 85:     WPUB = 0x00;
  2979  000E26  6A78               	clrf	3960,c	;volatile
  2980                           
  2981                           ;mcc_generated_files/pin_manager.c: 86:     WPUA = 0x10;
  2982  000E28  0E10               	movlw	16
  2983  000E2A  6E77               	movwf	3959,c	;volatile
  2984                           
  2985                           ;mcc_generated_files/pin_manager.c: 87:     INTCON2bits.nRBPU = 0;
  2986  000E2C  9EF1               	bcf	intcon2,7,c	;volatile
  2987                           
  2988                           ;mcc_generated_files/pin_manager.c: 98:     IOCAbits.IOCA4 = 1;
  2989  000E2E  8879               	bsf	3961,4,c	;volatile
  2990                           
  2991                           ;mcc_generated_files/pin_manager.c: 103:     IOCA4_SetInterruptHandler(IOCA4_DefaultInte
      +                          rruptHandler);
  2992  000E30  0E02               	movlw	low _IOCA4_DefaultInterruptHandler
  2993  000E32  6E09               	movwf	IOCA4_SetInterruptHandler@InterruptHandler,c
  2994  000E34  0E11               	movlw	high _IOCA4_DefaultInterruptHandler
  2995  000E36  6E0A               	movwf	IOCA4_SetInterruptHandler@InterruptHandler+1,c
  2996  000E38  EC51  F008         	call	_IOCA4_SetInterruptHandler	;wreg free
  2997                           
  2998                           ;mcc_generated_files/pin_manager.c: 106:     INTCONbits.RABIE = 1;
  2999  000E3C  86F2               	bsf	intcon,3,c	;volatile
  3000  000E3E  0012               	return		;funcret
  3001  000E40                     __end_of_PIN_MANAGER_Initialize:
  3002                           	opt stack 0
  3003                           tblptru	equ	0xFF8
  3004                           prodh	equ	0xFF4
  3005                           prodl	equ	0xFF3
  3006                           intcon	equ	0xFF2
  3007                           intcon2	equ	0xFF1
  3008                           postinc0	equ	0xFEE
  3009                           wreg	equ	0xFE8
  3010                           indf2	equ	0xFDF
  3011                           postinc2	equ	0xFDE
  3012                           fsr2h	equ	0xFDA
  3013                           fsr2l	equ	0xFD9
  3014                           status	equ	0xFD8
  3015                           
  3016 ;; *************** function _IOCA4_SetInterruptHandler *****************
  3017 ;; Defined at:
  3018 ;;		line 138 in file "mcc_generated_files/pin_manager.c"
  3019 ;; Parameters:    Size  Location     Type
  3020 ;;  InterruptHan    2    8[COMRAM] PTR FTN()void 
  3021 ;;		 -> _IOC_Ready(1), IOCA4_DefaultInterruptHandler(1), 
  3022 ;; Auto vars:     Size  Location     Type
  3023 ;;		None
  3024 ;; Return value:  Size  Location     Type
  3025 ;;                  1    wreg      void 
  3026 ;; Registers used:
  3027 ;;		wreg, status,2, status,0
  3028 ;; Tracked objects:
  3029 ;;		On entry : 0/0
  3030 ;;		On exit  : 0/0
  3031 ;;		Unchanged: 0/0
  3032 ;; Data sizes:     COMRAM   BANK0   BANK1
  3033 ;;      Params:         2       0       0
  3034 ;;      Locals:         0       0       0
  3035 ;;      Temps:          0       0       0
  3036 ;;      Totals:         2       0       0
  3037 ;;Total ram usage:        2 bytes
  3038 ;; Hardware stack levels used:    1
  3039 ;; Hardware stack levels required when called:    4
  3040 ;; This function calls:
  3041 ;;		Nothing
  3042 ;; This function is called by:
  3043 ;;		_PIN_MANAGER_Initialize
  3044 ;;		_logger_initialize
  3045 ;; This function uses a non-reentrant model
  3046 ;;
  3047                           
  3048                           	psect	text19
  3049  0010A2                     __ptext19:
  3050                           	opt stack 0
  3051  0010A2                     _IOCA4_SetInterruptHandler:
  3052                           	opt stack 25
  3053                           
  3054                           ;mcc_generated_files/pin_manager.c: 139:     IOCA4_InterruptHandler = InterruptHandler;
  3055                           
  3056                           ;incstack = 0
  3057  0010A2  C009  F052         	movff	IOCA4_SetInterruptHandler@InterruptHandler,_IOCA4_InterruptHandler
  3058  0010A6  C00A  F053         	movff	IOCA4_SetInterruptHandler@InterruptHandler+1,_IOCA4_InterruptHandler+1
  3059  0010AA  0012               	return		;funcret
  3060  0010AC                     __end_of_IOCA4_SetInterruptHandler:
  3061                           	opt stack 0
  3062                           tblptru	equ	0xFF8
  3063                           prodh	equ	0xFF4
  3064                           prodl	equ	0xFF3
  3065                           intcon	equ	0xFF2
  3066                           intcon2	equ	0xFF1
  3067                           postinc0	equ	0xFEE
  3068                           wreg	equ	0xFE8
  3069                           indf2	equ	0xFDF
  3070                           postinc2	equ	0xFDE
  3071                           fsr2h	equ	0xFDA
  3072                           fsr2l	equ	0xFD9
  3073                           status	equ	0xFD8
  3074                           
  3075 ;; *************** function _OSCILLATOR_Initialize *****************
  3076 ;; Defined at:
  3077 ;;		line 61 in file "mcc_generated_files/mcc.c"
  3078 ;; Parameters:    Size  Location     Type
  3079 ;;		None
  3080 ;; Auto vars:     Size  Location     Type
  3081 ;;		None
  3082 ;; Return value:  Size  Location     Type
  3083 ;;                  1    wreg      void 
  3084 ;; Registers used:
  3085 ;;		wreg, status,2
  3086 ;; Tracked objects:
  3087 ;;		On entry : 0/0
  3088 ;;		On exit  : 0/0
  3089 ;;		Unchanged: 0/0
  3090 ;; Data sizes:     COMRAM   BANK0   BANK1
  3091 ;;      Params:         0       0       0
  3092 ;;      Locals:         0       0       0
  3093 ;;      Temps:          0       0       0
  3094 ;;      Totals:         0       0       0
  3095 ;;Total ram usage:        0 bytes
  3096 ;; Hardware stack levels used:    1
  3097 ;; Hardware stack levels required when called:    4
  3098 ;; This function calls:
  3099 ;;		Nothing
  3100 ;; This function is called by:
  3101 ;;		_SYSTEM_Initialize
  3102 ;; This function uses a non-reentrant model
  3103 ;;
  3104                           
  3105                           	psect	text20
  3106  00107C                     __ptext20:
  3107                           	opt stack 0
  3108  00107C                     _OSCILLATOR_Initialize:
  3109                           	opt stack 25
  3110                           
  3111                           ;mcc_generated_files/mcc.c: 64:     OSCCON = 0x70;
  3112                           
  3113                           ;incstack = 0
  3114  00107C  0E70               	movlw	112
  3115  00107E  6ED3               	movwf	4051,c	;volatile
  3116                           
  3117                           ;mcc_generated_files/mcc.c: 66:     OSCCON2 = 0x04;
  3118  001080  0E04               	movlw	4
  3119  001082  6ED2               	movwf	4050,c	;volatile
  3120                           
  3121                           ;mcc_generated_files/mcc.c: 68:     OSCTUNE = 0x40;
  3122  001084  0E40               	movlw	64
  3123  001086  6E9B               	movwf	3995,c	;volatile
  3124  001088  0C40               	retlw	64	;funcret
  3125  00108A                     __end_of_OSCILLATOR_Initialize:
  3126                           	opt stack 0
  3127                           tblptru	equ	0xFF8
  3128                           prodh	equ	0xFF4
  3129                           prodl	equ	0xFF3
  3130                           intcon	equ	0xFF2
  3131                           intcon2	equ	0xFF1
  3132                           postinc0	equ	0xFEE
  3133                           wreg	equ	0xFE8
  3134                           indf2	equ	0xFDF
  3135                           postinc2	equ	0xFDE
  3136                           fsr2h	equ	0xFDA
  3137                           fsr2l	equ	0xFD9
  3138                           status	equ	0xFD8
  3139                           
  3140 ;; *************** function _INTERRUPT_Initialize *****************
  3141 ;; Defined at:
  3142 ;;		line 53 in file "mcc_generated_files/interrupt_manager.c"
  3143 ;; Parameters:    Size  Location     Type
  3144 ;;		None
  3145 ;; Auto vars:     Size  Location     Type
  3146 ;;		None
  3147 ;; Return value:  Size  Location     Type
  3148 ;;                  1    wreg      void 
  3149 ;; Registers used:
  3150 ;;		None
  3151 ;; Tracked objects:
  3152 ;;		On entry : 0/0
  3153 ;;		On exit  : 0/0
  3154 ;;		Unchanged: 0/0
  3155 ;; Data sizes:     COMRAM   BANK0   BANK1
  3156 ;;      Params:         0       0       0
  3157 ;;      Locals:         0       0       0
  3158 ;;      Temps:          0       0       0
  3159 ;;      Totals:         0       0       0
  3160 ;;Total ram usage:        0 bytes
  3161 ;; Hardware stack levels used:    1
  3162 ;; Hardware stack levels required when called:    4
  3163 ;; This function calls:
  3164 ;;		Nothing
  3165 ;; This function is called by:
  3166 ;;		_SYSTEM_Initialize
  3167 ;; This function uses a non-reentrant model
  3168 ;;
  3169                           
  3170                           	psect	text21
  3171  0010E2                     __ptext21:
  3172                           	opt stack 0
  3173  0010E2                     _INTERRUPT_Initialize:
  3174                           	opt stack 25
  3175                           
  3176                           ;mcc_generated_files/interrupt_manager.c: 56:     RCONbits.IPEN = 0;
  3177                           
  3178                           ;incstack = 0
  3179  0010E2  9ED0               	bcf	4048,7,c	;volatile
  3180  0010E4  0012               	return		;funcret
  3181  0010E6                     __end_of_INTERRUPT_Initialize:
  3182                           	opt stack 0
  3183                           tblptru	equ	0xFF8
  3184                           prodh	equ	0xFF4
  3185                           prodl	equ	0xFF3
  3186                           intcon	equ	0xFF2
  3187                           intcon2	equ	0xFF1
  3188                           postinc0	equ	0xFEE
  3189                           wreg	equ	0xFE8
  3190                           indf2	equ	0xFDF
  3191                           postinc2	equ	0xFDE
  3192                           fsr2h	equ	0xFDA
  3193                           fsr2l	equ	0xFD9
  3194                           status	equ	0xFD8
  3195                           
  3196 ;; *************** function _EUSART_Initialize *****************
  3197 ;; Defined at:
  3198 ;;		line 75 in file "mcc_generated_files/eusart.c"
  3199 ;; Parameters:    Size  Location     Type
  3200 ;;		None
  3201 ;; Auto vars:     Size  Location     Type
  3202 ;;		None
  3203 ;; Return value:  Size  Location     Type
  3204 ;;                  1    wreg      void 
  3205 ;; Registers used:
  3206 ;;		wreg, status,2, status,0, cstack
  3207 ;; Tracked objects:
  3208 ;;		On entry : 0/0
  3209 ;;		On exit  : 0/0
  3210 ;;		Unchanged: 0/0
  3211 ;; Data sizes:     COMRAM   BANK0   BANK1
  3212 ;;      Params:         0       0       0
  3213 ;;      Locals:         0       0       0
  3214 ;;      Temps:          0       0       0
  3215 ;;      Totals:         0       0       0
  3216 ;;Total ram usage:        0 bytes
  3217 ;; Hardware stack levels used:    1
  3218 ;; Hardware stack levels required when called:    5
  3219 ;; This function calls:
  3220 ;;		_EUSART_SetRxInterruptHandler
  3221 ;;		_EUSART_SetTxInterruptHandler
  3222 ;; This function is called by:
  3223 ;;		_SYSTEM_Initialize
  3224 ;; This function uses a non-reentrant model
  3225 ;;
  3226                           
  3227                           	psect	text22
  3228  000BD8                     __ptext22:
  3229                           	opt stack 0
  3230  000BD8                     _EUSART_Initialize:
  3231                           	opt stack 24
  3232                           
  3233                           ;mcc_generated_files/eusart.c: 78:     PIE1bits.RCIE = 0;
  3234                           
  3235                           ;incstack = 0
  3236  000BD8  9A9D               	bcf	3997,5,c	;volatile
  3237                           
  3238                           ;mcc_generated_files/eusart.c: 79:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  3239  000BDA  0E3A               	movlw	low _EUSART_Receive_ISR
  3240  000BDC  6E09               	movwf	EUSART_SetRxInterruptHandler@interruptHandler,c
  3241  000BDE  0E0F               	movlw	high _EUSART_Receive_ISR
  3242  000BE0  6E0A               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1,c
  3243  000BE2  EC5B  F008         	call	_EUSART_SetRxInterruptHandler	;wreg free
  3244                           
  3245                           ;mcc_generated_files/eusart.c: 80:     PIE1bits.TXIE = 0;
  3246  000BE6  989D               	bcf	3997,4,c	;volatile
  3247                           
  3248                           ;mcc_generated_files/eusart.c: 81:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  3249  000BE8  0E84               	movlw	low _EUSART_Transmit_ISR
  3250  000BEA  6E09               	movwf	EUSART_SetTxInterruptHandler@interruptHandler,c
  3251  000BEC  0E0F               	movlw	high _EUSART_Transmit_ISR
  3252  000BEE  6E0A               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1,c
  3253  000BF0  EC56  F008         	call	_EUSART_SetTxInterruptHandler	;wreg free
  3254                           
  3255                           ;mcc_generated_files/eusart.c: 85:     BAUDCON = 0x08;
  3256  000BF4  0E08               	movlw	8
  3257  000BF6  6EB8               	movwf	4024,c	;volatile
  3258                           
  3259                           ;mcc_generated_files/eusart.c: 88:     RCSTA = 0x90;
  3260  000BF8  0E90               	movlw	144
  3261  000BFA  6EAB               	movwf	4011,c	;volatile
  3262                           
  3263                           ;mcc_generated_files/eusart.c: 91:     TXSTA = 0x24;
  3264  000BFC  0E24               	movlw	36
  3265  000BFE  6EAC               	movwf	4012,c	;volatile
  3266                           
  3267                           ;mcc_generated_files/eusart.c: 94:     SPBRG = 0x8A;
  3268  000C00  0E8A               	movlw	138
  3269  000C02  6EAF               	movwf	4015,c	;volatile
  3270                           
  3271                           ;mcc_generated_files/eusart.c: 97:     SPBRGH = 0x00;
  3272  000C04  6AB0               	clrf	4016,c	;volatile
  3273                           
  3274                           ;mcc_generated_files/eusart.c: 101:     eusartTxHead = 0;
  3275  000C06  6A45               	clrf	_eusartTxHead,c	;volatile
  3276                           
  3277                           ;mcc_generated_files/eusart.c: 102:     eusartTxTail = 0;
  3278  000C08  6A44               	clrf	_eusartTxTail,c	;volatile
  3279                           
  3280                           ;mcc_generated_files/eusart.c: 103:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  3281  000C0A  0E40               	movlw	64
  3282  000C0C  6E55               	movwf	_eusartTxBufferRemaining,c	;volatile
  3283                           
  3284                           ;mcc_generated_files/eusart.c: 105:     eusartRxHead = 0;
  3285  000C0E  6A43               	clrf	_eusartRxHead,c	;volatile
  3286                           
  3287                           ;mcc_generated_files/eusart.c: 106:     eusartRxTail = 0;
  3288  000C10  6A42               	clrf	_eusartRxTail,c	;volatile
  3289                           
  3290                           ;mcc_generated_files/eusart.c: 107:     eusartRxCount = 0;
  3291  000C12  6A41               	clrf	_eusartRxCount,c	;volatile
  3292                           
  3293                           ;mcc_generated_files/eusart.c: 110:     PIE1bits.RCIE = 1;
  3294  000C14  8A9D               	bsf	3997,5,c	;volatile
  3295  000C16  0012               	return		;funcret
  3296  000C18                     __end_of_EUSART_Initialize:
  3297                           	opt stack 0
  3298                           tblptru	equ	0xFF8
  3299                           prodh	equ	0xFF4
  3300                           prodl	equ	0xFF3
  3301                           intcon	equ	0xFF2
  3302                           intcon2	equ	0xFF1
  3303                           postinc0	equ	0xFEE
  3304                           wreg	equ	0xFE8
  3305                           indf2	equ	0xFDF
  3306                           postinc2	equ	0xFDE
  3307                           fsr2h	equ	0xFDA
  3308                           fsr2l	equ	0xFD9
  3309                           status	equ	0xFD8
  3310                           
  3311 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  3312 ;; Defined at:
  3313 ;;		line 211 in file "mcc_generated_files/eusart.c"
  3314 ;; Parameters:    Size  Location     Type
  3315 ;;  interruptHan    2    8[COMRAM] PTR FTN()void 
  3316 ;;		 -> EUSART_Transmit_ISR(1), 
  3317 ;; Auto vars:     Size  Location     Type
  3318 ;;		None
  3319 ;; Return value:  Size  Location     Type
  3320 ;;                  1    wreg      void 
  3321 ;; Registers used:
  3322 ;;		wreg, status,2, status,0
  3323 ;; Tracked objects:
  3324 ;;		On entry : 0/0
  3325 ;;		On exit  : 0/0
  3326 ;;		Unchanged: 0/0
  3327 ;; Data sizes:     COMRAM   BANK0   BANK1
  3328 ;;      Params:         2       0       0
  3329 ;;      Locals:         0       0       0
  3330 ;;      Temps:          0       0       0
  3331 ;;      Totals:         2       0       0
  3332 ;;Total ram usage:        2 bytes
  3333 ;; Hardware stack levels used:    1
  3334 ;; Hardware stack levels required when called:    4
  3335 ;; This function calls:
  3336 ;;		Nothing
  3337 ;; This function is called by:
  3338 ;;		_EUSART_Initialize
  3339 ;; This function uses a non-reentrant model
  3340 ;;
  3341                           
  3342                           	psect	text23
  3343  0010AC                     __ptext23:
  3344                           	opt stack 0
  3345  0010AC                     _EUSART_SetTxInterruptHandler:
  3346                           	opt stack 24
  3347                           
  3348                           ;mcc_generated_files/eusart.c: 212:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  3349                           
  3350                           ;incstack = 0
  3351  0010AC  C009  F050         	movff	EUSART_SetTxInterruptHandler@interruptHandler,_EUSART_TxDefaultInterruptHandler
  3352  0010B0  C00A  F051         	movff	EUSART_SetTxInterruptHandler@interruptHandler+1,_EUSART_TxDefaultInterruptHandler
      +                          +1
  3353  0010B4  0012               	return		;funcret
  3354  0010B6                     __end_of_EUSART_SetTxInterruptHandler:
  3355                           	opt stack 0
  3356                           tblptru	equ	0xFF8
  3357                           prodh	equ	0xFF4
  3358                           prodl	equ	0xFF3
  3359                           intcon	equ	0xFF2
  3360                           intcon2	equ	0xFF1
  3361                           postinc0	equ	0xFEE
  3362                           wreg	equ	0xFE8
  3363                           indf2	equ	0xFDF
  3364                           postinc2	equ	0xFDE
  3365                           fsr2h	equ	0xFDA
  3366                           fsr2l	equ	0xFD9
  3367                           status	equ	0xFD8
  3368                           
  3369 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  3370 ;; Defined at:
  3371 ;;		line 215 in file "mcc_generated_files/eusart.c"
  3372 ;; Parameters:    Size  Location     Type
  3373 ;;  interruptHan    2    8[COMRAM] PTR FTN()void 
  3374 ;;		 -> EUSART_Receive_ISR(1), 
  3375 ;; Auto vars:     Size  Location     Type
  3376 ;;		None
  3377 ;; Return value:  Size  Location     Type
  3378 ;;                  1    wreg      void 
  3379 ;; Registers used:
  3380 ;;		wreg, status,2, status,0
  3381 ;; Tracked objects:
  3382 ;;		On entry : 0/0
  3383 ;;		On exit  : 0/0
  3384 ;;		Unchanged: 0/0
  3385 ;; Data sizes:     COMRAM   BANK0   BANK1
  3386 ;;      Params:         2       0       0
  3387 ;;      Locals:         0       0       0
  3388 ;;      Temps:          0       0       0
  3389 ;;      Totals:         2       0       0
  3390 ;;Total ram usage:        2 bytes
  3391 ;; Hardware stack levels used:    1
  3392 ;; Hardware stack levels required when called:    4
  3393 ;; This function calls:
  3394 ;;		Nothing
  3395 ;; This function is called by:
  3396 ;;		_EUSART_Initialize
  3397 ;; This function uses a non-reentrant model
  3398 ;;
  3399                           
  3400                           	psect	text24
  3401  0010B6                     __ptext24:
  3402                           	opt stack 0
  3403  0010B6                     _EUSART_SetRxInterruptHandler:
  3404                           	opt stack 24
  3405                           
  3406                           ;mcc_generated_files/eusart.c: 216:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  3407                           
  3408                           ;incstack = 0
  3409  0010B6  C009  F04E         	movff	EUSART_SetRxInterruptHandler@interruptHandler,_EUSART_RxDefaultInterruptHandler
  3410  0010BA  C00A  F04F         	movff	EUSART_SetRxInterruptHandler@interruptHandler+1,_EUSART_RxDefaultInterruptHandler
      +                          +1
  3411  0010BE  0012               	return		;funcret
  3412  0010C0                     __end_of_EUSART_SetRxInterruptHandler:
  3413                           	opt stack 0
  3414                           tblptru	equ	0xFF8
  3415                           prodh	equ	0xFF4
  3416                           prodl	equ	0xFF3
  3417                           intcon	equ	0xFF2
  3418                           intcon2	equ	0xFF1
  3419                           postinc0	equ	0xFEE
  3420                           wreg	equ	0xFE8
  3421                           indf2	equ	0xFDF
  3422                           postinc2	equ	0xFDE
  3423                           fsr2h	equ	0xFDA
  3424                           fsr2l	equ	0xFD9
  3425                           status	equ	0xFD8
  3426                           
  3427 ;; *************** function _ADC1_Initialize *****************
  3428 ;; Defined at:
  3429 ;;		line 60 in file "mcc_generated_files/adc1.c"
  3430 ;; Parameters:    Size  Location     Type
  3431 ;;		None
  3432 ;; Auto vars:     Size  Location     Type
  3433 ;;		None
  3434 ;; Return value:  Size  Location     Type
  3435 ;;                  1    wreg      void 
  3436 ;; Registers used:
  3437 ;;		wreg, status,2
  3438 ;; Tracked objects:
  3439 ;;		On entry : 0/0
  3440 ;;		On exit  : 0/0
  3441 ;;		Unchanged: 0/0
  3442 ;; Data sizes:     COMRAM   BANK0   BANK1
  3443 ;;      Params:         0       0       0
  3444 ;;      Locals:         0       0       0
  3445 ;;      Temps:          0       0       0
  3446 ;;      Totals:         0       0       0
  3447 ;;Total ram usage:        0 bytes
  3448 ;; Hardware stack levels used:    1
  3449 ;; Hardware stack levels required when called:    4
  3450 ;; This function calls:
  3451 ;;		Nothing
  3452 ;; This function is called by:
  3453 ;;		_SYSTEM_Initialize
  3454 ;; This function uses a non-reentrant model
  3455 ;;
  3456                           
  3457                           	psect	text25
  3458  00105A                     __ptext25:
  3459                           	opt stack 0
  3460  00105A                     _ADC1_Initialize:
  3461                           	opt stack 25
  3462                           
  3463                           ;mcc_generated_files/adc1.c: 65:     ADCON0 = 0x01;
  3464                           
  3465                           ;incstack = 0
  3466  00105A  0E01               	movlw	1
  3467  00105C  6EC2               	movwf	4034,c	;volatile
  3468                           
  3469                           ;mcc_generated_files/adc1.c: 68:     ADCON1 = 0x00;
  3470  00105E  6AC1               	clrf	4033,c	;volatile
  3471                           
  3472                           ;mcc_generated_files/adc1.c: 71:     ADCON2 = 0x87;
  3473  001060  0E87               	movlw	135
  3474  001062  6EC0               	movwf	4032,c	;volatile
  3475                           
  3476                           ;mcc_generated_files/adc1.c: 74:     ADRESL = 0x00;
  3477  001064  6AC3               	clrf	4035,c	;volatile
  3478                           
  3479                           ;mcc_generated_files/adc1.c: 77:     ADRESH = 0x00;
  3480  001066  6AC4               	clrf	4036,c	;volatile
  3481                           
  3482                           ;mcc_generated_files/adc1.c: 80:     PIE1bits.ADIE = 1;
  3483  001068  8C9D               	bsf	3997,6,c	;volatile
  3484  00106A  0012               	return		;funcret
  3485  00106C                     __end_of_ADC1_Initialize:
  3486                           	opt stack 0
  3487                           tblptru	equ	0xFF8
  3488                           prodh	equ	0xFF4
  3489                           prodl	equ	0xFF3
  3490                           intcon	equ	0xFF2
  3491                           intcon2	equ	0xFF1
  3492                           postinc0	equ	0xFEE
  3493                           wreg	equ	0xFE8
  3494                           indf2	equ	0xFDF
  3495                           postinc2	equ	0xFDE
  3496                           fsr2h	equ	0xFDA
  3497                           fsr2l	equ	0xFD9
  3498                           status	equ	0xFD8
  3499                           
  3500 ;; *************** function _ESP_message_handler *****************
  3501 ;; Defined at:
  3502 ;;		line 159 in file "esp1.c"
  3503 ;; Parameters:    Size  Location     Type
  3504 ;;		None
  3505 ;; Auto vars:     Size  Location     Type
  3506 ;;  index           3    0        PTR unsigned char 
  3507 ;;  ret             1   41[COMRAM] unsigned char 
  3508 ;;  aux             1    0        unsigned char 
  3509 ;; Return value:  Size  Location     Type
  3510 ;;                  1    wreg      void 
  3511 ;; Registers used:
  3512 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, cstack
  3513 ;; Tracked objects:
  3514 ;;		On entry : 0/0
  3515 ;;		On exit  : 0/0
  3516 ;;		Unchanged: 0/0
  3517 ;; Data sizes:     COMRAM   BANK0   BANK1
  3518 ;;      Params:         0       0       0
  3519 ;;      Locals:         1       0       0
  3520 ;;      Temps:          2       0       0
  3521 ;;      Totals:         3       0       0
  3522 ;;Total ram usage:        3 bytes
  3523 ;; Hardware stack levels used:    1
  3524 ;; Hardware stack levels required when called:   13
  3525 ;; This function calls:
  3526 ;;		_ESP_process_rx_data
  3527 ;;		_ESP_read
  3528 ;; This function is called by:
  3529 ;;		_main
  3530 ;; This function uses a non-reentrant model
  3531 ;;
  3532                           
  3533                           	psect	text26
  3534  000D76                     __ptext26:
  3535                           	opt stack 0
  3536  000D76                     _ESP_message_handler:
  3537                           	opt stack 17
  3538                           
  3539                           ;esp1.c: 161:     unsigned char ret,aux;;esp1.c: 162:     char *index;;esp1.c: 164:     
      +                          ret = ESP_read();
  3540                           
  3541                           ;incstack = 0
  3542  000D76  EC5E  F005         	call	_ESP_read	;wreg free
  3543  000D7A  6E2A               	movwf	ESP_message_handler@ret,c
  3544                           
  3545                           ;esp1.c: 166:     switch (ret) {
  3546  000D7C  D005               	goto	l3651
  3547  000D7E                     l553:
  3548                           
  3549                           ;esp1.c: 175:             esp_channel = esp_read_data[0];
  3550  000D7E  C0E0  F03D         	movff	_esp_read_data,_esp_channel	;volatile
  3551                           
  3552                           ;esp1.c: 176:             break;
  3553  000D82  0012               	return	
  3554  000D84                     l554:
  3555                           
  3556                           ;esp1.c: 179:             esp_channel = 0;
  3557  000D84  6A3D               	clrf	_esp_channel,c	;volatile
  3558                           
  3559                           ;esp1.c: 180:             break;
  3560  000D86  0012               	return	
  3561  000D88                     l3651:
  3562  000D88  502A               	movf	ESP_message_handler@ret,w,c
  3563  000D8A  6E28               	movwf	??_ESP_message_handler& (0+255),c
  3564  000D8C  6A29               	clrf	(??_ESP_message_handler+1)& (0+255),c
  3565                           
  3566                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3567                           ; Switch size 1, requested type "speed"
  3568                           ; Number of cases is 1, Range of values is 0 to 0
  3569                           ; switch strategies available:
  3570                           ; Name         Instructions Cycles
  3571                           ; simple_byte            4     3 (average)
  3572                           ;	Chosen strategy is simple_byte
  3573  000D8E  5029               	movf	??_ESP_message_handler+1,w,c
  3574  000D90  A4D8               	btfss	status,2,c
  3575  000D92  0012               	return	
  3576                           
  3577                           ; Switch size 1, requested type "speed"
  3578                           ; Number of cases is 4, Range of values is 0 to 8
  3579                           ; switch strategies available:
  3580                           ; Name         Instructions Cycles
  3581                           ; simple_byte           13     7 (average)
  3582                           ;	Chosen strategy is simple_byte
  3583  000D94  5028               	movf	??_ESP_message_handler,w,c
  3584  000D96  B4D8               	btfsc	status,2,c
  3585  000D98  0012               	return	
  3586  000D9A  0A04               	xorlw	4	; case 4
  3587  000D9C  E102 EF0C  F006    	bz	_ESP_process_rx_data
  3588  000DA2  0A02               	xorlw	2	; case 6
  3589  000DA4  E0EC               	bz	l553
  3590  000DA6  0A0E               	xorlw	14	; case 8
  3591  000DA8  E0ED               	bz	l554
  3592  000DAA  0012               	return		;funcret
  3593  000DAC                     __end_of_ESP_message_handler:
  3594                           	opt stack 0
  3595                           tblptru	equ	0xFF8
  3596                           prodh	equ	0xFF4
  3597                           prodl	equ	0xFF3
  3598                           intcon	equ	0xFF2
  3599                           intcon2	equ	0xFF1
  3600                           postinc0	equ	0xFEE
  3601                           wreg	equ	0xFE8
  3602                           indf2	equ	0xFDF
  3603                           postinc2	equ	0xFDE
  3604                           fsr2h	equ	0xFDA
  3605                           fsr2l	equ	0xFD9
  3606                           status	equ	0xFD8
  3607                           
  3608 ;; *************** function _ESP_process_rx_data *****************
  3609 ;; Defined at:
  3610 ;;		line 144 in file "esp1.c"
  3611 ;; Parameters:    Size  Location     Type
  3612 ;;		None
  3613 ;; Auto vars:     Size  Location     Type
  3614 ;;  index           2   36[COMRAM] PTR unsigned char 
  3615 ;;		 -> NULL(0), esp_read_data(16), 
  3616 ;;  aux             1   38[COMRAM] unsigned char 
  3617 ;; Return value:  Size  Location     Type
  3618 ;;                  1    wreg      void 
  3619 ;; Registers used:
  3620 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, cstack
  3621 ;; Tracked objects:
  3622 ;;		On entry : 0/0
  3623 ;;		On exit  : 0/0
  3624 ;;		Unchanged: 0/0
  3625 ;; Data sizes:     COMRAM   BANK0   BANK1
  3626 ;;      Params:         0       0       0
  3627 ;;      Locals:         3       0       0
  3628 ;;      Temps:          0       0       0
  3629 ;;      Totals:         3       0       0
  3630 ;;Total ram usage:        3 bytes
  3631 ;; Hardware stack levels used:    1
  3632 ;; Hardware stack levels required when called:   12
  3633 ;; This function calls:
  3634 ;;		Absolute function
  3635 ;;		_ESP_default_application_handler
  3636 ;;		_process_message
  3637 ;;		_strstr
  3638 ;; This function is called by:
  3639 ;;		_ESP_message_handler
  3640 ;; This function uses a non-reentrant model
  3641 ;;
  3642                           
  3643                           	psect	text27
  3644  000C18                     __ptext27:
  3645                           	opt stack 0
  3646  000C18                     _ESP_process_rx_data:
  3647                           	opt stack 17
  3648                           
  3649                           ;esp1.c: 146:     char *index;;esp1.c: 147:     unsigned char aux;;esp1.c: 149:     esp_
      +                          channel = esp_read_data[5];
  3650                           
  3651                           ;incstack = 0
  3652  000C18  C0E5  F03D         	movff	_esp_read_data+5,_esp_channel	;volatile
  3653                           
  3654                           ;esp1.c: 150:     index = strstr(esp_read_data,":");
  3655  000C1C  0EE0               	movlw	low _esp_read_data
  3656  000C1E  6E12               	movwf	strstr@h,c
  3657  000C20  6A13               	clrf	strstr@h+1,c
  3658  000C22  0EDD               	movlw	low STR_15
  3659  000C24  6E14               	movwf	strstr@n,c
  3660  000C26  EC71  F004         	call	_strstr	;wreg free
  3661  000C2A  C012  F025         	movff	?_strstr,ESP_process_rx_data@index
  3662  000C2E  C013  F026         	movff	?_strstr+1,ESP_process_rx_data@index+1
  3663                           
  3664                           ;esp1.c: 151:     aux = *(++index);
  3665  000C32  4A25               	infsnz	ESP_process_rx_data@index,f,c
  3666  000C34  2A26               	incf	ESP_process_rx_data@index+1,f,c
  3667  000C36  C025  FFD9         	movff	ESP_process_rx_data@index,fsr2l
  3668  000C3A  C026  FFDA         	movff	ESP_process_rx_data@index+1,fsr2h
  3669  000C3E  50DF               	movf	indf2,w,c
  3670  000C40  6E27               	movwf	ESP_process_rx_data@aux,c
  3671                           
  3672                           ;esp1.c: 156:     ESP_external_message_handler(aux);
  3673  000C42  0005               	push	
  3674  000C44  6EFA               	movwf	pclath,c
  3675  000C46  5048               	movf	_ESP_external_message_handler,w,c
  3676  000C48  6EFD               	movwf	tosl,c
  3677  000C4A  5049               	movf	_ESP_external_message_handler+1,w,c
  3678  000C4C  6EFE               	movwf	tosh,c
  3679  000C4E  50F8               	movf	tblptru,w,c
  3680  000C50  6EFF               	movwf	tosu,c
  3681  000C52  50FA               	movf	pclath,w,c
  3682  000C54  5027               	movf	ESP_process_rx_data@aux,w,c
  3683  000C56  0012               	return		;indir
  3684  000C58                     __end_of_ESP_process_rx_data:
  3685                           	opt stack 0
  3686                           tosu	equ	0xFFF
  3687                           tosh	equ	0xFFE
  3688                           tosl	equ	0xFFD
  3689                           pclath	equ	0xFFA
  3690                           tblptru	equ	0xFF8
  3691                           prodh	equ	0xFF4
  3692                           prodl	equ	0xFF3
  3693                           intcon	equ	0xFF2
  3694                           intcon2	equ	0xFF1
  3695                           postinc0	equ	0xFEE
  3696                           wreg	equ	0xFE8
  3697                           indf2	equ	0xFDF
  3698                           postinc2	equ	0xFDE
  3699                           fsr2h	equ	0xFDA
  3700                           fsr2l	equ	0xFD9
  3701                           status	equ	0xFD8
  3702                           
  3703 ;; *************** function _ESP_default_application_handler *****************
  3704 ;; Defined at:
  3705 ;;		line 219 in file "esp1.c"
  3706 ;; Parameters:    Size  Location     Type
  3707 ;;  data            1    wreg     unsigned char 
  3708 ;; Auto vars:     Size  Location     Type
  3709 ;;  data            1    0[COMRAM] unsigned char 
  3710 ;; Return value:  Size  Location     Type
  3711 ;;                  1    wreg      void 
  3712 ;; Registers used:
  3713 ;;		wreg
  3714 ;; Tracked objects:
  3715 ;;		On entry : 0/0
  3716 ;;		On exit  : 0/0
  3717 ;;		Unchanged: 0/0
  3718 ;; Data sizes:     COMRAM   BANK0   BANK1
  3719 ;;      Params:         0       0       0
  3720 ;;      Locals:         0       0       0
  3721 ;;      Temps:          0       0       0
  3722 ;;      Totals:         0       0       0
  3723 ;;Total ram usage:        0 bytes
  3724 ;; Hardware stack levels used:    1
  3725 ;; Hardware stack levels required when called:    4
  3726 ;; This function calls:
  3727 ;;		Nothing
  3728 ;; This function is called by:
  3729 ;;		_ESP_initialize
  3730 ;;		_ESP_process_rx_data
  3731 ;; This function uses a non-reentrant model
  3732 ;;
  3733                           
  3734                           	psect	text28
  3735  0010FE                     __ptext28:
  3736                           	opt stack 0
  3737  0010FE                     _ESP_default_application_handler:
  3738                           	opt stack 24
  3739                           
  3740                           ;incstack = 0
  3741  0010FE  0012               	return		;funcret
  3742  001100                     __end_of_ESP_default_application_handler:
  3743                           	opt stack 0
  3744                           tosu	equ	0xFFF
  3745                           tosh	equ	0xFFE
  3746                           tosl	equ	0xFFD
  3747                           pclath	equ	0xFFA
  3748                           tblptru	equ	0xFF8
  3749                           prodh	equ	0xFF4
  3750                           prodl	equ	0xFF3
  3751                           intcon	equ	0xFF2
  3752                           intcon2	equ	0xFF1
  3753                           postinc0	equ	0xFEE
  3754                           wreg	equ	0xFE8
  3755                           indf2	equ	0xFDF
  3756                           postinc2	equ	0xFDE
  3757                           fsr2h	equ	0xFDA
  3758                           fsr2l	equ	0xFD9
  3759                           status	equ	0xFD8
  3760                           
  3761 ;; *************** function _process_message *****************
  3762 ;; Defined at:
  3763 ;;		line 47 in file "logger.c"
  3764 ;; Parameters:    Size  Location     Type
  3765 ;;  message         1    wreg     unsigned char 
  3766 ;; Auto vars:     Size  Location     Type
  3767 ;;  message         1   35[COMRAM] unsigned char 
  3768 ;; Return value:  Size  Location     Type
  3769 ;;                  1    wreg      void 
  3770 ;; Registers used:
  3771 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3772 ;; Tracked objects:
  3773 ;;		On entry : 0/0
  3774 ;;		On exit  : 0/0
  3775 ;;		Unchanged: 0/0
  3776 ;; Data sizes:     COMRAM   BANK0   BANK1
  3777 ;;      Params:         0       0       0
  3778 ;;      Locals:         1       0       0
  3779 ;;      Temps:          2       0       0
  3780 ;;      Totals:         3       0       0
  3781 ;;Total ram usage:        3 bytes
  3782 ;; Hardware stack levels used:    1
  3783 ;; Hardware stack levels required when called:   11
  3784 ;; This function calls:
  3785 ;;		_ADC1_StartConversion
  3786 ;;		_ESP_write
  3787 ;;		_TMR1_StartTimer
  3788 ;;		_TMR1_StopTimer
  3789 ;;		_toggle_format
  3790 ;; This function is called by:
  3791 ;;		_main
  3792 ;;		_logger_initialize
  3793 ;;		_ESP_process_rx_data
  3794 ;; This function uses a non-reentrant model
  3795 ;;
  3796                           
  3797                           	psect	text29
  3798  000A50                     __ptext29:
  3799                           	opt stack 0
  3800  000A50                     _process_message:
  3801                           	opt stack 19
  3802                           
  3803                           ;incstack = 0
  3804                           ;process_message@message stored from wreg
  3805  000A50  6E24               	movwf	process_message@message,c
  3806                           
  3807                           ;logger.c: 47: void process_message(unsigned char message);logger.c: 48: {;logger.c: 51:
      +                               switch (message) {
  3808  000A52  D01A               	goto	l3479
  3809  000A54                     l3459:
  3810                           
  3811                           ;logger.c: 56:                 ESP_write("Ok\n",3);
  3812  000A54  0EC9               	movlw	low STR_20
  3813  000A56  6E1D               	movwf	ESP_write@pt,c
  3814  000A58  501D               	movf	ESP_write@pt,w,c
  3815  000A5A  A4D8               	btfss	status,2,c
  3816  000A5C  0E02               	movlw	high __smallconst
  3817  000A5E  6E1E               	movwf	ESP_write@pt+1,c
  3818  000A60  0E03               	movlw	3
  3819  000A62  6E1F               	movwf	ESP_write@length,c
  3820  000A64  EF42  F003         	goto	_ESP_write
  3821  000A68                     l3465:
  3822                           
  3823                           ;logger.c: 69:             if (TMR1_state == TMR1_RUNNING)
  3824  000A68  043B               	decf	_TMR1_state,w,c	;volatile
  3825  000A6A  E101               	bnz	l3469
  3826  000A6C  0012               	return	
  3827  000A6E                     l3469:
  3828                           
  3829                           ;logger.c: 71:             TMR1_StartTimer();
  3830  000A6E  EC77  F008         	call	_TMR1_StartTimer	;wreg free
  3831                           
  3832                           ;logger.c: 72:             TMR1_state = TMR1_RUNNING;
  3833  000A72  0E01               	movlw	1
  3834  000A74  6E3B               	movwf	_TMR1_state,c	;volatile
  3835                           
  3836                           ;logger.c: 74:             break;
  3837  000A76  0C01               	retlw	1
  3838  000A78                     l3473:
  3839                           
  3840                           ;logger.c: 78:             TMR1_StopTimer();
  3841  000A78  EC75  F008         	call	_TMR1_StopTimer	;wreg free
  3842                           
  3843                           ;logger.c: 79:             TMR1_state = TMR1_STOP;
  3844  000A7C  6A3B               	clrf	_TMR1_state,c	;volatile
  3845                           
  3846                           ;logger.c: 80:             break;
  3847  000A7E  0012               	return	
  3848  000A80                     l652:
  3849  000A80  9A89               	bcf	3977,5,c	;volatile
  3850  000A82  0012               	return	
  3851  000A84                     l655:
  3852  000A84  8A89               	bsf	3977,5,c	;volatile
  3853  000A86  0012               	return	
  3854  000A88                     l3479:
  3855  000A88  5024               	movf	process_message@message,w,c
  3856  000A8A  6E22               	movwf	??_process_message& (0+255),c
  3857  000A8C  6A23               	clrf	(??_process_message+1)& (0+255),c
  3858                           
  3859                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3860                           ; Switch size 1, requested type "speed"
  3861                           ; Number of cases is 1, Range of values is 0 to 0
  3862                           ; switch strategies available:
  3863                           ; Name         Instructions Cycles
  3864                           ; simple_byte            4     3 (average)
  3865                           ;	Chosen strategy is simple_byte
  3866  000A8E  5023               	movf	??_process_message+1,w,c
  3867  000A90  A4D8               	btfss	status,2,c
  3868  000A92  0012               	return	
  3869                           
  3870                           ; Switch size 1, requested type "speed"
  3871                           ; Number of cases is 7, Range of values is 79 to 116
  3872                           ; switch strategies available:
  3873                           ; Name         Instructions Cycles
  3874                           ; simple_byte           22    12 (average)
  3875                           ;	Chosen strategy is simple_byte
  3876  000A94  5022               	movf	??_process_message,w,c
  3877  000A96  0A4F               	xorlw	79	; case 79
  3878  000A98  E0F5               	bz	l655
  3879  000A9A  0A1C               	xorlw	28	; case 83
  3880  000A9C  E0ED               	bz	l3473
  3881  000A9E  0A07               	xorlw	7	; case 84
  3882  000AA0  E102 EFD4  F007    	bz	_toggle_format
  3883  000AA6  0A35               	xorlw	53	; case 97
  3884  000AA8  E102 EF79  F008    	bz	_ADC1_StartConversion
  3885  000AAE  0A0E               	xorlw	14	; case 111
  3886  000AB0  E0E7               	bz	l652
  3887  000AB2  0A1C               	xorlw	28	; case 115
  3888  000AB4  E0D9               	bz	l3465
  3889  000AB6  0A07               	xorlw	7	; case 116
  3890  000AB8  E0CD               	bz	l3459
  3891  000ABA  0012               	return		;funcret
  3892  000ABC                     __end_of_process_message:
  3893                           	opt stack 0
  3894                           tosu	equ	0xFFF
  3895                           tosh	equ	0xFFE
  3896                           tosl	equ	0xFFD
  3897                           pclath	equ	0xFFA
  3898                           tblptru	equ	0xFF8
  3899                           prodh	equ	0xFF4
  3900                           prodl	equ	0xFF3
  3901                           intcon	equ	0xFF2
  3902                           intcon2	equ	0xFF1
  3903                           postinc0	equ	0xFEE
  3904                           wreg	equ	0xFE8
  3905                           indf2	equ	0xFDF
  3906                           postinc2	equ	0xFDE
  3907                           fsr2h	equ	0xFDA
  3908                           fsr2l	equ	0xFD9
  3909                           status	equ	0xFD8
  3910                           
  3911 ;; *************** function _toggle_format *****************
  3912 ;; Defined at:
  3913 ;;		line 139 in file "logger.c"
  3914 ;; Parameters:    Size  Location     Type
  3915 ;;		None
  3916 ;; Auto vars:     Size  Location     Type
  3917 ;;		None
  3918 ;; Return value:  Size  Location     Type
  3919 ;;                  1    wreg      void 
  3920 ;; Registers used:
  3921 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3922 ;; Tracked objects:
  3923 ;;		On entry : 0/0
  3924 ;;		On exit  : 0/0
  3925 ;;		Unchanged: 0/0
  3926 ;; Data sizes:     COMRAM   BANK0   BANK1
  3927 ;;      Params:         0       0       0
  3928 ;;      Locals:         0       0       0
  3929 ;;      Temps:          0       0       0
  3930 ;;      Totals:         0       0       0
  3931 ;;Total ram usage:        0 bytes
  3932 ;; Hardware stack levels used:    1
  3933 ;; Hardware stack levels required when called:   10
  3934 ;; This function calls:
  3935 ;;		_ESP_write
  3936 ;; This function is called by:
  3937 ;;		_process_message
  3938 ;; This function uses a non-reentrant model
  3939 ;;
  3940                           
  3941                           	psect	text30
  3942  000FA8                     __ptext30:
  3943                           	opt stack 0
  3944  000FA8                     _toggle_format:
  3945                           	opt stack 19
  3946                           
  3947                           ;logger.c: 141:     if (message_format == MESSAGE_BINARY) {
  3948                           
  3949                           ;incstack = 0
  3950  000FA8  503C               	movf	_message_format,w,c	;volatile
  3951  000FAA  E104               	bnz	l666
  3952                           
  3953                           ;logger.c: 142:         message_format = MESSAGE_TEXT;
  3954  000FAC  0E01               	movlw	1
  3955  000FAE  6E3C               	movwf	_message_format,c	;volatile
  3956                           
  3957                           ;logger.c: 146:             ESP_write("tmode\n",6);
  3958  000FB0  0EAB               	movlw	low STR_21
  3959  000FB2  D002               	goto	L4
  3960  000FB4                     l666:
  3961                           
  3962                           ;logger.c: 149:         message_format = MESSAGE_BINARY;
  3963  000FB4  6A3C               	clrf	_message_format,c	;volatile
  3964                           
  3965                           ;logger.c: 153:             ESP_write("bmode\n",6);
  3966  000FB6  0EA4               	movlw	low STR_22
  3967  000FB8                     L4:
  3968  000FB8  6E1D               	movwf	ESP_write@pt,c
  3969  000FBA  501D               	movf	ESP_write@pt,w,c
  3970  000FBC  A4D8               	btfss	status,2,c
  3971  000FBE  0E02               	movlw	high __smallconst
  3972  000FC0  6E1E               	movwf	ESP_write@pt+1,c
  3973  000FC2  0E06               	movlw	6
  3974  000FC4  6E1F               	movwf	ESP_write@length,c
  3975  000FC6  EF42  F003         	goto	_ESP_write	;wreg free
  3976  000FCA                     __end_of_toggle_format:
  3977                           	opt stack 0
  3978                           tosu	equ	0xFFF
  3979                           tosh	equ	0xFFE
  3980                           tosl	equ	0xFFD
  3981                           pclath	equ	0xFFA
  3982                           tblptru	equ	0xFF8
  3983                           prodh	equ	0xFF4
  3984                           prodl	equ	0xFF3
  3985                           intcon	equ	0xFF2
  3986                           intcon2	equ	0xFF1
  3987                           postinc0	equ	0xFEE
  3988                           wreg	equ	0xFE8
  3989                           indf2	equ	0xFDF
  3990                           postinc2	equ	0xFDE
  3991                           fsr2h	equ	0xFDA
  3992                           fsr2l	equ	0xFD9
  3993                           status	equ	0xFD8
  3994                           
  3995 ;; *************** function _ESP_write *****************
  3996 ;; Defined at:
  3997 ;;		line 187 in file "esp1.c"
  3998 ;; Parameters:    Size  Location     Type
  3999 ;;  pt              2   28[COMRAM] PTR unsigned char 
  4000 ;;		 -> STR_24(3), STR_23(3), STR_22(7), STR_21(7), 
  4001 ;;		 -> read_analog@mess(6), WIFI_tx_buf(64), STR_20(4), 
  4002 ;;  length          1   30[COMRAM] unsigned char 
  4003 ;; Auto vars:     Size  Location     Type
  4004 ;;  aux             1   32[COMRAM] unsigned char 
  4005 ;;  res             1   31[COMRAM] unsigned char 
  4006 ;; Return value:  Size  Location     Type
  4007 ;;                  1    wreg      void 
  4008 ;; Registers used:
  4009 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4010 ;; Tracked objects:
  4011 ;;		On entry : 0/0
  4012 ;;		On exit  : 0/0
  4013 ;;		Unchanged: 0/0
  4014 ;; Data sizes:     COMRAM   BANK0   BANK1
  4015 ;;      Params:         3       0       0
  4016 ;;      Locals:         2       0       0
  4017 ;;      Temps:          0       0       0
  4018 ;;      Totals:         5       0       0
  4019 ;;Total ram usage:        5 bytes
  4020 ;; Hardware stack levels used:    1
  4021 ;; Hardware stack levels required when called:    9
  4022 ;; This function calls:
  4023 ;;		_ESP_wait_for
  4024 ;;		___awdiv
  4025 ;;		___lbmod
  4026 ;;		__puts
  4027 ;;		_write
  4028 ;; This function is called by:
  4029 ;;		_process_message
  4030 ;;		_read_analog
  4031 ;;		_toggle_format
  4032 ;;		_process_ioc
  4033 ;; This function uses a non-reentrant model
  4034 ;;
  4035                           
  4036                           	psect	text31
  4037  000684                     __ptext31:
  4038                           	opt stack 0
  4039  000684                     _ESP_write:
  4040                           	opt stack 20
  4041                           
  4042                           ;esp1.c: 187: void ESP_write(unsigned char *pt, unsigned char length);esp1.c: 188: {;esp
      +                          1.c: 189:     unsigned char aux, res;;esp1.c: 191:     _puts("AT+CIPSEND=");
  4043                           
  4044                           ;incstack = 0
  4045  000684  0E73               	movlw	low STR_16
  4046  000686  6E0A               	movwf	__puts@pt,c
  4047  000688  EC4B  F006         	call	__puts	;wreg free
  4048                           
  4049                           ;esp1.c: 192:     aux = esp_channel;
  4050  00068C  C03D  F021         	movff	_esp_channel,ESP_write@aux	;volatile
  4051                           
  4052                           ;esp1.c: 193:     write(&aux,1);
  4053  000690  0E21               	movlw	low ESP_write@aux
  4054  000692  6E0A               	movwf	write@pt,c
  4055  000694  6A0B               	clrf	write@pt+1,c
  4056  000696  0E01               	movlw	1
  4057  000698  6E0C               	movwf	write@lenght,c
  4058  00069A  ECA9  F005         	call	_write	;wreg free
  4059                           
  4060                           ;esp1.c: 194:     _puts(",");
  4061  00069E  0EDB               	movlw	low STR_17
  4062  0006A0  6E0A               	movwf	__puts@pt,c
  4063  0006A2  EC4B  F006         	call	__puts	;wreg free
  4064                           
  4065                           ;esp1.c: 196:     aux = length;
  4066  0006A6  C01F  F021         	movff	ESP_write@length,ESP_write@aux
  4067                           
  4068                           ;esp1.c: 197:     if (aux > 9) {
  4069  0006AA  0E09               	movlw	9
  4070  0006AC  6421               	cpfsgt	ESP_write@aux,c
  4071  0006AE  D023               	goto	l3433
  4072                           
  4073                           ;esp1.c: 198:         res = aux%10;
  4074  0006B0  0E0A               	movlw	10
  4075  0006B2  6E09               	movwf	___lbmod@divisor,c
  4076  0006B4  5021               	movf	ESP_write@aux,w,c
  4077  0006B6  EC8A  F007         	call	___lbmod
  4078  0006BA  6E20               	movwf	ESP_write@res,c
  4079                           
  4080                           ;esp1.c: 199:         res += '0';
  4081  0006BC  0E30               	movlw	48
  4082  0006BE  2620               	addwf	ESP_write@res,f,c
  4083                           
  4084                           ;esp1.c: 200:         aux /= 10;
  4085  0006C0  C021  F009         	movff	ESP_write@aux,___awdiv@dividend
  4086  0006C4  6A0A               	clrf	___awdiv@dividend+1,c
  4087  0006C6  6A0C               	clrf	___awdiv@divisor+1,c
  4088  0006C8  0E0A               	movlw	10
  4089  0006CA  6E0B               	movwf	___awdiv@divisor,c
  4090  0006CC  ECEC  F004         	call	___awdiv	;wreg free
  4091  0006D0  5009               	movf	?___awdiv,w,c
  4092  0006D2  6E21               	movwf	ESP_write@aux,c
  4093                           
  4094                           ;esp1.c: 201:         aux += '0';
  4095  0006D4  0E30               	movlw	48
  4096  0006D6  2621               	addwf	ESP_write@aux,f,c
  4097                           
  4098                           ;esp1.c: 202:         write(&aux,1);
  4099  0006D8  0E21               	movlw	low ESP_write@aux
  4100  0006DA  6E0A               	movwf	write@pt,c
  4101  0006DC  6A0B               	clrf	write@pt+1,c
  4102  0006DE  0E01               	movlw	1
  4103  0006E0  6E0C               	movwf	write@lenght,c
  4104  0006E2  ECA9  F005         	call	_write	;wreg free
  4105                           
  4106                           ;esp1.c: 203:         write(&res,1);
  4107  0006E6  0E20               	movlw	low ESP_write@res
  4108  0006E8  6E0A               	movwf	write@pt,c
  4109  0006EA  6A0B               	clrf	write@pt+1,c
  4110  0006EC  0E01               	movlw	1
  4111  0006EE  6E0C               	movwf	write@lenght,c
  4112  0006F0  ECA9  F005         	call	_write	;wreg free
  4113                           
  4114                           ;esp1.c: 205:     } else {
  4115  0006F4  D00A               	goto	l3437
  4116  0006F6                     l3433:
  4117                           
  4118                           ;esp1.c: 206:         aux = length + '0';
  4119  0006F6  501F               	movf	ESP_write@length,w,c
  4120  0006F8  0F30               	addlw	48
  4121  0006FA  6E21               	movwf	ESP_write@aux,c
  4122                           
  4123                           ;esp1.c: 207:         write(&aux,1);
  4124  0006FC  0E21               	movlw	low ESP_write@aux
  4125  0006FE  6E0A               	movwf	write@pt,c
  4126  000700  6A0B               	clrf	write@pt+1,c
  4127  000702  0E01               	movlw	1
  4128  000704  6E0C               	movwf	write@lenght,c
  4129  000706  ECA9  F005         	call	_write	;wreg free
  4130  00070A                     l3437:
  4131                           
  4132                           ;esp1.c: 210:     _puts("\r\n");
  4133  00070A  0ECE               	movlw	low (STR_12+1)
  4134  00070C  6E0A               	movwf	__puts@pt,c
  4135  00070E  EC4B  F006         	call	__puts	;wreg free
  4136                           
  4137                           ;esp1.c: 212:     ESP_wait_for(ESP_OK);
  4138  000712  0E02               	movlw	2
  4139  000714  EC68  F006         	call	_ESP_wait_for
  4140                           
  4141                           ;esp1.c: 214:     write(pt,length);
  4142  000718  C01D  F00A         	movff	ESP_write@pt,write@pt
  4143  00071C  C01E  F00B         	movff	ESP_write@pt+1,write@pt+1
  4144  000720  C01F  F00C         	movff	ESP_write@length,write@lenght
  4145  000724  ECA9  F005         	call	_write	;wreg free
  4146                           
  4147                           ;esp1.c: 215:     _puts("\r\n");
  4148  000728  0ECE               	movlw	low (STR_12+1)
  4149  00072A  6E0A               	movwf	__puts@pt,c
  4150  00072C  EF4B  F006         	goto	__puts	;wreg free
  4151  000730                     __end_of_ESP_write:
  4152                           	opt stack 0
  4153                           tosu	equ	0xFFF
  4154                           tosh	equ	0xFFE
  4155                           tosl	equ	0xFFD
  4156                           pclath	equ	0xFFA
  4157                           tblptru	equ	0xFF8
  4158                           prodh	equ	0xFF4
  4159                           prodl	equ	0xFF3
  4160                           intcon	equ	0xFF2
  4161                           intcon2	equ	0xFF1
  4162                           postinc0	equ	0xFEE
  4163                           wreg	equ	0xFE8
  4164                           indf2	equ	0xFDF
  4165                           postinc2	equ	0xFDE
  4166                           fsr2h	equ	0xFDA
  4167                           fsr2l	equ	0xFD9
  4168                           status	equ	0xFD8
  4169                           
  4170 ;; *************** function _write *****************
  4171 ;; Defined at:
  4172 ;;		line 15 in file "comm.c"
  4173 ;; Parameters:    Size  Location     Type
  4174 ;;  pt              2    9[COMRAM] PTR unsigned char 
  4175 ;;		 -> read_wifi_settings@pass(14), read_wifi_settings@wifi(10), STR_24(3), STR_23(3), 
  4176 ;;		 -> STR_22(7), STR_21(7), read_analog@mess(6), WIFI_tx_buf(64), 
  4177 ;;		 -> STR_20(4), ESP_write@res(1), ESP_write@aux(1), 
  4178 ;;  lenght          1   11[COMRAM] unsigned char 
  4179 ;; Auto vars:     Size  Location     Type
  4180 ;;  i               1   14[COMRAM] unsigned char 
  4181 ;; Return value:  Size  Location     Type
  4182 ;;                  1    wreg      void 
  4183 ;; Registers used:
  4184 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4185 ;; Tracked objects:
  4186 ;;		On entry : 0/1
  4187 ;;		On exit  : 0/0
  4188 ;;		Unchanged: 0/0
  4189 ;; Data sizes:     COMRAM   BANK0   BANK1
  4190 ;;      Params:         3       0       0
  4191 ;;      Locals:         1       0       0
  4192 ;;      Temps:          2       0       0
  4193 ;;      Totals:         6       0       0
  4194 ;;Total ram usage:        6 bytes
  4195 ;; Hardware stack levels used:    1
  4196 ;; Hardware stack levels required when called:    5
  4197 ;; This function calls:
  4198 ;;		_EUSART_Write
  4199 ;;		_EUSART_is_tx_ready
  4200 ;; This function is called by:
  4201 ;;		_ESP_config
  4202 ;;		_ESP_write
  4203 ;; This function uses a non-reentrant model
  4204 ;;
  4205                           
  4206                           	psect	text32
  4207  000B52                     __ptext32:
  4208                           	opt stack 0
  4209  000B52                     _write:
  4210                           	opt stack 23
  4211                           
  4212                           ;comm.c: 15: void write(unsigned char *pt, unsigned char lenght);comm.c: 16: {;comm.c: 1
      +                          7:     unsigned char i;;comm.c: 19:     for (i=0; i<lenght; i++) {
  4213                           
  4214                           ;incstack = 0
  4215  000B52  6A0F               	clrf	write@i,c
  4216  000B54  D01D               	goto	l3389
  4217  000B56                     l3383:
  4218  000B56  EC73  F008         	call	_EUSART_is_tx_ready	;wreg free
  4219  000B5A  0900               	iorlw	0
  4220  000B5C  E0FC               	bz	l3383
  4221                           
  4222                           ;comm.c: 21:         EUSART_Write(pt[i]);
  4223  000B5E  500F               	movf	write@i,w,c
  4224  000B60  240A               	addwf	write@pt,w,c
  4225  000B62  6E0D               	movwf	??_write& (0+255),c
  4226  000B64  0E00               	movlw	0
  4227  000B66  200B               	addwfc	write@pt+1,w,c
  4228  000B68  6E0E               	movwf	(??_write+1)& (0+255),c
  4229  000B6A  C00D  FFF6         	movff	??_write,tblptrl
  4230  000B6E  C00E  FFF7         	movff	??_write+1,tblptrh
  4231  000B72  6AF8               	clrf	tblptru,c
  4232  000B74  0E01               	movlw	(high __ramtop+-1)
  4233  000B76  64F7               	cpfsgt	tblptrh,c
  4234  000B78  D003               	bra	u2297
  4235  000B7A  0008               	tblrd		*
  4236  000B7C  50F5               	movf	tablat,w,c
  4237  000B7E  D005               	bra	u2290
  4238  000B80                     u2297:
  4239  000B80  CFF6 FFD9          	movff	tblptrl,fsr2l
  4240  000B84  CFF7 FFDA          	movff	tblptrh,fsr2h
  4241  000B88  50DF               	movf	indf2,w,c
  4242  000B8A                     u2290:
  4243  000B8A  EC20  F007         	call	_EUSART_Write
  4244                           
  4245                           ;comm.c: 22:     }
  4246  000B8E  2A0F               	incf	write@i,f,c
  4247  000B90                     l3389:
  4248  000B90  500C               	movf	write@lenght,w,c
  4249  000B92  5C0F               	subwf	write@i,w,c
  4250  000B94  E3E0               	bnc	l3383
  4251  000B96  0012               	return		;funcret
  4252  000B98                     __end_of_write:
  4253                           	opt stack 0
  4254                           tosu	equ	0xFFF
  4255                           tosh	equ	0xFFE
  4256                           tosl	equ	0xFFD
  4257                           pclath	equ	0xFFA
  4258                           tblptru	equ	0xFF8
  4259                           tblptrh	equ	0xFF7
  4260                           tblptrl	equ	0xFF6
  4261                           tablat	equ	0xFF5
  4262                           prodh	equ	0xFF4
  4263                           prodl	equ	0xFF3
  4264                           intcon	equ	0xFF2
  4265                           intcon2	equ	0xFF1
  4266                           postinc0	equ	0xFEE
  4267                           wreg	equ	0xFE8
  4268                           indf2	equ	0xFDF
  4269                           postinc2	equ	0xFDE
  4270                           fsr2h	equ	0xFDA
  4271                           fsr2l	equ	0xFD9
  4272                           status	equ	0xFD8
  4273                           
  4274 ;; *************** function __puts *****************
  4275 ;; Defined at:
  4276 ;;		line 5 in file "comm.c"
  4277 ;; Parameters:    Size  Location     Type
  4278 ;;  pt              1    9[COMRAM] PTR unsigned char 
  4279 ;;		 -> STR_29(13), STR_28(22), STR_27(13), STR_26(18), 
  4280 ;;		 -> STR_25(13), STR_19(3), STR_18(3), STR_17(2), 
  4281 ;;		 -> STR_16(12), STR_14(20), STR_13(14), STR_12(4), 
  4282 ;;		 -> STR_11(4), STR_10(11), STR_9(14), STR_8(5), 
  4283 ;; Auto vars:     Size  Location     Type
  4284 ;;  index           1   11[COMRAM] unsigned char 
  4285 ;; Return value:  Size  Location     Type
  4286 ;;                  1    wreg      void 
  4287 ;; Registers used:
  4288 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4289 ;; Tracked objects:
  4290 ;;		On entry : 0/1
  4291 ;;		On exit  : 0/0
  4292 ;;		Unchanged: 0/0
  4293 ;; Data sizes:     COMRAM   BANK0   BANK1
  4294 ;;      Params:         1       0       0
  4295 ;;      Locals:         1       0       0
  4296 ;;      Temps:          1       0       0
  4297 ;;      Totals:         3       0       0
  4298 ;;Total ram usage:        3 bytes
  4299 ;; Hardware stack levels used:    1
  4300 ;; Hardware stack levels required when called:    5
  4301 ;; This function calls:
  4302 ;;		_EUSART_Write
  4303 ;;		_EUSART_is_tx_ready
  4304 ;; This function is called by:
  4305 ;;		_ESP_config
  4306 ;;		_ESP_write
  4307 ;;		_config_wifi_settings
  4308 ;; This function uses a non-reentrant model
  4309 ;;
  4310                           
  4311                           	psect	text33
  4312  000C96                     __ptext33:
  4313                           	opt stack 0
  4314  000C96                     __puts:
  4315                           	opt stack 23
  4316                           
  4317                           ;comm.c: 5: void _puts(char *pt);comm.c: 6: {;comm.c: 7:     unsigned char index;;comm.c
      +                          : 8:     index = 0;
  4318                           
  4319                           ;incstack = 0
  4320  000C96  6A0C               	clrf	__puts@index,c
  4321                           
  4322                           ;comm.c: 9:     while(pt[index]) {
  4323  000C98  D010               	goto	l3379
  4324  000C9A                     l3373:
  4325  000C9A  EC73  F008         	call	_EUSART_is_tx_ready	;wreg free
  4326  000C9E  0900               	iorlw	0
  4327  000CA0  E0FC               	bz	l3373
  4328                           
  4329                           ;comm.c: 11:         EUSART_Write(pt[index++]);
  4330  000CA2  500A               	movf	__puts@pt,w,c
  4331  000CA4  240C               	addwf	__puts@index,w,c
  4332  000CA6  6E0B               	movwf	??__puts& (0+255),c
  4333  000CA8  C00B  FFF6         	movff	??__puts,tblptrl
  4334  000CAC                     	if	1	;There is more than 1 active tblptr byte
  4335  000CAC  0E02               	movlw	high __smallconst
  4336  000CAE  6EF7               	movwf	tblptrh,c
  4337  000CB0                     	endif
  4338  000CB0                     	if	0	;tblptru may be non-zero
  4339  000CB0                     	endif
  4340  000CB0                     	if	0	;tblptru may be non-zero
  4341  000CB0                     	endif
  4342  000CB0  0008               	tblrd		*
  4343  000CB2  50F5               	movf	tablat,w,c
  4344  000CB4  EC20  F007         	call	_EUSART_Write
  4345  000CB8  2A0C               	incf	__puts@index,f,c
  4346  000CBA                     l3379:
  4347                           
  4348                           ;comm.c: 9:     while(pt[index]) {
  4349  000CBA  500A               	movf	__puts@pt,w,c
  4350  000CBC  240C               	addwf	__puts@index,w,c
  4351  000CBE  6E0B               	movwf	??__puts& (0+255),c
  4352  000CC0  C00B  FFF6         	movff	??__puts,tblptrl
  4353  000CC4                     	if	1	;There is more than 1 active tblptr byte
  4354  000CC4  0E02               	movlw	high __smallconst
  4355  000CC6  6EF7               	movwf	tblptrh,c
  4356  000CC8                     	endif
  4357  000CC8                     	if	0	;tblptru may be non-zero
  4358  000CC8                     	endif
  4359  000CC8                     	if	0	;tblptru may be non-zero
  4360  000CC8                     	endif
  4361  000CC8  0008               	tblrd		*
  4362  000CCA  50F5               	movf	tablat,w,c
  4363  000CCC  E1E6               	bnz	l3373
  4364  000CCE  0012               	return		;funcret
  4365  000CD0                     __end_of__puts:
  4366                           	opt stack 0
  4367                           tosu	equ	0xFFF
  4368                           tosh	equ	0xFFE
  4369                           tosl	equ	0xFFD
  4370                           pclath	equ	0xFFA
  4371                           tblptru	equ	0xFF8
  4372                           tblptrh	equ	0xFF7
  4373                           tblptrl	equ	0xFF6
  4374                           tablat	equ	0xFF5
  4375                           prodh	equ	0xFF4
  4376                           prodl	equ	0xFF3
  4377                           intcon	equ	0xFF2
  4378                           intcon2	equ	0xFF1
  4379                           postinc0	equ	0xFEE
  4380                           wreg	equ	0xFE8
  4381                           indf2	equ	0xFDF
  4382                           postinc2	equ	0xFDE
  4383                           fsr2h	equ	0xFDA
  4384                           fsr2l	equ	0xFD9
  4385                           status	equ	0xFD8
  4386                           
  4387 ;; *************** function _EUSART_is_tx_ready *****************
  4388 ;; Defined at:
  4389 ;;		line 113 in file "mcc_generated_files/eusart.c"
  4390 ;; Parameters:    Size  Location     Type
  4391 ;;		None
  4392 ;; Auto vars:     Size  Location     Type
  4393 ;;		None
  4394 ;; Return value:  Size  Location     Type
  4395 ;;                  1    wreg      unsigned char 
  4396 ;; Registers used:
  4397 ;;		wreg, status,2
  4398 ;; Tracked objects:
  4399 ;;		On entry : 0/1
  4400 ;;		On exit  : 0/0
  4401 ;;		Unchanged: 0/0
  4402 ;; Data sizes:     COMRAM   BANK0   BANK1
  4403 ;;      Params:         0       0       0
  4404 ;;      Locals:         0       0       0
  4405 ;;      Temps:          0       0       0
  4406 ;;      Totals:         0       0       0
  4407 ;;Total ram usage:        0 bytes
  4408 ;; Hardware stack levels used:    1
  4409 ;; Hardware stack levels required when called:    4
  4410 ;; This function calls:
  4411 ;;		Nothing
  4412 ;; This function is called by:
  4413 ;;		__puts
  4414 ;;		_write
  4415 ;; This function uses a non-reentrant model
  4416 ;;
  4417                           
  4418                           	psect	text34
  4419  0010E6                     __ptext34:
  4420                           	opt stack 0
  4421  0010E6                     _EUSART_is_tx_ready:
  4422                           	opt stack 23
  4423                           
  4424                           ;mcc_generated_files/eusart.c: 115:     return eusartTxBufferRemaining;
  4425                           
  4426                           ;incstack = 0
  4427  0010E6  5055               	movf	_eusartTxBufferRemaining,w,c	;volatile
  4428  0010E8  0012               	return		;funcret
  4429  0010EA                     __end_of_EUSART_is_tx_ready:
  4430                           	opt stack 0
  4431                           tosu	equ	0xFFF
  4432                           tosh	equ	0xFFE
  4433                           tosl	equ	0xFFD
  4434                           pclath	equ	0xFFA
  4435                           tblptru	equ	0xFF8
  4436                           tblptrh	equ	0xFF7
  4437                           tblptrl	equ	0xFF6
  4438                           tablat	equ	0xFF5
  4439                           prodh	equ	0xFF4
  4440                           prodl	equ	0xFF3
  4441                           intcon	equ	0xFF2
  4442                           intcon2	equ	0xFF1
  4443                           postinc0	equ	0xFEE
  4444                           wreg	equ	0xFE8
  4445                           indf2	equ	0xFDF
  4446                           postinc2	equ	0xFDE
  4447                           fsr2h	equ	0xFDA
  4448                           fsr2l	equ	0xFD9
  4449                           status	equ	0xFD8
  4450                           
  4451 ;; *************** function _EUSART_Write *****************
  4452 ;; Defined at:
  4453 ;;		line 148 in file "mcc_generated_files/eusart.c"
  4454 ;; Parameters:    Size  Location     Type
  4455 ;;  txData          1    wreg     unsigned char 
  4456 ;; Auto vars:     Size  Location     Type
  4457 ;;  txData          1    8[COMRAM] unsigned char 
  4458 ;; Return value:  Size  Location     Type
  4459 ;;                  1    wreg      void 
  4460 ;; Registers used:
  4461 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4462 ;; Tracked objects:
  4463 ;;		On entry : 0/1
  4464 ;;		On exit  : 0/0
  4465 ;;		Unchanged: 0/0
  4466 ;; Data sizes:     COMRAM   BANK0   BANK1
  4467 ;;      Params:         0       0       0
  4468 ;;      Locals:         1       0       0
  4469 ;;      Temps:          0       0       0
  4470 ;;      Totals:         1       0       0
  4471 ;;Total ram usage:        1 bytes
  4472 ;; Hardware stack levels used:    1
  4473 ;; Hardware stack levels required when called:    4
  4474 ;; This function calls:
  4475 ;;		Nothing
  4476 ;; This function is called by:
  4477 ;;		__puts
  4478 ;;		_write
  4479 ;; This function uses a non-reentrant model
  4480 ;;
  4481                           
  4482                           	psect	text35
  4483  000E40                     __ptext35:
  4484                           	opt stack 0
  4485  000E40                     _EUSART_Write:
  4486                           	opt stack 23
  4487                           
  4488                           ;incstack = 0
  4489                           ;EUSART_Write@txData stored from wreg
  4490  000E40  6E09               	movwf	EUSART_Write@txData,c
  4491  000E42                     
  4492                           ;mcc_generated_files/eusart.c: 150:     while(0 == eusartTxBufferRemaining)
  4493                           
  4494                           ;mcc_generated_files/eusart.c: 148: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 149: {;mcc_generated_files/eusart.c: 150:     while(0 == eusartTxBufferRemai
      +                          ning)
  4495  000E42  5055               	movf	_eusartTxBufferRemaining,w,c	;volatile
  4496  000E44  E0FE               	bz	l3325
  4497                           
  4498                           ;mcc_generated_files/eusart.c: 154:     if(0 == PIE1bits.TXIE)
  4499  000E46  B89D               	btfsc	3997,4,c	;volatile
  4500  000E48  D003               	goto	l196
  4501                           
  4502                           ;mcc_generated_files/eusart.c: 155:     {;mcc_generated_files/eusart.c: 156:         TXR
      +                          EG = txData;
  4503  000E4A  C009  FFAD         	movff	EUSART_Write@txData,4013	;volatile
  4504                           
  4505                           ;mcc_generated_files/eusart.c: 157:     }
  4506  000E4E  D00D               	goto	l3341
  4507  000E50                     l196:
  4508                           
  4509                           ;mcc_generated_files/eusart.c: 159:     {;mcc_generated_files/eusart.c: 160:         PIE
      +                          1bits.TXIE = 0;
  4510  000E50  989D               	bcf	3997,4,c	;volatile
  4511                           
  4512                           ;mcc_generated_files/eusart.c: 161:         eusartTxBuffer[eusartTxHead++] = txData;
  4513  000E52  5045               	movf	_eusartTxHead,w,c
  4514  000E54  0F60               	addlw	low _eusartTxBuffer
  4515  000E56  6ED9               	movwf	fsr2l,c
  4516  000E58  6ADA               	clrf	fsr2h,c
  4517  000E5A  C009  FFDF         	movff	EUSART_Write@txData,indf2
  4518  000E5E  2A45               	incf	_eusartTxHead,f,c	;volatile
  4519                           
  4520                           ;mcc_generated_files/eusart.c: 162:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
  4521  000E60  0E3F               	movlw	63
  4522  000E62  6445               	cpfsgt	_eusartTxHead,c
  4523  000E64  D001               	goto	l3339
  4524                           
  4525                           ;mcc_generated_files/eusart.c: 163:         {;mcc_generated_files/eusart.c: 164:        
      +                               eusartTxHead = 0;
  4526  000E66  6A45               	clrf	_eusartTxHead,c	;volatile
  4527  000E68                     l3339:
  4528                           
  4529                           ;mcc_generated_files/eusart.c: 166:         eusartTxBufferRemaining--;
  4530  000E68  0655               	decf	_eusartTxBufferRemaining,f,c	;volatile
  4531  000E6A                     l3341:
  4532                           
  4533                           ;mcc_generated_files/eusart.c: 168:     PIE1bits.TXIE = 1;
  4534  000E6A  889D               	bsf	3997,4,c	;volatile
  4535  000E6C  0012               	return		;funcret
  4536  000E6E                     __end_of_EUSART_Write:
  4537                           	opt stack 0
  4538                           tosu	equ	0xFFF
  4539                           tosh	equ	0xFFE
  4540                           tosl	equ	0xFFD
  4541                           pclath	equ	0xFFA
  4542                           tblptru	equ	0xFF8
  4543                           tblptrh	equ	0xFF7
  4544                           tblptrl	equ	0xFF6
  4545                           tablat	equ	0xFF5
  4546                           prodh	equ	0xFF4
  4547                           prodl	equ	0xFF3
  4548                           intcon	equ	0xFF2
  4549                           intcon2	equ	0xFF1
  4550                           postinc0	equ	0xFEE
  4551                           wreg	equ	0xFE8
  4552                           indf2	equ	0xFDF
  4553                           postinc2	equ	0xFDE
  4554                           fsr2h	equ	0xFDA
  4555                           fsr2l	equ	0xFD9
  4556                           status	equ	0xFD8
  4557                           
  4558 ;; *************** function ___lbmod *****************
  4559 ;; Defined at:
  4560 ;;		line 4 in file "/opt/microchip/xc8/v2.00/pic/sources/c99/common/lbmod.c"
  4561 ;; Parameters:    Size  Location     Type
  4562 ;;  dividend        1    wreg     unsigned char 
  4563 ;;  divisor         1    8[COMRAM] unsigned char 
  4564 ;; Auto vars:     Size  Location     Type
  4565 ;;  dividend        1    9[COMRAM] unsigned char 
  4566 ;;  rem             1   11[COMRAM] unsigned char 
  4567 ;;  counter         1   10[COMRAM] unsigned char 
  4568 ;; Return value:  Size  Location     Type
  4569 ;;                  1    wreg      unsigned char 
  4570 ;; Registers used:
  4571 ;;		wreg, status,2, status,0
  4572 ;; Tracked objects:
  4573 ;;		On entry : 0/0
  4574 ;;		On exit  : 0/0
  4575 ;;		Unchanged: 0/0
  4576 ;; Data sizes:     COMRAM   BANK0   BANK1
  4577 ;;      Params:         1       0       0
  4578 ;;      Locals:         3       0       0
  4579 ;;      Temps:          0       0       0
  4580 ;;      Totals:         4       0       0
  4581 ;;Total ram usage:        4 bytes
  4582 ;; Hardware stack levels used:    1
  4583 ;; Hardware stack levels required when called:    4
  4584 ;; This function calls:
  4585 ;;		Nothing
  4586 ;; This function is called by:
  4587 ;;		_ESP_write
  4588 ;; This function uses a non-reentrant model
  4589 ;;
  4590                           
  4591                           	psect	text36
  4592  000F14                     __ptext36:
  4593                           	opt stack 0
  4594  000F14                     ___lbmod:
  4595                           	opt stack 24
  4596                           
  4597                           ;incstack = 0
  4598                           ;___lbmod@dividend stored from wreg
  4599  000F14  6E0A               	movwf	___lbmod@dividend,c
  4600  000F16  0E08               	movlw	8
  4601  000F18  6E0B               	movwf	___lbmod@counter,c
  4602  000F1A  6A0C               	clrf	___lbmod@rem,c
  4603  000F1C                     l2571:
  4604  000F1C  90D8               	bcf	status,0,c
  4605  000F1E  340A               	rlcf	___lbmod@dividend,w,c
  4606  000F20  340C               	rlcf	___lbmod@rem,w,c
  4607  000F22  6E0C               	movwf	___lbmod@rem,c
  4608  000F24  90D8               	bcf	status,0,c
  4609  000F26  360A               	rlcf	___lbmod@dividend,f,c
  4610  000F28  5009               	movf	___lbmod@divisor,w,c
  4611  000F2A  5C0C               	subwf	___lbmod@rem,w,c
  4612  000F2C  E302               	bnc	l2579
  4613  000F2E  5009               	movf	___lbmod@divisor,w,c
  4614  000F30  5E0C               	subwf	___lbmod@rem,f,c
  4615  000F32                     l2579:
  4616  000F32  2E0B               	decfsz	___lbmod@counter,f,c
  4617  000F34  D7F3               	goto	l2571
  4618  000F36  500C               	movf	___lbmod@rem,w,c
  4619  000F38  0012               	return		;funcret
  4620  000F3A                     __end_of___lbmod:
  4621                           	opt stack 0
  4622                           tosu	equ	0xFFF
  4623                           tosh	equ	0xFFE
  4624                           tosl	equ	0xFFD
  4625                           pclath	equ	0xFFA
  4626                           tblptru	equ	0xFF8
  4627                           tblptrh	equ	0xFF7
  4628                           tblptrl	equ	0xFF6
  4629                           tablat	equ	0xFF5
  4630                           prodh	equ	0xFF4
  4631                           prodl	equ	0xFF3
  4632                           intcon	equ	0xFF2
  4633                           intcon2	equ	0xFF1
  4634                           postinc0	equ	0xFEE
  4635                           wreg	equ	0xFE8
  4636                           indf2	equ	0xFDF
  4637                           postinc2	equ	0xFDE
  4638                           fsr2h	equ	0xFDA
  4639                           fsr2l	equ	0xFD9
  4640                           status	equ	0xFD8
  4641                           
  4642 ;; *************** function ___awdiv *****************
  4643 ;; Defined at:
  4644 ;;		line 7 in file "/opt/microchip/xc8/v2.00/pic/sources/c99/common/awdiv.c"
  4645 ;; Parameters:    Size  Location     Type
  4646 ;;  dividend        2    8[COMRAM] int 
  4647 ;;  divisor         2   10[COMRAM] int 
  4648 ;; Auto vars:     Size  Location     Type
  4649 ;;  quotient        2   14[COMRAM] int 
  4650 ;;  sign            1   13[COMRAM] unsigned char 
  4651 ;;  counter         1   12[COMRAM] unsigned char 
  4652 ;; Return value:  Size  Location     Type
  4653 ;;                  2    8[COMRAM] int 
  4654 ;; Registers used:
  4655 ;;		wreg, status,2, status,0
  4656 ;; Tracked objects:
  4657 ;;		On entry : 0/0
  4658 ;;		On exit  : 0/0
  4659 ;;		Unchanged: 0/0
  4660 ;; Data sizes:     COMRAM   BANK0   BANK1
  4661 ;;      Params:         4       0       0
  4662 ;;      Locals:         4       0       0
  4663 ;;      Temps:          0       0       0
  4664 ;;      Totals:         8       0       0
  4665 ;;Total ram usage:        8 bytes
  4666 ;; Hardware stack levels used:    1
  4667 ;; Hardware stack levels required when called:    4
  4668 ;; This function calls:
  4669 ;;		Nothing
  4670 ;; This function is called by:
  4671 ;;		_ESP_write
  4672 ;; This function uses a non-reentrant model
  4673 ;;
  4674                           
  4675                           	psect	text37
  4676  0009D8                     __ptext37:
  4677                           	opt stack 0
  4678  0009D8                     ___awdiv:
  4679                           	opt stack 24
  4680                           
  4681                           ;incstack = 0
  4682  0009D8  6A0E               	clrf	___awdiv@sign,c
  4683  0009DA  AE0C               	btfss	___awdiv@divisor+1,7,c
  4684  0009DC  D006               	goto	l2531
  4685  0009DE  6C0B               	negf	___awdiv@divisor,c
  4686  0009E0  1E0C               	comf	___awdiv@divisor+1,f,c
  4687  0009E2  B0D8               	btfsc	status,0,c
  4688  0009E4  2A0C               	incf	___awdiv@divisor+1,f,c
  4689  0009E6  0E01               	movlw	1
  4690  0009E8  6E0E               	movwf	___awdiv@sign,c
  4691  0009EA                     l2531:
  4692  0009EA  AE0A               	btfss	___awdiv@dividend+1,7,c
  4693  0009EC  D006               	goto	l2537
  4694  0009EE  6C09               	negf	___awdiv@dividend,c
  4695  0009F0  1E0A               	comf	___awdiv@dividend+1,f,c
  4696  0009F2  B0D8               	btfsc	status,0,c
  4697  0009F4  2A0A               	incf	___awdiv@dividend+1,f,c
  4698  0009F6  0E01               	movlw	1
  4699  0009F8  1A0E               	xorwf	___awdiv@sign,f,c
  4700  0009FA                     l2537:
  4701  0009FA  6A0F               	clrf	___awdiv@quotient,c
  4702  0009FC  6A10               	clrf	___awdiv@quotient+1,c
  4703  0009FE  500B               	movf	___awdiv@divisor,w,c
  4704  000A00  100C               	iorwf	___awdiv@divisor+1,w,c
  4705  000A02  E01B               	bz	l2559
  4706  000A04  0E01               	movlw	1
  4707  000A06  6E0D               	movwf	___awdiv@counter,c
  4708  000A08  D004               	goto	l2545
  4709  000A0A                     l2543:
  4710  000A0A  90D8               	bcf	status,0,c
  4711  000A0C  360B               	rlcf	___awdiv@divisor,f,c
  4712  000A0E  360C               	rlcf	___awdiv@divisor+1,f,c
  4713  000A10  2A0D               	incf	___awdiv@counter,f,c
  4714  000A12                     l2545:
  4715  000A12  AE0C               	btfss	___awdiv@divisor+1,7,c
  4716  000A14  D7FA               	goto	l2543
  4717  000A16                     u1410:
  4718  000A16  90D8               	bcf	status,0,c
  4719  000A18  360F               	rlcf	___awdiv@quotient,f,c
  4720  000A1A  3610               	rlcf	___awdiv@quotient+1,f,c
  4721  000A1C  500B               	movf	___awdiv@divisor,w,c
  4722  000A1E  5C09               	subwf	___awdiv@dividend,w,c
  4723  000A20  500C               	movf	___awdiv@divisor+1,w,c
  4724  000A22  580A               	subwfb	___awdiv@dividend+1,w,c
  4725  000A24  E305               	bnc	l2555
  4726  000A26  500B               	movf	___awdiv@divisor,w,c
  4727  000A28  5E09               	subwf	___awdiv@dividend,f,c
  4728  000A2A  500C               	movf	___awdiv@divisor+1,w,c
  4729  000A2C  5A0A               	subwfb	___awdiv@dividend+1,f,c
  4730  000A2E  800F               	bsf	___awdiv@quotient,0,c
  4731  000A30                     l2555:
  4732  000A30  90D8               	bcf	status,0,c
  4733  000A32  320C               	rrcf	___awdiv@divisor+1,f,c
  4734  000A34  320B               	rrcf	___awdiv@divisor,f,c
  4735  000A36  2E0D               	decfsz	___awdiv@counter,f,c
  4736  000A38  D7EE               	goto	u1410
  4737  000A3A                     l2559:
  4738  000A3A  500E               	movf	___awdiv@sign,w,c
  4739  000A3C  E004               	bz	l2563
  4740  000A3E  6C0F               	negf	___awdiv@quotient,c
  4741  000A40  1E10               	comf	___awdiv@quotient+1,f,c
  4742  000A42  B0D8               	btfsc	status,0,c
  4743  000A44  2A10               	incf	___awdiv@quotient+1,f,c
  4744  000A46                     l2563:
  4745  000A46  C00F  F009         	movff	___awdiv@quotient,?___awdiv
  4746  000A4A  C010  F00A         	movff	___awdiv@quotient+1,?___awdiv+1
  4747  000A4E  0012               	return		;funcret
  4748  000A50                     __end_of___awdiv:
  4749                           	opt stack 0
  4750                           tosu	equ	0xFFF
  4751                           tosh	equ	0xFFE
  4752                           tosl	equ	0xFFD
  4753                           pclath	equ	0xFFA
  4754                           tblptru	equ	0xFF8
  4755                           tblptrh	equ	0xFF7
  4756                           tblptrl	equ	0xFF6
  4757                           tablat	equ	0xFF5
  4758                           prodh	equ	0xFF4
  4759                           prodl	equ	0xFF3
  4760                           intcon	equ	0xFF2
  4761                           intcon2	equ	0xFF1
  4762                           postinc0	equ	0xFEE
  4763                           wreg	equ	0xFE8
  4764                           indf2	equ	0xFDF
  4765                           postinc2	equ	0xFDE
  4766                           fsr2h	equ	0xFDA
  4767                           fsr2l	equ	0xFD9
  4768                           status	equ	0xFD8
  4769                           
  4770 ;; *************** function _ESP_wait_for *****************
  4771 ;; Defined at:
  4772 ;;		line 120 in file "esp1.c"
  4773 ;; Parameters:    Size  Location     Type
  4774 ;;  esp_mess        1    wreg     unsigned char 
  4775 ;; Auto vars:     Size  Location     Type
  4776 ;;  esp_mess        1   26[COMRAM] unsigned char 
  4777 ;;  ret             1   27[COMRAM] unsigned char 
  4778 ;; Return value:  Size  Location     Type
  4779 ;;                  1    wreg      void 
  4780 ;; Registers used:
  4781 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4782 ;; Tracked objects:
  4783 ;;		On entry : 0/1
  4784 ;;		On exit  : 0/0
  4785 ;;		Unchanged: 0/0
  4786 ;; Data sizes:     COMRAM   BANK0   BANK1
  4787 ;;      Params:         0       0       0
  4788 ;;      Locals:         2       0       0
  4789 ;;      Temps:          0       0       0
  4790 ;;      Totals:         2       0       0
  4791 ;;Total ram usage:        2 bytes
  4792 ;; Hardware stack levels used:    1
  4793 ;; Hardware stack levels required when called:    8
  4794 ;; This function calls:
  4795 ;;		_ESP_read
  4796 ;; This function is called by:
  4797 ;;		_ESP_config
  4798 ;;		_ESP_write
  4799 ;;		_read_analog
  4800 ;;		_process_ioc
  4801 ;; This function uses a non-reentrant model
  4802 ;;
  4803                           
  4804                           	psect	text38
  4805  000CD0                     __ptext38:
  4806                           	opt stack 0
  4807  000CD0                     _ESP_wait_for:
  4808                           	opt stack 20
  4809                           
  4810                           ;incstack = 0
  4811                           ;ESP_wait_for@esp_mess stored from wreg
  4812  000CD0  6E1B               	movwf	ESP_wait_for@esp_mess,c
  4813  000CD2                     l536:
  4814                           
  4815                           ;esp1.c: 126:         ret = ESP_read();
  4816  000CD2  EC5E  F005         	call	_ESP_read	;wreg free
  4817  000CD6  6E1C               	movwf	ESP_wait_for@ret,c
  4818                           
  4819                           ;esp1.c: 128:         if (ret != esp_mess) {
  4820  000CD8  181B               	xorwf	ESP_wait_for@esp_mess,w,c
  4821  000CDA  E013               	bz	l3413
  4822                           
  4823                           ;esp1.c: 129:             if (ret == ESP_SEND_FAIL) return;
  4824  000CDC  0E07               	movlw	7
  4825  000CDE  181C               	xorwf	ESP_wait_for@ret,w,c
  4826  000CE0  E101               	bnz	l3399
  4827  000CE2  0012               	return	
  4828  000CE4                     l3399:
  4829                           
  4830                           ;esp1.c: 130:             if (ret == ESP_CLOSED) {
  4831  000CE4  0E08               	movlw	8
  4832  000CE6  181C               	xorwf	ESP_wait_for@ret,w,c
  4833  000CE8  E102               	bnz	l3403
  4834                           
  4835                           ;esp1.c: 131:                 esp_channel = 0;
  4836  000CEA  6A3D               	clrf	_esp_channel,c	;volatile
  4837                           
  4838                           ;esp1.c: 132:                 return;
  4839  000CEC  0012               	return	
  4840  000CEE                     l3403:
  4841                           
  4842                           ;esp1.c: 134:             if (ret == ESP_ERROR) return;
  4843  000CEE  0E09               	movlw	9
  4844  000CF0  181C               	xorwf	ESP_wait_for@ret,w,c
  4845  000CF2  E101               	bnz	l3407
  4846  000CF4  0012               	return	
  4847  000CF6                     l3407:
  4848                           
  4849                           ;esp1.c: 135:             if (ret == ESP_RX) {
  4850  000CF6  0E04               	movlw	4
  4851  000CF8  181C               	xorwf	ESP_wait_for@ret,w,c
  4852  000CFA  E103               	bnz	l3413
  4853                           
  4854                           ;esp1.c: 137:                 ESP_wait_exception = ESP_RX;
  4855  000CFC  0E04               	movlw	4
  4856  000CFE  6E3F               	movwf	_ESP_wait_exception,c	;volatile
  4857  000D00  0C04               	retlw	4
  4858  000D02                     l3413:
  4859                           
  4860                           ;esp1.c: 141:     } while (ret != esp_mess);
  4861  000D02  501B               	movf	ESP_wait_for@esp_mess,w,c
  4862  000D04  181C               	xorwf	ESP_wait_for@ret,w,c
  4863  000D06  E1E5               	bnz	l536
  4864  000D08  0012               	return		;funcret
  4865  000D0A                     __end_of_ESP_wait_for:
  4866                           	opt stack 0
  4867                           tosu	equ	0xFFF
  4868                           tosh	equ	0xFFE
  4869                           tosl	equ	0xFFD
  4870                           pclath	equ	0xFFA
  4871                           tblptru	equ	0xFF8
  4872                           tblptrh	equ	0xFF7
  4873                           tblptrl	equ	0xFF6
  4874                           tablat	equ	0xFF5
  4875                           prodh	equ	0xFF4
  4876                           prodl	equ	0xFF3
  4877                           intcon	equ	0xFF2
  4878                           intcon2	equ	0xFF1
  4879                           postinc0	equ	0xFEE
  4880                           wreg	equ	0xFE8
  4881                           indf2	equ	0xFDF
  4882                           postinc2	equ	0xFDE
  4883                           fsr2h	equ	0xFDA
  4884                           fsr2l	equ	0xFD9
  4885                           status	equ	0xFD8
  4886                           
  4887 ;; *************** function _ESP_read *****************
  4888 ;; Defined at:
  4889 ;;		line 27 in file "esp1.c"
  4890 ;; Parameters:    Size  Location     Type
  4891 ;;		None
  4892 ;; Auto vars:     Size  Location     Type
  4893 ;;  ret             1   25[COMRAM] unsigned char 
  4894 ;; Return value:  Size  Location     Type
  4895 ;;                  1    wreg      unsigned char 
  4896 ;; Registers used:
  4897 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4898 ;; Tracked objects:
  4899 ;;		On entry : 0/0
  4900 ;;		On exit  : 0/0
  4901 ;;		Unchanged: 0/0
  4902 ;; Data sizes:     COMRAM   BANK0   BANK1
  4903 ;;      Params:         0       0       0
  4904 ;;      Locals:         1       0       0
  4905 ;;      Temps:          1       0       0
  4906 ;;      Totals:         2       0       0
  4907 ;;Total ram usage:        2 bytes
  4908 ;; Hardware stack levels used:    1
  4909 ;; Hardware stack levels required when called:    7
  4910 ;; This function calls:
  4911 ;;		_ESP_process_message
  4912 ;;		_EUSART_Read
  4913 ;; This function is called by:
  4914 ;;		_ESP_wait_for
  4915 ;;		_ESP_message_handler
  4916 ;; This function uses a non-reentrant model
  4917 ;;
  4918                           
  4919                           	psect	text39
  4920  000ABC                     __ptext39:
  4921                           	opt stack 0
  4922  000ABC                     _ESP_read:
  4923                           	opt stack 20
  4924                           
  4925                           ;esp1.c: 29:     unsigned char ret;;esp1.c: 31:     esp_read_data[esp_read_data_index] =
      +                           EUSART_Read();
  4926                           
  4927                           ;incstack = 0
  4928  000ABC  EC63  F007         	call	_EUSART_Read	;wreg free
  4929  000AC0  6E19               	movwf	??_ESP_read& (0+255),c
  4930  000AC2  503E               	movf	_esp_read_data_index,w,c
  4931  000AC4  0FE0               	addlw	low _esp_read_data
  4932  000AC6  6ED9               	movwf	fsr2l,c
  4933  000AC8  6ADA               	clrf	fsr2h,c
  4934  000ACA  C019  FFDF         	movff	??_ESP_read,indf2
  4935                           
  4936                           ;esp1.c: 34:     if (esp_read_data[esp_read_data_index] == 0x0a) {
  4937  000ACE  503E               	movf	_esp_read_data_index,w,c
  4938  000AD0  0FE0               	addlw	low _esp_read_data
  4939  000AD2  6ED9               	movwf	fsr2l,c
  4940  000AD4  6ADA               	clrf	fsr2h,c
  4941  000AD6  0E0A               	movlw	10
  4942  000AD8  18DE               	xorwf	postinc2,w,c
  4943  000ADA  E110               	bnz	l3361
  4944                           
  4945                           ;esp1.c: 36:         if (esp_read_data_index <= 1) {
  4946  000ADC  0E02               	movlw	2
  4947  000ADE  603E               	cpfslt	_esp_read_data_index,c	;volatile
  4948  000AE0  D002               	goto	l3351
  4949                           
  4950                           ;esp1.c: 37:             ret = ESP_EOL;
  4951  000AE2  0E03               	movlw	3
  4952  000AE4  D007               	goto	L1
  4953  000AE6                     l3351:
  4954                           
  4955                           ;esp1.c: 39:             esp_read_data[(esp_read_data_index-1)] = 0x00;
  4956  000AE6  503E               	movf	_esp_read_data_index,w,c
  4957  000AE8  0FDF               	addlw	low (_esp_read_data+255)
  4958  000AEA  6ED9               	movwf	fsr2l,c
  4959  000AEC  6ADA               	clrf	fsr2h,c
  4960  000AEE  6ADF               	clrf	indf2,c
  4961                           
  4962                           ;esp1.c: 40:             ret = ESP_process_message();
  4963  000AF0  EC7E  F002         	call	_ESP_process_message	;wreg free
  4964  000AF4                     L1:
  4965  000AF4  6E1A               	movwf	ESP_read@ret,c
  4966                           
  4967                           ;esp1.c: 43:         esp_read_data_index = 0;
  4968  000AF6  6A3E               	clrf	_esp_read_data_index,c	;volatile
  4969                           
  4970                           ;esp1.c: 44:         return ret;
  4971  000AF8  501A               	movf	ESP_read@ret,w,c
  4972  000AFA  0012               	return	
  4973  000AFC                     l3361:
  4974                           
  4975                           ;esp1.c: 47:     esp_read_data_index++;
  4976  000AFC  2A3E               	incf	_esp_read_data_index,f,c	;volatile
  4977                           
  4978                           ;esp1.c: 48:     if (esp_read_data_index >= 16)
  4979  000AFE  0E0F               	movlw	15
  4980  000B00  643E               	cpfsgt	_esp_read_data_index,c	;volatile
  4981  000B02  0C00               	retlw	0
  4982                           
  4983                           ;esp1.c: 49:         esp_read_data_index = 0;
  4984  000B04  6A3E               	clrf	_esp_read_data_index,c	;volatile
  4985                           
  4986                           ;esp1.c: 51:     return ESP_OTHER;
  4987  000B06  0C00               	retlw	0	;funcret
  4988  000B08                     __end_of_ESP_read:
  4989                           	opt stack 0
  4990                           tosu	equ	0xFFF
  4991                           tosh	equ	0xFFE
  4992                           tosl	equ	0xFFD
  4993                           pclath	equ	0xFFA
  4994                           tblptru	equ	0xFF8
  4995                           tblptrh	equ	0xFF7
  4996                           tblptrl	equ	0xFF6
  4997                           tablat	equ	0xFF5
  4998                           prodh	equ	0xFF4
  4999                           prodl	equ	0xFF3
  5000                           intcon	equ	0xFF2
  5001                           intcon2	equ	0xFF1
  5002                           postinc0	equ	0xFEE
  5003                           wreg	equ	0xFE8
  5004                           indf2	equ	0xFDF
  5005                           postinc2	equ	0xFDE
  5006                           fsr2h	equ	0xFDA
  5007                           fsr2l	equ	0xFD9
  5008                           status	equ	0xFD8
  5009                           
  5010 ;; *************** function _EUSART_Read *****************
  5011 ;; Defined at:
  5012 ;;		line 128 in file "mcc_generated_files/eusart.c"
  5013 ;; Parameters:    Size  Location     Type
  5014 ;;		None
  5015 ;; Auto vars:     Size  Location     Type
  5016 ;;  readValue       1    8[COMRAM] unsigned char 
  5017 ;; Return value:  Size  Location     Type
  5018 ;;                  1    wreg      unsigned char 
  5019 ;; Registers used:
  5020 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5021 ;; Tracked objects:
  5022 ;;		On entry : 0/1
  5023 ;;		On exit  : 0/0
  5024 ;;		Unchanged: 0/0
  5025 ;; Data sizes:     COMRAM   BANK0   BANK1
  5026 ;;      Params:         0       0       0
  5027 ;;      Locals:         1       0       0
  5028 ;;      Temps:          0       0       0
  5029 ;;      Totals:         1       0       0
  5030 ;;Total ram usage:        1 bytes
  5031 ;; Hardware stack levels used:    1
  5032 ;; Hardware stack levels required when called:    4
  5033 ;; This function calls:
  5034 ;;		Nothing
  5035 ;; This function is called by:
  5036 ;;		__gets
  5037 ;;		_ESP_read
  5038 ;;		_ESP_config
  5039 ;; This function uses a non-reentrant model
  5040 ;;
  5041                           
  5042                           	psect	text40
  5043  000EC6                     __ptext40:
  5044                           	opt stack 0
  5045  000EC6                     _EUSART_Read:
  5046                           	opt stack 24
  5047                           
  5048                           ;mcc_generated_files/eusart.c: 132:     while(0 == eusartRxCount)
  5049                           
  5050                           ;mcc_generated_files/eusart.c: 132:     while(0 == eusartRxCount)
  5051                           
  5052                           ;incstack = 0
  5053  000EC6  5041               	movf	_eusartRxCount,w,c	;volatile
  5054  000EC8  E0FE               	bz	_EUSART_Read
  5055                           
  5056                           ;mcc_generated_files/eusart.c: 136:     readValue = eusartRxBuffer[eusartRxTail++];
  5057  000ECA  0E00               	movlw	low _eusartRxBuffer
  5058  000ECC  2442               	addwf	_eusartRxTail,w,c	;volatile
  5059  000ECE  6ED9               	movwf	fsr2l,c
  5060  000ED0  6ADA               	clrf	fsr2h,c
  5061  000ED2  0E01               	movlw	high _eusartRxBuffer
  5062  000ED4  22DA               	addwfc	fsr2h,f,c
  5063  000ED6  50DF               	movf	indf2,w,c
  5064  000ED8  6E09               	movwf	EUSART_Read@readValue,c
  5065  000EDA  2A42               	incf	_eusartRxTail,f,c	;volatile
  5066                           
  5067                           ;mcc_generated_files/eusart.c: 137:     if(sizeof(eusartRxBuffer) <= eusartRxTail)
  5068  000EDC  0E3F               	movlw	63
  5069  000EDE  6442               	cpfsgt	_eusartRxTail,c
  5070  000EE0  D001               	goto	l189
  5071                           
  5072                           ;mcc_generated_files/eusart.c: 138:     {;mcc_generated_files/eusart.c: 139:         eus
      +                          artRxTail = 0;
  5073  000EE2  6A42               	clrf	_eusartRxTail,c	;volatile
  5074  000EE4                     l189:
  5075                           
  5076                           ;mcc_generated_files/eusart.c: 141:     PIE1bits.RCIE = 0;
  5077  000EE4  9A9D               	bcf	3997,5,c	;volatile
  5078                           
  5079                           ;mcc_generated_files/eusart.c: 142:     eusartRxCount--;
  5080  000EE6  0641               	decf	_eusartRxCount,f,c	;volatile
  5081                           
  5082                           ;mcc_generated_files/eusart.c: 143:     PIE1bits.RCIE = 1;
  5083  000EE8  8A9D               	bsf	3997,5,c	;volatile
  5084                           
  5085                           ;mcc_generated_files/eusart.c: 145:     return readValue;
  5086  000EEA  5009               	movf	EUSART_Read@readValue,w,c
  5087  000EEC  0012               	return		;funcret
  5088  000EEE                     __end_of_EUSART_Read:
  5089                           	opt stack 0
  5090                           tosu	equ	0xFFF
  5091                           tosh	equ	0xFFE
  5092                           tosl	equ	0xFFD
  5093                           pclath	equ	0xFFA
  5094                           tblptru	equ	0xFF8
  5095                           tblptrh	equ	0xFF7
  5096                           tblptrl	equ	0xFF6
  5097                           tablat	equ	0xFF5
  5098                           prodh	equ	0xFF4
  5099                           prodl	equ	0xFF3
  5100                           intcon	equ	0xFF2
  5101                           intcon2	equ	0xFF1
  5102                           postinc0	equ	0xFEE
  5103                           wreg	equ	0xFE8
  5104                           indf2	equ	0xFDF
  5105                           postinc2	equ	0xFDE
  5106                           fsr2h	equ	0xFDA
  5107                           fsr2l	equ	0xFD9
  5108                           status	equ	0xFD8
  5109                           
  5110 ;; *************** function _ESP_process_message *****************
  5111 ;; Defined at:
  5112 ;;		line 55 in file "esp1.c"
  5113 ;; Parameters:    Size  Location     Type
  5114 ;;		None
  5115 ;; Auto vars:     Size  Location     Type
  5116 ;;  aux             2   22[COMRAM] PTR unsigned char 
  5117 ;;		 -> NULL(0), esp_read_data(16), 
  5118 ;; Return value:  Size  Location     Type
  5119 ;;                  1    wreg      unsigned char 
  5120 ;; Registers used:
  5121 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5122 ;; Tracked objects:
  5123 ;;		On entry : 0/0
  5124 ;;		On exit  : 0/0
  5125 ;;		Unchanged: 0/0
  5126 ;; Data sizes:     COMRAM   BANK0   BANK1
  5127 ;;      Params:         0       0       0
  5128 ;;      Locals:         2       0       0
  5129 ;;      Temps:          0       0       0
  5130 ;;      Totals:         2       0       0
  5131 ;;Total ram usage:        2 bytes
  5132 ;; Hardware stack levels used:    1
  5133 ;; Hardware stack levels required when called:    6
  5134 ;; This function calls:
  5135 ;;		_strstr
  5136 ;; This function is called by:
  5137 ;;		_ESP_read
  5138 ;; This function uses a non-reentrant model
  5139 ;;
  5140                           
  5141                           	psect	text41
  5142  0004FC                     __ptext41:
  5143                           	opt stack 0
  5144  0004FC                     _ESP_process_message:
  5145                           	opt stack 20
  5146                           
  5147                           ;esp1.c: 56:     unsigned char *aux;;esp1.c: 58:     aux = strstr(esp_read_data,"SEND OK
      +                          ");
  5148                           
  5149                           ;incstack = 0
  5150  0004FC  0EE0               	movlw	low _esp_read_data
  5151  0004FE  6E12               	movwf	strstr@h,c
  5152  000500  6A13               	clrf	strstr@h+1,c
  5153  000502  0E94               	movlw	low STR_1
  5154  000504  6E14               	movwf	strstr@n,c
  5155  000506  EC71  F004         	call	_strstr	;wreg free
  5156  00050A  C012  F017         	movff	?_strstr,ESP_process_message@aux
  5157  00050E  C013  F018         	movff	?_strstr+1,ESP_process_message@aux+1
  5158                           
  5159                           ;esp1.c: 59:     if (aux) return ESP_SEND_OK;
  5160  000512  5017               	movf	ESP_process_message@aux,w,c
  5161  000514  1018               	iorwf	ESP_process_message@aux+1,w,c
  5162  000516  E001               	bz	l3269
  5163  000518  0C01               	retlw	1
  5164  00051A                     l3269:
  5165                           
  5166                           ;esp1.c: 61:     aux = strstr(esp_read_data,"OK");
  5167  00051A  0EE0               	movlw	low _esp_read_data
  5168  00051C  6E12               	movwf	strstr@h,c
  5169  00051E  6A13               	clrf	strstr@h+1,c
  5170  000520  0E99               	movlw	low (STR_1+5)
  5171  000522  6E14               	movwf	strstr@n,c
  5172  000524  EC71  F004         	call	_strstr	;wreg free
  5173  000528  C012  F017         	movff	?_strstr,ESP_process_message@aux
  5174  00052C  C013  F018         	movff	?_strstr+1,ESP_process_message@aux+1
  5175                           
  5176                           ;esp1.c: 62:     if (aux) return ESP_OK;
  5177  000530  5017               	movf	ESP_process_message@aux,w,c
  5178  000532  1018               	iorwf	ESP_process_message@aux+1,w,c
  5179  000534  E001               	bz	l3277
  5180  000536  0C02               	retlw	2
  5181  000538                     l3277:
  5182                           
  5183                           ;esp1.c: 64:     aux = strstr(esp_read_data,"SEND FAIL");
  5184  000538  0EE0               	movlw	low _esp_read_data
  5185  00053A  6E12               	movwf	strstr@h,c
  5186  00053C  6A13               	clrf	strstr@h+1,c
  5187  00053E  0E8A               	movlw	low STR_3
  5188  000540  6E14               	movwf	strstr@n,c
  5189  000542  EC71  F004         	call	_strstr	;wreg free
  5190  000546  C012  F017         	movff	?_strstr,ESP_process_message@aux
  5191  00054A  C013  F018         	movff	?_strstr+1,ESP_process_message@aux+1
  5192                           
  5193                           ;esp1.c: 65:     if (aux) return ESP_SEND_FAIL;
  5194  00054E  5017               	movf	ESP_process_message@aux,w,c
  5195  000550  1018               	iorwf	ESP_process_message@aux+1,w,c
  5196  000552  E001               	bz	l3285
  5197  000554  0C07               	retlw	7
  5198  000556                     l3285:
  5199                           
  5200                           ;esp1.c: 67:     aux = strstr(esp_read_data,"ERROR");
  5201  000556  0EE0               	movlw	low _esp_read_data
  5202  000558  6E12               	movwf	strstr@h,c
  5203  00055A  6A13               	clrf	strstr@h+1,c
  5204  00055C  0EB9               	movlw	low STR_4
  5205  00055E  6E14               	movwf	strstr@n,c
  5206  000560  EC71  F004         	call	_strstr	;wreg free
  5207  000564  C012  F017         	movff	?_strstr,ESP_process_message@aux
  5208  000568  C013  F018         	movff	?_strstr+1,ESP_process_message@aux+1
  5209                           
  5210                           ;esp1.c: 68:     if (aux) return ESP_ERROR;
  5211  00056C  5017               	movf	ESP_process_message@aux,w,c
  5212  00056E  1018               	iorwf	ESP_process_message@aux+1,w,c
  5213  000570  E001               	bz	l3293
  5214  000572  0C09               	retlw	9
  5215  000574                     l3293:
  5216                           
  5217                           ;esp1.c: 70:     aux = strstr(esp_read_data,"+IPD");
  5218  000574  0EE0               	movlw	low _esp_read_data
  5219  000576  6E12               	movwf	strstr@h,c
  5220  000578  6A13               	clrf	strstr@h+1,c
  5221  00057A  0EC4               	movlw	low STR_5
  5222  00057C  6E14               	movwf	strstr@n,c
  5223  00057E  EC71  F004         	call	_strstr	;wreg free
  5224  000582  C012  F017         	movff	?_strstr,ESP_process_message@aux
  5225  000586  C013  F018         	movff	?_strstr+1,ESP_process_message@aux+1
  5226                           
  5227                           ;esp1.c: 71:     if (aux) return ESP_RX;
  5228  00058A  5017               	movf	ESP_process_message@aux,w,c
  5229  00058C  1018               	iorwf	ESP_process_message@aux+1,w,c
  5230  00058E  E001               	bz	l3301
  5231  000590  0C04               	retlw	4
  5232  000592                     l3301:
  5233                           
  5234                           ;esp1.c: 73:     aux = strstr(esp_read_data,"CONNECT");
  5235  000592  0EE0               	movlw	low _esp_read_data
  5236  000594  6E12               	movwf	strstr@h,c
  5237  000596  6A13               	clrf	strstr@h+1,c
  5238  000598  0E9C               	movlw	low STR_6
  5239  00059A  6E14               	movwf	strstr@n,c
  5240  00059C  EC71  F004         	call	_strstr	;wreg free
  5241  0005A0  C012  F017         	movff	?_strstr,ESP_process_message@aux
  5242  0005A4  C013  F018         	movff	?_strstr+1,ESP_process_message@aux+1
  5243                           
  5244                           ;esp1.c: 74:     if (aux) return ESP_CONNECT;
  5245  0005A8  5017               	movf	ESP_process_message@aux,w,c
  5246  0005AA  1018               	iorwf	ESP_process_message@aux+1,w,c
  5247  0005AC  E001               	bz	l3309
  5248  0005AE  0C06               	retlw	6
  5249  0005B0                     l3309:
  5250                           
  5251                           ;esp1.c: 76:     aux = strstr(esp_read_data,"CLOSED");
  5252  0005B0  0EE0               	movlw	low _esp_read_data
  5253  0005B2  6E12               	movwf	strstr@h,c
  5254  0005B4  6A13               	clrf	strstr@h+1,c
  5255  0005B6  0EB2               	movlw	low STR_7
  5256  0005B8  6E14               	movwf	strstr@n,c
  5257  0005BA  EC71  F004         	call	_strstr	;wreg free
  5258  0005BE  C012  F017         	movff	?_strstr,ESP_process_message@aux
  5259  0005C2  C013  F018         	movff	?_strstr+1,ESP_process_message@aux+1
  5260                           
  5261                           ;esp1.c: 77:     if (aux) return ESP_CLOSED;
  5262  0005C6  5017               	movf	ESP_process_message@aux,w,c
  5263  0005C8  1018               	iorwf	ESP_process_message@aux+1,w,c
  5264  0005CA  E001               	bz	l3317
  5265  0005CC  0C08               	retlw	8
  5266  0005CE                     l3317:
  5267                           
  5268                           ;esp1.c: 79:     return ESP_OTHER;
  5269  0005CE  0C00               	retlw	0	;funcret
  5270  0005D0                     __end_of_ESP_process_message:
  5271                           	opt stack 0
  5272                           tosu	equ	0xFFF
  5273                           tosh	equ	0xFFE
  5274                           tosl	equ	0xFFD
  5275                           pclath	equ	0xFFA
  5276                           tblptru	equ	0xFF8
  5277                           tblptrh	equ	0xFF7
  5278                           tblptrl	equ	0xFF6
  5279                           tablat	equ	0xFF5
  5280                           prodh	equ	0xFF4
  5281                           prodl	equ	0xFF3
  5282                           intcon	equ	0xFF2
  5283                           intcon2	equ	0xFF1
  5284                           postinc0	equ	0xFEE
  5285                           wreg	equ	0xFE8
  5286                           indf2	equ	0xFDF
  5287                           postinc2	equ	0xFDE
  5288                           fsr2h	equ	0xFDA
  5289                           fsr2l	equ	0xFD9
  5290                           status	equ	0xFD8
  5291                           
  5292 ;; *************** function _strstr *****************
  5293 ;; Defined at:
  5294 ;;		line 143 in file "/opt/microchip/xc8/v2.00/pic/sources/c99/common/strstr.c"
  5295 ;; Parameters:    Size  Location     Type
  5296 ;;  h               2   17[COMRAM] PTR const unsigned char 
  5297 ;;		 -> NULL(0), esp_read_data(16), 
  5298 ;;  n               1   19[COMRAM] PTR const unsigned char 
  5299 ;;		 -> STR_15(2), STR_7(7), STR_6(8), STR_5(5), 
  5300 ;;		 -> STR_4(6), STR_3(10), STR_2(3), STR_1(8), 
  5301 ;; Auto vars:     Size  Location     Type
  5302 ;;  nl              2   20[COMRAM] unsigned int 
  5303 ;; Return value:  Size  Location     Type
  5304 ;;                  2   17[COMRAM] PTR unsigned char 
  5305 ;; Registers used:
  5306 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5307 ;; Tracked objects:
  5308 ;;		On entry : 0/0
  5309 ;;		On exit  : 0/0
  5310 ;;		Unchanged: 0/0
  5311 ;; Data sizes:     COMRAM   BANK0   BANK1
  5312 ;;      Params:         3       0       0
  5313 ;;      Locals:         2       0       0
  5314 ;;      Temps:          0       0       0
  5315 ;;      Totals:         5       0       0
  5316 ;;Total ram usage:        5 bytes
  5317 ;; Hardware stack levels used:    1
  5318 ;; Hardware stack levels required when called:    5
  5319 ;; This function calls:
  5320 ;;		_strchr
  5321 ;;		_strlen
  5322 ;;		_strncmp
  5323 ;; This function is called by:
  5324 ;;		_ESP_process_message
  5325 ;;		_ESP_process_rx_data
  5326 ;; This function uses a non-reentrant model
  5327 ;;
  5328                           
  5329                           	psect	text42
  5330  0008E2                     __ptext42:
  5331                           	opt stack 0
  5332  0008E2                     _strstr:
  5333                           	opt stack 20
  5334                           
  5335                           ;incstack = 0
  5336  0008E2  5014               	movf	strstr@n,w,c
  5337  0008E4  E039               	bz	u2100
  5338  0008E6  C014  F009         	movff	strstr@n,strlen@s
  5339  0008EA  ECB0  F007         	call	_strlen	;wreg free
  5340  0008EE  C009  F015         	movff	?_strlen,strstr@nl
  5341  0008F2  C00A  F016         	movff	?_strlen+1,strstr@nl+1
  5342  0008F6  D027               	goto	l3237
  5343  0008F8                     l3229:
  5344  0008F8  C012  F009         	movff	strstr@h,strncmp@_l
  5345  0008FC  C013  F00A         	movff	strstr@h+1,strncmp@_l+1
  5346  000900  C014  F00B         	movff	strstr@n,strncmp@_r
  5347  000904  C015  F00C         	movff	strstr@nl,strncmp@n
  5348  000908  C016  F00D         	movff	strstr@nl+1,strncmp@n+1
  5349  00090C  ECEA  F003         	call	_strncmp	;wreg free
  5350  000910  5009               	movf	?_strncmp,w,c
  5351  000912  100A               	iorwf	?_strncmp+1,w,c
  5352  000914  E105               	bnz	l3235
  5353  000916  C012  F012         	movff	strstr@h,?_strstr
  5354  00091A  C013  F013         	movff	strstr@h+1,?_strstr+1
  5355  00091E  0012               	return	
  5356  000920                     l3235:
  5357  000920  2812               	incf	strstr@h,w,c
  5358  000922  6E09               	movwf	strchr@s,c
  5359  000924  0E00               	movlw	0
  5360  000926  2013               	addwfc	strstr@h+1,w,c
  5361  000928  6E0A               	movwf	strchr@s+1,c
  5362  00092A  C014  FFF6         	movff	strstr@n,tblptrl
  5363  00092E                     	if	1	;There is more than 1 active tblptr byte
  5364  00092E  0E02               	movlw	high __smallconst
  5365  000930  6EF7               	movwf	tblptrh,c
  5366  000932                     	endif
  5367  000932                     	if	0	;tblptru may be non-zero
  5368  000932                     	endif
  5369  000932                     	if	0	;tblptru may be non-zero
  5370  000932                     	endif
  5371  000932  0008               	tblrd		*
  5372  000934  50F5               	movf	tablat,w,c
  5373  000936  6E0B               	movwf	strchr@c,c
  5374  000938  6A0C               	clrf	strchr@c+1,c
  5375  00093A  EC37  F007         	call	_strchr	;wreg free
  5376  00093E  C009  F012         	movff	?_strchr,strstr@h
  5377  000942  C00A  F013         	movff	?_strchr+1,strstr@h+1
  5378  000946                     l3237:
  5379  000946  5012               	movf	strstr@h,w,c
  5380  000948  1013               	iorwf	strstr@h+1,w,c
  5381  00094A  E006               	bz	u2100
  5382  00094C  C012  FFD9         	movff	strstr@h,fsr2l
  5383  000950  C013  FFDA         	movff	strstr@h+1,fsr2h
  5384  000954  50DF               	movf	indf2,w,c
  5385  000956  E1D0               	bnz	l3229
  5386  000958                     u2100:
  5387  000958  6A12               	clrf	?_strstr,c
  5388  00095A  6A13               	clrf	?_strstr+1,c
  5389  00095C  0012               	return		;funcret
  5390  00095E                     __end_of_strstr:
  5391                           	opt stack 0
  5392                           tosu	equ	0xFFF
  5393                           tosh	equ	0xFFE
  5394                           tosl	equ	0xFFD
  5395                           pclath	equ	0xFFA
  5396                           tblptru	equ	0xFF8
  5397                           tblptrh	equ	0xFF7
  5398                           tblptrl	equ	0xFF6
  5399                           tablat	equ	0xFF5
  5400                           prodh	equ	0xFF4
  5401                           prodl	equ	0xFF3
  5402                           intcon	equ	0xFF2
  5403                           intcon2	equ	0xFF1
  5404                           postinc0	equ	0xFEE
  5405                           wreg	equ	0xFE8
  5406                           indf2	equ	0xFDF
  5407                           postinc2	equ	0xFDE
  5408                           fsr2h	equ	0xFDA
  5409                           fsr2l	equ	0xFD9
  5410                           status	equ	0xFD8
  5411                           
  5412 ;; *************** function _strncmp *****************
  5413 ;; Defined at:
  5414 ;;		line 3 in file "/opt/microchip/xc8/v2.00/pic/sources/c99/common/strncmp.c"
  5415 ;; Parameters:    Size  Location     Type
  5416 ;;  _l              2    8[COMRAM] PTR const unsigned char 
  5417 ;;		 -> NULL(0), esp_read_data(16), 
  5418 ;;  _r              1   10[COMRAM] PTR const unsigned char 
  5419 ;;		 -> STR_15(2), STR_7(7), STR_6(8), STR_5(5), 
  5420 ;;		 -> STR_4(6), STR_3(10), STR_2(3), STR_1(8), 
  5421 ;;  n               2   11[COMRAM] unsigned int 
  5422 ;; Auto vars:     Size  Location     Type
  5423 ;;  l               2   14[COMRAM] PTR const unsigned char 
  5424 ;;		 -> NULL(0), esp_read_data(16), 
  5425 ;;  r               1   16[COMRAM] PTR const unsigned char 
  5426 ;;		 -> STR_15(2), STR_7(7), STR_6(8), STR_5(5), 
  5427 ;;		 -> STR_4(6), STR_3(10), STR_2(3), STR_1(8), 
  5428 ;; Return value:  Size  Location     Type
  5429 ;;                  2    8[COMRAM] int 
  5430 ;; Registers used:
  5431 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5432 ;; Tracked objects:
  5433 ;;		On entry : 0/0
  5434 ;;		On exit  : 0/0
  5435 ;;		Unchanged: 0/0
  5436 ;; Data sizes:     COMRAM   BANK0   BANK1
  5437 ;;      Params:         5       0       0
  5438 ;;      Locals:         3       0       0
  5439 ;;      Temps:          1       0       0
  5440 ;;      Totals:         9       0       0
  5441 ;;Total ram usage:        9 bytes
  5442 ;; Hardware stack levels used:    1
  5443 ;; Hardware stack levels required when called:    4
  5444 ;; This function calls:
  5445 ;;		Nothing
  5446 ;; This function is called by:
  5447 ;;		_strstr
  5448 ;; This function uses a non-reentrant model
  5449 ;;
  5450                           
  5451                           	psect	text43
  5452  0007D4                     __ptext43:
  5453                           	opt stack 0
  5454  0007D4                     _strncmp:
  5455                           	opt stack 20
  5456                           
  5457                           ;incstack = 0
  5458  0007D4  C009  F00F         	movff	strncmp@_l,strncmp@l
  5459  0007D8  C00A  F010         	movff	strncmp@_l+1,strncmp@l+1
  5460  0007DC  C00B  F011         	movff	strncmp@_r,strncmp@r
  5461  0007E0  060C               	decf	strncmp@n,f,c
  5462  0007E2  A0D8               	btfss	status,0,c
  5463  0007E4  060D               	decf	strncmp@n+1,f,c
  5464  0007E6  280C               	incf	strncmp@n,w,c
  5465  0007E8  E10B               	bnz	l3205
  5466  0007EA  280D               	incf	strncmp@n+1,w,c
  5467  0007EC  E109               	bnz	l3205
  5468  0007EE  6A09               	clrf	?_strncmp,c
  5469  0007F0  6A0A               	clrf	?_strncmp+1,c
  5470  0007F2  0012               	return	
  5471  0007F4                     l3203:
  5472  0007F4  4A0F               	infsnz	strncmp@l,f,c
  5473  0007F6  2A10               	incf	strncmp@l+1,f,c
  5474  0007F8  2A11               	incf	strncmp@r,f,c
  5475  0007FA  060C               	decf	strncmp@n,f,c
  5476  0007FC  A0D8               	btfss	status,0,c
  5477  0007FE  060D               	decf	strncmp@n+1,f,c
  5478  000800                     l3205:
  5479  000800  C00F  FFD9         	movff	strncmp@l,fsr2l
  5480  000804  C010  FFDA         	movff	strncmp@l+1,fsr2h
  5481  000808  50DF               	movf	indf2,w,c
  5482  00080A  E018               	bz	u2040
  5483  00080C  C011  FFF6         	movff	strncmp@r,tblptrl
  5484  000810                     	if	1	;There is more than 1 active tblptr byte
  5485  000810  0E02               	movlw	high __smallconst
  5486  000812  6EF7               	movwf	tblptrh,c
  5487  000814                     	endif
  5488  000814                     	if	0	;tblptru may be non-zero
  5489  000814                     	endif
  5490  000814                     	if	0	;tblptru may be non-zero
  5491  000814                     	endif
  5492  000814  0008               	tblrd		*
  5493  000816  50F5               	movf	tablat,w,c
  5494  000818  E011               	bz	u2040
  5495  00081A  500C               	movf	strncmp@n,w,c
  5496  00081C  100D               	iorwf	strncmp@n+1,w,c
  5497  00081E  E00E               	bz	u2040
  5498  000820  C00F  FFD9         	movff	strncmp@l,fsr2l
  5499  000824  C010  FFDA         	movff	strncmp@l+1,fsr2h
  5500  000828  50DF               	movf	indf2,w,c
  5501  00082A  6E0E               	movwf	??_strncmp& (0+255),c
  5502  00082C  C011  FFF6         	movff	strncmp@r,tblptrl
  5503  000830                     	if	1	;There is more than 1 active tblptr byte
  5504  000830  0E02               	movlw	high __smallconst
  5505  000832  6EF7               	movwf	tblptrh,c
  5506  000834                     	endif
  5507  000834                     	if	0	;tblptru may be non-zero
  5508  000834                     	endif
  5509  000834                     	if	0	;tblptru may be non-zero
  5510  000834                     	endif
  5511  000834  0008               	tblrd		*
  5512  000836  50F5               	movf	tablat,w,c
  5513  000838  180E               	xorwf	??_strncmp,w,c
  5514  00083A  E0DC               	bz	l3203
  5515  00083C                     u2040:
  5516  00083C  C00F  FFD9         	movff	strncmp@l,fsr2l
  5517  000840  C010  FFDA         	movff	strncmp@l+1,fsr2h
  5518  000844  50DF               	movf	indf2,w,c
  5519  000846  6E0E               	movwf	??_strncmp& (0+255),c
  5520  000848  C011  FFF6         	movff	strncmp@r,tblptrl
  5521  00084C                     	if	1	;There is more than 1 active tblptr byte
  5522  00084C  0E02               	movlw	high __smallconst
  5523  00084E  6EF7               	movwf	tblptrh,c
  5524  000850                     	endif
  5525  000850                     	if	0	;tblptru may be non-zero
  5526  000850                     	endif
  5527  000850                     	if	0	;tblptru may be non-zero
  5528  000850                     	endif
  5529  000850  0008               	tblrd		*
  5530  000852  50F5               	movf	tablat,w,c
  5531  000854  5C0E               	subwf	??_strncmp,w,c
  5532  000856  6E09               	movwf	?_strncmp,c
  5533  000858  6A0A               	clrf	?_strncmp+1,c
  5534  00085A  A0D8               	btfss	status,0,c
  5535  00085C  060A               	decf	?_strncmp+1,f,c
  5536  00085E  0012               	return		;funcret
  5537  000860                     __end_of_strncmp:
  5538                           	opt stack 0
  5539                           tosu	equ	0xFFF
  5540                           tosh	equ	0xFFE
  5541                           tosl	equ	0xFFD
  5542                           pclath	equ	0xFFA
  5543                           tblptru	equ	0xFF8
  5544                           tblptrh	equ	0xFF7
  5545                           tblptrl	equ	0xFF6
  5546                           tablat	equ	0xFF5
  5547                           prodh	equ	0xFF4
  5548                           prodl	equ	0xFF3
  5549                           intcon	equ	0xFF2
  5550                           intcon2	equ	0xFF1
  5551                           postinc0	equ	0xFEE
  5552                           wreg	equ	0xFE8
  5553                           indf2	equ	0xFDF
  5554                           postinc2	equ	0xFDE
  5555                           fsr2h	equ	0xFDA
  5556                           fsr2l	equ	0xFD9
  5557                           status	equ	0xFD8
  5558                           
  5559 ;; *************** function _strlen *****************
  5560 ;; Defined at:
  5561 ;;		line 12 in file "/opt/microchip/xc8/v2.00/pic/sources/c99/common/strlen.c"
  5562 ;; Parameters:    Size  Location     Type
  5563 ;;  s               1    8[COMRAM] PTR const unsigned char 
  5564 ;;		 -> STR_15(2), STR_7(7), STR_6(8), STR_5(5), 
  5565 ;;		 -> STR_4(6), STR_3(10), STR_2(3), STR_1(8), 
  5566 ;; Auto vars:     Size  Location     Type
  5567 ;;  a               1   10[COMRAM] PTR const unsigned char 
  5568 ;;		 -> STR_15(2), STR_7(7), STR_6(8), STR_5(5), 
  5569 ;;		 -> STR_4(6), STR_3(10), STR_2(3), STR_1(8), 
  5570 ;; Return value:  Size  Location     Type
  5571 ;;                  2    8[COMRAM] unsigned int 
  5572 ;; Registers used:
  5573 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  5574 ;; Tracked objects:
  5575 ;;		On entry : 0/0
  5576 ;;		On exit  : 0/0
  5577 ;;		Unchanged: 0/0
  5578 ;; Data sizes:     COMRAM   BANK0   BANK1
  5579 ;;      Params:         2       0       0
  5580 ;;      Locals:         1       0       0
  5581 ;;      Temps:          0       0       0
  5582 ;;      Totals:         3       0       0
  5583 ;;Total ram usage:        3 bytes
  5584 ;; Hardware stack levels used:    1
  5585 ;; Hardware stack levels required when called:    4
  5586 ;; This function calls:
  5587 ;;		Nothing
  5588 ;; This function is called by:
  5589 ;;		_strstr
  5590 ;; This function uses a non-reentrant model
  5591 ;;
  5592                           
  5593                           	psect	text44
  5594  000F60                     __ptext44:
  5595                           	opt stack 0
  5596  000F60                     _strlen:
  5597                           	opt stack 20
  5598                           
  5599                           ;incstack = 0
  5600  000F60  C009  F00B         	movff	strlen@s,strlen@a
  5601  000F64  D001               	goto	l3193
  5602  000F66                     l3191:
  5603  000F66  2A09               	incf	strlen@s,f,c
  5604  000F68                     l3193:
  5605  000F68  C009  FFF6         	movff	strlen@s,tblptrl
  5606  000F6C                     	if	1	;There is more than 1 active tblptr byte
  5607  000F6C  0E02               	movlw	high __smallconst
  5608  000F6E  6EF7               	movwf	tblptrh,c
  5609  000F70                     	endif
  5610  000F70                     	if	0	;tblptru may be non-zero
  5611  000F70                     	endif
  5612  000F70                     	if	0	;tblptru may be non-zero
  5613  000F70                     	endif
  5614  000F70  0008               	tblrd		*
  5615  000F72  50F5               	movf	tablat,w,c
  5616  000F74  E1F8               	bnz	l3191
  5617  000F76  500B               	movf	strlen@a,w,c
  5618  000F78  5C09               	subwf	strlen@s,w,c
  5619  000F7A  6E09               	movwf	?_strlen,c
  5620  000F7C  6A0A               	clrf	?_strlen+1,c
  5621  000F7E  BE09               	btfsc	?_strlen,7,c
  5622  000F80  060A               	decf	?_strlen+1,f,c
  5623  000F82  0012               	return		;funcret
  5624  000F84                     __end_of_strlen:
  5625                           	opt stack 0
  5626                           tosu	equ	0xFFF
  5627                           tosh	equ	0xFFE
  5628                           tosl	equ	0xFFD
  5629                           pclath	equ	0xFFA
  5630                           tblptru	equ	0xFF8
  5631                           tblptrh	equ	0xFF7
  5632                           tblptrl	equ	0xFF6
  5633                           tablat	equ	0xFF5
  5634                           prodh	equ	0xFF4
  5635                           prodl	equ	0xFF3
  5636                           intcon	equ	0xFF2
  5637                           intcon2	equ	0xFF1
  5638                           postinc0	equ	0xFEE
  5639                           wreg	equ	0xFE8
  5640                           indf2	equ	0xFDF
  5641                           postinc2	equ	0xFDE
  5642                           fsr2h	equ	0xFDA
  5643                           fsr2l	equ	0xFD9
  5644                           status	equ	0xFD8
  5645                           
  5646 ;; *************** function _strchr *****************
  5647 ;; Defined at:
  5648 ;;		line 7 in file "/opt/microchip/xc8/v2.00/pic/sources/c99/common/strchr.c"
  5649 ;; Parameters:    Size  Location     Type
  5650 ;;  s               2    8[COMRAM] PTR const unsigned char 
  5651 ;;		 -> NULL(0), esp_read_data(16), 
  5652 ;;  c               2   10[COMRAM] int 
  5653 ;; Auto vars:     Size  Location     Type
  5654 ;;		None
  5655 ;; Return value:  Size  Location     Type
  5656 ;;                  2    8[COMRAM] PTR unsigned char 
  5657 ;; Registers used:
  5658 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5659 ;; Tracked objects:
  5660 ;;		On entry : 0/0
  5661 ;;		On exit  : 0/0
  5662 ;;		Unchanged: 0/0
  5663 ;; Data sizes:     COMRAM   BANK0   BANK1
  5664 ;;      Params:         4       0       0
  5665 ;;      Locals:         0       0       0
  5666 ;;      Temps:          1       0       0
  5667 ;;      Totals:         5       0       0
  5668 ;;Total ram usage:        5 bytes
  5669 ;; Hardware stack levels used:    1
  5670 ;; Hardware stack levels required when called:    4
  5671 ;; This function calls:
  5672 ;;		Nothing
  5673 ;; This function is called by:
  5674 ;;		_strstr
  5675 ;; This function uses a non-reentrant model
  5676 ;;
  5677                           
  5678                           	psect	text45
  5679  000E6E                     __ptext45:
  5680                           	opt stack 0
  5681  000E6E                     _strchr:
  5682                           	opt stack 20
  5683                           
  5684                           ;incstack = 0
  5685  000E6E  C009  FFD9         	movff	strchr@s,fsr2l
  5686  000E72  C00A  FFDA         	movff	strchr@s+1,fsr2h
  5687  000E76  500B               	movf	strchr@c,w,c
  5688  000E78  18DE               	xorwf	postinc2,w,c
  5689  000E7A  E105               	bnz	l3223
  5690  000E7C  C009  F009         	movff	strchr@s,?_strchr
  5691  000E80  C00A  F00A         	movff	strchr@s+1,?_strchr+1
  5692  000E84  0012               	return	
  5693  000E86                     l3223:
  5694  000E86  C009  FFD9         	movff	strchr@s,fsr2l
  5695  000E8A  C00A  FFDA         	movff	strchr@s+1,fsr2h
  5696  000E8E  4A09               	infsnz	strchr@s,f,c
  5697  000E90  2A0A               	incf	strchr@s+1,f,c
  5698  000E92  50DF               	movf	indf2,w,c
  5699  000E94  E1EC               	bnz	_strchr
  5700  000E96  6A09               	clrf	?_strchr,c
  5701  000E98  6A0A               	clrf	?_strchr+1,c
  5702  000E9A  0012               	return		;funcret
  5703  000E9C                     __end_of_strchr:
  5704                           	opt stack 0
  5705                           tosu	equ	0xFFF
  5706                           tosh	equ	0xFFE
  5707                           tosl	equ	0xFFD
  5708                           pclath	equ	0xFFA
  5709                           tblptru	equ	0xFF8
  5710                           tblptrh	equ	0xFF7
  5711                           tblptrl	equ	0xFF6
  5712                           tablat	equ	0xFF5
  5713                           prodh	equ	0xFF4
  5714                           prodl	equ	0xFF3
  5715                           intcon	equ	0xFF2
  5716                           intcon2	equ	0xFF1
  5717                           postinc0	equ	0xFEE
  5718                           wreg	equ	0xFE8
  5719                           indf2	equ	0xFDF
  5720                           postinc2	equ	0xFDE
  5721                           fsr2h	equ	0xFDA
  5722                           fsr2l	equ	0xFD9
  5723                           status	equ	0xFD8
  5724                           
  5725 ;; *************** function _TMR1_StopTimer *****************
  5726 ;; Defined at:
  5727 ;;		line 96 in file "mcc_generated_files/tmr1.c"
  5728 ;; Parameters:    Size  Location     Type
  5729 ;;		None
  5730 ;; Auto vars:     Size  Location     Type
  5731 ;;		None
  5732 ;; Return value:  Size  Location     Type
  5733 ;;                  1    wreg      void 
  5734 ;; Registers used:
  5735 ;;		None
  5736 ;; Tracked objects:
  5737 ;;		On entry : 0/0
  5738 ;;		On exit  : 0/0
  5739 ;;		Unchanged: 0/0
  5740 ;; Data sizes:     COMRAM   BANK0   BANK1
  5741 ;;      Params:         0       0       0
  5742 ;;      Locals:         0       0       0
  5743 ;;      Temps:          0       0       0
  5744 ;;      Totals:         0       0       0
  5745 ;;Total ram usage:        0 bytes
  5746 ;; Hardware stack levels used:    1
  5747 ;; Hardware stack levels required when called:    4
  5748 ;; This function calls:
  5749 ;;		Nothing
  5750 ;; This function is called by:
  5751 ;;		_logger_initialize
  5752 ;;		_process_message
  5753 ;; This function uses a non-reentrant model
  5754 ;;
  5755                           
  5756                           	psect	text46
  5757  0010EA                     __ptext46:
  5758                           	opt stack 0
  5759  0010EA                     _TMR1_StopTimer:
  5760                           	opt stack 25
  5761                           
  5762                           ;mcc_generated_files/tmr1.c: 99:     T1CONbits.TMR1ON = 0;
  5763                           
  5764                           ;incstack = 0
  5765  0010EA  90CD               	bcf	4045,0,c	;volatile
  5766  0010EC  0012               	return		;funcret
  5767  0010EE                     __end_of_TMR1_StopTimer:
  5768                           	opt stack 0
  5769                           tosu	equ	0xFFF
  5770                           tosh	equ	0xFFE
  5771                           tosl	equ	0xFFD
  5772                           pclath	equ	0xFFA
  5773                           tblptru	equ	0xFF8
  5774                           tblptrh	equ	0xFF7
  5775                           tblptrl	equ	0xFF6
  5776                           tablat	equ	0xFF5
  5777                           prodh	equ	0xFF4
  5778                           prodl	equ	0xFF3
  5779                           intcon	equ	0xFF2
  5780                           intcon2	equ	0xFF1
  5781                           postinc0	equ	0xFEE
  5782                           wreg	equ	0xFE8
  5783                           indf2	equ	0xFDF
  5784                           postinc2	equ	0xFDE
  5785                           fsr2h	equ	0xFDA
  5786                           fsr2l	equ	0xFD9
  5787                           status	equ	0xFD8
  5788                           
  5789 ;; *************** function _TMR1_StartTimer *****************
  5790 ;; Defined at:
  5791 ;;		line 90 in file "mcc_generated_files/tmr1.c"
  5792 ;; Parameters:    Size  Location     Type
  5793 ;;		None
  5794 ;; Auto vars:     Size  Location     Type
  5795 ;;		None
  5796 ;; Return value:  Size  Location     Type
  5797 ;;                  1    wreg      void 
  5798 ;; Registers used:
  5799 ;;		None
  5800 ;; Tracked objects:
  5801 ;;		On entry : 0/0
  5802 ;;		On exit  : 0/0
  5803 ;;		Unchanged: 0/0
  5804 ;; Data sizes:     COMRAM   BANK0   BANK1
  5805 ;;      Params:         0       0       0
  5806 ;;      Locals:         0       0       0
  5807 ;;      Temps:          0       0       0
  5808 ;;      Totals:         0       0       0
  5809 ;;Total ram usage:        0 bytes
  5810 ;; Hardware stack levels used:    1
  5811 ;; Hardware stack levels required when called:    4
  5812 ;; This function calls:
  5813 ;;		Nothing
  5814 ;; This function is called by:
  5815 ;;		_process_message
  5816 ;; This function uses a non-reentrant model
  5817 ;;
  5818                           
  5819                           	psect	text47
  5820  0010EE                     __ptext47:
  5821                           	opt stack 0
  5822  0010EE                     _TMR1_StartTimer:
  5823                           	opt stack 25
  5824                           
  5825                           ;mcc_generated_files/tmr1.c: 93:     T1CONbits.TMR1ON = 1;
  5826                           
  5827                           ;incstack = 0
  5828  0010EE  80CD               	bsf	4045,0,c	;volatile
  5829  0010F0  0012               	return		;funcret
  5830  0010F2                     __end_of_TMR1_StartTimer:
  5831                           	opt stack 0
  5832                           tosu	equ	0xFFF
  5833                           tosh	equ	0xFFE
  5834                           tosl	equ	0xFFD
  5835                           pclath	equ	0xFFA
  5836                           tblptru	equ	0xFF8
  5837                           tblptrh	equ	0xFF7
  5838                           tblptrl	equ	0xFF6
  5839                           tablat	equ	0xFF5
  5840                           prodh	equ	0xFF4
  5841                           prodl	equ	0xFF3
  5842                           intcon	equ	0xFF2
  5843                           intcon2	equ	0xFF1
  5844                           postinc0	equ	0xFEE
  5845                           wreg	equ	0xFE8
  5846                           indf2	equ	0xFDF
  5847                           postinc2	equ	0xFDE
  5848                           fsr2h	equ	0xFDA
  5849                           fsr2l	equ	0xFD9
  5850                           status	equ	0xFD8
  5851                           
  5852 ;; *************** function _ADC1_StartConversion *****************
  5853 ;; Defined at:
  5854 ;;		line 91 in file "mcc_generated_files/adc1.c"
  5855 ;; Parameters:    Size  Location     Type
  5856 ;;		None
  5857 ;; Auto vars:     Size  Location     Type
  5858 ;;		None
  5859 ;; Return value:  Size  Location     Type
  5860 ;;                  1    wreg      void 
  5861 ;; Registers used:
  5862 ;;		None
  5863 ;; Tracked objects:
  5864 ;;		On entry : 0/0
  5865 ;;		On exit  : 0/0
  5866 ;;		Unchanged: 0/0
  5867 ;; Data sizes:     COMRAM   BANK0   BANK1
  5868 ;;      Params:         0       0       0
  5869 ;;      Locals:         0       0       0
  5870 ;;      Temps:          0       0       0
  5871 ;;      Totals:         0       0       0
  5872 ;;Total ram usage:        0 bytes
  5873 ;; Hardware stack levels used:    1
  5874 ;; Hardware stack levels required when called:    4
  5875 ;; This function calls:
  5876 ;;		Nothing
  5877 ;; This function is called by:
  5878 ;;		_process_message
  5879 ;; This function uses a non-reentrant model
  5880 ;;
  5881                           
  5882                           	psect	text48
  5883  0010F2                     __ptext48:
  5884                           	opt stack 0
  5885  0010F2                     _ADC1_StartConversion:
  5886                           	opt stack 25
  5887                           
  5888                           ;mcc_generated_files/adc1.c: 94:     ADCON0bits.GO_nDONE = 1;
  5889                           
  5890                           ;incstack = 0
  5891  0010F2  82C2               	bsf	4034,1,c	;volatile
  5892  0010F4  0012               	return		;funcret
  5893  0010F6                     __end_of_ADC1_StartConversion:
  5894                           	opt stack 0
  5895                           tosu	equ	0xFFF
  5896                           tosh	equ	0xFFE
  5897                           tosl	equ	0xFFD
  5898                           pclath	equ	0xFFA
  5899                           tblptru	equ	0xFF8
  5900                           tblptrh	equ	0xFF7
  5901                           tblptrl	equ	0xFF6
  5902                           tablat	equ	0xFF5
  5903                           prodh	equ	0xFF4
  5904                           prodl	equ	0xFF3
  5905                           intcon	equ	0xFF2
  5906                           intcon2	equ	0xFF1
  5907                           postinc0	equ	0xFEE
  5908                           wreg	equ	0xFE8
  5909                           indf2	equ	0xFDF
  5910                           postinc2	equ	0xFDE
  5911                           fsr2h	equ	0xFDA
  5912                           fsr2l	equ	0xFD9
  5913                           status	equ	0xFD8
  5914                           
  5915 ;; *************** function _ESP_initialize *****************
  5916 ;; Defined at:
  5917 ;;		line 18 in file "esp1.c"
  5918 ;; Parameters:    Size  Location     Type
  5919 ;;		None
  5920 ;; Auto vars:     Size  Location     Type
  5921 ;;		None
  5922 ;; Return value:  Size  Location     Type
  5923 ;;                  1    wreg      void 
  5924 ;; Registers used:
  5925 ;;		wreg, status,2, status,0, cstack
  5926 ;; Tracked objects:
  5927 ;;		On entry : 0/0
  5928 ;;		On exit  : 0/0
  5929 ;;		Unchanged: 0/0
  5930 ;; Data sizes:     COMRAM   BANK0   BANK1
  5931 ;;      Params:         0       0       0
  5932 ;;      Locals:         0       0       0
  5933 ;;      Temps:          0       0       0
  5934 ;;      Totals:         0       0       0
  5935 ;;Total ram usage:        0 bytes
  5936 ;; Hardware stack levels used:    1
  5937 ;; Hardware stack levels required when called:    5
  5938 ;; This function calls:
  5939 ;;		_ESP_Set_application_handler
  5940 ;; This function is called by:
  5941 ;;		_main
  5942 ;; This function uses a non-reentrant model
  5943 ;;
  5944                           
  5945                           	psect	text49
  5946  00106C                     __ptext49:
  5947                           	opt stack 0
  5948  00106C                     _ESP_initialize:
  5949                           	opt stack 25
  5950                           
  5951                           ;esp1.c: 20:     esp_channel = 0;
  5952                           
  5953                           ;incstack = 0
  5954  00106C  6A3D               	clrf	_esp_channel,c	;volatile
  5955                           
  5956                           ;esp1.c: 21:     ESP_wait_exception = ESP_OTHER;
  5957  00106E  6A3F               	clrf	_ESP_wait_exception,c	;volatile
  5958                           
  5959                           ;esp1.c: 24:     ESP_Set_application_handler(ESP_default_application_handler);
  5960  001070  0EFE               	movlw	low _ESP_default_application_handler
  5961  001072  6E09               	movwf	ESP_Set_application_handler@applicationHandler,c
  5962  001074  0E10               	movlw	high _ESP_default_application_handler
  5963  001076  6E0A               	movwf	ESP_Set_application_handler@applicationHandler+1,c
  5964  001078  EF60  F008         	goto	_ESP_Set_application_handler	;wreg free
  5965  00107C                     __end_of_ESP_initialize:
  5966                           	opt stack 0
  5967                           tosu	equ	0xFFF
  5968                           tosh	equ	0xFFE
  5969                           tosl	equ	0xFFD
  5970                           pclath	equ	0xFFA
  5971                           tblptru	equ	0xFF8
  5972                           tblptrh	equ	0xFF7
  5973                           tblptrl	equ	0xFF6
  5974                           tablat	equ	0xFF5
  5975                           prodh	equ	0xFF4
  5976                           prodl	equ	0xFF3
  5977                           intcon	equ	0xFF2
  5978                           intcon2	equ	0xFF1
  5979                           postinc0	equ	0xFEE
  5980                           wreg	equ	0xFE8
  5981                           indf2	equ	0xFDF
  5982                           postinc2	equ	0xFDE
  5983                           fsr2h	equ	0xFDA
  5984                           fsr2l	equ	0xFD9
  5985                           status	equ	0xFD8
  5986                           
  5987 ;; *************** function _ESP_Set_application_handler *****************
  5988 ;; Defined at:
  5989 ;;		line 224 in file "esp1.c"
  5990 ;; Parameters:    Size  Location     Type
  5991 ;;  applicationH    2    8[COMRAM] PTR FTN(unsigned char ,)
  5992 ;;		 -> ESP_default_application_handler(1), process_message(1), 
  5993 ;; Auto vars:     Size  Location     Type
  5994 ;;		None
  5995 ;; Return value:  Size  Location     Type
  5996 ;;                  1    wreg      void 
  5997 ;; Registers used:
  5998 ;;		wreg, status,2, status,0
  5999 ;; Tracked objects:
  6000 ;;		On entry : 0/0
  6001 ;;		On exit  : 0/0
  6002 ;;		Unchanged: 0/0
  6003 ;; Data sizes:     COMRAM   BANK0   BANK1
  6004 ;;      Params:         2       0       0
  6005 ;;      Locals:         0       0       0
  6006 ;;      Temps:          0       0       0
  6007 ;;      Totals:         2       0       0
  6008 ;;Total ram usage:        2 bytes
  6009 ;; Hardware stack levels used:    1
  6010 ;; Hardware stack levels required when called:    4
  6011 ;; This function calls:
  6012 ;;		Nothing
  6013 ;; This function is called by:
  6014 ;;		_ESP_initialize
  6015 ;;		_logger_initialize
  6016 ;; This function uses a non-reentrant model
  6017 ;;
  6018                           
  6019                           	psect	text50
  6020  0010C0                     __ptext50:
  6021                           	opt stack 0
  6022  0010C0                     _ESP_Set_application_handler:
  6023                           	opt stack 25
  6024                           
  6025                           ;esp1.c: 224: void ESP_Set_application_handler(void (* applicationHandler)(unsigned char
      +                          ));esp1.c: 225: {;esp1.c: 226:     ESP_external_message_handler = applicationHandler;
  6026                           
  6027                           ;incstack = 0
  6028  0010C0  C009  F048         	movff	ESP_Set_application_handler@applicationHandler,_ESP_external_message_handler
  6029  0010C4  C00A  F049         	movff	ESP_Set_application_handler@applicationHandler+1,_ESP_external_message_handler+1
  6030  0010C8  0012               	return		;funcret
  6031  0010CA                     __end_of_ESP_Set_application_handler:
  6032                           	opt stack 0
  6033                           tosu	equ	0xFFF
  6034                           tosh	equ	0xFFE
  6035                           tosl	equ	0xFFD
  6036                           pclath	equ	0xFFA
  6037                           tblptru	equ	0xFF8
  6038                           tblptrh	equ	0xFF7
  6039                           tblptrl	equ	0xFF6
  6040                           tablat	equ	0xFF5
  6041                           prodh	equ	0xFF4
  6042                           prodl	equ	0xFF3
  6043                           intcon	equ	0xFF2
  6044                           intcon2	equ	0xFF1
  6045                           postinc0	equ	0xFEE
  6046                           wreg	equ	0xFE8
  6047                           indf2	equ	0xFDF
  6048                           postinc2	equ	0xFDE
  6049                           fsr2h	equ	0xFDA
  6050                           fsr2l	equ	0xFD9
  6051                           status	equ	0xFD8
  6052                           
  6053 ;; *************** function _INTERRUPT_InterruptManager *****************
  6054 ;; Defined at:
  6055 ;;		line 59 in file "mcc_generated_files/interrupt_manager.c"
  6056 ;; Parameters:    Size  Location     Type
  6057 ;;		None
  6058 ;; Auto vars:     Size  Location     Type
  6059 ;;		None
  6060 ;; Return value:  Size  Location     Type
  6061 ;;                  1    wreg      void 
  6062 ;; Registers used:
  6063 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  6064 ;; Tracked objects:
  6065 ;;		On entry : 0/0
  6066 ;;		On exit  : 0/0
  6067 ;;		Unchanged: 0/0
  6068 ;; Data sizes:     COMRAM   BANK0   BANK1
  6069 ;;      Params:         0       0       0
  6070 ;;      Locals:         0       0       0
  6071 ;;      Temps:          4       0       0
  6072 ;;      Totals:         4       0       0
  6073 ;;Total ram usage:        4 bytes
  6074 ;; Hardware stack levels used:    1
  6075 ;; Hardware stack levels required when called:    3
  6076 ;; This function calls:
  6077 ;;		Absolute function
  6078 ;;		_ADC1_GetConversionResult
  6079 ;;		_ADC1_ISR
  6080 ;;		_EUSART_Receive_ISR
  6081 ;;		_EUSART_Transmit_ISR
  6082 ;;		_PIN_MANAGER_IOC
  6083 ;;		_TMR1_ISR
  6084 ;; This function is called by:
  6085 ;;		Interrupt level 2
  6086 ;; This function uses a non-reentrant model
  6087 ;;
  6088                           
  6089                           	psect	intcode
  6090  000008                     __pintcode:
  6091                           	opt stack 0
  6092  000008                     _INTERRUPT_InterruptManager:
  6093                           	opt stack 17
  6094                           
  6095                           ;incstack = 0
  6096  000008  8256               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6097  00000A  CFFA F005          	movff	pclath,??_INTERRUPT_InterruptManager
  6098  00000E  CFFB F006          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  6099  000012  CFD9 F007          	movff	fsr2l,??_INTERRUPT_InterruptManager+2
  6100  000016  CFDA F008          	movff	fsr2h,??_INTERRUPT_InterruptManager+3
  6101                           
  6102                           ;mcc_generated_files/interrupt_manager.c: 62:     if(INTCONbits.RABIE == 1 && INTCONbits
      +                          .RABIF == 1)
  6103  00001A  B6F2               	btfsc	intcon,3,c	;volatile
  6104  00001C  A0F2               	btfss	intcon,0,c	;volatile
  6105  00001E  D003               	goto	i2l113
  6106                           
  6107                           ;mcc_generated_files/interrupt_manager.c: 63:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 64:         PIN_MANAGER_IOC();
  6108  000020  EC6A  F008         	call	_PIN_MANAGER_IOC	;wreg free
  6109                           
  6110                           ;mcc_generated_files/interrupt_manager.c: 65:     }
  6111  000024  D031               	goto	i2u193_49
  6112  000026                     i2l113:
  6113  000026  ACF2               	btfss	intcon,6,c	;volatile
  6114  000028  D02F               	goto	i2u193_49
  6115                           
  6116                           ;mcc_generated_files/interrupt_manager.c: 67:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 68:         if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  6117  00002A  B09D               	btfsc	3997,0,c	;volatile
  6118  00002C  A09E               	btfss	3998,0,c	;volatile
  6119  00002E  D003               	goto	i2l116
  6120                           
  6121                           ;mcc_generated_files/interrupt_manager.c: 69:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 70:             TMR1_ISR();
  6122  000030  EC4E  F007         	call	_TMR1_ISR	;wreg free
  6123                           
  6124                           ;mcc_generated_files/interrupt_manager.c: 71:         }
  6125  000034  D029               	goto	i2u193_49
  6126  000036                     i2l116:
  6127  000036  BC9D               	btfsc	3997,6,c	;volatile
  6128  000038  AC9E               	btfss	3998,6,c	;volatile
  6129  00003A  D00C               	goto	i2l118
  6130                           
  6131                           ;mcc_generated_files/interrupt_manager.c: 73:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 74:             ADC_value = ADC1_GetConversionResult();
  6132  00003C  EC23  F008         	call	_ADC1_GetConversionResult	;wreg free
  6133  000040  C001  F038         	movff	?_ADC1_GetConversionResult,_ADC_value	;volatile
  6134  000044  C002  F039         	movff	?_ADC1_GetConversionResult+1,_ADC_value+1	;volatile
  6135                           
  6136                           ;mcc_generated_files/interrupt_manager.c: 75:             ADC_count++;
  6137  000048  2A47               	incf	_ADC_count,f,c	;volatile
  6138                           
  6139                           ;mcc_generated_files/interrupt_manager.c: 82:             ADC_state = ADC_READY;
  6140  00004A  0E01               	movlw	1
  6141  00004C  6E46               	movwf	_ADC_state,c	;volatile
  6142                           
  6143                           ;mcc_generated_files/interrupt_manager.c: 83:             ADC1_ISR();
  6144  00004E  EC7D  F008         	call	_ADC1_ISR	;wreg free
  6145                           
  6146                           ;mcc_generated_files/interrupt_manager.c: 84:         }
  6147  000052  D01A               	goto	i2u193_49
  6148  000054                     i2l118:
  6149  000054  B89D               	btfsc	3997,4,c	;volatile
  6150  000056  A89E               	btfss	3998,4,c	;volatile
  6151  000058  D008               	goto	i2l120
  6152                           
  6153                           ;mcc_generated_files/interrupt_manager.c: 86:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 87:             EUSART_TxDefaultInterruptHandler();
  6154  00005A  D801               	call	i2u190_48
  6155  00005C  D015               	goto	i2u193_49
  6156  00005E                     i2u190_48:
  6157  00005E  0005               	push	
  6158  000060  6EFA               	movwf	pclath,c
  6159  000062  5050               	movf	_EUSART_TxDefaultInterruptHandler,w,c
  6160  000064  6EFD               	movwf	tosl,c
  6161  000066  5051               	movf	_EUSART_TxDefaultInterruptHandler+1,w,c
  6162  000068  D00A               	goto	L2
  6163  00006A                     i2l120:
  6164  00006A  BA9D               	btfsc	3997,5,c	;volatile
  6165  00006C  AA9E               	btfss	3998,5,c	;volatile
  6166  00006E  D00C               	goto	i2u193_49
  6167                           
  6168                           ;mcc_generated_files/interrupt_manager.c: 90:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 91:             EUSART_RxDefaultInterruptHandler();
  6169  000070  D801               	call	i2u193_48
  6170  000072  D00A               	goto	i2u193_49
  6171  000074                     i2u193_48:
  6172  000074  0005               	push	
  6173  000076  6EFA               	movwf	pclath,c
  6174  000078  504E               	movf	_EUSART_RxDefaultInterruptHandler,w,c
  6175  00007A  6EFD               	movwf	tosl,c
  6176  00007C  504F               	movf	_EUSART_RxDefaultInterruptHandler+1,w,c
  6177  00007E                     L2:
  6178  00007E  6EFE               	movwf	tosh,c
  6179  000080  50F8               	movf	tblptru,w,c
  6180  000082  6EFF               	movwf	tosu,c
  6181  000084  50FA               	movf	pclath,w,c
  6182  000086  0012               	return		;indir
  6183  000088                     i2u193_49:
  6184  000088  C008  FFDA         	movff	??_INTERRUPT_InterruptManager+3,fsr2h
  6185  00008C  C007  FFD9         	movff	??_INTERRUPT_InterruptManager+2,fsr2l
  6186  000090  C006  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  6187  000094  C005  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  6188  000098  9256               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6189  00009A  0011               	retfie		f
  6190  00009C                     __end_of_INTERRUPT_InterruptManager:
  6191                           	opt stack 0
  6192                           tosu	equ	0xFFF
  6193                           tosh	equ	0xFFE
  6194                           tosl	equ	0xFFD
  6195                           pclatu	equ	0xFFB
  6196                           pclath	equ	0xFFA
  6197                           tblptru	equ	0xFF8
  6198                           tblptrh	equ	0xFF7
  6199                           tblptrl	equ	0xFF6
  6200                           tablat	equ	0xFF5
  6201                           prodh	equ	0xFF4
  6202                           prodl	equ	0xFF3
  6203                           intcon	equ	0xFF2
  6204                           intcon2	equ	0xFF1
  6205                           postinc0	equ	0xFEE
  6206                           wreg	equ	0xFE8
  6207                           indf2	equ	0xFDF
  6208                           postinc2	equ	0xFDE
  6209                           fsr2h	equ	0xFDA
  6210                           fsr2l	equ	0xFD9
  6211                           status	equ	0xFD8
  6212                           
  6213 ;; *************** function _TMR1_ISR *****************
  6214 ;; Defined at:
  6215 ;;		line 145 in file "mcc_generated_files/tmr1.c"
  6216 ;; Parameters:    Size  Location     Type
  6217 ;;		None
  6218 ;; Auto vars:     Size  Location     Type
  6219 ;;		None
  6220 ;; Return value:  Size  Location     Type
  6221 ;;                  1    wreg      void 
  6222 ;; Registers used:
  6223 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  6224 ;; Tracked objects:
  6225 ;;		On entry : 0/0
  6226 ;;		On exit  : 0/0
  6227 ;;		Unchanged: 0/0
  6228 ;; Data sizes:     COMRAM   BANK0   BANK1
  6229 ;;      Params:         0       0       0
  6230 ;;      Locals:         0       0       0
  6231 ;;      Temps:          0       0       0
  6232 ;;      Totals:         0       0       0
  6233 ;;Total ram usage:        0 bytes
  6234 ;; Hardware stack levels used:    1
  6235 ;; Hardware stack levels required when called:    2
  6236 ;; This function calls:
  6237 ;;		Absolute function
  6238 ;;		_TMR1_DefaultInterruptHandler
  6239 ;;		_TMR1_WriteTimer
  6240 ;;		__TMR1_Ready
  6241 ;; This function is called by:
  6242 ;;		_INTERRUPT_InterruptManager
  6243 ;; This function uses a non-reentrant model
  6244 ;;
  6245                           
  6246                           	psect	text52
  6247  000E9C                     __ptext52:
  6248                           	opt stack 0
  6249  000E9C                     _TMR1_ISR:
  6250                           	opt stack 17
  6251                           
  6252                           ;mcc_generated_files/tmr1.c: 149:     PIR1bits.TMR1IF = 0;
  6253                           
  6254                           ;incstack = 0
  6255  000E9C  909E               	bcf	3998,0,c	;volatile
  6256                           
  6257                           ;mcc_generated_files/tmr1.c: 150:     TMR1_WriteTimer(timer1ReloadVal);
  6258  000E9E  C04C  F001         	movff	_timer1ReloadVal,TMR1_WriteTimer@timerVal	;volatile
  6259  000EA2  C04D  F002         	movff	_timer1ReloadVal+1,TMR1_WriteTimer@timerVal+1	;volatile
  6260  000EA6  ECE5  F007         	call	_TMR1_WriteTimer	;wreg free
  6261                           
  6262                           ;mcc_generated_files/tmr1.c: 152:     if(TMR1_InterruptHandler)
  6263  000EAA  504A               	movf	_TMR1_InterruptHandler,w,c
  6264  000EAC  104B               	iorwf	_TMR1_InterruptHandler+1,w,c
  6265  000EAE  B4D8               	btfsc	status,2,c
  6266  000EB0  0012               	return	
  6267                           
  6268                           ;mcc_generated_files/tmr1.c: 153:     {;mcc_generated_files/tmr1.c: 154:         TMR1_In
      +                          terruptHandler();
  6269  000EB2  0005               	push	
  6270  000EB4  6EFA               	movwf	pclath,c
  6271  000EB6  504A               	movf	_TMR1_InterruptHandler,w,c
  6272  000EB8  6EFD               	movwf	tosl,c
  6273  000EBA  504B               	movf	_TMR1_InterruptHandler+1,w,c
  6274  000EBC  6EFE               	movwf	tosh,c
  6275  000EBE  50F8               	movf	tblptru,w,c
  6276  000EC0  6EFF               	movwf	tosu,c
  6277  000EC2  50FA               	movf	pclath,w,c
  6278  000EC4  0012               	return		;indir
  6279  000EC6                     __end_of_TMR1_ISR:
  6280                           	opt stack 0
  6281                           tosu	equ	0xFFF
  6282                           tosh	equ	0xFFE
  6283                           tosl	equ	0xFFD
  6284                           pclatu	equ	0xFFB
  6285                           pclath	equ	0xFFA
  6286                           tblptru	equ	0xFF8
  6287                           tblptrh	equ	0xFF7
  6288                           tblptrl	equ	0xFF6
  6289                           tablat	equ	0xFF5
  6290                           prodh	equ	0xFF4
  6291                           prodl	equ	0xFF3
  6292                           intcon	equ	0xFF2
  6293                           intcon2	equ	0xFF1
  6294                           postinc0	equ	0xFEE
  6295                           wreg	equ	0xFE8
  6296                           indf2	equ	0xFDF
  6297                           postinc2	equ	0xFDE
  6298                           fsr2h	equ	0xFDA
  6299                           fsr2l	equ	0xFD9
  6300                           status	equ	0xFD8
  6301                           
  6302 ;; *************** function _TMR1_DefaultInterruptHandler *****************
  6303 ;; Defined at:
  6304 ;;		line 163 in file "mcc_generated_files/tmr1.c"
  6305 ;; Parameters:    Size  Location     Type
  6306 ;;		None
  6307 ;; Auto vars:     Size  Location     Type
  6308 ;;		None
  6309 ;; Return value:  Size  Location     Type
  6310 ;;                  1    wreg      void 
  6311 ;; Registers used:
  6312 ;;		None
  6313 ;; Tracked objects:
  6314 ;;		On entry : 0/0
  6315 ;;		On exit  : 0/0
  6316 ;;		Unchanged: 0/0
  6317 ;; Data sizes:     COMRAM   BANK0   BANK1
  6318 ;;      Params:         0       0       0
  6319 ;;      Locals:         0       0       0
  6320 ;;      Temps:          0       0       0
  6321 ;;      Totals:         0       0       0
  6322 ;;Total ram usage:        0 bytes
  6323 ;; Hardware stack levels used:    1
  6324 ;; This function calls:
  6325 ;;		Nothing
  6326 ;; This function is called by:
  6327 ;;		_TMR1_Initialize
  6328 ;;		_TMR1_ISR
  6329 ;; This function uses a non-reentrant model
  6330 ;;
  6331                           
  6332                           	psect	text53
  6333  001100                     __ptext53:
  6334                           	opt stack 0
  6335  001100                     _TMR1_DefaultInterruptHandler:
  6336                           	opt stack 18
  6337                           
  6338                           ;incstack = 0
  6339  001100  0012               	return		;funcret
  6340  001102                     __end_of_TMR1_DefaultInterruptHandler:
  6341                           	opt stack 0
  6342                           tosu	equ	0xFFF
  6343                           tosh	equ	0xFFE
  6344                           tosl	equ	0xFFD
  6345                           pclatu	equ	0xFFB
  6346                           pclath	equ	0xFFA
  6347                           tblptru	equ	0xFF8
  6348                           tblptrh	equ	0xFF7
  6349                           tblptrl	equ	0xFF6
  6350                           tablat	equ	0xFF5
  6351                           prodh	equ	0xFF4
  6352                           prodl	equ	0xFF3
  6353                           intcon	equ	0xFF2
  6354                           intcon2	equ	0xFF1
  6355                           postinc0	equ	0xFEE
  6356                           wreg	equ	0xFE8
  6357                           indf2	equ	0xFDF
  6358                           postinc2	equ	0xFDE
  6359                           fsr2h	equ	0xFDA
  6360                           fsr2l	equ	0xFD9
  6361                           status	equ	0xFD8
  6362                           
  6363 ;; *************** function __TMR1_Ready *****************
  6364 ;; Defined at:
  6365 ;;		line 158 in file "logger.c"
  6366 ;; Parameters:    Size  Location     Type
  6367 ;;		None
  6368 ;; Auto vars:     Size  Location     Type
  6369 ;;		None
  6370 ;; Return value:  Size  Location     Type
  6371 ;;                  1    wreg      void 
  6372 ;; Registers used:
  6373 ;;		wreg, status,2, status,0, cstack
  6374 ;; Tracked objects:
  6375 ;;		On entry : 0/0
  6376 ;;		On exit  : 0/0
  6377 ;;		Unchanged: 0/0
  6378 ;; Data sizes:     COMRAM   BANK0   BANK1
  6379 ;;      Params:         0       0       0
  6380 ;;      Locals:         0       0       0
  6381 ;;      Temps:          0       0       0
  6382 ;;      Totals:         0       0       0
  6383 ;;Total ram usage:        0 bytes
  6384 ;; Hardware stack levels used:    1
  6385 ;; Hardware stack levels required when called:    1
  6386 ;; This function calls:
  6387 ;;		i2_ADC1_StartConversion
  6388 ;; This function is called by:
  6389 ;;		_logger_initialize
  6390 ;;		_TMR1_ISR
  6391 ;; This function uses a non-reentrant model
  6392 ;;
  6393                           
  6394                           	psect	text54
  6395  0010CA                     __ptext54:
  6396                           	opt stack 0
  6397  0010CA                     __TMR1_Ready:
  6398                           	opt stack 17
  6399                           
  6400                           ;logger.c: 160:     if (TMR1_state == TMR1_RUNNING) {
  6401                           
  6402                           ;incstack = 0
  6403  0010CA  043B               	decf	_TMR1_state,w,c	;volatile
  6404  0010CC  B4D8               	btfsc	status,2,c
  6405                           
  6406                           ;logger.c: 161:          ADC1_StartConversion();
  6407  0010CE  EC7B  F008         	call	i2_ADC1_StartConversion	;wreg free
  6408  0010D2  0012               	return		;funcret
  6409  0010D4                     __end_of__TMR1_Ready:
  6410                           	opt stack 0
  6411                           tosu	equ	0xFFF
  6412                           tosh	equ	0xFFE
  6413                           tosl	equ	0xFFD
  6414                           pclatu	equ	0xFFB
  6415                           pclath	equ	0xFFA
  6416                           tblptru	equ	0xFF8
  6417                           tblptrh	equ	0xFF7
  6418                           tblptrl	equ	0xFF6
  6419                           tablat	equ	0xFF5
  6420                           prodh	equ	0xFF4
  6421                           prodl	equ	0xFF3
  6422                           intcon	equ	0xFF2
  6423                           intcon2	equ	0xFF1
  6424                           postinc0	equ	0xFEE
  6425                           wreg	equ	0xFE8
  6426                           indf2	equ	0xFDF
  6427                           postinc2	equ	0xFDE
  6428                           fsr2h	equ	0xFDA
  6429                           fsr2l	equ	0xFD9
  6430                           status	equ	0xFD8
  6431                           
  6432 ;; *************** function i2_ADC1_StartConversion *****************
  6433 ;; Defined at:
  6434 ;;		line 91 in file "mcc_generated_files/adc1.c"
  6435 ;; Parameters:    Size  Location     Type
  6436 ;;		None
  6437 ;; Auto vars:     Size  Location     Type
  6438 ;;		None
  6439 ;; Return value:  Size  Location     Type
  6440 ;;                  1    wreg      void 
  6441 ;; Registers used:
  6442 ;;		None
  6443 ;; Tracked objects:
  6444 ;;		On entry : 0/0
  6445 ;;		On exit  : 0/0
  6446 ;;		Unchanged: 0/0
  6447 ;; Data sizes:     COMRAM   BANK0   BANK1
  6448 ;;      Params:         0       0       0
  6449 ;;      Locals:         0       0       0
  6450 ;;      Temps:          0       0       0
  6451 ;;      Totals:         0       0       0
  6452 ;;Total ram usage:        0 bytes
  6453 ;; Hardware stack levels used:    1
  6454 ;; This function calls:
  6455 ;;		Nothing
  6456 ;; This function is called by:
  6457 ;;		__TMR1_Ready
  6458 ;; This function uses a non-reentrant model
  6459 ;;
  6460                           
  6461                           	psect	text55
  6462  0010F6                     __ptext55:
  6463                           	opt stack 0
  6464  0010F6                     i2_ADC1_StartConversion:
  6465                           	opt stack 17
  6466                           
  6467                           ;mcc_generated_files/adc1.c: 94:     ADCON0bits.GO_nDONE = 1;
  6468                           
  6469                           ;incstack = 0
  6470  0010F6  82C2               	bsf	4034,1,c	;volatile
  6471  0010F8  0012               	return		;funcret
  6472  0010FA                     __end_ofi2_ADC1_StartConversion:
  6473                           	opt stack 0
  6474                           tosu	equ	0xFFF
  6475                           tosh	equ	0xFFE
  6476                           tosl	equ	0xFFD
  6477                           pclatu	equ	0xFFB
  6478                           pclath	equ	0xFFA
  6479                           tblptru	equ	0xFF8
  6480                           tblptrh	equ	0xFF7
  6481                           tblptrl	equ	0xFF6
  6482                           tablat	equ	0xFF5
  6483                           prodh	equ	0xFF4
  6484                           prodl	equ	0xFF3
  6485                           intcon	equ	0xFF2
  6486                           intcon2	equ	0xFF1
  6487                           postinc0	equ	0xFEE
  6488                           wreg	equ	0xFE8
  6489                           indf2	equ	0xFDF
  6490                           postinc2	equ	0xFDE
  6491                           fsr2h	equ	0xFDA
  6492                           fsr2l	equ	0xFD9
  6493                           status	equ	0xFD8
  6494                           
  6495 ;; *************** function _TMR1_WriteTimer *****************
  6496 ;; Defined at:
  6497 ;;		line 118 in file "mcc_generated_files/tmr1.c"
  6498 ;; Parameters:    Size  Location     Type
  6499 ;;  timerVal        2    0[COMRAM] unsigned short 
  6500 ;; Auto vars:     Size  Location     Type
  6501 ;;		None
  6502 ;; Return value:  Size  Location     Type
  6503 ;;                  1    wreg      void 
  6504 ;; Registers used:
  6505 ;;		None
  6506 ;; Tracked objects:
  6507 ;;		On entry : 0/0
  6508 ;;		On exit  : 0/0
  6509 ;;		Unchanged: 0/0
  6510 ;; Data sizes:     COMRAM   BANK0   BANK1
  6511 ;;      Params:         2       0       0
  6512 ;;      Locals:         0       0       0
  6513 ;;      Temps:          0       0       0
  6514 ;;      Totals:         2       0       0
  6515 ;;Total ram usage:        2 bytes
  6516 ;; Hardware stack levels used:    1
  6517 ;; This function calls:
  6518 ;;		Nothing
  6519 ;; This function is called by:
  6520 ;;		_TMR1_ISR
  6521 ;; This function uses a non-reentrant model
  6522 ;;
  6523                           
  6524                           	psect	text56
  6525  000FCA                     __ptext56:
  6526                           	opt stack 0
  6527  000FCA                     _TMR1_WriteTimer:
  6528                           	opt stack 18
  6529                           
  6530                           ;mcc_generated_files/tmr1.c: 118: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr1.c: 119: {;mcc_generated_files/tmr1.c: 120:     if (T1CONbits.nT1SYNC == 1)
  6531                           
  6532                           ;incstack = 0
  6533  000FCA  A4CD               	btfss	4045,2,c	;volatile
  6534  000FCC  D007               	goto	i2l302
  6535                           
  6536                           ;mcc_generated_files/tmr1.c: 121:     {;mcc_generated_files/tmr1.c: 123:         T1CONbi
      +                          ts.TMR1ON = 0;
  6537  000FCE  90CD               	bcf	4045,0,c	;volatile
  6538                           
  6539                           ;mcc_generated_files/tmr1.c: 126:         TMR1H = (timerVal >> 8);
  6540  000FD0  C002  FFCF         	movff	TMR1_WriteTimer@timerVal+1,4047	;volatile
  6541                           
  6542                           ;mcc_generated_files/tmr1.c: 127:         TMR1L = (uint8_t) timerVal;
  6543  000FD4  C001  FFCE         	movff	TMR1_WriteTimer@timerVal,4046	;volatile
  6544                           
  6545                           ;mcc_generated_files/tmr1.c: 130:         T1CONbits.TMR1ON =1;
  6546  000FD8  80CD               	bsf	4045,0,c	;volatile
  6547                           
  6548                           ;mcc_generated_files/tmr1.c: 131:     }
  6549  000FDA  0012               	return	
  6550  000FDC                     i2l302:
  6551                           
  6552                           ;mcc_generated_files/tmr1.c: 133:     {;mcc_generated_files/tmr1.c: 135:         TMR1H =
      +                           (timerVal >> 8);
  6553  000FDC  C002  FFCF         	movff	TMR1_WriteTimer@timerVal+1,4047	;volatile
  6554                           
  6555                           ;mcc_generated_files/tmr1.c: 136:         TMR1L = (uint8_t) timerVal;
  6556  000FE0  C001  FFCE         	movff	TMR1_WriteTimer@timerVal,4046	;volatile
  6557  000FE4  0012               	return		;funcret
  6558  000FE6                     __end_of_TMR1_WriteTimer:
  6559                           	opt stack 0
  6560                           tosu	equ	0xFFF
  6561                           tosh	equ	0xFFE
  6562                           tosl	equ	0xFFD
  6563                           pclatu	equ	0xFFB
  6564                           pclath	equ	0xFFA
  6565                           tblptru	equ	0xFF8
  6566                           tblptrh	equ	0xFF7
  6567                           tblptrl	equ	0xFF6
  6568                           tablat	equ	0xFF5
  6569                           prodh	equ	0xFF4
  6570                           prodl	equ	0xFF3
  6571                           intcon	equ	0xFF2
  6572                           intcon2	equ	0xFF1
  6573                           postinc0	equ	0xFEE
  6574                           wreg	equ	0xFE8
  6575                           indf2	equ	0xFDF
  6576                           postinc2	equ	0xFDE
  6577                           fsr2h	equ	0xFDA
  6578                           fsr2l	equ	0xFD9
  6579                           status	equ	0xFD8
  6580                           
  6581 ;; *************** function _PIN_MANAGER_IOC *****************
  6582 ;; Defined at:
  6583 ;;		line 110 in file "mcc_generated_files/pin_manager.c"
  6584 ;; Parameters:    Size  Location     Type
  6585 ;;		None
  6586 ;; Auto vars:     Size  Location     Type
  6587 ;;		None
  6588 ;; Return value:  Size  Location     Type
  6589 ;;                  1    wreg      void 
  6590 ;; Registers used:
  6591 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  6592 ;; Tracked objects:
  6593 ;;		On entry : 0/0
  6594 ;;		On exit  : 0/0
  6595 ;;		Unchanged: 0/0
  6596 ;; Data sizes:     COMRAM   BANK0   BANK1
  6597 ;;      Params:         0       0       0
  6598 ;;      Locals:         0       0       0
  6599 ;;      Temps:          0       0       0
  6600 ;;      Totals:         0       0       0
  6601 ;;Total ram usage:        0 bytes
  6602 ;; Hardware stack levels used:    1
  6603 ;; Hardware stack levels required when called:    2
  6604 ;; This function calls:
  6605 ;;		_IOCA4_ISR
  6606 ;; This function is called by:
  6607 ;;		_INTERRUPT_InterruptManager
  6608 ;; This function uses a non-reentrant model
  6609 ;;
  6610                           
  6611                           	psect	text57
  6612  0010D4                     __ptext57:
  6613                           	opt stack 0
  6614  0010D4                     _PIN_MANAGER_IOC:
  6615                           	opt stack 17
  6616                           
  6617                           ;mcc_generated_files/pin_manager.c: 113:     if(IOCAbits.IOCA4 == 1)
  6618                           
  6619                           ;incstack = 0
  6620  0010D4  B879               	btfsc	3961,4,c	;volatile
  6621                           
  6622                           ;mcc_generated_files/pin_manager.c: 114:     {;mcc_generated_files/pin_manager.c: 115:  
      +                                 IOCA4_ISR();
  6623  0010D6  ECF3  F007         	call	_IOCA4_ISR	;wreg free
  6624                           
  6625                           ;mcc_generated_files/pin_manager.c: 118:     INTCONbits.RABIF = 0;
  6626  0010DA  90F2               	bcf	intcon,0,c	;volatile
  6627  0010DC  0012               	return		;funcret
  6628  0010DE                     __end_of_PIN_MANAGER_IOC:
  6629                           	opt stack 0
  6630                           tosu	equ	0xFFF
  6631                           tosh	equ	0xFFE
  6632                           tosl	equ	0xFFD
  6633                           pclatu	equ	0xFFB
  6634                           pclath	equ	0xFFA
  6635                           tblptru	equ	0xFF8
  6636                           tblptrh	equ	0xFF7
  6637                           tblptrl	equ	0xFF6
  6638                           tablat	equ	0xFF5
  6639                           prodh	equ	0xFF4
  6640                           prodl	equ	0xFF3
  6641                           intcon	equ	0xFF2
  6642                           intcon2	equ	0xFF1
  6643                           postinc0	equ	0xFEE
  6644                           wreg	equ	0xFE8
  6645                           indf2	equ	0xFDF
  6646                           postinc2	equ	0xFDE
  6647                           fsr2h	equ	0xFDA
  6648                           fsr2l	equ	0xFD9
  6649                           status	equ	0xFD8
  6650                           
  6651 ;; *************** function _IOCA4_ISR *****************
  6652 ;; Defined at:
  6653 ;;		line 124 in file "mcc_generated_files/pin_manager.c"
  6654 ;; Parameters:    Size  Location     Type
  6655 ;;		None
  6656 ;; Auto vars:     Size  Location     Type
  6657 ;;		None
  6658 ;; Return value:  Size  Location     Type
  6659 ;;                  1    wreg      void 
  6660 ;; Registers used:
  6661 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  6662 ;; Tracked objects:
  6663 ;;		On entry : 0/0
  6664 ;;		On exit  : 0/0
  6665 ;;		Unchanged: 0/0
  6666 ;; Data sizes:     COMRAM   BANK0   BANK1
  6667 ;;      Params:         0       0       0
  6668 ;;      Locals:         0       0       0
  6669 ;;      Temps:          0       0       0
  6670 ;;      Totals:         0       0       0
  6671 ;;Total ram usage:        0 bytes
  6672 ;; Hardware stack levels used:    1
  6673 ;; Hardware stack levels required when called:    1
  6674 ;; This function calls:
  6675 ;;		Absolute function
  6676 ;;		_IOCA4_DefaultInterruptHandler
  6677 ;;		__IOC_Ready
  6678 ;; This function is called by:
  6679 ;;		_PIN_MANAGER_IOC
  6680 ;; This function uses a non-reentrant model
  6681 ;;
  6682                           
  6683                           	psect	text58
  6684  000FE6                     __ptext58:
  6685                           	opt stack 0
  6686  000FE6                     _IOCA4_ISR:
  6687                           	opt stack 17
  6688                           
  6689                           ;mcc_generated_files/pin_manager.c: 129:     if(IOCA4_InterruptHandler)
  6690                           
  6691                           ;incstack = 0
  6692  000FE6  5052               	movf	_IOCA4_InterruptHandler,w,c
  6693  000FE8  1053               	iorwf	_IOCA4_InterruptHandler+1,w,c
  6694  000FEA  B4D8               	btfsc	status,2,c
  6695  000FEC  0012               	return	
  6696                           
  6697                           ;mcc_generated_files/pin_manager.c: 130:     {;mcc_generated_files/pin_manager.c: 131:  
      +                                 IOCA4_InterruptHandler();
  6698  000FEE  0005               	push	
  6699  000FF0  6EFA               	movwf	pclath,c
  6700  000FF2  5052               	movf	_IOCA4_InterruptHandler,w,c
  6701  000FF4  6EFD               	movwf	tosl,c
  6702  000FF6  5053               	movf	_IOCA4_InterruptHandler+1,w,c
  6703  000FF8  6EFE               	movwf	tosh,c
  6704  000FFA  50F8               	movf	tblptru,w,c
  6705  000FFC  6EFF               	movwf	tosu,c
  6706  000FFE  50FA               	movf	pclath,w,c
  6707  001000  0012               	return		;indir
  6708  001002                     __end_of_IOCA4_ISR:
  6709                           	opt stack 0
  6710                           tosu	equ	0xFFF
  6711                           tosh	equ	0xFFE
  6712                           tosl	equ	0xFFD
  6713                           pclatu	equ	0xFFB
  6714                           pclath	equ	0xFFA
  6715                           tblptru	equ	0xFF8
  6716                           tblptrh	equ	0xFF7
  6717                           tblptrl	equ	0xFF6
  6718                           tablat	equ	0xFF5
  6719                           prodh	equ	0xFF4
  6720                           prodl	equ	0xFF3
  6721                           intcon	equ	0xFF2
  6722                           intcon2	equ	0xFF1
  6723                           postinc0	equ	0xFEE
  6724                           wreg	equ	0xFE8
  6725                           indf2	equ	0xFDF
  6726                           postinc2	equ	0xFDE
  6727                           fsr2h	equ	0xFDA
  6728                           fsr2l	equ	0xFD9
  6729                           status	equ	0xFD8
  6730                           
  6731 ;; *************** function _IOCA4_DefaultInterruptHandler *****************
  6732 ;; Defined at:
  6733 ;;		line 145 in file "mcc_generated_files/pin_manager.c"
  6734 ;; Parameters:    Size  Location     Type
  6735 ;;		None
  6736 ;; Auto vars:     Size  Location     Type
  6737 ;;		None
  6738 ;; Return value:  Size  Location     Type
  6739 ;;                  1    wreg      void 
  6740 ;; Registers used:
  6741 ;;		None
  6742 ;; Tracked objects:
  6743 ;;		On entry : 0/0
  6744 ;;		On exit  : 0/0
  6745 ;;		Unchanged: 0/0
  6746 ;; Data sizes:     COMRAM   BANK0   BANK1
  6747 ;;      Params:         0       0       0
  6748 ;;      Locals:         0       0       0
  6749 ;;      Temps:          0       0       0
  6750 ;;      Totals:         0       0       0
  6751 ;;Total ram usage:        0 bytes
  6752 ;; Hardware stack levels used:    1
  6753 ;; This function calls:
  6754 ;;		Nothing
  6755 ;; This function is called by:
  6756 ;;		_PIN_MANAGER_Initialize
  6757 ;;		_IOCA4_ISR
  6758 ;; This function uses a non-reentrant model
  6759 ;;
  6760                           
  6761                           	psect	text59
  6762  001102                     __ptext59:
  6763                           	opt stack 0
  6764  001102                     _IOCA4_DefaultInterruptHandler:
  6765                           	opt stack 17
  6766                           
  6767                           ;incstack = 0
  6768  001102  0012               	return		;funcret
  6769  001104                     __end_of_IOCA4_DefaultInterruptHandler:
  6770                           	opt stack 0
  6771                           tosu	equ	0xFFF
  6772                           tosh	equ	0xFFE
  6773                           tosl	equ	0xFFD
  6774                           pclatu	equ	0xFFB
  6775                           pclath	equ	0xFFA
  6776                           tblptru	equ	0xFF8
  6777                           tblptrh	equ	0xFF7
  6778                           tblptrl	equ	0xFF6
  6779                           tablat	equ	0xFF5
  6780                           prodh	equ	0xFF4
  6781                           prodl	equ	0xFF3
  6782                           intcon	equ	0xFF2
  6783                           intcon2	equ	0xFF1
  6784                           postinc0	equ	0xFEE
  6785                           wreg	equ	0xFE8
  6786                           indf2	equ	0xFDF
  6787                           postinc2	equ	0xFDE
  6788                           fsr2h	equ	0xFDA
  6789                           fsr2l	equ	0xFD9
  6790                           status	equ	0xFD8
  6791                           
  6792 ;; *************** function __IOC_Ready *****************
  6793 ;; Defined at:
  6794 ;;		line 165 in file "logger.c"
  6795 ;; Parameters:    Size  Location     Type
  6796 ;;		None
  6797 ;; Auto vars:     Size  Location     Type
  6798 ;;		None
  6799 ;; Return value:  Size  Location     Type
  6800 ;;                  1    wreg      void 
  6801 ;; Registers used:
  6802 ;;		wreg, status,2
  6803 ;; Tracked objects:
  6804 ;;		On entry : 0/0
  6805 ;;		On exit  : 0/0
  6806 ;;		Unchanged: 0/0
  6807 ;; Data sizes:     COMRAM   BANK0   BANK1
  6808 ;;      Params:         0       0       0
  6809 ;;      Locals:         0       0       0
  6810 ;;      Temps:          0       0       0
  6811 ;;      Totals:         0       0       0
  6812 ;;Total ram usage:        0 bytes
  6813 ;; Hardware stack levels used:    1
  6814 ;; This function calls:
  6815 ;;		Nothing
  6816 ;; This function is called by:
  6817 ;;		_logger_initialize
  6818 ;;		_IOCA4_ISR
  6819 ;; This function uses a non-reentrant model
  6820 ;;
  6821                           
  6822                           	psect	text60
  6823  00108A                     __ptext60:
  6824                           	opt stack 0
  6825  00108A                     __IOC_Ready:
  6826                           	opt stack 17
  6827                           
  6828                           ;logger.c: 168:     IOC_value = PORTAbits.RA4;
  6829                           
  6830                           ;incstack = 0
  6831  00108A  0E00               	movlw	0
  6832  00108C  B880               	btfsc	3968,4,c	;volatile
  6833  00108E  0E01               	movlw	1
  6834  001090  6E54               	movwf	_IOC_value,c	;volatile
  6835                           
  6836                           ;logger.c: 169:     IOC_state = IOC_READY;
  6837  001092  0E01               	movlw	1
  6838  001094  6E40               	movwf	_IOC_state,c	;volatile
  6839  001096  0C01               	retlw	1	;funcret
  6840  001098                     __end_of__IOC_Ready:
  6841                           	opt stack 0
  6842                           tosu	equ	0xFFF
  6843                           tosh	equ	0xFFE
  6844                           tosl	equ	0xFFD
  6845                           pclatu	equ	0xFFB
  6846                           pclath	equ	0xFFA
  6847                           tblptru	equ	0xFF8
  6848                           tblptrh	equ	0xFF7
  6849                           tblptrl	equ	0xFF6
  6850                           tablat	equ	0xFF5
  6851                           prodh	equ	0xFF4
  6852                           prodl	equ	0xFF3
  6853                           intcon	equ	0xFF2
  6854                           intcon2	equ	0xFF1
  6855                           postinc0	equ	0xFEE
  6856                           wreg	equ	0xFE8
  6857                           indf2	equ	0xFDF
  6858                           postinc2	equ	0xFDE
  6859                           fsr2h	equ	0xFDA
  6860                           fsr2l	equ	0xFD9
  6861                           status	equ	0xFD8
  6862                           
  6863 ;; *************** function _EUSART_Transmit_ISR *****************
  6864 ;; Defined at:
  6865 ;;		line 172 in file "mcc_generated_files/eusart.c"
  6866 ;; Parameters:    Size  Location     Type
  6867 ;;		None
  6868 ;; Auto vars:     Size  Location     Type
  6869 ;;		None
  6870 ;; Return value:  Size  Location     Type
  6871 ;;                  1    wreg      void 
  6872 ;; Registers used:
  6873 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6874 ;; Tracked objects:
  6875 ;;		On entry : 0/0
  6876 ;;		On exit  : 0/0
  6877 ;;		Unchanged: 0/0
  6878 ;; Data sizes:     COMRAM   BANK0   BANK1
  6879 ;;      Params:         0       0       0
  6880 ;;      Locals:         0       0       0
  6881 ;;      Temps:          0       0       0
  6882 ;;      Totals:         0       0       0
  6883 ;;Total ram usage:        0 bytes
  6884 ;; Hardware stack levels used:    1
  6885 ;; This function calls:
  6886 ;;		Nothing
  6887 ;; This function is called by:
  6888 ;;		_EUSART_Initialize
  6889 ;;		_INTERRUPT_InterruptManager
  6890 ;; This function uses a non-reentrant model
  6891 ;;
  6892                           
  6893                           	psect	text61
  6894  000F84                     __ptext61:
  6895                           	opt stack 0
  6896  000F84                     _EUSART_Transmit_ISR:
  6897                           	opt stack 19
  6898                           
  6899                           ;mcc_generated_files/eusart.c: 176:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
  6900                           
  6901                           ;incstack = 0
  6902  000F84  0E40               	movlw	64
  6903  000F86  6055               	cpfslt	_eusartTxBufferRemaining,c
  6904  000F88  D00D               	goto	i2l202
  6905                           
  6906                           ;mcc_generated_files/eusart.c: 177:     {;mcc_generated_files/eusart.c: 178:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
  6907  000F8A  5044               	movf	_eusartTxTail,w,c
  6908  000F8C  0F60               	addlw	low _eusartTxBuffer
  6909  000F8E  6ED9               	movwf	fsr2l,c
  6910  000F90  6ADA               	clrf	fsr2h,c
  6911  000F92  50DF               	movf	indf2,w,c
  6912  000F94  6EAD               	movwf	4013,c	;volatile
  6913  000F96  2A44               	incf	_eusartTxTail,f,c	;volatile
  6914                           
  6915                           ;mcc_generated_files/eusart.c: 179:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
  6916  000F98  0E3F               	movlw	63
  6917  000F9A  6444               	cpfsgt	_eusartTxTail,c
  6918  000F9C  D001               	goto	i2l2939
  6919                           
  6920                           ;mcc_generated_files/eusart.c: 180:         {;mcc_generated_files/eusart.c: 181:        
      +                               eusartTxTail = 0;
  6921  000F9E  6A44               	clrf	_eusartTxTail,c	;volatile
  6922  000FA0                     i2l2939:
  6923                           
  6924                           ;mcc_generated_files/eusart.c: 183:         eusartTxBufferRemaining++;
  6925  000FA0  2A55               	incf	_eusartTxBufferRemaining,f,c	;volatile
  6926                           
  6927                           ;mcc_generated_files/eusart.c: 184:     }
  6928  000FA2  0012               	return	
  6929  000FA4                     i2l202:
  6930                           
  6931                           ;mcc_generated_files/eusart.c: 186:     {;mcc_generated_files/eusart.c: 187:         PIE
      +                          1bits.TXIE = 0;
  6932  000FA4  989D               	bcf	3997,4,c	;volatile
  6933  000FA6  0012               	return		;funcret
  6934  000FA8                     __end_of_EUSART_Transmit_ISR:
  6935                           	opt stack 0
  6936                           tosu	equ	0xFFF
  6937                           tosh	equ	0xFFE
  6938                           tosl	equ	0xFFD
  6939                           pclatu	equ	0xFFB
  6940                           pclath	equ	0xFFA
  6941                           tblptru	equ	0xFF8
  6942                           tblptrh	equ	0xFF7
  6943                           tblptrl	equ	0xFF6
  6944                           tablat	equ	0xFF5
  6945                           prodh	equ	0xFF4
  6946                           prodl	equ	0xFF3
  6947                           intcon	equ	0xFF2
  6948                           intcon2	equ	0xFF1
  6949                           postinc0	equ	0xFEE
  6950                           wreg	equ	0xFE8
  6951                           indf2	equ	0xFDF
  6952                           postinc2	equ	0xFDE
  6953                           fsr2h	equ	0xFDA
  6954                           fsr2l	equ	0xFD9
  6955                           status	equ	0xFD8
  6956                           
  6957 ;; *************** function _EUSART_Receive_ISR *****************
  6958 ;; Defined at:
  6959 ;;		line 191 in file "mcc_generated_files/eusart.c"
  6960 ;; Parameters:    Size  Location     Type
  6961 ;;		None
  6962 ;; Auto vars:     Size  Location     Type
  6963 ;;		None
  6964 ;; Return value:  Size  Location     Type
  6965 ;;                  1    wreg      void 
  6966 ;; Registers used:
  6967 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6968 ;; Tracked objects:
  6969 ;;		On entry : 0/0
  6970 ;;		On exit  : 0/0
  6971 ;;		Unchanged: 0/0
  6972 ;; Data sizes:     COMRAM   BANK0   BANK1
  6973 ;;      Params:         0       0       0
  6974 ;;      Locals:         0       0       0
  6975 ;;      Temps:          0       0       0
  6976 ;;      Totals:         0       0       0
  6977 ;;Total ram usage:        0 bytes
  6978 ;; Hardware stack levels used:    1
  6979 ;; This function calls:
  6980 ;;		Nothing
  6981 ;; This function is called by:
  6982 ;;		_EUSART_Initialize
  6983 ;;		_INTERRUPT_InterruptManager
  6984 ;; This function uses a non-reentrant model
  6985 ;;
  6986                           
  6987                           	psect	text62
  6988  000F3A                     __ptext62:
  6989                           	opt stack 0
  6990  000F3A                     _EUSART_Receive_ISR:
  6991                           	opt stack 19
  6992                           
  6993                           ;mcc_generated_files/eusart.c: 194:     if(1 == RCSTAbits.OERR)
  6994                           
  6995                           ;incstack = 0
  6996  000F3A  A2AB               	btfss	4011,1,c	;volatile
  6997  000F3C  D002               	goto	i2l2945
  6998                           
  6999                           ;mcc_generated_files/eusart.c: 195:     {;mcc_generated_files/eusart.c: 198:         RCS
      +                          TAbits.CREN = 0;
  7000  000F3E  98AB               	bcf	4011,4,c	;volatile
  7001                           
  7002                           ;mcc_generated_files/eusart.c: 199:         RCSTAbits.CREN = 1;
  7003  000F40  88AB               	bsf	4011,4,c	;volatile
  7004  000F42                     i2l2945:
  7005                           
  7006                           ;mcc_generated_files/eusart.c: 203:     eusartRxBuffer[eusartRxHead++] = RCREG;
  7007  000F42  0E00               	movlw	low _eusartRxBuffer
  7008  000F44  2443               	addwf	_eusartRxHead,w,c	;volatile
  7009  000F46  6ED9               	movwf	fsr2l,c
  7010  000F48  6ADA               	clrf	fsr2h,c
  7011  000F4A  0E01               	movlw	high _eusartRxBuffer
  7012  000F4C  22DA               	addwfc	fsr2h,f,c
  7013  000F4E  CFAE FFDF          	movff	4014,indf2	;volatile
  7014  000F52  2A43               	incf	_eusartRxHead,f,c	;volatile
  7015                           
  7016                           ;mcc_generated_files/eusart.c: 204:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
  7017  000F54  0E3F               	movlw	63
  7018  000F56  6443               	cpfsgt	_eusartRxHead,c
  7019  000F58  D001               	goto	i2l2953
  7020                           
  7021                           ;mcc_generated_files/eusart.c: 205:     {;mcc_generated_files/eusart.c: 206:         eus
      +                          artRxHead = 0;
  7022  000F5A  6A43               	clrf	_eusartRxHead,c	;volatile
  7023  000F5C                     i2l2953:
  7024                           
  7025                           ;mcc_generated_files/eusart.c: 208:     eusartRxCount++;
  7026  000F5C  2A41               	incf	_eusartRxCount,f,c	;volatile
  7027  000F5E  0012               	return		;funcret
  7028  000F60                     __end_of_EUSART_Receive_ISR:
  7029                           	opt stack 0
  7030                           tosu	equ	0xFFF
  7031                           tosh	equ	0xFFE
  7032                           tosl	equ	0xFFD
  7033                           pclatu	equ	0xFFB
  7034                           pclath	equ	0xFFA
  7035                           tblptru	equ	0xFF8
  7036                           tblptrh	equ	0xFF7
  7037                           tblptrl	equ	0xFF6
  7038                           tablat	equ	0xFF5
  7039                           prodh	equ	0xFF4
  7040                           prodl	equ	0xFF3
  7041                           intcon	equ	0xFF2
  7042                           intcon2	equ	0xFF1
  7043                           postinc0	equ	0xFEE
  7044                           wreg	equ	0xFE8
  7045                           indf2	equ	0xFDF
  7046                           postinc2	equ	0xFDE
  7047                           fsr2h	equ	0xFDA
  7048                           fsr2l	equ	0xFD9
  7049                           status	equ	0xFD8
  7050                           
  7051 ;; *************** function _ADC1_ISR *****************
  7052 ;; Defined at:
  7053 ;;		line 135 in file "mcc_generated_files/adc1.c"
  7054 ;; Parameters:    Size  Location     Type
  7055 ;;		None
  7056 ;; Auto vars:     Size  Location     Type
  7057 ;;		None
  7058 ;; Return value:  Size  Location     Type
  7059 ;;                  1    wreg      void 
  7060 ;; Registers used:
  7061 ;;		None
  7062 ;; Tracked objects:
  7063 ;;		On entry : 0/0
  7064 ;;		On exit  : 0/0
  7065 ;;		Unchanged: 0/0
  7066 ;; Data sizes:     COMRAM   BANK0   BANK1
  7067 ;;      Params:         0       0       0
  7068 ;;      Locals:         0       0       0
  7069 ;;      Temps:          0       0       0
  7070 ;;      Totals:         0       0       0
  7071 ;;Total ram usage:        0 bytes
  7072 ;; Hardware stack levels used:    1
  7073 ;; This function calls:
  7074 ;;		Nothing
  7075 ;; This function is called by:
  7076 ;;		_INTERRUPT_InterruptManager
  7077 ;; This function uses a non-reentrant model
  7078 ;;
  7079                           
  7080                           	psect	text63
  7081  0010FA                     __ptext63:
  7082                           	opt stack 0
  7083  0010FA                     _ADC1_ISR:
  7084                           	opt stack 19
  7085                           
  7086                           ;mcc_generated_files/adc1.c: 138:     PIR1bits.ADIF = 0;
  7087                           
  7088                           ;incstack = 0
  7089  0010FA  9C9E               	bcf	3998,6,c	;volatile
  7090  0010FC  0012               	return		;funcret
  7091  0010FE                     __end_of_ADC1_ISR:
  7092                           	opt stack 0
  7093                           tosu	equ	0xFFF
  7094                           tosh	equ	0xFFE
  7095                           tosl	equ	0xFFD
  7096                           pclatu	equ	0xFFB
  7097                           pclath	equ	0xFFA
  7098                           tblptru	equ	0xFF8
  7099                           tblptrh	equ	0xFF7
  7100                           tblptrl	equ	0xFF6
  7101                           tablat	equ	0xFF5
  7102                           prodh	equ	0xFF4
  7103                           prodl	equ	0xFF3
  7104                           intcon	equ	0xFF2
  7105                           intcon2	equ	0xFF1
  7106                           postinc0	equ	0xFEE
  7107                           wreg	equ	0xFE8
  7108                           indf2	equ	0xFDF
  7109                           postinc2	equ	0xFDE
  7110                           fsr2h	equ	0xFDA
  7111                           fsr2l	equ	0xFD9
  7112                           status	equ	0xFD8
  7113                           
  7114 ;; *************** function _ADC1_GetConversionResult *****************
  7115 ;; Defined at:
  7116 ;;		line 104 in file "mcc_generated_files/adc1.c"
  7117 ;; Parameters:    Size  Location     Type
  7118 ;;		None
  7119 ;; Auto vars:     Size  Location     Type
  7120 ;;		None
  7121 ;; Return value:  Size  Location     Type
  7122 ;;                  2    0[COMRAM] unsigned short 
  7123 ;; Registers used:
  7124 ;;		wreg, status,2, status,0
  7125 ;; Tracked objects:
  7126 ;;		On entry : 0/0
  7127 ;;		On exit  : 0/0
  7128 ;;		Unchanged: 0/0
  7129 ;; Data sizes:     COMRAM   BANK0   BANK1
  7130 ;;      Params:         2       0       0
  7131 ;;      Locals:         0       0       0
  7132 ;;      Temps:          2       0       0
  7133 ;;      Totals:         4       0       0
  7134 ;;Total ram usage:        4 bytes
  7135 ;; Hardware stack levels used:    1
  7136 ;; This function calls:
  7137 ;;		Nothing
  7138 ;; This function is called by:
  7139 ;;		_INTERRUPT_InterruptManager
  7140 ;; This function uses a non-reentrant model
  7141 ;;
  7142                           
  7143                           	psect	text64
  7144  001046                     __ptext64:
  7145                           	opt stack 0
  7146  001046                     _ADC1_GetConversionResult:
  7147                           	opt stack 19
  7148                           
  7149                           ;mcc_generated_files/adc1.c: 107:      return ((adc_result_t)((ADRESH << 8) + ADRESL));
  7150                           
  7151                           ;incstack = 0
  7152  001046  50C4               	movf	4036,w,c	;volatile
  7153  001048  6E04               	movwf	(??_ADC1_GetConversionResult+1)& (0+255),c
  7154  00104A  6A03               	clrf	??_ADC1_GetConversionResult& (0+255),c
  7155  00104C  50C3               	movf	4035,w,c	;volatile
  7156  00104E  2403               	addwf	??_ADC1_GetConversionResult,w,c
  7157  001050  6E01               	movwf	?_ADC1_GetConversionResult,c
  7158  001052  0E00               	movlw	0
  7159  001054  2004               	addwfc	??_ADC1_GetConversionResult+1,w,c
  7160  001056  6E02               	movwf	?_ADC1_GetConversionResult+1,c
  7161  001058  0012               	return		;funcret
  7162  00105A                     __end_of_ADC1_GetConversionResult:
  7163                           	opt stack 0
  7164                           tosu	equ	0xFFF
  7165                           tosh	equ	0xFFE
  7166                           tosl	equ	0xFFD
  7167                           pclatu	equ	0xFFB
  7168                           pclath	equ	0xFFA
  7169                           tblptru	equ	0xFF8
  7170                           tblptrh	equ	0xFF7
  7171                           tblptrl	equ	0xFF6
  7172                           tablat	equ	0xFF5
  7173                           prodh	equ	0xFF4
  7174                           prodl	equ	0xFF3
  7175                           intcon	equ	0xFF2
  7176                           intcon2	equ	0xFF1
  7177                           postinc0	equ	0xFEE
  7178                           wreg	equ	0xFE8
  7179                           indf2	equ	0xFDF
  7180                           postinc2	equ	0xFDE
  7181                           fsr2h	equ	0xFDA
  7182                           fsr2l	equ	0xFD9
  7183                           status	equ	0xFD8
  7184                           tosu	equ	0xFFF
  7185                           tosh	equ	0xFFE
  7186                           tosl	equ	0xFFD
  7187                           pclatu	equ	0xFFB
  7188                           pclath	equ	0xFFA
  7189                           tblptru	equ	0xFF8
  7190                           tblptrh	equ	0xFF7
  7191                           tblptrl	equ	0xFF6
  7192                           tablat	equ	0xFF5
  7193                           prodh	equ	0xFF4
  7194                           prodl	equ	0xFF3
  7195                           intcon	equ	0xFF2
  7196                           intcon2	equ	0xFF1
  7197                           postinc0	equ	0xFEE
  7198                           wreg	equ	0xFE8
  7199                           indf2	equ	0xFDF
  7200                           postinc2	equ	0xFDE
  7201                           fsr2h	equ	0xFDA
  7202                           fsr2l	equ	0xFD9
  7203                           status	equ	0xFD8
  7204                           
  7205                           	psect	text65
  7206  000000                     __ptext65:
  7207                           	opt stack 0
  7208                           tosu	equ	0xFFF
  7209                           tosh	equ	0xFFE
  7210                           tosl	equ	0xFFD
  7211                           pclatu	equ	0xFFB
  7212                           pclath	equ	0xFFA
  7213                           tblptru	equ	0xFF8
  7214                           tblptrh	equ	0xFF7
  7215                           tblptrl	equ	0xFF6
  7216                           tablat	equ	0xFF5
  7217                           prodh	equ	0xFF4
  7218                           prodl	equ	0xFF3
  7219                           intcon	equ	0xFF2
  7220                           intcon2	equ	0xFF1
  7221                           postinc0	equ	0xFEE
  7222                           wreg	equ	0xFE8
  7223                           indf2	equ	0xFDF
  7224                           postinc2	equ	0xFDE
  7225                           fsr2h	equ	0xFDA
  7226                           fsr2l	equ	0xFD9
  7227                           status	equ	0xFD8
  7228                           
  7229                           	psect	rparam
  7230  0000                     tosu	equ	0xFFF
  7231                           tosh	equ	0xFFE
  7232                           tosl	equ	0xFFD
  7233                           pclatu	equ	0xFFB
  7234                           pclath	equ	0xFFA
  7235                           tblptru	equ	0xFF8
  7236                           tblptrh	equ	0xFF7
  7237                           tblptrl	equ	0xFF6
  7238                           tablat	equ	0xFF5
  7239                           prodh	equ	0xFF4
  7240                           prodl	equ	0xFF3
  7241                           intcon	equ	0xFF2
  7242                           intcon2	equ	0xFF1
  7243                           postinc0	equ	0xFEE
  7244                           wreg	equ	0xFE8
  7245                           indf2	equ	0xFDF
  7246                           postinc2	equ	0xFDE
  7247                           fsr2h	equ	0xFDA
  7248                           fsr2l	equ	0xFD9
  7249                           status	equ	0xFD8
  7250                           
  7251                           	psect	temp
  7252  000056                     btemp:
  7253                           	opt stack 0
  7254  000056                     	ds	1
  7255  0000                     int$flags	set	btemp
  7256  0000                     wtemp8	set	btemp+1
  7257  0000                     ttemp5	set	btemp+1
  7258  0000                     ttemp6	set	btemp+4
  7259  0000                     ttemp7	set	btemp+8
  7260                           tosu	equ	0xFFF
  7261                           tosh	equ	0xFFE
  7262                           tosl	equ	0xFFD
  7263                           pclatu	equ	0xFFB
  7264                           pclath	equ	0xFFA
  7265                           tblptru	equ	0xFF8
  7266                           tblptrh	equ	0xFF7
  7267                           tblptrl	equ	0xFF6
  7268                           tablat	equ	0xFF5
  7269                           prodh	equ	0xFF4
  7270                           prodl	equ	0xFF3
  7271                           intcon	equ	0xFF2
  7272                           intcon2	equ	0xFF1
  7273                           postinc0	equ	0xFEE
  7274                           wreg	equ	0xFE8
  7275                           indf2	equ	0xFDF
  7276                           postinc2	equ	0xFDE
  7277                           fsr2h	equ	0xFDA
  7278                           fsr2l	equ	0xFD9
  7279                           status	equ	0xFD8


Data Sizes:
    Strings     222
    Constant    0
    Data        0
    BSS         224
    Persistent  14
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     55      85
    BANK0           160      0     144
    BANK1           256     28      92

Pointer List with Targets:

    strncmp@_r	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_15(CODE[2]), STR_7(CODE[7]), STR_6(CODE[8]), STR_5(CODE[5]), 
		 -> STR_4(CODE[6]), STR_3(CODE[10]), STR_2(CODE[3]), STR_1(CODE[8]), 

    strncmp@r	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_15(CODE[2]), STR_7(CODE[7]), STR_6(CODE[8]), STR_5(CODE[5]), 
		 -> STR_4(CODE[6]), STR_3(CODE[10]), STR_2(CODE[3]), STR_1(CODE[8]), 

    strncmp@_l	PTR const unsigned char  size(2) Largest target is 16
		 -> NULL(NULL[0]), esp_read_data(BANK0[16]), 

    strncmp@l	PTR const unsigned char  size(2) Largest target is 16
		 -> NULL(NULL[0]), esp_read_data(BANK0[16]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_15(CODE[2]), STR_7(CODE[7]), STR_6(CODE[8]), STR_5(CODE[5]), 
		 -> STR_4(CODE[6]), STR_3(CODE[10]), STR_2(CODE[3]), STR_1(CODE[8]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_15(CODE[2]), STR_7(CODE[7]), STR_6(CODE[8]), STR_5(CODE[5]), 
		 -> STR_4(CODE[6]), STR_3(CODE[10]), STR_2(CODE[3]), STR_1(CODE[8]), 

    strchr@s	PTR const unsigned char  size(2) Largest target is 16
		 -> NULL(NULL[0]), esp_read_data(BANK0[16]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 16
		 -> NULL(NULL[0]), esp_read_data(BANK0[16]), 

    strstr@h	PTR const unsigned char  size(2) Largest target is 16
		 -> NULL(NULL[0]), esp_read_data(BANK0[16]), 

    strstr@n	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_15(CODE[2]), STR_7(CODE[7]), STR_6(CODE[8]), STR_5(CODE[5]), 
		 -> STR_4(CODE[6]), STR_3(CODE[10]), STR_2(CODE[3]), STR_1(CODE[8]), 

    ESP_Set_application_handler@applicationHandler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> ESP_default_application_handler(), process_message(), 

    ESP_write@pt	PTR unsigned char  size(2) Largest target is 64
		 -> STR_24(CODE[3]), STR_23(CODE[3]), STR_22(CODE[7]), STR_21(CODE[7]), 
		 -> read_analog@mess(COMRAM[6]), WIFI_tx_buf(BANK0[64]), STR_20(CODE[4]), 

    ESP_external_message_handler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> ESP_default_application_handler(), process_message(), Absolute function(), 

    ESP_process_rx_data@index	PTR unsigned char  size(2) Largest target is 16
		 -> NULL(NULL[0]), esp_read_data(BANK0[16]), 

    ESP_config@pass	PTR unsigned char  size(2) Largest target is 14
		 -> read_wifi_settings@pass(BANK1[14]), 

    ESP_config@wifi	PTR unsigned char  size(2) Largest target is 10
		 -> read_wifi_settings@wifi(BANK1[10]), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 16
		 -> NULL(NULL[0]), esp_read_data(BANK0[16]), 

    ESP_process_message@aux	PTR unsigned char  size(2) Largest target is 16
		 -> NULL(NULL[0]), esp_read_data(BANK0[16]), 

    _gets@pt	PTR unsigned char  size(1) Largest target is 16
		 -> config_wifi_settings@line(COMRAM[16]), 

    _sprintf@mess	PTR unsigned char  size(1) Largest target is 6
		 -> read_analog@mess(COMRAM[6]), 

    write@pt	PTR unsigned char  size(2) Largest target is 64
		 -> read_wifi_settings@pass(BANK1[14]), read_wifi_settings@wifi(BANK1[10]), STR_24(CODE[3]), STR_23(CODE[3]), 
		 -> STR_22(CODE[7]), STR_21(CODE[7]), read_analog@mess(COMRAM[6]), WIFI_tx_buf(BANK0[64]), 
		 -> STR_20(CODE[4]), ESP_write@res(COMRAM[1]), ESP_write@aux(COMRAM[1]), 

    _puts@pt	PTR unsigned char  size(1) Largest target is 22
		 -> STR_29(CODE[13]), STR_28(CODE[22]), STR_27(CODE[13]), STR_26(CODE[18]), 
		 -> STR_25(CODE[13]), STR_19(CODE[3]), STR_18(CODE[3]), STR_17(CODE[2]), 
		 -> STR_16(CODE[12]), STR_14(CODE[20]), STR_13(CODE[14]), STR_12(CODE[4]), 
		 -> STR_11(CODE[4]), STR_10(CODE[11]), STR_9(CODE[14]), STR_8(CODE[5]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> _TMR1_Ready(), TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> _TMR1_Ready(), TMR1_DefaultInterruptHandler(), Absolute function(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), Absolute function(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), Absolute function(), 

    IOCA4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> _IOC_Ready(), IOCA4_DefaultInterruptHandler(), 

    IOCA4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> _IOC_Ready(), Absolute function(), IOCA4_DefaultInterruptHandler(), 


Critical Paths under _main in COMRAM

    _main->_read_analog
    _read_wifi_settings->_ESP_config
    _ESP_config->_ESP_wait_for
    _read_analog->_ESP_write
    __sprintf->___lwdiv
    _process_ioc->_ESP_write
    _logger_initialize->_ADC1_SelectChannel
    _logger_initialize->_ESP_Set_application_handler
    _logger_initialize->_IOCA4_SetInterruptHandler
    _logger_initialize->_TMR1_SetInterruptHandler
    _config_wifi_settings->__gets
    __gets->_EUSART_Read
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCA4_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _ESP_message_handler->_ESP_process_rx_data
    _ESP_process_rx_data->_process_message
    _process_message->_ESP_write
    _toggle_format->_ESP_write
    _ESP_write->_ESP_wait_for
    _write->_EUSART_Write
    __puts->_EUSART_Write
    _ESP_wait_for->_ESP_read
    _ESP_read->_ESP_process_message
    _ESP_process_message->_strstr
    _strstr->_strncmp
    _ESP_initialize->_ESP_Set_application_handler

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_ADC1_GetConversionResult
    _TMR1_ISR->_TMR1_WriteTimer

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_read_wifi_settings

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   80631
                                             53 COMRAM     2     2      0
                     _ESP_initialize
                _ESP_message_handler
                 _EUSART_is_rx_ready
                  _SYSTEM_Initialize
               _config_wifi_settings
                  _logger_initialize
                        _process_ioc
                    _process_message
                        _read_analog
                 _read_wifi_settings
 ---------------------------------------------------------------------------------
 (1) _read_wifi_settings                                  28    28      0    7962
                                              0 BANK1     28    28      0
                    _DATAEE_ReadByte
                         _ESP_config
 ---------------------------------------------------------------------------------
 (2) _ESP_config                                           8     2      6    7151
                                             28 COMRAM     8     2      6
                       _ESP_wait_for
                        _EUSART_Read
                 _EUSART_is_rx_ready
                              __puts
                              _write
 ---------------------------------------------------------------------------------
 (3) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      1     1      0      31
                                              8 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_analog                                         20    20      0   14323
                                             33 COMRAM    20    20      0
                       _ESP_wait_for
                          _ESP_write
                           __sprintf
 ---------------------------------------------------------------------------------
 (2) __sprintf                                             5     2      3    1743
                                             15 COMRAM     5     2      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     615
                                              8 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     618
                                              8 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _process_ioc                                          0     0      0   12275
                       _ESP_wait_for
                          _ESP_write
 ---------------------------------------------------------------------------------
 (1) _logger_initialize                                    0     0      0     544
                 _ADC1_SelectChannel
        _ESP_Set_application_handler
          _IOCA4_SetInterruptHandler
           _TMR1_SetInterruptHandler
                     _TMR1_StopTimer
 ---------------------------------------------------------------------------------
 (2) _ADC1_SelectChannel                                   2     2      0      22
                                              8 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _config_wifi_settings                                19    19      0    3235
                                             13 COMRAM    19    19      0
                   _DATAEE_WriteByte
                              __gets
                              __puts
 ---------------------------------------------------------------------------------
 (2) __gets                                                4     2      2     623
                                              9 COMRAM     4     2      2
                        _EUSART_Read
 ---------------------------------------------------------------------------------
 (2) _DATAEE_WriteByte                                     3     2      1     371
                                              8 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     544
                    _ADC1_Initialize
                  _EUSART_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     174
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR1_SetInterruptHandler                             2     0      2     174
                                              8 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     174
          _IOCA4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _IOCA4_SetInterruptHandler                            2     0      2     174
                                              8 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     196
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2      98
                                              8 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              8 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADC1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ESP_message_handler                                  7     7      0   23869
                                             39 COMRAM     3     3      0
                _ESP_process_rx_data
                           _ESP_read
 ---------------------------------------------------------------------------------
 (2) _ESP_process_rx_data                                  3     3      0   20648
                                             36 COMRAM     3     3      0
                   Absolute function *
    _ESP_default_application_handler *
                    _process_message *
                             _strstr
 ---------------------------------------------------------------------------------
 (1) _process_message                                      3     3      0   17705
                                             33 COMRAM     3     3      0
               _ADC1_StartConversion
                          _ESP_write
                    _TMR1_StartTimer
                     _TMR1_StopTimer
                      _toggle_format
 ---------------------------------------------------------------------------------
 (2) _toggle_format                                        0     0      0    8837
                          _ESP_write
 ---------------------------------------------------------------------------------
 (2) _ESP_write                                            5     2      3    8837
                                             28 COMRAM     5     2      3
                       _ESP_wait_for
                            ___awdiv
                            ___lbmod
                              __puts
                              _write
 ---------------------------------------------------------------------------------
 (3) _write                                                6     3      3    1452
                                              9 COMRAM     6     3      3
                       _EUSART_Write
                 _EUSART_is_tx_ready
 ---------------------------------------------------------------------------------
 (3) __puts                                                3     2      1    1632
                                              9 COMRAM     3     2      1
                       _EUSART_Write
                 _EUSART_is_tx_ready
 ---------------------------------------------------------------------------------
 (4) _EUSART_is_tx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         1     1      0      62
                                              8 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     235
                                              8 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     452
                                              8 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _ESP_wait_for                                         2     2      0    3438
                                             26 COMRAM     2     2      0
                           _ESP_read
 ---------------------------------------------------------------------------------
 (4) _ESP_read                                             2     2      0    3187
                                             24 COMRAM     2     2      0
                _ESP_process_message
                        _EUSART_Read
 ---------------------------------------------------------------------------------
 (3) _EUSART_Read                                          1     1      0      37
                                              8 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _ESP_process_message                                  2     2      0    3113
                                             22 COMRAM     2     2      0
                             _strstr
 ---------------------------------------------------------------------------------
 (6) _strstr                                               5     2      3    2875
                                             17 COMRAM     5     2      3
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (7) _strncmp                                              9     4      5     595
                                              8 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (7) _strlen                                               3     1      2     220
                                              8 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (7) _strchr                                               5     1      4     304
                                              8 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) _TMR1_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC1_StartConversion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ESP_default_application_handler                      1     1      0       0
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ESP_initialize                                       0     0      0     174
        _ESP_Set_application_handler
 ---------------------------------------------------------------------------------
 (2) _ESP_Set_application_handler                          2     0      2     174
                                              8 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                          4     4      0     229
                                              4 COMRAM     4     4      0
                   Absolute function *
           _ADC1_GetConversionResult
                           _ADC1_ISR
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                    _PIN_MANAGER_IOC
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     229
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                    _TMR1_WriteTimer
                        __TMR1_Ready *
 ---------------------------------------------------------------------------------
 (13) __TMR1_Ready                                         0     0      0       0
             i2_ADC1_StartConversion
 ---------------------------------------------------------------------------------
 (14) i2_ADC1_StartConversion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _TMR1_WriteTimer                                     2     0      2     229
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (13) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _PIN_MANAGER_IOC                                     0     0      0       0
                          _IOCA4_ISR
 ---------------------------------------------------------------------------------
 (13) _IOCA4_ISR                                           0     0      0       0
                   Absolute function *
      _IOCA4_DefaultInterruptHandler *
                         __IOC_Ready *
 ---------------------------------------------------------------------------------
 (14) __IOC_Ready                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _IOCA4_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _ADC1_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _ADC1_GetConversionResult                            4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ESP_initialize
     _ESP_Set_application_handler
   _ESP_message_handler
     _ESP_process_rx_data
       Absolute function(Fake) *
       _ESP_default_application_handler *
       _process_message *
         _ADC1_StartConversion
         _ESP_write
           _ESP_wait_for
             _ESP_read
               _ESP_process_message
                 _strstr
                   _strchr
                   _strlen
                   _strncmp
               _EUSART_Read
           ___awdiv
           ___lbmod
           __puts
             _EUSART_Write
             _EUSART_is_tx_ready
           _write
             _EUSART_Write
             _EUSART_is_tx_ready
         _TMR1_StartTimer
         _TMR1_StopTimer
         _toggle_format
           _ESP_write
             _ESP_wait_for
               _ESP_read
                 _ESP_process_message
                   _strstr
                     _strchr
                     _strlen
                     _strncmp
                 _EUSART_Read
             ___awdiv
             ___lbmod
             __puts
               _EUSART_Write
               _EUSART_is_tx_ready
             _write
               _EUSART_Write
               _EUSART_is_tx_ready
       _strstr *
         _strchr
         _strlen
         _strncmp
     _ESP_read
       _ESP_process_message
         _strstr
           _strchr
           _strlen
           _strncmp
       _EUSART_Read
   _EUSART_is_rx_ready
   _SYSTEM_Initialize
     _ADC1_Initialize
     _EUSART_Initialize
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCA4_SetInterruptHandler
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
   _config_wifi_settings
     _DATAEE_WriteByte
     __gets
       _EUSART_Read
     __puts
       _EUSART_Write
       _EUSART_is_tx_ready
   _logger_initialize
     _ADC1_SelectChannel
     _ESP_Set_application_handler
     _IOCA4_SetInterruptHandler
     _TMR1_SetInterruptHandler
     _TMR1_StopTimer
   _process_ioc
     _ESP_wait_for
       _ESP_read
         _ESP_process_message
           _strstr
             _strchr
             _strlen
             _strncmp
         _EUSART_Read
     _ESP_write
       _ESP_wait_for
         _ESP_read
           _ESP_process_message
             _strstr
               _strchr
               _strlen
               _strncmp
           _EUSART_Read
       ___awdiv
       ___lbmod
       __puts
         _EUSART_Write
         _EUSART_is_tx_ready
       _write
         _EUSART_Write
         _EUSART_is_tx_ready
   _process_message
     _ADC1_StartConversion
     _ESP_write
       _ESP_wait_for
         _ESP_read
           _ESP_process_message
             _strstr
               _strchr
               _strlen
               _strncmp
           _EUSART_Read
       ___awdiv
       ___lbmod
       __puts
         _EUSART_Write
         _EUSART_is_tx_ready
       _write
         _EUSART_Write
         _EUSART_is_tx_ready
     _TMR1_StartTimer
     _TMR1_StopTimer
     _toggle_format
       _ESP_write
         _ESP_wait_for
           _ESP_read
             _ESP_process_message
               _strstr
                 _strchr
                 _strlen
                 _strncmp
             _EUSART_Read
         ___awdiv
         ___lbmod
         __puts
           _EUSART_Write
           _EUSART_is_tx_ready
         _write
           _EUSART_Write
           _EUSART_is_tx_ready
   _read_analog
     _ESP_wait_for
       _ESP_read
         _ESP_process_message
           _strstr
             _strchr
             _strlen
             _strncmp
         _EUSART_Read
     _ESP_write
       _ESP_wait_for
         _ESP_read
           _ESP_process_message
             _strstr
               _strchr
               _strlen
               _strncmp
           _EUSART_Read
       ___awdiv
       ___lbmod
       __puts
         _EUSART_Write
         _EUSART_is_tx_ready
       _write
         _EUSART_Write
         _EUSART_is_tx_ready
     __sprintf
       ___lwdiv
       ___lwmod
   _read_wifi_settings
     _DATAEE_ReadByte
     _ESP_config
       _ESP_wait_for
         _ESP_read
           _ESP_process_message
             _strstr
               _strchr
               _strlen
               _strncmp
           _EUSART_Read
       _EUSART_Read
       _EUSART_is_rx_ready
       __puts
         _EUSART_Write
         _EUSART_is_tx_ready
       _write
         _EUSART_Write
         _EUSART_is_tx_ready

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _ADC1_GetConversionResult *
   _ADC1_ISR *
   _EUSART_Receive_ISR *
   _EUSART_Transmit_ISR *
   _PIN_MANAGER_IOC *
     _IOCA4_ISR
       Absolute function(Fake) *
       _IOCA4_DefaultInterruptHandler *
       __IOC_Ready *
   _TMR1_ISR *
     Absolute function(Fake) *
     _TMR1_DefaultInterruptHandler *
     _TMR1_WriteTimer *
     __TMR1_Ready *
       i2_ADC1_StartConversion

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0       8        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100     1C      5C       6       35.9%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      90       4       90.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     37      55       1       90.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     141       7        0.0%
DATA                 0      0     141       9        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Wed Aug 29 13:58:56 2018

                ?_EUSART_SetRxInterruptHandler 0009                                   ___awdiv@sign 000E  
                                 __CFG_CP0$OFF 000000                                   __CFG_CP1$OFF 000000  
                                          l432 09D4                                            l371 0D64  
                                          l196 0E50                                            l189 0EE4  
                                          l536 0CD2                                            l553 0D7E  
                                          l554 0D84                                            l652 0A80  
                                          l655 0A84                                            l666 0FB4  
                                          l683 0754                                   __CFG_CPB$OFF 000000  
                                 __CFG_CPD$OFF 000000                                _timer1ReloadVal 004C  
                                 __CFG_BORV$19 000000                                            tosl 000FFD  
                                          wreg 000FE8                                   ?_EUSART_Read 0001  
                                 __CFG_LVP$OFF 000000                                 ?_toggle_format 0001  
                           __size_of_IOCA4_ISR 001C                __size_ofi2_ADC1_StartConversion 0004  
                                         l3203 07F4                                           l1188 0B48  
                                         l3205 0800                                           l3301 0592  
                                         l1198 0C8C                                           l3223 0E86  
                                         l3235 0920                                           l3403 0CEE  
                                         l2531 09EA                                           l3229 08F8  
                                         l3237 0946                                           l3317 05CE  
                                         l3309 05B0                                           l3413 0D02  
                                         l3341 0E6A                                           l3325 0E42  
                                         l2701 0C6C                                           l3191 0F66  
                                         l3351 0AE6                                           l3407 0CF6  
                                         l2543 0A0A                                           l3503 0DB0  
                                         l3193 0F68                                           l3361 0AFC  
                                         l2545 0A12                                           l2537 09FA  
                                         l3433 06F6                                           l3513 0DD6  
                                         l2563 0A46                                           l2555 0A30  
                                         l2571 0F1C                                           l3339 0E68  
                                         l3515 0DD8                                           l3603 07B6  
                                         l2707 0C82                                           l3293 0574  
                                         l3285 0556                                           l3277 0538  
                                         l3269 051A                                           l3373 0C9A  
                                         l3437 070A                                           l2559 0A3A  
                                         l3383 0B56                                           l3473 0A78  
                                         l3465 0A68                                           l3609 07CC  
                                         l2681 0B20                                           l3801 08A6  
                                         l2579 0F32                                           l3379 0CBA  
                                         l3459 0A54                                           l3651 0D88  
                                         l2691 0B3E                                           l3389 0B90  
                                         l3469 0A6E                                           l3399 0CE4  
                                         l3479 0A88                                           l3583 077C  
                                         l2679 0B18                                           l3807 08C0  
                                         l3577 0766                                           l3673 032A  
                                         l3841 09C8                                           l3833 09B8  
                                         l3595 07A4                                           l3691 0D26  
                                         l2699 0C64                                           l3771 0602  
                                         l3773 0606                                           l3837 09C0  
                                         l3829 09AC                                           l3791 088E  
                                         l3785 0874                               __end_of_ADC1_ISR 10FE  
                                         STR_1 0294                                           STR_2 0299  
                                         STR_3 028A                                           STR_4 02B9  
                                         STR_5 02C4                                           STR_6 029C  
                                         STR_7 02B2                                           STR_8 02BF  
                                         STR_9 023D                                           u2100 0958  
                                         u2040 083C                                           u1410 0A16  
                                         _LATA 000F89                                           _LATB 000F8A  
                                         _LATC 000F8B                                           u1520 0C70  
                                         u2520 03D6                                           u2290 0B8A  
                                         u1490 0B24                                           u2460 079C  
                                         u2525 03CC                                           u2297 0B80  
                                         u1585 0D72                                           u1586 0D74  
                                         u2707 05F2                                           u2677 097A  
                                         u2687 0994                                           u2697 05DA  
                                         _TMR1 000FCE                                           _WPUA 000F77  
                                         _WPUB 000F78                      ADC1_SelectChannel@channel 000A  
                                         _main 095E                                           fsr2h 000FDA  
                                         indf2 000FDF                                           fsr2l 000FD9  
                                         btemp 0056                                    ?_ESP_config 001D  
                                   __IOC_Ready 108A                                           prodh 000FF4  
                                         prodl 000FF3                                           start 009C  
                                __CFG_IESO$OFF 000000                                  __CFG_FOSC$IRC 000000  
                   ??_TMR1_SetInterruptHandler 000B                                  __CFG_MCLRE$ON 000000  
                          __end_of__TMR1_Ready 10D4                                   ___param_bank 000000  
                               ESP_config@pass 0020                                 ESP_config@wifi 001D  
                           _ESP_wait_exception 003F                  __size_of_ADC1_StartConversion 0004  
                          read_wifi_settings@i 015A                      __size_of_DATAEE_WriteByte 0036  
                                ?_EUSART_Write 0001                    __size_of_read_wifi_settings 0082  
               __size_of_OSCILLATOR_Initialize 000E                  __end_of_OSCILLATOR_Initialize 108A  
                           __size_of_ESP_write 00AC                                          ?_main 0001  
                              __end_of___awdiv 0A50                                          _EEADR 000FA9  
                                        STR_10 027F                                          STR_11 02D1  
                                        STR_12 02CD                                          STR_20 02C9  
                                        STR_21 02AB                                          STR_13 024B  
                                        STR_22 02A4                                          STR_14 0217  
                                        STR_15 02DD                                          STR_23 02D5  
                                        STR_24 02D8                                          STR_16 0273  
                                        STR_17 02DB                                          STR_25 0259  
                                        STR_18 02CE                                          STR_26 022B  
                                        STR_19 02CE                                          STR_27 0266  
                                        STR_28 0201                                          STR_29 0266  
                              __end_of___lbmod 0F3A                                _TMR1_StartTimer 10EE  
                              ___awdiv@divisor 000B                                          _T1CON 000FCD  
                               __CFG_DEBUG$OFF 000000                                __end_of___lwdiv 0B52  
                           ESP_config@len_pass 0022                                          i2l120 006A  
                                        i2l113 0026                                __end_of___lwmod 0C96  
                                        i2l202 0FA4                                          i2l116 0036  
                                        i2l302 0FDC                                          i2l118 0054  
                           ESP_config@len_wifi 001F                                ___awdiv@counter 000D  
                 ?_ESP_Set_application_handler 0009                                          _RCREG 000FAE  
                               __CFG_BBSIZ$OFF 000000                                          _RCSTA 000FAB  
                             __end_of_ESP_read 0B08                                          _TMR1H 000FCF  
                                        _TMR1L 000FCE                                          _SPBRG 000FAF  
                                        _TRISA 000F92                                          _TRISB 000F93  
                                        _TRISC 000F94                                          _TXREG 000FAD  
                                        _TXSTA 000FAC                                   ?_read_analog 0001  
                                __CFG_WRT0$OFF 000000                                  __CFG_WRT1$OFF 000000  
                               __CFG_EBTR0$OFF 000000                                 __CFG_FCMEN$OFF 000000  
                               __CFG_EBTR1$OFF 000000                               __end_of_TMR1_ISR 0EC6  
                                __CFG_WRTB$OFF 000000                                  __CFG_WRTC$OFF 000000  
                                __CFG_WRTD$OFF 000000                                          __gets 0DAC  
                              _DATAEE_ReadByte 1032                                 __CFG_EBTRB$OFF 000000  
                      __end_of_PIN_MANAGER_IOC 10DE                                          __puts 0C96  
                                        _write 0B52                        __end_of_TMR1_Initialize 0F14  
                                        pclath 000FFA                                          tablat 000FF5  
                                        ttemp5 0057                                          ttemp6 005A  
                                        ttemp7 005E                                          status 000FD8  
                                        wtemp8 0057                     __size_of_logger_initialize 0040  
                               __CFG_HFOFST$ON 000000                                __end_of_strncmp 0860  
                              _TMR1_WriteTimer 0FCA                                __initialization 0DE0  
                                 __end_of_main 09D8                         i2_ADC1_StartConversion 10F6  
                            __end_of_IOCA4_ISR 1002                                 __CFG_PCLKEN$ON 000000  
                               ??_EUSART_Write 0009                    ?_INTERRUPT_InterruptManager 0001  
               ??_EUSART_SetRxInterruptHandler 000B                 ?_IOCA4_DefaultInterruptHandler 0001  
                                       ??_main 0036                                  __activetblptr 000002  
                               __CFG_PLLEN$OFF 000000                            __size_of_ESP_config 00B4  
                                 __gets@length 000B                   __end_of_config_wifi_settings 07D4  
                ??_ESP_Set_application_handler 000B                                ??_toggle_format 0022  
                                       ?__gets 000A                                         ?__puts 000A  
                                       _ADCON0 000FC2                                         _ADCON1 000FC1  
                                       _ADCON2 000FC0                                         _ADRESH 000FC4  
                                       _ADRESL 000FC3                                         _EEDATA 000FA8  
                                       _EECON2 000FA7                               ___awdiv@dividend 0009  
                   __end_of_EUSART_is_rx_ready 10E2                                         ?_write 000A  
                      TMR1_WriteTimer@timerVal 0001                                 __CFG_WDTEN$OFF 000000  
                                       i2l2953 0F5C                                         i2l2945 0F42  
                                       i2l2939 0FA0                             _ADC1_SelectChannel 1002  
                   __end_of_EUSART_is_tx_ready 10EA                     ??_ADC1_GetConversionResult 0003  
                                       _OSCCON 000FD3                                         _SPBRGH 000FB0  
                                  __TMR1_Ready 10CA                              __end_of_ESP_write 0730  
                                  ?__IOC_Ready 0001                            ?_ADC1_SelectChannel 0001  
                             ??_ESP_initialize 000B                                 __CFG_XINST$OFF 000000  
         __end_of_TMR1_DefaultInterruptHandler 1102          __size_of_TMR1_DefaultInterruptHandler 0002  
                                _esp_read_data 00E0                   _TMR1_DefaultInterruptHandler 1100  
                             __end_of__sprintf 04FC                        __end_of_TMR1_StartTimer 10F2  
                                    ??___awdiv 000D                                 __CFG_STVREN$ON 000000  
                                    ??___lbmod 000A                                      ??___lwdiv 000D  
                                    ??___lwmod 000D                            _EUSART_Transmit_ISR 0F84  
                                       clear_0 0DE6                                         clear_1 0DF2  
                                       clear_2 0DFE                               ___awdiv@quotient 000F  
                                    ?_ADC1_ISR 0001                       __size_of_ADC1_Initialize 0012  
                                       _strchr 0E6E                        __end_of_DATAEE_ReadByte 1046  
                                       _strlen 0F60                                         _strstr 08E2  
                         ??_ADC1_SelectChannel 0009                                   __mediumconst 0000  
                                       tblptrh 000FF7                                         tblptrl 000FF6  
                                       tblptru 000FF8                       ESP_process_rx_data@index 0025  
     TMR1_SetInterruptHandler@InterruptHandler 0009      IOCA4_SetInterruptHandler@InterruptHandler 0009  
                             ?_PIN_MANAGER_IOC 0001                                         write@i 000F  
                      __end_of_TMR1_WriteTimer 0FE6                                      ??_strncmp 000E  
                         ?_EUSART_Transmit_ISR 0001                  __size_of_INTERRUPT_Initialize 0004  
                                 ?_process_ioc 0001                               ?_TMR1_Initialize 0001  
                         __size_of_EUSART_Read 0028                              _SYSTEM_Initialize 101A  
                              ___lbmod@divisor 0009                                     __accesstop 0060  
                      __end_of__initialization 0E04                                  ?_ESP_wait_for 0001  
                              ___lbmod@counter 000B                             read_analog@adc_val 0034  
                           ?_SYSTEM_Initialize 0001                                  ___rparam_used 000001  
         __size_of_ESP_Set_application_handler 000A           __end_of_EUSART_SetTxInterruptHandler 10B6  
        __size_of_EUSART_SetTxInterruptHandler 000A                   _EUSART_SetTxInterruptHandler 10AC  
                                    ?_ESP_read 0001                                 __pcstackCOMRAM 0001  
                                  ESP_read@ret 001A                            ??_SYSTEM_Initialize 000B  
                                __end_of__gets 0DE0                                      ?_TMR1_ISR 0001  
                ?_TMR1_DefaultInterruptHandler 0001                                  __end_of__puts 0CD0  
                             _DATAEE_WriteByte 0D40                                  __end_of_write 0B98  
                                   ??_ADC1_ISR 0001                            __size_of__IOC_Ready 000E  
                     __size_of_process_message 006C                                        ??__gets 000C  
                                  ESP_write@pt 001D                                        ??__puts 000B  
                        read_wifi_settings@add 015B                           __size_of_read_analog 012A  
                    __end_of_SYSTEM_Initialize 1032                          ??_EUSART_Transmit_ISR 0001  
                                      ??_write 000D                                     __pbssBANK0 0060  
                                   __pbssBANK1 0100                                 ??_ESP_wait_for 001B  
                         __end_of_EUSART_Write 0E6E                                     __pnvCOMRAM 0048  
                                 ??_ESP_config 0023                    __size_of_EUSART_Receive_ISR 0026  
                                   ??_ESP_read 0019                           _config_wifi_settings 0730  
                ?_EUSART_SetTxInterruptHandler 0009               _EUSART_TxDefaultInterruptHandler 0050  
                 __size_of_ESP_process_message 00D4                   __size_of_ESP_message_handler 0036  
                             ?_TMR1_StartTimer 0001                                     ??_TMR1_ISR 0003  
                 __size_of_ESP_process_rx_data 0040                                        _BAUDCON 000FB8  
           __size_of_IOCA4_SetInterruptHandler 000A                     ?_IOCA4_SetInterruptHandler 0009  
                                      ?_strchr 0009                                        ?_strlen 0009  
                      __size_of_TMR1_StopTimer 0004                                        ?_strstr 0012  
                             ?_DATAEE_ReadByte 0001                                  _eusartRxCount 0041  
                           __end_of_ESP_config 0684                                        _OSCCON2 000FD2  
                                      _OSCTUNE 000F9B                              ??_ADC1_Initialize 0009  
                 __end_of_ADC1_StartConversion 10F6                                      ?__sprintf 0010  
                             ?_TMR1_WriteTimer 0001                           DATAEE_WriteByte@bAdd 000A  
                              __CFG_PWRTEN$OFF 000000                        ?i2_ADC1_StartConversion 0001  
                                      __Hparam 0000                                        __Lparam 0000  
                        ?_config_wifi_settings 0001                                      _ADC_count 0047  
                                    _ADC_value 0038                                      _ADC_state 0046  
                   __end_of_read_wifi_settings 08E2                                        ___awdiv 09D8  
                                      ___lbmod 0F14                                        ___lwdiv 0B08  
                                      ___lwmod 0C58                                   __psmallconst 0200  
                                      __pcinit 0DE0                                      _ANSELbits 000F7E  
                                      __ramtop 0200                                        __ptext0 095E  
                                      __ptext1 0860                                        __ptext2 05D0  
                                      __ptext3 10DE                                        __ptext4 1032  
                                      __ptext5 02E0                                        __ptext6 040A  
                                      __ptext7 0C58                                        __ptext8 0B08  
                                      __ptext9 0D0A              __end_of_IOCA4_SetInterruptHandler 10AC  
               ??_TMR1_DefaultInterruptHandler 0001                                      _IOCA4_ISR 0FE6  
                              __size_of_strchr 002E                                __size_of_strlen 0024  
                                    _T1CONbits 000FCD                         ESP_process_message@aux 0017  
                              __size_of_strstr 007C                          _OSCILLATOR_Initialize 107C  
            __size_of_TMR1_SetInterruptHandler 000A                       ??_PIN_MANAGER_Initialize 000B  
                    ?_TMR1_SetInterruptHandler 0009                    config_wifi_settings@address 001F  
                   __size_of_SYSTEM_Initialize 0018                                     ??__sprintf 0013  
                                      _strncmp 07D4                         ESP_message_handler@ret 002A  
                         end_of_initialization 0E04                ??_IOCA4_DefaultInterruptHandler 0001  
                                 ?__TMR1_Ready 0001                                  __Lmediumconst 0000  
                            ??_process_message 0022                 __end_ofi2_ADC1_StartConversion 10FA  
                         __size_of_process_ioc 0036                                   ??__IOC_Ready 0001  
                            _EUSART_Initialize 0BD8                                      _IOC_value 0054  
                                    _IOC_state 0040                             ?_EUSART_Initialize 0001  
                                    _ESP_write 0684                                      _RCSTAbits 000FAB  
                           _EUSART_is_rx_ready 10DE                                        postinc0 000FEE  
                                      postinc2 000FDE                             _EUSART_is_tx_ready 10E6  
                                 __sprintf@aux 0013                                   __sprintf@val 0011  
                                      strchr@c 000B                                        strchr@s 0009  
                                      strlen@a 000B                                        strlen@s 0009  
                        config_wifi_settings@i 001E                            ??_EUSART_Initialize 000B  
                                      write@pt 000A                 ??_EUSART_SetTxInterruptHandler 000B  
                         __end_of_ESP_wait_for 0D0A                                        strstr@h 0012  
                                      strstr@n 0014                                      _PORTAbits 000F80  
                          ?_EUSART_is_rx_ready 0001                         _IOCA4_InterruptHandler 0052  
                                   ?_IOCA4_ISR 0001                            ?_EUSART_is_tx_ready 0001  
                            __size_of_ADC1_ISR 0004                               ___lbmod@dividend 000A  
                           __end_of__IOC_Ready 1098                          __size_of_EUSART_Write 002E  
                        __end_of_toggle_format 0FCA                       __end_of_DATAEE_WriteByte 0D76  
                                  ___lbmod@rem 000C                      __end_of_EUSART_Initialize 0C18  
                         ??_EUSART_is_rx_ready 0009                           ??_EUSART_is_tx_ready 0009  
                       ??_config_wifi_settings 000E                                     ?_ESP_write 001D  
                 __end_of_INTERRUPT_Initialize 10E6                              __size_of_ESP_read 004C  
                         _ADC1_StartConversion 10F2                   _ESP_external_message_handler 0048  
            __size_of_ADC1_GetConversionResult 0014                      ?_ADC1_GetConversionResult 0001  
ESP_Set_application_handler@applicationHandler 0009                                   _EUSART_Write 0E40  
                            __size_of_TMR1_ISR 002A                                 _TMR1_StopTimer 10EA  
                       ?_OSCILLATOR_Initialize 0001            __end_of_ESP_Set_application_handler 10CA  
                  _ESP_Set_application_handler 10C0                         ESP_process_rx_data@aux 0027  
                               __end_of_strchr 0E9C                                 __end_of_strlen 0F84  
                               __end_of_strstr 095E                            start_initialization 0DE0  
                  __size_of_ADC1_SelectChannel 0018                __size_of_PIN_MANAGER_Initialize 002E  
                                ??_EUSART_Read 0009                     read_wifi_settings@len_pass 0159  
                   read_wifi_settings@len_wifi 0158                            _ESP_process_message 04FC  
                          _ESP_message_handler 0D76   EUSART_SetRxInterruptHandler@interruptHandler 0009  
 EUSART_SetTxInterruptHandler@interruptHandler 0009                            _ESP_process_rx_data 0C18  
                                  __gets@index 000D                            DATAEE_ReadByte@bAdd 0009  
                     __size_of_PIN_MANAGER_IOC 000A                                ESP_wait_for@ret 001C  
        __end_of_IOCA4_DefaultInterruptHandler 1104         __size_of_IOCA4_DefaultInterruptHandler 0002  
                _IOCA4_DefaultInterruptHandler 1102                       __size_of_TMR1_Initialize 0026  
                         ?_ESP_process_message 0001                           ?_ESP_message_handler 0001  
                        ?_ADC1_StartConversion 0001                                   ESP_write@aux 0021  
                                 ESP_write@res 0020                         __end_of_TMR1_StopTimer 10EE  
                         ?_ESP_process_rx_data 0001                         read_wifi_settings@pass 0140  
                       read_wifi_settings@wifi 014E                                _ADC1_Initialize 105A  
                  ??_IOCA4_SetInterruptHandler 000B                                       ??_strchr 000D  
                                     ??_strlen 000B                                    ??_IOCA4_ISR 0001  
                      __size_of_ESP_initialize 0010                                       ??_strstr 0015  
                  __end_of_EUSART_Transmit_ISR 0FA8                                  ??_read_analog 0022  
                                  __pbssCOMRAM 0038        __end_of_ESP_default_application_handler 1100  
     __size_of_ESP_default_application_handler 0002              ??_ESP_default_application_handler 0009  
             ?_ESP_default_application_handler 0001                _ESP_default_application_handler 10FE  
                                __pcstackBANK1 0140                                _WIFI_tx_buf_ind 003A  
                   __end_of_EUSART_Receive_ISR 0F60                     __size_of_EUSART_Initialize 0040  
                            __size_of__sprintf 00F2               _EUSART_RxDefaultInterruptHandler 004E  
                          __end_of_EUSART_Read 0EEE                                read_analog@aux1 0030  
                              read_analog@mess 002A                           __size_of__TMR1_Ready 000A  
                             ___lwdiv@dividend 0009                         _PIN_MANAGER_Initialize 0E12  
                                  ??_ESP_write 0020                          ??_ESP_process_message 0017  
                         EUSART_Read@readValue 0009                          ??_ESP_message_handler 0028  
                                    __pintcode 0008                          __size_of_ESP_wait_for 003A  
             __end_of_TMR1_SetInterruptHandler 10A2                                       ?___awdiv 0009  
                                     ?___lbmod 0009                          ??_ESP_process_rx_data 0025  
                                     ?___lwdiv 0009                                       ?___lwmod 0009  
                                 _eusartRxHead 0043                                ?_TMR1_StopTimer 0001  
                                 _eusartTxHead 0045                                   _eusartRxTail 0042  
                                 _eusartTxTail 0044                                       _ADC1_ISR 10FA  
                 ??_INTERRUPT_InterruptManager 0005                        _eusartTxBufferRemaining 0055  
                                  __smallconst 0200                       __size_of_TMR1_StartTimer 0004  
                              _process_message 0A50                             _read_wifi_settings 0860  
                               __size_of__gets 0034                               ___lwdiv@quotient 000D  
                               __size_of__puts 003A                       __size_of_DATAEE_ReadByte 0014  
                                     ?_strncmp 0009                           _INTERRUPT_Initialize 10E2  
                               __size_of_write 0046                            __end_of_read_analog 040A  
                               _eusartRxBuffer 0100                            ?_read_wifi_settings 0001  
                    _IOCA4_SetInterruptHandler 10A2                                 _eusartTxBuffer 0060  
                                 _ESP_wait_for 0CD0                                       _IOCAbits 000F79  
                                     _LATAbits 000F89                                    __puts@index 000C  
                                     _PIE1bits 000F9D                       __size_of_TMR1_WriteTimer 001C  
          __size_of_INTERRUPT_InterruptManager 0094                                       _ESP_read 0ABC  
                                  write@lenght 000C                                       i2u190_48 005E  
                      __end_of_ADC1_Initialize 106C                                       _PIR1bits 000F9E  
                                     i2u193_48 0074                                       i2u193_49 0088  
                       ??_ADC1_StartConversion 0009                                       _RCONbits 000FD0  
                             __CFG_WDTPS$32768 000000                                       _TMR1_ISR 0E9C  
                            ??_PIN_MANAGER_IOC 0001                           ??_read_wifi_settings 0025  
                            ??_TMR1_Initialize 000B                                     _ADCON0bits 000FC2  
                        DATAEE_WriteByte@bData 0009                                    _EUSART_Read 0EC6  
                                  _INTCON2bits 000FF1                          ?_INTERRUPT_Initialize 0001  
                                ??_process_ioc 0022                              ?_DATAEE_WriteByte 0009  
             __end_of_ADC1_GetConversionResult 105A                             ??_DATAEE_WriteByte 000A  
                                  _esp_channel 003D                                     _EECON1bits 000FA6  
                                     __Hrparam 0000                                       __Lrparam 0000  
                           __CFG_BOREN$SBORDIS 000000                        ??_OSCILLATOR_Initialize 0009  
                             __size_of___awdiv 0078                               __size_of___lbmod 0026  
                             __size_of___lwdiv 004A                        __end_of_process_message 0ABC  
                             __size_of___lwmod 003E                       _TMR1_SetInterruptHandler 1098  
                               _ESP_initialize 106C                                       __gets@pt 000A  
                                   _ANSELHbits 000F7F                          _TMR1_InterruptHandler 004A  
                                  _read_analog 02E0                            _esp_read_data_index 003E  
                              ___lwdiv@divisor 000B                                ___lwdiv@counter 000F  
                                     __ptext10 0B98                                       __ptext11 1002  
                                     __ptext20 107C                                       __ptext12 0730  
                                     __ptext21 10E2                                       __ptext13 0DAC  
                                     __ptext30 0FA8                                       __ptext22 0BD8  
                                     __ptext14 0D40                                       __ptext31 0684  
                                     __ptext23 10AC                                       __ptext15 101A  
                                     __ptext40 0EC6                                       __ptext32 0B52  
                                     __ptext24 10B6                                       __ptext16 0EEE  
                                     __ptext41 04FC                                       __ptext33 0C96  
                                     __ptext25 105A                                       __ptext17 1098  
                                     __ptext50 10C0                                       __ptext42 08E2  
                                     __ptext34 10E6                                       __ptext26 0D76  
                                     __ptext18 0E12                                       __ptext43 07D4  
                                     __ptext35 0E40                                       __ptext27 0C18  
                                     __ptext19 10A2                                       __ptext60 108A  
                                     __ptext52 0E9C                                       __ptext44 0F60  
                                     __ptext36 0F14                                       __ptext28 10FE  
                                     __ptext61 0F84                                       __ptext53 1100  
                                     __ptext45 0E6E                                       __ptext37 09D8  
                                     __ptext29 0A50                                       __ptext62 0F3A  
                                     __ptext54 10CA                                       __ptext46 10EA  
                                     __ptext38 0CD0                                       __ptext63 10FA  
                                     __ptext55 10F6                                       __ptext47 10EE  
                                     __ptext39 0ABC                                       __ptext64 1046  
                                     __ptext56 0FCA                                       __ptext48 10F2  
                                     __ptext65 0000                                       __ptext57 10D4  
                                     __ptext49 106C                                       __ptext58 0FE6  
                                     __ptext59 1102                                       __puts@pt 000A  
                       process_message@message 0024                                       __sprintf 040A  
                            ??_TMR1_StartTimer 0009                    DATAEE_WriteByte@GIEBitValue 000B  
                             __size_of_strncmp 008C                                 _message_format 003C  
                  __size_of_EUSART_is_rx_ready 0004                                  __size_of_main 007A  
                              ESP_write@length 001F                    __size_of_EUSART_is_tx_ready 0004  
                            ??_DATAEE_ReadByte 0009                            __end_of_process_ioc 0D40  
                     config_wifi_settings@line 000E                               ?_ADC1_Initialize 0001  
                __size_of_config_wifi_settings 00A4                                       int$flags 0056  
                       __size_of_toggle_format 0022                         __end_of_ESP_initialize 107C  
           __end_of_INTERRUPT_InterruptManager 009C                     _INTERRUPT_InterruptManager 0008  
                            ??_TMR1_WriteTimer 0003                     __end_of_ADC1_SelectChannel 101A  
                                   _INTCONbits 000FF2                         ??_INTERRUPT_Initialize 0009  
                     ??i2_ADC1_StartConversion 0001            ESP_default_application_handler@data 0001  
                                     intlevel2 0000                               ___lwmod@dividend 0009  
                      ?_PIN_MANAGER_Initialize 0001                                     _ESP_config 05D0  
                                    strncmp@_l 0009                                      strncmp@_r 000B  
         __end_of_EUSART_SetRxInterruptHandler 10C0          __size_of_EUSART_SetRxInterruptHandler 000A  
                 _EUSART_SetRxInterruptHandler 10B6                              _logger_initialize 0B98  
                             ??_TMR1_StopTimer 0009                        config_wifi_settings@len 0020  
                     _ADC1_GetConversionResult 1046                             ?_logger_initialize 0001  
                           _EUSART_Receive_ISR 0F3A                                ?_ESP_initialize 0001  
                             ?_process_message 0001                                  __sprintf@mess 0010  
                          ??_logger_initialize 000B                            ?_EUSART_Receive_ISR 0001  
                              ___lwmod@divisor 000B                                ___lwmod@counter 000D  
                                     strncmp@l 000F                                       strncmp@n 000C  
                                     strncmp@r 0011                           ESP_wait_for@esp_mess 001B  
                                     strstr@nl 0015                                  _toggle_format 0FA8  
                                  _WIFI_tx_buf 00A0                             EUSART_Write@txData 0009  
                 __size_of_EUSART_Transmit_ISR 0024                                     _TMR1_state 003B  
               __end_of_PIN_MANAGER_Initialize 0E40                                    _process_ioc 0D0A  
                                ??__TMR1_Ready 0001                    __end_of_ESP_process_message 05D0  
                  __end_of_ESP_message_handler 0DAC                                _PIN_MANAGER_IOC 10D4  
                    __end_of_logger_initialize 0BD8                           ??_EUSART_Receive_ISR 0001  
                  __end_of_ESP_process_rx_data 0C58                                _TMR1_Initialize 0EEE  
