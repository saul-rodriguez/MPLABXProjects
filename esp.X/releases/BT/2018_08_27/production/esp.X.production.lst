

Microchip Technology PIC18 PRO Macro Assembler V2.00 build -1524193055 
                                                                                               Mon Aug 27 08:47:11 2018

Microchip Technology Omniscient Code Generator v2.00 (PRO mode) build 20180527130849
     1                           	processor	18LF14K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    61                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    62  0000                     
    63                           ; Version 2.00
    64                           ; Generated 27/05/2018 GMT
    65                           ; 
    66                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    67                           ; All rights reserved.
    68                           ; 
    69                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    70                           ; 
    71                           ; Redistribution and use in source and binary forms, with or without modification, are
    72                           ; permitted provided that the following conditions are met:
    73                           ; 
    74                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    75                           ;        conditions and the following disclaimer.
    76                           ; 
    77                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    78                           ;        of conditions and the following disclaimer in the documentation and/or other
    79                           ;        materials provided with the distribution.
    80                           ; 
    81                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    82                           ;        software without specific prior written permission.
    83                           ; 
    84                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    85                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    86                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    87                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    88                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    89                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    90                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    91                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    92                           ; 
    93                           ; 
    94                           ; Code-generator required, PIC18LF14K22 Definitions
    95                           ; 
    96                           ; SFR Addresses
    97  0000                     
    98 ;; Function _ESP_default_application_handler is unused but had its address taken
    99  0000                     
   100                           	psect	nvCOMRAM
   101  00004B                     __pnvCOMRAM:
   102                           	opt stack 0
   103  00004B                     _TMR1_InterruptHandler:
   104                           	opt stack 0
   105  00004B                     	ds	2
   106  00004D                     _timer1ReloadVal:
   107                           	opt stack 0
   108  00004D                     	ds	2
   109  00004F                     _EUSART_RxDefaultInterruptHandler:
   110                           	opt stack 0
   111  00004F                     	ds	2
   112  000051                     _EUSART_TxDefaultInterruptHandler:
   113                           	opt stack 0
   114  000051                     	ds	2
   115  000053                     _IOCA4_InterruptHandler:
   116                           	opt stack 0
   117  000053                     	ds	2
   118  000055                     _IOC_value:
   119                           	opt stack 0
   120  000055                     	ds	1
   121  000056                     _eusartTxBufferRemaining:
   122                           	opt stack 0
   123  000056                     	ds	1
   124  0000                     _TMR1	set	4046
   125  0000                     _PORTAbits	set	3968
   126  0000                     _LATAbits	set	3977
   127  0000                     _T1CONbits	set	4045
   128  0000                     _T1CON	set	4045
   129  0000                     _TMR1L	set	4046
   130  0000                     _TMR1H	set	4047
   131  0000                     _ADCON0bits	set	4034
   132  0000                     _ADRESH	set	4036
   133  0000                     _ADRESL	set	4035
   134  0000                     _ADCON2	set	4032
   135  0000                     _ADCON1	set	4033
   136  0000                     _ADCON0	set	4034
   137  0000                     _RCREG	set	4014
   138  0000                     _RCSTAbits	set	4011
   139  0000                     _TXREG	set	4013
   140  0000                     _SPBRGH	set	4016
   141  0000                     _SPBRG	set	4015
   142  0000                     _TXSTA	set	4012
   143  0000                     _RCSTA	set	4011
   144  0000                     _BAUDCON	set	4024
   145  0000                     _PIR1bits	set	3998
   146  0000                     _PIE1bits	set	3997
   147  0000                     _RCONbits	set	4048
   148  0000                     _OSCTUNE	set	3995
   149  0000                     _OSCCON2	set	4050
   150  0000                     _OSCCON	set	4051
   151  0000                     _INTCONbits	set	4082
   152  0000                     _IOCAbits	set	3961
   153  0000                     _INTCON2bits	set	4081
   154  0000                     _WPUA	set	3959
   155  0000                     _WPUB	set	3960
   156  0000                     _ANSELbits	set	3966
   157  0000                     _ANSELHbits	set	3967
   158  0000                     _TRISC	set	3988
   159  0000                     _TRISB	set	3987
   160  0000                     _TRISA	set	3986
   161  0000                     _LATC	set	3979
   162  0000                     _LATB	set	3978
   163  0000                     _LATA	set	3977
   164                           
   165                           	psect	smallconst
   166  000200                     __psmallconst:
   167                           	opt stack 0
   168  000200  00                 	db	0
   169  000201  65                 	db	101	;'e'
   170  000202  6E                 	db	110	;'n'
   171  000203  74                 	db	116	;'t'
   172  000204  65                 	db	101	;'e'
   173  000205  72                 	db	114	;'r'
   174  000206  20                 	db	32
   175  000207  77                 	db	119	;'w'
   176  000208  6C                 	db	108	;'l'
   177  000209  61                 	db	97	;'a'
   178  00020A  6E                 	db	110	;'n'
   179  00020B  20                 	db	32
   180  00020C  70                 	db	112	;'p'
   181  00020D  61                 	db	97	;'a'
   182  00020E  73                 	db	115	;'s'
   183  00020F  73                 	db	115	;'s'
   184  000210  77                 	db	119	;'w'
   185  000211  6F                 	db	111	;'o'
   186  000212  72                 	db	114	;'r'
   187  000213  64                 	db	100	;'d'
   188  000214  3A                 	db	58	;':'
   189  000215  0A                 	db	10
   190  000216  00                 	db	0
   191  000217  41                 	db	65	;'A'
   192  000218  54                 	db	84	;'T'
   193  000219  2B                 	db	43
   194  00021A  43                 	db	67	;'C'
   195  00021B  49                 	db	73	;'I'
   196  00021C  50                 	db	80	;'P'
   197  00021D  53                 	db	83	;'S'
   198  00021E  45                 	db	69	;'E'
   199  00021F  52                 	db	82	;'R'
   200  000220  56                 	db	86	;'V'
   201  000221  45                 	db	69	;'E'
   202  000222  52                 	db	82	;'R'
   203  000223  3D                 	db	61	;'='
   204  000224  31                 	db	49	;'1'
   205  000225  2C                 	db	44
   206  000226  38                 	db	56	;'8'
   207  000227  30                 	db	48	;'0'
   208  000228  0D                 	db	13
   209  000229  0A                 	db	10
   210  00022A  00                 	db	0
   211  00022B  65                 	db	101	;'e'
   212  00022C  6E                 	db	110	;'n'
   213  00022D  74                 	db	116	;'t'
   214  00022E  65                 	db	101	;'e'
   215  00022F  72                 	db	114	;'r'
   216  000230  20                 	db	32
   217  000231  77                 	db	119	;'w'
   218  000232  6C                 	db	108	;'l'
   219  000233  61                 	db	97	;'a'
   220  000234  6E                 	db	110	;'n'
   221  000235  20                 	db	32
   222  000236  6E                 	db	110	;'n'
   223  000237  61                 	db	97	;'a'
   224  000238  6D                 	db	109	;'m'
   225  000239  65                 	db	101	;'e'
   226  00023A  3A                 	db	58	;':'
   227  00023B  0A                 	db	10
   228  00023C  00                 	db	0
   229  00023D  41                 	db	65	;'A'
   230  00023E  54                 	db	84	;'T'
   231  00023F  2B                 	db	43
   232  000240  43                 	db	67	;'C'
   233  000241  57                 	db	87	;'W'
   234  000242  4D                 	db	77	;'M'
   235  000243  4F                 	db	79	;'O'
   236  000244  44                 	db	68	;'D'
   237  000245  45                 	db	69	;'E'
   238  000246  3D                 	db	61	;'='
   239  000247  31                 	db	49	;'1'
   240  000248  0D                 	db	13
   241  000249  0A                 	db	10
   242  00024A  00                 	db	0
   243  00024B  41                 	db	65	;'A'
   244  00024C  54                 	db	84	;'T'
   245  00024D  2B                 	db	43
   246  00024E  43                 	db	67	;'C'
   247  00024F  49                 	db	73	;'I'
   248  000250  50                 	db	80	;'P'
   249  000251  4D                 	db	77	;'M'
   250  000252  55                 	db	85	;'U'
   251  000253  58                 	db	88	;'X'
   252  000254  3D                 	db	61	;'='
   253  000255  31                 	db	49	;'1'
   254  000256  0D                 	db	13
   255  000257  0A                 	db	10
   256  000258  00                 	db	0
   257  000259  4C                 	db	76	;'L'
   258  00025A  6F                 	db	111	;'o'
   259  00025B  67                 	db	103	;'g'
   260  00025C  67                 	db	103	;'g'
   261  00025D  65                 	db	101	;'e'
   262  00025E  72                 	db	114	;'r'
   263  00025F  20                 	db	32
   264  000260  56                 	db	86	;'V'
   265  000261  31                 	db	49	;'1'
   266  000262  2E                 	db	46
   267  000263  30                 	db	48	;'0'
   268  000264  0A                 	db	10
   269  000265  00                 	db	0
   270  000266                     STR_27:
   271  000266  62                 	db	98	;'b'
   272  000267  75                 	db	117	;'u'
   273  000268  66                 	db	102	;'f'
   274  000269  66                 	db	102	;'f'
   275  00026A  65                 	db	101	;'e'
   276  00026B  72                 	db	114	;'r'
   277  00026C  20                 	db	32
   278  00026D  65                 	db	101	;'e'
   279  00026E  72                 	db	114	;'r'
   280  00026F  72                 	db	114	;'r'
   281  000270  6F                 	db	111	;'o'
   282  000271  72                 	db	114	;'r'
   283  000272  00                 	db	0
   284  000273  41                 	db	65	;'A'
   285  000274  54                 	db	84	;'T'
   286  000275  2B                 	db	43
   287  000276  43                 	db	67	;'C'
   288  000277  49                 	db	73	;'I'
   289  000278  50                 	db	80	;'P'
   290  000279  53                 	db	83	;'S'
   291  00027A  45                 	db	69	;'E'
   292  00027B  4E                 	db	78	;'N'
   293  00027C  44                 	db	68	;'D'
   294  00027D  3D                 	db	61	;'='
   295  00027E  00                 	db	0
   296  00027F  41                 	db	65	;'A'
   297  000280  54                 	db	84	;'T'
   298  000281  2B                 	db	43
   299  000282  43                 	db	67	;'C'
   300  000283  57                 	db	87	;'W'
   301  000284  4A                 	db	74	;'J'
   302  000285  41                 	db	65	;'A'
   303  000286  50                 	db	80	;'P'
   304  000287  3D                 	db	61	;'='
   305  000288  22                 	db	34
   306  000289  00                 	db	0
   307  00028A  53                 	db	83	;'S'
   308  00028B  45                 	db	69	;'E'
   309  00028C  4E                 	db	78	;'N'
   310  00028D  44                 	db	68	;'D'
   311  00028E  20                 	db	32
   312  00028F  46                 	db	70	;'F'
   313  000290  41                 	db	65	;'A'
   314  000291  49                 	db	73	;'I'
   315  000292  4C                 	db	76	;'L'
   316  000293  00                 	db	0
   317  000294                     STR_1:
   318  000294  53                 	db	83	;'S'
   319  000295  45                 	db	69	;'E'
   320  000296  4E                 	db	78	;'N'
   321  000297  44                 	db	68	;'D'
   322  000298  20                 	db	32
   323  000299  4F                 	db	79	;'O'
   324  00029A  4B                 	db	75	;'K'
   325  00029B  00                 	db	0
   326  00029C  43                 	db	67	;'C'
   327  00029D  4F                 	db	79	;'O'
   328  00029E  4E                 	db	78	;'N'
   329  00029F  4E                 	db	78	;'N'
   330  0002A0  45                 	db	69	;'E'
   331  0002A1  43                 	db	67	;'C'
   332  0002A2  54                 	db	84	;'T'
   333  0002A3  00                 	db	0
   334  0002A4                     STR_22:
   335  0002A4  62                 	db	98	;'b'
   336  0002A5  6D                 	db	109	;'m'
   337  0002A6  6F                 	db	111	;'o'
   338  0002A7  64                 	db	100	;'d'
   339  0002A8  65                 	db	101	;'e'
   340  0002A9  0A                 	db	10
   341  0002AA  00                 	db	0
   342  0002AB                     STR_21:
   343  0002AB  74                 	db	116	;'t'
   344  0002AC  6D                 	db	109	;'m'
   345  0002AD  6F                 	db	111	;'o'
   346  0002AE  64                 	db	100	;'d'
   347  0002AF  65                 	db	101	;'e'
   348  0002B0  0A                 	db	10
   349  0002B1  00                 	db	0
   350  0002B2  43                 	db	67	;'C'
   351  0002B3  4C                 	db	76	;'L'
   352  0002B4  4F                 	db	79	;'O'
   353  0002B5  53                 	db	83	;'S'
   354  0002B6  45                 	db	69	;'E'
   355  0002B7  44                 	db	68	;'D'
   356  0002B8  00                 	db	0
   357  0002B9  45                 	db	69	;'E'
   358  0002BA  52                 	db	82	;'R'
   359  0002BB  52                 	db	82	;'R'
   360  0002BC  4F                 	db	79	;'O'
   361  0002BD  52                 	db	82	;'R'
   362  0002BE  00                 	db	0
   363  0002BF  41                 	db	65	;'A'
   364  0002C0  54                 	db	84	;'T'
   365  0002C1  0D                 	db	13
   366  0002C2  0A                 	db	10
   367  0002C3  00                 	db	0
   368  0002C4  2B                 	db	43
   369  0002C5  49                 	db	73	;'I'
   370  0002C6  50                 	db	80	;'P'
   371  0002C7  44                 	db	68	;'D'
   372  0002C8  00                 	db	0
   373  0002C9                     STR_20:
   374  0002C9  4F                 	db	79	;'O'
   375  0002CA  6B                 	db	107	;'k'
   376  0002CB  0A                 	db	10
   377  0002CC  00                 	db	0
   378  0002CD                     STR_12:
   379  0002CD  22                 	db	34
   380  0002CE  0D                 	db	13
   381  0002CF  0A                 	db	10
   382  0002D0  00                 	db	0
   383  0002D1  22                 	db	34
   384  0002D2  2C                 	db	44
   385  0002D3  22                 	db	34
   386  0002D4  00                 	db	0
   387  0002D5                     STR_23:
   388  0002D5  43                 	db	67	;'C'
   389  0002D6  48                 	db	72	;'H'
   390  0002D7  00                 	db	0
   391  0002D8                     STR_24:
   392  0002D8  43                 	db	67	;'C'
   393  0002D9  4C                 	db	76	;'L'
   394  0002DA  00                 	db	0
   395  0002DB  2C                 	db	44
   396  0002DC  00                 	db	0
   397  0002DD  3A                 	db	58	;':'
   398  0002DE  00                 	db	0
   399  0000                     
   400                           ; #config settings
   401  0002DF  00                 	db	0	; dummy byte at the end
   402  0000                     
   403                           	psect	cinit
   404  0006EC                     __pcinit:
   405                           	opt stack 0
   406  0006EC                     start_initialization:
   407                           	opt stack 0
   408  0006EC                     __initialization:
   409                           	opt stack 0
   410                           
   411                           ; Clear objects allocated to BANK1 (64 bytes)
   412  0006EC  EE01  F000         	lfsr	0,__pbssBANK1
   413  0006F0  0E40               	movlw	64
   414  0006F2                     clear_0:
   415  0006F2  6AEE               	clrf	postinc0,c
   416  0006F4  06E8               	decf	wreg,f,c
   417  0006F6  E1FD               	bnz	clear_0
   418                           
   419                           ; Clear objects allocated to BANK0 (128 bytes)
   420  0006F8  EE00  F060         	lfsr	0,__pbssBANK0
   421  0006FC  0E80               	movlw	128
   422  0006FE                     clear_1:
   423  0006FE  6AEE               	clrf	postinc0,c
   424  000700  06E8               	decf	wreg,f,c
   425  000702  E1FD               	bnz	clear_1
   426                           
   427                           ; Clear objects allocated to COMRAM (32 bytes)
   428  000704  EE00  F02B         	lfsr	0,__pbssCOMRAM
   429  000708  0E20               	movlw	32
   430  00070A                     clear_2:
   431  00070A  6AEE               	clrf	postinc0,c
   432  00070C  06E8               	decf	wreg,f,c
   433  00070E  E1FD               	bnz	clear_2
   434  000710                     end_of_initialization:
   435                           	opt stack 0
   436  000710                     __end_of__initialization:
   437                           	opt stack 0
   438  000710  9057               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   439  000712  9257               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   440  000714  0E00               	movlw	low (__Lmediumconst shr (0+16))
   441  000716  6EF8               	movwf	tblptru,c
   442  000718  0100               	movlb	0
   443  00071A  EF76  F002         	goto	_main	;jump to C main() function
   444                           tblptru	equ	0xFF8
   445                           postinc0	equ	0xFEE
   446                           wreg	equ	0xFE8
   447                           
   448                           	psect	bssCOMRAM
   449  00002B                     __pbssCOMRAM:
   450                           	opt stack 0
   451  00002B                     _ADC_value:
   452                           	opt stack 0
   453  00002B                     	ds	2
   454  00002D                     _WIFI_tx_buf_ind:
   455                           	opt stack 0
   456  00002D                     	ds	1
   457  00002E                     _TMR1_state:
   458                           	opt stack 0
   459  00002E                     	ds	1
   460  00002F                     _message_format:
   461                           	opt stack 0
   462  00002F                     	ds	1
   463  000030                     _ESP_wait_exception:
   464                           	opt stack 0
   465  000030                     	ds	1
   466  000031                     _esp_channel:
   467                           	opt stack 0
   468  000031                     	ds	1
   469  000032                     _esp_read_data_index:
   470                           	opt stack 0
   471  000032                     	ds	1
   472  000033                     _IOC_state:
   473                           	opt stack 0
   474  000033                     	ds	1
   475  000034                     _eusartRxCount:
   476                           	opt stack 0
   477  000034                     	ds	1
   478  000035                     _eusartRxTail:
   479                           	opt stack 0
   480  000035                     	ds	1
   481  000036                     _eusartRxHead:
   482                           	opt stack 0
   483  000036                     	ds	1
   484  000037                     _eusartTxTail:
   485                           	opt stack 0
   486  000037                     	ds	1
   487  000038                     _eusartTxHead:
   488                           	opt stack 0
   489  000038                     	ds	1
   490  000039                     _ADC_state:
   491                           	opt stack 0
   492  000039                     	ds	1
   493  00003A                     _ADC_count:
   494                           	opt stack 0
   495  00003A                     	ds	1
   496  00003B                     _esp_read_data:
   497                           	opt stack 0
   498  00003B                     	ds	16
   499                           tblptru	equ	0xFF8
   500                           postinc0	equ	0xFEE
   501                           wreg	equ	0xFE8
   502                           
   503                           	psect	bssBANK0
   504  000060                     __pbssBANK0:
   505                           	opt stack 0
   506  000060                     _eusartTxBuffer:
   507                           	opt stack 0
   508  000060                     	ds	64
   509  0000A0                     _WIFI_tx_buf:
   510                           	opt stack 0
   511  0000A0                     	ds	64
   512                           tblptru	equ	0xFF8
   513                           postinc0	equ	0xFEE
   514                           wreg	equ	0xFE8
   515                           
   516                           	psect	bssBANK1
   517  000100                     __pbssBANK1:
   518                           	opt stack 0
   519  000100                     _eusartRxBuffer:
   520                           	opt stack 0
   521  000100                     	ds	64
   522                           tblptru	equ	0xFF8
   523                           postinc0	equ	0xFEE
   524                           wreg	equ	0xFE8
   525                           
   526                           	psect	cstackCOMRAM
   527  000001                     __pcstackCOMRAM:
   528                           	opt stack 0
   529  000001                     ?_ADC1_GetConversionResult:
   530                           	opt stack 0
   531  000001                     TMR1_WriteTimer@timerVal:
   532                           	opt stack 0
   533                           
   534                           ; 2 bytes @ 0x0
   535  000001                     	ds	2
   536  000003                     ??_ADC1_GetConversionResult:
   537  000003                     
   538                           ; 1 bytes @ 0x2
   539  000003                     	ds	2
   540  000005                     ??_INTERRUPT_InterruptManager:
   541                           
   542                           ; 1 bytes @ 0x4
   543  000005                     	ds	4
   544  000009                     ??_ADC1_SelectChannel:
   545  000009                     ?___lwdiv:
   546                           	opt stack 0
   547  000009                     ?___lwmod:
   548                           	opt stack 0
   549  000009                     EUSART_Read@readValue:
   550                           	opt stack 0
   551  000009                     EUSART_Write@txData:
   552                           	opt stack 0
   553  000009                     IOCA4_SetInterruptHandler@InterruptHandler:
   554                           	opt stack 0
   555  000009                     EUSART_SetTxInterruptHandler@interruptHandler:
   556                           	opt stack 0
   557  000009                     EUSART_SetRxInterruptHandler@interruptHandler:
   558                           	opt stack 0
   559  000009                     TMR1_SetInterruptHandler@InterruptHandler:
   560                           	opt stack 0
   561  000009                     ESP_Set_application_handler@applicationHandler:
   562                           	opt stack 0
   563  000009                     ___lwdiv@dividend:
   564                           	opt stack 0
   565  000009                     ___lwmod@dividend:
   566                           	opt stack 0
   567                           
   568                           ; 2 bytes @ 0x8
   569  000009                     	ds	1
   570  00000A                     ADC1_SelectChannel@channel:
   571                           	opt stack 0
   572  00000A                     __puts@pt:
   573                           	opt stack 0
   574  00000A                     write@pt:
   575                           	opt stack 0
   576                           
   577                           ; 1 bytes @ 0x9
   578  00000A                     	ds	1
   579  00000B                     ??__puts:
   580  00000B                     write@lenght:
   581                           	opt stack 0
   582  00000B                     ___lwdiv@divisor:
   583                           	opt stack 0
   584  00000B                     ___lwmod@divisor:
   585                           	opt stack 0
   586                           
   587                           ; 2 bytes @ 0xA
   588  00000B                     	ds	1
   589  00000C                     __puts@index:
   590                           	opt stack 0
   591  00000C                     write@i:
   592                           	opt stack 0
   593                           
   594                           ; 1 bytes @ 0xB
   595  00000C                     	ds	1
   596  00000D                     ??_process_message:
   597  00000D                     ___lwmod@counter:
   598                           	opt stack 0
   599  00000D                     ___lwdiv@quotient:
   600                           	opt stack 0
   601                           
   602                           ; 2 bytes @ 0xC
   603  00000D                     	ds	2
   604  00000F                     process_message@message:
   605                           	opt stack 0
   606  00000F                     ___lwdiv@counter:
   607                           	opt stack 0
   608                           
   609                           ; 1 bytes @ 0xE
   610  00000F                     	ds	1
   611  000010                     __sprintf@mess:
   612                           	opt stack 0
   613  000010                     bt_message_handler@message:
   614                           	opt stack 0
   615                           
   616                           ; 1 bytes @ 0xF
   617  000010                     	ds	1
   618  000011                     __sprintf@val:
   619                           	opt stack 0
   620                           
   621                           ; 2 bytes @ 0x10
   622  000011                     	ds	2
   623  000013                     __sprintf@aux:
   624                           	opt stack 0
   625                           
   626                           ; 2 bytes @ 0x12
   627  000013                     	ds	2
   628  000015                     ??_read_analog:
   629                           
   630                           ; 1 bytes @ 0x14
   631  000015                     	ds	8
   632  00001D                     read_analog@mess:
   633                           	opt stack 0
   634                           
   635                           ; 6 bytes @ 0x1C
   636  00001D                     	ds	6
   637  000023                     read_analog@aux1:
   638                           	opt stack 0
   639                           
   640                           ; 4 bytes @ 0x22
   641  000023                     	ds	4
   642  000027                     read_analog@adc_val:
   643                           	opt stack 0
   644                           
   645                           ; 2 bytes @ 0x26
   646  000027                     	ds	2
   647  000029                     ??_main:
   648                           
   649                           ; 1 bytes @ 0x28
   650  000029                     	ds	2
   651                           tblptru	equ	0xFF8
   652                           postinc0	equ	0xFEE
   653                           wreg	equ	0xFE8
   654                           
   655 ;;
   656 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   657 ;;
   658 ;; *************** function _main *****************
   659 ;; Defined at:
   660 ;;		line 51 in file "main.c"
   661 ;; Parameters:    Size  Location     Type
   662 ;;		None
   663 ;; Auto vars:     Size  Location     Type
   664 ;;		None
   665 ;; Return value:  Size  Location     Type
   666 ;;                  1    wreg      void 
   667 ;; Registers used:
   668 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   669 ;; Tracked objects:
   670 ;;		On entry : 0/0
   671 ;;		On exit  : 0/0
   672 ;;		Unchanged: 0/0
   673 ;; Data sizes:     COMRAM   BANK0   BANK1
   674 ;;      Params:         0       0       0
   675 ;;      Locals:         0       0       0
   676 ;;      Temps:          2       0       0
   677 ;;      Totals:         2       0       0
   678 ;;Total ram usage:        2 bytes
   679 ;; Hardware stack levels required when called:    9
   680 ;; This function calls:
   681 ;;		_EUSART_is_rx_ready
   682 ;;		_SYSTEM_Initialize
   683 ;;		_bt_message_handler
   684 ;;		_logger_initialize
   685 ;;		_process_ioc
   686 ;;		_read_analog
   687 ;; This function is called by:
   688 ;;		Startup code after reset
   689 ;; This function uses a non-reentrant model
   690 ;;
   691                           
   692                           	psect	text0
   693  0004EC                     __ptext0:
   694                           	opt stack 0
   695  0004EC                     _main:
   696                           	opt stack 22
   697                           
   698                           ;main.c: 54:     SYSTEM_Initialize();
   699                           
   700                           ;incstack = 0
   701  0004EC  EC58  F004         	call	_SYSTEM_Initialize	;wreg free
   702                           
   703                           ;main.c: 60:     logger_initialize();
   704  0004F0  EC3A  F003         	call	_logger_initialize	;wreg free
   705                           
   706                           ;main.c: 67:     (INTCONbits.GIE = 1);
   707  0004F4  8EF2               	bsf	intcon,7,c	;volatile
   708                           
   709                           ;main.c: 73:     (INTCONbits.PEIE = 1);
   710  0004F6  8CF2               	bsf	intcon,6,c	;volatile
   711  0004F8  8A89               	bsf	3977,5,c	;volatile
   712                           
   713                           ;main.c: 79:     _delay((unsigned long)((200)*(64000000/4000.0)));
   714  0004FA  0E11               	movlw	17
   715  0004FC  6E2A               	movwf	(??_main+1)& (0+255),c
   716  0004FE  0E3C               	movlw	60
   717  000500  6E29               	movwf	??_main& (0+255),c
   718  000502  0ECB               	movlw	203
   719  000504                     u977:
   720  000504  2EE8               	decfsz	wreg,f,c
   721  000506  D7FE               	bra	u977
   722  000508  2E29               	decfsz	??_main& (0+255),f,c
   723  00050A  D7FC               	bra	u977
   724  00050C  2E2A               	decfsz	(??_main+1)& (0+255),f,c
   725  00050E  D7FA               	bra	u977
   726  000510  F000               	nop	
   727  000512  9A89               	bcf	3977,5,c	;volatile
   728                           
   729                           ;main.c: 81:     _delay((unsigned long)((200)*(64000000/4000.0)));
   730  000514  0E11               	movlw	17
   731  000516  6E2A               	movwf	(??_main+1)& (0+255),c
   732  000518  0E3C               	movlw	60
   733  00051A  6E29               	movwf	??_main& (0+255),c
   734  00051C  0ECB               	movlw	203
   735  00051E                     u987:
   736  00051E  2EE8               	decfsz	wreg,f,c
   737  000520  D7FE               	bra	u987
   738  000522  2E29               	decfsz	??_main& (0+255),f,c
   739  000524  D7FC               	bra	u987
   740  000526  2E2A               	decfsz	(??_main+1)& (0+255),f,c
   741  000528  D7FA               	bra	u987
   742  00052A  F000               	nop	
   743  00052C                     l2275:
   744                           
   745                           ;main.c: 95:     {;main.c: 98:         if (EUSART_is_rx_ready()) {
   746  00052C  ECC7  F004         	call	_EUSART_is_rx_ready	;wreg free
   747  000530  0900               	iorlw	0
   748  000532  E002               	bz	l2279
   749                           
   750                           ;main.c: 100:                 bt_message_handler();
   751  000534  EC99  F004         	call	_bt_message_handler	;wreg free
   752  000538                     l2279:
   753                           
   754                           ;main.c: 106:         if (ADC_state == ADC_READY) {
   755  000538  0439               	decf	_ADC_state,w,c	;volatile
   756  00053A  E102               	bnz	l2283
   757                           
   758                           ;main.c: 107:             read_analog();
   759  00053C  EC70  F001         	call	_read_analog	;wreg free
   760  000540                     l2283:
   761                           
   762                           ;main.c: 110:         if (IOC_state == IOC_READY) {
   763  000540  0433               	decf	_IOC_state,w,c	;volatile
   764  000542  E102               	bnz	l418
   765                           
   766                           ;main.c: 111:             process_ioc();
   767  000544  EC79  F004         	call	_process_ioc	;wreg free
   768  000548                     l418:
   769  000548  0004               	clrwdt		;# 
   770  00054A  D7F0               	goto	l2275
   771  00054C                     __end_of_main:
   772                           	opt stack 0
   773                           tblptru	equ	0xFF8
   774                           intcon	equ	0xFF2
   775                           postinc0	equ	0xFEE
   776                           wreg	equ	0xFE8
   777                           
   778 ;; *************** function _read_analog *****************
   779 ;; Defined at:
   780 ;;		line 97 in file "logger.c"
   781 ;; Parameters:    Size  Location     Type
   782 ;;		None
   783 ;; Auto vars:     Size  Location     Type
   784 ;;  mess            6   28[COMRAM] unsigned char [6]
   785 ;;  aux1            4   34[COMRAM] unsigned long 
   786 ;;  adc_val         2   38[COMRAM] unsigned short 
   787 ;; Return value:  Size  Location     Type
   788 ;;                  1    wreg      void 
   789 ;; Registers used:
   790 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   791 ;; Tracked objects:
   792 ;;		On entry : 0/0
   793 ;;		On exit  : 0/0
   794 ;;		Unchanged: 0/0
   795 ;; Data sizes:     COMRAM   BANK0   BANK1
   796 ;;      Params:         0       0       0
   797 ;;      Locals:        12       0       0
   798 ;;      Temps:          8       0       0
   799 ;;      Totals:        20       0       0
   800 ;;Total ram usage:       20 bytes
   801 ;; Hardware stack levels used:    1
   802 ;; Hardware stack levels required when called:    6
   803 ;; This function calls:
   804 ;;		__sprintf
   805 ;;		_write
   806 ;; This function is called by:
   807 ;;		_main
   808 ;; This function uses a non-reentrant model
   809 ;;
   810                           
   811                           	psect	text1
   812  0002E0                     __ptext1:
   813                           	opt stack 0
   814  0002E0                     _read_analog:
   815                           	opt stack 24
   816                           
   817                           ;logger.c: 99:     unsigned short adc_val;;logger.c: 101:     unsigned long aux1;;logger
      +                          .c: 102:     unsigned char mess[6];;logger.c: 104:     adc_val = ADC_value;
   818                           
   819                           ;incstack = 0
   820  0002E0  C02B  F027         	movff	_ADC_value,read_analog@adc_val	;volatile
   821  0002E4  C02C  F028         	movff	_ADC_value+1,read_analog@adc_val+1	;volatile
   822                           
   823                           ;logger.c: 105:     ADC_state = ADC_IDLE;
   824  0002E8  6A39               	clrf	_ADC_state,c	;volatile
   825                           
   826                           ;logger.c: 107:     if (message_format == MESSAGE_BINARY) {
   827  0002EA  502F               	movf	_message_format,w,c	;volatile
   828  0002EC  E11A               	bnz	l2213
   829                           
   830                           ;logger.c: 108:        WIFI_tx_buf[WIFI_tx_buf_ind++] = (unsigned char)(adc_val & 0xff);
   831  0002EE  502D               	movf	_WIFI_tx_buf_ind,w,c
   832  0002F0  0FA0               	addlw	low _WIFI_tx_buf
   833  0002F2  6ED9               	movwf	fsr2l,c
   834  0002F4  6ADA               	clrf	fsr2h,c
   835  0002F6  C027  FFDF         	movff	read_analog@adc_val,indf2
   836  0002FA  2A2D               	incf	_WIFI_tx_buf_ind,f,c	;volatile
   837                           
   838                           ;logger.c: 109:        WIFI_tx_buf[WIFI_tx_buf_ind++] = (unsigned char)((adc_val >> 8) &
      +                           0xff);
   839  0002FC  502D               	movf	_WIFI_tx_buf_ind,w,c
   840  0002FE  0FA0               	addlw	low _WIFI_tx_buf
   841  000300  6ED9               	movwf	fsr2l,c
   842  000302  6ADA               	clrf	fsr2h,c
   843  000304  C028  FFDF         	movff	read_analog@adc_val+1,indf2
   844  000308  2A2D               	incf	_WIFI_tx_buf_ind,f,c	;volatile
   845                           
   846                           ;logger.c: 111:        if (WIFI_tx_buf_ind == 64) {
   847  00030A  0E40               	movlw	64
   848  00030C  182D               	xorwf	_WIFI_tx_buf_ind,w,c	;volatile
   849  00030E  A4D8               	btfss	status,2,c
   850  000310  0012               	return	
   851                           
   852                           ;logger.c: 113:                 write(WIFI_tx_buf,64);
   853  000312  0EA0               	movlw	low _WIFI_tx_buf
   854  000314  6E0A               	movwf	write@pt,c
   855  000316  0E40               	movlw	64
   856  000318  6E0B               	movwf	write@lenght,c
   857  00031A  EC0C  F004         	call	_write	;wreg free
   858                           
   859                           ;logger.c: 118:             WIFI_tx_buf_ind = 0;
   860  00031E  6A2D               	clrf	_WIFI_tx_buf_ind,c	;volatile
   861  000320  0012               	return	
   862  000322                     l2213:
   863                           
   864                           ;logger.c: 122:         aux1 = (unsigned long)adc_val*3300UL;
   865  000322  5027               	movf	read_analog@adc_val,w,c
   866  000324  6E15               	movwf	??_read_analog& (0+255),c
   867  000326  5028               	movf	read_analog@adc_val+1,w,c
   868  000328  6E16               	movwf	(??_read_analog+1)& (0+255),c
   869  00032A  6A17               	clrf	(??_read_analog+2)& (0+255),c
   870  00032C  6A18               	clrf	(??_read_analog+3)& (0+255),c
   871  00032E  0EE4               	movlw	228
   872  000330  0215               	mulwf	??_read_analog& (0+255),c
   873  000332  CFF3 F019          	movff	prodl,??_read_analog+4
   874  000336  CFF4 F01A          	movff	prodh,??_read_analog+5
   875  00033A  6A1B               	clrf	(??_read_analog+6)& (0+255),c
   876  00033C  6A1C               	clrf	(??_read_analog+7)& (0+255),c
   877  00033E  0216               	mulwf	(??_read_analog+1)& (0+255),c
   878  000340  50F3               	movf	prodl,w,c
   879  000342  261A               	addwf	(??_read_analog+5)& (0+255),f,c
   880  000344  50F4               	movf	prodh,w,c
   881  000346  221B               	addwfc	(??_read_analog+6)& (0+255),f,c
   882  000348  0E00               	movlw	0
   883  00034A  221C               	addwfc	(??_read_analog+7)& (0+255),f,c
   884  00034C  0E0C               	movlw	12
   885  00034E  0215               	mulwf	??_read_analog& (0+255),c
   886  000350  50F3               	movf	prodl,w,c
   887  000352  261A               	addwf	(??_read_analog+5)& (0+255),f,c
   888  000354  50F4               	movf	prodh,w,c
   889  000356  221B               	addwfc	(??_read_analog+6)& (0+255),f,c
   890  000358  0E00               	movlw	0
   891  00035A  221C               	addwfc	(??_read_analog+7)& (0+255),f,c
   892  00035C  0EE4               	movlw	228
   893  00035E  0217               	mulwf	(??_read_analog+2)& (0+255),c
   894  000360  50F3               	movf	prodl,w,c
   895  000362  261B               	addwf	(??_read_analog+6)& (0+255),f,c
   896  000364  50F4               	movf	prodh,w,c
   897  000366  221C               	addwfc	(??_read_analog+7)& (0+255),f,c
   898  000368  0E0C               	movlw	12
   899  00036A  0216               	mulwf	(??_read_analog+1)& (0+255),c
   900  00036C  50F3               	movf	prodl,w,c
   901  00036E  261B               	addwf	(??_read_analog+6)& (0+255),f,c
   902  000370  50F4               	movf	prodh,w,c
   903  000372  221C               	addwfc	(??_read_analog+7)& (0+255),f,c
   904  000374  0E00               	movlw	0
   905  000376  0215               	mulwf	??_read_analog& (0+255),c
   906  000378  50F3               	movf	prodl,w,c
   907  00037A  261B               	addwf	(??_read_analog+6)& (0+255),f,c
   908  00037C  50F4               	movf	prodh,w,c
   909  00037E  221C               	addwfc	(??_read_analog+7)& (0+255),f,c
   910  000380  0EE4               	movlw	228
   911  000382  0218               	mulwf	(??_read_analog+3)& (0+255),c
   912  000384  50F3               	movf	prodl,w,c
   913  000386  261C               	addwf	(??_read_analog+7)& (0+255),f,c
   914  000388  0E0C               	movlw	12
   915  00038A  0217               	mulwf	(??_read_analog+2)& (0+255),c
   916  00038C  50F3               	movf	prodl,w,c
   917  00038E  261C               	addwf	(??_read_analog+7)& (0+255),f,c
   918  000390  0E00               	movlw	0
   919  000392  0216               	mulwf	(??_read_analog+1)& (0+255),c
   920  000394  50F3               	movf	prodl,w,c
   921  000396  261C               	addwf	(??_read_analog+7)& (0+255),f,c
   922  000398  0E00               	movlw	0
   923  00039A  0215               	mulwf	??_read_analog& (0+255),c
   924  00039C  50F3               	movf	prodl,w,c
   925  00039E  261C               	addwf	(??_read_analog+7)& (0+255),f,c
   926  0003A0  C019  F023         	movff	??_read_analog+4,read_analog@aux1
   927  0003A4  C01A  F024         	movff	??_read_analog+5,read_analog@aux1+1
   928  0003A8  C01B  F025         	movff	??_read_analog+6,read_analog@aux1+2
   929  0003AC  C01C  F026         	movff	??_read_analog+7,read_analog@aux1+3
   930                           
   931                           ;logger.c: 123:         adc_val = (unsigned short)(aux1 >> 10);
   932  0003B0  C023  F015         	movff	read_analog@aux1,??_read_analog
   933  0003B4  C024  F016         	movff	read_analog@aux1+1,??_read_analog+1
   934  0003B8  C025  F017         	movff	read_analog@aux1+2,??_read_analog+2
   935  0003BC  C026  F018         	movff	read_analog@aux1+3,??_read_analog+3
   936  0003C0  0E0B               	movlw	11
   937  0003C2  D005               	goto	u790
   938  0003C4                     u795:
   939  0003C4  90D8               	bcf	status,0,c
   940  0003C6  3218               	rrcf	??_read_analog+3,f,c
   941  0003C8  3217               	rrcf	??_read_analog+2,f,c
   942  0003CA  3216               	rrcf	??_read_analog+1,f,c
   943  0003CC  3215               	rrcf	??_read_analog,f,c
   944  0003CE                     u790:
   945  0003CE  2EE8               	decfsz	wreg,f,c
   946  0003D0  D7F9               	goto	u795
   947  0003D2  C015  F027         	movff	??_read_analog,read_analog@adc_val
   948  0003D6  C016  F028         	movff	??_read_analog+1,read_analog@adc_val+1
   949                           
   950                           ;logger.c: 125:         _sprintf(mess,adc_val);
   951  0003DA  0E1D               	movlw	low read_analog@mess
   952  0003DC  6E10               	movwf	__sprintf@mess,c
   953  0003DE  C027  F011         	movff	read_analog@adc_val,__sprintf@val
   954  0003E2  C028  F012         	movff	read_analog@adc_val+1,__sprintf@val+1
   955  0003E6  ECFD  F001         	call	__sprintf	;wreg free
   956                           
   957                           ;logger.c: 126:         mess[5] = '\n';
   958  0003EA  0E0A               	movlw	10
   959  0003EC  6E22               	movwf	read_analog@mess+5,c
   960                           
   961                           ;logger.c: 128:             write(mess,6);
   962  0003EE  0E1D               	movlw	low read_analog@mess
   963  0003F0  6E0A               	movwf	write@pt,c
   964  0003F2  0E06               	movlw	6
   965  0003F4  6E0B               	movwf	write@lenght,c
   966  0003F6  EF0C  F004         	goto	_write	;wreg free
   967  0003FA                     __end_of_read_analog:
   968                           	opt stack 0
   969                           tblptru	equ	0xFF8
   970                           prodh	equ	0xFF4
   971                           prodl	equ	0xFF3
   972                           intcon	equ	0xFF2
   973                           postinc0	equ	0xFEE
   974                           wreg	equ	0xFE8
   975                           indf2	equ	0xFDF
   976                           fsr2h	equ	0xFDA
   977                           fsr2l	equ	0xFD9
   978                           status	equ	0xFD8
   979                           
   980 ;; *************** function _write *****************
   981 ;; Defined at:
   982 ;;		line 15 in file "comm.c"
   983 ;; Parameters:    Size  Location     Type
   984 ;;  pt              1    9[COMRAM] PTR unsigned char 
   985 ;;		 -> read_wifi_settings@pass(14), read_wifi_settings@wifi(10), read_analog@mess(6), WIFI_tx_buf(64), 
   986 ;;		 -> ESP_write@res(1), ESP_write@aux(1), 
   987 ;;  lenght          1   10[COMRAM] unsigned char 
   988 ;; Auto vars:     Size  Location     Type
   989 ;;  i               1   11[COMRAM] unsigned char 
   990 ;; Return value:  Size  Location     Type
   991 ;;                  1    wreg      void 
   992 ;; Registers used:
   993 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   994 ;; Tracked objects:
   995 ;;		On entry : 0/0
   996 ;;		On exit  : 0/0
   997 ;;		Unchanged: 0/0
   998 ;; Data sizes:     COMRAM   BANK0   BANK1
   999 ;;      Params:         2       0       0
  1000 ;;      Locals:         1       0       0
  1001 ;;      Temps:          0       0       0
  1002 ;;      Totals:         3       0       0
  1003 ;;Total ram usage:        3 bytes
  1004 ;; Hardware stack levels used:    1
  1005 ;; Hardware stack levels required when called:    5
  1006 ;; This function calls:
  1007 ;;		_EUSART_Write
  1008 ;;		_EUSART_is_tx_ready
  1009 ;; This function is called by:
  1010 ;;		_read_analog
  1011 ;; This function uses a non-reentrant model
  1012 ;;
  1013                           
  1014                           	psect	text2
  1015  000818                     __ptext2:
  1016                           	opt stack 0
  1017  000818                     _write:
  1018                           	opt stack 24
  1019                           
  1020                           ;comm.c: 15: void write(unsigned char *pt, unsigned char lenght);comm.c: 16: {;comm.c: 1
      +                          7:     unsigned char i;;comm.c: 19:     for (i=0; i<lenght; i++) {
  1021                           
  1022                           ;incstack = 0
  1023  000818  6A0C               	clrf	write@i,c
  1024  00081A  D00C               	goto	l2055
  1025  00081C                     l2049:
  1026  00081C  ECBD  F004         	call	_EUSART_is_tx_ready	;wreg free
  1027  000820  0900               	iorlw	0
  1028  000822  E0FC               	bz	l2049
  1029                           
  1030                           ;comm.c: 21:         EUSART_Write(pt[i]);
  1031  000824  500A               	movf	write@pt,w,c
  1032  000826  240C               	addwf	write@i,w,c
  1033  000828  6ED9               	movwf	fsr2l,c
  1034  00082A  6ADA               	clrf	fsr2h,c
  1035  00082C  50DF               	movf	indf2,w,c
  1036  00082E  EC8F  F003         	call	_EUSART_Write
  1037                           
  1038                           ;comm.c: 22:     }
  1039  000832  2A0C               	incf	write@i,f,c
  1040  000834                     l2055:
  1041  000834  500B               	movf	write@lenght,w,c
  1042  000836  5C0C               	subwf	write@i,w,c
  1043  000838  E3F1               	bnc	l2049
  1044  00083A  0012               	return		;funcret
  1045  00083C                     __end_of_write:
  1046                           	opt stack 0
  1047                           tblptru	equ	0xFF8
  1048                           prodh	equ	0xFF4
  1049                           prodl	equ	0xFF3
  1050                           intcon	equ	0xFF2
  1051                           postinc0	equ	0xFEE
  1052                           wreg	equ	0xFE8
  1053                           indf2	equ	0xFDF
  1054                           fsr2h	equ	0xFDA
  1055                           fsr2l	equ	0xFD9
  1056                           status	equ	0xFD8
  1057                           
  1058 ;; *************** function __sprintf *****************
  1059 ;; Defined at:
  1060 ;;		line 25 in file "comm.c"
  1061 ;; Parameters:    Size  Location     Type
  1062 ;;  mess            1   15[COMRAM] PTR unsigned char 
  1063 ;;		 -> read_analog@mess(6), 
  1064 ;;  val             2   16[COMRAM] unsigned short 
  1065 ;; Auto vars:     Size  Location     Type
  1066 ;;  aux             2   18[COMRAM] unsigned short 
  1067 ;; Return value:  Size  Location     Type
  1068 ;;                  1    wreg      void 
  1069 ;; Registers used:
  1070 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1071 ;; Tracked objects:
  1072 ;;		On entry : 0/0
  1073 ;;		On exit  : 0/0
  1074 ;;		Unchanged: 0/0
  1075 ;; Data sizes:     COMRAM   BANK0   BANK1
  1076 ;;      Params:         3       0       0
  1077 ;;      Locals:         2       0       0
  1078 ;;      Temps:          0       0       0
  1079 ;;      Totals:         5       0       0
  1080 ;;Total ram usage:        5 bytes
  1081 ;; Hardware stack levels used:    1
  1082 ;; Hardware stack levels required when called:    5
  1083 ;; This function calls:
  1084 ;;		___lwdiv
  1085 ;;		___lwmod
  1086 ;; This function is called by:
  1087 ;;		_read_analog
  1088 ;; This function uses a non-reentrant model
  1089 ;;
  1090                           
  1091                           	psect	text3
  1092  0003FA                     __ptext3:
  1093                           	opt stack 0
  1094  0003FA                     __sprintf:
  1095                           	opt stack 24
  1096                           
  1097                           ;comm.c: 25: void _sprintf(char *mess, unsigned short val);comm.c: 26: {;comm.c: 27:   u
      +                          nsigned short aux;;comm.c: 31:   aux = val%10;
  1098                           
  1099                           ;incstack = 0
  1100  0003FA  C011  F009         	movff	__sprintf@val,___lwmod@dividend
  1101  0003FE  C012  F00A         	movff	__sprintf@val+1,___lwmod@dividend+1
  1102  000402  6A0C               	clrf	___lwmod@divisor+1,c
  1103  000404  0E0A               	movlw	10
  1104  000406  6E0B               	movwf	___lwmod@divisor,c
  1105  000408  EC1B  F003         	call	___lwmod	;wreg free
  1106  00040C  C009  F013         	movff	?___lwmod,__sprintf@aux
  1107  000410  C00A  F014         	movff	?___lwmod+1,__sprintf@aux+1
  1108                           
  1109                           ;comm.c: 32:   val /= 10;
  1110  000414  C011  F009         	movff	__sprintf@val,___lwdiv@dividend
  1111  000418  C012  F00A         	movff	__sprintf@val+1,___lwdiv@dividend+1
  1112  00041C  6A0C               	clrf	___lwdiv@divisor+1,c
  1113  00041E  0E0A               	movlw	10
  1114  000420  6E0B               	movwf	___lwdiv@divisor,c
  1115  000422  ECD6  F002         	call	___lwdiv	;wreg free
  1116  000426  C009  F011         	movff	?___lwdiv,__sprintf@val
  1117  00042A  C00A  F012         	movff	?___lwdiv+1,__sprintf@val+1
  1118                           
  1119                           ;comm.c: 34:   mess[5] = 0x00;
  1120  00042E  5010               	movf	__sprintf@mess,w,c
  1121  000430  6ED9               	movwf	fsr2l,c
  1122  000432  6ADA               	clrf	fsr2h,c
  1123  000434  0E05               	movlw	5
  1124  000436  26D9               	addwf	fsr2l,f,c
  1125  000438  6ADF               	clrf	indf2,c
  1126                           
  1127                           ;comm.c: 36:   mess[4] = (unsigned char)aux+'0';
  1128  00043A  5010               	movf	__sprintf@mess,w,c
  1129  00043C  6ED9               	movwf	fsr2l,c
  1130  00043E  6ADA               	clrf	fsr2h,c
  1131  000440  0E04               	movlw	4
  1132  000442  26D9               	addwf	fsr2l,f,c
  1133  000444  5013               	movf	__sprintf@aux,w,c
  1134  000446  0F30               	addlw	48
  1135  000448  6EDF               	movwf	indf2,c
  1136                           
  1137                           ;comm.c: 38:   aux = val%10;
  1138  00044A  C011  F009         	movff	__sprintf@val,___lwmod@dividend
  1139  00044E  C012  F00A         	movff	__sprintf@val+1,___lwmod@dividend+1
  1140  000452  6A0C               	clrf	___lwmod@divisor+1,c
  1141  000454  0E0A               	movlw	10
  1142  000456  6E0B               	movwf	___lwmod@divisor,c
  1143  000458  EC1B  F003         	call	___lwmod	;wreg free
  1144  00045C  C009  F013         	movff	?___lwmod,__sprintf@aux
  1145  000460  C00A  F014         	movff	?___lwmod+1,__sprintf@aux+1
  1146                           
  1147                           ;comm.c: 39:   val /= 10;
  1148  000464  C011  F009         	movff	__sprintf@val,___lwdiv@dividend
  1149  000468  C012  F00A         	movff	__sprintf@val+1,___lwdiv@dividend+1
  1150  00046C  6A0C               	clrf	___lwdiv@divisor+1,c
  1151  00046E  0E0A               	movlw	10
  1152  000470  6E0B               	movwf	___lwdiv@divisor,c
  1153  000472  ECD6  F002         	call	___lwdiv	;wreg free
  1154  000476  C009  F011         	movff	?___lwdiv,__sprintf@val
  1155  00047A  C00A  F012         	movff	?___lwdiv+1,__sprintf@val+1
  1156                           
  1157                           ;comm.c: 41:   mess[3] = (unsigned char)aux+'0';
  1158  00047E  5010               	movf	__sprintf@mess,w,c
  1159  000480  6ED9               	movwf	fsr2l,c
  1160  000482  6ADA               	clrf	fsr2h,c
  1161  000484  0E03               	movlw	3
  1162  000486  26D9               	addwf	fsr2l,f,c
  1163  000488  5013               	movf	__sprintf@aux,w,c
  1164  00048A  0F30               	addlw	48
  1165  00048C  6EDF               	movwf	indf2,c
  1166                           
  1167                           ;comm.c: 43:   aux = val%10;
  1168  00048E  C011  F009         	movff	__sprintf@val,___lwmod@dividend
  1169  000492  C012  F00A         	movff	__sprintf@val+1,___lwmod@dividend+1
  1170  000496  6A0C               	clrf	___lwmod@divisor+1,c
  1171  000498  0E0A               	movlw	10
  1172  00049A  6E0B               	movwf	___lwmod@divisor,c
  1173  00049C  EC1B  F003         	call	___lwmod	;wreg free
  1174  0004A0  C009  F013         	movff	?___lwmod,__sprintf@aux
  1175  0004A4  C00A  F014         	movff	?___lwmod+1,__sprintf@aux+1
  1176                           
  1177                           ;comm.c: 44:   val /= 10;
  1178  0004A8  C011  F009         	movff	__sprintf@val,___lwdiv@dividend
  1179  0004AC  C012  F00A         	movff	__sprintf@val+1,___lwdiv@dividend+1
  1180  0004B0  6A0C               	clrf	___lwdiv@divisor+1,c
  1181  0004B2  0E0A               	movlw	10
  1182  0004B4  6E0B               	movwf	___lwdiv@divisor,c
  1183  0004B6  ECD6  F002         	call	___lwdiv	;wreg free
  1184  0004BA  C009  F011         	movff	?___lwdiv,__sprintf@val
  1185  0004BE  C00A  F012         	movff	?___lwdiv+1,__sprintf@val+1
  1186                           
  1187                           ;comm.c: 46:   mess[2] = (unsigned char)aux+'0';
  1188  0004C2  5010               	movf	__sprintf@mess,w,c
  1189  0004C4  6ED9               	movwf	fsr2l,c
  1190  0004C6  6ADA               	clrf	fsr2h,c
  1191  0004C8  0E02               	movlw	2
  1192  0004CA  26D9               	addwf	fsr2l,f,c
  1193  0004CC  5013               	movf	__sprintf@aux,w,c
  1194  0004CE  0F30               	addlw	48
  1195  0004D0  6EDF               	movwf	indf2,c
  1196                           
  1197                           ;comm.c: 47:   mess[1] = '.';
  1198  0004D2  5010               	movf	__sprintf@mess,w,c
  1199  0004D4  6ED9               	movwf	fsr2l,c
  1200  0004D6  6ADA               	clrf	fsr2h,c
  1201  0004D8  2AD9               	incf	fsr2l,f,c
  1202  0004DA  0E2E               	movlw	46
  1203  0004DC  6EDF               	movwf	indf2,c
  1204                           
  1205                           ;comm.c: 48:   mess[0] = (unsigned char)val+'0';
  1206  0004DE  5010               	movf	__sprintf@mess,w,c
  1207  0004E0  6ED9               	movwf	fsr2l,c
  1208  0004E2  6ADA               	clrf	fsr2h,c
  1209  0004E4  5011               	movf	__sprintf@val,w,c
  1210  0004E6  0F30               	addlw	48
  1211  0004E8  6EDF               	movwf	indf2,c
  1212  0004EA  0012               	return		;funcret
  1213  0004EC                     __end_of__sprintf:
  1214                           	opt stack 0
  1215                           tblptru	equ	0xFF8
  1216                           prodh	equ	0xFF4
  1217                           prodl	equ	0xFF3
  1218                           intcon	equ	0xFF2
  1219                           postinc0	equ	0xFEE
  1220                           wreg	equ	0xFE8
  1221                           indf2	equ	0xFDF
  1222                           fsr2h	equ	0xFDA
  1223                           fsr2l	equ	0xFD9
  1224                           status	equ	0xFD8
  1225                           
  1226 ;; *************** function ___lwmod *****************
  1227 ;; Defined at:
  1228 ;;		line 7 in file "/opt/microchip/xc8/v2.00/pic/sources/c99/common/lwmod.c"
  1229 ;; Parameters:    Size  Location     Type
  1230 ;;  dividend        2    8[COMRAM] unsigned int 
  1231 ;;  divisor         2   10[COMRAM] unsigned int 
  1232 ;; Auto vars:     Size  Location     Type
  1233 ;;  counter         1   12[COMRAM] unsigned char 
  1234 ;; Return value:  Size  Location     Type
  1235 ;;                  2    8[COMRAM] unsigned int 
  1236 ;; Registers used:
  1237 ;;		wreg, status,2, status,0
  1238 ;; Tracked objects:
  1239 ;;		On entry : 0/0
  1240 ;;		On exit  : 0/0
  1241 ;;		Unchanged: 0/0
  1242 ;; Data sizes:     COMRAM   BANK0   BANK1
  1243 ;;      Params:         4       0       0
  1244 ;;      Locals:         1       0       0
  1245 ;;      Temps:          0       0       0
  1246 ;;      Totals:         5       0       0
  1247 ;;Total ram usage:        5 bytes
  1248 ;; Hardware stack levels used:    1
  1249 ;; Hardware stack levels required when called:    4
  1250 ;; This function calls:
  1251 ;;		Nothing
  1252 ;; This function is called by:
  1253 ;;		__sprintf
  1254 ;; This function uses a non-reentrant model
  1255 ;;
  1256                           
  1257                           	psect	text4
  1258  000636                     __ptext4:
  1259                           	opt stack 0
  1260  000636                     ___lwmod:
  1261                           	opt stack 24
  1262                           
  1263                           ;incstack = 0
  1264  000636  500B               	movf	___lwmod@divisor,w,c
  1265  000638  100C               	iorwf	___lwmod@divisor+1,w,c
  1266  00063A  E017               	bz	l1182
  1267  00063C  0E01               	movlw	1
  1268  00063E  6E0D               	movwf	___lwmod@counter,c
  1269  000640  D004               	goto	l1927
  1270  000642                     l1925:
  1271  000642  90D8               	bcf	status,0,c
  1272  000644  360B               	rlcf	___lwmod@divisor,f,c
  1273  000646  360C               	rlcf	___lwmod@divisor+1,f,c
  1274  000648  2A0D               	incf	___lwmod@counter,f,c
  1275  00064A                     l1927:
  1276  00064A  AE0C               	btfss	___lwmod@divisor+1,7,c
  1277  00064C  D7FA               	goto	l1925
  1278  00064E                     u590:
  1279  00064E  500B               	movf	___lwmod@divisor,w,c
  1280  000650  5C09               	subwf	___lwmod@dividend,w,c
  1281  000652  500C               	movf	___lwmod@divisor+1,w,c
  1282  000654  580A               	subwfb	___lwmod@dividend+1,w,c
  1283  000656  E304               	bnc	l1933
  1284  000658  500B               	movf	___lwmod@divisor,w,c
  1285  00065A  5E09               	subwf	___lwmod@dividend,f,c
  1286  00065C  500C               	movf	___lwmod@divisor+1,w,c
  1287  00065E  5A0A               	subwfb	___lwmod@dividend+1,f,c
  1288  000660                     l1933:
  1289  000660  90D8               	bcf	status,0,c
  1290  000662  320C               	rrcf	___lwmod@divisor+1,f,c
  1291  000664  320B               	rrcf	___lwmod@divisor,f,c
  1292  000666  2E0D               	decfsz	___lwmod@counter,f,c
  1293  000668  D7F2               	goto	u590
  1294  00066A                     l1182:
  1295  00066A  C009  F009         	movff	___lwmod@dividend,?___lwmod
  1296  00066E  C00A  F00A         	movff	___lwmod@dividend+1,?___lwmod+1
  1297  000672  0012               	return		;funcret
  1298  000674                     __end_of___lwmod:
  1299                           	opt stack 0
  1300                           tblptru	equ	0xFF8
  1301                           prodh	equ	0xFF4
  1302                           prodl	equ	0xFF3
  1303                           intcon	equ	0xFF2
  1304                           postinc0	equ	0xFEE
  1305                           wreg	equ	0xFE8
  1306                           indf2	equ	0xFDF
  1307                           fsr2h	equ	0xFDA
  1308                           fsr2l	equ	0xFD9
  1309                           status	equ	0xFD8
  1310                           
  1311 ;; *************** function ___lwdiv *****************
  1312 ;; Defined at:
  1313 ;;		line 7 in file "/opt/microchip/xc8/v2.00/pic/sources/c99/common/lwdiv.c"
  1314 ;; Parameters:    Size  Location     Type
  1315 ;;  dividend        2    8[COMRAM] unsigned int 
  1316 ;;  divisor         2   10[COMRAM] unsigned int 
  1317 ;; Auto vars:     Size  Location     Type
  1318 ;;  quotient        2   12[COMRAM] unsigned int 
  1319 ;;  counter         1   14[COMRAM] unsigned char 
  1320 ;; Return value:  Size  Location     Type
  1321 ;;                  2    8[COMRAM] unsigned int 
  1322 ;; Registers used:
  1323 ;;		wreg, status,2, status,0
  1324 ;; Tracked objects:
  1325 ;;		On entry : 0/0
  1326 ;;		On exit  : 0/0
  1327 ;;		Unchanged: 0/0
  1328 ;; Data sizes:     COMRAM   BANK0   BANK1
  1329 ;;      Params:         4       0       0
  1330 ;;      Locals:         3       0       0
  1331 ;;      Temps:          0       0       0
  1332 ;;      Totals:         7       0       0
  1333 ;;Total ram usage:        7 bytes
  1334 ;; Hardware stack levels used:    1
  1335 ;; Hardware stack levels required when called:    4
  1336 ;; This function calls:
  1337 ;;		Nothing
  1338 ;; This function is called by:
  1339 ;;		__sprintf
  1340 ;; This function uses a non-reentrant model
  1341 ;;
  1342                           
  1343                           	psect	text5
  1344  0005AC                     __ptext5:
  1345                           	opt stack 0
  1346  0005AC                     ___lwdiv:
  1347                           	opt stack 24
  1348                           
  1349                           ;incstack = 0
  1350  0005AC  6A0D               	clrf	___lwdiv@quotient,c
  1351  0005AE  6A0E               	clrf	___lwdiv@quotient+1,c
  1352  0005B0  500B               	movf	___lwdiv@divisor,w,c
  1353  0005B2  100C               	iorwf	___lwdiv@divisor+1,w,c
  1354  0005B4  E01B               	bz	l1172
  1355  0005B6  0E01               	movlw	1
  1356  0005B8  6E0F               	movwf	___lwdiv@counter,c
  1357  0005BA  D004               	goto	l1907
  1358  0005BC                     l1905:
  1359  0005BC  90D8               	bcf	status,0,c
  1360  0005BE  360B               	rlcf	___lwdiv@divisor,f,c
  1361  0005C0  360C               	rlcf	___lwdiv@divisor+1,f,c
  1362  0005C2  2A0F               	incf	___lwdiv@counter,f,c
  1363  0005C4                     l1907:
  1364  0005C4  AE0C               	btfss	___lwdiv@divisor+1,7,c
  1365  0005C6  D7FA               	goto	l1905
  1366  0005C8                     u560:
  1367  0005C8  90D8               	bcf	status,0,c
  1368  0005CA  360D               	rlcf	___lwdiv@quotient,f,c
  1369  0005CC  360E               	rlcf	___lwdiv@quotient+1,f,c
  1370  0005CE  500B               	movf	___lwdiv@divisor,w,c
  1371  0005D0  5C09               	subwf	___lwdiv@dividend,w,c
  1372  0005D2  500C               	movf	___lwdiv@divisor+1,w,c
  1373  0005D4  580A               	subwfb	___lwdiv@dividend+1,w,c
  1374  0005D6  E305               	bnc	l1917
  1375  0005D8  500B               	movf	___lwdiv@divisor,w,c
  1376  0005DA  5E09               	subwf	___lwdiv@dividend,f,c
  1377  0005DC  500C               	movf	___lwdiv@divisor+1,w,c
  1378  0005DE  5A0A               	subwfb	___lwdiv@dividend+1,f,c
  1379  0005E0  800D               	bsf	___lwdiv@quotient,0,c
  1380  0005E2                     l1917:
  1381  0005E2  90D8               	bcf	status,0,c
  1382  0005E4  320C               	rrcf	___lwdiv@divisor+1,f,c
  1383  0005E6  320B               	rrcf	___lwdiv@divisor,f,c
  1384  0005E8  2E0F               	decfsz	___lwdiv@counter,f,c
  1385  0005EA  D7EE               	goto	u560
  1386  0005EC                     l1172:
  1387  0005EC  C00D  F009         	movff	___lwdiv@quotient,?___lwdiv
  1388  0005F0  C00E  F00A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1389  0005F4  0012               	return		;funcret
  1390  0005F6                     __end_of___lwdiv:
  1391                           	opt stack 0
  1392                           tblptru	equ	0xFF8
  1393                           prodh	equ	0xFF4
  1394                           prodl	equ	0xFF3
  1395                           intcon	equ	0xFF2
  1396                           postinc0	equ	0xFEE
  1397                           wreg	equ	0xFE8
  1398                           indf2	equ	0xFDF
  1399                           fsr2h	equ	0xFDA
  1400                           fsr2l	equ	0xFD9
  1401                           status	equ	0xFD8
  1402                           
  1403 ;; *************** function _process_ioc *****************
  1404 ;; Defined at:
  1405 ;;		line 172 in file "logger.c"
  1406 ;; Parameters:    Size  Location     Type
  1407 ;;		None
  1408 ;; Auto vars:     Size  Location     Type
  1409 ;;		None
  1410 ;; Return value:  Size  Location     Type
  1411 ;;                  1    wreg      void 
  1412 ;; Registers used:
  1413 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1414 ;; Tracked objects:
  1415 ;;		On entry : 0/0
  1416 ;;		On exit  : 0/0
  1417 ;;		Unchanged: 0/0
  1418 ;; Data sizes:     COMRAM   BANK0   BANK1
  1419 ;;      Params:         0       0       0
  1420 ;;      Locals:         0       0       0
  1421 ;;      Temps:          0       0       0
  1422 ;;      Totals:         0       0       0
  1423 ;;Total ram usage:        0 bytes
  1424 ;; Hardware stack levels used:    1
  1425 ;; Hardware stack levels required when called:    6
  1426 ;; This function calls:
  1427 ;;		__puts
  1428 ;; This function is called by:
  1429 ;;		_main
  1430 ;; This function uses a non-reentrant model
  1431 ;;
  1432                           
  1433                           	psect	text6
  1434  0008F2                     __ptext6:
  1435                           	opt stack 0
  1436  0008F2                     _process_ioc:
  1437                           	opt stack 24
  1438                           
  1439                           ;logger.c: 174:     IOC_state = IOC_IDLE;
  1440                           
  1441                           ;incstack = 0
  1442  0008F2  6A33               	clrf	_IOC_state,c	;volatile
  1443                           
  1444                           ;logger.c: 175:      if (IOC_value) {
  1445  0008F4  5055               	movf	_IOC_value,w,c	;volatile
  1446  0008F6  E002               	bz	l2229
  1447                           
  1448                           ;logger.c: 177:             _puts("CH");
  1449  0008F8  0ED5               	movlw	low STR_23
  1450  0008FA  D001               	goto	L2
  1451  0008FC                     l2229:
  1452                           
  1453                           ;logger.c: 184:             _puts("CL");
  1454  0008FC  0ED8               	movlw	low STR_24
  1455  0008FE                     L2:
  1456  0008FE  6E0A               	movwf	__puts@pt,c
  1457  000900  EF59  F003         	goto	__puts	;wreg free
  1458  000904                     __end_of_process_ioc:
  1459                           	opt stack 0
  1460                           tblptru	equ	0xFF8
  1461                           prodh	equ	0xFF4
  1462                           prodl	equ	0xFF3
  1463                           intcon	equ	0xFF2
  1464                           postinc0	equ	0xFEE
  1465                           wreg	equ	0xFE8
  1466                           indf2	equ	0xFDF
  1467                           fsr2h	equ	0xFDA
  1468                           fsr2l	equ	0xFD9
  1469                           status	equ	0xFD8
  1470                           
  1471 ;; *************** function _logger_initialize *****************
  1472 ;; Defined at:
  1473 ;;		line 20 in file "logger.c"
  1474 ;; Parameters:    Size  Location     Type
  1475 ;;		None
  1476 ;; Auto vars:     Size  Location     Type
  1477 ;;		None
  1478 ;; Return value:  Size  Location     Type
  1479 ;;                  1    wreg      void 
  1480 ;; Registers used:
  1481 ;;		wreg, status,2, status,0, cstack
  1482 ;; Tracked objects:
  1483 ;;		On entry : 0/0
  1484 ;;		On exit  : 0/0
  1485 ;;		Unchanged: 0/0
  1486 ;; Data sizes:     COMRAM   BANK0   BANK1
  1487 ;;      Params:         0       0       0
  1488 ;;      Locals:         0       0       0
  1489 ;;      Temps:          0       0       0
  1490 ;;      Totals:         0       0       0
  1491 ;;Total ram usage:        0 bytes
  1492 ;; Hardware stack levels used:    1
  1493 ;; Hardware stack levels required when called:    5
  1494 ;; This function calls:
  1495 ;;		_ADC1_SelectChannel
  1496 ;;		_ESP_Set_application_handler
  1497 ;;		_IOCA4_SetInterruptHandler
  1498 ;;		_TMR1_SetInterruptHandler
  1499 ;;		_TMR1_StopTimer
  1500 ;; This function is called by:
  1501 ;;		_main
  1502 ;; This function uses a non-reentrant model
  1503 ;;
  1504                           
  1505                           	psect	text7
  1506  000674                     __ptext7:
  1507                           	opt stack 0
  1508  000674                     _logger_initialize:
  1509                           	opt stack 25
  1510                           
  1511                           ;logger.c: 22:     message_format = MESSAGE_BINARY;
  1512                           
  1513                           ;incstack = 0
  1514  000674  6A2F               	clrf	_message_format,c	;volatile
  1515                           
  1516                           ;logger.c: 24:     ADC1_SelectChannel(channel_AN2);
  1517  000676  0E02               	movlw	2
  1518  000678  EC4C  F004         	call	_ADC1_SelectChannel
  1519                           
  1520                           ;logger.c: 25:     ADC_state = ADC_IDLE;
  1521  00067C  6A39               	clrf	_ADC_state,c	;volatile
  1522                           
  1523                           ;logger.c: 26:     ADC_value = 0;
  1524  00067E  6A2B               	clrf	_ADC_value,c	;volatile
  1525  000680  6A2C               	clrf	_ADC_value+1,c	;volatile
  1526                           
  1527                           ;logger.c: 27:     ADC_count = 0;
  1528  000682  6A3A               	clrf	_ADC_count,c	;volatile
  1529                           
  1530                           ;logger.c: 29:     TMR1_StopTimer();
  1531  000684  ECBF  F004         	call	_TMR1_StopTimer	;wreg free
  1532                           
  1533                           ;logger.c: 30:     TMR1_state = TMR1_STOP;
  1534  000688  6A2E               	clrf	_TMR1_state,c	;volatile
  1535                           
  1536                           ;logger.c: 31:     TMR1_SetInterruptHandler(_TMR1_Ready);
  1537  00068A  0E66               	movlw	low __TMR1_Ready
  1538  00068C  6E09               	movwf	TMR1_SetInterruptHandler@InterruptHandler,c
  1539  00068E  0E09               	movlw	high __TMR1_Ready
  1540  000690  6E0A               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1,c
  1541  000692  EC9F  F004         	call	_TMR1_SetInterruptHandler	;wreg free
  1542                           
  1543                           ;logger.c: 33:     IOCA4_SetInterruptHandler(_IOC_Ready);
  1544  000696  0E24               	movlw	low __IOC_Ready
  1545  000698  6E09               	movwf	IOCA4_SetInterruptHandler@InterruptHandler,c
  1546  00069A  0E09               	movlw	high __IOC_Ready
  1547  00069C  6E0A               	movwf	IOCA4_SetInterruptHandler@InterruptHandler+1,c
  1548  00069E  ECA4  F004         	call	_IOCA4_SetInterruptHandler	;wreg free
  1549                           
  1550                           ;logger.c: 34:     IOC_state = IOC_IDLE;
  1551  0006A2  6A33               	clrf	_IOC_state,c	;volatile
  1552                           
  1553                           ;logger.c: 35:     IOC_value = 1;
  1554  0006A4  0E01               	movlw	1
  1555  0006A6  6E55               	movwf	_IOC_value,c	;volatile
  1556                           
  1557                           ;logger.c: 37:     ESP_Set_application_handler(process_message);
  1558  0006A8  0E4C               	movlw	low _process_message
  1559  0006AA  6E09               	movwf	ESP_Set_application_handler@applicationHandler,c
  1560  0006AC  0E05               	movlw	high _process_message
  1561  0006AE  6E0A               	movwf	ESP_Set_application_handler@applicationHandler+1,c
  1562  0006B0  0012               	return		;wreg free
  1563  0006B2                     __end_of_logger_initialize:
  1564                           	opt stack 0
  1565                           tblptru	equ	0xFF8
  1566                           prodh	equ	0xFF4
  1567                           prodl	equ	0xFF3
  1568                           intcon	equ	0xFF2
  1569                           postinc0	equ	0xFEE
  1570                           wreg	equ	0xFE8
  1571                           indf2	equ	0xFDF
  1572                           fsr2h	equ	0xFDA
  1573                           fsr2l	equ	0xFD9
  1574                           status	equ	0xFD8
  1575                           
  1576 ;; *************** function _ESP_Set_application_handler *****************
  1577 ;; Defined at:
  1578 ;;		line 224 in file "esp1.c"
  1579 ;; Parameters:    Size  Location     Type
  1580 ;;  applicationH    2    8[COMRAM] PTR FTN(unsigned char ,)
  1581 ;;		 -> process_message(1), ESP_default_application_handler(1), 
  1582 ;; Auto vars:     Size  Location     Type
  1583 ;;		None
  1584 ;; Return value:  Size  Location     Type
  1585 ;;                  1    wreg      void 
  1586 ;; Registers used:
  1587 ;;		None
  1588 ;; Tracked objects:
  1589 ;;		On entry : 0/0
  1590 ;;		On exit  : 0/0
  1591 ;;		Unchanged: 0/0
  1592 ;; Data sizes:     COMRAM   BANK0   BANK1
  1593 ;;      Params:         2       0       0
  1594 ;;      Locals:         0       0       0
  1595 ;;      Temps:          0       0       0
  1596 ;;      Totals:         2       0       0
  1597 ;;Total ram usage:        2 bytes
  1598 ;; Hardware stack levels used:    1
  1599 ;; Hardware stack levels required when called:    4
  1600 ;; This function calls:
  1601 ;;		Nothing
  1602 ;; This function is called by:
  1603 ;;		_logger_initialize
  1604 ;; This function uses a non-reentrant model
  1605 ;;
  1606                           
  1607                           	psect	text8
  1608  00099A                     __ptext8:
  1609                           	opt stack 0
  1610  00099A                     _ESP_Set_application_handler:
  1611                           	opt stack 25
  1612                           
  1613                           ;incstack = 0
  1614  00099A  0012               	return		;funcret
  1615  00099C                     __end_of_ESP_Set_application_handler:
  1616                           	opt stack 0
  1617                           tblptru	equ	0xFF8
  1618                           prodh	equ	0xFF4
  1619                           prodl	equ	0xFF3
  1620                           intcon	equ	0xFF2
  1621                           postinc0	equ	0xFEE
  1622                           wreg	equ	0xFE8
  1623                           indf2	equ	0xFDF
  1624                           fsr2h	equ	0xFDA
  1625                           fsr2l	equ	0xFD9
  1626                           status	equ	0xFD8
  1627                           
  1628 ;; *************** function _ADC1_SelectChannel *****************
  1629 ;; Defined at:
  1630 ;;		line 83 in file "mcc_generated_files/adc1.c"
  1631 ;; Parameters:    Size  Location     Type
  1632 ;;  channel         1    wreg     enum E2441
  1633 ;; Auto vars:     Size  Location     Type
  1634 ;;  channel         1    9[COMRAM] enum E2441
  1635 ;; Return value:  Size  Location     Type
  1636 ;;                  1    wreg      void 
  1637 ;; Registers used:
  1638 ;;		wreg, status,2, status,0
  1639 ;; Tracked objects:
  1640 ;;		On entry : 0/0
  1641 ;;		On exit  : 0/0
  1642 ;;		Unchanged: 0/0
  1643 ;; Data sizes:     COMRAM   BANK0   BANK1
  1644 ;;      Params:         0       0       0
  1645 ;;      Locals:         1       0       0
  1646 ;;      Temps:          1       0       0
  1647 ;;      Totals:         2       0       0
  1648 ;;Total ram usage:        2 bytes
  1649 ;; Hardware stack levels used:    1
  1650 ;; Hardware stack levels required when called:    4
  1651 ;; This function calls:
  1652 ;;		Nothing
  1653 ;; This function is called by:
  1654 ;;		_logger_initialize
  1655 ;; This function uses a non-reentrant model
  1656 ;;
  1657                           
  1658                           	psect	text9
  1659  000898                     __ptext9:
  1660                           	opt stack 0
  1661  000898                     _ADC1_SelectChannel:
  1662                           	opt stack 25
  1663                           
  1664                           ;incstack = 0
  1665                           ;ADC1_SelectChannel@channel stored from wreg
  1666  000898  6E0A               	movwf	ADC1_SelectChannel@channel,c
  1667                           
  1668                           ;mcc_generated_files/adc1.c: 83: void ADC1_SelectChannel(adc_channel_t channel);mcc_gene
      +                          rated_files/adc1.c: 84: {;mcc_generated_files/adc1.c: 86:     ADCON0bits.CHS = channel;
  1669  00089A  C00A  F009         	movff	ADC1_SelectChannel@channel,??_ADC1_SelectChannel
  1670  00089E  4609               	rlncf	??_ADC1_SelectChannel,f,c
  1671  0008A0  4609               	rlncf	??_ADC1_SelectChannel,f,c
  1672  0008A2  50C2               	movf	4034,w,c	;volatile
  1673  0008A4  1809               	xorwf	??_ADC1_SelectChannel,w,c
  1674  0008A6  0BC3               	andlw	-61
  1675  0008A8  1809               	xorwf	??_ADC1_SelectChannel,w,c
  1676  0008AA  6EC2               	movwf	4034,c	;volatile
  1677                           
  1678                           ;mcc_generated_files/adc1.c: 88:     ADCON0bits.ADON = 1;
  1679  0008AC  80C2               	bsf	4034,0,c	;volatile
  1680  0008AE  0012               	return		;funcret
  1681  0008B0                     __end_of_ADC1_SelectChannel:
  1682                           	opt stack 0
  1683                           tblptru	equ	0xFF8
  1684                           prodh	equ	0xFF4
  1685                           prodl	equ	0xFF3
  1686                           intcon	equ	0xFF2
  1687                           postinc0	equ	0xFEE
  1688                           wreg	equ	0xFE8
  1689                           indf2	equ	0xFDF
  1690                           fsr2h	equ	0xFDA
  1691                           fsr2l	equ	0xFD9
  1692                           status	equ	0xFD8
  1693                           
  1694 ;; *************** function _bt_message_handler *****************
  1695 ;; Defined at:
  1696 ;;		line 40 in file "logger.c"
  1697 ;; Parameters:    Size  Location     Type
  1698 ;;		None
  1699 ;; Auto vars:     Size  Location     Type
  1700 ;;  message         1   15[COMRAM] unsigned char 
  1701 ;; Return value:  Size  Location     Type
  1702 ;;                  1    wreg      void 
  1703 ;; Registers used:
  1704 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1705 ;; Tracked objects:
  1706 ;;		On entry : 0/0
  1707 ;;		On exit  : 0/0
  1708 ;;		Unchanged: 0/0
  1709 ;; Data sizes:     COMRAM   BANK0   BANK1
  1710 ;;      Params:         0       0       0
  1711 ;;      Locals:         1       0       0
  1712 ;;      Temps:          0       0       0
  1713 ;;      Totals:         1       0       0
  1714 ;;Total ram usage:        1 bytes
  1715 ;; Hardware stack levels used:    1
  1716 ;; Hardware stack levels required when called:    8
  1717 ;; This function calls:
  1718 ;;		_EUSART_Read
  1719 ;;		_process_message
  1720 ;; This function is called by:
  1721 ;;		_main
  1722 ;; This function uses a non-reentrant model
  1723 ;;
  1724                           
  1725                           	psect	text10
  1726  000932                     __ptext10:
  1727                           	opt stack 0
  1728  000932                     _bt_message_handler:
  1729                           	opt stack 22
  1730                           
  1731                           ;logger.c: 42:     unsigned char message;;logger.c: 43:     message = EUSART_Read();
  1732                           
  1733                           ;incstack = 0
  1734  000932  ECD2  F003         	call	_EUSART_Read	;wreg free
  1735  000936  6E10               	movwf	bt_message_handler@message,c
  1736                           
  1737                           ;logger.c: 44:     process_message(message);
  1738  000938  5010               	movf	bt_message_handler@message,w,c
  1739  00093A  EFA6  F002         	goto	_process_message
  1740  00093E                     __end_of_bt_message_handler:
  1741                           	opt stack 0
  1742                           tblptru	equ	0xFF8
  1743                           prodh	equ	0xFF4
  1744                           prodl	equ	0xFF3
  1745                           intcon	equ	0xFF2
  1746                           postinc0	equ	0xFEE
  1747                           wreg	equ	0xFE8
  1748                           indf2	equ	0xFDF
  1749                           fsr2h	equ	0xFDA
  1750                           fsr2l	equ	0xFD9
  1751                           status	equ	0xFD8
  1752                           
  1753 ;; *************** function _process_message *****************
  1754 ;; Defined at:
  1755 ;;		line 47 in file "logger.c"
  1756 ;; Parameters:    Size  Location     Type
  1757 ;;  message         1    wreg     unsigned char 
  1758 ;; Auto vars:     Size  Location     Type
  1759 ;;  message         1   14[COMRAM] unsigned char 
  1760 ;; Return value:  Size  Location     Type
  1761 ;;                  1    wreg      void 
  1762 ;; Registers used:
  1763 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1764 ;; Tracked objects:
  1765 ;;		On entry : 0/0
  1766 ;;		On exit  : 0/0
  1767 ;;		Unchanged: 0/0
  1768 ;; Data sizes:     COMRAM   BANK0   BANK1
  1769 ;;      Params:         0       0       0
  1770 ;;      Locals:         1       0       0
  1771 ;;      Temps:          2       0       0
  1772 ;;      Totals:         3       0       0
  1773 ;;Total ram usage:        3 bytes
  1774 ;; Hardware stack levels used:    1
  1775 ;; Hardware stack levels required when called:    7
  1776 ;; This function calls:
  1777 ;;		_ADC1_StartConversion
  1778 ;;		_TMR1_StartTimer
  1779 ;;		_TMR1_StopTimer
  1780 ;;		__puts
  1781 ;;		_toggle_format
  1782 ;; This function is called by:
  1783 ;;		_logger_initialize
  1784 ;;		_bt_message_handler
  1785 ;; This function uses a non-reentrant model
  1786 ;;
  1787                           
  1788                           	psect	text11
  1789  00054C                     __ptext11:
  1790                           	opt stack 0
  1791  00054C                     _process_message:
  1792                           	opt stack 22
  1793                           
  1794                           ;incstack = 0
  1795                           ;process_message@message stored from wreg
  1796  00054C  6E0F               	movwf	process_message@message,c
  1797                           
  1798                           ;logger.c: 47: void process_message(unsigned char message);logger.c: 48: {;logger.c: 51:
      +                               switch (message) {
  1799  00054E  D014               	goto	l2097
  1800  000550                     l2077:
  1801                           
  1802                           ;logger.c: 54:                 _puts("Ok\n");
  1803  000550  0EC9               	movlw	low STR_20
  1804  000552  6E0A               	movwf	__puts@pt,c
  1805  000554  EF59  F003         	goto	__puts	;wreg free
  1806  000558                     l2083:
  1807                           
  1808                           ;logger.c: 69:             if (TMR1_state == TMR1_RUNNING)
  1809  000558  042E               	decf	_TMR1_state,w,c	;volatile
  1810  00055A  E101               	bnz	l2087
  1811  00055C  0012               	return	
  1812  00055E                     l2087:
  1813                           
  1814                           ;logger.c: 71:             TMR1_StartTimer();
  1815  00055E  ECC1  F004         	call	_TMR1_StartTimer	;wreg free
  1816                           
  1817                           ;logger.c: 72:             TMR1_state = TMR1_RUNNING;
  1818  000562  0E01               	movlw	1
  1819  000564  6E2E               	movwf	_TMR1_state,c	;volatile
  1820                           
  1821                           ;logger.c: 74:             break;
  1822  000566  0C01               	retlw	1
  1823  000568                     l2091:
  1824                           
  1825                           ;logger.c: 78:             TMR1_StopTimer();
  1826  000568  ECBF  F004         	call	_TMR1_StopTimer	;wreg free
  1827                           
  1828                           ;logger.c: 79:             TMR1_state = TMR1_STOP;
  1829  00056C  6A2E               	clrf	_TMR1_state,c	;volatile
  1830                           
  1831                           ;logger.c: 80:             break;
  1832  00056E  0012               	return	
  1833  000570                     l636:
  1834  000570  9A89               	bcf	3977,5,c	;volatile
  1835  000572  0012               	return	
  1836  000574                     l639:
  1837  000574  8A89               	bsf	3977,5,c	;volatile
  1838  000576  0012               	return	
  1839  000578                     l2097:
  1840  000578  500F               	movf	process_message@message,w,c
  1841  00057A  6E0D               	movwf	??_process_message& (0+255),c
  1842  00057C  6A0E               	clrf	(??_process_message+1)& (0+255),c
  1843                           
  1844                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1845                           ; Switch size 1, requested type "speed"
  1846                           ; Number of cases is 1, Range of values is 0 to 0
  1847                           ; switch strategies available:
  1848                           ; Name         Instructions Cycles
  1849                           ; simple_byte            4     3 (average)
  1850                           ;	Chosen strategy is simple_byte
  1851  00057E  500E               	movf	??_process_message+1,w,c
  1852  000580  A4D8               	btfss	status,2,c
  1853  000582  0012               	return	
  1854                           
  1855                           ; Switch size 1, requested type "speed"
  1856                           ; Number of cases is 7, Range of values is 79 to 116
  1857                           ; switch strategies available:
  1858                           ; Name         Instructions Cycles
  1859                           ; simple_byte           22    12 (average)
  1860                           ;	Chosen strategy is simple_byte
  1861  000584  500D               	movf	??_process_message,w,c
  1862  000586  0A4F               	xorlw	79	; case 79
  1863  000588  E0F5               	bz	l639
  1864  00058A  0A1C               	xorlw	28	; case 83
  1865  00058C  E0ED               	bz	l2091
  1866  00058E  0A07               	xorlw	7	; case 84
  1867  000590  E102 EF64  F004    	bz	_toggle_format
  1868  000596  0A35               	xorlw	53	; case 97
  1869  000598  E102 EFC3  F004    	bz	_ADC1_StartConversion
  1870  00059E  0A0E               	xorlw	14	; case 111
  1871  0005A0  E0E7               	bz	l636
  1872  0005A2  0A1C               	xorlw	28	; case 115
  1873  0005A4  E0D9               	bz	l2083
  1874  0005A6  0A07               	xorlw	7	; case 116
  1875  0005A8  E0D3               	bz	l2077
  1876  0005AA  0012               	return		;funcret
  1877  0005AC                     __end_of_process_message:
  1878                           	opt stack 0
  1879                           tblptru	equ	0xFF8
  1880                           prodh	equ	0xFF4
  1881                           prodl	equ	0xFF3
  1882                           intcon	equ	0xFF2
  1883                           postinc0	equ	0xFEE
  1884                           wreg	equ	0xFE8
  1885                           indf2	equ	0xFDF
  1886                           fsr2h	equ	0xFDA
  1887                           fsr2l	equ	0xFD9
  1888                           status	equ	0xFD8
  1889                           
  1890 ;; *************** function _toggle_format *****************
  1891 ;; Defined at:
  1892 ;;		line 139 in file "logger.c"
  1893 ;; Parameters:    Size  Location     Type
  1894 ;;		None
  1895 ;; Auto vars:     Size  Location     Type
  1896 ;;		None
  1897 ;; Return value:  Size  Location     Type
  1898 ;;                  1    wreg      void 
  1899 ;; Registers used:
  1900 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1901 ;; Tracked objects:
  1902 ;;		On entry : 0/0
  1903 ;;		On exit  : 0/0
  1904 ;;		Unchanged: 0/0
  1905 ;; Data sizes:     COMRAM   BANK0   BANK1
  1906 ;;      Params:         0       0       0
  1907 ;;      Locals:         0       0       0
  1908 ;;      Temps:          0       0       0
  1909 ;;      Totals:         0       0       0
  1910 ;;Total ram usage:        0 bytes
  1911 ;; Hardware stack levels used:    1
  1912 ;; Hardware stack levels required when called:    6
  1913 ;; This function calls:
  1914 ;;		__puts
  1915 ;; This function is called by:
  1916 ;;		_process_message
  1917 ;; This function uses a non-reentrant model
  1918 ;;
  1919                           
  1920                           	psect	text12
  1921  0008C8                     __ptext12:
  1922                           	opt stack 0
  1923  0008C8                     _toggle_format:
  1924                           	opt stack 22
  1925                           
  1926                           ;logger.c: 141:     if (message_format == MESSAGE_BINARY) {
  1927                           
  1928                           ;incstack = 0
  1929  0008C8  502F               	movf	_message_format,w,c	;volatile
  1930  0008CA  E104               	bnz	l650
  1931                           
  1932                           ;logger.c: 142:         message_format = MESSAGE_TEXT;
  1933  0008CC  0E01               	movlw	1
  1934  0008CE  6E2F               	movwf	_message_format,c	;volatile
  1935                           
  1936                           ;logger.c: 144:             _puts("tmode\n");
  1937  0008D0  0EAB               	movlw	low STR_21
  1938  0008D2  D002               	goto	L3
  1939  0008D4                     l650:
  1940                           
  1941                           ;logger.c: 149:         message_format = MESSAGE_BINARY;
  1942  0008D4  6A2F               	clrf	_message_format,c	;volatile
  1943                           
  1944                           ;logger.c: 151:             _puts("bmode\n");
  1945  0008D6  0EA4               	movlw	low STR_22
  1946  0008D8                     L3:
  1947  0008D8  6E0A               	movwf	__puts@pt,c
  1948  0008DA  EF59  F003         	goto	__puts	;wreg free
  1949  0008DE                     __end_of_toggle_format:
  1950                           	opt stack 0
  1951                           tblptru	equ	0xFF8
  1952                           prodh	equ	0xFF4
  1953                           prodl	equ	0xFF3
  1954                           intcon	equ	0xFF2
  1955                           postinc0	equ	0xFEE
  1956                           wreg	equ	0xFE8
  1957                           indf2	equ	0xFDF
  1958                           fsr2h	equ	0xFDA
  1959                           fsr2l	equ	0xFD9
  1960                           status	equ	0xFD8
  1961                           
  1962 ;; *************** function __puts *****************
  1963 ;; Defined at:
  1964 ;;		line 5 in file "comm.c"
  1965 ;; Parameters:    Size  Location     Type
  1966 ;;  pt              1    9[COMRAM] PTR unsigned char 
  1967 ;;		 -> STR_29(13), STR_28(22), STR_27(13), STR_26(18), 
  1968 ;;		 -> STR_25(13), STR_24(3), STR_23(3), STR_22(7), 
  1969 ;;		 -> STR_21(7), STR_20(4), STR_19(3), STR_18(3), 
  1970 ;;		 -> STR_17(2), STR_16(12), STR_14(20), STR_13(14), 
  1971 ;;		 -> STR_12(4), STR_11(4), STR_10(11), STR_9(14), 
  1972 ;;		 -> STR_8(5), 
  1973 ;; Auto vars:     Size  Location     Type
  1974 ;;  index           1   11[COMRAM] unsigned char 
  1975 ;; Return value:  Size  Location     Type
  1976 ;;                  1    wreg      void 
  1977 ;; Registers used:
  1978 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1979 ;; Tracked objects:
  1980 ;;		On entry : 0/0
  1981 ;;		On exit  : 0/0
  1982 ;;		Unchanged: 0/0
  1983 ;; Data sizes:     COMRAM   BANK0   BANK1
  1984 ;;      Params:         1       0       0
  1985 ;;      Locals:         1       0       0
  1986 ;;      Temps:          1       0       0
  1987 ;;      Totals:         3       0       0
  1988 ;;Total ram usage:        3 bytes
  1989 ;; Hardware stack levels used:    1
  1990 ;; Hardware stack levels required when called:    5
  1991 ;; This function calls:
  1992 ;;		_EUSART_Write
  1993 ;;		_EUSART_is_tx_ready
  1994 ;; This function is called by:
  1995 ;;		_process_message
  1996 ;;		_toggle_format
  1997 ;;		_process_ioc
  1998 ;; This function uses a non-reentrant model
  1999 ;;
  2000                           
  2001                           	psect	text13
  2002  0006B2                     __ptext13:
  2003                           	opt stack 0
  2004  0006B2                     __puts:
  2005                           	opt stack 24
  2006                           
  2007                           ;comm.c: 5: void _puts(char *pt);comm.c: 6: {;comm.c: 7:     unsigned char index;;comm.c
      +                          : 8:     index = 0;
  2008                           
  2009                           ;incstack = 0
  2010  0006B2  6A0C               	clrf	__puts@index,c
  2011                           
  2012                           ;comm.c: 9:     while(pt[index]) {
  2013  0006B4  D010               	goto	l1871
  2014  0006B6                     l1865:
  2015  0006B6  ECBD  F004         	call	_EUSART_is_tx_ready	;wreg free
  2016  0006BA  0900               	iorlw	0
  2017  0006BC  E0FC               	bz	l1865
  2018                           
  2019                           ;comm.c: 11:         EUSART_Write(pt[index++]);
  2020  0006BE  500A               	movf	__puts@pt,w,c
  2021  0006C0  240C               	addwf	__puts@index,w,c
  2022  0006C2  6E0B               	movwf	??__puts& (0+255),c
  2023  0006C4  C00B  FFF6         	movff	??__puts,tblptrl
  2024  0006C8                     	if	1	;There is more than 1 active tblptr byte
  2025  0006C8  0E02               	movlw	high __smallconst
  2026  0006CA  6EF7               	movwf	tblptrh,c
  2027  0006CC                     	endif
  2028  0006CC                     	if	0	;tblptru may be non-zero
  2029  0006CC                     	endif
  2030  0006CC                     	if	0	;tblptru may be non-zero
  2031  0006CC                     	endif
  2032  0006CC  0008               	tblrd		*
  2033  0006CE  50F5               	movf	tablat,w,c
  2034  0006D0  EC8F  F003         	call	_EUSART_Write
  2035  0006D4  2A0C               	incf	__puts@index,f,c
  2036  0006D6                     l1871:
  2037                           
  2038                           ;comm.c: 9:     while(pt[index]) {
  2039  0006D6  500A               	movf	__puts@pt,w,c
  2040  0006D8  240C               	addwf	__puts@index,w,c
  2041  0006DA  6E0B               	movwf	??__puts& (0+255),c
  2042  0006DC  C00B  FFF6         	movff	??__puts,tblptrl
  2043  0006E0                     	if	1	;There is more than 1 active tblptr byte
  2044  0006E0  0E02               	movlw	high __smallconst
  2045  0006E2  6EF7               	movwf	tblptrh,c
  2046  0006E4                     	endif
  2047  0006E4                     	if	0	;tblptru may be non-zero
  2048  0006E4                     	endif
  2049  0006E4                     	if	0	;tblptru may be non-zero
  2050  0006E4                     	endif
  2051  0006E4  0008               	tblrd		*
  2052  0006E6  50F5               	movf	tablat,w,c
  2053  0006E8  E1E6               	bnz	l1865
  2054  0006EA  0012               	return		;funcret
  2055  0006EC                     __end_of__puts:
  2056                           	opt stack 0
  2057                           tblptru	equ	0xFF8
  2058                           tblptrh	equ	0xFF7
  2059                           tblptrl	equ	0xFF6
  2060                           tablat	equ	0xFF5
  2061                           prodh	equ	0xFF4
  2062                           prodl	equ	0xFF3
  2063                           intcon	equ	0xFF2
  2064                           postinc0	equ	0xFEE
  2065                           wreg	equ	0xFE8
  2066                           indf2	equ	0xFDF
  2067                           fsr2h	equ	0xFDA
  2068                           fsr2l	equ	0xFD9
  2069                           status	equ	0xFD8
  2070                           
  2071 ;; *************** function _EUSART_is_tx_ready *****************
  2072 ;; Defined at:
  2073 ;;		line 113 in file "mcc_generated_files/eusart.c"
  2074 ;; Parameters:    Size  Location     Type
  2075 ;;		None
  2076 ;; Auto vars:     Size  Location     Type
  2077 ;;		None
  2078 ;; Return value:  Size  Location     Type
  2079 ;;                  1    wreg      unsigned char 
  2080 ;; Registers used:
  2081 ;;		wreg, status,2
  2082 ;; Tracked objects:
  2083 ;;		On entry : 0/0
  2084 ;;		On exit  : 0/0
  2085 ;;		Unchanged: 0/0
  2086 ;; Data sizes:     COMRAM   BANK0   BANK1
  2087 ;;      Params:         0       0       0
  2088 ;;      Locals:         0       0       0
  2089 ;;      Temps:          0       0       0
  2090 ;;      Totals:         0       0       0
  2091 ;;Total ram usage:        0 bytes
  2092 ;; Hardware stack levels used:    1
  2093 ;; Hardware stack levels required when called:    4
  2094 ;; This function calls:
  2095 ;;		Nothing
  2096 ;; This function is called by:
  2097 ;;		__puts
  2098 ;;		_write
  2099 ;; This function uses a non-reentrant model
  2100 ;;
  2101                           
  2102                           	psect	text14
  2103  00097A                     __ptext14:
  2104                           	opt stack 0
  2105  00097A                     _EUSART_is_tx_ready:
  2106                           	opt stack 24
  2107                           
  2108                           ;mcc_generated_files/eusart.c: 115:     return eusartTxBufferRemaining;
  2109                           
  2110                           ;incstack = 0
  2111  00097A  5056               	movf	_eusartTxBufferRemaining,w,c	;volatile
  2112  00097C  0012               	return		;funcret
  2113  00097E                     __end_of_EUSART_is_tx_ready:
  2114                           	opt stack 0
  2115                           tblptru	equ	0xFF8
  2116                           tblptrh	equ	0xFF7
  2117                           tblptrl	equ	0xFF6
  2118                           tablat	equ	0xFF5
  2119                           prodh	equ	0xFF4
  2120                           prodl	equ	0xFF3
  2121                           intcon	equ	0xFF2
  2122                           postinc0	equ	0xFEE
  2123                           wreg	equ	0xFE8
  2124                           indf2	equ	0xFDF
  2125                           fsr2h	equ	0xFDA
  2126                           fsr2l	equ	0xFD9
  2127                           status	equ	0xFD8
  2128                           
  2129 ;; *************** function _EUSART_Write *****************
  2130 ;; Defined at:
  2131 ;;		line 148 in file "mcc_generated_files/eusart.c"
  2132 ;; Parameters:    Size  Location     Type
  2133 ;;  txData          1    wreg     unsigned char 
  2134 ;; Auto vars:     Size  Location     Type
  2135 ;;  txData          1    8[COMRAM] unsigned char 
  2136 ;; Return value:  Size  Location     Type
  2137 ;;                  1    wreg      void 
  2138 ;; Registers used:
  2139 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2140 ;; Tracked objects:
  2141 ;;		On entry : 0/0
  2142 ;;		On exit  : 0/0
  2143 ;;		Unchanged: 0/0
  2144 ;; Data sizes:     COMRAM   BANK0   BANK1
  2145 ;;      Params:         0       0       0
  2146 ;;      Locals:         1       0       0
  2147 ;;      Temps:          0       0       0
  2148 ;;      Totals:         1       0       0
  2149 ;;Total ram usage:        1 bytes
  2150 ;; Hardware stack levels used:    1
  2151 ;; Hardware stack levels required when called:    4
  2152 ;; This function calls:
  2153 ;;		Nothing
  2154 ;; This function is called by:
  2155 ;;		__puts
  2156 ;;		_write
  2157 ;; This function uses a non-reentrant model
  2158 ;;
  2159                           
  2160                           	psect	text15
  2161  00071E                     __ptext15:
  2162                           	opt stack 0
  2163  00071E                     _EUSART_Write:
  2164                           	opt stack 24
  2165                           
  2166                           ;incstack = 0
  2167                           ;EUSART_Write@txData stored from wreg
  2168  00071E  6E09               	movwf	EUSART_Write@txData,c
  2169  000720                     
  2170                           ;mcc_generated_files/eusart.c: 150:     while(0 == eusartTxBufferRemaining)
  2171                           
  2172                           ;mcc_generated_files/eusart.c: 148: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 149: {;mcc_generated_files/eusart.c: 150:     while(0 == eusartTxBufferRemai
      +                          ning)
  2173  000720  5056               	movf	_eusartTxBufferRemaining,w,c	;volatile
  2174  000722  E0FE               	bz	l1845
  2175                           
  2176                           ;mcc_generated_files/eusart.c: 154:     if(0 == PIE1bits.TXIE)
  2177  000724  B89D               	btfsc	3997,4,c	;volatile
  2178  000726  D003               	goto	l196
  2179                           
  2180                           ;mcc_generated_files/eusart.c: 155:     {;mcc_generated_files/eusart.c: 156:         TXR
      +                          EG = txData;
  2181  000728  C009  FFAD         	movff	EUSART_Write@txData,4013	;volatile
  2182                           
  2183                           ;mcc_generated_files/eusart.c: 157:     }
  2184  00072C  D00D               	goto	l1861
  2185  00072E                     l196:
  2186                           
  2187                           ;mcc_generated_files/eusart.c: 159:     {;mcc_generated_files/eusart.c: 160:         PIE
      +                          1bits.TXIE = 0;
  2188  00072E  989D               	bcf	3997,4,c	;volatile
  2189                           
  2190                           ;mcc_generated_files/eusart.c: 161:         eusartTxBuffer[eusartTxHead++] = txData;
  2191  000730  5038               	movf	_eusartTxHead,w,c
  2192  000732  0F60               	addlw	low _eusartTxBuffer
  2193  000734  6ED9               	movwf	fsr2l,c
  2194  000736  6ADA               	clrf	fsr2h,c
  2195  000738  C009  FFDF         	movff	EUSART_Write@txData,indf2
  2196  00073C  2A38               	incf	_eusartTxHead,f,c	;volatile
  2197                           
  2198                           ;mcc_generated_files/eusart.c: 162:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
  2199  00073E  0E3F               	movlw	63
  2200  000740  6438               	cpfsgt	_eusartTxHead,c
  2201  000742  D001               	goto	l1859
  2202                           
  2203                           ;mcc_generated_files/eusart.c: 163:         {;mcc_generated_files/eusart.c: 164:        
      +                               eusartTxHead = 0;
  2204  000744  6A38               	clrf	_eusartTxHead,c	;volatile
  2205  000746                     l1859:
  2206                           
  2207                           ;mcc_generated_files/eusart.c: 166:         eusartTxBufferRemaining--;
  2208  000746  0656               	decf	_eusartTxBufferRemaining,f,c	;volatile
  2209  000748                     l1861:
  2210                           
  2211                           ;mcc_generated_files/eusart.c: 168:     PIE1bits.TXIE = 1;
  2212  000748  889D               	bsf	3997,4,c	;volatile
  2213  00074A  0012               	return		;funcret
  2214  00074C                     __end_of_EUSART_Write:
  2215                           	opt stack 0
  2216                           tblptru	equ	0xFF8
  2217                           tblptrh	equ	0xFF7
  2218                           tblptrl	equ	0xFF6
  2219                           tablat	equ	0xFF5
  2220                           prodh	equ	0xFF4
  2221                           prodl	equ	0xFF3
  2222                           intcon	equ	0xFF2
  2223                           postinc0	equ	0xFEE
  2224                           wreg	equ	0xFE8
  2225                           indf2	equ	0xFDF
  2226                           fsr2h	equ	0xFDA
  2227                           fsr2l	equ	0xFD9
  2228                           status	equ	0xFD8
  2229                           
  2230 ;; *************** function _TMR1_StopTimer *****************
  2231 ;; Defined at:
  2232 ;;		line 96 in file "mcc_generated_files/tmr1.c"
  2233 ;; Parameters:    Size  Location     Type
  2234 ;;		None
  2235 ;; Auto vars:     Size  Location     Type
  2236 ;;		None
  2237 ;; Return value:  Size  Location     Type
  2238 ;;                  1    wreg      void 
  2239 ;; Registers used:
  2240 ;;		None
  2241 ;; Tracked objects:
  2242 ;;		On entry : 0/0
  2243 ;;		On exit  : 0/0
  2244 ;;		Unchanged: 0/0
  2245 ;; Data sizes:     COMRAM   BANK0   BANK1
  2246 ;;      Params:         0       0       0
  2247 ;;      Locals:         0       0       0
  2248 ;;      Temps:          0       0       0
  2249 ;;      Totals:         0       0       0
  2250 ;;Total ram usage:        0 bytes
  2251 ;; Hardware stack levels used:    1
  2252 ;; Hardware stack levels required when called:    4
  2253 ;; This function calls:
  2254 ;;		Nothing
  2255 ;; This function is called by:
  2256 ;;		_logger_initialize
  2257 ;;		_process_message
  2258 ;; This function uses a non-reentrant model
  2259 ;;
  2260                           
  2261                           	psect	text16
  2262  00097E                     __ptext16:
  2263                           	opt stack 0
  2264  00097E                     _TMR1_StopTimer:
  2265                           	opt stack 25
  2266                           
  2267                           ;mcc_generated_files/tmr1.c: 99:     T1CONbits.TMR1ON = 0;
  2268                           
  2269                           ;incstack = 0
  2270  00097E  90CD               	bcf	4045,0,c	;volatile
  2271  000980  0012               	return		;funcret
  2272  000982                     __end_of_TMR1_StopTimer:
  2273                           	opt stack 0
  2274                           tblptru	equ	0xFF8
  2275                           tblptrh	equ	0xFF7
  2276                           tblptrl	equ	0xFF6
  2277                           tablat	equ	0xFF5
  2278                           prodh	equ	0xFF4
  2279                           prodl	equ	0xFF3
  2280                           intcon	equ	0xFF2
  2281                           postinc0	equ	0xFEE
  2282                           wreg	equ	0xFE8
  2283                           indf2	equ	0xFDF
  2284                           fsr2h	equ	0xFDA
  2285                           fsr2l	equ	0xFD9
  2286                           status	equ	0xFD8
  2287                           
  2288 ;; *************** function _TMR1_StartTimer *****************
  2289 ;; Defined at:
  2290 ;;		line 90 in file "mcc_generated_files/tmr1.c"
  2291 ;; Parameters:    Size  Location     Type
  2292 ;;		None
  2293 ;; Auto vars:     Size  Location     Type
  2294 ;;		None
  2295 ;; Return value:  Size  Location     Type
  2296 ;;                  1    wreg      void 
  2297 ;; Registers used:
  2298 ;;		None
  2299 ;; Tracked objects:
  2300 ;;		On entry : 0/0
  2301 ;;		On exit  : 0/0
  2302 ;;		Unchanged: 0/0
  2303 ;; Data sizes:     COMRAM   BANK0   BANK1
  2304 ;;      Params:         0       0       0
  2305 ;;      Locals:         0       0       0
  2306 ;;      Temps:          0       0       0
  2307 ;;      Totals:         0       0       0
  2308 ;;Total ram usage:        0 bytes
  2309 ;; Hardware stack levels used:    1
  2310 ;; Hardware stack levels required when called:    4
  2311 ;; This function calls:
  2312 ;;		Nothing
  2313 ;; This function is called by:
  2314 ;;		_process_message
  2315 ;; This function uses a non-reentrant model
  2316 ;;
  2317                           
  2318                           	psect	text17
  2319  000982                     __ptext17:
  2320                           	opt stack 0
  2321  000982                     _TMR1_StartTimer:
  2322                           	opt stack 24
  2323                           
  2324                           ;mcc_generated_files/tmr1.c: 93:     T1CONbits.TMR1ON = 1;
  2325                           
  2326                           ;incstack = 0
  2327  000982  80CD               	bsf	4045,0,c	;volatile
  2328  000984  0012               	return		;funcret
  2329  000986                     __end_of_TMR1_StartTimer:
  2330                           	opt stack 0
  2331                           tblptru	equ	0xFF8
  2332                           tblptrh	equ	0xFF7
  2333                           tblptrl	equ	0xFF6
  2334                           tablat	equ	0xFF5
  2335                           prodh	equ	0xFF4
  2336                           prodl	equ	0xFF3
  2337                           intcon	equ	0xFF2
  2338                           postinc0	equ	0xFEE
  2339                           wreg	equ	0xFE8
  2340                           indf2	equ	0xFDF
  2341                           fsr2h	equ	0xFDA
  2342                           fsr2l	equ	0xFD9
  2343                           status	equ	0xFD8
  2344                           
  2345 ;; *************** function _ADC1_StartConversion *****************
  2346 ;; Defined at:
  2347 ;;		line 91 in file "mcc_generated_files/adc1.c"
  2348 ;; Parameters:    Size  Location     Type
  2349 ;;		None
  2350 ;; Auto vars:     Size  Location     Type
  2351 ;;		None
  2352 ;; Return value:  Size  Location     Type
  2353 ;;                  1    wreg      void 
  2354 ;; Registers used:
  2355 ;;		None
  2356 ;; Tracked objects:
  2357 ;;		On entry : 0/0
  2358 ;;		On exit  : 0/0
  2359 ;;		Unchanged: 0/0
  2360 ;; Data sizes:     COMRAM   BANK0   BANK1
  2361 ;;      Params:         0       0       0
  2362 ;;      Locals:         0       0       0
  2363 ;;      Temps:          0       0       0
  2364 ;;      Totals:         0       0       0
  2365 ;;Total ram usage:        0 bytes
  2366 ;; Hardware stack levels used:    1
  2367 ;; Hardware stack levels required when called:    4
  2368 ;; This function calls:
  2369 ;;		Nothing
  2370 ;; This function is called by:
  2371 ;;		_process_message
  2372 ;; This function uses a non-reentrant model
  2373 ;;
  2374                           
  2375                           	psect	text18
  2376  000986                     __ptext18:
  2377                           	opt stack 0
  2378  000986                     _ADC1_StartConversion:
  2379                           	opt stack 24
  2380                           
  2381                           ;mcc_generated_files/adc1.c: 94:     ADCON0bits.GO_nDONE = 1;
  2382                           
  2383                           ;incstack = 0
  2384  000986  82C2               	bsf	4034,1,c	;volatile
  2385  000988  0012               	return		;funcret
  2386  00098A                     __end_of_ADC1_StartConversion:
  2387                           	opt stack 0
  2388                           tblptru	equ	0xFF8
  2389                           tblptrh	equ	0xFF7
  2390                           tblptrl	equ	0xFF6
  2391                           tablat	equ	0xFF5
  2392                           prodh	equ	0xFF4
  2393                           prodl	equ	0xFF3
  2394                           intcon	equ	0xFF2
  2395                           postinc0	equ	0xFEE
  2396                           wreg	equ	0xFE8
  2397                           indf2	equ	0xFDF
  2398                           fsr2h	equ	0xFDA
  2399                           fsr2l	equ	0xFD9
  2400                           status	equ	0xFD8
  2401                           
  2402 ;; *************** function _EUSART_Read *****************
  2403 ;; Defined at:
  2404 ;;		line 128 in file "mcc_generated_files/eusart.c"
  2405 ;; Parameters:    Size  Location     Type
  2406 ;;		None
  2407 ;; Auto vars:     Size  Location     Type
  2408 ;;  readValue       1    8[COMRAM] unsigned char 
  2409 ;; Return value:  Size  Location     Type
  2410 ;;                  1    wreg      unsigned char 
  2411 ;; Registers used:
  2412 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2413 ;; Tracked objects:
  2414 ;;		On entry : 0/0
  2415 ;;		On exit  : 0/0
  2416 ;;		Unchanged: 0/0
  2417 ;; Data sizes:     COMRAM   BANK0   BANK1
  2418 ;;      Params:         0       0       0
  2419 ;;      Locals:         1       0       0
  2420 ;;      Temps:          0       0       0
  2421 ;;      Totals:         1       0       0
  2422 ;;Total ram usage:        1 bytes
  2423 ;; Hardware stack levels used:    1
  2424 ;; Hardware stack levels required when called:    4
  2425 ;; This function calls:
  2426 ;;		Nothing
  2427 ;; This function is called by:
  2428 ;;		_bt_message_handler
  2429 ;; This function uses a non-reentrant model
  2430 ;;
  2431                           
  2432                           	psect	text19
  2433  0007A4                     __ptext19:
  2434                           	opt stack 0
  2435  0007A4                     _EUSART_Read:
  2436                           	opt stack 25
  2437                           
  2438                           ;mcc_generated_files/eusart.c: 132:     while(0 == eusartRxCount)
  2439                           
  2440                           ;mcc_generated_files/eusart.c: 132:     while(0 == eusartRxCount)
  2441                           
  2442                           ;incstack = 0
  2443  0007A4  5034               	movf	_eusartRxCount,w,c	;volatile
  2444  0007A6  E0FE               	bz	_EUSART_Read
  2445                           
  2446                           ;mcc_generated_files/eusart.c: 136:     readValue = eusartRxBuffer[eusartRxTail++];
  2447  0007A8  0E00               	movlw	low _eusartRxBuffer
  2448  0007AA  2435               	addwf	_eusartRxTail,w,c	;volatile
  2449  0007AC  6ED9               	movwf	fsr2l,c
  2450  0007AE  6ADA               	clrf	fsr2h,c
  2451  0007B0  0E01               	movlw	high _eusartRxBuffer
  2452  0007B2  22DA               	addwfc	fsr2h,f,c
  2453  0007B4  50DF               	movf	indf2,w,c
  2454  0007B6  6E09               	movwf	EUSART_Read@readValue,c
  2455  0007B8  2A35               	incf	_eusartRxTail,f,c	;volatile
  2456                           
  2457                           ;mcc_generated_files/eusart.c: 137:     if(sizeof(eusartRxBuffer) <= eusartRxTail)
  2458  0007BA  0E3F               	movlw	63
  2459  0007BC  6435               	cpfsgt	_eusartRxTail,c
  2460  0007BE  D001               	goto	l189
  2461                           
  2462                           ;mcc_generated_files/eusart.c: 138:     {;mcc_generated_files/eusart.c: 139:         eus
      +                          artRxTail = 0;
  2463  0007C0  6A35               	clrf	_eusartRxTail,c	;volatile
  2464  0007C2                     l189:
  2465                           
  2466                           ;mcc_generated_files/eusart.c: 141:     PIE1bits.RCIE = 0;
  2467  0007C2  9A9D               	bcf	3997,5,c	;volatile
  2468                           
  2469                           ;mcc_generated_files/eusart.c: 142:     eusartRxCount--;
  2470  0007C4  0634               	decf	_eusartRxCount,f,c	;volatile
  2471                           
  2472                           ;mcc_generated_files/eusart.c: 143:     PIE1bits.RCIE = 1;
  2473  0007C6  8A9D               	bsf	3997,5,c	;volatile
  2474                           
  2475                           ;mcc_generated_files/eusart.c: 145:     return readValue;
  2476  0007C8  5009               	movf	EUSART_Read@readValue,w,c
  2477  0007CA  0012               	return		;funcret
  2478  0007CC                     __end_of_EUSART_Read:
  2479                           	opt stack 0
  2480                           tblptru	equ	0xFF8
  2481                           tblptrh	equ	0xFF7
  2482                           tblptrl	equ	0xFF6
  2483                           tablat	equ	0xFF5
  2484                           prodh	equ	0xFF4
  2485                           prodl	equ	0xFF3
  2486                           intcon	equ	0xFF2
  2487                           postinc0	equ	0xFEE
  2488                           wreg	equ	0xFE8
  2489                           indf2	equ	0xFDF
  2490                           fsr2h	equ	0xFDA
  2491                           fsr2l	equ	0xFD9
  2492                           status	equ	0xFD8
  2493                           
  2494 ;; *************** function _SYSTEM_Initialize *****************
  2495 ;; Defined at:
  2496 ;;		line 50 in file "mcc_generated_files/mcc.c"
  2497 ;; Parameters:    Size  Location     Type
  2498 ;;		None
  2499 ;; Auto vars:     Size  Location     Type
  2500 ;;		None
  2501 ;; Return value:  Size  Location     Type
  2502 ;;                  1    wreg      void 
  2503 ;; Registers used:
  2504 ;;		wreg, status,2, status,0, cstack
  2505 ;; Tracked objects:
  2506 ;;		On entry : 0/0
  2507 ;;		On exit  : 0/0
  2508 ;;		Unchanged: 0/0
  2509 ;; Data sizes:     COMRAM   BANK0   BANK1
  2510 ;;      Params:         0       0       0
  2511 ;;      Locals:         0       0       0
  2512 ;;      Temps:          0       0       0
  2513 ;;      Totals:         0       0       0
  2514 ;;Total ram usage:        0 bytes
  2515 ;; Hardware stack levels used:    1
  2516 ;; Hardware stack levels required when called:    6
  2517 ;; This function calls:
  2518 ;;		_ADC1_Initialize
  2519 ;;		_EUSART_Initialize
  2520 ;;		_INTERRUPT_Initialize
  2521 ;;		_OSCILLATOR_Initialize
  2522 ;;		_PIN_MANAGER_Initialize
  2523 ;;		_TMR1_Initialize
  2524 ;; This function is called by:
  2525 ;;		_main
  2526 ;; This function uses a non-reentrant model
  2527 ;;
  2528                           
  2529                           	psect	text20
  2530  0008B0                     __ptext20:
  2531                           	opt stack 0
  2532  0008B0                     _SYSTEM_Initialize:
  2533                           	opt stack 24
  2534                           
  2535                           ;mcc_generated_files/mcc.c: 53:     INTERRUPT_Initialize();
  2536                           
  2537                           ;incstack = 0
  2538  0008B0  ECC5  F004         	call	_INTERRUPT_Initialize	;wreg free
  2539                           
  2540                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
  2541  0008B4  ECA6  F003         	call	_PIN_MANAGER_Initialize	;wreg free
  2542                           
  2543                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
  2544  0008B8  EC8B  F004         	call	_OSCILLATOR_Initialize	;wreg free
  2545                           
  2546                           ;mcc_generated_files/mcc.c: 56:     ADC1_Initialize();
  2547  0008BC  EC82  F004         	call	_ADC1_Initialize	;wreg free
  2548                           
  2549                           ;mcc_generated_files/mcc.c: 57:     TMR1_Initialize();
  2550  0008C0  ECE6  F003         	call	_TMR1_Initialize	;wreg free
  2551                           
  2552                           ;mcc_generated_files/mcc.c: 58:     EUSART_Initialize();
  2553  0008C4  EFFB  F002         	goto	_EUSART_Initialize	;wreg free
  2554  0008C8                     __end_of_SYSTEM_Initialize:
  2555                           	opt stack 0
  2556                           tblptru	equ	0xFF8
  2557                           tblptrh	equ	0xFF7
  2558                           tblptrl	equ	0xFF6
  2559                           tablat	equ	0xFF5
  2560                           prodh	equ	0xFF4
  2561                           prodl	equ	0xFF3
  2562                           intcon	equ	0xFF2
  2563                           postinc0	equ	0xFEE
  2564                           wreg	equ	0xFE8
  2565                           indf2	equ	0xFDF
  2566                           fsr2h	equ	0xFDA
  2567                           fsr2l	equ	0xFD9
  2568                           status	equ	0xFD8
  2569                           
  2570 ;; *************** function _TMR1_Initialize *****************
  2571 ;; Defined at:
  2572 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  2573 ;; Parameters:    Size  Location     Type
  2574 ;;		None
  2575 ;; Auto vars:     Size  Location     Type
  2576 ;;		None
  2577 ;; Return value:  Size  Location     Type
  2578 ;;                  1    wreg      void 
  2579 ;; Registers used:
  2580 ;;		wreg, status,2, status,0, cstack
  2581 ;; Tracked objects:
  2582 ;;		On entry : 0/0
  2583 ;;		On exit  : 0/0
  2584 ;;		Unchanged: 0/0
  2585 ;; Data sizes:     COMRAM   BANK0   BANK1
  2586 ;;      Params:         0       0       0
  2587 ;;      Locals:         0       0       0
  2588 ;;      Temps:          0       0       0
  2589 ;;      Totals:         0       0       0
  2590 ;;Total ram usage:        0 bytes
  2591 ;; Hardware stack levels used:    1
  2592 ;; Hardware stack levels required when called:    5
  2593 ;; This function calls:
  2594 ;;		_TMR1_SetInterruptHandler
  2595 ;; This function is called by:
  2596 ;;		_SYSTEM_Initialize
  2597 ;; This function uses a non-reentrant model
  2598 ;;
  2599                           
  2600                           	psect	text21
  2601  0007CC                     __ptext21:
  2602                           	opt stack 0
  2603  0007CC                     _TMR1_Initialize:
  2604                           	opt stack 24
  2605                           
  2606                           ;mcc_generated_files/tmr1.c: 69:   TMR1H = 0x63;
  2607                           
  2608                           ;incstack = 0
  2609  0007CC  0E63               	movlw	99
  2610  0007CE  6ECF               	movwf	4047,c	;volatile
  2611                           
  2612                           ;mcc_generated_files/tmr1.c: 72:   TMR1L = 0xC0;
  2613  0007D0  0EC0               	movlw	192
  2614  0007D2  6ECE               	movwf	4046,c	;volatile
  2615                           
  2616                           ;mcc_generated_files/tmr1.c: 75:     timer1ReloadVal=TMR1;
  2617  0007D4  CFCE F04D          	movff	4046,_timer1ReloadVal	;volatile
  2618  0007D8  CFCF F04E          	movff	4047,_timer1ReloadVal+1	;volatile
  2619                           
  2620                           ;mcc_generated_files/tmr1.c: 78:     PIR1bits.TMR1IF = 0;
  2621  0007DC  909E               	bcf	3998,0,c	;volatile
  2622                           
  2623                           ;mcc_generated_files/tmr1.c: 81:     PIE1bits.TMR1IE = 1;
  2624  0007DE  809D               	bsf	3997,0,c	;volatile
  2625                           
  2626                           ;mcc_generated_files/tmr1.c: 84:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
  2627  0007E0  0E9C               	movlw	low _TMR1_DefaultInterruptHandler
  2628  0007E2  6E09               	movwf	TMR1_SetInterruptHandler@InterruptHandler,c
  2629  0007E4  0E09               	movlw	high _TMR1_DefaultInterruptHandler
  2630  0007E6  6E0A               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1,c
  2631  0007E8  EC9F  F004         	call	_TMR1_SetInterruptHandler	;wreg free
  2632                           
  2633                           ;mcc_generated_files/tmr1.c: 87:     T1CON = 0x21;
  2634  0007EC  0E21               	movlw	33
  2635  0007EE  6ECD               	movwf	4045,c	;volatile
  2636  0007F0  0C21               	retlw	33	;funcret
  2637  0007F2                     __end_of_TMR1_Initialize:
  2638                           	opt stack 0
  2639                           tblptru	equ	0xFF8
  2640                           tblptrh	equ	0xFF7
  2641                           tblptrl	equ	0xFF6
  2642                           tablat	equ	0xFF5
  2643                           prodh	equ	0xFF4
  2644                           prodl	equ	0xFF3
  2645                           intcon	equ	0xFF2
  2646                           postinc0	equ	0xFEE
  2647                           wreg	equ	0xFE8
  2648                           indf2	equ	0xFDF
  2649                           fsr2h	equ	0xFDA
  2650                           fsr2l	equ	0xFD9
  2651                           status	equ	0xFD8
  2652                           
  2653 ;; *************** function _TMR1_SetInterruptHandler *****************
  2654 ;; Defined at:
  2655 ;;		line 159 in file "mcc_generated_files/tmr1.c"
  2656 ;; Parameters:    Size  Location     Type
  2657 ;;  InterruptHan    2    8[COMRAM] PTR FTN()void 
  2658 ;;		 -> _TMR1_Ready(1), TMR1_DefaultInterruptHandler(1), 
  2659 ;; Auto vars:     Size  Location     Type
  2660 ;;		None
  2661 ;; Return value:  Size  Location     Type
  2662 ;;                  1    wreg      void 
  2663 ;; Registers used:
  2664 ;;		wreg, status,2, status,0
  2665 ;; Tracked objects:
  2666 ;;		On entry : 0/0
  2667 ;;		On exit  : 0/0
  2668 ;;		Unchanged: 0/0
  2669 ;; Data sizes:     COMRAM   BANK0   BANK1
  2670 ;;      Params:         2       0       0
  2671 ;;      Locals:         0       0       0
  2672 ;;      Temps:          0       0       0
  2673 ;;      Totals:         2       0       0
  2674 ;;Total ram usage:        2 bytes
  2675 ;; Hardware stack levels used:    1
  2676 ;; Hardware stack levels required when called:    4
  2677 ;; This function calls:
  2678 ;;		Nothing
  2679 ;; This function is called by:
  2680 ;;		_TMR1_Initialize
  2681 ;;		_logger_initialize
  2682 ;; This function uses a non-reentrant model
  2683 ;;
  2684                           
  2685                           	psect	text22
  2686  00093E                     __ptext22:
  2687                           	opt stack 0
  2688  00093E                     _TMR1_SetInterruptHandler:
  2689                           	opt stack 25
  2690                           
  2691                           ;mcc_generated_files/tmr1.c: 160:     TMR1_InterruptHandler = InterruptHandler;
  2692                           
  2693                           ;incstack = 0
  2694  00093E  C009  F04B         	movff	TMR1_SetInterruptHandler@InterruptHandler,_TMR1_InterruptHandler
  2695  000942  C00A  F04C         	movff	TMR1_SetInterruptHandler@InterruptHandler+1,_TMR1_InterruptHandler+1
  2696  000946  0012               	return		;funcret
  2697  000948                     __end_of_TMR1_SetInterruptHandler:
  2698                           	opt stack 0
  2699                           tblptru	equ	0xFF8
  2700                           tblptrh	equ	0xFF7
  2701                           tblptrl	equ	0xFF6
  2702                           tablat	equ	0xFF5
  2703                           prodh	equ	0xFF4
  2704                           prodl	equ	0xFF3
  2705                           intcon	equ	0xFF2
  2706                           postinc0	equ	0xFEE
  2707                           wreg	equ	0xFE8
  2708                           indf2	equ	0xFDF
  2709                           fsr2h	equ	0xFDA
  2710                           fsr2l	equ	0xFD9
  2711                           status	equ	0xFD8
  2712                           
  2713 ;; *************** function _PIN_MANAGER_Initialize *****************
  2714 ;; Defined at:
  2715 ;;		line 59 in file "mcc_generated_files/pin_manager.c"
  2716 ;; Parameters:    Size  Location     Type
  2717 ;;		None
  2718 ;; Auto vars:     Size  Location     Type
  2719 ;;		None
  2720 ;; Return value:  Size  Location     Type
  2721 ;;                  1    wreg      void 
  2722 ;; Registers used:
  2723 ;;		wreg, status,2, status,0, cstack
  2724 ;; Tracked objects:
  2725 ;;		On entry : 0/0
  2726 ;;		On exit  : 0/0
  2727 ;;		Unchanged: 0/0
  2728 ;; Data sizes:     COMRAM   BANK0   BANK1
  2729 ;;      Params:         0       0       0
  2730 ;;      Locals:         0       0       0
  2731 ;;      Temps:          0       0       0
  2732 ;;      Totals:         0       0       0
  2733 ;;Total ram usage:        0 bytes
  2734 ;; Hardware stack levels used:    1
  2735 ;; Hardware stack levels required when called:    5
  2736 ;; This function calls:
  2737 ;;		_IOCA4_SetInterruptHandler
  2738 ;; This function is called by:
  2739 ;;		_SYSTEM_Initialize
  2740 ;; This function uses a non-reentrant model
  2741 ;;
  2742                           
  2743                           	psect	text23
  2744  00074C                     __ptext23:
  2745                           	opt stack 0
  2746  00074C                     _PIN_MANAGER_Initialize:
  2747                           	opt stack 24
  2748                           
  2749                           ;mcc_generated_files/pin_manager.c: 64:     LATA = 0x00;
  2750                           
  2751                           ;incstack = 0
  2752  00074C  6A89               	clrf	3977,c	;volatile
  2753                           
  2754                           ;mcc_generated_files/pin_manager.c: 65:     LATB = 0x00;
  2755  00074E  6A8A               	clrf	3978,c	;volatile
  2756                           
  2757                           ;mcc_generated_files/pin_manager.c: 66:     LATC = 0x00;
  2758  000750  6A8B               	clrf	3979,c	;volatile
  2759                           
  2760                           ;mcc_generated_files/pin_manager.c: 71:     TRISA = 0x17;
  2761  000752  0E17               	movlw	23
  2762  000754  6E92               	movwf	3986,c	;volatile
  2763                           
  2764                           ;mcc_generated_files/pin_manager.c: 72:     TRISB = 0x70;
  2765  000756  0E70               	movlw	112
  2766  000758  6E93               	movwf	3987,c	;volatile
  2767                           
  2768                           ;mcc_generated_files/pin_manager.c: 73:     TRISC = 0xFF;
  2769  00075A  6894               	setf	3988,c	;volatile
  2770                           
  2771                           ;mcc_generated_files/pin_manager.c: 78:     ANSELHbits.ANS11 = 0;
  2772  00075C  967F               	bcf	3967,3,c	;volatile
  2773                           
  2774                           ;mcc_generated_files/pin_manager.c: 79:     ANSELbits.ANS3 = 0;
  2775  00075E  967E               	bcf	3966,3,c	;volatile
  2776                           
  2777                           ;mcc_generated_files/pin_manager.c: 85:     WPUB = 0x00;
  2778  000760  6A78               	clrf	3960,c	;volatile
  2779                           
  2780                           ;mcc_generated_files/pin_manager.c: 86:     WPUA = 0x10;
  2781  000762  0E10               	movlw	16
  2782  000764  6E77               	movwf	3959,c	;volatile
  2783                           
  2784                           ;mcc_generated_files/pin_manager.c: 87:     INTCON2bits.nRBPU = 0;
  2785  000766  9EF1               	bcf	intcon2,7,c	;volatile
  2786                           
  2787                           ;mcc_generated_files/pin_manager.c: 98:     IOCAbits.IOCA4 = 1;
  2788  000768  8879               	bsf	3961,4,c	;volatile
  2789                           
  2790                           ;mcc_generated_files/pin_manager.c: 103:     IOCA4_SetInterruptHandler(IOCA4_DefaultInte
      +                          rruptHandler);
  2791  00076A  0E9E               	movlw	low _IOCA4_DefaultInterruptHandler
  2792  00076C  6E09               	movwf	IOCA4_SetInterruptHandler@InterruptHandler,c
  2793  00076E  0E09               	movlw	high _IOCA4_DefaultInterruptHandler
  2794  000770  6E0A               	movwf	IOCA4_SetInterruptHandler@InterruptHandler+1,c
  2795  000772  ECA4  F004         	call	_IOCA4_SetInterruptHandler	;wreg free
  2796                           
  2797                           ;mcc_generated_files/pin_manager.c: 106:     INTCONbits.RABIE = 1;
  2798  000776  86F2               	bsf	intcon,3,c	;volatile
  2799  000778  0012               	return		;funcret
  2800  00077A                     __end_of_PIN_MANAGER_Initialize:
  2801                           	opt stack 0
  2802                           tblptru	equ	0xFF8
  2803                           tblptrh	equ	0xFF7
  2804                           tblptrl	equ	0xFF6
  2805                           tablat	equ	0xFF5
  2806                           prodh	equ	0xFF4
  2807                           prodl	equ	0xFF3
  2808                           intcon	equ	0xFF2
  2809                           intcon2	equ	0xFF1
  2810                           postinc0	equ	0xFEE
  2811                           wreg	equ	0xFE8
  2812                           indf2	equ	0xFDF
  2813                           fsr2h	equ	0xFDA
  2814                           fsr2l	equ	0xFD9
  2815                           status	equ	0xFD8
  2816                           
  2817 ;; *************** function _IOCA4_SetInterruptHandler *****************
  2818 ;; Defined at:
  2819 ;;		line 138 in file "mcc_generated_files/pin_manager.c"
  2820 ;; Parameters:    Size  Location     Type
  2821 ;;  InterruptHan    2    8[COMRAM] PTR FTN()void 
  2822 ;;		 -> _IOC_Ready(1), IOCA4_DefaultInterruptHandler(1), 
  2823 ;; Auto vars:     Size  Location     Type
  2824 ;;		None
  2825 ;; Return value:  Size  Location     Type
  2826 ;;                  1    wreg      void 
  2827 ;; Registers used:
  2828 ;;		wreg, status,2, status,0
  2829 ;; Tracked objects:
  2830 ;;		On entry : 0/0
  2831 ;;		On exit  : 0/0
  2832 ;;		Unchanged: 0/0
  2833 ;; Data sizes:     COMRAM   BANK0   BANK1
  2834 ;;      Params:         2       0       0
  2835 ;;      Locals:         0       0       0
  2836 ;;      Temps:          0       0       0
  2837 ;;      Totals:         2       0       0
  2838 ;;Total ram usage:        2 bytes
  2839 ;; Hardware stack levels used:    1
  2840 ;; Hardware stack levels required when called:    4
  2841 ;; This function calls:
  2842 ;;		Nothing
  2843 ;; This function is called by:
  2844 ;;		_PIN_MANAGER_Initialize
  2845 ;;		_logger_initialize
  2846 ;; This function uses a non-reentrant model
  2847 ;;
  2848                           
  2849                           	psect	text24
  2850  000948                     __ptext24:
  2851                           	opt stack 0
  2852  000948                     _IOCA4_SetInterruptHandler:
  2853                           	opt stack 25
  2854                           
  2855                           ;mcc_generated_files/pin_manager.c: 139:     IOCA4_InterruptHandler = InterruptHandler;
  2856                           
  2857                           ;incstack = 0
  2858  000948  C009  F053         	movff	IOCA4_SetInterruptHandler@InterruptHandler,_IOCA4_InterruptHandler
  2859  00094C  C00A  F054         	movff	IOCA4_SetInterruptHandler@InterruptHandler+1,_IOCA4_InterruptHandler+1
  2860  000950  0012               	return		;funcret
  2861  000952                     __end_of_IOCA4_SetInterruptHandler:
  2862                           	opt stack 0
  2863                           tblptru	equ	0xFF8
  2864                           tblptrh	equ	0xFF7
  2865                           tblptrl	equ	0xFF6
  2866                           tablat	equ	0xFF5
  2867                           prodh	equ	0xFF4
  2868                           prodl	equ	0xFF3
  2869                           intcon	equ	0xFF2
  2870                           intcon2	equ	0xFF1
  2871                           postinc0	equ	0xFEE
  2872                           wreg	equ	0xFE8
  2873                           indf2	equ	0xFDF
  2874                           fsr2h	equ	0xFDA
  2875                           fsr2l	equ	0xFD9
  2876                           status	equ	0xFD8
  2877                           
  2878 ;; *************** function _OSCILLATOR_Initialize *****************
  2879 ;; Defined at:
  2880 ;;		line 61 in file "mcc_generated_files/mcc.c"
  2881 ;; Parameters:    Size  Location     Type
  2882 ;;		None
  2883 ;; Auto vars:     Size  Location     Type
  2884 ;;		None
  2885 ;; Return value:  Size  Location     Type
  2886 ;;                  1    wreg      void 
  2887 ;; Registers used:
  2888 ;;		wreg, status,2
  2889 ;; Tracked objects:
  2890 ;;		On entry : 0/0
  2891 ;;		On exit  : 0/0
  2892 ;;		Unchanged: 0/0
  2893 ;; Data sizes:     COMRAM   BANK0   BANK1
  2894 ;;      Params:         0       0       0
  2895 ;;      Locals:         0       0       0
  2896 ;;      Temps:          0       0       0
  2897 ;;      Totals:         0       0       0
  2898 ;;Total ram usage:        0 bytes
  2899 ;; Hardware stack levels used:    1
  2900 ;; Hardware stack levels required when called:    4
  2901 ;; This function calls:
  2902 ;;		Nothing
  2903 ;; This function is called by:
  2904 ;;		_SYSTEM_Initialize
  2905 ;; This function uses a non-reentrant model
  2906 ;;
  2907                           
  2908                           	psect	text25
  2909  000916                     __ptext25:
  2910                           	opt stack 0
  2911  000916                     _OSCILLATOR_Initialize:
  2912                           	opt stack 25
  2913                           
  2914                           ;mcc_generated_files/mcc.c: 64:     OSCCON = 0x70;
  2915                           
  2916                           ;incstack = 0
  2917  000916  0E70               	movlw	112
  2918  000918  6ED3               	movwf	4051,c	;volatile
  2919                           
  2920                           ;mcc_generated_files/mcc.c: 66:     OSCCON2 = 0x04;
  2921  00091A  0E04               	movlw	4
  2922  00091C  6ED2               	movwf	4050,c	;volatile
  2923                           
  2924                           ;mcc_generated_files/mcc.c: 68:     OSCTUNE = 0x40;
  2925  00091E  0E40               	movlw	64
  2926  000920  6E9B               	movwf	3995,c	;volatile
  2927  000922  0C40               	retlw	64	;funcret
  2928  000924                     __end_of_OSCILLATOR_Initialize:
  2929                           	opt stack 0
  2930                           tblptru	equ	0xFF8
  2931                           tblptrh	equ	0xFF7
  2932                           tblptrl	equ	0xFF6
  2933                           tablat	equ	0xFF5
  2934                           prodh	equ	0xFF4
  2935                           prodl	equ	0xFF3
  2936                           intcon	equ	0xFF2
  2937                           intcon2	equ	0xFF1
  2938                           postinc0	equ	0xFEE
  2939                           wreg	equ	0xFE8
  2940                           indf2	equ	0xFDF
  2941                           fsr2h	equ	0xFDA
  2942                           fsr2l	equ	0xFD9
  2943                           status	equ	0xFD8
  2944                           
  2945 ;; *************** function _INTERRUPT_Initialize *****************
  2946 ;; Defined at:
  2947 ;;		line 53 in file "mcc_generated_files/interrupt_manager.c"
  2948 ;; Parameters:    Size  Location     Type
  2949 ;;		None
  2950 ;; Auto vars:     Size  Location     Type
  2951 ;;		None
  2952 ;; Return value:  Size  Location     Type
  2953 ;;                  1    wreg      void 
  2954 ;; Registers used:
  2955 ;;		None
  2956 ;; Tracked objects:
  2957 ;;		On entry : 0/0
  2958 ;;		On exit  : 0/0
  2959 ;;		Unchanged: 0/0
  2960 ;; Data sizes:     COMRAM   BANK0   BANK1
  2961 ;;      Params:         0       0       0
  2962 ;;      Locals:         0       0       0
  2963 ;;      Temps:          0       0       0
  2964 ;;      Totals:         0       0       0
  2965 ;;Total ram usage:        0 bytes
  2966 ;; Hardware stack levels used:    1
  2967 ;; Hardware stack levels required when called:    4
  2968 ;; This function calls:
  2969 ;;		Nothing
  2970 ;; This function is called by:
  2971 ;;		_SYSTEM_Initialize
  2972 ;; This function uses a non-reentrant model
  2973 ;;
  2974                           
  2975                           	psect	text26
  2976  00098A                     __ptext26:
  2977                           	opt stack 0
  2978  00098A                     _INTERRUPT_Initialize:
  2979                           	opt stack 25
  2980                           
  2981                           ;mcc_generated_files/interrupt_manager.c: 56:     RCONbits.IPEN = 0;
  2982                           
  2983                           ;incstack = 0
  2984  00098A  9ED0               	bcf	4048,7,c	;volatile
  2985  00098C  0012               	return		;funcret
  2986  00098E                     __end_of_INTERRUPT_Initialize:
  2987                           	opt stack 0
  2988                           tblptru	equ	0xFF8
  2989                           tblptrh	equ	0xFF7
  2990                           tblptrl	equ	0xFF6
  2991                           tablat	equ	0xFF5
  2992                           prodh	equ	0xFF4
  2993                           prodl	equ	0xFF3
  2994                           intcon	equ	0xFF2
  2995                           intcon2	equ	0xFF1
  2996                           postinc0	equ	0xFEE
  2997                           wreg	equ	0xFE8
  2998                           indf2	equ	0xFDF
  2999                           fsr2h	equ	0xFDA
  3000                           fsr2l	equ	0xFD9
  3001                           status	equ	0xFD8
  3002                           
  3003 ;; *************** function _EUSART_Initialize *****************
  3004 ;; Defined at:
  3005 ;;		line 75 in file "mcc_generated_files/eusart.c"
  3006 ;; Parameters:    Size  Location     Type
  3007 ;;		None
  3008 ;; Auto vars:     Size  Location     Type
  3009 ;;		None
  3010 ;; Return value:  Size  Location     Type
  3011 ;;                  1    wreg      void 
  3012 ;; Registers used:
  3013 ;;		wreg, status,2, status,0, cstack
  3014 ;; Tracked objects:
  3015 ;;		On entry : 0/0
  3016 ;;		On exit  : 0/0
  3017 ;;		Unchanged: 0/0
  3018 ;; Data sizes:     COMRAM   BANK0   BANK1
  3019 ;;      Params:         0       0       0
  3020 ;;      Locals:         0       0       0
  3021 ;;      Temps:          0       0       0
  3022 ;;      Totals:         0       0       0
  3023 ;;Total ram usage:        0 bytes
  3024 ;; Hardware stack levels used:    1
  3025 ;; Hardware stack levels required when called:    5
  3026 ;; This function calls:
  3027 ;;		_EUSART_SetRxInterruptHandler
  3028 ;;		_EUSART_SetTxInterruptHandler
  3029 ;; This function is called by:
  3030 ;;		_SYSTEM_Initialize
  3031 ;; This function uses a non-reentrant model
  3032 ;;
  3033                           
  3034                           	psect	text27
  3035  0005F6                     __ptext27:
  3036                           	opt stack 0
  3037  0005F6                     _EUSART_Initialize:
  3038                           	opt stack 24
  3039                           
  3040                           ;mcc_generated_files/eusart.c: 78:     PIE1bits.RCIE = 0;
  3041                           
  3042                           ;incstack = 0
  3043  0005F6  9A9D               	bcf	3997,5,c	;volatile
  3044                           
  3045                           ;mcc_generated_files/eusart.c: 79:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  3046  0005F8  0EF2               	movlw	low _EUSART_Receive_ISR
  3047  0005FA  6E09               	movwf	EUSART_SetRxInterruptHandler@interruptHandler,c
  3048  0005FC  0E07               	movlw	high _EUSART_Receive_ISR
  3049  0005FE  6E0A               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1,c
  3050  000600  ECAE  F004         	call	_EUSART_SetRxInterruptHandler	;wreg free
  3051                           
  3052                           ;mcc_generated_files/eusart.c: 80:     PIE1bits.TXIE = 0;
  3053  000604  989D               	bcf	3997,4,c	;volatile
  3054                           
  3055                           ;mcc_generated_files/eusart.c: 81:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  3056  000606  0E3C               	movlw	low _EUSART_Transmit_ISR
  3057  000608  6E09               	movwf	EUSART_SetTxInterruptHandler@interruptHandler,c
  3058  00060A  0E08               	movlw	high _EUSART_Transmit_ISR
  3059  00060C  6E0A               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1,c
  3060  00060E  ECA9  F004         	call	_EUSART_SetTxInterruptHandler	;wreg free
  3061                           
  3062                           ;mcc_generated_files/eusart.c: 85:     BAUDCON = 0x08;
  3063  000612  0E08               	movlw	8
  3064  000614  6EB8               	movwf	4024,c	;volatile
  3065                           
  3066                           ;mcc_generated_files/eusart.c: 88:     RCSTA = 0x90;
  3067  000616  0E90               	movlw	144
  3068  000618  6EAB               	movwf	4011,c	;volatile
  3069                           
  3070                           ;mcc_generated_files/eusart.c: 91:     TXSTA = 0x24;
  3071  00061A  0E24               	movlw	36
  3072  00061C  6EAC               	movwf	4012,c	;volatile
  3073                           
  3074                           ;mcc_generated_files/eusart.c: 94:     SPBRG = 0x8A;
  3075  00061E  0E8A               	movlw	138
  3076  000620  6EAF               	movwf	4015,c	;volatile
  3077                           
  3078                           ;mcc_generated_files/eusart.c: 97:     SPBRGH = 0x00;
  3079  000622  6AB0               	clrf	4016,c	;volatile
  3080                           
  3081                           ;mcc_generated_files/eusart.c: 101:     eusartTxHead = 0;
  3082  000624  6A38               	clrf	_eusartTxHead,c	;volatile
  3083                           
  3084                           ;mcc_generated_files/eusart.c: 102:     eusartTxTail = 0;
  3085  000626  6A37               	clrf	_eusartTxTail,c	;volatile
  3086                           
  3087                           ;mcc_generated_files/eusart.c: 103:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  3088  000628  0E40               	movlw	64
  3089  00062A  6E56               	movwf	_eusartTxBufferRemaining,c	;volatile
  3090                           
  3091                           ;mcc_generated_files/eusart.c: 105:     eusartRxHead = 0;
  3092  00062C  6A36               	clrf	_eusartRxHead,c	;volatile
  3093                           
  3094                           ;mcc_generated_files/eusart.c: 106:     eusartRxTail = 0;
  3095  00062E  6A35               	clrf	_eusartRxTail,c	;volatile
  3096                           
  3097                           ;mcc_generated_files/eusart.c: 107:     eusartRxCount = 0;
  3098  000630  6A34               	clrf	_eusartRxCount,c	;volatile
  3099                           
  3100                           ;mcc_generated_files/eusart.c: 110:     PIE1bits.RCIE = 1;
  3101  000632  8A9D               	bsf	3997,5,c	;volatile
  3102  000634  0012               	return		;funcret
  3103  000636                     __end_of_EUSART_Initialize:
  3104                           	opt stack 0
  3105                           tblptru	equ	0xFF8
  3106                           tblptrh	equ	0xFF7
  3107                           tblptrl	equ	0xFF6
  3108                           tablat	equ	0xFF5
  3109                           prodh	equ	0xFF4
  3110                           prodl	equ	0xFF3
  3111                           intcon	equ	0xFF2
  3112                           intcon2	equ	0xFF1
  3113                           postinc0	equ	0xFEE
  3114                           wreg	equ	0xFE8
  3115                           indf2	equ	0xFDF
  3116                           fsr2h	equ	0xFDA
  3117                           fsr2l	equ	0xFD9
  3118                           status	equ	0xFD8
  3119                           
  3120 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  3121 ;; Defined at:
  3122 ;;		line 211 in file "mcc_generated_files/eusart.c"
  3123 ;; Parameters:    Size  Location     Type
  3124 ;;  interruptHan    2    8[COMRAM] PTR FTN()void 
  3125 ;;		 -> EUSART_Transmit_ISR(1), 
  3126 ;; Auto vars:     Size  Location     Type
  3127 ;;		None
  3128 ;; Return value:  Size  Location     Type
  3129 ;;                  1    wreg      void 
  3130 ;; Registers used:
  3131 ;;		wreg, status,2, status,0
  3132 ;; Tracked objects:
  3133 ;;		On entry : 0/0
  3134 ;;		On exit  : 0/0
  3135 ;;		Unchanged: 0/0
  3136 ;; Data sizes:     COMRAM   BANK0   BANK1
  3137 ;;      Params:         2       0       0
  3138 ;;      Locals:         0       0       0
  3139 ;;      Temps:          0       0       0
  3140 ;;      Totals:         2       0       0
  3141 ;;Total ram usage:        2 bytes
  3142 ;; Hardware stack levels used:    1
  3143 ;; Hardware stack levels required when called:    4
  3144 ;; This function calls:
  3145 ;;		Nothing
  3146 ;; This function is called by:
  3147 ;;		_EUSART_Initialize
  3148 ;; This function uses a non-reentrant model
  3149 ;;
  3150                           
  3151                           	psect	text28
  3152  000952                     __ptext28:
  3153                           	opt stack 0
  3154  000952                     _EUSART_SetTxInterruptHandler:
  3155                           	opt stack 24
  3156                           
  3157                           ;mcc_generated_files/eusart.c: 212:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  3158                           
  3159                           ;incstack = 0
  3160  000952  C009  F051         	movff	EUSART_SetTxInterruptHandler@interruptHandler,_EUSART_TxDefaultInterruptHandler
  3161  000956  C00A  F052         	movff	EUSART_SetTxInterruptHandler@interruptHandler+1,_EUSART_TxDefaultInterruptHandler
      +                          +1
  3162  00095A  0012               	return		;funcret
  3163  00095C                     __end_of_EUSART_SetTxInterruptHandler:
  3164                           	opt stack 0
  3165                           tblptru	equ	0xFF8
  3166                           tblptrh	equ	0xFF7
  3167                           tblptrl	equ	0xFF6
  3168                           tablat	equ	0xFF5
  3169                           prodh	equ	0xFF4
  3170                           prodl	equ	0xFF3
  3171                           intcon	equ	0xFF2
  3172                           intcon2	equ	0xFF1
  3173                           postinc0	equ	0xFEE
  3174                           wreg	equ	0xFE8
  3175                           indf2	equ	0xFDF
  3176                           fsr2h	equ	0xFDA
  3177                           fsr2l	equ	0xFD9
  3178                           status	equ	0xFD8
  3179                           
  3180 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  3181 ;; Defined at:
  3182 ;;		line 215 in file "mcc_generated_files/eusart.c"
  3183 ;; Parameters:    Size  Location     Type
  3184 ;;  interruptHan    2    8[COMRAM] PTR FTN()void 
  3185 ;;		 -> EUSART_Receive_ISR(1), 
  3186 ;; Auto vars:     Size  Location     Type
  3187 ;;		None
  3188 ;; Return value:  Size  Location     Type
  3189 ;;                  1    wreg      void 
  3190 ;; Registers used:
  3191 ;;		wreg, status,2, status,0
  3192 ;; Tracked objects:
  3193 ;;		On entry : 0/0
  3194 ;;		On exit  : 0/0
  3195 ;;		Unchanged: 0/0
  3196 ;; Data sizes:     COMRAM   BANK0   BANK1
  3197 ;;      Params:         2       0       0
  3198 ;;      Locals:         0       0       0
  3199 ;;      Temps:          0       0       0
  3200 ;;      Totals:         2       0       0
  3201 ;;Total ram usage:        2 bytes
  3202 ;; Hardware stack levels used:    1
  3203 ;; Hardware stack levels required when called:    4
  3204 ;; This function calls:
  3205 ;;		Nothing
  3206 ;; This function is called by:
  3207 ;;		_EUSART_Initialize
  3208 ;; This function uses a non-reentrant model
  3209 ;;
  3210                           
  3211                           	psect	text29
  3212  00095C                     __ptext29:
  3213                           	opt stack 0
  3214  00095C                     _EUSART_SetRxInterruptHandler:
  3215                           	opt stack 24
  3216                           
  3217                           ;mcc_generated_files/eusart.c: 216:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  3218                           
  3219                           ;incstack = 0
  3220  00095C  C009  F04F         	movff	EUSART_SetRxInterruptHandler@interruptHandler,_EUSART_RxDefaultInterruptHandler
  3221  000960  C00A  F050         	movff	EUSART_SetRxInterruptHandler@interruptHandler+1,_EUSART_RxDefaultInterruptHandler
      +                          +1
  3222  000964  0012               	return		;funcret
  3223  000966                     __end_of_EUSART_SetRxInterruptHandler:
  3224                           	opt stack 0
  3225                           tblptru	equ	0xFF8
  3226                           tblptrh	equ	0xFF7
  3227                           tblptrl	equ	0xFF6
  3228                           tablat	equ	0xFF5
  3229                           prodh	equ	0xFF4
  3230                           prodl	equ	0xFF3
  3231                           intcon	equ	0xFF2
  3232                           intcon2	equ	0xFF1
  3233                           postinc0	equ	0xFEE
  3234                           wreg	equ	0xFE8
  3235                           indf2	equ	0xFDF
  3236                           fsr2h	equ	0xFDA
  3237                           fsr2l	equ	0xFD9
  3238                           status	equ	0xFD8
  3239                           
  3240 ;; *************** function _ADC1_Initialize *****************
  3241 ;; Defined at:
  3242 ;;		line 60 in file "mcc_generated_files/adc1.c"
  3243 ;; Parameters:    Size  Location     Type
  3244 ;;		None
  3245 ;; Auto vars:     Size  Location     Type
  3246 ;;		None
  3247 ;; Return value:  Size  Location     Type
  3248 ;;                  1    wreg      void 
  3249 ;; Registers used:
  3250 ;;		wreg, status,2
  3251 ;; Tracked objects:
  3252 ;;		On entry : 0/0
  3253 ;;		On exit  : 0/0
  3254 ;;		Unchanged: 0/0
  3255 ;; Data sizes:     COMRAM   BANK0   BANK1
  3256 ;;      Params:         0       0       0
  3257 ;;      Locals:         0       0       0
  3258 ;;      Temps:          0       0       0
  3259 ;;      Totals:         0       0       0
  3260 ;;Total ram usage:        0 bytes
  3261 ;; Hardware stack levels used:    1
  3262 ;; Hardware stack levels required when called:    4
  3263 ;; This function calls:
  3264 ;;		Nothing
  3265 ;; This function is called by:
  3266 ;;		_SYSTEM_Initialize
  3267 ;; This function uses a non-reentrant model
  3268 ;;
  3269                           
  3270                           	psect	text30
  3271  000904                     __ptext30:
  3272                           	opt stack 0
  3273  000904                     _ADC1_Initialize:
  3274                           	opt stack 25
  3275                           
  3276                           ;mcc_generated_files/adc1.c: 65:     ADCON0 = 0x01;
  3277                           
  3278                           ;incstack = 0
  3279  000904  0E01               	movlw	1
  3280  000906  6EC2               	movwf	4034,c	;volatile
  3281                           
  3282                           ;mcc_generated_files/adc1.c: 68:     ADCON1 = 0x00;
  3283  000908  6AC1               	clrf	4033,c	;volatile
  3284                           
  3285                           ;mcc_generated_files/adc1.c: 71:     ADCON2 = 0x87;
  3286  00090A  0E87               	movlw	135
  3287  00090C  6EC0               	movwf	4032,c	;volatile
  3288                           
  3289                           ;mcc_generated_files/adc1.c: 74:     ADRESL = 0x00;
  3290  00090E  6AC3               	clrf	4035,c	;volatile
  3291                           
  3292                           ;mcc_generated_files/adc1.c: 77:     ADRESH = 0x00;
  3293  000910  6AC4               	clrf	4036,c	;volatile
  3294                           
  3295                           ;mcc_generated_files/adc1.c: 80:     PIE1bits.ADIE = 1;
  3296  000912  8C9D               	bsf	3997,6,c	;volatile
  3297  000914  0012               	return		;funcret
  3298  000916                     __end_of_ADC1_Initialize:
  3299                           	opt stack 0
  3300                           tblptru	equ	0xFF8
  3301                           tblptrh	equ	0xFF7
  3302                           tblptrl	equ	0xFF6
  3303                           tablat	equ	0xFF5
  3304                           prodh	equ	0xFF4
  3305                           prodl	equ	0xFF3
  3306                           intcon	equ	0xFF2
  3307                           intcon2	equ	0xFF1
  3308                           postinc0	equ	0xFEE
  3309                           wreg	equ	0xFE8
  3310                           indf2	equ	0xFDF
  3311                           fsr2h	equ	0xFDA
  3312                           fsr2l	equ	0xFD9
  3313                           status	equ	0xFD8
  3314                           
  3315 ;; *************** function _EUSART_is_rx_ready *****************
  3316 ;; Defined at:
  3317 ;;		line 118 in file "mcc_generated_files/eusart.c"
  3318 ;; Parameters:    Size  Location     Type
  3319 ;;		None
  3320 ;; Auto vars:     Size  Location     Type
  3321 ;;		None
  3322 ;; Return value:  Size  Location     Type
  3323 ;;                  1    wreg      unsigned char 
  3324 ;; Registers used:
  3325 ;;		wreg, status,2
  3326 ;; Tracked objects:
  3327 ;;		On entry : 0/0
  3328 ;;		On exit  : 0/0
  3329 ;;		Unchanged: 0/0
  3330 ;; Data sizes:     COMRAM   BANK0   BANK1
  3331 ;;      Params:         0       0       0
  3332 ;;      Locals:         0       0       0
  3333 ;;      Temps:          0       0       0
  3334 ;;      Totals:         0       0       0
  3335 ;;Total ram usage:        0 bytes
  3336 ;; Hardware stack levels used:    1
  3337 ;; Hardware stack levels required when called:    4
  3338 ;; This function calls:
  3339 ;;		Nothing
  3340 ;; This function is called by:
  3341 ;;		_main
  3342 ;; This function uses a non-reentrant model
  3343 ;;
  3344                           
  3345                           	psect	text31
  3346  00098E                     __ptext31:
  3347                           	opt stack 0
  3348  00098E                     _EUSART_is_rx_ready:
  3349                           	opt stack 26
  3350                           
  3351                           ;mcc_generated_files/eusart.c: 120:     return eusartRxCount;
  3352                           
  3353                           ;incstack = 0
  3354  00098E  5034               	movf	_eusartRxCount,w,c	;volatile
  3355  000990  0012               	return		;funcret
  3356  000992                     __end_of_EUSART_is_rx_ready:
  3357                           	opt stack 0
  3358                           tblptru	equ	0xFF8
  3359                           tblptrh	equ	0xFF7
  3360                           tblptrl	equ	0xFF6
  3361                           tablat	equ	0xFF5
  3362                           prodh	equ	0xFF4
  3363                           prodl	equ	0xFF3
  3364                           intcon	equ	0xFF2
  3365                           intcon2	equ	0xFF1
  3366                           postinc0	equ	0xFEE
  3367                           wreg	equ	0xFE8
  3368                           indf2	equ	0xFDF
  3369                           fsr2h	equ	0xFDA
  3370                           fsr2l	equ	0xFD9
  3371                           status	equ	0xFD8
  3372                           
  3373 ;; *************** function _INTERRUPT_InterruptManager *****************
  3374 ;; Defined at:
  3375 ;;		line 59 in file "mcc_generated_files/interrupt_manager.c"
  3376 ;; Parameters:    Size  Location     Type
  3377 ;;		None
  3378 ;; Auto vars:     Size  Location     Type
  3379 ;;		None
  3380 ;; Return value:  Size  Location     Type
  3381 ;;                  1    wreg      void 
  3382 ;; Registers used:
  3383 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  3384 ;; Tracked objects:
  3385 ;;		On entry : 0/0
  3386 ;;		On exit  : 0/0
  3387 ;;		Unchanged: 0/0
  3388 ;; Data sizes:     COMRAM   BANK0   BANK1
  3389 ;;      Params:         0       0       0
  3390 ;;      Locals:         0       0       0
  3391 ;;      Temps:          4       0       0
  3392 ;;      Totals:         4       0       0
  3393 ;;Total ram usage:        4 bytes
  3394 ;; Hardware stack levels used:    1
  3395 ;; Hardware stack levels required when called:    3
  3396 ;; This function calls:
  3397 ;;		Absolute function
  3398 ;;		_ADC1_GetConversionResult
  3399 ;;		_ADC1_ISR
  3400 ;;		_EUSART_Receive_ISR
  3401 ;;		_EUSART_Transmit_ISR
  3402 ;;		_PIN_MANAGER_IOC
  3403 ;;		_TMR1_ISR
  3404 ;; This function is called by:
  3405 ;;		Interrupt level 2
  3406 ;; This function uses a non-reentrant model
  3407 ;;
  3408                           
  3409                           	psect	intcode
  3410  000008                     __pintcode:
  3411                           	opt stack 0
  3412  000008                     _INTERRUPT_InterruptManager:
  3413                           	opt stack 22
  3414                           
  3415                           ;incstack = 0
  3416  000008  8257               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3417  00000A  CFFA F005          	movff	pclath,??_INTERRUPT_InterruptManager
  3418  00000E  CFFB F006          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  3419  000012  CFD9 F007          	movff	fsr2l,??_INTERRUPT_InterruptManager+2
  3420  000016  CFDA F008          	movff	fsr2h,??_INTERRUPT_InterruptManager+3
  3421                           
  3422                           ;mcc_generated_files/interrupt_manager.c: 62:     if(INTCONbits.RABIE == 1 && INTCONbits
      +                          .RABIF == 1)
  3423  00001A  B6F2               	btfsc	intcon,3,c	;volatile
  3424  00001C  A0F2               	btfss	intcon,0,c	;volatile
  3425  00001E  D003               	goto	i2l113
  3426                           
  3427                           ;mcc_generated_files/interrupt_manager.c: 63:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 64:         PIN_MANAGER_IOC();
  3428  000020  ECB8  F004         	call	_PIN_MANAGER_IOC	;wreg free
  3429                           
  3430                           ;mcc_generated_files/interrupt_manager.c: 65:     }
  3431  000024  D031               	goto	i2u93_49
  3432  000026                     i2l113:
  3433  000026  ACF2               	btfss	intcon,6,c	;volatile
  3434  000028  D02F               	goto	i2u93_49
  3435                           
  3436                           ;mcc_generated_files/interrupt_manager.c: 67:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 68:         if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  3437  00002A  B09D               	btfsc	3997,0,c	;volatile
  3438  00002C  A09E               	btfss	3998,0,c	;volatile
  3439  00002E  D003               	goto	i2l116
  3440                           
  3441                           ;mcc_generated_files/interrupt_manager.c: 69:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 70:             TMR1_ISR();
  3442  000030  ECBD  F003         	call	_TMR1_ISR	;wreg free
  3443                           
  3444                           ;mcc_generated_files/interrupt_manager.c: 71:         }
  3445  000034  D029               	goto	i2u93_49
  3446  000036                     i2l116:
  3447  000036  BC9D               	btfsc	3997,6,c	;volatile
  3448  000038  AC9E               	btfss	3998,6,c	;volatile
  3449  00003A  D00C               	goto	i2l118
  3450                           
  3451                           ;mcc_generated_files/interrupt_manager.c: 73:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 74:             ADC_value = ADC1_GetConversionResult();
  3452  00003C  EC6F  F004         	call	_ADC1_GetConversionResult	;wreg free
  3453  000040  C001  F02B         	movff	?_ADC1_GetConversionResult,_ADC_value	;volatile
  3454  000044  C002  F02C         	movff	?_ADC1_GetConversionResult+1,_ADC_value+1	;volatile
  3455                           
  3456                           ;mcc_generated_files/interrupt_manager.c: 75:             ADC_count++;
  3457  000048  2A3A               	incf	_ADC_count,f,c	;volatile
  3458                           
  3459                           ;mcc_generated_files/interrupt_manager.c: 82:             ADC_state = ADC_READY;
  3460  00004A  0E01               	movlw	1
  3461  00004C  6E39               	movwf	_ADC_state,c	;volatile
  3462                           
  3463                           ;mcc_generated_files/interrupt_manager.c: 83:             ADC1_ISR();
  3464  00004E  ECCB  F004         	call	_ADC1_ISR	;wreg free
  3465                           
  3466                           ;mcc_generated_files/interrupt_manager.c: 84:         }
  3467  000052  D01A               	goto	i2u93_49
  3468  000054                     i2l118:
  3469  000054  B89D               	btfsc	3997,4,c	;volatile
  3470  000056  A89E               	btfss	3998,4,c	;volatile
  3471  000058  D008               	goto	i2l120
  3472                           
  3473                           ;mcc_generated_files/interrupt_manager.c: 86:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 87:             EUSART_TxDefaultInterruptHandler();
  3474  00005A  D801               	call	i2u90_48
  3475  00005C  D015               	goto	i2u93_49
  3476  00005E                     i2u90_48:
  3477  00005E  0005               	push	
  3478  000060  6EFA               	movwf	pclath,c
  3479  000062  5051               	movf	_EUSART_TxDefaultInterruptHandler,w,c
  3480  000064  6EFD               	movwf	tosl,c
  3481  000066  5052               	movf	_EUSART_TxDefaultInterruptHandler+1,w,c
  3482  000068  D00A               	goto	L1
  3483  00006A                     i2l120:
  3484  00006A  BA9D               	btfsc	3997,5,c	;volatile
  3485  00006C  AA9E               	btfss	3998,5,c	;volatile
  3486  00006E  D00C               	goto	i2u93_49
  3487                           
  3488                           ;mcc_generated_files/interrupt_manager.c: 90:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 91:             EUSART_RxDefaultInterruptHandler();
  3489  000070  D801               	call	i2u93_48
  3490  000072  D00A               	goto	i2u93_49
  3491  000074                     i2u93_48:
  3492  000074  0005               	push	
  3493  000076  6EFA               	movwf	pclath,c
  3494  000078  504F               	movf	_EUSART_RxDefaultInterruptHandler,w,c
  3495  00007A  6EFD               	movwf	tosl,c
  3496  00007C  5050               	movf	_EUSART_RxDefaultInterruptHandler+1,w,c
  3497  00007E                     L1:
  3498  00007E  6EFE               	movwf	tosh,c
  3499  000080  50F8               	movf	tblptru,w,c
  3500  000082  6EFF               	movwf	tosu,c
  3501  000084  50FA               	movf	pclath,w,c
  3502  000086  0012               	return		;indir
  3503  000088                     i2u93_49:
  3504  000088  C008  FFDA         	movff	??_INTERRUPT_InterruptManager+3,fsr2h
  3505  00008C  C007  FFD9         	movff	??_INTERRUPT_InterruptManager+2,fsr2l
  3506  000090  C006  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  3507  000094  C005  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  3508  000098  9257               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3509  00009A  0011               	retfie		f
  3510  00009C                     __end_of_INTERRUPT_InterruptManager:
  3511                           	opt stack 0
  3512                           tosu	equ	0xFFF
  3513                           tosh	equ	0xFFE
  3514                           tosl	equ	0xFFD
  3515                           pclatu	equ	0xFFB
  3516                           pclath	equ	0xFFA
  3517                           tblptru	equ	0xFF8
  3518                           tblptrh	equ	0xFF7
  3519                           tblptrl	equ	0xFF6
  3520                           tablat	equ	0xFF5
  3521                           prodh	equ	0xFF4
  3522                           prodl	equ	0xFF3
  3523                           intcon	equ	0xFF2
  3524                           intcon2	equ	0xFF1
  3525                           postinc0	equ	0xFEE
  3526                           wreg	equ	0xFE8
  3527                           indf2	equ	0xFDF
  3528                           fsr2h	equ	0xFDA
  3529                           fsr2l	equ	0xFD9
  3530                           status	equ	0xFD8
  3531                           
  3532 ;; *************** function _TMR1_ISR *****************
  3533 ;; Defined at:
  3534 ;;		line 145 in file "mcc_generated_files/tmr1.c"
  3535 ;; Parameters:    Size  Location     Type
  3536 ;;		None
  3537 ;; Auto vars:     Size  Location     Type
  3538 ;;		None
  3539 ;; Return value:  Size  Location     Type
  3540 ;;                  1    wreg      void 
  3541 ;; Registers used:
  3542 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  3543 ;; Tracked objects:
  3544 ;;		On entry : 0/0
  3545 ;;		On exit  : 0/0
  3546 ;;		Unchanged: 0/0
  3547 ;; Data sizes:     COMRAM   BANK0   BANK1
  3548 ;;      Params:         0       0       0
  3549 ;;      Locals:         0       0       0
  3550 ;;      Temps:          0       0       0
  3551 ;;      Totals:         0       0       0
  3552 ;;Total ram usage:        0 bytes
  3553 ;; Hardware stack levels used:    1
  3554 ;; Hardware stack levels required when called:    2
  3555 ;; This function calls:
  3556 ;;		Absolute function
  3557 ;;		_TMR1_DefaultInterruptHandler
  3558 ;;		_TMR1_WriteTimer
  3559 ;;		__TMR1_Ready
  3560 ;; This function is called by:
  3561 ;;		_INTERRUPT_InterruptManager
  3562 ;; This function uses a non-reentrant model
  3563 ;;
  3564                           
  3565                           	psect	text33
  3566  00077A                     __ptext33:
  3567                           	opt stack 0
  3568  00077A                     _TMR1_ISR:
  3569                           	opt stack 22
  3570                           
  3571                           ;mcc_generated_files/tmr1.c: 149:     PIR1bits.TMR1IF = 0;
  3572                           
  3573                           ;incstack = 0
  3574  00077A  909E               	bcf	3998,0,c	;volatile
  3575                           
  3576                           ;mcc_generated_files/tmr1.c: 150:     TMR1_WriteTimer(timer1ReloadVal);
  3577  00077C  C04D  F001         	movff	_timer1ReloadVal,TMR1_WriteTimer@timerVal	;volatile
  3578  000780  C04E  F002         	movff	_timer1ReloadVal+1,TMR1_WriteTimer@timerVal+1	;volatile
  3579  000784  EC30  F004         	call	_TMR1_WriteTimer	;wreg free
  3580                           
  3581                           ;mcc_generated_files/tmr1.c: 152:     if(TMR1_InterruptHandler)
  3582  000788  504B               	movf	_TMR1_InterruptHandler,w,c
  3583  00078A  104C               	iorwf	_TMR1_InterruptHandler+1,w,c
  3584  00078C  B4D8               	btfsc	status,2,c
  3585  00078E  0012               	return	
  3586                           
  3587                           ;mcc_generated_files/tmr1.c: 153:     {;mcc_generated_files/tmr1.c: 154:         TMR1_In
      +                          terruptHandler();
  3588  000790  0005               	push	
  3589  000792  6EFA               	movwf	pclath,c
  3590  000794  504B               	movf	_TMR1_InterruptHandler,w,c
  3591  000796  6EFD               	movwf	tosl,c
  3592  000798  504C               	movf	_TMR1_InterruptHandler+1,w,c
  3593  00079A  6EFE               	movwf	tosh,c
  3594  00079C  50F8               	movf	tblptru,w,c
  3595  00079E  6EFF               	movwf	tosu,c
  3596  0007A0  50FA               	movf	pclath,w,c
  3597  0007A2  0012               	return		;indir
  3598  0007A4                     __end_of_TMR1_ISR:
  3599                           	opt stack 0
  3600                           tosu	equ	0xFFF
  3601                           tosh	equ	0xFFE
  3602                           tosl	equ	0xFFD
  3603                           pclatu	equ	0xFFB
  3604                           pclath	equ	0xFFA
  3605                           tblptru	equ	0xFF8
  3606                           tblptrh	equ	0xFF7
  3607                           tblptrl	equ	0xFF6
  3608                           tablat	equ	0xFF5
  3609                           prodh	equ	0xFF4
  3610                           prodl	equ	0xFF3
  3611                           intcon	equ	0xFF2
  3612                           intcon2	equ	0xFF1
  3613                           postinc0	equ	0xFEE
  3614                           wreg	equ	0xFE8
  3615                           indf2	equ	0xFDF
  3616                           fsr2h	equ	0xFDA
  3617                           fsr2l	equ	0xFD9
  3618                           status	equ	0xFD8
  3619                           
  3620 ;; *************** function _TMR1_DefaultInterruptHandler *****************
  3621 ;; Defined at:
  3622 ;;		line 163 in file "mcc_generated_files/tmr1.c"
  3623 ;; Parameters:    Size  Location     Type
  3624 ;;		None
  3625 ;; Auto vars:     Size  Location     Type
  3626 ;;		None
  3627 ;; Return value:  Size  Location     Type
  3628 ;;                  1    wreg      void 
  3629 ;; Registers used:
  3630 ;;		None
  3631 ;; Tracked objects:
  3632 ;;		On entry : 0/0
  3633 ;;		On exit  : 0/0
  3634 ;;		Unchanged: 0/0
  3635 ;; Data sizes:     COMRAM   BANK0   BANK1
  3636 ;;      Params:         0       0       0
  3637 ;;      Locals:         0       0       0
  3638 ;;      Temps:          0       0       0
  3639 ;;      Totals:         0       0       0
  3640 ;;Total ram usage:        0 bytes
  3641 ;; Hardware stack levels used:    1
  3642 ;; This function calls:
  3643 ;;		Nothing
  3644 ;; This function is called by:
  3645 ;;		_TMR1_Initialize
  3646 ;;		_TMR1_ISR
  3647 ;; This function uses a non-reentrant model
  3648 ;;
  3649                           
  3650                           	psect	text34
  3651  00099C                     __ptext34:
  3652                           	opt stack 0
  3653  00099C                     _TMR1_DefaultInterruptHandler:
  3654                           	opt stack 23
  3655                           
  3656                           ;incstack = 0
  3657  00099C  0012               	return		;funcret
  3658  00099E                     __end_of_TMR1_DefaultInterruptHandler:
  3659                           	opt stack 0
  3660                           tosu	equ	0xFFF
  3661                           tosh	equ	0xFFE
  3662                           tosl	equ	0xFFD
  3663                           pclatu	equ	0xFFB
  3664                           pclath	equ	0xFFA
  3665                           tblptru	equ	0xFF8
  3666                           tblptrh	equ	0xFF7
  3667                           tblptrl	equ	0xFF6
  3668                           tablat	equ	0xFF5
  3669                           prodh	equ	0xFF4
  3670                           prodl	equ	0xFF3
  3671                           intcon	equ	0xFF2
  3672                           intcon2	equ	0xFF1
  3673                           postinc0	equ	0xFEE
  3674                           wreg	equ	0xFE8
  3675                           indf2	equ	0xFDF
  3676                           fsr2h	equ	0xFDA
  3677                           fsr2l	equ	0xFD9
  3678                           status	equ	0xFD8
  3679                           
  3680 ;; *************** function __TMR1_Ready *****************
  3681 ;; Defined at:
  3682 ;;		line 158 in file "logger.c"
  3683 ;; Parameters:    Size  Location     Type
  3684 ;;		None
  3685 ;; Auto vars:     Size  Location     Type
  3686 ;;		None
  3687 ;; Return value:  Size  Location     Type
  3688 ;;                  1    wreg      void 
  3689 ;; Registers used:
  3690 ;;		wreg, status,2, status,0, cstack
  3691 ;; Tracked objects:
  3692 ;;		On entry : 0/0
  3693 ;;		On exit  : 0/0
  3694 ;;		Unchanged: 0/0
  3695 ;; Data sizes:     COMRAM   BANK0   BANK1
  3696 ;;      Params:         0       0       0
  3697 ;;      Locals:         0       0       0
  3698 ;;      Temps:          0       0       0
  3699 ;;      Totals:         0       0       0
  3700 ;;Total ram usage:        0 bytes
  3701 ;; Hardware stack levels used:    1
  3702 ;; Hardware stack levels required when called:    1
  3703 ;; This function calls:
  3704 ;;		i2_ADC1_StartConversion
  3705 ;; This function is called by:
  3706 ;;		_logger_initialize
  3707 ;;		_TMR1_ISR
  3708 ;; This function uses a non-reentrant model
  3709 ;;
  3710                           
  3711                           	psect	text35
  3712  000966                     __ptext35:
  3713                           	opt stack 0
  3714  000966                     __TMR1_Ready:
  3715                           	opt stack 22
  3716                           
  3717                           ;logger.c: 160:     if (TMR1_state == TMR1_RUNNING) {
  3718                           
  3719                           ;incstack = 0
  3720  000966  042E               	decf	_TMR1_state,w,c	;volatile
  3721  000968  B4D8               	btfsc	status,2,c
  3722                           
  3723                           ;logger.c: 161:          ADC1_StartConversion();
  3724  00096A  ECC9  F004         	call	i2_ADC1_StartConversion	;wreg free
  3725  00096E  0012               	return		;funcret
  3726  000970                     __end_of__TMR1_Ready:
  3727                           	opt stack 0
  3728                           tosu	equ	0xFFF
  3729                           tosh	equ	0xFFE
  3730                           tosl	equ	0xFFD
  3731                           pclatu	equ	0xFFB
  3732                           pclath	equ	0xFFA
  3733                           tblptru	equ	0xFF8
  3734                           tblptrh	equ	0xFF7
  3735                           tblptrl	equ	0xFF6
  3736                           tablat	equ	0xFF5
  3737                           prodh	equ	0xFF4
  3738                           prodl	equ	0xFF3
  3739                           intcon	equ	0xFF2
  3740                           intcon2	equ	0xFF1
  3741                           postinc0	equ	0xFEE
  3742                           wreg	equ	0xFE8
  3743                           indf2	equ	0xFDF
  3744                           fsr2h	equ	0xFDA
  3745                           fsr2l	equ	0xFD9
  3746                           status	equ	0xFD8
  3747                           
  3748 ;; *************** function i2_ADC1_StartConversion *****************
  3749 ;; Defined at:
  3750 ;;		line 91 in file "mcc_generated_files/adc1.c"
  3751 ;; Parameters:    Size  Location     Type
  3752 ;;		None
  3753 ;; Auto vars:     Size  Location     Type
  3754 ;;		None
  3755 ;; Return value:  Size  Location     Type
  3756 ;;                  1    wreg      void 
  3757 ;; Registers used:
  3758 ;;		None
  3759 ;; Tracked objects:
  3760 ;;		On entry : 0/0
  3761 ;;		On exit  : 0/0
  3762 ;;		Unchanged: 0/0
  3763 ;; Data sizes:     COMRAM   BANK0   BANK1
  3764 ;;      Params:         0       0       0
  3765 ;;      Locals:         0       0       0
  3766 ;;      Temps:          0       0       0
  3767 ;;      Totals:         0       0       0
  3768 ;;Total ram usage:        0 bytes
  3769 ;; Hardware stack levels used:    1
  3770 ;; This function calls:
  3771 ;;		Nothing
  3772 ;; This function is called by:
  3773 ;;		__TMR1_Ready
  3774 ;; This function uses a non-reentrant model
  3775 ;;
  3776                           
  3777                           	psect	text36
  3778  000992                     __ptext36:
  3779                           	opt stack 0
  3780  000992                     i2_ADC1_StartConversion:
  3781                           	opt stack 22
  3782                           
  3783                           ;mcc_generated_files/adc1.c: 94:     ADCON0bits.GO_nDONE = 1;
  3784                           
  3785                           ;incstack = 0
  3786  000992  82C2               	bsf	4034,1,c	;volatile
  3787  000994  0012               	return		;funcret
  3788  000996                     __end_ofi2_ADC1_StartConversion:
  3789                           	opt stack 0
  3790                           tosu	equ	0xFFF
  3791                           tosh	equ	0xFFE
  3792                           tosl	equ	0xFFD
  3793                           pclatu	equ	0xFFB
  3794                           pclath	equ	0xFFA
  3795                           tblptru	equ	0xFF8
  3796                           tblptrh	equ	0xFF7
  3797                           tblptrl	equ	0xFF6
  3798                           tablat	equ	0xFF5
  3799                           prodh	equ	0xFF4
  3800                           prodl	equ	0xFF3
  3801                           intcon	equ	0xFF2
  3802                           intcon2	equ	0xFF1
  3803                           postinc0	equ	0xFEE
  3804                           wreg	equ	0xFE8
  3805                           indf2	equ	0xFDF
  3806                           fsr2h	equ	0xFDA
  3807                           fsr2l	equ	0xFD9
  3808                           status	equ	0xFD8
  3809                           
  3810 ;; *************** function _TMR1_WriteTimer *****************
  3811 ;; Defined at:
  3812 ;;		line 118 in file "mcc_generated_files/tmr1.c"
  3813 ;; Parameters:    Size  Location     Type
  3814 ;;  timerVal        2    0[COMRAM] unsigned short 
  3815 ;; Auto vars:     Size  Location     Type
  3816 ;;		None
  3817 ;; Return value:  Size  Location     Type
  3818 ;;                  1    wreg      void 
  3819 ;; Registers used:
  3820 ;;		None
  3821 ;; Tracked objects:
  3822 ;;		On entry : 0/0
  3823 ;;		On exit  : 0/0
  3824 ;;		Unchanged: 0/0
  3825 ;; Data sizes:     COMRAM   BANK0   BANK1
  3826 ;;      Params:         2       0       0
  3827 ;;      Locals:         0       0       0
  3828 ;;      Temps:          0       0       0
  3829 ;;      Totals:         2       0       0
  3830 ;;Total ram usage:        2 bytes
  3831 ;; Hardware stack levels used:    1
  3832 ;; This function calls:
  3833 ;;		Nothing
  3834 ;; This function is called by:
  3835 ;;		_TMR1_ISR
  3836 ;; This function uses a non-reentrant model
  3837 ;;
  3838                           
  3839                           	psect	text37
  3840  000860                     __ptext37:
  3841                           	opt stack 0
  3842  000860                     _TMR1_WriteTimer:
  3843                           	opt stack 23
  3844                           
  3845                           ;mcc_generated_files/tmr1.c: 118: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr1.c: 119: {;mcc_generated_files/tmr1.c: 120:     if (T1CONbits.nT1SYNC == 1)
  3846                           
  3847                           ;incstack = 0
  3848  000860  A4CD               	btfss	4045,2,c	;volatile
  3849  000862  D007               	goto	i2l302
  3850                           
  3851                           ;mcc_generated_files/tmr1.c: 121:     {;mcc_generated_files/tmr1.c: 123:         T1CONbi
      +                          ts.TMR1ON = 0;
  3852  000864  90CD               	bcf	4045,0,c	;volatile
  3853                           
  3854                           ;mcc_generated_files/tmr1.c: 126:         TMR1H = (timerVal >> 8);
  3855  000866  C002  FFCF         	movff	TMR1_WriteTimer@timerVal+1,4047	;volatile
  3856                           
  3857                           ;mcc_generated_files/tmr1.c: 127:         TMR1L = (uint8_t) timerVal;
  3858  00086A  C001  FFCE         	movff	TMR1_WriteTimer@timerVal,4046	;volatile
  3859                           
  3860                           ;mcc_generated_files/tmr1.c: 130:         T1CONbits.TMR1ON =1;
  3861  00086E  80CD               	bsf	4045,0,c	;volatile
  3862                           
  3863                           ;mcc_generated_files/tmr1.c: 131:     }
  3864  000870  0012               	return	
  3865  000872                     i2l302:
  3866                           
  3867                           ;mcc_generated_files/tmr1.c: 133:     {;mcc_generated_files/tmr1.c: 135:         TMR1H =
      +                           (timerVal >> 8);
  3868  000872  C002  FFCF         	movff	TMR1_WriteTimer@timerVal+1,4047	;volatile
  3869                           
  3870                           ;mcc_generated_files/tmr1.c: 136:         TMR1L = (uint8_t) timerVal;
  3871  000876  C001  FFCE         	movff	TMR1_WriteTimer@timerVal,4046	;volatile
  3872  00087A  0012               	return		;funcret
  3873  00087C                     __end_of_TMR1_WriteTimer:
  3874                           	opt stack 0
  3875                           tosu	equ	0xFFF
  3876                           tosh	equ	0xFFE
  3877                           tosl	equ	0xFFD
  3878                           pclatu	equ	0xFFB
  3879                           pclath	equ	0xFFA
  3880                           tblptru	equ	0xFF8
  3881                           tblptrh	equ	0xFF7
  3882                           tblptrl	equ	0xFF6
  3883                           tablat	equ	0xFF5
  3884                           prodh	equ	0xFF4
  3885                           prodl	equ	0xFF3
  3886                           intcon	equ	0xFF2
  3887                           intcon2	equ	0xFF1
  3888                           postinc0	equ	0xFEE
  3889                           wreg	equ	0xFE8
  3890                           indf2	equ	0xFDF
  3891                           fsr2h	equ	0xFDA
  3892                           fsr2l	equ	0xFD9
  3893                           status	equ	0xFD8
  3894                           
  3895 ;; *************** function _PIN_MANAGER_IOC *****************
  3896 ;; Defined at:
  3897 ;;		line 110 in file "mcc_generated_files/pin_manager.c"
  3898 ;; Parameters:    Size  Location     Type
  3899 ;;		None
  3900 ;; Auto vars:     Size  Location     Type
  3901 ;;		None
  3902 ;; Return value:  Size  Location     Type
  3903 ;;                  1    wreg      void 
  3904 ;; Registers used:
  3905 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  3906 ;; Tracked objects:
  3907 ;;		On entry : 0/0
  3908 ;;		On exit  : 0/0
  3909 ;;		Unchanged: 0/0
  3910 ;; Data sizes:     COMRAM   BANK0   BANK1
  3911 ;;      Params:         0       0       0
  3912 ;;      Locals:         0       0       0
  3913 ;;      Temps:          0       0       0
  3914 ;;      Totals:         0       0       0
  3915 ;;Total ram usage:        0 bytes
  3916 ;; Hardware stack levels used:    1
  3917 ;; Hardware stack levels required when called:    2
  3918 ;; This function calls:
  3919 ;;		_IOCA4_ISR
  3920 ;; This function is called by:
  3921 ;;		_INTERRUPT_InterruptManager
  3922 ;; This function uses a non-reentrant model
  3923 ;;
  3924                           
  3925                           	psect	text38
  3926  000970                     __ptext38:
  3927                           	opt stack 0
  3928  000970                     _PIN_MANAGER_IOC:
  3929                           	opt stack 22
  3930                           
  3931                           ;mcc_generated_files/pin_manager.c: 113:     if(IOCAbits.IOCA4 == 1)
  3932                           
  3933                           ;incstack = 0
  3934  000970  B879               	btfsc	3961,4,c	;volatile
  3935                           
  3936                           ;mcc_generated_files/pin_manager.c: 114:     {;mcc_generated_files/pin_manager.c: 115:  
      +                                 IOCA4_ISR();
  3937  000972  EC3E  F004         	call	_IOCA4_ISR	;wreg free
  3938                           
  3939                           ;mcc_generated_files/pin_manager.c: 118:     INTCONbits.RABIF = 0;
  3940  000976  90F2               	bcf	intcon,0,c	;volatile
  3941  000978  0012               	return		;funcret
  3942  00097A                     __end_of_PIN_MANAGER_IOC:
  3943                           	opt stack 0
  3944                           tosu	equ	0xFFF
  3945                           tosh	equ	0xFFE
  3946                           tosl	equ	0xFFD
  3947                           pclatu	equ	0xFFB
  3948                           pclath	equ	0xFFA
  3949                           tblptru	equ	0xFF8
  3950                           tblptrh	equ	0xFF7
  3951                           tblptrl	equ	0xFF6
  3952                           tablat	equ	0xFF5
  3953                           prodh	equ	0xFF4
  3954                           prodl	equ	0xFF3
  3955                           intcon	equ	0xFF2
  3956                           intcon2	equ	0xFF1
  3957                           postinc0	equ	0xFEE
  3958                           wreg	equ	0xFE8
  3959                           indf2	equ	0xFDF
  3960                           fsr2h	equ	0xFDA
  3961                           fsr2l	equ	0xFD9
  3962                           status	equ	0xFD8
  3963                           
  3964 ;; *************** function _IOCA4_ISR *****************
  3965 ;; Defined at:
  3966 ;;		line 124 in file "mcc_generated_files/pin_manager.c"
  3967 ;; Parameters:    Size  Location     Type
  3968 ;;		None
  3969 ;; Auto vars:     Size  Location     Type
  3970 ;;		None
  3971 ;; Return value:  Size  Location     Type
  3972 ;;                  1    wreg      void 
  3973 ;; Registers used:
  3974 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  3975 ;; Tracked objects:
  3976 ;;		On entry : 0/0
  3977 ;;		On exit  : 0/0
  3978 ;;		Unchanged: 0/0
  3979 ;; Data sizes:     COMRAM   BANK0   BANK1
  3980 ;;      Params:         0       0       0
  3981 ;;      Locals:         0       0       0
  3982 ;;      Temps:          0       0       0
  3983 ;;      Totals:         0       0       0
  3984 ;;Total ram usage:        0 bytes
  3985 ;; Hardware stack levels used:    1
  3986 ;; Hardware stack levels required when called:    1
  3987 ;; This function calls:
  3988 ;;		Absolute function
  3989 ;;		_IOCA4_DefaultInterruptHandler
  3990 ;;		__IOC_Ready
  3991 ;; This function is called by:
  3992 ;;		_PIN_MANAGER_IOC
  3993 ;; This function uses a non-reentrant model
  3994 ;;
  3995                           
  3996                           	psect	text39
  3997  00087C                     __ptext39:
  3998                           	opt stack 0
  3999  00087C                     _IOCA4_ISR:
  4000                           	opt stack 22
  4001                           
  4002                           ;mcc_generated_files/pin_manager.c: 129:     if(IOCA4_InterruptHandler)
  4003                           
  4004                           ;incstack = 0
  4005  00087C  5053               	movf	_IOCA4_InterruptHandler,w,c
  4006  00087E  1054               	iorwf	_IOCA4_InterruptHandler+1,w,c
  4007  000880  B4D8               	btfsc	status,2,c
  4008  000882  0012               	return	
  4009                           
  4010                           ;mcc_generated_files/pin_manager.c: 130:     {;mcc_generated_files/pin_manager.c: 131:  
      +                                 IOCA4_InterruptHandler();
  4011  000884  0005               	push	
  4012  000886  6EFA               	movwf	pclath,c
  4013  000888  5053               	movf	_IOCA4_InterruptHandler,w,c
  4014  00088A  6EFD               	movwf	tosl,c
  4015  00088C  5054               	movf	_IOCA4_InterruptHandler+1,w,c
  4016  00088E  6EFE               	movwf	tosh,c
  4017  000890  50F8               	movf	tblptru,w,c
  4018  000892  6EFF               	movwf	tosu,c
  4019  000894  50FA               	movf	pclath,w,c
  4020  000896  0012               	return		;indir
  4021  000898                     __end_of_IOCA4_ISR:
  4022                           	opt stack 0
  4023                           tosu	equ	0xFFF
  4024                           tosh	equ	0xFFE
  4025                           tosl	equ	0xFFD
  4026                           pclatu	equ	0xFFB
  4027                           pclath	equ	0xFFA
  4028                           tblptru	equ	0xFF8
  4029                           tblptrh	equ	0xFF7
  4030                           tblptrl	equ	0xFF6
  4031                           tablat	equ	0xFF5
  4032                           prodh	equ	0xFF4
  4033                           prodl	equ	0xFF3
  4034                           intcon	equ	0xFF2
  4035                           intcon2	equ	0xFF1
  4036                           postinc0	equ	0xFEE
  4037                           wreg	equ	0xFE8
  4038                           indf2	equ	0xFDF
  4039                           fsr2h	equ	0xFDA
  4040                           fsr2l	equ	0xFD9
  4041                           status	equ	0xFD8
  4042                           
  4043 ;; *************** function _IOCA4_DefaultInterruptHandler *****************
  4044 ;; Defined at:
  4045 ;;		line 145 in file "mcc_generated_files/pin_manager.c"
  4046 ;; Parameters:    Size  Location     Type
  4047 ;;		None
  4048 ;; Auto vars:     Size  Location     Type
  4049 ;;		None
  4050 ;; Return value:  Size  Location     Type
  4051 ;;                  1    wreg      void 
  4052 ;; Registers used:
  4053 ;;		None
  4054 ;; Tracked objects:
  4055 ;;		On entry : 0/0
  4056 ;;		On exit  : 0/0
  4057 ;;		Unchanged: 0/0
  4058 ;; Data sizes:     COMRAM   BANK0   BANK1
  4059 ;;      Params:         0       0       0
  4060 ;;      Locals:         0       0       0
  4061 ;;      Temps:          0       0       0
  4062 ;;      Totals:         0       0       0
  4063 ;;Total ram usage:        0 bytes
  4064 ;; Hardware stack levels used:    1
  4065 ;; This function calls:
  4066 ;;		Nothing
  4067 ;; This function is called by:
  4068 ;;		_PIN_MANAGER_Initialize
  4069 ;;		_IOCA4_ISR
  4070 ;; This function uses a non-reentrant model
  4071 ;;
  4072                           
  4073                           	psect	text40
  4074  00099E                     __ptext40:
  4075                           	opt stack 0
  4076  00099E                     _IOCA4_DefaultInterruptHandler:
  4077                           	opt stack 22
  4078                           
  4079                           ;incstack = 0
  4080  00099E  0012               	return		;funcret
  4081  0009A0                     __end_of_IOCA4_DefaultInterruptHandler:
  4082                           	opt stack 0
  4083                           tosu	equ	0xFFF
  4084                           tosh	equ	0xFFE
  4085                           tosl	equ	0xFFD
  4086                           pclatu	equ	0xFFB
  4087                           pclath	equ	0xFFA
  4088                           tblptru	equ	0xFF8
  4089                           tblptrh	equ	0xFF7
  4090                           tblptrl	equ	0xFF6
  4091                           tablat	equ	0xFF5
  4092                           prodh	equ	0xFF4
  4093                           prodl	equ	0xFF3
  4094                           intcon	equ	0xFF2
  4095                           intcon2	equ	0xFF1
  4096                           postinc0	equ	0xFEE
  4097                           wreg	equ	0xFE8
  4098                           indf2	equ	0xFDF
  4099                           fsr2h	equ	0xFDA
  4100                           fsr2l	equ	0xFD9
  4101                           status	equ	0xFD8
  4102                           
  4103 ;; *************** function __IOC_Ready *****************
  4104 ;; Defined at:
  4105 ;;		line 165 in file "logger.c"
  4106 ;; Parameters:    Size  Location     Type
  4107 ;;		None
  4108 ;; Auto vars:     Size  Location     Type
  4109 ;;		None
  4110 ;; Return value:  Size  Location     Type
  4111 ;;                  1    wreg      void 
  4112 ;; Registers used:
  4113 ;;		wreg, status,2
  4114 ;; Tracked objects:
  4115 ;;		On entry : 0/0
  4116 ;;		On exit  : 0/0
  4117 ;;		Unchanged: 0/0
  4118 ;; Data sizes:     COMRAM   BANK0   BANK1
  4119 ;;      Params:         0       0       0
  4120 ;;      Locals:         0       0       0
  4121 ;;      Temps:          0       0       0
  4122 ;;      Totals:         0       0       0
  4123 ;;Total ram usage:        0 bytes
  4124 ;; Hardware stack levels used:    1
  4125 ;; This function calls:
  4126 ;;		Nothing
  4127 ;; This function is called by:
  4128 ;;		_logger_initialize
  4129 ;;		_IOCA4_ISR
  4130 ;; This function uses a non-reentrant model
  4131 ;;
  4132                           
  4133                           	psect	text41
  4134  000924                     __ptext41:
  4135                           	opt stack 0
  4136  000924                     __IOC_Ready:
  4137                           	opt stack 22
  4138                           
  4139                           ;logger.c: 168:     IOC_value = PORTAbits.RA4;
  4140                           
  4141                           ;incstack = 0
  4142  000924  0E00               	movlw	0
  4143  000926  B880               	btfsc	3968,4,c	;volatile
  4144  000928  0E01               	movlw	1
  4145  00092A  6E55               	movwf	_IOC_value,c	;volatile
  4146                           
  4147                           ;logger.c: 169:     IOC_state = IOC_READY;
  4148  00092C  0E01               	movlw	1
  4149  00092E  6E33               	movwf	_IOC_state,c	;volatile
  4150  000930  0C01               	retlw	1	;funcret
  4151  000932                     __end_of__IOC_Ready:
  4152                           	opt stack 0
  4153                           tosu	equ	0xFFF
  4154                           tosh	equ	0xFFE
  4155                           tosl	equ	0xFFD
  4156                           pclatu	equ	0xFFB
  4157                           pclath	equ	0xFFA
  4158                           tblptru	equ	0xFF8
  4159                           tblptrh	equ	0xFF7
  4160                           tblptrl	equ	0xFF6
  4161                           tablat	equ	0xFF5
  4162                           prodh	equ	0xFF4
  4163                           prodl	equ	0xFF3
  4164                           intcon	equ	0xFF2
  4165                           intcon2	equ	0xFF1
  4166                           postinc0	equ	0xFEE
  4167                           wreg	equ	0xFE8
  4168                           indf2	equ	0xFDF
  4169                           fsr2h	equ	0xFDA
  4170                           fsr2l	equ	0xFD9
  4171                           status	equ	0xFD8
  4172                           
  4173 ;; *************** function _EUSART_Transmit_ISR *****************
  4174 ;; Defined at:
  4175 ;;		line 172 in file "mcc_generated_files/eusart.c"
  4176 ;; Parameters:    Size  Location     Type
  4177 ;;		None
  4178 ;; Auto vars:     Size  Location     Type
  4179 ;;		None
  4180 ;; Return value:  Size  Location     Type
  4181 ;;                  1    wreg      void 
  4182 ;; Registers used:
  4183 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4184 ;; Tracked objects:
  4185 ;;		On entry : 0/0
  4186 ;;		On exit  : 0/0
  4187 ;;		Unchanged: 0/0
  4188 ;; Data sizes:     COMRAM   BANK0   BANK1
  4189 ;;      Params:         0       0       0
  4190 ;;      Locals:         0       0       0
  4191 ;;      Temps:          0       0       0
  4192 ;;      Totals:         0       0       0
  4193 ;;Total ram usage:        0 bytes
  4194 ;; Hardware stack levels used:    1
  4195 ;; This function calls:
  4196 ;;		Nothing
  4197 ;; This function is called by:
  4198 ;;		_EUSART_Initialize
  4199 ;;		_INTERRUPT_InterruptManager
  4200 ;; This function uses a non-reentrant model
  4201 ;;
  4202                           
  4203                           	psect	text42
  4204  00083C                     __ptext42:
  4205                           	opt stack 0
  4206  00083C                     _EUSART_Transmit_ISR:
  4207                           	opt stack 24
  4208                           
  4209                           ;mcc_generated_files/eusart.c: 176:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
  4210                           
  4211                           ;incstack = 0
  4212  00083C  0E40               	movlw	64
  4213  00083E  6056               	cpfslt	_eusartTxBufferRemaining,c
  4214  000840  D00D               	goto	i2l202
  4215                           
  4216                           ;mcc_generated_files/eusart.c: 177:     {;mcc_generated_files/eusart.c: 178:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
  4217  000842  5037               	movf	_eusartTxTail,w,c
  4218  000844  0F60               	addlw	low _eusartTxBuffer
  4219  000846  6ED9               	movwf	fsr2l,c
  4220  000848  6ADA               	clrf	fsr2h,c
  4221  00084A  50DF               	movf	indf2,w,c
  4222  00084C  6EAD               	movwf	4013,c	;volatile
  4223  00084E  2A37               	incf	_eusartTxTail,f,c	;volatile
  4224                           
  4225                           ;mcc_generated_files/eusart.c: 179:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
  4226  000850  0E3F               	movlw	63
  4227  000852  6437               	cpfsgt	_eusartTxTail,c
  4228  000854  D001               	goto	i2l2153
  4229                           
  4230                           ;mcc_generated_files/eusart.c: 180:         {;mcc_generated_files/eusart.c: 181:        
      +                               eusartTxTail = 0;
  4231  000856  6A37               	clrf	_eusartTxTail,c	;volatile
  4232  000858                     i2l2153:
  4233                           
  4234                           ;mcc_generated_files/eusart.c: 183:         eusartTxBufferRemaining++;
  4235  000858  2A56               	incf	_eusartTxBufferRemaining,f,c	;volatile
  4236                           
  4237                           ;mcc_generated_files/eusart.c: 184:     }
  4238  00085A  0012               	return	
  4239  00085C                     i2l202:
  4240                           
  4241                           ;mcc_generated_files/eusart.c: 186:     {;mcc_generated_files/eusart.c: 187:         PIE
      +                          1bits.TXIE = 0;
  4242  00085C  989D               	bcf	3997,4,c	;volatile
  4243  00085E  0012               	return		;funcret
  4244  000860                     __end_of_EUSART_Transmit_ISR:
  4245                           	opt stack 0
  4246                           tosu	equ	0xFFF
  4247                           tosh	equ	0xFFE
  4248                           tosl	equ	0xFFD
  4249                           pclatu	equ	0xFFB
  4250                           pclath	equ	0xFFA
  4251                           tblptru	equ	0xFF8
  4252                           tblptrh	equ	0xFF7
  4253                           tblptrl	equ	0xFF6
  4254                           tablat	equ	0xFF5
  4255                           prodh	equ	0xFF4
  4256                           prodl	equ	0xFF3
  4257                           intcon	equ	0xFF2
  4258                           intcon2	equ	0xFF1
  4259                           postinc0	equ	0xFEE
  4260                           wreg	equ	0xFE8
  4261                           indf2	equ	0xFDF
  4262                           fsr2h	equ	0xFDA
  4263                           fsr2l	equ	0xFD9
  4264                           status	equ	0xFD8
  4265                           
  4266 ;; *************** function _EUSART_Receive_ISR *****************
  4267 ;; Defined at:
  4268 ;;		line 191 in file "mcc_generated_files/eusart.c"
  4269 ;; Parameters:    Size  Location     Type
  4270 ;;		None
  4271 ;; Auto vars:     Size  Location     Type
  4272 ;;		None
  4273 ;; Return value:  Size  Location     Type
  4274 ;;                  1    wreg      void 
  4275 ;; Registers used:
  4276 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4277 ;; Tracked objects:
  4278 ;;		On entry : 0/0
  4279 ;;		On exit  : 0/0
  4280 ;;		Unchanged: 0/0
  4281 ;; Data sizes:     COMRAM   BANK0   BANK1
  4282 ;;      Params:         0       0       0
  4283 ;;      Locals:         0       0       0
  4284 ;;      Temps:          0       0       0
  4285 ;;      Totals:         0       0       0
  4286 ;;Total ram usage:        0 bytes
  4287 ;; Hardware stack levels used:    1
  4288 ;; This function calls:
  4289 ;;		Nothing
  4290 ;; This function is called by:
  4291 ;;		_EUSART_Initialize
  4292 ;;		_INTERRUPT_InterruptManager
  4293 ;; This function uses a non-reentrant model
  4294 ;;
  4295                           
  4296                           	psect	text43
  4297  0007F2                     __ptext43:
  4298                           	opt stack 0
  4299  0007F2                     _EUSART_Receive_ISR:
  4300                           	opt stack 24
  4301                           
  4302                           ;mcc_generated_files/eusart.c: 194:     if(1 == RCSTAbits.OERR)
  4303                           
  4304                           ;incstack = 0
  4305  0007F2  A2AB               	btfss	4011,1,c	;volatile
  4306  0007F4  D002               	goto	i2l2159
  4307                           
  4308                           ;mcc_generated_files/eusart.c: 195:     {;mcc_generated_files/eusart.c: 198:         RCS
      +                          TAbits.CREN = 0;
  4309  0007F6  98AB               	bcf	4011,4,c	;volatile
  4310                           
  4311                           ;mcc_generated_files/eusart.c: 199:         RCSTAbits.CREN = 1;
  4312  0007F8  88AB               	bsf	4011,4,c	;volatile
  4313  0007FA                     i2l2159:
  4314                           
  4315                           ;mcc_generated_files/eusart.c: 203:     eusartRxBuffer[eusartRxHead++] = RCREG;
  4316  0007FA  0E00               	movlw	low _eusartRxBuffer
  4317  0007FC  2436               	addwf	_eusartRxHead,w,c	;volatile
  4318  0007FE  6ED9               	movwf	fsr2l,c
  4319  000800  6ADA               	clrf	fsr2h,c
  4320  000802  0E01               	movlw	high _eusartRxBuffer
  4321  000804  22DA               	addwfc	fsr2h,f,c
  4322  000806  CFAE FFDF          	movff	4014,indf2	;volatile
  4323  00080A  2A36               	incf	_eusartRxHead,f,c	;volatile
  4324                           
  4325                           ;mcc_generated_files/eusart.c: 204:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
  4326  00080C  0E3F               	movlw	63
  4327  00080E  6436               	cpfsgt	_eusartRxHead,c
  4328  000810  D001               	goto	i2l2167
  4329                           
  4330                           ;mcc_generated_files/eusart.c: 205:     {;mcc_generated_files/eusart.c: 206:         eus
      +                          artRxHead = 0;
  4331  000812  6A36               	clrf	_eusartRxHead,c	;volatile
  4332  000814                     i2l2167:
  4333                           
  4334                           ;mcc_generated_files/eusart.c: 208:     eusartRxCount++;
  4335  000814  2A34               	incf	_eusartRxCount,f,c	;volatile
  4336  000816  0012               	return		;funcret
  4337  000818                     __end_of_EUSART_Receive_ISR:
  4338                           	opt stack 0
  4339                           tosu	equ	0xFFF
  4340                           tosh	equ	0xFFE
  4341                           tosl	equ	0xFFD
  4342                           pclatu	equ	0xFFB
  4343                           pclath	equ	0xFFA
  4344                           tblptru	equ	0xFF8
  4345                           tblptrh	equ	0xFF7
  4346                           tblptrl	equ	0xFF6
  4347                           tablat	equ	0xFF5
  4348                           prodh	equ	0xFF4
  4349                           prodl	equ	0xFF3
  4350                           intcon	equ	0xFF2
  4351                           intcon2	equ	0xFF1
  4352                           postinc0	equ	0xFEE
  4353                           wreg	equ	0xFE8
  4354                           indf2	equ	0xFDF
  4355                           fsr2h	equ	0xFDA
  4356                           fsr2l	equ	0xFD9
  4357                           status	equ	0xFD8
  4358                           
  4359 ;; *************** function _ADC1_ISR *****************
  4360 ;; Defined at:
  4361 ;;		line 135 in file "mcc_generated_files/adc1.c"
  4362 ;; Parameters:    Size  Location     Type
  4363 ;;		None
  4364 ;; Auto vars:     Size  Location     Type
  4365 ;;		None
  4366 ;; Return value:  Size  Location     Type
  4367 ;;                  1    wreg      void 
  4368 ;; Registers used:
  4369 ;;		None
  4370 ;; Tracked objects:
  4371 ;;		On entry : 0/0
  4372 ;;		On exit  : 0/0
  4373 ;;		Unchanged: 0/0
  4374 ;; Data sizes:     COMRAM   BANK0   BANK1
  4375 ;;      Params:         0       0       0
  4376 ;;      Locals:         0       0       0
  4377 ;;      Temps:          0       0       0
  4378 ;;      Totals:         0       0       0
  4379 ;;Total ram usage:        0 bytes
  4380 ;; Hardware stack levels used:    1
  4381 ;; This function calls:
  4382 ;;		Nothing
  4383 ;; This function is called by:
  4384 ;;		_INTERRUPT_InterruptManager
  4385 ;; This function uses a non-reentrant model
  4386 ;;
  4387                           
  4388                           	psect	text44
  4389  000996                     __ptext44:
  4390                           	opt stack 0
  4391  000996                     _ADC1_ISR:
  4392                           	opt stack 24
  4393                           
  4394                           ;mcc_generated_files/adc1.c: 138:     PIR1bits.ADIF = 0;
  4395                           
  4396                           ;incstack = 0
  4397  000996  9C9E               	bcf	3998,6,c	;volatile
  4398  000998  0012               	return		;funcret
  4399  00099A                     __end_of_ADC1_ISR:
  4400                           	opt stack 0
  4401                           tosu	equ	0xFFF
  4402                           tosh	equ	0xFFE
  4403                           tosl	equ	0xFFD
  4404                           pclatu	equ	0xFFB
  4405                           pclath	equ	0xFFA
  4406                           tblptru	equ	0xFF8
  4407                           tblptrh	equ	0xFF7
  4408                           tblptrl	equ	0xFF6
  4409                           tablat	equ	0xFF5
  4410                           prodh	equ	0xFF4
  4411                           prodl	equ	0xFF3
  4412                           intcon	equ	0xFF2
  4413                           intcon2	equ	0xFF1
  4414                           postinc0	equ	0xFEE
  4415                           wreg	equ	0xFE8
  4416                           indf2	equ	0xFDF
  4417                           fsr2h	equ	0xFDA
  4418                           fsr2l	equ	0xFD9
  4419                           status	equ	0xFD8
  4420                           
  4421 ;; *************** function _ADC1_GetConversionResult *****************
  4422 ;; Defined at:
  4423 ;;		line 104 in file "mcc_generated_files/adc1.c"
  4424 ;; Parameters:    Size  Location     Type
  4425 ;;		None
  4426 ;; Auto vars:     Size  Location     Type
  4427 ;;		None
  4428 ;; Return value:  Size  Location     Type
  4429 ;;                  2    0[COMRAM] unsigned short 
  4430 ;; Registers used:
  4431 ;;		wreg, status,2, status,0
  4432 ;; Tracked objects:
  4433 ;;		On entry : 0/0
  4434 ;;		On exit  : 0/0
  4435 ;;		Unchanged: 0/0
  4436 ;; Data sizes:     COMRAM   BANK0   BANK1
  4437 ;;      Params:         2       0       0
  4438 ;;      Locals:         0       0       0
  4439 ;;      Temps:          2       0       0
  4440 ;;      Totals:         4       0       0
  4441 ;;Total ram usage:        4 bytes
  4442 ;; Hardware stack levels used:    1
  4443 ;; This function calls:
  4444 ;;		Nothing
  4445 ;; This function is called by:
  4446 ;;		_INTERRUPT_InterruptManager
  4447 ;; This function uses a non-reentrant model
  4448 ;;
  4449                           
  4450                           	psect	text45
  4451  0008DE                     __ptext45:
  4452                           	opt stack 0
  4453  0008DE                     _ADC1_GetConversionResult:
  4454                           	opt stack 24
  4455                           
  4456                           ;mcc_generated_files/adc1.c: 107:      return ((adc_result_t)((ADRESH << 8) + ADRESL));
  4457                           
  4458                           ;incstack = 0
  4459  0008DE  50C4               	movf	4036,w,c	;volatile
  4460  0008E0  6E04               	movwf	(??_ADC1_GetConversionResult+1)& (0+255),c
  4461  0008E2  6A03               	clrf	??_ADC1_GetConversionResult& (0+255),c
  4462  0008E4  50C3               	movf	4035,w,c	;volatile
  4463  0008E6  2403               	addwf	??_ADC1_GetConversionResult,w,c
  4464  0008E8  6E01               	movwf	?_ADC1_GetConversionResult,c
  4465  0008EA  0E00               	movlw	0
  4466  0008EC  2004               	addwfc	??_ADC1_GetConversionResult+1,w,c
  4467  0008EE  6E02               	movwf	?_ADC1_GetConversionResult+1,c
  4468  0008F0  0012               	return		;funcret
  4469  0008F2                     __end_of_ADC1_GetConversionResult:
  4470                           	opt stack 0
  4471                           tosu	equ	0xFFF
  4472                           tosh	equ	0xFFE
  4473                           tosl	equ	0xFFD
  4474                           pclatu	equ	0xFFB
  4475                           pclath	equ	0xFFA
  4476                           tblptru	equ	0xFF8
  4477                           tblptrh	equ	0xFF7
  4478                           tblptrl	equ	0xFF6
  4479                           tablat	equ	0xFF5
  4480                           prodh	equ	0xFF4
  4481                           prodl	equ	0xFF3
  4482                           intcon	equ	0xFF2
  4483                           intcon2	equ	0xFF1
  4484                           postinc0	equ	0xFEE
  4485                           wreg	equ	0xFE8
  4486                           indf2	equ	0xFDF
  4487                           fsr2h	equ	0xFDA
  4488                           fsr2l	equ	0xFD9
  4489                           status	equ	0xFD8
  4490                           tosu	equ	0xFFF
  4491                           tosh	equ	0xFFE
  4492                           tosl	equ	0xFFD
  4493                           pclatu	equ	0xFFB
  4494                           pclath	equ	0xFFA
  4495                           tblptru	equ	0xFF8
  4496                           tblptrh	equ	0xFF7
  4497                           tblptrl	equ	0xFF6
  4498                           tablat	equ	0xFF5
  4499                           prodh	equ	0xFF4
  4500                           prodl	equ	0xFF3
  4501                           intcon	equ	0xFF2
  4502                           intcon2	equ	0xFF1
  4503                           postinc0	equ	0xFEE
  4504                           wreg	equ	0xFE8
  4505                           indf2	equ	0xFDF
  4506                           fsr2h	equ	0xFDA
  4507                           fsr2l	equ	0xFD9
  4508                           status	equ	0xFD8
  4509                           
  4510                           	psect	text46
  4511  000000                     __ptext46:
  4512                           	opt stack 0
  4513                           tosu	equ	0xFFF
  4514                           tosh	equ	0xFFE
  4515                           tosl	equ	0xFFD
  4516                           pclatu	equ	0xFFB
  4517                           pclath	equ	0xFFA
  4518                           tblptru	equ	0xFF8
  4519                           tblptrh	equ	0xFF7
  4520                           tblptrl	equ	0xFF6
  4521                           tablat	equ	0xFF5
  4522                           prodh	equ	0xFF4
  4523                           prodl	equ	0xFF3
  4524                           intcon	equ	0xFF2
  4525                           intcon2	equ	0xFF1
  4526                           postinc0	equ	0xFEE
  4527                           wreg	equ	0xFE8
  4528                           indf2	equ	0xFDF
  4529                           fsr2h	equ	0xFDA
  4530                           fsr2l	equ	0xFD9
  4531                           status	equ	0xFD8
  4532                           
  4533                           	psect	rparam
  4534  0000                     tosu	equ	0xFFF
  4535                           tosh	equ	0xFFE
  4536                           tosl	equ	0xFFD
  4537                           pclatu	equ	0xFFB
  4538                           pclath	equ	0xFFA
  4539                           tblptru	equ	0xFF8
  4540                           tblptrh	equ	0xFF7
  4541                           tblptrl	equ	0xFF6
  4542                           tablat	equ	0xFF5
  4543                           prodh	equ	0xFF4
  4544                           prodl	equ	0xFF3
  4545                           intcon	equ	0xFF2
  4546                           intcon2	equ	0xFF1
  4547                           postinc0	equ	0xFEE
  4548                           wreg	equ	0xFE8
  4549                           indf2	equ	0xFDF
  4550                           fsr2h	equ	0xFDA
  4551                           fsr2l	equ	0xFD9
  4552                           status	equ	0xFD8
  4553                           
  4554                           	psect	temp
  4555  000057                     btemp:
  4556                           	opt stack 0
  4557  000057                     	ds	1
  4558  0000                     int$flags	set	btemp
  4559  0000                     wtemp8	set	btemp+1
  4560  0000                     ttemp5	set	btemp+1
  4561  0000                     ttemp6	set	btemp+4
  4562  0000                     ttemp7	set	btemp+8
  4563                           tosu	equ	0xFFF
  4564                           tosh	equ	0xFFE
  4565                           tosl	equ	0xFFD
  4566                           pclatu	equ	0xFFB
  4567                           pclath	equ	0xFFA
  4568                           tblptru	equ	0xFF8
  4569                           tblptrh	equ	0xFF7
  4570                           tblptrl	equ	0xFF6
  4571                           tablat	equ	0xFF5
  4572                           prodh	equ	0xFF4
  4573                           prodl	equ	0xFF3
  4574                           intcon	equ	0xFF2
  4575                           intcon2	equ	0xFF1
  4576                           postinc0	equ	0xFEE
  4577                           wreg	equ	0xFE8
  4578                           indf2	equ	0xFDF
  4579                           fsr2h	equ	0xFDA
  4580                           fsr2l	equ	0xFD9
  4581                           status	equ	0xFD8


Data Sizes:
    Strings     222
    Constant    0
    Data        0
    BSS         224
    Persistent  12
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     42      86
    BANK0           160      0     128
    BANK1           256      0      64

Pointer List with Targets:

    sp__strchr	PTR unsigned char  size(2) Largest target is 16
		 -> NULL(NULL[0]), esp_read_data(COMRAM[16]), 

    ESP_Set_application_handler@applicationHandler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> process_message(), ESP_default_application_handler(), 

    ESP_external_message_handler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> process_message(), ESP_default_application_handler(), Absolute function(), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 16
		 -> NULL(NULL[0]), esp_read_data(COMRAM[16]), 

    _sprintf@mess	PTR unsigned char  size(1) Largest target is 6
		 -> read_analog@mess(COMRAM[6]), 

    write@pt	PTR unsigned char  size(1) Largest target is 64
		 -> read_wifi_settings@pass(COMRAM[14]), read_wifi_settings@wifi(COMRAM[10]), read_analog@mess(COMRAM[6]), WIFI_tx_buf(BANK0[64]), 
		 -> ESP_write@res(COMRAM[1]), ESP_write@aux(COMRAM[1]), 

    _puts@pt	PTR unsigned char  size(1) Largest target is 22
		 -> STR_29(CODE[13]), STR_28(CODE[22]), STR_27(CODE[13]), STR_26(CODE[18]), 
		 -> STR_25(CODE[13]), STR_24(CODE[3]), STR_23(CODE[3]), STR_22(CODE[7]), 
		 -> STR_21(CODE[7]), STR_20(CODE[4]), STR_19(CODE[3]), STR_18(CODE[3]), 
		 -> STR_17(CODE[2]), STR_16(CODE[12]), STR_14(CODE[20]), STR_13(CODE[14]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[11]), STR_9(CODE[14]), 
		 -> STR_8(CODE[5]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> _TMR1_Ready(), TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> _TMR1_Ready(), TMR1_DefaultInterruptHandler(), Absolute function(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), Absolute function(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), Absolute function(), 

    IOCA4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> _IOC_Ready(), IOCA4_DefaultInterruptHandler(), 

    IOCA4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> _IOC_Ready(), Absolute function(), IOCA4_DefaultInterruptHandler(), 


Critical Paths under _main in COMRAM

    _main->_read_analog
    _read_analog->__sprintf
    _write->_EUSART_Write
    __sprintf->___lwdiv
    _process_ioc->__puts
    _logger_initialize->_ADC1_SelectChannel
    _logger_initialize->_ESP_Set_application_handler
    _logger_initialize->_IOCA4_SetInterruptHandler
    _logger_initialize->_TMR1_SetInterruptHandler
    _bt_message_handler->_process_message
    _process_message->__puts
    _toggle_format->__puts
    __puts->_EUSART_Write
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCA4_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_ADC1_GetConversionResult
    _TMR1_ISR->_TMR1_WriteTimer

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    8957
                                             40 COMRAM     2     2      0
                 _EUSART_is_rx_ready
                  _SYSTEM_Initialize
                 _bt_message_handler
                  _logger_initialize
                        _process_ioc
                        _read_analog
 ---------------------------------------------------------------------------------
 (1) _read_analog                                         20    20      0    3258
                                             20 COMRAM    20    20      0
                           __sprintf
                              _write
 ---------------------------------------------------------------------------------
 (2) _write                                                3     1      2    1320
                                              9 COMRAM     3     1      2
                       _EUSART_Write
                 _EUSART_is_tx_ready
 ---------------------------------------------------------------------------------
 (2) __sprintf                                             5     2      3    1743
                                             15 COMRAM     5     2      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     615
                                              8 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     618
                                              8 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _process_ioc                                          0     0      0    1522
                              __puts
 ---------------------------------------------------------------------------------
 (1) _logger_initialize                                    0     0      0     520
                 _ADC1_SelectChannel
        _ESP_Set_application_handler
          _IOCA4_SetInterruptHandler
           _TMR1_SetInterruptHandler
                     _TMR1_StopTimer
 ---------------------------------------------------------------------------------
 (2) _ESP_Set_application_handler                          2     0      2     150
                                              8 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADC1_SelectChannel                                   2     2      0      22
                                              8 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _bt_message_handler                                   1     1      0    3113
                                             15 COMRAM     1     1      0
                        _EUSART_Read
                    _process_message
 ---------------------------------------------------------------------------------
 (2) _process_message                                      3     3      0    3066
                                             12 COMRAM     3     3      0
               _ADC1_StartConversion
                    _TMR1_StartTimer
                     _TMR1_StopTimer
                              __puts
                      _toggle_format
 ---------------------------------------------------------------------------------
 (3) _toggle_format                                        0     0      0    1522
                              __puts
 ---------------------------------------------------------------------------------
 (2) __puts                                                3     2      1    1522
                                              9 COMRAM     3     2      1
                       _EUSART_Write
                 _EUSART_is_tx_ready
 ---------------------------------------------------------------------------------
 (3) _EUSART_is_tx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         1     1      0      44
                                              8 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC1_StartConversion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          1     1      0      24
                                              8 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     544
                    _ADC1_Initialize
                  _EUSART_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     174
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR1_SetInterruptHandler                             2     0      2     174
                                              8 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     174
          _IOCA4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _IOCA4_SetInterruptHandler                            2     0      2     174
                                              8 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     196
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2      98
                                              8 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              8 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADC1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           4     4      0     229
                                              4 COMRAM     4     4      0
                   Absolute function *
           _ADC1_GetConversionResult
                           _ADC1_ISR
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                    _PIN_MANAGER_IOC
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0     229
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                    _TMR1_WriteTimer
                        __TMR1_Ready *
 ---------------------------------------------------------------------------------
 (8) __TMR1_Ready                                          0     0      0       0
             i2_ADC1_StartConversion
 ---------------------------------------------------------------------------------
 (9) i2_ADC1_StartConversion                               0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR1_WriteTimer                                      2     0      2     229
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _TMR1_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _PIN_MANAGER_IOC                                      0     0      0       0
                          _IOCA4_ISR
 ---------------------------------------------------------------------------------
 (8) _IOCA4_ISR                                            0     0      0       0
                   Absolute function *
      _IOCA4_DefaultInterruptHandler *
                         __IOC_Ready *
 ---------------------------------------------------------------------------------
 (9) __IOC_Ready                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _IOCA4_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_Transmit_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_Receive_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _ADC1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _ADC1_GetConversionResult                             4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_is_rx_ready
   _SYSTEM_Initialize
     _ADC1_Initialize
     _EUSART_Initialize
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCA4_SetInterruptHandler
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
   _bt_message_handler
     _EUSART_Read
     _process_message
       _ADC1_StartConversion
       _TMR1_StartTimer
       _TMR1_StopTimer
       __puts
         _EUSART_Write
         _EUSART_is_tx_ready
       _toggle_format
         __puts
           _EUSART_Write
           _EUSART_is_tx_ready
   _logger_initialize
     _ADC1_SelectChannel
     _ESP_Set_application_handler
     _IOCA4_SetInterruptHandler
     _TMR1_SetInterruptHandler
     _TMR1_StopTimer
   _process_ioc
     __puts
       _EUSART_Write
       _EUSART_is_tx_ready
   _read_analog
     __sprintf
       ___lwdiv
       ___lwmod
     _write
       _EUSART_Write
       _EUSART_is_tx_ready

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _ADC1_GetConversionResult *
   _ADC1_ISR *
   _EUSART_Receive_ISR *
   _EUSART_Transmit_ISR *
   _PIN_MANAGER_IOC *
     _IOCA4_ISR
       Absolute function(Fake) *
       _IOCA4_DefaultInterruptHandler *
       __IOC_Ready *
   _TMR1_ISR *
     Absolute function(Fake) *
     _TMR1_DefaultInterruptHandler *
     _TMR1_WriteTimer *
     __TMR1_Ready *
       i2_ADC1_StartConversion

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0       8        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      40       6       25.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      80       4       80.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2A      56       1       91.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     116       7        0.0%
DATA                 0      0     116       9        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Mon Aug 27 08:47:11 2018

                ?_EUSART_SetRxInterruptHandler 0009                                   __CFG_CP0$OFF 000000  
                                 __CFG_CP1$OFF 000000                                            l418 0548  
                                          l196 072E                                            l189 07C2  
                                          l650 08D4                                            l636 0570  
                                          l639 0574                                   __CFG_CPB$OFF 000000  
                                 __CFG_CPD$OFF 000000                                            u560 05C8  
                                          u590 064E                                            u790 03CE  
                                          u795 03C4                                            u977 0504  
                                          u987 051E                                _timer1ReloadVal 004D  
                                 __CFG_BORV$19 000000                                            tosl 000FFD  
                                          wreg 000FE8                                   ?_EUSART_Read 0001  
                                 __CFG_LVP$OFF 000000                                 ?_toggle_format 0001  
                           __size_of_IOCA4_ISR 001C                __size_ofi2_ADC1_StartConversion 0004  
                                         l1172 05EC                                           l2213 0322  
                                         l1182 066A                                           l2055 0834  
                                         l2049 081C                                           l2091 0568  
                                         l2083 0558                                           l2077 0550  
                                         l2229 08FC                                           l2087 055E  
                                         l2097 0578                                           l2283 0540  
                                         l2275 052C                                           l2279 0538  
                                         l1905 05BC                                           l1907 05C4  
                                         l1861 0748                                           l1845 0720  
                                         l1917 05E2                                           l1933 0660  
                                         l1925 0642                                           l1871 06D6  
                                         l1927 064A                                           l1865 06B6  
                                         l1859 0746                               __end_of_ADC1_ISR 099A  
                                         STR_1 0294                                           STR_3 028A  
                                         STR_4 02B9                                           STR_5 02C4  
                                         STR_6 029C                                           STR_7 02B2  
                                         STR_8 02BF                                           STR_9 023D  
                                         _LATA 000F89                                           _LATB 000F8A  
                                         _LATC 000F8B                                           _TMR1 000FCE  
                                         _WPUA 000F77                                           _WPUB 000F78  
                    ADC1_SelectChannel@channel 000A                                           _main 04EC  
                                         fsr2h 000FDA                                           indf2 000FDF  
                                         fsr2l 000FD9                                           btemp 0057  
                                   __IOC_Ready 0924                                           prodh 000FF4  
                                         prodl 000FF3                                           start 009C  
                                __CFG_IESO$OFF 000000                                  __CFG_FOSC$IRC 000000  
                   ??_TMR1_SetInterruptHandler 000B                                  __CFG_MCLRE$ON 000000  
                          __end_of__TMR1_Ready 0970                                   ___param_bank 000000  
                           _ESP_wait_exception 0030                  __size_of_ADC1_StartConversion 0004  
                                ?_EUSART_Write 0001                 __size_of_OSCILLATOR_Initialize 000E  
                __end_of_OSCILLATOR_Initialize 0924                                          ?_main 0001  
                                        STR_10 027F                                          STR_11 02D1  
                                        STR_12 02CD                                          STR_20 02C9  
                                        STR_21 02AB                                          STR_13 024B  
                                        STR_22 02A4                                          STR_14 0217  
                                        STR_15 02DD                                          STR_23 02D5  
                                        STR_24 02D8                                          STR_16 0273  
                                        STR_17 02DB                                          STR_25 0259  
                                        STR_26 022B                                          STR_27 0266  
                                        STR_28 0201                                _TMR1_StartTimer 0982  
                                        _T1CON 000FCD                                 __CFG_DEBUG$OFF 000000  
                              __end_of___lwdiv 05F6                                          i2l120 006A  
                                        i2l113 0026                                __end_of___lwmod 0674  
                                        i2l202 085C                                          i2l116 0036  
                                        i2l302 0872                                          i2l118 0054  
                 ?_ESP_Set_application_handler 0009                                          _RCREG 000FAE  
                               __CFG_BBSIZ$OFF 000000                                          _RCSTA 000FAB  
                                        _TMR1H 000FCF                                          _TMR1L 000FCE  
                                        _SPBRG 000FAF                                          _TRISA 000F92  
                                        _TRISB 000F93                                          _TRISC 000F94  
                                        _TXREG 000FAD                     __end_of_bt_message_handler 093E  
                                        _TXSTA 000FAC                                   ?_read_analog 0001  
                                __CFG_WRT0$OFF 000000                                  __CFG_WRT1$OFF 000000  
                               __CFG_EBTR0$OFF 000000                                 __CFG_FCMEN$OFF 000000  
                               __CFG_EBTR1$OFF 000000                               __end_of_TMR1_ISR 07A4  
                                __CFG_WRTB$OFF 000000                                  __CFG_WRTC$OFF 000000  
                                __CFG_WRTD$OFF 000000                                 __CFG_EBTRB$OFF 000000  
                      __end_of_PIN_MANAGER_IOC 097A                                          __puts 06B2  
                                        _write 0818                        __end_of_TMR1_Initialize 07F2  
                                        pclath 000FFA                                          tablat 000FF5  
                                        ttemp5 0058                                          ttemp6 005B  
                                        ttemp7 005F                                          status 000FD8  
                                        wtemp8 0058                     __size_of_logger_initialize 003E  
                               __CFG_HFOFST$ON 000000                                _TMR1_WriteTimer 0860  
                              __initialization 06EC                                   __end_of_main 054C  
                       i2_ADC1_StartConversion 0992                              __end_of_IOCA4_ISR 0898  
                               __CFG_PCLKEN$ON 000000                                 ??_EUSART_Write 0009  
                  ?_INTERRUPT_InterruptManager 0001                 ??_EUSART_SetRxInterruptHandler 000B  
               ?_IOCA4_DefaultInterruptHandler 0001                                         ??_main 0029  
                                __activetblptr 000002                                 __CFG_PLLEN$OFF 000000  
                ??_ESP_Set_application_handler 000B                                ??_toggle_format 000D  
                                       ?__puts 000A                                         _ADCON0 000FC2  
                                       _ADCON1 000FC1                                         _ADCON2 000FC0  
                                       _ADRESH 000FC4                                         _ADRESL 000FC3  
                   __end_of_EUSART_is_rx_ready 0992                                         ?_write 000A  
                      TMR1_WriteTimer@timerVal 0001                                         i2l2153 0858  
                                       i2l2167 0814                                         i2l2159 07FA  
                               __CFG_WDTEN$OFF 000000                             _ADC1_SelectChannel 0898  
                   __end_of_EUSART_is_tx_ready 097E                     ??_ADC1_GetConversionResult 0003  
                                       _OSCCON 000FD3                                         _SPBRGH 000FB0  
                                  __TMR1_Ready 0966                                    ?__IOC_Ready 0001  
                          ?_ADC1_SelectChannel 0001                                 __CFG_XINST$OFF 000000  
         __end_of_TMR1_DefaultInterruptHandler 099E          __size_of_TMR1_DefaultInterruptHandler 0002  
                                _esp_read_data 003B                   _TMR1_DefaultInterruptHandler 099C  
                             __end_of__sprintf 04EC                        __end_of_TMR1_StartTimer 0986  
                               __CFG_STVREN$ON 000000                                      ??___lwdiv 000D  
                                    ??___lwmod 000D                            _EUSART_Transmit_ISR 083C  
                                       clear_0 06F2                                         clear_1 06FE  
                                       clear_2 070A                                      ?_ADC1_ISR 0001  
                     __size_of_ADC1_Initialize 0012                           ??_ADC1_SelectChannel 0009  
                                 __mediumconst 0000                                         tblptrh 000FF7  
                                       tblptrl 000FF6                                         tblptru 000FF8  
     TMR1_SetInterruptHandler@InterruptHandler 0009      IOCA4_SetInterruptHandler@InterruptHandler 0009  
                             ?_PIN_MANAGER_IOC 0001                                         write@i 000C  
                      __end_of_TMR1_WriteTimer 087C                           ?_EUSART_Transmit_ISR 0001  
                __size_of_INTERRUPT_Initialize 0004                                   ?_process_ioc 0001  
                             ?_TMR1_Initialize 0001                           __size_of_EUSART_Read 0028  
                            _SYSTEM_Initialize 08B0                                     __accesstop 0060  
                      __end_of__initialization 0710                             read_analog@adc_val 0027  
                           ?_SYSTEM_Initialize 0001                                  ___rparam_used 000001  
         __size_of_ESP_Set_application_handler 0002           __end_of_EUSART_SetTxInterruptHandler 095C  
        __size_of_EUSART_SetTxInterruptHandler 000A                   _EUSART_SetTxInterruptHandler 0952  
                               __pcstackCOMRAM 0001                            ??_SYSTEM_Initialize 000B  
                                    ?_TMR1_ISR 0001                  ?_TMR1_DefaultInterruptHandler 0001  
                                __end_of__puts 06EC                                  __end_of_write 083C  
                                   ??_ADC1_ISR 0001                            __size_of__IOC_Ready 000E  
                     __size_of_process_message 0060                                        ??__puts 000B  
                         __size_of_read_analog 011A                      __end_of_SYSTEM_Initialize 08C8  
                        ??_EUSART_Transmit_ISR 0001                                        ??_write 000C  
                                   __pbssBANK0 0060                                     __pbssBANK1 0100  
                         __end_of_EUSART_Write 074C                                     __pnvCOMRAM 004B  
                  __size_of_EUSART_Receive_ISR 0026                  ?_EUSART_SetTxInterruptHandler 0009  
             _EUSART_TxDefaultInterruptHandler 0051                               ?_TMR1_StartTimer 0001  
                                   ??_TMR1_ISR 0003                                        _BAUDCON 000FB8  
           __size_of_IOCA4_SetInterruptHandler 000A                     ?_IOCA4_SetInterruptHandler 0009  
                      __size_of_TMR1_StopTimer 0004                                  _eusartRxCount 0034  
                                      _OSCCON2 000FD2                                        _OSCTUNE 000F9B  
                                      i2u90_48 005E                                        i2u93_48 0074  
                                      i2u93_49 0088                              ??_ADC1_Initialize 0009  
                 __end_of_ADC1_StartConversion 098A                                      ?__sprintf 0010  
                             ?_TMR1_WriteTimer 0001                             _bt_message_handler 0932  
                              __CFG_PWRTEN$OFF 000000                        ?i2_ADC1_StartConversion 0001  
                                      __Hparam 0000                                        __Lparam 0000  
                                    _ADC_count 003A                                      _ADC_value 002B  
                          ?_bt_message_handler 0001                                      _ADC_state 0039  
                                      ___lwdiv 05AC                                        ___lwmod 0636  
                                 __psmallconst 0200                                        __pcinit 06EC  
                                    _ANSELbits 000F7E                                        __ramtop 0200  
                                      __ptext0 04EC                                        __ptext1 02E0  
                                      __ptext2 0818                                        __ptext3 03FA  
                                      __ptext4 0636                                        __ptext5 05AC  
                                      __ptext6 08F2                                        __ptext7 0674  
                                      __ptext8 099A                                        __ptext9 0898  
            __end_of_IOCA4_SetInterruptHandler 0952                 ??_TMR1_DefaultInterruptHandler 0001  
                                    _IOCA4_ISR 087C                                      _T1CONbits 000FCD  
                        _OSCILLATOR_Initialize 0916              __size_of_TMR1_SetInterruptHandler 000A  
                     ??_PIN_MANAGER_Initialize 000B                      ?_TMR1_SetInterruptHandler 0009  
                         ??_bt_message_handler 0010                     __size_of_SYSTEM_Initialize 0018  
                                   ??__sprintf 0013                           end_of_initialization 0710  
              ??_IOCA4_DefaultInterruptHandler 0001                                   ?__TMR1_Ready 0001  
                                __Lmediumconst 0000                              ??_process_message 000D  
               __end_ofi2_ADC1_StartConversion 0996                           __size_of_process_ioc 0012  
                                 ??__IOC_Ready 0001                              _EUSART_Initialize 05F6  
                                    _IOC_value 0055                                      _IOC_state 0033  
                           ?_EUSART_Initialize 0001                                      _RCSTAbits 000FAB  
                           _EUSART_is_rx_ready 098E                                        postinc0 000FEE  
                           _EUSART_is_tx_ready 097A                                   __sprintf@aux 0013  
                                 __sprintf@val 0011                            ??_EUSART_Initialize 000B  
                                      write@pt 000A                 ??_EUSART_SetTxInterruptHandler 000B  
                                    _PORTAbits 000F80                            ?_EUSART_is_rx_ready 0001  
                       _IOCA4_InterruptHandler 0053                                     ?_IOCA4_ISR 0001  
                          ?_EUSART_is_tx_ready 0001                              __size_of_ADC1_ISR 0004  
                           __end_of__IOC_Ready 0932                          __size_of_EUSART_Write 002E  
                        __end_of_toggle_format 08DE                      __end_of_EUSART_Initialize 0636  
                         ??_EUSART_is_rx_ready 0009                           ??_EUSART_is_tx_ready 0009  
                 __end_of_INTERRUPT_Initialize 098E                           _ADC1_StartConversion 0986  
            __size_of_ADC1_GetConversionResult 0014                      ?_ADC1_GetConversionResult 0001  
ESP_Set_application_handler@applicationHandler 0009                                   _EUSART_Write 071E  
                            __size_of_TMR1_ISR 002A                                 _TMR1_StopTimer 097E  
                       ?_OSCILLATOR_Initialize 0001            __end_of_ESP_Set_application_handler 099C  
                  _ESP_Set_application_handler 099A                            start_initialization 06EC  
                  __size_of_ADC1_SelectChannel 0018                __size_of_PIN_MANAGER_Initialize 002E  
                                ??_EUSART_Read 0009   EUSART_SetRxInterruptHandler@interruptHandler 0009  
 EUSART_SetTxInterruptHandler@interruptHandler 0009                       __size_of_PIN_MANAGER_IOC 000A  
        __end_of_IOCA4_DefaultInterruptHandler 09A0         __size_of_IOCA4_DefaultInterruptHandler 0002  
                _IOCA4_DefaultInterruptHandler 099E                       __size_of_TMR1_Initialize 0026  
                        ?_ADC1_StartConversion 0001                         __end_of_TMR1_StopTimer 0982  
                              _ADC1_Initialize 0904                    ??_IOCA4_SetInterruptHandler 000B  
                                  ??_IOCA4_ISR 0001                    __end_of_EUSART_Transmit_ISR 0860  
                                ??_read_analog 0015                                    __pbssCOMRAM 002B  
              _ESP_default_application_handler 000000                                _WIFI_tx_buf_ind 002D  
                   __end_of_EUSART_Receive_ISR 0818                     __size_of_EUSART_Initialize 0040  
                            __size_of__sprintf 00F2               _EUSART_RxDefaultInterruptHandler 004F  
                          __end_of_EUSART_Read 07CC                                read_analog@aux1 0023  
                              read_analog@mess 001D                           __size_of__TMR1_Ready 000A  
                             ___lwdiv@dividend 0009                         _PIN_MANAGER_Initialize 074C  
                         EUSART_Read@readValue 0009                                      __pintcode 0008  
             __end_of_TMR1_SetInterruptHandler 0948                                       ?___lwdiv 0009  
                                     ?___lwmod 0009                                   _eusartRxHead 0036  
                              ?_TMR1_StopTimer 0001                                   _eusartTxHead 0038  
                                 _eusartRxTail 0035                                   _eusartTxTail 0037  
                                     _ADC1_ISR 0996                   ??_INTERRUPT_InterruptManager 0005  
                      _eusartTxBufferRemaining 0056                                    __smallconst 0200  
                     __size_of_TMR1_StartTimer 0004                                _process_message 054C  
                             ___lwdiv@quotient 000D                                 __size_of__puts 003A  
                         _INTERRUPT_Initialize 098A                                 __size_of_write 0024  
                          __end_of_read_analog 03FA                                 _eusartRxBuffer 0100  
                    _IOCA4_SetInterruptHandler 0948                                 _eusartTxBuffer 0060  
                                     _IOCAbits 000F79                                       _LATAbits 000F89  
                                  __puts@index 000C                                       _PIE1bits 000F9D  
                     __size_of_TMR1_WriteTimer 001C            __size_of_INTERRUPT_InterruptManager 0094  
                                  write@lenght 000B                        __end_of_ADC1_Initialize 0916  
                                     _PIR1bits 000F9E                         ??_ADC1_StartConversion 0009  
                                     _RCONbits 000FD0                               __CFG_WDTPS$32768 000000  
                                     _TMR1_ISR 077A                              ??_PIN_MANAGER_IOC 0001  
                            ??_TMR1_Initialize 000B                                     _ADCON0bits 000FC2  
                  __size_of_bt_message_handler 000C                                    _EUSART_Read 07A4  
                                  _INTCON2bits 000FF1                          ?_INTERRUPT_Initialize 0001  
                                ??_process_ioc 000D               __end_of_ADC1_GetConversionResult 08F2  
                                  _esp_channel 0031                                       __Hrparam 0000  
                                     __Lrparam 0000                             __CFG_BOREN$SBORDIS 000000  
                      ??_OSCILLATOR_Initialize 0009                               __size_of___lwdiv 004A  
                      __end_of_process_message 05AC                               __size_of___lwmod 003E  
                     _TMR1_SetInterruptHandler 093E                                     _ANSELHbits 000F7F  
                        _TMR1_InterruptHandler 004B                                    _read_analog 02E0  
                          _esp_read_data_index 0032                                ___lwdiv@divisor 000B  
                              ___lwdiv@counter 000F                                       __ptext10 0932  
                                     __ptext11 054C                                       __ptext20 08B0  
                                     __ptext12 08C8                                       __ptext21 07CC  
                                     __ptext13 06B2                                       __ptext30 0904  
                                     __ptext22 093E                                       __ptext14 097A  
                                     __ptext31 098E                                       __ptext23 074C  
                                     __ptext15 071E                                       __ptext40 099E  
                                     __ptext24 0948                                       __ptext16 097E  
                                     __ptext41 0924                                       __ptext33 077A  
                                     __ptext25 0916                                       __ptext17 0982  
                                     __ptext42 083C                                       __ptext34 099C  
                                     __ptext26 098A                                       __ptext18 0986  
                                     __ptext43 07F2                                       __ptext35 0966  
                                     __ptext27 05F6                                       __ptext19 07A4  
                                     __ptext44 0996                                       __ptext36 0992  
                                     __ptext28 0952                                       __ptext45 08DE  
                                     __ptext37 0860                                       __ptext29 095C  
                                     __ptext46 0000                                       __ptext38 0970  
                                     __ptext39 087C                                       __puts@pt 000A  
                       process_message@message 000F                                       __sprintf 03FA  
                            ??_TMR1_StartTimer 0009                                 _message_format 002F  
                  __size_of_EUSART_is_rx_ready 0004                                  __size_of_main 0060  
                  __size_of_EUSART_is_tx_ready 0004                            __end_of_process_ioc 0904  
                             ?_ADC1_Initialize 0001                                       int$flags 0057  
                       __size_of_toggle_format 0016             __end_of_INTERRUPT_InterruptManager 009C  
                   _INTERRUPT_InterruptManager 0008                              ??_TMR1_WriteTimer 0003  
                   __end_of_ADC1_SelectChannel 08B0                                     _INTCONbits 000FF2  
                       ??_INTERRUPT_Initialize 0009                       ??i2_ADC1_StartConversion 0001  
                                     intlevel2 0000                               ___lwmod@dividend 0009  
                      ?_PIN_MANAGER_Initialize 0001           __end_of_EUSART_SetRxInterruptHandler 0966  
        __size_of_EUSART_SetRxInterruptHandler 000A                   _EUSART_SetRxInterruptHandler 095C  
                            _logger_initialize 0674                               ??_TMR1_StopTimer 0009  
                     _ADC1_GetConversionResult 08DE                             ?_logger_initialize 0001  
                           _EUSART_Receive_ISR 07F2                               ?_process_message 0001  
                                __sprintf@mess 0010                            ??_logger_initialize 000B  
                          ?_EUSART_Receive_ISR 0001                                ___lwmod@divisor 000B  
                              ___lwmod@counter 000D                                  _toggle_format 08C8  
                                  _WIFI_tx_buf 00A0                             EUSART_Write@txData 0009  
                 __size_of_EUSART_Transmit_ISR 0024                                     _TMR1_state 002E  
               __end_of_PIN_MANAGER_Initialize 077A                                    _process_ioc 08F2  
                    bt_message_handler@message 0010                                  ??__TMR1_Ready 0001  
                              _PIN_MANAGER_IOC 0970                      __end_of_logger_initialize 06B2  
                         ??_EUSART_Receive_ISR 0001                                _TMR1_Initialize 07CC  
