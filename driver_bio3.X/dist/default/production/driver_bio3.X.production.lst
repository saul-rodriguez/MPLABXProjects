

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Mar 10 17:03:13 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16LF1823
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	psect	text17,local,class=CODE,merge=1,delta=2
    28                           	psect	text18,local,class=CODE,merge=1,delta=2
    29                           	psect	text19,local,class=CODE,merge=1,delta=2
    30                           	psect	text20,local,class=CODE,merge=1,delta=2
    31                           	psect	text21,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text23,local,class=CODE,merge=1,delta=2
    34                           	psect	text24,local,class=CODE,merge=1,delta=2
    35                           	psect	text25,local,class=CODE,merge=1,delta=2
    36                           	dabs	1,0x7E,2
    37  0000                     
    38                           ; Version 1.40
    39                           ; Generated 01/12/2016 GMT
    40                           ; 
    41                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC16LF1823 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     	;# 
    73  0001                     	;# 
    74  0002                     	;# 
    75  0003                     	;# 
    76  0004                     	;# 
    77  0005                     	;# 
    78  0006                     	;# 
    79  0007                     	;# 
    80  0008                     	;# 
    81  0009                     	;# 
    82  000A                     	;# 
    83  000B                     	;# 
    84  000C                     	;# 
    85  000E                     	;# 
    86  0011                     	;# 
    87  0012                     	;# 
    88  0015                     	;# 
    89  0016                     	;# 
    90  0016                     	;# 
    91  0017                     	;# 
    92  0018                     	;# 
    93  0019                     	;# 
    94  001A                     	;# 
    95  001B                     	;# 
    96  001C                     	;# 
    97  001E                     	;# 
    98  001F                     	;# 
    99  008C                     	;# 
   100  008E                     	;# 
   101  0091                     	;# 
   102  0092                     	;# 
   103  0095                     	;# 
   104  0096                     	;# 
   105  0097                     	;# 
   106  0098                     	;# 
   107  0099                     	;# 
   108  009A                     	;# 
   109  009B                     	;# 
   110  009B                     	;# 
   111  009C                     	;# 
   112  009D                     	;# 
   113  009E                     	;# 
   114  010C                     	;# 
   115  010E                     	;# 
   116  0111                     	;# 
   117  0112                     	;# 
   118  0113                     	;# 
   119  0114                     	;# 
   120  0115                     	;# 
   121  0116                     	;# 
   122  0117                     	;# 
   123  0118                     	;# 
   124  0119                     	;# 
   125  011A                     	;# 
   126  011B                     	;# 
   127  011D                     	;# 
   128  011D                     	;# 
   129  018C                     	;# 
   130  018E                     	;# 
   131  0191                     	;# 
   132  0191                     	;# 
   133  0192                     	;# 
   134  0193                     	;# 
   135  0193                     	;# 
   136  0193                     	;# 
   137  0194                     	;# 
   138  0195                     	;# 
   139  0196                     	;# 
   140  0199                     	;# 
   141  019A                     	;# 
   142  019B                     	;# 
   143  019B                     	;# 
   144  019B                     	;# 
   145  019B                     	;# 
   146  019C                     	;# 
   147  019C                     	;# 
   148  019D                     	;# 
   149  019E                     	;# 
   150  019F                     	;# 
   151  020C                     	;# 
   152  020E                     	;# 
   153  0211                     	;# 
   154  0211                     	;# 
   155  0212                     	;# 
   156  0212                     	;# 
   157  0213                     	;# 
   158  0213                     	;# 
   159  0214                     	;# 
   160  0214                     	;# 
   161  0215                     	;# 
   162  0215                     	;# 
   163  0215                     	;# 
   164  0216                     	;# 
   165  0216                     	;# 
   166  0217                     	;# 
   167  0217                     	;# 
   168  0291                     	;# 
   169  0291                     	;# 
   170  0292                     	;# 
   171  0293                     	;# 
   172  0294                     	;# 
   173  0295                     	;# 
   174  0295                     	;# 
   175  0296                     	;# 
   176  0391                     	;# 
   177  0392                     	;# 
   178  0393                     	;# 
   179  039A                     	;# 
   180  039C                     	;# 
   181  039D                     	;# 
   182  039E                     	;# 
   183  039F                     	;# 
   184  0FE4                     	;# 
   185  0FE5                     	;# 
   186  0FE6                     	;# 
   187  0FE7                     	;# 
   188  0FE8                     	;# 
   189  0FE9                     	;# 
   190  0FEA                     	;# 
   191  0FEB                     	;# 
   192  0FED                     	;# 
   193  0FEE                     	;# 
   194  0FEF                     	;# 
   195  0000                     	;# 
   196  0001                     	;# 
   197  0002                     	;# 
   198  0003                     	;# 
   199  0004                     	;# 
   200  0005                     	;# 
   201  0006                     	;# 
   202  0007                     	;# 
   203  0008                     	;# 
   204  0009                     	;# 
   205  000A                     	;# 
   206  000B                     	;# 
   207  000C                     	;# 
   208  000E                     	;# 
   209  0011                     	;# 
   210  0012                     	;# 
   211  0015                     	;# 
   212  0016                     	;# 
   213  0016                     	;# 
   214  0017                     	;# 
   215  0018                     	;# 
   216  0019                     	;# 
   217  001A                     	;# 
   218  001B                     	;# 
   219  001C                     	;# 
   220  001E                     	;# 
   221  001F                     	;# 
   222  008C                     	;# 
   223  008E                     	;# 
   224  0091                     	;# 
   225  0092                     	;# 
   226  0095                     	;# 
   227  0096                     	;# 
   228  0097                     	;# 
   229  0098                     	;# 
   230  0099                     	;# 
   231  009A                     	;# 
   232  009B                     	;# 
   233  009B                     	;# 
   234  009C                     	;# 
   235  009D                     	;# 
   236  009E                     	;# 
   237  010C                     	;# 
   238  010E                     	;# 
   239  0111                     	;# 
   240  0112                     	;# 
   241  0113                     	;# 
   242  0114                     	;# 
   243  0115                     	;# 
   244  0116                     	;# 
   245  0117                     	;# 
   246  0118                     	;# 
   247  0119                     	;# 
   248  011A                     	;# 
   249  011B                     	;# 
   250  011D                     	;# 
   251  011D                     	;# 
   252  018C                     	;# 
   253  018E                     	;# 
   254  0191                     	;# 
   255  0191                     	;# 
   256  0192                     	;# 
   257  0193                     	;# 
   258  0193                     	;# 
   259  0193                     	;# 
   260  0194                     	;# 
   261  0195                     	;# 
   262  0196                     	;# 
   263  0199                     	;# 
   264  019A                     	;# 
   265  019B                     	;# 
   266  019B                     	;# 
   267  019B                     	;# 
   268  019B                     	;# 
   269  019C                     	;# 
   270  019C                     	;# 
   271  019D                     	;# 
   272  019E                     	;# 
   273  019F                     	;# 
   274  020C                     	;# 
   275  020E                     	;# 
   276  0211                     	;# 
   277  0211                     	;# 
   278  0212                     	;# 
   279  0212                     	;# 
   280  0213                     	;# 
   281  0213                     	;# 
   282  0214                     	;# 
   283  0214                     	;# 
   284  0215                     	;# 
   285  0215                     	;# 
   286  0215                     	;# 
   287  0216                     	;# 
   288  0216                     	;# 
   289  0217                     	;# 
   290  0217                     	;# 
   291  0291                     	;# 
   292  0291                     	;# 
   293  0292                     	;# 
   294  0293                     	;# 
   295  0294                     	;# 
   296  0295                     	;# 
   297  0295                     	;# 
   298  0296                     	;# 
   299  0391                     	;# 
   300  0392                     	;# 
   301  0393                     	;# 
   302  039A                     	;# 
   303  039C                     	;# 
   304  039D                     	;# 
   305  039E                     	;# 
   306  039F                     	;# 
   307  0FE4                     	;# 
   308  0FE5                     	;# 
   309  0FE6                     	;# 
   310  0FE7                     	;# 
   311  0FE8                     	;# 
   312  0FE9                     	;# 
   313  0FEA                     	;# 
   314  0FEB                     	;# 
   315  0FED                     	;# 
   316  0FEE                     	;# 
   317  0FEF                     	;# 
   318  0000                     	;# 
   319  0001                     	;# 
   320  0002                     	;# 
   321  0003                     	;# 
   322  0004                     	;# 
   323  0005                     	;# 
   324  0006                     	;# 
   325  0007                     	;# 
   326  0008                     	;# 
   327  0009                     	;# 
   328  000A                     	;# 
   329  000B                     	;# 
   330  000C                     	;# 
   331  000E                     	;# 
   332  0011                     	;# 
   333  0012                     	;# 
   334  0015                     	;# 
   335  0016                     	;# 
   336  0016                     	;# 
   337  0017                     	;# 
   338  0018                     	;# 
   339  0019                     	;# 
   340  001A                     	;# 
   341  001B                     	;# 
   342  001C                     	;# 
   343  001E                     	;# 
   344  001F                     	;# 
   345  008C                     	;# 
   346  008E                     	;# 
   347  0091                     	;# 
   348  0092                     	;# 
   349  0095                     	;# 
   350  0096                     	;# 
   351  0097                     	;# 
   352  0098                     	;# 
   353  0099                     	;# 
   354  009A                     	;# 
   355  009B                     	;# 
   356  009B                     	;# 
   357  009C                     	;# 
   358  009D                     	;# 
   359  009E                     	;# 
   360  010C                     	;# 
   361  010E                     	;# 
   362  0111                     	;# 
   363  0112                     	;# 
   364  0113                     	;# 
   365  0114                     	;# 
   366  0115                     	;# 
   367  0116                     	;# 
   368  0117                     	;# 
   369  0118                     	;# 
   370  0119                     	;# 
   371  011A                     	;# 
   372  011B                     	;# 
   373  011D                     	;# 
   374  011D                     	;# 
   375  018C                     	;# 
   376  018E                     	;# 
   377  0191                     	;# 
   378  0191                     	;# 
   379  0192                     	;# 
   380  0193                     	;# 
   381  0193                     	;# 
   382  0193                     	;# 
   383  0194                     	;# 
   384  0195                     	;# 
   385  0196                     	;# 
   386  0199                     	;# 
   387  019A                     	;# 
   388  019B                     	;# 
   389  019B                     	;# 
   390  019B                     	;# 
   391  019B                     	;# 
   392  019C                     	;# 
   393  019C                     	;# 
   394  019D                     	;# 
   395  019E                     	;# 
   396  019F                     	;# 
   397  020C                     	;# 
   398  020E                     	;# 
   399  0211                     	;# 
   400  0211                     	;# 
   401  0212                     	;# 
   402  0212                     	;# 
   403  0213                     	;# 
   404  0213                     	;# 
   405  0214                     	;# 
   406  0214                     	;# 
   407  0215                     	;# 
   408  0215                     	;# 
   409  0215                     	;# 
   410  0216                     	;# 
   411  0216                     	;# 
   412  0217                     	;# 
   413  0217                     	;# 
   414  0291                     	;# 
   415  0291                     	;# 
   416  0292                     	;# 
   417  0293                     	;# 
   418  0294                     	;# 
   419  0295                     	;# 
   420  0295                     	;# 
   421  0296                     	;# 
   422  0391                     	;# 
   423  0392                     	;# 
   424  0393                     	;# 
   425  039A                     	;# 
   426  039C                     	;# 
   427  039D                     	;# 
   428  039E                     	;# 
   429  039F                     	;# 
   430  0FE4                     	;# 
   431  0FE5                     	;# 
   432  0FE6                     	;# 
   433  0FE7                     	;# 
   434  0FE8                     	;# 
   435  0FE9                     	;# 
   436  0FEA                     	;# 
   437  0FEB                     	;# 
   438  0FED                     	;# 
   439  0FEE                     	;# 
   440  0FEF                     	;# 
   441  0000                     	;# 
   442  0001                     	;# 
   443  0002                     	;# 
   444  0003                     	;# 
   445  0004                     	;# 
   446  0005                     	;# 
   447  0006                     	;# 
   448  0007                     	;# 
   449  0008                     	;# 
   450  0009                     	;# 
   451  000A                     	;# 
   452  000B                     	;# 
   453  000C                     	;# 
   454  000E                     	;# 
   455  0011                     	;# 
   456  0012                     	;# 
   457  0015                     	;# 
   458  0016                     	;# 
   459  0016                     	;# 
   460  0017                     	;# 
   461  0018                     	;# 
   462  0019                     	;# 
   463  001A                     	;# 
   464  001B                     	;# 
   465  001C                     	;# 
   466  001E                     	;# 
   467  001F                     	;# 
   468  008C                     	;# 
   469  008E                     	;# 
   470  0091                     	;# 
   471  0092                     	;# 
   472  0095                     	;# 
   473  0096                     	;# 
   474  0097                     	;# 
   475  0098                     	;# 
   476  0099                     	;# 
   477  009A                     	;# 
   478  009B                     	;# 
   479  009B                     	;# 
   480  009C                     	;# 
   481  009D                     	;# 
   482  009E                     	;# 
   483  010C                     	;# 
   484  010E                     	;# 
   485  0111                     	;# 
   486  0112                     	;# 
   487  0113                     	;# 
   488  0114                     	;# 
   489  0115                     	;# 
   490  0116                     	;# 
   491  0117                     	;# 
   492  0118                     	;# 
   493  0119                     	;# 
   494  011A                     	;# 
   495  011B                     	;# 
   496  011D                     	;# 
   497  011D                     	;# 
   498  018C                     	;# 
   499  018E                     	;# 
   500  0191                     	;# 
   501  0191                     	;# 
   502  0192                     	;# 
   503  0193                     	;# 
   504  0193                     	;# 
   505  0193                     	;# 
   506  0194                     	;# 
   507  0195                     	;# 
   508  0196                     	;# 
   509  0199                     	;# 
   510  019A                     	;# 
   511  019B                     	;# 
   512  019B                     	;# 
   513  019B                     	;# 
   514  019B                     	;# 
   515  019C                     	;# 
   516  019C                     	;# 
   517  019D                     	;# 
   518  019E                     	;# 
   519  019F                     	;# 
   520  020C                     	;# 
   521  020E                     	;# 
   522  0211                     	;# 
   523  0211                     	;# 
   524  0212                     	;# 
   525  0212                     	;# 
   526  0213                     	;# 
   527  0213                     	;# 
   528  0214                     	;# 
   529  0214                     	;# 
   530  0215                     	;# 
   531  0215                     	;# 
   532  0215                     	;# 
   533  0216                     	;# 
   534  0216                     	;# 
   535  0217                     	;# 
   536  0217                     	;# 
   537  0291                     	;# 
   538  0291                     	;# 
   539  0292                     	;# 
   540  0293                     	;# 
   541  0294                     	;# 
   542  0295                     	;# 
   543  0295                     	;# 
   544  0296                     	;# 
   545  0391                     	;# 
   546  0392                     	;# 
   547  0393                     	;# 
   548  039A                     	;# 
   549  039C                     	;# 
   550  039D                     	;# 
   551  039E                     	;# 
   552  039F                     	;# 
   553  0FE4                     	;# 
   554  0FE5                     	;# 
   555  0FE6                     	;# 
   556  0FE7                     	;# 
   557  0FE8                     	;# 
   558  0FE9                     	;# 
   559  0FEA                     	;# 
   560  0FEB                     	;# 
   561  0FED                     	;# 
   562  0FEE                     	;# 
   563  0FEF                     	;# 
   564  0000                     	;# 
   565  0001                     	;# 
   566  0002                     	;# 
   567  0003                     	;# 
   568  0004                     	;# 
   569  0005                     	;# 
   570  0006                     	;# 
   571  0007                     	;# 
   572  0008                     	;# 
   573  0009                     	;# 
   574  000A                     	;# 
   575  000B                     	;# 
   576  000C                     	;# 
   577  000E                     	;# 
   578  0011                     	;# 
   579  0012                     	;# 
   580  0015                     	;# 
   581  0016                     	;# 
   582  0016                     	;# 
   583  0017                     	;# 
   584  0018                     	;# 
   585  0019                     	;# 
   586  001A                     	;# 
   587  001B                     	;# 
   588  001C                     	;# 
   589  001E                     	;# 
   590  001F                     	;# 
   591  008C                     	;# 
   592  008E                     	;# 
   593  0091                     	;# 
   594  0092                     	;# 
   595  0095                     	;# 
   596  0096                     	;# 
   597  0097                     	;# 
   598  0098                     	;# 
   599  0099                     	;# 
   600  009A                     	;# 
   601  009B                     	;# 
   602  009B                     	;# 
   603  009C                     	;# 
   604  009D                     	;# 
   605  009E                     	;# 
   606  010C                     	;# 
   607  010E                     	;# 
   608  0111                     	;# 
   609  0112                     	;# 
   610  0113                     	;# 
   611  0114                     	;# 
   612  0115                     	;# 
   613  0116                     	;# 
   614  0117                     	;# 
   615  0118                     	;# 
   616  0119                     	;# 
   617  011A                     	;# 
   618  011B                     	;# 
   619  011D                     	;# 
   620  011D                     	;# 
   621  018C                     	;# 
   622  018E                     	;# 
   623  0191                     	;# 
   624  0191                     	;# 
   625  0192                     	;# 
   626  0193                     	;# 
   627  0193                     	;# 
   628  0193                     	;# 
   629  0194                     	;# 
   630  0195                     	;# 
   631  0196                     	;# 
   632  0199                     	;# 
   633  019A                     	;# 
   634  019B                     	;# 
   635  019B                     	;# 
   636  019B                     	;# 
   637  019B                     	;# 
   638  019C                     	;# 
   639  019C                     	;# 
   640  019D                     	;# 
   641  019E                     	;# 
   642  019F                     	;# 
   643  020C                     	;# 
   644  020E                     	;# 
   645  0211                     	;# 
   646  0211                     	;# 
   647  0212                     	;# 
   648  0212                     	;# 
   649  0213                     	;# 
   650  0213                     	;# 
   651  0214                     	;# 
   652  0214                     	;# 
   653  0215                     	;# 
   654  0215                     	;# 
   655  0215                     	;# 
   656  0216                     	;# 
   657  0216                     	;# 
   658  0217                     	;# 
   659  0217                     	;# 
   660  0291                     	;# 
   661  0291                     	;# 
   662  0292                     	;# 
   663  0293                     	;# 
   664  0294                     	;# 
   665  0295                     	;# 
   666  0295                     	;# 
   667  0296                     	;# 
   668  0391                     	;# 
   669  0392                     	;# 
   670  0393                     	;# 
   671  039A                     	;# 
   672  039C                     	;# 
   673  039D                     	;# 
   674  039E                     	;# 
   675  039F                     	;# 
   676  0FE4                     	;# 
   677  0FE5                     	;# 
   678  0FE6                     	;# 
   679  0FE7                     	;# 
   680  0FE8                     	;# 
   681  0FE9                     	;# 
   682  0FEA                     	;# 
   683  0FEB                     	;# 
   684  0FED                     	;# 
   685  0FEE                     	;# 
   686  0FEF                     	;# 
   687  0000                     	;# 
   688  0001                     	;# 
   689  0002                     	;# 
   690  0003                     	;# 
   691  0004                     	;# 
   692  0005                     	;# 
   693  0006                     	;# 
   694  0007                     	;# 
   695  0008                     	;# 
   696  0009                     	;# 
   697  000A                     	;# 
   698  000B                     	;# 
   699  000C                     	;# 
   700  000E                     	;# 
   701  0011                     	;# 
   702  0012                     	;# 
   703  0015                     	;# 
   704  0016                     	;# 
   705  0016                     	;# 
   706  0017                     	;# 
   707  0018                     	;# 
   708  0019                     	;# 
   709  001A                     	;# 
   710  001B                     	;# 
   711  001C                     	;# 
   712  001E                     	;# 
   713  001F                     	;# 
   714  008C                     	;# 
   715  008E                     	;# 
   716  0091                     	;# 
   717  0092                     	;# 
   718  0095                     	;# 
   719  0096                     	;# 
   720  0097                     	;# 
   721  0098                     	;# 
   722  0099                     	;# 
   723  009A                     	;# 
   724  009B                     	;# 
   725  009B                     	;# 
   726  009C                     	;# 
   727  009D                     	;# 
   728  009E                     	;# 
   729  010C                     	;# 
   730  010E                     	;# 
   731  0111                     	;# 
   732  0112                     	;# 
   733  0113                     	;# 
   734  0114                     	;# 
   735  0115                     	;# 
   736  0116                     	;# 
   737  0117                     	;# 
   738  0118                     	;# 
   739  0119                     	;# 
   740  011A                     	;# 
   741  011B                     	;# 
   742  011D                     	;# 
   743  011D                     	;# 
   744  018C                     	;# 
   745  018E                     	;# 
   746  0191                     	;# 
   747  0191                     	;# 
   748  0192                     	;# 
   749  0193                     	;# 
   750  0193                     	;# 
   751  0193                     	;# 
   752  0194                     	;# 
   753  0195                     	;# 
   754  0196                     	;# 
   755  0199                     	;# 
   756  019A                     	;# 
   757  019B                     	;# 
   758  019B                     	;# 
   759  019B                     	;# 
   760  019B                     	;# 
   761  019C                     	;# 
   762  019C                     	;# 
   763  019D                     	;# 
   764  019E                     	;# 
   765  019F                     	;# 
   766  020C                     	;# 
   767  020E                     	;# 
   768  0211                     	;# 
   769  0211                     	;# 
   770  0212                     	;# 
   771  0212                     	;# 
   772  0213                     	;# 
   773  0213                     	;# 
   774  0214                     	;# 
   775  0214                     	;# 
   776  0215                     	;# 
   777  0215                     	;# 
   778  0215                     	;# 
   779  0216                     	;# 
   780  0216                     	;# 
   781  0217                     	;# 
   782  0217                     	;# 
   783  0291                     	;# 
   784  0291                     	;# 
   785  0292                     	;# 
   786  0293                     	;# 
   787  0294                     	;# 
   788  0295                     	;# 
   789  0295                     	;# 
   790  0296                     	;# 
   791  0391                     	;# 
   792  0392                     	;# 
   793  0393                     	;# 
   794  039A                     	;# 
   795  039C                     	;# 
   796  039D                     	;# 
   797  039E                     	;# 
   798  039F                     	;# 
   799  0FE4                     	;# 
   800  0FE5                     	;# 
   801  0FE6                     	;# 
   802  0FE7                     	;# 
   803  0FE8                     	;# 
   804  0FE9                     	;# 
   805  0FEA                     	;# 
   806  0FEB                     	;# 
   807  0FED                     	;# 
   808  0FEE                     	;# 
   809  0FEF                     	;# 
   810  0000                     	;# 
   811  0001                     	;# 
   812  0002                     	;# 
   813  0003                     	;# 
   814  0004                     	;# 
   815  0005                     	;# 
   816  0006                     	;# 
   817  0007                     	;# 
   818  0008                     	;# 
   819  0009                     	;# 
   820  000A                     	;# 
   821  000B                     	;# 
   822  000C                     	;# 
   823  000E                     	;# 
   824  0011                     	;# 
   825  0012                     	;# 
   826  0015                     	;# 
   827  0016                     	;# 
   828  0016                     	;# 
   829  0017                     	;# 
   830  0018                     	;# 
   831  0019                     	;# 
   832  001A                     	;# 
   833  001B                     	;# 
   834  001C                     	;# 
   835  001E                     	;# 
   836  001F                     	;# 
   837  008C                     	;# 
   838  008E                     	;# 
   839  0091                     	;# 
   840  0092                     	;# 
   841  0095                     	;# 
   842  0096                     	;# 
   843  0097                     	;# 
   844  0098                     	;# 
   845  0099                     	;# 
   846  009A                     	;# 
   847  009B                     	;# 
   848  009B                     	;# 
   849  009C                     	;# 
   850  009D                     	;# 
   851  009E                     	;# 
   852  010C                     	;# 
   853  010E                     	;# 
   854  0111                     	;# 
   855  0112                     	;# 
   856  0113                     	;# 
   857  0114                     	;# 
   858  0115                     	;# 
   859  0116                     	;# 
   860  0117                     	;# 
   861  0118                     	;# 
   862  0119                     	;# 
   863  011A                     	;# 
   864  011B                     	;# 
   865  011D                     	;# 
   866  011D                     	;# 
   867  018C                     	;# 
   868  018E                     	;# 
   869  0191                     	;# 
   870  0191                     	;# 
   871  0192                     	;# 
   872  0193                     	;# 
   873  0193                     	;# 
   874  0193                     	;# 
   875  0194                     	;# 
   876  0195                     	;# 
   877  0196                     	;# 
   878  0199                     	;# 
   879  019A                     	;# 
   880  019B                     	;# 
   881  019B                     	;# 
   882  019B                     	;# 
   883  019B                     	;# 
   884  019C                     	;# 
   885  019C                     	;# 
   886  019D                     	;# 
   887  019E                     	;# 
   888  019F                     	;# 
   889  020C                     	;# 
   890  020E                     	;# 
   891  0211                     	;# 
   892  0211                     	;# 
   893  0212                     	;# 
   894  0212                     	;# 
   895  0213                     	;# 
   896  0213                     	;# 
   897  0214                     	;# 
   898  0214                     	;# 
   899  0215                     	;# 
   900  0215                     	;# 
   901  0215                     	;# 
   902  0216                     	;# 
   903  0216                     	;# 
   904  0217                     	;# 
   905  0217                     	;# 
   906  0291                     	;# 
   907  0291                     	;# 
   908  0292                     	;# 
   909  0293                     	;# 
   910  0294                     	;# 
   911  0295                     	;# 
   912  0295                     	;# 
   913  0296                     	;# 
   914  0391                     	;# 
   915  0392                     	;# 
   916  0393                     	;# 
   917  039A                     	;# 
   918  039C                     	;# 
   919  039D                     	;# 
   920  039E                     	;# 
   921  039F                     	;# 
   922  0FE4                     	;# 
   923  0FE5                     	;# 
   924  0FE6                     	;# 
   925  0FE7                     	;# 
   926  0FE8                     	;# 
   927  0FE9                     	;# 
   928  0FEA                     	;# 
   929  0FEB                     	;# 
   930  0FED                     	;# 
   931  0FEE                     	;# 
   932  0FEF                     	;# 
   933  0000                     	;# 
   934  0001                     	;# 
   935  0002                     	;# 
   936  0003                     	;# 
   937  0004                     	;# 
   938  0005                     	;# 
   939  0006                     	;# 
   940  0007                     	;# 
   941  0008                     	;# 
   942  0009                     	;# 
   943  000A                     	;# 
   944  000B                     	;# 
   945  000C                     	;# 
   946  000E                     	;# 
   947  0011                     	;# 
   948  0012                     	;# 
   949  0015                     	;# 
   950  0016                     	;# 
   951  0016                     	;# 
   952  0017                     	;# 
   953  0018                     	;# 
   954  0019                     	;# 
   955  001A                     	;# 
   956  001B                     	;# 
   957  001C                     	;# 
   958  001E                     	;# 
   959  001F                     	;# 
   960  008C                     	;# 
   961  008E                     	;# 
   962  0091                     	;# 
   963  0092                     	;# 
   964  0095                     	;# 
   965  0096                     	;# 
   966  0097                     	;# 
   967  0098                     	;# 
   968  0099                     	;# 
   969  009A                     	;# 
   970  009B                     	;# 
   971  009B                     	;# 
   972  009C                     	;# 
   973  009D                     	;# 
   974  009E                     	;# 
   975  010C                     	;# 
   976  010E                     	;# 
   977  0111                     	;# 
   978  0112                     	;# 
   979  0113                     	;# 
   980  0114                     	;# 
   981  0115                     	;# 
   982  0116                     	;# 
   983  0117                     	;# 
   984  0118                     	;# 
   985  0119                     	;# 
   986  011A                     	;# 
   987  011B                     	;# 
   988  011D                     	;# 
   989  011D                     	;# 
   990  018C                     	;# 
   991  018E                     	;# 
   992  0191                     	;# 
   993  0191                     	;# 
   994  0192                     	;# 
   995  0193                     	;# 
   996  0193                     	;# 
   997  0193                     	;# 
   998  0194                     	;# 
   999  0195                     	;# 
  1000  0196                     	;# 
  1001  0199                     	;# 
  1002  019A                     	;# 
  1003  019B                     	;# 
  1004  019B                     	;# 
  1005  019B                     	;# 
  1006  019B                     	;# 
  1007  019C                     	;# 
  1008  019C                     	;# 
  1009  019D                     	;# 
  1010  019E                     	;# 
  1011  019F                     	;# 
  1012  020C                     	;# 
  1013  020E                     	;# 
  1014  0211                     	;# 
  1015  0211                     	;# 
  1016  0212                     	;# 
  1017  0212                     	;# 
  1018  0213                     	;# 
  1019  0213                     	;# 
  1020  0214                     	;# 
  1021  0214                     	;# 
  1022  0215                     	;# 
  1023  0215                     	;# 
  1024  0215                     	;# 
  1025  0216                     	;# 
  1026  0216                     	;# 
  1027  0217                     	;# 
  1028  0217                     	;# 
  1029  0291                     	;# 
  1030  0291                     	;# 
  1031  0292                     	;# 
  1032  0293                     	;# 
  1033  0294                     	;# 
  1034  0295                     	;# 
  1035  0295                     	;# 
  1036  0296                     	;# 
  1037  0391                     	;# 
  1038  0392                     	;# 
  1039  0393                     	;# 
  1040  039A                     	;# 
  1041  039C                     	;# 
  1042  039D                     	;# 
  1043  039E                     	;# 
  1044  039F                     	;# 
  1045  0FE4                     	;# 
  1046  0FE5                     	;# 
  1047  0FE6                     	;# 
  1048  0FE7                     	;# 
  1049  0FE8                     	;# 
  1050  0FE9                     	;# 
  1051  0FEA                     	;# 
  1052  0FEB                     	;# 
  1053  0FED                     	;# 
  1054  0FEE                     	;# 
  1055  0FEF                     	;# 
  1056  0000                     	;# 
  1057  0001                     	;# 
  1058  0002                     	;# 
  1059  0003                     	;# 
  1060  0004                     	;# 
  1061  0005                     	;# 
  1062  0006                     	;# 
  1063  0007                     	;# 
  1064  0008                     	;# 
  1065  0009                     	;# 
  1066  000A                     	;# 
  1067  000B                     	;# 
  1068  000C                     	;# 
  1069  000E                     	;# 
  1070  0011                     	;# 
  1071  0012                     	;# 
  1072  0015                     	;# 
  1073  0016                     	;# 
  1074  0016                     	;# 
  1075  0017                     	;# 
  1076  0018                     	;# 
  1077  0019                     	;# 
  1078  001A                     	;# 
  1079  001B                     	;# 
  1080  001C                     	;# 
  1081  001E                     	;# 
  1082  001F                     	;# 
  1083  008C                     	;# 
  1084  008E                     	;# 
  1085  0091                     	;# 
  1086  0092                     	;# 
  1087  0095                     	;# 
  1088  0096                     	;# 
  1089  0097                     	;# 
  1090  0098                     	;# 
  1091  0099                     	;# 
  1092  009A                     	;# 
  1093  009B                     	;# 
  1094  009B                     	;# 
  1095  009C                     	;# 
  1096  009D                     	;# 
  1097  009E                     	;# 
  1098  010C                     	;# 
  1099  010E                     	;# 
  1100  0111                     	;# 
  1101  0112                     	;# 
  1102  0113                     	;# 
  1103  0114                     	;# 
  1104  0115                     	;# 
  1105  0116                     	;# 
  1106  0117                     	;# 
  1107  0118                     	;# 
  1108  0119                     	;# 
  1109  011A                     	;# 
  1110  011B                     	;# 
  1111  011D                     	;# 
  1112  011D                     	;# 
  1113  018C                     	;# 
  1114  018E                     	;# 
  1115  0191                     	;# 
  1116  0191                     	;# 
  1117  0192                     	;# 
  1118  0193                     	;# 
  1119  0193                     	;# 
  1120  0193                     	;# 
  1121  0194                     	;# 
  1122  0195                     	;# 
  1123  0196                     	;# 
  1124  0199                     	;# 
  1125  019A                     	;# 
  1126  019B                     	;# 
  1127  019B                     	;# 
  1128  019B                     	;# 
  1129  019B                     	;# 
  1130  019C                     	;# 
  1131  019C                     	;# 
  1132  019D                     	;# 
  1133  019E                     	;# 
  1134  019F                     	;# 
  1135  020C                     	;# 
  1136  020E                     	;# 
  1137  0211                     	;# 
  1138  0211                     	;# 
  1139  0212                     	;# 
  1140  0212                     	;# 
  1141  0213                     	;# 
  1142  0213                     	;# 
  1143  0214                     	;# 
  1144  0214                     	;# 
  1145  0215                     	;# 
  1146  0215                     	;# 
  1147  0215                     	;# 
  1148  0216                     	;# 
  1149  0216                     	;# 
  1150  0217                     	;# 
  1151  0217                     	;# 
  1152  0291                     	;# 
  1153  0291                     	;# 
  1154  0292                     	;# 
  1155  0293                     	;# 
  1156  0294                     	;# 
  1157  0295                     	;# 
  1158  0295                     	;# 
  1159  0296                     	;# 
  1160  0391                     	;# 
  1161  0392                     	;# 
  1162  0393                     	;# 
  1163  039A                     	;# 
  1164  039C                     	;# 
  1165  039D                     	;# 
  1166  039E                     	;# 
  1167  039F                     	;# 
  1168  0FE4                     	;# 
  1169  0FE5                     	;# 
  1170  0FE6                     	;# 
  1171  0FE7                     	;# 
  1172  0FE8                     	;# 
  1173  0FE9                     	;# 
  1174  0FEA                     	;# 
  1175  0FEB                     	;# 
  1176  0FED                     	;# 
  1177  0FEE                     	;# 
  1178  0FEF                     	;# 
  1179  000E                     _PORTC	set	14
  1180  0015                     _TMR0	set	21
  1181  005F                     _GIE	set	95
  1182  005E                     _PEIE	set	94
  1183  0065                     _RA5	set	101
  1184  008D                     _RCIF	set	141
  1185  005D                     _TMR0IE	set	93
  1186  005A                     _TMR0IF	set	90
  1187  008C                     _TXIF	set	140
  1188  009D                     _ADCON0	set	157
  1189  009E                     _ADCON1	set	158
  1190  009C                     _ADRESH	set	156
  1191  009B                     _ADRESL	set	155
  1192  0095                     _OPTION_REGbits	set	149
  1193  0099                     _OSCCON	set	153
  1194  009A                     _OSCSTAT	set	154
  1195  0098                     _OSCTUNE	set	152
  1196  008C                     _TRISA	set	140
  1197  008E                     _TRISC	set	142
  1198  04E9                     _ADGO	set	1257
  1199  04A8                     _PS0	set	1192
  1200  04A9                     _PS1	set	1193
  1201  04AA                     _PS2	set	1194
  1202  04AB                     _PSA	set	1195
  1203  048D                     _RCIE	set	1165
  1204  04AD                     _TMR0CS	set	1197
  1205  048C                     _TXIE	set	1164
  1206  011D                     _APFCON	set	285
  1207  010C                     _LATA	set	268
  1208  010E                     _LATC	set	270
  1209  08EF                     _RXDTSEL	set	2287
  1210  08EA                     _TXCKSEL	set	2282
  1211  018C                     _ANSELA	set	396
  1212  018E                     _ANSELC	set	398
  1213  0199                     _RCREG	set	409
  1214  019C                     _SPBRGH	set	412
  1215  019B                     _SPBRGL	set	411
  1216  019A                     _TXREG	set	410
  1217  0CFB                     _BRG16	set	3323
  1218  0CF2                     _BRGH	set	3314
  1219  0CEC                     _CREN	set	3308
  1220  0CE9                     _OERR	set	3305
  1221  0CEF                     _SPEN	set	3311
  1222  0CF4                     _SYNC	set	3316
  1223  0CF5                     _TXEN	set	3317
  1224  020C                     _WPUA	set	524
  1225  020E                     _WPUC	set	526
  1226  039A                     _CLKRCON	set	922
  1227                           
  1228                           ; #config settings
  1229  0000                     
  1230                           	psect	cinit
  1231  0056                     start_initialization:	
  1232  0056                     __initialization:	
  1233                           
  1234                           ; Clear objects allocated to COMMON
  1235  0056  01F0               	clrf	__pbssCOMMON& (0+127)
  1236  0057  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  1237  0058  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  1238  0059  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  1239  005A  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  1240                           
  1241                           ; Clear objects allocated to BANK0
  1242  005B  3020               	movlw	low __pbssBANK0
  1243  005C  0084               	movwf	4
  1244  005D  3000               	movlw	high __pbssBANK0
  1245  005E  0085               	movwf	5
  1246  005F  302C               	movlw	44
  1247  0060  23EB               	fcall	clear_ram0
  1248  0061                     end_of_initialization:	
  1249                           ;End of C runtime variable initialization code
  1250                           
  1251  0061                     __end_of__initialization:	
  1252  0061  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1253  0062  0020               	movlb	0
  1254  0063  2A10               	ljmp	_main	;jump to C main() function
  1255                           
  1256                           	psect	bssCOMMON
  1257  0070                     __pbssCOMMON:	
  1258  0070                     _TIMER0_timeout:	
  1259  0070                     	ds	2
  1260  0072                     _USART_tx_flag:	
  1261  0072                     	ds	1
  1262  0073                     _USART_tx_index:	
  1263  0073                     	ds	1
  1264  0074                     _USART_tx_length:	
  1265  0074                     	ds	1
  1266                           
  1267                           	psect	bssBANK0
  1268  0020                     __pbssBANK0:	
  1269  0020                     _USART_rx_data:	
  1270  0020                     	ds	15
  1271  002F                     _USART_tx_data:	
  1272  002F                     	ds	15
  1273  003E                     _TIMER0_flag:	
  1274  003E                     	ds	1
  1275  003F                     _USART_rx_flag:	
  1276  003F                     	ds	1
  1277  0040                     _USART_rx_index:	
  1278  0040                     	ds	1
  1279  0041                     _mess_rec_size:	
  1280  0041                     	ds	1
  1281  0042                     _mess_rec:	
  1282  0042                     	ds	10
  1283                           
  1284                           	psect	clrtext
  1285  03EB                     clear_ram0:	
  1286                           ;	Called with FSR0 containing the base address, and
  1287                           ;	WREG with the size to clear
  1288                           
  1289  03EB  0064               	clrwdt	;clear the watchdog before getting into this loop
  1290  03EC                     clrloop0:	
  1291  03EC  0180               	clrf	0	;clear RAM location pointed to by FSR
  1292  03ED  3101               	addfsr 0,1
  1293  03EE  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1294  03EF  2BEC               	goto	clrloop0	;have we reached the end yet?
  1295  03F0  3400               	retlw	0	;all done for this memory range, return
  1296                           
  1297                           	psect	cstackCOMMON
  1298  0075                     __pcstackCOMMON:	
  1299  0075                     ?_OSCILLATOR_Initialize:	
  1300  0075                     ?_setup_TMR0:	
  1301                           ; 1 bytes @ 0x0
  1302                           
  1303  0075                     ?_start_TX_USART_ISR:	
  1304                           ; 1 bytes @ 0x0
  1305                           
  1306  0075                     ?_start_RX_USART_ISR:	
  1307                           ; 1 bytes @ 0x0
  1308                           
  1309  0075                     ?_start_RCM:	
  1310                           ; 1 bytes @ 0x0
  1311                           
  1312  0075                     ?_setup_ADC:	
  1313                           ; 1 bytes @ 0x0
  1314                           
  1315  0075                     ?_mess_handler:	
  1316                           ; 1 bytes @ 0x0
  1317                           
  1318  0075                     ?_stop_TMR0_ISR:	
  1319                           ; 1 bytes @ 0x0
  1320                           
  1321  0075                     ??_stop_TMR0_ISR:	
  1322                           ; 1 bytes @ 0x0
  1323                           
  1324  0075                     ?_start_TMR0_ISR:	
  1325                           ; 1 bytes @ 0x0
  1326                           
  1327  0075                     ??_start_TMR0_ISR:	
  1328                           ; 1 bytes @ 0x0
  1329                           
  1330  0075                     ?_config_ASIC:	
  1331                           ; 1 bytes @ 0x0
  1332                           
  1333  0075                     ?_read_ADC_channels:	
  1334                           ; 1 bytes @ 0x0
  1335                           
  1336  0075                     ?_measure_Impedance:	
  1337                           ; 1 bytes @ 0x0
  1338                           
  1339  0075                     ?_measure_Impedance_no_offset:	
  1340                           ; 1 bytes @ 0x0
  1341                           
  1342  0075                     ?_measure_Offset:	
  1343                           ; 1 bytes @ 0x0
  1344                           
  1345  0075                     ?_measure_Impedance_SE:	
  1346                           ; 1 bytes @ 0x0
  1347                           
  1348  0075                     ?_PIN_MANAGER_Initialize:	
  1349                           ; 1 bytes @ 0x0
  1350                           
  1351  0075                     ?_SYSTEM_Initialize:	
  1352                           ; 1 bytes @ 0x0
  1353                           
  1354  0075                     ?_main:	
  1355                           ; 1 bytes @ 0x0
  1356                           
  1357  0075                     ?_isr:	
  1358                           ; 1 bytes @ 0x0
  1359                           
  1360  0075                     ?_close_RX_USART:	
  1361                           ; 1 bytes @ 0x0
  1362                           
  1363  0075                     ?i1_start_RX_USART_ISR:	
  1364                           ; 1 bytes @ 0x0
  1365                           
  1366  0075                     ??i1_start_RX_USART_ISR:	
  1367                           ; 1 bytes @ 0x0
  1368                           
  1369                           
  1370                           ; 1 bytes @ 0x0
  1371  0075                     	ds	2
  1372  0077                     start_TMR0_ISR@val:	
  1373                           
  1374                           ; 1 bytes @ 0x2
  1375  0077                     	ds	1
  1376  0078                     ??_isr:	
  1377                           
  1378                           ; 1 bytes @ 0x3
  1379  0078                     	ds	2
  1380                           
  1381                           	psect	cstackBANK0
  1382  004C                     __pcstackBANK0:	
  1383  004C                     ??_OSCILLATOR_Initialize:	
  1384  004C                     ??_setup_TMR0:	
  1385                           ; 1 bytes @ 0x0
  1386                           
  1387  004C                     ??_start_TX_USART_ISR:	
  1388                           ; 1 bytes @ 0x0
  1389                           
  1390  004C                     ??_start_RX_USART_ISR:	
  1391                           ; 1 bytes @ 0x0
  1392                           
  1393  004C                     ??_start_RCM:	
  1394                           ; 1 bytes @ 0x0
  1395                           
  1396  004C                     ??_setup_ADC:	
  1397                           ; 1 bytes @ 0x0
  1398                           
  1399  004C                     ??_PIN_MANAGER_Initialize:	
  1400                           ; 1 bytes @ 0x0
  1401                           
  1402  004C                     ??_SYSTEM_Initialize:	
  1403                           ; 1 bytes @ 0x0
  1404                           
  1405  004C                     ?_BIO_config:	
  1406                           ; 1 bytes @ 0x0
  1407                           
  1408  004C                     ??_close_RX_USART:	
  1409                           ; 1 bytes @ 0x0
  1410                           
  1411  004C                     ?_lputs_ISR:	
  1412                           ; 1 bytes @ 0x0
  1413                           
  1414  004C                     ?_ADC_2:	
  1415                           ; 1 bytes @ 0x0
  1416                           
  1417  004C                     ?_ADC_4:	
  1418                           ; 2 bytes @ 0x0
  1419                           
  1420  004C                     ?_ADC_5:	
  1421                           ; 2 bytes @ 0x0
  1422                           
  1423  004C                     lputs_ISR@length:	
  1424                           ; 2 bytes @ 0x0
  1425                           
  1426  004C                     BIO_config@conf:	
  1427                           ; 1 bytes @ 0x0
  1428                           
  1429                           
  1430                           ; 2 bytes @ 0x0
  1431  004C                     	ds	1
  1432  004D                     ??_lputs_ISR:	
  1433                           
  1434                           ; 1 bytes @ 0x1
  1435  004D                     	ds	1
  1436  004E                     ??_ADC_2:	
  1437  004E                     ??_ADC_4:	
  1438                           ; 1 bytes @ 0x2
  1439                           
  1440  004E                     ??_ADC_5:	
  1441                           ; 1 bytes @ 0x2
  1442                           
  1443  004E                     ??_BIO_config:	
  1444                           ; 1 bytes @ 0x2
  1445                           
  1446                           
  1447                           ; 1 bytes @ 0x2
  1448  004E                     	ds	1
  1449  004F                     BIO_config@i:	
  1450  004F                     lputs_ISR@data:	
  1451                           ; 1 bytes @ 0x3
  1452                           
  1453                           
  1454                           ; 1 bytes @ 0x3
  1455  004F                     	ds	1
  1456  0050                     BIO_config@out:	
  1457  0050                     lputs_ISR@i:	
  1458                           ; 1 bytes @ 0x4
  1459                           
  1460  0050                     ADC_2@ADC_value:	
  1461                           ; 1 bytes @ 0x4
  1462                           
  1463  0050                     ADC_4@ADC_value:	
  1464                           ; 2 bytes @ 0x4
  1465                           
  1466  0050                     ADC_5@ADC_value:	
  1467                           ; 2 bytes @ 0x4
  1468                           
  1469                           
  1470                           ; 2 bytes @ 0x4
  1471  0050                     	ds	1
  1472  0051                     ??_config_ASIC:	
  1473                           
  1474                           ; 1 bytes @ 0x5
  1475  0051                     	ds	1
  1476  0052                     ??_read_ADC_channels:	
  1477  0052                     ??_measure_Impedance:	
  1478                           ; 1 bytes @ 0x6
  1479                           
  1480  0052                     ??_measure_Impedance_no_offset:	
  1481                           ; 1 bytes @ 0x6
  1482                           
  1483  0052                     ??_measure_Offset:	
  1484                           ; 1 bytes @ 0x6
  1485                           
  1486  0052                     ??_measure_Impedance_SE:	
  1487                           ; 1 bytes @ 0x6
  1488                           
  1489  0052                     config_ASIC@asic:	
  1490                           ; 1 bytes @ 0x6
  1491                           
  1492                           
  1493                           ; 2 bytes @ 0x6
  1494  0052                     	ds	1
  1495  0053                     measure_Offset@aux:	
  1496  0053                     read_ADC_channels@aux:	
  1497                           ; 5 bytes @ 0x7
  1498                           
  1499  0053                     measure_Impedance@aux:	
  1500                           ; 7 bytes @ 0x7
  1501                           
  1502  0053                     measure_Impedance_no_offset@aux:	
  1503                           ; 13 bytes @ 0x7
  1504                           
  1505  0053                     measure_Impedance_SE@aux:	
  1506                           ; 13 bytes @ 0x7
  1507                           
  1508                           
  1509                           ; 13 bytes @ 0x7
  1510  0053                     	ds	5
  1511  0058                     measure_Offset@value1:	
  1512                           
  1513                           ; 2 bytes @ 0xC
  1514  0058                     	ds	2
  1515  005A                     read_ADC_channels@value1:	
  1516  005A                     measure_Offset@value2:	
  1517                           ; 2 bytes @ 0xE
  1518                           
  1519                           
  1520                           ; 2 bytes @ 0xE
  1521  005A                     	ds	2
  1522  005C                     read_ADC_channels@value2:	
  1523  005C                     measure_Offset@asic:	
  1524                           ; 2 bytes @ 0x10
  1525                           
  1526                           
  1527                           ; 2 bytes @ 0x10
  1528  005C                     	ds	2
  1529  005E                     read_ADC_channels@value3:	
  1530                           
  1531                           ; 2 bytes @ 0x12
  1532  005E                     	ds	2
  1533  0060                     measure_Impedance@value1:	
  1534  0060                     measure_Impedance_no_offset@value1:	
  1535                           ; 2 bytes @ 0x14
  1536                           
  1537  0060                     measure_Impedance_SE@value1:	
  1538                           ; 2 bytes @ 0x14
  1539                           
  1540                           
  1541                           ; 2 bytes @ 0x14
  1542  0060                     	ds	2
  1543  0062                     measure_Impedance@value2:	
  1544  0062                     measure_Impedance_no_offset@value2:	
  1545                           ; 2 bytes @ 0x16
  1546                           
  1547  0062                     measure_Impedance_SE@asic:	
  1548                           ; 2 bytes @ 0x16
  1549                           
  1550                           
  1551                           ; 2 bytes @ 0x16
  1552  0062                     	ds	2
  1553  0064                     measure_Impedance@asic:	
  1554  0064                     measure_Impedance_no_offset@asic:	
  1555                           ; 2 bytes @ 0x18
  1556                           
  1557                           
  1558                           ; 2 bytes @ 0x18
  1559  0064                     	ds	2
  1560  0066                     ??_mess_handler:	
  1561                           
  1562                           ; 1 bytes @ 0x1A
  1563  0066                     	ds	1
  1564  0067                     ??_main:	
  1565                           
  1566                           ; 1 bytes @ 0x1B
  1567  0067                     	ds	1
  1568  0068                     main@i:	
  1569                           
  1570                           ; 1 bytes @ 0x1C
  1571  0068                     	ds	1
  1572                           
  1573                           	psect	maintext
  1574  0210                     __pmaintext:	
  1575 ;;
  1576 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1577 ;;
  1578 ;; *************** function _main *****************
  1579 ;; Defined at:
  1580 ;;		line 17 in file "main.c"
  1581 ;; Parameters:    Size  Location     Type
  1582 ;;		None
  1583 ;; Auto vars:     Size  Location     Type
  1584 ;;  i               1   28[BANK0 ] unsigned char 
  1585 ;; Return value:  Size  Location     Type
  1586 ;;                  1    wreg      void 
  1587 ;; Registers used:
  1588 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1589 ;; Tracked objects:
  1590 ;;		On entry : B1F/0
  1591 ;;		On exit  : 0/0
  1592 ;;		Unchanged: 0/0
  1593 ;; Data sizes:     COMMON   BANK0   BANK1
  1594 ;;      Params:         0       0       0
  1595 ;;      Locals:         0       1       0
  1596 ;;      Temps:          0       1       0
  1597 ;;      Totals:         0       2       0
  1598 ;;Total ram usage:        2 bytes
  1599 ;; Hardware stack levels required when called:    6
  1600 ;; This function calls:
  1601 ;;		_SYSTEM_Initialize
  1602 ;;		_mess_handler
  1603 ;;		_setup_ADC
  1604 ;;		_setup_TMR0
  1605 ;;		_start_RCM
  1606 ;;		_start_RX_USART_ISR
  1607 ;;		_start_TX_USART_ISR
  1608 ;; This function is called by:
  1609 ;;		Startup code after reset
  1610 ;; This function uses a non-reentrant model
  1611 ;;
  1612                           
  1613                           
  1614                           ;psect for function _main
  1615  0210                     _main:	
  1616                           
  1617                           ;main.c: 19: unsigned char i;
  1618                           ;main.c: 21: SYSTEM_Initialize();
  1619                           
  1620                           ;incstack = 0
  1621                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1622  0210  2406               	fcall	_SYSTEM_Initialize
  1623                           
  1624                           ;main.c: 22: setup_TMR0();
  1625  0211  23E4               	fcall	_setup_TMR0
  1626                           
  1627                           ;main.c: 23: start_TX_USART_ISR();
  1628  0212  23D5               	fcall	_start_TX_USART_ISR
  1629                           
  1630                           ;main.c: 24: start_RX_USART_ISR();
  1631  0213  23A3               	fcall	_start_RX_USART_ISR
  1632                           
  1633                           ;main.c: 25: start_RCM();
  1634  0214  2402               	fcall	_start_RCM
  1635                           
  1636                           ;main.c: 26: setup_ADC();
  1637  0215  23F1               	fcall	_setup_ADC
  1638                           
  1639                           ;main.c: 28: RA5 = 0;
  1640  0216  0020               	movlb	0	; select bank0
  1641  0217  128C               	bcf	12,5	;volatile
  1642                           
  1643                           ;main.c: 29: _delay((unsigned long)((150)*(500000/4000.0)));
  1644  0218  3019               	movlw	25
  1645  0219  0020               	movlb	0	; select bank0
  1646  021A  00E7               	movwf	??_main
  1647  021B  3058               	movlw	88
  1648  021C                     u837:	
  1649  021C  0B89               	decfsz	9,f
  1650  021D  2A1C               	goto	u837
  1651  021E  0BE7               	decfsz	??_main,f
  1652  021F  2A1C               	goto	u837
  1653  0220  0000               	nop
  1654                           
  1655                           ;main.c: 30: RA5 = 1;
  1656  0221  0020               	movlb	0	; select bank0
  1657  0222  168C               	bsf	12,5	;volatile
  1658  0223                     l108:	
  1659                           ;main.c: 35: while(1) {
  1660                           
  1661  0223  0064               	clrwdt	;# 
  1662                           
  1663                           ;main.c: 39: if (TIMER0_flag) {
  1664  0224  0020               	movlb	0	; select bank0
  1665  0225  083E               	movf	_TIMER0_flag,w	;volatile
  1666  0226  1903               	btfsc	3,2
  1667  0227  2A23               	goto	l108
  1668                           
  1669                           ;main.c: 40: TIMER0_flag = 0;
  1670  0228  01BE               	clrf	_TIMER0_flag	;volatile
  1671                           
  1672                           ;main.c: 42: if (USART_rx_index > 10) {
  1673  0229  300B               	movlw	11
  1674  022A  0240               	subwf	_USART_rx_index,w	;volatile
  1675  022B  1C03               	skipc
  1676  022C  2A2F               	goto	l2365
  1677                           
  1678                           ;main.c: 43: USART_rx_index = 0;
  1679  022D  01C0               	clrf	_USART_rx_index	;volatile
  1680                           
  1681                           ;main.c: 44: continue;
  1682  022E  2A23               	goto	l108
  1683  022F                     l2365:	
  1684                           
  1685                           ;main.c: 45: }
  1686                           ;main.c: 47: if(USART_rx_index == 0)
  1687  022F  0840               	movf	_USART_rx_index,w	;volatile
  1688  0230  1903               	btfsc	3,2
  1689                           
  1690                           ;main.c: 48: continue;
  1691  0231  2A23               	goto	l108
  1692                           
  1693                           ;main.c: 51: mess_rec_size = USART_rx_index;
  1694  0232  0840               	movf	_USART_rx_index,w	;volatile
  1695  0233  00E7               	movwf	??_main
  1696  0234  0867               	movf	??_main,w
  1697  0235  00C1               	movwf	_mess_rec_size	;volatile
  1698                           
  1699                           ;main.c: 53: for (i = 0; i < mess_rec_size; i++)
  1700  0236  01E8               	clrf	main@i
  1701  0237                     l2377:	
  1702  0237  0841               	movf	_mess_rec_size,w	;volatile
  1703  0238  0268               	subwf	main@i,w
  1704  0239  1803               	btfsc	3,0
  1705  023A  2A4C               	goto	l2379
  1706                           
  1707                           ;main.c: 54: mess_rec[i] = USART_rx_data[i];
  1708  023B  0868               	movf	main@i,w
  1709  023C  3E20               	addlw	(low (_USART_rx_data| 0))& (0+255)
  1710  023D  0086               	movwf	6
  1711  023E  0187               	clrf	7
  1712  023F  0801               	movf	1,w
  1713  0240  00E7               	movwf	??_main
  1714  0241  0868               	movf	main@i,w
  1715  0242  3E42               	addlw	(low (_mess_rec| 0))& (0+255)
  1716  0243  0086               	movwf	6
  1717  0244  0187               	clrf	7
  1718  0245  0867               	movf	??_main,w
  1719  0246  0081               	movwf	1
  1720  0247  3001               	movlw	1
  1721  0248  00E7               	movwf	??_main
  1722  0249  0867               	movf	??_main,w
  1723  024A  07E8               	addwf	main@i,f
  1724  024B  2A37               	goto	l2377
  1725  024C                     l2379:	
  1726                           
  1727                           ;main.c: 57: mess_handler();
  1728  024C  2287               	fcall	_mess_handler
  1729  024D  2A23               	goto	l108
  1730  024E                     __end_of_main:	
  1731                           
  1732                           	psect	text1
  1733  03D5                     __ptext1:	
  1734 ;; *************** function _start_TX_USART_ISR *****************
  1735 ;; Defined at:
  1736 ;;		line 100 in file "USART1823.c"
  1737 ;; Parameters:    Size  Location     Type
  1738 ;;		None
  1739 ;; Auto vars:     Size  Location     Type
  1740 ;;		None
  1741 ;; Return value:  Size  Location     Type
  1742 ;;                  1    wreg      void 
  1743 ;; Registers used:
  1744 ;;		wreg, status,2
  1745 ;; Tracked objects:
  1746 ;;		On entry : 0/0
  1747 ;;		On exit  : 0/0
  1748 ;;		Unchanged: 0/0
  1749 ;; Data sizes:     COMMON   BANK0   BANK1
  1750 ;;      Params:         0       0       0
  1751 ;;      Locals:         0       0       0
  1752 ;;      Temps:          0       0       0
  1753 ;;      Totals:         0       0       0
  1754 ;;Total ram usage:        0 bytes
  1755 ;; Hardware stack levels used:    1
  1756 ;; Hardware stack levels required when called:    2
  1757 ;; This function calls:
  1758 ;;		Nothing
  1759 ;; This function is called by:
  1760 ;;		_main
  1761 ;; This function uses a non-reentrant model
  1762 ;;
  1763                           
  1764                           
  1765                           ;psect for function _start_TX_USART_ISR
  1766  03D5                     _start_TX_USART_ISR:	
  1767                           
  1768                           ;USART1823.c: 102: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  1769                           
  1770                           ;incstack = 0
  1771                           ; Regs used in _start_TX_USART_ISR: [wreg+status,2]
  1772  03D5  0023               	movlb	3	; select bank3
  1773  03D6  151E               	bsf	30,2	;volatile
  1774  03D7  159F               	bsf	31,3	;volatile
  1775  03D8  019C               	clrf	28	;volatile
  1776  03D9  300C               	movlw	12
  1777  03DA  009B               	movwf	27	;volatile
  1778                           
  1779                           ;USART1823.c: 103: SYNC = 0;
  1780  03DB  121E               	bcf	30,4	;volatile
  1781                           
  1782                           ;USART1823.c: 104: SPEN = 1;
  1783  03DC  179D               	bsf	29,7	;volatile
  1784                           
  1785                           ;USART1823.c: 105: TXEN = 1;
  1786  03DD  169E               	bsf	30,5	;volatile
  1787                           
  1788                           ;USART1823.c: 107: USART_tx_flag = 0;
  1789  03DE  01F2               	clrf	_USART_tx_flag	;volatile
  1790                           
  1791                           ;USART1823.c: 108: USART_tx_index = 0;
  1792  03DF  01F3               	clrf	_USART_tx_index	;volatile
  1793                           
  1794                           ;USART1823.c: 109: USART_tx_length = 0;
  1795  03E0  01F4               	clrf	_USART_tx_length	;volatile
  1796                           
  1797                           ;USART1823.c: 112: PEIE = 1;
  1798  03E1  170B               	bsf	11,6	;volatile
  1799                           
  1800                           ;USART1823.c: 113: GIE = 1;
  1801  03E2  178B               	bsf	11,7	;volatile
  1802  03E3  0008               	return
  1803  03E4                     __end_of_start_TX_USART_ISR:	
  1804                           
  1805                           	psect	text2
  1806  03A3                     __ptext2:	
  1807 ;; *************** function _start_RX_USART_ISR *****************
  1808 ;; Defined at:
  1809 ;;		line 82 in file "USART1823.c"
  1810 ;; Parameters:    Size  Location     Type
  1811 ;;		None
  1812 ;; Auto vars:     Size  Location     Type
  1813 ;;		None
  1814 ;; Return value:  Size  Location     Type
  1815 ;;                  1    wreg      void 
  1816 ;; Registers used:
  1817 ;;		wreg, status,2
  1818 ;; Tracked objects:
  1819 ;;		On entry : 0/0
  1820 ;;		On exit  : 0/0
  1821 ;;		Unchanged: 0/0
  1822 ;; Data sizes:     COMMON   BANK0   BANK1
  1823 ;;      Params:         0       0       0
  1824 ;;      Locals:         0       0       0
  1825 ;;      Temps:          0       0       0
  1826 ;;      Totals:         0       0       0
  1827 ;;Total ram usage:        0 bytes
  1828 ;; Hardware stack levels used:    1
  1829 ;; Hardware stack levels required when called:    2
  1830 ;; This function calls:
  1831 ;;		Nothing
  1832 ;; This function is called by:
  1833 ;;		_main
  1834 ;; This function uses a non-reentrant model
  1835 ;;
  1836                           
  1837                           
  1838                           ;psect for function _start_RX_USART_ISR
  1839  03A3                     _start_RX_USART_ISR:	
  1840                           
  1841                           ;USART1823.c: 85: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  1842                           
  1843                           ;incstack = 0
  1844                           ; Regs used in _start_RX_USART_ISR: [wreg+status,2]
  1845  03A3  0023               	movlb	3	; select bank3
  1846  03A4  151E               	bsf	30,2	;volatile
  1847  03A5  159F               	bsf	31,3	;volatile
  1848  03A6  019C               	clrf	28	;volatile
  1849  03A7  300C               	movlw	12
  1850  03A8  009B               	movwf	27	;volatile
  1851                           
  1852                           ;USART1823.c: 87: SYNC = 0;
  1853  03A9  121E               	bcf	30,4	;volatile
  1854                           
  1855                           ;USART1823.c: 88: SPEN = 1;
  1856  03AA  179D               	bsf	29,7	;volatile
  1857                           
  1858                           ;USART1823.c: 89: CREN = 1;
  1859  03AB  161D               	bsf	29,4	;volatile
  1860                           
  1861                           ;USART1823.c: 91: USART_rx_flag = 0;
  1862  03AC  0020               	movlb	0	; select bank0
  1863  03AD  01BF               	clrf	_USART_rx_flag	;volatile
  1864                           
  1865                           ;USART1823.c: 92: USART_rx_index = 0;
  1866  03AE  01C0               	clrf	_USART_rx_index	;volatile
  1867                           
  1868                           ;USART1823.c: 94: RCIE = 1;
  1869  03AF  0021               	movlb	1	; select bank1
  1870  03B0  1691               	bsf	17,5	;volatile
  1871                           
  1872                           ;USART1823.c: 95: PEIE = 1;
  1873  03B1  170B               	bsf	11,6	;volatile
  1874                           
  1875                           ;USART1823.c: 96: GIE = 1;
  1876  03B2  178B               	bsf	11,7	;volatile
  1877  03B3  0008               	return
  1878  03B4                     __end_of_start_RX_USART_ISR:	
  1879                           
  1880                           	psect	text3
  1881  0402                     __ptext3:	
  1882 ;; *************** function _start_RCM *****************
  1883 ;; Defined at:
  1884 ;;		line 4 in file "RCM1823.c"
  1885 ;; Parameters:    Size  Location     Type
  1886 ;;		None
  1887 ;; Auto vars:     Size  Location     Type
  1888 ;;		None
  1889 ;; Return value:  Size  Location     Type
  1890 ;;                  1    wreg      void 
  1891 ;; Registers used:
  1892 ;;		wreg
  1893 ;; Tracked objects:
  1894 ;;		On entry : 0/0
  1895 ;;		On exit  : 0/0
  1896 ;;		Unchanged: 0/0
  1897 ;; Data sizes:     COMMON   BANK0   BANK1
  1898 ;;      Params:         0       0       0
  1899 ;;      Locals:         0       0       0
  1900 ;;      Temps:          0       0       0
  1901 ;;      Totals:         0       0       0
  1902 ;;Total ram usage:        0 bytes
  1903 ;; Hardware stack levels used:    1
  1904 ;; Hardware stack levels required when called:    2
  1905 ;; This function calls:
  1906 ;;		Nothing
  1907 ;; This function is called by:
  1908 ;;		_main
  1909 ;; This function uses a non-reentrant model
  1910 ;;
  1911                           
  1912                           
  1913                           ;psect for function _start_RCM
  1914  0402                     _start_RCM:	
  1915                           
  1916                           ;RCM1823.c: 6: CLKRCON = 0b11010000;
  1917                           
  1918                           ;incstack = 0
  1919                           ; Regs used in _start_RCM: [wreg]
  1920  0402  30D0               	movlw	208
  1921  0403  0027               	movlb	7	; select bank7
  1922  0404  009A               	movwf	26	;volatile
  1923  0405  0008               	return
  1924  0406                     __end_of_start_RCM:	
  1925                           
  1926                           	psect	text4
  1927  03E4                     __ptext4:	
  1928 ;; *************** function _setup_TMR0 *****************
  1929 ;; Defined at:
  1930 ;;		line 10 in file "TMR0.c"
  1931 ;; Parameters:    Size  Location     Type
  1932 ;;		None
  1933 ;; Auto vars:     Size  Location     Type
  1934 ;;		None
  1935 ;; Return value:  Size  Location     Type
  1936 ;;                  1    wreg      void 
  1937 ;; Registers used:
  1938 ;;		None
  1939 ;; Tracked objects:
  1940 ;;		On entry : 0/0
  1941 ;;		On exit  : 0/0
  1942 ;;		Unchanged: 0/0
  1943 ;; Data sizes:     COMMON   BANK0   BANK1
  1944 ;;      Params:         0       0       0
  1945 ;;      Locals:         0       0       0
  1946 ;;      Temps:          0       0       0
  1947 ;;      Totals:         0       0       0
  1948 ;;Total ram usage:        0 bytes
  1949 ;; Hardware stack levels used:    1
  1950 ;; Hardware stack levels required when called:    2
  1951 ;; This function calls:
  1952 ;;		Nothing
  1953 ;; This function is called by:
  1954 ;;		_main
  1955 ;; This function uses a non-reentrant model
  1956 ;;
  1957                           
  1958                           
  1959                           ;psect for function _setup_TMR0
  1960  03E4                     _setup_TMR0:	
  1961                           
  1962                           ;TMR0.c: 13: PS2 = 0; PS1 = 1; PS0 = 0;
  1963                           
  1964                           ;incstack = 0
  1965                           ; Regs used in _setup_TMR0: []
  1966  03E4  0021               	movlb	1	; select bank1
  1967  03E5  1115               	bcf	21,2	;volatile
  1968  03E6  1495               	bsf	21,1	;volatile
  1969  03E7  1015               	bcf	21,0	;volatile
  1970                           
  1971                           ;TMR0.c: 16: PSA = 0;
  1972  03E8  1195               	bcf	21,3	;volatile
  1973                           
  1974                           ;TMR0.c: 18: TMR0CS = 0;
  1975  03E9  1295               	bcf	21,5	;volatile
  1976  03EA  0008               	return
  1977  03EB                     __end_of_setup_TMR0:	
  1978                           
  1979                           	psect	text5
  1980  03F1                     __ptext5:	
  1981 ;; *************** function _setup_ADC *****************
  1982 ;; Defined at:
  1983 ;;		line 3 in file "ADC1823.c"
  1984 ;; Parameters:    Size  Location     Type
  1985 ;;		None
  1986 ;; Auto vars:     Size  Location     Type
  1987 ;;		None
  1988 ;; Return value:  Size  Location     Type
  1989 ;;                  1    wreg      void 
  1990 ;; Registers used:
  1991 ;;		wreg
  1992 ;; Tracked objects:
  1993 ;;		On entry : 0/0
  1994 ;;		On exit  : 0/0
  1995 ;;		Unchanged: 0/0
  1996 ;; Data sizes:     COMMON   BANK0   BANK1
  1997 ;;      Params:         0       0       0
  1998 ;;      Locals:         0       0       0
  1999 ;;      Temps:          0       0       0
  2000 ;;      Totals:         0       0       0
  2001 ;;Total ram usage:        0 bytes
  2002 ;; Hardware stack levels used:    1
  2003 ;; Hardware stack levels required when called:    2
  2004 ;; This function calls:
  2005 ;;		Nothing
  2006 ;; This function is called by:
  2007 ;;		_main
  2008 ;; This function uses a non-reentrant model
  2009 ;;
  2010                           
  2011                           
  2012                           ;psect for function _setup_ADC
  2013  03F1                     _setup_ADC:	
  2014                           
  2015                           ;ADC1823.c: 20: ADCON1 = 0b11110000;
  2016                           
  2017                           ;incstack = 0
  2018                           ; Regs used in _setup_ADC: [wreg]
  2019  03F1  30F0               	movlw	240
  2020  03F2  0021               	movlb	1	; select bank1
  2021  03F3  009E               	movwf	30	;volatile
  2022                           
  2023                           ;ADC1823.c: 21: { ADCON0 = 0b00100100;};
  2024  03F4  3024               	movlw	36
  2025  03F5  009D               	movwf	29	;volatile
  2026  03F6  0008               	return
  2027  03F7                     __end_of_setup_ADC:	
  2028                           
  2029                           	psect	text6
  2030  0287                     __ptext6:	
  2031 ;; *************** function _mess_handler *****************
  2032 ;; Defined at:
  2033 ;;		line 11 in file "comm.c"
  2034 ;; Parameters:    Size  Location     Type
  2035 ;;		None
  2036 ;; Auto vars:     Size  Location     Type
  2037 ;;		None
  2038 ;; Return value:  Size  Location     Type
  2039 ;;                  1    wreg      void 
  2040 ;; Registers used:
  2041 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2042 ;; Tracked objects:
  2043 ;;		On entry : 0/0
  2044 ;;		On exit  : 0/0
  2045 ;;		Unchanged: 0/0
  2046 ;; Data sizes:     COMMON   BANK0   BANK1
  2047 ;;      Params:         0       0       0
  2048 ;;      Locals:         0       0       0
  2049 ;;      Temps:          0       1       0
  2050 ;;      Totals:         0       1       0
  2051 ;;Total ram usage:        1 bytes
  2052 ;; Hardware stack levels used:    1
  2053 ;; Hardware stack levels required when called:    5
  2054 ;; This function calls:
  2055 ;;		_config_ASIC
  2056 ;;		_lputs_ISR
  2057 ;;		_measure_Impedance
  2058 ;;		_measure_Impedance_SE
  2059 ;;		_measure_Impedance_no_offset
  2060 ;;		_measure_Offset
  2061 ;;		_read_ADC_channels
  2062 ;; This function is called by:
  2063 ;;		_main
  2064 ;; This function uses a non-reentrant model
  2065 ;;
  2066                           
  2067                           
  2068                           ;psect for function _mess_handler
  2069  0287                     _mess_handler:	
  2070                           
  2071                           ;comm.c: 16: switch (mess_rec[0]) {
  2072                           
  2073                           ;incstack = 0
  2074                           ; Regs used in _mess_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2075  0287  2A9C               	goto	l2339
  2076  0288                     l2323:	
  2077                           ;comm.c: 17: case 't':
  2078                           
  2079                           
  2080                           ;comm.c: 18: lputs_ISR(mess_rec,mess_rec_size);
  2081  0288  0020               	movlb	0	; select bank0
  2082  0289  0841               	movf	_mess_rec_size,w	;volatile
  2083  028A  00E6               	movwf	??_mess_handler
  2084  028B  0866               	movf	??_mess_handler,w
  2085  028C  00CC               	movwf	lputs_ISR@length
  2086  028D  3042               	movlw	(low (_mess_rec| 0))& (0+255)
  2087  028E  22B5               	fcall	_lputs_ISR
  2088                           
  2089                           ;comm.c: 19: break;
  2090  028F  0008               	return
  2091  0290                     l2325:	
  2092                           ;comm.c: 21: case 'c':
  2093                           
  2094                           
  2095                           ;comm.c: 22: config_ASIC();
  2096  0290  238D               	fcall	_config_ASIC
  2097                           
  2098                           ;comm.c: 23: break;
  2099  0291  0008               	return
  2100  0292                     l2327:	
  2101                           ;comm.c: 25: case 'm':
  2102                           
  2103                           
  2104                           ;comm.c: 26: read_ADC_channels();
  2105  0292  224E               	fcall	_read_ADC_channels
  2106                           
  2107                           ;comm.c: 27: break;
  2108  0293  0008               	return
  2109  0294                     l2329:	
  2110                           ;comm.c: 29: case 'z':
  2111                           
  2112                           
  2113                           ;comm.c: 30: measure_Impedance();
  2114  0294  2064               	fcall	_measure_Impedance
  2115                           
  2116                           ;comm.c: 31: break;
  2117  0295  0008               	return
  2118  0296                     l2331:	
  2119                           ;comm.c: 33: case 'y':
  2120                           
  2121                           
  2122                           ;comm.c: 34: measure_Impedance_no_offset();
  2123  0296  2166               	fcall	_measure_Impedance_no_offset
  2124                           
  2125                           ;comm.c: 35: break;
  2126  0297  0008               	return
  2127  0298                     l2333:	
  2128                           ;comm.c: 37: case 'o':
  2129                           
  2130                           
  2131                           ;comm.c: 38: measure_Offset();
  2132  0298  21D1               	fcall	_measure_Offset
  2133                           
  2134                           ;comm.c: 39: break;
  2135  0299  0008               	return
  2136  029A                     l2335:	
  2137                           ;comm.c: 41: case 's':
  2138                           
  2139                           
  2140                           ;comm.c: 42: measure_Impedance_SE();
  2141  029A  20FA               	fcall	_measure_Impedance_SE
  2142                           
  2143                           ;comm.c: 47: }
  2144                           
  2145                           ;comm.c: 46: break;
  2146                           
  2147                           ;comm.c: 45: default:
  2148                           
  2149                           ;comm.c: 43: break;
  2150  029B  0008               	return
  2151  029C                     l2339:	
  2152  029C  0020               	movlb	0	; select bank0
  2153  029D  0842               	movf	_mess_rec,w	;volatile
  2154                           
  2155                           ; Switch size 1, requested type "space"
  2156                           ; Number of cases is 7, Range of values is 99 to 122
  2157                           ; switch strategies available:
  2158                           ; Name         Instructions Cycles
  2159                           ; simple_byte           22    12 (average)
  2160                           ; direct_byte           57     9 (fixed)
  2161                           ; jumptable            263     9 (fixed)
  2162                           ;	Chosen strategy is simple_byte
  2163  029E  3A63               	xorlw	99	; case 99
  2164  029F  1903               	skipnz
  2165  02A0  2A90               	goto	l2325
  2166  02A1  3A0E               	xorlw	14	; case 109
  2167  02A2  1903               	skipnz
  2168  02A3  2A92               	goto	l2327
  2169  02A4  3A02               	xorlw	2	; case 111
  2170  02A5  1903               	skipnz
  2171  02A6  2A98               	goto	l2333
  2172  02A7  3A1C               	xorlw	28	; case 115
  2173  02A8  1903               	skipnz
  2174  02A9  2A9A               	goto	l2335
  2175  02AA  3A07               	xorlw	7	; case 116
  2176  02AB  1903               	skipnz
  2177  02AC  2A88               	goto	l2323
  2178  02AD  3A0D               	xorlw	13	; case 121
  2179  02AE  1903               	skipnz
  2180  02AF  2A96               	goto	l2331
  2181  02B0  3A03               	xorlw	3	; case 122
  2182  02B1  1903               	skipnz
  2183  02B2  2A94               	goto	l2329
  2184  02B3  2AB4               	goto	l332
  2185  02B4                     l332:	
  2186  02B4  0008               	return
  2187  02B5                     __end_of_mess_handler:	
  2188                           
  2189                           	psect	text7
  2190  024E                     __ptext7:	
  2191 ;; *************** function _read_ADC_channels *****************
  2192 ;; Defined at:
  2193 ;;		line 80 in file "comm.c"
  2194 ;; Parameters:    Size  Location     Type
  2195 ;;		None
  2196 ;; Auto vars:     Size  Location     Type
  2197 ;;  aux             7    7[BANK0 ] unsigned char [7]
  2198 ;;  value3          2   18[BANK0 ] unsigned short 
  2199 ;;  value2          2   16[BANK0 ] unsigned short 
  2200 ;;  value1          2   14[BANK0 ] unsigned short 
  2201 ;; Return value:  Size  Location     Type
  2202 ;;                  1    wreg      void 
  2203 ;; Registers used:
  2204 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2205 ;; Tracked objects:
  2206 ;;		On entry : 0/0
  2207 ;;		On exit  : 0/0
  2208 ;;		Unchanged: 0/0
  2209 ;; Data sizes:     COMMON   BANK0   BANK1
  2210 ;;      Params:         0       0       0
  2211 ;;      Locals:         0      13       0
  2212 ;;      Temps:          0       1       0
  2213 ;;      Totals:         0      14       0
  2214 ;;Total ram usage:       14 bytes
  2215 ;; Hardware stack levels used:    1
  2216 ;; Hardware stack levels required when called:    4
  2217 ;; This function calls:
  2218 ;;		_ADC_2
  2219 ;;		_ADC_4
  2220 ;;		_ADC_5
  2221 ;;		_lputs_ISR
  2222 ;; This function is called by:
  2223 ;;		_mess_handler
  2224 ;; This function uses a non-reentrant model
  2225 ;;
  2226                           
  2227                           
  2228                           ;psect for function _read_ADC_channels
  2229  024E                     _read_ADC_channels:	
  2230                           
  2231                           ;comm.c: 82: unsigned char aux[7];
  2232                           ;comm.c: 83: unsigned short value1,value2,value3;
  2233                           ;comm.c: 86: value1 = ADC_2();
  2234                           
  2235                           ;incstack = 0
  2236                           ; Regs used in _read_ADC_channels: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2237  024E  2351               	fcall	_ADC_2
  2238  024F  0020               	movlb	0	; select bank0
  2239  0250  084D               	movf	?_ADC_2+1,w
  2240  0251  00DB               	movwf	read_ADC_channels@value1+1
  2241  0252  084C               	movf	?_ADC_2,w
  2242  0253  00DA               	movwf	read_ADC_channels@value1
  2243                           
  2244                           ;comm.c: 88: value2 = ADC_4();
  2245  0254  232E               	fcall	_ADC_4
  2246  0255  0020               	movlb	0	; select bank0
  2247  0256  084D               	movf	?_ADC_4+1,w
  2248  0257  00DD               	movwf	read_ADC_channels@value2+1
  2249  0258  084C               	movf	?_ADC_4,w
  2250  0259  00DC               	movwf	read_ADC_channels@value2
  2251                           
  2252                           ;comm.c: 90: value3 = ADC_5();
  2253  025A  230B               	fcall	_ADC_5
  2254  025B  0020               	movlb	0	; select bank0
  2255  025C  084D               	movf	?_ADC_5+1,w
  2256  025D  00DF               	movwf	read_ADC_channels@value3+1
  2257  025E  084C               	movf	?_ADC_5,w
  2258  025F  00DE               	movwf	read_ADC_channels@value3
  2259                           
  2260                           ;comm.c: 91: { ADCON0 = 0b00100100;};
  2261  0260  3024               	movlw	36
  2262  0261  0021               	movlb	1	; select bank1
  2263  0262  009D               	movwf	29	;volatile
  2264                           
  2265                           ;comm.c: 93: aux[0] = 'm';
  2266  0263  306D               	movlw	109
  2267  0264  0020               	movlb	0	; select bank0
  2268  0265  00D2               	movwf	??_read_ADC_channels
  2269  0266  0852               	movf	??_read_ADC_channels,w
  2270  0267  00D3               	movwf	read_ADC_channels@aux
  2271                           
  2272                           ;comm.c: 94: aux[1] = (unsigned char)(value1 & 0xff);
  2273  0268  085A               	movf	read_ADC_channels@value1,w
  2274  0269  00D2               	movwf	??_read_ADC_channels
  2275  026A  0852               	movf	??_read_ADC_channels,w
  2276  026B  00D4               	movwf	read_ADC_channels@aux+1
  2277                           
  2278                           ;comm.c: 95: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  2279  026C  085B               	movf	read_ADC_channels@value1+1,w
  2280  026D  00D2               	movwf	??_read_ADC_channels
  2281  026E  0852               	movf	??_read_ADC_channels,w
  2282  026F  00D5               	movwf	read_ADC_channels@aux+2
  2283                           
  2284                           ;comm.c: 96: aux[3] = (unsigned char)(value2 & 0xff);
  2285  0270  085C               	movf	read_ADC_channels@value2,w
  2286  0271  00D2               	movwf	??_read_ADC_channels
  2287  0272  0852               	movf	??_read_ADC_channels,w
  2288  0273  00D6               	movwf	read_ADC_channels@aux+3
  2289                           
  2290                           ;comm.c: 97: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  2291  0274  085D               	movf	read_ADC_channels@value2+1,w
  2292  0275  00D2               	movwf	??_read_ADC_channels
  2293  0276  0852               	movf	??_read_ADC_channels,w
  2294  0277  00D7               	movwf	read_ADC_channels@aux+4
  2295                           
  2296                           ;comm.c: 98: aux[5] = (unsigned char)(value3 & 0xff);
  2297  0278  085E               	movf	read_ADC_channels@value3,w
  2298  0279  00D2               	movwf	??_read_ADC_channels
  2299  027A  0852               	movf	??_read_ADC_channels,w
  2300  027B  00D8               	movwf	read_ADC_channels@aux+5
  2301                           
  2302                           ;comm.c: 99: aux[6] = (unsigned char)((value3 >> 8) & 0xff);
  2303  027C  085F               	movf	read_ADC_channels@value3+1,w
  2304  027D  00D2               	movwf	??_read_ADC_channels
  2305  027E  0852               	movf	??_read_ADC_channels,w
  2306  027F  00D9               	movwf	read_ADC_channels@aux+6
  2307                           
  2308                           ;comm.c: 101: lputs_ISR(aux,7);
  2309  0280  3007               	movlw	7
  2310  0281  00D2               	movwf	??_read_ADC_channels
  2311  0282  0852               	movf	??_read_ADC_channels,w
  2312  0283  00CC               	movwf	lputs_ISR@length
  2313  0284  3053               	movlw	(low (read_ADC_channels@aux| 0))& (0+255)
  2314  0285  22B5               	fcall	_lputs_ISR
  2315  0286  0008               	return
  2316  0287                     __end_of_read_ADC_channels:	
  2317                           
  2318                           	psect	text8
  2319  01D1                     __ptext8:	
  2320 ;; *************** function _measure_Offset *****************
  2321 ;; Defined at:
  2322 ;;		line 254 in file "comm.c"
  2323 ;; Parameters:    Size  Location     Type
  2324 ;;		None
  2325 ;; Auto vars:     Size  Location     Type
  2326 ;;  aux             5    7[BANK0 ] unsigned char [5]
  2327 ;;  asic            2   16[BANK0 ] struct .
  2328 ;;  value2          2   14[BANK0 ] unsigned short 
  2329 ;;  value1          2   12[BANK0 ] unsigned short 
  2330 ;; Return value:  Size  Location     Type
  2331 ;;                  1    wreg      void 
  2332 ;; Registers used:
  2333 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2334 ;; Tracked objects:
  2335 ;;		On entry : 0/0
  2336 ;;		On exit  : 0/0
  2337 ;;		Unchanged: 0/0
  2338 ;; Data sizes:     COMMON   BANK0   BANK1
  2339 ;;      Params:         0       0       0
  2340 ;;      Locals:         0      11       0
  2341 ;;      Temps:          0       1       0
  2342 ;;      Totals:         0      12       0
  2343 ;;Total ram usage:       12 bytes
  2344 ;; Hardware stack levels used:    1
  2345 ;; Hardware stack levels required when called:    4
  2346 ;; This function calls:
  2347 ;;		_ADC_2
  2348 ;;		_ADC_4
  2349 ;;		_BIO_config
  2350 ;;		_lputs_ISR
  2351 ;; This function is called by:
  2352 ;;		_mess_handler
  2353 ;; This function uses a non-reentrant model
  2354 ;;
  2355                           
  2356                           
  2357                           ;psect for function _measure_Offset
  2358  01D1                     _measure_Offset:	
  2359                           
  2360                           ;comm.c: 256: unsigned char aux[5];
  2361                           ;comm.c: 257: unsigned short value1,value2;
  2362                           ;comm.c: 260: BIO3 asic;
  2363                           ;comm.c: 266: aux[0] = 'o';
  2364                           
  2365                           ;incstack = 0
  2366                           ; Regs used in _measure_Offset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2367  01D1  306F               	movlw	111
  2368  01D2  0020               	movlb	0	; select bank0
  2369  01D3  00D2               	movwf	??_measure_Offset
  2370  01D4  0852               	movf	??_measure_Offset,w
  2371  01D5  00D3               	movwf	measure_Offset@aux
  2372                           
  2373                           ;comm.c: 269: asic.data[0] = (unsigned short)(mess_rec[1]);
  2374  01D6  0843               	movf	_mess_rec+1,w	;volatile
  2375  01D7  00D2               	movwf	??_measure_Offset
  2376  01D8  0852               	movf	??_measure_Offset,w
  2377  01D9  00DC               	movwf	measure_Offset@asic
  2378                           
  2379                           ;comm.c: 270: asic.data[1] = (unsigned short)(mess_rec[2]);
  2380  01DA  0844               	movf	_mess_rec+2,w	;volatile
  2381  01DB  00D2               	movwf	??_measure_Offset
  2382  01DC  0852               	movf	??_measure_Offset,w
  2383  01DD  00DD               	movwf	measure_Offset@asic+1
  2384                           
  2385                           ;comm.c: 273: asic.data_bits.CE = 0;
  2386  01DE  135C               	bcf	measure_Offset@asic,6
  2387                           
  2388                           ;comm.c: 274: BIO_config(asic);
  2389  01DF  085D               	movf	measure_Offset@asic+1,w
  2390  01E0  00CD               	movwf	BIO_config@conf+1
  2391  01E1  085C               	movf	measure_Offset@asic,w
  2392  01E2  00CC               	movwf	BIO_config@conf
  2393  01E3  22E0               	fcall	_BIO_config
  2394                           
  2395                           ;comm.c: 287: _delay((unsigned long)((20)*(500000/4000.0)));
  2396  01E4  3004               	movlw	4
  2397  01E5  0020               	movlb	0	; select bank0
  2398  01E6  00D2               	movwf	??_measure_Offset
  2399  01E7  303D               	movlw	61
  2400  01E8                     u847:	
  2401  01E8  0B89               	decfsz	9,f
  2402  01E9  29E8               	goto	u847
  2403  01EA  0BD2               	decfsz	??_measure_Offset,f
  2404  01EB  29E8               	goto	u847
  2405  01EC  3200               	nop2
  2406                           
  2407                           ;comm.c: 289: value1 = ADC_2();
  2408  01ED  2351               	fcall	_ADC_2
  2409  01EE  0020               	movlb	0	; select bank0
  2410  01EF  084D               	movf	?_ADC_2+1,w
  2411  01F0  00D9               	movwf	measure_Offset@value1+1
  2412  01F1  084C               	movf	?_ADC_2,w
  2413  01F2  00D8               	movwf	measure_Offset@value1
  2414                           
  2415                           ;comm.c: 290: value2 = ADC_4();
  2416  01F3  232E               	fcall	_ADC_4
  2417  01F4  0020               	movlb	0	; select bank0
  2418  01F5  084D               	movf	?_ADC_4+1,w
  2419  01F6  00DB               	movwf	measure_Offset@value2+1
  2420  01F7  084C               	movf	?_ADC_4,w
  2421  01F8  00DA               	movwf	measure_Offset@value2
  2422                           
  2423                           ;comm.c: 292: aux[1] = (unsigned char)(value1 & 0xff);
  2424  01F9  0858               	movf	measure_Offset@value1,w
  2425  01FA  00D2               	movwf	??_measure_Offset
  2426  01FB  0852               	movf	??_measure_Offset,w
  2427  01FC  00D4               	movwf	measure_Offset@aux+1
  2428                           
  2429                           ;comm.c: 293: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  2430  01FD  0859               	movf	measure_Offset@value1+1,w
  2431  01FE  00D2               	movwf	??_measure_Offset
  2432  01FF  0852               	movf	??_measure_Offset,w
  2433  0200  00D5               	movwf	measure_Offset@aux+2
  2434                           
  2435                           ;comm.c: 294: aux[3] = (unsigned char)(value2 & 0xff);
  2436  0201  085A               	movf	measure_Offset@value2,w
  2437  0202  00D2               	movwf	??_measure_Offset
  2438  0203  0852               	movf	??_measure_Offset,w
  2439  0204  00D6               	movwf	measure_Offset@aux+3
  2440                           
  2441                           ;comm.c: 295: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  2442  0205  085B               	movf	measure_Offset@value2+1,w
  2443  0206  00D2               	movwf	??_measure_Offset
  2444  0207  0852               	movf	??_measure_Offset,w
  2445  0208  00D7               	movwf	measure_Offset@aux+4
  2446                           
  2447                           ;comm.c: 298: lputs_ISR(aux,5);
  2448  0209  3005               	movlw	5
  2449  020A  00D2               	movwf	??_measure_Offset
  2450  020B  0852               	movf	??_measure_Offset,w
  2451  020C  00CC               	movwf	lputs_ISR@length
  2452  020D  3053               	movlw	(low (measure_Offset@aux| 0))& (0+255)
  2453  020E  22B5               	fcall	_lputs_ISR
  2454  020F  0008               	return
  2455  0210                     __end_of_measure_Offset:	
  2456                           
  2457                           	psect	text9
  2458  0166                     __ptext9:	
  2459 ;; *************** function _measure_Impedance_no_offset *****************
  2460 ;; Defined at:
  2461 ;;		line 189 in file "comm.c"
  2462 ;; Parameters:    Size  Location     Type
  2463 ;;		None
  2464 ;; Auto vars:     Size  Location     Type
  2465 ;;  aux            13    7[BANK0 ] unsigned char [13]
  2466 ;;  asic            2   24[BANK0 ] struct .
  2467 ;;  value2          2   22[BANK0 ] unsigned short 
  2468 ;;  value1          2   20[BANK0 ] unsigned short 
  2469 ;;  value3          2    0        unsigned short 
  2470 ;; Return value:  Size  Location     Type
  2471 ;;                  1    wreg      void 
  2472 ;; Registers used:
  2473 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2474 ;; Tracked objects:
  2475 ;;		On entry : 0/0
  2476 ;;		On exit  : 0/0
  2477 ;;		Unchanged: 0/0
  2478 ;; Data sizes:     COMMON   BANK0   BANK1
  2479 ;;      Params:         0       0       0
  2480 ;;      Locals:         0      19       0
  2481 ;;      Temps:          0       1       0
  2482 ;;      Totals:         0      20       0
  2483 ;;Total ram usage:       20 bytes
  2484 ;; Hardware stack levels used:    1
  2485 ;; Hardware stack levels required when called:    4
  2486 ;; This function calls:
  2487 ;;		_ADC_2
  2488 ;;		_ADC_4
  2489 ;;		_BIO_config
  2490 ;;		_lputs_ISR
  2491 ;; This function is called by:
  2492 ;;		_mess_handler
  2493 ;; This function uses a non-reentrant model
  2494 ;;
  2495                           
  2496                           
  2497                           ;psect for function _measure_Impedance_no_offset
  2498  0166                     _measure_Impedance_no_offset:	
  2499                           
  2500                           ;comm.c: 191: unsigned char aux[13];
  2501                           ;comm.c: 192: unsigned short value1,value2,value3;
  2502                           ;comm.c: 195: BIO3 asic;
  2503                           ;comm.c: 200: aux[0] = 'y';
  2504                           
  2505                           ;incstack = 0
  2506                           ; Regs used in _measure_Impedance_no_offset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  2507  0166  3079               	movlw	121
  2508  0167  0020               	movlb	0	; select bank0
  2509  0168  00D2               	movwf	??_measure_Impedance_no_offset
  2510  0169  0852               	movf	??_measure_Impedance_no_offset,w
  2511  016A  00D3               	movwf	measure_Impedance_no_offset@aux
  2512                           
  2513                           ;comm.c: 203: asic.data[0] = (unsigned short)(mess_rec[1]);
  2514  016B  0843               	movf	_mess_rec+1,w	;volatile
  2515  016C  00D2               	movwf	??_measure_Impedance_no_offset
  2516  016D  0852               	movf	??_measure_Impedance_no_offset,w
  2517  016E  00E4               	movwf	measure_Impedance_no_offset@asic
  2518                           
  2519                           ;comm.c: 204: asic.data[1] = (unsigned short)(mess_rec[2]);
  2520  016F  0844               	movf	_mess_rec+2,w	;volatile
  2521  0170  00D2               	movwf	??_measure_Impedance_no_offset
  2522  0171  0852               	movf	??_measure_Impedance_no_offset,w
  2523  0172  00E5               	movwf	measure_Impedance_no_offset@asic+1
  2524                           
  2525                           ;comm.c: 214: asic.data_bits.CE = 1;
  2526  0173  1764               	bsf	measure_Impedance_no_offset@asic,6
  2527                           
  2528                           ;comm.c: 215: asic.data_bits.IQ = 0;
  2529  0174  11E5               	bcf	measure_Impedance_no_offset@asic+1,3
  2530                           
  2531                           ;comm.c: 218: BIO_config(asic);
  2532  0175  0865               	movf	measure_Impedance_no_offset@asic+1,w
  2533  0176  00CD               	movwf	BIO_config@conf+1
  2534  0177  0864               	movf	measure_Impedance_no_offset@asic,w
  2535  0178  00CC               	movwf	BIO_config@conf
  2536  0179  22E0               	fcall	_BIO_config
  2537                           
  2538                           ;comm.c: 222: _delay((unsigned long)((20)*(500000/4000.0)));
  2539  017A  3004               	movlw	4
  2540  017B  0020               	movlb	0	; select bank0
  2541  017C  00D2               	movwf	??_measure_Impedance_no_offset
  2542  017D  303D               	movlw	61
  2543  017E                     u857:	
  2544  017E  0B89               	decfsz	9,f
  2545  017F  297E               	goto	u857
  2546  0180  0BD2               	decfsz	??_measure_Impedance_no_offset,f
  2547  0181  297E               	goto	u857
  2548  0182  3200               	nop2
  2549                           
  2550                           ;comm.c: 224: value1 = ADC_2();
  2551  0183  2351               	fcall	_ADC_2
  2552  0184  0020               	movlb	0	; select bank0
  2553  0185  084D               	movf	?_ADC_2+1,w
  2554  0186  00E1               	movwf	measure_Impedance_no_offset@value1+1
  2555  0187  084C               	movf	?_ADC_2,w
  2556  0188  00E0               	movwf	measure_Impedance_no_offset@value1
  2557                           
  2558                           ;comm.c: 225: value2 = ADC_4();
  2559  0189  232E               	fcall	_ADC_4
  2560  018A  0020               	movlb	0	; select bank0
  2561  018B  084D               	movf	?_ADC_4+1,w
  2562  018C  00E3               	movwf	measure_Impedance_no_offset@value2+1
  2563  018D  084C               	movf	?_ADC_4,w
  2564  018E  00E2               	movwf	measure_Impedance_no_offset@value2
  2565                           
  2566                           ;comm.c: 227: aux[1] = (unsigned char)(value1 & 0xff);
  2567  018F  0860               	movf	measure_Impedance_no_offset@value1,w
  2568  0190  00D2               	movwf	??_measure_Impedance_no_offset
  2569  0191  0852               	movf	??_measure_Impedance_no_offset,w
  2570  0192  00D4               	movwf	measure_Impedance_no_offset@aux+1
  2571                           
  2572                           ;comm.c: 228: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  2573  0193  0861               	movf	measure_Impedance_no_offset@value1+1,w
  2574  0194  00D2               	movwf	??_measure_Impedance_no_offset
  2575  0195  0852               	movf	??_measure_Impedance_no_offset,w
  2576  0196  00D5               	movwf	measure_Impedance_no_offset@aux+2
  2577                           
  2578                           ;comm.c: 229: aux[3] = (unsigned char)(value2 & 0xff);
  2579  0197  0862               	movf	measure_Impedance_no_offset@value2,w
  2580  0198  00D2               	movwf	??_measure_Impedance_no_offset
  2581  0199  0852               	movf	??_measure_Impedance_no_offset,w
  2582  019A  00D6               	movwf	measure_Impedance_no_offset@aux+3
  2583                           
  2584                           ;comm.c: 230: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  2585  019B  0863               	movf	measure_Impedance_no_offset@value2+1,w
  2586  019C  00D2               	movwf	??_measure_Impedance_no_offset
  2587  019D  0852               	movf	??_measure_Impedance_no_offset,w
  2588  019E  00D7               	movwf	measure_Impedance_no_offset@aux+4
  2589                           
  2590                           ;comm.c: 233: asic.data_bits.IQ = 1;
  2591  019F  15E5               	bsf	measure_Impedance_no_offset@asic+1,3
  2592                           
  2593                           ;comm.c: 236: BIO_config(asic);
  2594  01A0  0865               	movf	measure_Impedance_no_offset@asic+1,w
  2595  01A1  00CD               	movwf	BIO_config@conf+1
  2596  01A2  0864               	movf	measure_Impedance_no_offset@asic,w
  2597  01A3  00CC               	movwf	BIO_config@conf
  2598  01A4  22E0               	fcall	_BIO_config
  2599                           
  2600                           ;comm.c: 240: _delay((unsigned long)((20)*(500000/4000.0)));
  2601  01A5  3004               	movlw	4
  2602  01A6  0020               	movlb	0	; select bank0
  2603  01A7  00D2               	movwf	??_measure_Impedance_no_offset
  2604  01A8  303D               	movlw	61
  2605  01A9                     u867:	
  2606  01A9  0B89               	decfsz	9,f
  2607  01AA  29A9               	goto	u867
  2608  01AB  0BD2               	decfsz	??_measure_Impedance_no_offset,f
  2609  01AC  29A9               	goto	u867
  2610  01AD  3200               	nop2
  2611                           
  2612                           ;comm.c: 242: value1 = ADC_2();
  2613  01AE  2351               	fcall	_ADC_2
  2614  01AF  0020               	movlb	0	; select bank0
  2615  01B0  084D               	movf	?_ADC_2+1,w
  2616  01B1  00E1               	movwf	measure_Impedance_no_offset@value1+1
  2617  01B2  084C               	movf	?_ADC_2,w
  2618  01B3  00E0               	movwf	measure_Impedance_no_offset@value1
  2619                           
  2620                           ;comm.c: 243: value2 = ADC_4();
  2621  01B4  232E               	fcall	_ADC_4
  2622  01B5  0020               	movlb	0	; select bank0
  2623  01B6  084D               	movf	?_ADC_4+1,w
  2624  01B7  00E3               	movwf	measure_Impedance_no_offset@value2+1
  2625  01B8  084C               	movf	?_ADC_4,w
  2626  01B9  00E2               	movwf	measure_Impedance_no_offset@value2
  2627                           
  2628                           ;comm.c: 245: aux[5] = (unsigned char)(value1 & 0xff);
  2629  01BA  0860               	movf	measure_Impedance_no_offset@value1,w
  2630  01BB  00D2               	movwf	??_measure_Impedance_no_offset
  2631  01BC  0852               	movf	??_measure_Impedance_no_offset,w
  2632  01BD  00D8               	movwf	measure_Impedance_no_offset@aux+5
  2633                           
  2634                           ;comm.c: 246: aux[6] = (unsigned char)((value1 >> 8) & 0xff);
  2635  01BE  0861               	movf	measure_Impedance_no_offset@value1+1,w
  2636  01BF  00D2               	movwf	??_measure_Impedance_no_offset
  2637  01C0  0852               	movf	??_measure_Impedance_no_offset,w
  2638  01C1  00D9               	movwf	measure_Impedance_no_offset@aux+6
  2639                           
  2640                           ;comm.c: 247: aux[7] = (unsigned char)(value2 & 0xff);
  2641  01C2  0862               	movf	measure_Impedance_no_offset@value2,w
  2642  01C3  00D2               	movwf	??_measure_Impedance_no_offset
  2643  01C4  0852               	movf	??_measure_Impedance_no_offset,w
  2644  01C5  00DA               	movwf	measure_Impedance_no_offset@aux+7
  2645                           
  2646                           ;comm.c: 248: aux[8] = (unsigned char)((value2 >> 8) & 0xff);
  2647  01C6  0863               	movf	measure_Impedance_no_offset@value2+1,w
  2648  01C7  00D2               	movwf	??_measure_Impedance_no_offset
  2649  01C8  0852               	movf	??_measure_Impedance_no_offset,w
  2650  01C9  00DB               	movwf	measure_Impedance_no_offset@aux+8
  2651                           
  2652                           ;comm.c: 251: lputs_ISR(aux,9);
  2653  01CA  3009               	movlw	9
  2654  01CB  00D2               	movwf	??_measure_Impedance_no_offset
  2655  01CC  0852               	movf	??_measure_Impedance_no_offset,w
  2656  01CD  00CC               	movwf	lputs_ISR@length
  2657  01CE  3053               	movlw	(low (measure_Impedance_no_offset@aux| 0))& (0+255)
  2658  01CF  22B5               	fcall	_lputs_ISR
  2659  01D0  0008               	return
  2660  01D1                     __end_of_measure_Impedance_no_offset:	
  2661                           
  2662                           	psect	text10
  2663  00FA                     __ptext10:	
  2664 ;; *************** function _measure_Impedance_SE *****************
  2665 ;; Defined at:
  2666 ;;		line 303 in file "comm.c"
  2667 ;; Parameters:    Size  Location     Type
  2668 ;;		None
  2669 ;; Auto vars:     Size  Location     Type
  2670 ;;  aux            13    7[BANK0 ] unsigned char [13]
  2671 ;;  asic            2   22[BANK0 ] struct .
  2672 ;;  value1          2   20[BANK0 ] unsigned short 
  2673 ;;  value3          2    0        unsigned short 
  2674 ;;  value2          2    0        unsigned short 
  2675 ;; Return value:  Size  Location     Type
  2676 ;;                  1    wreg      void 
  2677 ;; Registers used:
  2678 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2679 ;; Tracked objects:
  2680 ;;		On entry : 0/0
  2681 ;;		On exit  : 0/0
  2682 ;;		Unchanged: 0/0
  2683 ;; Data sizes:     COMMON   BANK0   BANK1
  2684 ;;      Params:         0       0       0
  2685 ;;      Locals:         0      17       0
  2686 ;;      Temps:          0       1       0
  2687 ;;      Totals:         0      18       0
  2688 ;;Total ram usage:       18 bytes
  2689 ;; Hardware stack levels used:    1
  2690 ;; Hardware stack levels required when called:    4
  2691 ;; This function calls:
  2692 ;;		_ADC_5
  2693 ;;		_BIO_config
  2694 ;;		_lputs_ISR
  2695 ;; This function is called by:
  2696 ;;		_mess_handler
  2697 ;; This function uses a non-reentrant model
  2698 ;;
  2699                           
  2700                           
  2701                           ;psect for function _measure_Impedance_SE
  2702  00FA                     _measure_Impedance_SE:	
  2703                           
  2704                           ;comm.c: 305: unsigned char aux[13];
  2705                           ;comm.c: 306: unsigned short value1,value2,value3;
  2706                           ;comm.c: 309: BIO3 asic;
  2707                           ;comm.c: 314: aux[0] = 's';
  2708                           
  2709                           ;incstack = 0
  2710                           ; Regs used in _measure_Impedance_SE: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2711  00FA  3073               	movlw	115
  2712  00FB  0020               	movlb	0	; select bank0
  2713  00FC  00D2               	movwf	??_measure_Impedance_SE
  2714  00FD  0852               	movf	??_measure_Impedance_SE,w
  2715  00FE  00D3               	movwf	measure_Impedance_SE@aux
  2716                           
  2717                           ;comm.c: 317: asic.data[0] = (unsigned short)(mess_rec[1]);
  2718  00FF  0843               	movf	_mess_rec+1,w	;volatile
  2719  0100  00D2               	movwf	??_measure_Impedance_SE
  2720  0101  0852               	movf	??_measure_Impedance_SE,w
  2721  0102  00E2               	movwf	measure_Impedance_SE@asic
  2722                           
  2723                           ;comm.c: 318: asic.data[1] = (unsigned short)(mess_rec[2]);
  2724  0103  0844               	movf	_mess_rec+2,w	;volatile
  2725  0104  00D2               	movwf	??_measure_Impedance_SE
  2726  0105  0852               	movf	??_measure_Impedance_SE,w
  2727  0106  00E3               	movwf	measure_Impedance_SE@asic+1
  2728                           
  2729                           ;comm.c: 321: asic.data_bits.CE = 0;
  2730  0107  1362               	bcf	measure_Impedance_SE@asic,6
  2731                           
  2732                           ;comm.c: 322: BIO_config(asic);
  2733  0108  0863               	movf	measure_Impedance_SE@asic+1,w
  2734  0109  00CD               	movwf	BIO_config@conf+1
  2735  010A  0862               	movf	measure_Impedance_SE@asic,w
  2736  010B  00CC               	movwf	BIO_config@conf
  2737  010C  22E0               	fcall	_BIO_config
  2738                           
  2739                           ;comm.c: 335: _delay((unsigned long)((20)*(500000/4000.0)));
  2740  010D  3004               	movlw	4
  2741  010E  0020               	movlb	0	; select bank0
  2742  010F  00D2               	movwf	??_measure_Impedance_SE
  2743  0110  303D               	movlw	61
  2744  0111                     u877:	
  2745  0111  0B89               	decfsz	9,f
  2746  0112  2911               	goto	u877
  2747  0113  0BD2               	decfsz	??_measure_Impedance_SE,f
  2748  0114  2911               	goto	u877
  2749  0115  3200               	nop2
  2750                           
  2751                           ;comm.c: 337: value1 = ADC_5();
  2752  0116  230B               	fcall	_ADC_5
  2753  0117  0020               	movlb	0	; select bank0
  2754  0118  084D               	movf	?_ADC_5+1,w
  2755  0119  00E1               	movwf	measure_Impedance_SE@value1+1
  2756  011A  084C               	movf	?_ADC_5,w
  2757  011B  00E0               	movwf	measure_Impedance_SE@value1
  2758                           
  2759                           ;comm.c: 339: aux[1] = (unsigned char)(value1 & 0xff);
  2760  011C  0860               	movf	measure_Impedance_SE@value1,w
  2761  011D  00D2               	movwf	??_measure_Impedance_SE
  2762  011E  0852               	movf	??_measure_Impedance_SE,w
  2763  011F  00D4               	movwf	measure_Impedance_SE@aux+1
  2764                           
  2765                           ;comm.c: 340: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  2766  0120  0861               	movf	measure_Impedance_SE@value1+1,w
  2767  0121  00D2               	movwf	??_measure_Impedance_SE
  2768  0122  0852               	movf	??_measure_Impedance_SE,w
  2769  0123  00D5               	movwf	measure_Impedance_SE@aux+2
  2770                           
  2771                           ;comm.c: 343: asic.data_bits.CE = 1;
  2772  0124  1762               	bsf	measure_Impedance_SE@asic,6
  2773                           
  2774                           ;comm.c: 344: asic.data_bits.IQ = 0;
  2775  0125  11E3               	bcf	measure_Impedance_SE@asic+1,3
  2776                           
  2777                           ;comm.c: 347: BIO_config(asic);
  2778  0126  0863               	movf	measure_Impedance_SE@asic+1,w
  2779  0127  00CD               	movwf	BIO_config@conf+1
  2780  0128  0862               	movf	measure_Impedance_SE@asic,w
  2781  0129  00CC               	movwf	BIO_config@conf
  2782  012A  22E0               	fcall	_BIO_config
  2783                           
  2784                           ;comm.c: 351: _delay((unsigned long)((20)*(500000/4000.0)));
  2785  012B  3004               	movlw	4
  2786  012C  0020               	movlb	0	; select bank0
  2787  012D  00D2               	movwf	??_measure_Impedance_SE
  2788  012E  303D               	movlw	61
  2789  012F                     u887:	
  2790  012F  0B89               	decfsz	9,f
  2791  0130  292F               	goto	u887
  2792  0131  0BD2               	decfsz	??_measure_Impedance_SE,f
  2793  0132  292F               	goto	u887
  2794  0133  3200               	nop2
  2795                           
  2796                           ;comm.c: 353: value1 = ADC_5();
  2797  0134  230B               	fcall	_ADC_5
  2798  0135  0020               	movlb	0	; select bank0
  2799  0136  084D               	movf	?_ADC_5+1,w
  2800  0137  00E1               	movwf	measure_Impedance_SE@value1+1
  2801  0138  084C               	movf	?_ADC_5,w
  2802  0139  00E0               	movwf	measure_Impedance_SE@value1
  2803                           
  2804                           ;comm.c: 355: aux[3] = (unsigned char)(value1 & 0xff);
  2805  013A  0860               	movf	measure_Impedance_SE@value1,w
  2806  013B  00D2               	movwf	??_measure_Impedance_SE
  2807  013C  0852               	movf	??_measure_Impedance_SE,w
  2808  013D  00D6               	movwf	measure_Impedance_SE@aux+3
  2809                           
  2810                           ;comm.c: 356: aux[4] = (unsigned char)((value1 >> 8) & 0xff);
  2811  013E  0861               	movf	measure_Impedance_SE@value1+1,w
  2812  013F  00D2               	movwf	??_measure_Impedance_SE
  2813  0140  0852               	movf	??_measure_Impedance_SE,w
  2814  0141  00D7               	movwf	measure_Impedance_SE@aux+4
  2815                           
  2816                           ;comm.c: 359: asic.data_bits.IQ = 1;
  2817  0142  15E3               	bsf	measure_Impedance_SE@asic+1,3
  2818                           
  2819                           ;comm.c: 362: BIO_config(asic);
  2820  0143  0863               	movf	measure_Impedance_SE@asic+1,w
  2821  0144  00CD               	movwf	BIO_config@conf+1
  2822  0145  0862               	movf	measure_Impedance_SE@asic,w
  2823  0146  00CC               	movwf	BIO_config@conf
  2824  0147  22E0               	fcall	_BIO_config
  2825                           
  2826                           ;comm.c: 366: _delay((unsigned long)((20)*(500000/4000.0)));
  2827  0148  3004               	movlw	4
  2828  0149  0020               	movlb	0	; select bank0
  2829  014A  00D2               	movwf	??_measure_Impedance_SE
  2830  014B  303D               	movlw	61
  2831  014C                     u897:	
  2832  014C  0B89               	decfsz	9,f
  2833  014D  294C               	goto	u897
  2834  014E  0BD2               	decfsz	??_measure_Impedance_SE,f
  2835  014F  294C               	goto	u897
  2836  0150  3200               	nop2
  2837                           
  2838                           ;comm.c: 368: value1 = ADC_5();
  2839  0151  230B               	fcall	_ADC_5
  2840  0152  0020               	movlb	0	; select bank0
  2841  0153  084D               	movf	?_ADC_5+1,w
  2842  0154  00E1               	movwf	measure_Impedance_SE@value1+1
  2843  0155  084C               	movf	?_ADC_5,w
  2844  0156  00E0               	movwf	measure_Impedance_SE@value1
  2845                           
  2846                           ;comm.c: 370: aux[5] = (unsigned char)(value1 & 0xff);
  2847  0157  0860               	movf	measure_Impedance_SE@value1,w
  2848  0158  00D2               	movwf	??_measure_Impedance_SE
  2849  0159  0852               	movf	??_measure_Impedance_SE,w
  2850  015A  00D8               	movwf	measure_Impedance_SE@aux+5
  2851                           
  2852                           ;comm.c: 371: aux[6] = (unsigned char)((value1 >> 8) & 0xff);
  2853  015B  0861               	movf	measure_Impedance_SE@value1+1,w
  2854  015C  00D2               	movwf	??_measure_Impedance_SE
  2855  015D  0852               	movf	??_measure_Impedance_SE,w
  2856  015E  00D9               	movwf	measure_Impedance_SE@aux+6
  2857                           
  2858                           ;comm.c: 374: lputs_ISR(aux,7);
  2859  015F  3007               	movlw	7
  2860  0160  00D2               	movwf	??_measure_Impedance_SE
  2861  0161  0852               	movf	??_measure_Impedance_SE,w
  2862  0162  00CC               	movwf	lputs_ISR@length
  2863  0163  3053               	movlw	(low (measure_Impedance_SE@aux| 0))& (0+255)
  2864  0164  22B5               	fcall	_lputs_ISR
  2865  0165  0008               	return
  2866  0166                     __end_of_measure_Impedance_SE:	
  2867                           
  2868                           	psect	text11
  2869  030B                     __ptext11:	
  2870 ;; *************** function _ADC_5 *****************
  2871 ;; Defined at:
  2872 ;;		line 48 in file "ADC1823.c"
  2873 ;; Parameters:    Size  Location     Type
  2874 ;;		None
  2875 ;; Auto vars:     Size  Location     Type
  2876 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  2877 ;; Return value:  Size  Location     Type
  2878 ;;                  2    0[BANK0 ] unsigned short 
  2879 ;; Registers used:
  2880 ;;		wreg
  2881 ;; Tracked objects:
  2882 ;;		On entry : 0/0
  2883 ;;		On exit  : 0/0
  2884 ;;		Unchanged: 0/0
  2885 ;; Data sizes:     COMMON   BANK0   BANK1
  2886 ;;      Params:         0       2       0
  2887 ;;      Locals:         0       2       0
  2888 ;;      Temps:          0       2       0
  2889 ;;      Totals:         0       6       0
  2890 ;;Total ram usage:        6 bytes
  2891 ;; Hardware stack levels used:    1
  2892 ;; Hardware stack levels required when called:    2
  2893 ;; This function calls:
  2894 ;;		Nothing
  2895 ;; This function is called by:
  2896 ;;		_read_ADC_channels
  2897 ;;		_measure_Impedance_SE
  2898 ;; This function uses a non-reentrant model
  2899 ;;
  2900                           
  2901                           
  2902                           ;psect for function _ADC_5
  2903  030B                     _ADC_5:	
  2904                           
  2905                           ;ADC1823.c: 50: unsigned short ADC_value;
  2906                           ;ADC1823.c: 52: { ADCON0 = 0b00010101;};
  2907                           
  2908                           ;incstack = 0
  2909                           ; Regs used in _ADC_5: [wreg]
  2910  030B  3015               	movlw	21
  2911  030C  0021               	movlb	1	; select bank1
  2912  030D  009D               	movwf	29	;volatile
  2913                           
  2914                           ;ADC1823.c: 53: __nop();
  2915  030E  0000               	nop
  2916                           
  2917                           ;ADC1823.c: 54: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  2918  030F  0021               	movlb	1	; select bank1
  2919  0310  149D               	bsf	29,1	;volatile
  2920  0311                     l380:	
  2921  0311  189D               	btfsc	29,1	;volatile
  2922  0312  2B11               	goto	l380
  2923  0313  081C               	movf	28,w	;volatile
  2924  0314  0020               	movlb	0	; select bank0
  2925  0315  00CE               	movwf	??_ADC_5
  2926  0316  01CF               	clrf	??_ADC_5+1
  2927  0317  084E               	movf	??_ADC_5,w
  2928  0318  00D0               	movwf	ADC_5@ADC_value
  2929  0319  084F               	movf	??_ADC_5+1,w
  2930  031A  00D1               	movwf	ADC_5@ADC_value+1
  2931  031B  3008               	movlw	8
  2932  031C                     u785:	
  2933  031C  35D0               	lslf	ADC_5@ADC_value,f
  2934  031D  0DD1               	rlf	ADC_5@ADC_value+1,f
  2935  031E  0B89               	decfsz	9,f
  2936  031F  2B1C               	goto	u785
  2937  0320  0021               	movlb	1	; select bank1
  2938  0321  081B               	movf	27,w	;volatile
  2939  0322  0020               	movlb	0	; select bank0
  2940  0323  00CE               	movwf	??_ADC_5
  2941  0324  01CF               	clrf	??_ADC_5+1
  2942  0325  084E               	movf	??_ADC_5,w
  2943  0326  04D0               	iorwf	ADC_5@ADC_value,f
  2944  0327  084F               	movf	??_ADC_5+1,w
  2945  0328  04D1               	iorwf	ADC_5@ADC_value+1,f
  2946                           
  2947                           ;ADC1823.c: 55: return ADC_value;
  2948  0329  0851               	movf	ADC_5@ADC_value+1,w
  2949  032A  00CD               	movwf	?_ADC_5+1
  2950  032B  0850               	movf	ADC_5@ADC_value,w
  2951  032C  00CC               	movwf	?_ADC_5
  2952  032D  0008               	return
  2953  032E                     __end_of_ADC_5:	
  2954                           
  2955                           	psect	text12
  2956  0064                     __ptext12:	
  2957 ;; *************** function _measure_Impedance *****************
  2958 ;; Defined at:
  2959 ;;		line 104 in file "comm.c"
  2960 ;; Parameters:    Size  Location     Type
  2961 ;;		None
  2962 ;; Auto vars:     Size  Location     Type
  2963 ;;  aux            13    7[BANK0 ] unsigned char [13]
  2964 ;;  asic            2   24[BANK0 ] struct .
  2965 ;;  value2          2   22[BANK0 ] unsigned short 
  2966 ;;  value1          2   20[BANK0 ] unsigned short 
  2967 ;;  value3          2    0        unsigned short 
  2968 ;; Return value:  Size  Location     Type
  2969 ;;                  1    wreg      void 
  2970 ;; Registers used:
  2971 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2972 ;; Tracked objects:
  2973 ;;		On entry : 0/0
  2974 ;;		On exit  : 0/0
  2975 ;;		Unchanged: 0/0
  2976 ;; Data sizes:     COMMON   BANK0   BANK1
  2977 ;;      Params:         0       0       0
  2978 ;;      Locals:         0      19       0
  2979 ;;      Temps:          0       1       0
  2980 ;;      Totals:         0      20       0
  2981 ;;Total ram usage:       20 bytes
  2982 ;; Hardware stack levels used:    1
  2983 ;; Hardware stack levels required when called:    4
  2984 ;; This function calls:
  2985 ;;		_ADC_2
  2986 ;;		_ADC_4
  2987 ;;		_BIO_config
  2988 ;;		_lputs_ISR
  2989 ;; This function is called by:
  2990 ;;		_mess_handler
  2991 ;; This function uses a non-reentrant model
  2992 ;;
  2993                           
  2994                           
  2995                           ;psect for function _measure_Impedance
  2996  0064                     _measure_Impedance:	
  2997                           
  2998                           ;comm.c: 106: unsigned char aux[13];
  2999                           ;comm.c: 107: unsigned short value1,value2,value3;
  3000                           ;comm.c: 110: BIO3 asic;
  3001                           ;comm.c: 116: aux[0] = 'z';
  3002                           
  3003                           ;incstack = 0
  3004                           ; Regs used in _measure_Impedance: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3005  0064  307A               	movlw	122
  3006  0065  0020               	movlb	0	; select bank0
  3007  0066  00D2               	movwf	??_measure_Impedance
  3008  0067  0852               	movf	??_measure_Impedance,w
  3009  0068  00D3               	movwf	measure_Impedance@aux
  3010                           
  3011                           ;comm.c: 120: asic.data[0] = (unsigned short)(mess_rec[1]);
  3012  0069  0843               	movf	_mess_rec+1,w	;volatile
  3013  006A  00D2               	movwf	??_measure_Impedance
  3014  006B  0852               	movf	??_measure_Impedance,w
  3015  006C  00E4               	movwf	measure_Impedance@asic
  3016                           
  3017                           ;comm.c: 121: asic.data[1] = (unsigned short)(mess_rec[2]);
  3018  006D  0844               	movf	_mess_rec+2,w	;volatile
  3019  006E  00D2               	movwf	??_measure_Impedance
  3020  006F  0852               	movf	??_measure_Impedance,w
  3021  0070  00E5               	movwf	measure_Impedance@asic+1
  3022                           
  3023                           ;comm.c: 124: asic.data_bits.CE = 0;
  3024  0071  1364               	bcf	measure_Impedance@asic,6
  3025                           
  3026                           ;comm.c: 125: BIO_config(asic);
  3027  0072  0865               	movf	measure_Impedance@asic+1,w
  3028  0073  00CD               	movwf	BIO_config@conf+1
  3029  0074  0864               	movf	measure_Impedance@asic,w
  3030  0075  00CC               	movwf	BIO_config@conf
  3031  0076  22E0               	fcall	_BIO_config
  3032                           
  3033                           ;comm.c: 138: _delay((unsigned long)((20)*(500000/4000.0)));
  3034  0077  3004               	movlw	4
  3035  0078  0020               	movlb	0	; select bank0
  3036  0079  00D2               	movwf	??_measure_Impedance
  3037  007A  303D               	movlw	61
  3038  007B                     u907:	
  3039  007B  0B89               	decfsz	9,f
  3040  007C  287B               	goto	u907
  3041  007D  0BD2               	decfsz	??_measure_Impedance,f
  3042  007E  287B               	goto	u907
  3043  007F  3200               	nop2
  3044                           
  3045                           ;comm.c: 140: value1 = ADC_2();
  3046  0080  2351               	fcall	_ADC_2
  3047  0081  0020               	movlb	0	; select bank0
  3048  0082  084D               	movf	?_ADC_2+1,w
  3049  0083  00E1               	movwf	measure_Impedance@value1+1
  3050  0084  084C               	movf	?_ADC_2,w
  3051  0085  00E0               	movwf	measure_Impedance@value1
  3052                           
  3053                           ;comm.c: 141: value2 = ADC_4();
  3054  0086  232E               	fcall	_ADC_4
  3055  0087  0020               	movlb	0	; select bank0
  3056  0088  084D               	movf	?_ADC_4+1,w
  3057  0089  00E3               	movwf	measure_Impedance@value2+1
  3058  008A  084C               	movf	?_ADC_4,w
  3059  008B  00E2               	movwf	measure_Impedance@value2
  3060                           
  3061                           ;comm.c: 143: aux[1] = (unsigned char)(value1 & 0xff);
  3062  008C  0860               	movf	measure_Impedance@value1,w
  3063  008D  00D2               	movwf	??_measure_Impedance
  3064  008E  0852               	movf	??_measure_Impedance,w
  3065  008F  00D4               	movwf	measure_Impedance@aux+1
  3066                           
  3067                           ;comm.c: 144: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  3068  0090  0861               	movf	measure_Impedance@value1+1,w
  3069  0091  00D2               	movwf	??_measure_Impedance
  3070  0092  0852               	movf	??_measure_Impedance,w
  3071  0093  00D5               	movwf	measure_Impedance@aux+2
  3072                           
  3073                           ;comm.c: 145: aux[3] = (unsigned char)(value2 & 0xff);
  3074  0094  0862               	movf	measure_Impedance@value2,w
  3075  0095  00D2               	movwf	??_measure_Impedance
  3076  0096  0852               	movf	??_measure_Impedance,w
  3077  0097  00D6               	movwf	measure_Impedance@aux+3
  3078                           
  3079                           ;comm.c: 146: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  3080  0098  0863               	movf	measure_Impedance@value2+1,w
  3081  0099  00D2               	movwf	??_measure_Impedance
  3082  009A  0852               	movf	??_measure_Impedance,w
  3083  009B  00D7               	movwf	measure_Impedance@aux+4
  3084                           
  3085                           ;comm.c: 149: asic.data_bits.CE = 1;
  3086  009C  1764               	bsf	measure_Impedance@asic,6
  3087                           
  3088                           ;comm.c: 150: asic.data_bits.IQ = 0;
  3089  009D  11E5               	bcf	measure_Impedance@asic+1,3
  3090                           
  3091                           ;comm.c: 153: BIO_config(asic);
  3092  009E  0865               	movf	measure_Impedance@asic+1,w
  3093  009F  00CD               	movwf	BIO_config@conf+1
  3094  00A0  0864               	movf	measure_Impedance@asic,w
  3095  00A1  00CC               	movwf	BIO_config@conf
  3096  00A2  22E0               	fcall	_BIO_config
  3097                           
  3098                           ;comm.c: 157: _delay((unsigned long)((20)*(500000/4000.0)));
  3099  00A3  3004               	movlw	4
  3100  00A4  0020               	movlb	0	; select bank0
  3101  00A5  00D2               	movwf	??_measure_Impedance
  3102  00A6  303D               	movlw	61
  3103  00A7                     u917:	
  3104  00A7  0B89               	decfsz	9,f
  3105  00A8  28A7               	goto	u917
  3106  00A9  0BD2               	decfsz	??_measure_Impedance,f
  3107  00AA  28A7               	goto	u917
  3108  00AB  3200               	nop2
  3109                           
  3110                           ;comm.c: 159: value1 = ADC_2();
  3111  00AC  2351               	fcall	_ADC_2
  3112  00AD  0020               	movlb	0	; select bank0
  3113  00AE  084D               	movf	?_ADC_2+1,w
  3114  00AF  00E1               	movwf	measure_Impedance@value1+1
  3115  00B0  084C               	movf	?_ADC_2,w
  3116  00B1  00E0               	movwf	measure_Impedance@value1
  3117                           
  3118                           ;comm.c: 160: value2 = ADC_4();
  3119  00B2  232E               	fcall	_ADC_4
  3120  00B3  0020               	movlb	0	; select bank0
  3121  00B4  084D               	movf	?_ADC_4+1,w
  3122  00B5  00E3               	movwf	measure_Impedance@value2+1
  3123  00B6  084C               	movf	?_ADC_4,w
  3124  00B7  00E2               	movwf	measure_Impedance@value2
  3125                           
  3126                           ;comm.c: 162: aux[5] = (unsigned char)(value1 & 0xff);
  3127  00B8  0860               	movf	measure_Impedance@value1,w
  3128  00B9  00D2               	movwf	??_measure_Impedance
  3129  00BA  0852               	movf	??_measure_Impedance,w
  3130  00BB  00D8               	movwf	measure_Impedance@aux+5
  3131                           
  3132                           ;comm.c: 163: aux[6] = (unsigned char)((value1 >> 8) & 0xff);
  3133  00BC  0861               	movf	measure_Impedance@value1+1,w
  3134  00BD  00D2               	movwf	??_measure_Impedance
  3135  00BE  0852               	movf	??_measure_Impedance,w
  3136  00BF  00D9               	movwf	measure_Impedance@aux+6
  3137                           
  3138                           ;comm.c: 164: aux[7] = (unsigned char)(value2 & 0xff);
  3139  00C0  0862               	movf	measure_Impedance@value2,w
  3140  00C1  00D2               	movwf	??_measure_Impedance
  3141  00C2  0852               	movf	??_measure_Impedance,w
  3142  00C3  00DA               	movwf	measure_Impedance@aux+7
  3143                           
  3144                           ;comm.c: 165: aux[8] = (unsigned char)((value2 >> 8) & 0xff);
  3145  00C4  0863               	movf	measure_Impedance@value2+1,w
  3146  00C5  00D2               	movwf	??_measure_Impedance
  3147  00C6  0852               	movf	??_measure_Impedance,w
  3148  00C7  00DB               	movwf	measure_Impedance@aux+8
  3149                           
  3150                           ;comm.c: 168: asic.data_bits.IQ = 1;
  3151  00C8  15E5               	bsf	measure_Impedance@asic+1,3
  3152                           
  3153                           ;comm.c: 171: BIO_config(asic);
  3154  00C9  0865               	movf	measure_Impedance@asic+1,w
  3155  00CA  00CD               	movwf	BIO_config@conf+1
  3156  00CB  0864               	movf	measure_Impedance@asic,w
  3157  00CC  00CC               	movwf	BIO_config@conf
  3158  00CD  22E0               	fcall	_BIO_config
  3159                           
  3160                           ;comm.c: 175: _delay((unsigned long)((20)*(500000/4000.0)));
  3161  00CE  3004               	movlw	4
  3162  00CF  0020               	movlb	0	; select bank0
  3163  00D0  00D2               	movwf	??_measure_Impedance
  3164  00D1  303D               	movlw	61
  3165  00D2                     u927:	
  3166  00D2  0B89               	decfsz	9,f
  3167  00D3  28D2               	goto	u927
  3168  00D4  0BD2               	decfsz	??_measure_Impedance,f
  3169  00D5  28D2               	goto	u927
  3170  00D6  3200               	nop2
  3171                           
  3172                           ;comm.c: 177: value1 = ADC_2();
  3173  00D7  2351               	fcall	_ADC_2
  3174  00D8  0020               	movlb	0	; select bank0
  3175  00D9  084D               	movf	?_ADC_2+1,w
  3176  00DA  00E1               	movwf	measure_Impedance@value1+1
  3177  00DB  084C               	movf	?_ADC_2,w
  3178  00DC  00E0               	movwf	measure_Impedance@value1
  3179                           
  3180                           ;comm.c: 178: value2 = ADC_4();
  3181  00DD  232E               	fcall	_ADC_4
  3182  00DE  0020               	movlb	0	; select bank0
  3183  00DF  084D               	movf	?_ADC_4+1,w
  3184  00E0  00E3               	movwf	measure_Impedance@value2+1
  3185  00E1  084C               	movf	?_ADC_4,w
  3186  00E2  00E2               	movwf	measure_Impedance@value2
  3187                           
  3188                           ;comm.c: 180: aux[9] = (unsigned char)(value1 & 0xff);
  3189  00E3  0860               	movf	measure_Impedance@value1,w
  3190  00E4  00D2               	movwf	??_measure_Impedance
  3191  00E5  0852               	movf	??_measure_Impedance,w
  3192  00E6  00DC               	movwf	measure_Impedance@aux+9
  3193                           
  3194                           ;comm.c: 181: aux[10] = (unsigned char)((value1 >> 8) & 0xff);
  3195  00E7  0861               	movf	measure_Impedance@value1+1,w
  3196  00E8  00D2               	movwf	??_measure_Impedance
  3197  00E9  0852               	movf	??_measure_Impedance,w
  3198  00EA  00DD               	movwf	measure_Impedance@aux+10
  3199                           
  3200                           ;comm.c: 182: aux[11] = (unsigned char)(value2 & 0xff);
  3201  00EB  0862               	movf	measure_Impedance@value2,w
  3202  00EC  00D2               	movwf	??_measure_Impedance
  3203  00ED  0852               	movf	??_measure_Impedance,w
  3204  00EE  00DE               	movwf	measure_Impedance@aux+11
  3205                           
  3206                           ;comm.c: 183: aux[12] = (unsigned char)((value2 >> 8) & 0xff);
  3207  00EF  0863               	movf	measure_Impedance@value2+1,w
  3208  00F0  00D2               	movwf	??_measure_Impedance
  3209  00F1  0852               	movf	??_measure_Impedance,w
  3210  00F2  00DF               	movwf	measure_Impedance@aux+12
  3211                           
  3212                           ;comm.c: 186: lputs_ISR(aux,13);
  3213  00F3  300D               	movlw	13
  3214  00F4  00D2               	movwf	??_measure_Impedance
  3215  00F5  0852               	movf	??_measure_Impedance,w
  3216  00F6  00CC               	movwf	lputs_ISR@length
  3217  00F7  3053               	movlw	(low (measure_Impedance@aux| 0))& (0+255)
  3218  00F8  22B5               	fcall	_lputs_ISR
  3219  00F9  0008               	return
  3220  00FA                     __end_of_measure_Impedance:	
  3221                           
  3222                           	psect	text13
  3223  032E                     __ptext13:	
  3224 ;; *************** function _ADC_4 *****************
  3225 ;; Defined at:
  3226 ;;		line 38 in file "ADC1823.c"
  3227 ;; Parameters:    Size  Location     Type
  3228 ;;		None
  3229 ;; Auto vars:     Size  Location     Type
  3230 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  3231 ;; Return value:  Size  Location     Type
  3232 ;;                  2    0[BANK0 ] unsigned short 
  3233 ;; Registers used:
  3234 ;;		wreg
  3235 ;; Tracked objects:
  3236 ;;		On entry : 0/0
  3237 ;;		On exit  : 0/0
  3238 ;;		Unchanged: 0/0
  3239 ;; Data sizes:     COMMON   BANK0   BANK1
  3240 ;;      Params:         0       2       0
  3241 ;;      Locals:         0       2       0
  3242 ;;      Temps:          0       2       0
  3243 ;;      Totals:         0       6       0
  3244 ;;Total ram usage:        6 bytes
  3245 ;; Hardware stack levels used:    1
  3246 ;; Hardware stack levels required when called:    2
  3247 ;; This function calls:
  3248 ;;		Nothing
  3249 ;; This function is called by:
  3250 ;;		_read_ADC_channels
  3251 ;;		_measure_Impedance
  3252 ;;		_measure_Impedance_no_offset
  3253 ;;		_measure_Offset
  3254 ;; This function uses a non-reentrant model
  3255 ;;
  3256                           
  3257                           
  3258                           ;psect for function _ADC_4
  3259  032E                     _ADC_4:	
  3260                           
  3261                           ;ADC1823.c: 40: unsigned short ADC_value;
  3262                           ;ADC1823.c: 42: { ADCON0 = 0b00010001;};
  3263                           
  3264                           ;incstack = 0
  3265                           ; Regs used in _ADC_4: [wreg]
  3266  032E  3011               	movlw	17
  3267  032F  0021               	movlb	1	; select bank1
  3268  0330  009D               	movwf	29	;volatile
  3269                           
  3270                           ;ADC1823.c: 43: __nop();
  3271  0331  0000               	nop
  3272                           
  3273                           ;ADC1823.c: 44: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  3274  0332  0021               	movlb	1	; select bank1
  3275  0333  149D               	bsf	29,1	;volatile
  3276  0334                     l374:	
  3277  0334  189D               	btfsc	29,1	;volatile
  3278  0335  2B34               	goto	l374
  3279  0336  081C               	movf	28,w	;volatile
  3280  0337  0020               	movlb	0	; select bank0
  3281  0338  00CE               	movwf	??_ADC_4
  3282  0339  01CF               	clrf	??_ADC_4+1
  3283  033A  084E               	movf	??_ADC_4,w
  3284  033B  00D0               	movwf	ADC_4@ADC_value
  3285  033C  084F               	movf	??_ADC_4+1,w
  3286  033D  00D1               	movwf	ADC_4@ADC_value+1
  3287  033E  3008               	movlw	8
  3288  033F                     u765:	
  3289  033F  35D0               	lslf	ADC_4@ADC_value,f
  3290  0340  0DD1               	rlf	ADC_4@ADC_value+1,f
  3291  0341  0B89               	decfsz	9,f
  3292  0342  2B3F               	goto	u765
  3293  0343  0021               	movlb	1	; select bank1
  3294  0344  081B               	movf	27,w	;volatile
  3295  0345  0020               	movlb	0	; select bank0
  3296  0346  00CE               	movwf	??_ADC_4
  3297  0347  01CF               	clrf	??_ADC_4+1
  3298  0348  084E               	movf	??_ADC_4,w
  3299  0349  04D0               	iorwf	ADC_4@ADC_value,f
  3300  034A  084F               	movf	??_ADC_4+1,w
  3301  034B  04D1               	iorwf	ADC_4@ADC_value+1,f
  3302                           
  3303                           ;ADC1823.c: 45: return ADC_value;
  3304  034C  0851               	movf	ADC_4@ADC_value+1,w
  3305  034D  00CD               	movwf	?_ADC_4+1
  3306  034E  0850               	movf	ADC_4@ADC_value,w
  3307  034F  00CC               	movwf	?_ADC_4
  3308  0350  0008               	return
  3309  0351                     __end_of_ADC_4:	
  3310                           
  3311                           	psect	text14
  3312  0351                     __ptext14:	
  3313 ;; *************** function _ADC_2 *****************
  3314 ;; Defined at:
  3315 ;;		line 25 in file "ADC1823.c"
  3316 ;; Parameters:    Size  Location     Type
  3317 ;;		None
  3318 ;; Auto vars:     Size  Location     Type
  3319 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  3320 ;; Return value:  Size  Location     Type
  3321 ;;                  2    0[BANK0 ] unsigned short 
  3322 ;; Registers used:
  3323 ;;		wreg
  3324 ;; Tracked objects:
  3325 ;;		On entry : 0/0
  3326 ;;		On exit  : 0/0
  3327 ;;		Unchanged: 0/0
  3328 ;; Data sizes:     COMMON   BANK0   BANK1
  3329 ;;      Params:         0       2       0
  3330 ;;      Locals:         0       2       0
  3331 ;;      Temps:          0       2       0
  3332 ;;      Totals:         0       6       0
  3333 ;;Total ram usage:        6 bytes
  3334 ;; Hardware stack levels used:    1
  3335 ;; Hardware stack levels required when called:    2
  3336 ;; This function calls:
  3337 ;;		Nothing
  3338 ;; This function is called by:
  3339 ;;		_read_ADC_channels
  3340 ;;		_measure_Impedance
  3341 ;;		_measure_Impedance_no_offset
  3342 ;;		_measure_Offset
  3343 ;; This function uses a non-reentrant model
  3344 ;;
  3345                           
  3346                           
  3347                           ;psect for function _ADC_2
  3348  0351                     _ADC_2:	
  3349                           
  3350                           ;ADC1823.c: 27: unsigned short ADC_value;
  3351                           ;ADC1823.c: 29: { ADCON0 = 0b00001001;};
  3352                           
  3353                           ;incstack = 0
  3354                           ; Regs used in _ADC_2: [wreg]
  3355  0351  3009               	movlw	9
  3356  0352  0021               	movlb	1	; select bank1
  3357  0353  009D               	movwf	29	;volatile
  3358                           
  3359                           ;ADC1823.c: 30: __nop();
  3360  0354  0000               	nop
  3361                           
  3362                           ;ADC1823.c: 34: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  3363  0355  0021               	movlb	1	; select bank1
  3364  0356  149D               	bsf	29,1	;volatile
  3365  0357                     l368:	
  3366  0357  189D               	btfsc	29,1	;volatile
  3367  0358  2B57               	goto	l368
  3368  0359  081C               	movf	28,w	;volatile
  3369  035A  0020               	movlb	0	; select bank0
  3370  035B  00CE               	movwf	??_ADC_2
  3371  035C  01CF               	clrf	??_ADC_2+1
  3372  035D  084E               	movf	??_ADC_2,w
  3373  035E  00D0               	movwf	ADC_2@ADC_value
  3374  035F  084F               	movf	??_ADC_2+1,w
  3375  0360  00D1               	movwf	ADC_2@ADC_value+1
  3376  0361  3008               	movlw	8
  3377  0362                     u745:	
  3378  0362  35D0               	lslf	ADC_2@ADC_value,f
  3379  0363  0DD1               	rlf	ADC_2@ADC_value+1,f
  3380  0364  0B89               	decfsz	9,f
  3381  0365  2B62               	goto	u745
  3382  0366  0021               	movlb	1	; select bank1
  3383  0367  081B               	movf	27,w	;volatile
  3384  0368  0020               	movlb	0	; select bank0
  3385  0369  00CE               	movwf	??_ADC_2
  3386  036A  01CF               	clrf	??_ADC_2+1
  3387  036B  084E               	movf	??_ADC_2,w
  3388  036C  04D0               	iorwf	ADC_2@ADC_value,f
  3389  036D  084F               	movf	??_ADC_2+1,w
  3390  036E  04D1               	iorwf	ADC_2@ADC_value+1,f
  3391                           
  3392                           ;ADC1823.c: 35: return ADC_value;
  3393  036F  0851               	movf	ADC_2@ADC_value+1,w
  3394  0370  00CD               	movwf	?_ADC_2+1
  3395  0371  0850               	movf	ADC_2@ADC_value,w
  3396  0372  00CC               	movwf	?_ADC_2
  3397  0373  0008               	return
  3398  0374                     __end_of_ADC_2:	
  3399                           
  3400                           	psect	text15
  3401  038D                     __ptext15:	
  3402 ;; *************** function _config_ASIC *****************
  3403 ;; Defined at:
  3404 ;;		line 50 in file "comm.c"
  3405 ;; Parameters:    Size  Location     Type
  3406 ;;		None
  3407 ;; Auto vars:     Size  Location     Type
  3408 ;;  asic            2    6[BANK0 ] struct .
  3409 ;; Return value:  Size  Location     Type
  3410 ;;                  1    wreg      void 
  3411 ;; Registers used:
  3412 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3413 ;; Tracked objects:
  3414 ;;		On entry : 0/0
  3415 ;;		On exit  : 0/0
  3416 ;;		Unchanged: 0/0
  3417 ;; Data sizes:     COMMON   BANK0   BANK1
  3418 ;;      Params:         0       0       0
  3419 ;;      Locals:         0       2       0
  3420 ;;      Temps:          0       1       0
  3421 ;;      Totals:         0       3       0
  3422 ;;Total ram usage:        3 bytes
  3423 ;; Hardware stack levels used:    1
  3424 ;; Hardware stack levels required when called:    4
  3425 ;; This function calls:
  3426 ;;		_BIO_config
  3427 ;;		_lputs_ISR
  3428 ;; This function is called by:
  3429 ;;		_mess_handler
  3430 ;; This function uses a non-reentrant model
  3431 ;;
  3432                           
  3433                           
  3434                           ;psect for function _config_ASIC
  3435  038D                     _config_ASIC:	
  3436                           
  3437                           ;comm.c: 53: BIO3 asic;
  3438                           ;comm.c: 59: asic.data[0] = mess_rec[1];
  3439                           
  3440                           ;incstack = 0
  3441                           ; Regs used in _config_ASIC: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3442  038D  0020               	movlb	0	; select bank0
  3443  038E  0843               	movf	_mess_rec+1,w	;volatile
  3444  038F  00D1               	movwf	??_config_ASIC
  3445  0390  0851               	movf	??_config_ASIC,w
  3446  0391  00D2               	movwf	config_ASIC@asic
  3447                           
  3448                           ;comm.c: 60: asic.data[1] = mess_rec[2];
  3449  0392  0844               	movf	_mess_rec+2,w	;volatile
  3450  0393  00D1               	movwf	??_config_ASIC
  3451  0394  0851               	movf	??_config_ASIC,w
  3452  0395  00D3               	movwf	config_ASIC@asic+1
  3453                           
  3454                           ;comm.c: 62: lputs_ISR(mess_rec,mess_rec_size);
  3455  0396  0841               	movf	_mess_rec_size,w	;volatile
  3456  0397  00D1               	movwf	??_config_ASIC
  3457  0398  0851               	movf	??_config_ASIC,w
  3458  0399  00CC               	movwf	lputs_ISR@length
  3459  039A  3042               	movlw	(low (_mess_rec| 0))& (0+255)
  3460  039B  22B5               	fcall	_lputs_ISR
  3461                           
  3462                           ;comm.c: 64: BIO_config(asic);
  3463  039C  0020               	movlb	0	; select bank0
  3464  039D  0853               	movf	config_ASIC@asic+1,w
  3465  039E  00CD               	movwf	BIO_config@conf+1
  3466  039F  0852               	movf	config_ASIC@asic,w
  3467  03A0  00CC               	movwf	BIO_config@conf
  3468  03A1  22E0               	fcall	_BIO_config
  3469  03A2  0008               	return
  3470  03A3                     __end_of_config_ASIC:	
  3471                           
  3472                           	psect	text16
  3473  02B5                     __ptext16:	
  3474 ;; *************** function _lputs_ISR *****************
  3475 ;; Defined at:
  3476 ;;		line 131 in file "USART1823.c"
  3477 ;; Parameters:    Size  Location     Type
  3478 ;;  data            1    wreg     PTR unsigned char 
  3479 ;;		 -> measure_Impedance_SE@aux(13), measure_Offset@aux(5), measure_Impedance_no_offset@aux(13), measure_Impedance@aux(
      +13), 
  3480 ;;		 -> read_ADC_channels@aux(7), mess_rec(10), 
  3481 ;;  length          1    0[BANK0 ] unsigned char 
  3482 ;; Auto vars:     Size  Location     Type
  3483 ;;  data            1    3[BANK0 ] PTR unsigned char 
  3484 ;;		 -> measure_Impedance_SE@aux(13), measure_Offset@aux(5), measure_Impedance_no_offset@aux(13), measure_Impedance@aux(
      +13), 
  3485 ;;		 -> read_ADC_channels@aux(7), mess_rec(10), 
  3486 ;;  i               1    4[BANK0 ] unsigned char 
  3487 ;; Return value:  Size  Location     Type
  3488 ;;                  1    wreg      void 
  3489 ;; Registers used:
  3490 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3491 ;; Tracked objects:
  3492 ;;		On entry : 0/0
  3493 ;;		On exit  : 0/0
  3494 ;;		Unchanged: 0/0
  3495 ;; Data sizes:     COMMON   BANK0   BANK1
  3496 ;;      Params:         0       1       0
  3497 ;;      Locals:         0       2       0
  3498 ;;      Temps:          0       2       0
  3499 ;;      Totals:         0       5       0
  3500 ;;Total ram usage:        5 bytes
  3501 ;; Hardware stack levels used:    1
  3502 ;; Hardware stack levels required when called:    3
  3503 ;; This function calls:
  3504 ;;		_close_RX_USART
  3505 ;; This function is called by:
  3506 ;;		_mess_handler
  3507 ;;		_config_ASIC
  3508 ;;		_read_ADC_channels
  3509 ;;		_measure_Impedance
  3510 ;;		_measure_Impedance_no_offset
  3511 ;;		_measure_Offset
  3512 ;;		_measure_Impedance_SE
  3513 ;; This function uses a non-reentrant model
  3514 ;;
  3515                           
  3516                           
  3517                           ;psect for function _lputs_ISR
  3518  02B5                     _lputs_ISR:	
  3519                           
  3520                           ;incstack = 0
  3521                           ; Regs used in _lputs_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3522                           ;lputs_ISR@data stored from wreg
  3523  02B5  0020               	movlb	0	; select bank0
  3524  02B6  00CF               	movwf	lputs_ISR@data
  3525                           
  3526                           ;USART1823.c: 133: unsigned char i;
  3527                           ;USART1823.c: 135: if (USART_tx_flag == 1)
  3528  02B7  0372               	decf	_USART_tx_flag,w	;volatile
  3529  02B8  1903               	btfsc	3,2
  3530  02B9  0008               	return
  3531                           
  3532                           ;USART1823.c: 138: for (i = 0; i < length; i++)
  3533                           
  3534                           ;USART1823.c: 136: return;
  3535  02BA  01D0               	clrf	lputs_ISR@i
  3536  02BB                     l2019:	
  3537  02BB  084C               	movf	lputs_ISR@length,w
  3538  02BC  0250               	subwf	lputs_ISR@i,w
  3539  02BD  1803               	btfsc	3,0
  3540  02BE  2AD2               	goto	l2021
  3541                           
  3542                           ;USART1823.c: 139: USART_tx_data[i] = data[i];
  3543  02BF  0850               	movf	lputs_ISR@i,w
  3544  02C0  074F               	addwf	lputs_ISR@data,w
  3545  02C1  00CD               	movwf	??_lputs_ISR
  3546  02C2  084D               	movf	??_lputs_ISR,w
  3547  02C3  0086               	movwf	6
  3548  02C4  0187               	clrf	7
  3549  02C5  0801               	movf	1,w
  3550  02C6  00CE               	movwf	??_lputs_ISR+1
  3551  02C7  0850               	movf	lputs_ISR@i,w
  3552  02C8  3E2F               	addlw	(low (_USART_tx_data| 0))& (0+255)
  3553  02C9  0086               	movwf	6
  3554  02CA  0187               	clrf	7
  3555  02CB  084E               	movf	??_lputs_ISR+1,w
  3556  02CC  0081               	movwf	1
  3557  02CD  3001               	movlw	1
  3558  02CE  00CD               	movwf	??_lputs_ISR
  3559  02CF  084D               	movf	??_lputs_ISR,w
  3560  02D0  07D0               	addwf	lputs_ISR@i,f
  3561  02D1  2ABB               	goto	l2019
  3562  02D2                     l2021:	
  3563                           
  3564                           ;USART1823.c: 141: close_RX_USART();
  3565  02D2  23FD               	fcall	_close_RX_USART
  3566                           
  3567                           ;USART1823.c: 143: USART_tx_index = 0;
  3568  02D3  01F3               	clrf	_USART_tx_index	;volatile
  3569                           
  3570                           ;USART1823.c: 144: USART_tx_length = length;
  3571  02D4  0020               	movlb	0	; select bank0
  3572  02D5  084C               	movf	lputs_ISR@length,w
  3573  02D6  00CD               	movwf	??_lputs_ISR
  3574  02D7  084D               	movf	??_lputs_ISR,w
  3575  02D8  00F4               	movwf	_USART_tx_length	;volatile
  3576                           
  3577                           ;USART1823.c: 146: USART_tx_flag = 1;
  3578  02D9  3001               	movlw	1
  3579  02DA  00CD               	movwf	??_lputs_ISR
  3580  02DB  084D               	movf	??_lputs_ISR,w
  3581  02DC  00F2               	movwf	_USART_tx_flag	;volatile
  3582                           
  3583                           ;USART1823.c: 147: TXIE = 1;
  3584  02DD  0021               	movlb	1	; select bank1
  3585  02DE  1611               	bsf	17,4	;volatile
  3586  02DF  0008               	return
  3587  02E0                     __end_of_lputs_ISR:	
  3588                           
  3589                           	psect	text17
  3590  03FD                     __ptext17:	
  3591 ;; *************** function _close_RX_USART *****************
  3592 ;; Defined at:
  3593 ;;		line 35 in file "USART1823.c"
  3594 ;; Parameters:    Size  Location     Type
  3595 ;;		None
  3596 ;; Auto vars:     Size  Location     Type
  3597 ;;		None
  3598 ;; Return value:  Size  Location     Type
  3599 ;;                  1    wreg      void 
  3600 ;; Registers used:
  3601 ;;		None
  3602 ;; Tracked objects:
  3603 ;;		On entry : 0/0
  3604 ;;		On exit  : 0/0
  3605 ;;		Unchanged: 0/0
  3606 ;; Data sizes:     COMMON   BANK0   BANK1
  3607 ;;      Params:         0       0       0
  3608 ;;      Locals:         0       0       0
  3609 ;;      Temps:          0       0       0
  3610 ;;      Totals:         0       0       0
  3611 ;;Total ram usage:        0 bytes
  3612 ;; Hardware stack levels used:    1
  3613 ;; Hardware stack levels required when called:    2
  3614 ;; This function calls:
  3615 ;;		Nothing
  3616 ;; This function is called by:
  3617 ;;		_lputs_ISR
  3618 ;; This function uses a non-reentrant model
  3619 ;;
  3620                           
  3621                           
  3622                           ;psect for function _close_RX_USART
  3623  03FD                     _close_RX_USART:	
  3624                           
  3625                           ;USART1823.c: 39: RCIE = 0;
  3626                           
  3627                           ;incstack = 0
  3628                           ; Regs used in _close_RX_USART: []
  3629  03FD  0021               	movlb	1	; select bank1
  3630  03FE  1291               	bcf	17,5	;volatile
  3631                           
  3632                           ;USART1823.c: 40: CREN = 0;
  3633  03FF  0023               	movlb	3	; select bank3
  3634  0400  121D               	bcf	29,4	;volatile
  3635  0401  0008               	return
  3636  0402                     __end_of_close_RX_USART:	
  3637                           
  3638                           	psect	text18
  3639  02E0                     __ptext18:	
  3640 ;; *************** function _BIO_config *****************
  3641 ;; Defined at:
  3642 ;;		line 41 in file "bio3.c"
  3643 ;; Parameters:    Size  Location     Type
  3644 ;;  conf            2    0[BANK0 ] struct .
  3645 ;; Auto vars:     Size  Location     Type
  3646 ;;  out             1    4[BANK0 ] unsigned char 
  3647 ;;  i               1    3[BANK0 ] unsigned char 
  3648 ;; Return value:  Size  Location     Type
  3649 ;;                  1    wreg      void 
  3650 ;; Registers used:
  3651 ;;		wreg, status,2, status,0
  3652 ;; Tracked objects:
  3653 ;;		On entry : 0/0
  3654 ;;		On exit  : 0/0
  3655 ;;		Unchanged: 0/0
  3656 ;; Data sizes:     COMMON   BANK0   BANK1
  3657 ;;      Params:         0       2       0
  3658 ;;      Locals:         0       2       0
  3659 ;;      Temps:          0       1       0
  3660 ;;      Totals:         0       5       0
  3661 ;;Total ram usage:        5 bytes
  3662 ;; Hardware stack levels used:    1
  3663 ;; Hardware stack levels required when called:    2
  3664 ;; This function calls:
  3665 ;;		Nothing
  3666 ;; This function is called by:
  3667 ;;		_config_ASIC
  3668 ;;		_measure_Impedance
  3669 ;;		_measure_Impedance_no_offset
  3670 ;;		_measure_Offset
  3671 ;;		_measure_Impedance_SE
  3672 ;; This function uses a non-reentrant model
  3673 ;;
  3674                           
  3675                           
  3676                           ;psect for function _BIO_config
  3677  02E0                     _BIO_config:	
  3678                           
  3679                           ;bio3.c: 43: unsigned char i, out;
  3680                           ;bio3.c: 45: out &= 0b11110111; PORTC = out;;
  3681                           
  3682                           ;incstack = 0
  3683                           ; Regs used in _BIO_config: [wreg+status,2+status,0]
  3684  02E0  30F7               	movlw	247
  3685  02E1  0020               	movlb	0	; select bank0
  3686  02E2  00CE               	movwf	??_BIO_config
  3687  02E3  084E               	movf	??_BIO_config,w
  3688  02E4  05D0               	andwf	BIO_config@out,f
  3689  02E5  0850               	movf	BIO_config@out,w
  3690  02E6  008E               	movwf	14	;volatile
  3691                           
  3692                           ;bio3.c: 46: ;;
  3693                           ;bio3.c: 48: RA5 = 0;;
  3694  02E7  128C               	bcf	12,5	;volatile
  3695                           
  3696                           ;bio3.c: 49: ;;
  3697                           ;bio3.c: 51: RA5 = 1;;
  3698  02E8  168C               	bsf	12,5	;volatile
  3699                           
  3700                           ;bio3.c: 53: for(i = 0; i < 16; i++) {
  3701  02E9  01CF               	clrf	BIO_config@i
  3702  02EA                     L1:	
  3703  02EA  3010               	movlw	16
  3704  02EB  024F               	subwf	BIO_config@i,w
  3705  02EC  1803               	btfsc	3,0
  3706  02ED  0008               	return
  3707                           
  3708                           ;bio3.c: 54: if (conf.datashort & 0x0001) {
  3709  02EE  1C4C               	btfss	BIO_config@conf,0
  3710  02EF  2AF2               	goto	l1995
  3711                           
  3712                           ;bio3.c: 55: out |= 0b00000100; PORTC = out;;
  3713  02F0  1550               	bsf	BIO_config@out,2
  3714  02F1  2AF6               	goto	l1997
  3715  02F2                     l1995:	
  3716                           ;bio3.c: 56: } else {
  3717                           
  3718                           
  3719                           ;bio3.c: 57: out &= 0b11111011; PORTC = out;;
  3720  02F2  30FB               	movlw	251
  3721  02F3  00CE               	movwf	??_BIO_config
  3722  02F4  084E               	movf	??_BIO_config,w
  3723  02F5  05D0               	andwf	BIO_config@out,f
  3724  02F6                     l1997:	
  3725  02F6  0850               	movf	BIO_config@out,w
  3726  02F7  008E               	movwf	14	;volatile
  3727                           
  3728                           ;bio3.c: 58: }
  3729                           ;bio3.c: 59: conf.datashort >>= 1;
  3730  02F8  3001               	movlw	1
  3731  02F9                     u695:	
  3732  02F9  36CD               	lsrf	BIO_config@conf+1,f
  3733  02FA  0CCC               	rrf	BIO_config@conf,f
  3734  02FB  0B89               	decfsz	9,f
  3735  02FC  2AF9               	goto	u695
  3736                           
  3737                           ;bio3.c: 61: ;;
  3738                           ;bio3.c: 63: out |= 0b00001000; PORTC = out;;
  3739  02FD  15D0               	bsf	BIO_config@out,3
  3740  02FE  0850               	movf	BIO_config@out,w
  3741  02FF  008E               	movwf	14	;volatile
  3742                           
  3743                           ;bio3.c: 64: ;;
  3744                           ;bio3.c: 65: out &= 0b11110111; PORTC = out;;
  3745  0300  30F7               	movlw	247
  3746  0301  00CE               	movwf	??_BIO_config
  3747  0302  084E               	movf	??_BIO_config,w
  3748  0303  05D0               	andwf	BIO_config@out,f
  3749  0304  0850               	movf	BIO_config@out,w
  3750  0305  008E               	movwf	14	;volatile
  3751  0306  3001               	movlw	1
  3752  0307  00CE               	movwf	??_BIO_config
  3753  0308  084E               	movf	??_BIO_config,w
  3754  0309  07CF               	addwf	BIO_config@i,f
  3755  030A  2AEA               	goto	L1
  3756  030B                     __end_of_BIO_config:	
  3757                           
  3758                           	psect	text19
  3759  0406                     __ptext19:	
  3760 ;; *************** function _SYSTEM_Initialize *****************
  3761 ;; Defined at:
  3762 ;;		line 70 in file "mcc_generated_files/mcc.c"
  3763 ;; Parameters:    Size  Location     Type
  3764 ;;		None
  3765 ;; Auto vars:     Size  Location     Type
  3766 ;;		None
  3767 ;; Return value:  Size  Location     Type
  3768 ;;                  1    wreg      void 
  3769 ;; Registers used:
  3770 ;;		wreg, status,2, status,0, pclath, cstack
  3771 ;; Tracked objects:
  3772 ;;		On entry : 0/0
  3773 ;;		On exit  : 0/0
  3774 ;;		Unchanged: 0/0
  3775 ;; Data sizes:     COMMON   BANK0   BANK1
  3776 ;;      Params:         0       0       0
  3777 ;;      Locals:         0       0       0
  3778 ;;      Temps:          0       0       0
  3779 ;;      Totals:         0       0       0
  3780 ;;Total ram usage:        0 bytes
  3781 ;; Hardware stack levels used:    1
  3782 ;; Hardware stack levels required when called:    3
  3783 ;; This function calls:
  3784 ;;		_OSCILLATOR_Initialize
  3785 ;;		_PIN_MANAGER_Initialize
  3786 ;; This function is called by:
  3787 ;;		_main
  3788 ;; This function uses a non-reentrant model
  3789 ;;
  3790                           
  3791                           
  3792                           ;psect for function _SYSTEM_Initialize
  3793  0406                     _SYSTEM_Initialize:	
  3794                           
  3795                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  3796                           
  3797                           ;incstack = 0
  3798                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3799  0406  2374               	fcall	_PIN_MANAGER_Initialize
  3800                           
  3801                           ;mcc.c: 74: OSCILLATOR_Initialize();
  3802  0407  23F7               	fcall	_OSCILLATOR_Initialize
  3803  0408  0008               	return
  3804  0409                     __end_of_SYSTEM_Initialize:	
  3805                           
  3806                           	psect	text20
  3807  0374                     __ptext20:	
  3808 ;; *************** function _PIN_MANAGER_Initialize *****************
  3809 ;; Defined at:
  3810 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  3811 ;; Parameters:    Size  Location     Type
  3812 ;;		None
  3813 ;; Auto vars:     Size  Location     Type
  3814 ;;		None
  3815 ;; Return value:  Size  Location     Type
  3816 ;;                  1    wreg      void 
  3817 ;; Registers used:
  3818 ;;		wreg, status,2
  3819 ;; Tracked objects:
  3820 ;;		On entry : 0/0
  3821 ;;		On exit  : 0/0
  3822 ;;		Unchanged: 0/0
  3823 ;; Data sizes:     COMMON   BANK0   BANK1
  3824 ;;      Params:         0       0       0
  3825 ;;      Locals:         0       0       0
  3826 ;;      Temps:          0       0       0
  3827 ;;      Totals:         0       0       0
  3828 ;;Total ram usage:        0 bytes
  3829 ;; Hardware stack levels used:    1
  3830 ;; Hardware stack levels required when called:    2
  3831 ;; This function calls:
  3832 ;;		Nothing
  3833 ;; This function is called by:
  3834 ;;		_SYSTEM_Initialize
  3835 ;; This function uses a non-reentrant model
  3836 ;;
  3837                           
  3838                           
  3839                           ;psect for function _PIN_MANAGER_Initialize
  3840  0374                     _PIN_MANAGER_Initialize:	
  3841                           
  3842                           ;pin_manager.c: 51: LATA = 0x0;
  3843                           
  3844                           ;incstack = 0
  3845                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3846  0374  0022               	movlb	2	; select bank2
  3847  0375  018C               	clrf	12	;volatile
  3848                           
  3849                           ;pin_manager.c: 52: LATC = 0x0;
  3850  0376  018E               	clrf	14	;volatile
  3851                           
  3852                           ;pin_manager.c: 55: ANSELA = 0b00000100;
  3853  0377  3004               	movlw	4
  3854  0378  0023               	movlb	3	; select bank3
  3855  0379  008C               	movwf	12	;volatile
  3856                           
  3857                           ;pin_manager.c: 56: ANSELC = 0b00000011;
  3858  037A  3003               	movlw	3
  3859  037B  008E               	movwf	14	;volatile
  3860                           
  3861                           ;pin_manager.c: 59: WPUA = 0x3B;
  3862  037C  303B               	movlw	59
  3863  037D  0024               	movlb	4	; select bank4
  3864  037E  008C               	movwf	12	;volatile
  3865                           
  3866                           ;pin_manager.c: 60: WPUC = 0x3C;
  3867  037F  303C               	movlw	60
  3868  0380  008E               	movwf	14	;volatile
  3869                           
  3870                           ;pin_manager.c: 62: RXDTSEL = 0;
  3871  0381  0022               	movlb	2	; select bank2
  3872  0382  139D               	bcf	29,7	;volatile
  3873                           
  3874                           ;pin_manager.c: 63: TXCKSEL = 0;
  3875  0383  111D               	bcf	29,2	;volatile
  3876                           
  3877                           ;pin_manager.c: 66: TRISC = 0b01100011;
  3878  0384  3063               	movlw	99
  3879  0385  0021               	movlb	1	; select bank1
  3880  0386  008E               	movwf	14	;volatile
  3881                           
  3882                           ;pin_manager.c: 67: TRISA = 0b01011111;
  3883  0387  305F               	movlw	95
  3884  0388  008C               	movwf	12	;volatile
  3885                           
  3886                           ;pin_manager.c: 69: OPTION_REGbits.nWPUEN = 0x0;
  3887  0389  1395               	bcf	21,7	;volatile
  3888                           
  3889                           ;pin_manager.c: 70: APFCON = 0x00;
  3890  038A  0022               	movlb	2	; select bank2
  3891  038B  019D               	clrf	29	;volatile
  3892  038C  0008               	return
  3893  038D                     __end_of_PIN_MANAGER_Initialize:	
  3894                           
  3895                           	psect	text21
  3896  03F7                     __ptext21:	
  3897 ;; *************** function _OSCILLATOR_Initialize *****************
  3898 ;; Defined at:
  3899 ;;		line 78 in file "mcc_generated_files/mcc.c"
  3900 ;; Parameters:    Size  Location     Type
  3901 ;;		None
  3902 ;; Auto vars:     Size  Location     Type
  3903 ;;		None
  3904 ;; Return value:  Size  Location     Type
  3905 ;;                  1    wreg      void 
  3906 ;; Registers used:
  3907 ;;		wreg, status,2
  3908 ;; Tracked objects:
  3909 ;;		On entry : 0/0
  3910 ;;		On exit  : 0/0
  3911 ;;		Unchanged: 0/0
  3912 ;; Data sizes:     COMMON   BANK0   BANK1
  3913 ;;      Params:         0       0       0
  3914 ;;      Locals:         0       0       0
  3915 ;;      Temps:          0       0       0
  3916 ;;      Totals:         0       0       0
  3917 ;;Total ram usage:        0 bytes
  3918 ;; Hardware stack levels used:    1
  3919 ;; Hardware stack levels required when called:    2
  3920 ;; This function calls:
  3921 ;;		Nothing
  3922 ;; This function is called by:
  3923 ;;		_SYSTEM_Initialize
  3924 ;; This function uses a non-reentrant model
  3925 ;;
  3926                           
  3927                           
  3928                           ;psect for function _OSCILLATOR_Initialize
  3929  03F7                     _OSCILLATOR_Initialize:	
  3930                           
  3931                           ;mcc.c: 81: OSCCON = 0x3A;
  3932                           
  3933                           ;incstack = 0
  3934                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3935  03F7  303A               	movlw	58
  3936  03F8  0021               	movlb	1	; select bank1
  3937  03F9  0099               	movwf	25	;volatile
  3938                           
  3939                           ;mcc.c: 83: OSCSTAT = 0x00;
  3940  03FA  019A               	clrf	26	;volatile
  3941                           
  3942                           ;mcc.c: 85: OSCTUNE = 0x00;
  3943  03FB  0198               	clrf	24	;volatile
  3944  03FC  0008               	return
  3945  03FD                     __end_of_OSCILLATOR_Initialize:	
  3946                           
  3947                           	psect	intentry
  3948  0004                     __pintentry:	
  3949 ;; *************** function _isr *****************
  3950 ;; Defined at:
  3951 ;;		line 65 in file "main.c"
  3952 ;; Parameters:    Size  Location     Type
  3953 ;;		None
  3954 ;; Auto vars:     Size  Location     Type
  3955 ;;		None
  3956 ;; Return value:  Size  Location     Type
  3957 ;;                  1    wreg      void 
  3958 ;; Registers used:
  3959 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3960 ;; Tracked objects:
  3961 ;;		On entry : 0/0
  3962 ;;		On exit  : 0/0
  3963 ;;		Unchanged: 0/0
  3964 ;; Data sizes:     COMMON   BANK0   BANK1
  3965 ;;      Params:         0       0       0
  3966 ;;      Locals:         0       0       0
  3967 ;;      Temps:          2       0       0
  3968 ;;      Totals:         2       0       0
  3969 ;;Total ram usage:        2 bytes
  3970 ;; Hardware stack levels used:    1
  3971 ;; Hardware stack levels required when called:    1
  3972 ;; This function calls:
  3973 ;;		_start_TMR0_ISR
  3974 ;;		_stop_TMR0_ISR
  3975 ;;		i1_start_RX_USART_ISR
  3976 ;; This function is called by:
  3977 ;;		Interrupt level 1
  3978 ;; This function uses a non-reentrant model
  3979 ;;
  3980                           
  3981  0004                     _isr:	
  3982                           
  3983                           ;incstack = 0
  3984  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  3985                           
  3986                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3987  0005  3180               	pagesel	$
  3988  0006  0020               	movlb	0	; select bank0
  3989  0007  087F               	movf	127,w
  3990  0008  00F9               	movwf	??_isr+1
  3991                           
  3992                           ;main.c: 69: if (TMR0IF && TMR0IE) {
  3993  0009  190B               	btfsc	11,2	;volatile
  3994  000A  1E8B               	btfss	11,5	;volatile
  3995  000B  2815               	goto	i1l120
  3996                           
  3997                           ;main.c: 71: TMR0IF = 0;
  3998  000C  110B               	bcf	11,2	;volatile
  3999                           
  4000                           ;main.c: 72: TMR0 = TIMER0_timeout;
  4001  000D  0870               	movf	_TIMER0_timeout,w	;volatile
  4002  000E  0095               	movwf	21	;volatile
  4003                           
  4004                           ;main.c: 75: TIMER0_flag = 1;
  4005  000F  3001               	movlw	1
  4006  0010  00F8               	movwf	??_isr
  4007  0011  0878               	movf	??_isr,w
  4008  0012  00BE               	movwf	_TIMER0_flag	;volatile
  4009                           
  4010                           ;main.c: 80: stop_TMR0_ISR();
  4011  0013  2409               	fcall	_stop_TMR0_ISR
  4012                           
  4013                           ;main.c: 82: return;
  4014  0014  2850               	goto	i1l121
  4015  0015                     i1l120:	
  4016                           
  4017                           ;main.c: 83: }
  4018                           ;main.c: 87: if (RCIF) {
  4019  0015  1E91               	btfss	17,5	;volatile
  4020  0016  2834               	goto	i1l122
  4021                           
  4022                           ;main.c: 88: stop_TMR0_ISR();
  4023  0017  2409               	fcall	_stop_TMR0_ISR
  4024                           
  4025                           ;main.c: 91: if (OERR) {
  4026  0018  0023               	movlb	3	; select bank3
  4027  0019  1C9D               	btfss	29,1	;volatile
  4028  001A  281E               	goto	i1l1945
  4029                           
  4030                           ;main.c: 93: CREN = 0;
  4031  001B  121D               	bcf	29,4	;volatile
  4032                           
  4033                           ;main.c: 94: CREN = 1;
  4034  001C  161D               	bsf	29,4	;volatile
  4035                           
  4036                           ;main.c: 95: return;
  4037  001D  2850               	goto	i1l121
  4038  001E                     i1l1945:	
  4039                           
  4040                           ;main.c: 96: }
  4041                           ;main.c: 99: if (USART_rx_index >= 15) {
  4042  001E  300F               	movlw	15
  4043  001F  0020               	movlb	0	; select bank0
  4044  0020  0240               	subwf	_USART_rx_index,w	;volatile
  4045  0021  1803               	btfsc	3,0
  4046                           
  4047                           ;main.c: 100: USART_rx_index = 0;
  4048  0022  01C0               	clrf	_USART_rx_index	;volatile
  4049                           
  4050                           ;main.c: 101: }
  4051                           ;main.c: 103: USART_rx_data[USART_rx_index++] = RCREG;
  4052  0023  0023               	movlb	3	; select bank3
  4053  0024  0819               	movf	25,w	;volatile
  4054  0025  00F8               	movwf	??_isr
  4055  0026  0020               	movlb	0	; select bank0
  4056  0027  0840               	movf	_USART_rx_index,w
  4057  0028  3E20               	addlw	(low (_USART_rx_data| 0))& (0+255)
  4058  0029  0086               	movwf	6
  4059  002A  0187               	clrf	7
  4060  002B  0878               	movf	??_isr,w
  4061  002C  0081               	movwf	1
  4062  002D  3001               	movlw	1
  4063  002E  00F8               	movwf	??_isr
  4064  002F  0878               	movf	??_isr,w
  4065  0030  07C0               	addwf	_USART_rx_index,f	;volatile
  4066                           
  4067                           ;main.c: 105: start_TMR0_ISR(98);
  4068  0031  3062               	movlw	98
  4069  0032  23C5               	fcall	_start_TMR0_ISR
  4070                           
  4071                           ;main.c: 107: return;
  4072  0033  2850               	goto	i1l121
  4073  0034                     i1l122:	
  4074                           
  4075                           ;main.c: 108: }
  4076                           ;main.c: 112: if (TXIF && TXIE) {
  4077  0034  1E11               	btfss	17,4	;volatile
  4078  0035  2850               	goto	i1l121
  4079  0036  0021               	movlb	1	; select bank1
  4080  0037  1E11               	btfss	17,4	;volatile
  4081  0038  2850               	goto	i1l121
  4082                           
  4083                           ;main.c: 114: TXREG = USART_tx_data[USART_tx_index++];
  4084  0039  0873               	movf	_USART_tx_index,w
  4085  003A  3E2F               	addlw	(low (_USART_tx_data| 0))& (0+255)
  4086  003B  0086               	movwf	6
  4087  003C  0187               	clrf	7
  4088  003D  0801               	movf	1,w
  4089  003E  0023               	movlb	3	; select bank3
  4090  003F  009A               	movwf	26	;volatile
  4091  0040  3001               	movlw	1
  4092  0041  00F8               	movwf	??_isr
  4093  0042  0878               	movf	??_isr,w
  4094  0043  07F3               	addwf	_USART_tx_index,f	;volatile
  4095                           
  4096                           ;main.c: 116: if (USART_tx_index >= USART_tx_length) {
  4097  0044  0874               	movf	_USART_tx_length,w	;volatile
  4098  0045  0273               	subwf	_USART_tx_index,w	;volatile
  4099  0046  1C03               	skipc
  4100  0047  2850               	goto	i1l121
  4101                           
  4102                           ;main.c: 117: TXIE = 0;
  4103  0048  0021               	movlb	1	; select bank1
  4104  0049  1211               	bcf	17,4	;volatile
  4105                           
  4106                           ;main.c: 118: USART_tx_flag = 0;
  4107  004A  01F2               	clrf	_USART_tx_flag	;volatile
  4108                           
  4109                           ;main.c: 121: _delay((unsigned long)((2)*(500000/4000.0)));
  4110  004B  3053               	movlw	83
  4111  004C                     u93_27:	
  4112  004C  0B89               	decfsz	9,f
  4113  004D  284C               	goto	u93_27
  4114  004E  0000               	nop
  4115                           
  4116                           ;main.c: 122: start_RX_USART_ISR();
  4117  004F  23B4               	fcall	i1_start_RX_USART_ISR
  4118  0050                     i1l121:	
  4119                           ;main.c: 123: }
  4120                           ;main.c: 124: return;
  4121                           
  4122  0050  0879               	movf	??_isr+1,w
  4123  0051  0020               	movlb	0	; select bank0
  4124  0052  00FF               	movwf	127
  4125  0053  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4126  0054  0009               	retfie
  4127  0055                     __end_of_isr:	
  4128                           
  4129                           	psect	text23
  4130  03B4                     __ptext23:	
  4131 ;; *************** function i1_start_RX_USART_ISR *****************
  4132 ;; Defined at:
  4133 ;;		line 82 in file "USART1823.c"
  4134 ;; Parameters:    Size  Location     Type
  4135 ;;		None
  4136 ;; Auto vars:     Size  Location     Type
  4137 ;;		None
  4138 ;; Return value:  Size  Location     Type
  4139 ;;                  1    wreg      void 
  4140 ;; Registers used:
  4141 ;;		wreg, status,2
  4142 ;; Tracked objects:
  4143 ;;		On entry : 0/0
  4144 ;;		On exit  : 0/0
  4145 ;;		Unchanged: 0/0
  4146 ;; Data sizes:     COMMON   BANK0   BANK1
  4147 ;;      Params:         0       0       0
  4148 ;;      Locals:         0       0       0
  4149 ;;      Temps:          0       0       0
  4150 ;;      Totals:         0       0       0
  4151 ;;Total ram usage:        0 bytes
  4152 ;; Hardware stack levels used:    1
  4153 ;; This function calls:
  4154 ;;		Nothing
  4155 ;; This function is called by:
  4156 ;;		_isr
  4157 ;; This function uses a non-reentrant model
  4158 ;;
  4159                           
  4160                           
  4161                           ;psect for function i1_start_RX_USART_ISR
  4162  03B4                     i1_start_RX_USART_ISR:	
  4163                           
  4164                           ;USART1823.c: 85: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  4165                           
  4166                           ;incstack = 0
  4167                           ; Regs used in i1_start_RX_USART_ISR: [wreg+status,2]
  4168  03B4  0023               	movlb	3	; select bank3
  4169  03B5  151E               	bsf	30,2	;volatile
  4170  03B6  159F               	bsf	31,3	;volatile
  4171  03B7  019C               	clrf	28	;volatile
  4172  03B8  300C               	movlw	12
  4173  03B9  009B               	movwf	27	;volatile
  4174                           
  4175                           ;USART1823.c: 87: SYNC = 0;
  4176  03BA  121E               	bcf	30,4	;volatile
  4177                           
  4178                           ;USART1823.c: 88: SPEN = 1;
  4179  03BB  179D               	bsf	29,7	;volatile
  4180                           
  4181                           ;USART1823.c: 89: CREN = 1;
  4182  03BC  161D               	bsf	29,4	;volatile
  4183                           
  4184                           ;USART1823.c: 91: USART_rx_flag = 0;
  4185  03BD  0020               	movlb	0	; select bank0
  4186  03BE  01BF               	clrf	_USART_rx_flag	;volatile
  4187                           
  4188                           ;USART1823.c: 92: USART_rx_index = 0;
  4189  03BF  01C0               	clrf	_USART_rx_index	;volatile
  4190                           
  4191                           ;USART1823.c: 94: RCIE = 1;
  4192  03C0  0021               	movlb	1	; select bank1
  4193  03C1  1691               	bsf	17,5	;volatile
  4194                           
  4195                           ;USART1823.c: 95: PEIE = 1;
  4196  03C2  170B               	bsf	11,6	;volatile
  4197                           
  4198                           ;USART1823.c: 96: GIE = 1;
  4199  03C3  178B               	bsf	11,7	;volatile
  4200  03C4  0008               	return
  4201  03C5                     __end_ofi1_start_RX_USART_ISR:	
  4202                           
  4203                           	psect	text24
  4204  0409                     __ptext24:	
  4205 ;; *************** function _stop_TMR0_ISR *****************
  4206 ;; Defined at:
  4207 ;;		line 44 in file "TMR0.c"
  4208 ;; Parameters:    Size  Location     Type
  4209 ;;		None
  4210 ;; Auto vars:     Size  Location     Type
  4211 ;;		None
  4212 ;; Return value:  Size  Location     Type
  4213 ;;                  1    wreg      void 
  4214 ;; Registers used:
  4215 ;;		None
  4216 ;; Tracked objects:
  4217 ;;		On entry : 0/0
  4218 ;;		On exit  : 0/0
  4219 ;;		Unchanged: 0/0
  4220 ;; Data sizes:     COMMON   BANK0   BANK1
  4221 ;;      Params:         0       0       0
  4222 ;;      Locals:         0       0       0
  4223 ;;      Temps:          0       0       0
  4224 ;;      Totals:         0       0       0
  4225 ;;Total ram usage:        0 bytes
  4226 ;; Hardware stack levels used:    1
  4227 ;; This function calls:
  4228 ;;		Nothing
  4229 ;; This function is called by:
  4230 ;;		_isr
  4231 ;; This function uses a non-reentrant model
  4232 ;;
  4233                           
  4234                           
  4235                           ;psect for function _stop_TMR0_ISR
  4236  0409                     _stop_TMR0_ISR:	
  4237                           
  4238                           ;TMR0.c: 47: TMR0IE = 0;
  4239                           
  4240                           ;incstack = 0
  4241                           ; Regs used in _stop_TMR0_ISR: []
  4242  0409  128B               	bcf	11,5	;volatile
  4243                           
  4244                           ;TMR0.c: 48: TMR0IF = 0;
  4245  040A  110B               	bcf	11,2	;volatile
  4246  040B  0008               	return
  4247  040C                     __end_of_stop_TMR0_ISR:	
  4248                           
  4249                           	psect	text25
  4250  03C5                     __ptext25:	
  4251 ;; *************** function _start_TMR0_ISR *****************
  4252 ;; Defined at:
  4253 ;;		line 30 in file "TMR0.c"
  4254 ;; Parameters:    Size  Location     Type
  4255 ;;  val             1    wreg     unsigned char 
  4256 ;; Auto vars:     Size  Location     Type
  4257 ;;  val             1    2[COMMON] unsigned char 
  4258 ;; Return value:  Size  Location     Type
  4259 ;;                  1    wreg      void 
  4260 ;; Registers used:
  4261 ;;		wreg, status,2
  4262 ;; Tracked objects:
  4263 ;;		On entry : 0/0
  4264 ;;		On exit  : 0/0
  4265 ;;		Unchanged: 0/0
  4266 ;; Data sizes:     COMMON   BANK0   BANK1
  4267 ;;      Params:         0       0       0
  4268 ;;      Locals:         1       0       0
  4269 ;;      Temps:          2       0       0
  4270 ;;      Totals:         3       0       0
  4271 ;;Total ram usage:        3 bytes
  4272 ;; Hardware stack levels used:    1
  4273 ;; This function calls:
  4274 ;;		Nothing
  4275 ;; This function is called by:
  4276 ;;		_isr
  4277 ;; This function uses a non-reentrant model
  4278 ;;
  4279                           
  4280                           
  4281                           ;psect for function _start_TMR0_ISR
  4282  03C5                     _start_TMR0_ISR:	
  4283                           
  4284                           ;incstack = 0
  4285                           ; Regs used in _start_TMR0_ISR: [wreg+status,2]
  4286                           ;start_TMR0_ISR@val stored from wreg
  4287  03C5  00F7               	movwf	start_TMR0_ISR@val
  4288                           
  4289                           ;TMR0.c: 32: TIMER0_timeout = val;
  4290  03C6  0877               	movf	start_TMR0_ISR@val,w
  4291  03C7  00F5               	movwf	??_start_TMR0_ISR
  4292  03C8  01F6               	clrf	??_start_TMR0_ISR+1
  4293  03C9  0875               	movf	??_start_TMR0_ISR,w
  4294  03CA  00F0               	movwf	_TIMER0_timeout	;volatile
  4295  03CB  0876               	movf	??_start_TMR0_ISR+1,w
  4296  03CC  00F1               	movwf	_TIMER0_timeout+1	;volatile
  4297                           
  4298                           ;TMR0.c: 33: TIMER0_flag = 0;
  4299  03CD  0020               	movlb	0	; select bank0
  4300  03CE  01BE               	clrf	_TIMER0_flag	;volatile
  4301                           
  4302                           ;TMR0.c: 36: TMR0 = TIMER0_timeout;
  4303  03CF  0870               	movf	_TIMER0_timeout,w	;volatile
  4304  03D0  0095               	movwf	21	;volatile
  4305                           
  4306                           ;TMR0.c: 39: TMR0IF = 0;
  4307  03D1  110B               	bcf	11,2	;volatile
  4308                           
  4309                           ;TMR0.c: 40: TMR0IE = 1;
  4310  03D2  168B               	bsf	11,5	;volatile
  4311                           
  4312                           ;TMR0.c: 41: GIE = 1;
  4313  03D3  178B               	bsf	11,7	;volatile
  4314  03D4  0008               	return
  4315  03D5                     __end_of_start_TMR0_ISR:	
  4316  007E                     btemp	set	126	;btemp
  4317  007E                     int$flags	set	126
  4318  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         49
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     29      73
    BANK1            32      0       0

Pointer List with Targets:

    lputs_ISR@data	PTR unsigned char  size(1) Largest target is 13
		 -> measure_Impedance_SE@aux(BANK0[13]), measure_Offset@aux(BANK0[5]), measure_Impedance_no_offset@aux(BANK0[13]), measure_Impedance@aux(BANK0[13]), 
		 -> read_ADC_channels@aux(BANK0[7]), mess_rec(BANK0[10]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_start_TMR0_ISR

Critical Paths under _main in BANK0

    _main->_mess_handler
    _mess_handler->_measure_Impedance
    _mess_handler->_measure_Impedance_no_offset
    _read_ADC_channels->_ADC_2
    _read_ADC_channels->_ADC_4
    _read_ADC_channels->_ADC_5
    _measure_Offset->_ADC_2
    _measure_Offset->_ADC_4
    _measure_Impedance_no_offset->_ADC_2
    _measure_Impedance_no_offset->_ADC_4
    _measure_Impedance_SE->_ADC_5
    _measure_Impedance->_ADC_2
    _measure_Impedance->_ADC_4
    _config_ASIC->_BIO_config
    _config_ASIC->_lputs_ISR

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   15862
                                             27 BANK0      2     2      0
                  _SYSTEM_Initialize
                       _mess_handler
                          _setup_ADC
                         _setup_TMR0
                          _start_RCM
                 _start_RX_USART_ISR
                 _start_TX_USART_ISR
 ---------------------------------------------------------------------------------
 (1) _start_TX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RCM                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_TMR0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_ADC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _mess_handler                                         1     1      0   15763
                                             26 BANK0      1     1      0
                        _config_ASIC
                          _lputs_ISR
                  _measure_Impedance
               _measure_Impedance_SE
        _measure_Impedance_no_offset
                     _measure_Offset
                  _read_ADC_channels
 ---------------------------------------------------------------------------------
 (2) _read_ADC_channels                                   14    14      0    1536
                                              6 BANK0     14    14      0
                              _ADC_2
                              _ADC_4
                              _ADC_5
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (2) _measure_Offset                                      12    12      0    2473
                                              6 BANK0     12    12      0
                              _ADC_2
                              _ADC_4
                         _BIO_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (2) _measure_Impedance_no_offset                         22    22      0    2850
                                              6 BANK0     20    20      0
                              _ADC_2
                              _ADC_4
                         _BIO_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (2) _measure_Impedance_SE                                22    22      0    2705
                                              6 BANK0     18    18      0
                              _ADC_5
                         _BIO_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (3) _ADC_5                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _measure_Impedance                                   22    22      0    3162
                                              6 BANK0     20    20      0
                              _ADC_2
                              _ADC_4
                         _BIO_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (3) _ADC_4                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _ADC_2                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _config_ASIC                                          3     3      0    2075
                                              5 BANK0      3     3      0
                         _BIO_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (3) _lputs_ISR                                            5     4      1     962
                                              0 BANK0      5     4      1
                     _close_RX_USART
 ---------------------------------------------------------------------------------
 (4) _close_RX_USART                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _BIO_config                                           5     3      2    1042
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  2     2      0      22
                                              3 COMMON     2     2      0
                     _start_TMR0_ISR
                      _stop_TMR0_ISR
               i1_start_RX_USART_ISR
 ---------------------------------------------------------------------------------
 (6) i1_start_RX_USART_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _stop_TMR0_ISR                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _start_TMR0_ISR                                       3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _mess_handler
     _config_ASIC
       _BIO_config
       _lputs_ISR
         _close_RX_USART
     _lputs_ISR
       _close_RX_USART
     _measure_Impedance
       _ADC_2
       _ADC_4
       _BIO_config
       _lputs_ISR
         _close_RX_USART
     _measure_Impedance_SE
       _ADC_5
       _BIO_config
       _lputs_ISR
         _close_RX_USART
     _measure_Impedance_no_offset
       _ADC_2
       _ADC_4
       _BIO_config
       _lputs_ISR
         _close_RX_USART
     _measure_Offset
       _ADC_2
       _ADC_4
       _BIO_config
       _lputs_ISR
         _close_RX_USART
     _read_ADC_channels
       _ADC_2
       _ADC_4
       _ADC_5
       _lputs_ISR
         _close_RX_USART
   _setup_ADC
   _setup_TMR0
   _start_RCM
   _start_RX_USART_ISR
   _start_TX_USART_ISR

 _isr (ROOT)
   _start_TMR0_ISR
   _stop_TMR0_ISR
   i1_start_RX_USART_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      53       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     1D      49       6       91.2%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      53       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Mar 10 17:03:13 2017

                         __CFG_CP$OFF 0000                         _USART_rx_data 0020  
                       _USART_rx_flag 003F                         _USART_tx_data 002F  
                       _USART_tx_flag 0072                                   l108 0223  
                                 l332 02B4                                   l380 0311  
                                 l374 0334                                   l368 0357  
                                 _GIE 005F                                   _RA5 0065  
                                 _PS0 04A8                                   _PS1 04A9  
                                 _PS2 04AA                          __CFG_CPD$OFF 0000  
                                 _PSA 04AB                                   u745 0362  
                                 u907 007B                                   u765 033F  
                                 u917 00A7                                   u837 021C  
                                 u695 02F9                                   u927 00D2  
                                 u847 01E8                                   u785 031C  
                                 u857 017E                                   u867 01A9  
                                 u877 0111                                   u887 012F  
                                 u897 014C                                   _isr 0004  
                        __CFG_BORV$HI 0000                                   wreg 0009  
                        __CFG_IESO$ON 0000                        _USART_rx_index 0040  
                        __CFG_LVP$OFF 0000                        _USART_tx_index 0073  
                                l2021 02D2                                  l2019 02BB  
                                l2331 0296                                  l2323 0288  
                                l2333 0298                                  l2325 0290  
                                l2335 029A                                  l2327 0292  
                                l2329 0294                                  l2339 029C  
                                l2365 022F                                  l2377 0237  
                                l2379 024C                                  l1995 02F2  
                                l1997 02F6                                  ?_isr 0075  
                                _ADGO 04E9                          __CFG_WDTE$ON 0000  
                                _BRGH 0CF2                                  _CREN 0CEC  
                                _LATA 010C                                  _LATC 010E  
                                _PEIE 005E                                  _RCIE 048D  
                                _RCIF 008D                                  _OERR 0CE9  
                                _TMR0 0015                                  _SPEN 0CEF  
                                _TXIE 048C                                  _TXEN 0CF5  
                                _TXIF 008C                                  _SYNC 0CF4  
                                _WPUA 020C                                  _WPUC 020E  
              __size_of_stop_TMR0_ISR 0003                     _read_ADC_channels 024E  
                        __CFG_WRT$OFF 0000                                  _main 0210  
                                fsr0h 0005                                  fsr1h 0007  
                                indf0 0000                                  fsr0l 0004  
                                indf1 0001                                  fsr1l 0006  
                                btemp 007E                    ?_read_ADC_channels 0075  
                                start 0055                         __CFG_MCLRE$ON 0000  
          measure_Impedance_SE@value1 0060                   ??_read_ADC_channels 0052  
                               ??_isr 0078        __size_of_OSCILLATOR_Initialize 0006  
                     _USART_tx_length 0074         __end_of_OSCILLATOR_Initialize 03FD  
                               ?_main 0075                                 _ADC_2 0351  
                               _ADC_4 032E                                 _ADC_5 030B  
                               _BRG16 0CFB                                 i1l120 0015  
                               i1l121 0050                                 i1l122 0034  
                 __size_of_BIO_config 002B                                 _RCREG 0199  
                               _PORTC 000E                                 _TRISA 008C  
                      _start_TMR0_ISR 03C5                                 _TRISC 008E  
                               u93_27 004C                                 _TXREG 019A  
                      __CFG_FCMEN$OFF 0000             __end_of_read_ADC_channels 0287  
        ?_measure_Impedance_no_offset 0075                                 main@i 0068  
       __size_ofi1_start_RX_USART_ISR 0011                        __CFG_BOREN$OFF 0000  
                               status 0003                                 wtemp0 007E  
                     __initialization 0056                          __end_of_main 024E  
                       _stop_TMR0_ISR 0409                      ??_close_RX_USART 004C  
              __end_of_start_TMR0_ISR 03D5                                ??_main 0067  
                              ?_ADC_2 004C                                ?_ADC_4 004C  
                              ?_ADC_5 004C          __end_of_measure_Impedance_SE 0166  
                      _TIMER0_timeout 0070                        __CFG_PLLEN$OFF 0000  
                              _ADCON0 009D                                _ADCON1 009E  
                              _ADRESH 009C                                _ADRESL 009B  
                              _APFCON 011D                                _ANSELA 018C  
                              _ANSELC 018E                                i1l1945 001E  
                              _OSCCON 0099         ??_measure_Impedance_no_offset 0052  
                              _TMR0IE 005D                                _TMR0IF 005A  
                              _TMR0CS 04AD                                _SPBRGH 019C  
                              _SPBRGL 019B                        __CFG_PWRTE$OFF 0000  
                __size_of_config_ASIC 0016                       config_ASIC@asic 0052  
                      __CFG_STVREN$ON 0000                        ?_stop_TMR0_ISR 0075  
                     ?_start_TMR0_ISR 0075                  measure_Impedance@aux 0053  
         __size_of_start_RX_USART_ISR 0011            __size_of_read_ADC_channels 0039  
                       ?_mess_handler 0075               __size_of_measure_Offset 003F  
                   _SYSTEM_Initialize 0406               __end_of__initialization 0061  
                        ??_BIO_config 004E                         __end_of_ADC_2 0374  
                       __end_of_ADC_4 0351                    ?_SYSTEM_Initialize 0075  
                       __end_of_ADC_5 032E                        __pcstackCOMMON 0075  
                 ??_SYSTEM_Initialize 004C  __size_of_measure_Impedance_no_offset 006B  
                             ??_ADC_2 004E                               ??_ADC_4 004E  
                             ??_ADC_5 004E                        _OPTION_REGbits 0095  
                  __end_of_BIO_config 030B           __size_of_start_TX_USART_ISR 000F  
                      ??_mess_handler 0066             __end_of_SYSTEM_Initialize 0409  
                          __pbssBANK0 0020                  _measure_Impedance_SE 00FA  
                          __pmaintext 0210                       ??_stop_TMR0_ISR 0075  
                read_ADC_channels@aux 0053                            __pintentry 0004  
                measure_Offset@value1 0058                  measure_Offset@value2 005A  
                             _CLKRCON 039A                    __size_of_lputs_ISR 002B  
                     lputs_ISR@length 004C                    __size_of_setup_ADC 0006  
                             _OSCSTAT 009A                               _OSCTUNE 0098  
                  __size_of_start_RCM 0004                               _RXDTSEL 08EF  
                             _TXCKSEL 08EA                 ?_measure_Impedance_SE 0075  
        __end_ofi1_start_RX_USART_ISR 03C5                     measure_Offset@aux 0053  
                             __ptext1 03D5                               __ptext2 03A3  
                             __ptext3 0402                               __ptext4 03E4  
                             __ptext5 03F1                               __ptext6 0287  
                             __ptext7 024E                               __ptext8 01D1  
                             __ptext9 0166                 _OSCILLATOR_Initialize 03F7  
                        __size_of_isr 0051              ??_PIN_MANAGER_Initialize 004C  
          __size_of_SYSTEM_Initialize 0003                               clrloop0 03EC  
                       _mess_rec_size 0041                  end_of_initialization 0061  
                      _measure_Offset 01D1                 measure_Impedance@asic 0064  
                   __end_of_lputs_ISR 02E0                     __end_of_setup_ADC 03F7  
                    ??_start_TMR0_ISR 0075                     __end_of_start_RCM 0406  
                __end_of_mess_handler 02B5                            _setup_TMR0 03E4  
                    __CFG_FOSC$INTOSC 0000                __end_of_measure_Offset 0210  
              ??_measure_Impedance_SE 0052                         ??_config_ASIC 0051  
                   _measure_Impedance 0064                    ?_measure_Impedance 0075  
                      ADC_2@ADC_value 0050            __end_of_start_RX_USART_ISR 03B4  
              ?_OSCILLATOR_Initialize 0075     measure_Impedance_no_offset@value1 0060  
   measure_Impedance_no_offset@value2 0062                   start_initialization 0056  
                 ??_measure_Impedance 0052       __size_of_PIN_MANAGER_Initialize 0019  
                         __end_of_isr 0055                       ?_measure_Offset 0075  
 __end_of_measure_Impedance_no_offset 01D1           _measure_Impedance_no_offset 0166  
            measure_Impedance_SE@asic 0062               __size_of_close_RX_USART 0005  
                i1_start_RX_USART_ISR 03B4                        ADC_4@ADC_value 0050  
           __end_of_measure_Impedance 00FA                        ADC_5@ADC_value 0050  
                 __end_of_config_ASIC 03A3                           ?_setup_TMR0 0075  
          __end_of_start_TX_USART_ISR 03E4                           __pbssCOMMON 0070  
                           ___latbits 0000                         __pcstackBANK0 004C  
     measure_Impedance_no_offset@asic 0064                 ?i1_start_RX_USART_ISR 0075  
               __size_of_mess_handler 002E                _PIN_MANAGER_Initialize 0374  
               __end_of_stop_TMR0_ISR 040C                        __size_of_ADC_2 0023  
                      __size_of_ADC_4 0023                        __size_of_ADC_5 0023  
             read_ADC_channels@value1 005A               read_ADC_channels@value2 005C  
             read_ADC_channels@value3 005E                          _mess_handler 0287  
                 __size_of_setup_TMR0 0007                           _config_ASIC 038D  
                           clear_ram0 03EB                            lputs_ISR@i 0050  
          __size_of_measure_Impedance 0096                             _lputs_ISR 02B5  
                           _setup_ADC 03F1                             _start_RCM 0402  
              ??i1_start_RX_USART_ISR 0075                        _close_RX_USART 03FD  
             measure_Impedance@value1 0060               measure_Impedance@value2 0062  
             measure_Impedance_SE@aux 0053                            ?_lputs_ISR 004C  
                          ?_setup_ADC 0075               ??_OSCILLATOR_Initialize 004C  
                   start_TMR0_ISR@val 0077                            ?_start_RCM 0075  
      measure_Impedance_no_offset@aux 0053                      ??_measure_Offset 0052  
              __end_of_close_RX_USART 0402                        BIO_config@conf 004C  
                  measure_Offset@asic 005C                              __ptext10 00FA  
                            __ptext11 030B                              __ptext20 0374  
                            __ptext12 0064                              __ptext21 03F7  
                            __ptext13 032E                              __ptext14 0351  
                            __ptext23 03B4                              __ptext15 038D  
                            __ptext24 0409                              __ptext16 02B5  
                            __ptext25 03C5                              __ptext17 03FD  
                            __ptext18 02E0                              __ptext19 0406  
                       lputs_ISR@data 004F                    _start_RX_USART_ISR 03A3  
                          _BIO_config 02E0                         __size_of_main 003E  
                            _mess_rec 0042         __size_of_measure_Impedance_SE 006C  
                 ?_start_RX_USART_ISR 0075                              int$flags 007E  
                        ??_setup_TMR0 004C                           _TIMER0_flag 003E  
                ??_start_RX_USART_ISR 004C               __size_of_start_TMR0_ISR 0010  
                     ?_close_RX_USART 0075                              intlevel1 0000  
                  _start_TX_USART_ISR 03D5                         BIO_config@out 0050  
             ?_PIN_MANAGER_Initialize 0075                     __CFG_CLKOUTEN$OFF 0000  
                  __end_of_setup_TMR0 03EB                   ?_start_TX_USART_ISR 0075  
                         ??_lputs_ISR 004D                           ??_setup_ADC 004C  
                         ??_start_RCM 004C                  ??_start_TX_USART_ISR 004C  
                         BIO_config@i 004F        __end_of_PIN_MANAGER_Initialize 038D  
                         ?_BIO_config 004C                          ?_config_ASIC 0075  
