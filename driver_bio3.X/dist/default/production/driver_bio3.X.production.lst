

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Thu Mar  2 16:38:35 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16LF1823
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	psect	text17,local,class=CODE,merge=1,delta=2
    28                           	psect	text18,local,class=CODE,merge=1,delta=2
    29                           	psect	text19,local,class=CODE,merge=1,delta=2
    30                           	psect	intentry,global,class=CODE,delta=2
    31                           	psect	text21,local,class=CODE,merge=1,delta=2
    32                           	psect	text22,local,class=CODE,merge=1,delta=2
    33                           	psect	text23,local,class=CODE,merge=1,delta=2
    34                           	dabs	1,0x7E,2
    35  0000                     
    36                           ; Version 1.40
    37                           ; Generated 01/12/2016 GMT
    38                           ; 
    39                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC16LF1823 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     	;# 
    71  0001                     	;# 
    72  0002                     	;# 
    73  0003                     	;# 
    74  0004                     	;# 
    75  0005                     	;# 
    76  0006                     	;# 
    77  0007                     	;# 
    78  0008                     	;# 
    79  0009                     	;# 
    80  000A                     	;# 
    81  000B                     	;# 
    82  000C                     	;# 
    83  000E                     	;# 
    84  0011                     	;# 
    85  0012                     	;# 
    86  0015                     	;# 
    87  0016                     	;# 
    88  0016                     	;# 
    89  0017                     	;# 
    90  0018                     	;# 
    91  0019                     	;# 
    92  001A                     	;# 
    93  001B                     	;# 
    94  001C                     	;# 
    95  001E                     	;# 
    96  001F                     	;# 
    97  008C                     	;# 
    98  008E                     	;# 
    99  0091                     	;# 
   100  0092                     	;# 
   101  0095                     	;# 
   102  0096                     	;# 
   103  0097                     	;# 
   104  0098                     	;# 
   105  0099                     	;# 
   106  009A                     	;# 
   107  009B                     	;# 
   108  009B                     	;# 
   109  009C                     	;# 
   110  009D                     	;# 
   111  009E                     	;# 
   112  010C                     	;# 
   113  010E                     	;# 
   114  0111                     	;# 
   115  0112                     	;# 
   116  0113                     	;# 
   117  0114                     	;# 
   118  0115                     	;# 
   119  0116                     	;# 
   120  0117                     	;# 
   121  0118                     	;# 
   122  0119                     	;# 
   123  011A                     	;# 
   124  011B                     	;# 
   125  011D                     	;# 
   126  011D                     	;# 
   127  018C                     	;# 
   128  018E                     	;# 
   129  0191                     	;# 
   130  0191                     	;# 
   131  0192                     	;# 
   132  0193                     	;# 
   133  0193                     	;# 
   134  0193                     	;# 
   135  0194                     	;# 
   136  0195                     	;# 
   137  0196                     	;# 
   138  0199                     	;# 
   139  019A                     	;# 
   140  019B                     	;# 
   141  019B                     	;# 
   142  019B                     	;# 
   143  019B                     	;# 
   144  019C                     	;# 
   145  019C                     	;# 
   146  019D                     	;# 
   147  019E                     	;# 
   148  019F                     	;# 
   149  020C                     	;# 
   150  020E                     	;# 
   151  0211                     	;# 
   152  0211                     	;# 
   153  0212                     	;# 
   154  0212                     	;# 
   155  0213                     	;# 
   156  0213                     	;# 
   157  0214                     	;# 
   158  0214                     	;# 
   159  0215                     	;# 
   160  0215                     	;# 
   161  0215                     	;# 
   162  0216                     	;# 
   163  0216                     	;# 
   164  0217                     	;# 
   165  0217                     	;# 
   166  0291                     	;# 
   167  0291                     	;# 
   168  0292                     	;# 
   169  0293                     	;# 
   170  0294                     	;# 
   171  0295                     	;# 
   172  0295                     	;# 
   173  0296                     	;# 
   174  0391                     	;# 
   175  0392                     	;# 
   176  0393                     	;# 
   177  039A                     	;# 
   178  039C                     	;# 
   179  039D                     	;# 
   180  039E                     	;# 
   181  039F                     	;# 
   182  0FE4                     	;# 
   183  0FE5                     	;# 
   184  0FE6                     	;# 
   185  0FE7                     	;# 
   186  0FE8                     	;# 
   187  0FE9                     	;# 
   188  0FEA                     	;# 
   189  0FEB                     	;# 
   190  0FED                     	;# 
   191  0FEE                     	;# 
   192  0FEF                     	;# 
   193  0000                     	;# 
   194  0001                     	;# 
   195  0002                     	;# 
   196  0003                     	;# 
   197  0004                     	;# 
   198  0005                     	;# 
   199  0006                     	;# 
   200  0007                     	;# 
   201  0008                     	;# 
   202  0009                     	;# 
   203  000A                     	;# 
   204  000B                     	;# 
   205  000C                     	;# 
   206  000E                     	;# 
   207  0011                     	;# 
   208  0012                     	;# 
   209  0015                     	;# 
   210  0016                     	;# 
   211  0016                     	;# 
   212  0017                     	;# 
   213  0018                     	;# 
   214  0019                     	;# 
   215  001A                     	;# 
   216  001B                     	;# 
   217  001C                     	;# 
   218  001E                     	;# 
   219  001F                     	;# 
   220  008C                     	;# 
   221  008E                     	;# 
   222  0091                     	;# 
   223  0092                     	;# 
   224  0095                     	;# 
   225  0096                     	;# 
   226  0097                     	;# 
   227  0098                     	;# 
   228  0099                     	;# 
   229  009A                     	;# 
   230  009B                     	;# 
   231  009B                     	;# 
   232  009C                     	;# 
   233  009D                     	;# 
   234  009E                     	;# 
   235  010C                     	;# 
   236  010E                     	;# 
   237  0111                     	;# 
   238  0112                     	;# 
   239  0113                     	;# 
   240  0114                     	;# 
   241  0115                     	;# 
   242  0116                     	;# 
   243  0117                     	;# 
   244  0118                     	;# 
   245  0119                     	;# 
   246  011A                     	;# 
   247  011B                     	;# 
   248  011D                     	;# 
   249  011D                     	;# 
   250  018C                     	;# 
   251  018E                     	;# 
   252  0191                     	;# 
   253  0191                     	;# 
   254  0192                     	;# 
   255  0193                     	;# 
   256  0193                     	;# 
   257  0193                     	;# 
   258  0194                     	;# 
   259  0195                     	;# 
   260  0196                     	;# 
   261  0199                     	;# 
   262  019A                     	;# 
   263  019B                     	;# 
   264  019B                     	;# 
   265  019B                     	;# 
   266  019B                     	;# 
   267  019C                     	;# 
   268  019C                     	;# 
   269  019D                     	;# 
   270  019E                     	;# 
   271  019F                     	;# 
   272  020C                     	;# 
   273  020E                     	;# 
   274  0211                     	;# 
   275  0211                     	;# 
   276  0212                     	;# 
   277  0212                     	;# 
   278  0213                     	;# 
   279  0213                     	;# 
   280  0214                     	;# 
   281  0214                     	;# 
   282  0215                     	;# 
   283  0215                     	;# 
   284  0215                     	;# 
   285  0216                     	;# 
   286  0216                     	;# 
   287  0217                     	;# 
   288  0217                     	;# 
   289  0291                     	;# 
   290  0291                     	;# 
   291  0292                     	;# 
   292  0293                     	;# 
   293  0294                     	;# 
   294  0295                     	;# 
   295  0295                     	;# 
   296  0296                     	;# 
   297  0391                     	;# 
   298  0392                     	;# 
   299  0393                     	;# 
   300  039A                     	;# 
   301  039C                     	;# 
   302  039D                     	;# 
   303  039E                     	;# 
   304  039F                     	;# 
   305  0FE4                     	;# 
   306  0FE5                     	;# 
   307  0FE6                     	;# 
   308  0FE7                     	;# 
   309  0FE8                     	;# 
   310  0FE9                     	;# 
   311  0FEA                     	;# 
   312  0FEB                     	;# 
   313  0FED                     	;# 
   314  0FEE                     	;# 
   315  0FEF                     	;# 
   316  0000                     	;# 
   317  0001                     	;# 
   318  0002                     	;# 
   319  0003                     	;# 
   320  0004                     	;# 
   321  0005                     	;# 
   322  0006                     	;# 
   323  0007                     	;# 
   324  0008                     	;# 
   325  0009                     	;# 
   326  000A                     	;# 
   327  000B                     	;# 
   328  000C                     	;# 
   329  000E                     	;# 
   330  0011                     	;# 
   331  0012                     	;# 
   332  0015                     	;# 
   333  0016                     	;# 
   334  0016                     	;# 
   335  0017                     	;# 
   336  0018                     	;# 
   337  0019                     	;# 
   338  001A                     	;# 
   339  001B                     	;# 
   340  001C                     	;# 
   341  001E                     	;# 
   342  001F                     	;# 
   343  008C                     	;# 
   344  008E                     	;# 
   345  0091                     	;# 
   346  0092                     	;# 
   347  0095                     	;# 
   348  0096                     	;# 
   349  0097                     	;# 
   350  0098                     	;# 
   351  0099                     	;# 
   352  009A                     	;# 
   353  009B                     	;# 
   354  009B                     	;# 
   355  009C                     	;# 
   356  009D                     	;# 
   357  009E                     	;# 
   358  010C                     	;# 
   359  010E                     	;# 
   360  0111                     	;# 
   361  0112                     	;# 
   362  0113                     	;# 
   363  0114                     	;# 
   364  0115                     	;# 
   365  0116                     	;# 
   366  0117                     	;# 
   367  0118                     	;# 
   368  0119                     	;# 
   369  011A                     	;# 
   370  011B                     	;# 
   371  011D                     	;# 
   372  011D                     	;# 
   373  018C                     	;# 
   374  018E                     	;# 
   375  0191                     	;# 
   376  0191                     	;# 
   377  0192                     	;# 
   378  0193                     	;# 
   379  0193                     	;# 
   380  0193                     	;# 
   381  0194                     	;# 
   382  0195                     	;# 
   383  0196                     	;# 
   384  0199                     	;# 
   385  019A                     	;# 
   386  019B                     	;# 
   387  019B                     	;# 
   388  019B                     	;# 
   389  019B                     	;# 
   390  019C                     	;# 
   391  019C                     	;# 
   392  019D                     	;# 
   393  019E                     	;# 
   394  019F                     	;# 
   395  020C                     	;# 
   396  020E                     	;# 
   397  0211                     	;# 
   398  0211                     	;# 
   399  0212                     	;# 
   400  0212                     	;# 
   401  0213                     	;# 
   402  0213                     	;# 
   403  0214                     	;# 
   404  0214                     	;# 
   405  0215                     	;# 
   406  0215                     	;# 
   407  0215                     	;# 
   408  0216                     	;# 
   409  0216                     	;# 
   410  0217                     	;# 
   411  0217                     	;# 
   412  0291                     	;# 
   413  0291                     	;# 
   414  0292                     	;# 
   415  0293                     	;# 
   416  0294                     	;# 
   417  0295                     	;# 
   418  0295                     	;# 
   419  0296                     	;# 
   420  0391                     	;# 
   421  0392                     	;# 
   422  0393                     	;# 
   423  039A                     	;# 
   424  039C                     	;# 
   425  039D                     	;# 
   426  039E                     	;# 
   427  039F                     	;# 
   428  0FE4                     	;# 
   429  0FE5                     	;# 
   430  0FE6                     	;# 
   431  0FE7                     	;# 
   432  0FE8                     	;# 
   433  0FE9                     	;# 
   434  0FEA                     	;# 
   435  0FEB                     	;# 
   436  0FED                     	;# 
   437  0FEE                     	;# 
   438  0FEF                     	;# 
   439  0000                     	;# 
   440  0001                     	;# 
   441  0002                     	;# 
   442  0003                     	;# 
   443  0004                     	;# 
   444  0005                     	;# 
   445  0006                     	;# 
   446  0007                     	;# 
   447  0008                     	;# 
   448  0009                     	;# 
   449  000A                     	;# 
   450  000B                     	;# 
   451  000C                     	;# 
   452  000E                     	;# 
   453  0011                     	;# 
   454  0012                     	;# 
   455  0015                     	;# 
   456  0016                     	;# 
   457  0016                     	;# 
   458  0017                     	;# 
   459  0018                     	;# 
   460  0019                     	;# 
   461  001A                     	;# 
   462  001B                     	;# 
   463  001C                     	;# 
   464  001E                     	;# 
   465  001F                     	;# 
   466  008C                     	;# 
   467  008E                     	;# 
   468  0091                     	;# 
   469  0092                     	;# 
   470  0095                     	;# 
   471  0096                     	;# 
   472  0097                     	;# 
   473  0098                     	;# 
   474  0099                     	;# 
   475  009A                     	;# 
   476  009B                     	;# 
   477  009B                     	;# 
   478  009C                     	;# 
   479  009D                     	;# 
   480  009E                     	;# 
   481  010C                     	;# 
   482  010E                     	;# 
   483  0111                     	;# 
   484  0112                     	;# 
   485  0113                     	;# 
   486  0114                     	;# 
   487  0115                     	;# 
   488  0116                     	;# 
   489  0117                     	;# 
   490  0118                     	;# 
   491  0119                     	;# 
   492  011A                     	;# 
   493  011B                     	;# 
   494  011D                     	;# 
   495  011D                     	;# 
   496  018C                     	;# 
   497  018E                     	;# 
   498  0191                     	;# 
   499  0191                     	;# 
   500  0192                     	;# 
   501  0193                     	;# 
   502  0193                     	;# 
   503  0193                     	;# 
   504  0194                     	;# 
   505  0195                     	;# 
   506  0196                     	;# 
   507  0199                     	;# 
   508  019A                     	;# 
   509  019B                     	;# 
   510  019B                     	;# 
   511  019B                     	;# 
   512  019B                     	;# 
   513  019C                     	;# 
   514  019C                     	;# 
   515  019D                     	;# 
   516  019E                     	;# 
   517  019F                     	;# 
   518  020C                     	;# 
   519  020E                     	;# 
   520  0211                     	;# 
   521  0211                     	;# 
   522  0212                     	;# 
   523  0212                     	;# 
   524  0213                     	;# 
   525  0213                     	;# 
   526  0214                     	;# 
   527  0214                     	;# 
   528  0215                     	;# 
   529  0215                     	;# 
   530  0215                     	;# 
   531  0216                     	;# 
   532  0216                     	;# 
   533  0217                     	;# 
   534  0217                     	;# 
   535  0291                     	;# 
   536  0291                     	;# 
   537  0292                     	;# 
   538  0293                     	;# 
   539  0294                     	;# 
   540  0295                     	;# 
   541  0295                     	;# 
   542  0296                     	;# 
   543  0391                     	;# 
   544  0392                     	;# 
   545  0393                     	;# 
   546  039A                     	;# 
   547  039C                     	;# 
   548  039D                     	;# 
   549  039E                     	;# 
   550  039F                     	;# 
   551  0FE4                     	;# 
   552  0FE5                     	;# 
   553  0FE6                     	;# 
   554  0FE7                     	;# 
   555  0FE8                     	;# 
   556  0FE9                     	;# 
   557  0FEA                     	;# 
   558  0FEB                     	;# 
   559  0FED                     	;# 
   560  0FEE                     	;# 
   561  0FEF                     	;# 
   562  0000                     	;# 
   563  0001                     	;# 
   564  0002                     	;# 
   565  0003                     	;# 
   566  0004                     	;# 
   567  0005                     	;# 
   568  0006                     	;# 
   569  0007                     	;# 
   570  0008                     	;# 
   571  0009                     	;# 
   572  000A                     	;# 
   573  000B                     	;# 
   574  000C                     	;# 
   575  000E                     	;# 
   576  0011                     	;# 
   577  0012                     	;# 
   578  0015                     	;# 
   579  0016                     	;# 
   580  0016                     	;# 
   581  0017                     	;# 
   582  0018                     	;# 
   583  0019                     	;# 
   584  001A                     	;# 
   585  001B                     	;# 
   586  001C                     	;# 
   587  001E                     	;# 
   588  001F                     	;# 
   589  008C                     	;# 
   590  008E                     	;# 
   591  0091                     	;# 
   592  0092                     	;# 
   593  0095                     	;# 
   594  0096                     	;# 
   595  0097                     	;# 
   596  0098                     	;# 
   597  0099                     	;# 
   598  009A                     	;# 
   599  009B                     	;# 
   600  009B                     	;# 
   601  009C                     	;# 
   602  009D                     	;# 
   603  009E                     	;# 
   604  010C                     	;# 
   605  010E                     	;# 
   606  0111                     	;# 
   607  0112                     	;# 
   608  0113                     	;# 
   609  0114                     	;# 
   610  0115                     	;# 
   611  0116                     	;# 
   612  0117                     	;# 
   613  0118                     	;# 
   614  0119                     	;# 
   615  011A                     	;# 
   616  011B                     	;# 
   617  011D                     	;# 
   618  011D                     	;# 
   619  018C                     	;# 
   620  018E                     	;# 
   621  0191                     	;# 
   622  0191                     	;# 
   623  0192                     	;# 
   624  0193                     	;# 
   625  0193                     	;# 
   626  0193                     	;# 
   627  0194                     	;# 
   628  0195                     	;# 
   629  0196                     	;# 
   630  0199                     	;# 
   631  019A                     	;# 
   632  019B                     	;# 
   633  019B                     	;# 
   634  019B                     	;# 
   635  019B                     	;# 
   636  019C                     	;# 
   637  019C                     	;# 
   638  019D                     	;# 
   639  019E                     	;# 
   640  019F                     	;# 
   641  020C                     	;# 
   642  020E                     	;# 
   643  0211                     	;# 
   644  0211                     	;# 
   645  0212                     	;# 
   646  0212                     	;# 
   647  0213                     	;# 
   648  0213                     	;# 
   649  0214                     	;# 
   650  0214                     	;# 
   651  0215                     	;# 
   652  0215                     	;# 
   653  0215                     	;# 
   654  0216                     	;# 
   655  0216                     	;# 
   656  0217                     	;# 
   657  0217                     	;# 
   658  0291                     	;# 
   659  0291                     	;# 
   660  0292                     	;# 
   661  0293                     	;# 
   662  0294                     	;# 
   663  0295                     	;# 
   664  0295                     	;# 
   665  0296                     	;# 
   666  0391                     	;# 
   667  0392                     	;# 
   668  0393                     	;# 
   669  039A                     	;# 
   670  039C                     	;# 
   671  039D                     	;# 
   672  039E                     	;# 
   673  039F                     	;# 
   674  0FE4                     	;# 
   675  0FE5                     	;# 
   676  0FE6                     	;# 
   677  0FE7                     	;# 
   678  0FE8                     	;# 
   679  0FE9                     	;# 
   680  0FEA                     	;# 
   681  0FEB                     	;# 
   682  0FED                     	;# 
   683  0FEE                     	;# 
   684  0FEF                     	;# 
   685  0000                     	;# 
   686  0001                     	;# 
   687  0002                     	;# 
   688  0003                     	;# 
   689  0004                     	;# 
   690  0005                     	;# 
   691  0006                     	;# 
   692  0007                     	;# 
   693  0008                     	;# 
   694  0009                     	;# 
   695  000A                     	;# 
   696  000B                     	;# 
   697  000C                     	;# 
   698  000E                     	;# 
   699  0011                     	;# 
   700  0012                     	;# 
   701  0015                     	;# 
   702  0016                     	;# 
   703  0016                     	;# 
   704  0017                     	;# 
   705  0018                     	;# 
   706  0019                     	;# 
   707  001A                     	;# 
   708  001B                     	;# 
   709  001C                     	;# 
   710  001E                     	;# 
   711  001F                     	;# 
   712  008C                     	;# 
   713  008E                     	;# 
   714  0091                     	;# 
   715  0092                     	;# 
   716  0095                     	;# 
   717  0096                     	;# 
   718  0097                     	;# 
   719  0098                     	;# 
   720  0099                     	;# 
   721  009A                     	;# 
   722  009B                     	;# 
   723  009B                     	;# 
   724  009C                     	;# 
   725  009D                     	;# 
   726  009E                     	;# 
   727  010C                     	;# 
   728  010E                     	;# 
   729  0111                     	;# 
   730  0112                     	;# 
   731  0113                     	;# 
   732  0114                     	;# 
   733  0115                     	;# 
   734  0116                     	;# 
   735  0117                     	;# 
   736  0118                     	;# 
   737  0119                     	;# 
   738  011A                     	;# 
   739  011B                     	;# 
   740  011D                     	;# 
   741  011D                     	;# 
   742  018C                     	;# 
   743  018E                     	;# 
   744  0191                     	;# 
   745  0191                     	;# 
   746  0192                     	;# 
   747  0193                     	;# 
   748  0193                     	;# 
   749  0193                     	;# 
   750  0194                     	;# 
   751  0195                     	;# 
   752  0196                     	;# 
   753  0199                     	;# 
   754  019A                     	;# 
   755  019B                     	;# 
   756  019B                     	;# 
   757  019B                     	;# 
   758  019B                     	;# 
   759  019C                     	;# 
   760  019C                     	;# 
   761  019D                     	;# 
   762  019E                     	;# 
   763  019F                     	;# 
   764  020C                     	;# 
   765  020E                     	;# 
   766  0211                     	;# 
   767  0211                     	;# 
   768  0212                     	;# 
   769  0212                     	;# 
   770  0213                     	;# 
   771  0213                     	;# 
   772  0214                     	;# 
   773  0214                     	;# 
   774  0215                     	;# 
   775  0215                     	;# 
   776  0215                     	;# 
   777  0216                     	;# 
   778  0216                     	;# 
   779  0217                     	;# 
   780  0217                     	;# 
   781  0291                     	;# 
   782  0291                     	;# 
   783  0292                     	;# 
   784  0293                     	;# 
   785  0294                     	;# 
   786  0295                     	;# 
   787  0295                     	;# 
   788  0296                     	;# 
   789  0391                     	;# 
   790  0392                     	;# 
   791  0393                     	;# 
   792  039A                     	;# 
   793  039C                     	;# 
   794  039D                     	;# 
   795  039E                     	;# 
   796  039F                     	;# 
   797  0FE4                     	;# 
   798  0FE5                     	;# 
   799  0FE6                     	;# 
   800  0FE7                     	;# 
   801  0FE8                     	;# 
   802  0FE9                     	;# 
   803  0FEA                     	;# 
   804  0FEB                     	;# 
   805  0FED                     	;# 
   806  0FEE                     	;# 
   807  0FEF                     	;# 
   808  0000                     	;# 
   809  0001                     	;# 
   810  0002                     	;# 
   811  0003                     	;# 
   812  0004                     	;# 
   813  0005                     	;# 
   814  0006                     	;# 
   815  0007                     	;# 
   816  0008                     	;# 
   817  0009                     	;# 
   818  000A                     	;# 
   819  000B                     	;# 
   820  000C                     	;# 
   821  000E                     	;# 
   822  0011                     	;# 
   823  0012                     	;# 
   824  0015                     	;# 
   825  0016                     	;# 
   826  0016                     	;# 
   827  0017                     	;# 
   828  0018                     	;# 
   829  0019                     	;# 
   830  001A                     	;# 
   831  001B                     	;# 
   832  001C                     	;# 
   833  001E                     	;# 
   834  001F                     	;# 
   835  008C                     	;# 
   836  008E                     	;# 
   837  0091                     	;# 
   838  0092                     	;# 
   839  0095                     	;# 
   840  0096                     	;# 
   841  0097                     	;# 
   842  0098                     	;# 
   843  0099                     	;# 
   844  009A                     	;# 
   845  009B                     	;# 
   846  009B                     	;# 
   847  009C                     	;# 
   848  009D                     	;# 
   849  009E                     	;# 
   850  010C                     	;# 
   851  010E                     	;# 
   852  0111                     	;# 
   853  0112                     	;# 
   854  0113                     	;# 
   855  0114                     	;# 
   856  0115                     	;# 
   857  0116                     	;# 
   858  0117                     	;# 
   859  0118                     	;# 
   860  0119                     	;# 
   861  011A                     	;# 
   862  011B                     	;# 
   863  011D                     	;# 
   864  011D                     	;# 
   865  018C                     	;# 
   866  018E                     	;# 
   867  0191                     	;# 
   868  0191                     	;# 
   869  0192                     	;# 
   870  0193                     	;# 
   871  0193                     	;# 
   872  0193                     	;# 
   873  0194                     	;# 
   874  0195                     	;# 
   875  0196                     	;# 
   876  0199                     	;# 
   877  019A                     	;# 
   878  019B                     	;# 
   879  019B                     	;# 
   880  019B                     	;# 
   881  019B                     	;# 
   882  019C                     	;# 
   883  019C                     	;# 
   884  019D                     	;# 
   885  019E                     	;# 
   886  019F                     	;# 
   887  020C                     	;# 
   888  020E                     	;# 
   889  0211                     	;# 
   890  0211                     	;# 
   891  0212                     	;# 
   892  0212                     	;# 
   893  0213                     	;# 
   894  0213                     	;# 
   895  0214                     	;# 
   896  0214                     	;# 
   897  0215                     	;# 
   898  0215                     	;# 
   899  0215                     	;# 
   900  0216                     	;# 
   901  0216                     	;# 
   902  0217                     	;# 
   903  0217                     	;# 
   904  0291                     	;# 
   905  0291                     	;# 
   906  0292                     	;# 
   907  0293                     	;# 
   908  0294                     	;# 
   909  0295                     	;# 
   910  0295                     	;# 
   911  0296                     	;# 
   912  0391                     	;# 
   913  0392                     	;# 
   914  0393                     	;# 
   915  039A                     	;# 
   916  039C                     	;# 
   917  039D                     	;# 
   918  039E                     	;# 
   919  039F                     	;# 
   920  0FE4                     	;# 
   921  0FE5                     	;# 
   922  0FE6                     	;# 
   923  0FE7                     	;# 
   924  0FE8                     	;# 
   925  0FE9                     	;# 
   926  0FEA                     	;# 
   927  0FEB                     	;# 
   928  0FED                     	;# 
   929  0FEE                     	;# 
   930  0FEF                     	;# 
   931  0000                     	;# 
   932  0001                     	;# 
   933  0002                     	;# 
   934  0003                     	;# 
   935  0004                     	;# 
   936  0005                     	;# 
   937  0006                     	;# 
   938  0007                     	;# 
   939  0008                     	;# 
   940  0009                     	;# 
   941  000A                     	;# 
   942  000B                     	;# 
   943  000C                     	;# 
   944  000E                     	;# 
   945  0011                     	;# 
   946  0012                     	;# 
   947  0015                     	;# 
   948  0016                     	;# 
   949  0016                     	;# 
   950  0017                     	;# 
   951  0018                     	;# 
   952  0019                     	;# 
   953  001A                     	;# 
   954  001B                     	;# 
   955  001C                     	;# 
   956  001E                     	;# 
   957  001F                     	;# 
   958  008C                     	;# 
   959  008E                     	;# 
   960  0091                     	;# 
   961  0092                     	;# 
   962  0095                     	;# 
   963  0096                     	;# 
   964  0097                     	;# 
   965  0098                     	;# 
   966  0099                     	;# 
   967  009A                     	;# 
   968  009B                     	;# 
   969  009B                     	;# 
   970  009C                     	;# 
   971  009D                     	;# 
   972  009E                     	;# 
   973  010C                     	;# 
   974  010E                     	;# 
   975  0111                     	;# 
   976  0112                     	;# 
   977  0113                     	;# 
   978  0114                     	;# 
   979  0115                     	;# 
   980  0116                     	;# 
   981  0117                     	;# 
   982  0118                     	;# 
   983  0119                     	;# 
   984  011A                     	;# 
   985  011B                     	;# 
   986  011D                     	;# 
   987  011D                     	;# 
   988  018C                     	;# 
   989  018E                     	;# 
   990  0191                     	;# 
   991  0191                     	;# 
   992  0192                     	;# 
   993  0193                     	;# 
   994  0193                     	;# 
   995  0193                     	;# 
   996  0194                     	;# 
   997  0195                     	;# 
   998  0196                     	;# 
   999  0199                     	;# 
  1000  019A                     	;# 
  1001  019B                     	;# 
  1002  019B                     	;# 
  1003  019B                     	;# 
  1004  019B                     	;# 
  1005  019C                     	;# 
  1006  019C                     	;# 
  1007  019D                     	;# 
  1008  019E                     	;# 
  1009  019F                     	;# 
  1010  020C                     	;# 
  1011  020E                     	;# 
  1012  0211                     	;# 
  1013  0211                     	;# 
  1014  0212                     	;# 
  1015  0212                     	;# 
  1016  0213                     	;# 
  1017  0213                     	;# 
  1018  0214                     	;# 
  1019  0214                     	;# 
  1020  0215                     	;# 
  1021  0215                     	;# 
  1022  0215                     	;# 
  1023  0216                     	;# 
  1024  0216                     	;# 
  1025  0217                     	;# 
  1026  0217                     	;# 
  1027  0291                     	;# 
  1028  0291                     	;# 
  1029  0292                     	;# 
  1030  0293                     	;# 
  1031  0294                     	;# 
  1032  0295                     	;# 
  1033  0295                     	;# 
  1034  0296                     	;# 
  1035  0391                     	;# 
  1036  0392                     	;# 
  1037  0393                     	;# 
  1038  039A                     	;# 
  1039  039C                     	;# 
  1040  039D                     	;# 
  1041  039E                     	;# 
  1042  039F                     	;# 
  1043  0FE4                     	;# 
  1044  0FE5                     	;# 
  1045  0FE6                     	;# 
  1046  0FE7                     	;# 
  1047  0FE8                     	;# 
  1048  0FE9                     	;# 
  1049  0FEA                     	;# 
  1050  0FEB                     	;# 
  1051  0FED                     	;# 
  1052  0FEE                     	;# 
  1053  0FEF                     	;# 
  1054  0000                     	;# 
  1055  0001                     	;# 
  1056  0002                     	;# 
  1057  0003                     	;# 
  1058  0004                     	;# 
  1059  0005                     	;# 
  1060  0006                     	;# 
  1061  0007                     	;# 
  1062  0008                     	;# 
  1063  0009                     	;# 
  1064  000A                     	;# 
  1065  000B                     	;# 
  1066  000C                     	;# 
  1067  000E                     	;# 
  1068  0011                     	;# 
  1069  0012                     	;# 
  1070  0015                     	;# 
  1071  0016                     	;# 
  1072  0016                     	;# 
  1073  0017                     	;# 
  1074  0018                     	;# 
  1075  0019                     	;# 
  1076  001A                     	;# 
  1077  001B                     	;# 
  1078  001C                     	;# 
  1079  001E                     	;# 
  1080  001F                     	;# 
  1081  008C                     	;# 
  1082  008E                     	;# 
  1083  0091                     	;# 
  1084  0092                     	;# 
  1085  0095                     	;# 
  1086  0096                     	;# 
  1087  0097                     	;# 
  1088  0098                     	;# 
  1089  0099                     	;# 
  1090  009A                     	;# 
  1091  009B                     	;# 
  1092  009B                     	;# 
  1093  009C                     	;# 
  1094  009D                     	;# 
  1095  009E                     	;# 
  1096  010C                     	;# 
  1097  010E                     	;# 
  1098  0111                     	;# 
  1099  0112                     	;# 
  1100  0113                     	;# 
  1101  0114                     	;# 
  1102  0115                     	;# 
  1103  0116                     	;# 
  1104  0117                     	;# 
  1105  0118                     	;# 
  1106  0119                     	;# 
  1107  011A                     	;# 
  1108  011B                     	;# 
  1109  011D                     	;# 
  1110  011D                     	;# 
  1111  018C                     	;# 
  1112  018E                     	;# 
  1113  0191                     	;# 
  1114  0191                     	;# 
  1115  0192                     	;# 
  1116  0193                     	;# 
  1117  0193                     	;# 
  1118  0193                     	;# 
  1119  0194                     	;# 
  1120  0195                     	;# 
  1121  0196                     	;# 
  1122  0199                     	;# 
  1123  019A                     	;# 
  1124  019B                     	;# 
  1125  019B                     	;# 
  1126  019B                     	;# 
  1127  019B                     	;# 
  1128  019C                     	;# 
  1129  019C                     	;# 
  1130  019D                     	;# 
  1131  019E                     	;# 
  1132  019F                     	;# 
  1133  020C                     	;# 
  1134  020E                     	;# 
  1135  0211                     	;# 
  1136  0211                     	;# 
  1137  0212                     	;# 
  1138  0212                     	;# 
  1139  0213                     	;# 
  1140  0213                     	;# 
  1141  0214                     	;# 
  1142  0214                     	;# 
  1143  0215                     	;# 
  1144  0215                     	;# 
  1145  0215                     	;# 
  1146  0216                     	;# 
  1147  0216                     	;# 
  1148  0217                     	;# 
  1149  0217                     	;# 
  1150  0291                     	;# 
  1151  0291                     	;# 
  1152  0292                     	;# 
  1153  0293                     	;# 
  1154  0294                     	;# 
  1155  0295                     	;# 
  1156  0295                     	;# 
  1157  0296                     	;# 
  1158  0391                     	;# 
  1159  0392                     	;# 
  1160  0393                     	;# 
  1161  039A                     	;# 
  1162  039C                     	;# 
  1163  039D                     	;# 
  1164  039E                     	;# 
  1165  039F                     	;# 
  1166  0FE4                     	;# 
  1167  0FE5                     	;# 
  1168  0FE6                     	;# 
  1169  0FE7                     	;# 
  1170  0FE8                     	;# 
  1171  0FE9                     	;# 
  1172  0FEA                     	;# 
  1173  0FEB                     	;# 
  1174  0FED                     	;# 
  1175  0FEE                     	;# 
  1176  0FEF                     	;# 
  1177  000E                     _PORTC	set	14
  1178  0015                     _TMR0	set	21
  1179  005F                     _GIE	set	95
  1180  005E                     _PEIE	set	94
  1181  0065                     _RA5	set	101
  1182  008D                     _RCIF	set	141
  1183  005D                     _TMR0IE	set	93
  1184  005A                     _TMR0IF	set	90
  1185  008C                     _TXIF	set	140
  1186  009D                     _ADCON0	set	157
  1187  009E                     _ADCON1	set	158
  1188  009C                     _ADRESH	set	156
  1189  009B                     _ADRESL	set	155
  1190  0095                     _OPTION_REGbits	set	149
  1191  0099                     _OSCCON	set	153
  1192  009A                     _OSCSTAT	set	154
  1193  0098                     _OSCTUNE	set	152
  1194  008C                     _TRISA	set	140
  1195  008E                     _TRISC	set	142
  1196  04E9                     _ADGO	set	1257
  1197  04A8                     _PS0	set	1192
  1198  04A9                     _PS1	set	1193
  1199  04AA                     _PS2	set	1194
  1200  04AB                     _PSA	set	1195
  1201  048D                     _RCIE	set	1165
  1202  04AD                     _TMR0CS	set	1197
  1203  048C                     _TXIE	set	1164
  1204  011D                     _APFCON	set	285
  1205  010C                     _LATA	set	268
  1206  010E                     _LATC	set	270
  1207  08EF                     _RXDTSEL	set	2287
  1208  08EA                     _TXCKSEL	set	2282
  1209  018C                     _ANSELA	set	396
  1210  018E                     _ANSELC	set	398
  1211  0199                     _RCREG	set	409
  1212  019C                     _SPBRGH	set	412
  1213  019B                     _SPBRGL	set	411
  1214  019A                     _TXREG	set	410
  1215  0CFB                     _BRG16	set	3323
  1216  0CF2                     _BRGH	set	3314
  1217  0CEC                     _CREN	set	3308
  1218  0CE9                     _OERR	set	3305
  1219  0CEF                     _SPEN	set	3311
  1220  0CF4                     _SYNC	set	3316
  1221  0CF5                     _TXEN	set	3317
  1222  020C                     _WPUA	set	524
  1223  020E                     _WPUC	set	526
  1224  039A                     _CLKRCON	set	922
  1225                           
  1226                           ; #config settings
  1227  0000                     
  1228                           	psect	cinit
  1229  0056                     start_initialization:	
  1230  0056                     __initialization:	
  1231                           
  1232                           ; Clear objects allocated to COMMON
  1233  0056  01F0               	clrf	__pbssCOMMON& (0+127)
  1234  0057  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  1235  0058  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  1236  0059  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  1237  005A  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  1238                           
  1239                           ; Clear objects allocated to BANK0
  1240  005B  3020               	movlw	low __pbssBANK0
  1241  005C  0084               	movwf	4
  1242  005D  3000               	movlw	high __pbssBANK0
  1243  005E  0085               	movwf	5
  1244  005F  302C               	movlw	44
  1245  0060  2409               	fcall	clear_ram0
  1246  0061                     end_of_initialization:	
  1247                           ;End of C runtime variable initialization code
  1248                           
  1249  0061                     __end_of__initialization:	
  1250  0061  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1251  0062  0020               	movlb	0
  1252  0063  2A48               	ljmp	_main	;jump to C main() function
  1253                           
  1254                           	psect	bssCOMMON
  1255  0070                     __pbssCOMMON:	
  1256  0070                     _TIMER0_timeout:	
  1257  0070                     	ds	2
  1258  0072                     _USART_tx_flag:	
  1259  0072                     	ds	1
  1260  0073                     _USART_tx_index:	
  1261  0073                     	ds	1
  1262  0074                     _USART_tx_length:	
  1263  0074                     	ds	1
  1264                           
  1265                           	psect	bssBANK0
  1266  0020                     __pbssBANK0:	
  1267  0020                     _USART_rx_data:	
  1268  0020                     	ds	15
  1269  002F                     _USART_tx_data:	
  1270  002F                     	ds	15
  1271  003E                     _TIMER0_flag:	
  1272  003E                     	ds	1
  1273  003F                     _USART_rx_flag:	
  1274  003F                     	ds	1
  1275  0040                     _USART_rx_index:	
  1276  0040                     	ds	1
  1277  0041                     _mess_rec_size:	
  1278  0041                     	ds	1
  1279  0042                     _mess_rec:	
  1280  0042                     	ds	10
  1281                           
  1282                           	psect	clrtext
  1283  0409                     clear_ram0:	
  1284                           ;	Called with FSR0 containing the base address, and
  1285                           ;	WREG with the size to clear
  1286                           
  1287  0409  0064               	clrwdt	;clear the watchdog before getting into this loop
  1288  040A                     clrloop0:	
  1289  040A  0180               	clrf	0	;clear RAM location pointed to by FSR
  1290  040B  3101               	addfsr 0,1
  1291  040C  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1292  040D  2C0A               	goto	clrloop0	;have we reached the end yet?
  1293  040E  3400               	retlw	0	;all done for this memory range, return
  1294                           
  1295                           	psect	cstackCOMMON
  1296  0075                     __pcstackCOMMON:	
  1297  0075                     ?_OSCILLATOR_Initialize:	
  1298  0075                     ?_setup_TMR0:	
  1299                           ; 1 bytes @ 0x0
  1300                           
  1301  0075                     ?_start_TX_USART_ISR:	
  1302                           ; 1 bytes @ 0x0
  1303                           
  1304  0075                     ?_start_RX_USART_ISR:	
  1305                           ; 1 bytes @ 0x0
  1306                           
  1307  0075                     ?_start_RCM:	
  1308                           ; 1 bytes @ 0x0
  1309                           
  1310  0075                     ?_setup_ADC:	
  1311                           ; 1 bytes @ 0x0
  1312                           
  1313  0075                     ?_mess_handler:	
  1314                           ; 1 bytes @ 0x0
  1315                           
  1316  0075                     ?_stop_TMR0_ISR:	
  1317                           ; 1 bytes @ 0x0
  1318                           
  1319  0075                     ??_stop_TMR0_ISR:	
  1320                           ; 1 bytes @ 0x0
  1321                           
  1322  0075                     ?_start_TMR0_ISR:	
  1323                           ; 1 bytes @ 0x0
  1324                           
  1325  0075                     ??_start_TMR0_ISR:	
  1326                           ; 1 bytes @ 0x0
  1327                           
  1328  0075                     ?_config_ASIC:	
  1329                           ; 1 bytes @ 0x0
  1330                           
  1331  0075                     ?_read_ADC_channels:	
  1332                           ; 1 bytes @ 0x0
  1333                           
  1334  0075                     ?_measure_Impedance:	
  1335                           ; 1 bytes @ 0x0
  1336                           
  1337  0075                     ?_measure_Impedance_no_offset:	
  1338                           ; 1 bytes @ 0x0
  1339                           
  1340  0075                     ?_PIN_MANAGER_Initialize:	
  1341                           ; 1 bytes @ 0x0
  1342                           
  1343  0075                     ?_SYSTEM_Initialize:	
  1344                           ; 1 bytes @ 0x0
  1345                           
  1346  0075                     ?_main:	
  1347                           ; 1 bytes @ 0x0
  1348                           
  1349  0075                     ?_isr:	
  1350                           ; 1 bytes @ 0x0
  1351                           
  1352  0075                     ?_close_RX_USART:	
  1353                           ; 1 bytes @ 0x0
  1354                           
  1355  0075                     ?i1_start_RX_USART_ISR:	
  1356                           ; 1 bytes @ 0x0
  1357                           
  1358  0075                     ??i1_start_RX_USART_ISR:	
  1359                           ; 1 bytes @ 0x0
  1360                           
  1361                           
  1362                           ; 1 bytes @ 0x0
  1363  0075                     	ds	2
  1364  0077                     start_TMR0_ISR@val:	
  1365                           
  1366                           ; 1 bytes @ 0x2
  1367  0077                     	ds	1
  1368  0078                     ??_isr:	
  1369                           
  1370                           ; 1 bytes @ 0x3
  1371  0078                     	ds	2
  1372                           
  1373                           	psect	cstackBANK0
  1374  004C                     __pcstackBANK0:	
  1375  004C                     ??_OSCILLATOR_Initialize:	
  1376  004C                     ??_setup_TMR0:	
  1377                           ; 1 bytes @ 0x0
  1378                           
  1379  004C                     ??_start_TX_USART_ISR:	
  1380                           ; 1 bytes @ 0x0
  1381                           
  1382  004C                     ??_start_RX_USART_ISR:	
  1383                           ; 1 bytes @ 0x0
  1384                           
  1385  004C                     ??_start_RCM:	
  1386                           ; 1 bytes @ 0x0
  1387                           
  1388  004C                     ??_setup_ADC:	
  1389                           ; 1 bytes @ 0x0
  1390                           
  1391  004C                     ??_PIN_MANAGER_Initialize:	
  1392                           ; 1 bytes @ 0x0
  1393                           
  1394  004C                     ??_SYSTEM_Initialize:	
  1395                           ; 1 bytes @ 0x0
  1396                           
  1397  004C                     ?_VIN_config:	
  1398                           ; 1 bytes @ 0x0
  1399                           
  1400  004C                     ??_close_RX_USART:	
  1401                           ; 1 bytes @ 0x0
  1402                           
  1403  004C                     ?_lputs_ISR:	
  1404                           ; 1 bytes @ 0x0
  1405                           
  1406  004C                     ?_ADC_2:	
  1407                           ; 1 bytes @ 0x0
  1408                           
  1409  004C                     ?_ADC_4:	
  1410                           ; 2 bytes @ 0x0
  1411                           
  1412  004C                     ?_ADC_5:	
  1413                           ; 2 bytes @ 0x0
  1414                           
  1415  004C                     lputs_ISR@length:	
  1416                           ; 2 bytes @ 0x0
  1417                           
  1418  004C                     VIN_config@conf:	
  1419                           ; 1 bytes @ 0x0
  1420                           
  1421                           
  1422                           ; 6 bytes @ 0x0
  1423  004C                     	ds	1
  1424  004D                     ??_lputs_ISR:	
  1425                           
  1426                           ; 1 bytes @ 0x1
  1427  004D                     	ds	1
  1428  004E                     ??_ADC_2:	
  1429  004E                     ??_ADC_4:	
  1430                           ; 1 bytes @ 0x2
  1431                           
  1432  004E                     ??_ADC_5:	
  1433                           ; 1 bytes @ 0x2
  1434                           
  1435                           
  1436                           ; 1 bytes @ 0x2
  1437  004E                     	ds	1
  1438  004F                     lputs_ISR@data:	
  1439                           
  1440                           ; 1 bytes @ 0x3
  1441  004F                     	ds	1
  1442  0050                     lputs_ISR@i:	
  1443  0050                     ADC_2@ADC_value:	
  1444                           ; 1 bytes @ 0x4
  1445                           
  1446  0050                     ADC_4@ADC_value:	
  1447                           ; 2 bytes @ 0x4
  1448                           
  1449  0050                     ADC_5@ADC_value:	
  1450                           ; 2 bytes @ 0x4
  1451                           
  1452                           
  1453                           ; 2 bytes @ 0x4
  1454  0050                     	ds	2
  1455  0052                     ??_read_ADC_channels:	
  1456  0052                     ??_VIN_config:	
  1457                           ; 1 bytes @ 0x6
  1458                           
  1459                           
  1460                           ; 1 bytes @ 0x6
  1461  0052                     	ds	1
  1462  0053                     VIN_config@i:	
  1463  0053                     read_ADC_channels@aux:	
  1464                           ; 1 bytes @ 0x7
  1465                           
  1466                           
  1467                           ; 7 bytes @ 0x7
  1468  0053                     	ds	1
  1469  0054                     VIN_config@out:	
  1470                           
  1471                           ; 1 bytes @ 0x8
  1472  0054                     	ds	1
  1473  0055                     ??_config_ASIC:	
  1474  0055                     ??_measure_Impedance:	
  1475                           ; 1 bytes @ 0x9
  1476                           
  1477  0055                     ??_measure_Impedance_no_offset:	
  1478                           ; 1 bytes @ 0x9
  1479                           
  1480                           
  1481                           ; 1 bytes @ 0x9
  1482  0055                     	ds	1
  1483  0056                     config_ASIC@asic:	
  1484  0056                     measure_Impedance@aux:	
  1485                           ; 6 bytes @ 0xA
  1486                           
  1487  0056                     measure_Impedance_no_offset@aux:	
  1488                           ; 13 bytes @ 0xA
  1489                           
  1490                           
  1491                           ; 13 bytes @ 0xA
  1492  0056                     	ds	4
  1493  005A                     read_ADC_channels@value1:	
  1494                           
  1495                           ; 2 bytes @ 0xE
  1496  005A                     	ds	2
  1497  005C                     read_ADC_channels@value2:	
  1498                           
  1499                           ; 2 bytes @ 0x10
  1500  005C                     	ds	2
  1501  005E                     read_ADC_channels@value3:	
  1502                           
  1503                           ; 2 bytes @ 0x12
  1504  005E                     	ds	5
  1505  0063                     measure_Impedance@value1:	
  1506  0063                     measure_Impedance_no_offset@value1:	
  1507                           ; 2 bytes @ 0x17
  1508                           
  1509                           
  1510                           ; 2 bytes @ 0x17
  1511  0063                     	ds	2
  1512  0065                     measure_Impedance@value2:	
  1513  0065                     measure_Impedance_no_offset@value2:	
  1514                           ; 2 bytes @ 0x19
  1515                           
  1516                           
  1517                           ; 2 bytes @ 0x19
  1518  0065                     	ds	2
  1519  0067                     measure_Impedance@asic:	
  1520  0067                     measure_Impedance_no_offset@asic:	
  1521                           ; 6 bytes @ 0x1B
  1522                           
  1523                           
  1524                           ; 6 bytes @ 0x1B
  1525  0067                     	ds	6
  1526  006D                     ??_mess_handler:	
  1527                           
  1528                           ; 1 bytes @ 0x21
  1529  006D                     	ds	1
  1530  006E                     ??_main:	
  1531                           
  1532                           ; 1 bytes @ 0x22
  1533  006E                     	ds	1
  1534  006F                     main@i:	
  1535                           
  1536                           ; 1 bytes @ 0x23
  1537  006F                     	ds	1
  1538                           
  1539                           	psect	maintext
  1540  0248                     __pmaintext:	
  1541 ;;
  1542 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1543 ;;
  1544 ;; *************** function _main *****************
  1545 ;; Defined at:
  1546 ;;		line 17 in file "main.c"
  1547 ;; Parameters:    Size  Location     Type
  1548 ;;		None
  1549 ;; Auto vars:     Size  Location     Type
  1550 ;;  i               1   35[BANK0 ] unsigned char 
  1551 ;; Return value:  Size  Location     Type
  1552 ;;                  1    wreg      void 
  1553 ;; Registers used:
  1554 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1555 ;; Tracked objects:
  1556 ;;		On entry : B1F/0
  1557 ;;		On exit  : 0/0
  1558 ;;		Unchanged: 0/0
  1559 ;; Data sizes:     COMMON   BANK0   BANK1
  1560 ;;      Params:         0       0       0
  1561 ;;      Locals:         0       1       0
  1562 ;;      Temps:          0       1       0
  1563 ;;      Totals:         0       2       0
  1564 ;;Total ram usage:        2 bytes
  1565 ;; Hardware stack levels required when called:    6
  1566 ;; This function calls:
  1567 ;;		_SYSTEM_Initialize
  1568 ;;		_mess_handler
  1569 ;;		_setup_ADC
  1570 ;;		_setup_TMR0
  1571 ;;		_start_RCM
  1572 ;;		_start_RX_USART_ISR
  1573 ;;		_start_TX_USART_ISR
  1574 ;; This function is called by:
  1575 ;;		Startup code after reset
  1576 ;; This function uses a non-reentrant model
  1577 ;;
  1578                           
  1579                           
  1580                           ;psect for function _main
  1581  0248                     _main:	
  1582                           
  1583                           ;main.c: 19: unsigned char i;
  1584                           ;main.c: 21: SYSTEM_Initialize();
  1585                           
  1586                           ;incstack = 0
  1587                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1588  0248  2424               	fcall	_SYSTEM_Initialize
  1589                           
  1590                           ;main.c: 22: setup_TMR0();
  1591  0249  2402               	fcall	_setup_TMR0
  1592                           
  1593                           ;main.c: 23: start_TX_USART_ISR();
  1594  024A  23F3               	fcall	_start_TX_USART_ISR
  1595                           
  1596                           ;main.c: 24: start_RX_USART_ISR();
  1597  024B  23C1               	fcall	_start_RX_USART_ISR
  1598                           
  1599                           ;main.c: 25: start_RCM();
  1600  024C  2420               	fcall	_start_RCM
  1601                           
  1602                           ;main.c: 26: setup_ADC();
  1603  024D  240F               	fcall	_setup_ADC
  1604                           
  1605                           ;main.c: 28: RA5 = 0;
  1606  024E  0020               	movlb	0	; select bank0
  1607  024F  128C               	bcf	12,5	;volatile
  1608                           
  1609                           ;main.c: 29: _delay((unsigned long)((150)*(500000/4000.0)));
  1610  0250  3019               	movlw	25
  1611  0251  0020               	movlb	0	; select bank0
  1612  0252  00EE               	movwf	??_main
  1613  0253  3058               	movlw	88
  1614  0254                     u997:	
  1615  0254  0B89               	decfsz	9,f
  1616  0255  2A54               	goto	u997
  1617  0256  0BEE               	decfsz	??_main,f
  1618  0257  2A54               	goto	u997
  1619  0258  0000               	nop
  1620                           
  1621                           ;main.c: 30: RA5 = 1;
  1622  0259  0020               	movlb	0	; select bank0
  1623  025A  168C               	bsf	12,5	;volatile
  1624  025B                     l108:	
  1625                           ;main.c: 35: while(1) {
  1626                           
  1627  025B  0064               	clrwdt	;# 
  1628                           
  1629                           ;main.c: 39: if (TIMER0_flag) {
  1630  025C  0020               	movlb	0	; select bank0
  1631  025D  083E               	movf	_TIMER0_flag,w	;volatile
  1632  025E  1903               	btfsc	3,2
  1633  025F  2A5B               	goto	l108
  1634                           
  1635                           ;main.c: 40: TIMER0_flag = 0;
  1636  0260  01BE               	clrf	_TIMER0_flag	;volatile
  1637                           
  1638                           ;main.c: 42: if (USART_rx_index > 10) {
  1639  0261  300B               	movlw	11
  1640  0262  0240               	subwf	_USART_rx_index,w	;volatile
  1641  0263  1C03               	skipc
  1642  0264  2A67               	goto	l2259
  1643                           
  1644                           ;main.c: 43: USART_rx_index = 0;
  1645  0265  01C0               	clrf	_USART_rx_index	;volatile
  1646                           
  1647                           ;main.c: 44: continue;
  1648  0266  2A5B               	goto	l108
  1649  0267                     l2259:	
  1650                           
  1651                           ;main.c: 45: }
  1652                           ;main.c: 47: if(USART_rx_index == 0)
  1653  0267  0840               	movf	_USART_rx_index,w	;volatile
  1654  0268  1903               	btfsc	3,2
  1655                           
  1656                           ;main.c: 48: continue;
  1657  0269  2A5B               	goto	l108
  1658                           
  1659                           ;main.c: 51: mess_rec_size = USART_rx_index;
  1660  026A  0840               	movf	_USART_rx_index,w	;volatile
  1661  026B  00EE               	movwf	??_main
  1662  026C  086E               	movf	??_main,w
  1663  026D  00C1               	movwf	_mess_rec_size	;volatile
  1664                           
  1665                           ;main.c: 53: for (i = 0; i < mess_rec_size; i++)
  1666  026E  01EF               	clrf	main@i
  1667  026F                     l2271:	
  1668  026F  0841               	movf	_mess_rec_size,w	;volatile
  1669  0270  026F               	subwf	main@i,w
  1670  0271  1803               	btfsc	3,0
  1671  0272  2A84               	goto	l2273
  1672                           
  1673                           ;main.c: 54: mess_rec[i] = USART_rx_data[i];
  1674  0273  086F               	movf	main@i,w
  1675  0274  3E20               	addlw	(low (_USART_rx_data| 0))& (0+255)
  1676  0275  0086               	movwf	6
  1677  0276  0187               	clrf	7
  1678  0277  0801               	movf	1,w
  1679  0278  00EE               	movwf	??_main
  1680  0279  086F               	movf	main@i,w
  1681  027A  3E42               	addlw	(low (_mess_rec| 0))& (0+255)
  1682  027B  0086               	movwf	6
  1683  027C  0187               	clrf	7
  1684  027D  086E               	movf	??_main,w
  1685  027E  0081               	movwf	1
  1686  027F  3001               	movlw	1
  1687  0280  00EE               	movwf	??_main
  1688  0281  086E               	movf	??_main,w
  1689  0282  07EF               	addwf	main@i,f
  1690  0283  2A6F               	goto	l2271
  1691  0284                     l2273:	
  1692                           
  1693                           ;main.c: 57: mess_handler();
  1694  0284  231B               	fcall	_mess_handler
  1695  0285  2A5B               	goto	l108
  1696  0286                     __end_of_main:	
  1697                           
  1698                           	psect	text1
  1699  03F3                     __ptext1:	
  1700 ;; *************** function _start_TX_USART_ISR *****************
  1701 ;; Defined at:
  1702 ;;		line 100 in file "USART1823.c"
  1703 ;; Parameters:    Size  Location     Type
  1704 ;;		None
  1705 ;; Auto vars:     Size  Location     Type
  1706 ;;		None
  1707 ;; Return value:  Size  Location     Type
  1708 ;;                  1    wreg      void 
  1709 ;; Registers used:
  1710 ;;		wreg, status,2
  1711 ;; Tracked objects:
  1712 ;;		On entry : 0/0
  1713 ;;		On exit  : 0/0
  1714 ;;		Unchanged: 0/0
  1715 ;; Data sizes:     COMMON   BANK0   BANK1
  1716 ;;      Params:         0       0       0
  1717 ;;      Locals:         0       0       0
  1718 ;;      Temps:          0       0       0
  1719 ;;      Totals:         0       0       0
  1720 ;;Total ram usage:        0 bytes
  1721 ;; Hardware stack levels used:    1
  1722 ;; Hardware stack levels required when called:    2
  1723 ;; This function calls:
  1724 ;;		Nothing
  1725 ;; This function is called by:
  1726 ;;		_main
  1727 ;; This function uses a non-reentrant model
  1728 ;;
  1729                           
  1730                           
  1731                           ;psect for function _start_TX_USART_ISR
  1732  03F3                     _start_TX_USART_ISR:	
  1733                           
  1734                           ;USART1823.c: 102: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  1735                           
  1736                           ;incstack = 0
  1737                           ; Regs used in _start_TX_USART_ISR: [wreg+status,2]
  1738  03F3  0023               	movlb	3	; select bank3
  1739  03F4  151E               	bsf	30,2	;volatile
  1740  03F5  159F               	bsf	31,3	;volatile
  1741  03F6  019C               	clrf	28	;volatile
  1742  03F7  300C               	movlw	12
  1743  03F8  009B               	movwf	27	;volatile
  1744                           
  1745                           ;USART1823.c: 103: SYNC = 0;
  1746  03F9  121E               	bcf	30,4	;volatile
  1747                           
  1748                           ;USART1823.c: 104: SPEN = 1;
  1749  03FA  179D               	bsf	29,7	;volatile
  1750                           
  1751                           ;USART1823.c: 105: TXEN = 1;
  1752  03FB  169E               	bsf	30,5	;volatile
  1753                           
  1754                           ;USART1823.c: 107: USART_tx_flag = 0;
  1755  03FC  01F2               	clrf	_USART_tx_flag	;volatile
  1756                           
  1757                           ;USART1823.c: 108: USART_tx_index = 0;
  1758  03FD  01F3               	clrf	_USART_tx_index	;volatile
  1759                           
  1760                           ;USART1823.c: 109: USART_tx_length = 0;
  1761  03FE  01F4               	clrf	_USART_tx_length	;volatile
  1762                           
  1763                           ;USART1823.c: 112: PEIE = 1;
  1764  03FF  170B               	bsf	11,6	;volatile
  1765                           
  1766                           ;USART1823.c: 113: GIE = 1;
  1767  0400  178B               	bsf	11,7	;volatile
  1768  0401  0008               	return
  1769  0402                     __end_of_start_TX_USART_ISR:	
  1770                           
  1771                           	psect	text2
  1772  03C1                     __ptext2:	
  1773 ;; *************** function _start_RX_USART_ISR *****************
  1774 ;; Defined at:
  1775 ;;		line 82 in file "USART1823.c"
  1776 ;; Parameters:    Size  Location     Type
  1777 ;;		None
  1778 ;; Auto vars:     Size  Location     Type
  1779 ;;		None
  1780 ;; Return value:  Size  Location     Type
  1781 ;;                  1    wreg      void 
  1782 ;; Registers used:
  1783 ;;		wreg, status,2
  1784 ;; Tracked objects:
  1785 ;;		On entry : 0/0
  1786 ;;		On exit  : 0/0
  1787 ;;		Unchanged: 0/0
  1788 ;; Data sizes:     COMMON   BANK0   BANK1
  1789 ;;      Params:         0       0       0
  1790 ;;      Locals:         0       0       0
  1791 ;;      Temps:          0       0       0
  1792 ;;      Totals:         0       0       0
  1793 ;;Total ram usage:        0 bytes
  1794 ;; Hardware stack levels used:    1
  1795 ;; Hardware stack levels required when called:    2
  1796 ;; This function calls:
  1797 ;;		Nothing
  1798 ;; This function is called by:
  1799 ;;		_main
  1800 ;; This function uses a non-reentrant model
  1801 ;;
  1802                           
  1803                           
  1804                           ;psect for function _start_RX_USART_ISR
  1805  03C1                     _start_RX_USART_ISR:	
  1806                           
  1807                           ;USART1823.c: 85: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  1808                           
  1809                           ;incstack = 0
  1810                           ; Regs used in _start_RX_USART_ISR: [wreg+status,2]
  1811  03C1  0023               	movlb	3	; select bank3
  1812  03C2  151E               	bsf	30,2	;volatile
  1813  03C3  159F               	bsf	31,3	;volatile
  1814  03C4  019C               	clrf	28	;volatile
  1815  03C5  300C               	movlw	12
  1816  03C6  009B               	movwf	27	;volatile
  1817                           
  1818                           ;USART1823.c: 87: SYNC = 0;
  1819  03C7  121E               	bcf	30,4	;volatile
  1820                           
  1821                           ;USART1823.c: 88: SPEN = 1;
  1822  03C8  179D               	bsf	29,7	;volatile
  1823                           
  1824                           ;USART1823.c: 89: CREN = 1;
  1825  03C9  161D               	bsf	29,4	;volatile
  1826                           
  1827                           ;USART1823.c: 91: USART_rx_flag = 0;
  1828  03CA  0020               	movlb	0	; select bank0
  1829  03CB  01BF               	clrf	_USART_rx_flag	;volatile
  1830                           
  1831                           ;USART1823.c: 92: USART_rx_index = 0;
  1832  03CC  01C0               	clrf	_USART_rx_index	;volatile
  1833                           
  1834                           ;USART1823.c: 94: RCIE = 1;
  1835  03CD  0021               	movlb	1	; select bank1
  1836  03CE  1691               	bsf	17,5	;volatile
  1837                           
  1838                           ;USART1823.c: 95: PEIE = 1;
  1839  03CF  170B               	bsf	11,6	;volatile
  1840                           
  1841                           ;USART1823.c: 96: GIE = 1;
  1842  03D0  178B               	bsf	11,7	;volatile
  1843  03D1  0008               	return
  1844  03D2                     __end_of_start_RX_USART_ISR:	
  1845                           
  1846                           	psect	text3
  1847  0420                     __ptext3:	
  1848 ;; *************** function _start_RCM *****************
  1849 ;; Defined at:
  1850 ;;		line 4 in file "RCM1823.c"
  1851 ;; Parameters:    Size  Location     Type
  1852 ;;		None
  1853 ;; Auto vars:     Size  Location     Type
  1854 ;;		None
  1855 ;; Return value:  Size  Location     Type
  1856 ;;                  1    wreg      void 
  1857 ;; Registers used:
  1858 ;;		wreg
  1859 ;; Tracked objects:
  1860 ;;		On entry : 0/0
  1861 ;;		On exit  : 0/0
  1862 ;;		Unchanged: 0/0
  1863 ;; Data sizes:     COMMON   BANK0   BANK1
  1864 ;;      Params:         0       0       0
  1865 ;;      Locals:         0       0       0
  1866 ;;      Temps:          0       0       0
  1867 ;;      Totals:         0       0       0
  1868 ;;Total ram usage:        0 bytes
  1869 ;; Hardware stack levels used:    1
  1870 ;; Hardware stack levels required when called:    2
  1871 ;; This function calls:
  1872 ;;		Nothing
  1873 ;; This function is called by:
  1874 ;;		_main
  1875 ;; This function uses a non-reentrant model
  1876 ;;
  1877                           
  1878                           
  1879                           ;psect for function _start_RCM
  1880  0420                     _start_RCM:	
  1881                           
  1882                           ;RCM1823.c: 6: CLKRCON = 0b11010000;
  1883                           
  1884                           ;incstack = 0
  1885                           ; Regs used in _start_RCM: [wreg]
  1886  0420  30D0               	movlw	208
  1887  0421  0027               	movlb	7	; select bank7
  1888  0422  009A               	movwf	26	;volatile
  1889  0423  0008               	return
  1890  0424                     __end_of_start_RCM:	
  1891                           
  1892                           	psect	text4
  1893  0402                     __ptext4:	
  1894 ;; *************** function _setup_TMR0 *****************
  1895 ;; Defined at:
  1896 ;;		line 10 in file "TMR0.c"
  1897 ;; Parameters:    Size  Location     Type
  1898 ;;		None
  1899 ;; Auto vars:     Size  Location     Type
  1900 ;;		None
  1901 ;; Return value:  Size  Location     Type
  1902 ;;                  1    wreg      void 
  1903 ;; Registers used:
  1904 ;;		None
  1905 ;; Tracked objects:
  1906 ;;		On entry : 0/0
  1907 ;;		On exit  : 0/0
  1908 ;;		Unchanged: 0/0
  1909 ;; Data sizes:     COMMON   BANK0   BANK1
  1910 ;;      Params:         0       0       0
  1911 ;;      Locals:         0       0       0
  1912 ;;      Temps:          0       0       0
  1913 ;;      Totals:         0       0       0
  1914 ;;Total ram usage:        0 bytes
  1915 ;; Hardware stack levels used:    1
  1916 ;; Hardware stack levels required when called:    2
  1917 ;; This function calls:
  1918 ;;		Nothing
  1919 ;; This function is called by:
  1920 ;;		_main
  1921 ;; This function uses a non-reentrant model
  1922 ;;
  1923                           
  1924                           
  1925                           ;psect for function _setup_TMR0
  1926  0402                     _setup_TMR0:	
  1927                           
  1928                           ;TMR0.c: 13: PS2 = 0; PS1 = 1; PS0 = 0;
  1929                           
  1930                           ;incstack = 0
  1931                           ; Regs used in _setup_TMR0: []
  1932  0402  0021               	movlb	1	; select bank1
  1933  0403  1115               	bcf	21,2	;volatile
  1934  0404  1495               	bsf	21,1	;volatile
  1935  0405  1015               	bcf	21,0	;volatile
  1936                           
  1937                           ;TMR0.c: 16: PSA = 0;
  1938  0406  1195               	bcf	21,3	;volatile
  1939                           
  1940                           ;TMR0.c: 18: TMR0CS = 0;
  1941  0407  1295               	bcf	21,5	;volatile
  1942  0408  0008               	return
  1943  0409                     __end_of_setup_TMR0:	
  1944                           
  1945                           	psect	text5
  1946  040F                     __ptext5:	
  1947 ;; *************** function _setup_ADC *****************
  1948 ;; Defined at:
  1949 ;;		line 3 in file "ADC1823.c"
  1950 ;; Parameters:    Size  Location     Type
  1951 ;;		None
  1952 ;; Auto vars:     Size  Location     Type
  1953 ;;		None
  1954 ;; Return value:  Size  Location     Type
  1955 ;;                  1    wreg      void 
  1956 ;; Registers used:
  1957 ;;		wreg
  1958 ;; Tracked objects:
  1959 ;;		On entry : 0/0
  1960 ;;		On exit  : 0/0
  1961 ;;		Unchanged: 0/0
  1962 ;; Data sizes:     COMMON   BANK0   BANK1
  1963 ;;      Params:         0       0       0
  1964 ;;      Locals:         0       0       0
  1965 ;;      Temps:          0       0       0
  1966 ;;      Totals:         0       0       0
  1967 ;;Total ram usage:        0 bytes
  1968 ;; Hardware stack levels used:    1
  1969 ;; Hardware stack levels required when called:    2
  1970 ;; This function calls:
  1971 ;;		Nothing
  1972 ;; This function is called by:
  1973 ;;		_main
  1974 ;; This function uses a non-reentrant model
  1975 ;;
  1976                           
  1977                           
  1978                           ;psect for function _setup_ADC
  1979  040F                     _setup_ADC:	
  1980                           
  1981                           ;ADC1823.c: 20: ADCON1 = 0b11110000;
  1982                           
  1983                           ;incstack = 0
  1984                           ; Regs used in _setup_ADC: [wreg]
  1985  040F  30F0               	movlw	240
  1986  0410  0021               	movlb	1	; select bank1
  1987  0411  009E               	movwf	30	;volatile
  1988                           
  1989                           ;ADC1823.c: 21: { ADCON0 = 0b00100100;};
  1990  0412  3024               	movlw	36
  1991  0413  009D               	movwf	29	;volatile
  1992  0414  0008               	return
  1993  0415                     __end_of_setup_ADC:	
  1994                           
  1995                           	psect	text6
  1996  031B                     __ptext6:	
  1997 ;; *************** function _mess_handler *****************
  1998 ;; Defined at:
  1999 ;;		line 11 in file "comm.c"
  2000 ;; Parameters:    Size  Location     Type
  2001 ;;		None
  2002 ;; Auto vars:     Size  Location     Type
  2003 ;;		None
  2004 ;; Return value:  Size  Location     Type
  2005 ;;                  1    wreg      void 
  2006 ;; Registers used:
  2007 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2008 ;; Tracked objects:
  2009 ;;		On entry : 0/0
  2010 ;;		On exit  : 0/0
  2011 ;;		Unchanged: 0/0
  2012 ;; Data sizes:     COMMON   BANK0   BANK1
  2013 ;;      Params:         0       0       0
  2014 ;;      Locals:         0       0       0
  2015 ;;      Temps:          0       1       0
  2016 ;;      Totals:         0       1       0
  2017 ;;Total ram usage:        1 bytes
  2018 ;; Hardware stack levels used:    1
  2019 ;; Hardware stack levels required when called:    5
  2020 ;; This function calls:
  2021 ;;		_config_ASIC
  2022 ;;		_lputs_ISR
  2023 ;;		_measure_Impedance
  2024 ;;		_measure_Impedance_no_offset
  2025 ;;		_read_ADC_channels
  2026 ;; This function is called by:
  2027 ;;		_main
  2028 ;; This function uses a non-reentrant model
  2029 ;;
  2030                           
  2031                           
  2032                           ;psect for function _mess_handler
  2033  031B                     _mess_handler:	
  2034                           
  2035                           ;comm.c: 16: switch (mess_rec[0]) {
  2036                           
  2037                           ;incstack = 0
  2038                           ; Regs used in _mess_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2039  031B  2B2C               	goto	l2233
  2040  031C                     l2221:	
  2041                           ;comm.c: 17: case 't':
  2042                           
  2043                           
  2044                           ;comm.c: 18: lputs_ISR(mess_rec,mess_rec_size);
  2045  031C  0020               	movlb	0	; select bank0
  2046  031D  0841               	movf	_mess_rec_size,w	;volatile
  2047  031E  00ED               	movwf	??_mess_handler
  2048  031F  086D               	movf	??_mess_handler,w
  2049  0320  00CC               	movwf	lputs_ISR@length
  2050  0321  3042               	movlw	(low (_mess_rec| 0))& (0+255)
  2051  0322  22F0               	fcall	_lputs_ISR
  2052                           
  2053                           ;comm.c: 19: break;
  2054  0323  0008               	return
  2055  0324                     l2223:	
  2056                           ;comm.c: 21: case 'c':
  2057                           
  2058                           
  2059                           ;comm.c: 22: config_ASIC();
  2060  0324  22BF               	fcall	_config_ASIC
  2061                           
  2062                           ;comm.c: 23: break;
  2063  0325  0008               	return
  2064  0326                     l2225:	
  2065                           ;comm.c: 25: case 'm':
  2066                           
  2067                           
  2068                           ;comm.c: 26: read_ADC_channels();
  2069  0326  2286               	fcall	_read_ADC_channels
  2070                           
  2071                           ;comm.c: 27: break;
  2072  0327  0008               	return
  2073  0328                     l2227:	
  2074                           ;comm.c: 29: case 'z':
  2075                           
  2076                           
  2077                           ;comm.c: 30: measure_Impedance();
  2078  0328  2064               	fcall	_measure_Impedance
  2079                           
  2080                           ;comm.c: 31: break;
  2081  0329  0008               	return
  2082  032A                     l2229:	
  2083                           ;comm.c: 33: case 'y':
  2084                           
  2085                           
  2086                           ;comm.c: 34: measure_Impedance_no_offset();
  2087  032A  21BB               	fcall	_measure_Impedance_no_offset
  2088                           
  2089                           ;comm.c: 39: }
  2090                           
  2091                           ;comm.c: 38: break;
  2092                           
  2093                           ;comm.c: 37: default:
  2094                           
  2095                           ;comm.c: 35: break;
  2096  032B  0008               	return
  2097  032C                     l2233:	
  2098  032C  0020               	movlb	0	; select bank0
  2099  032D  0842               	movf	_mess_rec,w	;volatile
  2100                           
  2101                           ; Switch size 1, requested type "space"
  2102                           ; Number of cases is 5, Range of values is 99 to 122
  2103                           ; switch strategies available:
  2104                           ; Name         Instructions Cycles
  2105                           ; simple_byte           16     9 (average)
  2106                           ; direct_byte           57     9 (fixed)
  2107                           ; jumptable            263     9 (fixed)
  2108                           ;	Chosen strategy is simple_byte
  2109  032E  3A63               	xorlw	99	; case 99
  2110  032F  1903               	skipnz
  2111  0330  2B24               	goto	l2223
  2112  0331  3A0E               	xorlw	14	; case 109
  2113  0332  1903               	skipnz
  2114  0333  2B26               	goto	l2225
  2115  0334  3A19               	xorlw	25	; case 116
  2116  0335  1903               	skipnz
  2117  0336  2B1C               	goto	l2221
  2118  0337  3A0D               	xorlw	13	; case 121
  2119  0338  1903               	skipnz
  2120  0339  2B2A               	goto	l2229
  2121  033A  3A03               	xorlw	3	; case 122
  2122  033B  1903               	skipnz
  2123  033C  2B28               	goto	l2227
  2124  033D  2B3E               	goto	l328
  2125  033E                     l328:	
  2126  033E  0008               	return
  2127  033F                     __end_of_mess_handler:	
  2128                           
  2129                           	psect	text7
  2130  0286                     __ptext7:	
  2131 ;; *************** function _read_ADC_channels *****************
  2132 ;; Defined at:
  2133 ;;		line 72 in file "comm.c"
  2134 ;; Parameters:    Size  Location     Type
  2135 ;;		None
  2136 ;; Auto vars:     Size  Location     Type
  2137 ;;  aux             7    7[BANK0 ] unsigned char [7]
  2138 ;;  value3          2   18[BANK0 ] unsigned short 
  2139 ;;  value2          2   16[BANK0 ] unsigned short 
  2140 ;;  value1          2   14[BANK0 ] unsigned short 
  2141 ;; Return value:  Size  Location     Type
  2142 ;;                  1    wreg      void 
  2143 ;; Registers used:
  2144 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2145 ;; Tracked objects:
  2146 ;;		On entry : 0/0
  2147 ;;		On exit  : 0/0
  2148 ;;		Unchanged: 0/0
  2149 ;; Data sizes:     COMMON   BANK0   BANK1
  2150 ;;      Params:         0       0       0
  2151 ;;      Locals:         0      13       0
  2152 ;;      Temps:          0       1       0
  2153 ;;      Totals:         0      14       0
  2154 ;;Total ram usage:       14 bytes
  2155 ;; Hardware stack levels used:    1
  2156 ;; Hardware stack levels required when called:    4
  2157 ;; This function calls:
  2158 ;;		_ADC_2
  2159 ;;		_ADC_4
  2160 ;;		_ADC_5
  2161 ;;		_lputs_ISR
  2162 ;; This function is called by:
  2163 ;;		_mess_handler
  2164 ;; This function uses a non-reentrant model
  2165 ;;
  2166                           
  2167                           
  2168                           ;psect for function _read_ADC_channels
  2169  0286                     _read_ADC_channels:	
  2170                           
  2171                           ;comm.c: 74: unsigned char aux[7];
  2172                           ;comm.c: 75: unsigned short value1,value2,value3;
  2173                           ;comm.c: 78: value1 = ADC_2();
  2174                           
  2175                           ;incstack = 0
  2176                           ; Regs used in _read_ADC_channels: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2177  0286  2385               	fcall	_ADC_2
  2178  0287  0020               	movlb	0	; select bank0
  2179  0288  084D               	movf	?_ADC_2+1,w
  2180  0289  00DB               	movwf	read_ADC_channels@value1+1
  2181  028A  084C               	movf	?_ADC_2,w
  2182  028B  00DA               	movwf	read_ADC_channels@value1
  2183                           
  2184                           ;comm.c: 80: value2 = ADC_4();
  2185  028C  2362               	fcall	_ADC_4
  2186  028D  0020               	movlb	0	; select bank0
  2187  028E  084D               	movf	?_ADC_4+1,w
  2188  028F  00DD               	movwf	read_ADC_channels@value2+1
  2189  0290  084C               	movf	?_ADC_4,w
  2190  0291  00DC               	movwf	read_ADC_channels@value2
  2191                           
  2192                           ;comm.c: 82: value3 = ADC_5();
  2193  0292  233F               	fcall	_ADC_5
  2194  0293  0020               	movlb	0	; select bank0
  2195  0294  084D               	movf	?_ADC_5+1,w
  2196  0295  00DF               	movwf	read_ADC_channels@value3+1
  2197  0296  084C               	movf	?_ADC_5,w
  2198  0297  00DE               	movwf	read_ADC_channels@value3
  2199                           
  2200                           ;comm.c: 83: { ADCON0 = 0b00100100;};
  2201  0298  3024               	movlw	36
  2202  0299  0021               	movlb	1	; select bank1
  2203  029A  009D               	movwf	29	;volatile
  2204                           
  2205                           ;comm.c: 85: aux[0] = 'm';
  2206  029B  306D               	movlw	109
  2207  029C  0020               	movlb	0	; select bank0
  2208  029D  00D2               	movwf	??_read_ADC_channels
  2209  029E  0852               	movf	??_read_ADC_channels,w
  2210  029F  00D3               	movwf	read_ADC_channels@aux
  2211                           
  2212                           ;comm.c: 86: aux[1] = (unsigned char)(value1 & 0xff);
  2213  02A0  085A               	movf	read_ADC_channels@value1,w
  2214  02A1  00D2               	movwf	??_read_ADC_channels
  2215  02A2  0852               	movf	??_read_ADC_channels,w
  2216  02A3  00D4               	movwf	read_ADC_channels@aux+1
  2217                           
  2218                           ;comm.c: 87: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  2219  02A4  085B               	movf	read_ADC_channels@value1+1,w
  2220  02A5  00D2               	movwf	??_read_ADC_channels
  2221  02A6  0852               	movf	??_read_ADC_channels,w
  2222  02A7  00D5               	movwf	read_ADC_channels@aux+2
  2223                           
  2224                           ;comm.c: 88: aux[3] = (unsigned char)(value2 & 0xff);
  2225  02A8  085C               	movf	read_ADC_channels@value2,w
  2226  02A9  00D2               	movwf	??_read_ADC_channels
  2227  02AA  0852               	movf	??_read_ADC_channels,w
  2228  02AB  00D6               	movwf	read_ADC_channels@aux+3
  2229                           
  2230                           ;comm.c: 89: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  2231  02AC  085D               	movf	read_ADC_channels@value2+1,w
  2232  02AD  00D2               	movwf	??_read_ADC_channels
  2233  02AE  0852               	movf	??_read_ADC_channels,w
  2234  02AF  00D7               	movwf	read_ADC_channels@aux+4
  2235                           
  2236                           ;comm.c: 90: aux[5] = (unsigned char)(value3 & 0xff);
  2237  02B0  085E               	movf	read_ADC_channels@value3,w
  2238  02B1  00D2               	movwf	??_read_ADC_channels
  2239  02B2  0852               	movf	??_read_ADC_channels,w
  2240  02B3  00D8               	movwf	read_ADC_channels@aux+5
  2241                           
  2242                           ;comm.c: 91: aux[6] = (unsigned char)((value3 >> 8) & 0xff);
  2243  02B4  085F               	movf	read_ADC_channels@value3+1,w
  2244  02B5  00D2               	movwf	??_read_ADC_channels
  2245  02B6  0852               	movf	??_read_ADC_channels,w
  2246  02B7  00D9               	movwf	read_ADC_channels@aux+6
  2247                           
  2248                           ;comm.c: 93: lputs_ISR(aux,7);
  2249  02B8  3007               	movlw	7
  2250  02B9  00D2               	movwf	??_read_ADC_channels
  2251  02BA  0852               	movf	??_read_ADC_channels,w
  2252  02BB  00CC               	movwf	lputs_ISR@length
  2253  02BC  3053               	movlw	(low (read_ADC_channels@aux| 0))& (0+255)
  2254  02BD  22F0               	fcall	_lputs_ISR
  2255  02BE  0008               	return
  2256  02BF                     __end_of_read_ADC_channels:	
  2257                           
  2258                           	psect	text8
  2259  033F                     __ptext8:	
  2260 ;; *************** function _ADC_5 *****************
  2261 ;; Defined at:
  2262 ;;		line 48 in file "ADC1823.c"
  2263 ;; Parameters:    Size  Location     Type
  2264 ;;		None
  2265 ;; Auto vars:     Size  Location     Type
  2266 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  2267 ;; Return value:  Size  Location     Type
  2268 ;;                  2    0[BANK0 ] unsigned short 
  2269 ;; Registers used:
  2270 ;;		wreg
  2271 ;; Tracked objects:
  2272 ;;		On entry : 0/0
  2273 ;;		On exit  : 0/0
  2274 ;;		Unchanged: 0/0
  2275 ;; Data sizes:     COMMON   BANK0   BANK1
  2276 ;;      Params:         0       2       0
  2277 ;;      Locals:         0       2       0
  2278 ;;      Temps:          0       2       0
  2279 ;;      Totals:         0       6       0
  2280 ;;Total ram usage:        6 bytes
  2281 ;; Hardware stack levels used:    1
  2282 ;; Hardware stack levels required when called:    2
  2283 ;; This function calls:
  2284 ;;		Nothing
  2285 ;; This function is called by:
  2286 ;;		_read_ADC_channels
  2287 ;; This function uses a non-reentrant model
  2288 ;;
  2289                           
  2290                           
  2291                           ;psect for function _ADC_5
  2292  033F                     _ADC_5:	
  2293                           
  2294                           ;ADC1823.c: 50: unsigned short ADC_value;
  2295                           ;ADC1823.c: 52: { ADCON0 = 0b00010101;};
  2296                           
  2297                           ;incstack = 0
  2298                           ; Regs used in _ADC_5: [wreg]
  2299  033F  3015               	movlw	21
  2300  0340  0021               	movlb	1	; select bank1
  2301  0341  009D               	movwf	29	;volatile
  2302                           
  2303                           ;ADC1823.c: 53: __nop();
  2304  0342  0000               	nop
  2305                           
  2306                           ;ADC1823.c: 54: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  2307  0343  0021               	movlb	1	; select bank1
  2308  0344  149D               	bsf	29,1	;volatile
  2309  0345                     l370:	
  2310  0345  189D               	btfsc	29,1	;volatile
  2311  0346  2B45               	goto	l370
  2312  0347  081C               	movf	28,w	;volatile
  2313  0348  0020               	movlb	0	; select bank0
  2314  0349  00CE               	movwf	??_ADC_5
  2315  034A  01CF               	clrf	??_ADC_5+1
  2316  034B  084E               	movf	??_ADC_5,w
  2317  034C  00D0               	movwf	ADC_5@ADC_value
  2318  034D  084F               	movf	??_ADC_5+1,w
  2319  034E  00D1               	movwf	ADC_5@ADC_value+1
  2320  034F  3008               	movlw	8
  2321  0350                     u945:	
  2322  0350  35D0               	lslf	ADC_5@ADC_value,f
  2323  0351  0DD1               	rlf	ADC_5@ADC_value+1,f
  2324  0352  0B89               	decfsz	9,f
  2325  0353  2B50               	goto	u945
  2326  0354  0021               	movlb	1	; select bank1
  2327  0355  081B               	movf	27,w	;volatile
  2328  0356  0020               	movlb	0	; select bank0
  2329  0357  00CE               	movwf	??_ADC_5
  2330  0358  01CF               	clrf	??_ADC_5+1
  2331  0359  084E               	movf	??_ADC_5,w
  2332  035A  04D0               	iorwf	ADC_5@ADC_value,f
  2333  035B  084F               	movf	??_ADC_5+1,w
  2334  035C  04D1               	iorwf	ADC_5@ADC_value+1,f
  2335                           
  2336                           ;ADC1823.c: 55: return ADC_value;
  2337  035D  0851               	movf	ADC_5@ADC_value+1,w
  2338  035E  00CD               	movwf	?_ADC_5+1
  2339  035F  0850               	movf	ADC_5@ADC_value,w
  2340  0360  00CC               	movwf	?_ADC_5
  2341  0361  0008               	return
  2342  0362                     __end_of_ADC_5:	
  2343                           
  2344                           	psect	text9
  2345  01BB                     __ptext9:	
  2346 ;; *************** function _measure_Impedance_no_offset *****************
  2347 ;; Defined at:
  2348 ;;		line 181 in file "comm.c"
  2349 ;; Parameters:    Size  Location     Type
  2350 ;;		None
  2351 ;; Auto vars:     Size  Location     Type
  2352 ;;  aux            13   10[BANK0 ] unsigned char [13]
  2353 ;;  asic            6   27[BANK0 ] struct .
  2354 ;;  value2          2   25[BANK0 ] unsigned short 
  2355 ;;  value1          2   23[BANK0 ] unsigned short 
  2356 ;;  value3          2    0        unsigned short 
  2357 ;; Return value:  Size  Location     Type
  2358 ;;                  1    wreg      void 
  2359 ;; Registers used:
  2360 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2361 ;; Tracked objects:
  2362 ;;		On entry : 0/0
  2363 ;;		On exit  : 0/0
  2364 ;;		Unchanged: 0/0
  2365 ;; Data sizes:     COMMON   BANK0   BANK1
  2366 ;;      Params:         0       0       0
  2367 ;;      Locals:         0      23       0
  2368 ;;      Temps:          0       1       0
  2369 ;;      Totals:         0      24       0
  2370 ;;Total ram usage:       24 bytes
  2371 ;; Hardware stack levels used:    1
  2372 ;; Hardware stack levels required when called:    4
  2373 ;; This function calls:
  2374 ;;		_ADC_2
  2375 ;;		_ADC_4
  2376 ;;		_VIN_config
  2377 ;;		_lputs_ISR
  2378 ;; This function is called by:
  2379 ;;		_mess_handler
  2380 ;; This function uses a non-reentrant model
  2381 ;;
  2382                           
  2383                           
  2384                           ;psect for function _measure_Impedance_no_offset
  2385  01BB                     _measure_Impedance_no_offset:	
  2386                           
  2387                           ;comm.c: 183: unsigned char aux[13];
  2388                           ;comm.c: 184: unsigned short value1,value2,value3;
  2389                           ;comm.c: 189: VIN asic;
  2390                           ;comm.c: 192: aux[0] = 'y';
  2391                           
  2392                           ;incstack = 0
  2393                           ; Regs used in _measure_Impedance_no_offset: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  2394  01BB  3079               	movlw	121
  2395  01BC  0020               	movlb	0	; select bank0
  2396  01BD  00D5               	movwf	??_measure_Impedance_no_offset
  2397  01BE  0855               	movf	??_measure_Impedance_no_offset,w
  2398  01BF  00D6               	movwf	measure_Impedance_no_offset@aux
  2399                           
  2400                           ;comm.c: 198: asic.data[0] = mess_rec[1];
  2401  01C0  0843               	movf	_mess_rec+1,w	;volatile
  2402  01C1  00D5               	movwf	??_measure_Impedance_no_offset
  2403  01C2  0855               	movf	??_measure_Impedance_no_offset,w
  2404  01C3  00E7               	movwf	measure_Impedance_no_offset@asic
  2405                           
  2406                           ;comm.c: 199: asic.data[1] = mess_rec[2];
  2407  01C4  0844               	movf	_mess_rec+2,w	;volatile
  2408  01C5  00D5               	movwf	??_measure_Impedance_no_offset
  2409  01C6  0855               	movf	??_measure_Impedance_no_offset,w
  2410  01C7  00E8               	movwf	measure_Impedance_no_offset@asic+1
  2411                           
  2412                           ;comm.c: 200: asic.data[2] = mess_rec[3];
  2413  01C8  0845               	movf	_mess_rec+3,w	;volatile
  2414  01C9  00D5               	movwf	??_measure_Impedance_no_offset
  2415  01CA  0855               	movf	??_measure_Impedance_no_offset,w
  2416  01CB  00E9               	movwf	measure_Impedance_no_offset@asic+2
  2417                           
  2418                           ;comm.c: 201: asic.data[3] = mess_rec[4];
  2419  01CC  0846               	movf	_mess_rec+4,w	;volatile
  2420  01CD  00D5               	movwf	??_measure_Impedance_no_offset
  2421  01CE  0855               	movf	??_measure_Impedance_no_offset,w
  2422  01CF  00EA               	movwf	measure_Impedance_no_offset@asic+3
  2423                           
  2424                           ;comm.c: 202: asic.data[4] = mess_rec[5];
  2425  01D0  0847               	movf	_mess_rec+5,w	;volatile
  2426  01D1  00D5               	movwf	??_measure_Impedance_no_offset
  2427  01D2  0855               	movf	??_measure_Impedance_no_offset,w
  2428  01D3  00EB               	movwf	measure_Impedance_no_offset@asic+4
  2429                           
  2430                           ;comm.c: 206: asic.data_bits.CE = 1;
  2431  01D4  1767               	bsf	measure_Impedance_no_offset@asic,6
  2432                           
  2433                           ;comm.c: 207: asic.data_bits.IQ = 0;
  2434  01D5  11E8               	bcf	measure_Impedance_no_offset@asic+1,3
  2435                           
  2436                           ;comm.c: 212: VIN_config(asic);
  2437  01D6  3067               	movlw	low measure_Impedance_no_offset@asic
  2438  01D7  0086               	movwf	6
  2439  01D8  3000               	movlw	high measure_Impedance_no_offset@asic
  2440  01D9  0087               	movwf	7
  2441  01DA  304C               	movlw	low VIN_config@conf
  2442  01DB  0084               	movwf	4
  2443  01DC  3000               	movlw	high VIN_config@conf
  2444  01DD  0085               	movwf	5
  2445  01DE  3F40               	moviw [0]fsr1
  2446  01DF  3F80               	movwi [0]fsr0
  2447  01E0  3F41               	moviw [1]fsr1
  2448  01E1  3F81               	movwi [1]fsr0
  2449  01E2  3F42               	moviw [2]fsr1
  2450  01E3  3F82               	movwi [2]fsr0
  2451  01E4  3F43               	moviw [3]fsr1
  2452  01E5  3F83               	movwi [3]fsr0
  2453  01E6  3F44               	moviw [4]fsr1
  2454  01E7  3F84               	movwi [4]fsr0
  2455  01E8  3F45               	moviw [5]fsr1
  2456  01E9  3F85               	movwi [5]fsr0
  2457  01EA  2127               	fcall	_VIN_config
  2458                           
  2459                           ;comm.c: 214: _delay((unsigned long)((10)*(500000/4000.0)));
  2460  01EB  30FA               	movlw	250
  2461  01EC                     u1007:	
  2462  01EC  3200               	nop2
  2463  01ED  0B89               	decfsz	9,f
  2464  01EE  29EC               	goto	u1007
  2465                           
  2466                           ;comm.c: 216: value1 = ADC_2();
  2467  01EF  2385               	fcall	_ADC_2
  2468  01F0  0020               	movlb	0	; select bank0
  2469  01F1  084D               	movf	?_ADC_2+1,w
  2470  01F2  00E4               	movwf	measure_Impedance_no_offset@value1+1
  2471  01F3  084C               	movf	?_ADC_2,w
  2472  01F4  00E3               	movwf	measure_Impedance_no_offset@value1
  2473                           
  2474                           ;comm.c: 217: value2 = ADC_4();
  2475  01F5  2362               	fcall	_ADC_4
  2476  01F6  0020               	movlb	0	; select bank0
  2477  01F7  084D               	movf	?_ADC_4+1,w
  2478  01F8  00E6               	movwf	measure_Impedance_no_offset@value2+1
  2479  01F9  084C               	movf	?_ADC_4,w
  2480  01FA  00E5               	movwf	measure_Impedance_no_offset@value2
  2481                           
  2482                           ;comm.c: 219: aux[1] = (unsigned char)(value1 & 0xff);
  2483  01FB  0863               	movf	measure_Impedance_no_offset@value1,w
  2484  01FC  00D5               	movwf	??_measure_Impedance_no_offset
  2485  01FD  0855               	movf	??_measure_Impedance_no_offset,w
  2486  01FE  00D7               	movwf	measure_Impedance_no_offset@aux+1
  2487                           
  2488                           ;comm.c: 220: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  2489  01FF  0864               	movf	measure_Impedance_no_offset@value1+1,w
  2490  0200  00D5               	movwf	??_measure_Impedance_no_offset
  2491  0201  0855               	movf	??_measure_Impedance_no_offset,w
  2492  0202  00D8               	movwf	measure_Impedance_no_offset@aux+2
  2493                           
  2494                           ;comm.c: 221: aux[3] = (unsigned char)(value2 & 0xff);
  2495  0203  0865               	movf	measure_Impedance_no_offset@value2,w
  2496  0204  00D5               	movwf	??_measure_Impedance_no_offset
  2497  0205  0855               	movf	??_measure_Impedance_no_offset,w
  2498  0206  00D9               	movwf	measure_Impedance_no_offset@aux+3
  2499                           
  2500                           ;comm.c: 222: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  2501  0207  0866               	movf	measure_Impedance_no_offset@value2+1,w
  2502  0208  00D5               	movwf	??_measure_Impedance_no_offset
  2503  0209  0855               	movf	??_measure_Impedance_no_offset,w
  2504  020A  00DA               	movwf	measure_Impedance_no_offset@aux+4
  2505                           
  2506                           ;comm.c: 225: asic.data_bits.IQ = 1;
  2507  020B  15E8               	bsf	measure_Impedance_no_offset@asic+1,3
  2508                           
  2509                           ;comm.c: 230: VIN_config(asic);
  2510  020C  3067               	movlw	low measure_Impedance_no_offset@asic
  2511  020D  0086               	movwf	6
  2512  020E  3000               	movlw	high measure_Impedance_no_offset@asic
  2513  020F  0087               	movwf	7
  2514  0210  304C               	movlw	low VIN_config@conf
  2515  0211  0084               	movwf	4
  2516  0212  3000               	movlw	high VIN_config@conf
  2517  0213  0085               	movwf	5
  2518  0214  3F40               	moviw [0]fsr1
  2519  0215  3F80               	movwi [0]fsr0
  2520  0216  3F41               	moviw [1]fsr1
  2521  0217  3F81               	movwi [1]fsr0
  2522  0218  3F42               	moviw [2]fsr1
  2523  0219  3F82               	movwi [2]fsr0
  2524  021A  3F43               	moviw [3]fsr1
  2525  021B  3F83               	movwi [3]fsr0
  2526  021C  3F44               	moviw [4]fsr1
  2527  021D  3F84               	movwi [4]fsr0
  2528  021E  3F45               	moviw [5]fsr1
  2529  021F  3F85               	movwi [5]fsr0
  2530  0220  2127               	fcall	_VIN_config
  2531                           
  2532                           ;comm.c: 232: _delay((unsigned long)((10)*(500000/4000.0)));
  2533  0221  30FA               	movlw	250
  2534  0222                     u1017:	
  2535  0222  3200               	nop2
  2536  0223  0B89               	decfsz	9,f
  2537  0224  2A22               	goto	u1017
  2538                           
  2539                           ;comm.c: 234: value1 = ADC_2();
  2540  0225  2385               	fcall	_ADC_2
  2541  0226  0020               	movlb	0	; select bank0
  2542  0227  084D               	movf	?_ADC_2+1,w
  2543  0228  00E4               	movwf	measure_Impedance_no_offset@value1+1
  2544  0229  084C               	movf	?_ADC_2,w
  2545  022A  00E3               	movwf	measure_Impedance_no_offset@value1
  2546                           
  2547                           ;comm.c: 235: value2 = ADC_4();
  2548  022B  2362               	fcall	_ADC_4
  2549  022C  0020               	movlb	0	; select bank0
  2550  022D  084D               	movf	?_ADC_4+1,w
  2551  022E  00E6               	movwf	measure_Impedance_no_offset@value2+1
  2552  022F  084C               	movf	?_ADC_4,w
  2553  0230  00E5               	movwf	measure_Impedance_no_offset@value2
  2554                           
  2555                           ;comm.c: 237: aux[5] = (unsigned char)(value1 & 0xff);
  2556  0231  0863               	movf	measure_Impedance_no_offset@value1,w
  2557  0232  00D5               	movwf	??_measure_Impedance_no_offset
  2558  0233  0855               	movf	??_measure_Impedance_no_offset,w
  2559  0234  00DB               	movwf	measure_Impedance_no_offset@aux+5
  2560                           
  2561                           ;comm.c: 238: aux[6] = (unsigned char)((value1 >> 8) & 0xff);
  2562  0235  0864               	movf	measure_Impedance_no_offset@value1+1,w
  2563  0236  00D5               	movwf	??_measure_Impedance_no_offset
  2564  0237  0855               	movf	??_measure_Impedance_no_offset,w
  2565  0238  00DC               	movwf	measure_Impedance_no_offset@aux+6
  2566                           
  2567                           ;comm.c: 239: aux[7] = (unsigned char)(value2 & 0xff);
  2568  0239  0865               	movf	measure_Impedance_no_offset@value2,w
  2569  023A  00D5               	movwf	??_measure_Impedance_no_offset
  2570  023B  0855               	movf	??_measure_Impedance_no_offset,w
  2571  023C  00DD               	movwf	measure_Impedance_no_offset@aux+7
  2572                           
  2573                           ;comm.c: 240: aux[8] = (unsigned char)((value2 >> 8) & 0xff);
  2574  023D  0866               	movf	measure_Impedance_no_offset@value2+1,w
  2575  023E  00D5               	movwf	??_measure_Impedance_no_offset
  2576  023F  0855               	movf	??_measure_Impedance_no_offset,w
  2577  0240  00DE               	movwf	measure_Impedance_no_offset@aux+8
  2578                           
  2579                           ;comm.c: 243: lputs_ISR(aux,9);
  2580  0241  3009               	movlw	9
  2581  0242  00D5               	movwf	??_measure_Impedance_no_offset
  2582  0243  0855               	movf	??_measure_Impedance_no_offset,w
  2583  0244  00CC               	movwf	lputs_ISR@length
  2584  0245  3056               	movlw	(low (measure_Impedance_no_offset@aux| 0))& (0+255)
  2585  0246  22F0               	fcall	_lputs_ISR
  2586  0247  0008               	return
  2587  0248                     __end_of_measure_Impedance_no_offset:	
  2588                           
  2589                           	psect	text10
  2590  0064                     __ptext10:	
  2591 ;; *************** function _measure_Impedance *****************
  2592 ;; Defined at:
  2593 ;;		line 96 in file "comm.c"
  2594 ;; Parameters:    Size  Location     Type
  2595 ;;		None
  2596 ;; Auto vars:     Size  Location     Type
  2597 ;;  aux            13   10[BANK0 ] unsigned char [13]
  2598 ;;  asic            6   27[BANK0 ] struct .
  2599 ;;  value2          2   25[BANK0 ] unsigned short 
  2600 ;;  value1          2   23[BANK0 ] unsigned short 
  2601 ;;  value3          2    0        unsigned short 
  2602 ;; Return value:  Size  Location     Type
  2603 ;;                  1    wreg      void 
  2604 ;; Registers used:
  2605 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2606 ;; Tracked objects:
  2607 ;;		On entry : 0/0
  2608 ;;		On exit  : 0/0
  2609 ;;		Unchanged: 0/0
  2610 ;; Data sizes:     COMMON   BANK0   BANK1
  2611 ;;      Params:         0       0       0
  2612 ;;      Locals:         0      23       0
  2613 ;;      Temps:          0       1       0
  2614 ;;      Totals:         0      24       0
  2615 ;;Total ram usage:       24 bytes
  2616 ;; Hardware stack levels used:    1
  2617 ;; Hardware stack levels required when called:    4
  2618 ;; This function calls:
  2619 ;;		_ADC_2
  2620 ;;		_ADC_4
  2621 ;;		_VIN_config
  2622 ;;		_lputs_ISR
  2623 ;; This function is called by:
  2624 ;;		_mess_handler
  2625 ;; This function uses a non-reentrant model
  2626 ;;
  2627                           
  2628                           
  2629                           ;psect for function _measure_Impedance
  2630  0064                     _measure_Impedance:	
  2631                           
  2632                           ;comm.c: 98: unsigned char aux[13];
  2633                           ;comm.c: 99: unsigned short value1,value2,value3;
  2634                           ;comm.c: 104: VIN asic;
  2635                           ;comm.c: 108: aux[0] = 'z';
  2636                           
  2637                           ;incstack = 0
  2638                           ; Regs used in _measure_Impedance: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2639  0064  307A               	movlw	122
  2640  0065  0020               	movlb	0	; select bank0
  2641  0066  00D5               	movwf	??_measure_Impedance
  2642  0067  0855               	movf	??_measure_Impedance,w
  2643  0068  00D6               	movwf	measure_Impedance@aux
  2644                           
  2645                           ;comm.c: 120: asic.data[0] = mess_rec[1];
  2646  0069  0843               	movf	_mess_rec+1,w	;volatile
  2647  006A  00D5               	movwf	??_measure_Impedance
  2648  006B  0855               	movf	??_measure_Impedance,w
  2649  006C  00E7               	movwf	measure_Impedance@asic
  2650                           
  2651                           ;comm.c: 121: asic.data[1] = mess_rec[2];
  2652  006D  0844               	movf	_mess_rec+2,w	;volatile
  2653  006E  00D5               	movwf	??_measure_Impedance
  2654  006F  0855               	movf	??_measure_Impedance,w
  2655  0070  00E8               	movwf	measure_Impedance@asic+1
  2656                           
  2657                           ;comm.c: 122: asic.data[2] = mess_rec[3];
  2658  0071  0845               	movf	_mess_rec+3,w	;volatile
  2659  0072  00D5               	movwf	??_measure_Impedance
  2660  0073  0855               	movf	??_measure_Impedance,w
  2661  0074  00E9               	movwf	measure_Impedance@asic+2
  2662                           
  2663                           ;comm.c: 123: asic.data[3] = mess_rec[4];
  2664  0075  0846               	movf	_mess_rec+4,w	;volatile
  2665  0076  00D5               	movwf	??_measure_Impedance
  2666  0077  0855               	movf	??_measure_Impedance,w
  2667  0078  00EA               	movwf	measure_Impedance@asic+3
  2668                           
  2669                           ;comm.c: 124: asic.data[4] = mess_rec[5];
  2670  0079  0847               	movf	_mess_rec+5,w	;volatile
  2671  007A  00D5               	movwf	??_measure_Impedance
  2672  007B  0855               	movf	??_measure_Impedance,w
  2673  007C  00EB               	movwf	measure_Impedance@asic+4
  2674                           
  2675                           ;comm.c: 126: asic.data_bits.CE = 0;
  2676  007D  1367               	bcf	measure_Impedance@asic,6
  2677                           
  2678                           ;comm.c: 127: VIN_config(asic);
  2679  007E  3067               	movlw	low measure_Impedance@asic
  2680  007F  0086               	movwf	6
  2681  0080  3000               	movlw	high measure_Impedance@asic
  2682  0081  0087               	movwf	7
  2683  0082  304C               	movlw	low VIN_config@conf
  2684  0083  0084               	movwf	4
  2685  0084  3000               	movlw	high VIN_config@conf
  2686  0085  0085               	movwf	5
  2687  0086  3F40               	moviw [0]fsr1
  2688  0087  3F80               	movwi [0]fsr0
  2689  0088  3F41               	moviw [1]fsr1
  2690  0089  3F81               	movwi [1]fsr0
  2691  008A  3F42               	moviw [2]fsr1
  2692  008B  3F82               	movwi [2]fsr0
  2693  008C  3F43               	moviw [3]fsr1
  2694  008D  3F83               	movwi [3]fsr0
  2695  008E  3F44               	moviw [4]fsr1
  2696  008F  3F84               	movwi [4]fsr0
  2697  0090  3F45               	moviw [5]fsr1
  2698  0091  3F85               	movwi [5]fsr0
  2699  0092  2127               	fcall	_VIN_config
  2700                           
  2701                           ;comm.c: 130: _delay((unsigned long)((10)*(500000/4000.0)));
  2702  0093  30FA               	movlw	250
  2703  0094                     u1027:	
  2704  0094  3200               	nop2
  2705  0095  0B89               	decfsz	9,f
  2706  0096  2894               	goto	u1027
  2707                           
  2708                           ;comm.c: 132: value1 = ADC_2();
  2709  0097  2385               	fcall	_ADC_2
  2710  0098  0020               	movlb	0	; select bank0
  2711  0099  084D               	movf	?_ADC_2+1,w
  2712  009A  00E4               	movwf	measure_Impedance@value1+1
  2713  009B  084C               	movf	?_ADC_2,w
  2714  009C  00E3               	movwf	measure_Impedance@value1
  2715                           
  2716                           ;comm.c: 133: value2 = ADC_4();
  2717  009D  2362               	fcall	_ADC_4
  2718  009E  0020               	movlb	0	; select bank0
  2719  009F  084D               	movf	?_ADC_4+1,w
  2720  00A0  00E6               	movwf	measure_Impedance@value2+1
  2721  00A1  084C               	movf	?_ADC_4,w
  2722  00A2  00E5               	movwf	measure_Impedance@value2
  2723                           
  2724                           ;comm.c: 135: aux[1] = (unsigned char)(value1 & 0xff);
  2725  00A3  0863               	movf	measure_Impedance@value1,w
  2726  00A4  00D5               	movwf	??_measure_Impedance
  2727  00A5  0855               	movf	??_measure_Impedance,w
  2728  00A6  00D7               	movwf	measure_Impedance@aux+1
  2729                           
  2730                           ;comm.c: 136: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  2731  00A7  0864               	movf	measure_Impedance@value1+1,w
  2732  00A8  00D5               	movwf	??_measure_Impedance
  2733  00A9  0855               	movf	??_measure_Impedance,w
  2734  00AA  00D8               	movwf	measure_Impedance@aux+2
  2735                           
  2736                           ;comm.c: 137: aux[3] = (unsigned char)(value2 & 0xff);
  2737  00AB  0865               	movf	measure_Impedance@value2,w
  2738  00AC  00D5               	movwf	??_measure_Impedance
  2739  00AD  0855               	movf	??_measure_Impedance,w
  2740  00AE  00D9               	movwf	measure_Impedance@aux+3
  2741                           
  2742                           ;comm.c: 138: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  2743  00AF  0866               	movf	measure_Impedance@value2+1,w
  2744  00B0  00D5               	movwf	??_measure_Impedance
  2745  00B1  0855               	movf	??_measure_Impedance,w
  2746  00B2  00DA               	movwf	measure_Impedance@aux+4
  2747                           
  2748                           ;comm.c: 141: asic.data_bits.CE = 1;
  2749  00B3  1767               	bsf	measure_Impedance@asic,6
  2750                           
  2751                           ;comm.c: 142: asic.data_bits.IQ = 0;
  2752  00B4  11E8               	bcf	measure_Impedance@asic+1,3
  2753                           
  2754                           ;comm.c: 147: VIN_config(asic);
  2755  00B5  3067               	movlw	low measure_Impedance@asic
  2756  00B6  0086               	movwf	6
  2757  00B7  3000               	movlw	high measure_Impedance@asic
  2758  00B8  0087               	movwf	7
  2759  00B9  304C               	movlw	low VIN_config@conf
  2760  00BA  0084               	movwf	4
  2761  00BB  3000               	movlw	high VIN_config@conf
  2762  00BC  0085               	movwf	5
  2763  00BD  3F40               	moviw [0]fsr1
  2764  00BE  3F80               	movwi [0]fsr0
  2765  00BF  3F41               	moviw [1]fsr1
  2766  00C0  3F81               	movwi [1]fsr0
  2767  00C1  3F42               	moviw [2]fsr1
  2768  00C2  3F82               	movwi [2]fsr0
  2769  00C3  3F43               	moviw [3]fsr1
  2770  00C4  3F83               	movwi [3]fsr0
  2771  00C5  3F44               	moviw [4]fsr1
  2772  00C6  3F84               	movwi [4]fsr0
  2773  00C7  3F45               	moviw [5]fsr1
  2774  00C8  3F85               	movwi [5]fsr0
  2775  00C9  2127               	fcall	_VIN_config
  2776                           
  2777                           ;comm.c: 149: _delay((unsigned long)((10)*(500000/4000.0)));
  2778  00CA  30FA               	movlw	250
  2779  00CB                     u1037:	
  2780  00CB  3200               	nop2
  2781  00CC  0B89               	decfsz	9,f
  2782  00CD  28CB               	goto	u1037
  2783                           
  2784                           ;comm.c: 151: value1 = ADC_2();
  2785  00CE  2385               	fcall	_ADC_2
  2786  00CF  0020               	movlb	0	; select bank0
  2787  00D0  084D               	movf	?_ADC_2+1,w
  2788  00D1  00E4               	movwf	measure_Impedance@value1+1
  2789  00D2  084C               	movf	?_ADC_2,w
  2790  00D3  00E3               	movwf	measure_Impedance@value1
  2791                           
  2792                           ;comm.c: 152: value2 = ADC_4();
  2793  00D4  2362               	fcall	_ADC_4
  2794  00D5  0020               	movlb	0	; select bank0
  2795  00D6  084D               	movf	?_ADC_4+1,w
  2796  00D7  00E6               	movwf	measure_Impedance@value2+1
  2797  00D8  084C               	movf	?_ADC_4,w
  2798  00D9  00E5               	movwf	measure_Impedance@value2
  2799                           
  2800                           ;comm.c: 154: aux[5] = (unsigned char)(value1 & 0xff);
  2801  00DA  0863               	movf	measure_Impedance@value1,w
  2802  00DB  00D5               	movwf	??_measure_Impedance
  2803  00DC  0855               	movf	??_measure_Impedance,w
  2804  00DD  00DB               	movwf	measure_Impedance@aux+5
  2805                           
  2806                           ;comm.c: 155: aux[6] = (unsigned char)((value1 >> 8) & 0xff);
  2807  00DE  0864               	movf	measure_Impedance@value1+1,w
  2808  00DF  00D5               	movwf	??_measure_Impedance
  2809  00E0  0855               	movf	??_measure_Impedance,w
  2810  00E1  00DC               	movwf	measure_Impedance@aux+6
  2811                           
  2812                           ;comm.c: 156: aux[7] = (unsigned char)(value2 & 0xff);
  2813  00E2  0865               	movf	measure_Impedance@value2,w
  2814  00E3  00D5               	movwf	??_measure_Impedance
  2815  00E4  0855               	movf	??_measure_Impedance,w
  2816  00E5  00DD               	movwf	measure_Impedance@aux+7
  2817                           
  2818                           ;comm.c: 157: aux[8] = (unsigned char)((value2 >> 8) & 0xff);
  2819  00E6  0866               	movf	measure_Impedance@value2+1,w
  2820  00E7  00D5               	movwf	??_measure_Impedance
  2821  00E8  0855               	movf	??_measure_Impedance,w
  2822  00E9  00DE               	movwf	measure_Impedance@aux+8
  2823                           
  2824                           ;comm.c: 160: asic.data_bits.IQ = 1;
  2825  00EA  15E8               	bsf	measure_Impedance@asic+1,3
  2826                           
  2827                           ;comm.c: 165: VIN_config(asic);
  2828  00EB  3067               	movlw	low measure_Impedance@asic
  2829  00EC  0086               	movwf	6
  2830  00ED  3000               	movlw	high measure_Impedance@asic
  2831  00EE  0087               	movwf	7
  2832  00EF  304C               	movlw	low VIN_config@conf
  2833  00F0  0084               	movwf	4
  2834  00F1  3000               	movlw	high VIN_config@conf
  2835  00F2  0085               	movwf	5
  2836  00F3  3F40               	moviw [0]fsr1
  2837  00F4  3F80               	movwi [0]fsr0
  2838  00F5  3F41               	moviw [1]fsr1
  2839  00F6  3F81               	movwi [1]fsr0
  2840  00F7  3F42               	moviw [2]fsr1
  2841  00F8  3F82               	movwi [2]fsr0
  2842  00F9  3F43               	moviw [3]fsr1
  2843  00FA  3F83               	movwi [3]fsr0
  2844  00FB  3F44               	moviw [4]fsr1
  2845  00FC  3F84               	movwi [4]fsr0
  2846  00FD  3F45               	moviw [5]fsr1
  2847  00FE  3F85               	movwi [5]fsr0
  2848  00FF  2127               	fcall	_VIN_config
  2849                           
  2850                           ;comm.c: 167: _delay((unsigned long)((10)*(500000/4000.0)));
  2851  0100  30FA               	movlw	250
  2852  0101                     u1047:	
  2853  0101  3200               	nop2
  2854  0102  0B89               	decfsz	9,f
  2855  0103  2901               	goto	u1047
  2856                           
  2857                           ;comm.c: 169: value1 = ADC_2();
  2858  0104  2385               	fcall	_ADC_2
  2859  0105  0020               	movlb	0	; select bank0
  2860  0106  084D               	movf	?_ADC_2+1,w
  2861  0107  00E4               	movwf	measure_Impedance@value1+1
  2862  0108  084C               	movf	?_ADC_2,w
  2863  0109  00E3               	movwf	measure_Impedance@value1
  2864                           
  2865                           ;comm.c: 170: value2 = ADC_4();
  2866  010A  2362               	fcall	_ADC_4
  2867  010B  0020               	movlb	0	; select bank0
  2868  010C  084D               	movf	?_ADC_4+1,w
  2869  010D  00E6               	movwf	measure_Impedance@value2+1
  2870  010E  084C               	movf	?_ADC_4,w
  2871  010F  00E5               	movwf	measure_Impedance@value2
  2872                           
  2873                           ;comm.c: 172: aux[9] = (unsigned char)(value1 & 0xff);
  2874  0110  0863               	movf	measure_Impedance@value1,w
  2875  0111  00D5               	movwf	??_measure_Impedance
  2876  0112  0855               	movf	??_measure_Impedance,w
  2877  0113  00DF               	movwf	measure_Impedance@aux+9
  2878                           
  2879                           ;comm.c: 173: aux[10] = (unsigned char)((value1 >> 8) & 0xff);
  2880  0114  0864               	movf	measure_Impedance@value1+1,w
  2881  0115  00D5               	movwf	??_measure_Impedance
  2882  0116  0855               	movf	??_measure_Impedance,w
  2883  0117  00E0               	movwf	measure_Impedance@aux+10
  2884                           
  2885                           ;comm.c: 174: aux[11] = (unsigned char)(value2 & 0xff);
  2886  0118  0865               	movf	measure_Impedance@value2,w
  2887  0119  00D5               	movwf	??_measure_Impedance
  2888  011A  0855               	movf	??_measure_Impedance,w
  2889  011B  00E1               	movwf	measure_Impedance@aux+11
  2890                           
  2891                           ;comm.c: 175: aux[12] = (unsigned char)((value2 >> 8) & 0xff);
  2892  011C  0866               	movf	measure_Impedance@value2+1,w
  2893  011D  00D5               	movwf	??_measure_Impedance
  2894  011E  0855               	movf	??_measure_Impedance,w
  2895  011F  00E2               	movwf	measure_Impedance@aux+12
  2896                           
  2897                           ;comm.c: 178: lputs_ISR(aux,13);
  2898  0120  300D               	movlw	13
  2899  0121  00D5               	movwf	??_measure_Impedance
  2900  0122  0855               	movf	??_measure_Impedance,w
  2901  0123  00CC               	movwf	lputs_ISR@length
  2902  0124  3056               	movlw	(low (measure_Impedance@aux| 0))& (0+255)
  2903  0125  22F0               	fcall	_lputs_ISR
  2904  0126  0008               	return
  2905  0127                     __end_of_measure_Impedance:	
  2906                           
  2907                           	psect	text11
  2908  0362                     __ptext11:	
  2909 ;; *************** function _ADC_4 *****************
  2910 ;; Defined at:
  2911 ;;		line 38 in file "ADC1823.c"
  2912 ;; Parameters:    Size  Location     Type
  2913 ;;		None
  2914 ;; Auto vars:     Size  Location     Type
  2915 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  2916 ;; Return value:  Size  Location     Type
  2917 ;;                  2    0[BANK0 ] unsigned short 
  2918 ;; Registers used:
  2919 ;;		wreg
  2920 ;; Tracked objects:
  2921 ;;		On entry : 0/0
  2922 ;;		On exit  : 0/0
  2923 ;;		Unchanged: 0/0
  2924 ;; Data sizes:     COMMON   BANK0   BANK1
  2925 ;;      Params:         0       2       0
  2926 ;;      Locals:         0       2       0
  2927 ;;      Temps:          0       2       0
  2928 ;;      Totals:         0       6       0
  2929 ;;Total ram usage:        6 bytes
  2930 ;; Hardware stack levels used:    1
  2931 ;; Hardware stack levels required when called:    2
  2932 ;; This function calls:
  2933 ;;		Nothing
  2934 ;; This function is called by:
  2935 ;;		_read_ADC_channels
  2936 ;;		_measure_Impedance
  2937 ;;		_measure_Impedance_no_offset
  2938 ;; This function uses a non-reentrant model
  2939 ;;
  2940                           
  2941                           
  2942                           ;psect for function _ADC_4
  2943  0362                     _ADC_4:	
  2944                           
  2945                           ;ADC1823.c: 40: unsigned short ADC_value;
  2946                           ;ADC1823.c: 42: { ADCON0 = 0b00010001;};
  2947                           
  2948                           ;incstack = 0
  2949                           ; Regs used in _ADC_4: [wreg]
  2950  0362  3011               	movlw	17
  2951  0363  0021               	movlb	1	; select bank1
  2952  0364  009D               	movwf	29	;volatile
  2953                           
  2954                           ;ADC1823.c: 43: __nop();
  2955  0365  0000               	nop
  2956                           
  2957                           ;ADC1823.c: 44: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  2958  0366  0021               	movlb	1	; select bank1
  2959  0367  149D               	bsf	29,1	;volatile
  2960  0368                     l364:	
  2961  0368  189D               	btfsc	29,1	;volatile
  2962  0369  2B68               	goto	l364
  2963  036A  081C               	movf	28,w	;volatile
  2964  036B  0020               	movlb	0	; select bank0
  2965  036C  00CE               	movwf	??_ADC_4
  2966  036D  01CF               	clrf	??_ADC_4+1
  2967  036E  084E               	movf	??_ADC_4,w
  2968  036F  00D0               	movwf	ADC_4@ADC_value
  2969  0370  084F               	movf	??_ADC_4+1,w
  2970  0371  00D1               	movwf	ADC_4@ADC_value+1
  2971  0372  3008               	movlw	8
  2972  0373                     u925:	
  2973  0373  35D0               	lslf	ADC_4@ADC_value,f
  2974  0374  0DD1               	rlf	ADC_4@ADC_value+1,f
  2975  0375  0B89               	decfsz	9,f
  2976  0376  2B73               	goto	u925
  2977  0377  0021               	movlb	1	; select bank1
  2978  0378  081B               	movf	27,w	;volatile
  2979  0379  0020               	movlb	0	; select bank0
  2980  037A  00CE               	movwf	??_ADC_4
  2981  037B  01CF               	clrf	??_ADC_4+1
  2982  037C  084E               	movf	??_ADC_4,w
  2983  037D  04D0               	iorwf	ADC_4@ADC_value,f
  2984  037E  084F               	movf	??_ADC_4+1,w
  2985  037F  04D1               	iorwf	ADC_4@ADC_value+1,f
  2986                           
  2987                           ;ADC1823.c: 45: return ADC_value;
  2988  0380  0851               	movf	ADC_4@ADC_value+1,w
  2989  0381  00CD               	movwf	?_ADC_4+1
  2990  0382  0850               	movf	ADC_4@ADC_value,w
  2991  0383  00CC               	movwf	?_ADC_4
  2992  0384  0008               	return
  2993  0385                     __end_of_ADC_4:	
  2994                           
  2995                           	psect	text12
  2996  0385                     __ptext12:	
  2997 ;; *************** function _ADC_2 *****************
  2998 ;; Defined at:
  2999 ;;		line 25 in file "ADC1823.c"
  3000 ;; Parameters:    Size  Location     Type
  3001 ;;		None
  3002 ;; Auto vars:     Size  Location     Type
  3003 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  3004 ;; Return value:  Size  Location     Type
  3005 ;;                  2    0[BANK0 ] unsigned short 
  3006 ;; Registers used:
  3007 ;;		wreg
  3008 ;; Tracked objects:
  3009 ;;		On entry : 0/0
  3010 ;;		On exit  : 0/0
  3011 ;;		Unchanged: 0/0
  3012 ;; Data sizes:     COMMON   BANK0   BANK1
  3013 ;;      Params:         0       2       0
  3014 ;;      Locals:         0       2       0
  3015 ;;      Temps:          0       2       0
  3016 ;;      Totals:         0       6       0
  3017 ;;Total ram usage:        6 bytes
  3018 ;; Hardware stack levels used:    1
  3019 ;; Hardware stack levels required when called:    2
  3020 ;; This function calls:
  3021 ;;		Nothing
  3022 ;; This function is called by:
  3023 ;;		_read_ADC_channels
  3024 ;;		_measure_Impedance
  3025 ;;		_measure_Impedance_no_offset
  3026 ;; This function uses a non-reentrant model
  3027 ;;
  3028                           
  3029                           
  3030                           ;psect for function _ADC_2
  3031  0385                     _ADC_2:	
  3032                           
  3033                           ;ADC1823.c: 27: unsigned short ADC_value;
  3034                           ;ADC1823.c: 29: { ADCON0 = 0b00001001;};
  3035                           
  3036                           ;incstack = 0
  3037                           ; Regs used in _ADC_2: [wreg]
  3038  0385  3009               	movlw	9
  3039  0386  0021               	movlb	1	; select bank1
  3040  0387  009D               	movwf	29	;volatile
  3041                           
  3042                           ;ADC1823.c: 30: __nop();
  3043  0388  0000               	nop
  3044                           
  3045                           ;ADC1823.c: 34: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  3046  0389  0021               	movlb	1	; select bank1
  3047  038A  149D               	bsf	29,1	;volatile
  3048  038B                     l358:	
  3049  038B  189D               	btfsc	29,1	;volatile
  3050  038C  2B8B               	goto	l358
  3051  038D  081C               	movf	28,w	;volatile
  3052  038E  0020               	movlb	0	; select bank0
  3053  038F  00CE               	movwf	??_ADC_2
  3054  0390  01CF               	clrf	??_ADC_2+1
  3055  0391  084E               	movf	??_ADC_2,w
  3056  0392  00D0               	movwf	ADC_2@ADC_value
  3057  0393  084F               	movf	??_ADC_2+1,w
  3058  0394  00D1               	movwf	ADC_2@ADC_value+1
  3059  0395  3008               	movlw	8
  3060  0396                     u905:	
  3061  0396  35D0               	lslf	ADC_2@ADC_value,f
  3062  0397  0DD1               	rlf	ADC_2@ADC_value+1,f
  3063  0398  0B89               	decfsz	9,f
  3064  0399  2B96               	goto	u905
  3065  039A  0021               	movlb	1	; select bank1
  3066  039B  081B               	movf	27,w	;volatile
  3067  039C  0020               	movlb	0	; select bank0
  3068  039D  00CE               	movwf	??_ADC_2
  3069  039E  01CF               	clrf	??_ADC_2+1
  3070  039F  084E               	movf	??_ADC_2,w
  3071  03A0  04D0               	iorwf	ADC_2@ADC_value,f
  3072  03A1  084F               	movf	??_ADC_2+1,w
  3073  03A2  04D1               	iorwf	ADC_2@ADC_value+1,f
  3074                           
  3075                           ;ADC1823.c: 35: return ADC_value;
  3076  03A3  0851               	movf	ADC_2@ADC_value+1,w
  3077  03A4  00CD               	movwf	?_ADC_2+1
  3078  03A5  0850               	movf	ADC_2@ADC_value,w
  3079  03A6  00CC               	movwf	?_ADC_2
  3080  03A7  0008               	return
  3081  03A8                     __end_of_ADC_2:	
  3082                           
  3083                           	psect	text13
  3084  02BF                     __ptext13:	
  3085 ;; *************** function _config_ASIC *****************
  3086 ;; Defined at:
  3087 ;;		line 42 in file "comm.c"
  3088 ;; Parameters:    Size  Location     Type
  3089 ;;		None
  3090 ;; Auto vars:     Size  Location     Type
  3091 ;;  asic            6   10[BANK0 ] struct .
  3092 ;; Return value:  Size  Location     Type
  3093 ;;                  1    wreg      void 
  3094 ;; Registers used:
  3095 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3096 ;; Tracked objects:
  3097 ;;		On entry : 0/0
  3098 ;;		On exit  : 0/0
  3099 ;;		Unchanged: 0/0
  3100 ;; Data sizes:     COMMON   BANK0   BANK1
  3101 ;;      Params:         0       0       0
  3102 ;;      Locals:         0       6       0
  3103 ;;      Temps:          0       1       0
  3104 ;;      Totals:         0       7       0
  3105 ;;Total ram usage:        7 bytes
  3106 ;; Hardware stack levels used:    1
  3107 ;; Hardware stack levels required when called:    4
  3108 ;; This function calls:
  3109 ;;		_VIN_config
  3110 ;;		_lputs_ISR
  3111 ;; This function is called by:
  3112 ;;		_mess_handler
  3113 ;; This function uses a non-reentrant model
  3114 ;;
  3115                           
  3116                           
  3117                           ;psect for function _config_ASIC
  3118  02BF                     _config_ASIC:	
  3119                           
  3120                           ;comm.c: 58: VIN asic;
  3121                           ;comm.c: 60: asic.data[0] = mess_rec[1];
  3122                           
  3123                           ;incstack = 0
  3124                           ; Regs used in _config_ASIC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3125  02BF  0020               	movlb	0	; select bank0
  3126  02C0  0843               	movf	_mess_rec+1,w	;volatile
  3127  02C1  00D5               	movwf	??_config_ASIC
  3128  02C2  0855               	movf	??_config_ASIC,w
  3129  02C3  00D6               	movwf	config_ASIC@asic
  3130                           
  3131                           ;comm.c: 61: asic.data[1] = mess_rec[2];
  3132  02C4  0844               	movf	_mess_rec+2,w	;volatile
  3133  02C5  00D5               	movwf	??_config_ASIC
  3134  02C6  0855               	movf	??_config_ASIC,w
  3135  02C7  00D7               	movwf	config_ASIC@asic+1
  3136                           
  3137                           ;comm.c: 62: asic.data[2] = mess_rec[3];
  3138  02C8  0845               	movf	_mess_rec+3,w	;volatile
  3139  02C9  00D5               	movwf	??_config_ASIC
  3140  02CA  0855               	movf	??_config_ASIC,w
  3141  02CB  00D8               	movwf	config_ASIC@asic+2
  3142                           
  3143                           ;comm.c: 63: asic.data[3] = mess_rec[4];
  3144  02CC  0846               	movf	_mess_rec+4,w	;volatile
  3145  02CD  00D5               	movwf	??_config_ASIC
  3146  02CE  0855               	movf	??_config_ASIC,w
  3147  02CF  00D9               	movwf	config_ASIC@asic+3
  3148                           
  3149                           ;comm.c: 64: asic.data[4] = mess_rec[5];
  3150  02D0  0847               	movf	_mess_rec+5,w	;volatile
  3151  02D1  00D5               	movwf	??_config_ASIC
  3152  02D2  0855               	movf	??_config_ASIC,w
  3153  02D3  00DA               	movwf	config_ASIC@asic+4
  3154                           
  3155                           ;comm.c: 66: lputs_ISR(mess_rec,mess_rec_size);
  3156  02D4  0841               	movf	_mess_rec_size,w	;volatile
  3157  02D5  00D5               	movwf	??_config_ASIC
  3158  02D6  0855               	movf	??_config_ASIC,w
  3159  02D7  00CC               	movwf	lputs_ISR@length
  3160  02D8  3042               	movlw	(low (_mess_rec| 0))& (0+255)
  3161  02D9  22F0               	fcall	_lputs_ISR
  3162                           
  3163                           ;comm.c: 68: VIN_config(asic);
  3164  02DA  3056               	movlw	low config_ASIC@asic
  3165  02DB  0086               	movwf	6
  3166  02DC  3000               	movlw	high config_ASIC@asic
  3167  02DD  0087               	movwf	7
  3168  02DE  304C               	movlw	low VIN_config@conf
  3169  02DF  0084               	movwf	4
  3170  02E0  3000               	movlw	high VIN_config@conf
  3171  02E1  0085               	movwf	5
  3172  02E2  3F40               	moviw [0]fsr1
  3173  02E3  3F80               	movwi [0]fsr0
  3174  02E4  3F41               	moviw [1]fsr1
  3175  02E5  3F81               	movwi [1]fsr0
  3176  02E6  3F42               	moviw [2]fsr1
  3177  02E7  3F82               	movwi [2]fsr0
  3178  02E8  3F43               	moviw [3]fsr1
  3179  02E9  3F83               	movwi [3]fsr0
  3180  02EA  3F44               	moviw [4]fsr1
  3181  02EB  3F84               	movwi [4]fsr0
  3182  02EC  3F45               	moviw [5]fsr1
  3183  02ED  3F85               	movwi [5]fsr0
  3184  02EE  2127               	fcall	_VIN_config
  3185  02EF  0008               	return
  3186  02F0                     __end_of_config_ASIC:	
  3187                           
  3188                           	psect	text14
  3189  02F0                     __ptext14:	
  3190 ;; *************** function _lputs_ISR *****************
  3191 ;; Defined at:
  3192 ;;		line 131 in file "USART1823.c"
  3193 ;; Parameters:    Size  Location     Type
  3194 ;;  data            1    wreg     PTR unsigned char 
  3195 ;;		 -> measure_Impedance_no_offset@aux(13), measure_Impedance@aux(13), read_ADC_channels@aux(7), mess_rec(10), 
  3196 ;;  length          1    0[BANK0 ] unsigned char 
  3197 ;; Auto vars:     Size  Location     Type
  3198 ;;  data            1    3[BANK0 ] PTR unsigned char 
  3199 ;;		 -> measure_Impedance_no_offset@aux(13), measure_Impedance@aux(13), read_ADC_channels@aux(7), mess_rec(10), 
  3200 ;;  i               1    4[BANK0 ] unsigned char 
  3201 ;; Return value:  Size  Location     Type
  3202 ;;                  1    wreg      void 
  3203 ;; Registers used:
  3204 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3205 ;; Tracked objects:
  3206 ;;		On entry : 0/0
  3207 ;;		On exit  : 0/0
  3208 ;;		Unchanged: 0/0
  3209 ;; Data sizes:     COMMON   BANK0   BANK1
  3210 ;;      Params:         0       1       0
  3211 ;;      Locals:         0       2       0
  3212 ;;      Temps:          0       2       0
  3213 ;;      Totals:         0       5       0
  3214 ;;Total ram usage:        5 bytes
  3215 ;; Hardware stack levels used:    1
  3216 ;; Hardware stack levels required when called:    3
  3217 ;; This function calls:
  3218 ;;		_close_RX_USART
  3219 ;; This function is called by:
  3220 ;;		_mess_handler
  3221 ;;		_config_ASIC
  3222 ;;		_read_ADC_channels
  3223 ;;		_measure_Impedance
  3224 ;;		_measure_Impedance_no_offset
  3225 ;; This function uses a non-reentrant model
  3226 ;;
  3227                           
  3228                           
  3229                           ;psect for function _lputs_ISR
  3230  02F0                     _lputs_ISR:	
  3231                           
  3232                           ;incstack = 0
  3233                           ; Regs used in _lputs_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3234                           ;lputs_ISR@data stored from wreg
  3235  02F0  0020               	movlb	0	; select bank0
  3236  02F1  00CF               	movwf	lputs_ISR@data
  3237                           
  3238                           ;USART1823.c: 133: unsigned char i;
  3239                           ;USART1823.c: 135: if (USART_tx_flag == 1)
  3240  02F2  0372               	decf	_USART_tx_flag,w	;volatile
  3241  02F3  1903               	btfsc	3,2
  3242  02F4  0008               	return
  3243                           
  3244                           ;USART1823.c: 138: for (i = 0; i < length; i++)
  3245                           
  3246                           ;USART1823.c: 136: return;
  3247  02F5  01D0               	clrf	lputs_ISR@i
  3248  02F6                     l1981:	
  3249  02F6  084C               	movf	lputs_ISR@length,w
  3250  02F7  0250               	subwf	lputs_ISR@i,w
  3251  02F8  1803               	btfsc	3,0
  3252  02F9  2B0D               	goto	l1983
  3253                           
  3254                           ;USART1823.c: 139: USART_tx_data[i] = data[i];
  3255  02FA  0850               	movf	lputs_ISR@i,w
  3256  02FB  074F               	addwf	lputs_ISR@data,w
  3257  02FC  00CD               	movwf	??_lputs_ISR
  3258  02FD  084D               	movf	??_lputs_ISR,w
  3259  02FE  0086               	movwf	6
  3260  02FF  0187               	clrf	7
  3261  0300  0801               	movf	1,w
  3262  0301  00CE               	movwf	??_lputs_ISR+1
  3263  0302  0850               	movf	lputs_ISR@i,w
  3264  0303  3E2F               	addlw	(low (_USART_tx_data| 0))& (0+255)
  3265  0304  0086               	movwf	6
  3266  0305  0187               	clrf	7
  3267  0306  084E               	movf	??_lputs_ISR+1,w
  3268  0307  0081               	movwf	1
  3269  0308  3001               	movlw	1
  3270  0309  00CD               	movwf	??_lputs_ISR
  3271  030A  084D               	movf	??_lputs_ISR,w
  3272  030B  07D0               	addwf	lputs_ISR@i,f
  3273  030C  2AF6               	goto	l1981
  3274  030D                     l1983:	
  3275                           
  3276                           ;USART1823.c: 141: close_RX_USART();
  3277  030D  241B               	fcall	_close_RX_USART
  3278                           
  3279                           ;USART1823.c: 143: USART_tx_index = 0;
  3280  030E  01F3               	clrf	_USART_tx_index	;volatile
  3281                           
  3282                           ;USART1823.c: 144: USART_tx_length = length;
  3283  030F  0020               	movlb	0	; select bank0
  3284  0310  084C               	movf	lputs_ISR@length,w
  3285  0311  00CD               	movwf	??_lputs_ISR
  3286  0312  084D               	movf	??_lputs_ISR,w
  3287  0313  00F4               	movwf	_USART_tx_length	;volatile
  3288                           
  3289                           ;USART1823.c: 146: USART_tx_flag = 1;
  3290  0314  3001               	movlw	1
  3291  0315  00CD               	movwf	??_lputs_ISR
  3292  0316  084D               	movf	??_lputs_ISR,w
  3293  0317  00F2               	movwf	_USART_tx_flag	;volatile
  3294                           
  3295                           ;USART1823.c: 147: TXIE = 1;
  3296  0318  0021               	movlb	1	; select bank1
  3297  0319  1611               	bsf	17,4	;volatile
  3298  031A  0008               	return
  3299  031B                     __end_of_lputs_ISR:	
  3300                           
  3301                           	psect	text15
  3302  041B                     __ptext15:	
  3303 ;; *************** function _close_RX_USART *****************
  3304 ;; Defined at:
  3305 ;;		line 35 in file "USART1823.c"
  3306 ;; Parameters:    Size  Location     Type
  3307 ;;		None
  3308 ;; Auto vars:     Size  Location     Type
  3309 ;;		None
  3310 ;; Return value:  Size  Location     Type
  3311 ;;                  1    wreg      void 
  3312 ;; Registers used:
  3313 ;;		None
  3314 ;; Tracked objects:
  3315 ;;		On entry : 0/0
  3316 ;;		On exit  : 0/0
  3317 ;;		Unchanged: 0/0
  3318 ;; Data sizes:     COMMON   BANK0   BANK1
  3319 ;;      Params:         0       0       0
  3320 ;;      Locals:         0       0       0
  3321 ;;      Temps:          0       0       0
  3322 ;;      Totals:         0       0       0
  3323 ;;Total ram usage:        0 bytes
  3324 ;; Hardware stack levels used:    1
  3325 ;; Hardware stack levels required when called:    2
  3326 ;; This function calls:
  3327 ;;		Nothing
  3328 ;; This function is called by:
  3329 ;;		_lputs_ISR
  3330 ;; This function uses a non-reentrant model
  3331 ;;
  3332                           
  3333                           
  3334                           ;psect for function _close_RX_USART
  3335  041B                     _close_RX_USART:	
  3336                           
  3337                           ;USART1823.c: 39: RCIE = 0;
  3338                           
  3339                           ;incstack = 0
  3340                           ; Regs used in _close_RX_USART: []
  3341  041B  0021               	movlb	1	; select bank1
  3342  041C  1291               	bcf	17,5	;volatile
  3343                           
  3344                           ;USART1823.c: 40: CREN = 0;
  3345  041D  0023               	movlb	3	; select bank3
  3346  041E  121D               	bcf	29,4	;volatile
  3347  041F  0008               	return
  3348  0420                     __end_of_close_RX_USART:	
  3349                           
  3350                           	psect	text16
  3351  0127                     __ptext16:	
  3352 ;; *************** function _VIN_config *****************
  3353 ;; Defined at:
  3354 ;;		line 68 in file "bio3.c"
  3355 ;; Parameters:    Size  Location     Type
  3356 ;;  conf            6    0[BANK0 ] struct .
  3357 ;; Auto vars:     Size  Location     Type
  3358 ;;  out             1    8[BANK0 ] unsigned char 
  3359 ;;  i               1    7[BANK0 ] unsigned char 
  3360 ;;  j               1    0        unsigned char 
  3361 ;; Return value:  Size  Location     Type
  3362 ;;                  1    wreg      void 
  3363 ;; Registers used:
  3364 ;;		wreg, status,2, status,0
  3365 ;; Tracked objects:
  3366 ;;		On entry : 0/0
  3367 ;;		On exit  : 0/0
  3368 ;;		Unchanged: 0/0
  3369 ;; Data sizes:     COMMON   BANK0   BANK1
  3370 ;;      Params:         0       6       0
  3371 ;;      Locals:         0       2       0
  3372 ;;      Temps:          0       1       0
  3373 ;;      Totals:         0       9       0
  3374 ;;Total ram usage:        9 bytes
  3375 ;; Hardware stack levels used:    1
  3376 ;; Hardware stack levels required when called:    2
  3377 ;; This function calls:
  3378 ;;		Nothing
  3379 ;; This function is called by:
  3380 ;;		_config_ASIC
  3381 ;;		_measure_Impedance
  3382 ;;		_measure_Impedance_no_offset
  3383 ;; This function uses a non-reentrant model
  3384 ;;
  3385                           
  3386                           
  3387                           ;psect for function _VIN_config
  3388  0127                     _VIN_config:	
  3389                           
  3390                           ;bio3.c: 71: unsigned char i,j,out;
  3391                           ;bio3.c: 73: out &= 0b11110111; PORTC = out;;
  3392                           
  3393                           ;incstack = 0
  3394                           ; Regs used in _VIN_config: [wreg+status,2+status,0]
  3395  0127  30F7               	movlw	247
  3396  0128  0020               	movlb	0	; select bank0
  3397  0129  00D2               	movwf	??_VIN_config
  3398  012A  0852               	movf	??_VIN_config,w
  3399  012B  05D4               	andwf	VIN_config@out,f
  3400  012C  0854               	movf	VIN_config@out,w
  3401  012D  008E               	movwf	14	;volatile
  3402                           
  3403                           ;bio3.c: 74: _delay((unsigned long)((100)*(500000/4000000.0)));
  3404  012E  3004               	movlw	4
  3405  012F                     u1057:	
  3406  012F  0B89               	decfsz	9,f
  3407  0130  292F               	goto	u1057
  3408                           
  3409                           ;bio3.c: 76: RA5 = 0;;
  3410  0131  0020               	movlb	0	; select bank0
  3411  0132  128C               	bcf	12,5	;volatile
  3412                           
  3413                           ;bio3.c: 77: _delay((unsigned long)((100)*(500000/4000000.0)));
  3414  0133  3004               	movlw	4
  3415  0134                     u1067:	
  3416  0134  0B89               	decfsz	9,f
  3417  0135  2934               	goto	u1067
  3418                           
  3419                           ;bio3.c: 79: RA5 = 1;;
  3420  0136  0020               	movlb	0	; select bank0
  3421  0137  168C               	bsf	12,5	;volatile
  3422                           
  3423                           ;bio3.c: 81: for(i = 0; i < 16; i++) {
  3424  0138  01D3               	clrf	VIN_config@i
  3425  0139  3010               	movlw	16
  3426  013A  0253               	subwf	VIN_config@i,w
  3427  013B  1803               	btfsc	3,0
  3428  013C  2965               	goto	l1925
  3429  013D                     l142:	
  3430                           
  3431                           ;bio3.c: 82: if (conf.datas[0] & 0x0001) {
  3432  013D  1C4C               	btfss	VIN_config@conf,0
  3433  013E  2941               	goto	l1911
  3434                           
  3435                           ;bio3.c: 83: out |= 0b00000100; PORTC = out;;
  3436  013F  1554               	bsf	VIN_config@out,2
  3437  0140  2945               	goto	l1913
  3438  0141                     l1911:	
  3439                           ;bio3.c: 84: } else {
  3440                           
  3441                           
  3442                           ;bio3.c: 85: out &= 0b11111011; PORTC = out;;
  3443  0141  30FB               	movlw	251
  3444  0142  00D2               	movwf	??_VIN_config
  3445  0143  0852               	movf	??_VIN_config,w
  3446  0144  05D4               	andwf	VIN_config@out,f
  3447  0145                     l1913:	
  3448  0145  0854               	movf	VIN_config@out,w
  3449  0146  008E               	movwf	14	;volatile
  3450                           
  3451                           ;bio3.c: 86: }
  3452                           ;bio3.c: 87: conf.datas[0] >>= 1;
  3453  0147  3001               	movlw	1
  3454  0148                     u775:	
  3455  0148  36CD               	lsrf	VIN_config@conf+1,f
  3456  0149  0CCC               	rrf	VIN_config@conf,f
  3457  014A  0B89               	decfsz	9,f
  3458  014B  2948               	goto	u775
  3459                           
  3460                           ;bio3.c: 89: _delay((unsigned long)((100)*(500000/4000000.0)));
  3461  014C  3004               	movlw	4
  3462  014D                     u1077:	
  3463  014D  0B89               	decfsz	9,f
  3464  014E  294D               	goto	u1077
  3465                           
  3466                           ;bio3.c: 91: out |= 0b00001000; PORTC = out;;
  3467  014F  0020               	movlb	0	; select bank0
  3468  0150  15D4               	bsf	VIN_config@out,3
  3469  0151  0854               	movf	VIN_config@out,w
  3470  0152  008E               	movwf	14	;volatile
  3471                           
  3472                           ;bio3.c: 92: _delay((unsigned long)((100)*(500000/4000000.0)));
  3473  0153  3004               	movlw	4
  3474  0154                     u1087:	
  3475  0154  0B89               	decfsz	9,f
  3476  0155  2954               	goto	u1087
  3477                           
  3478                           ;bio3.c: 93: out &= 0b11110111; PORTC = out;;
  3479  0156  30F7               	movlw	247
  3480  0157  0020               	movlb	0	; select bank0
  3481  0158  00D2               	movwf	??_VIN_config
  3482  0159  0852               	movf	??_VIN_config,w
  3483  015A  05D4               	andwf	VIN_config@out,f
  3484  015B  0854               	movf	VIN_config@out,w
  3485  015C  008E               	movwf	14	;volatile
  3486  015D  3001               	movlw	1
  3487  015E  00D2               	movwf	??_VIN_config
  3488  015F  0852               	movf	??_VIN_config,w
  3489  0160  07D3               	addwf	VIN_config@i,f
  3490  0161  3010               	movlw	16
  3491  0162  0253               	subwf	VIN_config@i,w
  3492  0163  1C03               	skipc
  3493  0164  293D               	goto	l142
  3494  0165                     l1925:	
  3495                           
  3496                           ;bio3.c: 94: }
  3497                           ;bio3.c: 96: for(i = 0; i < 16; i++) {
  3498  0165  01D3               	clrf	VIN_config@i
  3499  0166  3010               	movlw	16
  3500  0167  0253               	subwf	VIN_config@i,w
  3501  0168  1803               	btfsc	3,0
  3502  0169  2992               	goto	l1949
  3503  016A                     l146:	
  3504                           
  3505                           ;bio3.c: 97: if (conf.datas[1] & 0x0001) {
  3506  016A  1C4E               	btfss	VIN_config@conf+2,0
  3507  016B  296E               	goto	l1935
  3508                           
  3509                           ;bio3.c: 98: out |= 0b00000100; PORTC = out;;
  3510  016C  1554               	bsf	VIN_config@out,2
  3511  016D  2972               	goto	l1937
  3512  016E                     l1935:	
  3513                           ;bio3.c: 99: } else {
  3514                           
  3515                           
  3516                           ;bio3.c: 100: out &= 0b11111011; PORTC = out;;
  3517  016E  30FB               	movlw	251
  3518  016F  00D2               	movwf	??_VIN_config
  3519  0170  0852               	movf	??_VIN_config,w
  3520  0171  05D4               	andwf	VIN_config@out,f
  3521  0172                     l1937:	
  3522  0172  0854               	movf	VIN_config@out,w
  3523  0173  008E               	movwf	14	;volatile
  3524                           
  3525                           ;bio3.c: 101: }
  3526                           ;bio3.c: 102: conf.datas[1] >>= 1;
  3527  0174  3001               	movlw	1
  3528  0175                     u815:	
  3529  0175  36CF               	lsrf	VIN_config@conf+3,f
  3530  0176  0CCE               	rrf	VIN_config@conf+2,f
  3531  0177  0B89               	decfsz	9,f
  3532  0178  2975               	goto	u815
  3533                           
  3534                           ;bio3.c: 104: _delay((unsigned long)((100)*(500000/4000000.0)));
  3535  0179  3004               	movlw	4
  3536  017A                     u1097:	
  3537  017A  0B89               	decfsz	9,f
  3538  017B  297A               	goto	u1097
  3539                           
  3540                           ;bio3.c: 106: out |= 0b00001000; PORTC = out;;
  3541  017C  0020               	movlb	0	; select bank0
  3542  017D  15D4               	bsf	VIN_config@out,3
  3543  017E  0854               	movf	VIN_config@out,w
  3544  017F  008E               	movwf	14	;volatile
  3545                           
  3546                           ;bio3.c: 107: _delay((unsigned long)((100)*(500000/4000000.0)));
  3547  0180  3004               	movlw	4
  3548  0181                     u1107:	
  3549  0181  0B89               	decfsz	9,f
  3550  0182  2981               	goto	u1107
  3551                           
  3552                           ;bio3.c: 108: out &= 0b11110111; PORTC = out;;
  3553  0183  30F7               	movlw	247
  3554  0184  0020               	movlb	0	; select bank0
  3555  0185  00D2               	movwf	??_VIN_config
  3556  0186  0852               	movf	??_VIN_config,w
  3557  0187  05D4               	andwf	VIN_config@out,f
  3558  0188  0854               	movf	VIN_config@out,w
  3559  0189  008E               	movwf	14	;volatile
  3560  018A  3001               	movlw	1
  3561  018B  00D2               	movwf	??_VIN_config
  3562  018C  0852               	movf	??_VIN_config,w
  3563  018D  07D3               	addwf	VIN_config@i,f
  3564  018E  3010               	movlw	16
  3565  018F  0253               	subwf	VIN_config@i,w
  3566  0190  1C03               	skipc
  3567  0191  296A               	goto	l146
  3568  0192                     l1949:	
  3569                           
  3570                           ;bio3.c: 109: }
  3571                           ;bio3.c: 111: for(i = 0; i < 1; i++) {
  3572  0192  01D3               	clrf	VIN_config@i
  3573  0193                     L1:	
  3574  0193  0853               	movf	VIN_config@i,w
  3575  0194  1D03               	btfss	3,2
  3576  0195  0008               	return
  3577                           
  3578                           ;bio3.c: 112: if (conf.datas[2] & 0x0001) {
  3579  0196  1C50               	btfss	VIN_config@conf+4,0
  3580  0197  299A               	goto	l1959
  3581                           
  3582                           ;bio3.c: 113: out |= 0b00000100; PORTC = out;;
  3583  0198  1554               	bsf	VIN_config@out,2
  3584  0199  299E               	goto	l1961
  3585  019A                     l1959:	
  3586                           ;bio3.c: 114: } else {
  3587                           
  3588                           
  3589                           ;bio3.c: 115: out &= 0b11111011; PORTC = out;;
  3590  019A  30FB               	movlw	251
  3591  019B  00D2               	movwf	??_VIN_config
  3592  019C  0852               	movf	??_VIN_config,w
  3593  019D  05D4               	andwf	VIN_config@out,f
  3594  019E                     l1961:	
  3595  019E  0854               	movf	VIN_config@out,w
  3596  019F  008E               	movwf	14	;volatile
  3597                           
  3598                           ;bio3.c: 116: }
  3599                           ;bio3.c: 117: conf.datas[2] >>= 1;
  3600  01A0  3001               	movlw	1
  3601  01A1                     u855:	
  3602  01A1  36D1               	lsrf	VIN_config@conf+5,f
  3603  01A2  0CD0               	rrf	VIN_config@conf+4,f
  3604  01A3  0B89               	decfsz	9,f
  3605  01A4  29A1               	goto	u855
  3606                           
  3607                           ;bio3.c: 119: _delay((unsigned long)((100)*(500000/4000000.0)));
  3608  01A5  3004               	movlw	4
  3609  01A6                     u1117:	
  3610  01A6  0B89               	decfsz	9,f
  3611  01A7  29A6               	goto	u1117
  3612                           
  3613                           ;bio3.c: 121: out |= 0b00001000; PORTC = out;;
  3614  01A8  0020               	movlb	0	; select bank0
  3615  01A9  15D4               	bsf	VIN_config@out,3
  3616  01AA  0854               	movf	VIN_config@out,w
  3617  01AB  008E               	movwf	14	;volatile
  3618                           
  3619                           ;bio3.c: 122: _delay((unsigned long)((100)*(500000/4000000.0)));
  3620  01AC  3004               	movlw	4
  3621  01AD                     u1127:	
  3622  01AD  0B89               	decfsz	9,f
  3623  01AE  29AD               	goto	u1127
  3624                           
  3625                           ;bio3.c: 123: out &= 0b11110111; PORTC = out;;
  3626  01AF  30F7               	movlw	247
  3627  01B0  0020               	movlb	0	; select bank0
  3628  01B1  00D2               	movwf	??_VIN_config
  3629  01B2  0852               	movf	??_VIN_config,w
  3630  01B3  05D4               	andwf	VIN_config@out,f
  3631  01B4  0854               	movf	VIN_config@out,w
  3632  01B5  008E               	movwf	14	;volatile
  3633  01B6  3001               	movlw	1
  3634  01B7  00D2               	movwf	??_VIN_config
  3635  01B8  0852               	movf	??_VIN_config,w
  3636  01B9  07D3               	addwf	VIN_config@i,f
  3637  01BA  2993               	goto	L1
  3638  01BB                     __end_of_VIN_config:	
  3639                           
  3640                           	psect	text17
  3641  0424                     __ptext17:	
  3642 ;; *************** function _SYSTEM_Initialize *****************
  3643 ;; Defined at:
  3644 ;;		line 70 in file "mcc_generated_files/mcc.c"
  3645 ;; Parameters:    Size  Location     Type
  3646 ;;		None
  3647 ;; Auto vars:     Size  Location     Type
  3648 ;;		None
  3649 ;; Return value:  Size  Location     Type
  3650 ;;                  1    wreg      void 
  3651 ;; Registers used:
  3652 ;;		wreg, status,2, status,0, pclath, cstack
  3653 ;; Tracked objects:
  3654 ;;		On entry : 0/0
  3655 ;;		On exit  : 0/0
  3656 ;;		Unchanged: 0/0
  3657 ;; Data sizes:     COMMON   BANK0   BANK1
  3658 ;;      Params:         0       0       0
  3659 ;;      Locals:         0       0       0
  3660 ;;      Temps:          0       0       0
  3661 ;;      Totals:         0       0       0
  3662 ;;Total ram usage:        0 bytes
  3663 ;; Hardware stack levels used:    1
  3664 ;; Hardware stack levels required when called:    3
  3665 ;; This function calls:
  3666 ;;		_OSCILLATOR_Initialize
  3667 ;;		_PIN_MANAGER_Initialize
  3668 ;; This function is called by:
  3669 ;;		_main
  3670 ;; This function uses a non-reentrant model
  3671 ;;
  3672                           
  3673                           
  3674                           ;psect for function _SYSTEM_Initialize
  3675  0424                     _SYSTEM_Initialize:	
  3676                           
  3677                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  3678                           
  3679                           ;incstack = 0
  3680                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3681  0424  23A8               	fcall	_PIN_MANAGER_Initialize
  3682                           
  3683                           ;mcc.c: 74: OSCILLATOR_Initialize();
  3684  0425  2415               	fcall	_OSCILLATOR_Initialize
  3685  0426  0008               	return
  3686  0427                     __end_of_SYSTEM_Initialize:	
  3687                           
  3688                           	psect	text18
  3689  03A8                     __ptext18:	
  3690 ;; *************** function _PIN_MANAGER_Initialize *****************
  3691 ;; Defined at:
  3692 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  3693 ;; Parameters:    Size  Location     Type
  3694 ;;		None
  3695 ;; Auto vars:     Size  Location     Type
  3696 ;;		None
  3697 ;; Return value:  Size  Location     Type
  3698 ;;                  1    wreg      void 
  3699 ;; Registers used:
  3700 ;;		wreg, status,2
  3701 ;; Tracked objects:
  3702 ;;		On entry : 0/0
  3703 ;;		On exit  : 0/0
  3704 ;;		Unchanged: 0/0
  3705 ;; Data sizes:     COMMON   BANK0   BANK1
  3706 ;;      Params:         0       0       0
  3707 ;;      Locals:         0       0       0
  3708 ;;      Temps:          0       0       0
  3709 ;;      Totals:         0       0       0
  3710 ;;Total ram usage:        0 bytes
  3711 ;; Hardware stack levels used:    1
  3712 ;; Hardware stack levels required when called:    2
  3713 ;; This function calls:
  3714 ;;		Nothing
  3715 ;; This function is called by:
  3716 ;;		_SYSTEM_Initialize
  3717 ;; This function uses a non-reentrant model
  3718 ;;
  3719                           
  3720                           
  3721                           ;psect for function _PIN_MANAGER_Initialize
  3722  03A8                     _PIN_MANAGER_Initialize:	
  3723                           
  3724                           ;pin_manager.c: 51: LATA = 0x0;
  3725                           
  3726                           ;incstack = 0
  3727                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3728  03A8  0022               	movlb	2	; select bank2
  3729  03A9  018C               	clrf	12	;volatile
  3730                           
  3731                           ;pin_manager.c: 52: LATC = 0x0;
  3732  03AA  018E               	clrf	14	;volatile
  3733                           
  3734                           ;pin_manager.c: 55: ANSELA = 0b00000100;
  3735  03AB  3004               	movlw	4
  3736  03AC  0023               	movlb	3	; select bank3
  3737  03AD  008C               	movwf	12	;volatile
  3738                           
  3739                           ;pin_manager.c: 56: ANSELC = 0b00000011;
  3740  03AE  3003               	movlw	3
  3741  03AF  008E               	movwf	14	;volatile
  3742                           
  3743                           ;pin_manager.c: 59: WPUA = 0x3B;
  3744  03B0  303B               	movlw	59
  3745  03B1  0024               	movlb	4	; select bank4
  3746  03B2  008C               	movwf	12	;volatile
  3747                           
  3748                           ;pin_manager.c: 60: WPUC = 0x3C;
  3749  03B3  303C               	movlw	60
  3750  03B4  008E               	movwf	14	;volatile
  3751                           
  3752                           ;pin_manager.c: 62: RXDTSEL = 0;
  3753  03B5  0022               	movlb	2	; select bank2
  3754  03B6  139D               	bcf	29,7	;volatile
  3755                           
  3756                           ;pin_manager.c: 63: TXCKSEL = 0;
  3757  03B7  111D               	bcf	29,2	;volatile
  3758                           
  3759                           ;pin_manager.c: 66: TRISC = 0b01100011;
  3760  03B8  3063               	movlw	99
  3761  03B9  0021               	movlb	1	; select bank1
  3762  03BA  008E               	movwf	14	;volatile
  3763                           
  3764                           ;pin_manager.c: 67: TRISA = 0b01011111;
  3765  03BB  305F               	movlw	95
  3766  03BC  008C               	movwf	12	;volatile
  3767                           
  3768                           ;pin_manager.c: 69: OPTION_REGbits.nWPUEN = 0x0;
  3769  03BD  1395               	bcf	21,7	;volatile
  3770                           
  3771                           ;pin_manager.c: 70: APFCON = 0x00;
  3772  03BE  0022               	movlb	2	; select bank2
  3773  03BF  019D               	clrf	29	;volatile
  3774  03C0  0008               	return
  3775  03C1                     __end_of_PIN_MANAGER_Initialize:	
  3776                           
  3777                           	psect	text19
  3778  0415                     __ptext19:	
  3779 ;; *************** function _OSCILLATOR_Initialize *****************
  3780 ;; Defined at:
  3781 ;;		line 78 in file "mcc_generated_files/mcc.c"
  3782 ;; Parameters:    Size  Location     Type
  3783 ;;		None
  3784 ;; Auto vars:     Size  Location     Type
  3785 ;;		None
  3786 ;; Return value:  Size  Location     Type
  3787 ;;                  1    wreg      void 
  3788 ;; Registers used:
  3789 ;;		wreg, status,2
  3790 ;; Tracked objects:
  3791 ;;		On entry : 0/0
  3792 ;;		On exit  : 0/0
  3793 ;;		Unchanged: 0/0
  3794 ;; Data sizes:     COMMON   BANK0   BANK1
  3795 ;;      Params:         0       0       0
  3796 ;;      Locals:         0       0       0
  3797 ;;      Temps:          0       0       0
  3798 ;;      Totals:         0       0       0
  3799 ;;Total ram usage:        0 bytes
  3800 ;; Hardware stack levels used:    1
  3801 ;; Hardware stack levels required when called:    2
  3802 ;; This function calls:
  3803 ;;		Nothing
  3804 ;; This function is called by:
  3805 ;;		_SYSTEM_Initialize
  3806 ;; This function uses a non-reentrant model
  3807 ;;
  3808                           
  3809                           
  3810                           ;psect for function _OSCILLATOR_Initialize
  3811  0415                     _OSCILLATOR_Initialize:	
  3812                           
  3813                           ;mcc.c: 81: OSCCON = 0x3A;
  3814                           
  3815                           ;incstack = 0
  3816                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3817  0415  303A               	movlw	58
  3818  0416  0021               	movlb	1	; select bank1
  3819  0417  0099               	movwf	25	;volatile
  3820                           
  3821                           ;mcc.c: 83: OSCSTAT = 0x00;
  3822  0418  019A               	clrf	26	;volatile
  3823                           
  3824                           ;mcc.c: 85: OSCTUNE = 0x00;
  3825  0419  0198               	clrf	24	;volatile
  3826  041A  0008               	return
  3827  041B                     __end_of_OSCILLATOR_Initialize:	
  3828                           
  3829                           	psect	intentry
  3830  0004                     __pintentry:	
  3831 ;; *************** function _isr *****************
  3832 ;; Defined at:
  3833 ;;		line 65 in file "main.c"
  3834 ;; Parameters:    Size  Location     Type
  3835 ;;		None
  3836 ;; Auto vars:     Size  Location     Type
  3837 ;;		None
  3838 ;; Return value:  Size  Location     Type
  3839 ;;                  1    wreg      void 
  3840 ;; Registers used:
  3841 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3842 ;; Tracked objects:
  3843 ;;		On entry : 0/0
  3844 ;;		On exit  : 0/0
  3845 ;;		Unchanged: 0/0
  3846 ;; Data sizes:     COMMON   BANK0   BANK1
  3847 ;;      Params:         0       0       0
  3848 ;;      Locals:         0       0       0
  3849 ;;      Temps:          2       0       0
  3850 ;;      Totals:         2       0       0
  3851 ;;Total ram usage:        2 bytes
  3852 ;; Hardware stack levels used:    1
  3853 ;; Hardware stack levels required when called:    1
  3854 ;; This function calls:
  3855 ;;		_start_TMR0_ISR
  3856 ;;		_stop_TMR0_ISR
  3857 ;;		i1_start_RX_USART_ISR
  3858 ;; This function is called by:
  3859 ;;		Interrupt level 1
  3860 ;; This function uses a non-reentrant model
  3861 ;;
  3862                           
  3863  0004                     _isr:	
  3864                           
  3865                           ;incstack = 0
  3866  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  3867                           
  3868                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3869  0005  3180               	pagesel	$
  3870  0006  0020               	movlb	0	; select bank0
  3871  0007  087F               	movf	127,w
  3872  0008  00F9               	movwf	??_isr+1
  3873                           
  3874                           ;main.c: 69: if (TMR0IF && TMR0IE) {
  3875  0009  190B               	btfsc	11,2	;volatile
  3876  000A  1E8B               	btfss	11,5	;volatile
  3877  000B  2815               	goto	i1l120
  3878                           
  3879                           ;main.c: 71: TMR0IF = 0;
  3880  000C  110B               	bcf	11,2	;volatile
  3881                           
  3882                           ;main.c: 72: TMR0 = TIMER0_timeout;
  3883  000D  0870               	movf	_TIMER0_timeout,w	;volatile
  3884  000E  0095               	movwf	21	;volatile
  3885                           
  3886                           ;main.c: 75: TIMER0_flag = 1;
  3887  000F  3001               	movlw	1
  3888  0010  00F8               	movwf	??_isr
  3889  0011  0878               	movf	??_isr,w
  3890  0012  00BE               	movwf	_TIMER0_flag	;volatile
  3891                           
  3892                           ;main.c: 80: stop_TMR0_ISR();
  3893  0013  2427               	fcall	_stop_TMR0_ISR
  3894                           
  3895                           ;main.c: 82: return;
  3896  0014  2850               	goto	i1l121
  3897  0015                     i1l120:	
  3898                           
  3899                           ;main.c: 83: }
  3900                           ;main.c: 87: if (RCIF) {
  3901  0015  1E91               	btfss	17,5	;volatile
  3902  0016  2834               	goto	i1l122
  3903                           
  3904                           ;main.c: 88: stop_TMR0_ISR();
  3905  0017  2427               	fcall	_stop_TMR0_ISR
  3906                           
  3907                           ;main.c: 91: if (OERR) {
  3908  0018  0023               	movlb	3	; select bank3
  3909  0019  1C9D               	btfss	29,1	;volatile
  3910  001A  281E               	goto	i1l1857
  3911                           
  3912                           ;main.c: 93: CREN = 0;
  3913  001B  121D               	bcf	29,4	;volatile
  3914                           
  3915                           ;main.c: 94: CREN = 1;
  3916  001C  161D               	bsf	29,4	;volatile
  3917                           
  3918                           ;main.c: 95: return;
  3919  001D  2850               	goto	i1l121
  3920  001E                     i1l1857:	
  3921                           
  3922                           ;main.c: 96: }
  3923                           ;main.c: 99: if (USART_rx_index >= 15) {
  3924  001E  300F               	movlw	15
  3925  001F  0020               	movlb	0	; select bank0
  3926  0020  0240               	subwf	_USART_rx_index,w	;volatile
  3927  0021  1803               	btfsc	3,0
  3928                           
  3929                           ;main.c: 100: USART_rx_index = 0;
  3930  0022  01C0               	clrf	_USART_rx_index	;volatile
  3931                           
  3932                           ;main.c: 101: }
  3933                           ;main.c: 103: USART_rx_data[USART_rx_index++] = RCREG;
  3934  0023  0023               	movlb	3	; select bank3
  3935  0024  0819               	movf	25,w	;volatile
  3936  0025  00F8               	movwf	??_isr
  3937  0026  0020               	movlb	0	; select bank0
  3938  0027  0840               	movf	_USART_rx_index,w
  3939  0028  3E20               	addlw	(low (_USART_rx_data| 0))& (0+255)
  3940  0029  0086               	movwf	6
  3941  002A  0187               	clrf	7
  3942  002B  0878               	movf	??_isr,w
  3943  002C  0081               	movwf	1
  3944  002D  3001               	movlw	1
  3945  002E  00F8               	movwf	??_isr
  3946  002F  0878               	movf	??_isr,w
  3947  0030  07C0               	addwf	_USART_rx_index,f	;volatile
  3948                           
  3949                           ;main.c: 105: start_TMR0_ISR(98);
  3950  0031  3062               	movlw	98
  3951  0032  23E3               	fcall	_start_TMR0_ISR
  3952                           
  3953                           ;main.c: 107: return;
  3954  0033  2850               	goto	i1l121
  3955  0034                     i1l122:	
  3956                           
  3957                           ;main.c: 108: }
  3958                           ;main.c: 112: if (TXIF && TXIE) {
  3959  0034  1E11               	btfss	17,4	;volatile
  3960  0035  2850               	goto	i1l121
  3961  0036  0021               	movlb	1	; select bank1
  3962  0037  1E11               	btfss	17,4	;volatile
  3963  0038  2850               	goto	i1l121
  3964                           
  3965                           ;main.c: 114: TXREG = USART_tx_data[USART_tx_index++];
  3966  0039  0873               	movf	_USART_tx_index,w
  3967  003A  3E2F               	addlw	(low (_USART_tx_data| 0))& (0+255)
  3968  003B  0086               	movwf	6
  3969  003C  0187               	clrf	7
  3970  003D  0801               	movf	1,w
  3971  003E  0023               	movlb	3	; select bank3
  3972  003F  009A               	movwf	26	;volatile
  3973  0040  3001               	movlw	1
  3974  0041  00F8               	movwf	??_isr
  3975  0042  0878               	movf	??_isr,w
  3976  0043  07F3               	addwf	_USART_tx_index,f	;volatile
  3977                           
  3978                           ;main.c: 116: if (USART_tx_index >= USART_tx_length) {
  3979  0044  0874               	movf	_USART_tx_length,w	;volatile
  3980  0045  0273               	subwf	_USART_tx_index,w	;volatile
  3981  0046  1C03               	skipc
  3982  0047  2850               	goto	i1l121
  3983                           
  3984                           ;main.c: 117: TXIE = 0;
  3985  0048  0021               	movlb	1	; select bank1
  3986  0049  1211               	bcf	17,4	;volatile
  3987                           
  3988                           ;main.c: 118: USART_tx_flag = 0;
  3989  004A  01F2               	clrf	_USART_tx_flag	;volatile
  3990                           
  3991                           ;main.c: 121: _delay((unsigned long)((2)*(500000/4000.0)));
  3992  004B  3053               	movlw	83
  3993  004C                     u113_27:	
  3994  004C  0B89               	decfsz	9,f
  3995  004D  284C               	goto	u113_27
  3996  004E  0000               	nop
  3997                           
  3998                           ;main.c: 122: start_RX_USART_ISR();
  3999  004F  23D2               	fcall	i1_start_RX_USART_ISR
  4000  0050                     i1l121:	
  4001                           ;main.c: 123: }
  4002                           ;main.c: 124: return;
  4003                           
  4004  0050  0879               	movf	??_isr+1,w
  4005  0051  0020               	movlb	0	; select bank0
  4006  0052  00FF               	movwf	127
  4007  0053  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4008  0054  0009               	retfie
  4009  0055                     __end_of_isr:	
  4010                           
  4011                           	psect	text21
  4012  03D2                     __ptext21:	
  4013 ;; *************** function i1_start_RX_USART_ISR *****************
  4014 ;; Defined at:
  4015 ;;		line 82 in file "USART1823.c"
  4016 ;; Parameters:    Size  Location     Type
  4017 ;;		None
  4018 ;; Auto vars:     Size  Location     Type
  4019 ;;		None
  4020 ;; Return value:  Size  Location     Type
  4021 ;;                  1    wreg      void 
  4022 ;; Registers used:
  4023 ;;		wreg, status,2
  4024 ;; Tracked objects:
  4025 ;;		On entry : 0/0
  4026 ;;		On exit  : 0/0
  4027 ;;		Unchanged: 0/0
  4028 ;; Data sizes:     COMMON   BANK0   BANK1
  4029 ;;      Params:         0       0       0
  4030 ;;      Locals:         0       0       0
  4031 ;;      Temps:          0       0       0
  4032 ;;      Totals:         0       0       0
  4033 ;;Total ram usage:        0 bytes
  4034 ;; Hardware stack levels used:    1
  4035 ;; This function calls:
  4036 ;;		Nothing
  4037 ;; This function is called by:
  4038 ;;		_isr
  4039 ;; This function uses a non-reentrant model
  4040 ;;
  4041                           
  4042                           
  4043                           ;psect for function i1_start_RX_USART_ISR
  4044  03D2                     i1_start_RX_USART_ISR:	
  4045                           
  4046                           ;USART1823.c: 85: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  4047                           
  4048                           ;incstack = 0
  4049                           ; Regs used in i1_start_RX_USART_ISR: [wreg+status,2]
  4050  03D2  0023               	movlb	3	; select bank3
  4051  03D3  151E               	bsf	30,2	;volatile
  4052  03D4  159F               	bsf	31,3	;volatile
  4053  03D5  019C               	clrf	28	;volatile
  4054  03D6  300C               	movlw	12
  4055  03D7  009B               	movwf	27	;volatile
  4056                           
  4057                           ;USART1823.c: 87: SYNC = 0;
  4058  03D8  121E               	bcf	30,4	;volatile
  4059                           
  4060                           ;USART1823.c: 88: SPEN = 1;
  4061  03D9  179D               	bsf	29,7	;volatile
  4062                           
  4063                           ;USART1823.c: 89: CREN = 1;
  4064  03DA  161D               	bsf	29,4	;volatile
  4065                           
  4066                           ;USART1823.c: 91: USART_rx_flag = 0;
  4067  03DB  0020               	movlb	0	; select bank0
  4068  03DC  01BF               	clrf	_USART_rx_flag	;volatile
  4069                           
  4070                           ;USART1823.c: 92: USART_rx_index = 0;
  4071  03DD  01C0               	clrf	_USART_rx_index	;volatile
  4072                           
  4073                           ;USART1823.c: 94: RCIE = 1;
  4074  03DE  0021               	movlb	1	; select bank1
  4075  03DF  1691               	bsf	17,5	;volatile
  4076                           
  4077                           ;USART1823.c: 95: PEIE = 1;
  4078  03E0  170B               	bsf	11,6	;volatile
  4079                           
  4080                           ;USART1823.c: 96: GIE = 1;
  4081  03E1  178B               	bsf	11,7	;volatile
  4082  03E2  0008               	return
  4083  03E3                     __end_ofi1_start_RX_USART_ISR:	
  4084                           
  4085                           	psect	text22
  4086  0427                     __ptext22:	
  4087 ;; *************** function _stop_TMR0_ISR *****************
  4088 ;; Defined at:
  4089 ;;		line 44 in file "TMR0.c"
  4090 ;; Parameters:    Size  Location     Type
  4091 ;;		None
  4092 ;; Auto vars:     Size  Location     Type
  4093 ;;		None
  4094 ;; Return value:  Size  Location     Type
  4095 ;;                  1    wreg      void 
  4096 ;; Registers used:
  4097 ;;		None
  4098 ;; Tracked objects:
  4099 ;;		On entry : 0/0
  4100 ;;		On exit  : 0/0
  4101 ;;		Unchanged: 0/0
  4102 ;; Data sizes:     COMMON   BANK0   BANK1
  4103 ;;      Params:         0       0       0
  4104 ;;      Locals:         0       0       0
  4105 ;;      Temps:          0       0       0
  4106 ;;      Totals:         0       0       0
  4107 ;;Total ram usage:        0 bytes
  4108 ;; Hardware stack levels used:    1
  4109 ;; This function calls:
  4110 ;;		Nothing
  4111 ;; This function is called by:
  4112 ;;		_isr
  4113 ;; This function uses a non-reentrant model
  4114 ;;
  4115                           
  4116                           
  4117                           ;psect for function _stop_TMR0_ISR
  4118  0427                     _stop_TMR0_ISR:	
  4119                           
  4120                           ;TMR0.c: 47: TMR0IE = 0;
  4121                           
  4122                           ;incstack = 0
  4123                           ; Regs used in _stop_TMR0_ISR: []
  4124  0427  128B               	bcf	11,5	;volatile
  4125                           
  4126                           ;TMR0.c: 48: TMR0IF = 0;
  4127  0428  110B               	bcf	11,2	;volatile
  4128  0429  0008               	return
  4129  042A                     __end_of_stop_TMR0_ISR:	
  4130                           
  4131                           	psect	text23
  4132  03E3                     __ptext23:	
  4133 ;; *************** function _start_TMR0_ISR *****************
  4134 ;; Defined at:
  4135 ;;		line 30 in file "TMR0.c"
  4136 ;; Parameters:    Size  Location     Type
  4137 ;;  val             1    wreg     unsigned char 
  4138 ;; Auto vars:     Size  Location     Type
  4139 ;;  val             1    2[COMMON] unsigned char 
  4140 ;; Return value:  Size  Location     Type
  4141 ;;                  1    wreg      void 
  4142 ;; Registers used:
  4143 ;;		wreg, status,2
  4144 ;; Tracked objects:
  4145 ;;		On entry : 0/0
  4146 ;;		On exit  : 0/0
  4147 ;;		Unchanged: 0/0
  4148 ;; Data sizes:     COMMON   BANK0   BANK1
  4149 ;;      Params:         0       0       0
  4150 ;;      Locals:         1       0       0
  4151 ;;      Temps:          2       0       0
  4152 ;;      Totals:         3       0       0
  4153 ;;Total ram usage:        3 bytes
  4154 ;; Hardware stack levels used:    1
  4155 ;; This function calls:
  4156 ;;		Nothing
  4157 ;; This function is called by:
  4158 ;;		_isr
  4159 ;; This function uses a non-reentrant model
  4160 ;;
  4161                           
  4162                           
  4163                           ;psect for function _start_TMR0_ISR
  4164  03E3                     _start_TMR0_ISR:	
  4165                           
  4166                           ;incstack = 0
  4167                           ; Regs used in _start_TMR0_ISR: [wreg+status,2]
  4168                           ;start_TMR0_ISR@val stored from wreg
  4169  03E3  00F7               	movwf	start_TMR0_ISR@val
  4170                           
  4171                           ;TMR0.c: 32: TIMER0_timeout = val;
  4172  03E4  0877               	movf	start_TMR0_ISR@val,w
  4173  03E5  00F5               	movwf	??_start_TMR0_ISR
  4174  03E6  01F6               	clrf	??_start_TMR0_ISR+1
  4175  03E7  0875               	movf	??_start_TMR0_ISR,w
  4176  03E8  00F0               	movwf	_TIMER0_timeout	;volatile
  4177  03E9  0876               	movf	??_start_TMR0_ISR+1,w
  4178  03EA  00F1               	movwf	_TIMER0_timeout+1	;volatile
  4179                           
  4180                           ;TMR0.c: 33: TIMER0_flag = 0;
  4181  03EB  0020               	movlb	0	; select bank0
  4182  03EC  01BE               	clrf	_TIMER0_flag	;volatile
  4183                           
  4184                           ;TMR0.c: 36: TMR0 = TIMER0_timeout;
  4185  03ED  0870               	movf	_TIMER0_timeout,w	;volatile
  4186  03EE  0095               	movwf	21	;volatile
  4187                           
  4188                           ;TMR0.c: 39: TMR0IF = 0;
  4189  03EF  110B               	bcf	11,2	;volatile
  4190                           
  4191                           ;TMR0.c: 40: TMR0IE = 1;
  4192  03F0  168B               	bsf	11,5	;volatile
  4193                           
  4194                           ;TMR0.c: 41: GIE = 1;
  4195  03F1  178B               	bsf	11,7	;volatile
  4196  03F2  0008               	return
  4197  03F3                     __end_of_start_TMR0_ISR:	
  4198  007E                     btemp	set	126	;btemp
  4199  007E                     int$flags	set	126
  4200  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         49
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     36      80
    BANK1            32      0       0

Pointer List with Targets:

    lputs_ISR@data	PTR unsigned char  size(1) Largest target is 13
		 -> measure_Impedance_no_offset@aux(BANK0[13]), measure_Impedance@aux(BANK0[13]), read_ADC_channels@aux(BANK0[7]), mess_rec(BANK0[10]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_start_TMR0_ISR

Critical Paths under _main in BANK0

    _main->_mess_handler
    _mess_handler->_measure_Impedance
    _mess_handler->_measure_Impedance_no_offset
    _read_ADC_channels->_ADC_2
    _read_ADC_channels->_ADC_4
    _read_ADC_channels->_ADC_5
    _measure_Impedance_no_offset->_VIN_config
    _measure_Impedance->_VIN_config
    _config_ASIC->_VIN_config

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   10643
                                             34 BANK0      2     2      0
                  _SYSTEM_Initialize
                       _mess_handler
                          _setup_ADC
                         _setup_TMR0
                          _start_RCM
                 _start_RX_USART_ISR
                 _start_TX_USART_ISR
 ---------------------------------------------------------------------------------
 (1) _start_TX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RCM                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_TMR0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_ADC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _mess_handler                                         1     1      0   10544
                                             33 BANK0      1     1      0
                        _config_ASIC
                          _lputs_ISR
                  _measure_Impedance
        _measure_Impedance_no_offset
                  _read_ADC_channels
 ---------------------------------------------------------------------------------
 (2) _read_ADC_channels                                   14    14      0    1316
                                              6 BANK0     14    14      0
                              _ADC_2
                              _ADC_4
                              _ADC_5
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (3) _ADC_5                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _measure_Impedance_no_offset                         26    26      0    2983
                                              9 BANK0     24    24      0
                              _ADC_2
                              _ADC_4
                         _VIN_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (2) _measure_Impedance                                   26    26      0    3295
                                              9 BANK0     24    24      0
                              _ADC_2
                              _ADC_4
                         _VIN_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (3) _ADC_4                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _ADC_2                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _config_ASIC                                          7     7      0    2208
                                              9 BANK0      7     7      0
                         _VIN_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (3) _lputs_ISR                                            5     4      1     742
                                              0 BANK0      5     4      1
                     _close_RX_USART
 ---------------------------------------------------------------------------------
 (4) _close_RX_USART                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _VIN_config                                          10     4      6    1284
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  2     2      0      22
                                              3 COMMON     2     2      0
                     _start_TMR0_ISR
                      _stop_TMR0_ISR
               i1_start_RX_USART_ISR
 ---------------------------------------------------------------------------------
 (6) i1_start_RX_USART_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _stop_TMR0_ISR                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _start_TMR0_ISR                                       3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _mess_handler
     _config_ASIC
       _VIN_config
       _lputs_ISR
         _close_RX_USART
     _lputs_ISR
       _close_RX_USART
     _measure_Impedance
       _ADC_2
       _ADC_4
       _VIN_config
       _lputs_ISR
         _close_RX_USART
     _measure_Impedance_no_offset
       _ADC_2
       _ADC_4
       _VIN_config
       _lputs_ISR
         _close_RX_USART
     _read_ADC_channels
       _ADC_2
       _ADC_4
       _ADC_5
       _lputs_ISR
         _close_RX_USART
   _setup_ADC
   _setup_TMR0
   _start_RCM
   _start_RX_USART_ISR
   _start_TX_USART_ISR

 _isr (ROOT)
   _start_TMR0_ISR
   _stop_TMR0_ISR
   i1_start_RX_USART_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      5A       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     24      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      5A       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Thu Mar  2 16:38:35 2017

                         __CFG_CP$OFF 0000                         _USART_rx_data 0020  
                       _USART_rx_flag 003F                         _USART_tx_data 002F  
                       _USART_tx_flag 0072                            _VIN_config 0127  
                                 l108 025B                                   l142 013D  
                                 l146 016A                                   l328 033E  
                                 l370 0345                                   l364 0368  
                                 l358 038B                                   _GIE 005F  
                                 _RA5 0065                                   _PS0 04A8  
                                 _PS1 04A9                                   _PS2 04AA  
                        __CFG_CPD$OFF 0000                                   u815 0175  
                                 _PSA 04AB                                   u905 0396  
                                 u925 0373                                   u855 01A1  
                                 u775 0148                                   u945 0350  
                                 u997 0254                                   _isr 0004  
                        __CFG_BORV$HI 0000                                   wreg 0009  
                        __CFG_IESO$ON 0000                        _USART_rx_index 0040  
                        __CFG_LVP$OFF 0000                        _USART_tx_index 0073  
                                l2221 031C                                  l2223 0324  
                                l2225 0326                                  l2233 032C  
                                l2227 0328                                  l2229 032A  
                                l2271 026F                                  l2273 0284  
                                l2259 0267                                  l1911 0141  
                                l1913 0145                                  l1925 0165  
                                l1935 016E                                  l1961 019E  
                                l1937 0172                                  l1949 0192  
                                l1981 02F6                                  l1959 019A  
                                l1983 030D                                  ?_isr 0075  
                                _ADGO 04E9                          __CFG_WDTE$ON 0000  
                                _BRGH 0CF2                                  _CREN 0CEC  
                                u1007 01EC                                  u1017 0222  
                                u1107 0181                                  u1027 0094  
                                u1117 01A6                                  u1037 00CB  
                                u1127 01AD                                  u1047 0101  
                                u1057 012F                                  u1067 0134  
                                u1077 014D                                  _LATA 010C  
                                u1087 0154                                  _LATC 010E  
                                u1097 017A                                  _PEIE 005E  
                                _RCIE 048D                                  _RCIF 008D  
                                _OERR 0CE9                                  _TMR0 0015  
                                _SPEN 0CEF                                  _TXIE 048C  
                                _TXEN 0CF5                                  _TXIF 008C  
                                _SYNC 0CF4                                  _WPUA 020C  
                                _WPUC 020E                __size_of_stop_TMR0_ISR 0003  
                   _read_ADC_channels 0286                          __CFG_WRT$OFF 0000  
                                _main 0248                                  fsr0h 0005  
                                fsr1h 0007                                  indf0 0000  
                                fsr0l 0004                                  indf1 0001  
                                fsr1l 0006                                  btemp 007E  
                  ?_read_ADC_channels 0075                                  start 0055  
                       __CFG_MCLRE$ON 0000                   ??_read_ADC_channels 0052  
                               ??_isr 0078        __size_of_OSCILLATOR_Initialize 0006  
                     _USART_tx_length 0074         __end_of_OSCILLATOR_Initialize 041B  
                               ?_main 0075                                 _ADC_2 0385  
                               _ADC_4 0362                                 _ADC_5 033F  
                               _BRG16 0CFB                                 i1l120 0015  
                               i1l121 0050                                 i1l122 0034  
                               _RCREG 0199                                 _PORTC 000E  
                               _TRISA 008C                        _start_TMR0_ISR 03E3  
                               _TRISC 008E                                 _TXREG 019A  
                      __CFG_FCMEN$OFF 0000             __end_of_read_ADC_channels 02BF  
        ?_measure_Impedance_no_offset 0075                                 main@i 006F  
       __size_ofi1_start_RX_USART_ISR 0011                        __CFG_BOREN$OFF 0000  
                               status 0003                                 wtemp0 007E  
                     __initialization 0056                          __end_of_main 0286  
                       _stop_TMR0_ISR 0427                      ??_close_RX_USART 004C  
              __end_of_start_TMR0_ISR 03F3                                ??_main 006E  
                              ?_ADC_2 004C                                ?_ADC_4 004C  
                              ?_ADC_5 004C                           ?_VIN_config 004C  
                      _TIMER0_timeout 0070                        __CFG_PLLEN$OFF 0000  
                              _ADCON0 009D                                _ADCON1 009E  
                              _ADRESH 009C                                _ADRESL 009B  
                              _APFCON 011D                                _ANSELA 018C  
                              _ANSELC 018E                                u113_27 004C  
                              i1l1857 001E                        VIN_config@conf 004C  
                              _OSCCON 0099         ??_measure_Impedance_no_offset 0055  
                              _TMR0IE 005D                                _TMR0IF 005A  
                              _TMR0CS 04AD                                _SPBRGH 019C  
                              _SPBRGL 019B                        __CFG_PWRTE$OFF 0000  
                __size_of_config_ASIC 0031                       config_ASIC@asic 0056  
                      __CFG_STVREN$ON 0000                        ?_stop_TMR0_ISR 0075  
                     ?_start_TMR0_ISR 0075                  measure_Impedance@aux 0056  
         __size_of_start_RX_USART_ISR 0011            __size_of_read_ADC_channels 0039  
                       ?_mess_handler 0075                     _SYSTEM_Initialize 0424  
             __end_of__initialization 0061                         __end_of_ADC_2 03A8  
                       __end_of_ADC_4 0385                    ?_SYSTEM_Initialize 0075  
                       __end_of_ADC_5 0362                   __size_of_VIN_config 0094  
                      __pcstackCOMMON 0075                   ??_SYSTEM_Initialize 004C  
__size_of_measure_Impedance_no_offset 008D                               ??_ADC_2 004E  
                             ??_ADC_4 004E                               ??_ADC_5 004E  
                      _OPTION_REGbits 0095           __size_of_start_TX_USART_ISR 000F  
                      ??_mess_handler 006D             __end_of_SYSTEM_Initialize 0427  
                          __pbssBANK0 0020                            __pmaintext 0248  
                     ??_stop_TMR0_ISR 0075                  read_ADC_channels@aux 0053  
                          __pintentry 0004                               _CLKRCON 039A  
                  __size_of_lputs_ISR 002B                       lputs_ISR@length 004C  
                  __size_of_setup_ADC 0006                               _OSCSTAT 009A  
                             _OSCTUNE 0098                    __size_of_start_RCM 0004  
                             _RXDTSEL 08EF                               _TXCKSEL 08EA  
        __end_ofi1_start_RX_USART_ISR 03E3                          ??_VIN_config 0052  
                             __ptext1 03F3                               __ptext2 03C1  
                             __ptext3 0420                               __ptext4 0402  
                             __ptext5 040F                               __ptext6 031B  
                             __ptext7 0286                               __ptext8 033F  
                             __ptext9 01BB                 _OSCILLATOR_Initialize 0415  
                        __size_of_isr 0051              ??_PIN_MANAGER_Initialize 004C  
          __size_of_SYSTEM_Initialize 0003                               clrloop0 040A  
                       _mess_rec_size 0041                  end_of_initialization 0061  
               measure_Impedance@asic 0067                     __end_of_lputs_ISR 031B  
                   __end_of_setup_ADC 0415                    __end_of_VIN_config 01BB  
                    ??_start_TMR0_ISR 0075                     __end_of_start_RCM 0424  
                __end_of_mess_handler 033F                            _setup_TMR0 0402  
                    __CFG_FOSC$INTOSC 0000                         ??_config_ASIC 0055  
                   _measure_Impedance 0064                    ?_measure_Impedance 0075  
                      ADC_2@ADC_value 0050            __end_of_start_RX_USART_ISR 03D2  
              ?_OSCILLATOR_Initialize 0075     measure_Impedance_no_offset@value1 0063  
   measure_Impedance_no_offset@value2 0065                   start_initialization 0056  
                 ??_measure_Impedance 0055       __size_of_PIN_MANAGER_Initialize 0019  
                         __end_of_isr 0055   __end_of_measure_Impedance_no_offset 0248  
         _measure_Impedance_no_offset 01BB               __size_of_close_RX_USART 0005  
                i1_start_RX_USART_ISR 03D2                        ADC_4@ADC_value 0050  
                       VIN_config@out 0054             __end_of_measure_Impedance 0127  
                      ADC_5@ADC_value 0050                   __end_of_config_ASIC 02F0  
                         ?_setup_TMR0 0075            __end_of_start_TX_USART_ISR 0402  
                         __pbssCOMMON 0070                             ___latbits 0000  
                       __pcstackBANK0 004C       measure_Impedance_no_offset@asic 0067  
               ?i1_start_RX_USART_ISR 0075                           VIN_config@i 0053  
               __size_of_mess_handler 0024                _PIN_MANAGER_Initialize 03A8  
               __end_of_stop_TMR0_ISR 042A                        __size_of_ADC_2 0023  
                      __size_of_ADC_4 0023                        __size_of_ADC_5 0023  
             read_ADC_channels@value1 005A               read_ADC_channels@value2 005C  
             read_ADC_channels@value3 005E                          _mess_handler 031B  
                 __size_of_setup_TMR0 0007                           _config_ASIC 02BF  
                           clear_ram0 0409                            lputs_ISR@i 0050  
          __size_of_measure_Impedance 00C3                             _lputs_ISR 02F0  
                           _setup_ADC 040F                             _start_RCM 0420  
              ??i1_start_RX_USART_ISR 0075                        _close_RX_USART 041B  
             measure_Impedance@value1 0063               measure_Impedance@value2 0065  
                          ?_lputs_ISR 004C                            ?_setup_ADC 0075  
             ??_OSCILLATOR_Initialize 004C                     start_TMR0_ISR@val 0077  
                          ?_start_RCM 0075        measure_Impedance_no_offset@aux 0056  
              __end_of_close_RX_USART 0420                              __ptext10 0064  
                            __ptext11 0362                              __ptext12 0385  
                            __ptext21 03D2                              __ptext13 02BF  
                            __ptext22 0427                              __ptext14 02F0  
                            __ptext23 03E3                              __ptext15 041B  
                            __ptext16 0127                              __ptext17 0424  
                            __ptext18 03A8                              __ptext19 0415  
                       lputs_ISR@data 004F                    _start_RX_USART_ISR 03C1  
                       __size_of_main 003E                              _mess_rec 0042  
                 ?_start_RX_USART_ISR 0075                              int$flags 007E  
                        ??_setup_TMR0 004C                           _TIMER0_flag 003E  
                ??_start_RX_USART_ISR 004C               __size_of_start_TMR0_ISR 0010  
                     ?_close_RX_USART 0075                              intlevel1 0000  
                  _start_TX_USART_ISR 03F3               ?_PIN_MANAGER_Initialize 0075  
                   __CFG_CLKOUTEN$OFF 0000                    __end_of_setup_TMR0 0409  
                 ?_start_TX_USART_ISR 0075                           ??_lputs_ISR 004D  
                         ??_setup_ADC 004C                           ??_start_RCM 004C  
                ??_start_TX_USART_ISR 004C        __end_of_PIN_MANAGER_Initialize 03C1  
                        ?_config_ASIC 0075  
