

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Feb 22 15:57:13 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16LF1823
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	psect	text17,local,class=CODE,merge=1,delta=2
    28                           	psect	intentry,global,class=CODE,delta=2
    29                           	psect	text19,local,class=CODE,merge=1,delta=2
    30                           	psect	text20,local,class=CODE,merge=1,delta=2
    31                           	psect	text21,local,class=CODE,merge=1,delta=2
    32                           	dabs	1,0x7E,2
    33  0000                     
    34                           ; Version 1.40
    35                           ; Generated 01/12/2016 GMT
    36                           ; 
    37                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC16LF1823 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     	;# 
    69  0001                     	;# 
    70  0002                     	;# 
    71  0003                     	;# 
    72  0004                     	;# 
    73  0005                     	;# 
    74  0006                     	;# 
    75  0007                     	;# 
    76  0008                     	;# 
    77  0009                     	;# 
    78  000A                     	;# 
    79  000B                     	;# 
    80  000C                     	;# 
    81  000E                     	;# 
    82  0011                     	;# 
    83  0012                     	;# 
    84  0015                     	;# 
    85  0016                     	;# 
    86  0016                     	;# 
    87  0017                     	;# 
    88  0018                     	;# 
    89  0019                     	;# 
    90  001A                     	;# 
    91  001B                     	;# 
    92  001C                     	;# 
    93  001E                     	;# 
    94  001F                     	;# 
    95  008C                     	;# 
    96  008E                     	;# 
    97  0091                     	;# 
    98  0092                     	;# 
    99  0095                     	;# 
   100  0096                     	;# 
   101  0097                     	;# 
   102  0098                     	;# 
   103  0099                     	;# 
   104  009A                     	;# 
   105  009B                     	;# 
   106  009B                     	;# 
   107  009C                     	;# 
   108  009D                     	;# 
   109  009E                     	;# 
   110  010C                     	;# 
   111  010E                     	;# 
   112  0111                     	;# 
   113  0112                     	;# 
   114  0113                     	;# 
   115  0114                     	;# 
   116  0115                     	;# 
   117  0116                     	;# 
   118  0117                     	;# 
   119  0118                     	;# 
   120  0119                     	;# 
   121  011A                     	;# 
   122  011B                     	;# 
   123  011D                     	;# 
   124  011D                     	;# 
   125  018C                     	;# 
   126  018E                     	;# 
   127  0191                     	;# 
   128  0191                     	;# 
   129  0192                     	;# 
   130  0193                     	;# 
   131  0193                     	;# 
   132  0193                     	;# 
   133  0194                     	;# 
   134  0195                     	;# 
   135  0196                     	;# 
   136  0199                     	;# 
   137  019A                     	;# 
   138  019B                     	;# 
   139  019B                     	;# 
   140  019B                     	;# 
   141  019B                     	;# 
   142  019C                     	;# 
   143  019C                     	;# 
   144  019D                     	;# 
   145  019E                     	;# 
   146  019F                     	;# 
   147  020C                     	;# 
   148  020E                     	;# 
   149  0211                     	;# 
   150  0211                     	;# 
   151  0212                     	;# 
   152  0212                     	;# 
   153  0213                     	;# 
   154  0213                     	;# 
   155  0214                     	;# 
   156  0214                     	;# 
   157  0215                     	;# 
   158  0215                     	;# 
   159  0215                     	;# 
   160  0216                     	;# 
   161  0216                     	;# 
   162  0217                     	;# 
   163  0217                     	;# 
   164  0291                     	;# 
   165  0291                     	;# 
   166  0292                     	;# 
   167  0293                     	;# 
   168  0294                     	;# 
   169  0295                     	;# 
   170  0295                     	;# 
   171  0296                     	;# 
   172  0391                     	;# 
   173  0392                     	;# 
   174  0393                     	;# 
   175  039A                     	;# 
   176  039C                     	;# 
   177  039D                     	;# 
   178  039E                     	;# 
   179  039F                     	;# 
   180  0FE4                     	;# 
   181  0FE5                     	;# 
   182  0FE6                     	;# 
   183  0FE7                     	;# 
   184  0FE8                     	;# 
   185  0FE9                     	;# 
   186  0FEA                     	;# 
   187  0FEB                     	;# 
   188  0FED                     	;# 
   189  0FEE                     	;# 
   190  0FEF                     	;# 
   191  0000                     	;# 
   192  0001                     	;# 
   193  0002                     	;# 
   194  0003                     	;# 
   195  0004                     	;# 
   196  0005                     	;# 
   197  0006                     	;# 
   198  0007                     	;# 
   199  0008                     	;# 
   200  0009                     	;# 
   201  000A                     	;# 
   202  000B                     	;# 
   203  000C                     	;# 
   204  000E                     	;# 
   205  0011                     	;# 
   206  0012                     	;# 
   207  0015                     	;# 
   208  0016                     	;# 
   209  0016                     	;# 
   210  0017                     	;# 
   211  0018                     	;# 
   212  0019                     	;# 
   213  001A                     	;# 
   214  001B                     	;# 
   215  001C                     	;# 
   216  001E                     	;# 
   217  001F                     	;# 
   218  008C                     	;# 
   219  008E                     	;# 
   220  0091                     	;# 
   221  0092                     	;# 
   222  0095                     	;# 
   223  0096                     	;# 
   224  0097                     	;# 
   225  0098                     	;# 
   226  0099                     	;# 
   227  009A                     	;# 
   228  009B                     	;# 
   229  009B                     	;# 
   230  009C                     	;# 
   231  009D                     	;# 
   232  009E                     	;# 
   233  010C                     	;# 
   234  010E                     	;# 
   235  0111                     	;# 
   236  0112                     	;# 
   237  0113                     	;# 
   238  0114                     	;# 
   239  0115                     	;# 
   240  0116                     	;# 
   241  0117                     	;# 
   242  0118                     	;# 
   243  0119                     	;# 
   244  011A                     	;# 
   245  011B                     	;# 
   246  011D                     	;# 
   247  011D                     	;# 
   248  018C                     	;# 
   249  018E                     	;# 
   250  0191                     	;# 
   251  0191                     	;# 
   252  0192                     	;# 
   253  0193                     	;# 
   254  0193                     	;# 
   255  0193                     	;# 
   256  0194                     	;# 
   257  0195                     	;# 
   258  0196                     	;# 
   259  0199                     	;# 
   260  019A                     	;# 
   261  019B                     	;# 
   262  019B                     	;# 
   263  019B                     	;# 
   264  019B                     	;# 
   265  019C                     	;# 
   266  019C                     	;# 
   267  019D                     	;# 
   268  019E                     	;# 
   269  019F                     	;# 
   270  020C                     	;# 
   271  020E                     	;# 
   272  0211                     	;# 
   273  0211                     	;# 
   274  0212                     	;# 
   275  0212                     	;# 
   276  0213                     	;# 
   277  0213                     	;# 
   278  0214                     	;# 
   279  0214                     	;# 
   280  0215                     	;# 
   281  0215                     	;# 
   282  0215                     	;# 
   283  0216                     	;# 
   284  0216                     	;# 
   285  0217                     	;# 
   286  0217                     	;# 
   287  0291                     	;# 
   288  0291                     	;# 
   289  0292                     	;# 
   290  0293                     	;# 
   291  0294                     	;# 
   292  0295                     	;# 
   293  0295                     	;# 
   294  0296                     	;# 
   295  0391                     	;# 
   296  0392                     	;# 
   297  0393                     	;# 
   298  039A                     	;# 
   299  039C                     	;# 
   300  039D                     	;# 
   301  039E                     	;# 
   302  039F                     	;# 
   303  0FE4                     	;# 
   304  0FE5                     	;# 
   305  0FE6                     	;# 
   306  0FE7                     	;# 
   307  0FE8                     	;# 
   308  0FE9                     	;# 
   309  0FEA                     	;# 
   310  0FEB                     	;# 
   311  0FED                     	;# 
   312  0FEE                     	;# 
   313  0FEF                     	;# 
   314  0000                     	;# 
   315  0001                     	;# 
   316  0002                     	;# 
   317  0003                     	;# 
   318  0004                     	;# 
   319  0005                     	;# 
   320  0006                     	;# 
   321  0007                     	;# 
   322  0008                     	;# 
   323  0009                     	;# 
   324  000A                     	;# 
   325  000B                     	;# 
   326  000C                     	;# 
   327  000E                     	;# 
   328  0011                     	;# 
   329  0012                     	;# 
   330  0015                     	;# 
   331  0016                     	;# 
   332  0016                     	;# 
   333  0017                     	;# 
   334  0018                     	;# 
   335  0019                     	;# 
   336  001A                     	;# 
   337  001B                     	;# 
   338  001C                     	;# 
   339  001E                     	;# 
   340  001F                     	;# 
   341  008C                     	;# 
   342  008E                     	;# 
   343  0091                     	;# 
   344  0092                     	;# 
   345  0095                     	;# 
   346  0096                     	;# 
   347  0097                     	;# 
   348  0098                     	;# 
   349  0099                     	;# 
   350  009A                     	;# 
   351  009B                     	;# 
   352  009B                     	;# 
   353  009C                     	;# 
   354  009D                     	;# 
   355  009E                     	;# 
   356  010C                     	;# 
   357  010E                     	;# 
   358  0111                     	;# 
   359  0112                     	;# 
   360  0113                     	;# 
   361  0114                     	;# 
   362  0115                     	;# 
   363  0116                     	;# 
   364  0117                     	;# 
   365  0118                     	;# 
   366  0119                     	;# 
   367  011A                     	;# 
   368  011B                     	;# 
   369  011D                     	;# 
   370  011D                     	;# 
   371  018C                     	;# 
   372  018E                     	;# 
   373  0191                     	;# 
   374  0191                     	;# 
   375  0192                     	;# 
   376  0193                     	;# 
   377  0193                     	;# 
   378  0193                     	;# 
   379  0194                     	;# 
   380  0195                     	;# 
   381  0196                     	;# 
   382  0199                     	;# 
   383  019A                     	;# 
   384  019B                     	;# 
   385  019B                     	;# 
   386  019B                     	;# 
   387  019B                     	;# 
   388  019C                     	;# 
   389  019C                     	;# 
   390  019D                     	;# 
   391  019E                     	;# 
   392  019F                     	;# 
   393  020C                     	;# 
   394  020E                     	;# 
   395  0211                     	;# 
   396  0211                     	;# 
   397  0212                     	;# 
   398  0212                     	;# 
   399  0213                     	;# 
   400  0213                     	;# 
   401  0214                     	;# 
   402  0214                     	;# 
   403  0215                     	;# 
   404  0215                     	;# 
   405  0215                     	;# 
   406  0216                     	;# 
   407  0216                     	;# 
   408  0217                     	;# 
   409  0217                     	;# 
   410  0291                     	;# 
   411  0291                     	;# 
   412  0292                     	;# 
   413  0293                     	;# 
   414  0294                     	;# 
   415  0295                     	;# 
   416  0295                     	;# 
   417  0296                     	;# 
   418  0391                     	;# 
   419  0392                     	;# 
   420  0393                     	;# 
   421  039A                     	;# 
   422  039C                     	;# 
   423  039D                     	;# 
   424  039E                     	;# 
   425  039F                     	;# 
   426  0FE4                     	;# 
   427  0FE5                     	;# 
   428  0FE6                     	;# 
   429  0FE7                     	;# 
   430  0FE8                     	;# 
   431  0FE9                     	;# 
   432  0FEA                     	;# 
   433  0FEB                     	;# 
   434  0FED                     	;# 
   435  0FEE                     	;# 
   436  0FEF                     	;# 
   437  0000                     	;# 
   438  0001                     	;# 
   439  0002                     	;# 
   440  0003                     	;# 
   441  0004                     	;# 
   442  0005                     	;# 
   443  0006                     	;# 
   444  0007                     	;# 
   445  0008                     	;# 
   446  0009                     	;# 
   447  000A                     	;# 
   448  000B                     	;# 
   449  000C                     	;# 
   450  000E                     	;# 
   451  0011                     	;# 
   452  0012                     	;# 
   453  0015                     	;# 
   454  0016                     	;# 
   455  0016                     	;# 
   456  0017                     	;# 
   457  0018                     	;# 
   458  0019                     	;# 
   459  001A                     	;# 
   460  001B                     	;# 
   461  001C                     	;# 
   462  001E                     	;# 
   463  001F                     	;# 
   464  008C                     	;# 
   465  008E                     	;# 
   466  0091                     	;# 
   467  0092                     	;# 
   468  0095                     	;# 
   469  0096                     	;# 
   470  0097                     	;# 
   471  0098                     	;# 
   472  0099                     	;# 
   473  009A                     	;# 
   474  009B                     	;# 
   475  009B                     	;# 
   476  009C                     	;# 
   477  009D                     	;# 
   478  009E                     	;# 
   479  010C                     	;# 
   480  010E                     	;# 
   481  0111                     	;# 
   482  0112                     	;# 
   483  0113                     	;# 
   484  0114                     	;# 
   485  0115                     	;# 
   486  0116                     	;# 
   487  0117                     	;# 
   488  0118                     	;# 
   489  0119                     	;# 
   490  011A                     	;# 
   491  011B                     	;# 
   492  011D                     	;# 
   493  011D                     	;# 
   494  018C                     	;# 
   495  018E                     	;# 
   496  0191                     	;# 
   497  0191                     	;# 
   498  0192                     	;# 
   499  0193                     	;# 
   500  0193                     	;# 
   501  0193                     	;# 
   502  0194                     	;# 
   503  0195                     	;# 
   504  0196                     	;# 
   505  0199                     	;# 
   506  019A                     	;# 
   507  019B                     	;# 
   508  019B                     	;# 
   509  019B                     	;# 
   510  019B                     	;# 
   511  019C                     	;# 
   512  019C                     	;# 
   513  019D                     	;# 
   514  019E                     	;# 
   515  019F                     	;# 
   516  020C                     	;# 
   517  020E                     	;# 
   518  0211                     	;# 
   519  0211                     	;# 
   520  0212                     	;# 
   521  0212                     	;# 
   522  0213                     	;# 
   523  0213                     	;# 
   524  0214                     	;# 
   525  0214                     	;# 
   526  0215                     	;# 
   527  0215                     	;# 
   528  0215                     	;# 
   529  0216                     	;# 
   530  0216                     	;# 
   531  0217                     	;# 
   532  0217                     	;# 
   533  0291                     	;# 
   534  0291                     	;# 
   535  0292                     	;# 
   536  0293                     	;# 
   537  0294                     	;# 
   538  0295                     	;# 
   539  0295                     	;# 
   540  0296                     	;# 
   541  0391                     	;# 
   542  0392                     	;# 
   543  0393                     	;# 
   544  039A                     	;# 
   545  039C                     	;# 
   546  039D                     	;# 
   547  039E                     	;# 
   548  039F                     	;# 
   549  0FE4                     	;# 
   550  0FE5                     	;# 
   551  0FE6                     	;# 
   552  0FE7                     	;# 
   553  0FE8                     	;# 
   554  0FE9                     	;# 
   555  0FEA                     	;# 
   556  0FEB                     	;# 
   557  0FED                     	;# 
   558  0FEE                     	;# 
   559  0FEF                     	;# 
   560  0000                     	;# 
   561  0001                     	;# 
   562  0002                     	;# 
   563  0003                     	;# 
   564  0004                     	;# 
   565  0005                     	;# 
   566  0006                     	;# 
   567  0007                     	;# 
   568  0008                     	;# 
   569  0009                     	;# 
   570  000A                     	;# 
   571  000B                     	;# 
   572  000C                     	;# 
   573  000E                     	;# 
   574  0011                     	;# 
   575  0012                     	;# 
   576  0015                     	;# 
   577  0016                     	;# 
   578  0016                     	;# 
   579  0017                     	;# 
   580  0018                     	;# 
   581  0019                     	;# 
   582  001A                     	;# 
   583  001B                     	;# 
   584  001C                     	;# 
   585  001E                     	;# 
   586  001F                     	;# 
   587  008C                     	;# 
   588  008E                     	;# 
   589  0091                     	;# 
   590  0092                     	;# 
   591  0095                     	;# 
   592  0096                     	;# 
   593  0097                     	;# 
   594  0098                     	;# 
   595  0099                     	;# 
   596  009A                     	;# 
   597  009B                     	;# 
   598  009B                     	;# 
   599  009C                     	;# 
   600  009D                     	;# 
   601  009E                     	;# 
   602  010C                     	;# 
   603  010E                     	;# 
   604  0111                     	;# 
   605  0112                     	;# 
   606  0113                     	;# 
   607  0114                     	;# 
   608  0115                     	;# 
   609  0116                     	;# 
   610  0117                     	;# 
   611  0118                     	;# 
   612  0119                     	;# 
   613  011A                     	;# 
   614  011B                     	;# 
   615  011D                     	;# 
   616  011D                     	;# 
   617  018C                     	;# 
   618  018E                     	;# 
   619  0191                     	;# 
   620  0191                     	;# 
   621  0192                     	;# 
   622  0193                     	;# 
   623  0193                     	;# 
   624  0193                     	;# 
   625  0194                     	;# 
   626  0195                     	;# 
   627  0196                     	;# 
   628  0199                     	;# 
   629  019A                     	;# 
   630  019B                     	;# 
   631  019B                     	;# 
   632  019B                     	;# 
   633  019B                     	;# 
   634  019C                     	;# 
   635  019C                     	;# 
   636  019D                     	;# 
   637  019E                     	;# 
   638  019F                     	;# 
   639  020C                     	;# 
   640  020E                     	;# 
   641  0211                     	;# 
   642  0211                     	;# 
   643  0212                     	;# 
   644  0212                     	;# 
   645  0213                     	;# 
   646  0213                     	;# 
   647  0214                     	;# 
   648  0214                     	;# 
   649  0215                     	;# 
   650  0215                     	;# 
   651  0215                     	;# 
   652  0216                     	;# 
   653  0216                     	;# 
   654  0217                     	;# 
   655  0217                     	;# 
   656  0291                     	;# 
   657  0291                     	;# 
   658  0292                     	;# 
   659  0293                     	;# 
   660  0294                     	;# 
   661  0295                     	;# 
   662  0295                     	;# 
   663  0296                     	;# 
   664  0391                     	;# 
   665  0392                     	;# 
   666  0393                     	;# 
   667  039A                     	;# 
   668  039C                     	;# 
   669  039D                     	;# 
   670  039E                     	;# 
   671  039F                     	;# 
   672  0FE4                     	;# 
   673  0FE5                     	;# 
   674  0FE6                     	;# 
   675  0FE7                     	;# 
   676  0FE8                     	;# 
   677  0FE9                     	;# 
   678  0FEA                     	;# 
   679  0FEB                     	;# 
   680  0FED                     	;# 
   681  0FEE                     	;# 
   682  0FEF                     	;# 
   683  0000                     	;# 
   684  0001                     	;# 
   685  0002                     	;# 
   686  0003                     	;# 
   687  0004                     	;# 
   688  0005                     	;# 
   689  0006                     	;# 
   690  0007                     	;# 
   691  0008                     	;# 
   692  0009                     	;# 
   693  000A                     	;# 
   694  000B                     	;# 
   695  000C                     	;# 
   696  000E                     	;# 
   697  0011                     	;# 
   698  0012                     	;# 
   699  0015                     	;# 
   700  0016                     	;# 
   701  0016                     	;# 
   702  0017                     	;# 
   703  0018                     	;# 
   704  0019                     	;# 
   705  001A                     	;# 
   706  001B                     	;# 
   707  001C                     	;# 
   708  001E                     	;# 
   709  001F                     	;# 
   710  008C                     	;# 
   711  008E                     	;# 
   712  0091                     	;# 
   713  0092                     	;# 
   714  0095                     	;# 
   715  0096                     	;# 
   716  0097                     	;# 
   717  0098                     	;# 
   718  0099                     	;# 
   719  009A                     	;# 
   720  009B                     	;# 
   721  009B                     	;# 
   722  009C                     	;# 
   723  009D                     	;# 
   724  009E                     	;# 
   725  010C                     	;# 
   726  010E                     	;# 
   727  0111                     	;# 
   728  0112                     	;# 
   729  0113                     	;# 
   730  0114                     	;# 
   731  0115                     	;# 
   732  0116                     	;# 
   733  0117                     	;# 
   734  0118                     	;# 
   735  0119                     	;# 
   736  011A                     	;# 
   737  011B                     	;# 
   738  011D                     	;# 
   739  011D                     	;# 
   740  018C                     	;# 
   741  018E                     	;# 
   742  0191                     	;# 
   743  0191                     	;# 
   744  0192                     	;# 
   745  0193                     	;# 
   746  0193                     	;# 
   747  0193                     	;# 
   748  0194                     	;# 
   749  0195                     	;# 
   750  0196                     	;# 
   751  0199                     	;# 
   752  019A                     	;# 
   753  019B                     	;# 
   754  019B                     	;# 
   755  019B                     	;# 
   756  019B                     	;# 
   757  019C                     	;# 
   758  019C                     	;# 
   759  019D                     	;# 
   760  019E                     	;# 
   761  019F                     	;# 
   762  020C                     	;# 
   763  020E                     	;# 
   764  0211                     	;# 
   765  0211                     	;# 
   766  0212                     	;# 
   767  0212                     	;# 
   768  0213                     	;# 
   769  0213                     	;# 
   770  0214                     	;# 
   771  0214                     	;# 
   772  0215                     	;# 
   773  0215                     	;# 
   774  0215                     	;# 
   775  0216                     	;# 
   776  0216                     	;# 
   777  0217                     	;# 
   778  0217                     	;# 
   779  0291                     	;# 
   780  0291                     	;# 
   781  0292                     	;# 
   782  0293                     	;# 
   783  0294                     	;# 
   784  0295                     	;# 
   785  0295                     	;# 
   786  0296                     	;# 
   787  0391                     	;# 
   788  0392                     	;# 
   789  0393                     	;# 
   790  039A                     	;# 
   791  039C                     	;# 
   792  039D                     	;# 
   793  039E                     	;# 
   794  039F                     	;# 
   795  0FE4                     	;# 
   796  0FE5                     	;# 
   797  0FE6                     	;# 
   798  0FE7                     	;# 
   799  0FE8                     	;# 
   800  0FE9                     	;# 
   801  0FEA                     	;# 
   802  0FEB                     	;# 
   803  0FED                     	;# 
   804  0FEE                     	;# 
   805  0FEF                     	;# 
   806  0000                     	;# 
   807  0001                     	;# 
   808  0002                     	;# 
   809  0003                     	;# 
   810  0004                     	;# 
   811  0005                     	;# 
   812  0006                     	;# 
   813  0007                     	;# 
   814  0008                     	;# 
   815  0009                     	;# 
   816  000A                     	;# 
   817  000B                     	;# 
   818  000C                     	;# 
   819  000E                     	;# 
   820  0011                     	;# 
   821  0012                     	;# 
   822  0015                     	;# 
   823  0016                     	;# 
   824  0016                     	;# 
   825  0017                     	;# 
   826  0018                     	;# 
   827  0019                     	;# 
   828  001A                     	;# 
   829  001B                     	;# 
   830  001C                     	;# 
   831  001E                     	;# 
   832  001F                     	;# 
   833  008C                     	;# 
   834  008E                     	;# 
   835  0091                     	;# 
   836  0092                     	;# 
   837  0095                     	;# 
   838  0096                     	;# 
   839  0097                     	;# 
   840  0098                     	;# 
   841  0099                     	;# 
   842  009A                     	;# 
   843  009B                     	;# 
   844  009B                     	;# 
   845  009C                     	;# 
   846  009D                     	;# 
   847  009E                     	;# 
   848  010C                     	;# 
   849  010E                     	;# 
   850  0111                     	;# 
   851  0112                     	;# 
   852  0113                     	;# 
   853  0114                     	;# 
   854  0115                     	;# 
   855  0116                     	;# 
   856  0117                     	;# 
   857  0118                     	;# 
   858  0119                     	;# 
   859  011A                     	;# 
   860  011B                     	;# 
   861  011D                     	;# 
   862  011D                     	;# 
   863  018C                     	;# 
   864  018E                     	;# 
   865  0191                     	;# 
   866  0191                     	;# 
   867  0192                     	;# 
   868  0193                     	;# 
   869  0193                     	;# 
   870  0193                     	;# 
   871  0194                     	;# 
   872  0195                     	;# 
   873  0196                     	;# 
   874  0199                     	;# 
   875  019A                     	;# 
   876  019B                     	;# 
   877  019B                     	;# 
   878  019B                     	;# 
   879  019B                     	;# 
   880  019C                     	;# 
   881  019C                     	;# 
   882  019D                     	;# 
   883  019E                     	;# 
   884  019F                     	;# 
   885  020C                     	;# 
   886  020E                     	;# 
   887  0211                     	;# 
   888  0211                     	;# 
   889  0212                     	;# 
   890  0212                     	;# 
   891  0213                     	;# 
   892  0213                     	;# 
   893  0214                     	;# 
   894  0214                     	;# 
   895  0215                     	;# 
   896  0215                     	;# 
   897  0215                     	;# 
   898  0216                     	;# 
   899  0216                     	;# 
   900  0217                     	;# 
   901  0217                     	;# 
   902  0291                     	;# 
   903  0291                     	;# 
   904  0292                     	;# 
   905  0293                     	;# 
   906  0294                     	;# 
   907  0295                     	;# 
   908  0295                     	;# 
   909  0296                     	;# 
   910  0391                     	;# 
   911  0392                     	;# 
   912  0393                     	;# 
   913  039A                     	;# 
   914  039C                     	;# 
   915  039D                     	;# 
   916  039E                     	;# 
   917  039F                     	;# 
   918  0FE4                     	;# 
   919  0FE5                     	;# 
   920  0FE6                     	;# 
   921  0FE7                     	;# 
   922  0FE8                     	;# 
   923  0FE9                     	;# 
   924  0FEA                     	;# 
   925  0FEB                     	;# 
   926  0FED                     	;# 
   927  0FEE                     	;# 
   928  0FEF                     	;# 
   929  0000                     	;# 
   930  0001                     	;# 
   931  0002                     	;# 
   932  0003                     	;# 
   933  0004                     	;# 
   934  0005                     	;# 
   935  0006                     	;# 
   936  0007                     	;# 
   937  0008                     	;# 
   938  0009                     	;# 
   939  000A                     	;# 
   940  000B                     	;# 
   941  000C                     	;# 
   942  000E                     	;# 
   943  0011                     	;# 
   944  0012                     	;# 
   945  0015                     	;# 
   946  0016                     	;# 
   947  0016                     	;# 
   948  0017                     	;# 
   949  0018                     	;# 
   950  0019                     	;# 
   951  001A                     	;# 
   952  001B                     	;# 
   953  001C                     	;# 
   954  001E                     	;# 
   955  001F                     	;# 
   956  008C                     	;# 
   957  008E                     	;# 
   958  0091                     	;# 
   959  0092                     	;# 
   960  0095                     	;# 
   961  0096                     	;# 
   962  0097                     	;# 
   963  0098                     	;# 
   964  0099                     	;# 
   965  009A                     	;# 
   966  009B                     	;# 
   967  009B                     	;# 
   968  009C                     	;# 
   969  009D                     	;# 
   970  009E                     	;# 
   971  010C                     	;# 
   972  010E                     	;# 
   973  0111                     	;# 
   974  0112                     	;# 
   975  0113                     	;# 
   976  0114                     	;# 
   977  0115                     	;# 
   978  0116                     	;# 
   979  0117                     	;# 
   980  0118                     	;# 
   981  0119                     	;# 
   982  011A                     	;# 
   983  011B                     	;# 
   984  011D                     	;# 
   985  011D                     	;# 
   986  018C                     	;# 
   987  018E                     	;# 
   988  0191                     	;# 
   989  0191                     	;# 
   990  0192                     	;# 
   991  0193                     	;# 
   992  0193                     	;# 
   993  0193                     	;# 
   994  0194                     	;# 
   995  0195                     	;# 
   996  0196                     	;# 
   997  0199                     	;# 
   998  019A                     	;# 
   999  019B                     	;# 
  1000  019B                     	;# 
  1001  019B                     	;# 
  1002  019B                     	;# 
  1003  019C                     	;# 
  1004  019C                     	;# 
  1005  019D                     	;# 
  1006  019E                     	;# 
  1007  019F                     	;# 
  1008  020C                     	;# 
  1009  020E                     	;# 
  1010  0211                     	;# 
  1011  0211                     	;# 
  1012  0212                     	;# 
  1013  0212                     	;# 
  1014  0213                     	;# 
  1015  0213                     	;# 
  1016  0214                     	;# 
  1017  0214                     	;# 
  1018  0215                     	;# 
  1019  0215                     	;# 
  1020  0215                     	;# 
  1021  0216                     	;# 
  1022  0216                     	;# 
  1023  0217                     	;# 
  1024  0217                     	;# 
  1025  0291                     	;# 
  1026  0291                     	;# 
  1027  0292                     	;# 
  1028  0293                     	;# 
  1029  0294                     	;# 
  1030  0295                     	;# 
  1031  0295                     	;# 
  1032  0296                     	;# 
  1033  0391                     	;# 
  1034  0392                     	;# 
  1035  0393                     	;# 
  1036  039A                     	;# 
  1037  039C                     	;# 
  1038  039D                     	;# 
  1039  039E                     	;# 
  1040  039F                     	;# 
  1041  0FE4                     	;# 
  1042  0FE5                     	;# 
  1043  0FE6                     	;# 
  1044  0FE7                     	;# 
  1045  0FE8                     	;# 
  1046  0FE9                     	;# 
  1047  0FEA                     	;# 
  1048  0FEB                     	;# 
  1049  0FED                     	;# 
  1050  0FEE                     	;# 
  1051  0FEF                     	;# 
  1052  0000                     	;# 
  1053  0001                     	;# 
  1054  0002                     	;# 
  1055  0003                     	;# 
  1056  0004                     	;# 
  1057  0005                     	;# 
  1058  0006                     	;# 
  1059  0007                     	;# 
  1060  0008                     	;# 
  1061  0009                     	;# 
  1062  000A                     	;# 
  1063  000B                     	;# 
  1064  000C                     	;# 
  1065  000E                     	;# 
  1066  0011                     	;# 
  1067  0012                     	;# 
  1068  0015                     	;# 
  1069  0016                     	;# 
  1070  0016                     	;# 
  1071  0017                     	;# 
  1072  0018                     	;# 
  1073  0019                     	;# 
  1074  001A                     	;# 
  1075  001B                     	;# 
  1076  001C                     	;# 
  1077  001E                     	;# 
  1078  001F                     	;# 
  1079  008C                     	;# 
  1080  008E                     	;# 
  1081  0091                     	;# 
  1082  0092                     	;# 
  1083  0095                     	;# 
  1084  0096                     	;# 
  1085  0097                     	;# 
  1086  0098                     	;# 
  1087  0099                     	;# 
  1088  009A                     	;# 
  1089  009B                     	;# 
  1090  009B                     	;# 
  1091  009C                     	;# 
  1092  009D                     	;# 
  1093  009E                     	;# 
  1094  010C                     	;# 
  1095  010E                     	;# 
  1096  0111                     	;# 
  1097  0112                     	;# 
  1098  0113                     	;# 
  1099  0114                     	;# 
  1100  0115                     	;# 
  1101  0116                     	;# 
  1102  0117                     	;# 
  1103  0118                     	;# 
  1104  0119                     	;# 
  1105  011A                     	;# 
  1106  011B                     	;# 
  1107  011D                     	;# 
  1108  011D                     	;# 
  1109  018C                     	;# 
  1110  018E                     	;# 
  1111  0191                     	;# 
  1112  0191                     	;# 
  1113  0192                     	;# 
  1114  0193                     	;# 
  1115  0193                     	;# 
  1116  0193                     	;# 
  1117  0194                     	;# 
  1118  0195                     	;# 
  1119  0196                     	;# 
  1120  0199                     	;# 
  1121  019A                     	;# 
  1122  019B                     	;# 
  1123  019B                     	;# 
  1124  019B                     	;# 
  1125  019B                     	;# 
  1126  019C                     	;# 
  1127  019C                     	;# 
  1128  019D                     	;# 
  1129  019E                     	;# 
  1130  019F                     	;# 
  1131  020C                     	;# 
  1132  020E                     	;# 
  1133  0211                     	;# 
  1134  0211                     	;# 
  1135  0212                     	;# 
  1136  0212                     	;# 
  1137  0213                     	;# 
  1138  0213                     	;# 
  1139  0214                     	;# 
  1140  0214                     	;# 
  1141  0215                     	;# 
  1142  0215                     	;# 
  1143  0215                     	;# 
  1144  0216                     	;# 
  1145  0216                     	;# 
  1146  0217                     	;# 
  1147  0217                     	;# 
  1148  0291                     	;# 
  1149  0291                     	;# 
  1150  0292                     	;# 
  1151  0293                     	;# 
  1152  0294                     	;# 
  1153  0295                     	;# 
  1154  0295                     	;# 
  1155  0296                     	;# 
  1156  0391                     	;# 
  1157  0392                     	;# 
  1158  0393                     	;# 
  1159  039A                     	;# 
  1160  039C                     	;# 
  1161  039D                     	;# 
  1162  039E                     	;# 
  1163  039F                     	;# 
  1164  0FE4                     	;# 
  1165  0FE5                     	;# 
  1166  0FE6                     	;# 
  1167  0FE7                     	;# 
  1168  0FE8                     	;# 
  1169  0FE9                     	;# 
  1170  0FEA                     	;# 
  1171  0FEB                     	;# 
  1172  0FED                     	;# 
  1173  0FEE                     	;# 
  1174  0FEF                     	;# 
  1175  000E                     _PORTC	set	14
  1176  0015                     _TMR0	set	21
  1177  005F                     _GIE	set	95
  1178  005E                     _PEIE	set	94
  1179  0065                     _RA5	set	101
  1180  008D                     _RCIF	set	141
  1181  005D                     _TMR0IE	set	93
  1182  005A                     _TMR0IF	set	90
  1183  008C                     _TXIF	set	140
  1184  009D                     _ADCON0	set	157
  1185  009E                     _ADCON1	set	158
  1186  009C                     _ADRESH	set	156
  1187  009B                     _ADRESL	set	155
  1188  0095                     _OPTION_REGbits	set	149
  1189  0099                     _OSCCON	set	153
  1190  009A                     _OSCSTAT	set	154
  1191  0098                     _OSCTUNE	set	152
  1192  008C                     _TRISA	set	140
  1193  008E                     _TRISC	set	142
  1194  04E9                     _ADGO	set	1257
  1195  04A8                     _PS0	set	1192
  1196  04A9                     _PS1	set	1193
  1197  04AA                     _PS2	set	1194
  1198  04AB                     _PSA	set	1195
  1199  048D                     _RCIE	set	1165
  1200  04AD                     _TMR0CS	set	1197
  1201  048C                     _TXIE	set	1164
  1202  011D                     _APFCON	set	285
  1203  010C                     _LATA	set	268
  1204  010E                     _LATC	set	270
  1205  08EF                     _RXDTSEL	set	2287
  1206  08EA                     _TXCKSEL	set	2282
  1207  018C                     _ANSELA	set	396
  1208  018E                     _ANSELC	set	398
  1209  0199                     _RCREG	set	409
  1210  019C                     _SPBRGH	set	412
  1211  019B                     _SPBRGL	set	411
  1212  019A                     _TXREG	set	410
  1213  0CFB                     _BRG16	set	3323
  1214  0CF2                     _BRGH	set	3314
  1215  0CEC                     _CREN	set	3308
  1216  0CEF                     _SPEN	set	3311
  1217  0CF4                     _SYNC	set	3316
  1218  0CF5                     _TXEN	set	3317
  1219  020C                     _WPUA	set	524
  1220  020E                     _WPUC	set	526
  1221  039A                     _CLKRCON	set	922
  1222                           
  1223                           ; #config settings
  1224  0000                     
  1225                           	psect	cinit
  1226  0054                     start_initialization:	
  1227  0054                     __initialization:	
  1228                           
  1229                           ; Clear objects allocated to COMMON
  1230  0054  01F0               	clrf	__pbssCOMMON& (0+127)
  1231  0055  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  1232  0056  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  1233  0057  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  1234  0058  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  1235                           
  1236                           ; Clear objects allocated to BANK0
  1237  0059  3020               	movlw	low __pbssBANK0
  1238  005A  0084               	movwf	4
  1239  005B  3000               	movlw	high __pbssBANK0
  1240  005C  0085               	movwf	5
  1241  005D  3028               	movlw	40
  1242  005E  238A               	fcall	clear_ram0
  1243  005F                     end_of_initialization:	
  1244                           ;End of C runtime variable initialization code
  1245                           
  1246  005F                     __end_of__initialization:	
  1247  005F  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1248  0060  0020               	movlb	0
  1249  0061  29C8               	ljmp	_main	;jump to C main() function
  1250                           
  1251                           	psect	bssCOMMON
  1252  0070                     __pbssCOMMON:	
  1253  0070                     _TIMER0_timeout:	
  1254  0070                     	ds	2
  1255  0072                     _USART_tx_flag:	
  1256  0072                     	ds	1
  1257  0073                     _USART_tx_index:	
  1258  0073                     	ds	1
  1259  0074                     _USART_tx_length:	
  1260  0074                     	ds	1
  1261                           
  1262                           	psect	bssBANK0
  1263  0020                     __pbssBANK0:	
  1264  0020                     _USART_rx_data:	
  1265  0020                     	ds	15
  1266  002F                     _USART_tx_data:	
  1267  002F                     	ds	15
  1268  003E                     _TIMER0_flag:	
  1269  003E                     	ds	1
  1270  003F                     _USART_rx_flag:	
  1271  003F                     	ds	1
  1272  0040                     _USART_rx_index:	
  1273  0040                     	ds	1
  1274  0041                     _mess_rec_size:	
  1275  0041                     	ds	1
  1276  0042                     _mess_rec:	
  1277  0042                     	ds	6
  1278                           
  1279                           	psect	clrtext
  1280  038A                     clear_ram0:	
  1281                           ;	Called with FSR0 containing the base address, and
  1282                           ;	WREG with the size to clear
  1283                           
  1284  038A  0064               	clrwdt	;clear the watchdog before getting into this loop
  1285  038B                     clrloop0:	
  1286  038B  0180               	clrf	0	;clear RAM location pointed to by FSR
  1287  038C  3101               	addfsr 0,1
  1288  038D  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1289  038E  2B8B               	goto	clrloop0	;have we reached the end yet?
  1290  038F  3400               	retlw	0	;all done for this memory range, return
  1291                           
  1292                           	psect	cstackCOMMON
  1293  0075                     __pcstackCOMMON:	
  1294  0075                     ?_OSCILLATOR_Initialize:	
  1295  0075                     ?_setup_TMR0:	
  1296                           ; 1 bytes @ 0x0
  1297                           
  1298  0075                     ?_start_TX_USART_ISR:	
  1299                           ; 1 bytes @ 0x0
  1300                           
  1301  0075                     ?_start_RX_USART_ISR:	
  1302                           ; 1 bytes @ 0x0
  1303                           
  1304  0075                     ?_start_RCM:	
  1305                           ; 1 bytes @ 0x0
  1306                           
  1307  0075                     ?_setup_ADC:	
  1308                           ; 1 bytes @ 0x0
  1309                           
  1310  0075                     ?_mess_handler:	
  1311                           ; 1 bytes @ 0x0
  1312                           
  1313  0075                     ?_stop_TMR0_ISR:	
  1314                           ; 1 bytes @ 0x0
  1315                           
  1316  0075                     ??_stop_TMR0_ISR:	
  1317                           ; 1 bytes @ 0x0
  1318                           
  1319  0075                     ?_start_TMR0_ISR:	
  1320                           ; 1 bytes @ 0x0
  1321                           
  1322  0075                     ??_start_TMR0_ISR:	
  1323                           ; 1 bytes @ 0x0
  1324                           
  1325  0075                     ?_config_ASIC:	
  1326                           ; 1 bytes @ 0x0
  1327                           
  1328  0075                     ?_read_ADC_channels:	
  1329                           ; 1 bytes @ 0x0
  1330                           
  1331  0075                     ?_measure_Impedance:	
  1332                           ; 1 bytes @ 0x0
  1333                           
  1334  0075                     ?_PIN_MANAGER_Initialize:	
  1335                           ; 1 bytes @ 0x0
  1336                           
  1337  0075                     ?_SYSTEM_Initialize:	
  1338                           ; 1 bytes @ 0x0
  1339                           
  1340  0075                     ?_main:	
  1341                           ; 1 bytes @ 0x0
  1342                           
  1343  0075                     ?_isr:	
  1344                           ; 1 bytes @ 0x0
  1345                           
  1346  0075                     ?i1_start_RX_USART_ISR:	
  1347                           ; 1 bytes @ 0x0
  1348                           
  1349  0075                     ??i1_start_RX_USART_ISR:	
  1350                           ; 1 bytes @ 0x0
  1351                           
  1352                           
  1353                           ; 1 bytes @ 0x0
  1354  0075                     	ds	2
  1355  0077                     start_TMR0_ISR@val:	
  1356                           
  1357                           ; 1 bytes @ 0x2
  1358  0077                     	ds	1
  1359  0078                     ??_isr:	
  1360                           
  1361                           ; 1 bytes @ 0x3
  1362  0078                     	ds	2
  1363                           
  1364                           	psect	cstackBANK0
  1365  0048                     __pcstackBANK0:	
  1366  0048                     ??_OSCILLATOR_Initialize:	
  1367  0048                     ??_setup_TMR0:	
  1368                           ; 1 bytes @ 0x0
  1369                           
  1370  0048                     ??_start_TX_USART_ISR:	
  1371                           ; 1 bytes @ 0x0
  1372                           
  1373  0048                     ??_start_RX_USART_ISR:	
  1374                           ; 1 bytes @ 0x0
  1375                           
  1376  0048                     ??_start_RCM:	
  1377                           ; 1 bytes @ 0x0
  1378                           
  1379  0048                     ??_setup_ADC:	
  1380                           ; 1 bytes @ 0x0
  1381                           
  1382  0048                     ??_PIN_MANAGER_Initialize:	
  1383                           ; 1 bytes @ 0x0
  1384                           
  1385  0048                     ??_SYSTEM_Initialize:	
  1386                           ; 1 bytes @ 0x0
  1387                           
  1388  0048                     ?_VIN_config:	
  1389                           ; 1 bytes @ 0x0
  1390                           
  1391  0048                     ?_lputs_ISR:	
  1392                           ; 1 bytes @ 0x0
  1393                           
  1394  0048                     ?_ADC_2:	
  1395                           ; 1 bytes @ 0x0
  1396                           
  1397  0048                     ?_ADC_4:	
  1398                           ; 2 bytes @ 0x0
  1399                           
  1400  0048                     ?_ADC_5:	
  1401                           ; 2 bytes @ 0x0
  1402                           
  1403  0048                     lputs_ISR@length:	
  1404                           ; 2 bytes @ 0x0
  1405                           
  1406  0048                     VIN_config@conf:	
  1407                           ; 1 bytes @ 0x0
  1408                           
  1409                           
  1410                           ; 6 bytes @ 0x0
  1411  0048                     	ds	1
  1412  0049                     ??_lputs_ISR:	
  1413                           
  1414                           ; 1 bytes @ 0x1
  1415  0049                     	ds	1
  1416  004A                     ??_ADC_2:	
  1417  004A                     ??_ADC_4:	
  1418                           ; 1 bytes @ 0x2
  1419                           
  1420  004A                     ??_ADC_5:	
  1421                           ; 1 bytes @ 0x2
  1422                           
  1423                           
  1424                           ; 1 bytes @ 0x2
  1425  004A                     	ds	1
  1426  004B                     lputs_ISR@data:	
  1427                           
  1428                           ; 1 bytes @ 0x3
  1429  004B                     	ds	1
  1430  004C                     lputs_ISR@i:	
  1431  004C                     ADC_2@ADC_value:	
  1432                           ; 1 bytes @ 0x4
  1433                           
  1434  004C                     ADC_4@ADC_value:	
  1435                           ; 2 bytes @ 0x4
  1436                           
  1437  004C                     ADC_5@ADC_value:	
  1438                           ; 2 bytes @ 0x4
  1439                           
  1440                           
  1441                           ; 2 bytes @ 0x4
  1442  004C                     	ds	2
  1443  004E                     ??_read_ADC_channels:	
  1444  004E                     ??_VIN_config:	
  1445                           ; 1 bytes @ 0x6
  1446                           
  1447                           
  1448                           ; 1 bytes @ 0x6
  1449  004E                     	ds	1
  1450  004F                     VIN_config@i:	
  1451  004F                     read_ADC_channels@aux:	
  1452                           ; 1 bytes @ 0x7
  1453                           
  1454                           
  1455                           ; 7 bytes @ 0x7
  1456  004F                     	ds	1
  1457  0050                     VIN_config@out:	
  1458                           
  1459                           ; 1 bytes @ 0x8
  1460  0050                     	ds	1
  1461  0051                     ??_config_ASIC:	
  1462  0051                     ??_measure_Impedance:	
  1463                           ; 1 bytes @ 0x9
  1464                           
  1465                           
  1466                           ; 1 bytes @ 0x9
  1467  0051                     	ds	1
  1468  0052                     config_ASIC@asic:	
  1469  0052                     measure_Impedance@aux:	
  1470                           ; 6 bytes @ 0xA
  1471                           
  1472                           
  1473                           ; 13 bytes @ 0xA
  1474  0052                     	ds	4
  1475  0056                     read_ADC_channels@value1:	
  1476                           
  1477                           ; 2 bytes @ 0xE
  1478  0056                     	ds	2
  1479  0058                     read_ADC_channels@value2:	
  1480                           
  1481                           ; 2 bytes @ 0x10
  1482  0058                     	ds	2
  1483  005A                     read_ADC_channels@value3:	
  1484                           
  1485                           ; 2 bytes @ 0x12
  1486  005A                     	ds	5
  1487  005F                     measure_Impedance@value1:	
  1488                           
  1489                           ; 2 bytes @ 0x17
  1490  005F                     	ds	2
  1491  0061                     measure_Impedance@value2:	
  1492                           
  1493                           ; 2 bytes @ 0x19
  1494  0061                     	ds	2
  1495  0063                     measure_Impedance@asic:	
  1496                           
  1497                           ; 6 bytes @ 0x1B
  1498  0063                     	ds	6
  1499  0069                     ??_mess_handler:	
  1500                           
  1501                           ; 1 bytes @ 0x21
  1502  0069                     	ds	1
  1503  006A                     ??_main:	
  1504                           
  1505                           ; 1 bytes @ 0x22
  1506  006A                     	ds	1
  1507  006B                     main@i:	
  1508                           
  1509                           ; 1 bytes @ 0x23
  1510  006B                     	ds	1
  1511                           
  1512                           	psect	maintext
  1513  01C8                     __pmaintext:	
  1514 ;;
  1515 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1516 ;;
  1517 ;; *************** function _main *****************
  1518 ;; Defined at:
  1519 ;;		line 17 in file "main.c"
  1520 ;; Parameters:    Size  Location     Type
  1521 ;;		None
  1522 ;; Auto vars:     Size  Location     Type
  1523 ;;  i               1   35[BANK0 ] unsigned char 
  1524 ;; Return value:  Size  Location     Type
  1525 ;;                  1    wreg      void 
  1526 ;; Registers used:
  1527 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1528 ;; Tracked objects:
  1529 ;;		On entry : B1F/0
  1530 ;;		On exit  : 0/0
  1531 ;;		Unchanged: 0/0
  1532 ;; Data sizes:     COMMON   BANK0   BANK1
  1533 ;;      Params:         0       0       0
  1534 ;;      Locals:         0       1       0
  1535 ;;      Temps:          0       1       0
  1536 ;;      Totals:         0       2       0
  1537 ;;Total ram usage:        2 bytes
  1538 ;; Hardware stack levels required when called:    5
  1539 ;; This function calls:
  1540 ;;		_SYSTEM_Initialize
  1541 ;;		_mess_handler
  1542 ;;		_setup_ADC
  1543 ;;		_setup_TMR0
  1544 ;;		_start_RCM
  1545 ;;		_start_RX_USART_ISR
  1546 ;;		_start_TX_USART_ISR
  1547 ;; This function is called by:
  1548 ;;		Startup code after reset
  1549 ;; This function uses a non-reentrant model
  1550 ;;
  1551                           
  1552                           
  1553                           ;psect for function _main
  1554  01C8                     _main:	
  1555                           
  1556                           ;main.c: 19: unsigned char i;
  1557                           ;main.c: 24: SYSTEM_Initialize();
  1558                           
  1559                           ;incstack = 0
  1560                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1561  01C8  23A0               	fcall	_SYSTEM_Initialize
  1562                           
  1563                           ;main.c: 25: setup_TMR0();
  1564  01C9  2383               	fcall	_setup_TMR0
  1565                           
  1566                           ;main.c: 26: start_TX_USART_ISR();
  1567  01CA  2374               	fcall	_start_TX_USART_ISR
  1568                           
  1569                           ;main.c: 27: start_RX_USART_ISR();
  1570  01CB  2342               	fcall	_start_RX_USART_ISR
  1571                           
  1572                           ;main.c: 28: start_RCM();
  1573  01CC  239C               	fcall	_start_RCM
  1574                           
  1575                           ;main.c: 29: setup_ADC();
  1576  01CD  2390               	fcall	_setup_ADC
  1577                           
  1578                           ;main.c: 31: RA5 = 0;
  1579  01CE  0020               	movlb	0	; select bank0
  1580  01CF  128C               	bcf	12,5	;volatile
  1581                           
  1582                           ;main.c: 32: _delay((unsigned long)((250)*(500000/4000.0)));
  1583  01D0  3029               	movlw	41
  1584  01D1  0020               	movlb	0	; select bank0
  1585  01D2  00EA               	movwf	??_main
  1586  01D3  3094               	movlw	148
  1587  01D4                     u977:	
  1588  01D4  0B89               	decfsz	9,f
  1589  01D5  29D4               	goto	u977
  1590  01D6  0BEA               	decfsz	??_main,f
  1591  01D7  29D4               	goto	u977
  1592  01D8  0000               	nop
  1593                           
  1594                           ;main.c: 33: RA5 = 1;
  1595  01D9  0020               	movlb	0	; select bank0
  1596  01DA  168C               	bsf	12,5	;volatile
  1597                           
  1598                           ;main.c: 34: _delay((unsigned long)((250)*(500000/4000.0)));
  1599  01DB  3029               	movlw	41
  1600  01DC  0020               	movlb	0	; select bank0
  1601  01DD  00EA               	movwf	??_main
  1602  01DE  3094               	movlw	148
  1603  01DF                     u987:	
  1604  01DF  0B89               	decfsz	9,f
  1605  01E0  29DF               	goto	u987
  1606  01E1  0BEA               	decfsz	??_main,f
  1607  01E2  29DF               	goto	u987
  1608  01E3  0000               	nop
  1609  01E4                     l2096:	
  1610                           ;main.c: 38: while(1) {
  1611                           
  1612                           
  1613                           ;main.c: 42: if (TIMER0_flag) {
  1614  01E4  0020               	movlb	0	; select bank0
  1615  01E5  083E               	movf	_TIMER0_flag,w	;volatile
  1616  01E6  1903               	btfsc	3,2
  1617  01E7  29E4               	goto	l2096
  1618                           
  1619                           ;main.c: 43: TIMER0_flag = 0;
  1620  01E8  01BE               	clrf	_TIMER0_flag	;volatile
  1621                           
  1622                           ;main.c: 45: if (USART_rx_index > 6) {
  1623  01E9  3007               	movlw	7
  1624  01EA  0240               	subwf	_USART_rx_index,w	;volatile
  1625  01EB  1C03               	skipc
  1626  01EC  29EF               	goto	l2104
  1627                           
  1628                           ;main.c: 46: USART_rx_index = 0;
  1629  01ED  01C0               	clrf	_USART_rx_index	;volatile
  1630                           
  1631                           ;main.c: 47: continue;
  1632  01EE  29E4               	goto	l2096
  1633  01EF                     l2104:	
  1634                           
  1635                           ;main.c: 48: }
  1636                           ;main.c: 50: if(USART_rx_index == 0)
  1637  01EF  0840               	movf	_USART_rx_index,w	;volatile
  1638  01F0  1903               	btfsc	3,2
  1639                           
  1640                           ;main.c: 51: continue;
  1641  01F1  29E4               	goto	l2096
  1642                           
  1643                           ;main.c: 54: mess_rec_size = USART_rx_index;
  1644  01F2  0840               	movf	_USART_rx_index,w	;volatile
  1645  01F3  00EA               	movwf	??_main
  1646  01F4  086A               	movf	??_main,w
  1647  01F5  00C1               	movwf	_mess_rec_size	;volatile
  1648                           
  1649                           ;main.c: 56: for (i = 0; i < mess_rec_size; i++)
  1650  01F6  01EB               	clrf	main@i
  1651  01F7                     l2116:	
  1652  01F7  0841               	movf	_mess_rec_size,w	;volatile
  1653  01F8  026B               	subwf	main@i,w
  1654  01F9  1803               	btfsc	3,0
  1655  01FA  2A0C               	goto	l2118
  1656                           
  1657                           ;main.c: 57: mess_rec[i] = USART_rx_data[i];
  1658  01FB  086B               	movf	main@i,w
  1659  01FC  3E20               	addlw	(low (_USART_rx_data| 0))& (0+255)
  1660  01FD  0086               	movwf	6
  1661  01FE  0187               	clrf	7
  1662  01FF  0801               	movf	1,w
  1663  0200  00EA               	movwf	??_main
  1664  0201  086B               	movf	main@i,w
  1665  0202  3E42               	addlw	(low (_mess_rec| 0))& (0+255)
  1666  0203  0086               	movwf	6
  1667  0204  0187               	clrf	7
  1668  0205  086A               	movf	??_main,w
  1669  0206  0081               	movwf	1
  1670  0207  3001               	movlw	1
  1671  0208  00EA               	movwf	??_main
  1672  0209  086A               	movf	??_main,w
  1673  020A  07EB               	addwf	main@i,f
  1674  020B  29F7               	goto	l2116
  1675  020C                     l2118:	
  1676                           
  1677                           ;main.c: 60: mess_handler();
  1678  020C  230A               	fcall	_mess_handler
  1679  020D  29E4               	goto	l2096
  1680  020E                     __end_of_main:	
  1681                           
  1682                           	psect	text1
  1683  0374                     __ptext1:	
  1684 ;; *************** function _start_TX_USART_ISR *****************
  1685 ;; Defined at:
  1686 ;;		line 100 in file "USART1823.c"
  1687 ;; Parameters:    Size  Location     Type
  1688 ;;		None
  1689 ;; Auto vars:     Size  Location     Type
  1690 ;;		None
  1691 ;; Return value:  Size  Location     Type
  1692 ;;                  1    wreg      void 
  1693 ;; Registers used:
  1694 ;;		wreg, status,2
  1695 ;; Tracked objects:
  1696 ;;		On entry : 0/0
  1697 ;;		On exit  : 0/0
  1698 ;;		Unchanged: 0/0
  1699 ;; Data sizes:     COMMON   BANK0   BANK1
  1700 ;;      Params:         0       0       0
  1701 ;;      Locals:         0       0       0
  1702 ;;      Temps:          0       0       0
  1703 ;;      Totals:         0       0       0
  1704 ;;Total ram usage:        0 bytes
  1705 ;; Hardware stack levels used:    1
  1706 ;; Hardware stack levels required when called:    2
  1707 ;; This function calls:
  1708 ;;		Nothing
  1709 ;; This function is called by:
  1710 ;;		_main
  1711 ;; This function uses a non-reentrant model
  1712 ;;
  1713                           
  1714                           
  1715                           ;psect for function _start_TX_USART_ISR
  1716  0374                     _start_TX_USART_ISR:	
  1717                           
  1718                           ;USART1823.c: 102: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  1719                           
  1720                           ;incstack = 0
  1721                           ; Regs used in _start_TX_USART_ISR: [wreg+status,2]
  1722  0374  0023               	movlb	3	; select bank3
  1723  0375  151E               	bsf	30,2	;volatile
  1724  0376  159F               	bsf	31,3	;volatile
  1725  0377  019C               	clrf	28	;volatile
  1726  0378  300C               	movlw	12
  1727  0379  009B               	movwf	27	;volatile
  1728                           
  1729                           ;USART1823.c: 103: SYNC = 0;
  1730  037A  121E               	bcf	30,4	;volatile
  1731                           
  1732                           ;USART1823.c: 104: SPEN = 1;
  1733  037B  179D               	bsf	29,7	;volatile
  1734                           
  1735                           ;USART1823.c: 105: TXEN = 1;
  1736  037C  169E               	bsf	30,5	;volatile
  1737                           
  1738                           ;USART1823.c: 107: USART_tx_flag = 0;
  1739  037D  01F2               	clrf	_USART_tx_flag	;volatile
  1740                           
  1741                           ;USART1823.c: 108: USART_tx_index = 0;
  1742  037E  01F3               	clrf	_USART_tx_index	;volatile
  1743                           
  1744                           ;USART1823.c: 109: USART_tx_length = 0;
  1745  037F  01F4               	clrf	_USART_tx_length	;volatile
  1746                           
  1747                           ;USART1823.c: 112: PEIE = 1;
  1748  0380  170B               	bsf	11,6	;volatile
  1749                           
  1750                           ;USART1823.c: 113: GIE = 1;
  1751  0381  178B               	bsf	11,7	;volatile
  1752  0382  0008               	return
  1753  0383                     __end_of_start_TX_USART_ISR:	
  1754                           
  1755                           	psect	text2
  1756  0342                     __ptext2:	
  1757 ;; *************** function _start_RX_USART_ISR *****************
  1758 ;; Defined at:
  1759 ;;		line 82 in file "USART1823.c"
  1760 ;; Parameters:    Size  Location     Type
  1761 ;;		None
  1762 ;; Auto vars:     Size  Location     Type
  1763 ;;		None
  1764 ;; Return value:  Size  Location     Type
  1765 ;;                  1    wreg      void 
  1766 ;; Registers used:
  1767 ;;		wreg, status,2
  1768 ;; Tracked objects:
  1769 ;;		On entry : 0/0
  1770 ;;		On exit  : 0/0
  1771 ;;		Unchanged: 0/0
  1772 ;; Data sizes:     COMMON   BANK0   BANK1
  1773 ;;      Params:         0       0       0
  1774 ;;      Locals:         0       0       0
  1775 ;;      Temps:          0       0       0
  1776 ;;      Totals:         0       0       0
  1777 ;;Total ram usage:        0 bytes
  1778 ;; Hardware stack levels used:    1
  1779 ;; Hardware stack levels required when called:    2
  1780 ;; This function calls:
  1781 ;;		Nothing
  1782 ;; This function is called by:
  1783 ;;		_main
  1784 ;; This function uses a non-reentrant model
  1785 ;;
  1786                           
  1787                           
  1788                           ;psect for function _start_RX_USART_ISR
  1789  0342                     _start_RX_USART_ISR:	
  1790                           
  1791                           ;USART1823.c: 85: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  1792                           
  1793                           ;incstack = 0
  1794                           ; Regs used in _start_RX_USART_ISR: [wreg+status,2]
  1795  0342  0023               	movlb	3	; select bank3
  1796  0343  151E               	bsf	30,2	;volatile
  1797  0344  159F               	bsf	31,3	;volatile
  1798  0345  019C               	clrf	28	;volatile
  1799  0346  300C               	movlw	12
  1800  0347  009B               	movwf	27	;volatile
  1801                           
  1802                           ;USART1823.c: 87: SYNC = 0;
  1803  0348  121E               	bcf	30,4	;volatile
  1804                           
  1805                           ;USART1823.c: 88: SPEN = 1;
  1806  0349  179D               	bsf	29,7	;volatile
  1807                           
  1808                           ;USART1823.c: 89: CREN = 1;
  1809  034A  161D               	bsf	29,4	;volatile
  1810                           
  1811                           ;USART1823.c: 91: USART_rx_flag = 0;
  1812  034B  0020               	movlb	0	; select bank0
  1813  034C  01BF               	clrf	_USART_rx_flag	;volatile
  1814                           
  1815                           ;USART1823.c: 92: USART_rx_index = 0;
  1816  034D  01C0               	clrf	_USART_rx_index	;volatile
  1817                           
  1818                           ;USART1823.c: 94: RCIE = 1;
  1819  034E  0021               	movlb	1	; select bank1
  1820  034F  1691               	bsf	17,5	;volatile
  1821                           
  1822                           ;USART1823.c: 95: PEIE = 1;
  1823  0350  170B               	bsf	11,6	;volatile
  1824                           
  1825                           ;USART1823.c: 96: GIE = 1;
  1826  0351  178B               	bsf	11,7	;volatile
  1827  0352  0008               	return
  1828  0353                     __end_of_start_RX_USART_ISR:	
  1829                           
  1830                           	psect	text3
  1831  039C                     __ptext3:	
  1832 ;; *************** function _start_RCM *****************
  1833 ;; Defined at:
  1834 ;;		line 4 in file "RCM1823.c"
  1835 ;; Parameters:    Size  Location     Type
  1836 ;;		None
  1837 ;; Auto vars:     Size  Location     Type
  1838 ;;		None
  1839 ;; Return value:  Size  Location     Type
  1840 ;;                  1    wreg      void 
  1841 ;; Registers used:
  1842 ;;		wreg
  1843 ;; Tracked objects:
  1844 ;;		On entry : 0/0
  1845 ;;		On exit  : 0/0
  1846 ;;		Unchanged: 0/0
  1847 ;; Data sizes:     COMMON   BANK0   BANK1
  1848 ;;      Params:         0       0       0
  1849 ;;      Locals:         0       0       0
  1850 ;;      Temps:          0       0       0
  1851 ;;      Totals:         0       0       0
  1852 ;;Total ram usage:        0 bytes
  1853 ;; Hardware stack levels used:    1
  1854 ;; Hardware stack levels required when called:    2
  1855 ;; This function calls:
  1856 ;;		Nothing
  1857 ;; This function is called by:
  1858 ;;		_main
  1859 ;; This function uses a non-reentrant model
  1860 ;;
  1861                           
  1862                           
  1863                           ;psect for function _start_RCM
  1864  039C                     _start_RCM:	
  1865                           
  1866                           ;RCM1823.c: 6: CLKRCON = 0b11010000;
  1867                           
  1868                           ;incstack = 0
  1869                           ; Regs used in _start_RCM: [wreg]
  1870  039C  30D0               	movlw	208
  1871  039D  0027               	movlb	7	; select bank7
  1872  039E  009A               	movwf	26	;volatile
  1873  039F  0008               	return
  1874  03A0                     __end_of_start_RCM:	
  1875                           
  1876                           	psect	text4
  1877  0383                     __ptext4:	
  1878 ;; *************** function _setup_TMR0 *****************
  1879 ;; Defined at:
  1880 ;;		line 10 in file "TMR0.c"
  1881 ;; Parameters:    Size  Location     Type
  1882 ;;		None
  1883 ;; Auto vars:     Size  Location     Type
  1884 ;;		None
  1885 ;; Return value:  Size  Location     Type
  1886 ;;                  1    wreg      void 
  1887 ;; Registers used:
  1888 ;;		None
  1889 ;; Tracked objects:
  1890 ;;		On entry : 0/0
  1891 ;;		On exit  : 0/0
  1892 ;;		Unchanged: 0/0
  1893 ;; Data sizes:     COMMON   BANK0   BANK1
  1894 ;;      Params:         0       0       0
  1895 ;;      Locals:         0       0       0
  1896 ;;      Temps:          0       0       0
  1897 ;;      Totals:         0       0       0
  1898 ;;Total ram usage:        0 bytes
  1899 ;; Hardware stack levels used:    1
  1900 ;; Hardware stack levels required when called:    2
  1901 ;; This function calls:
  1902 ;;		Nothing
  1903 ;; This function is called by:
  1904 ;;		_main
  1905 ;; This function uses a non-reentrant model
  1906 ;;
  1907                           
  1908                           
  1909                           ;psect for function _setup_TMR0
  1910  0383                     _setup_TMR0:	
  1911                           
  1912                           ;TMR0.c: 13: PS2 = 0; PS1 = 1; PS0 = 0;
  1913                           
  1914                           ;incstack = 0
  1915                           ; Regs used in _setup_TMR0: []
  1916  0383  0021               	movlb	1	; select bank1
  1917  0384  1115               	bcf	21,2	;volatile
  1918  0385  1495               	bsf	21,1	;volatile
  1919  0386  1015               	bcf	21,0	;volatile
  1920                           
  1921                           ;TMR0.c: 16: PSA = 0;
  1922  0387  1195               	bcf	21,3	;volatile
  1923                           
  1924                           ;TMR0.c: 18: TMR0CS = 0;
  1925  0388  1295               	bcf	21,5	;volatile
  1926  0389  0008               	return
  1927  038A                     __end_of_setup_TMR0:	
  1928                           
  1929                           	psect	text5
  1930  0390                     __ptext5:	
  1931 ;; *************** function _setup_ADC *****************
  1932 ;; Defined at:
  1933 ;;		line 3 in file "ADC1823.c"
  1934 ;; Parameters:    Size  Location     Type
  1935 ;;		None
  1936 ;; Auto vars:     Size  Location     Type
  1937 ;;		None
  1938 ;; Return value:  Size  Location     Type
  1939 ;;                  1    wreg      void 
  1940 ;; Registers used:
  1941 ;;		wreg
  1942 ;; Tracked objects:
  1943 ;;		On entry : 0/0
  1944 ;;		On exit  : 0/0
  1945 ;;		Unchanged: 0/0
  1946 ;; Data sizes:     COMMON   BANK0   BANK1
  1947 ;;      Params:         0       0       0
  1948 ;;      Locals:         0       0       0
  1949 ;;      Temps:          0       0       0
  1950 ;;      Totals:         0       0       0
  1951 ;;Total ram usage:        0 bytes
  1952 ;; Hardware stack levels used:    1
  1953 ;; Hardware stack levels required when called:    2
  1954 ;; This function calls:
  1955 ;;		Nothing
  1956 ;; This function is called by:
  1957 ;;		_main
  1958 ;; This function uses a non-reentrant model
  1959 ;;
  1960                           
  1961                           
  1962                           ;psect for function _setup_ADC
  1963  0390                     _setup_ADC:	
  1964                           
  1965                           ;ADC1823.c: 20: ADCON1 = 0b11110000;
  1966                           
  1967                           ;incstack = 0
  1968                           ; Regs used in _setup_ADC: [wreg]
  1969  0390  30F0               	movlw	240
  1970  0391  0021               	movlb	1	; select bank1
  1971  0392  009E               	movwf	30	;volatile
  1972                           
  1973                           ;ADC1823.c: 21: { ADCON0 = 0b00100100;};
  1974  0393  3024               	movlw	36
  1975  0394  009D               	movwf	29	;volatile
  1976  0395  0008               	return
  1977  0396                     __end_of_setup_ADC:	
  1978                           
  1979                           	psect	text6
  1980  030A                     __ptext6:	
  1981 ;; *************** function _mess_handler *****************
  1982 ;; Defined at:
  1983 ;;		line 11 in file "comm.c"
  1984 ;; Parameters:    Size  Location     Type
  1985 ;;		None
  1986 ;; Auto vars:     Size  Location     Type
  1987 ;;		None
  1988 ;; Return value:  Size  Location     Type
  1989 ;;                  1    wreg      void 
  1990 ;; Registers used:
  1991 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1992 ;; Tracked objects:
  1993 ;;		On entry : 0/0
  1994 ;;		On exit  : 0/0
  1995 ;;		Unchanged: 0/0
  1996 ;; Data sizes:     COMMON   BANK0   BANK1
  1997 ;;      Params:         0       0       0
  1998 ;;      Locals:         0       0       0
  1999 ;;      Temps:          0       1       0
  2000 ;;      Totals:         0       1       0
  2001 ;;Total ram usage:        1 bytes
  2002 ;; Hardware stack levels used:    1
  2003 ;; Hardware stack levels required when called:    4
  2004 ;; This function calls:
  2005 ;;		_config_ASIC
  2006 ;;		_lputs_ISR
  2007 ;;		_measure_Impedance
  2008 ;;		_read_ADC_channels
  2009 ;; This function is called by:
  2010 ;;		_main
  2011 ;; This function uses a non-reentrant model
  2012 ;;
  2013                           
  2014                           
  2015                           ;psect for function _mess_handler
  2016  030A                     _mess_handler:	
  2017                           
  2018                           ;comm.c: 16: switch (mess_rec[0]) {
  2019                           
  2020                           ;incstack = 0
  2021                           ; Regs used in _mess_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2022  030A  2B19               	goto	l2078
  2023  030B                     l2068:	
  2024                           ;comm.c: 17: case 't':
  2025                           
  2026                           
  2027                           ;comm.c: 18: lputs_ISR(mess_rec,mess_rec_size);
  2028  030B  0020               	movlb	0	; select bank0
  2029  030C  0841               	movf	_mess_rec_size,w	;volatile
  2030  030D  00E9               	movwf	??_mess_handler
  2031  030E  0869               	movf	??_mess_handler,w
  2032  030F  00C8               	movwf	lputs_ISR@length
  2033  0310  3042               	movlw	(low (_mess_rec| 0))& (0+255)
  2034  0311  2278               	fcall	_lputs_ISR
  2035                           
  2036                           ;comm.c: 19: break;
  2037  0312  0008               	return
  2038  0313                     l2070:	
  2039                           ;comm.c: 21: case 'c':
  2040                           
  2041                           
  2042                           ;comm.c: 22: config_ASIC();
  2043  0313  2247               	fcall	_config_ASIC
  2044                           
  2045                           ;comm.c: 23: break;
  2046  0314  0008               	return
  2047  0315                     l2072:	
  2048                           ;comm.c: 25: case 'm':
  2049                           
  2050                           
  2051                           ;comm.c: 26: read_ADC_channels();
  2052  0315  220E               	fcall	_read_ADC_channels
  2053                           
  2054                           ;comm.c: 27: break;
  2055  0316  0008               	return
  2056  0317                     l2074:	
  2057                           ;comm.c: 29: case 'z':
  2058                           
  2059                           
  2060                           ;comm.c: 30: measure_Impedance();
  2061  0317  2062               	fcall	_measure_Impedance
  2062                           
  2063                           ;comm.c: 35: }
  2064                           
  2065                           ;comm.c: 34: break;
  2066                           
  2067                           ;comm.c: 33: default:
  2068                           
  2069                           ;comm.c: 31: break;
  2070  0318  0008               	return
  2071  0319                     l2078:	
  2072  0319  0020               	movlb	0	; select bank0
  2073  031A  0842               	movf	_mess_rec,w	;volatile
  2074                           
  2075                           ; Switch size 1, requested type "space"
  2076                           ; Number of cases is 4, Range of values is 99 to 122
  2077                           ; switch strategies available:
  2078                           ; Name         Instructions Cycles
  2079                           ; simple_byte           13     7 (average)
  2080                           ; direct_byte           57     9 (fixed)
  2081                           ; jumptable            263     9 (fixed)
  2082                           ;	Chosen strategy is simple_byte
  2083  031B  3A63               	xorlw	99	; case 99
  2084  031C  1903               	skipnz
  2085  031D  2B13               	goto	l2070
  2086  031E  3A0E               	xorlw	14	; case 109
  2087  031F  1903               	skipnz
  2088  0320  2B15               	goto	l2072
  2089  0321  3A19               	xorlw	25	; case 116
  2090  0322  1903               	skipnz
  2091  0323  2B0B               	goto	l2068
  2092  0324  3A0E               	xorlw	14	; case 122
  2093  0325  1903               	skipnz
  2094  0326  2B17               	goto	l2074
  2095  0327  2B28               	goto	l320
  2096  0328                     l320:	
  2097  0328  0008               	return
  2098  0329                     __end_of_mess_handler:	
  2099                           
  2100                           	psect	text7
  2101  020E                     __ptext7:	
  2102 ;; *************** function _read_ADC_channels *****************
  2103 ;; Defined at:
  2104 ;;		line 69 in file "comm.c"
  2105 ;; Parameters:    Size  Location     Type
  2106 ;;		None
  2107 ;; Auto vars:     Size  Location     Type
  2108 ;;  aux             7    7[BANK0 ] unsigned char [7]
  2109 ;;  value3          2   18[BANK0 ] unsigned short 
  2110 ;;  value2          2   16[BANK0 ] unsigned short 
  2111 ;;  value1          2   14[BANK0 ] unsigned short 
  2112 ;; Return value:  Size  Location     Type
  2113 ;;                  1    wreg      void 
  2114 ;; Registers used:
  2115 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2116 ;; Tracked objects:
  2117 ;;		On entry : 0/0
  2118 ;;		On exit  : 0/0
  2119 ;;		Unchanged: 0/0
  2120 ;; Data sizes:     COMMON   BANK0   BANK1
  2121 ;;      Params:         0       0       0
  2122 ;;      Locals:         0      13       0
  2123 ;;      Temps:          0       1       0
  2124 ;;      Totals:         0      14       0
  2125 ;;Total ram usage:       14 bytes
  2126 ;; Hardware stack levels used:    1
  2127 ;; Hardware stack levels required when called:    3
  2128 ;; This function calls:
  2129 ;;		_ADC_2
  2130 ;;		_ADC_4
  2131 ;;		_ADC_5
  2132 ;;		_lputs_ISR
  2133 ;; This function is called by:
  2134 ;;		_mess_handler
  2135 ;; This function uses a non-reentrant model
  2136 ;;
  2137                           
  2138                           
  2139                           ;psect for function _read_ADC_channels
  2140  020E                     _read_ADC_channels:	
  2141                           
  2142                           ;comm.c: 71: unsigned char aux[7];
  2143                           ;comm.c: 72: unsigned short value1,value2,value3;
  2144                           ;comm.c: 75: value1 = ADC_2();
  2145                           
  2146                           ;incstack = 0
  2147                           ; Regs used in _read_ADC_channels: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2148  020E  22E7               	fcall	_ADC_2
  2149  020F  0020               	movlb	0	; select bank0
  2150  0210  0849               	movf	?_ADC_2+1,w
  2151  0211  00D7               	movwf	read_ADC_channels@value1+1
  2152  0212  0848               	movf	?_ADC_2,w
  2153  0213  00D6               	movwf	read_ADC_channels@value1
  2154                           
  2155                           ;comm.c: 77: value2 = ADC_4();
  2156  0214  22C4               	fcall	_ADC_4
  2157  0215  0020               	movlb	0	; select bank0
  2158  0216  0849               	movf	?_ADC_4+1,w
  2159  0217  00D9               	movwf	read_ADC_channels@value2+1
  2160  0218  0848               	movf	?_ADC_4,w
  2161  0219  00D8               	movwf	read_ADC_channels@value2
  2162                           
  2163                           ;comm.c: 79: value3 = ADC_5();
  2164  021A  22A1               	fcall	_ADC_5
  2165  021B  0020               	movlb	0	; select bank0
  2166  021C  0849               	movf	?_ADC_5+1,w
  2167  021D  00DB               	movwf	read_ADC_channels@value3+1
  2168  021E  0848               	movf	?_ADC_5,w
  2169  021F  00DA               	movwf	read_ADC_channels@value3
  2170                           
  2171                           ;comm.c: 80: { ADCON0 = 0b00100100;};
  2172  0220  3024               	movlw	36
  2173  0221  0021               	movlb	1	; select bank1
  2174  0222  009D               	movwf	29	;volatile
  2175                           
  2176                           ;comm.c: 82: aux[0] = 'm';
  2177  0223  306D               	movlw	109
  2178  0224  0020               	movlb	0	; select bank0
  2179  0225  00CE               	movwf	??_read_ADC_channels
  2180  0226  084E               	movf	??_read_ADC_channels,w
  2181  0227  00CF               	movwf	read_ADC_channels@aux
  2182                           
  2183                           ;comm.c: 83: aux[1] = (unsigned char)(value1 & 0xff);
  2184  0228  0856               	movf	read_ADC_channels@value1,w
  2185  0229  00CE               	movwf	??_read_ADC_channels
  2186  022A  084E               	movf	??_read_ADC_channels,w
  2187  022B  00D0               	movwf	read_ADC_channels@aux+1
  2188                           
  2189                           ;comm.c: 84: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  2190  022C  0857               	movf	read_ADC_channels@value1+1,w
  2191  022D  00CE               	movwf	??_read_ADC_channels
  2192  022E  084E               	movf	??_read_ADC_channels,w
  2193  022F  00D1               	movwf	read_ADC_channels@aux+2
  2194                           
  2195                           ;comm.c: 85: aux[3] = (unsigned char)(value2 & 0xff);
  2196  0230  0858               	movf	read_ADC_channels@value2,w
  2197  0231  00CE               	movwf	??_read_ADC_channels
  2198  0232  084E               	movf	??_read_ADC_channels,w
  2199  0233  00D2               	movwf	read_ADC_channels@aux+3
  2200                           
  2201                           ;comm.c: 86: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  2202  0234  0859               	movf	read_ADC_channels@value2+1,w
  2203  0235  00CE               	movwf	??_read_ADC_channels
  2204  0236  084E               	movf	??_read_ADC_channels,w
  2205  0237  00D3               	movwf	read_ADC_channels@aux+4
  2206                           
  2207                           ;comm.c: 87: aux[5] = (unsigned char)(value3 & 0xff);
  2208  0238  085A               	movf	read_ADC_channels@value3,w
  2209  0239  00CE               	movwf	??_read_ADC_channels
  2210  023A  084E               	movf	??_read_ADC_channels,w
  2211  023B  00D4               	movwf	read_ADC_channels@aux+5
  2212                           
  2213                           ;comm.c: 88: aux[6] = (unsigned char)((value3 >> 8) & 0xff);
  2214  023C  085B               	movf	read_ADC_channels@value3+1,w
  2215  023D  00CE               	movwf	??_read_ADC_channels
  2216  023E  084E               	movf	??_read_ADC_channels,w
  2217  023F  00D5               	movwf	read_ADC_channels@aux+6
  2218                           
  2219                           ;comm.c: 90: lputs_ISR(aux,7);
  2220  0240  3007               	movlw	7
  2221  0241  00CE               	movwf	??_read_ADC_channels
  2222  0242  084E               	movf	??_read_ADC_channels,w
  2223  0243  00C8               	movwf	lputs_ISR@length
  2224  0244  304F               	movlw	(low (read_ADC_channels@aux| 0))& (0+255)
  2225  0245  2278               	fcall	_lputs_ISR
  2226  0246  0008               	return
  2227  0247                     __end_of_read_ADC_channels:	
  2228                           
  2229                           	psect	text8
  2230  02A1                     __ptext8:	
  2231 ;; *************** function _ADC_5 *****************
  2232 ;; Defined at:
  2233 ;;		line 48 in file "ADC1823.c"
  2234 ;; Parameters:    Size  Location     Type
  2235 ;;		None
  2236 ;; Auto vars:     Size  Location     Type
  2237 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  2238 ;; Return value:  Size  Location     Type
  2239 ;;                  2    0[BANK0 ] unsigned short 
  2240 ;; Registers used:
  2241 ;;		wreg
  2242 ;; Tracked objects:
  2243 ;;		On entry : 0/0
  2244 ;;		On exit  : 0/0
  2245 ;;		Unchanged: 0/0
  2246 ;; Data sizes:     COMMON   BANK0   BANK1
  2247 ;;      Params:         0       2       0
  2248 ;;      Locals:         0       2       0
  2249 ;;      Temps:          0       2       0
  2250 ;;      Totals:         0       6       0
  2251 ;;Total ram usage:        6 bytes
  2252 ;; Hardware stack levels used:    1
  2253 ;; Hardware stack levels required when called:    2
  2254 ;; This function calls:
  2255 ;;		Nothing
  2256 ;; This function is called by:
  2257 ;;		_read_ADC_channels
  2258 ;; This function uses a non-reentrant model
  2259 ;;
  2260                           
  2261                           
  2262                           ;psect for function _ADC_5
  2263  02A1                     _ADC_5:	
  2264                           
  2265                           ;ADC1823.c: 50: unsigned short ADC_value;
  2266                           ;ADC1823.c: 52: { ADCON0 = 0b00010101;};
  2267                           
  2268                           ;incstack = 0
  2269                           ; Regs used in _ADC_5: [wreg]
  2270  02A1  3015               	movlw	21
  2271  02A2  0021               	movlb	1	; select bank1
  2272  02A3  009D               	movwf	29	;volatile
  2273                           
  2274                           ;ADC1823.c: 53: __nop();
  2275  02A4  0000               	nop
  2276                           
  2277                           ;ADC1823.c: 54: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  2278  02A5  0021               	movlb	1	; select bank1
  2279  02A6  149D               	bsf	29,1	;volatile
  2280  02A7                     l359:	
  2281  02A7  189D               	btfsc	29,1	;volatile
  2282  02A8  2AA7               	goto	l359
  2283  02A9  081C               	movf	28,w	;volatile
  2284  02AA  0020               	movlb	0	; select bank0
  2285  02AB  00CA               	movwf	??_ADC_5
  2286  02AC  01CB               	clrf	??_ADC_5+1
  2287  02AD  084A               	movf	??_ADC_5,w
  2288  02AE  00CC               	movwf	ADC_5@ADC_value
  2289  02AF  084B               	movf	??_ADC_5+1,w
  2290  02B0  00CD               	movwf	ADC_5@ADC_value+1
  2291  02B1  3008               	movlw	8
  2292  02B2                     u925:	
  2293  02B2  35CC               	lslf	ADC_5@ADC_value,f
  2294  02B3  0DCD               	rlf	ADC_5@ADC_value+1,f
  2295  02B4  0B89               	decfsz	9,f
  2296  02B5  2AB2               	goto	u925
  2297  02B6  0021               	movlb	1	; select bank1
  2298  02B7  081B               	movf	27,w	;volatile
  2299  02B8  0020               	movlb	0	; select bank0
  2300  02B9  00CA               	movwf	??_ADC_5
  2301  02BA  01CB               	clrf	??_ADC_5+1
  2302  02BB  084A               	movf	??_ADC_5,w
  2303  02BC  04CC               	iorwf	ADC_5@ADC_value,f
  2304  02BD  084B               	movf	??_ADC_5+1,w
  2305  02BE  04CD               	iorwf	ADC_5@ADC_value+1,f
  2306                           
  2307                           ;ADC1823.c: 55: return ADC_value;
  2308  02BF  084D               	movf	ADC_5@ADC_value+1,w
  2309  02C0  00C9               	movwf	?_ADC_5+1
  2310  02C1  084C               	movf	ADC_5@ADC_value,w
  2311  02C2  00C8               	movwf	?_ADC_5
  2312  02C3  0008               	return
  2313  02C4                     __end_of_ADC_5:	
  2314                           
  2315                           	psect	text9
  2316  0062                     __ptext9:	
  2317 ;; *************** function _measure_Impedance *****************
  2318 ;; Defined at:
  2319 ;;		line 93 in file "comm.c"
  2320 ;; Parameters:    Size  Location     Type
  2321 ;;		None
  2322 ;; Auto vars:     Size  Location     Type
  2323 ;;  aux            13   10[BANK0 ] unsigned char [13]
  2324 ;;  asic            6   27[BANK0 ] struct .
  2325 ;;  value2          2   25[BANK0 ] unsigned short 
  2326 ;;  value1          2   23[BANK0 ] unsigned short 
  2327 ;;  value3          2    0        unsigned short 
  2328 ;; Return value:  Size  Location     Type
  2329 ;;                  1    wreg      void 
  2330 ;; Registers used:
  2331 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2332 ;; Tracked objects:
  2333 ;;		On entry : 0/0
  2334 ;;		On exit  : 0/0
  2335 ;;		Unchanged: 0/0
  2336 ;; Data sizes:     COMMON   BANK0   BANK1
  2337 ;;      Params:         0       0       0
  2338 ;;      Locals:         0      23       0
  2339 ;;      Temps:          0       1       0
  2340 ;;      Totals:         0      24       0
  2341 ;;Total ram usage:       24 bytes
  2342 ;; Hardware stack levels used:    1
  2343 ;; Hardware stack levels required when called:    3
  2344 ;; This function calls:
  2345 ;;		_ADC_2
  2346 ;;		_ADC_4
  2347 ;;		_VIN_config
  2348 ;;		_lputs_ISR
  2349 ;; This function is called by:
  2350 ;;		_mess_handler
  2351 ;; This function uses a non-reentrant model
  2352 ;;
  2353                           
  2354                           
  2355                           ;psect for function _measure_Impedance
  2356  0062                     _measure_Impedance:	
  2357                           
  2358                           ;comm.c: 95: unsigned char aux[13];
  2359                           ;comm.c: 96: unsigned short value1,value2,value3;
  2360                           ;comm.c: 101: VIN asic;
  2361                           ;comm.c: 105: aux[0] = 'z';
  2362                           
  2363                           ;incstack = 0
  2364                           ; Regs used in _measure_Impedance: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2365  0062  307A               	movlw	122
  2366  0063  0020               	movlb	0	; select bank0
  2367  0064  00D1               	movwf	??_measure_Impedance
  2368  0065  0851               	movf	??_measure_Impedance,w
  2369  0066  00D2               	movwf	measure_Impedance@aux
  2370                           
  2371                           ;comm.c: 117: asic.data[0] = mess_rec[1];
  2372  0067  0843               	movf	_mess_rec+1,w	;volatile
  2373  0068  00D1               	movwf	??_measure_Impedance
  2374  0069  0851               	movf	??_measure_Impedance,w
  2375  006A  00E3               	movwf	measure_Impedance@asic
  2376                           
  2377                           ;comm.c: 118: asic.data[1] = mess_rec[2];
  2378  006B  0844               	movf	_mess_rec+2,w	;volatile
  2379  006C  00D1               	movwf	??_measure_Impedance
  2380  006D  0851               	movf	??_measure_Impedance,w
  2381  006E  00E4               	movwf	measure_Impedance@asic+1
  2382                           
  2383                           ;comm.c: 119: asic.data[2] = mess_rec[3];
  2384  006F  0845               	movf	_mess_rec+3,w	;volatile
  2385  0070  00D1               	movwf	??_measure_Impedance
  2386  0071  0851               	movf	??_measure_Impedance,w
  2387  0072  00E5               	movwf	measure_Impedance@asic+2
  2388                           
  2389                           ;comm.c: 120: asic.data[3] = mess_rec[4];
  2390  0073  0846               	movf	_mess_rec+4,w	;volatile
  2391  0074  00D1               	movwf	??_measure_Impedance
  2392  0075  0851               	movf	??_measure_Impedance,w
  2393  0076  00E6               	movwf	measure_Impedance@asic+3
  2394                           
  2395                           ;comm.c: 121: asic.data[4] = mess_rec[5];
  2396  0077  0847               	movf	_mess_rec+5,w	;volatile
  2397  0078  00D1               	movwf	??_measure_Impedance
  2398  0079  0851               	movf	??_measure_Impedance,w
  2399  007A  00E7               	movwf	measure_Impedance@asic+4
  2400                           
  2401                           ;comm.c: 123: asic.data_bits.CE = 0;
  2402  007B  1363               	bcf	measure_Impedance@asic,6
  2403                           
  2404                           ;comm.c: 124: VIN_config(asic);
  2405  007C  3063               	movlw	low measure_Impedance@asic
  2406  007D  0086               	movwf	6
  2407  007E  3000               	movlw	high measure_Impedance@asic
  2408  007F  0087               	movwf	7
  2409  0080  3048               	movlw	low VIN_config@conf
  2410  0081  0084               	movwf	4
  2411  0082  3000               	movlw	high VIN_config@conf
  2412  0083  0085               	movwf	5
  2413  0084  3F40               	moviw [0]fsr1
  2414  0085  3F80               	movwi [0]fsr0
  2415  0086  3F41               	moviw [1]fsr1
  2416  0087  3F81               	movwi [1]fsr0
  2417  0088  3F42               	moviw [2]fsr1
  2418  0089  3F82               	movwi [2]fsr0
  2419  008A  3F43               	moviw [3]fsr1
  2420  008B  3F83               	movwi [3]fsr0
  2421  008C  3F44               	moviw [4]fsr1
  2422  008D  3F84               	movwi [4]fsr0
  2423  008E  3F45               	moviw [5]fsr1
  2424  008F  3F85               	movwi [5]fsr0
  2425  0090  2134               	fcall	_VIN_config
  2426                           
  2427                           ;comm.c: 127: _delay((unsigned long)((60)*(500000/4000.0)));
  2428  0091  300A               	movlw	10
  2429  0092  0020               	movlb	0	; select bank0
  2430  0093  00D1               	movwf	??_measure_Impedance
  2431  0094  30BC               	movlw	188
  2432  0095                     u997:	
  2433  0095  0B89               	decfsz	9,f
  2434  0096  2895               	goto	u997
  2435  0097  0BD1               	decfsz	??_measure_Impedance,f
  2436  0098  2895               	goto	u997
  2437  0099  0000               	nop
  2438                           
  2439                           ;comm.c: 129: value1 = ADC_2();
  2440  009A  22E7               	fcall	_ADC_2
  2441  009B  0020               	movlb	0	; select bank0
  2442  009C  0849               	movf	?_ADC_2+1,w
  2443  009D  00E0               	movwf	measure_Impedance@value1+1
  2444  009E  0848               	movf	?_ADC_2,w
  2445  009F  00DF               	movwf	measure_Impedance@value1
  2446                           
  2447                           ;comm.c: 130: value2 = ADC_4();
  2448  00A0  22C4               	fcall	_ADC_4
  2449  00A1  0020               	movlb	0	; select bank0
  2450  00A2  0849               	movf	?_ADC_4+1,w
  2451  00A3  00E2               	movwf	measure_Impedance@value2+1
  2452  00A4  0848               	movf	?_ADC_4,w
  2453  00A5  00E1               	movwf	measure_Impedance@value2
  2454                           
  2455                           ;comm.c: 132: aux[1] = (unsigned char)(value1 & 0xff);
  2456  00A6  085F               	movf	measure_Impedance@value1,w
  2457  00A7  00D1               	movwf	??_measure_Impedance
  2458  00A8  0851               	movf	??_measure_Impedance,w
  2459  00A9  00D3               	movwf	measure_Impedance@aux+1
  2460                           
  2461                           ;comm.c: 133: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  2462  00AA  0860               	movf	measure_Impedance@value1+1,w
  2463  00AB  00D1               	movwf	??_measure_Impedance
  2464  00AC  0851               	movf	??_measure_Impedance,w
  2465  00AD  00D4               	movwf	measure_Impedance@aux+2
  2466                           
  2467                           ;comm.c: 134: aux[3] = (unsigned char)(value2 & 0xff);
  2468  00AE  0861               	movf	measure_Impedance@value2,w
  2469  00AF  00D1               	movwf	??_measure_Impedance
  2470  00B0  0851               	movf	??_measure_Impedance,w
  2471  00B1  00D5               	movwf	measure_Impedance@aux+3
  2472                           
  2473                           ;comm.c: 135: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  2474  00B2  0862               	movf	measure_Impedance@value2+1,w
  2475  00B3  00D1               	movwf	??_measure_Impedance
  2476  00B4  0851               	movf	??_measure_Impedance,w
  2477  00B5  00D6               	movwf	measure_Impedance@aux+4
  2478                           
  2479                           ;comm.c: 138: asic.data_bits.CE = 1;
  2480  00B6  1763               	bsf	measure_Impedance@asic,6
  2481                           
  2482                           ;comm.c: 139: asic.data_bits.IQ = 0;
  2483  00B7  11E4               	bcf	measure_Impedance@asic+1,3
  2484                           
  2485                           ;comm.c: 144: VIN_config(asic);
  2486  00B8  3063               	movlw	low measure_Impedance@asic
  2487  00B9  0086               	movwf	6
  2488  00BA  3000               	movlw	high measure_Impedance@asic
  2489  00BB  0087               	movwf	7
  2490  00BC  3048               	movlw	low VIN_config@conf
  2491  00BD  0084               	movwf	4
  2492  00BE  3000               	movlw	high VIN_config@conf
  2493  00BF  0085               	movwf	5
  2494  00C0  3F40               	moviw [0]fsr1
  2495  00C1  3F80               	movwi [0]fsr0
  2496  00C2  3F41               	moviw [1]fsr1
  2497  00C3  3F81               	movwi [1]fsr0
  2498  00C4  3F42               	moviw [2]fsr1
  2499  00C5  3F82               	movwi [2]fsr0
  2500  00C6  3F43               	moviw [3]fsr1
  2501  00C7  3F83               	movwi [3]fsr0
  2502  00C8  3F44               	moviw [4]fsr1
  2503  00C9  3F84               	movwi [4]fsr0
  2504  00CA  3F45               	moviw [5]fsr1
  2505  00CB  3F85               	movwi [5]fsr0
  2506  00CC  2134               	fcall	_VIN_config
  2507                           
  2508                           ;comm.c: 146: _delay((unsigned long)((60)*(500000/4000.0)));
  2509  00CD  300A               	movlw	10
  2510  00CE  0020               	movlb	0	; select bank0
  2511  00CF  00D1               	movwf	??_measure_Impedance
  2512  00D0  30BC               	movlw	188
  2513  00D1                     u1007:	
  2514  00D1  0B89               	decfsz	9,f
  2515  00D2  28D1               	goto	u1007
  2516  00D3  0BD1               	decfsz	??_measure_Impedance,f
  2517  00D4  28D1               	goto	u1007
  2518  00D5  0000               	nop
  2519                           
  2520                           ;comm.c: 148: value1 = ADC_2();
  2521  00D6  22E7               	fcall	_ADC_2
  2522  00D7  0020               	movlb	0	; select bank0
  2523  00D8  0849               	movf	?_ADC_2+1,w
  2524  00D9  00E0               	movwf	measure_Impedance@value1+1
  2525  00DA  0848               	movf	?_ADC_2,w
  2526  00DB  00DF               	movwf	measure_Impedance@value1
  2527                           
  2528                           ;comm.c: 149: value2 = ADC_4();
  2529  00DC  22C4               	fcall	_ADC_4
  2530  00DD  0020               	movlb	0	; select bank0
  2531  00DE  0849               	movf	?_ADC_4+1,w
  2532  00DF  00E2               	movwf	measure_Impedance@value2+1
  2533  00E0  0848               	movf	?_ADC_4,w
  2534  00E1  00E1               	movwf	measure_Impedance@value2
  2535                           
  2536                           ;comm.c: 151: aux[5] = (unsigned char)(value1 & 0xff);
  2537  00E2  085F               	movf	measure_Impedance@value1,w
  2538  00E3  00D1               	movwf	??_measure_Impedance
  2539  00E4  0851               	movf	??_measure_Impedance,w
  2540  00E5  00D7               	movwf	measure_Impedance@aux+5
  2541                           
  2542                           ;comm.c: 152: aux[6] = (unsigned char)((value1 >> 8) & 0xff);
  2543  00E6  0860               	movf	measure_Impedance@value1+1,w
  2544  00E7  00D1               	movwf	??_measure_Impedance
  2545  00E8  0851               	movf	??_measure_Impedance,w
  2546  00E9  00D8               	movwf	measure_Impedance@aux+6
  2547                           
  2548                           ;comm.c: 153: aux[7] = (unsigned char)(value2 & 0xff);
  2549  00EA  0861               	movf	measure_Impedance@value2,w
  2550  00EB  00D1               	movwf	??_measure_Impedance
  2551  00EC  0851               	movf	??_measure_Impedance,w
  2552  00ED  00D9               	movwf	measure_Impedance@aux+7
  2553                           
  2554                           ;comm.c: 154: aux[8] = (unsigned char)((value2 >> 8) & 0xff);
  2555  00EE  0862               	movf	measure_Impedance@value2+1,w
  2556  00EF  00D1               	movwf	??_measure_Impedance
  2557  00F0  0851               	movf	??_measure_Impedance,w
  2558  00F1  00DA               	movwf	measure_Impedance@aux+8
  2559                           
  2560                           ;comm.c: 157: asic.data_bits.IQ = 1;
  2561  00F2  15E4               	bsf	measure_Impedance@asic+1,3
  2562                           
  2563                           ;comm.c: 162: VIN_config(asic);
  2564  00F3  3063               	movlw	low measure_Impedance@asic
  2565  00F4  0086               	movwf	6
  2566  00F5  3000               	movlw	high measure_Impedance@asic
  2567  00F6  0087               	movwf	7
  2568  00F7  3048               	movlw	low VIN_config@conf
  2569  00F8  0084               	movwf	4
  2570  00F9  3000               	movlw	high VIN_config@conf
  2571  00FA  0085               	movwf	5
  2572  00FB  3F40               	moviw [0]fsr1
  2573  00FC  3F80               	movwi [0]fsr0
  2574  00FD  3F41               	moviw [1]fsr1
  2575  00FE  3F81               	movwi [1]fsr0
  2576  00FF  3F42               	moviw [2]fsr1
  2577  0100  3F82               	movwi [2]fsr0
  2578  0101  3F43               	moviw [3]fsr1
  2579  0102  3F83               	movwi [3]fsr0
  2580  0103  3F44               	moviw [4]fsr1
  2581  0104  3F84               	movwi [4]fsr0
  2582  0105  3F45               	moviw [5]fsr1
  2583  0106  3F85               	movwi [5]fsr0
  2584  0107  2134               	fcall	_VIN_config
  2585                           
  2586                           ;comm.c: 164: _delay((unsigned long)((60)*(500000/4000.0)));
  2587  0108  300A               	movlw	10
  2588  0109  0020               	movlb	0	; select bank0
  2589  010A  00D1               	movwf	??_measure_Impedance
  2590  010B  30BC               	movlw	188
  2591  010C                     u1017:	
  2592  010C  0B89               	decfsz	9,f
  2593  010D  290C               	goto	u1017
  2594  010E  0BD1               	decfsz	??_measure_Impedance,f
  2595  010F  290C               	goto	u1017
  2596  0110  0000               	nop
  2597                           
  2598                           ;comm.c: 166: value1 = ADC_2();
  2599  0111  22E7               	fcall	_ADC_2
  2600  0112  0020               	movlb	0	; select bank0
  2601  0113  0849               	movf	?_ADC_2+1,w
  2602  0114  00E0               	movwf	measure_Impedance@value1+1
  2603  0115  0848               	movf	?_ADC_2,w
  2604  0116  00DF               	movwf	measure_Impedance@value1
  2605                           
  2606                           ;comm.c: 167: value2 = ADC_4();
  2607  0117  22C4               	fcall	_ADC_4
  2608  0118  0020               	movlb	0	; select bank0
  2609  0119  0849               	movf	?_ADC_4+1,w
  2610  011A  00E2               	movwf	measure_Impedance@value2+1
  2611  011B  0848               	movf	?_ADC_4,w
  2612  011C  00E1               	movwf	measure_Impedance@value2
  2613                           
  2614                           ;comm.c: 169: aux[9] = (unsigned char)(value1 & 0xff);
  2615  011D  085F               	movf	measure_Impedance@value1,w
  2616  011E  00D1               	movwf	??_measure_Impedance
  2617  011F  0851               	movf	??_measure_Impedance,w
  2618  0120  00DB               	movwf	measure_Impedance@aux+9
  2619                           
  2620                           ;comm.c: 170: aux[10] = (unsigned char)((value1 >> 8) & 0xff);
  2621  0121  0860               	movf	measure_Impedance@value1+1,w
  2622  0122  00D1               	movwf	??_measure_Impedance
  2623  0123  0851               	movf	??_measure_Impedance,w
  2624  0124  00DC               	movwf	measure_Impedance@aux+10
  2625                           
  2626                           ;comm.c: 171: aux[11] = (unsigned char)(value2 & 0xff);
  2627  0125  0861               	movf	measure_Impedance@value2,w
  2628  0126  00D1               	movwf	??_measure_Impedance
  2629  0127  0851               	movf	??_measure_Impedance,w
  2630  0128  00DD               	movwf	measure_Impedance@aux+11
  2631                           
  2632                           ;comm.c: 172: aux[12] = (unsigned char)((value2 >> 8) & 0xff);
  2633  0129  0862               	movf	measure_Impedance@value2+1,w
  2634  012A  00D1               	movwf	??_measure_Impedance
  2635  012B  0851               	movf	??_measure_Impedance,w
  2636  012C  00DE               	movwf	measure_Impedance@aux+12
  2637                           
  2638                           ;comm.c: 175: lputs_ISR(aux,13);
  2639  012D  300D               	movlw	13
  2640  012E  00D1               	movwf	??_measure_Impedance
  2641  012F  0851               	movf	??_measure_Impedance,w
  2642  0130  00C8               	movwf	lputs_ISR@length
  2643  0131  3052               	movlw	(low (measure_Impedance@aux| 0))& (0+255)
  2644  0132  2278               	fcall	_lputs_ISR
  2645  0133  0008               	return
  2646  0134                     __end_of_measure_Impedance:	
  2647                           
  2648                           	psect	text10
  2649  02C4                     __ptext10:	
  2650 ;; *************** function _ADC_4 *****************
  2651 ;; Defined at:
  2652 ;;		line 38 in file "ADC1823.c"
  2653 ;; Parameters:    Size  Location     Type
  2654 ;;		None
  2655 ;; Auto vars:     Size  Location     Type
  2656 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  2657 ;; Return value:  Size  Location     Type
  2658 ;;                  2    0[BANK0 ] unsigned short 
  2659 ;; Registers used:
  2660 ;;		wreg
  2661 ;; Tracked objects:
  2662 ;;		On entry : 0/0
  2663 ;;		On exit  : 0/0
  2664 ;;		Unchanged: 0/0
  2665 ;; Data sizes:     COMMON   BANK0   BANK1
  2666 ;;      Params:         0       2       0
  2667 ;;      Locals:         0       2       0
  2668 ;;      Temps:          0       2       0
  2669 ;;      Totals:         0       6       0
  2670 ;;Total ram usage:        6 bytes
  2671 ;; Hardware stack levels used:    1
  2672 ;; Hardware stack levels required when called:    2
  2673 ;; This function calls:
  2674 ;;		Nothing
  2675 ;; This function is called by:
  2676 ;;		_read_ADC_channels
  2677 ;;		_measure_Impedance
  2678 ;; This function uses a non-reentrant model
  2679 ;;
  2680                           
  2681                           
  2682                           ;psect for function _ADC_4
  2683  02C4                     _ADC_4:	
  2684                           
  2685                           ;ADC1823.c: 40: unsigned short ADC_value;
  2686                           ;ADC1823.c: 42: { ADCON0 = 0b00010001;};
  2687                           
  2688                           ;incstack = 0
  2689                           ; Regs used in _ADC_4: [wreg]
  2690  02C4  3011               	movlw	17
  2691  02C5  0021               	movlb	1	; select bank1
  2692  02C6  009D               	movwf	29	;volatile
  2693                           
  2694                           ;ADC1823.c: 43: __nop();
  2695  02C7  0000               	nop
  2696                           
  2697                           ;ADC1823.c: 44: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  2698  02C8  0021               	movlb	1	; select bank1
  2699  02C9  149D               	bsf	29,1	;volatile
  2700  02CA                     l353:	
  2701  02CA  189D               	btfsc	29,1	;volatile
  2702  02CB  2ACA               	goto	l353
  2703  02CC  081C               	movf	28,w	;volatile
  2704  02CD  0020               	movlb	0	; select bank0
  2705  02CE  00CA               	movwf	??_ADC_4
  2706  02CF  01CB               	clrf	??_ADC_4+1
  2707  02D0  084A               	movf	??_ADC_4,w
  2708  02D1  00CC               	movwf	ADC_4@ADC_value
  2709  02D2  084B               	movf	??_ADC_4+1,w
  2710  02D3  00CD               	movwf	ADC_4@ADC_value+1
  2711  02D4  3008               	movlw	8
  2712  02D5                     u905:	
  2713  02D5  35CC               	lslf	ADC_4@ADC_value,f
  2714  02D6  0DCD               	rlf	ADC_4@ADC_value+1,f
  2715  02D7  0B89               	decfsz	9,f
  2716  02D8  2AD5               	goto	u905
  2717  02D9  0021               	movlb	1	; select bank1
  2718  02DA  081B               	movf	27,w	;volatile
  2719  02DB  0020               	movlb	0	; select bank0
  2720  02DC  00CA               	movwf	??_ADC_4
  2721  02DD  01CB               	clrf	??_ADC_4+1
  2722  02DE  084A               	movf	??_ADC_4,w
  2723  02DF  04CC               	iorwf	ADC_4@ADC_value,f
  2724  02E0  084B               	movf	??_ADC_4+1,w
  2725  02E1  04CD               	iorwf	ADC_4@ADC_value+1,f
  2726                           
  2727                           ;ADC1823.c: 45: return ADC_value;
  2728  02E2  084D               	movf	ADC_4@ADC_value+1,w
  2729  02E3  00C9               	movwf	?_ADC_4+1
  2730  02E4  084C               	movf	ADC_4@ADC_value,w
  2731  02E5  00C8               	movwf	?_ADC_4
  2732  02E6  0008               	return
  2733  02E7                     __end_of_ADC_4:	
  2734                           
  2735                           	psect	text11
  2736  02E7                     __ptext11:	
  2737 ;; *************** function _ADC_2 *****************
  2738 ;; Defined at:
  2739 ;;		line 25 in file "ADC1823.c"
  2740 ;; Parameters:    Size  Location     Type
  2741 ;;		None
  2742 ;; Auto vars:     Size  Location     Type
  2743 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  2744 ;; Return value:  Size  Location     Type
  2745 ;;                  2    0[BANK0 ] unsigned short 
  2746 ;; Registers used:
  2747 ;;		wreg
  2748 ;; Tracked objects:
  2749 ;;		On entry : 0/0
  2750 ;;		On exit  : 0/0
  2751 ;;		Unchanged: 0/0
  2752 ;; Data sizes:     COMMON   BANK0   BANK1
  2753 ;;      Params:         0       2       0
  2754 ;;      Locals:         0       2       0
  2755 ;;      Temps:          0       2       0
  2756 ;;      Totals:         0       6       0
  2757 ;;Total ram usage:        6 bytes
  2758 ;; Hardware stack levels used:    1
  2759 ;; Hardware stack levels required when called:    2
  2760 ;; This function calls:
  2761 ;;		Nothing
  2762 ;; This function is called by:
  2763 ;;		_read_ADC_channels
  2764 ;;		_measure_Impedance
  2765 ;; This function uses a non-reentrant model
  2766 ;;
  2767                           
  2768                           
  2769                           ;psect for function _ADC_2
  2770  02E7                     _ADC_2:	
  2771                           
  2772                           ;ADC1823.c: 27: unsigned short ADC_value;
  2773                           ;ADC1823.c: 29: { ADCON0 = 0b00001001;};
  2774                           
  2775                           ;incstack = 0
  2776                           ; Regs used in _ADC_2: [wreg]
  2777  02E7  3009               	movlw	9
  2778  02E8  0021               	movlb	1	; select bank1
  2779  02E9  009D               	movwf	29	;volatile
  2780                           
  2781                           ;ADC1823.c: 30: __nop();
  2782  02EA  0000               	nop
  2783                           
  2784                           ;ADC1823.c: 34: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  2785  02EB  0021               	movlb	1	; select bank1
  2786  02EC  149D               	bsf	29,1	;volatile
  2787  02ED                     l347:	
  2788  02ED  189D               	btfsc	29,1	;volatile
  2789  02EE  2AED               	goto	l347
  2790  02EF  081C               	movf	28,w	;volatile
  2791  02F0  0020               	movlb	0	; select bank0
  2792  02F1  00CA               	movwf	??_ADC_2
  2793  02F2  01CB               	clrf	??_ADC_2+1
  2794  02F3  084A               	movf	??_ADC_2,w
  2795  02F4  00CC               	movwf	ADC_2@ADC_value
  2796  02F5  084B               	movf	??_ADC_2+1,w
  2797  02F6  00CD               	movwf	ADC_2@ADC_value+1
  2798  02F7  3008               	movlw	8
  2799  02F8                     u885:	
  2800  02F8  35CC               	lslf	ADC_2@ADC_value,f
  2801  02F9  0DCD               	rlf	ADC_2@ADC_value+1,f
  2802  02FA  0B89               	decfsz	9,f
  2803  02FB  2AF8               	goto	u885
  2804  02FC  0021               	movlb	1	; select bank1
  2805  02FD  081B               	movf	27,w	;volatile
  2806  02FE  0020               	movlb	0	; select bank0
  2807  02FF  00CA               	movwf	??_ADC_2
  2808  0300  01CB               	clrf	??_ADC_2+1
  2809  0301  084A               	movf	??_ADC_2,w
  2810  0302  04CC               	iorwf	ADC_2@ADC_value,f
  2811  0303  084B               	movf	??_ADC_2+1,w
  2812  0304  04CD               	iorwf	ADC_2@ADC_value+1,f
  2813                           
  2814                           ;ADC1823.c: 35: return ADC_value;
  2815  0305  084D               	movf	ADC_2@ADC_value+1,w
  2816  0306  00C9               	movwf	?_ADC_2+1
  2817  0307  084C               	movf	ADC_2@ADC_value,w
  2818  0308  00C8               	movwf	?_ADC_2
  2819  0309  0008               	return
  2820  030A                     __end_of_ADC_2:	
  2821                           
  2822                           	psect	text12
  2823  0247                     __ptext12:	
  2824 ;; *************** function _config_ASIC *****************
  2825 ;; Defined at:
  2826 ;;		line 38 in file "comm.c"
  2827 ;; Parameters:    Size  Location     Type
  2828 ;;		None
  2829 ;; Auto vars:     Size  Location     Type
  2830 ;;  asic            6   10[BANK0 ] struct .
  2831 ;; Return value:  Size  Location     Type
  2832 ;;                  1    wreg      void 
  2833 ;; Registers used:
  2834 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2835 ;; Tracked objects:
  2836 ;;		On entry : 0/0
  2837 ;;		On exit  : 0/0
  2838 ;;		Unchanged: 0/0
  2839 ;; Data sizes:     COMMON   BANK0   BANK1
  2840 ;;      Params:         0       0       0
  2841 ;;      Locals:         0       6       0
  2842 ;;      Temps:          0       1       0
  2843 ;;      Totals:         0       7       0
  2844 ;;Total ram usage:        7 bytes
  2845 ;; Hardware stack levels used:    1
  2846 ;; Hardware stack levels required when called:    3
  2847 ;; This function calls:
  2848 ;;		_VIN_config
  2849 ;;		_lputs_ISR
  2850 ;; This function is called by:
  2851 ;;		_mess_handler
  2852 ;; This function uses a non-reentrant model
  2853 ;;
  2854                           
  2855                           
  2856                           ;psect for function _config_ASIC
  2857  0247                     _config_ASIC:	
  2858                           
  2859                           ;comm.c: 54: VIN asic;
  2860                           ;comm.c: 57: asic.data[0] = mess_rec[1];
  2861                           
  2862                           ;incstack = 0
  2863                           ; Regs used in _config_ASIC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2864  0247  0020               	movlb	0	; select bank0
  2865  0248  0843               	movf	_mess_rec+1,w	;volatile
  2866  0249  00D1               	movwf	??_config_ASIC
  2867  024A  0851               	movf	??_config_ASIC,w
  2868  024B  00D2               	movwf	config_ASIC@asic
  2869                           
  2870                           ;comm.c: 58: asic.data[1] = mess_rec[2];
  2871  024C  0844               	movf	_mess_rec+2,w	;volatile
  2872  024D  00D1               	movwf	??_config_ASIC
  2873  024E  0851               	movf	??_config_ASIC,w
  2874  024F  00D3               	movwf	config_ASIC@asic+1
  2875                           
  2876                           ;comm.c: 59: asic.data[2] = mess_rec[3];
  2877  0250  0845               	movf	_mess_rec+3,w	;volatile
  2878  0251  00D1               	movwf	??_config_ASIC
  2879  0252  0851               	movf	??_config_ASIC,w
  2880  0253  00D4               	movwf	config_ASIC@asic+2
  2881                           
  2882                           ;comm.c: 60: asic.data[3] = mess_rec[4];
  2883  0254  0846               	movf	_mess_rec+4,w	;volatile
  2884  0255  00D1               	movwf	??_config_ASIC
  2885  0256  0851               	movf	??_config_ASIC,w
  2886  0257  00D5               	movwf	config_ASIC@asic+3
  2887                           
  2888                           ;comm.c: 61: asic.data[4] = mess_rec[5];
  2889  0258  0847               	movf	_mess_rec+5,w	;volatile
  2890  0259  00D1               	movwf	??_config_ASIC
  2891  025A  0851               	movf	??_config_ASIC,w
  2892  025B  00D6               	movwf	config_ASIC@asic+4
  2893                           
  2894                           ;comm.c: 63: lputs_ISR(mess_rec,mess_rec_size);
  2895  025C  0841               	movf	_mess_rec_size,w	;volatile
  2896  025D  00D1               	movwf	??_config_ASIC
  2897  025E  0851               	movf	??_config_ASIC,w
  2898  025F  00C8               	movwf	lputs_ISR@length
  2899  0260  3042               	movlw	(low (_mess_rec| 0))& (0+255)
  2900  0261  2278               	fcall	_lputs_ISR
  2901                           
  2902                           ;comm.c: 65: VIN_config(asic);
  2903  0262  3052               	movlw	low config_ASIC@asic
  2904  0263  0086               	movwf	6
  2905  0264  3000               	movlw	high config_ASIC@asic
  2906  0265  0087               	movwf	7
  2907  0266  3048               	movlw	low VIN_config@conf
  2908  0267  0084               	movwf	4
  2909  0268  3000               	movlw	high VIN_config@conf
  2910  0269  0085               	movwf	5
  2911  026A  3F40               	moviw [0]fsr1
  2912  026B  3F80               	movwi [0]fsr0
  2913  026C  3F41               	moviw [1]fsr1
  2914  026D  3F81               	movwi [1]fsr0
  2915  026E  3F42               	moviw [2]fsr1
  2916  026F  3F82               	movwi [2]fsr0
  2917  0270  3F43               	moviw [3]fsr1
  2918  0271  3F83               	movwi [3]fsr0
  2919  0272  3F44               	moviw [4]fsr1
  2920  0273  3F84               	movwi [4]fsr0
  2921  0274  3F45               	moviw [5]fsr1
  2922  0275  3F85               	movwi [5]fsr0
  2923  0276  2134               	fcall	_VIN_config
  2924  0277  0008               	return
  2925  0278                     __end_of_config_ASIC:	
  2926                           
  2927                           	psect	text13
  2928  0278                     __ptext13:	
  2929 ;; *************** function _lputs_ISR *****************
  2930 ;; Defined at:
  2931 ;;		line 131 in file "USART1823.c"
  2932 ;; Parameters:    Size  Location     Type
  2933 ;;  data            1    wreg     PTR unsigned char 
  2934 ;;		 -> measure_Impedance@aux(13), read_ADC_channels@aux(7), mess_rec(6), 
  2935 ;;  length          1    0[BANK0 ] unsigned char 
  2936 ;; Auto vars:     Size  Location     Type
  2937 ;;  data            1    3[BANK0 ] PTR unsigned char 
  2938 ;;		 -> measure_Impedance@aux(13), read_ADC_channels@aux(7), mess_rec(6), 
  2939 ;;  i               1    4[BANK0 ] unsigned char 
  2940 ;; Return value:  Size  Location     Type
  2941 ;;                  1    wreg      void 
  2942 ;; Registers used:
  2943 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2944 ;; Tracked objects:
  2945 ;;		On entry : 0/0
  2946 ;;		On exit  : 0/0
  2947 ;;		Unchanged: 0/0
  2948 ;; Data sizes:     COMMON   BANK0   BANK1
  2949 ;;      Params:         0       1       0
  2950 ;;      Locals:         0       2       0
  2951 ;;      Temps:          0       2       0
  2952 ;;      Totals:         0       5       0
  2953 ;;Total ram usage:        5 bytes
  2954 ;; Hardware stack levels used:    1
  2955 ;; Hardware stack levels required when called:    2
  2956 ;; This function calls:
  2957 ;;		Nothing
  2958 ;; This function is called by:
  2959 ;;		_mess_handler
  2960 ;;		_config_ASIC
  2961 ;;		_read_ADC_channels
  2962 ;;		_measure_Impedance
  2963 ;; This function uses a non-reentrant model
  2964 ;;
  2965                           
  2966                           
  2967                           ;psect for function _lputs_ISR
  2968  0278                     _lputs_ISR:	
  2969                           
  2970                           ;incstack = 0
  2971                           ; Regs used in _lputs_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  2972                           ;lputs_ISR@data stored from wreg
  2973  0278  0020               	movlb	0	; select bank0
  2974  0279  00CB               	movwf	lputs_ISR@data
  2975                           
  2976                           ;USART1823.c: 133: unsigned char i;
  2977                           ;USART1823.c: 135: if (USART_tx_flag == 1)
  2978  027A  0372               	decf	_USART_tx_flag,w	;volatile
  2979  027B  1903               	btfsc	3,2
  2980  027C  0008               	return
  2981                           
  2982                           ;USART1823.c: 138: for (i = 0; i < length; i++)
  2983                           
  2984                           ;USART1823.c: 136: return;
  2985  027D  01CC               	clrf	lputs_ISR@i
  2986  027E                     l1870:	
  2987  027E  0848               	movf	lputs_ISR@length,w
  2988  027F  024C               	subwf	lputs_ISR@i,w
  2989  0280  1803               	btfsc	3,0
  2990  0281  2A95               	goto	l1872
  2991                           
  2992                           ;USART1823.c: 139: USART_tx_data[i] = data[i];
  2993  0282  084C               	movf	lputs_ISR@i,w
  2994  0283  074B               	addwf	lputs_ISR@data,w
  2995  0284  00C9               	movwf	??_lputs_ISR
  2996  0285  0849               	movf	??_lputs_ISR,w
  2997  0286  0086               	movwf	6
  2998  0287  0187               	clrf	7
  2999  0288  0801               	movf	1,w
  3000  0289  00CA               	movwf	??_lputs_ISR+1
  3001  028A  084C               	movf	lputs_ISR@i,w
  3002  028B  3E2F               	addlw	(low (_USART_tx_data| 0))& (0+255)
  3003  028C  0086               	movwf	6
  3004  028D  0187               	clrf	7
  3005  028E  084A               	movf	??_lputs_ISR+1,w
  3006  028F  0081               	movwf	1
  3007  0290  3001               	movlw	1
  3008  0291  00C9               	movwf	??_lputs_ISR
  3009  0292  0849               	movf	??_lputs_ISR,w
  3010  0293  07CC               	addwf	lputs_ISR@i,f
  3011  0294  2A7E               	goto	l1870
  3012  0295                     l1872:	
  3013                           
  3014                           ;USART1823.c: 141: USART_tx_index = 0;
  3015  0295  01F3               	clrf	_USART_tx_index	;volatile
  3016                           
  3017                           ;USART1823.c: 142: USART_tx_length = length;
  3018  0296  0848               	movf	lputs_ISR@length,w
  3019  0297  00C9               	movwf	??_lputs_ISR
  3020  0298  0849               	movf	??_lputs_ISR,w
  3021  0299  00F4               	movwf	_USART_tx_length	;volatile
  3022                           
  3023                           ;USART1823.c: 144: USART_tx_flag = 1;
  3024  029A  3001               	movlw	1
  3025  029B  00C9               	movwf	??_lputs_ISR
  3026  029C  0849               	movf	??_lputs_ISR,w
  3027  029D  00F2               	movwf	_USART_tx_flag	;volatile
  3028                           
  3029                           ;USART1823.c: 145: TXIE = 1;
  3030  029E  0021               	movlb	1	; select bank1
  3031  029F  1611               	bsf	17,4	;volatile
  3032  02A0  0008               	return
  3033  02A1                     __end_of_lputs_ISR:	
  3034                           
  3035                           	psect	text14
  3036  0134                     __ptext14:	
  3037 ;; *************** function _VIN_config *****************
  3038 ;; Defined at:
  3039 ;;		line 68 in file "bio3.c"
  3040 ;; Parameters:    Size  Location     Type
  3041 ;;  conf            6    0[BANK0 ] struct .
  3042 ;; Auto vars:     Size  Location     Type
  3043 ;;  out             1    8[BANK0 ] unsigned char 
  3044 ;;  i               1    7[BANK0 ] unsigned char 
  3045 ;;  j               1    0        unsigned char 
  3046 ;; Return value:  Size  Location     Type
  3047 ;;                  1    wreg      void 
  3048 ;; Registers used:
  3049 ;;		wreg, status,2, status,0
  3050 ;; Tracked objects:
  3051 ;;		On entry : 0/0
  3052 ;;		On exit  : 0/0
  3053 ;;		Unchanged: 0/0
  3054 ;; Data sizes:     COMMON   BANK0   BANK1
  3055 ;;      Params:         0       6       0
  3056 ;;      Locals:         0       2       0
  3057 ;;      Temps:          0       1       0
  3058 ;;      Totals:         0       9       0
  3059 ;;Total ram usage:        9 bytes
  3060 ;; Hardware stack levels used:    1
  3061 ;; Hardware stack levels required when called:    2
  3062 ;; This function calls:
  3063 ;;		Nothing
  3064 ;; This function is called by:
  3065 ;;		_config_ASIC
  3066 ;;		_measure_Impedance
  3067 ;; This function uses a non-reentrant model
  3068 ;;
  3069                           
  3070                           
  3071                           ;psect for function _VIN_config
  3072  0134                     _VIN_config:	
  3073                           
  3074                           ;bio3.c: 71: unsigned char i,j,out;
  3075                           ;bio3.c: 73: out &= 0b11110111; PORTC = out;;
  3076                           
  3077                           ;incstack = 0
  3078                           ; Regs used in _VIN_config: [wreg+status,2+status,0]
  3079  0134  30F7               	movlw	247
  3080  0135  0020               	movlb	0	; select bank0
  3081  0136  00CE               	movwf	??_VIN_config
  3082  0137  084E               	movf	??_VIN_config,w
  3083  0138  05D0               	andwf	VIN_config@out,f
  3084  0139  0850               	movf	VIN_config@out,w
  3085  013A  008E               	movwf	14	;volatile
  3086                           
  3087                           ;bio3.c: 74: _delay((unsigned long)((100)*(500000/4000000.0)));
  3088  013B  3004               	movlw	4
  3089  013C                     u1027:	
  3090  013C  0B89               	decfsz	9,f
  3091  013D  293C               	goto	u1027
  3092                           
  3093                           ;bio3.c: 76: RA5 = 0;;
  3094  013E  0020               	movlb	0	; select bank0
  3095  013F  128C               	bcf	12,5	;volatile
  3096                           
  3097                           ;bio3.c: 77: _delay((unsigned long)((100)*(500000/4000000.0)));
  3098  0140  3004               	movlw	4
  3099  0141                     u1037:	
  3100  0141  0B89               	decfsz	9,f
  3101  0142  2941               	goto	u1037
  3102                           
  3103                           ;bio3.c: 79: RA5 = 1;;
  3104  0143  0020               	movlb	0	; select bank0
  3105  0144  168C               	bsf	12,5	;volatile
  3106                           
  3107                           ;bio3.c: 81: for(i = 0; i < 16; i++) {
  3108  0145  01CF               	clrf	VIN_config@i
  3109  0146  3010               	movlw	16
  3110  0147  024F               	subwf	VIN_config@i,w
  3111  0148  1803               	btfsc	3,0
  3112  0149  2972               	goto	l1814
  3113  014A                     l137:	
  3114                           
  3115                           ;bio3.c: 82: if (conf.datas[0] & 0x0001) {
  3116  014A  1C48               	btfss	VIN_config@conf,0
  3117  014B  294E               	goto	l1800
  3118                           
  3119                           ;bio3.c: 83: out |= 0b00000100; PORTC = out;;
  3120  014C  1550               	bsf	VIN_config@out,2
  3121  014D  2952               	goto	l1802
  3122  014E                     l1800:	
  3123                           ;bio3.c: 84: } else {
  3124                           
  3125                           
  3126                           ;bio3.c: 85: out &= 0b11111011; PORTC = out;;
  3127  014E  30FB               	movlw	251
  3128  014F  00CE               	movwf	??_VIN_config
  3129  0150  084E               	movf	??_VIN_config,w
  3130  0151  05D0               	andwf	VIN_config@out,f
  3131  0152                     l1802:	
  3132  0152  0850               	movf	VIN_config@out,w
  3133  0153  008E               	movwf	14	;volatile
  3134                           
  3135                           ;bio3.c: 86: }
  3136                           ;bio3.c: 87: conf.datas[0] >>= 1;
  3137  0154  3001               	movlw	1
  3138  0155                     u755:	
  3139  0155  36C9               	lsrf	VIN_config@conf+1,f
  3140  0156  0CC8               	rrf	VIN_config@conf,f
  3141  0157  0B89               	decfsz	9,f
  3142  0158  2955               	goto	u755
  3143                           
  3144                           ;bio3.c: 89: _delay((unsigned long)((100)*(500000/4000000.0)));
  3145  0159  3004               	movlw	4
  3146  015A                     u1047:	
  3147  015A  0B89               	decfsz	9,f
  3148  015B  295A               	goto	u1047
  3149                           
  3150                           ;bio3.c: 91: out |= 0b00001000; PORTC = out;;
  3151  015C  0020               	movlb	0	; select bank0
  3152  015D  15D0               	bsf	VIN_config@out,3
  3153  015E  0850               	movf	VIN_config@out,w
  3154  015F  008E               	movwf	14	;volatile
  3155                           
  3156                           ;bio3.c: 92: _delay((unsigned long)((100)*(500000/4000000.0)));
  3157  0160  3004               	movlw	4
  3158  0161                     u1057:	
  3159  0161  0B89               	decfsz	9,f
  3160  0162  2961               	goto	u1057
  3161                           
  3162                           ;bio3.c: 93: out &= 0b11110111; PORTC = out;;
  3163  0163  30F7               	movlw	247
  3164  0164  0020               	movlb	0	; select bank0
  3165  0165  00CE               	movwf	??_VIN_config
  3166  0166  084E               	movf	??_VIN_config,w
  3167  0167  05D0               	andwf	VIN_config@out,f
  3168  0168  0850               	movf	VIN_config@out,w
  3169  0169  008E               	movwf	14	;volatile
  3170  016A  3001               	movlw	1
  3171  016B  00CE               	movwf	??_VIN_config
  3172  016C  084E               	movf	??_VIN_config,w
  3173  016D  07CF               	addwf	VIN_config@i,f
  3174  016E  3010               	movlw	16
  3175  016F  024F               	subwf	VIN_config@i,w
  3176  0170  1C03               	skipc
  3177  0171  294A               	goto	l137
  3178  0172                     l1814:	
  3179                           
  3180                           ;bio3.c: 94: }
  3181                           ;bio3.c: 96: for(i = 0; i < 16; i++) {
  3182  0172  01CF               	clrf	VIN_config@i
  3183  0173  3010               	movlw	16
  3184  0174  024F               	subwf	VIN_config@i,w
  3185  0175  1803               	btfsc	3,0
  3186  0176  299F               	goto	l1838
  3187  0177                     l141:	
  3188                           
  3189                           ;bio3.c: 97: if (conf.datas[1] & 0x0001) {
  3190  0177  1C4A               	btfss	VIN_config@conf+2,0
  3191  0178  297B               	goto	l1824
  3192                           
  3193                           ;bio3.c: 98: out |= 0b00000100; PORTC = out;;
  3194  0179  1550               	bsf	VIN_config@out,2
  3195  017A  297F               	goto	l1826
  3196  017B                     l1824:	
  3197                           ;bio3.c: 99: } else {
  3198                           
  3199                           
  3200                           ;bio3.c: 100: out &= 0b11111011; PORTC = out;;
  3201  017B  30FB               	movlw	251
  3202  017C  00CE               	movwf	??_VIN_config
  3203  017D  084E               	movf	??_VIN_config,w
  3204  017E  05D0               	andwf	VIN_config@out,f
  3205  017F                     l1826:	
  3206  017F  0850               	movf	VIN_config@out,w
  3207  0180  008E               	movwf	14	;volatile
  3208                           
  3209                           ;bio3.c: 101: }
  3210                           ;bio3.c: 102: conf.datas[1] >>= 1;
  3211  0181  3001               	movlw	1
  3212  0182                     u795:	
  3213  0182  36CB               	lsrf	VIN_config@conf+3,f
  3214  0183  0CCA               	rrf	VIN_config@conf+2,f
  3215  0184  0B89               	decfsz	9,f
  3216  0185  2982               	goto	u795
  3217                           
  3218                           ;bio3.c: 104: _delay((unsigned long)((100)*(500000/4000000.0)));
  3219  0186  3004               	movlw	4
  3220  0187                     u1067:	
  3221  0187  0B89               	decfsz	9,f
  3222  0188  2987               	goto	u1067
  3223                           
  3224                           ;bio3.c: 106: out |= 0b00001000; PORTC = out;;
  3225  0189  0020               	movlb	0	; select bank0
  3226  018A  15D0               	bsf	VIN_config@out,3
  3227  018B  0850               	movf	VIN_config@out,w
  3228  018C  008E               	movwf	14	;volatile
  3229                           
  3230                           ;bio3.c: 107: _delay((unsigned long)((100)*(500000/4000000.0)));
  3231  018D  3004               	movlw	4
  3232  018E                     u1077:	
  3233  018E  0B89               	decfsz	9,f
  3234  018F  298E               	goto	u1077
  3235                           
  3236                           ;bio3.c: 108: out &= 0b11110111; PORTC = out;;
  3237  0190  30F7               	movlw	247
  3238  0191  0020               	movlb	0	; select bank0
  3239  0192  00CE               	movwf	??_VIN_config
  3240  0193  084E               	movf	??_VIN_config,w
  3241  0194  05D0               	andwf	VIN_config@out,f
  3242  0195  0850               	movf	VIN_config@out,w
  3243  0196  008E               	movwf	14	;volatile
  3244  0197  3001               	movlw	1
  3245  0198  00CE               	movwf	??_VIN_config
  3246  0199  084E               	movf	??_VIN_config,w
  3247  019A  07CF               	addwf	VIN_config@i,f
  3248  019B  3010               	movlw	16
  3249  019C  024F               	subwf	VIN_config@i,w
  3250  019D  1C03               	skipc
  3251  019E  2977               	goto	l141
  3252  019F                     l1838:	
  3253                           
  3254                           ;bio3.c: 109: }
  3255                           ;bio3.c: 111: for(i = 0; i < 1; i++) {
  3256  019F  01CF               	clrf	VIN_config@i
  3257  01A0                     L1:	
  3258  01A0  084F               	movf	VIN_config@i,w
  3259  01A1  1D03               	btfss	3,2
  3260  01A2  0008               	return
  3261                           
  3262                           ;bio3.c: 112: if (conf.datas[2] & 0x0001) {
  3263  01A3  1C4C               	btfss	VIN_config@conf+4,0
  3264  01A4  29A7               	goto	l1848
  3265                           
  3266                           ;bio3.c: 113: out |= 0b00000100; PORTC = out;;
  3267  01A5  1550               	bsf	VIN_config@out,2
  3268  01A6  29AB               	goto	l1850
  3269  01A7                     l1848:	
  3270                           ;bio3.c: 114: } else {
  3271                           
  3272                           
  3273                           ;bio3.c: 115: out &= 0b11111011; PORTC = out;;
  3274  01A7  30FB               	movlw	251
  3275  01A8  00CE               	movwf	??_VIN_config
  3276  01A9  084E               	movf	??_VIN_config,w
  3277  01AA  05D0               	andwf	VIN_config@out,f
  3278  01AB                     l1850:	
  3279  01AB  0850               	movf	VIN_config@out,w
  3280  01AC  008E               	movwf	14	;volatile
  3281                           
  3282                           ;bio3.c: 116: }
  3283                           ;bio3.c: 117: conf.datas[2] >>= 1;
  3284  01AD  3001               	movlw	1
  3285  01AE                     u835:	
  3286  01AE  36CD               	lsrf	VIN_config@conf+5,f
  3287  01AF  0CCC               	rrf	VIN_config@conf+4,f
  3288  01B0  0B89               	decfsz	9,f
  3289  01B1  29AE               	goto	u835
  3290                           
  3291                           ;bio3.c: 119: _delay((unsigned long)((100)*(500000/4000000.0)));
  3292  01B2  3004               	movlw	4
  3293  01B3                     u1087:	
  3294  01B3  0B89               	decfsz	9,f
  3295  01B4  29B3               	goto	u1087
  3296                           
  3297                           ;bio3.c: 121: out |= 0b00001000; PORTC = out;;
  3298  01B5  0020               	movlb	0	; select bank0
  3299  01B6  15D0               	bsf	VIN_config@out,3
  3300  01B7  0850               	movf	VIN_config@out,w
  3301  01B8  008E               	movwf	14	;volatile
  3302                           
  3303                           ;bio3.c: 122: _delay((unsigned long)((100)*(500000/4000000.0)));
  3304  01B9  3004               	movlw	4
  3305  01BA                     u1097:	
  3306  01BA  0B89               	decfsz	9,f
  3307  01BB  29BA               	goto	u1097
  3308                           
  3309                           ;bio3.c: 123: out &= 0b11110111; PORTC = out;;
  3310  01BC  30F7               	movlw	247
  3311  01BD  0020               	movlb	0	; select bank0
  3312  01BE  00CE               	movwf	??_VIN_config
  3313  01BF  084E               	movf	??_VIN_config,w
  3314  01C0  05D0               	andwf	VIN_config@out,f
  3315  01C1  0850               	movf	VIN_config@out,w
  3316  01C2  008E               	movwf	14	;volatile
  3317  01C3  3001               	movlw	1
  3318  01C4  00CE               	movwf	??_VIN_config
  3319  01C5  084E               	movf	??_VIN_config,w
  3320  01C6  07CF               	addwf	VIN_config@i,f
  3321  01C7  29A0               	goto	L1
  3322  01C8                     __end_of_VIN_config:	
  3323                           
  3324                           	psect	text15
  3325  03A0                     __ptext15:	
  3326 ;; *************** function _SYSTEM_Initialize *****************
  3327 ;; Defined at:
  3328 ;;		line 70 in file "mcc_generated_files/mcc.c"
  3329 ;; Parameters:    Size  Location     Type
  3330 ;;		None
  3331 ;; Auto vars:     Size  Location     Type
  3332 ;;		None
  3333 ;; Return value:  Size  Location     Type
  3334 ;;                  1    wreg      void 
  3335 ;; Registers used:
  3336 ;;		wreg, status,2, status,0, pclath, cstack
  3337 ;; Tracked objects:
  3338 ;;		On entry : 0/0
  3339 ;;		On exit  : 0/0
  3340 ;;		Unchanged: 0/0
  3341 ;; Data sizes:     COMMON   BANK0   BANK1
  3342 ;;      Params:         0       0       0
  3343 ;;      Locals:         0       0       0
  3344 ;;      Temps:          0       0       0
  3345 ;;      Totals:         0       0       0
  3346 ;;Total ram usage:        0 bytes
  3347 ;; Hardware stack levels used:    1
  3348 ;; Hardware stack levels required when called:    3
  3349 ;; This function calls:
  3350 ;;		_OSCILLATOR_Initialize
  3351 ;;		_PIN_MANAGER_Initialize
  3352 ;; This function is called by:
  3353 ;;		_main
  3354 ;; This function uses a non-reentrant model
  3355 ;;
  3356                           
  3357                           
  3358                           ;psect for function _SYSTEM_Initialize
  3359  03A0                     _SYSTEM_Initialize:	
  3360                           
  3361                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  3362                           
  3363                           ;incstack = 0
  3364                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3365  03A0  2329               	fcall	_PIN_MANAGER_Initialize
  3366                           
  3367                           ;mcc.c: 74: OSCILLATOR_Initialize();
  3368  03A1  2396               	fcall	_OSCILLATOR_Initialize
  3369  03A2  0008               	return
  3370  03A3                     __end_of_SYSTEM_Initialize:	
  3371                           
  3372                           	psect	text16
  3373  0329                     __ptext16:	
  3374 ;; *************** function _PIN_MANAGER_Initialize *****************
  3375 ;; Defined at:
  3376 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  3377 ;; Parameters:    Size  Location     Type
  3378 ;;		None
  3379 ;; Auto vars:     Size  Location     Type
  3380 ;;		None
  3381 ;; Return value:  Size  Location     Type
  3382 ;;                  1    wreg      void 
  3383 ;; Registers used:
  3384 ;;		wreg, status,2
  3385 ;; Tracked objects:
  3386 ;;		On entry : 0/0
  3387 ;;		On exit  : 0/0
  3388 ;;		Unchanged: 0/0
  3389 ;; Data sizes:     COMMON   BANK0   BANK1
  3390 ;;      Params:         0       0       0
  3391 ;;      Locals:         0       0       0
  3392 ;;      Temps:          0       0       0
  3393 ;;      Totals:         0       0       0
  3394 ;;Total ram usage:        0 bytes
  3395 ;; Hardware stack levels used:    1
  3396 ;; Hardware stack levels required when called:    2
  3397 ;; This function calls:
  3398 ;;		Nothing
  3399 ;; This function is called by:
  3400 ;;		_SYSTEM_Initialize
  3401 ;; This function uses a non-reentrant model
  3402 ;;
  3403                           
  3404                           
  3405                           ;psect for function _PIN_MANAGER_Initialize
  3406  0329                     _PIN_MANAGER_Initialize:	
  3407                           
  3408                           ;pin_manager.c: 51: LATA = 0x0;
  3409                           
  3410                           ;incstack = 0
  3411                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3412  0329  0022               	movlb	2	; select bank2
  3413  032A  018C               	clrf	12	;volatile
  3414                           
  3415                           ;pin_manager.c: 52: LATC = 0x0;
  3416  032B  018E               	clrf	14	;volatile
  3417                           
  3418                           ;pin_manager.c: 55: ANSELA = 0b00000100;
  3419  032C  3004               	movlw	4
  3420  032D  0023               	movlb	3	; select bank3
  3421  032E  008C               	movwf	12	;volatile
  3422                           
  3423                           ;pin_manager.c: 56: ANSELC = 0b00000011;
  3424  032F  3003               	movlw	3
  3425  0330  008E               	movwf	14	;volatile
  3426                           
  3427                           ;pin_manager.c: 59: WPUA = 0x3B;
  3428  0331  303B               	movlw	59
  3429  0332  0024               	movlb	4	; select bank4
  3430  0333  008C               	movwf	12	;volatile
  3431                           
  3432                           ;pin_manager.c: 60: WPUC = 0x3C;
  3433  0334  303C               	movlw	60
  3434  0335  008E               	movwf	14	;volatile
  3435                           
  3436                           ;pin_manager.c: 62: RXDTSEL = 0;
  3437  0336  0022               	movlb	2	; select bank2
  3438  0337  139D               	bcf	29,7	;volatile
  3439                           
  3440                           ;pin_manager.c: 63: TXCKSEL = 0;
  3441  0338  111D               	bcf	29,2	;volatile
  3442                           
  3443                           ;pin_manager.c: 66: TRISC = 0b01100011;
  3444  0339  3063               	movlw	99
  3445  033A  0021               	movlb	1	; select bank1
  3446  033B  008E               	movwf	14	;volatile
  3447                           
  3448                           ;pin_manager.c: 67: TRISA = 0b01011111;
  3449  033C  305F               	movlw	95
  3450  033D  008C               	movwf	12	;volatile
  3451                           
  3452                           ;pin_manager.c: 69: OPTION_REGbits.nWPUEN = 0x0;
  3453  033E  1395               	bcf	21,7	;volatile
  3454                           
  3455                           ;pin_manager.c: 70: APFCON = 0x00;
  3456  033F  0022               	movlb	2	; select bank2
  3457  0340  019D               	clrf	29	;volatile
  3458  0341  0008               	return
  3459  0342                     __end_of_PIN_MANAGER_Initialize:	
  3460                           
  3461                           	psect	text17
  3462  0396                     __ptext17:	
  3463 ;; *************** function _OSCILLATOR_Initialize *****************
  3464 ;; Defined at:
  3465 ;;		line 78 in file "mcc_generated_files/mcc.c"
  3466 ;; Parameters:    Size  Location     Type
  3467 ;;		None
  3468 ;; Auto vars:     Size  Location     Type
  3469 ;;		None
  3470 ;; Return value:  Size  Location     Type
  3471 ;;                  1    wreg      void 
  3472 ;; Registers used:
  3473 ;;		wreg, status,2
  3474 ;; Tracked objects:
  3475 ;;		On entry : 0/0
  3476 ;;		On exit  : 0/0
  3477 ;;		Unchanged: 0/0
  3478 ;; Data sizes:     COMMON   BANK0   BANK1
  3479 ;;      Params:         0       0       0
  3480 ;;      Locals:         0       0       0
  3481 ;;      Temps:          0       0       0
  3482 ;;      Totals:         0       0       0
  3483 ;;Total ram usage:        0 bytes
  3484 ;; Hardware stack levels used:    1
  3485 ;; Hardware stack levels required when called:    2
  3486 ;; This function calls:
  3487 ;;		Nothing
  3488 ;; This function is called by:
  3489 ;;		_SYSTEM_Initialize
  3490 ;; This function uses a non-reentrant model
  3491 ;;
  3492                           
  3493                           
  3494                           ;psect for function _OSCILLATOR_Initialize
  3495  0396                     _OSCILLATOR_Initialize:	
  3496                           
  3497                           ;mcc.c: 81: OSCCON = 0x3A;
  3498                           
  3499                           ;incstack = 0
  3500                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3501  0396  303A               	movlw	58
  3502  0397  0021               	movlb	1	; select bank1
  3503  0398  0099               	movwf	25	;volatile
  3504                           
  3505                           ;mcc.c: 83: OSCSTAT = 0x00;
  3506  0399  019A               	clrf	26	;volatile
  3507                           
  3508                           ;mcc.c: 85: OSCTUNE = 0x00;
  3509  039A  0198               	clrf	24	;volatile
  3510  039B  0008               	return
  3511  039C                     __end_of_OSCILLATOR_Initialize:	
  3512                           
  3513                           	psect	intentry
  3514  0004                     __pintentry:	
  3515 ;; *************** function _isr *****************
  3516 ;; Defined at:
  3517 ;;		line 69 in file "main.c"
  3518 ;; Parameters:    Size  Location     Type
  3519 ;;		None
  3520 ;; Auto vars:     Size  Location     Type
  3521 ;;		None
  3522 ;; Return value:  Size  Location     Type
  3523 ;;                  1    wreg      void 
  3524 ;; Registers used:
  3525 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3526 ;; Tracked objects:
  3527 ;;		On entry : 0/0
  3528 ;;		On exit  : 0/0
  3529 ;;		Unchanged: 0/0
  3530 ;; Data sizes:     COMMON   BANK0   BANK1
  3531 ;;      Params:         0       0       0
  3532 ;;      Locals:         0       0       0
  3533 ;;      Temps:          2       0       0
  3534 ;;      Totals:         2       0       0
  3535 ;;Total ram usage:        2 bytes
  3536 ;; Hardware stack levels used:    1
  3537 ;; Hardware stack levels required when called:    1
  3538 ;; This function calls:
  3539 ;;		_start_TMR0_ISR
  3540 ;;		_stop_TMR0_ISR
  3541 ;;		i1_start_RX_USART_ISR
  3542 ;; This function is called by:
  3543 ;;		Interrupt level 1
  3544 ;; This function uses a non-reentrant model
  3545 ;;
  3546                           
  3547  0004                     _isr:	
  3548                           
  3549                           ;incstack = 0
  3550  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  3551                           
  3552                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3553  0005  3180               	pagesel	$
  3554  0006  0020               	movlb	0	; select bank0
  3555  0007  087F               	movf	127,w
  3556  0008  00F9               	movwf	??_isr+1
  3557                           
  3558                           ;main.c: 73: if (TMR0IF && TMR0IE) {
  3559  0009  190B               	btfsc	11,2	;volatile
  3560  000A  1E8B               	btfss	11,5	;volatile
  3561  000B  2815               	goto	i1l116
  3562                           
  3563                           ;main.c: 75: TMR0IF = 0;
  3564  000C  110B               	bcf	11,2	;volatile
  3565                           
  3566                           ;main.c: 76: TMR0 = TIMER0_timeout;
  3567  000D  0870               	movf	_TIMER0_timeout,w	;volatile
  3568  000E  0095               	movwf	21	;volatile
  3569                           
  3570                           ;main.c: 79: TIMER0_flag = 1;
  3571  000F  3001               	movlw	1
  3572  0010  00F8               	movwf	??_isr
  3573  0011  0878               	movf	??_isr,w
  3574  0012  00BE               	movwf	_TIMER0_flag	;volatile
  3575                           
  3576                           ;main.c: 84: stop_TMR0_ISR();
  3577  0013  23A3               	fcall	_stop_TMR0_ISR
  3578                           
  3579                           ;main.c: 86: return;
  3580  0014  284E               	goto	i1l117
  3581  0015                     i1l116:	
  3582                           
  3583                           ;main.c: 87: }
  3584                           ;main.c: 91: if (RCIF) {
  3585  0015  1E91               	btfss	17,5	;volatile
  3586  0016  282E               	goto	i1l118
  3587                           
  3588                           ;main.c: 92: stop_TMR0_ISR();
  3589  0017  23A3               	fcall	_stop_TMR0_ISR
  3590                           
  3591                           ;main.c: 95: if (USART_rx_index >= 15) {
  3592  0018  300F               	movlw	15
  3593  0019  0020               	movlb	0	; select bank0
  3594  001A  0240               	subwf	_USART_rx_index,w	;volatile
  3595  001B  1803               	btfsc	3,0
  3596                           
  3597                           ;main.c: 96: USART_rx_index = 0;
  3598  001C  01C0               	clrf	_USART_rx_index	;volatile
  3599                           
  3600                           ;main.c: 97: }
  3601                           ;main.c: 99: USART_rx_data[USART_rx_index++] = RCREG;
  3602  001D  0023               	movlb	3	; select bank3
  3603  001E  0819               	movf	25,w	;volatile
  3604  001F  00F8               	movwf	??_isr
  3605  0020  0020               	movlb	0	; select bank0
  3606  0021  0840               	movf	_USART_rx_index,w
  3607  0022  3E20               	addlw	(low (_USART_rx_data| 0))& (0+255)
  3608  0023  0086               	movwf	6
  3609  0024  0187               	clrf	7
  3610  0025  0878               	movf	??_isr,w
  3611  0026  0081               	movwf	1
  3612  0027  3001               	movlw	1
  3613  0028  00F8               	movwf	??_isr
  3614  0029  0878               	movf	??_isr,w
  3615  002A  07C0               	addwf	_USART_rx_index,f	;volatile
  3616                           
  3617                           ;main.c: 101: start_TMR0_ISR(98);
  3618  002B  3062               	movlw	98
  3619  002C  2364               	fcall	_start_TMR0_ISR
  3620                           
  3621                           ;main.c: 103: return;
  3622  002D  284E               	goto	i1l117
  3623  002E                     i1l118:	
  3624                           
  3625                           ;main.c: 104: }
  3626                           ;main.c: 108: if (TXIF && TXIE) {
  3627  002E  1E11               	btfss	17,4	;volatile
  3628  002F  284E               	goto	i1l117
  3629  0030  0021               	movlb	1	; select bank1
  3630  0031  1E11               	btfss	17,4	;volatile
  3631  0032  284E               	goto	i1l117
  3632                           
  3633                           ;main.c: 110: TXREG = USART_tx_data[USART_tx_index++];
  3634  0033  0873               	movf	_USART_tx_index,w
  3635  0034  3E2F               	addlw	(low (_USART_tx_data| 0))& (0+255)
  3636  0035  0086               	movwf	6
  3637  0036  0187               	clrf	7
  3638  0037  0801               	movf	1,w
  3639  0038  0023               	movlb	3	; select bank3
  3640  0039  009A               	movwf	26	;volatile
  3641  003A  3001               	movlw	1
  3642  003B  00F8               	movwf	??_isr
  3643  003C  0878               	movf	??_isr,w
  3644  003D  07F3               	addwf	_USART_tx_index,f	;volatile
  3645                           
  3646                           ;main.c: 112: if (USART_tx_index >= USART_tx_length) {
  3647  003E  0874               	movf	_USART_tx_length,w	;volatile
  3648  003F  0273               	subwf	_USART_tx_index,w	;volatile
  3649  0040  1C03               	skipc
  3650  0041  284E               	goto	i1l117
  3651                           
  3652                           ;main.c: 113: TXIE = 0;
  3653  0042  0021               	movlb	1	; select bank1
  3654  0043  1211               	bcf	17,4	;volatile
  3655                           
  3656                           ;main.c: 114: USART_tx_flag = 0;
  3657  0044  01F2               	clrf	_USART_tx_flag	;volatile
  3658                           
  3659                           ;main.c: 117: _delay((unsigned long)((25)*(500000/4000.0)));
  3660  0045  3005               	movlw	5
  3661  0046  00F8               	movwf	??_isr
  3662  0047  300D               	movlw	13
  3663  0048                     u110_27:	
  3664  0048  0B89               	decfsz	9,f
  3665  0049  2848               	goto	u110_27
  3666  004A  0BF8               	decfsz	??_isr,f
  3667  004B  2848               	goto	u110_27
  3668  004C  3200               	nop2
  3669                           
  3670                           ;main.c: 118: start_RX_USART_ISR();
  3671  004D  2353               	fcall	i1_start_RX_USART_ISR
  3672  004E                     i1l117:	
  3673                           ;main.c: 119: }
  3674                           ;main.c: 120: return;
  3675                           
  3676  004E  0879               	movf	??_isr+1,w
  3677  004F  0020               	movlb	0	; select bank0
  3678  0050  00FF               	movwf	127
  3679  0051  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  3680  0052  0009               	retfie
  3681  0053                     __end_of_isr:	
  3682                           
  3683                           	psect	text19
  3684  0353                     __ptext19:	
  3685 ;; *************** function i1_start_RX_USART_ISR *****************
  3686 ;; Defined at:
  3687 ;;		line 82 in file "USART1823.c"
  3688 ;; Parameters:    Size  Location     Type
  3689 ;;		None
  3690 ;; Auto vars:     Size  Location     Type
  3691 ;;		None
  3692 ;; Return value:  Size  Location     Type
  3693 ;;                  1    wreg      void 
  3694 ;; Registers used:
  3695 ;;		wreg, status,2
  3696 ;; Tracked objects:
  3697 ;;		On entry : 0/0
  3698 ;;		On exit  : 0/0
  3699 ;;		Unchanged: 0/0
  3700 ;; Data sizes:     COMMON   BANK0   BANK1
  3701 ;;      Params:         0       0       0
  3702 ;;      Locals:         0       0       0
  3703 ;;      Temps:          0       0       0
  3704 ;;      Totals:         0       0       0
  3705 ;;Total ram usage:        0 bytes
  3706 ;; Hardware stack levels used:    1
  3707 ;; This function calls:
  3708 ;;		Nothing
  3709 ;; This function is called by:
  3710 ;;		_isr
  3711 ;; This function uses a non-reentrant model
  3712 ;;
  3713                           
  3714                           
  3715                           ;psect for function i1_start_RX_USART_ISR
  3716  0353                     i1_start_RX_USART_ISR:	
  3717                           
  3718                           ;USART1823.c: 85: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  3719                           
  3720                           ;incstack = 0
  3721                           ; Regs used in i1_start_RX_USART_ISR: [wreg+status,2]
  3722  0353  0023               	movlb	3	; select bank3
  3723  0354  151E               	bsf	30,2	;volatile
  3724  0355  159F               	bsf	31,3	;volatile
  3725  0356  019C               	clrf	28	;volatile
  3726  0357  300C               	movlw	12
  3727  0358  009B               	movwf	27	;volatile
  3728                           
  3729                           ;USART1823.c: 87: SYNC = 0;
  3730  0359  121E               	bcf	30,4	;volatile
  3731                           
  3732                           ;USART1823.c: 88: SPEN = 1;
  3733  035A  179D               	bsf	29,7	;volatile
  3734                           
  3735                           ;USART1823.c: 89: CREN = 1;
  3736  035B  161D               	bsf	29,4	;volatile
  3737                           
  3738                           ;USART1823.c: 91: USART_rx_flag = 0;
  3739  035C  0020               	movlb	0	; select bank0
  3740  035D  01BF               	clrf	_USART_rx_flag	;volatile
  3741                           
  3742                           ;USART1823.c: 92: USART_rx_index = 0;
  3743  035E  01C0               	clrf	_USART_rx_index	;volatile
  3744                           
  3745                           ;USART1823.c: 94: RCIE = 1;
  3746  035F  0021               	movlb	1	; select bank1
  3747  0360  1691               	bsf	17,5	;volatile
  3748                           
  3749                           ;USART1823.c: 95: PEIE = 1;
  3750  0361  170B               	bsf	11,6	;volatile
  3751                           
  3752                           ;USART1823.c: 96: GIE = 1;
  3753  0362  178B               	bsf	11,7	;volatile
  3754  0363  0008               	return
  3755  0364                     __end_ofi1_start_RX_USART_ISR:	
  3756                           
  3757                           	psect	text20
  3758  03A3                     __ptext20:	
  3759 ;; *************** function _stop_TMR0_ISR *****************
  3760 ;; Defined at:
  3761 ;;		line 44 in file "TMR0.c"
  3762 ;; Parameters:    Size  Location     Type
  3763 ;;		None
  3764 ;; Auto vars:     Size  Location     Type
  3765 ;;		None
  3766 ;; Return value:  Size  Location     Type
  3767 ;;                  1    wreg      void 
  3768 ;; Registers used:
  3769 ;;		None
  3770 ;; Tracked objects:
  3771 ;;		On entry : 0/0
  3772 ;;		On exit  : 0/0
  3773 ;;		Unchanged: 0/0
  3774 ;; Data sizes:     COMMON   BANK0   BANK1
  3775 ;;      Params:         0       0       0
  3776 ;;      Locals:         0       0       0
  3777 ;;      Temps:          0       0       0
  3778 ;;      Totals:         0       0       0
  3779 ;;Total ram usage:        0 bytes
  3780 ;; Hardware stack levels used:    1
  3781 ;; This function calls:
  3782 ;;		Nothing
  3783 ;; This function is called by:
  3784 ;;		_isr
  3785 ;; This function uses a non-reentrant model
  3786 ;;
  3787                           
  3788                           
  3789                           ;psect for function _stop_TMR0_ISR
  3790  03A3                     _stop_TMR0_ISR:	
  3791                           
  3792                           ;TMR0.c: 47: TMR0IE = 0;
  3793                           
  3794                           ;incstack = 0
  3795                           ; Regs used in _stop_TMR0_ISR: []
  3796  03A3  128B               	bcf	11,5	;volatile
  3797                           
  3798                           ;TMR0.c: 48: TMR0IF = 0;
  3799  03A4  110B               	bcf	11,2	;volatile
  3800  03A5  0008               	return
  3801  03A6                     __end_of_stop_TMR0_ISR:	
  3802                           
  3803                           	psect	text21
  3804  0364                     __ptext21:	
  3805 ;; *************** function _start_TMR0_ISR *****************
  3806 ;; Defined at:
  3807 ;;		line 30 in file "TMR0.c"
  3808 ;; Parameters:    Size  Location     Type
  3809 ;;  val             1    wreg     unsigned char 
  3810 ;; Auto vars:     Size  Location     Type
  3811 ;;  val             1    2[COMMON] unsigned char 
  3812 ;; Return value:  Size  Location     Type
  3813 ;;                  1    wreg      void 
  3814 ;; Registers used:
  3815 ;;		wreg, status,2
  3816 ;; Tracked objects:
  3817 ;;		On entry : 0/0
  3818 ;;		On exit  : 0/0
  3819 ;;		Unchanged: 0/0
  3820 ;; Data sizes:     COMMON   BANK0   BANK1
  3821 ;;      Params:         0       0       0
  3822 ;;      Locals:         1       0       0
  3823 ;;      Temps:          2       0       0
  3824 ;;      Totals:         3       0       0
  3825 ;;Total ram usage:        3 bytes
  3826 ;; Hardware stack levels used:    1
  3827 ;; This function calls:
  3828 ;;		Nothing
  3829 ;; This function is called by:
  3830 ;;		_isr
  3831 ;; This function uses a non-reentrant model
  3832 ;;
  3833                           
  3834                           
  3835                           ;psect for function _start_TMR0_ISR
  3836  0364                     _start_TMR0_ISR:	
  3837                           
  3838                           ;incstack = 0
  3839                           ; Regs used in _start_TMR0_ISR: [wreg+status,2]
  3840                           ;start_TMR0_ISR@val stored from wreg
  3841  0364  00F7               	movwf	start_TMR0_ISR@val
  3842                           
  3843                           ;TMR0.c: 32: TIMER0_timeout = val;
  3844  0365  0877               	movf	start_TMR0_ISR@val,w
  3845  0366  00F5               	movwf	??_start_TMR0_ISR
  3846  0367  01F6               	clrf	??_start_TMR0_ISR+1
  3847  0368  0875               	movf	??_start_TMR0_ISR,w
  3848  0369  00F0               	movwf	_TIMER0_timeout	;volatile
  3849  036A  0876               	movf	??_start_TMR0_ISR+1,w
  3850  036B  00F1               	movwf	_TIMER0_timeout+1	;volatile
  3851                           
  3852                           ;TMR0.c: 33: TIMER0_flag = 0;
  3853  036C  0020               	movlb	0	; select bank0
  3854  036D  01BE               	clrf	_TIMER0_flag	;volatile
  3855                           
  3856                           ;TMR0.c: 36: TMR0 = TIMER0_timeout;
  3857  036E  0870               	movf	_TIMER0_timeout,w	;volatile
  3858  036F  0095               	movwf	21	;volatile
  3859                           
  3860                           ;TMR0.c: 39: TMR0IF = 0;
  3861  0370  110B               	bcf	11,2	;volatile
  3862                           
  3863                           ;TMR0.c: 40: TMR0IE = 1;
  3864  0371  168B               	bsf	11,5	;volatile
  3865                           
  3866                           ;TMR0.c: 41: GIE = 1;
  3867  0372  178B               	bsf	11,7	;volatile
  3868  0373  0008               	return
  3869  0374                     __end_of_start_TMR0_ISR:	
  3870  007E                     btemp	set	126	;btemp
  3871  007E                     int$flags	set	126
  3872  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     36      76
    BANK1            32      0       0

Pointer List with Targets:

    lputs_ISR@data	PTR unsigned char  size(1) Largest target is 13
		 -> measure_Impedance@aux(BANK0[13]), read_ADC_channels@aux(BANK0[7]), mess_rec(BANK0[6]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_start_TMR0_ISR

Critical Paths under _main in BANK0

    _main->_mess_handler
    _mess_handler->_measure_Impedance
    _read_ADC_channels->_ADC_2
    _read_ADC_channels->_ADC_4
    _read_ADC_channels->_ADC_5
    _measure_Impedance->_VIN_config
    _config_ASIC->_VIN_config

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    6912
                                             34 BANK0      2     2      0
                  _SYSTEM_Initialize
                       _mess_handler
                          _setup_ADC
                         _setup_TMR0
                          _start_RCM
                 _start_RX_USART_ISR
                 _start_TX_USART_ISR
 ---------------------------------------------------------------------------------
 (1) _start_TX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RCM                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_TMR0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_ADC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _mess_handler                                         1     1      0    6813
                                             33 BANK0      1     1      0
                        _config_ASIC
                          _lputs_ISR
                  _measure_Impedance
                  _read_ADC_channels
 ---------------------------------------------------------------------------------
 (2) _read_ADC_channels                                   14    14      0    1206
                                              6 BANK0     14    14      0
                              _ADC_2
                              _ADC_4
                              _ADC_5
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (3) _ADC_5                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _measure_Impedance                                   26    26      0    3031
                                              9 BANK0     24    24      0
                              _ADC_2
                              _ADC_4
                         _VIN_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (3) _ADC_4                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _ADC_2                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _config_ASIC                                          7     7      0    1944
                                              9 BANK0      7     7      0
                         _VIN_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (3) _lputs_ISR                                            5     4      1     632
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (3) _VIN_config                                          10     4      6    1130
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  2     2      0      22
                                              3 COMMON     2     2      0
                     _start_TMR0_ISR
                      _stop_TMR0_ISR
               i1_start_RX_USART_ISR
 ---------------------------------------------------------------------------------
 (5) i1_start_RX_USART_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _stop_TMR0_ISR                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _start_TMR0_ISR                                       3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _mess_handler
     _config_ASIC
       _VIN_config
       _lputs_ISR
     _lputs_ISR
     _measure_Impedance
       _ADC_2
       _ADC_4
       _VIN_config
       _lputs_ISR
     _read_ADC_channels
       _ADC_2
       _ADC_4
       _ADC_5
       _lputs_ISR
   _setup_ADC
   _setup_TMR0
   _start_RCM
   _start_RX_USART_ISR
   _start_TX_USART_ISR

 _isr (ROOT)
   _start_TMR0_ISR
   _stop_TMR0_ISR
   i1_start_RX_USART_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      56       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     24      4C       6       95.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      56       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Feb 22 15:57:13 2017

                    __CFG_CP$OFF 0000                    _USART_rx_data 0020                    _USART_rx_flag 003F  
                  _USART_tx_data 002F                    _USART_tx_flag 0072                       _VIN_config 0134  
                            l141 0177                              l320 0328                              l137 014A  
                            l353 02CA                              l347 02ED                              l359 02A7  
                            _GIE 005F                              _RA5 0065                              _PS0 04A8  
                            _PS1 04A9                              _PS2 04AA                     __CFG_CPD$OFF 0000  
                            _PSA 04AB                              u905 02D5                              u835 01AE  
                            u755 0155                              u925 02B2                              u795 0182  
                            u885 02F8                              u977 01D4                              u987 01DF  
                            u997 0095                              _isr 0004                     __CFG_BORV$HI 0000  
                            wreg 0009                     __CFG_IESO$ON 0000                   _USART_rx_index 0040  
                   __CFG_LVP$OFF 0000                   _USART_tx_index 0073                             l2104 01EF  
                           l2116 01F7                             l2070 0313                             l2118 020C  
                           l2072 0315                             l2074 0317                             l2068 030B  
                           l2078 0319                             l1800 014E                             l2096 01E4  
                           l1802 0152                             l1814 0172                             l1824 017B  
                           l1850 01AB                             l1826 017F                             l1838 019F  
                           l1870 027E                             l1848 01A7                             l1872 0295  
                           ?_isr 0075                             _ADGO 04E9                             _BRGH 0CF2  
                           _CREN 0CEC                             u1007 00D1                             u1017 010C  
                           u1027 013C                             u1037 0141                             u1047 015A  
                           u1057 0161                             u1067 0187                             u1077 018E  
                           _LATA 010C                             u1087 01B3                             _LATC 010E  
                           u1097 01BA                             _PEIE 005E                             _RCIE 048D  
                           _RCIF 008D                             _TMR0 0015                             _SPEN 0CEF  
                           _TXIE 048C                             _TXEN 0CF5                             _TXIF 008C  
                           _SYNC 0CF4                             _WPUA 020C                             _WPUC 020E  
         __size_of_stop_TMR0_ISR 0003                _read_ADC_channels 020E                     __CFG_WRT$OFF 0000  
                           _main 01C8                             fsr0h 0005                             fsr1h 0007  
                           indf0 0000                             fsr0l 0004                             indf1 0001  
                           fsr1l 0006                             btemp 007E               ?_read_ADC_channels 0075  
                           start 0053                    __CFG_MCLRE$ON 0000              ??_read_ADC_channels 004E  
                          ??_isr 0078   __size_of_OSCILLATOR_Initialize 0006                  _USART_tx_length 0074  
  __end_of_OSCILLATOR_Initialize 039C                            ?_main 0075                            _ADC_2 02E7  
                          _ADC_4 02C4                            _ADC_5 02A1                            _BRG16 0CFB  
                  __CFG_WDTE$OFF 0000                            i1l116 0015                            i1l117 004E  
                          i1l118 002E                            _RCREG 0199                            _PORTC 000E  
                          _TRISA 008C                   _start_TMR0_ISR 0364                            _TRISC 008E  
                          _TXREG 019A                   __CFG_FCMEN$OFF 0000        __end_of_read_ADC_channels 0247  
                          main@i 006B    __size_ofi1_start_RX_USART_ISR 0011                   __CFG_BOREN$OFF 0000  
                          status 0003                            wtemp0 007E                  __initialization 0054  
                   __end_of_main 020E                    _stop_TMR0_ISR 03A3           __end_of_start_TMR0_ISR 0374  
                         ??_main 006A                           ?_ADC_2 0048                           ?_ADC_4 0048  
                         ?_ADC_5 0048                      ?_VIN_config 0048                   _TIMER0_timeout 0070  
                 __CFG_PLLEN$OFF 0000                           _ADCON0 009D                           _ADCON1 009E  
                         _ADRESH 009C                           _ADRESL 009B                           _APFCON 011D  
                         _ANSELA 018C                           _ANSELC 018E                           u110_27 0048  
                 VIN_config@conf 0048                           _OSCCON 0099                           _TMR0IE 005D  
                         _TMR0IF 005A                           _TMR0CS 04AD                           _SPBRGH 019C  
                         _SPBRGL 019B                   __CFG_PWRTE$OFF 0000             __size_of_config_ASIC 0031  
                config_ASIC@asic 0052                   __CFG_STVREN$ON 0000                   ?_stop_TMR0_ISR 0075  
                ?_start_TMR0_ISR 0075             measure_Impedance@aux 0052      __size_of_start_RX_USART_ISR 0011  
     __size_of_read_ADC_channels 0039                    ?_mess_handler 0075                _SYSTEM_Initialize 03A0  
        __end_of__initialization 005F                    __end_of_ADC_2 030A                    __end_of_ADC_4 02E7  
             ?_SYSTEM_Initialize 0075                    __end_of_ADC_5 02C4              __size_of_VIN_config 0094  
                 __pcstackCOMMON 0075              ??_SYSTEM_Initialize 0048                          ??_ADC_2 004A  
                        ??_ADC_4 004A                          ??_ADC_5 004A                   _OPTION_REGbits 0095  
    __size_of_start_TX_USART_ISR 000F                   ??_mess_handler 0069        __end_of_SYSTEM_Initialize 03A3  
                     __pbssBANK0 0020                       __pmaintext 01C8                  ??_stop_TMR0_ISR 0075  
           read_ADC_channels@aux 004F                       __pintentry 0004                          _CLKRCON 039A  
             __size_of_lputs_ISR 0029                  lputs_ISR@length 0048               __size_of_setup_ADC 0006  
                        _OSCSTAT 009A                          _OSCTUNE 0098               __size_of_start_RCM 0004  
                        _RXDTSEL 08EF                          _TXCKSEL 08EA     __end_ofi1_start_RX_USART_ISR 0364  
                   ??_VIN_config 004E                          __ptext1 0374                          __ptext2 0342  
                        __ptext3 039C                          __ptext4 0383                          __ptext5 0390  
                        __ptext6 030A                          __ptext7 020E                          __ptext8 02A1  
                        __ptext9 0062            _OSCILLATOR_Initialize 0396                     __size_of_isr 004F  
       ??_PIN_MANAGER_Initialize 0048       __size_of_SYSTEM_Initialize 0003                          clrloop0 038B  
                  _mess_rec_size 0041             end_of_initialization 005F            measure_Impedance@asic 0063  
              __end_of_lputs_ISR 02A1                __end_of_setup_ADC 0396               __end_of_VIN_config 01C8  
               ??_start_TMR0_ISR 0075                __end_of_start_RCM 03A0             __end_of_mess_handler 0329  
                     _setup_TMR0 0383                 __CFG_FOSC$INTOSC 0000                    ??_config_ASIC 0051  
              _measure_Impedance 0062               ?_measure_Impedance 0075                   ADC_2@ADC_value 004C  
     __end_of_start_RX_USART_ISR 0353           ?_OSCILLATOR_Initialize 0075              start_initialization 0054  
            ??_measure_Impedance 0051  __size_of_PIN_MANAGER_Initialize 0019                      __end_of_isr 0053  
           i1_start_RX_USART_ISR 0353                   ADC_4@ADC_value 004C                    VIN_config@out 0050  
      __end_of_measure_Impedance 0134                   ADC_5@ADC_value 004C              __end_of_config_ASIC 0278  
                    ?_setup_TMR0 0075       __end_of_start_TX_USART_ISR 0383                      __pbssCOMMON 0070  
                      ___latbits 0000                    __pcstackBANK0 0048            ?i1_start_RX_USART_ISR 0075  
                    VIN_config@i 004F            __size_of_mess_handler 001F           _PIN_MANAGER_Initialize 0329  
          __end_of_stop_TMR0_ISR 03A6                   __size_of_ADC_2 0023                   __size_of_ADC_4 0023  
                 __size_of_ADC_5 0023          read_ADC_channels@value1 0056          read_ADC_channels@value2 0058  
        read_ADC_channels@value3 005A                     _mess_handler 030A              __size_of_setup_TMR0 0007  
                    _config_ASIC 0247                        clear_ram0 038A                       lputs_ISR@i 004C  
     __size_of_measure_Impedance 00D2                        _lputs_ISR 0278                        _setup_ADC 0390  
                      _start_RCM 039C           ??i1_start_RX_USART_ISR 0075          measure_Impedance@value1 005F  
        measure_Impedance@value2 0061                       ?_lputs_ISR 0048                       ?_setup_ADC 0075  
        ??_OSCILLATOR_Initialize 0048                start_TMR0_ISR@val 0077                       ?_start_RCM 0075  
                       __ptext10 02C4                         __ptext11 02E7                         __ptext20 03A3  
                       __ptext12 0247                         __ptext21 0364                         __ptext13 0278  
                       __ptext14 0134                         __ptext15 03A0                         __ptext16 0329  
                       __ptext17 0396                         __ptext19 0353                    lputs_ISR@data 004B  
             _start_RX_USART_ISR 0342                    __size_of_main 0046                         _mess_rec 0042  
            ?_start_RX_USART_ISR 0075                         int$flags 007E                     ??_setup_TMR0 0048  
                    _TIMER0_flag 003E             ??_start_RX_USART_ISR 0048          __size_of_start_TMR0_ISR 0010  
                       intlevel1 0000               _start_TX_USART_ISR 0374          ?_PIN_MANAGER_Initialize 0075  
              __CFG_CLKOUTEN$OFF 0000               __end_of_setup_TMR0 038A              ?_start_TX_USART_ISR 0075  
                    ??_lputs_ISR 0049                      ??_setup_ADC 0048                      ??_start_RCM 0048  
           ??_start_TX_USART_ISR 0048   __end_of_PIN_MANAGER_Initialize 0342                     ?_config_ASIC 0075  
