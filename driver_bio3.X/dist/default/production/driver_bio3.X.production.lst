

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Feb 20 10:40:29 2018

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16LF1823
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	dabs	1,0x7E,2
    36  0000                     
    37                           ; Version 1.40
    38                           ; Generated 01/12/2016 GMT
    39                           ; 
    40                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC16LF1823 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     	;# 
    72  0001                     	;# 
    73  0002                     	;# 
    74  0003                     	;# 
    75  0004                     	;# 
    76  0005                     	;# 
    77  0006                     	;# 
    78  0007                     	;# 
    79  0008                     	;# 
    80  0009                     	;# 
    81  000A                     	;# 
    82  000B                     	;# 
    83  000C                     	;# 
    84  000E                     	;# 
    85  0011                     	;# 
    86  0012                     	;# 
    87  0015                     	;# 
    88  0016                     	;# 
    89  0016                     	;# 
    90  0017                     	;# 
    91  0018                     	;# 
    92  0019                     	;# 
    93  001A                     	;# 
    94  001B                     	;# 
    95  001C                     	;# 
    96  001E                     	;# 
    97  001F                     	;# 
    98  008C                     	;# 
    99  008E                     	;# 
   100  0091                     	;# 
   101  0092                     	;# 
   102  0095                     	;# 
   103  0096                     	;# 
   104  0097                     	;# 
   105  0098                     	;# 
   106  0099                     	;# 
   107  009A                     	;# 
   108  009B                     	;# 
   109  009B                     	;# 
   110  009C                     	;# 
   111  009D                     	;# 
   112  009E                     	;# 
   113  010C                     	;# 
   114  010E                     	;# 
   115  0111                     	;# 
   116  0112                     	;# 
   117  0113                     	;# 
   118  0114                     	;# 
   119  0115                     	;# 
   120  0116                     	;# 
   121  0117                     	;# 
   122  0118                     	;# 
   123  0119                     	;# 
   124  011A                     	;# 
   125  011B                     	;# 
   126  011D                     	;# 
   127  011D                     	;# 
   128  018C                     	;# 
   129  018E                     	;# 
   130  0191                     	;# 
   131  0191                     	;# 
   132  0192                     	;# 
   133  0193                     	;# 
   134  0193                     	;# 
   135  0193                     	;# 
   136  0194                     	;# 
   137  0195                     	;# 
   138  0196                     	;# 
   139  0199                     	;# 
   140  019A                     	;# 
   141  019B                     	;# 
   142  019B                     	;# 
   143  019B                     	;# 
   144  019B                     	;# 
   145  019C                     	;# 
   146  019C                     	;# 
   147  019D                     	;# 
   148  019E                     	;# 
   149  019F                     	;# 
   150  020C                     	;# 
   151  020E                     	;# 
   152  0211                     	;# 
   153  0211                     	;# 
   154  0212                     	;# 
   155  0212                     	;# 
   156  0213                     	;# 
   157  0213                     	;# 
   158  0214                     	;# 
   159  0214                     	;# 
   160  0215                     	;# 
   161  0215                     	;# 
   162  0215                     	;# 
   163  0216                     	;# 
   164  0216                     	;# 
   165  0217                     	;# 
   166  0217                     	;# 
   167  0291                     	;# 
   168  0291                     	;# 
   169  0292                     	;# 
   170  0293                     	;# 
   171  0294                     	;# 
   172  0295                     	;# 
   173  0295                     	;# 
   174  0296                     	;# 
   175  0391                     	;# 
   176  0392                     	;# 
   177  0393                     	;# 
   178  039A                     	;# 
   179  039C                     	;# 
   180  039D                     	;# 
   181  039E                     	;# 
   182  039F                     	;# 
   183  0FE4                     	;# 
   184  0FE5                     	;# 
   185  0FE6                     	;# 
   186  0FE7                     	;# 
   187  0FE8                     	;# 
   188  0FE9                     	;# 
   189  0FEA                     	;# 
   190  0FEB                     	;# 
   191  0FED                     	;# 
   192  0FEE                     	;# 
   193  0FEF                     	;# 
   194  0000                     	;# 
   195  0001                     	;# 
   196  0002                     	;# 
   197  0003                     	;# 
   198  0004                     	;# 
   199  0005                     	;# 
   200  0006                     	;# 
   201  0007                     	;# 
   202  0008                     	;# 
   203  0009                     	;# 
   204  000A                     	;# 
   205  000B                     	;# 
   206  000C                     	;# 
   207  000E                     	;# 
   208  0011                     	;# 
   209  0012                     	;# 
   210  0015                     	;# 
   211  0016                     	;# 
   212  0016                     	;# 
   213  0017                     	;# 
   214  0018                     	;# 
   215  0019                     	;# 
   216  001A                     	;# 
   217  001B                     	;# 
   218  001C                     	;# 
   219  001E                     	;# 
   220  001F                     	;# 
   221  008C                     	;# 
   222  008E                     	;# 
   223  0091                     	;# 
   224  0092                     	;# 
   225  0095                     	;# 
   226  0096                     	;# 
   227  0097                     	;# 
   228  0098                     	;# 
   229  0099                     	;# 
   230  009A                     	;# 
   231  009B                     	;# 
   232  009B                     	;# 
   233  009C                     	;# 
   234  009D                     	;# 
   235  009E                     	;# 
   236  010C                     	;# 
   237  010E                     	;# 
   238  0111                     	;# 
   239  0112                     	;# 
   240  0113                     	;# 
   241  0114                     	;# 
   242  0115                     	;# 
   243  0116                     	;# 
   244  0117                     	;# 
   245  0118                     	;# 
   246  0119                     	;# 
   247  011A                     	;# 
   248  011B                     	;# 
   249  011D                     	;# 
   250  011D                     	;# 
   251  018C                     	;# 
   252  018E                     	;# 
   253  0191                     	;# 
   254  0191                     	;# 
   255  0192                     	;# 
   256  0193                     	;# 
   257  0193                     	;# 
   258  0193                     	;# 
   259  0194                     	;# 
   260  0195                     	;# 
   261  0196                     	;# 
   262  0199                     	;# 
   263  019A                     	;# 
   264  019B                     	;# 
   265  019B                     	;# 
   266  019B                     	;# 
   267  019B                     	;# 
   268  019C                     	;# 
   269  019C                     	;# 
   270  019D                     	;# 
   271  019E                     	;# 
   272  019F                     	;# 
   273  020C                     	;# 
   274  020E                     	;# 
   275  0211                     	;# 
   276  0211                     	;# 
   277  0212                     	;# 
   278  0212                     	;# 
   279  0213                     	;# 
   280  0213                     	;# 
   281  0214                     	;# 
   282  0214                     	;# 
   283  0215                     	;# 
   284  0215                     	;# 
   285  0215                     	;# 
   286  0216                     	;# 
   287  0216                     	;# 
   288  0217                     	;# 
   289  0217                     	;# 
   290  0291                     	;# 
   291  0291                     	;# 
   292  0292                     	;# 
   293  0293                     	;# 
   294  0294                     	;# 
   295  0295                     	;# 
   296  0295                     	;# 
   297  0296                     	;# 
   298  0391                     	;# 
   299  0392                     	;# 
   300  0393                     	;# 
   301  039A                     	;# 
   302  039C                     	;# 
   303  039D                     	;# 
   304  039E                     	;# 
   305  039F                     	;# 
   306  0FE4                     	;# 
   307  0FE5                     	;# 
   308  0FE6                     	;# 
   309  0FE7                     	;# 
   310  0FE8                     	;# 
   311  0FE9                     	;# 
   312  0FEA                     	;# 
   313  0FEB                     	;# 
   314  0FED                     	;# 
   315  0FEE                     	;# 
   316  0FEF                     	;# 
   317  0000                     	;# 
   318  0001                     	;# 
   319  0002                     	;# 
   320  0003                     	;# 
   321  0004                     	;# 
   322  0005                     	;# 
   323  0006                     	;# 
   324  0007                     	;# 
   325  0008                     	;# 
   326  0009                     	;# 
   327  000A                     	;# 
   328  000B                     	;# 
   329  000C                     	;# 
   330  000E                     	;# 
   331  0011                     	;# 
   332  0012                     	;# 
   333  0015                     	;# 
   334  0016                     	;# 
   335  0016                     	;# 
   336  0017                     	;# 
   337  0018                     	;# 
   338  0019                     	;# 
   339  001A                     	;# 
   340  001B                     	;# 
   341  001C                     	;# 
   342  001E                     	;# 
   343  001F                     	;# 
   344  008C                     	;# 
   345  008E                     	;# 
   346  0091                     	;# 
   347  0092                     	;# 
   348  0095                     	;# 
   349  0096                     	;# 
   350  0097                     	;# 
   351  0098                     	;# 
   352  0099                     	;# 
   353  009A                     	;# 
   354  009B                     	;# 
   355  009B                     	;# 
   356  009C                     	;# 
   357  009D                     	;# 
   358  009E                     	;# 
   359  010C                     	;# 
   360  010E                     	;# 
   361  0111                     	;# 
   362  0112                     	;# 
   363  0113                     	;# 
   364  0114                     	;# 
   365  0115                     	;# 
   366  0116                     	;# 
   367  0117                     	;# 
   368  0118                     	;# 
   369  0119                     	;# 
   370  011A                     	;# 
   371  011B                     	;# 
   372  011D                     	;# 
   373  011D                     	;# 
   374  018C                     	;# 
   375  018E                     	;# 
   376  0191                     	;# 
   377  0191                     	;# 
   378  0192                     	;# 
   379  0193                     	;# 
   380  0193                     	;# 
   381  0193                     	;# 
   382  0194                     	;# 
   383  0195                     	;# 
   384  0196                     	;# 
   385  0199                     	;# 
   386  019A                     	;# 
   387  019B                     	;# 
   388  019B                     	;# 
   389  019B                     	;# 
   390  019B                     	;# 
   391  019C                     	;# 
   392  019C                     	;# 
   393  019D                     	;# 
   394  019E                     	;# 
   395  019F                     	;# 
   396  020C                     	;# 
   397  020E                     	;# 
   398  0211                     	;# 
   399  0211                     	;# 
   400  0212                     	;# 
   401  0212                     	;# 
   402  0213                     	;# 
   403  0213                     	;# 
   404  0214                     	;# 
   405  0214                     	;# 
   406  0215                     	;# 
   407  0215                     	;# 
   408  0215                     	;# 
   409  0216                     	;# 
   410  0216                     	;# 
   411  0217                     	;# 
   412  0217                     	;# 
   413  0291                     	;# 
   414  0291                     	;# 
   415  0292                     	;# 
   416  0293                     	;# 
   417  0294                     	;# 
   418  0295                     	;# 
   419  0295                     	;# 
   420  0296                     	;# 
   421  0391                     	;# 
   422  0392                     	;# 
   423  0393                     	;# 
   424  039A                     	;# 
   425  039C                     	;# 
   426  039D                     	;# 
   427  039E                     	;# 
   428  039F                     	;# 
   429  0FE4                     	;# 
   430  0FE5                     	;# 
   431  0FE6                     	;# 
   432  0FE7                     	;# 
   433  0FE8                     	;# 
   434  0FE9                     	;# 
   435  0FEA                     	;# 
   436  0FEB                     	;# 
   437  0FED                     	;# 
   438  0FEE                     	;# 
   439  0FEF                     	;# 
   440  0000                     	;# 
   441  0001                     	;# 
   442  0002                     	;# 
   443  0003                     	;# 
   444  0004                     	;# 
   445  0005                     	;# 
   446  0006                     	;# 
   447  0007                     	;# 
   448  0008                     	;# 
   449  0009                     	;# 
   450  000A                     	;# 
   451  000B                     	;# 
   452  000C                     	;# 
   453  000E                     	;# 
   454  0011                     	;# 
   455  0012                     	;# 
   456  0015                     	;# 
   457  0016                     	;# 
   458  0016                     	;# 
   459  0017                     	;# 
   460  0018                     	;# 
   461  0019                     	;# 
   462  001A                     	;# 
   463  001B                     	;# 
   464  001C                     	;# 
   465  001E                     	;# 
   466  001F                     	;# 
   467  008C                     	;# 
   468  008E                     	;# 
   469  0091                     	;# 
   470  0092                     	;# 
   471  0095                     	;# 
   472  0096                     	;# 
   473  0097                     	;# 
   474  0098                     	;# 
   475  0099                     	;# 
   476  009A                     	;# 
   477  009B                     	;# 
   478  009B                     	;# 
   479  009C                     	;# 
   480  009D                     	;# 
   481  009E                     	;# 
   482  010C                     	;# 
   483  010E                     	;# 
   484  0111                     	;# 
   485  0112                     	;# 
   486  0113                     	;# 
   487  0114                     	;# 
   488  0115                     	;# 
   489  0116                     	;# 
   490  0117                     	;# 
   491  0118                     	;# 
   492  0119                     	;# 
   493  011A                     	;# 
   494  011B                     	;# 
   495  011D                     	;# 
   496  011D                     	;# 
   497  018C                     	;# 
   498  018E                     	;# 
   499  0191                     	;# 
   500  0191                     	;# 
   501  0192                     	;# 
   502  0193                     	;# 
   503  0193                     	;# 
   504  0193                     	;# 
   505  0194                     	;# 
   506  0195                     	;# 
   507  0196                     	;# 
   508  0199                     	;# 
   509  019A                     	;# 
   510  019B                     	;# 
   511  019B                     	;# 
   512  019B                     	;# 
   513  019B                     	;# 
   514  019C                     	;# 
   515  019C                     	;# 
   516  019D                     	;# 
   517  019E                     	;# 
   518  019F                     	;# 
   519  020C                     	;# 
   520  020E                     	;# 
   521  0211                     	;# 
   522  0211                     	;# 
   523  0212                     	;# 
   524  0212                     	;# 
   525  0213                     	;# 
   526  0213                     	;# 
   527  0214                     	;# 
   528  0214                     	;# 
   529  0215                     	;# 
   530  0215                     	;# 
   531  0215                     	;# 
   532  0216                     	;# 
   533  0216                     	;# 
   534  0217                     	;# 
   535  0217                     	;# 
   536  0291                     	;# 
   537  0291                     	;# 
   538  0292                     	;# 
   539  0293                     	;# 
   540  0294                     	;# 
   541  0295                     	;# 
   542  0295                     	;# 
   543  0296                     	;# 
   544  0391                     	;# 
   545  0392                     	;# 
   546  0393                     	;# 
   547  039A                     	;# 
   548  039C                     	;# 
   549  039D                     	;# 
   550  039E                     	;# 
   551  039F                     	;# 
   552  0FE4                     	;# 
   553  0FE5                     	;# 
   554  0FE6                     	;# 
   555  0FE7                     	;# 
   556  0FE8                     	;# 
   557  0FE9                     	;# 
   558  0FEA                     	;# 
   559  0FEB                     	;# 
   560  0FED                     	;# 
   561  0FEE                     	;# 
   562  0FEF                     	;# 
   563  0000                     	;# 
   564  0001                     	;# 
   565  0002                     	;# 
   566  0003                     	;# 
   567  0004                     	;# 
   568  0005                     	;# 
   569  0006                     	;# 
   570  0007                     	;# 
   571  0008                     	;# 
   572  0009                     	;# 
   573  000A                     	;# 
   574  000B                     	;# 
   575  000C                     	;# 
   576  000E                     	;# 
   577  0011                     	;# 
   578  0012                     	;# 
   579  0015                     	;# 
   580  0016                     	;# 
   581  0016                     	;# 
   582  0017                     	;# 
   583  0018                     	;# 
   584  0019                     	;# 
   585  001A                     	;# 
   586  001B                     	;# 
   587  001C                     	;# 
   588  001E                     	;# 
   589  001F                     	;# 
   590  008C                     	;# 
   591  008E                     	;# 
   592  0091                     	;# 
   593  0092                     	;# 
   594  0095                     	;# 
   595  0096                     	;# 
   596  0097                     	;# 
   597  0098                     	;# 
   598  0099                     	;# 
   599  009A                     	;# 
   600  009B                     	;# 
   601  009B                     	;# 
   602  009C                     	;# 
   603  009D                     	;# 
   604  009E                     	;# 
   605  010C                     	;# 
   606  010E                     	;# 
   607  0111                     	;# 
   608  0112                     	;# 
   609  0113                     	;# 
   610  0114                     	;# 
   611  0115                     	;# 
   612  0116                     	;# 
   613  0117                     	;# 
   614  0118                     	;# 
   615  0119                     	;# 
   616  011A                     	;# 
   617  011B                     	;# 
   618  011D                     	;# 
   619  011D                     	;# 
   620  018C                     	;# 
   621  018E                     	;# 
   622  0191                     	;# 
   623  0191                     	;# 
   624  0192                     	;# 
   625  0193                     	;# 
   626  0193                     	;# 
   627  0193                     	;# 
   628  0194                     	;# 
   629  0195                     	;# 
   630  0196                     	;# 
   631  0199                     	;# 
   632  019A                     	;# 
   633  019B                     	;# 
   634  019B                     	;# 
   635  019B                     	;# 
   636  019B                     	;# 
   637  019C                     	;# 
   638  019C                     	;# 
   639  019D                     	;# 
   640  019E                     	;# 
   641  019F                     	;# 
   642  020C                     	;# 
   643  020E                     	;# 
   644  0211                     	;# 
   645  0211                     	;# 
   646  0212                     	;# 
   647  0212                     	;# 
   648  0213                     	;# 
   649  0213                     	;# 
   650  0214                     	;# 
   651  0214                     	;# 
   652  0215                     	;# 
   653  0215                     	;# 
   654  0215                     	;# 
   655  0216                     	;# 
   656  0216                     	;# 
   657  0217                     	;# 
   658  0217                     	;# 
   659  0291                     	;# 
   660  0291                     	;# 
   661  0292                     	;# 
   662  0293                     	;# 
   663  0294                     	;# 
   664  0295                     	;# 
   665  0295                     	;# 
   666  0296                     	;# 
   667  0391                     	;# 
   668  0392                     	;# 
   669  0393                     	;# 
   670  039A                     	;# 
   671  039C                     	;# 
   672  039D                     	;# 
   673  039E                     	;# 
   674  039F                     	;# 
   675  0FE4                     	;# 
   676  0FE5                     	;# 
   677  0FE6                     	;# 
   678  0FE7                     	;# 
   679  0FE8                     	;# 
   680  0FE9                     	;# 
   681  0FEA                     	;# 
   682  0FEB                     	;# 
   683  0FED                     	;# 
   684  0FEE                     	;# 
   685  0FEF                     	;# 
   686  0000                     	;# 
   687  0001                     	;# 
   688  0002                     	;# 
   689  0003                     	;# 
   690  0004                     	;# 
   691  0005                     	;# 
   692  0006                     	;# 
   693  0007                     	;# 
   694  0008                     	;# 
   695  0009                     	;# 
   696  000A                     	;# 
   697  000B                     	;# 
   698  000C                     	;# 
   699  000E                     	;# 
   700  0011                     	;# 
   701  0012                     	;# 
   702  0015                     	;# 
   703  0016                     	;# 
   704  0016                     	;# 
   705  0017                     	;# 
   706  0018                     	;# 
   707  0019                     	;# 
   708  001A                     	;# 
   709  001B                     	;# 
   710  001C                     	;# 
   711  001E                     	;# 
   712  001F                     	;# 
   713  008C                     	;# 
   714  008E                     	;# 
   715  0091                     	;# 
   716  0092                     	;# 
   717  0095                     	;# 
   718  0096                     	;# 
   719  0097                     	;# 
   720  0098                     	;# 
   721  0099                     	;# 
   722  009A                     	;# 
   723  009B                     	;# 
   724  009B                     	;# 
   725  009C                     	;# 
   726  009D                     	;# 
   727  009E                     	;# 
   728  010C                     	;# 
   729  010E                     	;# 
   730  0111                     	;# 
   731  0112                     	;# 
   732  0113                     	;# 
   733  0114                     	;# 
   734  0115                     	;# 
   735  0116                     	;# 
   736  0117                     	;# 
   737  0118                     	;# 
   738  0119                     	;# 
   739  011A                     	;# 
   740  011B                     	;# 
   741  011D                     	;# 
   742  011D                     	;# 
   743  018C                     	;# 
   744  018E                     	;# 
   745  0191                     	;# 
   746  0191                     	;# 
   747  0192                     	;# 
   748  0193                     	;# 
   749  0193                     	;# 
   750  0193                     	;# 
   751  0194                     	;# 
   752  0195                     	;# 
   753  0196                     	;# 
   754  0199                     	;# 
   755  019A                     	;# 
   756  019B                     	;# 
   757  019B                     	;# 
   758  019B                     	;# 
   759  019B                     	;# 
   760  019C                     	;# 
   761  019C                     	;# 
   762  019D                     	;# 
   763  019E                     	;# 
   764  019F                     	;# 
   765  020C                     	;# 
   766  020E                     	;# 
   767  0211                     	;# 
   768  0211                     	;# 
   769  0212                     	;# 
   770  0212                     	;# 
   771  0213                     	;# 
   772  0213                     	;# 
   773  0214                     	;# 
   774  0214                     	;# 
   775  0215                     	;# 
   776  0215                     	;# 
   777  0215                     	;# 
   778  0216                     	;# 
   779  0216                     	;# 
   780  0217                     	;# 
   781  0217                     	;# 
   782  0291                     	;# 
   783  0291                     	;# 
   784  0292                     	;# 
   785  0293                     	;# 
   786  0294                     	;# 
   787  0295                     	;# 
   788  0295                     	;# 
   789  0296                     	;# 
   790  0391                     	;# 
   791  0392                     	;# 
   792  0393                     	;# 
   793  039A                     	;# 
   794  039C                     	;# 
   795  039D                     	;# 
   796  039E                     	;# 
   797  039F                     	;# 
   798  0FE4                     	;# 
   799  0FE5                     	;# 
   800  0FE6                     	;# 
   801  0FE7                     	;# 
   802  0FE8                     	;# 
   803  0FE9                     	;# 
   804  0FEA                     	;# 
   805  0FEB                     	;# 
   806  0FED                     	;# 
   807  0FEE                     	;# 
   808  0FEF                     	;# 
   809  0000                     	;# 
   810  0001                     	;# 
   811  0002                     	;# 
   812  0003                     	;# 
   813  0004                     	;# 
   814  0005                     	;# 
   815  0006                     	;# 
   816  0007                     	;# 
   817  0008                     	;# 
   818  0009                     	;# 
   819  000A                     	;# 
   820  000B                     	;# 
   821  000C                     	;# 
   822  000E                     	;# 
   823  0011                     	;# 
   824  0012                     	;# 
   825  0015                     	;# 
   826  0016                     	;# 
   827  0016                     	;# 
   828  0017                     	;# 
   829  0018                     	;# 
   830  0019                     	;# 
   831  001A                     	;# 
   832  001B                     	;# 
   833  001C                     	;# 
   834  001E                     	;# 
   835  001F                     	;# 
   836  008C                     	;# 
   837  008E                     	;# 
   838  0091                     	;# 
   839  0092                     	;# 
   840  0095                     	;# 
   841  0096                     	;# 
   842  0097                     	;# 
   843  0098                     	;# 
   844  0099                     	;# 
   845  009A                     	;# 
   846  009B                     	;# 
   847  009B                     	;# 
   848  009C                     	;# 
   849  009D                     	;# 
   850  009E                     	;# 
   851  010C                     	;# 
   852  010E                     	;# 
   853  0111                     	;# 
   854  0112                     	;# 
   855  0113                     	;# 
   856  0114                     	;# 
   857  0115                     	;# 
   858  0116                     	;# 
   859  0117                     	;# 
   860  0118                     	;# 
   861  0119                     	;# 
   862  011A                     	;# 
   863  011B                     	;# 
   864  011D                     	;# 
   865  011D                     	;# 
   866  018C                     	;# 
   867  018E                     	;# 
   868  0191                     	;# 
   869  0191                     	;# 
   870  0192                     	;# 
   871  0193                     	;# 
   872  0193                     	;# 
   873  0193                     	;# 
   874  0194                     	;# 
   875  0195                     	;# 
   876  0196                     	;# 
   877  0199                     	;# 
   878  019A                     	;# 
   879  019B                     	;# 
   880  019B                     	;# 
   881  019B                     	;# 
   882  019B                     	;# 
   883  019C                     	;# 
   884  019C                     	;# 
   885  019D                     	;# 
   886  019E                     	;# 
   887  019F                     	;# 
   888  020C                     	;# 
   889  020E                     	;# 
   890  0211                     	;# 
   891  0211                     	;# 
   892  0212                     	;# 
   893  0212                     	;# 
   894  0213                     	;# 
   895  0213                     	;# 
   896  0214                     	;# 
   897  0214                     	;# 
   898  0215                     	;# 
   899  0215                     	;# 
   900  0215                     	;# 
   901  0216                     	;# 
   902  0216                     	;# 
   903  0217                     	;# 
   904  0217                     	;# 
   905  0291                     	;# 
   906  0291                     	;# 
   907  0292                     	;# 
   908  0293                     	;# 
   909  0294                     	;# 
   910  0295                     	;# 
   911  0295                     	;# 
   912  0296                     	;# 
   913  0391                     	;# 
   914  0392                     	;# 
   915  0393                     	;# 
   916  039A                     	;# 
   917  039C                     	;# 
   918  039D                     	;# 
   919  039E                     	;# 
   920  039F                     	;# 
   921  0FE4                     	;# 
   922  0FE5                     	;# 
   923  0FE6                     	;# 
   924  0FE7                     	;# 
   925  0FE8                     	;# 
   926  0FE9                     	;# 
   927  0FEA                     	;# 
   928  0FEB                     	;# 
   929  0FED                     	;# 
   930  0FEE                     	;# 
   931  0FEF                     	;# 
   932  0000                     	;# 
   933  0001                     	;# 
   934  0002                     	;# 
   935  0003                     	;# 
   936  0004                     	;# 
   937  0005                     	;# 
   938  0006                     	;# 
   939  0007                     	;# 
   940  0008                     	;# 
   941  0009                     	;# 
   942  000A                     	;# 
   943  000B                     	;# 
   944  000C                     	;# 
   945  000E                     	;# 
   946  0011                     	;# 
   947  0012                     	;# 
   948  0015                     	;# 
   949  0016                     	;# 
   950  0016                     	;# 
   951  0017                     	;# 
   952  0018                     	;# 
   953  0019                     	;# 
   954  001A                     	;# 
   955  001B                     	;# 
   956  001C                     	;# 
   957  001E                     	;# 
   958  001F                     	;# 
   959  008C                     	;# 
   960  008E                     	;# 
   961  0091                     	;# 
   962  0092                     	;# 
   963  0095                     	;# 
   964  0096                     	;# 
   965  0097                     	;# 
   966  0098                     	;# 
   967  0099                     	;# 
   968  009A                     	;# 
   969  009B                     	;# 
   970  009B                     	;# 
   971  009C                     	;# 
   972  009D                     	;# 
   973  009E                     	;# 
   974  010C                     	;# 
   975  010E                     	;# 
   976  0111                     	;# 
   977  0112                     	;# 
   978  0113                     	;# 
   979  0114                     	;# 
   980  0115                     	;# 
   981  0116                     	;# 
   982  0117                     	;# 
   983  0118                     	;# 
   984  0119                     	;# 
   985  011A                     	;# 
   986  011B                     	;# 
   987  011D                     	;# 
   988  011D                     	;# 
   989  018C                     	;# 
   990  018E                     	;# 
   991  0191                     	;# 
   992  0191                     	;# 
   993  0192                     	;# 
   994  0193                     	;# 
   995  0193                     	;# 
   996  0193                     	;# 
   997  0194                     	;# 
   998  0195                     	;# 
   999  0196                     	;# 
  1000  0199                     	;# 
  1001  019A                     	;# 
  1002  019B                     	;# 
  1003  019B                     	;# 
  1004  019B                     	;# 
  1005  019B                     	;# 
  1006  019C                     	;# 
  1007  019C                     	;# 
  1008  019D                     	;# 
  1009  019E                     	;# 
  1010  019F                     	;# 
  1011  020C                     	;# 
  1012  020E                     	;# 
  1013  0211                     	;# 
  1014  0211                     	;# 
  1015  0212                     	;# 
  1016  0212                     	;# 
  1017  0213                     	;# 
  1018  0213                     	;# 
  1019  0214                     	;# 
  1020  0214                     	;# 
  1021  0215                     	;# 
  1022  0215                     	;# 
  1023  0215                     	;# 
  1024  0216                     	;# 
  1025  0216                     	;# 
  1026  0217                     	;# 
  1027  0217                     	;# 
  1028  0291                     	;# 
  1029  0291                     	;# 
  1030  0292                     	;# 
  1031  0293                     	;# 
  1032  0294                     	;# 
  1033  0295                     	;# 
  1034  0295                     	;# 
  1035  0296                     	;# 
  1036  0391                     	;# 
  1037  0392                     	;# 
  1038  0393                     	;# 
  1039  039A                     	;# 
  1040  039C                     	;# 
  1041  039D                     	;# 
  1042  039E                     	;# 
  1043  039F                     	;# 
  1044  0FE4                     	;# 
  1045  0FE5                     	;# 
  1046  0FE6                     	;# 
  1047  0FE7                     	;# 
  1048  0FE8                     	;# 
  1049  0FE9                     	;# 
  1050  0FEA                     	;# 
  1051  0FEB                     	;# 
  1052  0FED                     	;# 
  1053  0FEE                     	;# 
  1054  0FEF                     	;# 
  1055  0000                     	;# 
  1056  0001                     	;# 
  1057  0002                     	;# 
  1058  0003                     	;# 
  1059  0004                     	;# 
  1060  0005                     	;# 
  1061  0006                     	;# 
  1062  0007                     	;# 
  1063  0008                     	;# 
  1064  0009                     	;# 
  1065  000A                     	;# 
  1066  000B                     	;# 
  1067  000C                     	;# 
  1068  000E                     	;# 
  1069  0011                     	;# 
  1070  0012                     	;# 
  1071  0015                     	;# 
  1072  0016                     	;# 
  1073  0016                     	;# 
  1074  0017                     	;# 
  1075  0018                     	;# 
  1076  0019                     	;# 
  1077  001A                     	;# 
  1078  001B                     	;# 
  1079  001C                     	;# 
  1080  001E                     	;# 
  1081  001F                     	;# 
  1082  008C                     	;# 
  1083  008E                     	;# 
  1084  0091                     	;# 
  1085  0092                     	;# 
  1086  0095                     	;# 
  1087  0096                     	;# 
  1088  0097                     	;# 
  1089  0098                     	;# 
  1090  0099                     	;# 
  1091  009A                     	;# 
  1092  009B                     	;# 
  1093  009B                     	;# 
  1094  009C                     	;# 
  1095  009D                     	;# 
  1096  009E                     	;# 
  1097  010C                     	;# 
  1098  010E                     	;# 
  1099  0111                     	;# 
  1100  0112                     	;# 
  1101  0113                     	;# 
  1102  0114                     	;# 
  1103  0115                     	;# 
  1104  0116                     	;# 
  1105  0117                     	;# 
  1106  0118                     	;# 
  1107  0119                     	;# 
  1108  011A                     	;# 
  1109  011B                     	;# 
  1110  011D                     	;# 
  1111  011D                     	;# 
  1112  018C                     	;# 
  1113  018E                     	;# 
  1114  0191                     	;# 
  1115  0191                     	;# 
  1116  0192                     	;# 
  1117  0193                     	;# 
  1118  0193                     	;# 
  1119  0193                     	;# 
  1120  0194                     	;# 
  1121  0195                     	;# 
  1122  0196                     	;# 
  1123  0199                     	;# 
  1124  019A                     	;# 
  1125  019B                     	;# 
  1126  019B                     	;# 
  1127  019B                     	;# 
  1128  019B                     	;# 
  1129  019C                     	;# 
  1130  019C                     	;# 
  1131  019D                     	;# 
  1132  019E                     	;# 
  1133  019F                     	;# 
  1134  020C                     	;# 
  1135  020E                     	;# 
  1136  0211                     	;# 
  1137  0211                     	;# 
  1138  0212                     	;# 
  1139  0212                     	;# 
  1140  0213                     	;# 
  1141  0213                     	;# 
  1142  0214                     	;# 
  1143  0214                     	;# 
  1144  0215                     	;# 
  1145  0215                     	;# 
  1146  0215                     	;# 
  1147  0216                     	;# 
  1148  0216                     	;# 
  1149  0217                     	;# 
  1150  0217                     	;# 
  1151  0291                     	;# 
  1152  0291                     	;# 
  1153  0292                     	;# 
  1154  0293                     	;# 
  1155  0294                     	;# 
  1156  0295                     	;# 
  1157  0295                     	;# 
  1158  0296                     	;# 
  1159  0391                     	;# 
  1160  0392                     	;# 
  1161  0393                     	;# 
  1162  039A                     	;# 
  1163  039C                     	;# 
  1164  039D                     	;# 
  1165  039E                     	;# 
  1166  039F                     	;# 
  1167  0FE4                     	;# 
  1168  0FE5                     	;# 
  1169  0FE6                     	;# 
  1170  0FE7                     	;# 
  1171  0FE8                     	;# 
  1172  0FE9                     	;# 
  1173  0FEA                     	;# 
  1174  0FEB                     	;# 
  1175  0FED                     	;# 
  1176  0FEE                     	;# 
  1177  0FEF                     	;# 
  1178                           
  1179                           	psect	stringtext
  1180  021F                     __pstringtext:	
  1181  021F                     _filt:	
  1182  021F  34C7               	retlw	199
  1183  0220  3440               	retlw	64
  1184  0221  3400               	retlw	0
  1185  0222  34CF               	retlw	207
  1186  0223  3440               	retlw	64
  1187  0224  3400               	retlw	0
  1188  0225  346F               	retlw	111
  1189  0226  3440               	retlw	64
  1190  0227  3400               	retlw	0
  1191  0228  343F               	retlw	63
  1192  0229  3440               	retlw	64
  1193  022A  3400               	retlw	0
  1194  022B  340F               	retlw	15
  1195  022C  3489               	retlw	137
  1196  022D  3400               	retlw	0
  1197  022E  340F               	retlw	15
  1198  022F  3488               	retlw	136
  1199  0230  3400               	retlw	0
  1200  0231  340F               	retlw	15
  1201  0232  34A4               	retlw	164
  1202  0233  3400               	retlw	0
  1203  0234  340F               	retlw	15
  1204  0235  3409               	retlw	9
  1205  0236  3401               	retlw	1
  1206  0237  340F               	retlw	15
  1207  0238  3408               	retlw	8
  1208  0239  3401               	retlw	1
  1209  023A  340F               	retlw	15
  1210  023B  3424               	retlw	36
  1211  023C  3401               	retlw	1
  1212  023D  340F               	retlw	15
  1213  023E  3432               	retlw	50
  1214  023F  3401               	retlw	1
  1215  0240                     __end_of_filt:	
  1216  0240                     _freqs:	
  1217  0240  3400               	retlw	0
  1218  0241  3401               	retlw	1
  1219  0242  3402               	retlw	2
  1220  0243  3403               	retlw	3
  1221  0244  3404               	retlw	4
  1222  0245  3405               	retlw	5
  1223  0246  3406               	retlw	6
  1224  0247  3407               	retlw	7
  1225  0248  3408               	retlw	8
  1226  0249  3409               	retlw	9
  1227  024A  340A               	retlw	10
  1228  024B                     __end_of_freqs:	
  1229  024B                     _gains:	
  1230  024B  3404               	retlw	4
  1231  024C  3405               	retlw	5
  1232  024D  3407               	retlw	7
  1233  024E  3403               	retlw	3
  1234  024F  3423               	retlw	35
  1235  0250  3463               	retlw	99
  1236  0251  346B               	retlw	107
  1237  0252  347B               	retlw	123
  1238  0253                     __end_of_gains:	
  1239  000E                     _PORTC	set	14
  1240  0015                     _TMR0	set	21
  1241  005F                     _GIE	set	95
  1242  005E                     _PEIE	set	94
  1243  0065                     _RA5	set	101
  1244  008D                     _RCIF	set	141
  1245  005D                     _TMR0IE	set	93
  1246  005A                     _TMR0IF	set	90
  1247  008C                     _TXIF	set	140
  1248  009D                     _ADCON0	set	157
  1249  009E                     _ADCON1	set	158
  1250  009C                     _ADRESH	set	156
  1251  009B                     _ADRESL	set	155
  1252  0095                     _OPTION_REGbits	set	149
  1253  0099                     _OSCCON	set	153
  1254  009A                     _OSCSTAT	set	154
  1255  0098                     _OSCTUNE	set	152
  1256  008C                     _TRISA	set	140
  1257  008E                     _TRISC	set	142
  1258  04E9                     _ADGO	set	1257
  1259  04A8                     _PS0	set	1192
  1260  04A9                     _PS1	set	1193
  1261  04AA                     _PS2	set	1194
  1262  04AB                     _PSA	set	1195
  1263  048D                     _RCIE	set	1165
  1264  04AD                     _TMR0CS	set	1197
  1265  048C                     _TXIE	set	1164
  1266  011D                     _APFCON	set	285
  1267  010C                     _LATA	set	268
  1268  010E                     _LATC	set	270
  1269  08EF                     _RXDTSEL	set	2287
  1270  08EA                     _TXCKSEL	set	2282
  1271  018C                     _ANSELA	set	396
  1272  018E                     _ANSELC	set	398
  1273  0199                     _RCREG	set	409
  1274  019C                     _SPBRGH	set	412
  1275  019B                     _SPBRGL	set	411
  1276  019A                     _TXREG	set	410
  1277  0CFB                     _BRG16	set	3323
  1278  0CF2                     _BRGH	set	3314
  1279  0CEC                     _CREN	set	3308
  1280  0CE9                     _OERR	set	3305
  1281  0CFC                     _SCKP	set	3324
  1282  0CEF                     _SPEN	set	3311
  1283  0CF4                     _SYNC	set	3316
  1284  0CF5                     _TXEN	set	3317
  1285  020C                     _WPUA	set	524
  1286  020E                     _WPUC	set	526
  1287  039A                     _CLKRCON	set	922
  1288                           
  1289                           ; #config settings
  1290  0000                     
  1291                           	psect	cinit
  1292  0057                     start_initialization:	
  1293  0057                     __initialization:	
  1294                           
  1295                           ; Clear objects allocated to COMMON
  1296  0057  01F0               	clrf	__pbssCOMMON& (0+127)
  1297  0058  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  1298  0059  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  1299  005A  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  1300  005B  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  1301                           
  1302                           ; Clear objects allocated to BANK0
  1303  005C  3020               	movlw	low __pbssBANK0
  1304  005D  0084               	movwf	4
  1305  005E  3000               	movlw	high __pbssBANK0
  1306  005F  0085               	movwf	5
  1307  0060  3027               	movlw	39
  1308  0061  23A4               	fcall	clear_ram0
  1309  0062                     end_of_initialization:	
  1310                           ;End of C runtime variable initialization code
  1311                           
  1312  0062                     __end_of__initialization:	
  1313  0062  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1314  0063  0020               	movlb	0
  1315  0064  2AAD               	ljmp	_main	;jump to C main() function
  1316                           
  1317                           	psect	bssCOMMON
  1318  0070                     __pbssCOMMON:	
  1319  0070                     _TIMER0_timeout:	
  1320  0070                     	ds	2
  1321  0072                     _USART_tx_flag:	
  1322  0072                     	ds	1
  1323  0073                     _USART_tx_index:	
  1324  0073                     	ds	1
  1325  0074                     _USART_tx_length:	
  1326  0074                     	ds	1
  1327                           
  1328                           	psect	bssBANK0
  1329  0020                     __pbssBANK0:	
  1330  0020                     _USART_tx_data:	
  1331  0020                     	ds	15
  1332  002F                     _USART_rx_data:	
  1333  002F                     	ds	10
  1334  0039                     _TIMER0_flag:	
  1335  0039                     	ds	1
  1336  003A                     _USART_rx_flag:	
  1337  003A                     	ds	1
  1338  003B                     _USART_rx_index:	
  1339  003B                     	ds	1
  1340  003C                     _mess_rec_size:	
  1341  003C                     	ds	1
  1342  003D                     _mess_rec:	
  1343  003D                     	ds	10
  1344                           
  1345                           	psect	clrtext
  1346  03A4                     clear_ram0:	
  1347                           ;	Called with FSR0 containing the base address, and
  1348                           ;	WREG with the size to clear
  1349                           
  1350  03A4  0064               	clrwdt	;clear the watchdog before getting into this loop
  1351  03A5                     clrloop0:	
  1352  03A5  0180               	clrf	0	;clear RAM location pointed to by FSR
  1353  03A6  3101               	addfsr 0,1
  1354  03A7  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1355  03A8  2BA5               	goto	clrloop0	;have we reached the end yet?
  1356  03A9  3400               	retlw	0	;all done for this memory range, return
  1357                           
  1358                           	psect	cstackBANK1
  1359  00A0                     __pcstackBANK1:	
  1360  00A0                     sweep@check:	
  1361                           
  1362                           ; 1 bytes @ 0x0
  1363  00A0                     	ds	1
  1364  00A1                     sweep@aux:	
  1365                           
  1366                           ; 7 bytes @ 0x1
  1367  00A1                     	ds	7
  1368  00A8                     sweep@freq_index:	
  1369                           
  1370                           ; 1 bytes @ 0x8
  1371  00A8                     	ds	1
  1372  00A9                     sweep@i:	
  1373                           
  1374                           ; 1 bytes @ 0x9
  1375  00A9                     	ds	1
  1376  00AA                     sweep@count:	
  1377                           
  1378                           ; 1 bytes @ 0xA
  1379  00AA                     	ds	1
  1380  00AB                     sweep@I:	
  1381                           
  1382                           ; 2 bytes @ 0xB
  1383  00AB                     	ds	2
  1384  00AD                     sweep@Q:	
  1385                           
  1386                           ; 2 bytes @ 0xD
  1387  00AD                     	ds	2
  1388  00AF                     sweep@gain_index:	
  1389                           
  1390                           ; 1 bytes @ 0xF
  1391  00AF                     	ds	1
  1392  00B0                     sweep@ret:	
  1393                           
  1394                           ; 1 bytes @ 0x10
  1395  00B0                     	ds	1
  1396  00B1                     sweep@asic:	
  1397                           
  1398                           ; 2 bytes @ 0x11
  1399  00B1                     	ds	2
  1400                           
  1401                           	psect	cstackCOMMON
  1402  0075                     __pcstackCOMMON:	
  1403  0075                     ?_OSCILLATOR_Initialize:	
  1404  0075                     ?_setup_TMR0:	
  1405                           ; 1 bytes @ 0x0
  1406                           
  1407  0075                     ?_start_TX_USART_ISR:	
  1408                           ; 1 bytes @ 0x0
  1409                           
  1410  0075                     ?_start_RX_USART_ISR:	
  1411                           ; 1 bytes @ 0x0
  1412                           
  1413  0075                     ?_start_RCM:	
  1414                           ; 1 bytes @ 0x0
  1415                           
  1416  0075                     ?_setup_ADC:	
  1417                           ; 1 bytes @ 0x0
  1418                           
  1419  0075                     ?_sweep:	
  1420                           ; 1 bytes @ 0x0
  1421                           
  1422  0075                     ?_stop_TMR0_ISR:	
  1423                           ; 1 bytes @ 0x0
  1424                           
  1425  0075                     ??_stop_TMR0_ISR:	
  1426                           ; 1 bytes @ 0x0
  1427                           
  1428  0075                     ?_start_TMR0_ISR:	
  1429                           ; 1 bytes @ 0x0
  1430                           
  1431  0075                     ??_start_TMR0_ISR:	
  1432                           ; 1 bytes @ 0x0
  1433                           
  1434  0075                     ?_PIN_MANAGER_Initialize:	
  1435                           ; 1 bytes @ 0x0
  1436                           
  1437  0075                     ?_SYSTEM_Initialize:	
  1438                           ; 1 bytes @ 0x0
  1439                           
  1440  0075                     ?_USARTX_change_pol:	
  1441                           ; 1 bytes @ 0x0
  1442                           
  1443  0075                     ?_main:	
  1444                           ; 1 bytes @ 0x0
  1445                           
  1446  0075                     ?_isr:	
  1447                           ; 1 bytes @ 0x0
  1448                           
  1449  0075                     ?_close_RX_USART:	
  1450                           ; 1 bytes @ 0x0
  1451                           
  1452  0075                     ?i1_start_RX_USART_ISR:	
  1453                           ; 1 bytes @ 0x0
  1454                           
  1455  0075                     ??i1_start_RX_USART_ISR:	
  1456                           ; 1 bytes @ 0x0
  1457                           
  1458                           
  1459                           ; 1 bytes @ 0x0
  1460  0075                     	ds	2
  1461  0077                     start_TMR0_ISR@val:	
  1462                           
  1463                           ; 1 bytes @ 0x2
  1464  0077                     	ds	1
  1465  0078                     ??_isr:	
  1466                           
  1467                           ; 1 bytes @ 0x3
  1468  0078                     	ds	2
  1469                           
  1470                           	psect	cstackBANK0
  1471  0047                     __pcstackBANK0:	
  1472  0047                     ??_OSCILLATOR_Initialize:	
  1473  0047                     ??_setup_TMR0:	
  1474                           ; 1 bytes @ 0x0
  1475                           
  1476  0047                     ??_start_TX_USART_ISR:	
  1477                           ; 1 bytes @ 0x0
  1478                           
  1479  0047                     ??_start_RX_USART_ISR:	
  1480                           ; 1 bytes @ 0x0
  1481                           
  1482  0047                     ??_start_RCM:	
  1483                           ; 1 bytes @ 0x0
  1484                           
  1485  0047                     ??_setup_ADC:	
  1486                           ; 1 bytes @ 0x0
  1487                           
  1488  0047                     ?_calculate_checksum:	
  1489                           ; 1 bytes @ 0x0
  1490                           
  1491  0047                     ??_PIN_MANAGER_Initialize:	
  1492                           ; 1 bytes @ 0x0
  1493                           
  1494  0047                     ??_SYSTEM_Initialize:	
  1495                           ; 1 bytes @ 0x0
  1496                           
  1497  0047                     ??_USARTX_change_pol:	
  1498                           ; 1 bytes @ 0x0
  1499                           
  1500  0047                     ?_config:	
  1501                           ; 1 bytes @ 0x0
  1502                           
  1503  0047                     ?_setGain:	
  1504                           ; 1 bytes @ 0x0
  1505                           
  1506  0047                     ?_setFreq:	
  1507                           ; 1 bytes @ 0x0
  1508                           
  1509  0047                     ??_close_RX_USART:	
  1510                           ; 1 bytes @ 0x0
  1511                           
  1512  0047                     ?_lputs_ISR:	
  1513                           ; 1 bytes @ 0x0
  1514                           
  1515  0047                     ?_ADC_5:	
  1516                           ; 1 bytes @ 0x0
  1517                           
  1518  0047                     setGain@gain_index:	
  1519                           ; 2 bytes @ 0x0
  1520                           
  1521  0047                     setFreq@freq_index:	
  1522                           ; 1 bytes @ 0x0
  1523                           
  1524  0047                     lputs_ISR@length:	
  1525                           ; 1 bytes @ 0x0
  1526                           
  1527  0047                     calculate_checksum@num:	
  1528                           ; 1 bytes @ 0x0
  1529                           
  1530  0047                     config@conf:	
  1531                           ; 1 bytes @ 0x0
  1532                           
  1533                           
  1534                           ; 2 bytes @ 0x0
  1535  0047                     	ds	1
  1536  0048                     ??_calculate_checksum:	
  1537  0048                     ??_setGain:	
  1538                           ; 1 bytes @ 0x1
  1539                           
  1540  0048                     ??_setFreq:	
  1541                           ; 1 bytes @ 0x1
  1542                           
  1543  0048                     ??_lputs_ISR:	
  1544                           ; 1 bytes @ 0x1
  1545                           
  1546                           
  1547                           ; 1 bytes @ 0x1
  1548  0048                     	ds	1
  1549  0049                     ??_ADC_5:	
  1550  0049                     ??_config:	
  1551                           ; 1 bytes @ 0x2
  1552                           
  1553  0049                     setGain@aux:	
  1554                           ; 1 bytes @ 0x2
  1555                           
  1556  0049                     setFreq@asic:	
  1557                           ; 1 bytes @ 0x2
  1558                           
  1559                           
  1560                           ; 1 bytes @ 0x2
  1561  0049                     	ds	1
  1562  004A                     config@i:	
  1563  004A                     setGain@asic:	
  1564                           ; 1 bytes @ 0x3
  1565                           
  1566  004A                     setFreq@aux:	
  1567                           ; 1 bytes @ 0x3
  1568                           
  1569  004A                     lputs_ISR@i:	
  1570                           ; 1 bytes @ 0x3
  1571                           
  1572  004A                     calculate_checksum@check:	
  1573                           ; 1 bytes @ 0x3
  1574                           
  1575                           
  1576                           ; 1 bytes @ 0x3
  1577  004A                     	ds	1
  1578  004B                     config@out:	
  1579  004B                     lputs_ISR@data:	
  1580                           ; 1 bytes @ 0x4
  1581                           
  1582  004B                     calculate_checksum@data:	
  1583                           ; 1 bytes @ 0x4
  1584                           
  1585  004B                     ADC_5@ADC_value:	
  1586                           ; 1 bytes @ 0x4
  1587                           
  1588                           
  1589                           ; 2 bytes @ 0x4
  1590  004B                     	ds	1
  1591  004C                     calculate_checksum@i:	
  1592                           
  1593                           ; 1 bytes @ 0x5
  1594  004C                     	ds	1
  1595  004D                     ?_measure:	
  1596  004D                     measure@Q:	
  1597                           ; 1 bytes @ 0x6
  1598                           
  1599                           
  1600                           ; 1 bytes @ 0x6
  1601  004D                     	ds	1
  1602  004E                     measure@asic:	
  1603                           
  1604                           ; 2 bytes @ 0x7
  1605  004E                     	ds	2
  1606  0050                     ??_measure:	
  1607                           
  1608                           ; 1 bytes @ 0x9
  1609  0050                     	ds	4
  1610  0054                     measure@offset:	
  1611                           
  1612                           ; 2 bytes @ 0xD
  1613  0054                     	ds	2
  1614  0056                     measure@I:	
  1615                           
  1616                           ; 1 bytes @ 0xF
  1617  0056                     	ds	1
  1618  0057                     measure@value:	
  1619                           
  1620                           ; 2 bytes @ 0x10
  1621  0057                     	ds	2
  1622  0059                     measure@aux2:	
  1623                           
  1624                           ; 2 bytes @ 0x12
  1625  0059                     	ds	2
  1626  005B                     measure@aux1:	
  1627                           
  1628                           ; 2 bytes @ 0x14
  1629  005B                     	ds	2
  1630  005D                     ??_sweep:	
  1631                           
  1632                           ; 1 bytes @ 0x16
  1633  005D                     	ds	2
  1634  005F                     ??_main:	
  1635                           
  1636                           ; 1 bytes @ 0x18
  1637  005F                     	ds	1
  1638                           
  1639                           	psect	maintext
  1640  02AD                     __pmaintext:	
  1641 ;;
  1642 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1643 ;;
  1644 ;; *************** function _main *****************
  1645 ;; Defined at:
  1646 ;;		line 28 in file "main.c"
  1647 ;; Parameters:    Size  Location     Type
  1648 ;;		None
  1649 ;; Auto vars:     Size  Location     Type
  1650 ;;  i               1    0        unsigned char 
  1651 ;; Return value:  Size  Location     Type
  1652 ;;                  1    wreg      void 
  1653 ;; Registers used:
  1654 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1655 ;; Tracked objects:
  1656 ;;		On entry : B1F/0
  1657 ;;		On exit  : 0/0
  1658 ;;		Unchanged: 0/0
  1659 ;; Data sizes:     COMMON   BANK0   BANK1
  1660 ;;      Params:         0       0       0
  1661 ;;      Locals:         0       0       0
  1662 ;;      Temps:          0       1       0
  1663 ;;      Totals:         0       1       0
  1664 ;;Total ram usage:        1 bytes
  1665 ;; Hardware stack levels required when called:    5
  1666 ;; This function calls:
  1667 ;;		_SYSTEM_Initialize
  1668 ;;		_USARTX_change_pol
  1669 ;;		_setup_ADC
  1670 ;;		_setup_TMR0
  1671 ;;		_start_RCM
  1672 ;;		_start_RX_USART_ISR
  1673 ;;		_start_TX_USART_ISR
  1674 ;;		_sweep
  1675 ;; This function is called by:
  1676 ;;		Startup code after reset
  1677 ;; This function uses a non-reentrant model
  1678 ;;
  1679                           
  1680                           
  1681                           ;psect for function _main
  1682  02AD                     _main:	
  1683                           
  1684                           ;main.c: 30: unsigned char i;
  1685                           ;main.c: 32: SYSTEM_Initialize();
  1686                           
  1687                           ;incstack = 0
  1688                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1689  02AD  23BD               	fcall	_SYSTEM_Initialize
  1690                           
  1691                           ;main.c: 34: USARTX_change_pol();
  1692  02AE  23BA               	fcall	_USARTX_change_pol
  1693                           
  1694                           ;main.c: 36: setup_TMR0();
  1695  02AF  239D               	fcall	_setup_TMR0
  1696                           
  1697                           ;main.c: 37: start_TX_USART_ISR();
  1698  02B0  2387               	fcall	_start_TX_USART_ISR
  1699                           
  1700                           ;main.c: 38: start_RX_USART_ISR();
  1701  02B1  2355               	fcall	_start_RX_USART_ISR
  1702                           
  1703                           ;main.c: 39: start_RCM();
  1704  02B2  23B6               	fcall	_start_RCM
  1705                           
  1706                           ;main.c: 40: setup_ADC();
  1707  02B3  23AA               	fcall	_setup_ADC
  1708                           
  1709                           ;main.c: 43: RA5 = 0;
  1710  02B4  0020               	movlb	0	; select bank0
  1711  02B5  128C               	bcf	12,5	;volatile
  1712                           
  1713                           ;main.c: 44: _delay((unsigned long)((150)*(500000/4000.0)));
  1714  02B6  3019               	movlw	25
  1715  02B7  0020               	movlb	0	; select bank0
  1716  02B8  00DF               	movwf	??_main
  1717  02B9  3058               	movlw	88
  1718  02BA                     u1487:	
  1719  02BA  0B89               	decfsz	9,f
  1720  02BB  2ABA               	goto	u1487
  1721  02BC  0BDF               	decfsz	??_main,f
  1722  02BD  2ABA               	goto	u1487
  1723  02BE  0000               	nop
  1724                           
  1725                           ;main.c: 45: RA5 = 1;
  1726  02BF  0020               	movlb	0	; select bank0
  1727  02C0  168C               	bsf	12,5	;volatile
  1728  02C1                     l119:	
  1729                           ;main.c: 117: while(1) {
  1730                           
  1731  02C1  0064               	clrwdt	;# 
  1732                           
  1733                           ;main.c: 120: if (TIMER0_flag) {
  1734  02C2  0020               	movlb	0	; select bank0
  1735  02C3  0839               	movf	_TIMER0_flag,w	;volatile
  1736  02C4  1903               	btfsc	3,2
  1737  02C5  2AC1               	goto	l119
  1738                           
  1739                           ;main.c: 121: TIMER0_flag = 0;
  1740  02C6  01B9               	clrf	_TIMER0_flag	;volatile
  1741                           
  1742                           ;main.c: 123: if (USART_rx_index > 10) {
  1743  02C7  300B               	movlw	11
  1744  02C8  023B               	subwf	_USART_rx_index,w	;volatile
  1745  02C9  1C03               	skipc
  1746  02CA  2ACD               	goto	l2749
  1747                           
  1748                           ;main.c: 124: USART_rx_index = 0;
  1749  02CB  01BB               	clrf	_USART_rx_index	;volatile
  1750                           
  1751                           ;main.c: 125: continue;
  1752  02CC  2AC1               	goto	l119
  1753  02CD                     l2749:	
  1754                           
  1755                           ;main.c: 126: }
  1756                           ;main.c: 128: if(USART_rx_index == 0)
  1757  02CD  083B               	movf	_USART_rx_index,w	;volatile
  1758  02CE  1903               	btfsc	3,2
  1759                           
  1760                           ;main.c: 129: continue;
  1761  02CF  2AC1               	goto	l119
  1762                           
  1763                           ;main.c: 132: mess_rec_size = USART_rx_index;
  1764  02D0  083B               	movf	_USART_rx_index,w	;volatile
  1765  02D1  00DF               	movwf	??_main
  1766  02D2  085F               	movf	??_main,w
  1767  02D3  00BC               	movwf	_mess_rec_size	;volatile
  1768                           
  1769                           ;main.c: 133: USART_rx_index = 0;
  1770  02D4  01BB               	clrf	_USART_rx_index	;volatile
  1771                           
  1772                           ;main.c: 138: sweep();
  1773  02D5  2065               	fcall	_sweep
  1774  02D6  2AC1               	goto	l119
  1775  02D7                     __end_of_main:	
  1776                           
  1777                           	psect	text1
  1778  0065                     __ptext1:	
  1779 ;; *************** function _sweep *****************
  1780 ;; Defined at:
  1781 ;;		line 441 in file "comm.c"
  1782 ;; Parameters:    Size  Location     Type
  1783 ;;		None
  1784 ;; Auto vars:     Size  Location     Type
  1785 ;;  aux             7    1[BANK1 ] unsigned char [7]
  1786 ;;  asic            2   17[BANK1 ] struct .
  1787 ;;  Q               2   13[BANK1 ] short 
  1788 ;;  I               2   11[BANK1 ] short 
  1789 ;;  ret             1   16[BANK1 ] unsigned char 
  1790 ;;  gain_index      1   15[BANK1 ] unsigned char 
  1791 ;;  count           1   10[BANK1 ] unsigned char 
  1792 ;;  i               1    9[BANK1 ] unsigned char 
  1793 ;;  freq_index      1    8[BANK1 ] unsigned char 
  1794 ;;  check           1    0[BANK1 ] unsigned char 
  1795 ;; Return value:  Size  Location     Type
  1796 ;;                  1    wreg      void 
  1797 ;; Registers used:
  1798 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1799 ;; Tracked objects:
  1800 ;;		On entry : 0/0
  1801 ;;		On exit  : 0/0
  1802 ;;		Unchanged: 0/0
  1803 ;; Data sizes:     COMMON   BANK0   BANK1
  1804 ;;      Params:         0       0       0
  1805 ;;      Locals:         0       0      19
  1806 ;;      Temps:          0       2       0
  1807 ;;      Totals:         0       2      19
  1808 ;;Total ram usage:       21 bytes
  1809 ;; Hardware stack levels used:    1
  1810 ;; Hardware stack levels required when called:    4
  1811 ;; This function calls:
  1812 ;;		_calculate_checksum
  1813 ;;		_lputs_ISR
  1814 ;;		_measure
  1815 ;;		_setFreq
  1816 ;;		_setGain
  1817 ;; This function is called by:
  1818 ;;		_main
  1819 ;;		_mess_handler
  1820 ;; This function uses a non-reentrant model
  1821 ;;
  1822                           
  1823                           
  1824                           ;psect for function _sweep
  1825  0065                     _sweep:	
  1826                           
  1827                           ;comm.c: 443: unsigned char gain_index;
  1828                           ;comm.c: 444: unsigned char freq_index;
  1829                           ;comm.c: 445: unsigned char i, ret, count;
  1830                           ;comm.c: 446: short I,Q;
  1831                           ;comm.c: 447: unsigned char aux[7], check;
  1832                           ;comm.c: 450: BIO3 asic;
  1833                           ;comm.c: 451: asic.datashort = 0;
  1834                           
  1835                           ;incstack = 0
  1836                           ; Regs used in _sweep: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1837  0065  0021               	movlb	1	; select bank1
  1838  0066  01B1               	clrf	sweep@asic^(0+128)
  1839  0067  01B2               	clrf	(sweep@asic+1)^(0+128)
  1840                           
  1841                           ;comm.c: 462: freq_index = 10;
  1842  0068  300A               	movlw	10
  1843  0069  0020               	movlb	0	; select bank0
  1844  006A  00DD               	movwf	??_sweep
  1845  006B  085D               	movf	??_sweep,w
  1846  006C  0021               	movlb	1	; select bank1
  1847  006D  00A8               	movwf	sweep@freq_index^(0+128)
  1848                           
  1849                           ;comm.c: 463: gain_index = 0;
  1850  006E  01AF               	clrf	sweep@gain_index^(0+128)
  1851                           
  1852                           ;comm.c: 464: setGain(&asic,gain_index);
  1853  006F  082F               	movf	sweep@gain_index^(0+128),w
  1854  0070  0020               	movlb	0	; select bank0
  1855  0071  00DD               	movwf	??_sweep
  1856  0072  085D               	movf	??_sweep,w
  1857  0073  00C7               	movwf	setGain@gain_index
  1858  0074  30B1               	movlw	(low (sweep@asic| 0))& (0+255)
  1859  0075  21E1               	fcall	_setGain
  1860                           
  1861                           ;comm.c: 467: for (i = 0; i < 11; i++) {
  1862  0076  0021               	movlb	1	; select bank1
  1863  0077  01A9               	clrf	sweep@i^(0+128)
  1864  0078                     L1:	
  1865  0078  300B               	movlw	11
  1866  0079  0229               	subwf	sweep@i^(0+128),w
  1867  007A  1803               	btfsc	3,0
  1868  007B  0008               	return
  1869                           
  1870                           ;comm.c: 470: setFreq(&asic,freq_index);
  1871  007C  0828               	movf	sweep@freq_index^(0+128),w
  1872  007D  0020               	movlb	0	; select bank0
  1873  007E  00DD               	movwf	??_sweep
  1874  007F  085D               	movf	??_sweep,w
  1875  0080  00C7               	movwf	setFreq@freq_index
  1876  0081  30B1               	movlw	(low (sweep@asic| 0))& (0+255)
  1877  0082  22D7               	fcall	_setFreq
  1878                           
  1879                           ;comm.c: 477: count = 0;
  1880  0083  0021               	movlb	1	; select bank1
  1881  0084  01AA               	clrf	sweep@count^(0+128)
  1882                           
  1883                           ;comm.c: 478: ret = 0;
  1884  0085  01B0               	clrf	sweep@ret^(0+128)
  1885  0086                     l2671:	
  1886                           ;comm.c: 480: do {
  1887                           
  1888                           
  1889                           ;comm.c: 482: ret = measure(&I,&Q,asic);
  1890  0086  30AD               	movlw	(low (sweep@Q| 0))& (0+255)
  1891  0087  0020               	movlb	0	; select bank0
  1892  0088  00DD               	movwf	??_sweep
  1893  0089  085D               	movf	??_sweep,w
  1894  008A  00CD               	movwf	measure@Q
  1895  008B  0021               	movlb	1	; select bank1
  1896  008C  0832               	movf	(sweep@asic+1)^(0+128),w
  1897  008D  0020               	movlb	0	; select bank0
  1898  008E  00CF               	movwf	measure@asic+1
  1899  008F  0021               	movlb	1	; select bank1
  1900  0090  0831               	movf	sweep@asic^(0+128),w
  1901  0091  0020               	movlb	0	; select bank0
  1902  0092  00CE               	movwf	measure@asic
  1903  0093  30AB               	movlw	(low (sweep@I| 0))& (0+255)
  1904  0094  212C               	fcall	_measure
  1905  0095  0020               	movlb	0	; select bank0
  1906  0096  00DE               	movwf	??_sweep+1
  1907  0097  085E               	movf	??_sweep+1,w
  1908  0098  0021               	movlb	1	; select bank1
  1909  0099  00B0               	movwf	sweep@ret^(0+128)
  1910                           
  1911                           ;comm.c: 484: if (ret == 1) {
  1912  009A  0330               	decf	sweep@ret^(0+128),w
  1913  009B  1D03               	btfss	3,2
  1914  009C  28B2               	goto	l2687
  1915                           
  1916                           ;comm.c: 486: if (count == 2) break;
  1917  009D  3002               	movlw	2
  1918  009E  062A               	xorwf	sweep@count^(0+128),w
  1919  009F  1903               	btfsc	3,2
  1920  00A0  28D0               	goto	l2703
  1921                           
  1922                           ;comm.c: 487: count = ret;
  1923  00A1  0830               	movf	sweep@ret^(0+128),w
  1924  00A2  0020               	movlb	0	; select bank0
  1925  00A3  00DD               	movwf	??_sweep
  1926  00A4  085D               	movf	??_sweep,w
  1927  00A5  0021               	movlb	1	; select bank1
  1928  00A6  00AA               	movwf	sweep@count^(0+128)
  1929                           
  1930                           ;comm.c: 490: if (gain_index < 7) {
  1931  00A7  3007               	movlw	7
  1932  00A8  022F               	subwf	sweep@gain_index^(0+128),w
  1933  00A9  1803               	skipnc
  1934  00AA  28D0               	goto	l2703
  1935                           
  1936                           ;comm.c: 494: gain_index++;
  1937  00AB  3001               	movlw	1
  1938  00AC  0020               	movlb	0	; select bank0
  1939  00AD  00DD               	movwf	??_sweep
  1940  00AE  085D               	movf	??_sweep,w
  1941  00AF  0021               	movlb	1	; select bank1
  1942  00B0  07AF               	addwf	sweep@gain_index^(0+128),f
  1943  00B1  28C5               	goto	L2
  1944  00B2                     l2687:	
  1945                           ;comm.c: 502: } else if (ret == 2) {
  1946                           
  1947                           ;comm.c: 498: }
  1948                           ;comm.c: 500: continue;
  1949                           
  1950                           ;comm.c: 497: break;
  1951                           
  1952                           ;comm.c: 496: } else {
  1953                           
  1954                           ;comm.c: 495: setGain(&asic,gain_index);
  1955                           
  1956  00B2  3002               	movlw	2
  1957  00B3  0021               	movlb	1	; select bank1
  1958  00B4  0630               	xorwf	sweep@ret^(0+128),w
  1959  00B5  1D03               	btfss	3,2
  1960  00B6  28CC               	goto	l2701
  1961                           
  1962                           ;comm.c: 504: if (count == 1) break;
  1963  00B7  032A               	decf	sweep@count^(0+128),w
  1964  00B8  1903               	btfsc	3,2
  1965  00B9  28D0               	goto	l2703
  1966                           
  1967                           ;comm.c: 505: count = ret;
  1968  00BA  0830               	movf	sweep@ret^(0+128),w
  1969  00BB  0020               	movlb	0	; select bank0
  1970  00BC  00DD               	movwf	??_sweep
  1971  00BD  085D               	movf	??_sweep,w
  1972  00BE  0021               	movlb	1	; select bank1
  1973  00BF  00AA               	movwf	sweep@count^(0+128)
  1974                           
  1975                           ;comm.c: 507: if (gain_index > 0) {
  1976  00C0  082F               	movf	sweep@gain_index^(0+128),w
  1977  00C1  1903               	btfsc	3,2
  1978  00C2  28D0               	goto	l2703
  1979                           
  1980                           ;comm.c: 508: gain_index--;
  1981  00C3  3001               	movlw	1
  1982  00C4  02AF               	subwf	sweep@gain_index^(0+128),f
  1983  00C5                     L2:	
  1984                           
  1985                           ;comm.c: 509: setGain(&asic,gain_index);
  1986  00C5  082F               	movf	sweep@gain_index^(0+128),w
  1987  00C6  0020               	movlb	0	; select bank0
  1988  00C7  00DD               	movwf	??_sweep
  1989  00C8  085D               	movf	??_sweep,w
  1990  00C9  00C7               	movwf	setGain@gain_index
  1991  00CA  30B1               	movlw	(low (sweep@asic| 0))& (0+255)
  1992  00CB  21E1               	fcall	_setGain
  1993  00CC                     l2701:	
  1994                           ;comm.c: 512: }
  1995                           ;comm.c: 514: continue;
  1996                           
  1997                           ;comm.c: 511: break;
  1998                           
  1999                           ;comm.c: 510: } else {
  2000                           
  2001                           
  2002                           ;comm.c: 515: }
  2003                           ;comm.c: 517: } while (ret);
  2004  00CC  0021               	movlb	1	; select bank1
  2005  00CD  0830               	movf	sweep@ret^(0+128),w
  2006  00CE  1D03               	btfss	3,2
  2007  00CF  2886               	goto	l2671
  2008  00D0                     l2703:	
  2009                           
  2010                           ;comm.c: 523: ret = (freq_index << 4) & 0xf0;
  2011  00D0  0021               	movlb	1	; select bank1
  2012  00D1  0828               	movf	sweep@freq_index^(0+128),w
  2013  00D2  0020               	movlb	0	; select bank0
  2014  00D3  00DD               	movwf	??_sweep
  2015  00D4  3003               	movlw	3
  2016  00D5                     u1425:	
  2017  00D5  35DD               	lslf	??_sweep,f
  2018  00D6  3EFF               	addlw	-1
  2019  00D7  1D03               	skipz
  2020  00D8  28D5               	goto	u1425
  2021  00D9  355D               	lslf	??_sweep,w
  2022  00DA  39F0               	andlw	240
  2023  00DB  00DE               	movwf	??_sweep+1
  2024  00DC  085E               	movf	??_sweep+1,w
  2025  00DD  0021               	movlb	1	; select bank1
  2026  00DE  00B0               	movwf	sweep@ret^(0+128)
  2027                           
  2028                           ;comm.c: 524: ret |= (gain_index & 0xff);
  2029  00DF  082F               	movf	sweep@gain_index^(0+128),w
  2030  00E0  0020               	movlb	0	; select bank0
  2031  00E1  00DD               	movwf	??_sweep
  2032  00E2  085D               	movf	??_sweep,w
  2033  00E3  0021               	movlb	1	; select bank1
  2034  00E4  04B0               	iorwf	sweep@ret^(0+128),f
  2035                           
  2036                           ;comm.c: 526: aux[0] = 'f';
  2037  00E5  3066               	movlw	102
  2038  00E6  0020               	movlb	0	; select bank0
  2039  00E7  00DD               	movwf	??_sweep
  2040  00E8  085D               	movf	??_sweep,w
  2041  00E9  0021               	movlb	1	; select bank1
  2042  00EA  00A1               	movwf	sweep@aux^(0+128)
  2043                           
  2044                           ;comm.c: 527: aux[1] = (unsigned char)(I & 0xff);
  2045  00EB  082B               	movf	sweep@I^(0+128),w
  2046  00EC  0020               	movlb	0	; select bank0
  2047  00ED  00DD               	movwf	??_sweep
  2048  00EE  085D               	movf	??_sweep,w
  2049  00EF  0021               	movlb	1	; select bank1
  2050  00F0  00A2               	movwf	(sweep@aux^(0+128)+1)
  2051                           
  2052                           ;comm.c: 528: aux[2] = (unsigned char)((I >> 8) & 0xff);
  2053  00F1  082C               	movf	(sweep@I+1)^(0+128),w
  2054  00F2  0020               	movlb	0	; select bank0
  2055  00F3  00DD               	movwf	??_sweep
  2056  00F4  085D               	movf	??_sweep,w
  2057  00F5  0021               	movlb	1	; select bank1
  2058  00F6  00A3               	movwf	(sweep@aux^(0+128)+2)
  2059                           
  2060                           ;comm.c: 529: aux[3] = (unsigned char)(Q & 0xff);
  2061  00F7  082D               	movf	sweep@Q^(0+128),w
  2062  00F8  0020               	movlb	0	; select bank0
  2063  00F9  00DD               	movwf	??_sweep
  2064  00FA  085D               	movf	??_sweep,w
  2065  00FB  0021               	movlb	1	; select bank1
  2066  00FC  00A4               	movwf	(sweep@aux^(0+128)+3)
  2067                           
  2068                           ;comm.c: 530: aux[4] = (unsigned char)((Q >> 8) & 0xff);
  2069  00FD  082E               	movf	(sweep@Q+1)^(0+128),w
  2070  00FE  0020               	movlb	0	; select bank0
  2071  00FF  00DD               	movwf	??_sweep
  2072  0100  085D               	movf	??_sweep,w
  2073  0101  0021               	movlb	1	; select bank1
  2074  0102  00A5               	movwf	(sweep@aux^(0+128)+4)
  2075                           
  2076                           ;comm.c: 531: aux[5] = ret;
  2077  0103  0830               	movf	sweep@ret^(0+128),w
  2078  0104  0020               	movlb	0	; select bank0
  2079  0105  00DD               	movwf	??_sweep
  2080  0106  085D               	movf	??_sweep,w
  2081  0107  0021               	movlb	1	; select bank1
  2082  0108  00A6               	movwf	(sweep@aux^(0+128)+5)
  2083                           
  2084                           ;comm.c: 533: check = calculate_checksum(aux,6);
  2085  0109  3006               	movlw	6
  2086  010A  0020               	movlb	0	; select bank0
  2087  010B  00DD               	movwf	??_sweep
  2088  010C  085D               	movf	??_sweep,w
  2089  010D  00C7               	movwf	calculate_checksum@num
  2090  010E  30A1               	movlw	(low (sweep@aux| 0))& (0+255)
  2091  010F  2323               	fcall	_calculate_checksum
  2092  0110  0020               	movlb	0	; select bank0
  2093  0111  00DE               	movwf	??_sweep+1
  2094  0112  085E               	movf	??_sweep+1,w
  2095  0113  0021               	movlb	1	; select bank1
  2096  0114  00A0               	movwf	sweep@check^(0+128)
  2097                           
  2098                           ;comm.c: 534: aux[6] = check;
  2099  0115  0820               	movf	sweep@check^(0+128),w
  2100  0116  0020               	movlb	0	; select bank0
  2101  0117  00DD               	movwf	??_sweep
  2102  0118  085D               	movf	??_sweep,w
  2103  0119  0021               	movlb	1	; select bank1
  2104  011A  00A7               	movwf	(sweep@aux^(0+128)+6)
  2105                           
  2106                           ;comm.c: 537: lputs_ISR(aux,7);
  2107  011B  3007               	movlw	7
  2108  011C  0020               	movlb	0	; select bank0
  2109  011D  00DD               	movwf	??_sweep
  2110  011E  085D               	movf	??_sweep,w
  2111  011F  00C7               	movwf	lputs_ISR@length
  2112  0120  30A1               	movlw	(low (sweep@aux| 0))& (0+255)
  2113  0121  2282               	fcall	_lputs_ISR
  2114                           
  2115                           ;comm.c: 547: freq_index--;
  2116  0122  3001               	movlw	1
  2117  0123  0021               	movlb	1	; select bank1
  2118  0124  02A8               	subwf	sweep@freq_index^(0+128),f
  2119  0125  3001               	movlw	1
  2120  0126  0020               	movlb	0	; select bank0
  2121  0127  00DD               	movwf	??_sweep
  2122  0128  085D               	movf	??_sweep,w
  2123  0129  0021               	movlb	1	; select bank1
  2124  012A  07A9               	addwf	sweep@i^(0+128),f
  2125  012B  2878               	goto	L1
  2126  012C                     __end_of_sweep:	
  2127                           
  2128                           	psect	text2
  2129  01E1                     __ptext2:	
  2130 ;; *************** function _setGain *****************
  2131 ;; Defined at:
  2132 ;;		line 161 in file "bio3.c"
  2133 ;; Parameters:    Size  Location     Type
  2134 ;;  asic            1    wreg     PTR struct .
  2135 ;;		 -> sweep@asic(2), 
  2136 ;;  gain_index      1    0[BANK0 ] unsigned char 
  2137 ;; Auto vars:     Size  Location     Type
  2138 ;;  asic            1    3[BANK0 ] PTR struct .
  2139 ;;		 -> sweep@asic(2), 
  2140 ;;  aux             1    2[BANK0 ] struct .
  2141 ;; Return value:  Size  Location     Type
  2142 ;;                  1    wreg      void 
  2143 ;; Registers used:
  2144 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, pclath
  2145 ;; Tracked objects:
  2146 ;;		On entry : 0/0
  2147 ;;		On exit  : 0/0
  2148 ;;		Unchanged: 0/0
  2149 ;; Data sizes:     COMMON   BANK0   BANK1
  2150 ;;      Params:         0       1       0
  2151 ;;      Locals:         0       2       0
  2152 ;;      Temps:          0       1       0
  2153 ;;      Totals:         0       4       0
  2154 ;;Total ram usage:        4 bytes
  2155 ;; Hardware stack levels used:    1
  2156 ;; Hardware stack levels required when called:    2
  2157 ;; This function calls:
  2158 ;;		Nothing
  2159 ;; This function is called by:
  2160 ;;		_sweep
  2161 ;; This function uses a non-reentrant model
  2162 ;;
  2163                           
  2164                           
  2165                           ;psect for function _setGain
  2166  01E1                     _setGain:	
  2167                           
  2168                           ;incstack = 0
  2169                           ; Regs used in _setGain: [wreg-fsr1h+pclath]
  2170                           ;setGain@asic stored from wreg
  2171  01E1  0020               	movlb	0	; select bank0
  2172  01E2  00CA               	movwf	setGain@asic
  2173                           
  2174                           ;bio3.c: 163: RADIO_gain aux;
  2175                           ;bio3.c: 164: aux.data = gains[gain_index];
  2176  01E3  0847               	movf	setGain@gain_index,w
  2177  01E4  3E4B               	addlw	low (_gains| (0+32768))
  2178  01E5  0084               	movwf	4
  2179  01E6  3082               	movlw	high (_gains| (0+32768))
  2180  01E7  1803               	skipnc
  2181  01E8  3E01               	addlw	1
  2182  01E9  0085               	movwf	5
  2183  01EA  0800               	movf	0,w	;code access
  2184  01EB  00C8               	movwf	??_setGain
  2185  01EC  0848               	movf	??_setGain,w
  2186  01ED  00C9               	movwf	setGain@aux
  2187                           
  2188                           ;bio3.c: 166: asic->data_bits.GD0 = aux.data_bits.GD0;
  2189  01EE  084A               	movf	setGain@asic,w
  2190  01EF  0086               	movwf	6
  2191  01F0  0187               	clrf	7
  2192  01F1  1101               	bcf	1,2
  2193  01F2  1849               	btfsc	setGain@aux,0
  2194  01F3  1501               	bsf	1,2
  2195                           
  2196                           ;bio3.c: 167: asic->data_bits.GD1 = aux.data_bits.GD1;
  2197  01F4  0020               	movlb	0	; select bank0
  2198  01F5  084A               	movf	setGain@asic,w
  2199  01F6  0086               	movwf	6
  2200  01F7  0187               	clrf	7
  2201  01F8  1181               	bcf	1,3
  2202  01F9  18C9               	btfsc	setGain@aux,1
  2203  01FA  1581               	bsf	1,3
  2204                           
  2205                           ;bio3.c: 168: asic->data_bits.GD2 = aux.data_bits.GD2;
  2206  01FB  0020               	movlb	0	; select bank0
  2207  01FC  084A               	movf	setGain@asic,w
  2208  01FD  0086               	movwf	6
  2209  01FE  0187               	clrf	7
  2210  01FF  1201               	bcf	1,4
  2211  0200  1949               	btfsc	setGain@aux,2
  2212  0201  1601               	bsf	1,4
  2213                           
  2214                           ;bio3.c: 169: asic->data_bits.GS0 = aux.data_bits.GS0;
  2215  0202  0020               	movlb	0	; select bank0
  2216  0203  084A               	movf	setGain@asic,w
  2217  0204  0086               	movwf	6
  2218  0205  0187               	clrf	7
  2219  0206  1381               	bcf	1,7
  2220  0207  19C9               	btfsc	setGain@aux,3
  2221  0208  1781               	bsf	1,7
  2222                           
  2223                           ;bio3.c: 170: asic->data_bits.GS1 = aux.data_bits.GS1;
  2224  0209  0020               	movlb	0	; select bank0
  2225  020A  0A4A               	incf	setGain@asic,w
  2226  020B  0086               	movwf	6
  2227  020C  0187               	clrf	7
  2228  020D  1001               	bcf	1,0
  2229  020E  1A49               	btfsc	setGain@aux,4
  2230  020F  1401               	bsf	1,0
  2231                           
  2232                           ;bio3.c: 171: asic->data_bits.GS2 = aux.data_bits.GS2;
  2233  0210  0020               	movlb	0	; select bank0
  2234  0211  0A4A               	incf	setGain@asic,w
  2235  0212  0086               	movwf	6
  2236  0213  0187               	clrf	7
  2237  0214  1081               	bcf	1,1
  2238  0215  1AC9               	btfsc	setGain@aux,5
  2239  0216  1481               	bsf	1,1
  2240                           
  2241                           ;bio3.c: 172: asic->data_bits.GS3 = aux.data_bits.GS3;
  2242  0217  0020               	movlb	0	; select bank0
  2243  0218  0A4A               	incf	setGain@asic,w
  2244  0219  0086               	movwf	6
  2245  021A  0187               	clrf	7
  2246  021B  1101               	bcf	1,2
  2247  021C  1B49               	btfsc	setGain@aux,6
  2248  021D  1501               	bsf	1,2
  2249  021E  0008               	return
  2250  021F                     __end_of_setGain:	
  2251                           
  2252                           	psect	text3
  2253  02D7                     __ptext3:	
  2254 ;; *************** function _setFreq *****************
  2255 ;; Defined at:
  2256 ;;		line 175 in file "bio3.c"
  2257 ;; Parameters:    Size  Location     Type
  2258 ;;  asic            1    wreg     PTR struct .
  2259 ;;		 -> sweep@asic(2), 
  2260 ;;  freq_index      1    0[BANK0 ] unsigned char 
  2261 ;; Auto vars:     Size  Location     Type
  2262 ;;  asic            1    2[BANK0 ] PTR struct .
  2263 ;;		 -> sweep@asic(2), 
  2264 ;;  aux             1    3[BANK0 ] struct .
  2265 ;; Return value:  Size  Location     Type
  2266 ;;                  1    wreg      void 
  2267 ;; Registers used:
  2268 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, pclath
  2269 ;; Tracked objects:
  2270 ;;		On entry : 0/0
  2271 ;;		On exit  : 0/0
  2272 ;;		Unchanged: 0/0
  2273 ;; Data sizes:     COMMON   BANK0   BANK1
  2274 ;;      Params:         0       1       0
  2275 ;;      Locals:         0       2       0
  2276 ;;      Temps:          0       1       0
  2277 ;;      Totals:         0       4       0
  2278 ;;Total ram usage:        4 bytes
  2279 ;; Hardware stack levels used:    1
  2280 ;; Hardware stack levels required when called:    2
  2281 ;; This function calls:
  2282 ;;		Nothing
  2283 ;; This function is called by:
  2284 ;;		_sweep
  2285 ;; This function uses a non-reentrant model
  2286 ;;
  2287                           
  2288                           
  2289                           ;psect for function _setFreq
  2290  02D7                     _setFreq:	
  2291                           
  2292                           ;incstack = 0
  2293                           ; Regs used in _setFreq: [wreg-fsr1h+pclath]
  2294                           ;setFreq@asic stored from wreg
  2295  02D7  0020               	movlb	0	; select bank0
  2296  02D8  00C9               	movwf	setFreq@asic
  2297                           
  2298                           ;bio3.c: 177: RADIO_freq aux;
  2299                           ;bio3.c: 178: aux.data = freqs[freq_index];
  2300  02D9  0847               	movf	setFreq@freq_index,w
  2301  02DA  3E40               	addlw	low (_freqs| (0+32768))
  2302  02DB  0084               	movwf	4
  2303  02DC  3082               	movlw	high (_freqs| (0+32768))
  2304  02DD  1803               	skipnc
  2305  02DE  3E01               	addlw	1
  2306  02DF  0085               	movwf	5
  2307  02E0  0800               	movf	0,w	;code access
  2308  02E1  00C8               	movwf	??_setFreq
  2309  02E2  0848               	movf	??_setFreq,w
  2310  02E3  00CA               	movwf	setFreq@aux
  2311                           
  2312                           ;bio3.c: 180: asic->data_bits.F0 = aux.data_bits.F0;
  2313  02E4  0A49               	incf	setFreq@asic,w
  2314  02E5  0086               	movwf	6
  2315  02E6  0187               	clrf	7
  2316  02E7  1201               	bcf	1,4
  2317  02E8  184A               	btfsc	setFreq@aux,0
  2318  02E9  1601               	bsf	1,4
  2319                           
  2320                           ;bio3.c: 181: asic->data_bits.F1 = aux.data_bits.F1;
  2321  02EA  0020               	movlb	0	; select bank0
  2322  02EB  0A49               	incf	setFreq@asic,w
  2323  02EC  0086               	movwf	6
  2324  02ED  0187               	clrf	7
  2325  02EE  1281               	bcf	1,5
  2326  02EF  18CA               	btfsc	setFreq@aux,1
  2327  02F0  1681               	bsf	1,5
  2328                           
  2329                           ;bio3.c: 182: asic->data_bits.F2 = aux.data_bits.F2;
  2330  02F1  0020               	movlb	0	; select bank0
  2331  02F2  0A49               	incf	setFreq@asic,w
  2332  02F3  0086               	movwf	6
  2333  02F4  0187               	clrf	7
  2334  02F5  1301               	bcf	1,6
  2335  02F6  194A               	btfsc	setFreq@aux,2
  2336  02F7  1701               	bsf	1,6
  2337                           
  2338                           ;bio3.c: 183: asic->data_bits.F3 = aux.data_bits.F3;
  2339  02F8  0020               	movlb	0	; select bank0
  2340  02F9  0A49               	incf	setFreq@asic,w
  2341  02FA  0086               	movwf	6
  2342  02FB  0187               	clrf	7
  2343  02FC  1381               	bcf	1,7
  2344  02FD  19CA               	btfsc	setFreq@aux,3
  2345  02FE  1781               	bsf	1,7
  2346  02FF  0008               	return
  2347  0300                     __end_of_setFreq:	
  2348                           
  2349                           	psect	text4
  2350  012C                     __ptext4:	
  2351 ;; *************** function _measure *****************
  2352 ;; Defined at:
  2353 ;;		line 556 in file "comm.c"
  2354 ;; Parameters:    Size  Location     Type
  2355 ;;  I               1    wreg     PTR short 
  2356 ;;		 -> sweep@I(2), 
  2357 ;;  Q               1    6[BANK0 ] PTR short 
  2358 ;;		 -> sweep@Q(2), 
  2359 ;;  asic            2    7[BANK0 ] struct .
  2360 ;; Auto vars:     Size  Location     Type
  2361 ;;  I               1   15[BANK0 ] PTR short 
  2362 ;;		 -> sweep@I(2), 
  2363 ;;  aux1            2   20[BANK0 ] short 
  2364 ;;  aux2            2   18[BANK0 ] short 
  2365 ;;  value           2   16[BANK0 ] unsigned short 
  2366 ;;  offset          2   13[BANK0 ] unsigned short 
  2367 ;; Return value:  Size  Location     Type
  2368 ;;                  1    wreg      unsigned char 
  2369 ;; Registers used:
  2370 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2371 ;; Tracked objects:
  2372 ;;		On entry : 0/0
  2373 ;;		On exit  : 0/0
  2374 ;;		Unchanged: 0/0
  2375 ;; Data sizes:     COMMON   BANK0   BANK1
  2376 ;;      Params:         0       3       0
  2377 ;;      Locals:         0       9       0
  2378 ;;      Temps:          0       4       0
  2379 ;;      Totals:         0      16       0
  2380 ;;Total ram usage:       16 bytes
  2381 ;; Hardware stack levels used:    1
  2382 ;; Hardware stack levels required when called:    3
  2383 ;; This function calls:
  2384 ;;		_ADC_5
  2385 ;;		_config
  2386 ;; This function is called by:
  2387 ;;		_sweep
  2388 ;; This function uses a non-reentrant model
  2389 ;;
  2390                           
  2391                           
  2392                           ;psect for function _measure
  2393  012C                     _measure:	
  2394                           
  2395                           ;incstack = 0
  2396                           ; Regs used in _measure: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2397                           ;measure@I stored from wreg
  2398  012C  0020               	movlb	0	; select bank0
  2399  012D  00D6               	movwf	measure@I
  2400                           
  2401                           ;comm.c: 561: unsigned short offset, value;
  2402                           ;comm.c: 562: short aux1,aux2;
  2403                           ;comm.c: 566: asic.data_bits.CE = 0;
  2404  012E  134E               	bcf	measure@asic,6
  2405                           
  2406                           ;comm.c: 567: config(asic);
  2407  012F  084F               	movf	measure@asic+1,w
  2408  0130  00C8               	movwf	config@conf+1
  2409  0131  084E               	movf	measure@asic,w
  2410  0132  00C7               	movwf	config@conf
  2411  0133  2253               	fcall	_config
  2412                           
  2413                           ;comm.c: 568: _delay((unsigned long)((20)*(500000/4000.0)));
  2414  0134  3004               	movlw	4
  2415  0135  0020               	movlb	0	; select bank0
  2416  0136  00D0               	movwf	??_measure
  2417  0137  303D               	movlw	61
  2418  0138                     u1497:	
  2419  0138  0B89               	decfsz	9,f
  2420  0139  2938               	goto	u1497
  2421  013A  0BD0               	decfsz	??_measure,f
  2422  013B  2938               	goto	u1497
  2423  013C  3200               	nop2
  2424                           
  2425                           ;comm.c: 570: offset = ADC_5();
  2426  013D  2300               	fcall	_ADC_5
  2427  013E  0020               	movlb	0	; select bank0
  2428  013F  0848               	movf	?_ADC_5+1,w
  2429  0140  00D5               	movwf	measure@offset+1
  2430  0141  0847               	movf	?_ADC_5,w
  2431  0142  00D4               	movwf	measure@offset
  2432                           
  2433                           ;comm.c: 573: asic.data_bits.CE = 1;
  2434  0143  174E               	bsf	measure@asic,6
  2435                           
  2436                           ;comm.c: 574: asic.data_bits.IQ = 0;
  2437  0144  11CF               	bcf	measure@asic+1,3
  2438                           
  2439                           ;comm.c: 576: config(asic);
  2440  0145  084F               	movf	measure@asic+1,w
  2441  0146  00C8               	movwf	config@conf+1
  2442  0147  084E               	movf	measure@asic,w
  2443  0148  00C7               	movwf	config@conf
  2444  0149  2253               	fcall	_config
  2445                           
  2446                           ;comm.c: 577: _delay((unsigned long)((20)*(500000/4000.0)));
  2447  014A  3004               	movlw	4
  2448  014B  0020               	movlb	0	; select bank0
  2449  014C  00D0               	movwf	??_measure
  2450  014D  303D               	movlw	61
  2451  014E                     u1507:	
  2452  014E  0B89               	decfsz	9,f
  2453  014F  294E               	goto	u1507
  2454  0150  0BD0               	decfsz	??_measure,f
  2455  0151  294E               	goto	u1507
  2456  0152  3200               	nop2
  2457                           
  2458                           ;comm.c: 579: value = ADC_5();
  2459  0153  2300               	fcall	_ADC_5
  2460  0154  0020               	movlb	0	; select bank0
  2461  0155  0848               	movf	?_ADC_5+1,w
  2462  0156  00D8               	movwf	measure@value+1
  2463  0157  0847               	movf	?_ADC_5,w
  2464  0158  00D7               	movwf	measure@value
  2465                           
  2466                           ;comm.c: 580: *I = (value - offset);
  2467  0159  0954               	comf	measure@offset,w
  2468  015A  00D0               	movwf	??_measure
  2469  015B  0955               	comf	measure@offset+1,w
  2470  015C  00D1               	movwf	??_measure+1
  2471  015D  0AD0               	incf	??_measure,f
  2472  015E  1903               	skipnz
  2473  015F  0AD1               	incf	??_measure+1,f
  2474  0160  0857               	movf	measure@value,w
  2475  0161  0750               	addwf	??_measure,w
  2476  0162  00D2               	movwf	??_measure+2
  2477  0163  0858               	movf	measure@value+1,w
  2478  0164  3D51               	addwfc	??_measure+1,w
  2479  0165  00D3               	movwf	??_measure+3
  2480  0166  0856               	movf	measure@I,w
  2481  0167  0086               	movwf	6
  2482  0168  0187               	clrf	7
  2483  0169  0852               	movf	??_measure+2,w
  2484  016A  3FC0               	movwi [0]fsr1
  2485  016B  0853               	movf	??_measure+3,w
  2486  016C  3FC1               	movwi [1]fsr1
  2487                           
  2488                           ;comm.c: 581: aux1 = *I;
  2489  016D  0856               	movf	measure@I,w
  2490  016E  0086               	movwf	6
  2491  016F  0187               	clrf	7
  2492  0170  3F40               	moviw [0]fsr1
  2493  0171  00DB               	movwf	measure@aux1
  2494  0172  3F41               	moviw [1]fsr1
  2495  0173  00DC               	movwf	measure@aux1+1
  2496                           
  2497                           ;comm.c: 583: if (aux1 < 0) {
  2498  0174  1FDC               	btfss	measure@aux1+1,7
  2499  0175  297B               	goto	l2561
  2500                           
  2501                           ;comm.c: 584: aux1 = -aux1;
  2502  0176  09DB               	comf	measure@aux1,f
  2503  0177  09DC               	comf	measure@aux1+1,f
  2504  0178  0ADB               	incf	measure@aux1,f
  2505  0179  1903               	skipnz
  2506  017A  0ADC               	incf	measure@aux1+1,f
  2507  017B                     l2561:	
  2508                           
  2509                           ;comm.c: 585: }
  2510                           ;comm.c: 590: asic.data_bits.IQ = 1;
  2511  017B  15CF               	bsf	measure@asic+1,3
  2512                           
  2513                           ;comm.c: 592: config(asic);
  2514  017C  084F               	movf	measure@asic+1,w
  2515  017D  00C8               	movwf	config@conf+1
  2516  017E  084E               	movf	measure@asic,w
  2517  017F  00C7               	movwf	config@conf
  2518  0180  2253               	fcall	_config
  2519                           
  2520                           ;comm.c: 593: _delay((unsigned long)((20)*(500000/4000.0)));
  2521  0181  3004               	movlw	4
  2522  0182  0020               	movlb	0	; select bank0
  2523  0183  00D0               	movwf	??_measure
  2524  0184  303D               	movlw	61
  2525  0185                     u1517:	
  2526  0185  0B89               	decfsz	9,f
  2527  0186  2985               	goto	u1517
  2528  0187  0BD0               	decfsz	??_measure,f
  2529  0188  2985               	goto	u1517
  2530  0189  3200               	nop2
  2531                           
  2532                           ;comm.c: 595: value = ADC_5();
  2533  018A  2300               	fcall	_ADC_5
  2534  018B  0020               	movlb	0	; select bank0
  2535  018C  0848               	movf	?_ADC_5+1,w
  2536  018D  00D8               	movwf	measure@value+1
  2537  018E  0847               	movf	?_ADC_5,w
  2538  018F  00D7               	movwf	measure@value
  2539                           
  2540                           ;comm.c: 596: *Q = (value - offset);
  2541  0190  0954               	comf	measure@offset,w
  2542  0191  00D0               	movwf	??_measure
  2543  0192  0955               	comf	measure@offset+1,w
  2544  0193  00D1               	movwf	??_measure+1
  2545  0194  0AD0               	incf	??_measure,f
  2546  0195  1903               	skipnz
  2547  0196  0AD1               	incf	??_measure+1,f
  2548  0197  0857               	movf	measure@value,w
  2549  0198  0750               	addwf	??_measure,w
  2550  0199  00D2               	movwf	??_measure+2
  2551  019A  0858               	movf	measure@value+1,w
  2552  019B  3D51               	addwfc	??_measure+1,w
  2553  019C  00D3               	movwf	??_measure+3
  2554  019D  084D               	movf	measure@Q,w
  2555  019E  0086               	movwf	6
  2556  019F  0187               	clrf	7
  2557  01A0  0852               	movf	??_measure+2,w
  2558  01A1  3FC0               	movwi [0]fsr1
  2559  01A2  0853               	movf	??_measure+3,w
  2560  01A3  3FC1               	movwi [1]fsr1
  2561                           
  2562                           ;comm.c: 597: aux2 = *Q;
  2563  01A4  084D               	movf	measure@Q,w
  2564  01A5  0086               	movwf	6
  2565  01A6  0187               	clrf	7
  2566  01A7  3F40               	moviw [0]fsr1
  2567  01A8  00D9               	movwf	measure@aux2
  2568  01A9  3F41               	moviw [1]fsr1
  2569  01AA  00DA               	movwf	measure@aux2+1
  2570                           
  2571                           ;comm.c: 599: if (aux2 < 0) {
  2572  01AB  1FDA               	btfss	measure@aux2+1,7
  2573  01AC  29B2               	goto	l2577
  2574                           
  2575                           ;comm.c: 600: aux2 = -aux2;
  2576  01AD  09D9               	comf	measure@aux2,f
  2577  01AE  09DA               	comf	measure@aux2+1,f
  2578  01AF  0AD9               	incf	measure@aux2,f
  2579  01B0  1903               	skipnz
  2580  01B1  0ADA               	incf	measure@aux2+1,f
  2581  01B2                     l2577:	
  2582                           
  2583                           ;comm.c: 601: }
  2584                           ;comm.c: 603: if (aux2 > aux1) {
  2585  01B2  085C               	movf	measure@aux1+1,w
  2586  01B3  3A80               	xorlw	128
  2587  01B4  00D0               	movwf	??_measure
  2588  01B5  085A               	movf	measure@aux2+1,w
  2589  01B6  3A80               	xorlw	128
  2590  01B7  0250               	subwf	??_measure,w
  2591  01B8  1D03               	skipz
  2592  01B9  29BC               	goto	u1315
  2593  01BA  0859               	movf	measure@aux2,w
  2594  01BB  025B               	subwf	measure@aux1,w
  2595  01BC                     u1315:	
  2596  01BC  1803               	skipnc
  2597  01BD  29C3               	goto	l412
  2598                           
  2599                           ;comm.c: 604: aux1 = aux2;
  2600  01BE  0020               	movlb	0	; select bank0
  2601  01BF  085A               	movf	measure@aux2+1,w
  2602  01C0  00DC               	movwf	measure@aux1+1
  2603  01C1  0859               	movf	measure@aux2,w
  2604  01C2  00DB               	movwf	measure@aux1
  2605  01C3                     l412:	
  2606                           
  2607                           ;comm.c: 605: }
  2608                           ;comm.c: 607: if (aux1 > 370) {
  2609  01C3  0020               	movlb	0	; select bank0
  2610  01C4  085C               	movf	measure@aux1+1,w
  2611  01C5  3A80               	xorlw	128
  2612  01C6  00D0               	movwf	??_measure
  2613  01C7  3081               	movlw	129
  2614  01C8  0250               	subwf	??_measure,w
  2615  01C9  1D03               	skipz
  2616  01CA  29CD               	goto	u1325
  2617  01CB  3073               	movlw	115
  2618  01CC  025B               	subwf	measure@aux1,w
  2619  01CD                     u1325:	
  2620  01CD  1C03               	skipc
  2621  01CE  29D1               	goto	l2587
  2622                           
  2623                           ;comm.c: 608: return 2;
  2624  01CF  3002               	movlw	2
  2625  01D0  0008               	return
  2626  01D1                     l2587:	
  2627                           ;comm.c: 609: } else if (aux1 < 86) {
  2628                           
  2629  01D1  0020               	movlb	0	; select bank0
  2630  01D2  085C               	movf	measure@aux1+1,w
  2631  01D3  3A80               	xorlw	128
  2632  01D4  00D0               	movwf	??_measure
  2633  01D5  3080               	movlw	128
  2634  01D6  0250               	subwf	??_measure,w
  2635  01D7  1D03               	skipz
  2636  01D8  29DB               	goto	u1335
  2637  01D9  3056               	movlw	86
  2638  01DA  025B               	subwf	measure@aux1,w
  2639  01DB                     u1335:	
  2640  01DB  1803               	skipnc
  2641  01DC  29DF               	goto	l2593
  2642                           
  2643                           ;comm.c: 610: return 1;
  2644  01DD  3001               	movlw	1
  2645  01DE  0008               	return
  2646  01DF                     l2593:	
  2647                           
  2648                           ;comm.c: 611: }
  2649                           ;comm.c: 613: return 0;
  2650  01DF  3000               	movlw	0
  2651  01E0  0008               	return
  2652  01E1                     __end_of_measure:	
  2653                           
  2654                           	psect	text5
  2655  0253                     __ptext5:	
  2656 ;; *************** function _config *****************
  2657 ;; Defined at:
  2658 ;;		line 131 in file "bio3.c"
  2659 ;; Parameters:    Size  Location     Type
  2660 ;;  conf            2    0[BANK0 ] struct .
  2661 ;; Auto vars:     Size  Location     Type
  2662 ;;  out             1    4[BANK0 ] unsigned char 
  2663 ;;  i               1    3[BANK0 ] unsigned char 
  2664 ;; Return value:  Size  Location     Type
  2665 ;;                  1    wreg      void 
  2666 ;; Registers used:
  2667 ;;		wreg, status,2, status,0
  2668 ;; Tracked objects:
  2669 ;;		On entry : 0/0
  2670 ;;		On exit  : 0/0
  2671 ;;		Unchanged: 0/0
  2672 ;; Data sizes:     COMMON   BANK0   BANK1
  2673 ;;      Params:         0       2       0
  2674 ;;      Locals:         0       2       0
  2675 ;;      Temps:          0       1       0
  2676 ;;      Totals:         0       5       0
  2677 ;;Total ram usage:        5 bytes
  2678 ;; Hardware stack levels used:    1
  2679 ;; Hardware stack levels required when called:    2
  2680 ;; This function calls:
  2681 ;;		Nothing
  2682 ;; This function is called by:
  2683 ;;		_measure
  2684 ;;		_config_ASIC
  2685 ;;		_measure_Impedance
  2686 ;;		_measure_Impedance_no_offset
  2687 ;;		_measure_Offset
  2688 ;;		_measure_Impedance_SE
  2689 ;; This function uses a non-reentrant model
  2690 ;;
  2691                           
  2692                           
  2693                           ;psect for function _config
  2694  0253                     _config:	
  2695                           
  2696                           ;bio3.c: 133: unsigned char i, out;
  2697                           ;bio3.c: 135: out &= 0b11110111; PORTC = out;;
  2698                           
  2699                           ;incstack = 0
  2700                           ; Regs used in _config: [wreg+status,2+status,0]
  2701  0253  30F7               	movlw	247
  2702  0254  0020               	movlb	0	; select bank0
  2703  0255  00C9               	movwf	??_config
  2704  0256  0849               	movf	??_config,w
  2705  0257  05CB               	andwf	config@out,f
  2706  0258  084B               	movf	config@out,w
  2707  0259  008E               	movwf	14	;volatile
  2708                           
  2709                           ;bio3.c: 138: RA5 = 0;;
  2710                           
  2711                           ;bio3.c: 136: _delay((unsigned long)((5)*(500000/4000000.0)));
  2712  025A  0020               	movlb	0	; select bank0
  2713  025B  128C               	bcf	12,5	;volatile
  2714                           
  2715                           ;bio3.c: 141: RA5 = 1;;
  2716                           
  2717                           ;bio3.c: 139: _delay((unsigned long)((5)*(500000/4000000.0)));
  2718  025C  0020               	movlb	0	; select bank0
  2719  025D  168C               	bsf	12,5	;volatile
  2720                           
  2721                           ;bio3.c: 143: for(i = 0; i < 16; i++) {
  2722  025E  01CA               	clrf	config@i
  2723  025F                     L3:	
  2724  025F  3010               	movlw	16
  2725  0260  024A               	subwf	config@i,w
  2726  0261  1803               	btfsc	3,0
  2727  0262  0008               	return
  2728                           
  2729                           ;bio3.c: 144: if (conf.datashort & 0x0001) {
  2730  0263  1C47               	btfss	config@conf,0
  2731  0264  2A67               	goto	l2419
  2732                           
  2733                           ;bio3.c: 145: out |= 0b00000100; PORTC = out;;
  2734  0265  154B               	bsf	config@out,2
  2735  0266  2A6B               	goto	l2421
  2736  0267                     l2419:	
  2737                           ;bio3.c: 146: } else {
  2738                           
  2739                           
  2740                           ;bio3.c: 147: out &= 0b11111011; PORTC = out;;
  2741  0267  30FB               	movlw	251
  2742  0268  00C9               	movwf	??_config
  2743  0269  0849               	movf	??_config,w
  2744  026A  05CB               	andwf	config@out,f
  2745  026B                     l2421:	
  2746  026B  084B               	movf	config@out,w
  2747  026C  008E               	movwf	14	;volatile
  2748                           
  2749                           ;bio3.c: 148: }
  2750                           ;bio3.c: 149: conf.datashort >>= 1;
  2751  026D  3001               	movlw	1
  2752  026E                     u1115:	
  2753  026E  36C8               	lsrf	config@conf+1,f
  2754  026F  0CC7               	rrf	config@conf,f
  2755  0270  0B89               	decfsz	9,f
  2756  0271  2A6E               	goto	u1115
  2757                           
  2758                           ;bio3.c: 153: out |= 0b00001000; PORTC = out;;
  2759                           
  2760                           ;bio3.c: 151: _delay((unsigned long)((5)*(500000/4000000.0)));
  2761  0272  0020               	movlb	0	; select bank0
  2762  0273  15CB               	bsf	config@out,3
  2763  0274  084B               	movf	config@out,w
  2764  0275  008E               	movwf	14	;volatile
  2765                           
  2766                           ;bio3.c: 155: out &= 0b11110111; PORTC = out;;
  2767                           
  2768                           ;bio3.c: 154: _delay((unsigned long)((5)*(500000/4000000.0)));
  2769  0276  30F7               	movlw	247
  2770  0277  0020               	movlb	0	; select bank0
  2771  0278  00C9               	movwf	??_config
  2772  0279  0849               	movf	??_config,w
  2773  027A  05CB               	andwf	config@out,f
  2774  027B  084B               	movf	config@out,w
  2775  027C  008E               	movwf	14	;volatile
  2776  027D  3001               	movlw	1
  2777  027E  00C9               	movwf	??_config
  2778  027F  0849               	movf	??_config,w
  2779  0280  07CA               	addwf	config@i,f
  2780  0281  2A5F               	goto	L3
  2781  0282                     __end_of_config:	
  2782                           
  2783                           	psect	text6
  2784  0300                     __ptext6:	
  2785 ;; *************** function _ADC_5 *****************
  2786 ;; Defined at:
  2787 ;;		line 48 in file "ADC1823.c"
  2788 ;; Parameters:    Size  Location     Type
  2789 ;;		None
  2790 ;; Auto vars:     Size  Location     Type
  2791 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  2792 ;; Return value:  Size  Location     Type
  2793 ;;                  2    0[BANK0 ] unsigned short 
  2794 ;; Registers used:
  2795 ;;		wreg
  2796 ;; Tracked objects:
  2797 ;;		On entry : 0/0
  2798 ;;		On exit  : 0/0
  2799 ;;		Unchanged: 0/0
  2800 ;; Data sizes:     COMMON   BANK0   BANK1
  2801 ;;      Params:         0       2       0
  2802 ;;      Locals:         0       2       0
  2803 ;;      Temps:          0       2       0
  2804 ;;      Totals:         0       6       0
  2805 ;;Total ram usage:        6 bytes
  2806 ;; Hardware stack levels used:    1
  2807 ;; Hardware stack levels required when called:    2
  2808 ;; This function calls:
  2809 ;;		Nothing
  2810 ;; This function is called by:
  2811 ;;		_measure
  2812 ;;		_read_ADC_channels
  2813 ;;		_measure_Impedance_SE
  2814 ;; This function uses a non-reentrant model
  2815 ;;
  2816                           
  2817                           
  2818                           ;psect for function _ADC_5
  2819  0300                     _ADC_5:	
  2820                           
  2821                           ;ADC1823.c: 50: unsigned short ADC_value;
  2822                           ;ADC1823.c: 52: { ADCON0 = 0b00010101;};
  2823                           
  2824                           ;incstack = 0
  2825                           ; Regs used in _ADC_5: [wreg]
  2826  0300  3015               	movlw	21
  2827  0301  0021               	movlb	1	; select bank1
  2828  0302  009D               	movwf	29	;volatile
  2829                           
  2830                           ;ADC1823.c: 53: __nop();
  2831  0303  0000               	nop
  2832                           
  2833                           ;ADC1823.c: 54: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  2834  0304  0021               	movlb	1	; select bank1
  2835  0305  149D               	bsf	29,1	;volatile
  2836  0306                     l446:	
  2837  0306  189D               	btfsc	29,1	;volatile
  2838  0307  2B06               	goto	l446
  2839  0308  081C               	movf	28,w	;volatile
  2840  0309  0020               	movlb	0	; select bank0
  2841  030A  00C9               	movwf	??_ADC_5
  2842  030B  01CA               	clrf	??_ADC_5+1
  2843  030C  0849               	movf	??_ADC_5,w
  2844  030D  00CB               	movwf	ADC_5@ADC_value
  2845  030E  084A               	movf	??_ADC_5+1,w
  2846  030F  00CC               	movwf	ADC_5@ADC_value+1
  2847  0310  3008               	movlw	8
  2848  0311                     u1145:	
  2849  0311  35CB               	lslf	ADC_5@ADC_value,f
  2850  0312  0DCC               	rlf	ADC_5@ADC_value+1,f
  2851  0313  0B89               	decfsz	9,f
  2852  0314  2B11               	goto	u1145
  2853  0315  0021               	movlb	1	; select bank1
  2854  0316  081B               	movf	27,w	;volatile
  2855  0317  0020               	movlb	0	; select bank0
  2856  0318  00C9               	movwf	??_ADC_5
  2857  0319  01CA               	clrf	??_ADC_5+1
  2858  031A  0849               	movf	??_ADC_5,w
  2859  031B  04CB               	iorwf	ADC_5@ADC_value,f
  2860  031C  084A               	movf	??_ADC_5+1,w
  2861  031D  04CC               	iorwf	ADC_5@ADC_value+1,f
  2862                           
  2863                           ;ADC1823.c: 55: return ADC_value;
  2864  031E  084C               	movf	ADC_5@ADC_value+1,w
  2865  031F  00C8               	movwf	?_ADC_5+1
  2866  0320  084B               	movf	ADC_5@ADC_value,w
  2867  0321  00C7               	movwf	?_ADC_5
  2868  0322  0008               	return
  2869  0323                     __end_of_ADC_5:	
  2870                           
  2871                           	psect	text7
  2872  0282                     __ptext7:	
  2873 ;; *************** function _lputs_ISR *****************
  2874 ;; Defined at:
  2875 ;;		line 132 in file "USART1823.c"
  2876 ;; Parameters:    Size  Location     Type
  2877 ;;  data            1    wreg     PTR unsigned char 
  2878 ;;		 -> sweep@aux(7), calibrate_reader@aux(8), measure_Impedance_SE@aux(8), measure_Offset@aux(5), 
  2879 ;;		 -> measure_Impedance_no_offset@aux(13), measure_Impedance@aux(13), read_ADC_channels@aux(7), mess_rec(10), 
  2880 ;;  length          1    0[BANK0 ] unsigned char 
  2881 ;; Auto vars:     Size  Location     Type
  2882 ;;  data            1    4[BANK0 ] PTR unsigned char 
  2883 ;;		 -> sweep@aux(7), calibrate_reader@aux(8), measure_Impedance_SE@aux(8), measure_Offset@aux(5), 
  2884 ;;		 -> measure_Impedance_no_offset@aux(13), measure_Impedance@aux(13), read_ADC_channels@aux(7), mess_rec(10), 
  2885 ;;  i               1    3[BANK0 ] unsigned char 
  2886 ;; Return value:  Size  Location     Type
  2887 ;;                  1    wreg      void 
  2888 ;; Registers used:
  2889 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2890 ;; Tracked objects:
  2891 ;;		On entry : 0/0
  2892 ;;		On exit  : 0/0
  2893 ;;		Unchanged: 0/0
  2894 ;; Data sizes:     COMMON   BANK0   BANK1
  2895 ;;      Params:         0       1       0
  2896 ;;      Locals:         0       2       0
  2897 ;;      Temps:          0       2       0
  2898 ;;      Totals:         0       5       0
  2899 ;;Total ram usage:        5 bytes
  2900 ;; Hardware stack levels used:    1
  2901 ;; Hardware stack levels required when called:    3
  2902 ;; This function calls:
  2903 ;;		_close_RX_USART
  2904 ;; This function is called by:
  2905 ;;		_sweep
  2906 ;;		_mess_handler
  2907 ;;		_config_ASIC
  2908 ;;		_read_ADC_channels
  2909 ;;		_measure_Impedance
  2910 ;;		_measure_Impedance_no_offset
  2911 ;;		_measure_Offset
  2912 ;;		_measure_Impedance_SE
  2913 ;;		_calibrate_reader
  2914 ;; This function uses a non-reentrant model
  2915 ;;
  2916                           
  2917                           
  2918                           ;psect for function _lputs_ISR
  2919  0282                     _lputs_ISR:	
  2920                           
  2921                           ;incstack = 0
  2922                           ; Regs used in _lputs_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2923                           ;lputs_ISR@data stored from wreg
  2924  0282  0020               	movlb	0	; select bank0
  2925  0283  00CB               	movwf	lputs_ISR@data
  2926                           
  2927                           ;USART1823.c: 134: unsigned char i;
  2928                           ;USART1823.c: 136: if (USART_tx_flag == 1)
  2929  0284  0372               	decf	_USART_tx_flag,w	;volatile
  2930  0285  1903               	btfsc	3,2
  2931  0286  0008               	return
  2932                           
  2933                           ;USART1823.c: 139: for (i = 0; i < length; i++)
  2934                           
  2935                           ;USART1823.c: 137: return;
  2936  0287  01CA               	clrf	lputs_ISR@i
  2937  0288                     l2513:	
  2938  0288  0847               	movf	lputs_ISR@length,w
  2939  0289  024A               	subwf	lputs_ISR@i,w
  2940  028A  1803               	btfsc	3,0
  2941  028B  2A9F               	goto	l2515
  2942                           
  2943                           ;USART1823.c: 140: USART_tx_data[i] = data[i];
  2944  028C  084A               	movf	lputs_ISR@i,w
  2945  028D  074B               	addwf	lputs_ISR@data,w
  2946  028E  00C8               	movwf	??_lputs_ISR
  2947  028F  0848               	movf	??_lputs_ISR,w
  2948  0290  0086               	movwf	6
  2949  0291  0187               	clrf	7
  2950  0292  0801               	movf	1,w
  2951  0293  00C9               	movwf	??_lputs_ISR+1
  2952  0294  084A               	movf	lputs_ISR@i,w
  2953  0295  3E20               	addlw	(low (_USART_tx_data| 0))& (0+255)
  2954  0296  0086               	movwf	6
  2955  0297  0187               	clrf	7
  2956  0298  0849               	movf	??_lputs_ISR+1,w
  2957  0299  0081               	movwf	1
  2958  029A  3001               	movlw	1
  2959  029B  00C8               	movwf	??_lputs_ISR
  2960  029C  0848               	movf	??_lputs_ISR,w
  2961  029D  07CA               	addwf	lputs_ISR@i,f
  2962  029E  2A88               	goto	l2513
  2963  029F                     l2515:	
  2964                           
  2965                           ;USART1823.c: 142: close_RX_USART();
  2966  029F  2396               	fcall	_close_RX_USART
  2967                           
  2968                           ;USART1823.c: 144: USART_tx_index = 0;
  2969  02A0  01F3               	clrf	_USART_tx_index	;volatile
  2970                           
  2971                           ;USART1823.c: 145: USART_tx_length = length;
  2972  02A1  0020               	movlb	0	; select bank0
  2973  02A2  0847               	movf	lputs_ISR@length,w
  2974  02A3  00C8               	movwf	??_lputs_ISR
  2975  02A4  0848               	movf	??_lputs_ISR,w
  2976  02A5  00F4               	movwf	_USART_tx_length	;volatile
  2977                           
  2978                           ;USART1823.c: 147: USART_tx_flag = 1;
  2979  02A6  3001               	movlw	1
  2980  02A7  00C8               	movwf	??_lputs_ISR
  2981  02A8  0848               	movf	??_lputs_ISR,w
  2982  02A9  00F2               	movwf	_USART_tx_flag	;volatile
  2983                           
  2984                           ;USART1823.c: 148: TXIE = 1;
  2985  02AA  0021               	movlb	1	; select bank1
  2986  02AB  1611               	bsf	17,4	;volatile
  2987  02AC  0008               	return
  2988  02AD                     __end_of_lputs_ISR:	
  2989                           
  2990                           	psect	text8
  2991  0396                     __ptext8:	
  2992 ;; *************** function _close_RX_USART *****************
  2993 ;; Defined at:
  2994 ;;		line 35 in file "USART1823.c"
  2995 ;; Parameters:    Size  Location     Type
  2996 ;;		None
  2997 ;; Auto vars:     Size  Location     Type
  2998 ;;		None
  2999 ;; Return value:  Size  Location     Type
  3000 ;;                  1    wreg      void 
  3001 ;; Registers used:
  3002 ;;		status,2
  3003 ;; Tracked objects:
  3004 ;;		On entry : 0/0
  3005 ;;		On exit  : 0/0
  3006 ;;		Unchanged: 0/0
  3007 ;; Data sizes:     COMMON   BANK0   BANK1
  3008 ;;      Params:         0       0       0
  3009 ;;      Locals:         0       0       0
  3010 ;;      Temps:          0       0       0
  3011 ;;      Totals:         0       0       0
  3012 ;;Total ram usage:        0 bytes
  3013 ;; Hardware stack levels used:    1
  3014 ;; Hardware stack levels required when called:    2
  3015 ;; This function calls:
  3016 ;;		Nothing
  3017 ;; This function is called by:
  3018 ;;		_lputs_ISR
  3019 ;; This function uses a non-reentrant model
  3020 ;;
  3021                           
  3022                           
  3023                           ;psect for function _close_RX_USART
  3024  0396                     _close_RX_USART:	
  3025                           
  3026                           ;USART1823.c: 39: RCIE = 0;
  3027                           
  3028                           ;incstack = 0
  3029                           ; Regs used in _close_RX_USART: [status,2]
  3030  0396  0021               	movlb	1	; select bank1
  3031  0397  1291               	bcf	17,5	;volatile
  3032                           
  3033                           ;USART1823.c: 40: CREN = 0;
  3034  0398  0023               	movlb	3	; select bank3
  3035  0399  121D               	bcf	29,4	;volatile
  3036                           
  3037                           ;USART1823.c: 41: USART_rx_index = 0;
  3038  039A  0020               	movlb	0	; select bank0
  3039  039B  01BB               	clrf	_USART_rx_index	;volatile
  3040  039C  0008               	return
  3041  039D                     __end_of_close_RX_USART:	
  3042                           
  3043                           	psect	text9
  3044  0323                     __ptext9:	
  3045 ;; *************** function _calculate_checksum *****************
  3046 ;; Defined at:
  3047 ;;		line 407 in file "comm.c"
  3048 ;; Parameters:    Size  Location     Type
  3049 ;;  data            1    wreg     PTR unsigned char 
  3050 ;;		 -> sweep@aux(7), measure_Impedance_SE@aux(8), mess_rec(10), 
  3051 ;;  num             1    0[BANK0 ] unsigned char 
  3052 ;; Auto vars:     Size  Location     Type
  3053 ;;  data            1    4[BANK0 ] PTR unsigned char 
  3054 ;;		 -> sweep@aux(7), measure_Impedance_SE@aux(8), mess_rec(10), 
  3055 ;;  i               1    5[BANK0 ] unsigned char 
  3056 ;;  check           1    3[BANK0 ] unsigned char 
  3057 ;; Return value:  Size  Location     Type
  3058 ;;                  1    wreg      unsigned char 
  3059 ;; Registers used:
  3060 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3061 ;; Tracked objects:
  3062 ;;		On entry : 0/0
  3063 ;;		On exit  : 0/0
  3064 ;;		Unchanged: 0/0
  3065 ;; Data sizes:     COMMON   BANK0   BANK1
  3066 ;;      Params:         0       1       0
  3067 ;;      Locals:         0       3       0
  3068 ;;      Temps:          0       2       0
  3069 ;;      Totals:         0       6       0
  3070 ;;Total ram usage:        6 bytes
  3071 ;; Hardware stack levels used:    1
  3072 ;; Hardware stack levels required when called:    2
  3073 ;; This function calls:
  3074 ;;		Nothing
  3075 ;; This function is called by:
  3076 ;;		_sweep
  3077 ;;		_measure_Impedance_SE
  3078 ;; This function uses a non-reentrant model
  3079 ;;
  3080                           
  3081                           
  3082                           ;psect for function _calculate_checksum
  3083  0323                     _calculate_checksum:	
  3084                           
  3085                           ;incstack = 0
  3086                           ; Regs used in _calculate_checksum: [wreg+fsr1l+fsr1h+status,2+status,0]
  3087                           ;calculate_checksum@data stored from wreg
  3088  0323  0020               	movlb	0	; select bank0
  3089  0324  00CB               	movwf	calculate_checksum@data
  3090                           
  3091                           ;comm.c: 409: unsigned char check, i;
  3092                           ;comm.c: 411: check = 0;
  3093  0325  01CA               	clrf	calculate_checksum@check
  3094                           
  3095                           ;comm.c: 412: for (i = 0; i < num; i++) {
  3096  0326  01CC               	clrf	calculate_checksum@i
  3097  0327                     l2531:	
  3098  0327  0847               	movf	calculate_checksum@num,w
  3099  0328  024C               	subwf	calculate_checksum@i,w
  3100  0329  1803               	btfsc	3,0
  3101  032A  2B3A               	goto	l2533
  3102                           
  3103                           ;comm.c: 413: check ^= data[i];
  3104  032B  084C               	movf	calculate_checksum@i,w
  3105  032C  074B               	addwf	calculate_checksum@data,w
  3106  032D  00C8               	movwf	??_calculate_checksum
  3107  032E  0848               	movf	??_calculate_checksum,w
  3108  032F  0086               	movwf	6
  3109  0330  0187               	clrf	7
  3110  0331  0801               	movf	1,w
  3111  0332  00C9               	movwf	??_calculate_checksum+1
  3112  0333  0849               	movf	??_calculate_checksum+1,w
  3113  0334  06CA               	xorwf	calculate_checksum@check,f
  3114  0335  3001               	movlw	1
  3115  0336  00C8               	movwf	??_calculate_checksum
  3116  0337  0848               	movf	??_calculate_checksum,w
  3117  0338  07CC               	addwf	calculate_checksum@i,f
  3118  0339  2B27               	goto	l2531
  3119  033A                     l2533:	
  3120                           
  3121                           ;comm.c: 414: }
  3122                           ;comm.c: 416: return check;
  3123  033A  084A               	movf	calculate_checksum@check,w
  3124  033B  0008               	return
  3125  033C                     __end_of_calculate_checksum:	
  3126                           
  3127                           	psect	text10
  3128  0387                     __ptext10:	
  3129 ;; *************** function _start_TX_USART_ISR *****************
  3130 ;; Defined at:
  3131 ;;		line 101 in file "USART1823.c"
  3132 ;; Parameters:    Size  Location     Type
  3133 ;;		None
  3134 ;; Auto vars:     Size  Location     Type
  3135 ;;		None
  3136 ;; Return value:  Size  Location     Type
  3137 ;;                  1    wreg      void 
  3138 ;; Registers used:
  3139 ;;		wreg, status,2
  3140 ;; Tracked objects:
  3141 ;;		On entry : 0/0
  3142 ;;		On exit  : 0/0
  3143 ;;		Unchanged: 0/0
  3144 ;; Data sizes:     COMMON   BANK0   BANK1
  3145 ;;      Params:         0       0       0
  3146 ;;      Locals:         0       0       0
  3147 ;;      Temps:          0       0       0
  3148 ;;      Totals:         0       0       0
  3149 ;;Total ram usage:        0 bytes
  3150 ;; Hardware stack levels used:    1
  3151 ;; Hardware stack levels required when called:    2
  3152 ;; This function calls:
  3153 ;;		Nothing
  3154 ;; This function is called by:
  3155 ;;		_main
  3156 ;; This function uses a non-reentrant model
  3157 ;;
  3158                           
  3159                           
  3160                           ;psect for function _start_TX_USART_ISR
  3161  0387                     _start_TX_USART_ISR:	
  3162                           
  3163                           ;USART1823.c: 103: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  3164                           
  3165                           ;incstack = 0
  3166                           ; Regs used in _start_TX_USART_ISR: [wreg+status,2]
  3167  0387  0023               	movlb	3	; select bank3
  3168  0388  151E               	bsf	30,2	;volatile
  3169  0389  159F               	bsf	31,3	;volatile
  3170  038A  019C               	clrf	28	;volatile
  3171  038B  300C               	movlw	12
  3172  038C  009B               	movwf	27	;volatile
  3173                           
  3174                           ;USART1823.c: 104: SYNC = 0;
  3175  038D  121E               	bcf	30,4	;volatile
  3176                           
  3177                           ;USART1823.c: 105: SPEN = 1;
  3178  038E  179D               	bsf	29,7	;volatile
  3179                           
  3180                           ;USART1823.c: 106: TXEN = 1;
  3181  038F  169E               	bsf	30,5	;volatile
  3182                           
  3183                           ;USART1823.c: 108: USART_tx_flag = 0;
  3184  0390  01F2               	clrf	_USART_tx_flag	;volatile
  3185                           
  3186                           ;USART1823.c: 109: USART_tx_index = 0;
  3187  0391  01F3               	clrf	_USART_tx_index	;volatile
  3188                           
  3189                           ;USART1823.c: 110: USART_tx_length = 0;
  3190  0392  01F4               	clrf	_USART_tx_length	;volatile
  3191                           
  3192                           ;USART1823.c: 113: PEIE = 1;
  3193  0393  170B               	bsf	11,6	;volatile
  3194                           
  3195                           ;USART1823.c: 114: GIE = 1;
  3196  0394  178B               	bsf	11,7	;volatile
  3197  0395  0008               	return
  3198  0396                     __end_of_start_TX_USART_ISR:	
  3199                           
  3200                           	psect	text11
  3201  0355                     __ptext11:	
  3202 ;; *************** function _start_RX_USART_ISR *****************
  3203 ;; Defined at:
  3204 ;;		line 83 in file "USART1823.c"
  3205 ;; Parameters:    Size  Location     Type
  3206 ;;		None
  3207 ;; Auto vars:     Size  Location     Type
  3208 ;;		None
  3209 ;; Return value:  Size  Location     Type
  3210 ;;                  1    wreg      void 
  3211 ;; Registers used:
  3212 ;;		wreg, status,2
  3213 ;; Tracked objects:
  3214 ;;		On entry : 0/0
  3215 ;;		On exit  : 0/0
  3216 ;;		Unchanged: 0/0
  3217 ;; Data sizes:     COMMON   BANK0   BANK1
  3218 ;;      Params:         0       0       0
  3219 ;;      Locals:         0       0       0
  3220 ;;      Temps:          0       0       0
  3221 ;;      Totals:         0       0       0
  3222 ;;Total ram usage:        0 bytes
  3223 ;; Hardware stack levels used:    1
  3224 ;; Hardware stack levels required when called:    2
  3225 ;; This function calls:
  3226 ;;		Nothing
  3227 ;; This function is called by:
  3228 ;;		_main
  3229 ;; This function uses a non-reentrant model
  3230 ;;
  3231                           
  3232                           
  3233                           ;psect for function _start_RX_USART_ISR
  3234  0355                     _start_RX_USART_ISR:	
  3235                           
  3236                           ;USART1823.c: 86: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  3237                           
  3238                           ;incstack = 0
  3239                           ; Regs used in _start_RX_USART_ISR: [wreg+status,2]
  3240  0355  0023               	movlb	3	; select bank3
  3241  0356  151E               	bsf	30,2	;volatile
  3242  0357  159F               	bsf	31,3	;volatile
  3243  0358  019C               	clrf	28	;volatile
  3244  0359  300C               	movlw	12
  3245  035A  009B               	movwf	27	;volatile
  3246                           
  3247                           ;USART1823.c: 88: SYNC = 0;
  3248  035B  121E               	bcf	30,4	;volatile
  3249                           
  3250                           ;USART1823.c: 89: SPEN = 1;
  3251  035C  179D               	bsf	29,7	;volatile
  3252                           
  3253                           ;USART1823.c: 90: CREN = 1;
  3254  035D  161D               	bsf	29,4	;volatile
  3255                           
  3256                           ;USART1823.c: 92: USART_rx_flag = 0;
  3257  035E  0020               	movlb	0	; select bank0
  3258  035F  01BA               	clrf	_USART_rx_flag	;volatile
  3259                           
  3260                           ;USART1823.c: 93: USART_rx_index = 0;
  3261  0360  01BB               	clrf	_USART_rx_index	;volatile
  3262                           
  3263                           ;USART1823.c: 95: RCIE = 1;
  3264  0361  0021               	movlb	1	; select bank1
  3265  0362  1691               	bsf	17,5	;volatile
  3266                           
  3267                           ;USART1823.c: 96: PEIE = 1;
  3268  0363  170B               	bsf	11,6	;volatile
  3269                           
  3270                           ;USART1823.c: 97: GIE = 1;
  3271  0364  178B               	bsf	11,7	;volatile
  3272  0365  0008               	return
  3273  0366                     __end_of_start_RX_USART_ISR:	
  3274                           
  3275                           	psect	text12
  3276  03B6                     __ptext12:	
  3277 ;; *************** function _start_RCM *****************
  3278 ;; Defined at:
  3279 ;;		line 4 in file "RCM1823.c"
  3280 ;; Parameters:    Size  Location     Type
  3281 ;;		None
  3282 ;; Auto vars:     Size  Location     Type
  3283 ;;		None
  3284 ;; Return value:  Size  Location     Type
  3285 ;;                  1    wreg      void 
  3286 ;; Registers used:
  3287 ;;		wreg
  3288 ;; Tracked objects:
  3289 ;;		On entry : 0/0
  3290 ;;		On exit  : 0/0
  3291 ;;		Unchanged: 0/0
  3292 ;; Data sizes:     COMMON   BANK0   BANK1
  3293 ;;      Params:         0       0       0
  3294 ;;      Locals:         0       0       0
  3295 ;;      Temps:          0       0       0
  3296 ;;      Totals:         0       0       0
  3297 ;;Total ram usage:        0 bytes
  3298 ;; Hardware stack levels used:    1
  3299 ;; Hardware stack levels required when called:    2
  3300 ;; This function calls:
  3301 ;;		Nothing
  3302 ;; This function is called by:
  3303 ;;		_main
  3304 ;; This function uses a non-reentrant model
  3305 ;;
  3306                           
  3307                           
  3308                           ;psect for function _start_RCM
  3309  03B6                     _start_RCM:	
  3310                           
  3311                           ;RCM1823.c: 6: CLKRCON = 0b11010000;
  3312                           
  3313                           ;incstack = 0
  3314                           ; Regs used in _start_RCM: [wreg]
  3315  03B6  30D0               	movlw	208
  3316  03B7  0027               	movlb	7	; select bank7
  3317  03B8  009A               	movwf	26	;volatile
  3318  03B9  0008               	return
  3319  03BA                     __end_of_start_RCM:	
  3320                           
  3321                           	psect	text13
  3322  039D                     __ptext13:	
  3323 ;; *************** function _setup_TMR0 *****************
  3324 ;; Defined at:
  3325 ;;		line 10 in file "TMR0.c"
  3326 ;; Parameters:    Size  Location     Type
  3327 ;;		None
  3328 ;; Auto vars:     Size  Location     Type
  3329 ;;		None
  3330 ;; Return value:  Size  Location     Type
  3331 ;;                  1    wreg      void 
  3332 ;; Registers used:
  3333 ;;		None
  3334 ;; Tracked objects:
  3335 ;;		On entry : 0/0
  3336 ;;		On exit  : 0/0
  3337 ;;		Unchanged: 0/0
  3338 ;; Data sizes:     COMMON   BANK0   BANK1
  3339 ;;      Params:         0       0       0
  3340 ;;      Locals:         0       0       0
  3341 ;;      Temps:          0       0       0
  3342 ;;      Totals:         0       0       0
  3343 ;;Total ram usage:        0 bytes
  3344 ;; Hardware stack levels used:    1
  3345 ;; Hardware stack levels required when called:    2
  3346 ;; This function calls:
  3347 ;;		Nothing
  3348 ;; This function is called by:
  3349 ;;		_main
  3350 ;; This function uses a non-reentrant model
  3351 ;;
  3352                           
  3353                           
  3354                           ;psect for function _setup_TMR0
  3355  039D                     _setup_TMR0:	
  3356                           
  3357                           ;TMR0.c: 13: PS2 = 0; PS1 = 1; PS0 = 0;
  3358                           
  3359                           ;incstack = 0
  3360                           ; Regs used in _setup_TMR0: []
  3361  039D  0021               	movlb	1	; select bank1
  3362  039E  1115               	bcf	21,2	;volatile
  3363  039F  1495               	bsf	21,1	;volatile
  3364  03A0  1015               	bcf	21,0	;volatile
  3365                           
  3366                           ;TMR0.c: 16: PSA = 0;
  3367  03A1  1195               	bcf	21,3	;volatile
  3368                           
  3369                           ;TMR0.c: 18: TMR0CS = 0;
  3370  03A2  1295               	bcf	21,5	;volatile
  3371  03A3  0008               	return
  3372  03A4                     __end_of_setup_TMR0:	
  3373                           
  3374                           	psect	text14
  3375  03AA                     __ptext14:	
  3376 ;; *************** function _setup_ADC *****************
  3377 ;; Defined at:
  3378 ;;		line 3 in file "ADC1823.c"
  3379 ;; Parameters:    Size  Location     Type
  3380 ;;		None
  3381 ;; Auto vars:     Size  Location     Type
  3382 ;;		None
  3383 ;; Return value:  Size  Location     Type
  3384 ;;                  1    wreg      void 
  3385 ;; Registers used:
  3386 ;;		wreg
  3387 ;; Tracked objects:
  3388 ;;		On entry : 0/0
  3389 ;;		On exit  : 0/0
  3390 ;;		Unchanged: 0/0
  3391 ;; Data sizes:     COMMON   BANK0   BANK1
  3392 ;;      Params:         0       0       0
  3393 ;;      Locals:         0       0       0
  3394 ;;      Temps:          0       0       0
  3395 ;;      Totals:         0       0       0
  3396 ;;Total ram usage:        0 bytes
  3397 ;; Hardware stack levels used:    1
  3398 ;; Hardware stack levels required when called:    2
  3399 ;; This function calls:
  3400 ;;		Nothing
  3401 ;; This function is called by:
  3402 ;;		_main
  3403 ;; This function uses a non-reentrant model
  3404 ;;
  3405                           
  3406                           
  3407                           ;psect for function _setup_ADC
  3408  03AA                     _setup_ADC:	
  3409                           
  3410                           ;ADC1823.c: 20: ADCON1 = 0b11110000;
  3411                           
  3412                           ;incstack = 0
  3413                           ; Regs used in _setup_ADC: [wreg]
  3414  03AA  30F0               	movlw	240
  3415  03AB  0021               	movlb	1	; select bank1
  3416  03AC  009E               	movwf	30	;volatile
  3417                           
  3418                           ;ADC1823.c: 21: { ADCON0 = 0b00100100;};
  3419  03AD  3024               	movlw	36
  3420  03AE  009D               	movwf	29	;volatile
  3421  03AF  0008               	return
  3422  03B0                     __end_of_setup_ADC:	
  3423                           
  3424                           	psect	text15
  3425  03BA                     __ptext15:	
  3426 ;; *************** function _USARTX_change_pol *****************
  3427 ;; Defined at:
  3428 ;;		line 90 in file "mcc_generated_files/mcc.c"
  3429 ;; Parameters:    Size  Location     Type
  3430 ;;		None
  3431 ;; Auto vars:     Size  Location     Type
  3432 ;;		None
  3433 ;; Return value:  Size  Location     Type
  3434 ;;                  1    wreg      void 
  3435 ;; Registers used:
  3436 ;;		None
  3437 ;; Tracked objects:
  3438 ;;		On entry : 0/0
  3439 ;;		On exit  : 0/0
  3440 ;;		Unchanged: 0/0
  3441 ;; Data sizes:     COMMON   BANK0   BANK1
  3442 ;;      Params:         0       0       0
  3443 ;;      Locals:         0       0       0
  3444 ;;      Temps:          0       0       0
  3445 ;;      Totals:         0       0       0
  3446 ;;Total ram usage:        0 bytes
  3447 ;; Hardware stack levels used:    1
  3448 ;; Hardware stack levels required when called:    2
  3449 ;; This function calls:
  3450 ;;		Nothing
  3451 ;; This function is called by:
  3452 ;;		_main
  3453 ;; This function uses a non-reentrant model
  3454 ;;
  3455                           
  3456                           
  3457                           ;psect for function _USARTX_change_pol
  3458  03BA                     _USARTX_change_pol:	
  3459                           
  3460                           ;mcc.c: 92: SCKP = 1;
  3461                           
  3462                           ;incstack = 0
  3463                           ; Regs used in _USARTX_change_pol: []
  3464  03BA  0023               	movlb	3	; select bank3
  3465  03BB  161F               	bsf	31,4	;volatile
  3466  03BC  0008               	return
  3467  03BD                     __end_of_USARTX_change_pol:	
  3468                           
  3469                           	psect	text16
  3470  03BD                     __ptext16:	
  3471 ;; *************** function _SYSTEM_Initialize *****************
  3472 ;; Defined at:
  3473 ;;		line 70 in file "mcc_generated_files/mcc.c"
  3474 ;; Parameters:    Size  Location     Type
  3475 ;;		None
  3476 ;; Auto vars:     Size  Location     Type
  3477 ;;		None
  3478 ;; Return value:  Size  Location     Type
  3479 ;;                  1    wreg      void 
  3480 ;; Registers used:
  3481 ;;		wreg, status,2, status,0, pclath, cstack
  3482 ;; Tracked objects:
  3483 ;;		On entry : 0/0
  3484 ;;		On exit  : 0/0
  3485 ;;		Unchanged: 0/0
  3486 ;; Data sizes:     COMMON   BANK0   BANK1
  3487 ;;      Params:         0       0       0
  3488 ;;      Locals:         0       0       0
  3489 ;;      Temps:          0       0       0
  3490 ;;      Totals:         0       0       0
  3491 ;;Total ram usage:        0 bytes
  3492 ;; Hardware stack levels used:    1
  3493 ;; Hardware stack levels required when called:    3
  3494 ;; This function calls:
  3495 ;;		_OSCILLATOR_Initialize
  3496 ;;		_PIN_MANAGER_Initialize
  3497 ;; This function is called by:
  3498 ;;		_main
  3499 ;; This function uses a non-reentrant model
  3500 ;;
  3501                           
  3502                           
  3503                           ;psect for function _SYSTEM_Initialize
  3504  03BD                     _SYSTEM_Initialize:	
  3505                           
  3506                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  3507                           
  3508                           ;incstack = 0
  3509                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3510  03BD  233C               	fcall	_PIN_MANAGER_Initialize
  3511                           
  3512                           ;mcc.c: 74: OSCILLATOR_Initialize();
  3513  03BE  23B0               	fcall	_OSCILLATOR_Initialize
  3514  03BF  0008               	return
  3515  03C0                     __end_of_SYSTEM_Initialize:	
  3516                           
  3517                           	psect	text17
  3518  033C                     __ptext17:	
  3519 ;; *************** function _PIN_MANAGER_Initialize *****************
  3520 ;; Defined at:
  3521 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  3522 ;; Parameters:    Size  Location     Type
  3523 ;;		None
  3524 ;; Auto vars:     Size  Location     Type
  3525 ;;		None
  3526 ;; Return value:  Size  Location     Type
  3527 ;;                  1    wreg      void 
  3528 ;; Registers used:
  3529 ;;		wreg, status,2
  3530 ;; Tracked objects:
  3531 ;;		On entry : 0/0
  3532 ;;		On exit  : 0/0
  3533 ;;		Unchanged: 0/0
  3534 ;; Data sizes:     COMMON   BANK0   BANK1
  3535 ;;      Params:         0       0       0
  3536 ;;      Locals:         0       0       0
  3537 ;;      Temps:          0       0       0
  3538 ;;      Totals:         0       0       0
  3539 ;;Total ram usage:        0 bytes
  3540 ;; Hardware stack levels used:    1
  3541 ;; Hardware stack levels required when called:    2
  3542 ;; This function calls:
  3543 ;;		Nothing
  3544 ;; This function is called by:
  3545 ;;		_SYSTEM_Initialize
  3546 ;; This function uses a non-reentrant model
  3547 ;;
  3548                           
  3549                           
  3550                           ;psect for function _PIN_MANAGER_Initialize
  3551  033C                     _PIN_MANAGER_Initialize:	
  3552                           
  3553                           ;pin_manager.c: 51: LATA = 0x0;
  3554                           
  3555                           ;incstack = 0
  3556                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3557  033C  0022               	movlb	2	; select bank2
  3558  033D  018C               	clrf	12	;volatile
  3559                           
  3560                           ;pin_manager.c: 52: LATC = 0x0;
  3561  033E  018E               	clrf	14	;volatile
  3562                           
  3563                           ;pin_manager.c: 55: ANSELA = 0b00000100;
  3564  033F  3004               	movlw	4
  3565  0340  0023               	movlb	3	; select bank3
  3566  0341  008C               	movwf	12	;volatile
  3567                           
  3568                           ;pin_manager.c: 56: ANSELC = 0b00000011;
  3569  0342  3003               	movlw	3
  3570  0343  008E               	movwf	14	;volatile
  3571                           
  3572                           ;pin_manager.c: 59: WPUA = 0x3B;
  3573  0344  303B               	movlw	59
  3574  0345  0024               	movlb	4	; select bank4
  3575  0346  008C               	movwf	12	;volatile
  3576                           
  3577                           ;pin_manager.c: 61: WPUC = 0x1C;
  3578  0347  301C               	movlw	28
  3579  0348  008E               	movwf	14	;volatile
  3580                           
  3581                           ;pin_manager.c: 63: RXDTSEL = 0;
  3582  0349  0022               	movlb	2	; select bank2
  3583  034A  139D               	bcf	29,7	;volatile
  3584                           
  3585                           ;pin_manager.c: 64: TXCKSEL = 0;
  3586  034B  111D               	bcf	29,2	;volatile
  3587                           
  3588                           ;pin_manager.c: 67: TRISC = 0b01100011;
  3589  034C  3063               	movlw	99
  3590  034D  0021               	movlb	1	; select bank1
  3591  034E  008E               	movwf	14	;volatile
  3592                           
  3593                           ;pin_manager.c: 68: TRISA = 0b01011111;
  3594  034F  305F               	movlw	95
  3595  0350  008C               	movwf	12	;volatile
  3596                           
  3597                           ;pin_manager.c: 70: OPTION_REGbits.nWPUEN = 0x0;
  3598  0351  1395               	bcf	21,7	;volatile
  3599                           
  3600                           ;pin_manager.c: 71: APFCON = 0x00;
  3601  0352  0022               	movlb	2	; select bank2
  3602  0353  019D               	clrf	29	;volatile
  3603  0354  0008               	return
  3604  0355                     __end_of_PIN_MANAGER_Initialize:	
  3605                           
  3606                           	psect	text18
  3607  03B0                     __ptext18:	
  3608 ;; *************** function _OSCILLATOR_Initialize *****************
  3609 ;; Defined at:
  3610 ;;		line 78 in file "mcc_generated_files/mcc.c"
  3611 ;; Parameters:    Size  Location     Type
  3612 ;;		None
  3613 ;; Auto vars:     Size  Location     Type
  3614 ;;		None
  3615 ;; Return value:  Size  Location     Type
  3616 ;;                  1    wreg      void 
  3617 ;; Registers used:
  3618 ;;		wreg, status,2
  3619 ;; Tracked objects:
  3620 ;;		On entry : 0/0
  3621 ;;		On exit  : 0/0
  3622 ;;		Unchanged: 0/0
  3623 ;; Data sizes:     COMMON   BANK0   BANK1
  3624 ;;      Params:         0       0       0
  3625 ;;      Locals:         0       0       0
  3626 ;;      Temps:          0       0       0
  3627 ;;      Totals:         0       0       0
  3628 ;;Total ram usage:        0 bytes
  3629 ;; Hardware stack levels used:    1
  3630 ;; Hardware stack levels required when called:    2
  3631 ;; This function calls:
  3632 ;;		Nothing
  3633 ;; This function is called by:
  3634 ;;		_SYSTEM_Initialize
  3635 ;; This function uses a non-reentrant model
  3636 ;;
  3637                           
  3638                           
  3639                           ;psect for function _OSCILLATOR_Initialize
  3640  03B0                     _OSCILLATOR_Initialize:	
  3641                           
  3642                           ;mcc.c: 81: OSCCON = 0x3A;
  3643                           
  3644                           ;incstack = 0
  3645                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3646  03B0  303A               	movlw	58
  3647  03B1  0021               	movlb	1	; select bank1
  3648  03B2  0099               	movwf	25	;volatile
  3649                           
  3650                           ;mcc.c: 83: OSCSTAT = 0x00;
  3651  03B3  019A               	clrf	26	;volatile
  3652                           
  3653                           ;mcc.c: 85: OSCTUNE = 0x00;
  3654  03B4  0198               	clrf	24	;volatile
  3655  03B5  0008               	return
  3656  03B6                     __end_of_OSCILLATOR_Initialize:	
  3657                           
  3658                           	psect	intentry
  3659  0004                     __pintentry:	
  3660 ;; *************** function _isr *****************
  3661 ;; Defined at:
  3662 ;;		line 150 in file "main.c"
  3663 ;; Parameters:    Size  Location     Type
  3664 ;;		None
  3665 ;; Auto vars:     Size  Location     Type
  3666 ;;		None
  3667 ;; Return value:  Size  Location     Type
  3668 ;;                  1    wreg      void 
  3669 ;; Registers used:
  3670 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3671 ;; Tracked objects:
  3672 ;;		On entry : 0/0
  3673 ;;		On exit  : 0/0
  3674 ;;		Unchanged: 0/0
  3675 ;; Data sizes:     COMMON   BANK0   BANK1
  3676 ;;      Params:         0       0       0
  3677 ;;      Locals:         0       0       0
  3678 ;;      Temps:          2       0       0
  3679 ;;      Totals:         2       0       0
  3680 ;;Total ram usage:        2 bytes
  3681 ;; Hardware stack levels used:    1
  3682 ;; Hardware stack levels required when called:    1
  3683 ;; This function calls:
  3684 ;;		_start_TMR0_ISR
  3685 ;;		_stop_TMR0_ISR
  3686 ;;		i1_start_RX_USART_ISR
  3687 ;; This function is called by:
  3688 ;;		Interrupt level 1
  3689 ;; This function uses a non-reentrant model
  3690 ;;
  3691                           
  3692  0004                     _isr:	
  3693                           
  3694                           ;incstack = 0
  3695  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  3696                           
  3697                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3698  0005  3180               	pagesel	$
  3699  0006  0020               	movlb	0	; select bank0
  3700  0007  087F               	movf	127,w
  3701  0008  00F9               	movwf	??_isr+1
  3702                           
  3703                           ;main.c: 154: if (TMR0IF && TMR0IE) {
  3704  0009  190B               	btfsc	11,2	;volatile
  3705  000A  1E8B               	btfss	11,5	;volatile
  3706  000B  2815               	goto	i1l128
  3707                           
  3708                           ;main.c: 156: TMR0IF = 0;
  3709  000C  110B               	bcf	11,2	;volatile
  3710                           
  3711                           ;main.c: 157: TMR0 = TIMER0_timeout;
  3712  000D  0870               	movf	_TIMER0_timeout,w	;volatile
  3713  000E  0095               	movwf	21	;volatile
  3714                           
  3715                           ;main.c: 160: TIMER0_flag = 1;
  3716  000F  3001               	movlw	1
  3717  0010  00F8               	movwf	??_isr
  3718  0011  0878               	movf	??_isr,w
  3719  0012  00B9               	movwf	_TIMER0_flag	;volatile
  3720                           
  3721                           ;main.c: 165: stop_TMR0_ISR();
  3722  0013  23C0               	fcall	_stop_TMR0_ISR
  3723                           
  3724                           ;main.c: 167: return;
  3725  0014  2851               	goto	i1l129
  3726  0015                     i1l128:	
  3727                           
  3728                           ;main.c: 168: }
  3729                           ;main.c: 172: if (RCIF) {
  3730  0015  1E91               	btfss	17,5	;volatile
  3731  0016  2836               	goto	i1l130
  3732                           
  3733                           ;main.c: 173: stop_TMR0_ISR();
  3734  0017  23C0               	fcall	_stop_TMR0_ISR
  3735                           
  3736                           ;main.c: 176: if (OERR) {
  3737  0018  0023               	movlb	3	; select bank3
  3738  0019  1C9D               	btfss	29,1	;volatile
  3739  001A  2820               	goto	i1l2113
  3740                           
  3741                           ;main.c: 178: CREN = 0;
  3742  001B  121D               	bcf	29,4	;volatile
  3743                           
  3744                           ;main.c: 179: CREN = 1;
  3745  001C  161D               	bsf	29,4	;volatile
  3746                           
  3747                           ;main.c: 180: USART_rx_index = 0;
  3748  001D  0020               	movlb	0	; select bank0
  3749  001E  01BB               	clrf	_USART_rx_index	;volatile
  3750                           
  3751                           ;main.c: 181: return;
  3752  001F  2851               	goto	i1l129
  3753  0020                     i1l2113:	
  3754                           
  3755                           ;main.c: 182: }
  3756                           ;main.c: 185: if (USART_rx_index >= 10) {
  3757  0020  300A               	movlw	10
  3758  0021  0020               	movlb	0	; select bank0
  3759  0022  023B               	subwf	_USART_rx_index,w	;volatile
  3760  0023  1803               	btfsc	3,0
  3761                           
  3762                           ;main.c: 186: USART_rx_index = 0;
  3763  0024  01BB               	clrf	_USART_rx_index	;volatile
  3764                           
  3765                           ;main.c: 187: }
  3766                           ;main.c: 189: USART_rx_data[USART_rx_index++] = RCREG;
  3767  0025  0023               	movlb	3	; select bank3
  3768  0026  0819               	movf	25,w	;volatile
  3769  0027  00F8               	movwf	??_isr
  3770  0028  0020               	movlb	0	; select bank0
  3771  0029  083B               	movf	_USART_rx_index,w
  3772  002A  3E2F               	addlw	(low (_USART_rx_data| 0))& (0+255)
  3773  002B  0086               	movwf	6
  3774  002C  0187               	clrf	7
  3775  002D  0878               	movf	??_isr,w
  3776  002E  0081               	movwf	1
  3777  002F  3001               	movlw	1
  3778  0030  00F8               	movwf	??_isr
  3779  0031  0878               	movf	??_isr,w
  3780  0032  07BB               	addwf	_USART_rx_index,f	;volatile
  3781                           
  3782                           ;main.c: 191: start_TMR0_ISR(98);
  3783  0033  3062               	movlw	98
  3784  0034  2377               	fcall	_start_TMR0_ISR
  3785                           
  3786                           ;main.c: 193: return;
  3787  0035  2851               	goto	i1l129
  3788  0036                     i1l130:	
  3789                           
  3790                           ;main.c: 194: }
  3791                           ;main.c: 198: if (TXIF && TXIE) {
  3792  0036  1E11               	btfss	17,4	;volatile
  3793  0037  2851               	goto	i1l129
  3794  0038  0021               	movlb	1	; select bank1
  3795  0039  1E11               	btfss	17,4	;volatile
  3796  003A  2851               	goto	i1l129
  3797                           
  3798                           ;main.c: 200: TXREG = USART_tx_data[USART_tx_index++];
  3799  003B  0873               	movf	_USART_tx_index,w
  3800  003C  3E20               	addlw	(low (_USART_tx_data| 0))& (0+255)
  3801  003D  0086               	movwf	6
  3802  003E  0187               	clrf	7
  3803  003F  0801               	movf	1,w
  3804  0040  0023               	movlb	3	; select bank3
  3805  0041  009A               	movwf	26	;volatile
  3806  0042  3001               	movlw	1
  3807  0043  00F8               	movwf	??_isr
  3808  0044  0878               	movf	??_isr,w
  3809  0045  07F3               	addwf	_USART_tx_index,f	;volatile
  3810                           
  3811                           ;main.c: 202: if (USART_tx_index >= USART_tx_length) {
  3812  0046  0874               	movf	_USART_tx_length,w	;volatile
  3813  0047  0273               	subwf	_USART_tx_index,w	;volatile
  3814  0048  1C03               	skipc
  3815  0049  2851               	goto	i1l129
  3816                           
  3817                           ;main.c: 203: TXIE = 0;
  3818  004A  0021               	movlb	1	; select bank1
  3819  004B  1211               	bcf	17,4	;volatile
  3820                           
  3821                           ;main.c: 204: USART_tx_flag = 0;
  3822  004C  01F2               	clrf	_USART_tx_flag	;volatile
  3823                           
  3824                           ;main.c: 208: _delay((unsigned long)((3)*(500000/4000.0)));
  3825  004D  307D               	movlw	125
  3826  004E                     u152_27:	
  3827  004E  0B89               	decfsz	9,f
  3828  004F  284E               	goto	u152_27
  3829                           
  3830                           ;main.c: 210: start_RX_USART_ISR();
  3831  0050  2366               	fcall	i1_start_RX_USART_ISR
  3832  0051                     i1l129:	
  3833                           ;main.c: 211: }
  3834                           ;main.c: 212: return;
  3835                           
  3836  0051  0879               	movf	??_isr+1,w
  3837  0052  0020               	movlb	0	; select bank0
  3838  0053  00FF               	movwf	127
  3839  0054  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  3840  0055  0009               	retfie
  3841  0056                     __end_of_isr:	
  3842                           
  3843                           	psect	text20
  3844  0366                     __ptext20:	
  3845 ;; *************** function i1_start_RX_USART_ISR *****************
  3846 ;; Defined at:
  3847 ;;		line 83 in file "USART1823.c"
  3848 ;; Parameters:    Size  Location     Type
  3849 ;;		None
  3850 ;; Auto vars:     Size  Location     Type
  3851 ;;		None
  3852 ;; Return value:  Size  Location     Type
  3853 ;;                  1    wreg      void 
  3854 ;; Registers used:
  3855 ;;		wreg, status,2
  3856 ;; Tracked objects:
  3857 ;;		On entry : 0/0
  3858 ;;		On exit  : 0/0
  3859 ;;		Unchanged: 0/0
  3860 ;; Data sizes:     COMMON   BANK0   BANK1
  3861 ;;      Params:         0       0       0
  3862 ;;      Locals:         0       0       0
  3863 ;;      Temps:          0       0       0
  3864 ;;      Totals:         0       0       0
  3865 ;;Total ram usage:        0 bytes
  3866 ;; Hardware stack levels used:    1
  3867 ;; This function calls:
  3868 ;;		Nothing
  3869 ;; This function is called by:
  3870 ;;		_isr
  3871 ;; This function uses a non-reentrant model
  3872 ;;
  3873                           
  3874                           
  3875                           ;psect for function i1_start_RX_USART_ISR
  3876  0366                     i1_start_RX_USART_ISR:	
  3877                           
  3878                           ;USART1823.c: 86: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  3879                           
  3880                           ;incstack = 0
  3881                           ; Regs used in i1_start_RX_USART_ISR: [wreg+status,2]
  3882  0366  0023               	movlb	3	; select bank3
  3883  0367  151E               	bsf	30,2	;volatile
  3884  0368  159F               	bsf	31,3	;volatile
  3885  0369  019C               	clrf	28	;volatile
  3886  036A  300C               	movlw	12
  3887  036B  009B               	movwf	27	;volatile
  3888                           
  3889                           ;USART1823.c: 88: SYNC = 0;
  3890  036C  121E               	bcf	30,4	;volatile
  3891                           
  3892                           ;USART1823.c: 89: SPEN = 1;
  3893  036D  179D               	bsf	29,7	;volatile
  3894                           
  3895                           ;USART1823.c: 90: CREN = 1;
  3896  036E  161D               	bsf	29,4	;volatile
  3897                           
  3898                           ;USART1823.c: 92: USART_rx_flag = 0;
  3899  036F  0020               	movlb	0	; select bank0
  3900  0370  01BA               	clrf	_USART_rx_flag	;volatile
  3901                           
  3902                           ;USART1823.c: 93: USART_rx_index = 0;
  3903  0371  01BB               	clrf	_USART_rx_index	;volatile
  3904                           
  3905                           ;USART1823.c: 95: RCIE = 1;
  3906  0372  0021               	movlb	1	; select bank1
  3907  0373  1691               	bsf	17,5	;volatile
  3908                           
  3909                           ;USART1823.c: 96: PEIE = 1;
  3910  0374  170B               	bsf	11,6	;volatile
  3911                           
  3912                           ;USART1823.c: 97: GIE = 1;
  3913  0375  178B               	bsf	11,7	;volatile
  3914  0376  0008               	return
  3915  0377                     __end_ofi1_start_RX_USART_ISR:	
  3916                           
  3917                           	psect	text21
  3918  03C0                     __ptext21:	
  3919 ;; *************** function _stop_TMR0_ISR *****************
  3920 ;; Defined at:
  3921 ;;		line 44 in file "TMR0.c"
  3922 ;; Parameters:    Size  Location     Type
  3923 ;;		None
  3924 ;; Auto vars:     Size  Location     Type
  3925 ;;		None
  3926 ;; Return value:  Size  Location     Type
  3927 ;;                  1    wreg      void 
  3928 ;; Registers used:
  3929 ;;		None
  3930 ;; Tracked objects:
  3931 ;;		On entry : 0/0
  3932 ;;		On exit  : 0/0
  3933 ;;		Unchanged: 0/0
  3934 ;; Data sizes:     COMMON   BANK0   BANK1
  3935 ;;      Params:         0       0       0
  3936 ;;      Locals:         0       0       0
  3937 ;;      Temps:          0       0       0
  3938 ;;      Totals:         0       0       0
  3939 ;;Total ram usage:        0 bytes
  3940 ;; Hardware stack levels used:    1
  3941 ;; This function calls:
  3942 ;;		Nothing
  3943 ;; This function is called by:
  3944 ;;		_isr
  3945 ;; This function uses a non-reentrant model
  3946 ;;
  3947                           
  3948                           
  3949                           ;psect for function _stop_TMR0_ISR
  3950  03C0                     _stop_TMR0_ISR:	
  3951                           
  3952                           ;TMR0.c: 47: TMR0IE = 0;
  3953                           
  3954                           ;incstack = 0
  3955                           ; Regs used in _stop_TMR0_ISR: []
  3956  03C0  128B               	bcf	11,5	;volatile
  3957                           
  3958                           ;TMR0.c: 48: TMR0IF = 0;
  3959  03C1  110B               	bcf	11,2	;volatile
  3960  03C2  0008               	return
  3961  03C3                     __end_of_stop_TMR0_ISR:	
  3962                           
  3963                           	psect	text22
  3964  0377                     __ptext22:	
  3965 ;; *************** function _start_TMR0_ISR *****************
  3966 ;; Defined at:
  3967 ;;		line 30 in file "TMR0.c"
  3968 ;; Parameters:    Size  Location     Type
  3969 ;;  val             1    wreg     unsigned char 
  3970 ;; Auto vars:     Size  Location     Type
  3971 ;;  val             1    2[COMMON] unsigned char 
  3972 ;; Return value:  Size  Location     Type
  3973 ;;                  1    wreg      void 
  3974 ;; Registers used:
  3975 ;;		wreg, status,2
  3976 ;; Tracked objects:
  3977 ;;		On entry : 0/0
  3978 ;;		On exit  : 0/0
  3979 ;;		Unchanged: 0/0
  3980 ;; Data sizes:     COMMON   BANK0   BANK1
  3981 ;;      Params:         0       0       0
  3982 ;;      Locals:         1       0       0
  3983 ;;      Temps:          2       0       0
  3984 ;;      Totals:         3       0       0
  3985 ;;Total ram usage:        3 bytes
  3986 ;; Hardware stack levels used:    1
  3987 ;; This function calls:
  3988 ;;		Nothing
  3989 ;; This function is called by:
  3990 ;;		_isr
  3991 ;; This function uses a non-reentrant model
  3992 ;;
  3993                           
  3994                           
  3995                           ;psect for function _start_TMR0_ISR
  3996  0377                     _start_TMR0_ISR:	
  3997                           
  3998                           ;incstack = 0
  3999                           ; Regs used in _start_TMR0_ISR: [wreg+status,2]
  4000                           ;start_TMR0_ISR@val stored from wreg
  4001  0377  00F7               	movwf	start_TMR0_ISR@val
  4002                           
  4003                           ;TMR0.c: 32: TIMER0_timeout = val;
  4004  0378  0877               	movf	start_TMR0_ISR@val,w
  4005  0379  00F5               	movwf	??_start_TMR0_ISR
  4006  037A  01F6               	clrf	??_start_TMR0_ISR+1
  4007  037B  0875               	movf	??_start_TMR0_ISR,w
  4008  037C  00F0               	movwf	_TIMER0_timeout	;volatile
  4009  037D  0876               	movf	??_start_TMR0_ISR+1,w
  4010  037E  00F1               	movwf	_TIMER0_timeout+1	;volatile
  4011                           
  4012                           ;TMR0.c: 33: TIMER0_flag = 0;
  4013  037F  0020               	movlb	0	; select bank0
  4014  0380  01B9               	clrf	_TIMER0_flag	;volatile
  4015                           
  4016                           ;TMR0.c: 36: TMR0 = TIMER0_timeout;
  4017  0381  0870               	movf	_TIMER0_timeout,w	;volatile
  4018  0382  0095               	movwf	21	;volatile
  4019                           
  4020                           ;TMR0.c: 39: TMR0IF = 0;
  4021  0383  110B               	bcf	11,2	;volatile
  4022                           
  4023                           ;TMR0.c: 40: TMR0IE = 1;
  4024  0384  168B               	bsf	11,5	;volatile
  4025                           
  4026                           ;TMR0.c: 41: GIE = 1;
  4027  0385  178B               	bsf	11,7	;volatile
  4028  0386  0008               	return
  4029  0387                     __end_of_start_TMR0_ISR:	
  4030  007E                     btemp	set	126	;btemp
  4031  007E                     int$flags	set	126
  4032  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    52
    Data        0
    BSS         44
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     25      64
    BANK1            32     19      19

Pointer List with Targets:

    measure@Q	PTR short  size(1) Largest target is 2
		 -> sweep@Q(BANK1[2]), 

    measure@I	PTR short  size(1) Largest target is 2
		 -> sweep@I(BANK1[2]), 

    calculate_checksum@data	PTR unsigned char  size(1) Largest target is 10
		 -> sweep@aux(BANK1[7]), measure_Impedance_SE@aux(COMMON[8]), mess_rec(BANK0[10]), 

    lputs_ISR@data	PTR unsigned char  size(1) Largest target is 13
		 -> sweep@aux(BANK1[7]), calibrate_reader@aux(COMMON[8]), measure_Impedance_SE@aux(COMMON[8]), measure_Offset@aux(COMMON[5]), 
		 -> measure_Impedance_no_offset@aux(COMMON[13]), measure_Impedance@aux(COMMON[13]), read_ADC_channels@aux(COMMON[7]), mess_rec(BANK0[10]), 

    setFreq@asic	PTR struct . size(1) Largest target is 2
		 -> sweep@asic(BANK1[2]), 

    setGain@asic	PTR struct . size(1) Largest target is 2
		 -> sweep@asic(BANK1[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_start_TMR0_ISR

Critical Paths under _main in BANK0

    _main->_sweep
    _sweep->_measure
    _measure->_ADC_5

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sweep

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    6989
                                             24 BANK0      1     1      0
                  _SYSTEM_Initialize
                  _USARTX_change_pol
                          _setup_ADC
                         _setup_TMR0
                          _start_RCM
                 _start_RX_USART_ISR
                 _start_TX_USART_ISR
                              _sweep
 ---------------------------------------------------------------------------------
 (1) _sweep                                               21    21      0    6989
                                             22 BANK0      2     2      0
                                              0 BANK1     19    19      0
                 _calculate_checksum
                          _lputs_ISR
                            _measure
                            _setFreq
                            _setGain
 ---------------------------------------------------------------------------------
 (2) _setGain                                              4     3      1     846
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _setFreq                                              4     3      1     408
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _measure                                             16    13      3    2416
                                              6 BANK0     16    13      3
                              _ADC_5
                             _config
 ---------------------------------------------------------------------------------
 (3) _config                                               5     3      2    1442
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (3) _ADC_5                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _lputs_ISR                                            5     4      1    1452
                                              0 BANK0      5     4      1
                     _close_RX_USART
 ---------------------------------------------------------------------------------
 (3) _close_RX_USART                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _calculate_checksum                                   6     5      1     545
                                              0 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (1) _start_TX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RCM                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_TMR0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_ADC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _USARTX_change_pol                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  2     2      0      22
                                              3 COMMON     2     2      0
                     _start_TMR0_ISR
                      _stop_TMR0_ISR
               i1_start_RX_USART_ISR
 ---------------------------------------------------------------------------------
 (5) i1_start_RX_USART_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _stop_TMR0_ISR                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _start_TMR0_ISR                                       3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _USARTX_change_pol
   _setup_ADC
   _setup_TMR0
   _start_RCM
   _start_RX_USART_ISR
   _start_TX_USART_ISR
   _sweep
     _calculate_checksum
     _lputs_ISR
       _close_RX_USART
     _measure
       _ADC_5
       _config
     _setFreq
     _setGain

 _isr (ROOT)
   _start_TMR0_ISR
   _stop_TMR0_ISR
   i1_start_RX_USART_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      5D       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     19      40       6       80.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20     13      13       8       59.4%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      5D       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Feb 20 10:40:29 2018

                    __CFG_CP$OFF 0000                    _USART_rx_data 002F                    _USART_rx_flag 003A  
                  _USART_tx_data 0020                    _USART_tx_flag 0072                              l119 02C1  
                            l412 01C3                              l446 0306                              _GIE 005F  
                            _RA5 0065                              _PS0 04A8                              _PS1 04A9  
                            _PS2 04AA                     __CFG_CPD$OFF 0000                              _PSA 04AB  
                            _isr 0004                     __CFG_BORV$HI 0000                              wreg 0009  
                   __CFG_IESO$ON 0000                   _USART_rx_index 003B                     __CFG_LVP$OFF 0000  
                 _USART_tx_index 0073                             l2421 026B                             l2513 0288  
                           l2531 0327                             l2515 029F                             l2419 0267  
                           l2533 033A                             l2701 00CC                             l2703 00D0  
                           l2561 017B                             l2671 0086                             l2593 01DF  
                           l2577 01B2                             l2587 01D1                             l2749 02CD  
                           l2687 00B2                             ?_isr 0075                             _ADGO 04E9  
                   __CFG_WDTE$ON 0000                             _BRGH 0CF2                             _CREN 0CEC  
                           u1115 026E                             u1145 0311                             u1315 01BC  
                           u1325 01CD                             _LATA 010C                             u1335 01DB  
                           _LATC 010E                             u1425 00D5                             u1507 014E  
                           u1517 0185                             u1487 02BA                             u1497 0138  
                           _PEIE 005E                             _RCIE 048D                             _RCIF 008D  
                           _OERR 0CE9                             _SCKP 0CFC                             _TMR0 0015  
                           _SPEN 0CEF                             _TXIE 048C                             _TXEN 0CF5  
                           _TXIF 008C                             _SYNC 0CF4                             _WPUA 020C  
                           _WPUC 020E           __size_of_stop_TMR0_ISR 0003                     __CFG_WRT$OFF 0000  
                           _filt 021F                             _main 02AD                             fsr0h 0005  
                           fsr1h 0007                             indf0 0000                             fsr0l 0004  
                           indf1 0001                             fsr1l 0006                             btemp 007E  
    __size_of_calculate_checksum 0019                             start 0056                    __CFG_MCLRE$ON 0000  
                          ??_isr 0078   __size_of_OSCILLATOR_Initialize 0006                  _USART_tx_length 0074  
  __end_of_OSCILLATOR_Initialize 03B6                            ?_main 0075                            _ADC_5 0300  
                          _BRG16 0CFB                            i1l130 0036                            i1l128 0015  
                          i1l129 0051                            _RCREG 0199                            _PORTC 000E  
                          _TRISA 008C                   _start_TMR0_ISR 0377                            _TRISC 008E  
                          _TXREG 019A                   __CFG_FCMEN$OFF 0000                            _gains 024B  
                __end_of_measure 01E1                            _freqs 0240                  __end_of_setGain 021F  
                          _sweep 0065                  __end_of_setFreq 0300    __size_ofi1_start_RX_USART_ISR 0011  
                 __CFG_BOREN$OFF 0000                            status 0003                            wtemp0 007E  
                __initialization 0057                     __end_of_filt 0240                     __end_of_main 02D7  
                  _stop_TMR0_ISR 03C0                 ??_close_RX_USART 0047           __end_of_start_TMR0_ISR 0387  
                         ??_main 005F                           ?_ADC_5 0047                   _TIMER0_timeout 0070  
                 __CFG_PLLEN$OFF 0000                           _ADCON0 009D                           _ADCON1 009E  
                    measure@aux1 005B                      measure@aux2 0059                      measure@asic 004E  
                         _ADRESH 009C                           _ADRESL 009B                           _APFCON 011D  
                         _ANSELA 018C                           _ANSELC 018E                           ?_sweep 0075  
                         i1l2113 0020                           u152_27 004E                           _OSCCON 0099  
                         _TMR0IE 005D                           _TMR0IF 005A                           _TMR0CS 04AD  
                         _SPBRGH 019C                           _SPBRGL 019B                   __CFG_PWRTE$OFF 0000  
                 __CFG_STVREN$ON 0000                   ?_stop_TMR0_ISR 0075                           _config 0253  
                ?_start_TMR0_ISR 0075                        ??_measure 0050      __size_of_start_RX_USART_ISR 0011  
                      ??_setGain 0048                        ??_setFreq 0048                           sweep@I 00AB  
                         sweep@Q 00AD                           sweep@i 00A9                _SYSTEM_Initialize 03BD  
        __end_of__initialization 0062               ?_SYSTEM_Initialize 0075                    __end_of_ADC_5 0323  
                 __pcstackCOMMON 0075              ??_SYSTEM_Initialize 0047                    __end_of_gains 0253  
                  __end_of_freqs 024B                    __end_of_sweep 012C                          ??_ADC_5 0049  
                 _OPTION_REGbits 0095      __size_of_start_TX_USART_ISR 000F                      setGain@asic 004A  
      __end_of_SYSTEM_Initialize 03C0                          ??_sweep 005D                       __pbssBANK0 0020  
                    setFreq@asic 0049                       __pmaintext 02AD                  ??_stop_TMR0_ISR 0075  
                     __pintentry 0004                          ?_config 0047                     measure@value 0057  
                        _CLKRCON 039A               __size_of_lputs_ISR 002B                  lputs_ISR@length 0047  
              setFreq@freq_index 0047               __size_of_setup_ADC 0006                          _OSCSTAT 009A  
                        _OSCTUNE 0098               __size_of_start_RCM 0004                          _RXDTSEL 08EF  
                        _TXCKSEL 08EA       __end_of_calculate_checksum 033C     __end_ofi1_start_RX_USART_ISR 0377  
                __size_of_config 002F                          __ptext1 0065                          __ptext2 01E1  
                        __ptext3 02D7                          __ptext4 012C                          __ptext5 0253  
                        __ptext6 0300                          __ptext7 0282                          __ptext8 0396  
                        __ptext9 0323                          _measure 012C            _OSCILLATOR_Initialize 03B0  
                   __size_of_isr 0052                          _setGain 01E1                          _setFreq 02D7  
       ??_PIN_MANAGER_Initialize 0047                          config@i 004A                setGain@gain_index 0047  
     __size_of_SYSTEM_Initialize 0003                          clrloop0 03A5                    _mess_rec_size 003C  
           end_of_initialization 0062                __end_of_lputs_ISR 02AD                __end_of_setup_ADC 03B0  
               ??_start_TMR0_ISR 0075                __end_of_start_RCM 03BA                     __pstringtext 021F  
                     _setup_TMR0 039D                 __CFG_FOSC$INTOSC 0000                       config@conf 0047  
                 __end_of_config 0282       __end_of_start_RX_USART_ISR 0366           ?_OSCILLATOR_Initialize 0075  
            start_initialization 0057  __size_of_PIN_MANAGER_Initialize 0019                      __end_of_isr 0056  
        __size_of_close_RX_USART 0007                _USARTX_change_pol 03BA             i1_start_RX_USART_ISR 0366  
             ?_USARTX_change_pol 0075              ??_USARTX_change_pol 0047                   ADC_5@ADC_value 004B  
                       ??_config 0049                      ?_setup_TMR0 0075       __end_of_start_TX_USART_ISR 0396  
                    __pbssCOMMON 0070                        ___latbits 0000                    __pcstackBANK0 0047  
                  __pcstackBANK1 00A0        __end_of_USARTX_change_pol 03BD                  sweep@gain_index 00AF  
          ?i1_start_RX_USART_ISR 0075                       setGain@aux 0049           _PIN_MANAGER_Initialize 033C  
                     setFreq@aux 004A            __end_of_stop_TMR0_ISR 03C3               _calculate_checksum 0323  
                 __size_of_ADC_5 0023              ?_calculate_checksum 0047                         ?_measure 004D  
                       ?_setGain 0047                         ?_setFreq 0047                    measure@offset 0054  
                sweep@freq_index 00A8                   __size_of_sweep 00C7              __size_of_setup_TMR0 0007  
           ??_calculate_checksum 0048                        clear_ram0 03A4                       lputs_ISR@i 004A  
                      _lputs_ISR 0282                        _setup_ADC 03AA                        _start_RCM 03B6  
                      config@out 004B       __size_of_USARTX_change_pol 0003           ??i1_start_RX_USART_ISR 0075  
                 _close_RX_USART 0396                       sweep@check 00A0                       sweep@count 00AA  
                     ?_lputs_ISR 0047          calculate_checksum@check 004A                       ?_setup_ADC 0075  
        ??_OSCILLATOR_Initialize 0047                start_TMR0_ISR@val 0077                       ?_start_RCM 0075  
         __end_of_close_RX_USART 039D                 __size_of_measure 00B5                 __size_of_setGain 003E  
               __size_of_setFreq 0029                         __ptext10 0387                         __ptext11 0355  
                       __ptext20 0366                         __ptext12 03B6                         __ptext21 03C0  
                       __ptext13 039D                         __ptext22 0377                         __ptext14 03AA  
                       __ptext15 03BA                         __ptext16 03BD                         __ptext17 033C  
                       __ptext18 03B0                    lputs_ISR@data 004B               _start_RX_USART_ISR 0355  
                  __size_of_main 002A                         _mess_rec 003D              ?_start_RX_USART_ISR 0075  
                       int$flags 007E                     ??_setup_TMR0 0047                      _TIMER0_flag 0039  
           ??_start_RX_USART_ISR 0047                         measure@I 0056          __size_of_start_TMR0_ISR 0010  
                       measure@Q 004D                  ?_close_RX_USART 0075                        sweep@asic 00B1  
         calculate_checksum@data 004B                         intlevel1 0000               _start_TX_USART_ISR 0387  
        ?_PIN_MANAGER_Initialize 0075                __CFG_CLKOUTEN$OFF 0000               __end_of_setup_TMR0 03A4  
            ?_start_TX_USART_ISR 0075                      ??_lputs_ISR 0048                      ??_setup_ADC 0047  
                       sweep@aux 00A1                         sweep@ret 00B0            calculate_checksum@num 0047  
                    ??_start_RCM 0047             ??_start_TX_USART_ISR 0047   __end_of_PIN_MANAGER_Initialize 0355  
            calculate_checksum@i 004C  
