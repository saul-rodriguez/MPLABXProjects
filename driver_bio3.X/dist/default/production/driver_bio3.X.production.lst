

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Mar 31 15:20:47 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16LF1823
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	intentry,global,class=CODE,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	dabs	1,0x7E,2
    44  0000                     
    45                           ; Version 1.40
    46                           ; Generated 01/12/2016 GMT
    47                           ; 
    48                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC16LF1823 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     	;# 
    80  0001                     	;# 
    81  0002                     	;# 
    82  0003                     	;# 
    83  0004                     	;# 
    84  0005                     	;# 
    85  0006                     	;# 
    86  0007                     	;# 
    87  0008                     	;# 
    88  0009                     	;# 
    89  000A                     	;# 
    90  000B                     	;# 
    91  000C                     	;# 
    92  000E                     	;# 
    93  0011                     	;# 
    94  0012                     	;# 
    95  0015                     	;# 
    96  0016                     	;# 
    97  0016                     	;# 
    98  0017                     	;# 
    99  0018                     	;# 
   100  0019                     	;# 
   101  001A                     	;# 
   102  001B                     	;# 
   103  001C                     	;# 
   104  001E                     	;# 
   105  001F                     	;# 
   106  008C                     	;# 
   107  008E                     	;# 
   108  0091                     	;# 
   109  0092                     	;# 
   110  0095                     	;# 
   111  0096                     	;# 
   112  0097                     	;# 
   113  0098                     	;# 
   114  0099                     	;# 
   115  009A                     	;# 
   116  009B                     	;# 
   117  009B                     	;# 
   118  009C                     	;# 
   119  009D                     	;# 
   120  009E                     	;# 
   121  010C                     	;# 
   122  010E                     	;# 
   123  0111                     	;# 
   124  0112                     	;# 
   125  0113                     	;# 
   126  0114                     	;# 
   127  0115                     	;# 
   128  0116                     	;# 
   129  0117                     	;# 
   130  0118                     	;# 
   131  0119                     	;# 
   132  011A                     	;# 
   133  011B                     	;# 
   134  011D                     	;# 
   135  011D                     	;# 
   136  018C                     	;# 
   137  018E                     	;# 
   138  0191                     	;# 
   139  0191                     	;# 
   140  0192                     	;# 
   141  0193                     	;# 
   142  0193                     	;# 
   143  0193                     	;# 
   144  0194                     	;# 
   145  0195                     	;# 
   146  0196                     	;# 
   147  0199                     	;# 
   148  019A                     	;# 
   149  019B                     	;# 
   150  019B                     	;# 
   151  019B                     	;# 
   152  019B                     	;# 
   153  019C                     	;# 
   154  019C                     	;# 
   155  019D                     	;# 
   156  019E                     	;# 
   157  019F                     	;# 
   158  020C                     	;# 
   159  020E                     	;# 
   160  0211                     	;# 
   161  0211                     	;# 
   162  0212                     	;# 
   163  0212                     	;# 
   164  0213                     	;# 
   165  0213                     	;# 
   166  0214                     	;# 
   167  0214                     	;# 
   168  0215                     	;# 
   169  0215                     	;# 
   170  0215                     	;# 
   171  0216                     	;# 
   172  0216                     	;# 
   173  0217                     	;# 
   174  0217                     	;# 
   175  0291                     	;# 
   176  0291                     	;# 
   177  0292                     	;# 
   178  0293                     	;# 
   179  0294                     	;# 
   180  0295                     	;# 
   181  0295                     	;# 
   182  0296                     	;# 
   183  0391                     	;# 
   184  0392                     	;# 
   185  0393                     	;# 
   186  039A                     	;# 
   187  039C                     	;# 
   188  039D                     	;# 
   189  039E                     	;# 
   190  039F                     	;# 
   191  0FE4                     	;# 
   192  0FE5                     	;# 
   193  0FE6                     	;# 
   194  0FE7                     	;# 
   195  0FE8                     	;# 
   196  0FE9                     	;# 
   197  0FEA                     	;# 
   198  0FEB                     	;# 
   199  0FED                     	;# 
   200  0FEE                     	;# 
   201  0FEF                     	;# 
   202  0000                     	;# 
   203  0001                     	;# 
   204  0002                     	;# 
   205  0003                     	;# 
   206  0004                     	;# 
   207  0005                     	;# 
   208  0006                     	;# 
   209  0007                     	;# 
   210  0008                     	;# 
   211  0009                     	;# 
   212  000A                     	;# 
   213  000B                     	;# 
   214  000C                     	;# 
   215  000E                     	;# 
   216  0011                     	;# 
   217  0012                     	;# 
   218  0015                     	;# 
   219  0016                     	;# 
   220  0016                     	;# 
   221  0017                     	;# 
   222  0018                     	;# 
   223  0019                     	;# 
   224  001A                     	;# 
   225  001B                     	;# 
   226  001C                     	;# 
   227  001E                     	;# 
   228  001F                     	;# 
   229  008C                     	;# 
   230  008E                     	;# 
   231  0091                     	;# 
   232  0092                     	;# 
   233  0095                     	;# 
   234  0096                     	;# 
   235  0097                     	;# 
   236  0098                     	;# 
   237  0099                     	;# 
   238  009A                     	;# 
   239  009B                     	;# 
   240  009B                     	;# 
   241  009C                     	;# 
   242  009D                     	;# 
   243  009E                     	;# 
   244  010C                     	;# 
   245  010E                     	;# 
   246  0111                     	;# 
   247  0112                     	;# 
   248  0113                     	;# 
   249  0114                     	;# 
   250  0115                     	;# 
   251  0116                     	;# 
   252  0117                     	;# 
   253  0118                     	;# 
   254  0119                     	;# 
   255  011A                     	;# 
   256  011B                     	;# 
   257  011D                     	;# 
   258  011D                     	;# 
   259  018C                     	;# 
   260  018E                     	;# 
   261  0191                     	;# 
   262  0191                     	;# 
   263  0192                     	;# 
   264  0193                     	;# 
   265  0193                     	;# 
   266  0193                     	;# 
   267  0194                     	;# 
   268  0195                     	;# 
   269  0196                     	;# 
   270  0199                     	;# 
   271  019A                     	;# 
   272  019B                     	;# 
   273  019B                     	;# 
   274  019B                     	;# 
   275  019B                     	;# 
   276  019C                     	;# 
   277  019C                     	;# 
   278  019D                     	;# 
   279  019E                     	;# 
   280  019F                     	;# 
   281  020C                     	;# 
   282  020E                     	;# 
   283  0211                     	;# 
   284  0211                     	;# 
   285  0212                     	;# 
   286  0212                     	;# 
   287  0213                     	;# 
   288  0213                     	;# 
   289  0214                     	;# 
   290  0214                     	;# 
   291  0215                     	;# 
   292  0215                     	;# 
   293  0215                     	;# 
   294  0216                     	;# 
   295  0216                     	;# 
   296  0217                     	;# 
   297  0217                     	;# 
   298  0291                     	;# 
   299  0291                     	;# 
   300  0292                     	;# 
   301  0293                     	;# 
   302  0294                     	;# 
   303  0295                     	;# 
   304  0295                     	;# 
   305  0296                     	;# 
   306  0391                     	;# 
   307  0392                     	;# 
   308  0393                     	;# 
   309  039A                     	;# 
   310  039C                     	;# 
   311  039D                     	;# 
   312  039E                     	;# 
   313  039F                     	;# 
   314  0FE4                     	;# 
   315  0FE5                     	;# 
   316  0FE6                     	;# 
   317  0FE7                     	;# 
   318  0FE8                     	;# 
   319  0FE9                     	;# 
   320  0FEA                     	;# 
   321  0FEB                     	;# 
   322  0FED                     	;# 
   323  0FEE                     	;# 
   324  0FEF                     	;# 
   325  0000                     	;# 
   326  0001                     	;# 
   327  0002                     	;# 
   328  0003                     	;# 
   329  0004                     	;# 
   330  0005                     	;# 
   331  0006                     	;# 
   332  0007                     	;# 
   333  0008                     	;# 
   334  0009                     	;# 
   335  000A                     	;# 
   336  000B                     	;# 
   337  000C                     	;# 
   338  000E                     	;# 
   339  0011                     	;# 
   340  0012                     	;# 
   341  0015                     	;# 
   342  0016                     	;# 
   343  0016                     	;# 
   344  0017                     	;# 
   345  0018                     	;# 
   346  0019                     	;# 
   347  001A                     	;# 
   348  001B                     	;# 
   349  001C                     	;# 
   350  001E                     	;# 
   351  001F                     	;# 
   352  008C                     	;# 
   353  008E                     	;# 
   354  0091                     	;# 
   355  0092                     	;# 
   356  0095                     	;# 
   357  0096                     	;# 
   358  0097                     	;# 
   359  0098                     	;# 
   360  0099                     	;# 
   361  009A                     	;# 
   362  009B                     	;# 
   363  009B                     	;# 
   364  009C                     	;# 
   365  009D                     	;# 
   366  009E                     	;# 
   367  010C                     	;# 
   368  010E                     	;# 
   369  0111                     	;# 
   370  0112                     	;# 
   371  0113                     	;# 
   372  0114                     	;# 
   373  0115                     	;# 
   374  0116                     	;# 
   375  0117                     	;# 
   376  0118                     	;# 
   377  0119                     	;# 
   378  011A                     	;# 
   379  011B                     	;# 
   380  011D                     	;# 
   381  011D                     	;# 
   382  018C                     	;# 
   383  018E                     	;# 
   384  0191                     	;# 
   385  0191                     	;# 
   386  0192                     	;# 
   387  0193                     	;# 
   388  0193                     	;# 
   389  0193                     	;# 
   390  0194                     	;# 
   391  0195                     	;# 
   392  0196                     	;# 
   393  0199                     	;# 
   394  019A                     	;# 
   395  019B                     	;# 
   396  019B                     	;# 
   397  019B                     	;# 
   398  019B                     	;# 
   399  019C                     	;# 
   400  019C                     	;# 
   401  019D                     	;# 
   402  019E                     	;# 
   403  019F                     	;# 
   404  020C                     	;# 
   405  020E                     	;# 
   406  0211                     	;# 
   407  0211                     	;# 
   408  0212                     	;# 
   409  0212                     	;# 
   410  0213                     	;# 
   411  0213                     	;# 
   412  0214                     	;# 
   413  0214                     	;# 
   414  0215                     	;# 
   415  0215                     	;# 
   416  0215                     	;# 
   417  0216                     	;# 
   418  0216                     	;# 
   419  0217                     	;# 
   420  0217                     	;# 
   421  0291                     	;# 
   422  0291                     	;# 
   423  0292                     	;# 
   424  0293                     	;# 
   425  0294                     	;# 
   426  0295                     	;# 
   427  0295                     	;# 
   428  0296                     	;# 
   429  0391                     	;# 
   430  0392                     	;# 
   431  0393                     	;# 
   432  039A                     	;# 
   433  039C                     	;# 
   434  039D                     	;# 
   435  039E                     	;# 
   436  039F                     	;# 
   437  0FE4                     	;# 
   438  0FE5                     	;# 
   439  0FE6                     	;# 
   440  0FE7                     	;# 
   441  0FE8                     	;# 
   442  0FE9                     	;# 
   443  0FEA                     	;# 
   444  0FEB                     	;# 
   445  0FED                     	;# 
   446  0FEE                     	;# 
   447  0FEF                     	;# 
   448  0000                     	;# 
   449  0001                     	;# 
   450  0002                     	;# 
   451  0003                     	;# 
   452  0004                     	;# 
   453  0005                     	;# 
   454  0006                     	;# 
   455  0007                     	;# 
   456  0008                     	;# 
   457  0009                     	;# 
   458  000A                     	;# 
   459  000B                     	;# 
   460  000C                     	;# 
   461  000E                     	;# 
   462  0011                     	;# 
   463  0012                     	;# 
   464  0015                     	;# 
   465  0016                     	;# 
   466  0016                     	;# 
   467  0017                     	;# 
   468  0018                     	;# 
   469  0019                     	;# 
   470  001A                     	;# 
   471  001B                     	;# 
   472  001C                     	;# 
   473  001E                     	;# 
   474  001F                     	;# 
   475  008C                     	;# 
   476  008E                     	;# 
   477  0091                     	;# 
   478  0092                     	;# 
   479  0095                     	;# 
   480  0096                     	;# 
   481  0097                     	;# 
   482  0098                     	;# 
   483  0099                     	;# 
   484  009A                     	;# 
   485  009B                     	;# 
   486  009B                     	;# 
   487  009C                     	;# 
   488  009D                     	;# 
   489  009E                     	;# 
   490  010C                     	;# 
   491  010E                     	;# 
   492  0111                     	;# 
   493  0112                     	;# 
   494  0113                     	;# 
   495  0114                     	;# 
   496  0115                     	;# 
   497  0116                     	;# 
   498  0117                     	;# 
   499  0118                     	;# 
   500  0119                     	;# 
   501  011A                     	;# 
   502  011B                     	;# 
   503  011D                     	;# 
   504  011D                     	;# 
   505  018C                     	;# 
   506  018E                     	;# 
   507  0191                     	;# 
   508  0191                     	;# 
   509  0192                     	;# 
   510  0193                     	;# 
   511  0193                     	;# 
   512  0193                     	;# 
   513  0194                     	;# 
   514  0195                     	;# 
   515  0196                     	;# 
   516  0199                     	;# 
   517  019A                     	;# 
   518  019B                     	;# 
   519  019B                     	;# 
   520  019B                     	;# 
   521  019B                     	;# 
   522  019C                     	;# 
   523  019C                     	;# 
   524  019D                     	;# 
   525  019E                     	;# 
   526  019F                     	;# 
   527  020C                     	;# 
   528  020E                     	;# 
   529  0211                     	;# 
   530  0211                     	;# 
   531  0212                     	;# 
   532  0212                     	;# 
   533  0213                     	;# 
   534  0213                     	;# 
   535  0214                     	;# 
   536  0214                     	;# 
   537  0215                     	;# 
   538  0215                     	;# 
   539  0215                     	;# 
   540  0216                     	;# 
   541  0216                     	;# 
   542  0217                     	;# 
   543  0217                     	;# 
   544  0291                     	;# 
   545  0291                     	;# 
   546  0292                     	;# 
   547  0293                     	;# 
   548  0294                     	;# 
   549  0295                     	;# 
   550  0295                     	;# 
   551  0296                     	;# 
   552  0391                     	;# 
   553  0392                     	;# 
   554  0393                     	;# 
   555  039A                     	;# 
   556  039C                     	;# 
   557  039D                     	;# 
   558  039E                     	;# 
   559  039F                     	;# 
   560  0FE4                     	;# 
   561  0FE5                     	;# 
   562  0FE6                     	;# 
   563  0FE7                     	;# 
   564  0FE8                     	;# 
   565  0FE9                     	;# 
   566  0FEA                     	;# 
   567  0FEB                     	;# 
   568  0FED                     	;# 
   569  0FEE                     	;# 
   570  0FEF                     	;# 
   571  0000                     	;# 
   572  0001                     	;# 
   573  0002                     	;# 
   574  0003                     	;# 
   575  0004                     	;# 
   576  0005                     	;# 
   577  0006                     	;# 
   578  0007                     	;# 
   579  0008                     	;# 
   580  0009                     	;# 
   581  000A                     	;# 
   582  000B                     	;# 
   583  000C                     	;# 
   584  000E                     	;# 
   585  0011                     	;# 
   586  0012                     	;# 
   587  0015                     	;# 
   588  0016                     	;# 
   589  0016                     	;# 
   590  0017                     	;# 
   591  0018                     	;# 
   592  0019                     	;# 
   593  001A                     	;# 
   594  001B                     	;# 
   595  001C                     	;# 
   596  001E                     	;# 
   597  001F                     	;# 
   598  008C                     	;# 
   599  008E                     	;# 
   600  0091                     	;# 
   601  0092                     	;# 
   602  0095                     	;# 
   603  0096                     	;# 
   604  0097                     	;# 
   605  0098                     	;# 
   606  0099                     	;# 
   607  009A                     	;# 
   608  009B                     	;# 
   609  009B                     	;# 
   610  009C                     	;# 
   611  009D                     	;# 
   612  009E                     	;# 
   613  010C                     	;# 
   614  010E                     	;# 
   615  0111                     	;# 
   616  0112                     	;# 
   617  0113                     	;# 
   618  0114                     	;# 
   619  0115                     	;# 
   620  0116                     	;# 
   621  0117                     	;# 
   622  0118                     	;# 
   623  0119                     	;# 
   624  011A                     	;# 
   625  011B                     	;# 
   626  011D                     	;# 
   627  011D                     	;# 
   628  018C                     	;# 
   629  018E                     	;# 
   630  0191                     	;# 
   631  0191                     	;# 
   632  0192                     	;# 
   633  0193                     	;# 
   634  0193                     	;# 
   635  0193                     	;# 
   636  0194                     	;# 
   637  0195                     	;# 
   638  0196                     	;# 
   639  0199                     	;# 
   640  019A                     	;# 
   641  019B                     	;# 
   642  019B                     	;# 
   643  019B                     	;# 
   644  019B                     	;# 
   645  019C                     	;# 
   646  019C                     	;# 
   647  019D                     	;# 
   648  019E                     	;# 
   649  019F                     	;# 
   650  020C                     	;# 
   651  020E                     	;# 
   652  0211                     	;# 
   653  0211                     	;# 
   654  0212                     	;# 
   655  0212                     	;# 
   656  0213                     	;# 
   657  0213                     	;# 
   658  0214                     	;# 
   659  0214                     	;# 
   660  0215                     	;# 
   661  0215                     	;# 
   662  0215                     	;# 
   663  0216                     	;# 
   664  0216                     	;# 
   665  0217                     	;# 
   666  0217                     	;# 
   667  0291                     	;# 
   668  0291                     	;# 
   669  0292                     	;# 
   670  0293                     	;# 
   671  0294                     	;# 
   672  0295                     	;# 
   673  0295                     	;# 
   674  0296                     	;# 
   675  0391                     	;# 
   676  0392                     	;# 
   677  0393                     	;# 
   678  039A                     	;# 
   679  039C                     	;# 
   680  039D                     	;# 
   681  039E                     	;# 
   682  039F                     	;# 
   683  0FE4                     	;# 
   684  0FE5                     	;# 
   685  0FE6                     	;# 
   686  0FE7                     	;# 
   687  0FE8                     	;# 
   688  0FE9                     	;# 
   689  0FEA                     	;# 
   690  0FEB                     	;# 
   691  0FED                     	;# 
   692  0FEE                     	;# 
   693  0FEF                     	;# 
   694  0000                     	;# 
   695  0001                     	;# 
   696  0002                     	;# 
   697  0003                     	;# 
   698  0004                     	;# 
   699  0005                     	;# 
   700  0006                     	;# 
   701  0007                     	;# 
   702  0008                     	;# 
   703  0009                     	;# 
   704  000A                     	;# 
   705  000B                     	;# 
   706  000C                     	;# 
   707  000E                     	;# 
   708  0011                     	;# 
   709  0012                     	;# 
   710  0015                     	;# 
   711  0016                     	;# 
   712  0016                     	;# 
   713  0017                     	;# 
   714  0018                     	;# 
   715  0019                     	;# 
   716  001A                     	;# 
   717  001B                     	;# 
   718  001C                     	;# 
   719  001E                     	;# 
   720  001F                     	;# 
   721  008C                     	;# 
   722  008E                     	;# 
   723  0091                     	;# 
   724  0092                     	;# 
   725  0095                     	;# 
   726  0096                     	;# 
   727  0097                     	;# 
   728  0098                     	;# 
   729  0099                     	;# 
   730  009A                     	;# 
   731  009B                     	;# 
   732  009B                     	;# 
   733  009C                     	;# 
   734  009D                     	;# 
   735  009E                     	;# 
   736  010C                     	;# 
   737  010E                     	;# 
   738  0111                     	;# 
   739  0112                     	;# 
   740  0113                     	;# 
   741  0114                     	;# 
   742  0115                     	;# 
   743  0116                     	;# 
   744  0117                     	;# 
   745  0118                     	;# 
   746  0119                     	;# 
   747  011A                     	;# 
   748  011B                     	;# 
   749  011D                     	;# 
   750  011D                     	;# 
   751  018C                     	;# 
   752  018E                     	;# 
   753  0191                     	;# 
   754  0191                     	;# 
   755  0192                     	;# 
   756  0193                     	;# 
   757  0193                     	;# 
   758  0193                     	;# 
   759  0194                     	;# 
   760  0195                     	;# 
   761  0196                     	;# 
   762  0199                     	;# 
   763  019A                     	;# 
   764  019B                     	;# 
   765  019B                     	;# 
   766  019B                     	;# 
   767  019B                     	;# 
   768  019C                     	;# 
   769  019C                     	;# 
   770  019D                     	;# 
   771  019E                     	;# 
   772  019F                     	;# 
   773  020C                     	;# 
   774  020E                     	;# 
   775  0211                     	;# 
   776  0211                     	;# 
   777  0212                     	;# 
   778  0212                     	;# 
   779  0213                     	;# 
   780  0213                     	;# 
   781  0214                     	;# 
   782  0214                     	;# 
   783  0215                     	;# 
   784  0215                     	;# 
   785  0215                     	;# 
   786  0216                     	;# 
   787  0216                     	;# 
   788  0217                     	;# 
   789  0217                     	;# 
   790  0291                     	;# 
   791  0291                     	;# 
   792  0292                     	;# 
   793  0293                     	;# 
   794  0294                     	;# 
   795  0295                     	;# 
   796  0295                     	;# 
   797  0296                     	;# 
   798  0391                     	;# 
   799  0392                     	;# 
   800  0393                     	;# 
   801  039A                     	;# 
   802  039C                     	;# 
   803  039D                     	;# 
   804  039E                     	;# 
   805  039F                     	;# 
   806  0FE4                     	;# 
   807  0FE5                     	;# 
   808  0FE6                     	;# 
   809  0FE7                     	;# 
   810  0FE8                     	;# 
   811  0FE9                     	;# 
   812  0FEA                     	;# 
   813  0FEB                     	;# 
   814  0FED                     	;# 
   815  0FEE                     	;# 
   816  0FEF                     	;# 
   817  0000                     	;# 
   818  0001                     	;# 
   819  0002                     	;# 
   820  0003                     	;# 
   821  0004                     	;# 
   822  0005                     	;# 
   823  0006                     	;# 
   824  0007                     	;# 
   825  0008                     	;# 
   826  0009                     	;# 
   827  000A                     	;# 
   828  000B                     	;# 
   829  000C                     	;# 
   830  000E                     	;# 
   831  0011                     	;# 
   832  0012                     	;# 
   833  0015                     	;# 
   834  0016                     	;# 
   835  0016                     	;# 
   836  0017                     	;# 
   837  0018                     	;# 
   838  0019                     	;# 
   839  001A                     	;# 
   840  001B                     	;# 
   841  001C                     	;# 
   842  001E                     	;# 
   843  001F                     	;# 
   844  008C                     	;# 
   845  008E                     	;# 
   846  0091                     	;# 
   847  0092                     	;# 
   848  0095                     	;# 
   849  0096                     	;# 
   850  0097                     	;# 
   851  0098                     	;# 
   852  0099                     	;# 
   853  009A                     	;# 
   854  009B                     	;# 
   855  009B                     	;# 
   856  009C                     	;# 
   857  009D                     	;# 
   858  009E                     	;# 
   859  010C                     	;# 
   860  010E                     	;# 
   861  0111                     	;# 
   862  0112                     	;# 
   863  0113                     	;# 
   864  0114                     	;# 
   865  0115                     	;# 
   866  0116                     	;# 
   867  0117                     	;# 
   868  0118                     	;# 
   869  0119                     	;# 
   870  011A                     	;# 
   871  011B                     	;# 
   872  011D                     	;# 
   873  011D                     	;# 
   874  018C                     	;# 
   875  018E                     	;# 
   876  0191                     	;# 
   877  0191                     	;# 
   878  0192                     	;# 
   879  0193                     	;# 
   880  0193                     	;# 
   881  0193                     	;# 
   882  0194                     	;# 
   883  0195                     	;# 
   884  0196                     	;# 
   885  0199                     	;# 
   886  019A                     	;# 
   887  019B                     	;# 
   888  019B                     	;# 
   889  019B                     	;# 
   890  019B                     	;# 
   891  019C                     	;# 
   892  019C                     	;# 
   893  019D                     	;# 
   894  019E                     	;# 
   895  019F                     	;# 
   896  020C                     	;# 
   897  020E                     	;# 
   898  0211                     	;# 
   899  0211                     	;# 
   900  0212                     	;# 
   901  0212                     	;# 
   902  0213                     	;# 
   903  0213                     	;# 
   904  0214                     	;# 
   905  0214                     	;# 
   906  0215                     	;# 
   907  0215                     	;# 
   908  0215                     	;# 
   909  0216                     	;# 
   910  0216                     	;# 
   911  0217                     	;# 
   912  0217                     	;# 
   913  0291                     	;# 
   914  0291                     	;# 
   915  0292                     	;# 
   916  0293                     	;# 
   917  0294                     	;# 
   918  0295                     	;# 
   919  0295                     	;# 
   920  0296                     	;# 
   921  0391                     	;# 
   922  0392                     	;# 
   923  0393                     	;# 
   924  039A                     	;# 
   925  039C                     	;# 
   926  039D                     	;# 
   927  039E                     	;# 
   928  039F                     	;# 
   929  0FE4                     	;# 
   930  0FE5                     	;# 
   931  0FE6                     	;# 
   932  0FE7                     	;# 
   933  0FE8                     	;# 
   934  0FE9                     	;# 
   935  0FEA                     	;# 
   936  0FEB                     	;# 
   937  0FED                     	;# 
   938  0FEE                     	;# 
   939  0FEF                     	;# 
   940  0000                     	;# 
   941  0001                     	;# 
   942  0002                     	;# 
   943  0003                     	;# 
   944  0004                     	;# 
   945  0005                     	;# 
   946  0006                     	;# 
   947  0007                     	;# 
   948  0008                     	;# 
   949  0009                     	;# 
   950  000A                     	;# 
   951  000B                     	;# 
   952  000C                     	;# 
   953  000E                     	;# 
   954  0011                     	;# 
   955  0012                     	;# 
   956  0015                     	;# 
   957  0016                     	;# 
   958  0016                     	;# 
   959  0017                     	;# 
   960  0018                     	;# 
   961  0019                     	;# 
   962  001A                     	;# 
   963  001B                     	;# 
   964  001C                     	;# 
   965  001E                     	;# 
   966  001F                     	;# 
   967  008C                     	;# 
   968  008E                     	;# 
   969  0091                     	;# 
   970  0092                     	;# 
   971  0095                     	;# 
   972  0096                     	;# 
   973  0097                     	;# 
   974  0098                     	;# 
   975  0099                     	;# 
   976  009A                     	;# 
   977  009B                     	;# 
   978  009B                     	;# 
   979  009C                     	;# 
   980  009D                     	;# 
   981  009E                     	;# 
   982  010C                     	;# 
   983  010E                     	;# 
   984  0111                     	;# 
   985  0112                     	;# 
   986  0113                     	;# 
   987  0114                     	;# 
   988  0115                     	;# 
   989  0116                     	;# 
   990  0117                     	;# 
   991  0118                     	;# 
   992  0119                     	;# 
   993  011A                     	;# 
   994  011B                     	;# 
   995  011D                     	;# 
   996  011D                     	;# 
   997  018C                     	;# 
   998  018E                     	;# 
   999  0191                     	;# 
  1000  0191                     	;# 
  1001  0192                     	;# 
  1002  0193                     	;# 
  1003  0193                     	;# 
  1004  0193                     	;# 
  1005  0194                     	;# 
  1006  0195                     	;# 
  1007  0196                     	;# 
  1008  0199                     	;# 
  1009  019A                     	;# 
  1010  019B                     	;# 
  1011  019B                     	;# 
  1012  019B                     	;# 
  1013  019B                     	;# 
  1014  019C                     	;# 
  1015  019C                     	;# 
  1016  019D                     	;# 
  1017  019E                     	;# 
  1018  019F                     	;# 
  1019  020C                     	;# 
  1020  020E                     	;# 
  1021  0211                     	;# 
  1022  0211                     	;# 
  1023  0212                     	;# 
  1024  0212                     	;# 
  1025  0213                     	;# 
  1026  0213                     	;# 
  1027  0214                     	;# 
  1028  0214                     	;# 
  1029  0215                     	;# 
  1030  0215                     	;# 
  1031  0215                     	;# 
  1032  0216                     	;# 
  1033  0216                     	;# 
  1034  0217                     	;# 
  1035  0217                     	;# 
  1036  0291                     	;# 
  1037  0291                     	;# 
  1038  0292                     	;# 
  1039  0293                     	;# 
  1040  0294                     	;# 
  1041  0295                     	;# 
  1042  0295                     	;# 
  1043  0296                     	;# 
  1044  0391                     	;# 
  1045  0392                     	;# 
  1046  0393                     	;# 
  1047  039A                     	;# 
  1048  039C                     	;# 
  1049  039D                     	;# 
  1050  039E                     	;# 
  1051  039F                     	;# 
  1052  0FE4                     	;# 
  1053  0FE5                     	;# 
  1054  0FE6                     	;# 
  1055  0FE7                     	;# 
  1056  0FE8                     	;# 
  1057  0FE9                     	;# 
  1058  0FEA                     	;# 
  1059  0FEB                     	;# 
  1060  0FED                     	;# 
  1061  0FEE                     	;# 
  1062  0FEF                     	;# 
  1063  0000                     	;# 
  1064  0001                     	;# 
  1065  0002                     	;# 
  1066  0003                     	;# 
  1067  0004                     	;# 
  1068  0005                     	;# 
  1069  0006                     	;# 
  1070  0007                     	;# 
  1071  0008                     	;# 
  1072  0009                     	;# 
  1073  000A                     	;# 
  1074  000B                     	;# 
  1075  000C                     	;# 
  1076  000E                     	;# 
  1077  0011                     	;# 
  1078  0012                     	;# 
  1079  0015                     	;# 
  1080  0016                     	;# 
  1081  0016                     	;# 
  1082  0017                     	;# 
  1083  0018                     	;# 
  1084  0019                     	;# 
  1085  001A                     	;# 
  1086  001B                     	;# 
  1087  001C                     	;# 
  1088  001E                     	;# 
  1089  001F                     	;# 
  1090  008C                     	;# 
  1091  008E                     	;# 
  1092  0091                     	;# 
  1093  0092                     	;# 
  1094  0095                     	;# 
  1095  0096                     	;# 
  1096  0097                     	;# 
  1097  0098                     	;# 
  1098  0099                     	;# 
  1099  009A                     	;# 
  1100  009B                     	;# 
  1101  009B                     	;# 
  1102  009C                     	;# 
  1103  009D                     	;# 
  1104  009E                     	;# 
  1105  010C                     	;# 
  1106  010E                     	;# 
  1107  0111                     	;# 
  1108  0112                     	;# 
  1109  0113                     	;# 
  1110  0114                     	;# 
  1111  0115                     	;# 
  1112  0116                     	;# 
  1113  0117                     	;# 
  1114  0118                     	;# 
  1115  0119                     	;# 
  1116  011A                     	;# 
  1117  011B                     	;# 
  1118  011D                     	;# 
  1119  011D                     	;# 
  1120  018C                     	;# 
  1121  018E                     	;# 
  1122  0191                     	;# 
  1123  0191                     	;# 
  1124  0192                     	;# 
  1125  0193                     	;# 
  1126  0193                     	;# 
  1127  0193                     	;# 
  1128  0194                     	;# 
  1129  0195                     	;# 
  1130  0196                     	;# 
  1131  0199                     	;# 
  1132  019A                     	;# 
  1133  019B                     	;# 
  1134  019B                     	;# 
  1135  019B                     	;# 
  1136  019B                     	;# 
  1137  019C                     	;# 
  1138  019C                     	;# 
  1139  019D                     	;# 
  1140  019E                     	;# 
  1141  019F                     	;# 
  1142  020C                     	;# 
  1143  020E                     	;# 
  1144  0211                     	;# 
  1145  0211                     	;# 
  1146  0212                     	;# 
  1147  0212                     	;# 
  1148  0213                     	;# 
  1149  0213                     	;# 
  1150  0214                     	;# 
  1151  0214                     	;# 
  1152  0215                     	;# 
  1153  0215                     	;# 
  1154  0215                     	;# 
  1155  0216                     	;# 
  1156  0216                     	;# 
  1157  0217                     	;# 
  1158  0217                     	;# 
  1159  0291                     	;# 
  1160  0291                     	;# 
  1161  0292                     	;# 
  1162  0293                     	;# 
  1163  0294                     	;# 
  1164  0295                     	;# 
  1165  0295                     	;# 
  1166  0296                     	;# 
  1167  0391                     	;# 
  1168  0392                     	;# 
  1169  0393                     	;# 
  1170  039A                     	;# 
  1171  039C                     	;# 
  1172  039D                     	;# 
  1173  039E                     	;# 
  1174  039F                     	;# 
  1175  0FE4                     	;# 
  1176  0FE5                     	;# 
  1177  0FE6                     	;# 
  1178  0FE7                     	;# 
  1179  0FE8                     	;# 
  1180  0FE9                     	;# 
  1181  0FEA                     	;# 
  1182  0FEB                     	;# 
  1183  0FED                     	;# 
  1184  0FEE                     	;# 
  1185  0FEF                     	;# 
  1186                           
  1187                           	psect	stringtext
  1188  0584                     __pstringtext:	
  1189  0584                     _freqs:	
  1190  0584  3400               	retlw	0
  1191  0585  3401               	retlw	1
  1192  0586  3402               	retlw	2
  1193  0587  3403               	retlw	3
  1194  0588  3404               	retlw	4
  1195  0589  3405               	retlw	5
  1196  058A  3406               	retlw	6
  1197  058B  3407               	retlw	7
  1198  058C  3408               	retlw	8
  1199  058D  3409               	retlw	9
  1200  058E  340A               	retlw	10
  1201  058F                     __end_of_freqs:	
  1202  058F                     _gains:	
  1203  058F  3404               	retlw	4
  1204  0590  3405               	retlw	5
  1205  0591  3407               	retlw	7
  1206  0592  3403               	retlw	3
  1207  0593  3423               	retlw	35
  1208  0594  3463               	retlw	99
  1209  0595  346B               	retlw	107
  1210  0596  347B               	retlw	123
  1211  0597                     __end_of_gains:	
  1212  000E                     _PORTC	set	14
  1213  0015                     _TMR0	set	21
  1214  005F                     _GIE	set	95
  1215  005E                     _PEIE	set	94
  1216  0065                     _RA5	set	101
  1217  008D                     _RCIF	set	141
  1218  005D                     _TMR0IE	set	93
  1219  005A                     _TMR0IF	set	90
  1220  008C                     _TXIF	set	140
  1221  009D                     _ADCON0	set	157
  1222  009E                     _ADCON1	set	158
  1223  009C                     _ADRESH	set	156
  1224  009B                     _ADRESL	set	155
  1225  0095                     _OPTION_REGbits	set	149
  1226  0099                     _OSCCON	set	153
  1227  009A                     _OSCSTAT	set	154
  1228  0098                     _OSCTUNE	set	152
  1229  008C                     _TRISA	set	140
  1230  008E                     _TRISC	set	142
  1231  04E9                     _ADGO	set	1257
  1232  04A8                     _PS0	set	1192
  1233  04A9                     _PS1	set	1193
  1234  04AA                     _PS2	set	1194
  1235  04AB                     _PSA	set	1195
  1236  048D                     _RCIE	set	1165
  1237  04AD                     _TMR0CS	set	1197
  1238  048C                     _TXIE	set	1164
  1239  011D                     _APFCON	set	285
  1240  010C                     _LATA	set	268
  1241  010E                     _LATC	set	270
  1242  08EF                     _RXDTSEL	set	2287
  1243  08EA                     _TXCKSEL	set	2282
  1244  018C                     _ANSELA	set	396
  1245  018E                     _ANSELC	set	398
  1246  0199                     _RCREG	set	409
  1247  019C                     _SPBRGH	set	412
  1248  019B                     _SPBRGL	set	411
  1249  019A                     _TXREG	set	410
  1250  0CFB                     _BRG16	set	3323
  1251  0CF2                     _BRGH	set	3314
  1252  0CEC                     _CREN	set	3308
  1253  0CE9                     _OERR	set	3305
  1254  0CFC                     _SCKP	set	3324
  1255  0CEF                     _SPEN	set	3311
  1256  0CF4                     _SYNC	set	3316
  1257  0CF5                     _TXEN	set	3317
  1258  020C                     _WPUA	set	524
  1259  020E                     _WPUC	set	526
  1260  039A                     _CLKRCON	set	922
  1261                           
  1262                           ; #config settings
  1263  0000                     
  1264                           	psect	cinit
  1265  0057                     start_initialization:	
  1266  0057                     __initialization:	
  1267                           
  1268                           ; Clear objects allocated to COMMON
  1269  0057  01F0               	clrf	__pbssCOMMON& (0+127)
  1270  0058  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  1271  0059  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  1272  005A  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  1273  005B  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  1274                           
  1275                           ; Clear objects allocated to BANK0
  1276  005C  304E               	movlw	low __pbssBANK0
  1277  005D  0084               	movwf	4
  1278  005E  3000               	movlw	high __pbssBANK0
  1279  005F  0085               	movwf	5
  1280  0060  301D               	movlw	29
  1281  0061  25E6               	fcall	clear_ram0
  1282                           
  1283                           ; Clear objects allocated to BANK1
  1284  0062  30A0               	movlw	low __pbssBANK1
  1285  0063  0084               	movwf	4
  1286  0064  3000               	movlw	high __pbssBANK1
  1287  0065  0085               	movwf	5
  1288  0066  300F               	movlw	15
  1289  0067  25E6               	fcall	clear_ram0
  1290  0068                     end_of_initialization:	
  1291                           ;End of C runtime variable initialization code
  1292                           
  1293  0068                     __end_of__initialization:	
  1294  0068  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1295  0069  0020               	movlb	0
  1296  006A  2B2C               	ljmp	_main	;jump to C main() function
  1297                           
  1298                           	psect	bssCOMMON
  1299  0070                     __pbssCOMMON:	
  1300  0070                     _TIMER0_timeout:	
  1301  0070                     	ds	2
  1302  0072                     _USART_tx_flag:	
  1303  0072                     	ds	1
  1304  0073                     _USART_tx_index:	
  1305  0073                     	ds	1
  1306  0074                     _USART_tx_length:	
  1307  0074                     	ds	1
  1308                           
  1309                           	psect	bssBANK0
  1310  004E                     __pbssBANK0:	
  1311  004E                     _USART_rx_data:	
  1312  004E                     	ds	15
  1313  005D                     _TIMER0_flag:	
  1314  005D                     	ds	1
  1315  005E                     _USART_rx_flag:	
  1316  005E                     	ds	1
  1317  005F                     _USART_rx_index:	
  1318  005F                     	ds	1
  1319  0060                     _mess_rec_size:	
  1320  0060                     	ds	1
  1321  0061                     _mess_rec:	
  1322  0061                     	ds	10
  1323                           
  1324                           	psect	bssBANK1
  1325  00A0                     __pbssBANK1:	
  1326  00A0                     _USART_tx_data:	
  1327  00A0                     	ds	15
  1328                           
  1329                           	psect	clrtext
  1330  05E6                     clear_ram0:	
  1331                           ;	Called with FSR0 containing the base address, and
  1332                           ;	WREG with the size to clear
  1333                           
  1334  05E6  0064               	clrwdt	;clear the watchdog before getting into this loop
  1335  05E7                     clrloop0:	
  1336  05E7  0180               	clrf	0	;clear RAM location pointed to by FSR
  1337  05E8  3101               	addfsr 0,1
  1338  05E9  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1339  05EA  2DE7               	goto	clrloop0	;have we reached the end yet?
  1340  05EB  3400               	retlw	0	;all done for this memory range, return
  1341                           
  1342                           	psect	cstackCOMMON
  1343  0075                     __pcstackCOMMON:	
  1344  0075                     ?_OSCILLATOR_Initialize:	
  1345  0075                     ?_setup_TMR0:	
  1346                           ; 1 bytes @ 0x0
  1347                           
  1348  0075                     ?_start_TX_USART_ISR:	
  1349                           ; 1 bytes @ 0x0
  1350                           
  1351  0075                     ?_start_RX_USART_ISR:	
  1352                           ; 1 bytes @ 0x0
  1353                           
  1354  0075                     ?_start_RCM:	
  1355                           ; 1 bytes @ 0x0
  1356                           
  1357  0075                     ?_setup_ADC:	
  1358                           ; 1 bytes @ 0x0
  1359                           
  1360  0075                     ?_mess_handler:	
  1361                           ; 1 bytes @ 0x0
  1362                           
  1363  0075                     ?_stop_TMR0_ISR:	
  1364                           ; 1 bytes @ 0x0
  1365                           
  1366  0075                     ??_stop_TMR0_ISR:	
  1367                           ; 1 bytes @ 0x0
  1368                           
  1369  0075                     ?_start_TMR0_ISR:	
  1370                           ; 1 bytes @ 0x0
  1371                           
  1372  0075                     ??_start_TMR0_ISR:	
  1373                           ; 1 bytes @ 0x0
  1374                           
  1375  0075                     ?_sweep:	
  1376                           ; 1 bytes @ 0x0
  1377                           
  1378  0075                     ?_config_ASIC:	
  1379                           ; 1 bytes @ 0x0
  1380                           
  1381  0075                     ?_read_ADC_channels:	
  1382                           ; 1 bytes @ 0x0
  1383                           
  1384  0075                     ?_measure_Impedance:	
  1385                           ; 1 bytes @ 0x0
  1386                           
  1387  0075                     ?_measure_Impedance_no_offset:	
  1388                           ; 1 bytes @ 0x0
  1389                           
  1390  0075                     ?_measure_Offset:	
  1391                           ; 1 bytes @ 0x0
  1392                           
  1393  0075                     ?_measure_Impedance_SE:	
  1394                           ; 1 bytes @ 0x0
  1395                           
  1396  0075                     ?_PIN_MANAGER_Initialize:	
  1397                           ; 1 bytes @ 0x0
  1398                           
  1399  0075                     ?_SYSTEM_Initialize:	
  1400                           ; 1 bytes @ 0x0
  1401                           
  1402  0075                     ?_main:	
  1403                           ; 1 bytes @ 0x0
  1404                           
  1405  0075                     ?_isr:	
  1406                           ; 1 bytes @ 0x0
  1407                           
  1408  0075                     ?_close_RX_USART:	
  1409                           ; 1 bytes @ 0x0
  1410                           
  1411  0075                     ?i1_start_RX_USART_ISR:	
  1412                           ; 1 bytes @ 0x0
  1413                           
  1414  0075                     ??i1_start_RX_USART_ISR:	
  1415                           ; 1 bytes @ 0x0
  1416                           
  1417                           
  1418                           ; 1 bytes @ 0x0
  1419  0075                     	ds	2
  1420  0077                     start_TMR0_ISR@val:	
  1421                           
  1422                           ; 1 bytes @ 0x2
  1423  0077                     	ds	1
  1424  0078                     ??_isr:	
  1425                           
  1426                           ; 1 bytes @ 0x3
  1427  0078                     	ds	2
  1428                           
  1429                           	psect	cstackBANK0
  1430  0020                     __pcstackBANK0:	
  1431  0020                     ??_OSCILLATOR_Initialize:	
  1432  0020                     ??_setup_TMR0:	
  1433                           ; 1 bytes @ 0x0
  1434                           
  1435  0020                     ??_start_TX_USART_ISR:	
  1436                           ; 1 bytes @ 0x0
  1437                           
  1438  0020                     ??_start_RX_USART_ISR:	
  1439                           ; 1 bytes @ 0x0
  1440                           
  1441  0020                     ??_start_RCM:	
  1442                           ; 1 bytes @ 0x0
  1443                           
  1444  0020                     ??_setup_ADC:	
  1445                           ; 1 bytes @ 0x0
  1446                           
  1447  0020                     ??_PIN_MANAGER_Initialize:	
  1448                           ; 1 bytes @ 0x0
  1449                           
  1450  0020                     ??_SYSTEM_Initialize:	
  1451                           ; 1 bytes @ 0x0
  1452                           
  1453  0020                     ?_BIO_config:	
  1454                           ; 1 bytes @ 0x0
  1455                           
  1456  0020                     ?_setGain:	
  1457                           ; 1 bytes @ 0x0
  1458                           
  1459  0020                     ?_setFreq:	
  1460                           ; 1 bytes @ 0x0
  1461                           
  1462  0020                     ??_close_RX_USART:	
  1463                           ; 1 bytes @ 0x0
  1464                           
  1465  0020                     ?_lputs_ISR:	
  1466                           ; 1 bytes @ 0x0
  1467                           
  1468  0020                     ?_calculate_checksum:	
  1469                           ; 1 bytes @ 0x0
  1470                           
  1471  0020                     ?_ADC_2:	
  1472                           ; 1 bytes @ 0x0
  1473                           
  1474  0020                     ?_ADC_4:	
  1475                           ; 2 bytes @ 0x0
  1476                           
  1477  0020                     ?_ADC_5:	
  1478                           ; 2 bytes @ 0x0
  1479                           
  1480  0020                     setGain@gain_index:	
  1481                           ; 2 bytes @ 0x0
  1482                           
  1483  0020                     setFreq@freq_index:	
  1484                           ; 1 bytes @ 0x0
  1485                           
  1486  0020                     lputs_ISR@length:	
  1487                           ; 1 bytes @ 0x0
  1488                           
  1489  0020                     calculate_checksum@num:	
  1490                           ; 1 bytes @ 0x0
  1491                           
  1492  0020                     BIO_config@conf:	
  1493                           ; 1 bytes @ 0x0
  1494                           
  1495                           
  1496                           ; 2 bytes @ 0x0
  1497  0020                     	ds	1
  1498  0021                     ??_setGain:	
  1499  0021                     ??_setFreq:	
  1500                           ; 1 bytes @ 0x1
  1501                           
  1502  0021                     ??_lputs_ISR:	
  1503                           ; 1 bytes @ 0x1
  1504                           
  1505  0021                     ??_calculate_checksum:	
  1506                           ; 1 bytes @ 0x1
  1507                           
  1508                           
  1509                           ; 1 bytes @ 0x1
  1510  0021                     	ds	1
  1511  0022                     ??_ADC_2:	
  1512  0022                     ??_ADC_4:	
  1513                           ; 1 bytes @ 0x2
  1514                           
  1515  0022                     ??_ADC_5:	
  1516                           ; 1 bytes @ 0x2
  1517                           
  1518  0022                     ??_BIO_config:	
  1519                           ; 1 bytes @ 0x2
  1520                           
  1521  0022                     setGain@aux:	
  1522                           ; 1 bytes @ 0x2
  1523                           
  1524  0022                     setFreq@asic:	
  1525                           ; 1 bytes @ 0x2
  1526                           
  1527                           
  1528                           ; 1 bytes @ 0x2
  1529  0022                     	ds	1
  1530  0023                     BIO_config@i:	
  1531  0023                     setGain@asic:	
  1532                           ; 1 bytes @ 0x3
  1533                           
  1534  0023                     setFreq@aux:	
  1535                           ; 1 bytes @ 0x3
  1536                           
  1537  0023                     lputs_ISR@i:	
  1538                           ; 1 bytes @ 0x3
  1539                           
  1540  0023                     calculate_checksum@data:	
  1541                           ; 1 bytes @ 0x3
  1542                           
  1543                           
  1544                           ; 1 bytes @ 0x3
  1545  0023                     	ds	1
  1546  0024                     BIO_config@out:	
  1547  0024                     lputs_ISR@data:	
  1548                           ; 1 bytes @ 0x4
  1549                           
  1550  0024                     calculate_checksum@check:	
  1551                           ; 1 bytes @ 0x4
  1552                           
  1553  0024                     ADC_2@ADC_value:	
  1554                           ; 1 bytes @ 0x4
  1555                           
  1556  0024                     ADC_4@ADC_value:	
  1557                           ; 2 bytes @ 0x4
  1558                           
  1559  0024                     ADC_5@ADC_value:	
  1560                           ; 2 bytes @ 0x4
  1561                           
  1562                           
  1563                           ; 2 bytes @ 0x4
  1564  0024                     	ds	1
  1565  0025                     ??_config_ASIC:	
  1566  0025                     calculate_checksum@i:	
  1567                           ; 1 bytes @ 0x5
  1568                           
  1569                           
  1570                           ; 1 bytes @ 0x5
  1571  0025                     	ds	1
  1572  0026                     ??_read_ADC_channels:	
  1573  0026                     ??_measure_Impedance:	
  1574                           ; 1 bytes @ 0x6
  1575                           
  1576  0026                     ??_measure_Impedance_no_offset:	
  1577                           ; 1 bytes @ 0x6
  1578                           
  1579  0026                     ??_measure_Offset:	
  1580                           ; 1 bytes @ 0x6
  1581                           
  1582  0026                     ??_measure_Impedance_SE:	
  1583                           ; 1 bytes @ 0x6
  1584                           
  1585  0026                     ?_measure:	
  1586                           ; 1 bytes @ 0x6
  1587                           
  1588  0026                     measure@Q:	
  1589                           ; 1 bytes @ 0x6
  1590                           
  1591  0026                     config_ASIC@asic:	
  1592                           ; 1 bytes @ 0x6
  1593                           
  1594                           
  1595                           ; 2 bytes @ 0x6
  1596  0026                     	ds	1
  1597  0027                     measure@asic:	
  1598  0027                     measure_Offset@aux:	
  1599                           ; 2 bytes @ 0x7
  1600                           
  1601  0027                     read_ADC_channels@aux:	
  1602                           ; 5 bytes @ 0x7
  1603                           
  1604  0027                     measure_Impedance_SE@aux:	
  1605                           ; 7 bytes @ 0x7
  1606                           
  1607  0027                     measure_Impedance@aux:	
  1608                           ; 8 bytes @ 0x7
  1609                           
  1610  0027                     measure_Impedance_no_offset@aux:	
  1611                           ; 13 bytes @ 0x7
  1612                           
  1613                           
  1614                           ; 13 bytes @ 0x7
  1615  0027                     	ds	2
  1616  0029                     ??_measure:	
  1617                           
  1618                           ; 1 bytes @ 0x9
  1619  0029                     	ds	3
  1620  002C                     measure_Offset@value1:	
  1621                           
  1622                           ; 2 bytes @ 0xC
  1623  002C                     	ds	1
  1624  002D                     measure@offset:	
  1625                           
  1626                           ; 2 bytes @ 0xD
  1627  002D                     	ds	1
  1628  002E                     read_ADC_channels@value1:	
  1629  002E                     measure_Offset@value2:	
  1630                           ; 2 bytes @ 0xE
  1631                           
  1632                           
  1633                           ; 2 bytes @ 0xE
  1634  002E                     	ds	1
  1635  002F                     measure@I:	
  1636  002F                     measure_Impedance_SE@value1:	
  1637                           ; 1 bytes @ 0xF
  1638                           
  1639                           
  1640                           ; 2 bytes @ 0xF
  1641  002F                     	ds	1
  1642  0030                     read_ADC_channels@value2:	
  1643  0030                     measure_Offset@asic:	
  1644                           ; 2 bytes @ 0x10
  1645                           
  1646  0030                     measure@value:	
  1647                           ; 2 bytes @ 0x10
  1648                           
  1649                           
  1650                           ; 2 bytes @ 0x10
  1651  0030                     	ds	1
  1652  0031                     measure_Impedance_SE@asic:	
  1653                           
  1654                           ; 2 bytes @ 0x11
  1655  0031                     	ds	1
  1656  0032                     read_ADC_channels@value3:	
  1657  0032                     measure@aux2:	
  1658                           ; 2 bytes @ 0x12
  1659                           
  1660                           
  1661                           ; 2 bytes @ 0x12
  1662  0032                     	ds	2
  1663  0034                     measure_Impedance@value1:	
  1664  0034                     measure_Impedance_no_offset@value1:	
  1665                           ; 2 bytes @ 0x14
  1666                           
  1667  0034                     measure@aux1:	
  1668                           ; 2 bytes @ 0x14
  1669                           
  1670                           
  1671                           ; 2 bytes @ 0x14
  1672  0034                     	ds	2
  1673  0036                     ??_sweep:	
  1674  0036                     measure_Impedance@value2:	
  1675                           ; 1 bytes @ 0x16
  1676                           
  1677  0036                     measure_Impedance_no_offset@value2:	
  1678                           ; 2 bytes @ 0x16
  1679                           
  1680                           
  1681                           ; 2 bytes @ 0x16
  1682  0036                     	ds	2
  1683  0038                     sweep@check:	
  1684  0038                     measure_Impedance@asic:	
  1685                           ; 1 bytes @ 0x18
  1686                           
  1687  0038                     measure_Impedance_no_offset@asic:	
  1688                           ; 2 bytes @ 0x18
  1689                           
  1690                           
  1691                           ; 2 bytes @ 0x18
  1692  0038                     	ds	1
  1693  0039                     sweep@aux:	
  1694                           
  1695                           ; 7 bytes @ 0x19
  1696  0039                     	ds	7
  1697  0040                     sweep@freq_index:	
  1698                           
  1699                           ; 1 bytes @ 0x20
  1700  0040                     	ds	1
  1701  0041                     sweep@i:	
  1702                           
  1703                           ; 1 bytes @ 0x21
  1704  0041                     	ds	1
  1705  0042                     sweep@count:	
  1706                           
  1707                           ; 1 bytes @ 0x22
  1708  0042                     	ds	1
  1709  0043                     sweep@I:	
  1710                           
  1711                           ; 2 bytes @ 0x23
  1712  0043                     	ds	2
  1713  0045                     sweep@Q:	
  1714                           
  1715                           ; 2 bytes @ 0x25
  1716  0045                     	ds	2
  1717  0047                     sweep@gain_index:	
  1718                           
  1719                           ; 1 bytes @ 0x27
  1720  0047                     	ds	1
  1721  0048                     sweep@ret:	
  1722                           
  1723                           ; 1 bytes @ 0x28
  1724  0048                     	ds	1
  1725  0049                     sweep@asic:	
  1726                           
  1727                           ; 2 bytes @ 0x29
  1728  0049                     	ds	2
  1729  004B                     ??_mess_handler:	
  1730                           
  1731                           ; 1 bytes @ 0x2B
  1732  004B                     	ds	1
  1733  004C                     ??_main:	
  1734                           
  1735                           ; 1 bytes @ 0x2C
  1736  004C                     	ds	1
  1737  004D                     main@i:	
  1738                           
  1739                           ; 1 bytes @ 0x2D
  1740  004D                     	ds	1
  1741                           
  1742                           	psect	maintext
  1743  032C                     __pmaintext:	
  1744 ;;
  1745 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1746 ;;
  1747 ;; *************** function _main *****************
  1748 ;; Defined at:
  1749 ;;		line 20 in file "main.c"
  1750 ;; Parameters:    Size  Location     Type
  1751 ;;		None
  1752 ;; Auto vars:     Size  Location     Type
  1753 ;;  i               1   45[BANK0 ] unsigned char 
  1754 ;; Return value:  Size  Location     Type
  1755 ;;                  1    wreg      void 
  1756 ;; Registers used:
  1757 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1758 ;; Tracked objects:
  1759 ;;		On entry : B1F/0
  1760 ;;		On exit  : 0/0
  1761 ;;		Unchanged: 0/0
  1762 ;; Data sizes:     COMMON   BANK0   BANK1
  1763 ;;      Params:         0       0       0
  1764 ;;      Locals:         0       1       0
  1765 ;;      Temps:          0       1       0
  1766 ;;      Totals:         0       2       0
  1767 ;;Total ram usage:        2 bytes
  1768 ;; Hardware stack levels required when called:    6
  1769 ;; This function calls:
  1770 ;;		_SYSTEM_Initialize
  1771 ;;		_mess_handler
  1772 ;;		_setup_ADC
  1773 ;;		_setup_TMR0
  1774 ;;		_start_RCM
  1775 ;;		_start_RX_USART_ISR
  1776 ;;		_start_TX_USART_ISR
  1777 ;; This function is called by:
  1778 ;;		Startup code after reset
  1779 ;; This function uses a non-reentrant model
  1780 ;;
  1781                           
  1782                           
  1783                           ;psect for function _main
  1784  032C                     _main:	
  1785                           
  1786                           ;main.c: 22: unsigned char i;
  1787                           ;main.c: 24: SYSTEM_Initialize();
  1788                           
  1789                           ;incstack = 0
  1790                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1791  032C  25FC               	fcall	_SYSTEM_Initialize
  1792                           
  1793                           ;main.c: 28: setup_TMR0();
  1794  032D  25D8               	fcall	_setup_TMR0
  1795                           
  1796                           ;main.c: 29: start_TX_USART_ISR();
  1797  032E  25C9               	fcall	_start_TX_USART_ISR
  1798                           
  1799                           ;main.c: 30: start_RX_USART_ISR();
  1800  032F  2597               	fcall	_start_RX_USART_ISR
  1801                           
  1802                           ;main.c: 31: start_RCM();
  1803  0330  25F8               	fcall	_start_RCM
  1804                           
  1805                           ;main.c: 32: setup_ADC();
  1806  0331  25EC               	fcall	_setup_ADC
  1807                           
  1808                           ;main.c: 35: RA5 = 0;
  1809  0332  0020               	movlb	0	; select bank0
  1810  0333  128C               	bcf	12,5	;volatile
  1811                           
  1812                           ;main.c: 36: _delay((unsigned long)((150)*(500000/4000.0)));
  1813  0334  3019               	movlw	25
  1814  0335  0020               	movlb	0	; select bank0
  1815  0336  00CC               	movwf	??_main
  1816  0337  3058               	movlw	88
  1817  0338                     u1647:	
  1818  0338  0B89               	decfsz	9,f
  1819  0339  2B38               	goto	u1647
  1820  033A  0BCC               	decfsz	??_main,f
  1821  033B  2B38               	goto	u1647
  1822  033C  0000               	nop
  1823                           
  1824                           ;main.c: 37: RA5 = 1;
  1825  033D  0020               	movlb	0	; select bank0
  1826  033E  168C               	bsf	12,5	;volatile
  1827  033F                     l117:	
  1828                           ;main.c: 109: while(1) {
  1829                           
  1830  033F  0064               	clrwdt	;# 
  1831                           
  1832                           ;main.c: 113: if (TIMER0_flag) {
  1833  0340  0020               	movlb	0	; select bank0
  1834  0341  085D               	movf	_TIMER0_flag,w	;volatile
  1835  0342  1903               	btfsc	3,2
  1836  0343  2B3F               	goto	l117
  1837                           
  1838                           ;main.c: 114: TIMER0_flag = 0;
  1839  0344  01DD               	clrf	_TIMER0_flag	;volatile
  1840                           
  1841                           ;main.c: 116: if (USART_rx_index > 10) {
  1842  0345  300B               	movlw	11
  1843  0346  025F               	subwf	_USART_rx_index,w	;volatile
  1844  0347  1C03               	skipc
  1845  0348  2B4B               	goto	l3021
  1846                           
  1847                           ;main.c: 117: USART_rx_index = 0;
  1848  0349  01DF               	clrf	_USART_rx_index	;volatile
  1849                           
  1850                           ;main.c: 118: continue;
  1851  034A  2B3F               	goto	l117
  1852  034B                     l3021:	
  1853                           
  1854                           ;main.c: 119: }
  1855                           ;main.c: 121: if(USART_rx_index == 0)
  1856  034B  085F               	movf	_USART_rx_index,w	;volatile
  1857  034C  1903               	btfsc	3,2
  1858                           
  1859                           ;main.c: 122: continue;
  1860  034D  2B3F               	goto	l117
  1861                           
  1862                           ;main.c: 125: mess_rec_size = USART_rx_index;
  1863  034E  085F               	movf	_USART_rx_index,w	;volatile
  1864  034F  00CC               	movwf	??_main
  1865  0350  084C               	movf	??_main,w
  1866  0351  00E0               	movwf	_mess_rec_size	;volatile
  1867                           
  1868                           ;main.c: 126: USART_rx_index = 0;
  1869  0352  01DF               	clrf	_USART_rx_index	;volatile
  1870                           
  1871                           ;main.c: 128: for (i = 0; i < mess_rec_size; i++)
  1872  0353  01CD               	clrf	main@i
  1873  0354                     l3035:	
  1874  0354  0860               	movf	_mess_rec_size,w	;volatile
  1875  0355  024D               	subwf	main@i,w
  1876  0356  1803               	btfsc	3,0
  1877  0357  2B69               	goto	l3037
  1878                           
  1879                           ;main.c: 129: mess_rec[i] = USART_rx_data[i];
  1880  0358  084D               	movf	main@i,w
  1881  0359  3E4E               	addlw	(low (_USART_rx_data| 0))& (0+255)
  1882  035A  0086               	movwf	6
  1883  035B  0187               	clrf	7
  1884  035C  0801               	movf	1,w
  1885  035D  00CC               	movwf	??_main
  1886  035E  084D               	movf	main@i,w
  1887  035F  3E61               	addlw	(low (_mess_rec| 0))& (0+255)
  1888  0360  0086               	movwf	6
  1889  0361  0187               	clrf	7
  1890  0362  084C               	movf	??_main,w
  1891  0363  0081               	movwf	1
  1892  0364  3001               	movlw	1
  1893  0365  00CC               	movwf	??_main
  1894  0366  084C               	movf	??_main,w
  1895  0367  07CD               	addwf	main@i,f
  1896  0368  2B54               	goto	l3035
  1897  0369                     l3037:	
  1898                           
  1899                           ;main.c: 132: mess_handler();
  1900  0369  2421               	fcall	_mess_handler
  1901  036A  2B3F               	goto	l117
  1902  036B                     __end_of_main:	
  1903                           
  1904                           	psect	text1
  1905  05C9                     __ptext1:	
  1906 ;; *************** function _start_TX_USART_ISR *****************
  1907 ;; Defined at:
  1908 ;;		line 101 in file "USART1823.c"
  1909 ;; Parameters:    Size  Location     Type
  1910 ;;		None
  1911 ;; Auto vars:     Size  Location     Type
  1912 ;;		None
  1913 ;; Return value:  Size  Location     Type
  1914 ;;                  1    wreg      void 
  1915 ;; Registers used:
  1916 ;;		wreg, status,2
  1917 ;; Tracked objects:
  1918 ;;		On entry : 0/0
  1919 ;;		On exit  : 0/0
  1920 ;;		Unchanged: 0/0
  1921 ;; Data sizes:     COMMON   BANK0   BANK1
  1922 ;;      Params:         0       0       0
  1923 ;;      Locals:         0       0       0
  1924 ;;      Temps:          0       0       0
  1925 ;;      Totals:         0       0       0
  1926 ;;Total ram usage:        0 bytes
  1927 ;; Hardware stack levels used:    1
  1928 ;; Hardware stack levels required when called:    2
  1929 ;; This function calls:
  1930 ;;		Nothing
  1931 ;; This function is called by:
  1932 ;;		_main
  1933 ;; This function uses a non-reentrant model
  1934 ;;
  1935                           
  1936                           
  1937                           ;psect for function _start_TX_USART_ISR
  1938  05C9                     _start_TX_USART_ISR:	
  1939                           
  1940                           ;USART1823.c: 103: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  1941                           
  1942                           ;incstack = 0
  1943                           ; Regs used in _start_TX_USART_ISR: [wreg+status,2]
  1944  05C9  0023               	movlb	3	; select bank3
  1945  05CA  151E               	bsf	30,2	;volatile
  1946  05CB  159F               	bsf	31,3	;volatile
  1947  05CC  019C               	clrf	28	;volatile
  1948  05CD  300C               	movlw	12
  1949  05CE  009B               	movwf	27	;volatile
  1950                           
  1951                           ;USART1823.c: 104: SYNC = 0;
  1952  05CF  121E               	bcf	30,4	;volatile
  1953                           
  1954                           ;USART1823.c: 105: SPEN = 1;
  1955  05D0  179D               	bsf	29,7	;volatile
  1956                           
  1957                           ;USART1823.c: 106: TXEN = 1;
  1958  05D1  169E               	bsf	30,5	;volatile
  1959                           
  1960                           ;USART1823.c: 108: USART_tx_flag = 0;
  1961  05D2  01F2               	clrf	_USART_tx_flag	;volatile
  1962                           
  1963                           ;USART1823.c: 109: USART_tx_index = 0;
  1964  05D3  01F3               	clrf	_USART_tx_index	;volatile
  1965                           
  1966                           ;USART1823.c: 110: USART_tx_length = 0;
  1967  05D4  01F4               	clrf	_USART_tx_length	;volatile
  1968                           
  1969                           ;USART1823.c: 113: PEIE = 1;
  1970  05D5  170B               	bsf	11,6	;volatile
  1971                           
  1972                           ;USART1823.c: 114: GIE = 1;
  1973  05D6  178B               	bsf	11,7	;volatile
  1974  05D7  0008               	return
  1975  05D8                     __end_of_start_TX_USART_ISR:	
  1976                           
  1977                           	psect	text2
  1978  0597                     __ptext2:	
  1979 ;; *************** function _start_RX_USART_ISR *****************
  1980 ;; Defined at:
  1981 ;;		line 83 in file "USART1823.c"
  1982 ;; Parameters:    Size  Location     Type
  1983 ;;		None
  1984 ;; Auto vars:     Size  Location     Type
  1985 ;;		None
  1986 ;; Return value:  Size  Location     Type
  1987 ;;                  1    wreg      void 
  1988 ;; Registers used:
  1989 ;;		wreg, status,2
  1990 ;; Tracked objects:
  1991 ;;		On entry : 0/0
  1992 ;;		On exit  : 0/0
  1993 ;;		Unchanged: 0/0
  1994 ;; Data sizes:     COMMON   BANK0   BANK1
  1995 ;;      Params:         0       0       0
  1996 ;;      Locals:         0       0       0
  1997 ;;      Temps:          0       0       0
  1998 ;;      Totals:         0       0       0
  1999 ;;Total ram usage:        0 bytes
  2000 ;; Hardware stack levels used:    1
  2001 ;; Hardware stack levels required when called:    2
  2002 ;; This function calls:
  2003 ;;		Nothing
  2004 ;; This function is called by:
  2005 ;;		_main
  2006 ;; This function uses a non-reentrant model
  2007 ;;
  2008                           
  2009                           
  2010                           ;psect for function _start_RX_USART_ISR
  2011  0597                     _start_RX_USART_ISR:	
  2012                           
  2013                           ;USART1823.c: 86: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  2014                           
  2015                           ;incstack = 0
  2016                           ; Regs used in _start_RX_USART_ISR: [wreg+status,2]
  2017  0597  0023               	movlb	3	; select bank3
  2018  0598  151E               	bsf	30,2	;volatile
  2019  0599  159F               	bsf	31,3	;volatile
  2020  059A  019C               	clrf	28	;volatile
  2021  059B  300C               	movlw	12
  2022  059C  009B               	movwf	27	;volatile
  2023                           
  2024                           ;USART1823.c: 88: SYNC = 0;
  2025  059D  121E               	bcf	30,4	;volatile
  2026                           
  2027                           ;USART1823.c: 89: SPEN = 1;
  2028  059E  179D               	bsf	29,7	;volatile
  2029                           
  2030                           ;USART1823.c: 90: CREN = 1;
  2031  059F  161D               	bsf	29,4	;volatile
  2032                           
  2033                           ;USART1823.c: 92: USART_rx_flag = 0;
  2034  05A0  0020               	movlb	0	; select bank0
  2035  05A1  01DE               	clrf	_USART_rx_flag	;volatile
  2036                           
  2037                           ;USART1823.c: 93: USART_rx_index = 0;
  2038  05A2  01DF               	clrf	_USART_rx_index	;volatile
  2039                           
  2040                           ;USART1823.c: 95: RCIE = 1;
  2041  05A3  0021               	movlb	1	; select bank1
  2042  05A4  1691               	bsf	17,5	;volatile
  2043                           
  2044                           ;USART1823.c: 96: PEIE = 1;
  2045  05A5  170B               	bsf	11,6	;volatile
  2046                           
  2047                           ;USART1823.c: 97: GIE = 1;
  2048  05A6  178B               	bsf	11,7	;volatile
  2049  05A7  0008               	return
  2050  05A8                     __end_of_start_RX_USART_ISR:	
  2051                           
  2052                           	psect	text3
  2053  05F8                     __ptext3:	
  2054 ;; *************** function _start_RCM *****************
  2055 ;; Defined at:
  2056 ;;		line 4 in file "RCM1823.c"
  2057 ;; Parameters:    Size  Location     Type
  2058 ;;		None
  2059 ;; Auto vars:     Size  Location     Type
  2060 ;;		None
  2061 ;; Return value:  Size  Location     Type
  2062 ;;                  1    wreg      void 
  2063 ;; Registers used:
  2064 ;;		wreg
  2065 ;; Tracked objects:
  2066 ;;		On entry : 0/0
  2067 ;;		On exit  : 0/0
  2068 ;;		Unchanged: 0/0
  2069 ;; Data sizes:     COMMON   BANK0   BANK1
  2070 ;;      Params:         0       0       0
  2071 ;;      Locals:         0       0       0
  2072 ;;      Temps:          0       0       0
  2073 ;;      Totals:         0       0       0
  2074 ;;Total ram usage:        0 bytes
  2075 ;; Hardware stack levels used:    1
  2076 ;; Hardware stack levels required when called:    2
  2077 ;; This function calls:
  2078 ;;		Nothing
  2079 ;; This function is called by:
  2080 ;;		_main
  2081 ;; This function uses a non-reentrant model
  2082 ;;
  2083                           
  2084                           
  2085                           ;psect for function _start_RCM
  2086  05F8                     _start_RCM:	
  2087                           
  2088                           ;RCM1823.c: 6: CLKRCON = 0b11010000;
  2089                           
  2090                           ;incstack = 0
  2091                           ; Regs used in _start_RCM: [wreg]
  2092  05F8  30D0               	movlw	208
  2093  05F9  0027               	movlb	7	; select bank7
  2094  05FA  009A               	movwf	26	;volatile
  2095  05FB  0008               	return
  2096  05FC                     __end_of_start_RCM:	
  2097                           
  2098                           	psect	text4
  2099  05D8                     __ptext4:	
  2100 ;; *************** function _setup_TMR0 *****************
  2101 ;; Defined at:
  2102 ;;		line 10 in file "TMR0.c"
  2103 ;; Parameters:    Size  Location     Type
  2104 ;;		None
  2105 ;; Auto vars:     Size  Location     Type
  2106 ;;		None
  2107 ;; Return value:  Size  Location     Type
  2108 ;;                  1    wreg      void 
  2109 ;; Registers used:
  2110 ;;		None
  2111 ;; Tracked objects:
  2112 ;;		On entry : 0/0
  2113 ;;		On exit  : 0/0
  2114 ;;		Unchanged: 0/0
  2115 ;; Data sizes:     COMMON   BANK0   BANK1
  2116 ;;      Params:         0       0       0
  2117 ;;      Locals:         0       0       0
  2118 ;;      Temps:          0       0       0
  2119 ;;      Totals:         0       0       0
  2120 ;;Total ram usage:        0 bytes
  2121 ;; Hardware stack levels used:    1
  2122 ;; Hardware stack levels required when called:    2
  2123 ;; This function calls:
  2124 ;;		Nothing
  2125 ;; This function is called by:
  2126 ;;		_main
  2127 ;; This function uses a non-reentrant model
  2128 ;;
  2129                           
  2130                           
  2131                           ;psect for function _setup_TMR0
  2132  05D8                     _setup_TMR0:	
  2133                           
  2134                           ;TMR0.c: 13: PS2 = 0; PS1 = 1; PS0 = 0;
  2135                           
  2136                           ;incstack = 0
  2137                           ; Regs used in _setup_TMR0: []
  2138  05D8  0021               	movlb	1	; select bank1
  2139  05D9  1115               	bcf	21,2	;volatile
  2140  05DA  1495               	bsf	21,1	;volatile
  2141  05DB  1015               	bcf	21,0	;volatile
  2142                           
  2143                           ;TMR0.c: 16: PSA = 0;
  2144  05DC  1195               	bcf	21,3	;volatile
  2145                           
  2146                           ;TMR0.c: 18: TMR0CS = 0;
  2147  05DD  1295               	bcf	21,5	;volatile
  2148  05DE  0008               	return
  2149  05DF                     __end_of_setup_TMR0:	
  2150                           
  2151                           	psect	text5
  2152  05EC                     __ptext5:	
  2153 ;; *************** function _setup_ADC *****************
  2154 ;; Defined at:
  2155 ;;		line 3 in file "ADC1823.c"
  2156 ;; Parameters:    Size  Location     Type
  2157 ;;		None
  2158 ;; Auto vars:     Size  Location     Type
  2159 ;;		None
  2160 ;; Return value:  Size  Location     Type
  2161 ;;                  1    wreg      void 
  2162 ;; Registers used:
  2163 ;;		wreg
  2164 ;; Tracked objects:
  2165 ;;		On entry : 0/0
  2166 ;;		On exit  : 0/0
  2167 ;;		Unchanged: 0/0
  2168 ;; Data sizes:     COMMON   BANK0   BANK1
  2169 ;;      Params:         0       0       0
  2170 ;;      Locals:         0       0       0
  2171 ;;      Temps:          0       0       0
  2172 ;;      Totals:         0       0       0
  2173 ;;Total ram usage:        0 bytes
  2174 ;; Hardware stack levels used:    1
  2175 ;; Hardware stack levels required when called:    2
  2176 ;; This function calls:
  2177 ;;		Nothing
  2178 ;; This function is called by:
  2179 ;;		_main
  2180 ;; This function uses a non-reentrant model
  2181 ;;
  2182                           
  2183                           
  2184                           ;psect for function _setup_ADC
  2185  05EC                     _setup_ADC:	
  2186                           
  2187                           ;ADC1823.c: 20: ADCON1 = 0b11110000;
  2188                           
  2189                           ;incstack = 0
  2190                           ; Regs used in _setup_ADC: [wreg]
  2191  05EC  30F0               	movlw	240
  2192  05ED  0021               	movlb	1	; select bank1
  2193  05EE  009E               	movwf	30	;volatile
  2194                           
  2195                           ;ADC1823.c: 21: { ADCON0 = 0b00100100;};
  2196  05EF  3024               	movlw	36
  2197  05F0  009D               	movwf	29	;volatile
  2198  05F1  0008               	return
  2199  05F2                     __end_of_setup_ADC:	
  2200                           
  2201                           	psect	text6
  2202  0421                     __ptext6:	
  2203 ;; *************** function _mess_handler *****************
  2204 ;; Defined at:
  2205 ;;		line 11 in file "comm.c"
  2206 ;; Parameters:    Size  Location     Type
  2207 ;;		None
  2208 ;; Auto vars:     Size  Location     Type
  2209 ;;		None
  2210 ;; Return value:  Size  Location     Type
  2211 ;;                  1    wreg      void 
  2212 ;; Registers used:
  2213 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2214 ;; Tracked objects:
  2215 ;;		On entry : 0/0
  2216 ;;		On exit  : 0/0
  2217 ;;		Unchanged: 0/0
  2218 ;; Data sizes:     COMMON   BANK0   BANK1
  2219 ;;      Params:         0       0       0
  2220 ;;      Locals:         0       0       0
  2221 ;;      Temps:          0       1       0
  2222 ;;      Totals:         0       1       0
  2223 ;;Total ram usage:        1 bytes
  2224 ;; Hardware stack levels used:    1
  2225 ;; Hardware stack levels required when called:    5
  2226 ;; This function calls:
  2227 ;;		_config_ASIC
  2228 ;;		_lputs_ISR
  2229 ;;		_measure_Impedance
  2230 ;;		_measure_Impedance_SE
  2231 ;;		_measure_Impedance_no_offset
  2232 ;;		_measure_Offset
  2233 ;;		_read_ADC_channels
  2234 ;;		_sweep
  2235 ;; This function is called by:
  2236 ;;		_main
  2237 ;; This function uses a non-reentrant model
  2238 ;;
  2239                           
  2240                           
  2241                           ;psect for function _mess_handler
  2242  0421                     _mess_handler:	
  2243                           
  2244                           ;comm.c: 16: switch (mess_rec[0]) {
  2245                           
  2246                           ;incstack = 0
  2247                           ; Regs used in _mess_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2248  0421  2C38               	goto	l2995
  2249  0422                     l2977:	
  2250                           ;comm.c: 17: case 't':
  2251                           
  2252                           
  2253                           ;comm.c: 18: lputs_ISR(mess_rec,mess_rec_size);
  2254  0422  0020               	movlb	0	; select bank0
  2255  0423  0860               	movf	_mess_rec_size,w	;volatile
  2256  0424  00CB               	movwf	??_mess_handler
  2257  0425  084B               	movf	??_mess_handler,w
  2258  0426  00A0               	movwf	lputs_ISR@length
  2259  0427  3061               	movlw	(low (_mess_rec| 0))& (0+255)
  2260  0428  2454               	fcall	_lputs_ISR
  2261                           
  2262                           ;comm.c: 19: break;
  2263  0429  0008               	return
  2264  042A                     l2979:	
  2265                           ;comm.c: 21: case 'f':
  2266                           
  2267                           
  2268                           ;comm.c: 22: sweep();
  2269  042A  2120               	fcall	_sweep
  2270                           
  2271                           ;comm.c: 23: break;
  2272  042B  0008               	return
  2273  042C                     l2981:	
  2274                           ;comm.c: 25: case 'c':
  2275                           
  2276                           
  2277                           ;comm.c: 26: config_ASIC();
  2278  042C  256E               	fcall	_config_ASIC
  2279                           
  2280                           ;comm.c: 27: break;
  2281  042D  0008               	return
  2282  042E                     l2983:	
  2283                           ;comm.c: 29: case 'm':
  2284                           
  2285                           
  2286                           ;comm.c: 30: read_ADC_channels();
  2287  042E  23E8               	fcall	_read_ADC_channels
  2288                           
  2289                           ;comm.c: 31: break;
  2290  042F  0008               	return
  2291  0430                     l2985:	
  2292                           ;comm.c: 33: case 'z':
  2293                           
  2294                           
  2295                           ;comm.c: 34: measure_Impedance();
  2296  0430  21BF               	fcall	_measure_Impedance
  2297                           
  2298                           ;comm.c: 35: break;
  2299  0431  0008               	return
  2300  0432                     l2987:	
  2301                           ;comm.c: 37: case 'y':
  2302                           
  2303                           
  2304                           ;comm.c: 38: measure_Impedance_no_offset();
  2305  0432  22C1               	fcall	_measure_Impedance_no_offset
  2306                           
  2307                           ;comm.c: 39: break;
  2308  0433  0008               	return
  2309  0434                     l2989:	
  2310                           ;comm.c: 41: case 'o':
  2311                           
  2312                           
  2313                           ;comm.c: 42: measure_Offset();
  2314  0434  236B               	fcall	_measure_Offset
  2315                           
  2316                           ;comm.c: 43: break;
  2317  0435  0008               	return
  2318  0436                     l2991:	
  2319                           ;comm.c: 45: case 's':
  2320                           
  2321                           
  2322                           ;comm.c: 46: measure_Impedance_SE();
  2323  0436  2255               	fcall	_measure_Impedance_SE
  2324                           
  2325                           ;comm.c: 58: }
  2326                           
  2327                           ;comm.c: 57: break;
  2328                           
  2329                           ;comm.c: 56: default:
  2330                           
  2331                           ;comm.c: 47: break;
  2332  0437  0008               	return
  2333  0438                     l2995:	
  2334  0438  0020               	movlb	0	; select bank0
  2335  0439  0861               	movf	_mess_rec,w	;volatile
  2336                           
  2337                           ; Switch size 1, requested type "space"
  2338                           ; Number of cases is 8, Range of values is 99 to 122
  2339                           ; switch strategies available:
  2340                           ; Name         Instructions Cycles
  2341                           ; simple_byte           25    13 (average)
  2342                           ; direct_byte           57     9 (fixed)
  2343                           ; jumptable            263     9 (fixed)
  2344                           ;	Chosen strategy is simple_byte
  2345  043A  3A63               	xorlw	99	; case 99
  2346  043B  1903               	skipnz
  2347  043C  2C2C               	goto	l2981
  2348  043D  3A05               	xorlw	5	; case 102
  2349  043E  1903               	skipnz
  2350  043F  2C2A               	goto	l2979
  2351  0440  3A0B               	xorlw	11	; case 109
  2352  0441  1903               	skipnz
  2353  0442  2C2E               	goto	l2983
  2354  0443  3A02               	xorlw	2	; case 111
  2355  0444  1903               	skipnz
  2356  0445  2C34               	goto	l2989
  2357  0446  3A1C               	xorlw	28	; case 115
  2358  0447  1903               	skipnz
  2359  0448  2C36               	goto	l2991
  2360  0449  3A07               	xorlw	7	; case 116
  2361  044A  1903               	skipnz
  2362  044B  2C22               	goto	l2977
  2363  044C  3A0D               	xorlw	13	; case 121
  2364  044D  1903               	skipnz
  2365  044E  2C32               	goto	l2987
  2366  044F  3A03               	xorlw	3	; case 122
  2367  0450  1903               	skipnz
  2368  0451  2C30               	goto	l2985
  2369  0452  2C53               	goto	l364
  2370  0453                     l364:	
  2371  0453  0008               	return
  2372  0454                     __end_of_mess_handler:	
  2373                           
  2374                           	psect	text7
  2375  0120                     __ptext7:	
  2376 ;; *************** function _sweep *****************
  2377 ;; Defined at:
  2378 ;;		line 441 in file "comm.c"
  2379 ;; Parameters:    Size  Location     Type
  2380 ;;		None
  2381 ;; Auto vars:     Size  Location     Type
  2382 ;;  aux             7   25[BANK0 ] unsigned char [7]
  2383 ;;  asic            2   41[BANK0 ] struct .
  2384 ;;  Q               2   37[BANK0 ] short 
  2385 ;;  I               2   35[BANK0 ] short 
  2386 ;;  ret             1   40[BANK0 ] unsigned char 
  2387 ;;  gain_index      1   39[BANK0 ] unsigned char 
  2388 ;;  count           1   34[BANK0 ] unsigned char 
  2389 ;;  i               1   33[BANK0 ] unsigned char 
  2390 ;;  freq_index      1   32[BANK0 ] unsigned char 
  2391 ;;  check           1   24[BANK0 ] unsigned char 
  2392 ;; Return value:  Size  Location     Type
  2393 ;;                  1    wreg      void 
  2394 ;; Registers used:
  2395 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2396 ;; Tracked objects:
  2397 ;;		On entry : 0/0
  2398 ;;		On exit  : 0/0
  2399 ;;		Unchanged: 0/0
  2400 ;; Data sizes:     COMMON   BANK0   BANK1
  2401 ;;      Params:         0       0       0
  2402 ;;      Locals:         0      19       0
  2403 ;;      Temps:          0       2       0
  2404 ;;      Totals:         0      21       0
  2405 ;;Total ram usage:       21 bytes
  2406 ;; Hardware stack levels used:    1
  2407 ;; Hardware stack levels required when called:    4
  2408 ;; This function calls:
  2409 ;;		_calculate_checksum
  2410 ;;		_lputs_ISR
  2411 ;;		_measure
  2412 ;;		_setFreq
  2413 ;;		_setGain
  2414 ;; This function is called by:
  2415 ;;		_mess_handler
  2416 ;; This function uses a non-reentrant model
  2417 ;;
  2418                           
  2419                           
  2420                           ;psect for function _sweep
  2421  0120                     _sweep:	
  2422                           
  2423                           ;comm.c: 443: unsigned char gain_index;
  2424                           ;comm.c: 444: unsigned char freq_index;
  2425                           ;comm.c: 445: unsigned char i, ret, count;
  2426                           ;comm.c: 446: short I,Q;
  2427                           ;comm.c: 447: unsigned char aux[7], check;
  2428                           ;comm.c: 449: BIO3 asic;
  2429                           ;comm.c: 450: asic.datashort = 0;
  2430                           
  2431                           ;incstack = 0
  2432                           ; Regs used in _sweep: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2433  0120  0020               	movlb	0	; select bank0
  2434  0121  01C9               	clrf	sweep@asic
  2435  0122  01CA               	clrf	sweep@asic+1
  2436                           
  2437                           ;comm.c: 453: freq_index = 10;
  2438  0123  300A               	movlw	10
  2439  0124  00B6               	movwf	??_sweep
  2440  0125  0836               	movf	??_sweep,w
  2441  0126  00C0               	movwf	sweep@freq_index
  2442                           
  2443                           ;comm.c: 454: gain_index = 0;
  2444  0127  01C7               	clrf	sweep@gain_index
  2445                           
  2446                           ;comm.c: 455: setGain(&asic,gain_index);
  2447  0128  0847               	movf	sweep@gain_index,w
  2448  0129  00B6               	movwf	??_sweep
  2449  012A  0836               	movf	??_sweep,w
  2450  012B  00A0               	movwf	setGain@gain_index
  2451  012C  3049               	movlw	(low (sweep@asic| 0))& (0+255)
  2452  012D  23AA               	fcall	_setGain
  2453                           
  2454                           ;comm.c: 458: for (i = 0; i < 11; i++) {
  2455  012E  0020               	movlb	0	; select bank0
  2456  012F  01C1               	clrf	sweep@i
  2457  0130                     L1:	
  2458  0130  300B               	movlw	11
  2459  0131  0241               	subwf	sweep@i,w
  2460  0132  1803               	btfsc	3,0
  2461  0133  0008               	return
  2462                           
  2463                           ;comm.c: 459: setFreq(&asic,freq_index);
  2464  0134  0840               	movf	sweep@freq_index,w
  2465  0135  00B6               	movwf	??_sweep
  2466  0136  0836               	movf	??_sweep,w
  2467  0137  00A0               	movwf	setFreq@freq_index
  2468  0138  3049               	movlw	(low (sweep@asic| 0))& (0+255)
  2469  0139  24AA               	fcall	_setFreq
  2470                           
  2471                           ;comm.c: 462: count = 0;
  2472  013A  0020               	movlb	0	; select bank0
  2473  013B  01C2               	clrf	sweep@count
  2474                           
  2475                           ;comm.c: 463: ret = 0;
  2476  013C  01C8               	clrf	sweep@ret
  2477  013D                     l2683:	
  2478                           ;comm.c: 465: do {
  2479                           
  2480                           
  2481                           ;comm.c: 467: ret = measure(&I,&Q,asic);
  2482  013D  3045               	movlw	(low (sweep@Q| 0))& (0+255)
  2483  013E  00B6               	movwf	??_sweep
  2484  013F  0836               	movf	??_sweep,w
  2485  0140  00A6               	movwf	measure@Q
  2486  0141  084A               	movf	sweep@asic+1,w
  2487  0142  00A8               	movwf	measure@asic+1
  2488  0143  0849               	movf	sweep@asic,w
  2489  0144  00A7               	movwf	measure@asic
  2490  0145  3043               	movlw	(low (sweep@I| 0))& (0+255)
  2491  0146  206B               	fcall	_measure
  2492  0147  0020               	movlb	0	; select bank0
  2493  0148  00B7               	movwf	??_sweep+1
  2494  0149  0837               	movf	??_sweep+1,w
  2495  014A  00C8               	movwf	sweep@ret
  2496                           
  2497                           ;comm.c: 469: if (ret == 1) {
  2498  014B  0348               	decf	sweep@ret,w
  2499  014C  1D03               	btfss	3,2
  2500  014D  295F               	goto	l2699
  2501                           
  2502                           ;comm.c: 471: if (count == 2) break;
  2503  014E  3002               	movlw	2
  2504  014F  0642               	xorwf	sweep@count,w
  2505  0150  1903               	btfsc	3,2
  2506  0151  297A               	goto	l2715
  2507                           
  2508                           ;comm.c: 472: count = ret;
  2509  0152  0848               	movf	sweep@ret,w
  2510  0153  00B6               	movwf	??_sweep
  2511  0154  0836               	movf	??_sweep,w
  2512  0155  00C2               	movwf	sweep@count
  2513                           
  2514                           ;comm.c: 474: if (gain_index < 7) {
  2515  0156  3007               	movlw	7
  2516  0157  0247               	subwf	sweep@gain_index,w
  2517  0158  1803               	skipnc
  2518  0159  297A               	goto	l2715
  2519                           
  2520                           ;comm.c: 475: gain_index++;
  2521  015A  3001               	movlw	1
  2522  015B  00B6               	movwf	??_sweep
  2523  015C  0836               	movf	??_sweep,w
  2524  015D  07C7               	addwf	sweep@gain_index,f
  2525  015E  2970               	goto	L2
  2526  015F                     l2699:	
  2527                           ;comm.c: 483: } else if (ret == 2) {
  2528                           
  2529                           ;comm.c: 479: }
  2530                           ;comm.c: 481: continue;
  2531                           
  2532                           ;comm.c: 478: break;
  2533                           
  2534                           ;comm.c: 477: } else {
  2535                           
  2536                           ;comm.c: 476: setGain(&asic,gain_index);
  2537                           
  2538  015F  3002               	movlw	2
  2539  0160  0020               	movlb	0	; select bank0
  2540  0161  0648               	xorwf	sweep@ret,w
  2541  0162  1D03               	btfss	3,2
  2542  0163  2976               	goto	l2713
  2543                           
  2544                           ;comm.c: 485: if (count == 1) break;
  2545  0164  0342               	decf	sweep@count,w
  2546  0165  1903               	btfsc	3,2
  2547  0166  297A               	goto	l2715
  2548                           
  2549                           ;comm.c: 486: count = ret;
  2550  0167  0848               	movf	sweep@ret,w
  2551  0168  00B6               	movwf	??_sweep
  2552  0169  0836               	movf	??_sweep,w
  2553  016A  00C2               	movwf	sweep@count
  2554                           
  2555                           ;comm.c: 488: if (gain_index > 0) {
  2556  016B  0847               	movf	sweep@gain_index,w
  2557  016C  1903               	btfsc	3,2
  2558  016D  297A               	goto	l2715
  2559                           
  2560                           ;comm.c: 489: gain_index--;
  2561  016E  3001               	movlw	1
  2562  016F  02C7               	subwf	sweep@gain_index,f
  2563  0170                     L2:	
  2564                           
  2565                           ;comm.c: 490: setGain(&asic,gain_index);
  2566  0170  0847               	movf	sweep@gain_index,w
  2567  0171  00B6               	movwf	??_sweep
  2568  0172  0836               	movf	??_sweep,w
  2569  0173  00A0               	movwf	setGain@gain_index
  2570  0174  3049               	movlw	(low (sweep@asic| 0))& (0+255)
  2571  0175  23AA               	fcall	_setGain
  2572  0176                     l2713:	
  2573                           ;comm.c: 493: }
  2574                           ;comm.c: 495: continue;
  2575                           
  2576                           ;comm.c: 492: break;
  2577                           
  2578                           ;comm.c: 491: } else {
  2579                           
  2580                           
  2581                           ;comm.c: 496: }
  2582                           ;comm.c: 498: } while (ret);
  2583  0176  0020               	movlb	0	; select bank0
  2584  0177  0848               	movf	sweep@ret,w
  2585  0178  1D03               	btfss	3,2
  2586  0179  293D               	goto	l2683
  2587  017A                     l2715:	
  2588                           
  2589                           ;comm.c: 504: ret = (freq_index << 4) & 0xf0;
  2590  017A  0020               	movlb	0	; select bank0
  2591  017B  0840               	movf	sweep@freq_index,w
  2592  017C  00B6               	movwf	??_sweep
  2593  017D  3003               	movlw	3
  2594  017E                     u1585:	
  2595  017E  35B6               	lslf	??_sweep,f
  2596  017F  3EFF               	addlw	-1
  2597  0180  1D03               	skipz
  2598  0181  297E               	goto	u1585
  2599  0182  3536               	lslf	??_sweep,w
  2600  0183  39F0               	andlw	240
  2601  0184  00B7               	movwf	??_sweep+1
  2602  0185  0837               	movf	??_sweep+1,w
  2603  0186  00C8               	movwf	sweep@ret
  2604                           
  2605                           ;comm.c: 505: ret |= (gain_index & 0xff);
  2606  0187  0847               	movf	sweep@gain_index,w
  2607  0188  00B6               	movwf	??_sweep
  2608  0189  0836               	movf	??_sweep,w
  2609  018A  04C8               	iorwf	sweep@ret,f
  2610                           
  2611                           ;comm.c: 507: aux[0] = 'f';
  2612  018B  3066               	movlw	102
  2613  018C  00B6               	movwf	??_sweep
  2614  018D  0836               	movf	??_sweep,w
  2615  018E  00B9               	movwf	sweep@aux
  2616                           
  2617                           ;comm.c: 508: aux[1] = (unsigned char)(I & 0xff);
  2618  018F  0843               	movf	sweep@I,w
  2619  0190  00B6               	movwf	??_sweep
  2620  0191  0836               	movf	??_sweep,w
  2621  0192  00BA               	movwf	sweep@aux+1
  2622                           
  2623                           ;comm.c: 509: aux[2] = (unsigned char)((I >> 8) & 0xff);
  2624  0193  0844               	movf	sweep@I+1,w
  2625  0194  00B6               	movwf	??_sweep
  2626  0195  0836               	movf	??_sweep,w
  2627  0196  00BB               	movwf	sweep@aux+2
  2628                           
  2629                           ;comm.c: 510: aux[3] = (unsigned char)(Q & 0xff);
  2630  0197  0845               	movf	sweep@Q,w
  2631  0198  00B6               	movwf	??_sweep
  2632  0199  0836               	movf	??_sweep,w
  2633  019A  00BC               	movwf	sweep@aux+3
  2634                           
  2635                           ;comm.c: 511: aux[4] = (unsigned char)((Q >> 8) & 0xff);
  2636  019B  0846               	movf	sweep@Q+1,w
  2637  019C  00B6               	movwf	??_sweep
  2638  019D  0836               	movf	??_sweep,w
  2639  019E  00BD               	movwf	sweep@aux+4
  2640                           
  2641                           ;comm.c: 512: aux[5] = ret;
  2642  019F  0848               	movf	sweep@ret,w
  2643  01A0  00B6               	movwf	??_sweep
  2644  01A1  0836               	movf	??_sweep,w
  2645  01A2  00BE               	movwf	sweep@aux+5
  2646                           
  2647                           ;comm.c: 514: check = calculate_checksum(aux,6);
  2648  01A3  3006               	movlw	6
  2649  01A4  00B6               	movwf	??_sweep
  2650  01A5  0836               	movf	??_sweep,w
  2651  01A6  00A0               	movwf	calculate_checksum@num
  2652  01A7  3039               	movlw	(low (sweep@aux| 0))& (0+255)
  2653  01A8  253C               	fcall	_calculate_checksum
  2654  01A9  0020               	movlb	0	; select bank0
  2655  01AA  00B7               	movwf	??_sweep+1
  2656  01AB  0837               	movf	??_sweep+1,w
  2657  01AC  00B8               	movwf	sweep@check
  2658                           
  2659                           ;comm.c: 515: aux[6] = check;
  2660  01AD  0838               	movf	sweep@check,w
  2661  01AE  00B6               	movwf	??_sweep
  2662  01AF  0836               	movf	??_sweep,w
  2663  01B0  00BF               	movwf	sweep@aux+6
  2664                           
  2665                           ;comm.c: 518: lputs_ISR(aux,7);
  2666  01B1  3007               	movlw	7
  2667  01B2  00B6               	movwf	??_sweep
  2668  01B3  0836               	movf	??_sweep,w
  2669  01B4  00A0               	movwf	lputs_ISR@length
  2670  01B5  3039               	movlw	(low (sweep@aux| 0))& (0+255)
  2671  01B6  2454               	fcall	_lputs_ISR
  2672                           
  2673                           ;comm.c: 520: freq_index--;
  2674  01B7  3001               	movlw	1
  2675  01B8  0020               	movlb	0	; select bank0
  2676  01B9  02C0               	subwf	sweep@freq_index,f
  2677  01BA  3001               	movlw	1
  2678  01BB  00B6               	movwf	??_sweep
  2679  01BC  0836               	movf	??_sweep,w
  2680  01BD  07C1               	addwf	sweep@i,f
  2681  01BE  2930               	goto	L1
  2682  01BF                     __end_of_sweep:	
  2683                           
  2684                           	psect	text8
  2685  03AA                     __ptext8:	
  2686 ;; *************** function _setGain *****************
  2687 ;; Defined at:
  2688 ;;		line 218 in file "bio3.c"
  2689 ;; Parameters:    Size  Location     Type
  2690 ;;  asic            1    wreg     PTR struct .
  2691 ;;		 -> sweep@asic(2), 
  2692 ;;  gain_index      1    0[BANK0 ] unsigned char 
  2693 ;; Auto vars:     Size  Location     Type
  2694 ;;  asic            1    3[BANK0 ] PTR struct .
  2695 ;;		 -> sweep@asic(2), 
  2696 ;;  aux             1    2[BANK0 ] struct .
  2697 ;; Return value:  Size  Location     Type
  2698 ;;                  1    wreg      void 
  2699 ;; Registers used:
  2700 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, pclath
  2701 ;; Tracked objects:
  2702 ;;		On entry : 0/0
  2703 ;;		On exit  : 0/0
  2704 ;;		Unchanged: 0/0
  2705 ;; Data sizes:     COMMON   BANK0   BANK1
  2706 ;;      Params:         0       1       0
  2707 ;;      Locals:         0       2       0
  2708 ;;      Temps:          0       1       0
  2709 ;;      Totals:         0       4       0
  2710 ;;Total ram usage:        4 bytes
  2711 ;; Hardware stack levels used:    1
  2712 ;; Hardware stack levels required when called:    2
  2713 ;; This function calls:
  2714 ;;		Nothing
  2715 ;; This function is called by:
  2716 ;;		_sweep
  2717 ;; This function uses a non-reentrant model
  2718 ;;
  2719                           
  2720                           
  2721                           ;psect for function _setGain
  2722  03AA                     _setGain:	
  2723                           
  2724                           ;incstack = 0
  2725                           ; Regs used in _setGain: [wreg-fsr1h+pclath]
  2726                           ;setGain@asic stored from wreg
  2727  03AA  0020               	movlb	0	; select bank0
  2728  03AB  00A3               	movwf	setGain@asic
  2729                           
  2730                           ;bio3.c: 220: RADIO_gain aux;
  2731                           ;bio3.c: 221: aux.data = gains[gain_index];
  2732  03AC  0820               	movf	setGain@gain_index,w
  2733  03AD  3E8F               	addlw	low (_gains| (0+32768))
  2734  03AE  0084               	movwf	4
  2735  03AF  3085               	movlw	high (_gains| (0+32768))
  2736  03B0  1803               	skipnc
  2737  03B1  3E01               	addlw	1
  2738  03B2  0085               	movwf	5
  2739  03B3  0800               	movf	0,w	;code access
  2740  03B4  00A1               	movwf	??_setGain
  2741  03B5  0821               	movf	??_setGain,w
  2742  03B6  00A2               	movwf	setGain@aux
  2743                           
  2744                           ;bio3.c: 223: asic->data_bits.GD0 = aux.data_bits.GD0;
  2745  03B7  0823               	movf	setGain@asic,w
  2746  03B8  0086               	movwf	6
  2747  03B9  0187               	clrf	7
  2748  03BA  1101               	bcf	1,2
  2749  03BB  1822               	btfsc	setGain@aux,0
  2750  03BC  1501               	bsf	1,2
  2751                           
  2752                           ;bio3.c: 224: asic->data_bits.GD1 = aux.data_bits.GD1;
  2753  03BD  0020               	movlb	0	; select bank0
  2754  03BE  0823               	movf	setGain@asic,w
  2755  03BF  0086               	movwf	6
  2756  03C0  0187               	clrf	7
  2757  03C1  1181               	bcf	1,3
  2758  03C2  18A2               	btfsc	setGain@aux,1
  2759  03C3  1581               	bsf	1,3
  2760                           
  2761                           ;bio3.c: 225: asic->data_bits.GD2 = aux.data_bits.GD2;
  2762  03C4  0020               	movlb	0	; select bank0
  2763  03C5  0823               	movf	setGain@asic,w
  2764  03C6  0086               	movwf	6
  2765  03C7  0187               	clrf	7
  2766  03C8  1201               	bcf	1,4
  2767  03C9  1922               	btfsc	setGain@aux,2
  2768  03CA  1601               	bsf	1,4
  2769                           
  2770                           ;bio3.c: 226: asic->data_bits.GS0 = aux.data_bits.GS0;
  2771  03CB  0020               	movlb	0	; select bank0
  2772  03CC  0823               	movf	setGain@asic,w
  2773  03CD  0086               	movwf	6
  2774  03CE  0187               	clrf	7
  2775  03CF  1381               	bcf	1,7
  2776  03D0  19A2               	btfsc	setGain@aux,3
  2777  03D1  1781               	bsf	1,7
  2778                           
  2779                           ;bio3.c: 227: asic->data_bits.GS1 = aux.data_bits.GS1;
  2780  03D2  0020               	movlb	0	; select bank0
  2781  03D3  0A23               	incf	setGain@asic,w
  2782  03D4  0086               	movwf	6
  2783  03D5  0187               	clrf	7
  2784  03D6  1001               	bcf	1,0
  2785  03D7  1A22               	btfsc	setGain@aux,4
  2786  03D8  1401               	bsf	1,0
  2787                           
  2788                           ;bio3.c: 228: asic->data_bits.GS2 = aux.data_bits.GS2;
  2789  03D9  0020               	movlb	0	; select bank0
  2790  03DA  0A23               	incf	setGain@asic,w
  2791  03DB  0086               	movwf	6
  2792  03DC  0187               	clrf	7
  2793  03DD  1081               	bcf	1,1
  2794  03DE  1AA2               	btfsc	setGain@aux,5
  2795  03DF  1481               	bsf	1,1
  2796                           
  2797                           ;bio3.c: 229: asic->data_bits.GS3 = aux.data_bits.GS3;
  2798  03E0  0020               	movlb	0	; select bank0
  2799  03E1  0A23               	incf	setGain@asic,w
  2800  03E2  0086               	movwf	6
  2801  03E3  0187               	clrf	7
  2802  03E4  1101               	bcf	1,2
  2803  03E5  1B22               	btfsc	setGain@aux,6
  2804  03E6  1501               	bsf	1,2
  2805  03E7  0008               	return
  2806  03E8                     __end_of_setGain:	
  2807                           
  2808                           	psect	text9
  2809  04AA                     __ptext9:	
  2810 ;; *************** function _setFreq *****************
  2811 ;; Defined at:
  2812 ;;		line 232 in file "bio3.c"
  2813 ;; Parameters:    Size  Location     Type
  2814 ;;  asic            1    wreg     PTR struct .
  2815 ;;		 -> sweep@asic(2), 
  2816 ;;  freq_index      1    0[BANK0 ] unsigned char 
  2817 ;; Auto vars:     Size  Location     Type
  2818 ;;  asic            1    2[BANK0 ] PTR struct .
  2819 ;;		 -> sweep@asic(2), 
  2820 ;;  aux             1    3[BANK0 ] struct .
  2821 ;; Return value:  Size  Location     Type
  2822 ;;                  1    wreg      void 
  2823 ;; Registers used:
  2824 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, pclath
  2825 ;; Tracked objects:
  2826 ;;		On entry : 0/0
  2827 ;;		On exit  : 0/0
  2828 ;;		Unchanged: 0/0
  2829 ;; Data sizes:     COMMON   BANK0   BANK1
  2830 ;;      Params:         0       1       0
  2831 ;;      Locals:         0       2       0
  2832 ;;      Temps:          0       1       0
  2833 ;;      Totals:         0       4       0
  2834 ;;Total ram usage:        4 bytes
  2835 ;; Hardware stack levels used:    1
  2836 ;; Hardware stack levels required when called:    2
  2837 ;; This function calls:
  2838 ;;		Nothing
  2839 ;; This function is called by:
  2840 ;;		_sweep
  2841 ;; This function uses a non-reentrant model
  2842 ;;
  2843                           
  2844                           
  2845                           ;psect for function _setFreq
  2846  04AA                     _setFreq:	
  2847                           
  2848                           ;incstack = 0
  2849                           ; Regs used in _setFreq: [wreg-fsr1h+pclath]
  2850                           ;setFreq@asic stored from wreg
  2851  04AA  0020               	movlb	0	; select bank0
  2852  04AB  00A2               	movwf	setFreq@asic
  2853                           
  2854                           ;bio3.c: 234: RADIO_freq aux;
  2855                           ;bio3.c: 235: aux.data = freqs[freq_index];
  2856  04AC  0820               	movf	setFreq@freq_index,w
  2857  04AD  3E84               	addlw	low (_freqs| (0+32768))
  2858  04AE  0084               	movwf	4
  2859  04AF  3085               	movlw	high (_freqs| (0+32768))
  2860  04B0  1803               	skipnc
  2861  04B1  3E01               	addlw	1
  2862  04B2  0085               	movwf	5
  2863  04B3  0800               	movf	0,w	;code access
  2864  04B4  00A1               	movwf	??_setFreq
  2865  04B5  0821               	movf	??_setFreq,w
  2866  04B6  00A3               	movwf	setFreq@aux
  2867                           
  2868                           ;bio3.c: 237: asic->data_bits.F0 = aux.data_bits.F0;
  2869  04B7  0A22               	incf	setFreq@asic,w
  2870  04B8  0086               	movwf	6
  2871  04B9  0187               	clrf	7
  2872  04BA  1201               	bcf	1,4
  2873  04BB  1823               	btfsc	setFreq@aux,0
  2874  04BC  1601               	bsf	1,4
  2875                           
  2876                           ;bio3.c: 238: asic->data_bits.F1 = aux.data_bits.F1;
  2877  04BD  0020               	movlb	0	; select bank0
  2878  04BE  0A22               	incf	setFreq@asic,w
  2879  04BF  0086               	movwf	6
  2880  04C0  0187               	clrf	7
  2881  04C1  1281               	bcf	1,5
  2882  04C2  18A3               	btfsc	setFreq@aux,1
  2883  04C3  1681               	bsf	1,5
  2884                           
  2885                           ;bio3.c: 239: asic->data_bits.F2 = aux.data_bits.F2;
  2886  04C4  0020               	movlb	0	; select bank0
  2887  04C5  0A22               	incf	setFreq@asic,w
  2888  04C6  0086               	movwf	6
  2889  04C7  0187               	clrf	7
  2890  04C8  1301               	bcf	1,6
  2891  04C9  1923               	btfsc	setFreq@aux,2
  2892  04CA  1701               	bsf	1,6
  2893                           
  2894                           ;bio3.c: 240: asic->data_bits.F3 = aux.data_bits.F3;
  2895  04CB  0020               	movlb	0	; select bank0
  2896  04CC  0A22               	incf	setFreq@asic,w
  2897  04CD  0086               	movwf	6
  2898  04CE  0187               	clrf	7
  2899  04CF  1381               	bcf	1,7
  2900  04D0  19A3               	btfsc	setFreq@aux,3
  2901  04D1  1781               	bsf	1,7
  2902  04D2  0008               	return
  2903  04D3                     __end_of_setFreq:	
  2904                           
  2905                           	psect	text10
  2906  006B                     __ptext10:	
  2907 ;; *************** function _measure *****************
  2908 ;; Defined at:
  2909 ;;		line 528 in file "comm.c"
  2910 ;; Parameters:    Size  Location     Type
  2911 ;;  I               1    wreg     PTR short 
  2912 ;;		 -> sweep@I(2), 
  2913 ;;  Q               1    6[BANK0 ] PTR short 
  2914 ;;		 -> sweep@Q(2), 
  2915 ;;  asic            2    7[BANK0 ] struct .
  2916 ;; Auto vars:     Size  Location     Type
  2917 ;;  I               1   15[BANK0 ] PTR short 
  2918 ;;		 -> sweep@I(2), 
  2919 ;;  aux1            2   20[BANK0 ] short 
  2920 ;;  aux2            2   18[BANK0 ] short 
  2921 ;;  value           2   16[BANK0 ] unsigned short 
  2922 ;;  offset          2   13[BANK0 ] unsigned short 
  2923 ;; Return value:  Size  Location     Type
  2924 ;;                  1    wreg      unsigned char 
  2925 ;; Registers used:
  2926 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2927 ;; Tracked objects:
  2928 ;;		On entry : 0/0
  2929 ;;		On exit  : 0/0
  2930 ;;		Unchanged: 0/0
  2931 ;; Data sizes:     COMMON   BANK0   BANK1
  2932 ;;      Params:         0       3       0
  2933 ;;      Locals:         0       9       0
  2934 ;;      Temps:          0       4       0
  2935 ;;      Totals:         0      16       0
  2936 ;;Total ram usage:       16 bytes
  2937 ;; Hardware stack levels used:    1
  2938 ;; Hardware stack levels required when called:    3
  2939 ;; This function calls:
  2940 ;;		_ADC_5
  2941 ;;		_BIO_config
  2942 ;; This function is called by:
  2943 ;;		_sweep
  2944 ;; This function uses a non-reentrant model
  2945 ;;
  2946                           
  2947                           
  2948                           ;psect for function _measure
  2949  006B                     _measure:	
  2950                           
  2951                           ;incstack = 0
  2952                           ; Regs used in _measure: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2953                           ;measure@I stored from wreg
  2954  006B  0020               	movlb	0	; select bank0
  2955  006C  00AF               	movwf	measure@I
  2956                           
  2957                           ;comm.c: 530: unsigned short offset, value;
  2958                           ;comm.c: 531: short aux1,aux2;
  2959                           ;comm.c: 535: asic.data_bits.CE = 0;
  2960  006D  1327               	bcf	measure@asic,6
  2961                           
  2962                           ;comm.c: 536: BIO_config(asic);
  2963  006E  0828               	movf	measure@asic+1,w
  2964  006F  00A1               	movwf	BIO_config@conf+1
  2965  0070  0827               	movf	measure@asic,w
  2966  0071  00A0               	movwf	BIO_config@conf
  2967  0072  247F               	fcall	_BIO_config
  2968                           
  2969                           ;comm.c: 537: _delay((unsigned long)((20)*(500000/4000.0)));
  2970  0073  3004               	movlw	4
  2971  0074  0020               	movlb	0	; select bank0
  2972  0075  00A9               	movwf	??_measure
  2973  0076  303D               	movlw	61
  2974  0077                     u1657:	
  2975  0077  0B89               	decfsz	9,f
  2976  0078  2877               	goto	u1657
  2977  0079  0BA9               	decfsz	??_measure,f
  2978  007A  2877               	goto	u1657
  2979  007B  3200               	nop2
  2980                           
  2981                           ;comm.c: 539: offset = ADC_5();
  2982  007C  24D3               	fcall	_ADC_5
  2983  007D  0020               	movlb	0	; select bank0
  2984  007E  0821               	movf	?_ADC_5+1,w
  2985  007F  00AE               	movwf	measure@offset+1
  2986  0080  0820               	movf	?_ADC_5,w
  2987  0081  00AD               	movwf	measure@offset
  2988                           
  2989                           ;comm.c: 542: asic.data_bits.CE = 1;
  2990  0082  1727               	bsf	measure@asic,6
  2991                           
  2992                           ;comm.c: 543: asic.data_bits.IQ = 0;
  2993  0083  11A8               	bcf	measure@asic+1,3
  2994                           
  2995                           ;comm.c: 545: BIO_config(asic);
  2996  0084  0828               	movf	measure@asic+1,w
  2997  0085  00A1               	movwf	BIO_config@conf+1
  2998  0086  0827               	movf	measure@asic,w
  2999  0087  00A0               	movwf	BIO_config@conf
  3000  0088  247F               	fcall	_BIO_config
  3001                           
  3002                           ;comm.c: 546: _delay((unsigned long)((20)*(500000/4000.0)));
  3003  0089  3004               	movlw	4
  3004  008A  0020               	movlb	0	; select bank0
  3005  008B  00A9               	movwf	??_measure
  3006  008C  303D               	movlw	61
  3007  008D                     u1667:	
  3008  008D  0B89               	decfsz	9,f
  3009  008E  288D               	goto	u1667
  3010  008F  0BA9               	decfsz	??_measure,f
  3011  0090  288D               	goto	u1667
  3012  0091  3200               	nop2
  3013                           
  3014                           ;comm.c: 548: value = ADC_5();
  3015  0092  24D3               	fcall	_ADC_5
  3016  0093  0020               	movlb	0	; select bank0
  3017  0094  0821               	movf	?_ADC_5+1,w
  3018  0095  00B1               	movwf	measure@value+1
  3019  0096  0820               	movf	?_ADC_5,w
  3020  0097  00B0               	movwf	measure@value
  3021                           
  3022                           ;comm.c: 549: *I = (value - offset);
  3023  0098  092D               	comf	measure@offset,w
  3024  0099  00A9               	movwf	??_measure
  3025  009A  092E               	comf	measure@offset+1,w
  3026  009B  00AA               	movwf	??_measure+1
  3027  009C  0AA9               	incf	??_measure,f
  3028  009D  1903               	skipnz
  3029  009E  0AAA               	incf	??_measure+1,f
  3030  009F  0830               	movf	measure@value,w
  3031  00A0  0729               	addwf	??_measure,w
  3032  00A1  00AB               	movwf	??_measure+2
  3033  00A2  0831               	movf	measure@value+1,w
  3034  00A3  3D2A               	addwfc	??_measure+1,w
  3035  00A4  00AC               	movwf	??_measure+3
  3036  00A5  082F               	movf	measure@I,w
  3037  00A6  0086               	movwf	6
  3038  00A7  0187               	clrf	7
  3039  00A8  082B               	movf	??_measure+2,w
  3040  00A9  3FC0               	movwi [0]fsr1
  3041  00AA  082C               	movf	??_measure+3,w
  3042  00AB  3FC1               	movwi [1]fsr1
  3043                           
  3044                           ;comm.c: 550: aux1 = *I;
  3045  00AC  082F               	movf	measure@I,w
  3046  00AD  0086               	movwf	6
  3047  00AE  0187               	clrf	7
  3048  00AF  3F40               	moviw [0]fsr1
  3049  00B0  00B4               	movwf	measure@aux1
  3050  00B1  3F41               	moviw [1]fsr1
  3051  00B2  00B5               	movwf	measure@aux1+1
  3052                           
  3053                           ;comm.c: 552: if (aux1 < 0) {
  3054  00B3  1FB5               	btfss	measure@aux1+1,7
  3055  00B4  28BA               	goto	l2601
  3056                           
  3057                           ;comm.c: 553: aux1 = -aux1;
  3058  00B5  09B4               	comf	measure@aux1,f
  3059  00B6  09B5               	comf	measure@aux1+1,f
  3060  00B7  0AB4               	incf	measure@aux1,f
  3061  00B8  1903               	skipnz
  3062  00B9  0AB5               	incf	measure@aux1+1,f
  3063  00BA                     l2601:	
  3064                           
  3065                           ;comm.c: 554: }
  3066                           ;comm.c: 559: asic.data_bits.IQ = 1;
  3067  00BA  15A8               	bsf	measure@asic+1,3
  3068                           
  3069                           ;comm.c: 561: BIO_config(asic);
  3070  00BB  0828               	movf	measure@asic+1,w
  3071  00BC  00A1               	movwf	BIO_config@conf+1
  3072  00BD  0827               	movf	measure@asic,w
  3073  00BE  00A0               	movwf	BIO_config@conf
  3074  00BF  247F               	fcall	_BIO_config
  3075                           
  3076                           ;comm.c: 562: _delay((unsigned long)((20)*(500000/4000.0)));
  3077  00C0  3004               	movlw	4
  3078  00C1  0020               	movlb	0	; select bank0
  3079  00C2  00A9               	movwf	??_measure
  3080  00C3  303D               	movlw	61
  3081  00C4                     u1677:	
  3082  00C4  0B89               	decfsz	9,f
  3083  00C5  28C4               	goto	u1677
  3084  00C6  0BA9               	decfsz	??_measure,f
  3085  00C7  28C4               	goto	u1677
  3086  00C8  3200               	nop2
  3087                           
  3088                           ;comm.c: 564: value = ADC_5();
  3089  00C9  24D3               	fcall	_ADC_5
  3090  00CA  0020               	movlb	0	; select bank0
  3091  00CB  0821               	movf	?_ADC_5+1,w
  3092  00CC  00B1               	movwf	measure@value+1
  3093  00CD  0820               	movf	?_ADC_5,w
  3094  00CE  00B0               	movwf	measure@value
  3095                           
  3096                           ;comm.c: 565: *Q = (value - offset);
  3097  00CF  092D               	comf	measure@offset,w
  3098  00D0  00A9               	movwf	??_measure
  3099  00D1  092E               	comf	measure@offset+1,w
  3100  00D2  00AA               	movwf	??_measure+1
  3101  00D3  0AA9               	incf	??_measure,f
  3102  00D4  1903               	skipnz
  3103  00D5  0AAA               	incf	??_measure+1,f
  3104  00D6  0830               	movf	measure@value,w
  3105  00D7  0729               	addwf	??_measure,w
  3106  00D8  00AB               	movwf	??_measure+2
  3107  00D9  0831               	movf	measure@value+1,w
  3108  00DA  3D2A               	addwfc	??_measure+1,w
  3109  00DB  00AC               	movwf	??_measure+3
  3110  00DC  0826               	movf	measure@Q,w
  3111  00DD  0086               	movwf	6
  3112  00DE  0187               	clrf	7
  3113  00DF  082B               	movf	??_measure+2,w
  3114  00E0  3FC0               	movwi [0]fsr1
  3115  00E1  082C               	movf	??_measure+3,w
  3116  00E2  3FC1               	movwi [1]fsr1
  3117                           
  3118                           ;comm.c: 566: aux2 = *Q;
  3119  00E3  0826               	movf	measure@Q,w
  3120  00E4  0086               	movwf	6
  3121  00E5  0187               	clrf	7
  3122  00E6  3F40               	moviw [0]fsr1
  3123  00E7  00B2               	movwf	measure@aux2
  3124  00E8  3F41               	moviw [1]fsr1
  3125  00E9  00B3               	movwf	measure@aux2+1
  3126                           
  3127                           ;comm.c: 568: if (aux2 < 0) {
  3128  00EA  1FB3               	btfss	measure@aux2+1,7
  3129  00EB  28F1               	goto	l2617
  3130                           
  3131                           ;comm.c: 569: aux2 = -aux2;
  3132  00EC  09B2               	comf	measure@aux2,f
  3133  00ED  09B3               	comf	measure@aux2+1,f
  3134  00EE  0AB2               	incf	measure@aux2,f
  3135  00EF  1903               	skipnz
  3136  00F0  0AB3               	incf	measure@aux2+1,f
  3137  00F1                     l2617:	
  3138                           
  3139                           ;comm.c: 570: }
  3140                           ;comm.c: 572: if (aux2 > aux1) {
  3141  00F1  0835               	movf	measure@aux1+1,w
  3142  00F2  3A80               	xorlw	128
  3143  00F3  00A9               	movwf	??_measure
  3144  00F4  0833               	movf	measure@aux2+1,w
  3145  00F5  3A80               	xorlw	128
  3146  00F6  0229               	subwf	??_measure,w
  3147  00F7  1D03               	skipz
  3148  00F8  28FB               	goto	u1475
  3149  00F9  0832               	movf	measure@aux2,w
  3150  00FA  0234               	subwf	measure@aux1,w
  3151  00FB                     u1475:	
  3152  00FB  1803               	skipnc
  3153  00FC  2902               	goto	l416
  3154                           
  3155                           ;comm.c: 573: aux1 = aux2;
  3156  00FD  0020               	movlb	0	; select bank0
  3157  00FE  0833               	movf	measure@aux2+1,w
  3158  00FF  00B5               	movwf	measure@aux1+1
  3159  0100  0832               	movf	measure@aux2,w
  3160  0101  00B4               	movwf	measure@aux1
  3161  0102                     l416:	
  3162                           
  3163                           ;comm.c: 574: }
  3164                           ;comm.c: 576: if (aux1 > 370) {
  3165  0102  0020               	movlb	0	; select bank0
  3166  0103  0835               	movf	measure@aux1+1,w
  3167  0104  3A80               	xorlw	128
  3168  0105  00A9               	movwf	??_measure
  3169  0106  3081               	movlw	129
  3170  0107  0229               	subwf	??_measure,w
  3171  0108  1D03               	skipz
  3172  0109  290C               	goto	u1485
  3173  010A  3073               	movlw	115
  3174  010B  0234               	subwf	measure@aux1,w
  3175  010C                     u1485:	
  3176  010C  1C03               	skipc
  3177  010D  2910               	goto	l2627
  3178                           
  3179                           ;comm.c: 577: return 2;
  3180  010E  3002               	movlw	2
  3181  010F  0008               	return
  3182  0110                     l2627:	
  3183                           ;comm.c: 578: } else if (aux1 < 86) {
  3184                           
  3185  0110  0020               	movlb	0	; select bank0
  3186  0111  0835               	movf	measure@aux1+1,w
  3187  0112  3A80               	xorlw	128
  3188  0113  00A9               	movwf	??_measure
  3189  0114  3080               	movlw	128
  3190  0115  0229               	subwf	??_measure,w
  3191  0116  1D03               	skipz
  3192  0117  291A               	goto	u1495
  3193  0118  3056               	movlw	86
  3194  0119  0234               	subwf	measure@aux1,w
  3195  011A                     u1495:	
  3196  011A  1803               	skipnc
  3197  011B  291E               	goto	l2633
  3198                           
  3199                           ;comm.c: 579: return 1;
  3200  011C  3001               	movlw	1
  3201  011D  0008               	return
  3202  011E                     l2633:	
  3203                           
  3204                           ;comm.c: 580: }
  3205                           ;comm.c: 582: return 0;
  3206  011E  3000               	movlw	0
  3207  011F  0008               	return
  3208  0120                     __end_of_measure:	
  3209                           
  3210                           	psect	text11
  3211  053C                     __ptext11:	
  3212 ;; *************** function _calculate_checksum *****************
  3213 ;; Defined at:
  3214 ;;		line 407 in file "comm.c"
  3215 ;; Parameters:    Size  Location     Type
  3216 ;;  data            1    wreg     PTR unsigned char 
  3217 ;;		 -> sweep@aux(7), 
  3218 ;;  num             1    0[BANK0 ] unsigned char 
  3219 ;; Auto vars:     Size  Location     Type
  3220 ;;  data            1    3[BANK0 ] PTR unsigned char 
  3221 ;;		 -> sweep@aux(7), 
  3222 ;;  i               1    5[BANK0 ] unsigned char 
  3223 ;;  check           1    4[BANK0 ] unsigned char 
  3224 ;; Return value:  Size  Location     Type
  3225 ;;                  1    wreg      unsigned char 
  3226 ;; Registers used:
  3227 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3228 ;; Tracked objects:
  3229 ;;		On entry : 0/0
  3230 ;;		On exit  : 0/0
  3231 ;;		Unchanged: 0/0
  3232 ;; Data sizes:     COMMON   BANK0   BANK1
  3233 ;;      Params:         0       1       0
  3234 ;;      Locals:         0       3       0
  3235 ;;      Temps:          0       2       0
  3236 ;;      Totals:         0       6       0
  3237 ;;Total ram usage:        6 bytes
  3238 ;; Hardware stack levels used:    1
  3239 ;; Hardware stack levels required when called:    2
  3240 ;; This function calls:
  3241 ;;		Nothing
  3242 ;; This function is called by:
  3243 ;;		_sweep
  3244 ;; This function uses a non-reentrant model
  3245 ;;
  3246                           
  3247                           
  3248                           ;psect for function _calculate_checksum
  3249  053C                     _calculate_checksum:	
  3250                           
  3251                           ;incstack = 0
  3252                           ; Regs used in _calculate_checksum: [wreg+fsr1l+fsr1h+status,2+status,0]
  3253                           ;calculate_checksum@data stored from wreg
  3254  053C  0020               	movlb	0	; select bank0
  3255  053D  00A3               	movwf	calculate_checksum@data
  3256                           
  3257                           ;comm.c: 409: unsigned char check, i;
  3258                           ;comm.c: 411: check = 0;
  3259  053E  01A4               	clrf	calculate_checksum@check
  3260                           
  3261                           ;comm.c: 412: for (i = 0; i < num; i++) {
  3262  053F  01A5               	clrf	calculate_checksum@i
  3263  0540                     l2571:	
  3264  0540  0820               	movf	calculate_checksum@num,w
  3265  0541  0225               	subwf	calculate_checksum@i,w
  3266  0542  1803               	btfsc	3,0
  3267  0543  2D53               	goto	l2573
  3268                           
  3269                           ;comm.c: 413: check ^= data[i];
  3270  0544  0825               	movf	calculate_checksum@i,w
  3271  0545  0723               	addwf	calculate_checksum@data,w
  3272  0546  00A1               	movwf	??_calculate_checksum
  3273  0547  0821               	movf	??_calculate_checksum,w
  3274  0548  0086               	movwf	6
  3275  0549  0187               	clrf	7
  3276  054A  0801               	movf	1,w
  3277  054B  00A2               	movwf	??_calculate_checksum+1
  3278  054C  0822               	movf	??_calculate_checksum+1,w
  3279  054D  06A4               	xorwf	calculate_checksum@check,f
  3280  054E  3001               	movlw	1
  3281  054F  00A1               	movwf	??_calculate_checksum
  3282  0550  0821               	movf	??_calculate_checksum,w
  3283  0551  07A5               	addwf	calculate_checksum@i,f
  3284  0552  2D40               	goto	l2571
  3285  0553                     l2573:	
  3286                           
  3287                           ;comm.c: 414: }
  3288                           ;comm.c: 416: return check;
  3289  0553  0824               	movf	calculate_checksum@check,w
  3290  0554  0008               	return
  3291  0555                     __end_of_calculate_checksum:	
  3292                           
  3293                           	psect	text12
  3294  03E8                     __ptext12:	
  3295 ;; *************** function _read_ADC_channels *****************
  3296 ;; Defined at:
  3297 ;;		line 91 in file "comm.c"
  3298 ;; Parameters:    Size  Location     Type
  3299 ;;		None
  3300 ;; Auto vars:     Size  Location     Type
  3301 ;;  aux             7    7[BANK0 ] unsigned char [7]
  3302 ;;  value3          2   18[BANK0 ] unsigned short 
  3303 ;;  value2          2   16[BANK0 ] unsigned short 
  3304 ;;  value1          2   14[BANK0 ] unsigned short 
  3305 ;; Return value:  Size  Location     Type
  3306 ;;                  1    wreg      void 
  3307 ;; Registers used:
  3308 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3309 ;; Tracked objects:
  3310 ;;		On entry : 0/0
  3311 ;;		On exit  : 0/0
  3312 ;;		Unchanged: 0/0
  3313 ;; Data sizes:     COMMON   BANK0   BANK1
  3314 ;;      Params:         0       0       0
  3315 ;;      Locals:         0      13       0
  3316 ;;      Temps:          0       1       0
  3317 ;;      Totals:         0      14       0
  3318 ;;Total ram usage:       14 bytes
  3319 ;; Hardware stack levels used:    1
  3320 ;; Hardware stack levels required when called:    4
  3321 ;; This function calls:
  3322 ;;		_ADC_2
  3323 ;;		_ADC_4
  3324 ;;		_ADC_5
  3325 ;;		_lputs_ISR
  3326 ;; This function is called by:
  3327 ;;		_mess_handler
  3328 ;; This function uses a non-reentrant model
  3329 ;;
  3330                           
  3331                           
  3332                           ;psect for function _read_ADC_channels
  3333  03E8                     _read_ADC_channels:	
  3334                           
  3335                           ;comm.c: 93: unsigned char aux[7];
  3336                           ;comm.c: 94: unsigned short value1,value2,value3;
  3337                           ;comm.c: 97: value1 = ADC_2();
  3338                           
  3339                           ;incstack = 0
  3340                           ; Regs used in _read_ADC_channels: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3341  03E8  2519               	fcall	_ADC_2
  3342  03E9  0020               	movlb	0	; select bank0
  3343  03EA  0821               	movf	?_ADC_2+1,w
  3344  03EB  00AF               	movwf	read_ADC_channels@value1+1
  3345  03EC  0820               	movf	?_ADC_2,w
  3346  03ED  00AE               	movwf	read_ADC_channels@value1
  3347                           
  3348                           ;comm.c: 99: value2 = ADC_4();
  3349  03EE  24F6               	fcall	_ADC_4
  3350  03EF  0020               	movlb	0	; select bank0
  3351  03F0  0821               	movf	?_ADC_4+1,w
  3352  03F1  00B1               	movwf	read_ADC_channels@value2+1
  3353  03F2  0820               	movf	?_ADC_4,w
  3354  03F3  00B0               	movwf	read_ADC_channels@value2
  3355                           
  3356                           ;comm.c: 101: value3 = ADC_5();
  3357  03F4  24D3               	fcall	_ADC_5
  3358  03F5  0020               	movlb	0	; select bank0
  3359  03F6  0821               	movf	?_ADC_5+1,w
  3360  03F7  00B3               	movwf	read_ADC_channels@value3+1
  3361  03F8  0820               	movf	?_ADC_5,w
  3362  03F9  00B2               	movwf	read_ADC_channels@value3
  3363                           
  3364                           ;comm.c: 102: { ADCON0 = 0b00100100;};
  3365  03FA  3024               	movlw	36
  3366  03FB  0021               	movlb	1	; select bank1
  3367  03FC  009D               	movwf	29	;volatile
  3368                           
  3369                           ;comm.c: 104: aux[0] = 'm';
  3370  03FD  306D               	movlw	109
  3371  03FE  0020               	movlb	0	; select bank0
  3372  03FF  00A6               	movwf	??_read_ADC_channels
  3373  0400  0826               	movf	??_read_ADC_channels,w
  3374  0401  00A7               	movwf	read_ADC_channels@aux
  3375                           
  3376                           ;comm.c: 105: aux[1] = (unsigned char)(value1 & 0xff);
  3377  0402  082E               	movf	read_ADC_channels@value1,w
  3378  0403  00A6               	movwf	??_read_ADC_channels
  3379  0404  0826               	movf	??_read_ADC_channels,w
  3380  0405  00A8               	movwf	read_ADC_channels@aux+1
  3381                           
  3382                           ;comm.c: 106: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  3383  0406  082F               	movf	read_ADC_channels@value1+1,w
  3384  0407  00A6               	movwf	??_read_ADC_channels
  3385  0408  0826               	movf	??_read_ADC_channels,w
  3386  0409  00A9               	movwf	read_ADC_channels@aux+2
  3387                           
  3388                           ;comm.c: 107: aux[3] = (unsigned char)(value2 & 0xff);
  3389  040A  0830               	movf	read_ADC_channels@value2,w
  3390  040B  00A6               	movwf	??_read_ADC_channels
  3391  040C  0826               	movf	??_read_ADC_channels,w
  3392  040D  00AA               	movwf	read_ADC_channels@aux+3
  3393                           
  3394                           ;comm.c: 108: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  3395  040E  0831               	movf	read_ADC_channels@value2+1,w
  3396  040F  00A6               	movwf	??_read_ADC_channels
  3397  0410  0826               	movf	??_read_ADC_channels,w
  3398  0411  00AB               	movwf	read_ADC_channels@aux+4
  3399                           
  3400                           ;comm.c: 109: aux[5] = (unsigned char)(value3 & 0xff);
  3401  0412  0832               	movf	read_ADC_channels@value3,w
  3402  0413  00A6               	movwf	??_read_ADC_channels
  3403  0414  0826               	movf	??_read_ADC_channels,w
  3404  0415  00AC               	movwf	read_ADC_channels@aux+5
  3405                           
  3406                           ;comm.c: 110: aux[6] = (unsigned char)((value3 >> 8) & 0xff);
  3407  0416  0833               	movf	read_ADC_channels@value3+1,w
  3408  0417  00A6               	movwf	??_read_ADC_channels
  3409  0418  0826               	movf	??_read_ADC_channels,w
  3410  0419  00AD               	movwf	read_ADC_channels@aux+6
  3411                           
  3412                           ;comm.c: 112: lputs_ISR(aux,7);
  3413  041A  3007               	movlw	7
  3414  041B  00A6               	movwf	??_read_ADC_channels
  3415  041C  0826               	movf	??_read_ADC_channels,w
  3416  041D  00A0               	movwf	lputs_ISR@length
  3417  041E  3027               	movlw	(low (read_ADC_channels@aux| 0))& (0+255)
  3418  041F  2454               	fcall	_lputs_ISR
  3419  0420  0008               	return
  3420  0421                     __end_of_read_ADC_channels:	
  3421                           
  3422                           	psect	text13
  3423  036B                     __ptext13:	
  3424 ;; *************** function _measure_Offset *****************
  3425 ;; Defined at:
  3426 ;;		line 265 in file "comm.c"
  3427 ;; Parameters:    Size  Location     Type
  3428 ;;		None
  3429 ;; Auto vars:     Size  Location     Type
  3430 ;;  aux             5    7[BANK0 ] unsigned char [5]
  3431 ;;  asic            2   16[BANK0 ] struct .
  3432 ;;  value2          2   14[BANK0 ] unsigned short 
  3433 ;;  value1          2   12[BANK0 ] unsigned short 
  3434 ;; Return value:  Size  Location     Type
  3435 ;;                  1    wreg      void 
  3436 ;; Registers used:
  3437 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3438 ;; Tracked objects:
  3439 ;;		On entry : 0/0
  3440 ;;		On exit  : 0/0
  3441 ;;		Unchanged: 0/0
  3442 ;; Data sizes:     COMMON   BANK0   BANK1
  3443 ;;      Params:         0       0       0
  3444 ;;      Locals:         0      11       0
  3445 ;;      Temps:          0       1       0
  3446 ;;      Totals:         0      12       0
  3447 ;;Total ram usage:       12 bytes
  3448 ;; Hardware stack levels used:    1
  3449 ;; Hardware stack levels required when called:    4
  3450 ;; This function calls:
  3451 ;;		_ADC_2
  3452 ;;		_ADC_4
  3453 ;;		_BIO_config
  3454 ;;		_lputs_ISR
  3455 ;; This function is called by:
  3456 ;;		_mess_handler
  3457 ;; This function uses a non-reentrant model
  3458 ;;
  3459                           
  3460                           
  3461                           ;psect for function _measure_Offset
  3462  036B                     _measure_Offset:	
  3463                           
  3464                           ;comm.c: 267: unsigned char aux[5];
  3465                           ;comm.c: 268: unsigned short value1,value2;
  3466                           ;comm.c: 271: BIO3 asic;
  3467                           ;comm.c: 277: aux[0] = 'o';
  3468                           
  3469                           ;incstack = 0
  3470                           ; Regs used in _measure_Offset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3471  036B  306F               	movlw	111
  3472  036C  0020               	movlb	0	; select bank0
  3473  036D  00A6               	movwf	??_measure_Offset
  3474  036E  0826               	movf	??_measure_Offset,w
  3475  036F  00A7               	movwf	measure_Offset@aux
  3476                           
  3477                           ;comm.c: 280: asic.data[0] = (unsigned short)(mess_rec[1]);
  3478  0370  0862               	movf	_mess_rec+1,w	;volatile
  3479  0371  00A6               	movwf	??_measure_Offset
  3480  0372  0826               	movf	??_measure_Offset,w
  3481  0373  00B0               	movwf	measure_Offset@asic
  3482                           
  3483                           ;comm.c: 281: asic.data[1] = (unsigned short)(mess_rec[2]);
  3484  0374  0863               	movf	_mess_rec+2,w	;volatile
  3485  0375  00A6               	movwf	??_measure_Offset
  3486  0376  0826               	movf	??_measure_Offset,w
  3487  0377  00B1               	movwf	measure_Offset@asic+1
  3488                           
  3489                           ;comm.c: 284: asic.data_bits.CE = 0;
  3490  0378  1330               	bcf	measure_Offset@asic,6
  3491                           
  3492                           ;comm.c: 285: BIO_config(asic);
  3493  0379  0831               	movf	measure_Offset@asic+1,w
  3494  037A  00A1               	movwf	BIO_config@conf+1
  3495  037B  0830               	movf	measure_Offset@asic,w
  3496  037C  00A0               	movwf	BIO_config@conf
  3497  037D  247F               	fcall	_BIO_config
  3498                           
  3499                           ;comm.c: 298: _delay((unsigned long)((20)*(500000/4000.0)));
  3500  037E  3004               	movlw	4
  3501  037F  0020               	movlb	0	; select bank0
  3502  0380  00A6               	movwf	??_measure_Offset
  3503  0381  303D               	movlw	61
  3504  0382                     u1687:	
  3505  0382  0B89               	decfsz	9,f
  3506  0383  2B82               	goto	u1687
  3507  0384  0BA6               	decfsz	??_measure_Offset,f
  3508  0385  2B82               	goto	u1687
  3509  0386  3200               	nop2
  3510                           
  3511                           ;comm.c: 300: value1 = ADC_2();
  3512  0387  2519               	fcall	_ADC_2
  3513  0388  0020               	movlb	0	; select bank0
  3514  0389  0821               	movf	?_ADC_2+1,w
  3515  038A  00AD               	movwf	measure_Offset@value1+1
  3516  038B  0820               	movf	?_ADC_2,w
  3517  038C  00AC               	movwf	measure_Offset@value1
  3518                           
  3519                           ;comm.c: 301: value2 = ADC_4();
  3520  038D  24F6               	fcall	_ADC_4
  3521  038E  0020               	movlb	0	; select bank0
  3522  038F  0821               	movf	?_ADC_4+1,w
  3523  0390  00AF               	movwf	measure_Offset@value2+1
  3524  0391  0820               	movf	?_ADC_4,w
  3525  0392  00AE               	movwf	measure_Offset@value2
  3526                           
  3527                           ;comm.c: 303: aux[1] = (unsigned char)(value1 & 0xff);
  3528  0393  082C               	movf	measure_Offset@value1,w
  3529  0394  00A6               	movwf	??_measure_Offset
  3530  0395  0826               	movf	??_measure_Offset,w
  3531  0396  00A8               	movwf	measure_Offset@aux+1
  3532                           
  3533                           ;comm.c: 304: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  3534  0397  082D               	movf	measure_Offset@value1+1,w
  3535  0398  00A6               	movwf	??_measure_Offset
  3536  0399  0826               	movf	??_measure_Offset,w
  3537  039A  00A9               	movwf	measure_Offset@aux+2
  3538                           
  3539                           ;comm.c: 305: aux[3] = (unsigned char)(value2 & 0xff);
  3540  039B  082E               	movf	measure_Offset@value2,w
  3541  039C  00A6               	movwf	??_measure_Offset
  3542  039D  0826               	movf	??_measure_Offset,w
  3543  039E  00AA               	movwf	measure_Offset@aux+3
  3544                           
  3545                           ;comm.c: 306: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  3546  039F  082F               	movf	measure_Offset@value2+1,w
  3547  03A0  00A6               	movwf	??_measure_Offset
  3548  03A1  0826               	movf	??_measure_Offset,w
  3549  03A2  00AB               	movwf	measure_Offset@aux+4
  3550                           
  3551                           ;comm.c: 309: lputs_ISR(aux,5);
  3552  03A3  3005               	movlw	5
  3553  03A4  00A6               	movwf	??_measure_Offset
  3554  03A5  0826               	movf	??_measure_Offset,w
  3555  03A6  00A0               	movwf	lputs_ISR@length
  3556  03A7  3027               	movlw	(low (measure_Offset@aux| 0))& (0+255)
  3557  03A8  2454               	fcall	_lputs_ISR
  3558  03A9  0008               	return
  3559  03AA                     __end_of_measure_Offset:	
  3560                           
  3561                           	psect	text14
  3562  02C1                     __ptext14:	
  3563 ;; *************** function _measure_Impedance_no_offset *****************
  3564 ;; Defined at:
  3565 ;;		line 200 in file "comm.c"
  3566 ;; Parameters:    Size  Location     Type
  3567 ;;		None
  3568 ;; Auto vars:     Size  Location     Type
  3569 ;;  aux            13    7[BANK0 ] unsigned char [13]
  3570 ;;  asic            2   24[BANK0 ] struct .
  3571 ;;  value2          2   22[BANK0 ] unsigned short 
  3572 ;;  value1          2   20[BANK0 ] unsigned short 
  3573 ;;  value3          2    0        unsigned short 
  3574 ;; Return value:  Size  Location     Type
  3575 ;;                  1    wreg      void 
  3576 ;; Registers used:
  3577 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3578 ;; Tracked objects:
  3579 ;;		On entry : 0/0
  3580 ;;		On exit  : 0/0
  3581 ;;		Unchanged: 0/0
  3582 ;; Data sizes:     COMMON   BANK0   BANK1
  3583 ;;      Params:         0       0       0
  3584 ;;      Locals:         0      19       0
  3585 ;;      Temps:          0       1       0
  3586 ;;      Totals:         0      20       0
  3587 ;;Total ram usage:       20 bytes
  3588 ;; Hardware stack levels used:    1
  3589 ;; Hardware stack levels required when called:    4
  3590 ;; This function calls:
  3591 ;;		_ADC_2
  3592 ;;		_ADC_4
  3593 ;;		_BIO_config
  3594 ;;		_lputs_ISR
  3595 ;; This function is called by:
  3596 ;;		_mess_handler
  3597 ;; This function uses a non-reentrant model
  3598 ;;
  3599                           
  3600                           
  3601                           ;psect for function _measure_Impedance_no_offset
  3602  02C1                     _measure_Impedance_no_offset:	
  3603                           
  3604                           ;comm.c: 202: unsigned char aux[13];
  3605                           ;comm.c: 203: unsigned short value1,value2,value3;
  3606                           ;comm.c: 206: BIO3 asic;
  3607                           ;comm.c: 211: aux[0] = 'y';
  3608                           
  3609                           ;incstack = 0
  3610                           ; Regs used in _measure_Impedance_no_offset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  3611  02C1  3079               	movlw	121
  3612  02C2  0020               	movlb	0	; select bank0
  3613  02C3  00A6               	movwf	??_measure_Impedance_no_offset
  3614  02C4  0826               	movf	??_measure_Impedance_no_offset,w
  3615  02C5  00A7               	movwf	measure_Impedance_no_offset@aux
  3616                           
  3617                           ;comm.c: 214: asic.data[0] = (unsigned short)(mess_rec[1]);
  3618  02C6  0862               	movf	_mess_rec+1,w	;volatile
  3619  02C7  00A6               	movwf	??_measure_Impedance_no_offset
  3620  02C8  0826               	movf	??_measure_Impedance_no_offset,w
  3621  02C9  00B8               	movwf	measure_Impedance_no_offset@asic
  3622                           
  3623                           ;comm.c: 215: asic.data[1] = (unsigned short)(mess_rec[2]);
  3624  02CA  0863               	movf	_mess_rec+2,w	;volatile
  3625  02CB  00A6               	movwf	??_measure_Impedance_no_offset
  3626  02CC  0826               	movf	??_measure_Impedance_no_offset,w
  3627  02CD  00B9               	movwf	measure_Impedance_no_offset@asic+1
  3628                           
  3629                           ;comm.c: 225: asic.data_bits.CE = 1;
  3630  02CE  1738               	bsf	measure_Impedance_no_offset@asic,6
  3631                           
  3632                           ;comm.c: 226: asic.data_bits.IQ = 0;
  3633  02CF  11B9               	bcf	measure_Impedance_no_offset@asic+1,3
  3634                           
  3635                           ;comm.c: 229: BIO_config(asic);
  3636  02D0  0839               	movf	measure_Impedance_no_offset@asic+1,w
  3637  02D1  00A1               	movwf	BIO_config@conf+1
  3638  02D2  0838               	movf	measure_Impedance_no_offset@asic,w
  3639  02D3  00A0               	movwf	BIO_config@conf
  3640  02D4  247F               	fcall	_BIO_config
  3641                           
  3642                           ;comm.c: 233: _delay((unsigned long)((20)*(500000/4000.0)));
  3643  02D5  3004               	movlw	4
  3644  02D6  0020               	movlb	0	; select bank0
  3645  02D7  00A6               	movwf	??_measure_Impedance_no_offset
  3646  02D8  303D               	movlw	61
  3647  02D9                     u1697:	
  3648  02D9  0B89               	decfsz	9,f
  3649  02DA  2AD9               	goto	u1697
  3650  02DB  0BA6               	decfsz	??_measure_Impedance_no_offset,f
  3651  02DC  2AD9               	goto	u1697
  3652  02DD  3200               	nop2
  3653                           
  3654                           ;comm.c: 235: value1 = ADC_2();
  3655  02DE  2519               	fcall	_ADC_2
  3656  02DF  0020               	movlb	0	; select bank0
  3657  02E0  0821               	movf	?_ADC_2+1,w
  3658  02E1  00B5               	movwf	measure_Impedance_no_offset@value1+1
  3659  02E2  0820               	movf	?_ADC_2,w
  3660  02E3  00B4               	movwf	measure_Impedance_no_offset@value1
  3661                           
  3662                           ;comm.c: 236: value2 = ADC_4();
  3663  02E4  24F6               	fcall	_ADC_4
  3664  02E5  0020               	movlb	0	; select bank0
  3665  02E6  0821               	movf	?_ADC_4+1,w
  3666  02E7  00B7               	movwf	measure_Impedance_no_offset@value2+1
  3667  02E8  0820               	movf	?_ADC_4,w
  3668  02E9  00B6               	movwf	measure_Impedance_no_offset@value2
  3669                           
  3670                           ;comm.c: 238: aux[1] = (unsigned char)(value1 & 0xff);
  3671  02EA  0834               	movf	measure_Impedance_no_offset@value1,w
  3672  02EB  00A6               	movwf	??_measure_Impedance_no_offset
  3673  02EC  0826               	movf	??_measure_Impedance_no_offset,w
  3674  02ED  00A8               	movwf	measure_Impedance_no_offset@aux+1
  3675                           
  3676                           ;comm.c: 239: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  3677  02EE  0835               	movf	measure_Impedance_no_offset@value1+1,w
  3678  02EF  00A6               	movwf	??_measure_Impedance_no_offset
  3679  02F0  0826               	movf	??_measure_Impedance_no_offset,w
  3680  02F1  00A9               	movwf	measure_Impedance_no_offset@aux+2
  3681                           
  3682                           ;comm.c: 240: aux[3] = (unsigned char)(value2 & 0xff);
  3683  02F2  0836               	movf	measure_Impedance_no_offset@value2,w
  3684  02F3  00A6               	movwf	??_measure_Impedance_no_offset
  3685  02F4  0826               	movf	??_measure_Impedance_no_offset,w
  3686  02F5  00AA               	movwf	measure_Impedance_no_offset@aux+3
  3687                           
  3688                           ;comm.c: 241: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  3689  02F6  0837               	movf	measure_Impedance_no_offset@value2+1,w
  3690  02F7  00A6               	movwf	??_measure_Impedance_no_offset
  3691  02F8  0826               	movf	??_measure_Impedance_no_offset,w
  3692  02F9  00AB               	movwf	measure_Impedance_no_offset@aux+4
  3693                           
  3694                           ;comm.c: 244: asic.data_bits.IQ = 1;
  3695  02FA  15B9               	bsf	measure_Impedance_no_offset@asic+1,3
  3696                           
  3697                           ;comm.c: 247: BIO_config(asic);
  3698  02FB  0839               	movf	measure_Impedance_no_offset@asic+1,w
  3699  02FC  00A1               	movwf	BIO_config@conf+1
  3700  02FD  0838               	movf	measure_Impedance_no_offset@asic,w
  3701  02FE  00A0               	movwf	BIO_config@conf
  3702  02FF  247F               	fcall	_BIO_config
  3703                           
  3704                           ;comm.c: 251: _delay((unsigned long)((20)*(500000/4000.0)));
  3705  0300  3004               	movlw	4
  3706  0301  0020               	movlb	0	; select bank0
  3707  0302  00A6               	movwf	??_measure_Impedance_no_offset
  3708  0303  303D               	movlw	61
  3709  0304                     u1707:	
  3710  0304  0B89               	decfsz	9,f
  3711  0305  2B04               	goto	u1707
  3712  0306  0BA6               	decfsz	??_measure_Impedance_no_offset,f
  3713  0307  2B04               	goto	u1707
  3714  0308  3200               	nop2
  3715                           
  3716                           ;comm.c: 253: value1 = ADC_2();
  3717  0309  2519               	fcall	_ADC_2
  3718  030A  0020               	movlb	0	; select bank0
  3719  030B  0821               	movf	?_ADC_2+1,w
  3720  030C  00B5               	movwf	measure_Impedance_no_offset@value1+1
  3721  030D  0820               	movf	?_ADC_2,w
  3722  030E  00B4               	movwf	measure_Impedance_no_offset@value1
  3723                           
  3724                           ;comm.c: 254: value2 = ADC_4();
  3725  030F  24F6               	fcall	_ADC_4
  3726  0310  0020               	movlb	0	; select bank0
  3727  0311  0821               	movf	?_ADC_4+1,w
  3728  0312  00B7               	movwf	measure_Impedance_no_offset@value2+1
  3729  0313  0820               	movf	?_ADC_4,w
  3730  0314  00B6               	movwf	measure_Impedance_no_offset@value2
  3731                           
  3732                           ;comm.c: 256: aux[5] = (unsigned char)(value1 & 0xff);
  3733  0315  0834               	movf	measure_Impedance_no_offset@value1,w
  3734  0316  00A6               	movwf	??_measure_Impedance_no_offset
  3735  0317  0826               	movf	??_measure_Impedance_no_offset,w
  3736  0318  00AC               	movwf	measure_Impedance_no_offset@aux+5
  3737                           
  3738                           ;comm.c: 257: aux[6] = (unsigned char)((value1 >> 8) & 0xff);
  3739  0319  0835               	movf	measure_Impedance_no_offset@value1+1,w
  3740  031A  00A6               	movwf	??_measure_Impedance_no_offset
  3741  031B  0826               	movf	??_measure_Impedance_no_offset,w
  3742  031C  00AD               	movwf	measure_Impedance_no_offset@aux+6
  3743                           
  3744                           ;comm.c: 258: aux[7] = (unsigned char)(value2 & 0xff);
  3745  031D  0836               	movf	measure_Impedance_no_offset@value2,w
  3746  031E  00A6               	movwf	??_measure_Impedance_no_offset
  3747  031F  0826               	movf	??_measure_Impedance_no_offset,w
  3748  0320  00AE               	movwf	measure_Impedance_no_offset@aux+7
  3749                           
  3750                           ;comm.c: 259: aux[8] = (unsigned char)((value2 >> 8) & 0xff);
  3751  0321  0837               	movf	measure_Impedance_no_offset@value2+1,w
  3752  0322  00A6               	movwf	??_measure_Impedance_no_offset
  3753  0323  0826               	movf	??_measure_Impedance_no_offset,w
  3754  0324  00AF               	movwf	measure_Impedance_no_offset@aux+8
  3755                           
  3756                           ;comm.c: 262: lputs_ISR(aux,9);
  3757  0325  3009               	movlw	9
  3758  0326  00A6               	movwf	??_measure_Impedance_no_offset
  3759  0327  0826               	movf	??_measure_Impedance_no_offset,w
  3760  0328  00A0               	movwf	lputs_ISR@length
  3761  0329  3027               	movlw	(low (measure_Impedance_no_offset@aux| 0))& (0+255)
  3762  032A  2454               	fcall	_lputs_ISR
  3763  032B  0008               	return
  3764  032C                     __end_of_measure_Impedance_no_offset:	
  3765                           
  3766                           	psect	text15
  3767  0255                     __ptext15:	
  3768 ;; *************** function _measure_Impedance_SE *****************
  3769 ;; Defined at:
  3770 ;;		line 314 in file "comm.c"
  3771 ;; Parameters:    Size  Location     Type
  3772 ;;		None
  3773 ;; Auto vars:     Size  Location     Type
  3774 ;;  aux             8    7[BANK0 ] unsigned char [8]
  3775 ;;  asic            2   17[BANK0 ] struct .
  3776 ;;  value1          2   15[BANK0 ] unsigned short 
  3777 ;;  check           1    0        unsigned char 
  3778 ;; Return value:  Size  Location     Type
  3779 ;;                  1    wreg      void 
  3780 ;; Registers used:
  3781 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3782 ;; Tracked objects:
  3783 ;;		On entry : 0/0
  3784 ;;		On exit  : 0/0
  3785 ;;		Unchanged: 0/0
  3786 ;; Data sizes:     COMMON   BANK0   BANK1
  3787 ;;      Params:         0       0       0
  3788 ;;      Locals:         0      12       0
  3789 ;;      Temps:          0       1       0
  3790 ;;      Totals:         0      13       0
  3791 ;;Total ram usage:       13 bytes
  3792 ;; Hardware stack levels used:    1
  3793 ;; Hardware stack levels required when called:    4
  3794 ;; This function calls:
  3795 ;;		_ADC_5
  3796 ;;		_BIO_config
  3797 ;;		_lputs_ISR
  3798 ;; This function is called by:
  3799 ;;		_mess_handler
  3800 ;; This function uses a non-reentrant model
  3801 ;;
  3802                           
  3803                           
  3804                           ;psect for function _measure_Impedance_SE
  3805  0255                     _measure_Impedance_SE:	
  3806                           
  3807                           ;comm.c: 316: unsigned char aux[8], check;
  3808                           ;comm.c: 318: unsigned short value1;
  3809                           ;comm.c: 321: BIO3 asic;
  3810                           ;comm.c: 336: aux[0] = 's';
  3811                           
  3812                           ;incstack = 0
  3813                           ; Regs used in _measure_Impedance_SE: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3814  0255  3073               	movlw	115
  3815  0256  0020               	movlb	0	; select bank0
  3816  0257  00A6               	movwf	??_measure_Impedance_SE
  3817  0258  0826               	movf	??_measure_Impedance_SE,w
  3818  0259  00A7               	movwf	measure_Impedance_SE@aux
  3819                           
  3820                           ;comm.c: 339: asic.data[0] = (unsigned short)(mess_rec[1]);
  3821  025A  0862               	movf	_mess_rec+1,w	;volatile
  3822  025B  00A6               	movwf	??_measure_Impedance_SE
  3823  025C  0826               	movf	??_measure_Impedance_SE,w
  3824  025D  00B1               	movwf	measure_Impedance_SE@asic
  3825                           
  3826                           ;comm.c: 340: asic.data[1] = (unsigned short)(mess_rec[2]);
  3827  025E  0863               	movf	_mess_rec+2,w	;volatile
  3828  025F  00A6               	movwf	??_measure_Impedance_SE
  3829  0260  0826               	movf	??_measure_Impedance_SE,w
  3830  0261  00B2               	movwf	measure_Impedance_SE@asic+1
  3831                           
  3832                           ;comm.c: 343: asic.data_bits.CE = 0;
  3833  0262  1331               	bcf	measure_Impedance_SE@asic,6
  3834                           
  3835                           ;comm.c: 344: BIO_config(asic);
  3836  0263  0832               	movf	measure_Impedance_SE@asic+1,w
  3837  0264  00A1               	movwf	BIO_config@conf+1
  3838  0265  0831               	movf	measure_Impedance_SE@asic,w
  3839  0266  00A0               	movwf	BIO_config@conf
  3840  0267  247F               	fcall	_BIO_config
  3841                           
  3842                           ;comm.c: 357: _delay((unsigned long)((20)*(500000/4000.0)));
  3843  0268  3004               	movlw	4
  3844  0269  0020               	movlb	0	; select bank0
  3845  026A  00A6               	movwf	??_measure_Impedance_SE
  3846  026B  303D               	movlw	61
  3847  026C                     u1717:	
  3848  026C  0B89               	decfsz	9,f
  3849  026D  2A6C               	goto	u1717
  3850  026E  0BA6               	decfsz	??_measure_Impedance_SE,f
  3851  026F  2A6C               	goto	u1717
  3852  0270  3200               	nop2
  3853                           
  3854                           ;comm.c: 359: value1 = ADC_5();
  3855  0271  24D3               	fcall	_ADC_5
  3856  0272  0020               	movlb	0	; select bank0
  3857  0273  0821               	movf	?_ADC_5+1,w
  3858  0274  00B0               	movwf	measure_Impedance_SE@value1+1
  3859  0275  0820               	movf	?_ADC_5,w
  3860  0276  00AF               	movwf	measure_Impedance_SE@value1
  3861                           
  3862                           ;comm.c: 361: aux[1] = (unsigned char)(value1 & 0xff);
  3863  0277  082F               	movf	measure_Impedance_SE@value1,w
  3864  0278  00A6               	movwf	??_measure_Impedance_SE
  3865  0279  0826               	movf	??_measure_Impedance_SE,w
  3866  027A  00A8               	movwf	measure_Impedance_SE@aux+1
  3867                           
  3868                           ;comm.c: 362: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  3869  027B  0830               	movf	measure_Impedance_SE@value1+1,w
  3870  027C  00A6               	movwf	??_measure_Impedance_SE
  3871  027D  0826               	movf	??_measure_Impedance_SE,w
  3872  027E  00A9               	movwf	measure_Impedance_SE@aux+2
  3873                           
  3874                           ;comm.c: 365: asic.data_bits.CE = 1;
  3875  027F  1731               	bsf	measure_Impedance_SE@asic,6
  3876                           
  3877                           ;comm.c: 366: asic.data_bits.IQ = 0;
  3878  0280  11B2               	bcf	measure_Impedance_SE@asic+1,3
  3879                           
  3880                           ;comm.c: 369: BIO_config(asic);
  3881  0281  0832               	movf	measure_Impedance_SE@asic+1,w
  3882  0282  00A1               	movwf	BIO_config@conf+1
  3883  0283  0831               	movf	measure_Impedance_SE@asic,w
  3884  0284  00A0               	movwf	BIO_config@conf
  3885  0285  247F               	fcall	_BIO_config
  3886                           
  3887                           ;comm.c: 373: _delay((unsigned long)((20)*(500000/4000.0)));
  3888  0286  3004               	movlw	4
  3889  0287  0020               	movlb	0	; select bank0
  3890  0288  00A6               	movwf	??_measure_Impedance_SE
  3891  0289  303D               	movlw	61
  3892  028A                     u1727:	
  3893  028A  0B89               	decfsz	9,f
  3894  028B  2A8A               	goto	u1727
  3895  028C  0BA6               	decfsz	??_measure_Impedance_SE,f
  3896  028D  2A8A               	goto	u1727
  3897  028E  3200               	nop2
  3898                           
  3899                           ;comm.c: 375: value1 = ADC_5();
  3900  028F  24D3               	fcall	_ADC_5
  3901  0290  0020               	movlb	0	; select bank0
  3902  0291  0821               	movf	?_ADC_5+1,w
  3903  0292  00B0               	movwf	measure_Impedance_SE@value1+1
  3904  0293  0820               	movf	?_ADC_5,w
  3905  0294  00AF               	movwf	measure_Impedance_SE@value1
  3906                           
  3907                           ;comm.c: 377: aux[3] = (unsigned char)(value1 & 0xff);
  3908  0295  082F               	movf	measure_Impedance_SE@value1,w
  3909  0296  00A6               	movwf	??_measure_Impedance_SE
  3910  0297  0826               	movf	??_measure_Impedance_SE,w
  3911  0298  00AA               	movwf	measure_Impedance_SE@aux+3
  3912                           
  3913                           ;comm.c: 378: aux[4] = (unsigned char)((value1 >> 8) & 0xff);
  3914  0299  0830               	movf	measure_Impedance_SE@value1+1,w
  3915  029A  00A6               	movwf	??_measure_Impedance_SE
  3916  029B  0826               	movf	??_measure_Impedance_SE,w
  3917  029C  00AB               	movwf	measure_Impedance_SE@aux+4
  3918                           
  3919                           ;comm.c: 381: asic.data_bits.IQ = 1;
  3920  029D  15B2               	bsf	measure_Impedance_SE@asic+1,3
  3921                           
  3922                           ;comm.c: 384: BIO_config(asic);
  3923  029E  0832               	movf	measure_Impedance_SE@asic+1,w
  3924  029F  00A1               	movwf	BIO_config@conf+1
  3925  02A0  0831               	movf	measure_Impedance_SE@asic,w
  3926  02A1  00A0               	movwf	BIO_config@conf
  3927  02A2  247F               	fcall	_BIO_config
  3928                           
  3929                           ;comm.c: 388: _delay((unsigned long)((20)*(500000/4000.0)));
  3930  02A3  3004               	movlw	4
  3931  02A4  0020               	movlb	0	; select bank0
  3932  02A5  00A6               	movwf	??_measure_Impedance_SE
  3933  02A6  303D               	movlw	61
  3934  02A7                     u1737:	
  3935  02A7  0B89               	decfsz	9,f
  3936  02A8  2AA7               	goto	u1737
  3937  02A9  0BA6               	decfsz	??_measure_Impedance_SE,f
  3938  02AA  2AA7               	goto	u1737
  3939  02AB  3200               	nop2
  3940                           
  3941                           ;comm.c: 390: value1 = ADC_5();
  3942  02AC  24D3               	fcall	_ADC_5
  3943  02AD  0020               	movlb	0	; select bank0
  3944  02AE  0821               	movf	?_ADC_5+1,w
  3945  02AF  00B0               	movwf	measure_Impedance_SE@value1+1
  3946  02B0  0820               	movf	?_ADC_5,w
  3947  02B1  00AF               	movwf	measure_Impedance_SE@value1
  3948                           
  3949                           ;comm.c: 392: aux[5] = (unsigned char)(value1 & 0xff);
  3950  02B2  082F               	movf	measure_Impedance_SE@value1,w
  3951  02B3  00A6               	movwf	??_measure_Impedance_SE
  3952  02B4  0826               	movf	??_measure_Impedance_SE,w
  3953  02B5  00AC               	movwf	measure_Impedance_SE@aux+5
  3954                           
  3955                           ;comm.c: 393: aux[6] = (unsigned char)((value1 >> 8) & 0xff);
  3956  02B6  0830               	movf	measure_Impedance_SE@value1+1,w
  3957  02B7  00A6               	movwf	??_measure_Impedance_SE
  3958  02B8  0826               	movf	??_measure_Impedance_SE,w
  3959  02B9  00AD               	movwf	measure_Impedance_SE@aux+6
  3960                           
  3961                           ;comm.c: 401: lputs_ISR(aux,7);
  3962  02BA  3007               	movlw	7
  3963  02BB  00A6               	movwf	??_measure_Impedance_SE
  3964  02BC  0826               	movf	??_measure_Impedance_SE,w
  3965  02BD  00A0               	movwf	lputs_ISR@length
  3966  02BE  3027               	movlw	(low (measure_Impedance_SE@aux| 0))& (0+255)
  3967  02BF  2454               	fcall	_lputs_ISR
  3968  02C0  0008               	return
  3969  02C1                     __end_of_measure_Impedance_SE:	
  3970                           
  3971                           	psect	text16
  3972  04D3                     __ptext16:	
  3973 ;; *************** function _ADC_5 *****************
  3974 ;; Defined at:
  3975 ;;		line 48 in file "ADC1823.c"
  3976 ;; Parameters:    Size  Location     Type
  3977 ;;		None
  3978 ;; Auto vars:     Size  Location     Type
  3979 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  3980 ;; Return value:  Size  Location     Type
  3981 ;;                  2    0[BANK0 ] unsigned short 
  3982 ;; Registers used:
  3983 ;;		wreg
  3984 ;; Tracked objects:
  3985 ;;		On entry : 0/0
  3986 ;;		On exit  : 0/0
  3987 ;;		Unchanged: 0/0
  3988 ;; Data sizes:     COMMON   BANK0   BANK1
  3989 ;;      Params:         0       2       0
  3990 ;;      Locals:         0       2       0
  3991 ;;      Temps:          0       2       0
  3992 ;;      Totals:         0       6       0
  3993 ;;Total ram usage:        6 bytes
  3994 ;; Hardware stack levels used:    1
  3995 ;; Hardware stack levels required when called:    2
  3996 ;; This function calls:
  3997 ;;		Nothing
  3998 ;; This function is called by:
  3999 ;;		_read_ADC_channels
  4000 ;;		_measure_Impedance_SE
  4001 ;;		_measure
  4002 ;; This function uses a non-reentrant model
  4003 ;;
  4004                           
  4005                           
  4006                           ;psect for function _ADC_5
  4007  04D3                     _ADC_5:	
  4008                           
  4009                           ;ADC1823.c: 50: unsigned short ADC_value;
  4010                           ;ADC1823.c: 52: { ADCON0 = 0b00010101;};
  4011                           
  4012                           ;incstack = 0
  4013                           ; Regs used in _ADC_5: [wreg]
  4014  04D3  3015               	movlw	21
  4015  04D4  0021               	movlb	1	; select bank1
  4016  04D5  009D               	movwf	29	;volatile
  4017                           
  4018                           ;ADC1823.c: 53: __nop();
  4019  04D6  0000               	nop
  4020                           
  4021                           ;ADC1823.c: 54: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  4022  04D7  0021               	movlb	1	; select bank1
  4023  04D8  149D               	bsf	29,1	;volatile
  4024  04D9                     l450:	
  4025  04D9  189D               	btfsc	29,1	;volatile
  4026  04DA  2CD9               	goto	l450
  4027  04DB  081C               	movf	28,w	;volatile
  4028  04DC  0020               	movlb	0	; select bank0
  4029  04DD  00A2               	movwf	??_ADC_5
  4030  04DE  01A3               	clrf	??_ADC_5+1
  4031  04DF  0822               	movf	??_ADC_5,w
  4032  04E0  00A4               	movwf	ADC_5@ADC_value
  4033  04E1  0823               	movf	??_ADC_5+1,w
  4034  04E2  00A5               	movwf	ADC_5@ADC_value+1
  4035  04E3  3008               	movlw	8
  4036  04E4                     u1265:	
  4037  04E4  35A4               	lslf	ADC_5@ADC_value,f
  4038  04E5  0DA5               	rlf	ADC_5@ADC_value+1,f
  4039  04E6  0B89               	decfsz	9,f
  4040  04E7  2CE4               	goto	u1265
  4041  04E8  0021               	movlb	1	; select bank1
  4042  04E9  081B               	movf	27,w	;volatile
  4043  04EA  0020               	movlb	0	; select bank0
  4044  04EB  00A2               	movwf	??_ADC_5
  4045  04EC  01A3               	clrf	??_ADC_5+1
  4046  04ED  0822               	movf	??_ADC_5,w
  4047  04EE  04A4               	iorwf	ADC_5@ADC_value,f
  4048  04EF  0823               	movf	??_ADC_5+1,w
  4049  04F0  04A5               	iorwf	ADC_5@ADC_value+1,f
  4050                           
  4051                           ;ADC1823.c: 55: return ADC_value;
  4052  04F1  0825               	movf	ADC_5@ADC_value+1,w
  4053  04F2  00A1               	movwf	?_ADC_5+1
  4054  04F3  0824               	movf	ADC_5@ADC_value,w
  4055  04F4  00A0               	movwf	?_ADC_5
  4056  04F5  0008               	return
  4057  04F6                     __end_of_ADC_5:	
  4058                           
  4059                           	psect	text17
  4060  01BF                     __ptext17:	
  4061 ;; *************** function _measure_Impedance *****************
  4062 ;; Defined at:
  4063 ;;		line 115 in file "comm.c"
  4064 ;; Parameters:    Size  Location     Type
  4065 ;;		None
  4066 ;; Auto vars:     Size  Location     Type
  4067 ;;  aux            13    7[BANK0 ] unsigned char [13]
  4068 ;;  asic            2   24[BANK0 ] struct .
  4069 ;;  value2          2   22[BANK0 ] unsigned short 
  4070 ;;  value1          2   20[BANK0 ] unsigned short 
  4071 ;;  value3          2    0        unsigned short 
  4072 ;; Return value:  Size  Location     Type
  4073 ;;                  1    wreg      void 
  4074 ;; Registers used:
  4075 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4076 ;; Tracked objects:
  4077 ;;		On entry : 0/0
  4078 ;;		On exit  : 0/0
  4079 ;;		Unchanged: 0/0
  4080 ;; Data sizes:     COMMON   BANK0   BANK1
  4081 ;;      Params:         0       0       0
  4082 ;;      Locals:         0      19       0
  4083 ;;      Temps:          0       1       0
  4084 ;;      Totals:         0      20       0
  4085 ;;Total ram usage:       20 bytes
  4086 ;; Hardware stack levels used:    1
  4087 ;; Hardware stack levels required when called:    4
  4088 ;; This function calls:
  4089 ;;		_ADC_2
  4090 ;;		_ADC_4
  4091 ;;		_BIO_config
  4092 ;;		_lputs_ISR
  4093 ;; This function is called by:
  4094 ;;		_mess_handler
  4095 ;; This function uses a non-reentrant model
  4096 ;;
  4097                           
  4098                           
  4099                           ;psect for function _measure_Impedance
  4100  01BF                     _measure_Impedance:	
  4101                           
  4102                           ;comm.c: 117: unsigned char aux[13];
  4103                           ;comm.c: 118: unsigned short value1,value2,value3;
  4104                           ;comm.c: 121: BIO3 asic;
  4105                           ;comm.c: 127: aux[0] = 'z';
  4106                           
  4107                           ;incstack = 0
  4108                           ; Regs used in _measure_Impedance: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4109  01BF  307A               	movlw	122
  4110  01C0  0020               	movlb	0	; select bank0
  4111  01C1  00A6               	movwf	??_measure_Impedance
  4112  01C2  0826               	movf	??_measure_Impedance,w
  4113  01C3  00A7               	movwf	measure_Impedance@aux
  4114                           
  4115                           ;comm.c: 131: asic.data[0] = (unsigned short)(mess_rec[1]);
  4116  01C4  0862               	movf	_mess_rec+1,w	;volatile
  4117  01C5  00A6               	movwf	??_measure_Impedance
  4118  01C6  0826               	movf	??_measure_Impedance,w
  4119  01C7  00B8               	movwf	measure_Impedance@asic
  4120                           
  4121                           ;comm.c: 132: asic.data[1] = (unsigned short)(mess_rec[2]);
  4122  01C8  0863               	movf	_mess_rec+2,w	;volatile
  4123  01C9  00A6               	movwf	??_measure_Impedance
  4124  01CA  0826               	movf	??_measure_Impedance,w
  4125  01CB  00B9               	movwf	measure_Impedance@asic+1
  4126                           
  4127                           ;comm.c: 135: asic.data_bits.CE = 0;
  4128  01CC  1338               	bcf	measure_Impedance@asic,6
  4129                           
  4130                           ;comm.c: 136: BIO_config(asic);
  4131  01CD  0839               	movf	measure_Impedance@asic+1,w
  4132  01CE  00A1               	movwf	BIO_config@conf+1
  4133  01CF  0838               	movf	measure_Impedance@asic,w
  4134  01D0  00A0               	movwf	BIO_config@conf
  4135  01D1  247F               	fcall	_BIO_config
  4136                           
  4137                           ;comm.c: 149: _delay((unsigned long)((20)*(500000/4000.0)));
  4138  01D2  3004               	movlw	4
  4139  01D3  0020               	movlb	0	; select bank0
  4140  01D4  00A6               	movwf	??_measure_Impedance
  4141  01D5  303D               	movlw	61
  4142  01D6                     u1747:	
  4143  01D6  0B89               	decfsz	9,f
  4144  01D7  29D6               	goto	u1747
  4145  01D8  0BA6               	decfsz	??_measure_Impedance,f
  4146  01D9  29D6               	goto	u1747
  4147  01DA  3200               	nop2
  4148                           
  4149                           ;comm.c: 151: value1 = ADC_2();
  4150  01DB  2519               	fcall	_ADC_2
  4151  01DC  0020               	movlb	0	; select bank0
  4152  01DD  0821               	movf	?_ADC_2+1,w
  4153  01DE  00B5               	movwf	measure_Impedance@value1+1
  4154  01DF  0820               	movf	?_ADC_2,w
  4155  01E0  00B4               	movwf	measure_Impedance@value1
  4156                           
  4157                           ;comm.c: 152: value2 = ADC_4();
  4158  01E1  24F6               	fcall	_ADC_4
  4159  01E2  0020               	movlb	0	; select bank0
  4160  01E3  0821               	movf	?_ADC_4+1,w
  4161  01E4  00B7               	movwf	measure_Impedance@value2+1
  4162  01E5  0820               	movf	?_ADC_4,w
  4163  01E6  00B6               	movwf	measure_Impedance@value2
  4164                           
  4165                           ;comm.c: 154: aux[1] = (unsigned char)(value1 & 0xff);
  4166  01E7  0834               	movf	measure_Impedance@value1,w
  4167  01E8  00A6               	movwf	??_measure_Impedance
  4168  01E9  0826               	movf	??_measure_Impedance,w
  4169  01EA  00A8               	movwf	measure_Impedance@aux+1
  4170                           
  4171                           ;comm.c: 155: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  4172  01EB  0835               	movf	measure_Impedance@value1+1,w
  4173  01EC  00A6               	movwf	??_measure_Impedance
  4174  01ED  0826               	movf	??_measure_Impedance,w
  4175  01EE  00A9               	movwf	measure_Impedance@aux+2
  4176                           
  4177                           ;comm.c: 156: aux[3] = (unsigned char)(value2 & 0xff);
  4178  01EF  0836               	movf	measure_Impedance@value2,w
  4179  01F0  00A6               	movwf	??_measure_Impedance
  4180  01F1  0826               	movf	??_measure_Impedance,w
  4181  01F2  00AA               	movwf	measure_Impedance@aux+3
  4182                           
  4183                           ;comm.c: 157: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  4184  01F3  0837               	movf	measure_Impedance@value2+1,w
  4185  01F4  00A6               	movwf	??_measure_Impedance
  4186  01F5  0826               	movf	??_measure_Impedance,w
  4187  01F6  00AB               	movwf	measure_Impedance@aux+4
  4188                           
  4189                           ;comm.c: 160: asic.data_bits.CE = 1;
  4190  01F7  1738               	bsf	measure_Impedance@asic,6
  4191                           
  4192                           ;comm.c: 161: asic.data_bits.IQ = 0;
  4193  01F8  11B9               	bcf	measure_Impedance@asic+1,3
  4194                           
  4195                           ;comm.c: 164: BIO_config(asic);
  4196  01F9  0839               	movf	measure_Impedance@asic+1,w
  4197  01FA  00A1               	movwf	BIO_config@conf+1
  4198  01FB  0838               	movf	measure_Impedance@asic,w
  4199  01FC  00A0               	movwf	BIO_config@conf
  4200  01FD  247F               	fcall	_BIO_config
  4201                           
  4202                           ;comm.c: 168: _delay((unsigned long)((20)*(500000/4000.0)));
  4203  01FE  3004               	movlw	4
  4204  01FF  0020               	movlb	0	; select bank0
  4205  0200  00A6               	movwf	??_measure_Impedance
  4206  0201  303D               	movlw	61
  4207  0202                     u1757:	
  4208  0202  0B89               	decfsz	9,f
  4209  0203  2A02               	goto	u1757
  4210  0204  0BA6               	decfsz	??_measure_Impedance,f
  4211  0205  2A02               	goto	u1757
  4212  0206  3200               	nop2
  4213                           
  4214                           ;comm.c: 170: value1 = ADC_2();
  4215  0207  2519               	fcall	_ADC_2
  4216  0208  0020               	movlb	0	; select bank0
  4217  0209  0821               	movf	?_ADC_2+1,w
  4218  020A  00B5               	movwf	measure_Impedance@value1+1
  4219  020B  0820               	movf	?_ADC_2,w
  4220  020C  00B4               	movwf	measure_Impedance@value1
  4221                           
  4222                           ;comm.c: 171: value2 = ADC_4();
  4223  020D  24F6               	fcall	_ADC_4
  4224  020E  0020               	movlb	0	; select bank0
  4225  020F  0821               	movf	?_ADC_4+1,w
  4226  0210  00B7               	movwf	measure_Impedance@value2+1
  4227  0211  0820               	movf	?_ADC_4,w
  4228  0212  00B6               	movwf	measure_Impedance@value2
  4229                           
  4230                           ;comm.c: 173: aux[5] = (unsigned char)(value1 & 0xff);
  4231  0213  0834               	movf	measure_Impedance@value1,w
  4232  0214  00A6               	movwf	??_measure_Impedance
  4233  0215  0826               	movf	??_measure_Impedance,w
  4234  0216  00AC               	movwf	measure_Impedance@aux+5
  4235                           
  4236                           ;comm.c: 174: aux[6] = (unsigned char)((value1 >> 8) & 0xff);
  4237  0217  0835               	movf	measure_Impedance@value1+1,w
  4238  0218  00A6               	movwf	??_measure_Impedance
  4239  0219  0826               	movf	??_measure_Impedance,w
  4240  021A  00AD               	movwf	measure_Impedance@aux+6
  4241                           
  4242                           ;comm.c: 175: aux[7] = (unsigned char)(value2 & 0xff);
  4243  021B  0836               	movf	measure_Impedance@value2,w
  4244  021C  00A6               	movwf	??_measure_Impedance
  4245  021D  0826               	movf	??_measure_Impedance,w
  4246  021E  00AE               	movwf	measure_Impedance@aux+7
  4247                           
  4248                           ;comm.c: 176: aux[8] = (unsigned char)((value2 >> 8) & 0xff);
  4249  021F  0837               	movf	measure_Impedance@value2+1,w
  4250  0220  00A6               	movwf	??_measure_Impedance
  4251  0221  0826               	movf	??_measure_Impedance,w
  4252  0222  00AF               	movwf	measure_Impedance@aux+8
  4253                           
  4254                           ;comm.c: 179: asic.data_bits.IQ = 1;
  4255  0223  15B9               	bsf	measure_Impedance@asic+1,3
  4256                           
  4257                           ;comm.c: 182: BIO_config(asic);
  4258  0224  0839               	movf	measure_Impedance@asic+1,w
  4259  0225  00A1               	movwf	BIO_config@conf+1
  4260  0226  0838               	movf	measure_Impedance@asic,w
  4261  0227  00A0               	movwf	BIO_config@conf
  4262  0228  247F               	fcall	_BIO_config
  4263                           
  4264                           ;comm.c: 186: _delay((unsigned long)((20)*(500000/4000.0)));
  4265  0229  3004               	movlw	4
  4266  022A  0020               	movlb	0	; select bank0
  4267  022B  00A6               	movwf	??_measure_Impedance
  4268  022C  303D               	movlw	61
  4269  022D                     u1767:	
  4270  022D  0B89               	decfsz	9,f
  4271  022E  2A2D               	goto	u1767
  4272  022F  0BA6               	decfsz	??_measure_Impedance,f
  4273  0230  2A2D               	goto	u1767
  4274  0231  3200               	nop2
  4275                           
  4276                           ;comm.c: 188: value1 = ADC_2();
  4277  0232  2519               	fcall	_ADC_2
  4278  0233  0020               	movlb	0	; select bank0
  4279  0234  0821               	movf	?_ADC_2+1,w
  4280  0235  00B5               	movwf	measure_Impedance@value1+1
  4281  0236  0820               	movf	?_ADC_2,w
  4282  0237  00B4               	movwf	measure_Impedance@value1
  4283                           
  4284                           ;comm.c: 189: value2 = ADC_4();
  4285  0238  24F6               	fcall	_ADC_4
  4286  0239  0020               	movlb	0	; select bank0
  4287  023A  0821               	movf	?_ADC_4+1,w
  4288  023B  00B7               	movwf	measure_Impedance@value2+1
  4289  023C  0820               	movf	?_ADC_4,w
  4290  023D  00B6               	movwf	measure_Impedance@value2
  4291                           
  4292                           ;comm.c: 191: aux[9] = (unsigned char)(value1 & 0xff);
  4293  023E  0834               	movf	measure_Impedance@value1,w
  4294  023F  00A6               	movwf	??_measure_Impedance
  4295  0240  0826               	movf	??_measure_Impedance,w
  4296  0241  00B0               	movwf	measure_Impedance@aux+9
  4297                           
  4298                           ;comm.c: 192: aux[10] = (unsigned char)((value1 >> 8) & 0xff);
  4299  0242  0835               	movf	measure_Impedance@value1+1,w
  4300  0243  00A6               	movwf	??_measure_Impedance
  4301  0244  0826               	movf	??_measure_Impedance,w
  4302  0245  00B1               	movwf	measure_Impedance@aux+10
  4303                           
  4304                           ;comm.c: 193: aux[11] = (unsigned char)(value2 & 0xff);
  4305  0246  0836               	movf	measure_Impedance@value2,w
  4306  0247  00A6               	movwf	??_measure_Impedance
  4307  0248  0826               	movf	??_measure_Impedance,w
  4308  0249  00B2               	movwf	measure_Impedance@aux+11
  4309                           
  4310                           ;comm.c: 194: aux[12] = (unsigned char)((value2 >> 8) & 0xff);
  4311  024A  0837               	movf	measure_Impedance@value2+1,w
  4312  024B  00A6               	movwf	??_measure_Impedance
  4313  024C  0826               	movf	??_measure_Impedance,w
  4314  024D  00B3               	movwf	measure_Impedance@aux+12
  4315                           
  4316                           ;comm.c: 197: lputs_ISR(aux,13);
  4317  024E  300D               	movlw	13
  4318  024F  00A6               	movwf	??_measure_Impedance
  4319  0250  0826               	movf	??_measure_Impedance,w
  4320  0251  00A0               	movwf	lputs_ISR@length
  4321  0252  3027               	movlw	(low (measure_Impedance@aux| 0))& (0+255)
  4322  0253  2454               	fcall	_lputs_ISR
  4323  0254  0008               	return
  4324  0255                     __end_of_measure_Impedance:	
  4325                           
  4326                           	psect	text18
  4327  04F6                     __ptext18:	
  4328 ;; *************** function _ADC_4 *****************
  4329 ;; Defined at:
  4330 ;;		line 38 in file "ADC1823.c"
  4331 ;; Parameters:    Size  Location     Type
  4332 ;;		None
  4333 ;; Auto vars:     Size  Location     Type
  4334 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  4335 ;; Return value:  Size  Location     Type
  4336 ;;                  2    0[BANK0 ] unsigned short 
  4337 ;; Registers used:
  4338 ;;		wreg
  4339 ;; Tracked objects:
  4340 ;;		On entry : 0/0
  4341 ;;		On exit  : 0/0
  4342 ;;		Unchanged: 0/0
  4343 ;; Data sizes:     COMMON   BANK0   BANK1
  4344 ;;      Params:         0       2       0
  4345 ;;      Locals:         0       2       0
  4346 ;;      Temps:          0       2       0
  4347 ;;      Totals:         0       6       0
  4348 ;;Total ram usage:        6 bytes
  4349 ;; Hardware stack levels used:    1
  4350 ;; Hardware stack levels required when called:    2
  4351 ;; This function calls:
  4352 ;;		Nothing
  4353 ;; This function is called by:
  4354 ;;		_read_ADC_channels
  4355 ;;		_measure_Impedance
  4356 ;;		_measure_Impedance_no_offset
  4357 ;;		_measure_Offset
  4358 ;; This function uses a non-reentrant model
  4359 ;;
  4360                           
  4361                           
  4362                           ;psect for function _ADC_4
  4363  04F6                     _ADC_4:	
  4364                           
  4365                           ;ADC1823.c: 40: unsigned short ADC_value;
  4366                           ;ADC1823.c: 42: { ADCON0 = 0b00010001;};
  4367                           
  4368                           ;incstack = 0
  4369                           ; Regs used in _ADC_4: [wreg]
  4370  04F6  3011               	movlw	17
  4371  04F7  0021               	movlb	1	; select bank1
  4372  04F8  009D               	movwf	29	;volatile
  4373                           
  4374                           ;ADC1823.c: 43: __nop();
  4375  04F9  0000               	nop
  4376                           
  4377                           ;ADC1823.c: 44: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  4378  04FA  0021               	movlb	1	; select bank1
  4379  04FB  149D               	bsf	29,1	;volatile
  4380  04FC                     l444:	
  4381  04FC  189D               	btfsc	29,1	;volatile
  4382  04FD  2CFC               	goto	l444
  4383  04FE  081C               	movf	28,w	;volatile
  4384  04FF  0020               	movlb	0	; select bank0
  4385  0500  00A2               	movwf	??_ADC_4
  4386  0501  01A3               	clrf	??_ADC_4+1
  4387  0502  0822               	movf	??_ADC_4,w
  4388  0503  00A4               	movwf	ADC_4@ADC_value
  4389  0504  0823               	movf	??_ADC_4+1,w
  4390  0505  00A5               	movwf	ADC_4@ADC_value+1
  4391  0506  3008               	movlw	8
  4392  0507                     u1435:	
  4393  0507  35A4               	lslf	ADC_4@ADC_value,f
  4394  0508  0DA5               	rlf	ADC_4@ADC_value+1,f
  4395  0509  0B89               	decfsz	9,f
  4396  050A  2D07               	goto	u1435
  4397  050B  0021               	movlb	1	; select bank1
  4398  050C  081B               	movf	27,w	;volatile
  4399  050D  0020               	movlb	0	; select bank0
  4400  050E  00A2               	movwf	??_ADC_4
  4401  050F  01A3               	clrf	??_ADC_4+1
  4402  0510  0822               	movf	??_ADC_4,w
  4403  0511  04A4               	iorwf	ADC_4@ADC_value,f
  4404  0512  0823               	movf	??_ADC_4+1,w
  4405  0513  04A5               	iorwf	ADC_4@ADC_value+1,f
  4406                           
  4407                           ;ADC1823.c: 45: return ADC_value;
  4408  0514  0825               	movf	ADC_4@ADC_value+1,w
  4409  0515  00A1               	movwf	?_ADC_4+1
  4410  0516  0824               	movf	ADC_4@ADC_value,w
  4411  0517  00A0               	movwf	?_ADC_4
  4412  0518  0008               	return
  4413  0519                     __end_of_ADC_4:	
  4414                           
  4415                           	psect	text19
  4416  0519                     __ptext19:	
  4417 ;; *************** function _ADC_2 *****************
  4418 ;; Defined at:
  4419 ;;		line 25 in file "ADC1823.c"
  4420 ;; Parameters:    Size  Location     Type
  4421 ;;		None
  4422 ;; Auto vars:     Size  Location     Type
  4423 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  4424 ;; Return value:  Size  Location     Type
  4425 ;;                  2    0[BANK0 ] unsigned short 
  4426 ;; Registers used:
  4427 ;;		wreg
  4428 ;; Tracked objects:
  4429 ;;		On entry : 0/0
  4430 ;;		On exit  : 0/0
  4431 ;;		Unchanged: 0/0
  4432 ;; Data sizes:     COMMON   BANK0   BANK1
  4433 ;;      Params:         0       2       0
  4434 ;;      Locals:         0       2       0
  4435 ;;      Temps:          0       2       0
  4436 ;;      Totals:         0       6       0
  4437 ;;Total ram usage:        6 bytes
  4438 ;; Hardware stack levels used:    1
  4439 ;; Hardware stack levels required when called:    2
  4440 ;; This function calls:
  4441 ;;		Nothing
  4442 ;; This function is called by:
  4443 ;;		_read_ADC_channels
  4444 ;;		_measure_Impedance
  4445 ;;		_measure_Impedance_no_offset
  4446 ;;		_measure_Offset
  4447 ;; This function uses a non-reentrant model
  4448 ;;
  4449                           
  4450                           
  4451                           ;psect for function _ADC_2
  4452  0519                     _ADC_2:	
  4453                           
  4454                           ;ADC1823.c: 27: unsigned short ADC_value;
  4455                           ;ADC1823.c: 29: { ADCON0 = 0b00001001;};
  4456                           
  4457                           ;incstack = 0
  4458                           ; Regs used in _ADC_2: [wreg]
  4459  0519  3009               	movlw	9
  4460  051A  0021               	movlb	1	; select bank1
  4461  051B  009D               	movwf	29	;volatile
  4462                           
  4463                           ;ADC1823.c: 30: __nop();
  4464  051C  0000               	nop
  4465                           
  4466                           ;ADC1823.c: 34: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  4467  051D  0021               	movlb	1	; select bank1
  4468  051E  149D               	bsf	29,1	;volatile
  4469  051F                     l438:	
  4470  051F  189D               	btfsc	29,1	;volatile
  4471  0520  2D1F               	goto	l438
  4472  0521  081C               	movf	28,w	;volatile
  4473  0522  0020               	movlb	0	; select bank0
  4474  0523  00A2               	movwf	??_ADC_2
  4475  0524  01A3               	clrf	??_ADC_2+1
  4476  0525  0822               	movf	??_ADC_2,w
  4477  0526  00A4               	movwf	ADC_2@ADC_value
  4478  0527  0823               	movf	??_ADC_2+1,w
  4479  0528  00A5               	movwf	ADC_2@ADC_value+1
  4480  0529  3008               	movlw	8
  4481  052A                     u1415:	
  4482  052A  35A4               	lslf	ADC_2@ADC_value,f
  4483  052B  0DA5               	rlf	ADC_2@ADC_value+1,f
  4484  052C  0B89               	decfsz	9,f
  4485  052D  2D2A               	goto	u1415
  4486  052E  0021               	movlb	1	; select bank1
  4487  052F  081B               	movf	27,w	;volatile
  4488  0530  0020               	movlb	0	; select bank0
  4489  0531  00A2               	movwf	??_ADC_2
  4490  0532  01A3               	clrf	??_ADC_2+1
  4491  0533  0822               	movf	??_ADC_2,w
  4492  0534  04A4               	iorwf	ADC_2@ADC_value,f
  4493  0535  0823               	movf	??_ADC_2+1,w
  4494  0536  04A5               	iorwf	ADC_2@ADC_value+1,f
  4495                           
  4496                           ;ADC1823.c: 35: return ADC_value;
  4497  0537  0825               	movf	ADC_2@ADC_value+1,w
  4498  0538  00A1               	movwf	?_ADC_2+1
  4499  0539  0824               	movf	ADC_2@ADC_value,w
  4500  053A  00A0               	movwf	?_ADC_2
  4501  053B  0008               	return
  4502  053C                     __end_of_ADC_2:	
  4503                           
  4504                           	psect	text20
  4505  056E                     __ptext20:	
  4506 ;; *************** function _config_ASIC *****************
  4507 ;; Defined at:
  4508 ;;		line 61 in file "comm.c"
  4509 ;; Parameters:    Size  Location     Type
  4510 ;;		None
  4511 ;; Auto vars:     Size  Location     Type
  4512 ;;  asic            2    6[BANK0 ] struct .
  4513 ;; Return value:  Size  Location     Type
  4514 ;;                  1    wreg      void 
  4515 ;; Registers used:
  4516 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4517 ;; Tracked objects:
  4518 ;;		On entry : 0/0
  4519 ;;		On exit  : 0/0
  4520 ;;		Unchanged: 0/0
  4521 ;; Data sizes:     COMMON   BANK0   BANK1
  4522 ;;      Params:         0       0       0
  4523 ;;      Locals:         0       2       0
  4524 ;;      Temps:          0       1       0
  4525 ;;      Totals:         0       3       0
  4526 ;;Total ram usage:        3 bytes
  4527 ;; Hardware stack levels used:    1
  4528 ;; Hardware stack levels required when called:    4
  4529 ;; This function calls:
  4530 ;;		_BIO_config
  4531 ;;		_lputs_ISR
  4532 ;; This function is called by:
  4533 ;;		_mess_handler
  4534 ;; This function uses a non-reentrant model
  4535 ;;
  4536                           
  4537                           
  4538                           ;psect for function _config_ASIC
  4539  056E                     _config_ASIC:	
  4540                           
  4541                           ;comm.c: 64: BIO3 asic;
  4542                           ;comm.c: 70: asic.data[0] = mess_rec[1];
  4543                           
  4544                           ;incstack = 0
  4545                           ; Regs used in _config_ASIC: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4546  056E  0020               	movlb	0	; select bank0
  4547  056F  0862               	movf	_mess_rec+1,w	;volatile
  4548  0570  00A5               	movwf	??_config_ASIC
  4549  0571  0825               	movf	??_config_ASIC,w
  4550  0572  00A6               	movwf	config_ASIC@asic
  4551                           
  4552                           ;comm.c: 71: asic.data[1] = mess_rec[2];
  4553  0573  0863               	movf	_mess_rec+2,w	;volatile
  4554  0574  00A5               	movwf	??_config_ASIC
  4555  0575  0825               	movf	??_config_ASIC,w
  4556  0576  00A7               	movwf	config_ASIC@asic+1
  4557                           
  4558                           ;comm.c: 73: lputs_ISR(mess_rec,mess_rec_size);
  4559  0577  0860               	movf	_mess_rec_size,w	;volatile
  4560  0578  00A5               	movwf	??_config_ASIC
  4561  0579  0825               	movf	??_config_ASIC,w
  4562  057A  00A0               	movwf	lputs_ISR@length
  4563  057B  3061               	movlw	(low (_mess_rec| 0))& (0+255)
  4564  057C  2454               	fcall	_lputs_ISR
  4565                           
  4566                           ;comm.c: 75: BIO_config(asic);
  4567  057D  0020               	movlb	0	; select bank0
  4568  057E  0827               	movf	config_ASIC@asic+1,w
  4569  057F  00A1               	movwf	BIO_config@conf+1
  4570  0580  0826               	movf	config_ASIC@asic,w
  4571  0581  00A0               	movwf	BIO_config@conf
  4572  0582  247F               	fcall	_BIO_config
  4573  0583  0008               	return
  4574  0584                     __end_of_config_ASIC:	
  4575                           
  4576                           	psect	text21
  4577  0454                     __ptext21:	
  4578 ;; *************** function _lputs_ISR *****************
  4579 ;; Defined at:
  4580 ;;		line 132 in file "USART1823.c"
  4581 ;; Parameters:    Size  Location     Type
  4582 ;;  data            1    wreg     PTR unsigned char 
  4583 ;;		 -> sweep@aux(7), calibrate_reader@aux(8), measure_Impedance_SE@aux(8), measure_Offset@aux(5), 
  4584 ;;		 -> measure_Impedance_no_offset@aux(13), measure_Impedance@aux(13), read_ADC_channels@aux(7), mess_rec(10), 
  4585 ;;  length          1    0[BANK0 ] unsigned char 
  4586 ;; Auto vars:     Size  Location     Type
  4587 ;;  data            1    4[BANK0 ] PTR unsigned char 
  4588 ;;		 -> sweep@aux(7), calibrate_reader@aux(8), measure_Impedance_SE@aux(8), measure_Offset@aux(5), 
  4589 ;;		 -> measure_Impedance_no_offset@aux(13), measure_Impedance@aux(13), read_ADC_channels@aux(7), mess_rec(10), 
  4590 ;;  i               1    3[BANK0 ] unsigned char 
  4591 ;; Return value:  Size  Location     Type
  4592 ;;                  1    wreg      void 
  4593 ;; Registers used:
  4594 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4595 ;; Tracked objects:
  4596 ;;		On entry : 0/0
  4597 ;;		On exit  : 0/0
  4598 ;;		Unchanged: 0/0
  4599 ;; Data sizes:     COMMON   BANK0   BANK1
  4600 ;;      Params:         0       1       0
  4601 ;;      Locals:         0       2       0
  4602 ;;      Temps:          0       2       0
  4603 ;;      Totals:         0       5       0
  4604 ;;Total ram usage:        5 bytes
  4605 ;; Hardware stack levels used:    1
  4606 ;; Hardware stack levels required when called:    3
  4607 ;; This function calls:
  4608 ;;		_close_RX_USART
  4609 ;; This function is called by:
  4610 ;;		_mess_handler
  4611 ;;		_config_ASIC
  4612 ;;		_read_ADC_channels
  4613 ;;		_measure_Impedance
  4614 ;;		_measure_Impedance_no_offset
  4615 ;;		_measure_Offset
  4616 ;;		_measure_Impedance_SE
  4617 ;;		_sweep
  4618 ;;		_calibrate_reader
  4619 ;; This function uses a non-reentrant model
  4620 ;;
  4621                           
  4622                           
  4623                           ;psect for function _lputs_ISR
  4624  0454                     _lputs_ISR:	
  4625                           
  4626                           ;incstack = 0
  4627                           ; Regs used in _lputs_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4628                           ;lputs_ISR@data stored from wreg
  4629  0454  0020               	movlb	0	; select bank0
  4630  0455  00A4               	movwf	lputs_ISR@data
  4631                           
  4632                           ;USART1823.c: 134: unsigned char i;
  4633                           ;USART1823.c: 136: if (USART_tx_flag == 1)
  4634  0456  0372               	decf	_USART_tx_flag,w	;volatile
  4635  0457  1903               	btfsc	3,2
  4636  0458  0008               	return
  4637                           
  4638                           ;USART1823.c: 139: for (i = 0; i < length; i++)
  4639                           
  4640                           ;USART1823.c: 137: return;
  4641  0459  01A3               	clrf	lputs_ISR@i
  4642  045A                     l2533:	
  4643  045A  0820               	movf	lputs_ISR@length,w
  4644  045B  0223               	subwf	lputs_ISR@i,w
  4645  045C  1803               	btfsc	3,0
  4646  045D  2C71               	goto	l2535
  4647                           
  4648                           ;USART1823.c: 140: USART_tx_data[i] = data[i];
  4649  045E  0823               	movf	lputs_ISR@i,w
  4650  045F  0724               	addwf	lputs_ISR@data,w
  4651  0460  00A1               	movwf	??_lputs_ISR
  4652  0461  0821               	movf	??_lputs_ISR,w
  4653  0462  0086               	movwf	6
  4654  0463  0187               	clrf	7
  4655  0464  0801               	movf	1,w
  4656  0465  00A2               	movwf	??_lputs_ISR+1
  4657  0466  0823               	movf	lputs_ISR@i,w
  4658  0467  3EA0               	addlw	(low (_USART_tx_data| 0))& (0+255)
  4659  0468  0086               	movwf	6
  4660  0469  0187               	clrf	7
  4661  046A  0822               	movf	??_lputs_ISR+1,w
  4662  046B  0081               	movwf	1
  4663  046C  3001               	movlw	1
  4664  046D  00A1               	movwf	??_lputs_ISR
  4665  046E  0821               	movf	??_lputs_ISR,w
  4666  046F  07A3               	addwf	lputs_ISR@i,f
  4667  0470  2C5A               	goto	l2533
  4668  0471                     l2535:	
  4669                           
  4670                           ;USART1823.c: 142: close_RX_USART();
  4671  0471  25DF               	fcall	_close_RX_USART
  4672                           
  4673                           ;USART1823.c: 144: USART_tx_index = 0;
  4674  0472  01F3               	clrf	_USART_tx_index	;volatile
  4675                           
  4676                           ;USART1823.c: 145: USART_tx_length = length;
  4677  0473  0020               	movlb	0	; select bank0
  4678  0474  0820               	movf	lputs_ISR@length,w
  4679  0475  00A1               	movwf	??_lputs_ISR
  4680  0476  0821               	movf	??_lputs_ISR,w
  4681  0477  00F4               	movwf	_USART_tx_length	;volatile
  4682                           
  4683                           ;USART1823.c: 147: USART_tx_flag = 1;
  4684  0478  3001               	movlw	1
  4685  0479  00A1               	movwf	??_lputs_ISR
  4686  047A  0821               	movf	??_lputs_ISR,w
  4687  047B  00F2               	movwf	_USART_tx_flag	;volatile
  4688                           
  4689                           ;USART1823.c: 148: TXIE = 1;
  4690  047C  0021               	movlb	1	; select bank1
  4691  047D  1611               	bsf	17,4	;volatile
  4692  047E  0008               	return
  4693  047F                     __end_of_lputs_ISR:	
  4694                           
  4695                           	psect	text22
  4696  05DF                     __ptext22:	
  4697 ;; *************** function _close_RX_USART *****************
  4698 ;; Defined at:
  4699 ;;		line 35 in file "USART1823.c"
  4700 ;; Parameters:    Size  Location     Type
  4701 ;;		None
  4702 ;; Auto vars:     Size  Location     Type
  4703 ;;		None
  4704 ;; Return value:  Size  Location     Type
  4705 ;;                  1    wreg      void 
  4706 ;; Registers used:
  4707 ;;		status,2
  4708 ;; Tracked objects:
  4709 ;;		On entry : 0/0
  4710 ;;		On exit  : 0/0
  4711 ;;		Unchanged: 0/0
  4712 ;; Data sizes:     COMMON   BANK0   BANK1
  4713 ;;      Params:         0       0       0
  4714 ;;      Locals:         0       0       0
  4715 ;;      Temps:          0       0       0
  4716 ;;      Totals:         0       0       0
  4717 ;;Total ram usage:        0 bytes
  4718 ;; Hardware stack levels used:    1
  4719 ;; Hardware stack levels required when called:    2
  4720 ;; This function calls:
  4721 ;;		Nothing
  4722 ;; This function is called by:
  4723 ;;		_lputs_ISR
  4724 ;; This function uses a non-reentrant model
  4725 ;;
  4726                           
  4727                           
  4728                           ;psect for function _close_RX_USART
  4729  05DF                     _close_RX_USART:	
  4730                           
  4731                           ;USART1823.c: 39: RCIE = 0;
  4732                           
  4733                           ;incstack = 0
  4734                           ; Regs used in _close_RX_USART: [status,2]
  4735  05DF  0021               	movlb	1	; select bank1
  4736  05E0  1291               	bcf	17,5	;volatile
  4737                           
  4738                           ;USART1823.c: 40: CREN = 0;
  4739  05E1  0023               	movlb	3	; select bank3
  4740  05E2  121D               	bcf	29,4	;volatile
  4741                           
  4742                           ;USART1823.c: 41: USART_rx_index = 0;
  4743  05E3  0020               	movlb	0	; select bank0
  4744  05E4  01DF               	clrf	_USART_rx_index	;volatile
  4745  05E5  0008               	return
  4746  05E6                     __end_of_close_RX_USART:	
  4747                           
  4748                           	psect	text23
  4749  047F                     __ptext23:	
  4750 ;; *************** function _BIO_config *****************
  4751 ;; Defined at:
  4752 ;;		line 41 in file "bio3.c"
  4753 ;; Parameters:    Size  Location     Type
  4754 ;;  conf            2    0[BANK0 ] struct .
  4755 ;; Auto vars:     Size  Location     Type
  4756 ;;  out             1    4[BANK0 ] unsigned char 
  4757 ;;  i               1    3[BANK0 ] unsigned char 
  4758 ;; Return value:  Size  Location     Type
  4759 ;;                  1    wreg      void 
  4760 ;; Registers used:
  4761 ;;		wreg, status,2, status,0
  4762 ;; Tracked objects:
  4763 ;;		On entry : 0/0
  4764 ;;		On exit  : 0/0
  4765 ;;		Unchanged: 0/0
  4766 ;; Data sizes:     COMMON   BANK0   BANK1
  4767 ;;      Params:         0       2       0
  4768 ;;      Locals:         0       2       0
  4769 ;;      Temps:          0       1       0
  4770 ;;      Totals:         0       5       0
  4771 ;;Total ram usage:        5 bytes
  4772 ;; Hardware stack levels used:    1
  4773 ;; Hardware stack levels required when called:    2
  4774 ;; This function calls:
  4775 ;;		Nothing
  4776 ;; This function is called by:
  4777 ;;		_config_ASIC
  4778 ;;		_measure_Impedance
  4779 ;;		_measure_Impedance_no_offset
  4780 ;;		_measure_Offset
  4781 ;;		_measure_Impedance_SE
  4782 ;;		_measure
  4783 ;; This function uses a non-reentrant model
  4784 ;;
  4785                           
  4786                           
  4787                           ;psect for function _BIO_config
  4788  047F                     _BIO_config:	
  4789                           
  4790                           ;bio3.c: 43: unsigned char i, out;
  4791                           ;bio3.c: 45: out &= 0b11110111; PORTC = out;;
  4792                           
  4793                           ;incstack = 0
  4794                           ; Regs used in _BIO_config: [wreg+status,2+status,0]
  4795  047F  30F7               	movlw	247
  4796  0480  0020               	movlb	0	; select bank0
  4797  0481  00A2               	movwf	??_BIO_config
  4798  0482  0822               	movf	??_BIO_config,w
  4799  0483  05A4               	andwf	BIO_config@out,f
  4800  0484  0824               	movf	BIO_config@out,w
  4801  0485  008E               	movwf	14	;volatile
  4802                           
  4803                           ;bio3.c: 46: ;;
  4804                           ;bio3.c: 48: RA5 = 0;;
  4805  0486  128C               	bcf	12,5	;volatile
  4806                           
  4807                           ;bio3.c: 49: ;;
  4808                           ;bio3.c: 51: RA5 = 1;;
  4809  0487  168C               	bsf	12,5	;volatile
  4810                           
  4811                           ;bio3.c: 53: for(i = 0; i < 16; i++) {
  4812  0488  01A3               	clrf	BIO_config@i
  4813  0489                     L3:	
  4814  0489  3010               	movlw	16
  4815  048A  0223               	subwf	BIO_config@i,w
  4816  048B  1803               	btfsc	3,0
  4817  048C  0008               	return
  4818                           
  4819                           ;bio3.c: 54: if (conf.datashort & 0x0001) {
  4820  048D  1C20               	btfss	BIO_config@conf,0
  4821  048E  2C91               	goto	l2469
  4822                           
  4823                           ;bio3.c: 55: out |= 0b00000100; PORTC = out;;
  4824  048F  1524               	bsf	BIO_config@out,2
  4825  0490  2C95               	goto	l2471
  4826  0491                     l2469:	
  4827                           ;bio3.c: 56: } else {
  4828                           
  4829                           
  4830                           ;bio3.c: 57: out &= 0b11111011; PORTC = out;;
  4831  0491  30FB               	movlw	251
  4832  0492  00A2               	movwf	??_BIO_config
  4833  0493  0822               	movf	??_BIO_config,w
  4834  0494  05A4               	andwf	BIO_config@out,f
  4835  0495                     l2471:	
  4836  0495  0824               	movf	BIO_config@out,w
  4837  0496  008E               	movwf	14	;volatile
  4838                           
  4839                           ;bio3.c: 58: }
  4840                           ;bio3.c: 59: conf.datashort >>= 1;
  4841  0497  3001               	movlw	1
  4842  0498                     u1235:	
  4843  0498  36A1               	lsrf	BIO_config@conf+1,f
  4844  0499  0CA0               	rrf	BIO_config@conf,f
  4845  049A  0B89               	decfsz	9,f
  4846  049B  2C98               	goto	u1235
  4847                           
  4848                           ;bio3.c: 61: ;;
  4849                           ;bio3.c: 63: out |= 0b00001000; PORTC = out;;
  4850  049C  15A4               	bsf	BIO_config@out,3
  4851  049D  0824               	movf	BIO_config@out,w
  4852  049E  008E               	movwf	14	;volatile
  4853                           
  4854                           ;bio3.c: 64: ;;
  4855                           ;bio3.c: 65: out &= 0b11110111; PORTC = out;;
  4856  049F  30F7               	movlw	247
  4857  04A0  00A2               	movwf	??_BIO_config
  4858  04A1  0822               	movf	??_BIO_config,w
  4859  04A2  05A4               	andwf	BIO_config@out,f
  4860  04A3  0824               	movf	BIO_config@out,w
  4861  04A4  008E               	movwf	14	;volatile
  4862  04A5  3001               	movlw	1
  4863  04A6  00A2               	movwf	??_BIO_config
  4864  04A7  0822               	movf	??_BIO_config,w
  4865  04A8  07A3               	addwf	BIO_config@i,f
  4866  04A9  2C89               	goto	L3
  4867  04AA                     __end_of_BIO_config:	
  4868                           
  4869                           	psect	text24
  4870  05FC                     __ptext24:	
  4871 ;; *************** function _SYSTEM_Initialize *****************
  4872 ;; Defined at:
  4873 ;;		line 70 in file "mcc_generated_files/mcc.c"
  4874 ;; Parameters:    Size  Location     Type
  4875 ;;		None
  4876 ;; Auto vars:     Size  Location     Type
  4877 ;;		None
  4878 ;; Return value:  Size  Location     Type
  4879 ;;                  1    wreg      void 
  4880 ;; Registers used:
  4881 ;;		wreg, status,2, status,0, pclath, cstack
  4882 ;; Tracked objects:
  4883 ;;		On entry : 0/0
  4884 ;;		On exit  : 0/0
  4885 ;;		Unchanged: 0/0
  4886 ;; Data sizes:     COMMON   BANK0   BANK1
  4887 ;;      Params:         0       0       0
  4888 ;;      Locals:         0       0       0
  4889 ;;      Temps:          0       0       0
  4890 ;;      Totals:         0       0       0
  4891 ;;Total ram usage:        0 bytes
  4892 ;; Hardware stack levels used:    1
  4893 ;; Hardware stack levels required when called:    3
  4894 ;; This function calls:
  4895 ;;		_OSCILLATOR_Initialize
  4896 ;;		_PIN_MANAGER_Initialize
  4897 ;; This function is called by:
  4898 ;;		_main
  4899 ;; This function uses a non-reentrant model
  4900 ;;
  4901                           
  4902                           
  4903                           ;psect for function _SYSTEM_Initialize
  4904  05FC                     _SYSTEM_Initialize:	
  4905                           
  4906                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  4907                           
  4908                           ;incstack = 0
  4909                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4910  05FC  2555               	fcall	_PIN_MANAGER_Initialize
  4911                           
  4912                           ;mcc.c: 74: OSCILLATOR_Initialize();
  4913  05FD  25F2               	fcall	_OSCILLATOR_Initialize
  4914  05FE  0008               	return
  4915  05FF                     __end_of_SYSTEM_Initialize:	
  4916                           
  4917                           	psect	text25
  4918  0555                     __ptext25:	
  4919 ;; *************** function _PIN_MANAGER_Initialize *****************
  4920 ;; Defined at:
  4921 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  4922 ;; Parameters:    Size  Location     Type
  4923 ;;		None
  4924 ;; Auto vars:     Size  Location     Type
  4925 ;;		None
  4926 ;; Return value:  Size  Location     Type
  4927 ;;                  1    wreg      void 
  4928 ;; Registers used:
  4929 ;;		wreg, status,2
  4930 ;; Tracked objects:
  4931 ;;		On entry : 0/0
  4932 ;;		On exit  : 0/0
  4933 ;;		Unchanged: 0/0
  4934 ;; Data sizes:     COMMON   BANK0   BANK1
  4935 ;;      Params:         0       0       0
  4936 ;;      Locals:         0       0       0
  4937 ;;      Temps:          0       0       0
  4938 ;;      Totals:         0       0       0
  4939 ;;Total ram usage:        0 bytes
  4940 ;; Hardware stack levels used:    1
  4941 ;; Hardware stack levels required when called:    2
  4942 ;; This function calls:
  4943 ;;		Nothing
  4944 ;; This function is called by:
  4945 ;;		_SYSTEM_Initialize
  4946 ;; This function uses a non-reentrant model
  4947 ;;
  4948                           
  4949                           
  4950                           ;psect for function _PIN_MANAGER_Initialize
  4951  0555                     _PIN_MANAGER_Initialize:	
  4952                           
  4953                           ;pin_manager.c: 51: LATA = 0x0;
  4954                           
  4955                           ;incstack = 0
  4956                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4957  0555  0022               	movlb	2	; select bank2
  4958  0556  018C               	clrf	12	;volatile
  4959                           
  4960                           ;pin_manager.c: 52: LATC = 0x0;
  4961  0557  018E               	clrf	14	;volatile
  4962                           
  4963                           ;pin_manager.c: 55: ANSELA = 0b00000100;
  4964  0558  3004               	movlw	4
  4965  0559  0023               	movlb	3	; select bank3
  4966  055A  008C               	movwf	12	;volatile
  4967                           
  4968                           ;pin_manager.c: 56: ANSELC = 0b00000011;
  4969  055B  3003               	movlw	3
  4970  055C  008E               	movwf	14	;volatile
  4971                           
  4972                           ;pin_manager.c: 59: WPUA = 0x3B;
  4973  055D  303B               	movlw	59
  4974  055E  0024               	movlb	4	; select bank4
  4975  055F  008C               	movwf	12	;volatile
  4976                           
  4977                           ;pin_manager.c: 61: WPUC = 0x1C;
  4978  0560  301C               	movlw	28
  4979  0561  008E               	movwf	14	;volatile
  4980                           
  4981                           ;pin_manager.c: 63: RXDTSEL = 0;
  4982  0562  0022               	movlb	2	; select bank2
  4983  0563  139D               	bcf	29,7	;volatile
  4984                           
  4985                           ;pin_manager.c: 64: TXCKSEL = 0;
  4986  0564  111D               	bcf	29,2	;volatile
  4987                           
  4988                           ;pin_manager.c: 67: TRISC = 0b01100011;
  4989  0565  3063               	movlw	99
  4990  0566  0021               	movlb	1	; select bank1
  4991  0567  008E               	movwf	14	;volatile
  4992                           
  4993                           ;pin_manager.c: 68: TRISA = 0b01011111;
  4994  0568  305F               	movlw	95
  4995  0569  008C               	movwf	12	;volatile
  4996                           
  4997                           ;pin_manager.c: 70: OPTION_REGbits.nWPUEN = 0x0;
  4998  056A  1395               	bcf	21,7	;volatile
  4999                           
  5000                           ;pin_manager.c: 71: APFCON = 0x00;
  5001  056B  0022               	movlb	2	; select bank2
  5002  056C  019D               	clrf	29	;volatile
  5003  056D  0008               	return
  5004  056E                     __end_of_PIN_MANAGER_Initialize:	
  5005                           
  5006                           	psect	text26
  5007  05F2                     __ptext26:	
  5008 ;; *************** function _OSCILLATOR_Initialize *****************
  5009 ;; Defined at:
  5010 ;;		line 78 in file "mcc_generated_files/mcc.c"
  5011 ;; Parameters:    Size  Location     Type
  5012 ;;		None
  5013 ;; Auto vars:     Size  Location     Type
  5014 ;;		None
  5015 ;; Return value:  Size  Location     Type
  5016 ;;                  1    wreg      void 
  5017 ;; Registers used:
  5018 ;;		wreg, status,2
  5019 ;; Tracked objects:
  5020 ;;		On entry : 0/0
  5021 ;;		On exit  : 0/0
  5022 ;;		Unchanged: 0/0
  5023 ;; Data sizes:     COMMON   BANK0   BANK1
  5024 ;;      Params:         0       0       0
  5025 ;;      Locals:         0       0       0
  5026 ;;      Temps:          0       0       0
  5027 ;;      Totals:         0       0       0
  5028 ;;Total ram usage:        0 bytes
  5029 ;; Hardware stack levels used:    1
  5030 ;; Hardware stack levels required when called:    2
  5031 ;; This function calls:
  5032 ;;		Nothing
  5033 ;; This function is called by:
  5034 ;;		_SYSTEM_Initialize
  5035 ;; This function uses a non-reentrant model
  5036 ;;
  5037                           
  5038                           
  5039                           ;psect for function _OSCILLATOR_Initialize
  5040  05F2                     _OSCILLATOR_Initialize:	
  5041                           
  5042                           ;mcc.c: 81: OSCCON = 0x3A;
  5043                           
  5044                           ;incstack = 0
  5045                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  5046  05F2  303A               	movlw	58
  5047  05F3  0021               	movlb	1	; select bank1
  5048  05F4  0099               	movwf	25	;volatile
  5049                           
  5050                           ;mcc.c: 83: OSCSTAT = 0x00;
  5051  05F5  019A               	clrf	26	;volatile
  5052                           
  5053                           ;mcc.c: 85: OSCTUNE = 0x00;
  5054  05F6  0198               	clrf	24	;volatile
  5055  05F7  0008               	return
  5056  05F8                     __end_of_OSCILLATOR_Initialize:	
  5057                           
  5058                           	psect	intentry
  5059  0004                     __pintentry:	
  5060 ;; *************** function _isr *****************
  5061 ;; Defined at:
  5062 ;;		line 142 in file "main.c"
  5063 ;; Parameters:    Size  Location     Type
  5064 ;;		None
  5065 ;; Auto vars:     Size  Location     Type
  5066 ;;		None
  5067 ;; Return value:  Size  Location     Type
  5068 ;;                  1    wreg      void 
  5069 ;; Registers used:
  5070 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5071 ;; Tracked objects:
  5072 ;;		On entry : 0/0
  5073 ;;		On exit  : 0/0
  5074 ;;		Unchanged: 0/0
  5075 ;; Data sizes:     COMMON   BANK0   BANK1
  5076 ;;      Params:         0       0       0
  5077 ;;      Locals:         0       0       0
  5078 ;;      Temps:          2       0       0
  5079 ;;      Totals:         2       0       0
  5080 ;;Total ram usage:        2 bytes
  5081 ;; Hardware stack levels used:    1
  5082 ;; Hardware stack levels required when called:    1
  5083 ;; This function calls:
  5084 ;;		_start_TMR0_ISR
  5085 ;;		_stop_TMR0_ISR
  5086 ;;		i1_start_RX_USART_ISR
  5087 ;; This function is called by:
  5088 ;;		Interrupt level 1
  5089 ;; This function uses a non-reentrant model
  5090 ;;
  5091                           
  5092  0004                     _isr:	
  5093                           
  5094                           ;incstack = 0
  5095  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  5096                           
  5097                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5098  0005  3180               	pagesel	$
  5099  0006  0020               	movlb	0	; select bank0
  5100  0007  087F               	movf	127,w
  5101  0008  00F9               	movwf	??_isr+1
  5102                           
  5103                           ;main.c: 146: if (TMR0IF && TMR0IE) {
  5104  0009  190B               	btfsc	11,2	;volatile
  5105  000A  1E8B               	btfss	11,5	;volatile
  5106  000B  2815               	goto	i1l129
  5107                           
  5108                           ;main.c: 148: TMR0IF = 0;
  5109  000C  110B               	bcf	11,2	;volatile
  5110                           
  5111                           ;main.c: 149: TMR0 = TIMER0_timeout;
  5112  000D  0870               	movf	_TIMER0_timeout,w	;volatile
  5113  000E  0095               	movwf	21	;volatile
  5114                           
  5115                           ;main.c: 152: TIMER0_flag = 1;
  5116  000F  3001               	movlw	1
  5117  0010  00F8               	movwf	??_isr
  5118  0011  0878               	movf	??_isr,w
  5119  0012  00DD               	movwf	_TIMER0_flag	;volatile
  5120                           
  5121                           ;main.c: 157: stop_TMR0_ISR();
  5122  0013  25FF               	fcall	_stop_TMR0_ISR
  5123                           
  5124                           ;main.c: 159: return;
  5125  0014  2851               	goto	i1l130
  5126  0015                     i1l129:	
  5127                           
  5128                           ;main.c: 160: }
  5129                           ;main.c: 164: if (RCIF) {
  5130  0015  1E91               	btfss	17,5	;volatile
  5131  0016  2836               	goto	i1l131
  5132                           
  5133                           ;main.c: 165: stop_TMR0_ISR();
  5134  0017  25FF               	fcall	_stop_TMR0_ISR
  5135                           
  5136                           ;main.c: 168: if (OERR) {
  5137  0018  0023               	movlb	3	; select bank3
  5138  0019  1C9D               	btfss	29,1	;volatile
  5139  001A  2820               	goto	i1l2407
  5140                           
  5141                           ;main.c: 170: CREN = 0;
  5142  001B  121D               	bcf	29,4	;volatile
  5143                           
  5144                           ;main.c: 171: CREN = 1;
  5145  001C  161D               	bsf	29,4	;volatile
  5146                           
  5147                           ;main.c: 172: USART_rx_index = 0;
  5148  001D  0020               	movlb	0	; select bank0
  5149  001E  01DF               	clrf	_USART_rx_index	;volatile
  5150                           
  5151                           ;main.c: 173: return;
  5152  001F  2851               	goto	i1l130
  5153  0020                     i1l2407:	
  5154                           
  5155                           ;main.c: 174: }
  5156                           ;main.c: 177: if (USART_rx_index >= 15) {
  5157  0020  300F               	movlw	15
  5158  0021  0020               	movlb	0	; select bank0
  5159  0022  025F               	subwf	_USART_rx_index,w	;volatile
  5160  0023  1803               	btfsc	3,0
  5161                           
  5162                           ;main.c: 178: USART_rx_index = 0;
  5163  0024  01DF               	clrf	_USART_rx_index	;volatile
  5164                           
  5165                           ;main.c: 179: }
  5166                           ;main.c: 181: USART_rx_data[USART_rx_index++] = RCREG;
  5167  0025  0023               	movlb	3	; select bank3
  5168  0026  0819               	movf	25,w	;volatile
  5169  0027  00F8               	movwf	??_isr
  5170  0028  0020               	movlb	0	; select bank0
  5171  0029  085F               	movf	_USART_rx_index,w
  5172  002A  3E4E               	addlw	(low (_USART_rx_data| 0))& (0+255)
  5173  002B  0086               	movwf	6
  5174  002C  0187               	clrf	7
  5175  002D  0878               	movf	??_isr,w
  5176  002E  0081               	movwf	1
  5177  002F  3001               	movlw	1
  5178  0030  00F8               	movwf	??_isr
  5179  0031  0878               	movf	??_isr,w
  5180  0032  07DF               	addwf	_USART_rx_index,f	;volatile
  5181                           
  5182                           ;main.c: 183: start_TMR0_ISR(98);
  5183  0033  3062               	movlw	98
  5184  0034  25B9               	fcall	_start_TMR0_ISR
  5185                           
  5186                           ;main.c: 185: return;
  5187  0035  2851               	goto	i1l130
  5188  0036                     i1l131:	
  5189                           
  5190                           ;main.c: 186: }
  5191                           ;main.c: 190: if (TXIF && TXIE) {
  5192  0036  1E11               	btfss	17,4	;volatile
  5193  0037  2851               	goto	i1l130
  5194  0038  0021               	movlb	1	; select bank1
  5195  0039  1E11               	btfss	17,4	;volatile
  5196  003A  2851               	goto	i1l130
  5197                           
  5198                           ;main.c: 192: TXREG = USART_tx_data[USART_tx_index++];
  5199  003B  0873               	movf	_USART_tx_index,w
  5200  003C  3EA0               	addlw	(low (_USART_tx_data| 0))& (0+255)
  5201  003D  0086               	movwf	6
  5202  003E  0187               	clrf	7
  5203  003F  0801               	movf	1,w
  5204  0040  0023               	movlb	3	; select bank3
  5205  0041  009A               	movwf	26	;volatile
  5206  0042  3001               	movlw	1
  5207  0043  00F8               	movwf	??_isr
  5208  0044  0878               	movf	??_isr,w
  5209  0045  07F3               	addwf	_USART_tx_index,f	;volatile
  5210                           
  5211                           ;main.c: 194: if (USART_tx_index >= USART_tx_length) {
  5212  0046  0874               	movf	_USART_tx_length,w	;volatile
  5213  0047  0273               	subwf	_USART_tx_index,w	;volatile
  5214  0048  1C03               	skipc
  5215  0049  2851               	goto	i1l130
  5216                           
  5217                           ;main.c: 195: TXIE = 0;
  5218  004A  0021               	movlb	1	; select bank1
  5219  004B  1211               	bcf	17,4	;volatile
  5220                           
  5221                           ;main.c: 196: USART_tx_flag = 0;
  5222  004C  01F2               	clrf	_USART_tx_flag	;volatile
  5223                           
  5224                           ;main.c: 200: _delay((unsigned long)((3)*(500000/4000.0)));
  5225  004D  307D               	movlw	125
  5226  004E                     u177_27:	
  5227  004E  0B89               	decfsz	9,f
  5228  004F  284E               	goto	u177_27
  5229                           
  5230                           ;main.c: 202: start_RX_USART_ISR();
  5231  0050  25A8               	fcall	i1_start_RX_USART_ISR
  5232  0051                     i1l130:	
  5233                           ;main.c: 203: }
  5234                           ;main.c: 204: return;
  5235                           
  5236  0051  0879               	movf	??_isr+1,w
  5237  0052  0020               	movlb	0	; select bank0
  5238  0053  00FF               	movwf	127
  5239  0054  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  5240  0055  0009               	retfie
  5241  0056                     __end_of_isr:	
  5242                           
  5243                           	psect	text28
  5244  05A8                     __ptext28:	
  5245 ;; *************** function i1_start_RX_USART_ISR *****************
  5246 ;; Defined at:
  5247 ;;		line 83 in file "USART1823.c"
  5248 ;; Parameters:    Size  Location     Type
  5249 ;;		None
  5250 ;; Auto vars:     Size  Location     Type
  5251 ;;		None
  5252 ;; Return value:  Size  Location     Type
  5253 ;;                  1    wreg      void 
  5254 ;; Registers used:
  5255 ;;		wreg, status,2
  5256 ;; Tracked objects:
  5257 ;;		On entry : 0/0
  5258 ;;		On exit  : 0/0
  5259 ;;		Unchanged: 0/0
  5260 ;; Data sizes:     COMMON   BANK0   BANK1
  5261 ;;      Params:         0       0       0
  5262 ;;      Locals:         0       0       0
  5263 ;;      Temps:          0       0       0
  5264 ;;      Totals:         0       0       0
  5265 ;;Total ram usage:        0 bytes
  5266 ;; Hardware stack levels used:    1
  5267 ;; This function calls:
  5268 ;;		Nothing
  5269 ;; This function is called by:
  5270 ;;		_isr
  5271 ;; This function uses a non-reentrant model
  5272 ;;
  5273                           
  5274                           
  5275                           ;psect for function i1_start_RX_USART_ISR
  5276  05A8                     i1_start_RX_USART_ISR:	
  5277                           
  5278                           ;USART1823.c: 86: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  5279                           
  5280                           ;incstack = 0
  5281                           ; Regs used in i1_start_RX_USART_ISR: [wreg+status,2]
  5282  05A8  0023               	movlb	3	; select bank3
  5283  05A9  151E               	bsf	30,2	;volatile
  5284  05AA  159F               	bsf	31,3	;volatile
  5285  05AB  019C               	clrf	28	;volatile
  5286  05AC  300C               	movlw	12
  5287  05AD  009B               	movwf	27	;volatile
  5288                           
  5289                           ;USART1823.c: 88: SYNC = 0;
  5290  05AE  121E               	bcf	30,4	;volatile
  5291                           
  5292                           ;USART1823.c: 89: SPEN = 1;
  5293  05AF  179D               	bsf	29,7	;volatile
  5294                           
  5295                           ;USART1823.c: 90: CREN = 1;
  5296  05B0  161D               	bsf	29,4	;volatile
  5297                           
  5298                           ;USART1823.c: 92: USART_rx_flag = 0;
  5299  05B1  0020               	movlb	0	; select bank0
  5300  05B2  01DE               	clrf	_USART_rx_flag	;volatile
  5301                           
  5302                           ;USART1823.c: 93: USART_rx_index = 0;
  5303  05B3  01DF               	clrf	_USART_rx_index	;volatile
  5304                           
  5305                           ;USART1823.c: 95: RCIE = 1;
  5306  05B4  0021               	movlb	1	; select bank1
  5307  05B5  1691               	bsf	17,5	;volatile
  5308                           
  5309                           ;USART1823.c: 96: PEIE = 1;
  5310  05B6  170B               	bsf	11,6	;volatile
  5311                           
  5312                           ;USART1823.c: 97: GIE = 1;
  5313  05B7  178B               	bsf	11,7	;volatile
  5314  05B8  0008               	return
  5315  05B9                     __end_ofi1_start_RX_USART_ISR:	
  5316                           
  5317                           	psect	text29
  5318  05FF                     __ptext29:	
  5319 ;; *************** function _stop_TMR0_ISR *****************
  5320 ;; Defined at:
  5321 ;;		line 44 in file "TMR0.c"
  5322 ;; Parameters:    Size  Location     Type
  5323 ;;		None
  5324 ;; Auto vars:     Size  Location     Type
  5325 ;;		None
  5326 ;; Return value:  Size  Location     Type
  5327 ;;                  1    wreg      void 
  5328 ;; Registers used:
  5329 ;;		None
  5330 ;; Tracked objects:
  5331 ;;		On entry : 0/0
  5332 ;;		On exit  : 0/0
  5333 ;;		Unchanged: 0/0
  5334 ;; Data sizes:     COMMON   BANK0   BANK1
  5335 ;;      Params:         0       0       0
  5336 ;;      Locals:         0       0       0
  5337 ;;      Temps:          0       0       0
  5338 ;;      Totals:         0       0       0
  5339 ;;Total ram usage:        0 bytes
  5340 ;; Hardware stack levels used:    1
  5341 ;; This function calls:
  5342 ;;		Nothing
  5343 ;; This function is called by:
  5344 ;;		_isr
  5345 ;; This function uses a non-reentrant model
  5346 ;;
  5347                           
  5348                           
  5349                           ;psect for function _stop_TMR0_ISR
  5350  05FF                     _stop_TMR0_ISR:	
  5351                           
  5352                           ;TMR0.c: 47: TMR0IE = 0;
  5353                           
  5354                           ;incstack = 0
  5355                           ; Regs used in _stop_TMR0_ISR: []
  5356  05FF  128B               	bcf	11,5	;volatile
  5357                           
  5358                           ;TMR0.c: 48: TMR0IF = 0;
  5359  0600  110B               	bcf	11,2	;volatile
  5360  0601  0008               	return
  5361  0602                     __end_of_stop_TMR0_ISR:	
  5362                           
  5363                           	psect	text30
  5364  05B9                     __ptext30:	
  5365 ;; *************** function _start_TMR0_ISR *****************
  5366 ;; Defined at:
  5367 ;;		line 30 in file "TMR0.c"
  5368 ;; Parameters:    Size  Location     Type
  5369 ;;  val             1    wreg     unsigned char 
  5370 ;; Auto vars:     Size  Location     Type
  5371 ;;  val             1    2[COMMON] unsigned char 
  5372 ;; Return value:  Size  Location     Type
  5373 ;;                  1    wreg      void 
  5374 ;; Registers used:
  5375 ;;		wreg, status,2
  5376 ;; Tracked objects:
  5377 ;;		On entry : 0/0
  5378 ;;		On exit  : 0/0
  5379 ;;		Unchanged: 0/0
  5380 ;; Data sizes:     COMMON   BANK0   BANK1
  5381 ;;      Params:         0       0       0
  5382 ;;      Locals:         1       0       0
  5383 ;;      Temps:          2       0       0
  5384 ;;      Totals:         3       0       0
  5385 ;;Total ram usage:        3 bytes
  5386 ;; Hardware stack levels used:    1
  5387 ;; This function calls:
  5388 ;;		Nothing
  5389 ;; This function is called by:
  5390 ;;		_isr
  5391 ;; This function uses a non-reentrant model
  5392 ;;
  5393                           
  5394                           
  5395                           ;psect for function _start_TMR0_ISR
  5396  05B9                     _start_TMR0_ISR:	
  5397                           
  5398                           ;incstack = 0
  5399                           ; Regs used in _start_TMR0_ISR: [wreg+status,2]
  5400                           ;start_TMR0_ISR@val stored from wreg
  5401  05B9  00F7               	movwf	start_TMR0_ISR@val
  5402                           
  5403                           ;TMR0.c: 32: TIMER0_timeout = val;
  5404  05BA  0877               	movf	start_TMR0_ISR@val,w
  5405  05BB  00F5               	movwf	??_start_TMR0_ISR
  5406  05BC  01F6               	clrf	??_start_TMR0_ISR+1
  5407  05BD  0875               	movf	??_start_TMR0_ISR,w
  5408  05BE  00F0               	movwf	_TIMER0_timeout	;volatile
  5409  05BF  0876               	movf	??_start_TMR0_ISR+1,w
  5410  05C0  00F1               	movwf	_TIMER0_timeout+1	;volatile
  5411                           
  5412                           ;TMR0.c: 33: TIMER0_flag = 0;
  5413  05C1  0020               	movlb	0	; select bank0
  5414  05C2  01DD               	clrf	_TIMER0_flag	;volatile
  5415                           
  5416                           ;TMR0.c: 36: TMR0 = TIMER0_timeout;
  5417  05C3  0870               	movf	_TIMER0_timeout,w	;volatile
  5418  05C4  0095               	movwf	21	;volatile
  5419                           
  5420                           ;TMR0.c: 39: TMR0IF = 0;
  5421  05C5  110B               	bcf	11,2	;volatile
  5422                           
  5423                           ;TMR0.c: 40: TMR0IE = 1;
  5424  05C6  168B               	bsf	11,5	;volatile
  5425                           
  5426                           ;TMR0.c: 41: GIE = 1;
  5427  05C7  178B               	bsf	11,7	;volatile
  5428  05C8  0008               	return
  5429  05C9                     __end_of_start_TMR0_ISR:	
  5430  007E                     btemp	set	126	;btemp
  5431  007E                     int$flags	set	126
  5432  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    19
    Data        0
    BSS         49
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     46      75
    BANK1            32      0      15

Pointer List with Targets:

    measure@Q	PTR short  size(1) Largest target is 2
		 -> sweep@Q(BANK0[2]), 

    measure@I	PTR short  size(1) Largest target is 2
		 -> sweep@I(BANK0[2]), 

    calculate_checksum@data	PTR unsigned char  size(1) Largest target is 7
		 -> sweep@aux(BANK0[7]), 

    lputs_ISR@data	PTR unsigned char  size(1) Largest target is 13
		 -> sweep@aux(BANK0[7]), calibrate_reader@aux(COMMON[8]), measure_Impedance_SE@aux(BANK0[8]), measure_Offset@aux(BANK0[5]), 
		 -> measure_Impedance_no_offset@aux(BANK0[13]), measure_Impedance@aux(BANK0[13]), read_ADC_channels@aux(BANK0[7]), mess_rec(BANK0[10]), 

    setFreq@asic	PTR struct . size(1) Largest target is 2
		 -> sweep@asic(BANK0[2]), 

    setGain@asic	PTR struct . size(1) Largest target is 2
		 -> sweep@asic(BANK0[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_start_TMR0_ISR

Critical Paths under _main in BANK0

    _main->_mess_handler
    _mess_handler->_sweep
    _sweep->_measure
    _measure->_ADC_5
    _read_ADC_channels->_ADC_2
    _read_ADC_channels->_ADC_4
    _read_ADC_channels->_ADC_5
    _measure_Offset->_ADC_2
    _measure_Offset->_ADC_4
    _measure_Impedance_no_offset->_ADC_2
    _measure_Impedance_no_offset->_ADC_4
    _measure_Impedance_SE->_ADC_5
    _measure_Impedance->_ADC_2
    _measure_Impedance->_ADC_4
    _config_ASIC->_BIO_config
    _config_ASIC->_lputs_ISR

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   27021
                                             44 BANK0      2     2      0
                  _SYSTEM_Initialize
                       _mess_handler
                          _setup_ADC
                         _setup_TMR0
                          _start_RCM
                 _start_RX_USART_ISR
                 _start_TX_USART_ISR
 ---------------------------------------------------------------------------------
 (1) _start_TX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RCM                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_TMR0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_ADC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _mess_handler                                         1     1      0   26922
                                             43 BANK0      1     1      0
                        _config_ASIC
                          _lputs_ISR
                  _measure_Impedance
               _measure_Impedance_SE
        _measure_Impedance_no_offset
                     _measure_Offset
                  _read_ADC_channels
                              _sweep
 ---------------------------------------------------------------------------------
 (2) _sweep                                               21    21      0    6611
                                             22 BANK0     21    21      0
                 _calculate_checksum
                          _lputs_ISR
                            _measure
                            _setFreq
                            _setGain
 ---------------------------------------------------------------------------------
 (3) _setGain                                              4     3      1     846
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) _setFreq                                              4     3      1     408
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) _measure                                             16    13      3    2416
                                              6 BANK0     16    13      3
                              _ADC_5
                         _BIO_config
 ---------------------------------------------------------------------------------
 (3) _calculate_checksum                                   6     5      1     293
                                              0 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (2) _read_ADC_channels                                   14    14      0    1900
                                              6 BANK0     14    14      0
                              _ADC_2
                              _ADC_4
                              _ADC_5
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (2) _measure_Offset                                      12    12      0    3237
                                              6 BANK0     12    12      0
                              _ADC_2
                              _ADC_4
                         _BIO_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (2) _measure_Impedance_no_offset                         22    22      0    3614
                                              6 BANK0     20    20      0
                              _ADC_2
                              _ADC_4
                         _BIO_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (2) _measure_Impedance_SE                                14    14      0    3469
                                              6 BANK0     13    13      0
                              _ADC_5
                         _BIO_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (4) _ADC_5                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _measure_Impedance                                   22    22      0    3926
                                              6 BANK0     20    20      0
                              _ADC_2
                              _ADC_4
                         _BIO_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (3) _ADC_4                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _ADC_2                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _config_ASIC                                          3     3      0    2839
                                              5 BANK0      3     3      0
                         _BIO_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (3) _lputs_ISR                                            5     4      1    1326
                                              0 BANK0      5     4      1
                     _close_RX_USART
 ---------------------------------------------------------------------------------
 (4) _close_RX_USART                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _BIO_config                                           5     3      2    1442
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  2     2      0      22
                                              3 COMMON     2     2      0
                     _start_TMR0_ISR
                      _stop_TMR0_ISR
               i1_start_RX_USART_ISR
 ---------------------------------------------------------------------------------
 (6) i1_start_RX_USART_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _stop_TMR0_ISR                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _start_TMR0_ISR                                       3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _mess_handler
     _config_ASIC
       _BIO_config
       _lputs_ISR
         _close_RX_USART
     _lputs_ISR
       _close_RX_USART
     _measure_Impedance
       _ADC_2
       _ADC_4
       _BIO_config
       _lputs_ISR
         _close_RX_USART
     _measure_Impedance_SE
       _ADC_5
       _BIO_config
       _lputs_ISR
         _close_RX_USART
     _measure_Impedance_no_offset
       _ADC_2
       _ADC_4
       _BIO_config
       _lputs_ISR
         _close_RX_USART
     _measure_Offset
       _ADC_2
       _ADC_4
       _BIO_config
       _lputs_ISR
         _close_RX_USART
     _read_ADC_channels
       _ADC_2
       _ADC_4
       _ADC_5
       _lputs_ISR
         _close_RX_USART
     _sweep
       _calculate_checksum
       _lputs_ISR
         _close_RX_USART
       _measure
         _ADC_5
         _BIO_config
       _setFreq
       _setGain
   _setup_ADC
   _setup_TMR0
   _start_RCM
   _start_RX_USART_ISR
   _start_TX_USART_ISR

 _isr (ROOT)
   _start_TMR0_ISR
   _stop_TMR0_ISR
   i1_start_RX_USART_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      64       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2E      4B       6       93.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       F       8       46.9%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      64       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Mar 31 15:20:47 2017

                         __CFG_CP$OFF 0000                         _USART_rx_data 004E  
                       _USART_rx_flag 005E                         _USART_tx_data 00A0  
                       _USART_tx_flag 0072                                   l117 033F  
                                 l416 0102                                   l450 04D9  
                                 l444 04FC                                   l364 0453  
                                 l438 051F                                   _GIE 005F  
                                 _RA5 0065                                   _PS0 04A8  
                                 _PS1 04A9                                   _PS2 04AA  
                        __CFG_CPD$OFF 0000                                   _PSA 04AB  
                                 _isr 0004                          __CFG_BORV$HI 0000  
                                 wreg 0009                          __CFG_IESO$ON 0000  
                      _USART_rx_index 005F                          __CFG_LVP$OFF 0000  
                      _USART_tx_index 0073                                  l3021 034B  
                                l3035 0354                                  l3037 0369  
                                l2601 00BA                                  l2533 045A  
                                l2471 0495                                  l2535 0471  
                                l2633 011E                                  l2617 00F1  
                                l2713 0176                                  l2571 0540  
                                l2627 0110                                  l2715 017A  
                                l2469 0491                                  l2573 0553  
                                l2683 013D                                  l2699 015F  
                                l2981 042C                                  l2991 0436  
                                l2983 042E                                  l2985 0430  
                                l2977 0422                                  l2987 0432  
                                l2979 042A                                  l2995 0438  
                                l2989 0434                                  ?_isr 0075  
                                _ADGO 04E9                          __CFG_WDTE$ON 0000  
                                _BRGH 0CF2                                  _CREN 0CEC  
                                u1235 0498                                  _LATA 010C  
                                u1415 052A                                  _LATC 010E  
                                u1265 04E4                                  u1435 0507  
                                u1707 0304                                  u1475 00FB  
                                u1717 026C                                  u1485 010C  
                                u1727 028A                                  u1495 011A  
                                u1647 0338                                  u1737 02A7  
                                u1657 0077                                  u1585 017E  
                                u1747 01D6                                  u1667 008D  
                                u1757 0202                                  u1677 00C4  
                                u1767 022D                                  u1687 0382  
                                u1697 02D9                                  _PEIE 005E  
                                _RCIE 048D                                  _RCIF 008D  
                                _OERR 0CE9                                  _SCKP 0CFC  
                                _TMR0 0015                                  _SPEN 0CEF  
                                _TXIE 048C                                  _TXEN 0CF5  
                                _TXIF 008C                                  _SYNC 0CF4  
                                _WPUA 020C                                  _WPUC 020E  
              __size_of_stop_TMR0_ISR 0003                     _read_ADC_channels 03E8  
                        __CFG_WRT$OFF 0000                                  _main 032C  
                                fsr0h 0005                                  fsr1h 0007  
                                indf0 0000                                  fsr0l 0004  
                                indf1 0001                                  fsr1l 0006  
                                btemp 007E                    ?_read_ADC_channels 0075  
         __size_of_calculate_checksum 0019                                  start 0056  
                       __CFG_MCLRE$ON 0000            measure_Impedance_SE@value1 002F  
                 ??_read_ADC_channels 0026                                 ??_isr 0078  
      __size_of_OSCILLATOR_Initialize 0006                       _USART_tx_length 0074  
       __end_of_OSCILLATOR_Initialize 05F8                                 ?_main 0075  
                               _ADC_2 0519                                 _ADC_4 04F6  
                               _ADC_5 04D3                                 _BRG16 0CFB  
                               i1l130 0051                                 i1l131 0036  
                               i1l129 0015                   __size_of_BIO_config 002B  
                               _RCREG 0199                                 _PORTC 000E  
                               _TRISA 008C                        _start_TMR0_ISR 05B9  
                               _TRISC 008E                                 _TXREG 019A  
                      __CFG_FCMEN$OFF 0000                                 _gains 058F  
                     __end_of_measure 0120                                 _freqs 0584  
           __end_of_read_ADC_channels 0421                       __end_of_setGain 03E8  
        ?_measure_Impedance_no_offset 0075                                 _sweep 0120  
                               main@i 004D                       __end_of_setFreq 04D3  
       __size_ofi1_start_RX_USART_ISR 0011                        __CFG_BOREN$OFF 0000  
                               status 0003                                 wtemp0 007E  
                     __initialization 0057                          __end_of_main 036B  
                       _stop_TMR0_ISR 05FF                      ??_close_RX_USART 0020  
              __end_of_start_TMR0_ISR 05C9                                ??_main 004C  
                              ?_ADC_2 0020                                ?_ADC_4 0020  
                              ?_ADC_5 0020          __end_of_measure_Impedance_SE 02C1  
                      _TIMER0_timeout 0070                        __CFG_PLLEN$OFF 0000  
                              _ADCON0 009D                                _ADCON1 009E  
                         measure@aux1 0034                           measure@aux2 0032  
                         measure@asic 0027                                _ADRESH 009C  
                              _ADRESL 009B                                _APFCON 011D  
                              _ANSELA 018C                                _ANSELC 018E  
                              ?_sweep 0075                                i1l2407 0020  
                              u177_27 004E                                _OSCCON 0099  
       ??_measure_Impedance_no_offset 0026                                _TMR0IE 005D  
                              _TMR0IF 005A                                _TMR0CS 04AD  
                              _SPBRGH 019C                                _SPBRGL 019B  
                      __CFG_PWRTE$OFF 0000                  __size_of_config_ASIC 0016  
                     config_ASIC@asic 0026                        __CFG_STVREN$ON 0000  
                      ?_stop_TMR0_ISR 0075                       ?_start_TMR0_ISR 0075  
                measure_Impedance@aux 0027                             ??_measure 0029  
         __size_of_start_RX_USART_ISR 0011                             ??_setGain 0021  
                           ??_setFreq 0021                                sweep@I 0043  
                              sweep@Q 0045                                sweep@i 0041  
          __size_of_read_ADC_channels 0039                         ?_mess_handler 0075  
             __size_of_measure_Offset 003F                     _SYSTEM_Initialize 05FC  
             __end_of__initialization 0068                          ??_BIO_config 0022  
                       __end_of_ADC_2 053C                         __end_of_ADC_4 0519  
                  ?_SYSTEM_Initialize 0075                         __end_of_ADC_5 04F6  
                      __pcstackCOMMON 0075                   ??_SYSTEM_Initialize 0020  
                       __end_of_gains 0597                         __end_of_freqs 058F  
__size_of_measure_Impedance_no_offset 006B                         __end_of_sweep 01BF  
                             ??_ADC_2 0022                               ??_ADC_4 0022  
                             ??_ADC_5 0022                        _OPTION_REGbits 0095  
                  __end_of_BIO_config 04AA           __size_of_start_TX_USART_ISR 000F  
                         setGain@asic 0023                        ??_mess_handler 004B  
           __end_of_SYSTEM_Initialize 05FF                               ??_sweep 0036  
                          __pbssBANK0 004E                            __pbssBANK1 00A0  
                _measure_Impedance_SE 0255                           setFreq@asic 0022  
                          __pmaintext 032C                       ??_stop_TMR0_ISR 0075  
                read_ADC_channels@aux 0027                            __pintentry 0004  
                        measure@value 0030                  measure_Offset@value1 002C  
                measure_Offset@value2 002E                               _CLKRCON 039A  
                  __size_of_lputs_ISR 002B                       lputs_ISR@length 0020  
                   setFreq@freq_index 0020                    __size_of_setup_ADC 0006  
                             _OSCSTAT 009A                               _OSCTUNE 0098  
                  __size_of_start_RCM 0004                               _RXDTSEL 08EF  
                             _TXCKSEL 08EA            __end_of_calculate_checksum 0555  
               ?_measure_Impedance_SE 0075          __end_ofi1_start_RX_USART_ISR 05B9  
                   measure_Offset@aux 0027                               __ptext1 05C9  
                             __ptext2 0597                               __ptext3 05F8  
                             __ptext4 05D8                               __ptext5 05EC  
                             __ptext6 0421                               __ptext7 0120  
                             __ptext8 03AA                               __ptext9 04AA  
                             _measure 006B                 _OSCILLATOR_Initialize 05F2  
                        __size_of_isr 0052                               _setGain 03AA  
                             _setFreq 04AA              ??_PIN_MANAGER_Initialize 0020  
                   setGain@gain_index 0020            __size_of_SYSTEM_Initialize 0003  
                             clrloop0 05E7                         _mess_rec_size 0060  
                end_of_initialization 0068                        _measure_Offset 036B  
               measure_Impedance@asic 0038                     __end_of_lputs_ISR 047F  
                   __end_of_setup_ADC 05F2                      ??_start_TMR0_ISR 0075  
                   __end_of_start_RCM 05FC                  __end_of_mess_handler 0454  
                        __pstringtext 0584                            _setup_TMR0 05D8  
                    __CFG_FOSC$INTOSC 0000                __end_of_measure_Offset 03AA  
              ??_measure_Impedance_SE 0026                         ??_config_ASIC 0025  
                   _measure_Impedance 01BF                    ?_measure_Impedance 0075  
                      ADC_2@ADC_value 0024            __end_of_start_RX_USART_ISR 05A8  
              ?_OSCILLATOR_Initialize 0075     measure_Impedance_no_offset@value1 0034  
   measure_Impedance_no_offset@value2 0036                   start_initialization 0057  
                 ??_measure_Impedance 0026       __size_of_PIN_MANAGER_Initialize 0019  
                         __end_of_isr 0056                       ?_measure_Offset 0075  
 __end_of_measure_Impedance_no_offset 032C           _measure_Impedance_no_offset 02C1  
            measure_Impedance_SE@asic 0031               __size_of_close_RX_USART 0007  
                i1_start_RX_USART_ISR 05A8                        ADC_4@ADC_value 0024  
           __end_of_measure_Impedance 0255                        ADC_5@ADC_value 0024  
                 __end_of_config_ASIC 0584                           ?_setup_TMR0 0075  
          __end_of_start_TX_USART_ISR 05D8                           __pbssCOMMON 0070  
                           ___latbits 0000                         __pcstackBANK0 0020  
     measure_Impedance_no_offset@asic 0038                       sweep@gain_index 0047  
               ?i1_start_RX_USART_ISR 0075                            setGain@aux 0022  
               __size_of_mess_handler 0033                _PIN_MANAGER_Initialize 0555  
                          setFreq@aux 0023                 __end_of_stop_TMR0_ISR 0602  
                  _calculate_checksum 053C                        __size_of_ADC_2 0023  
                      __size_of_ADC_4 0023                        __size_of_ADC_5 0023  
             read_ADC_channels@value1 002E               read_ADC_channels@value2 0030  
             read_ADC_channels@value3 0032                   ?_calculate_checksum 0020  
                            ?_measure 0026                              ?_setGain 0020  
                            ?_setFreq 0020                         measure@offset 002D  
                     sweep@freq_index 0040                          _mess_handler 0421  
                      __size_of_sweep 009F                   __size_of_setup_TMR0 0007  
                         _config_ASIC 056E                  ??_calculate_checksum 0021  
                           clear_ram0 05E6                            lputs_ISR@i 0023  
          __size_of_measure_Impedance 0096                             _lputs_ISR 0454  
                           _setup_ADC 05EC                             _start_RCM 05F8  
              ??i1_start_RX_USART_ISR 0075                        _close_RX_USART 05DF  
             measure_Impedance@value1 0034               measure_Impedance@value2 0036  
             measure_Impedance_SE@aux 0027                            sweep@check 0038  
                          sweep@count 0042                            ?_lputs_ISR 0020  
             calculate_checksum@check 0024                            ?_setup_ADC 0075  
             ??_OSCILLATOR_Initialize 0020                     start_TMR0_ISR@val 0077  
                          ?_start_RCM 0075        measure_Impedance_no_offset@aux 0027  
                    ??_measure_Offset 0026                __end_of_close_RX_USART 05E6  
                    __size_of_measure 00B5                        BIO_config@conf 0020  
                    __size_of_setGain 003E                      __size_of_setFreq 0029  
                  measure_Offset@asic 0030                              __ptext10 006B  
                            __ptext11 053C                              __ptext20 056E  
                            __ptext12 03E8                              __ptext21 0454  
                            __ptext13 036B                              __ptext30 05B9  
                            __ptext22 05DF                              __ptext14 02C1  
                            __ptext23 047F                              __ptext15 0255  
                            __ptext24 05FC                              __ptext16 04D3  
                            __ptext25 0555                              __ptext17 01BF  
                            __ptext26 05F2                              __ptext18 04F6  
                            __ptext19 0519                              __ptext28 05A8  
                            __ptext29 05FF                         lputs_ISR@data 0024  
                  _start_RX_USART_ISR 0597                            _BIO_config 047F  
                       __size_of_main 003F                              _mess_rec 0061  
       __size_of_measure_Impedance_SE 006C                   ?_start_RX_USART_ISR 0075  
                            int$flags 007E                          ??_setup_TMR0 0020  
                         _TIMER0_flag 005D                  ??_start_RX_USART_ISR 0020  
                            measure@I 002F               __size_of_start_TMR0_ISR 0010  
                            measure@Q 0026                       ?_close_RX_USART 0075  
                           sweep@asic 0049                calculate_checksum@data 0023  
                            intlevel1 0000                    _start_TX_USART_ISR 05C9  
                       BIO_config@out 0024               ?_PIN_MANAGER_Initialize 0075  
                   __CFG_CLKOUTEN$OFF 0000                    __end_of_setup_TMR0 05DF  
                 ?_start_TX_USART_ISR 0075                           ??_lputs_ISR 0021  
                         ??_setup_ADC 0020                              sweep@aux 0039  
                            sweep@ret 0048                 calculate_checksum@num 0020  
                         ??_start_RCM 0020                  ??_start_TX_USART_ISR 0020  
                         BIO_config@i 0023        __end_of_PIN_MANAGER_Initialize 056E  
                         ?_BIO_config 0020                   calculate_checksum@i 0025  
                        ?_config_ASIC 0075  
