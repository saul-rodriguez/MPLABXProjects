

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Mar 14 17:04:37 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16LF1823
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	psect	text17,local,class=CODE,merge=1,delta=2
    28                           	psect	text18,local,class=CODE,merge=1,delta=2
    29                           	psect	text19,local,class=CODE,merge=1,delta=2
    30                           	psect	text20,local,class=CODE,merge=1,delta=2
    31                           	psect	text21,local,class=CODE,merge=1,delta=2
    32                           	psect	text22,local,class=CODE,merge=1,delta=2
    33                           	psect	text23,local,class=CODE,merge=1,delta=2
    34                           	psect	intentry,global,class=CODE,delta=2
    35                           	psect	text25,local,class=CODE,merge=1,delta=2
    36                           	psect	text26,local,class=CODE,merge=1,delta=2
    37                           	psect	text27,local,class=CODE,merge=1,delta=2
    38                           	dabs	1,0x7E,2
    39  0000                     
    40                           ; Version 1.40
    41                           ; Generated 01/12/2016 GMT
    42                           ; 
    43                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC16LF1823 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     	;# 
    75  0001                     	;# 
    76  0002                     	;# 
    77  0003                     	;# 
    78  0004                     	;# 
    79  0005                     	;# 
    80  0006                     	;# 
    81  0007                     	;# 
    82  0008                     	;# 
    83  0009                     	;# 
    84  000A                     	;# 
    85  000B                     	;# 
    86  000C                     	;# 
    87  000E                     	;# 
    88  0011                     	;# 
    89  0012                     	;# 
    90  0015                     	;# 
    91  0016                     	;# 
    92  0016                     	;# 
    93  0017                     	;# 
    94  0018                     	;# 
    95  0019                     	;# 
    96  001A                     	;# 
    97  001B                     	;# 
    98  001C                     	;# 
    99  001E                     	;# 
   100  001F                     	;# 
   101  008C                     	;# 
   102  008E                     	;# 
   103  0091                     	;# 
   104  0092                     	;# 
   105  0095                     	;# 
   106  0096                     	;# 
   107  0097                     	;# 
   108  0098                     	;# 
   109  0099                     	;# 
   110  009A                     	;# 
   111  009B                     	;# 
   112  009B                     	;# 
   113  009C                     	;# 
   114  009D                     	;# 
   115  009E                     	;# 
   116  010C                     	;# 
   117  010E                     	;# 
   118  0111                     	;# 
   119  0112                     	;# 
   120  0113                     	;# 
   121  0114                     	;# 
   122  0115                     	;# 
   123  0116                     	;# 
   124  0117                     	;# 
   125  0118                     	;# 
   126  0119                     	;# 
   127  011A                     	;# 
   128  011B                     	;# 
   129  011D                     	;# 
   130  011D                     	;# 
   131  018C                     	;# 
   132  018E                     	;# 
   133  0191                     	;# 
   134  0191                     	;# 
   135  0192                     	;# 
   136  0193                     	;# 
   137  0193                     	;# 
   138  0193                     	;# 
   139  0194                     	;# 
   140  0195                     	;# 
   141  0196                     	;# 
   142  0199                     	;# 
   143  019A                     	;# 
   144  019B                     	;# 
   145  019B                     	;# 
   146  019B                     	;# 
   147  019B                     	;# 
   148  019C                     	;# 
   149  019C                     	;# 
   150  019D                     	;# 
   151  019E                     	;# 
   152  019F                     	;# 
   153  020C                     	;# 
   154  020E                     	;# 
   155  0211                     	;# 
   156  0211                     	;# 
   157  0212                     	;# 
   158  0212                     	;# 
   159  0213                     	;# 
   160  0213                     	;# 
   161  0214                     	;# 
   162  0214                     	;# 
   163  0215                     	;# 
   164  0215                     	;# 
   165  0215                     	;# 
   166  0216                     	;# 
   167  0216                     	;# 
   168  0217                     	;# 
   169  0217                     	;# 
   170  0291                     	;# 
   171  0291                     	;# 
   172  0292                     	;# 
   173  0293                     	;# 
   174  0294                     	;# 
   175  0295                     	;# 
   176  0295                     	;# 
   177  0296                     	;# 
   178  0391                     	;# 
   179  0392                     	;# 
   180  0393                     	;# 
   181  039A                     	;# 
   182  039C                     	;# 
   183  039D                     	;# 
   184  039E                     	;# 
   185  039F                     	;# 
   186  0FE4                     	;# 
   187  0FE5                     	;# 
   188  0FE6                     	;# 
   189  0FE7                     	;# 
   190  0FE8                     	;# 
   191  0FE9                     	;# 
   192  0FEA                     	;# 
   193  0FEB                     	;# 
   194  0FED                     	;# 
   195  0FEE                     	;# 
   196  0FEF                     	;# 
   197  0000                     	;# 
   198  0001                     	;# 
   199  0002                     	;# 
   200  0003                     	;# 
   201  0004                     	;# 
   202  0005                     	;# 
   203  0006                     	;# 
   204  0007                     	;# 
   205  0008                     	;# 
   206  0009                     	;# 
   207  000A                     	;# 
   208  000B                     	;# 
   209  000C                     	;# 
   210  000E                     	;# 
   211  0011                     	;# 
   212  0012                     	;# 
   213  0015                     	;# 
   214  0016                     	;# 
   215  0016                     	;# 
   216  0017                     	;# 
   217  0018                     	;# 
   218  0019                     	;# 
   219  001A                     	;# 
   220  001B                     	;# 
   221  001C                     	;# 
   222  001E                     	;# 
   223  001F                     	;# 
   224  008C                     	;# 
   225  008E                     	;# 
   226  0091                     	;# 
   227  0092                     	;# 
   228  0095                     	;# 
   229  0096                     	;# 
   230  0097                     	;# 
   231  0098                     	;# 
   232  0099                     	;# 
   233  009A                     	;# 
   234  009B                     	;# 
   235  009B                     	;# 
   236  009C                     	;# 
   237  009D                     	;# 
   238  009E                     	;# 
   239  010C                     	;# 
   240  010E                     	;# 
   241  0111                     	;# 
   242  0112                     	;# 
   243  0113                     	;# 
   244  0114                     	;# 
   245  0115                     	;# 
   246  0116                     	;# 
   247  0117                     	;# 
   248  0118                     	;# 
   249  0119                     	;# 
   250  011A                     	;# 
   251  011B                     	;# 
   252  011D                     	;# 
   253  011D                     	;# 
   254  018C                     	;# 
   255  018E                     	;# 
   256  0191                     	;# 
   257  0191                     	;# 
   258  0192                     	;# 
   259  0193                     	;# 
   260  0193                     	;# 
   261  0193                     	;# 
   262  0194                     	;# 
   263  0195                     	;# 
   264  0196                     	;# 
   265  0199                     	;# 
   266  019A                     	;# 
   267  019B                     	;# 
   268  019B                     	;# 
   269  019B                     	;# 
   270  019B                     	;# 
   271  019C                     	;# 
   272  019C                     	;# 
   273  019D                     	;# 
   274  019E                     	;# 
   275  019F                     	;# 
   276  020C                     	;# 
   277  020E                     	;# 
   278  0211                     	;# 
   279  0211                     	;# 
   280  0212                     	;# 
   281  0212                     	;# 
   282  0213                     	;# 
   283  0213                     	;# 
   284  0214                     	;# 
   285  0214                     	;# 
   286  0215                     	;# 
   287  0215                     	;# 
   288  0215                     	;# 
   289  0216                     	;# 
   290  0216                     	;# 
   291  0217                     	;# 
   292  0217                     	;# 
   293  0291                     	;# 
   294  0291                     	;# 
   295  0292                     	;# 
   296  0293                     	;# 
   297  0294                     	;# 
   298  0295                     	;# 
   299  0295                     	;# 
   300  0296                     	;# 
   301  0391                     	;# 
   302  0392                     	;# 
   303  0393                     	;# 
   304  039A                     	;# 
   305  039C                     	;# 
   306  039D                     	;# 
   307  039E                     	;# 
   308  039F                     	;# 
   309  0FE4                     	;# 
   310  0FE5                     	;# 
   311  0FE6                     	;# 
   312  0FE7                     	;# 
   313  0FE8                     	;# 
   314  0FE9                     	;# 
   315  0FEA                     	;# 
   316  0FEB                     	;# 
   317  0FED                     	;# 
   318  0FEE                     	;# 
   319  0FEF                     	;# 
   320  0000                     	;# 
   321  0001                     	;# 
   322  0002                     	;# 
   323  0003                     	;# 
   324  0004                     	;# 
   325  0005                     	;# 
   326  0006                     	;# 
   327  0007                     	;# 
   328  0008                     	;# 
   329  0009                     	;# 
   330  000A                     	;# 
   331  000B                     	;# 
   332  000C                     	;# 
   333  000E                     	;# 
   334  0011                     	;# 
   335  0012                     	;# 
   336  0015                     	;# 
   337  0016                     	;# 
   338  0016                     	;# 
   339  0017                     	;# 
   340  0018                     	;# 
   341  0019                     	;# 
   342  001A                     	;# 
   343  001B                     	;# 
   344  001C                     	;# 
   345  001E                     	;# 
   346  001F                     	;# 
   347  008C                     	;# 
   348  008E                     	;# 
   349  0091                     	;# 
   350  0092                     	;# 
   351  0095                     	;# 
   352  0096                     	;# 
   353  0097                     	;# 
   354  0098                     	;# 
   355  0099                     	;# 
   356  009A                     	;# 
   357  009B                     	;# 
   358  009B                     	;# 
   359  009C                     	;# 
   360  009D                     	;# 
   361  009E                     	;# 
   362  010C                     	;# 
   363  010E                     	;# 
   364  0111                     	;# 
   365  0112                     	;# 
   366  0113                     	;# 
   367  0114                     	;# 
   368  0115                     	;# 
   369  0116                     	;# 
   370  0117                     	;# 
   371  0118                     	;# 
   372  0119                     	;# 
   373  011A                     	;# 
   374  011B                     	;# 
   375  011D                     	;# 
   376  011D                     	;# 
   377  018C                     	;# 
   378  018E                     	;# 
   379  0191                     	;# 
   380  0191                     	;# 
   381  0192                     	;# 
   382  0193                     	;# 
   383  0193                     	;# 
   384  0193                     	;# 
   385  0194                     	;# 
   386  0195                     	;# 
   387  0196                     	;# 
   388  0199                     	;# 
   389  019A                     	;# 
   390  019B                     	;# 
   391  019B                     	;# 
   392  019B                     	;# 
   393  019B                     	;# 
   394  019C                     	;# 
   395  019C                     	;# 
   396  019D                     	;# 
   397  019E                     	;# 
   398  019F                     	;# 
   399  020C                     	;# 
   400  020E                     	;# 
   401  0211                     	;# 
   402  0211                     	;# 
   403  0212                     	;# 
   404  0212                     	;# 
   405  0213                     	;# 
   406  0213                     	;# 
   407  0214                     	;# 
   408  0214                     	;# 
   409  0215                     	;# 
   410  0215                     	;# 
   411  0215                     	;# 
   412  0216                     	;# 
   413  0216                     	;# 
   414  0217                     	;# 
   415  0217                     	;# 
   416  0291                     	;# 
   417  0291                     	;# 
   418  0292                     	;# 
   419  0293                     	;# 
   420  0294                     	;# 
   421  0295                     	;# 
   422  0295                     	;# 
   423  0296                     	;# 
   424  0391                     	;# 
   425  0392                     	;# 
   426  0393                     	;# 
   427  039A                     	;# 
   428  039C                     	;# 
   429  039D                     	;# 
   430  039E                     	;# 
   431  039F                     	;# 
   432  0FE4                     	;# 
   433  0FE5                     	;# 
   434  0FE6                     	;# 
   435  0FE7                     	;# 
   436  0FE8                     	;# 
   437  0FE9                     	;# 
   438  0FEA                     	;# 
   439  0FEB                     	;# 
   440  0FED                     	;# 
   441  0FEE                     	;# 
   442  0FEF                     	;# 
   443  0000                     	;# 
   444  0001                     	;# 
   445  0002                     	;# 
   446  0003                     	;# 
   447  0004                     	;# 
   448  0005                     	;# 
   449  0006                     	;# 
   450  0007                     	;# 
   451  0008                     	;# 
   452  0009                     	;# 
   453  000A                     	;# 
   454  000B                     	;# 
   455  000C                     	;# 
   456  000E                     	;# 
   457  0011                     	;# 
   458  0012                     	;# 
   459  0015                     	;# 
   460  0016                     	;# 
   461  0016                     	;# 
   462  0017                     	;# 
   463  0018                     	;# 
   464  0019                     	;# 
   465  001A                     	;# 
   466  001B                     	;# 
   467  001C                     	;# 
   468  001E                     	;# 
   469  001F                     	;# 
   470  008C                     	;# 
   471  008E                     	;# 
   472  0091                     	;# 
   473  0092                     	;# 
   474  0095                     	;# 
   475  0096                     	;# 
   476  0097                     	;# 
   477  0098                     	;# 
   478  0099                     	;# 
   479  009A                     	;# 
   480  009B                     	;# 
   481  009B                     	;# 
   482  009C                     	;# 
   483  009D                     	;# 
   484  009E                     	;# 
   485  010C                     	;# 
   486  010E                     	;# 
   487  0111                     	;# 
   488  0112                     	;# 
   489  0113                     	;# 
   490  0114                     	;# 
   491  0115                     	;# 
   492  0116                     	;# 
   493  0117                     	;# 
   494  0118                     	;# 
   495  0119                     	;# 
   496  011A                     	;# 
   497  011B                     	;# 
   498  011D                     	;# 
   499  011D                     	;# 
   500  018C                     	;# 
   501  018E                     	;# 
   502  0191                     	;# 
   503  0191                     	;# 
   504  0192                     	;# 
   505  0193                     	;# 
   506  0193                     	;# 
   507  0193                     	;# 
   508  0194                     	;# 
   509  0195                     	;# 
   510  0196                     	;# 
   511  0199                     	;# 
   512  019A                     	;# 
   513  019B                     	;# 
   514  019B                     	;# 
   515  019B                     	;# 
   516  019B                     	;# 
   517  019C                     	;# 
   518  019C                     	;# 
   519  019D                     	;# 
   520  019E                     	;# 
   521  019F                     	;# 
   522  020C                     	;# 
   523  020E                     	;# 
   524  0211                     	;# 
   525  0211                     	;# 
   526  0212                     	;# 
   527  0212                     	;# 
   528  0213                     	;# 
   529  0213                     	;# 
   530  0214                     	;# 
   531  0214                     	;# 
   532  0215                     	;# 
   533  0215                     	;# 
   534  0215                     	;# 
   535  0216                     	;# 
   536  0216                     	;# 
   537  0217                     	;# 
   538  0217                     	;# 
   539  0291                     	;# 
   540  0291                     	;# 
   541  0292                     	;# 
   542  0293                     	;# 
   543  0294                     	;# 
   544  0295                     	;# 
   545  0295                     	;# 
   546  0296                     	;# 
   547  0391                     	;# 
   548  0392                     	;# 
   549  0393                     	;# 
   550  039A                     	;# 
   551  039C                     	;# 
   552  039D                     	;# 
   553  039E                     	;# 
   554  039F                     	;# 
   555  0FE4                     	;# 
   556  0FE5                     	;# 
   557  0FE6                     	;# 
   558  0FE7                     	;# 
   559  0FE8                     	;# 
   560  0FE9                     	;# 
   561  0FEA                     	;# 
   562  0FEB                     	;# 
   563  0FED                     	;# 
   564  0FEE                     	;# 
   565  0FEF                     	;# 
   566  0000                     	;# 
   567  0001                     	;# 
   568  0002                     	;# 
   569  0003                     	;# 
   570  0004                     	;# 
   571  0005                     	;# 
   572  0006                     	;# 
   573  0007                     	;# 
   574  0008                     	;# 
   575  0009                     	;# 
   576  000A                     	;# 
   577  000B                     	;# 
   578  000C                     	;# 
   579  000E                     	;# 
   580  0011                     	;# 
   581  0012                     	;# 
   582  0015                     	;# 
   583  0016                     	;# 
   584  0016                     	;# 
   585  0017                     	;# 
   586  0018                     	;# 
   587  0019                     	;# 
   588  001A                     	;# 
   589  001B                     	;# 
   590  001C                     	;# 
   591  001E                     	;# 
   592  001F                     	;# 
   593  008C                     	;# 
   594  008E                     	;# 
   595  0091                     	;# 
   596  0092                     	;# 
   597  0095                     	;# 
   598  0096                     	;# 
   599  0097                     	;# 
   600  0098                     	;# 
   601  0099                     	;# 
   602  009A                     	;# 
   603  009B                     	;# 
   604  009B                     	;# 
   605  009C                     	;# 
   606  009D                     	;# 
   607  009E                     	;# 
   608  010C                     	;# 
   609  010E                     	;# 
   610  0111                     	;# 
   611  0112                     	;# 
   612  0113                     	;# 
   613  0114                     	;# 
   614  0115                     	;# 
   615  0116                     	;# 
   616  0117                     	;# 
   617  0118                     	;# 
   618  0119                     	;# 
   619  011A                     	;# 
   620  011B                     	;# 
   621  011D                     	;# 
   622  011D                     	;# 
   623  018C                     	;# 
   624  018E                     	;# 
   625  0191                     	;# 
   626  0191                     	;# 
   627  0192                     	;# 
   628  0193                     	;# 
   629  0193                     	;# 
   630  0193                     	;# 
   631  0194                     	;# 
   632  0195                     	;# 
   633  0196                     	;# 
   634  0199                     	;# 
   635  019A                     	;# 
   636  019B                     	;# 
   637  019B                     	;# 
   638  019B                     	;# 
   639  019B                     	;# 
   640  019C                     	;# 
   641  019C                     	;# 
   642  019D                     	;# 
   643  019E                     	;# 
   644  019F                     	;# 
   645  020C                     	;# 
   646  020E                     	;# 
   647  0211                     	;# 
   648  0211                     	;# 
   649  0212                     	;# 
   650  0212                     	;# 
   651  0213                     	;# 
   652  0213                     	;# 
   653  0214                     	;# 
   654  0214                     	;# 
   655  0215                     	;# 
   656  0215                     	;# 
   657  0215                     	;# 
   658  0216                     	;# 
   659  0216                     	;# 
   660  0217                     	;# 
   661  0217                     	;# 
   662  0291                     	;# 
   663  0291                     	;# 
   664  0292                     	;# 
   665  0293                     	;# 
   666  0294                     	;# 
   667  0295                     	;# 
   668  0295                     	;# 
   669  0296                     	;# 
   670  0391                     	;# 
   671  0392                     	;# 
   672  0393                     	;# 
   673  039A                     	;# 
   674  039C                     	;# 
   675  039D                     	;# 
   676  039E                     	;# 
   677  039F                     	;# 
   678  0FE4                     	;# 
   679  0FE5                     	;# 
   680  0FE6                     	;# 
   681  0FE7                     	;# 
   682  0FE8                     	;# 
   683  0FE9                     	;# 
   684  0FEA                     	;# 
   685  0FEB                     	;# 
   686  0FED                     	;# 
   687  0FEE                     	;# 
   688  0FEF                     	;# 
   689  0000                     	;# 
   690  0001                     	;# 
   691  0002                     	;# 
   692  0003                     	;# 
   693  0004                     	;# 
   694  0005                     	;# 
   695  0006                     	;# 
   696  0007                     	;# 
   697  0008                     	;# 
   698  0009                     	;# 
   699  000A                     	;# 
   700  000B                     	;# 
   701  000C                     	;# 
   702  000E                     	;# 
   703  0011                     	;# 
   704  0012                     	;# 
   705  0015                     	;# 
   706  0016                     	;# 
   707  0016                     	;# 
   708  0017                     	;# 
   709  0018                     	;# 
   710  0019                     	;# 
   711  001A                     	;# 
   712  001B                     	;# 
   713  001C                     	;# 
   714  001E                     	;# 
   715  001F                     	;# 
   716  008C                     	;# 
   717  008E                     	;# 
   718  0091                     	;# 
   719  0092                     	;# 
   720  0095                     	;# 
   721  0096                     	;# 
   722  0097                     	;# 
   723  0098                     	;# 
   724  0099                     	;# 
   725  009A                     	;# 
   726  009B                     	;# 
   727  009B                     	;# 
   728  009C                     	;# 
   729  009D                     	;# 
   730  009E                     	;# 
   731  010C                     	;# 
   732  010E                     	;# 
   733  0111                     	;# 
   734  0112                     	;# 
   735  0113                     	;# 
   736  0114                     	;# 
   737  0115                     	;# 
   738  0116                     	;# 
   739  0117                     	;# 
   740  0118                     	;# 
   741  0119                     	;# 
   742  011A                     	;# 
   743  011B                     	;# 
   744  011D                     	;# 
   745  011D                     	;# 
   746  018C                     	;# 
   747  018E                     	;# 
   748  0191                     	;# 
   749  0191                     	;# 
   750  0192                     	;# 
   751  0193                     	;# 
   752  0193                     	;# 
   753  0193                     	;# 
   754  0194                     	;# 
   755  0195                     	;# 
   756  0196                     	;# 
   757  0199                     	;# 
   758  019A                     	;# 
   759  019B                     	;# 
   760  019B                     	;# 
   761  019B                     	;# 
   762  019B                     	;# 
   763  019C                     	;# 
   764  019C                     	;# 
   765  019D                     	;# 
   766  019E                     	;# 
   767  019F                     	;# 
   768  020C                     	;# 
   769  020E                     	;# 
   770  0211                     	;# 
   771  0211                     	;# 
   772  0212                     	;# 
   773  0212                     	;# 
   774  0213                     	;# 
   775  0213                     	;# 
   776  0214                     	;# 
   777  0214                     	;# 
   778  0215                     	;# 
   779  0215                     	;# 
   780  0215                     	;# 
   781  0216                     	;# 
   782  0216                     	;# 
   783  0217                     	;# 
   784  0217                     	;# 
   785  0291                     	;# 
   786  0291                     	;# 
   787  0292                     	;# 
   788  0293                     	;# 
   789  0294                     	;# 
   790  0295                     	;# 
   791  0295                     	;# 
   792  0296                     	;# 
   793  0391                     	;# 
   794  0392                     	;# 
   795  0393                     	;# 
   796  039A                     	;# 
   797  039C                     	;# 
   798  039D                     	;# 
   799  039E                     	;# 
   800  039F                     	;# 
   801  0FE4                     	;# 
   802  0FE5                     	;# 
   803  0FE6                     	;# 
   804  0FE7                     	;# 
   805  0FE8                     	;# 
   806  0FE9                     	;# 
   807  0FEA                     	;# 
   808  0FEB                     	;# 
   809  0FED                     	;# 
   810  0FEE                     	;# 
   811  0FEF                     	;# 
   812  0000                     	;# 
   813  0001                     	;# 
   814  0002                     	;# 
   815  0003                     	;# 
   816  0004                     	;# 
   817  0005                     	;# 
   818  0006                     	;# 
   819  0007                     	;# 
   820  0008                     	;# 
   821  0009                     	;# 
   822  000A                     	;# 
   823  000B                     	;# 
   824  000C                     	;# 
   825  000E                     	;# 
   826  0011                     	;# 
   827  0012                     	;# 
   828  0015                     	;# 
   829  0016                     	;# 
   830  0016                     	;# 
   831  0017                     	;# 
   832  0018                     	;# 
   833  0019                     	;# 
   834  001A                     	;# 
   835  001B                     	;# 
   836  001C                     	;# 
   837  001E                     	;# 
   838  001F                     	;# 
   839  008C                     	;# 
   840  008E                     	;# 
   841  0091                     	;# 
   842  0092                     	;# 
   843  0095                     	;# 
   844  0096                     	;# 
   845  0097                     	;# 
   846  0098                     	;# 
   847  0099                     	;# 
   848  009A                     	;# 
   849  009B                     	;# 
   850  009B                     	;# 
   851  009C                     	;# 
   852  009D                     	;# 
   853  009E                     	;# 
   854  010C                     	;# 
   855  010E                     	;# 
   856  0111                     	;# 
   857  0112                     	;# 
   858  0113                     	;# 
   859  0114                     	;# 
   860  0115                     	;# 
   861  0116                     	;# 
   862  0117                     	;# 
   863  0118                     	;# 
   864  0119                     	;# 
   865  011A                     	;# 
   866  011B                     	;# 
   867  011D                     	;# 
   868  011D                     	;# 
   869  018C                     	;# 
   870  018E                     	;# 
   871  0191                     	;# 
   872  0191                     	;# 
   873  0192                     	;# 
   874  0193                     	;# 
   875  0193                     	;# 
   876  0193                     	;# 
   877  0194                     	;# 
   878  0195                     	;# 
   879  0196                     	;# 
   880  0199                     	;# 
   881  019A                     	;# 
   882  019B                     	;# 
   883  019B                     	;# 
   884  019B                     	;# 
   885  019B                     	;# 
   886  019C                     	;# 
   887  019C                     	;# 
   888  019D                     	;# 
   889  019E                     	;# 
   890  019F                     	;# 
   891  020C                     	;# 
   892  020E                     	;# 
   893  0211                     	;# 
   894  0211                     	;# 
   895  0212                     	;# 
   896  0212                     	;# 
   897  0213                     	;# 
   898  0213                     	;# 
   899  0214                     	;# 
   900  0214                     	;# 
   901  0215                     	;# 
   902  0215                     	;# 
   903  0215                     	;# 
   904  0216                     	;# 
   905  0216                     	;# 
   906  0217                     	;# 
   907  0217                     	;# 
   908  0291                     	;# 
   909  0291                     	;# 
   910  0292                     	;# 
   911  0293                     	;# 
   912  0294                     	;# 
   913  0295                     	;# 
   914  0295                     	;# 
   915  0296                     	;# 
   916  0391                     	;# 
   917  0392                     	;# 
   918  0393                     	;# 
   919  039A                     	;# 
   920  039C                     	;# 
   921  039D                     	;# 
   922  039E                     	;# 
   923  039F                     	;# 
   924  0FE4                     	;# 
   925  0FE5                     	;# 
   926  0FE6                     	;# 
   927  0FE7                     	;# 
   928  0FE8                     	;# 
   929  0FE9                     	;# 
   930  0FEA                     	;# 
   931  0FEB                     	;# 
   932  0FED                     	;# 
   933  0FEE                     	;# 
   934  0FEF                     	;# 
   935  0000                     	;# 
   936  0001                     	;# 
   937  0002                     	;# 
   938  0003                     	;# 
   939  0004                     	;# 
   940  0005                     	;# 
   941  0006                     	;# 
   942  0007                     	;# 
   943  0008                     	;# 
   944  0009                     	;# 
   945  000A                     	;# 
   946  000B                     	;# 
   947  000C                     	;# 
   948  000E                     	;# 
   949  0011                     	;# 
   950  0012                     	;# 
   951  0015                     	;# 
   952  0016                     	;# 
   953  0016                     	;# 
   954  0017                     	;# 
   955  0018                     	;# 
   956  0019                     	;# 
   957  001A                     	;# 
   958  001B                     	;# 
   959  001C                     	;# 
   960  001E                     	;# 
   961  001F                     	;# 
   962  008C                     	;# 
   963  008E                     	;# 
   964  0091                     	;# 
   965  0092                     	;# 
   966  0095                     	;# 
   967  0096                     	;# 
   968  0097                     	;# 
   969  0098                     	;# 
   970  0099                     	;# 
   971  009A                     	;# 
   972  009B                     	;# 
   973  009B                     	;# 
   974  009C                     	;# 
   975  009D                     	;# 
   976  009E                     	;# 
   977  010C                     	;# 
   978  010E                     	;# 
   979  0111                     	;# 
   980  0112                     	;# 
   981  0113                     	;# 
   982  0114                     	;# 
   983  0115                     	;# 
   984  0116                     	;# 
   985  0117                     	;# 
   986  0118                     	;# 
   987  0119                     	;# 
   988  011A                     	;# 
   989  011B                     	;# 
   990  011D                     	;# 
   991  011D                     	;# 
   992  018C                     	;# 
   993  018E                     	;# 
   994  0191                     	;# 
   995  0191                     	;# 
   996  0192                     	;# 
   997  0193                     	;# 
   998  0193                     	;# 
   999  0193                     	;# 
  1000  0194                     	;# 
  1001  0195                     	;# 
  1002  0196                     	;# 
  1003  0199                     	;# 
  1004  019A                     	;# 
  1005  019B                     	;# 
  1006  019B                     	;# 
  1007  019B                     	;# 
  1008  019B                     	;# 
  1009  019C                     	;# 
  1010  019C                     	;# 
  1011  019D                     	;# 
  1012  019E                     	;# 
  1013  019F                     	;# 
  1014  020C                     	;# 
  1015  020E                     	;# 
  1016  0211                     	;# 
  1017  0211                     	;# 
  1018  0212                     	;# 
  1019  0212                     	;# 
  1020  0213                     	;# 
  1021  0213                     	;# 
  1022  0214                     	;# 
  1023  0214                     	;# 
  1024  0215                     	;# 
  1025  0215                     	;# 
  1026  0215                     	;# 
  1027  0216                     	;# 
  1028  0216                     	;# 
  1029  0217                     	;# 
  1030  0217                     	;# 
  1031  0291                     	;# 
  1032  0291                     	;# 
  1033  0292                     	;# 
  1034  0293                     	;# 
  1035  0294                     	;# 
  1036  0295                     	;# 
  1037  0295                     	;# 
  1038  0296                     	;# 
  1039  0391                     	;# 
  1040  0392                     	;# 
  1041  0393                     	;# 
  1042  039A                     	;# 
  1043  039C                     	;# 
  1044  039D                     	;# 
  1045  039E                     	;# 
  1046  039F                     	;# 
  1047  0FE4                     	;# 
  1048  0FE5                     	;# 
  1049  0FE6                     	;# 
  1050  0FE7                     	;# 
  1051  0FE8                     	;# 
  1052  0FE9                     	;# 
  1053  0FEA                     	;# 
  1054  0FEB                     	;# 
  1055  0FED                     	;# 
  1056  0FEE                     	;# 
  1057  0FEF                     	;# 
  1058  0000                     	;# 
  1059  0001                     	;# 
  1060  0002                     	;# 
  1061  0003                     	;# 
  1062  0004                     	;# 
  1063  0005                     	;# 
  1064  0006                     	;# 
  1065  0007                     	;# 
  1066  0008                     	;# 
  1067  0009                     	;# 
  1068  000A                     	;# 
  1069  000B                     	;# 
  1070  000C                     	;# 
  1071  000E                     	;# 
  1072  0011                     	;# 
  1073  0012                     	;# 
  1074  0015                     	;# 
  1075  0016                     	;# 
  1076  0016                     	;# 
  1077  0017                     	;# 
  1078  0018                     	;# 
  1079  0019                     	;# 
  1080  001A                     	;# 
  1081  001B                     	;# 
  1082  001C                     	;# 
  1083  001E                     	;# 
  1084  001F                     	;# 
  1085  008C                     	;# 
  1086  008E                     	;# 
  1087  0091                     	;# 
  1088  0092                     	;# 
  1089  0095                     	;# 
  1090  0096                     	;# 
  1091  0097                     	;# 
  1092  0098                     	;# 
  1093  0099                     	;# 
  1094  009A                     	;# 
  1095  009B                     	;# 
  1096  009B                     	;# 
  1097  009C                     	;# 
  1098  009D                     	;# 
  1099  009E                     	;# 
  1100  010C                     	;# 
  1101  010E                     	;# 
  1102  0111                     	;# 
  1103  0112                     	;# 
  1104  0113                     	;# 
  1105  0114                     	;# 
  1106  0115                     	;# 
  1107  0116                     	;# 
  1108  0117                     	;# 
  1109  0118                     	;# 
  1110  0119                     	;# 
  1111  011A                     	;# 
  1112  011B                     	;# 
  1113  011D                     	;# 
  1114  011D                     	;# 
  1115  018C                     	;# 
  1116  018E                     	;# 
  1117  0191                     	;# 
  1118  0191                     	;# 
  1119  0192                     	;# 
  1120  0193                     	;# 
  1121  0193                     	;# 
  1122  0193                     	;# 
  1123  0194                     	;# 
  1124  0195                     	;# 
  1125  0196                     	;# 
  1126  0199                     	;# 
  1127  019A                     	;# 
  1128  019B                     	;# 
  1129  019B                     	;# 
  1130  019B                     	;# 
  1131  019B                     	;# 
  1132  019C                     	;# 
  1133  019C                     	;# 
  1134  019D                     	;# 
  1135  019E                     	;# 
  1136  019F                     	;# 
  1137  020C                     	;# 
  1138  020E                     	;# 
  1139  0211                     	;# 
  1140  0211                     	;# 
  1141  0212                     	;# 
  1142  0212                     	;# 
  1143  0213                     	;# 
  1144  0213                     	;# 
  1145  0214                     	;# 
  1146  0214                     	;# 
  1147  0215                     	;# 
  1148  0215                     	;# 
  1149  0215                     	;# 
  1150  0216                     	;# 
  1151  0216                     	;# 
  1152  0217                     	;# 
  1153  0217                     	;# 
  1154  0291                     	;# 
  1155  0291                     	;# 
  1156  0292                     	;# 
  1157  0293                     	;# 
  1158  0294                     	;# 
  1159  0295                     	;# 
  1160  0295                     	;# 
  1161  0296                     	;# 
  1162  0391                     	;# 
  1163  0392                     	;# 
  1164  0393                     	;# 
  1165  039A                     	;# 
  1166  039C                     	;# 
  1167  039D                     	;# 
  1168  039E                     	;# 
  1169  039F                     	;# 
  1170  0FE4                     	;# 
  1171  0FE5                     	;# 
  1172  0FE6                     	;# 
  1173  0FE7                     	;# 
  1174  0FE8                     	;# 
  1175  0FE9                     	;# 
  1176  0FEA                     	;# 
  1177  0FEB                     	;# 
  1178  0FED                     	;# 
  1179  0FEE                     	;# 
  1180  0FEF                     	;# 
  1181  000E                     _PORTC	set	14
  1182  0015                     _TMR0	set	21
  1183  005F                     _GIE	set	95
  1184  005E                     _PEIE	set	94
  1185  0065                     _RA5	set	101
  1186  008D                     _RCIF	set	141
  1187  005D                     _TMR0IE	set	93
  1188  005A                     _TMR0IF	set	90
  1189  008C                     _TXIF	set	140
  1190  009D                     _ADCON0	set	157
  1191  009E                     _ADCON1	set	158
  1192  009C                     _ADRESH	set	156
  1193  009B                     _ADRESL	set	155
  1194  0095                     _OPTION_REGbits	set	149
  1195  0099                     _OSCCON	set	153
  1196  009A                     _OSCSTAT	set	154
  1197  0098                     _OSCTUNE	set	152
  1198  008C                     _TRISA	set	140
  1199  008E                     _TRISC	set	142
  1200  04E9                     _ADGO	set	1257
  1201  04A8                     _PS0	set	1192
  1202  04A9                     _PS1	set	1193
  1203  04AA                     _PS2	set	1194
  1204  04AB                     _PSA	set	1195
  1205  048D                     _RCIE	set	1165
  1206  04AD                     _TMR0CS	set	1197
  1207  048C                     _TXIE	set	1164
  1208  011D                     _APFCON	set	285
  1209  010C                     _LATA	set	268
  1210  010E                     _LATC	set	270
  1211  08EF                     _RXDTSEL	set	2287
  1212  08EA                     _TXCKSEL	set	2282
  1213  018C                     _ANSELA	set	396
  1214  018E                     _ANSELC	set	398
  1215  0199                     _RCREG	set	409
  1216  019C                     _SPBRGH	set	412
  1217  019B                     _SPBRGL	set	411
  1218  019A                     _TXREG	set	410
  1219  0CFB                     _BRG16	set	3323
  1220  0CF2                     _BRGH	set	3314
  1221  0CEC                     _CREN	set	3308
  1222  0CE9                     _OERR	set	3305
  1223  0CFC                     _SCKP	set	3324
  1224  0CEF                     _SPEN	set	3311
  1225  0CF4                     _SYNC	set	3316
  1226  0CF5                     _TXEN	set	3317
  1227  020C                     _WPUA	set	524
  1228  020E                     _WPUC	set	526
  1229  039A                     _CLKRCON	set	922
  1230                           
  1231                           ; #config settings
  1232  0000                     
  1233                           	psect	cinit
  1234  0057                     start_initialization:	
  1235  0057                     __initialization:	
  1236                           
  1237                           ; Clear objects allocated to COMMON
  1238  0057  01F0               	clrf	__pbssCOMMON& (0+127)
  1239  0058  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  1240  0059  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  1241  005A  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  1242  005B  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  1243                           
  1244                           ; Clear objects allocated to BANK0
  1245  005C  3020               	movlw	low __pbssBANK0
  1246  005D  0084               	movwf	4
  1247  005E  3000               	movlw	high __pbssBANK0
  1248  005F  0085               	movwf	5
  1249  0060  302C               	movlw	44
  1250  0061  241C               	fcall	clear_ram0
  1251  0062                     end_of_initialization:	
  1252                           ;End of C runtime variable initialization code
  1253                           
  1254  0062                     __end_of__initialization:	
  1255  0062  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1256  0063  0020               	movlb	0
  1257  0064  29E0               	ljmp	_main	;jump to C main() function
  1258                           
  1259                           	psect	bssCOMMON
  1260  0070                     __pbssCOMMON:	
  1261  0070                     _TIMER0_timeout:	
  1262  0070                     	ds	2
  1263  0072                     _USART_tx_flag:	
  1264  0072                     	ds	1
  1265  0073                     _USART_tx_index:	
  1266  0073                     	ds	1
  1267  0074                     _USART_tx_length:	
  1268  0074                     	ds	1
  1269                           
  1270                           	psect	bssBANK0
  1271  0020                     __pbssBANK0:	
  1272  0020                     _USART_rx_data:	
  1273  0020                     	ds	15
  1274  002F                     _USART_tx_data:	
  1275  002F                     	ds	15
  1276  003E                     _TIMER0_flag:	
  1277  003E                     	ds	1
  1278  003F                     _USART_rx_flag:	
  1279  003F                     	ds	1
  1280  0040                     _USART_rx_index:	
  1281  0040                     	ds	1
  1282  0041                     _mess_rec_size:	
  1283  0041                     	ds	1
  1284  0042                     _mess_rec:	
  1285  0042                     	ds	10
  1286                           
  1287                           	psect	clrtext
  1288  041C                     clear_ram0:	
  1289                           ;	Called with FSR0 containing the base address, and
  1290                           ;	WREG with the size to clear
  1291                           
  1292  041C  0064               	clrwdt	;clear the watchdog before getting into this loop
  1293  041D                     clrloop0:	
  1294  041D  0180               	clrf	0	;clear RAM location pointed to by FSR
  1295  041E  3101               	addfsr 0,1
  1296  041F  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1297  0420  2C1D               	goto	clrloop0	;have we reached the end yet?
  1298  0421  3400               	retlw	0	;all done for this memory range, return
  1299                           
  1300                           	psect	cstackCOMMON
  1301  0075                     __pcstackCOMMON:	
  1302  0075                     ?_OSCILLATOR_Initialize:	
  1303  0075                     ?_setup_TMR0:	
  1304                           ; 1 bytes @ 0x0
  1305                           
  1306  0075                     ?_start_TX_USART_ISR:	
  1307                           ; 1 bytes @ 0x0
  1308                           
  1309  0075                     ?_start_RX_USART_ISR:	
  1310                           ; 1 bytes @ 0x0
  1311                           
  1312  0075                     ?_start_RCM:	
  1313                           ; 1 bytes @ 0x0
  1314                           
  1315  0075                     ?_setup_ADC:	
  1316                           ; 1 bytes @ 0x0
  1317                           
  1318  0075                     ?_mess_handler:	
  1319                           ; 1 bytes @ 0x0
  1320                           
  1321  0075                     ?_stop_TMR0_ISR:	
  1322                           ; 1 bytes @ 0x0
  1323                           
  1324  0075                     ??_stop_TMR0_ISR:	
  1325                           ; 1 bytes @ 0x0
  1326                           
  1327  0075                     ?_start_TMR0_ISR:	
  1328                           ; 1 bytes @ 0x0
  1329                           
  1330  0075                     ??_start_TMR0_ISR:	
  1331                           ; 1 bytes @ 0x0
  1332                           
  1333  0075                     ?_config_ASIC:	
  1334                           ; 1 bytes @ 0x0
  1335                           
  1336  0075                     ?_read_ADC_channels:	
  1337                           ; 1 bytes @ 0x0
  1338                           
  1339  0075                     ?_measure_Impedance:	
  1340                           ; 1 bytes @ 0x0
  1341                           
  1342  0075                     ?_measure_Impedance_no_offset:	
  1343                           ; 1 bytes @ 0x0
  1344                           
  1345  0075                     ?_measure_Offset:	
  1346                           ; 1 bytes @ 0x0
  1347                           
  1348  0075                     ?_measure_Impedance_SE:	
  1349                           ; 1 bytes @ 0x0
  1350                           
  1351  0075                     ?_PIN_MANAGER_Initialize:	
  1352                           ; 1 bytes @ 0x0
  1353                           
  1354  0075                     ?_SYSTEM_Initialize:	
  1355                           ; 1 bytes @ 0x0
  1356                           
  1357  0075                     ?_USARTX_change_pol:	
  1358                           ; 1 bytes @ 0x0
  1359                           
  1360  0075                     ?_main:	
  1361                           ; 1 bytes @ 0x0
  1362                           
  1363  0075                     ?_isr:	
  1364                           ; 1 bytes @ 0x0
  1365                           
  1366  0075                     ?_close_RX_USART:	
  1367                           ; 1 bytes @ 0x0
  1368                           
  1369  0075                     ?i1_start_RX_USART_ISR:	
  1370                           ; 1 bytes @ 0x0
  1371                           
  1372  0075                     ??i1_start_RX_USART_ISR:	
  1373                           ; 1 bytes @ 0x0
  1374                           
  1375                           
  1376                           ; 1 bytes @ 0x0
  1377  0075                     	ds	2
  1378  0077                     start_TMR0_ISR@val:	
  1379                           
  1380                           ; 1 bytes @ 0x2
  1381  0077                     	ds	1
  1382  0078                     ??_isr:	
  1383                           
  1384                           ; 1 bytes @ 0x3
  1385  0078                     	ds	2
  1386                           
  1387                           	psect	cstackBANK0
  1388  004C                     __pcstackBANK0:	
  1389  004C                     ??_OSCILLATOR_Initialize:	
  1390  004C                     ??_setup_TMR0:	
  1391                           ; 1 bytes @ 0x0
  1392                           
  1393  004C                     ??_start_TX_USART_ISR:	
  1394                           ; 1 bytes @ 0x0
  1395                           
  1396  004C                     ??_start_RX_USART_ISR:	
  1397                           ; 1 bytes @ 0x0
  1398                           
  1399  004C                     ??_start_RCM:	
  1400                           ; 1 bytes @ 0x0
  1401                           
  1402  004C                     ??_setup_ADC:	
  1403                           ; 1 bytes @ 0x0
  1404                           
  1405  004C                     ?_calculate_checksum:	
  1406                           ; 1 bytes @ 0x0
  1407                           
  1408  004C                     ??_PIN_MANAGER_Initialize:	
  1409                           ; 1 bytes @ 0x0
  1410                           
  1411  004C                     ??_SYSTEM_Initialize:	
  1412                           ; 1 bytes @ 0x0
  1413                           
  1414  004C                     ??_USARTX_change_pol:	
  1415                           ; 1 bytes @ 0x0
  1416                           
  1417  004C                     ?_BIO_config:	
  1418                           ; 1 bytes @ 0x0
  1419                           
  1420  004C                     ??_close_RX_USART:	
  1421                           ; 1 bytes @ 0x0
  1422                           
  1423  004C                     ?_lputs_ISR:	
  1424                           ; 1 bytes @ 0x0
  1425                           
  1426  004C                     ?_ADC_2:	
  1427                           ; 1 bytes @ 0x0
  1428                           
  1429  004C                     ?_ADC_4:	
  1430                           ; 2 bytes @ 0x0
  1431                           
  1432  004C                     ?_ADC_5:	
  1433                           ; 2 bytes @ 0x0
  1434                           
  1435  004C                     lputs_ISR@length:	
  1436                           ; 2 bytes @ 0x0
  1437                           
  1438  004C                     calculate_checksum@num:	
  1439                           ; 1 bytes @ 0x0
  1440                           
  1441  004C                     BIO_config@conf:	
  1442                           ; 1 bytes @ 0x0
  1443                           
  1444                           
  1445                           ; 2 bytes @ 0x0
  1446  004C                     	ds	1
  1447  004D                     ??_calculate_checksum:	
  1448  004D                     ??_lputs_ISR:	
  1449                           ; 1 bytes @ 0x1
  1450                           
  1451                           
  1452                           ; 1 bytes @ 0x1
  1453  004D                     	ds	1
  1454  004E                     ??_ADC_2:	
  1455  004E                     ??_ADC_4:	
  1456                           ; 1 bytes @ 0x2
  1457                           
  1458  004E                     ??_ADC_5:	
  1459                           ; 1 bytes @ 0x2
  1460                           
  1461  004E                     ??_BIO_config:	
  1462                           ; 1 bytes @ 0x2
  1463                           
  1464                           
  1465                           ; 1 bytes @ 0x2
  1466  004E                     	ds	1
  1467  004F                     BIO_config@i:	
  1468  004F                     lputs_ISR@data:	
  1469                           ; 1 bytes @ 0x3
  1470                           
  1471  004F                     calculate_checksum@data:	
  1472                           ; 1 bytes @ 0x3
  1473                           
  1474                           
  1475                           ; 1 bytes @ 0x3
  1476  004F                     	ds	1
  1477  0050                     BIO_config@out:	
  1478  0050                     lputs_ISR@i:	
  1479                           ; 1 bytes @ 0x4
  1480                           
  1481  0050                     calculate_checksum@check:	
  1482                           ; 1 bytes @ 0x4
  1483                           
  1484  0050                     ADC_2@ADC_value:	
  1485                           ; 1 bytes @ 0x4
  1486                           
  1487  0050                     ADC_4@ADC_value:	
  1488                           ; 2 bytes @ 0x4
  1489                           
  1490  0050                     ADC_5@ADC_value:	
  1491                           ; 2 bytes @ 0x4
  1492                           
  1493                           
  1494                           ; 2 bytes @ 0x4
  1495  0050                     	ds	1
  1496  0051                     ??_config_ASIC:	
  1497  0051                     calculate_checksum@i:	
  1498                           ; 1 bytes @ 0x5
  1499                           
  1500                           
  1501                           ; 1 bytes @ 0x5
  1502  0051                     	ds	1
  1503  0052                     ??_read_ADC_channels:	
  1504  0052                     ??_measure_Impedance:	
  1505                           ; 1 bytes @ 0x6
  1506                           
  1507  0052                     ??_measure_Impedance_no_offset:	
  1508                           ; 1 bytes @ 0x6
  1509                           
  1510  0052                     ??_measure_Offset:	
  1511                           ; 1 bytes @ 0x6
  1512                           
  1513  0052                     ??_measure_Impedance_SE:	
  1514                           ; 1 bytes @ 0x6
  1515                           
  1516  0052                     config_ASIC@asic:	
  1517                           ; 1 bytes @ 0x6
  1518                           
  1519                           
  1520                           ; 2 bytes @ 0x6
  1521  0052                     	ds	1
  1522  0053                     measure_Offset@aux:	
  1523  0053                     read_ADC_channels@aux:	
  1524                           ; 5 bytes @ 0x7
  1525                           
  1526  0053                     measure_Impedance@aux:	
  1527                           ; 7 bytes @ 0x7
  1528                           
  1529  0053                     measure_Impedance_no_offset@aux:	
  1530                           ; 13 bytes @ 0x7
  1531                           
  1532                           
  1533                           ; 13 bytes @ 0x7
  1534  0053                     	ds	1
  1535  0054                     measure_Impedance_SE@aux:	
  1536                           
  1537                           ; 13 bytes @ 0x8
  1538  0054                     	ds	4
  1539  0058                     measure_Offset@value1:	
  1540                           
  1541                           ; 2 bytes @ 0xC
  1542  0058                     	ds	2
  1543  005A                     read_ADC_channels@value1:	
  1544  005A                     measure_Offset@value2:	
  1545                           ; 2 bytes @ 0xE
  1546                           
  1547                           
  1548                           ; 2 bytes @ 0xE
  1549  005A                     	ds	2
  1550  005C                     read_ADC_channels@value2:	
  1551  005C                     measure_Offset@asic:	
  1552                           ; 2 bytes @ 0x10
  1553                           
  1554                           
  1555                           ; 2 bytes @ 0x10
  1556  005C                     	ds	2
  1557  005E                     read_ADC_channels@value3:	
  1558                           
  1559                           ; 2 bytes @ 0x12
  1560  005E                     	ds	2
  1561  0060                     measure_Impedance@value1:	
  1562  0060                     measure_Impedance_no_offset@value1:	
  1563                           ; 2 bytes @ 0x14
  1564                           
  1565                           
  1566                           ; 2 bytes @ 0x14
  1567  0060                     	ds	1
  1568  0061                     measure_Impedance_SE@check:	
  1569                           
  1570                           ; 1 bytes @ 0x15
  1571  0061                     	ds	1
  1572  0062                     measure_Impedance@value2:	
  1573  0062                     measure_Impedance_no_offset@value2:	
  1574                           ; 2 bytes @ 0x16
  1575                           
  1576  0062                     measure_Impedance_SE@value1:	
  1577                           ; 2 bytes @ 0x16
  1578                           
  1579                           
  1580                           ; 2 bytes @ 0x16
  1581  0062                     	ds	2
  1582  0064                     measure_Impedance@asic:	
  1583  0064                     measure_Impedance_no_offset@asic:	
  1584                           ; 2 bytes @ 0x18
  1585                           
  1586  0064                     measure_Impedance_SE@asic:	
  1587                           ; 2 bytes @ 0x18
  1588                           
  1589                           
  1590                           ; 2 bytes @ 0x18
  1591  0064                     	ds	2
  1592  0066                     ??_mess_handler:	
  1593                           
  1594                           ; 1 bytes @ 0x1A
  1595  0066                     	ds	1
  1596  0067                     ??_main:	
  1597                           
  1598                           ; 1 bytes @ 0x1B
  1599  0067                     	ds	1
  1600  0068                     main@i:	
  1601                           
  1602                           ; 1 bytes @ 0x1C
  1603  0068                     	ds	1
  1604                           
  1605                           	psect	maintext
  1606  01E0                     __pmaintext:	
  1607 ;;
  1608 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1609 ;;
  1610 ;; *************** function _main *****************
  1611 ;; Defined at:
  1612 ;;		line 20 in file "main.c"
  1613 ;; Parameters:    Size  Location     Type
  1614 ;;		None
  1615 ;; Auto vars:     Size  Location     Type
  1616 ;;  i               1   28[BANK0 ] unsigned char 
  1617 ;; Return value:  Size  Location     Type
  1618 ;;                  1    wreg      void 
  1619 ;; Registers used:
  1620 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1621 ;; Tracked objects:
  1622 ;;		On entry : B1F/0
  1623 ;;		On exit  : 0/0
  1624 ;;		Unchanged: 0/0
  1625 ;; Data sizes:     COMMON   BANK0   BANK1
  1626 ;;      Params:         0       0       0
  1627 ;;      Locals:         0       1       0
  1628 ;;      Temps:          0       1       0
  1629 ;;      Totals:         0       2       0
  1630 ;;Total ram usage:        2 bytes
  1631 ;; Hardware stack levels required when called:    6
  1632 ;; This function calls:
  1633 ;;		_SYSTEM_Initialize
  1634 ;;		_USARTX_change_pol
  1635 ;;		_mess_handler
  1636 ;;		_setup_ADC
  1637 ;;		_setup_TMR0
  1638 ;;		_start_RCM
  1639 ;;		_start_RX_USART_ISR
  1640 ;;		_start_TX_USART_ISR
  1641 ;; This function is called by:
  1642 ;;		Startup code after reset
  1643 ;; This function uses a non-reentrant model
  1644 ;;
  1645                           
  1646                           
  1647                           ;psect for function _main
  1648  01E0                     _main:	
  1649                           
  1650                           ;main.c: 22: unsigned char i;
  1651                           ;main.c: 24: SYSTEM_Initialize();
  1652                           
  1653                           ;incstack = 0
  1654                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1655  01E0  2435               	fcall	_SYSTEM_Initialize
  1656                           
  1657                           ;main.c: 26: USARTX_change_pol();
  1658  01E1  2432               	fcall	_USARTX_change_pol
  1659                           
  1660                           ;main.c: 28: setup_TMR0();
  1661  01E2  240E               	fcall	_setup_TMR0
  1662                           
  1663                           ;main.c: 29: start_TX_USART_ISR();
  1664  01E3  23FF               	fcall	_start_TX_USART_ISR
  1665                           
  1666                           ;main.c: 30: start_RX_USART_ISR();
  1667  01E4  23CD               	fcall	_start_RX_USART_ISR
  1668                           
  1669                           ;main.c: 31: start_RCM();
  1670  01E5  242E               	fcall	_start_RCM
  1671                           
  1672                           ;main.c: 32: setup_ADC();
  1673  01E6  2422               	fcall	_setup_ADC
  1674                           
  1675                           ;main.c: 35: RA5 = 0;
  1676  01E7  0020               	movlb	0	; select bank0
  1677  01E8  128C               	bcf	12,5	;volatile
  1678                           
  1679                           ;main.c: 36: _delay((unsigned long)((150)*(500000/4000.0)));
  1680  01E9  3019               	movlw	25
  1681  01EA  0020               	movlb	0	; select bank0
  1682  01EB  00E7               	movwf	??_main
  1683  01EC  3058               	movlw	88
  1684  01ED                     u867:	
  1685  01ED  0B89               	decfsz	9,f
  1686  01EE  29ED               	goto	u867
  1687  01EF  0BE7               	decfsz	??_main,f
  1688  01F0  29ED               	goto	u867
  1689  01F1  0000               	nop
  1690                           
  1691                           ;main.c: 37: RA5 = 1;
  1692  01F2  0020               	movlb	0	; select bank0
  1693  01F3  168C               	bsf	12,5	;volatile
  1694  01F4                     l115:	
  1695                           ;main.c: 106: while(1) {
  1696                           
  1697  01F4  0064               	clrwdt	;# 
  1698                           
  1699                           ;main.c: 110: if (TIMER0_flag) {
  1700  01F5  0020               	movlb	0	; select bank0
  1701  01F6  083E               	movf	_TIMER0_flag,w	;volatile
  1702  01F7  1903               	btfsc	3,2
  1703  01F8  29F4               	goto	l115
  1704                           
  1705                           ;main.c: 111: TIMER0_flag = 0;
  1706  01F9  01BE               	clrf	_TIMER0_flag	;volatile
  1707                           
  1708                           ;main.c: 113: if (USART_rx_index > 10) {
  1709  01FA  300B               	movlw	11
  1710  01FB  0240               	subwf	_USART_rx_index,w	;volatile
  1711  01FC  1C03               	skipc
  1712  01FD  2A00               	goto	l2440
  1713                           
  1714                           ;main.c: 114: USART_rx_index = 0;
  1715  01FE  01C0               	clrf	_USART_rx_index	;volatile
  1716                           
  1717                           ;main.c: 115: continue;
  1718  01FF  29F4               	goto	l115
  1719  0200                     l2440:	
  1720                           
  1721                           ;main.c: 116: }
  1722                           ;main.c: 118: if(USART_rx_index == 0)
  1723  0200  0840               	movf	_USART_rx_index,w	;volatile
  1724  0201  1903               	btfsc	3,2
  1725                           
  1726                           ;main.c: 119: continue;
  1727  0202  29F4               	goto	l115
  1728                           
  1729                           ;main.c: 122: mess_rec_size = USART_rx_index;
  1730  0203  0840               	movf	_USART_rx_index,w	;volatile
  1731  0204  00E7               	movwf	??_main
  1732  0205  0867               	movf	??_main,w
  1733  0206  00C1               	movwf	_mess_rec_size	;volatile
  1734                           
  1735                           ;main.c: 123: USART_rx_index = 0;
  1736  0207  01C0               	clrf	_USART_rx_index	;volatile
  1737                           
  1738                           ;main.c: 125: for (i = 0; i < mess_rec_size; i++)
  1739  0208  01E8               	clrf	main@i
  1740  0209                     l2454:	
  1741  0209  0841               	movf	_mess_rec_size,w	;volatile
  1742  020A  0268               	subwf	main@i,w
  1743  020B  1803               	btfsc	3,0
  1744  020C  2A1E               	goto	l2456
  1745                           
  1746                           ;main.c: 126: mess_rec[i] = USART_rx_data[i];
  1747  020D  0868               	movf	main@i,w
  1748  020E  3E20               	addlw	(low (_USART_rx_data| 0))& (0+255)
  1749  020F  0086               	movwf	6
  1750  0210  0187               	clrf	7
  1751  0211  0801               	movf	1,w
  1752  0212  00E7               	movwf	??_main
  1753  0213  0868               	movf	main@i,w
  1754  0214  3E42               	addlw	(low (_mess_rec| 0))& (0+255)
  1755  0215  0086               	movwf	6
  1756  0216  0187               	clrf	7
  1757  0217  0867               	movf	??_main,w
  1758  0218  0081               	movwf	1
  1759  0219  3001               	movlw	1
  1760  021A  00E7               	movwf	??_main
  1761  021B  0867               	movf	??_main,w
  1762  021C  07E8               	addwf	main@i,f
  1763  021D  2A09               	goto	l2454
  1764  021E                     l2456:	
  1765                           
  1766                           ;main.c: 129: mess_handler();
  1767  021E  2298               	fcall	_mess_handler
  1768  021F  29F4               	goto	l115
  1769  0220                     __end_of_main:	
  1770                           
  1771                           	psect	text1
  1772  03FF                     __ptext1:	
  1773 ;; *************** function _start_TX_USART_ISR *****************
  1774 ;; Defined at:
  1775 ;;		line 101 in file "USART1823.c"
  1776 ;; Parameters:    Size  Location     Type
  1777 ;;		None
  1778 ;; Auto vars:     Size  Location     Type
  1779 ;;		None
  1780 ;; Return value:  Size  Location     Type
  1781 ;;                  1    wreg      void 
  1782 ;; Registers used:
  1783 ;;		wreg, status,2
  1784 ;; Tracked objects:
  1785 ;;		On entry : 0/0
  1786 ;;		On exit  : 0/0
  1787 ;;		Unchanged: 0/0
  1788 ;; Data sizes:     COMMON   BANK0   BANK1
  1789 ;;      Params:         0       0       0
  1790 ;;      Locals:         0       0       0
  1791 ;;      Temps:          0       0       0
  1792 ;;      Totals:         0       0       0
  1793 ;;Total ram usage:        0 bytes
  1794 ;; Hardware stack levels used:    1
  1795 ;; Hardware stack levels required when called:    2
  1796 ;; This function calls:
  1797 ;;		Nothing
  1798 ;; This function is called by:
  1799 ;;		_main
  1800 ;; This function uses a non-reentrant model
  1801 ;;
  1802                           
  1803                           
  1804                           ;psect for function _start_TX_USART_ISR
  1805  03FF                     _start_TX_USART_ISR:	
  1806                           
  1807                           ;USART1823.c: 103: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  1808                           
  1809                           ;incstack = 0
  1810                           ; Regs used in _start_TX_USART_ISR: [wreg+status,2]
  1811  03FF  0023               	movlb	3	; select bank3
  1812  0400  151E               	bsf	30,2	;volatile
  1813  0401  159F               	bsf	31,3	;volatile
  1814  0402  019C               	clrf	28	;volatile
  1815  0403  300C               	movlw	12
  1816  0404  009B               	movwf	27	;volatile
  1817                           
  1818                           ;USART1823.c: 104: SYNC = 0;
  1819  0405  121E               	bcf	30,4	;volatile
  1820                           
  1821                           ;USART1823.c: 105: SPEN = 1;
  1822  0406  179D               	bsf	29,7	;volatile
  1823                           
  1824                           ;USART1823.c: 106: TXEN = 1;
  1825  0407  169E               	bsf	30,5	;volatile
  1826                           
  1827                           ;USART1823.c: 108: USART_tx_flag = 0;
  1828  0408  01F2               	clrf	_USART_tx_flag	;volatile
  1829                           
  1830                           ;USART1823.c: 109: USART_tx_index = 0;
  1831  0409  01F3               	clrf	_USART_tx_index	;volatile
  1832                           
  1833                           ;USART1823.c: 110: USART_tx_length = 0;
  1834  040A  01F4               	clrf	_USART_tx_length	;volatile
  1835                           
  1836                           ;USART1823.c: 113: PEIE = 1;
  1837  040B  170B               	bsf	11,6	;volatile
  1838                           
  1839                           ;USART1823.c: 114: GIE = 1;
  1840  040C  178B               	bsf	11,7	;volatile
  1841  040D  0008               	return
  1842  040E                     __end_of_start_TX_USART_ISR:	
  1843                           
  1844                           	psect	text2
  1845  03CD                     __ptext2:	
  1846 ;; *************** function _start_RX_USART_ISR *****************
  1847 ;; Defined at:
  1848 ;;		line 83 in file "USART1823.c"
  1849 ;; Parameters:    Size  Location     Type
  1850 ;;		None
  1851 ;; Auto vars:     Size  Location     Type
  1852 ;;		None
  1853 ;; Return value:  Size  Location     Type
  1854 ;;                  1    wreg      void 
  1855 ;; Registers used:
  1856 ;;		wreg, status,2
  1857 ;; Tracked objects:
  1858 ;;		On entry : 0/0
  1859 ;;		On exit  : 0/0
  1860 ;;		Unchanged: 0/0
  1861 ;; Data sizes:     COMMON   BANK0   BANK1
  1862 ;;      Params:         0       0       0
  1863 ;;      Locals:         0       0       0
  1864 ;;      Temps:          0       0       0
  1865 ;;      Totals:         0       0       0
  1866 ;;Total ram usage:        0 bytes
  1867 ;; Hardware stack levels used:    1
  1868 ;; Hardware stack levels required when called:    2
  1869 ;; This function calls:
  1870 ;;		Nothing
  1871 ;; This function is called by:
  1872 ;;		_main
  1873 ;; This function uses a non-reentrant model
  1874 ;;
  1875                           
  1876                           
  1877                           ;psect for function _start_RX_USART_ISR
  1878  03CD                     _start_RX_USART_ISR:	
  1879                           
  1880                           ;USART1823.c: 86: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  1881                           
  1882                           ;incstack = 0
  1883                           ; Regs used in _start_RX_USART_ISR: [wreg+status,2]
  1884  03CD  0023               	movlb	3	; select bank3
  1885  03CE  151E               	bsf	30,2	;volatile
  1886  03CF  159F               	bsf	31,3	;volatile
  1887  03D0  019C               	clrf	28	;volatile
  1888  03D1  300C               	movlw	12
  1889  03D2  009B               	movwf	27	;volatile
  1890                           
  1891                           ;USART1823.c: 88: SYNC = 0;
  1892  03D3  121E               	bcf	30,4	;volatile
  1893                           
  1894                           ;USART1823.c: 89: SPEN = 1;
  1895  03D4  179D               	bsf	29,7	;volatile
  1896                           
  1897                           ;USART1823.c: 90: CREN = 1;
  1898  03D5  161D               	bsf	29,4	;volatile
  1899                           
  1900                           ;USART1823.c: 92: USART_rx_flag = 0;
  1901  03D6  0020               	movlb	0	; select bank0
  1902  03D7  01BF               	clrf	_USART_rx_flag	;volatile
  1903                           
  1904                           ;USART1823.c: 93: USART_rx_index = 0;
  1905  03D8  01C0               	clrf	_USART_rx_index	;volatile
  1906                           
  1907                           ;USART1823.c: 95: RCIE = 1;
  1908  03D9  0021               	movlb	1	; select bank1
  1909  03DA  1691               	bsf	17,5	;volatile
  1910                           
  1911                           ;USART1823.c: 96: PEIE = 1;
  1912  03DB  170B               	bsf	11,6	;volatile
  1913                           
  1914                           ;USART1823.c: 97: GIE = 1;
  1915  03DC  178B               	bsf	11,7	;volatile
  1916  03DD  0008               	return
  1917  03DE                     __end_of_start_RX_USART_ISR:	
  1918                           
  1919                           	psect	text3
  1920  042E                     __ptext3:	
  1921 ;; *************** function _start_RCM *****************
  1922 ;; Defined at:
  1923 ;;		line 4 in file "RCM1823.c"
  1924 ;; Parameters:    Size  Location     Type
  1925 ;;		None
  1926 ;; Auto vars:     Size  Location     Type
  1927 ;;		None
  1928 ;; Return value:  Size  Location     Type
  1929 ;;                  1    wreg      void 
  1930 ;; Registers used:
  1931 ;;		wreg
  1932 ;; Tracked objects:
  1933 ;;		On entry : 0/0
  1934 ;;		On exit  : 0/0
  1935 ;;		Unchanged: 0/0
  1936 ;; Data sizes:     COMMON   BANK0   BANK1
  1937 ;;      Params:         0       0       0
  1938 ;;      Locals:         0       0       0
  1939 ;;      Temps:          0       0       0
  1940 ;;      Totals:         0       0       0
  1941 ;;Total ram usage:        0 bytes
  1942 ;; Hardware stack levels used:    1
  1943 ;; Hardware stack levels required when called:    2
  1944 ;; This function calls:
  1945 ;;		Nothing
  1946 ;; This function is called by:
  1947 ;;		_main
  1948 ;; This function uses a non-reentrant model
  1949 ;;
  1950                           
  1951                           
  1952                           ;psect for function _start_RCM
  1953  042E                     _start_RCM:	
  1954                           
  1955                           ;RCM1823.c: 6: CLKRCON = 0b11010000;
  1956                           
  1957                           ;incstack = 0
  1958                           ; Regs used in _start_RCM: [wreg]
  1959  042E  30D0               	movlw	208
  1960  042F  0027               	movlb	7	; select bank7
  1961  0430  009A               	movwf	26	;volatile
  1962  0431  0008               	return
  1963  0432                     __end_of_start_RCM:	
  1964                           
  1965                           	psect	text4
  1966  040E                     __ptext4:	
  1967 ;; *************** function _setup_TMR0 *****************
  1968 ;; Defined at:
  1969 ;;		line 10 in file "TMR0.c"
  1970 ;; Parameters:    Size  Location     Type
  1971 ;;		None
  1972 ;; Auto vars:     Size  Location     Type
  1973 ;;		None
  1974 ;; Return value:  Size  Location     Type
  1975 ;;                  1    wreg      void 
  1976 ;; Registers used:
  1977 ;;		None
  1978 ;; Tracked objects:
  1979 ;;		On entry : 0/0
  1980 ;;		On exit  : 0/0
  1981 ;;		Unchanged: 0/0
  1982 ;; Data sizes:     COMMON   BANK0   BANK1
  1983 ;;      Params:         0       0       0
  1984 ;;      Locals:         0       0       0
  1985 ;;      Temps:          0       0       0
  1986 ;;      Totals:         0       0       0
  1987 ;;Total ram usage:        0 bytes
  1988 ;; Hardware stack levels used:    1
  1989 ;; Hardware stack levels required when called:    2
  1990 ;; This function calls:
  1991 ;;		Nothing
  1992 ;; This function is called by:
  1993 ;;		_main
  1994 ;; This function uses a non-reentrant model
  1995 ;;
  1996                           
  1997                           
  1998                           ;psect for function _setup_TMR0
  1999  040E                     _setup_TMR0:	
  2000                           
  2001                           ;TMR0.c: 13: PS2 = 0; PS1 = 1; PS0 = 0;
  2002                           
  2003                           ;incstack = 0
  2004                           ; Regs used in _setup_TMR0: []
  2005  040E  0021               	movlb	1	; select bank1
  2006  040F  1115               	bcf	21,2	;volatile
  2007  0410  1495               	bsf	21,1	;volatile
  2008  0411  1015               	bcf	21,0	;volatile
  2009                           
  2010                           ;TMR0.c: 16: PSA = 0;
  2011  0412  1195               	bcf	21,3	;volatile
  2012                           
  2013                           ;TMR0.c: 18: TMR0CS = 0;
  2014  0413  1295               	bcf	21,5	;volatile
  2015  0414  0008               	return
  2016  0415                     __end_of_setup_TMR0:	
  2017                           
  2018                           	psect	text5
  2019  0422                     __ptext5:	
  2020 ;; *************** function _setup_ADC *****************
  2021 ;; Defined at:
  2022 ;;		line 3 in file "ADC1823.c"
  2023 ;; Parameters:    Size  Location     Type
  2024 ;;		None
  2025 ;; Auto vars:     Size  Location     Type
  2026 ;;		None
  2027 ;; Return value:  Size  Location     Type
  2028 ;;                  1    wreg      void 
  2029 ;; Registers used:
  2030 ;;		wreg
  2031 ;; Tracked objects:
  2032 ;;		On entry : 0/0
  2033 ;;		On exit  : 0/0
  2034 ;;		Unchanged: 0/0
  2035 ;; Data sizes:     COMMON   BANK0   BANK1
  2036 ;;      Params:         0       0       0
  2037 ;;      Locals:         0       0       0
  2038 ;;      Temps:          0       0       0
  2039 ;;      Totals:         0       0       0
  2040 ;;Total ram usage:        0 bytes
  2041 ;; Hardware stack levels used:    1
  2042 ;; Hardware stack levels required when called:    2
  2043 ;; This function calls:
  2044 ;;		Nothing
  2045 ;; This function is called by:
  2046 ;;		_main
  2047 ;; This function uses a non-reentrant model
  2048 ;;
  2049                           
  2050                           
  2051                           ;psect for function _setup_ADC
  2052  0422                     _setup_ADC:	
  2053                           
  2054                           ;ADC1823.c: 20: ADCON1 = 0b11110000;
  2055                           
  2056                           ;incstack = 0
  2057                           ; Regs used in _setup_ADC: [wreg]
  2058  0422  30F0               	movlw	240
  2059  0423  0021               	movlb	1	; select bank1
  2060  0424  009E               	movwf	30	;volatile
  2061                           
  2062                           ;ADC1823.c: 21: { ADCON0 = 0b00100100;};
  2063  0425  3024               	movlw	36
  2064  0426  009D               	movwf	29	;volatile
  2065  0427  0008               	return
  2066  0428                     __end_of_setup_ADC:	
  2067                           
  2068                           	psect	text6
  2069  0298                     __ptext6:	
  2070 ;; *************** function _mess_handler *****************
  2071 ;; Defined at:
  2072 ;;		line 11 in file "comm.c"
  2073 ;; Parameters:    Size  Location     Type
  2074 ;;		None
  2075 ;; Auto vars:     Size  Location     Type
  2076 ;;		None
  2077 ;; Return value:  Size  Location     Type
  2078 ;;                  1    wreg      void 
  2079 ;; Registers used:
  2080 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2081 ;; Tracked objects:
  2082 ;;		On entry : 0/0
  2083 ;;		On exit  : 0/0
  2084 ;;		Unchanged: 0/0
  2085 ;; Data sizes:     COMMON   BANK0   BANK1
  2086 ;;      Params:         0       0       0
  2087 ;;      Locals:         0       0       0
  2088 ;;      Temps:          0       1       0
  2089 ;;      Totals:         0       1       0
  2090 ;;Total ram usage:        1 bytes
  2091 ;; Hardware stack levels used:    1
  2092 ;; Hardware stack levels required when called:    5
  2093 ;; This function calls:
  2094 ;;		_config_ASIC
  2095 ;;		_lputs_ISR
  2096 ;;		_measure_Impedance
  2097 ;;		_measure_Impedance_SE
  2098 ;;		_measure_Impedance_no_offset
  2099 ;;		_measure_Offset
  2100 ;;		_read_ADC_channels
  2101 ;; This function is called by:
  2102 ;;		_main
  2103 ;; This function uses a non-reentrant model
  2104 ;;
  2105                           
  2106                           
  2107                           ;psect for function _mess_handler
  2108  0298                     _mess_handler:	
  2109                           
  2110                           ;comm.c: 16: switch (mess_rec[0]) {
  2111                           
  2112                           ;incstack = 0
  2113                           ; Regs used in _mess_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2114  0298  2AAD               	goto	l2418
  2115  0299                     l2402:	
  2116                           ;comm.c: 17: case 't':
  2117                           
  2118                           
  2119                           ;comm.c: 18: lputs_ISR(mess_rec,mess_rec_size);
  2120  0299  0020               	movlb	0	; select bank0
  2121  029A  0841               	movf	_mess_rec_size,w	;volatile
  2122  029B  00E6               	movwf	??_mess_handler
  2123  029C  0866               	movf	??_mess_handler,w
  2124  029D  00CC               	movwf	lputs_ISR@length
  2125  029E  3042               	movlw	(low (_mess_rec| 0))& (0+255)
  2126  029F  22C6               	fcall	_lputs_ISR
  2127                           
  2128                           ;comm.c: 19: break;
  2129  02A0  0008               	return
  2130  02A1                     l2404:	
  2131                           ;comm.c: 21: case 'c':
  2132                           
  2133                           
  2134                           ;comm.c: 22: config_ASIC();
  2135  02A1  23B7               	fcall	_config_ASIC
  2136                           
  2137                           ;comm.c: 23: break;
  2138  02A2  0008               	return
  2139  02A3                     l2406:	
  2140                           ;comm.c: 25: case 'm':
  2141                           
  2142                           
  2143                           ;comm.c: 26: read_ADC_channels();
  2144  02A3  225F               	fcall	_read_ADC_channels
  2145                           
  2146                           ;comm.c: 27: break;
  2147  02A4  0008               	return
  2148  02A5                     l2408:	
  2149                           ;comm.c: 29: case 'z':
  2150                           
  2151                           
  2152                           ;comm.c: 30: measure_Impedance();
  2153  02A5  2065               	fcall	_measure_Impedance
  2154                           
  2155                           ;comm.c: 31: break;
  2156  02A6  0008               	return
  2157  02A7                     l2410:	
  2158                           ;comm.c: 33: case 'y':
  2159                           
  2160                           
  2161                           ;comm.c: 34: measure_Impedance_no_offset();
  2162  02A7  2175               	fcall	_measure_Impedance_no_offset
  2163                           
  2164                           ;comm.c: 35: break;
  2165  02A8  0008               	return
  2166  02A9                     l2412:	
  2167                           ;comm.c: 37: case 'o':
  2168                           
  2169                           
  2170                           ;comm.c: 38: measure_Offset();
  2171  02A9  2220               	fcall	_measure_Offset
  2172                           
  2173                           ;comm.c: 39: break;
  2174  02AA  0008               	return
  2175  02AB                     l2414:	
  2176                           ;comm.c: 41: case 's':
  2177                           
  2178                           
  2179                           ;comm.c: 42: measure_Impedance_SE();
  2180  02AB  20FB               	fcall	_measure_Impedance_SE
  2181                           
  2182                           ;comm.c: 47: }
  2183                           
  2184                           ;comm.c: 46: break;
  2185                           
  2186                           ;comm.c: 45: default:
  2187                           
  2188                           ;comm.c: 43: break;
  2189  02AC  0008               	return
  2190  02AD                     l2418:	
  2191  02AD  0020               	movlb	0	; select bank0
  2192  02AE  0842               	movf	_mess_rec,w	;volatile
  2193                           
  2194                           ; Switch size 1, requested type "space"
  2195                           ; Number of cases is 7, Range of values is 99 to 122
  2196                           ; switch strategies available:
  2197                           ; Name         Instructions Cycles
  2198                           ; simple_byte           22    12 (average)
  2199                           ; direct_byte           57     9 (fixed)
  2200                           ; jumptable            263     9 (fixed)
  2201                           ;	Chosen strategy is simple_byte
  2202  02AF  3A63               	xorlw	99	; case 99
  2203  02B0  1903               	skipnz
  2204  02B1  2AA1               	goto	l2404
  2205  02B2  3A0E               	xorlw	14	; case 109
  2206  02B3  1903               	skipnz
  2207  02B4  2AA3               	goto	l2406
  2208  02B5  3A02               	xorlw	2	; case 111
  2209  02B6  1903               	skipnz
  2210  02B7  2AA9               	goto	l2412
  2211  02B8  3A1C               	xorlw	28	; case 115
  2212  02B9  1903               	skipnz
  2213  02BA  2AAB               	goto	l2414
  2214  02BB  3A07               	xorlw	7	; case 116
  2215  02BC  1903               	skipnz
  2216  02BD  2A99               	goto	l2402
  2217  02BE  3A0D               	xorlw	13	; case 121
  2218  02BF  1903               	skipnz
  2219  02C0  2AA7               	goto	l2410
  2220  02C1  3A03               	xorlw	3	; case 122
  2221  02C2  1903               	skipnz
  2222  02C3  2AA5               	goto	l2408
  2223  02C4  2AC5               	goto	l341
  2224  02C5                     l341:	
  2225  02C5  0008               	return
  2226  02C6                     __end_of_mess_handler:	
  2227                           
  2228                           	psect	text7
  2229  025F                     __ptext7:	
  2230 ;; *************** function _read_ADC_channels *****************
  2231 ;; Defined at:
  2232 ;;		line 80 in file "comm.c"
  2233 ;; Parameters:    Size  Location     Type
  2234 ;;		None
  2235 ;; Auto vars:     Size  Location     Type
  2236 ;;  aux             7    7[BANK0 ] unsigned char [7]
  2237 ;;  value3          2   18[BANK0 ] unsigned short 
  2238 ;;  value2          2   16[BANK0 ] unsigned short 
  2239 ;;  value1          2   14[BANK0 ] unsigned short 
  2240 ;; Return value:  Size  Location     Type
  2241 ;;                  1    wreg      void 
  2242 ;; Registers used:
  2243 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2244 ;; Tracked objects:
  2245 ;;		On entry : 0/0
  2246 ;;		On exit  : 0/0
  2247 ;;		Unchanged: 0/0
  2248 ;; Data sizes:     COMMON   BANK0   BANK1
  2249 ;;      Params:         0       0       0
  2250 ;;      Locals:         0      13       0
  2251 ;;      Temps:          0       1       0
  2252 ;;      Totals:         0      14       0
  2253 ;;Total ram usage:       14 bytes
  2254 ;; Hardware stack levels used:    1
  2255 ;; Hardware stack levels required when called:    4
  2256 ;; This function calls:
  2257 ;;		_ADC_2
  2258 ;;		_ADC_4
  2259 ;;		_ADC_5
  2260 ;;		_lputs_ISR
  2261 ;; This function is called by:
  2262 ;;		_mess_handler
  2263 ;; This function uses a non-reentrant model
  2264 ;;
  2265                           
  2266                           
  2267                           ;psect for function _read_ADC_channels
  2268  025F                     _read_ADC_channels:	
  2269                           
  2270                           ;comm.c: 82: unsigned char aux[7];
  2271                           ;comm.c: 83: unsigned short value1,value2,value3;
  2272                           ;comm.c: 86: value1 = ADC_2();
  2273                           
  2274                           ;incstack = 0
  2275                           ; Regs used in _read_ADC_channels: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2276  025F  2362               	fcall	_ADC_2
  2277  0260  0020               	movlb	0	; select bank0
  2278  0261  084D               	movf	?_ADC_2+1,w
  2279  0262  00DB               	movwf	read_ADC_channels@value1+1
  2280  0263  084C               	movf	?_ADC_2,w
  2281  0264  00DA               	movwf	read_ADC_channels@value1
  2282                           
  2283                           ;comm.c: 88: value2 = ADC_4();
  2284  0265  233F               	fcall	_ADC_4
  2285  0266  0020               	movlb	0	; select bank0
  2286  0267  084D               	movf	?_ADC_4+1,w
  2287  0268  00DD               	movwf	read_ADC_channels@value2+1
  2288  0269  084C               	movf	?_ADC_4,w
  2289  026A  00DC               	movwf	read_ADC_channels@value2
  2290                           
  2291                           ;comm.c: 90: value3 = ADC_5();
  2292  026B  231C               	fcall	_ADC_5
  2293  026C  0020               	movlb	0	; select bank0
  2294  026D  084D               	movf	?_ADC_5+1,w
  2295  026E  00DF               	movwf	read_ADC_channels@value3+1
  2296  026F  084C               	movf	?_ADC_5,w
  2297  0270  00DE               	movwf	read_ADC_channels@value3
  2298                           
  2299                           ;comm.c: 91: { ADCON0 = 0b00100100;};
  2300  0271  3024               	movlw	36
  2301  0272  0021               	movlb	1	; select bank1
  2302  0273  009D               	movwf	29	;volatile
  2303                           
  2304                           ;comm.c: 93: aux[0] = 'm';
  2305  0274  306D               	movlw	109
  2306  0275  0020               	movlb	0	; select bank0
  2307  0276  00D2               	movwf	??_read_ADC_channels
  2308  0277  0852               	movf	??_read_ADC_channels,w
  2309  0278  00D3               	movwf	read_ADC_channels@aux
  2310                           
  2311                           ;comm.c: 94: aux[1] = (unsigned char)(value1 & 0xff);
  2312  0279  085A               	movf	read_ADC_channels@value1,w
  2313  027A  00D2               	movwf	??_read_ADC_channels
  2314  027B  0852               	movf	??_read_ADC_channels,w
  2315  027C  00D4               	movwf	read_ADC_channels@aux+1
  2316                           
  2317                           ;comm.c: 95: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  2318  027D  085B               	movf	read_ADC_channels@value1+1,w
  2319  027E  00D2               	movwf	??_read_ADC_channels
  2320  027F  0852               	movf	??_read_ADC_channels,w
  2321  0280  00D5               	movwf	read_ADC_channels@aux+2
  2322                           
  2323                           ;comm.c: 96: aux[3] = (unsigned char)(value2 & 0xff);
  2324  0281  085C               	movf	read_ADC_channels@value2,w
  2325  0282  00D2               	movwf	??_read_ADC_channels
  2326  0283  0852               	movf	??_read_ADC_channels,w
  2327  0284  00D6               	movwf	read_ADC_channels@aux+3
  2328                           
  2329                           ;comm.c: 97: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  2330  0285  085D               	movf	read_ADC_channels@value2+1,w
  2331  0286  00D2               	movwf	??_read_ADC_channels
  2332  0287  0852               	movf	??_read_ADC_channels,w
  2333  0288  00D7               	movwf	read_ADC_channels@aux+4
  2334                           
  2335                           ;comm.c: 98: aux[5] = (unsigned char)(value3 & 0xff);
  2336  0289  085E               	movf	read_ADC_channels@value3,w
  2337  028A  00D2               	movwf	??_read_ADC_channels
  2338  028B  0852               	movf	??_read_ADC_channels,w
  2339  028C  00D8               	movwf	read_ADC_channels@aux+5
  2340                           
  2341                           ;comm.c: 99: aux[6] = (unsigned char)((value3 >> 8) & 0xff);
  2342  028D  085F               	movf	read_ADC_channels@value3+1,w
  2343  028E  00D2               	movwf	??_read_ADC_channels
  2344  028F  0852               	movf	??_read_ADC_channels,w
  2345  0290  00D9               	movwf	read_ADC_channels@aux+6
  2346                           
  2347                           ;comm.c: 101: lputs_ISR(aux,7);
  2348  0291  3007               	movlw	7
  2349  0292  00D2               	movwf	??_read_ADC_channels
  2350  0293  0852               	movf	??_read_ADC_channels,w
  2351  0294  00CC               	movwf	lputs_ISR@length
  2352  0295  3053               	movlw	(low (read_ADC_channels@aux| 0))& (0+255)
  2353  0296  22C6               	fcall	_lputs_ISR
  2354  0297  0008               	return
  2355  0298                     __end_of_read_ADC_channels:	
  2356                           
  2357                           	psect	text8
  2358  0220                     __ptext8:	
  2359 ;; *************** function _measure_Offset *****************
  2360 ;; Defined at:
  2361 ;;		line 254 in file "comm.c"
  2362 ;; Parameters:    Size  Location     Type
  2363 ;;		None
  2364 ;; Auto vars:     Size  Location     Type
  2365 ;;  aux             5    7[BANK0 ] unsigned char [5]
  2366 ;;  asic            2   16[BANK0 ] struct .
  2367 ;;  value2          2   14[BANK0 ] unsigned short 
  2368 ;;  value1          2   12[BANK0 ] unsigned short 
  2369 ;; Return value:  Size  Location     Type
  2370 ;;                  1    wreg      void 
  2371 ;; Registers used:
  2372 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2373 ;; Tracked objects:
  2374 ;;		On entry : 0/0
  2375 ;;		On exit  : 0/0
  2376 ;;		Unchanged: 0/0
  2377 ;; Data sizes:     COMMON   BANK0   BANK1
  2378 ;;      Params:         0       0       0
  2379 ;;      Locals:         0      11       0
  2380 ;;      Temps:          0       1       0
  2381 ;;      Totals:         0      12       0
  2382 ;;Total ram usage:       12 bytes
  2383 ;; Hardware stack levels used:    1
  2384 ;; Hardware stack levels required when called:    4
  2385 ;; This function calls:
  2386 ;;		_ADC_2
  2387 ;;		_ADC_4
  2388 ;;		_BIO_config
  2389 ;;		_lputs_ISR
  2390 ;; This function is called by:
  2391 ;;		_mess_handler
  2392 ;; This function uses a non-reentrant model
  2393 ;;
  2394                           
  2395                           
  2396                           ;psect for function _measure_Offset
  2397  0220                     _measure_Offset:	
  2398                           
  2399                           ;comm.c: 256: unsigned char aux[5];
  2400                           ;comm.c: 257: unsigned short value1,value2;
  2401                           ;comm.c: 260: BIO3 asic;
  2402                           ;comm.c: 266: aux[0] = 'o';
  2403                           
  2404                           ;incstack = 0
  2405                           ; Regs used in _measure_Offset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2406  0220  306F               	movlw	111
  2407  0221  0020               	movlb	0	; select bank0
  2408  0222  00D2               	movwf	??_measure_Offset
  2409  0223  0852               	movf	??_measure_Offset,w
  2410  0224  00D3               	movwf	measure_Offset@aux
  2411                           
  2412                           ;comm.c: 269: asic.data[0] = (unsigned short)(mess_rec[1]);
  2413  0225  0843               	movf	_mess_rec+1,w	;volatile
  2414  0226  00D2               	movwf	??_measure_Offset
  2415  0227  0852               	movf	??_measure_Offset,w
  2416  0228  00DC               	movwf	measure_Offset@asic
  2417                           
  2418                           ;comm.c: 270: asic.data[1] = (unsigned short)(mess_rec[2]);
  2419  0229  0844               	movf	_mess_rec+2,w	;volatile
  2420  022A  00D2               	movwf	??_measure_Offset
  2421  022B  0852               	movf	??_measure_Offset,w
  2422  022C  00DD               	movwf	measure_Offset@asic+1
  2423                           
  2424                           ;comm.c: 273: asic.data_bits.CE = 0;
  2425  022D  135C               	bcf	measure_Offset@asic,6
  2426                           
  2427                           ;comm.c: 274: BIO_config(asic);
  2428  022E  085D               	movf	measure_Offset@asic+1,w
  2429  022F  00CD               	movwf	BIO_config@conf+1
  2430  0230  085C               	movf	measure_Offset@asic,w
  2431  0231  00CC               	movwf	BIO_config@conf
  2432  0232  22F1               	fcall	_BIO_config
  2433                           
  2434                           ;comm.c: 287: _delay((unsigned long)((20)*(500000/4000.0)));
  2435  0233  3004               	movlw	4
  2436  0234  0020               	movlb	0	; select bank0
  2437  0235  00D2               	movwf	??_measure_Offset
  2438  0236  303D               	movlw	61
  2439  0237                     u877:	
  2440  0237  0B89               	decfsz	9,f
  2441  0238  2A37               	goto	u877
  2442  0239  0BD2               	decfsz	??_measure_Offset,f
  2443  023A  2A37               	goto	u877
  2444  023B  3200               	nop2
  2445                           
  2446                           ;comm.c: 289: value1 = ADC_2();
  2447  023C  2362               	fcall	_ADC_2
  2448  023D  0020               	movlb	0	; select bank0
  2449  023E  084D               	movf	?_ADC_2+1,w
  2450  023F  00D9               	movwf	measure_Offset@value1+1
  2451  0240  084C               	movf	?_ADC_2,w
  2452  0241  00D8               	movwf	measure_Offset@value1
  2453                           
  2454                           ;comm.c: 290: value2 = ADC_4();
  2455  0242  233F               	fcall	_ADC_4
  2456  0243  0020               	movlb	0	; select bank0
  2457  0244  084D               	movf	?_ADC_4+1,w
  2458  0245  00DB               	movwf	measure_Offset@value2+1
  2459  0246  084C               	movf	?_ADC_4,w
  2460  0247  00DA               	movwf	measure_Offset@value2
  2461                           
  2462                           ;comm.c: 292: aux[1] = (unsigned char)(value1 & 0xff);
  2463  0248  0858               	movf	measure_Offset@value1,w
  2464  0249  00D2               	movwf	??_measure_Offset
  2465  024A  0852               	movf	??_measure_Offset,w
  2466  024B  00D4               	movwf	measure_Offset@aux+1
  2467                           
  2468                           ;comm.c: 293: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  2469  024C  0859               	movf	measure_Offset@value1+1,w
  2470  024D  00D2               	movwf	??_measure_Offset
  2471  024E  0852               	movf	??_measure_Offset,w
  2472  024F  00D5               	movwf	measure_Offset@aux+2
  2473                           
  2474                           ;comm.c: 294: aux[3] = (unsigned char)(value2 & 0xff);
  2475  0250  085A               	movf	measure_Offset@value2,w
  2476  0251  00D2               	movwf	??_measure_Offset
  2477  0252  0852               	movf	??_measure_Offset,w
  2478  0253  00D6               	movwf	measure_Offset@aux+3
  2479                           
  2480                           ;comm.c: 295: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  2481  0254  085B               	movf	measure_Offset@value2+1,w
  2482  0255  00D2               	movwf	??_measure_Offset
  2483  0256  0852               	movf	??_measure_Offset,w
  2484  0257  00D7               	movwf	measure_Offset@aux+4
  2485                           
  2486                           ;comm.c: 298: lputs_ISR(aux,5);
  2487  0258  3005               	movlw	5
  2488  0259  00D2               	movwf	??_measure_Offset
  2489  025A  0852               	movf	??_measure_Offset,w
  2490  025B  00CC               	movwf	lputs_ISR@length
  2491  025C  3053               	movlw	(low (measure_Offset@aux| 0))& (0+255)
  2492  025D  22C6               	fcall	_lputs_ISR
  2493  025E  0008               	return
  2494  025F                     __end_of_measure_Offset:	
  2495                           
  2496                           	psect	text9
  2497  0175                     __ptext9:	
  2498 ;; *************** function _measure_Impedance_no_offset *****************
  2499 ;; Defined at:
  2500 ;;		line 189 in file "comm.c"
  2501 ;; Parameters:    Size  Location     Type
  2502 ;;		None
  2503 ;; Auto vars:     Size  Location     Type
  2504 ;;  aux            13    7[BANK0 ] unsigned char [13]
  2505 ;;  asic            2   24[BANK0 ] struct .
  2506 ;;  value2          2   22[BANK0 ] unsigned short 
  2507 ;;  value1          2   20[BANK0 ] unsigned short 
  2508 ;;  value3          2    0        unsigned short 
  2509 ;; Return value:  Size  Location     Type
  2510 ;;                  1    wreg      void 
  2511 ;; Registers used:
  2512 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2513 ;; Tracked objects:
  2514 ;;		On entry : 0/0
  2515 ;;		On exit  : 0/0
  2516 ;;		Unchanged: 0/0
  2517 ;; Data sizes:     COMMON   BANK0   BANK1
  2518 ;;      Params:         0       0       0
  2519 ;;      Locals:         0      19       0
  2520 ;;      Temps:          0       1       0
  2521 ;;      Totals:         0      20       0
  2522 ;;Total ram usage:       20 bytes
  2523 ;; Hardware stack levels used:    1
  2524 ;; Hardware stack levels required when called:    4
  2525 ;; This function calls:
  2526 ;;		_ADC_2
  2527 ;;		_ADC_4
  2528 ;;		_BIO_config
  2529 ;;		_lputs_ISR
  2530 ;; This function is called by:
  2531 ;;		_mess_handler
  2532 ;; This function uses a non-reentrant model
  2533 ;;
  2534                           
  2535                           
  2536                           ;psect for function _measure_Impedance_no_offset
  2537  0175                     _measure_Impedance_no_offset:	
  2538                           
  2539                           ;comm.c: 191: unsigned char aux[13];
  2540                           ;comm.c: 192: unsigned short value1,value2,value3;
  2541                           ;comm.c: 195: BIO3 asic;
  2542                           ;comm.c: 200: aux[0] = 'y';
  2543                           
  2544                           ;incstack = 0
  2545                           ; Regs used in _measure_Impedance_no_offset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  2546  0175  3079               	movlw	121
  2547  0176  0020               	movlb	0	; select bank0
  2548  0177  00D2               	movwf	??_measure_Impedance_no_offset
  2549  0178  0852               	movf	??_measure_Impedance_no_offset,w
  2550  0179  00D3               	movwf	measure_Impedance_no_offset@aux
  2551                           
  2552                           ;comm.c: 203: asic.data[0] = (unsigned short)(mess_rec[1]);
  2553  017A  0843               	movf	_mess_rec+1,w	;volatile
  2554  017B  00D2               	movwf	??_measure_Impedance_no_offset
  2555  017C  0852               	movf	??_measure_Impedance_no_offset,w
  2556  017D  00E4               	movwf	measure_Impedance_no_offset@asic
  2557                           
  2558                           ;comm.c: 204: asic.data[1] = (unsigned short)(mess_rec[2]);
  2559  017E  0844               	movf	_mess_rec+2,w	;volatile
  2560  017F  00D2               	movwf	??_measure_Impedance_no_offset
  2561  0180  0852               	movf	??_measure_Impedance_no_offset,w
  2562  0181  00E5               	movwf	measure_Impedance_no_offset@asic+1
  2563                           
  2564                           ;comm.c: 214: asic.data_bits.CE = 1;
  2565  0182  1764               	bsf	measure_Impedance_no_offset@asic,6
  2566                           
  2567                           ;comm.c: 215: asic.data_bits.IQ = 0;
  2568  0183  11E5               	bcf	measure_Impedance_no_offset@asic+1,3
  2569                           
  2570                           ;comm.c: 218: BIO_config(asic);
  2571  0184  0865               	movf	measure_Impedance_no_offset@asic+1,w
  2572  0185  00CD               	movwf	BIO_config@conf+1
  2573  0186  0864               	movf	measure_Impedance_no_offset@asic,w
  2574  0187  00CC               	movwf	BIO_config@conf
  2575  0188  22F1               	fcall	_BIO_config
  2576                           
  2577                           ;comm.c: 222: _delay((unsigned long)((20)*(500000/4000.0)));
  2578  0189  3004               	movlw	4
  2579  018A  0020               	movlb	0	; select bank0
  2580  018B  00D2               	movwf	??_measure_Impedance_no_offset
  2581  018C  303D               	movlw	61
  2582  018D                     u887:	
  2583  018D  0B89               	decfsz	9,f
  2584  018E  298D               	goto	u887
  2585  018F  0BD2               	decfsz	??_measure_Impedance_no_offset,f
  2586  0190  298D               	goto	u887
  2587  0191  3200               	nop2
  2588                           
  2589                           ;comm.c: 224: value1 = ADC_2();
  2590  0192  2362               	fcall	_ADC_2
  2591  0193  0020               	movlb	0	; select bank0
  2592  0194  084D               	movf	?_ADC_2+1,w
  2593  0195  00E1               	movwf	measure_Impedance_no_offset@value1+1
  2594  0196  084C               	movf	?_ADC_2,w
  2595  0197  00E0               	movwf	measure_Impedance_no_offset@value1
  2596                           
  2597                           ;comm.c: 225: value2 = ADC_4();
  2598  0198  233F               	fcall	_ADC_4
  2599  0199  0020               	movlb	0	; select bank0
  2600  019A  084D               	movf	?_ADC_4+1,w
  2601  019B  00E3               	movwf	measure_Impedance_no_offset@value2+1
  2602  019C  084C               	movf	?_ADC_4,w
  2603  019D  00E2               	movwf	measure_Impedance_no_offset@value2
  2604                           
  2605                           ;comm.c: 227: aux[1] = (unsigned char)(value1 & 0xff);
  2606  019E  0860               	movf	measure_Impedance_no_offset@value1,w
  2607  019F  00D2               	movwf	??_measure_Impedance_no_offset
  2608  01A0  0852               	movf	??_measure_Impedance_no_offset,w
  2609  01A1  00D4               	movwf	measure_Impedance_no_offset@aux+1
  2610                           
  2611                           ;comm.c: 228: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  2612  01A2  0861               	movf	measure_Impedance_no_offset@value1+1,w
  2613  01A3  00D2               	movwf	??_measure_Impedance_no_offset
  2614  01A4  0852               	movf	??_measure_Impedance_no_offset,w
  2615  01A5  00D5               	movwf	measure_Impedance_no_offset@aux+2
  2616                           
  2617                           ;comm.c: 229: aux[3] = (unsigned char)(value2 & 0xff);
  2618  01A6  0862               	movf	measure_Impedance_no_offset@value2,w
  2619  01A7  00D2               	movwf	??_measure_Impedance_no_offset
  2620  01A8  0852               	movf	??_measure_Impedance_no_offset,w
  2621  01A9  00D6               	movwf	measure_Impedance_no_offset@aux+3
  2622                           
  2623                           ;comm.c: 230: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  2624  01AA  0863               	movf	measure_Impedance_no_offset@value2+1,w
  2625  01AB  00D2               	movwf	??_measure_Impedance_no_offset
  2626  01AC  0852               	movf	??_measure_Impedance_no_offset,w
  2627  01AD  00D7               	movwf	measure_Impedance_no_offset@aux+4
  2628                           
  2629                           ;comm.c: 233: asic.data_bits.IQ = 1;
  2630  01AE  15E5               	bsf	measure_Impedance_no_offset@asic+1,3
  2631                           
  2632                           ;comm.c: 236: BIO_config(asic);
  2633  01AF  0865               	movf	measure_Impedance_no_offset@asic+1,w
  2634  01B0  00CD               	movwf	BIO_config@conf+1
  2635  01B1  0864               	movf	measure_Impedance_no_offset@asic,w
  2636  01B2  00CC               	movwf	BIO_config@conf
  2637  01B3  22F1               	fcall	_BIO_config
  2638                           
  2639                           ;comm.c: 240: _delay((unsigned long)((20)*(500000/4000.0)));
  2640  01B4  3004               	movlw	4
  2641  01B5  0020               	movlb	0	; select bank0
  2642  01B6  00D2               	movwf	??_measure_Impedance_no_offset
  2643  01B7  303D               	movlw	61
  2644  01B8                     u897:	
  2645  01B8  0B89               	decfsz	9,f
  2646  01B9  29B8               	goto	u897
  2647  01BA  0BD2               	decfsz	??_measure_Impedance_no_offset,f
  2648  01BB  29B8               	goto	u897
  2649  01BC  3200               	nop2
  2650                           
  2651                           ;comm.c: 242: value1 = ADC_2();
  2652  01BD  2362               	fcall	_ADC_2
  2653  01BE  0020               	movlb	0	; select bank0
  2654  01BF  084D               	movf	?_ADC_2+1,w
  2655  01C0  00E1               	movwf	measure_Impedance_no_offset@value1+1
  2656  01C1  084C               	movf	?_ADC_2,w
  2657  01C2  00E0               	movwf	measure_Impedance_no_offset@value1
  2658                           
  2659                           ;comm.c: 243: value2 = ADC_4();
  2660  01C3  233F               	fcall	_ADC_4
  2661  01C4  0020               	movlb	0	; select bank0
  2662  01C5  084D               	movf	?_ADC_4+1,w
  2663  01C6  00E3               	movwf	measure_Impedance_no_offset@value2+1
  2664  01C7  084C               	movf	?_ADC_4,w
  2665  01C8  00E2               	movwf	measure_Impedance_no_offset@value2
  2666                           
  2667                           ;comm.c: 245: aux[5] = (unsigned char)(value1 & 0xff);
  2668  01C9  0860               	movf	measure_Impedance_no_offset@value1,w
  2669  01CA  00D2               	movwf	??_measure_Impedance_no_offset
  2670  01CB  0852               	movf	??_measure_Impedance_no_offset,w
  2671  01CC  00D8               	movwf	measure_Impedance_no_offset@aux+5
  2672                           
  2673                           ;comm.c: 246: aux[6] = (unsigned char)((value1 >> 8) & 0xff);
  2674  01CD  0861               	movf	measure_Impedance_no_offset@value1+1,w
  2675  01CE  00D2               	movwf	??_measure_Impedance_no_offset
  2676  01CF  0852               	movf	??_measure_Impedance_no_offset,w
  2677  01D0  00D9               	movwf	measure_Impedance_no_offset@aux+6
  2678                           
  2679                           ;comm.c: 247: aux[7] = (unsigned char)(value2 & 0xff);
  2680  01D1  0862               	movf	measure_Impedance_no_offset@value2,w
  2681  01D2  00D2               	movwf	??_measure_Impedance_no_offset
  2682  01D3  0852               	movf	??_measure_Impedance_no_offset,w
  2683  01D4  00DA               	movwf	measure_Impedance_no_offset@aux+7
  2684                           
  2685                           ;comm.c: 248: aux[8] = (unsigned char)((value2 >> 8) & 0xff);
  2686  01D5  0863               	movf	measure_Impedance_no_offset@value2+1,w
  2687  01D6  00D2               	movwf	??_measure_Impedance_no_offset
  2688  01D7  0852               	movf	??_measure_Impedance_no_offset,w
  2689  01D8  00DB               	movwf	measure_Impedance_no_offset@aux+8
  2690                           
  2691                           ;comm.c: 251: lputs_ISR(aux,9);
  2692  01D9  3009               	movlw	9
  2693  01DA  00D2               	movwf	??_measure_Impedance_no_offset
  2694  01DB  0852               	movf	??_measure_Impedance_no_offset,w
  2695  01DC  00CC               	movwf	lputs_ISR@length
  2696  01DD  3053               	movlw	(low (measure_Impedance_no_offset@aux| 0))& (0+255)
  2697  01DE  22C6               	fcall	_lputs_ISR
  2698  01DF  0008               	return
  2699  01E0                     __end_of_measure_Impedance_no_offset:	
  2700                           
  2701                           	psect	text10
  2702  00FB                     __ptext10:	
  2703 ;; *************** function _measure_Impedance_SE *****************
  2704 ;; Defined at:
  2705 ;;		line 303 in file "comm.c"
  2706 ;; Parameters:    Size  Location     Type
  2707 ;;		None
  2708 ;; Auto vars:     Size  Location     Type
  2709 ;;  aux            13    8[BANK0 ] unsigned char [13]
  2710 ;;  asic            2   24[BANK0 ] struct .
  2711 ;;  value1          2   22[BANK0 ] unsigned short 
  2712 ;;  check           1   21[BANK0 ] unsigned char 
  2713 ;; Return value:  Size  Location     Type
  2714 ;;                  1    wreg      void 
  2715 ;; Registers used:
  2716 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2717 ;; Tracked objects:
  2718 ;;		On entry : 0/0
  2719 ;;		On exit  : 0/0
  2720 ;;		Unchanged: 0/0
  2721 ;; Data sizes:     COMMON   BANK0   BANK1
  2722 ;;      Params:         0       0       0
  2723 ;;      Locals:         0      18       0
  2724 ;;      Temps:          0       2       0
  2725 ;;      Totals:         0      20       0
  2726 ;;Total ram usage:       20 bytes
  2727 ;; Hardware stack levels used:    1
  2728 ;; Hardware stack levels required when called:    4
  2729 ;; This function calls:
  2730 ;;		_ADC_5
  2731 ;;		_BIO_config
  2732 ;;		_calculate_checksum
  2733 ;;		_lputs_ISR
  2734 ;; This function is called by:
  2735 ;;		_mess_handler
  2736 ;; This function uses a non-reentrant model
  2737 ;;
  2738                           
  2739                           
  2740                           ;psect for function _measure_Impedance_SE
  2741  00FB                     _measure_Impedance_SE:	
  2742                           
  2743                           ;comm.c: 305: unsigned char aux[13], check;
  2744                           ;comm.c: 307: unsigned short value1;
  2745                           ;comm.c: 310: BIO3 asic;
  2746                           ;comm.c: 315: aux[0] = 's';
  2747                           
  2748                           ;incstack = 0
  2749                           ; Regs used in _measure_Impedance_SE: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2750  00FB  3073               	movlw	115
  2751  00FC  0020               	movlb	0	; select bank0
  2752  00FD  00D2               	movwf	??_measure_Impedance_SE
  2753  00FE  0852               	movf	??_measure_Impedance_SE,w
  2754  00FF  00D4               	movwf	measure_Impedance_SE@aux
  2755                           
  2756                           ;comm.c: 318: asic.data[0] = (unsigned short)(mess_rec[1]);
  2757  0100  0843               	movf	_mess_rec+1,w	;volatile
  2758  0101  00D2               	movwf	??_measure_Impedance_SE
  2759  0102  0852               	movf	??_measure_Impedance_SE,w
  2760  0103  00E4               	movwf	measure_Impedance_SE@asic
  2761                           
  2762                           ;comm.c: 319: asic.data[1] = (unsigned short)(mess_rec[2]);
  2763  0104  0844               	movf	_mess_rec+2,w	;volatile
  2764  0105  00D2               	movwf	??_measure_Impedance_SE
  2765  0106  0852               	movf	??_measure_Impedance_SE,w
  2766  0107  00E5               	movwf	measure_Impedance_SE@asic+1
  2767                           
  2768                           ;comm.c: 322: asic.data_bits.CE = 0;
  2769  0108  1364               	bcf	measure_Impedance_SE@asic,6
  2770                           
  2771                           ;comm.c: 323: BIO_config(asic);
  2772  0109  0865               	movf	measure_Impedance_SE@asic+1,w
  2773  010A  00CD               	movwf	BIO_config@conf+1
  2774  010B  0864               	movf	measure_Impedance_SE@asic,w
  2775  010C  00CC               	movwf	BIO_config@conf
  2776  010D  22F1               	fcall	_BIO_config
  2777                           
  2778                           ;comm.c: 336: _delay((unsigned long)((20)*(500000/4000.0)));
  2779  010E  3004               	movlw	4
  2780  010F  0020               	movlb	0	; select bank0
  2781  0110  00D2               	movwf	??_measure_Impedance_SE
  2782  0111  303D               	movlw	61
  2783  0112                     u907:	
  2784  0112  0B89               	decfsz	9,f
  2785  0113  2912               	goto	u907
  2786  0114  0BD2               	decfsz	??_measure_Impedance_SE,f
  2787  0115  2912               	goto	u907
  2788  0116  3200               	nop2
  2789                           
  2790                           ;comm.c: 338: value1 = ADC_5();
  2791  0117  231C               	fcall	_ADC_5
  2792  0118  0020               	movlb	0	; select bank0
  2793  0119  084D               	movf	?_ADC_5+1,w
  2794  011A  00E3               	movwf	measure_Impedance_SE@value1+1
  2795  011B  084C               	movf	?_ADC_5,w
  2796  011C  00E2               	movwf	measure_Impedance_SE@value1
  2797                           
  2798                           ;comm.c: 340: aux[1] = (unsigned char)(value1 & 0xff);
  2799  011D  0862               	movf	measure_Impedance_SE@value1,w
  2800  011E  00D2               	movwf	??_measure_Impedance_SE
  2801  011F  0852               	movf	??_measure_Impedance_SE,w
  2802  0120  00D5               	movwf	measure_Impedance_SE@aux+1
  2803                           
  2804                           ;comm.c: 341: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  2805  0121  0863               	movf	measure_Impedance_SE@value1+1,w
  2806  0122  00D2               	movwf	??_measure_Impedance_SE
  2807  0123  0852               	movf	??_measure_Impedance_SE,w
  2808  0124  00D6               	movwf	measure_Impedance_SE@aux+2
  2809                           
  2810                           ;comm.c: 344: asic.data_bits.CE = 1;
  2811  0125  1764               	bsf	measure_Impedance_SE@asic,6
  2812                           
  2813                           ;comm.c: 345: asic.data_bits.IQ = 0;
  2814  0126  11E5               	bcf	measure_Impedance_SE@asic+1,3
  2815                           
  2816                           ;comm.c: 348: BIO_config(asic);
  2817  0127  0865               	movf	measure_Impedance_SE@asic+1,w
  2818  0128  00CD               	movwf	BIO_config@conf+1
  2819  0129  0864               	movf	measure_Impedance_SE@asic,w
  2820  012A  00CC               	movwf	BIO_config@conf
  2821  012B  22F1               	fcall	_BIO_config
  2822                           
  2823                           ;comm.c: 352: _delay((unsigned long)((20)*(500000/4000.0)));
  2824  012C  3004               	movlw	4
  2825  012D  0020               	movlb	0	; select bank0
  2826  012E  00D2               	movwf	??_measure_Impedance_SE
  2827  012F  303D               	movlw	61
  2828  0130                     u917:	
  2829  0130  0B89               	decfsz	9,f
  2830  0131  2930               	goto	u917
  2831  0132  0BD2               	decfsz	??_measure_Impedance_SE,f
  2832  0133  2930               	goto	u917
  2833  0134  3200               	nop2
  2834                           
  2835                           ;comm.c: 354: value1 = ADC_5();
  2836  0135  231C               	fcall	_ADC_5
  2837  0136  0020               	movlb	0	; select bank0
  2838  0137  084D               	movf	?_ADC_5+1,w
  2839  0138  00E3               	movwf	measure_Impedance_SE@value1+1
  2840  0139  084C               	movf	?_ADC_5,w
  2841  013A  00E2               	movwf	measure_Impedance_SE@value1
  2842                           
  2843                           ;comm.c: 356: aux[3] = (unsigned char)(value1 & 0xff);
  2844  013B  0862               	movf	measure_Impedance_SE@value1,w
  2845  013C  00D2               	movwf	??_measure_Impedance_SE
  2846  013D  0852               	movf	??_measure_Impedance_SE,w
  2847  013E  00D7               	movwf	measure_Impedance_SE@aux+3
  2848                           
  2849                           ;comm.c: 357: aux[4] = (unsigned char)((value1 >> 8) & 0xff);
  2850  013F  0863               	movf	measure_Impedance_SE@value1+1,w
  2851  0140  00D2               	movwf	??_measure_Impedance_SE
  2852  0141  0852               	movf	??_measure_Impedance_SE,w
  2853  0142  00D8               	movwf	measure_Impedance_SE@aux+4
  2854                           
  2855                           ;comm.c: 360: asic.data_bits.IQ = 1;
  2856  0143  15E5               	bsf	measure_Impedance_SE@asic+1,3
  2857                           
  2858                           ;comm.c: 363: BIO_config(asic);
  2859  0144  0865               	movf	measure_Impedance_SE@asic+1,w
  2860  0145  00CD               	movwf	BIO_config@conf+1
  2861  0146  0864               	movf	measure_Impedance_SE@asic,w
  2862  0147  00CC               	movwf	BIO_config@conf
  2863  0148  22F1               	fcall	_BIO_config
  2864                           
  2865                           ;comm.c: 367: _delay((unsigned long)((20)*(500000/4000.0)));
  2866  0149  3004               	movlw	4
  2867  014A  0020               	movlb	0	; select bank0
  2868  014B  00D2               	movwf	??_measure_Impedance_SE
  2869  014C  303D               	movlw	61
  2870  014D                     u927:	
  2871  014D  0B89               	decfsz	9,f
  2872  014E  294D               	goto	u927
  2873  014F  0BD2               	decfsz	??_measure_Impedance_SE,f
  2874  0150  294D               	goto	u927
  2875  0151  3200               	nop2
  2876                           
  2877                           ;comm.c: 369: value1 = ADC_5();
  2878  0152  231C               	fcall	_ADC_5
  2879  0153  0020               	movlb	0	; select bank0
  2880  0154  084D               	movf	?_ADC_5+1,w
  2881  0155  00E3               	movwf	measure_Impedance_SE@value1+1
  2882  0156  084C               	movf	?_ADC_5,w
  2883  0157  00E2               	movwf	measure_Impedance_SE@value1
  2884                           
  2885                           ;comm.c: 371: aux[5] = (unsigned char)(value1 & 0xff);
  2886  0158  0862               	movf	measure_Impedance_SE@value1,w
  2887  0159  00D2               	movwf	??_measure_Impedance_SE
  2888  015A  0852               	movf	??_measure_Impedance_SE,w
  2889  015B  00D9               	movwf	measure_Impedance_SE@aux+5
  2890                           
  2891                           ;comm.c: 372: aux[6] = (unsigned char)((value1 >> 8) & 0xff);
  2892  015C  0863               	movf	measure_Impedance_SE@value1+1,w
  2893  015D  00D2               	movwf	??_measure_Impedance_SE
  2894  015E  0852               	movf	??_measure_Impedance_SE,w
  2895  015F  00DA               	movwf	measure_Impedance_SE@aux+6
  2896                           
  2897                           ;comm.c: 376: check = calculate_checksum(aux,7);
  2898  0160  3007               	movlw	7
  2899  0161  00D2               	movwf	??_measure_Impedance_SE
  2900  0162  0852               	movf	??_measure_Impedance_SE,w
  2901  0163  00CC               	movwf	calculate_checksum@num
  2902  0164  3054               	movlw	(low (measure_Impedance_SE@aux| 0))& (0+255)
  2903  0165  2385               	fcall	_calculate_checksum
  2904  0166  0020               	movlb	0	; select bank0
  2905  0167  00D3               	movwf	??_measure_Impedance_SE+1
  2906  0168  0853               	movf	??_measure_Impedance_SE+1,w
  2907  0169  00E1               	movwf	measure_Impedance_SE@check
  2908                           
  2909                           ;comm.c: 377: aux[7] = check;
  2910  016A  0861               	movf	measure_Impedance_SE@check,w
  2911  016B  00D2               	movwf	??_measure_Impedance_SE
  2912  016C  0852               	movf	??_measure_Impedance_SE,w
  2913  016D  00DB               	movwf	measure_Impedance_SE@aux+7
  2914                           
  2915                           ;comm.c: 378: lputs_ISR(aux,8);
  2916  016E  3008               	movlw	8
  2917  016F  00D2               	movwf	??_measure_Impedance_SE
  2918  0170  0852               	movf	??_measure_Impedance_SE,w
  2919  0171  00CC               	movwf	lputs_ISR@length
  2920  0172  3054               	movlw	(low (measure_Impedance_SE@aux| 0))& (0+255)
  2921  0173  22C6               	fcall	_lputs_ISR
  2922  0174  0008               	return
  2923  0175                     __end_of_measure_Impedance_SE:	
  2924                           
  2925                           	psect	text11
  2926  0385                     __ptext11:	
  2927 ;; *************** function _calculate_checksum *****************
  2928 ;; Defined at:
  2929 ;;		line 386 in file "comm.c"
  2930 ;; Parameters:    Size  Location     Type
  2931 ;;  data            1    wreg     PTR unsigned char 
  2932 ;;		 -> measure_Impedance_SE@aux(13), 
  2933 ;;  num             1    0[BANK0 ] unsigned char 
  2934 ;; Auto vars:     Size  Location     Type
  2935 ;;  data            1    3[BANK0 ] PTR unsigned char 
  2936 ;;		 -> measure_Impedance_SE@aux(13), 
  2937 ;;  i               1    5[BANK0 ] unsigned char 
  2938 ;;  check           1    4[BANK0 ] unsigned char 
  2939 ;; Return value:  Size  Location     Type
  2940 ;;                  1    wreg      unsigned char 
  2941 ;; Registers used:
  2942 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2943 ;; Tracked objects:
  2944 ;;		On entry : 0/0
  2945 ;;		On exit  : 0/0
  2946 ;;		Unchanged: 0/0
  2947 ;; Data sizes:     COMMON   BANK0   BANK1
  2948 ;;      Params:         0       1       0
  2949 ;;      Locals:         0       3       0
  2950 ;;      Temps:          0       2       0
  2951 ;;      Totals:         0       6       0
  2952 ;;Total ram usage:        6 bytes
  2953 ;; Hardware stack levels used:    1
  2954 ;; Hardware stack levels required when called:    2
  2955 ;; This function calls:
  2956 ;;		Nothing
  2957 ;; This function is called by:
  2958 ;;		_measure_Impedance_SE
  2959 ;; This function uses a non-reentrant model
  2960 ;;
  2961                           
  2962                           
  2963                           ;psect for function _calculate_checksum
  2964  0385                     _calculate_checksum:	
  2965                           
  2966                           ;incstack = 0
  2967                           ; Regs used in _calculate_checksum: [wreg+fsr1l+fsr1h+status,2+status,0]
  2968                           ;calculate_checksum@data stored from wreg
  2969  0385  0020               	movlb	0	; select bank0
  2970  0386  00CF               	movwf	calculate_checksum@data
  2971                           
  2972                           ;comm.c: 388: unsigned char check, i;
  2973                           ;comm.c: 390: check = 0;
  2974  0387  01D0               	clrf	calculate_checksum@check
  2975                           
  2976                           ;comm.c: 391: for (i = 0; i < num; i++) {
  2977  0388  01D1               	clrf	calculate_checksum@i
  2978  0389                     l2128:	
  2979  0389  084C               	movf	calculate_checksum@num,w
  2980  038A  0251               	subwf	calculate_checksum@i,w
  2981  038B  1803               	btfsc	3,0
  2982  038C  2B9C               	goto	l2130
  2983                           
  2984                           ;comm.c: 392: check ^= data[i];
  2985  038D  0851               	movf	calculate_checksum@i,w
  2986  038E  074F               	addwf	calculate_checksum@data,w
  2987  038F  00CD               	movwf	??_calculate_checksum
  2988  0390  084D               	movf	??_calculate_checksum,w
  2989  0391  0086               	movwf	6
  2990  0392  0187               	clrf	7
  2991  0393  0801               	movf	1,w
  2992  0394  00CE               	movwf	??_calculate_checksum+1
  2993  0395  084E               	movf	??_calculate_checksum+1,w
  2994  0396  06D0               	xorwf	calculate_checksum@check,f
  2995  0397  3001               	movlw	1
  2996  0398  00CD               	movwf	??_calculate_checksum
  2997  0399  084D               	movf	??_calculate_checksum,w
  2998  039A  07D1               	addwf	calculate_checksum@i,f
  2999  039B  2B89               	goto	l2128
  3000  039C                     l2130:	
  3001                           
  3002                           ;comm.c: 393: }
  3003                           ;comm.c: 395: return check;
  3004  039C  0850               	movf	calculate_checksum@check,w
  3005  039D  0008               	return
  3006  039E                     __end_of_calculate_checksum:	
  3007                           
  3008                           	psect	text12
  3009  031C                     __ptext12:	
  3010 ;; *************** function _ADC_5 *****************
  3011 ;; Defined at:
  3012 ;;		line 48 in file "ADC1823.c"
  3013 ;; Parameters:    Size  Location     Type
  3014 ;;		None
  3015 ;; Auto vars:     Size  Location     Type
  3016 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  3017 ;; Return value:  Size  Location     Type
  3018 ;;                  2    0[BANK0 ] unsigned short 
  3019 ;; Registers used:
  3020 ;;		wreg
  3021 ;; Tracked objects:
  3022 ;;		On entry : 0/0
  3023 ;;		On exit  : 0/0
  3024 ;;		Unchanged: 0/0
  3025 ;; Data sizes:     COMMON   BANK0   BANK1
  3026 ;;      Params:         0       2       0
  3027 ;;      Locals:         0       2       0
  3028 ;;      Temps:          0       2       0
  3029 ;;      Totals:         0       6       0
  3030 ;;Total ram usage:        6 bytes
  3031 ;; Hardware stack levels used:    1
  3032 ;; Hardware stack levels required when called:    2
  3033 ;; This function calls:
  3034 ;;		Nothing
  3035 ;; This function is called by:
  3036 ;;		_read_ADC_channels
  3037 ;;		_measure_Impedance_SE
  3038 ;; This function uses a non-reentrant model
  3039 ;;
  3040                           
  3041                           
  3042                           ;psect for function _ADC_5
  3043  031C                     _ADC_5:	
  3044                           
  3045                           ;ADC1823.c: 50: unsigned short ADC_value;
  3046                           ;ADC1823.c: 52: { ADCON0 = 0b00010101;};
  3047                           
  3048                           ;incstack = 0
  3049                           ; Regs used in _ADC_5: [wreg]
  3050  031C  3015               	movlw	21
  3051  031D  0021               	movlb	1	; select bank1
  3052  031E  009D               	movwf	29	;volatile
  3053                           
  3054                           ;ADC1823.c: 53: __nop();
  3055  031F  0000               	nop
  3056                           
  3057                           ;ADC1823.c: 54: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  3058  0320  0021               	movlb	1	; select bank1
  3059  0321  149D               	bsf	29,1	;volatile
  3060  0322                     l395:	
  3061  0322  189D               	btfsc	29,1	;volatile
  3062  0323  2B22               	goto	l395
  3063  0324  081C               	movf	28,w	;volatile
  3064  0325  0020               	movlb	0	; select bank0
  3065  0326  00CE               	movwf	??_ADC_5
  3066  0327  01CF               	clrf	??_ADC_5+1
  3067  0328  084E               	movf	??_ADC_5,w
  3068  0329  00D0               	movwf	ADC_5@ADC_value
  3069  032A  084F               	movf	??_ADC_5+1,w
  3070  032B  00D1               	movwf	ADC_5@ADC_value+1
  3071  032C  3008               	movlw	8
  3072  032D                     u805:	
  3073  032D  35D0               	lslf	ADC_5@ADC_value,f
  3074  032E  0DD1               	rlf	ADC_5@ADC_value+1,f
  3075  032F  0B89               	decfsz	9,f
  3076  0330  2B2D               	goto	u805
  3077  0331  0021               	movlb	1	; select bank1
  3078  0332  081B               	movf	27,w	;volatile
  3079  0333  0020               	movlb	0	; select bank0
  3080  0334  00CE               	movwf	??_ADC_5
  3081  0335  01CF               	clrf	??_ADC_5+1
  3082  0336  084E               	movf	??_ADC_5,w
  3083  0337  04D0               	iorwf	ADC_5@ADC_value,f
  3084  0338  084F               	movf	??_ADC_5+1,w
  3085  0339  04D1               	iorwf	ADC_5@ADC_value+1,f
  3086                           
  3087                           ;ADC1823.c: 55: return ADC_value;
  3088  033A  0851               	movf	ADC_5@ADC_value+1,w
  3089  033B  00CD               	movwf	?_ADC_5+1
  3090  033C  0850               	movf	ADC_5@ADC_value,w
  3091  033D  00CC               	movwf	?_ADC_5
  3092  033E  0008               	return
  3093  033F                     __end_of_ADC_5:	
  3094                           
  3095                           	psect	text13
  3096  0065                     __ptext13:	
  3097 ;; *************** function _measure_Impedance *****************
  3098 ;; Defined at:
  3099 ;;		line 104 in file "comm.c"
  3100 ;; Parameters:    Size  Location     Type
  3101 ;;		None
  3102 ;; Auto vars:     Size  Location     Type
  3103 ;;  aux            13    7[BANK0 ] unsigned char [13]
  3104 ;;  asic            2   24[BANK0 ] struct .
  3105 ;;  value2          2   22[BANK0 ] unsigned short 
  3106 ;;  value1          2   20[BANK0 ] unsigned short 
  3107 ;;  value3          2    0        unsigned short 
  3108 ;; Return value:  Size  Location     Type
  3109 ;;                  1    wreg      void 
  3110 ;; Registers used:
  3111 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3112 ;; Tracked objects:
  3113 ;;		On entry : 0/0
  3114 ;;		On exit  : 0/0
  3115 ;;		Unchanged: 0/0
  3116 ;; Data sizes:     COMMON   BANK0   BANK1
  3117 ;;      Params:         0       0       0
  3118 ;;      Locals:         0      19       0
  3119 ;;      Temps:          0       1       0
  3120 ;;      Totals:         0      20       0
  3121 ;;Total ram usage:       20 bytes
  3122 ;; Hardware stack levels used:    1
  3123 ;; Hardware stack levels required when called:    4
  3124 ;; This function calls:
  3125 ;;		_ADC_2
  3126 ;;		_ADC_4
  3127 ;;		_BIO_config
  3128 ;;		_lputs_ISR
  3129 ;; This function is called by:
  3130 ;;		_mess_handler
  3131 ;; This function uses a non-reentrant model
  3132 ;;
  3133                           
  3134                           
  3135                           ;psect for function _measure_Impedance
  3136  0065                     _measure_Impedance:	
  3137                           
  3138                           ;comm.c: 106: unsigned char aux[13];
  3139                           ;comm.c: 107: unsigned short value1,value2,value3;
  3140                           ;comm.c: 110: BIO3 asic;
  3141                           ;comm.c: 116: aux[0] = 'z';
  3142                           
  3143                           ;incstack = 0
  3144                           ; Regs used in _measure_Impedance: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3145  0065  307A               	movlw	122
  3146  0066  0020               	movlb	0	; select bank0
  3147  0067  00D2               	movwf	??_measure_Impedance
  3148  0068  0852               	movf	??_measure_Impedance,w
  3149  0069  00D3               	movwf	measure_Impedance@aux
  3150                           
  3151                           ;comm.c: 120: asic.data[0] = (unsigned short)(mess_rec[1]);
  3152  006A  0843               	movf	_mess_rec+1,w	;volatile
  3153  006B  00D2               	movwf	??_measure_Impedance
  3154  006C  0852               	movf	??_measure_Impedance,w
  3155  006D  00E4               	movwf	measure_Impedance@asic
  3156                           
  3157                           ;comm.c: 121: asic.data[1] = (unsigned short)(mess_rec[2]);
  3158  006E  0844               	movf	_mess_rec+2,w	;volatile
  3159  006F  00D2               	movwf	??_measure_Impedance
  3160  0070  0852               	movf	??_measure_Impedance,w
  3161  0071  00E5               	movwf	measure_Impedance@asic+1
  3162                           
  3163                           ;comm.c: 124: asic.data_bits.CE = 0;
  3164  0072  1364               	bcf	measure_Impedance@asic,6
  3165                           
  3166                           ;comm.c: 125: BIO_config(asic);
  3167  0073  0865               	movf	measure_Impedance@asic+1,w
  3168  0074  00CD               	movwf	BIO_config@conf+1
  3169  0075  0864               	movf	measure_Impedance@asic,w
  3170  0076  00CC               	movwf	BIO_config@conf
  3171  0077  22F1               	fcall	_BIO_config
  3172                           
  3173                           ;comm.c: 138: _delay((unsigned long)((20)*(500000/4000.0)));
  3174  0078  3004               	movlw	4
  3175  0079  0020               	movlb	0	; select bank0
  3176  007A  00D2               	movwf	??_measure_Impedance
  3177  007B  303D               	movlw	61
  3178  007C                     u937:	
  3179  007C  0B89               	decfsz	9,f
  3180  007D  287C               	goto	u937
  3181  007E  0BD2               	decfsz	??_measure_Impedance,f
  3182  007F  287C               	goto	u937
  3183  0080  3200               	nop2
  3184                           
  3185                           ;comm.c: 140: value1 = ADC_2();
  3186  0081  2362               	fcall	_ADC_2
  3187  0082  0020               	movlb	0	; select bank0
  3188  0083  084D               	movf	?_ADC_2+1,w
  3189  0084  00E1               	movwf	measure_Impedance@value1+1
  3190  0085  084C               	movf	?_ADC_2,w
  3191  0086  00E0               	movwf	measure_Impedance@value1
  3192                           
  3193                           ;comm.c: 141: value2 = ADC_4();
  3194  0087  233F               	fcall	_ADC_4
  3195  0088  0020               	movlb	0	; select bank0
  3196  0089  084D               	movf	?_ADC_4+1,w
  3197  008A  00E3               	movwf	measure_Impedance@value2+1
  3198  008B  084C               	movf	?_ADC_4,w
  3199  008C  00E2               	movwf	measure_Impedance@value2
  3200                           
  3201                           ;comm.c: 143: aux[1] = (unsigned char)(value1 & 0xff);
  3202  008D  0860               	movf	measure_Impedance@value1,w
  3203  008E  00D2               	movwf	??_measure_Impedance
  3204  008F  0852               	movf	??_measure_Impedance,w
  3205  0090  00D4               	movwf	measure_Impedance@aux+1
  3206                           
  3207                           ;comm.c: 144: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  3208  0091  0861               	movf	measure_Impedance@value1+1,w
  3209  0092  00D2               	movwf	??_measure_Impedance
  3210  0093  0852               	movf	??_measure_Impedance,w
  3211  0094  00D5               	movwf	measure_Impedance@aux+2
  3212                           
  3213                           ;comm.c: 145: aux[3] = (unsigned char)(value2 & 0xff);
  3214  0095  0862               	movf	measure_Impedance@value2,w
  3215  0096  00D2               	movwf	??_measure_Impedance
  3216  0097  0852               	movf	??_measure_Impedance,w
  3217  0098  00D6               	movwf	measure_Impedance@aux+3
  3218                           
  3219                           ;comm.c: 146: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  3220  0099  0863               	movf	measure_Impedance@value2+1,w
  3221  009A  00D2               	movwf	??_measure_Impedance
  3222  009B  0852               	movf	??_measure_Impedance,w
  3223  009C  00D7               	movwf	measure_Impedance@aux+4
  3224                           
  3225                           ;comm.c: 149: asic.data_bits.CE = 1;
  3226  009D  1764               	bsf	measure_Impedance@asic,6
  3227                           
  3228                           ;comm.c: 150: asic.data_bits.IQ = 0;
  3229  009E  11E5               	bcf	measure_Impedance@asic+1,3
  3230                           
  3231                           ;comm.c: 153: BIO_config(asic);
  3232  009F  0865               	movf	measure_Impedance@asic+1,w
  3233  00A0  00CD               	movwf	BIO_config@conf+1
  3234  00A1  0864               	movf	measure_Impedance@asic,w
  3235  00A2  00CC               	movwf	BIO_config@conf
  3236  00A3  22F1               	fcall	_BIO_config
  3237                           
  3238                           ;comm.c: 157: _delay((unsigned long)((20)*(500000/4000.0)));
  3239  00A4  3004               	movlw	4
  3240  00A5  0020               	movlb	0	; select bank0
  3241  00A6  00D2               	movwf	??_measure_Impedance
  3242  00A7  303D               	movlw	61
  3243  00A8                     u947:	
  3244  00A8  0B89               	decfsz	9,f
  3245  00A9  28A8               	goto	u947
  3246  00AA  0BD2               	decfsz	??_measure_Impedance,f
  3247  00AB  28A8               	goto	u947
  3248  00AC  3200               	nop2
  3249                           
  3250                           ;comm.c: 159: value1 = ADC_2();
  3251  00AD  2362               	fcall	_ADC_2
  3252  00AE  0020               	movlb	0	; select bank0
  3253  00AF  084D               	movf	?_ADC_2+1,w
  3254  00B0  00E1               	movwf	measure_Impedance@value1+1
  3255  00B1  084C               	movf	?_ADC_2,w
  3256  00B2  00E0               	movwf	measure_Impedance@value1
  3257                           
  3258                           ;comm.c: 160: value2 = ADC_4();
  3259  00B3  233F               	fcall	_ADC_4
  3260  00B4  0020               	movlb	0	; select bank0
  3261  00B5  084D               	movf	?_ADC_4+1,w
  3262  00B6  00E3               	movwf	measure_Impedance@value2+1
  3263  00B7  084C               	movf	?_ADC_4,w
  3264  00B8  00E2               	movwf	measure_Impedance@value2
  3265                           
  3266                           ;comm.c: 162: aux[5] = (unsigned char)(value1 & 0xff);
  3267  00B9  0860               	movf	measure_Impedance@value1,w
  3268  00BA  00D2               	movwf	??_measure_Impedance
  3269  00BB  0852               	movf	??_measure_Impedance,w
  3270  00BC  00D8               	movwf	measure_Impedance@aux+5
  3271                           
  3272                           ;comm.c: 163: aux[6] = (unsigned char)((value1 >> 8) & 0xff);
  3273  00BD  0861               	movf	measure_Impedance@value1+1,w
  3274  00BE  00D2               	movwf	??_measure_Impedance
  3275  00BF  0852               	movf	??_measure_Impedance,w
  3276  00C0  00D9               	movwf	measure_Impedance@aux+6
  3277                           
  3278                           ;comm.c: 164: aux[7] = (unsigned char)(value2 & 0xff);
  3279  00C1  0862               	movf	measure_Impedance@value2,w
  3280  00C2  00D2               	movwf	??_measure_Impedance
  3281  00C3  0852               	movf	??_measure_Impedance,w
  3282  00C4  00DA               	movwf	measure_Impedance@aux+7
  3283                           
  3284                           ;comm.c: 165: aux[8] = (unsigned char)((value2 >> 8) & 0xff);
  3285  00C5  0863               	movf	measure_Impedance@value2+1,w
  3286  00C6  00D2               	movwf	??_measure_Impedance
  3287  00C7  0852               	movf	??_measure_Impedance,w
  3288  00C8  00DB               	movwf	measure_Impedance@aux+8
  3289                           
  3290                           ;comm.c: 168: asic.data_bits.IQ = 1;
  3291  00C9  15E5               	bsf	measure_Impedance@asic+1,3
  3292                           
  3293                           ;comm.c: 171: BIO_config(asic);
  3294  00CA  0865               	movf	measure_Impedance@asic+1,w
  3295  00CB  00CD               	movwf	BIO_config@conf+1
  3296  00CC  0864               	movf	measure_Impedance@asic,w
  3297  00CD  00CC               	movwf	BIO_config@conf
  3298  00CE  22F1               	fcall	_BIO_config
  3299                           
  3300                           ;comm.c: 175: _delay((unsigned long)((20)*(500000/4000.0)));
  3301  00CF  3004               	movlw	4
  3302  00D0  0020               	movlb	0	; select bank0
  3303  00D1  00D2               	movwf	??_measure_Impedance
  3304  00D2  303D               	movlw	61
  3305  00D3                     u957:	
  3306  00D3  0B89               	decfsz	9,f
  3307  00D4  28D3               	goto	u957
  3308  00D5  0BD2               	decfsz	??_measure_Impedance,f
  3309  00D6  28D3               	goto	u957
  3310  00D7  3200               	nop2
  3311                           
  3312                           ;comm.c: 177: value1 = ADC_2();
  3313  00D8  2362               	fcall	_ADC_2
  3314  00D9  0020               	movlb	0	; select bank0
  3315  00DA  084D               	movf	?_ADC_2+1,w
  3316  00DB  00E1               	movwf	measure_Impedance@value1+1
  3317  00DC  084C               	movf	?_ADC_2,w
  3318  00DD  00E0               	movwf	measure_Impedance@value1
  3319                           
  3320                           ;comm.c: 178: value2 = ADC_4();
  3321  00DE  233F               	fcall	_ADC_4
  3322  00DF  0020               	movlb	0	; select bank0
  3323  00E0  084D               	movf	?_ADC_4+1,w
  3324  00E1  00E3               	movwf	measure_Impedance@value2+1
  3325  00E2  084C               	movf	?_ADC_4,w
  3326  00E3  00E2               	movwf	measure_Impedance@value2
  3327                           
  3328                           ;comm.c: 180: aux[9] = (unsigned char)(value1 & 0xff);
  3329  00E4  0860               	movf	measure_Impedance@value1,w
  3330  00E5  00D2               	movwf	??_measure_Impedance
  3331  00E6  0852               	movf	??_measure_Impedance,w
  3332  00E7  00DC               	movwf	measure_Impedance@aux+9
  3333                           
  3334                           ;comm.c: 181: aux[10] = (unsigned char)((value1 >> 8) & 0xff);
  3335  00E8  0861               	movf	measure_Impedance@value1+1,w
  3336  00E9  00D2               	movwf	??_measure_Impedance
  3337  00EA  0852               	movf	??_measure_Impedance,w
  3338  00EB  00DD               	movwf	measure_Impedance@aux+10
  3339                           
  3340                           ;comm.c: 182: aux[11] = (unsigned char)(value2 & 0xff);
  3341  00EC  0862               	movf	measure_Impedance@value2,w
  3342  00ED  00D2               	movwf	??_measure_Impedance
  3343  00EE  0852               	movf	??_measure_Impedance,w
  3344  00EF  00DE               	movwf	measure_Impedance@aux+11
  3345                           
  3346                           ;comm.c: 183: aux[12] = (unsigned char)((value2 >> 8) & 0xff);
  3347  00F0  0863               	movf	measure_Impedance@value2+1,w
  3348  00F1  00D2               	movwf	??_measure_Impedance
  3349  00F2  0852               	movf	??_measure_Impedance,w
  3350  00F3  00DF               	movwf	measure_Impedance@aux+12
  3351                           
  3352                           ;comm.c: 186: lputs_ISR(aux,13);
  3353  00F4  300D               	movlw	13
  3354  00F5  00D2               	movwf	??_measure_Impedance
  3355  00F6  0852               	movf	??_measure_Impedance,w
  3356  00F7  00CC               	movwf	lputs_ISR@length
  3357  00F8  3053               	movlw	(low (measure_Impedance@aux| 0))& (0+255)
  3358  00F9  22C6               	fcall	_lputs_ISR
  3359  00FA  0008               	return
  3360  00FB                     __end_of_measure_Impedance:	
  3361                           
  3362                           	psect	text14
  3363  033F                     __ptext14:	
  3364 ;; *************** function _ADC_4 *****************
  3365 ;; Defined at:
  3366 ;;		line 38 in file "ADC1823.c"
  3367 ;; Parameters:    Size  Location     Type
  3368 ;;		None
  3369 ;; Auto vars:     Size  Location     Type
  3370 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  3371 ;; Return value:  Size  Location     Type
  3372 ;;                  2    0[BANK0 ] unsigned short 
  3373 ;; Registers used:
  3374 ;;		wreg
  3375 ;; Tracked objects:
  3376 ;;		On entry : 0/0
  3377 ;;		On exit  : 0/0
  3378 ;;		Unchanged: 0/0
  3379 ;; Data sizes:     COMMON   BANK0   BANK1
  3380 ;;      Params:         0       2       0
  3381 ;;      Locals:         0       2       0
  3382 ;;      Temps:          0       2       0
  3383 ;;      Totals:         0       6       0
  3384 ;;Total ram usage:        6 bytes
  3385 ;; Hardware stack levels used:    1
  3386 ;; Hardware stack levels required when called:    2
  3387 ;; This function calls:
  3388 ;;		Nothing
  3389 ;; This function is called by:
  3390 ;;		_read_ADC_channels
  3391 ;;		_measure_Impedance
  3392 ;;		_measure_Impedance_no_offset
  3393 ;;		_measure_Offset
  3394 ;; This function uses a non-reentrant model
  3395 ;;
  3396                           
  3397                           
  3398                           ;psect for function _ADC_4
  3399  033F                     _ADC_4:	
  3400                           
  3401                           ;ADC1823.c: 40: unsigned short ADC_value;
  3402                           ;ADC1823.c: 42: { ADCON0 = 0b00010001;};
  3403                           
  3404                           ;incstack = 0
  3405                           ; Regs used in _ADC_4: [wreg]
  3406  033F  3011               	movlw	17
  3407  0340  0021               	movlb	1	; select bank1
  3408  0341  009D               	movwf	29	;volatile
  3409                           
  3410                           ;ADC1823.c: 43: __nop();
  3411  0342  0000               	nop
  3412                           
  3413                           ;ADC1823.c: 44: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  3414  0343  0021               	movlb	1	; select bank1
  3415  0344  149D               	bsf	29,1	;volatile
  3416  0345                     l389:	
  3417  0345  189D               	btfsc	29,1	;volatile
  3418  0346  2B45               	goto	l389
  3419  0347  081C               	movf	28,w	;volatile
  3420  0348  0020               	movlb	0	; select bank0
  3421  0349  00CE               	movwf	??_ADC_4
  3422  034A  01CF               	clrf	??_ADC_4+1
  3423  034B  084E               	movf	??_ADC_4,w
  3424  034C  00D0               	movwf	ADC_4@ADC_value
  3425  034D  084F               	movf	??_ADC_4+1,w
  3426  034E  00D1               	movwf	ADC_4@ADC_value+1
  3427  034F  3008               	movlw	8
  3428  0350                     u785:	
  3429  0350  35D0               	lslf	ADC_4@ADC_value,f
  3430  0351  0DD1               	rlf	ADC_4@ADC_value+1,f
  3431  0352  0B89               	decfsz	9,f
  3432  0353  2B50               	goto	u785
  3433  0354  0021               	movlb	1	; select bank1
  3434  0355  081B               	movf	27,w	;volatile
  3435  0356  0020               	movlb	0	; select bank0
  3436  0357  00CE               	movwf	??_ADC_4
  3437  0358  01CF               	clrf	??_ADC_4+1
  3438  0359  084E               	movf	??_ADC_4,w
  3439  035A  04D0               	iorwf	ADC_4@ADC_value,f
  3440  035B  084F               	movf	??_ADC_4+1,w
  3441  035C  04D1               	iorwf	ADC_4@ADC_value+1,f
  3442                           
  3443                           ;ADC1823.c: 45: return ADC_value;
  3444  035D  0851               	movf	ADC_4@ADC_value+1,w
  3445  035E  00CD               	movwf	?_ADC_4+1
  3446  035F  0850               	movf	ADC_4@ADC_value,w
  3447  0360  00CC               	movwf	?_ADC_4
  3448  0361  0008               	return
  3449  0362                     __end_of_ADC_4:	
  3450                           
  3451                           	psect	text15
  3452  0362                     __ptext15:	
  3453 ;; *************** function _ADC_2 *****************
  3454 ;; Defined at:
  3455 ;;		line 25 in file "ADC1823.c"
  3456 ;; Parameters:    Size  Location     Type
  3457 ;;		None
  3458 ;; Auto vars:     Size  Location     Type
  3459 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  3460 ;; Return value:  Size  Location     Type
  3461 ;;                  2    0[BANK0 ] unsigned short 
  3462 ;; Registers used:
  3463 ;;		wreg
  3464 ;; Tracked objects:
  3465 ;;		On entry : 0/0
  3466 ;;		On exit  : 0/0
  3467 ;;		Unchanged: 0/0
  3468 ;; Data sizes:     COMMON   BANK0   BANK1
  3469 ;;      Params:         0       2       0
  3470 ;;      Locals:         0       2       0
  3471 ;;      Temps:          0       2       0
  3472 ;;      Totals:         0       6       0
  3473 ;;Total ram usage:        6 bytes
  3474 ;; Hardware stack levels used:    1
  3475 ;; Hardware stack levels required when called:    2
  3476 ;; This function calls:
  3477 ;;		Nothing
  3478 ;; This function is called by:
  3479 ;;		_read_ADC_channels
  3480 ;;		_measure_Impedance
  3481 ;;		_measure_Impedance_no_offset
  3482 ;;		_measure_Offset
  3483 ;; This function uses a non-reentrant model
  3484 ;;
  3485                           
  3486                           
  3487                           ;psect for function _ADC_2
  3488  0362                     _ADC_2:	
  3489                           
  3490                           ;ADC1823.c: 27: unsigned short ADC_value;
  3491                           ;ADC1823.c: 29: { ADCON0 = 0b00001001;};
  3492                           
  3493                           ;incstack = 0
  3494                           ; Regs used in _ADC_2: [wreg]
  3495  0362  3009               	movlw	9
  3496  0363  0021               	movlb	1	; select bank1
  3497  0364  009D               	movwf	29	;volatile
  3498                           
  3499                           ;ADC1823.c: 30: __nop();
  3500  0365  0000               	nop
  3501                           
  3502                           ;ADC1823.c: 34: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  3503  0366  0021               	movlb	1	; select bank1
  3504  0367  149D               	bsf	29,1	;volatile
  3505  0368                     l383:	
  3506  0368  189D               	btfsc	29,1	;volatile
  3507  0369  2B68               	goto	l383
  3508  036A  081C               	movf	28,w	;volatile
  3509  036B  0020               	movlb	0	; select bank0
  3510  036C  00CE               	movwf	??_ADC_2
  3511  036D  01CF               	clrf	??_ADC_2+1
  3512  036E  084E               	movf	??_ADC_2,w
  3513  036F  00D0               	movwf	ADC_2@ADC_value
  3514  0370  084F               	movf	??_ADC_2+1,w
  3515  0371  00D1               	movwf	ADC_2@ADC_value+1
  3516  0372  3008               	movlw	8
  3517  0373                     u765:	
  3518  0373  35D0               	lslf	ADC_2@ADC_value,f
  3519  0374  0DD1               	rlf	ADC_2@ADC_value+1,f
  3520  0375  0B89               	decfsz	9,f
  3521  0376  2B73               	goto	u765
  3522  0377  0021               	movlb	1	; select bank1
  3523  0378  081B               	movf	27,w	;volatile
  3524  0379  0020               	movlb	0	; select bank0
  3525  037A  00CE               	movwf	??_ADC_2
  3526  037B  01CF               	clrf	??_ADC_2+1
  3527  037C  084E               	movf	??_ADC_2,w
  3528  037D  04D0               	iorwf	ADC_2@ADC_value,f
  3529  037E  084F               	movf	??_ADC_2+1,w
  3530  037F  04D1               	iorwf	ADC_2@ADC_value+1,f
  3531                           
  3532                           ;ADC1823.c: 35: return ADC_value;
  3533  0380  0851               	movf	ADC_2@ADC_value+1,w
  3534  0381  00CD               	movwf	?_ADC_2+1
  3535  0382  0850               	movf	ADC_2@ADC_value,w
  3536  0383  00CC               	movwf	?_ADC_2
  3537  0384  0008               	return
  3538  0385                     __end_of_ADC_2:	
  3539                           
  3540                           	psect	text16
  3541  03B7                     __ptext16:	
  3542 ;; *************** function _config_ASIC *****************
  3543 ;; Defined at:
  3544 ;;		line 50 in file "comm.c"
  3545 ;; Parameters:    Size  Location     Type
  3546 ;;		None
  3547 ;; Auto vars:     Size  Location     Type
  3548 ;;  asic            2    6[BANK0 ] struct .
  3549 ;; Return value:  Size  Location     Type
  3550 ;;                  1    wreg      void 
  3551 ;; Registers used:
  3552 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3553 ;; Tracked objects:
  3554 ;;		On entry : 0/0
  3555 ;;		On exit  : 0/0
  3556 ;;		Unchanged: 0/0
  3557 ;; Data sizes:     COMMON   BANK0   BANK1
  3558 ;;      Params:         0       0       0
  3559 ;;      Locals:         0       2       0
  3560 ;;      Temps:          0       1       0
  3561 ;;      Totals:         0       3       0
  3562 ;;Total ram usage:        3 bytes
  3563 ;; Hardware stack levels used:    1
  3564 ;; Hardware stack levels required when called:    4
  3565 ;; This function calls:
  3566 ;;		_BIO_config
  3567 ;;		_lputs_ISR
  3568 ;; This function is called by:
  3569 ;;		_mess_handler
  3570 ;; This function uses a non-reentrant model
  3571 ;;
  3572                           
  3573                           
  3574                           ;psect for function _config_ASIC
  3575  03B7                     _config_ASIC:	
  3576                           
  3577                           ;comm.c: 53: BIO3 asic;
  3578                           ;comm.c: 59: asic.data[0] = mess_rec[1];
  3579                           
  3580                           ;incstack = 0
  3581                           ; Regs used in _config_ASIC: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3582  03B7  0020               	movlb	0	; select bank0
  3583  03B8  0843               	movf	_mess_rec+1,w	;volatile
  3584  03B9  00D1               	movwf	??_config_ASIC
  3585  03BA  0851               	movf	??_config_ASIC,w
  3586  03BB  00D2               	movwf	config_ASIC@asic
  3587                           
  3588                           ;comm.c: 60: asic.data[1] = mess_rec[2];
  3589  03BC  0844               	movf	_mess_rec+2,w	;volatile
  3590  03BD  00D1               	movwf	??_config_ASIC
  3591  03BE  0851               	movf	??_config_ASIC,w
  3592  03BF  00D3               	movwf	config_ASIC@asic+1
  3593                           
  3594                           ;comm.c: 62: lputs_ISR(mess_rec,mess_rec_size);
  3595  03C0  0841               	movf	_mess_rec_size,w	;volatile
  3596  03C1  00D1               	movwf	??_config_ASIC
  3597  03C2  0851               	movf	??_config_ASIC,w
  3598  03C3  00CC               	movwf	lputs_ISR@length
  3599  03C4  3042               	movlw	(low (_mess_rec| 0))& (0+255)
  3600  03C5  22C6               	fcall	_lputs_ISR
  3601                           
  3602                           ;comm.c: 64: BIO_config(asic);
  3603  03C6  0020               	movlb	0	; select bank0
  3604  03C7  0853               	movf	config_ASIC@asic+1,w
  3605  03C8  00CD               	movwf	BIO_config@conf+1
  3606  03C9  0852               	movf	config_ASIC@asic,w
  3607  03CA  00CC               	movwf	BIO_config@conf
  3608  03CB  22F1               	fcall	_BIO_config
  3609  03CC  0008               	return
  3610  03CD                     __end_of_config_ASIC:	
  3611                           
  3612                           	psect	text17
  3613  02C6                     __ptext17:	
  3614 ;; *************** function _lputs_ISR *****************
  3615 ;; Defined at:
  3616 ;;		line 132 in file "USART1823.c"
  3617 ;; Parameters:    Size  Location     Type
  3618 ;;  data            1    wreg     PTR unsigned char 
  3619 ;;		 -> measure_Impedance_SE@aux(13), measure_Offset@aux(5), measure_Impedance_no_offset@aux(13), measure_Impedance@aux(
      +13), 
  3620 ;;		 -> read_ADC_channels@aux(7), mess_rec(10), 
  3621 ;;  length          1    0[BANK0 ] unsigned char 
  3622 ;; Auto vars:     Size  Location     Type
  3623 ;;  data            1    3[BANK0 ] PTR unsigned char 
  3624 ;;		 -> measure_Impedance_SE@aux(13), measure_Offset@aux(5), measure_Impedance_no_offset@aux(13), measure_Impedance@aux(
      +13), 
  3625 ;;		 -> read_ADC_channels@aux(7), mess_rec(10), 
  3626 ;;  i               1    4[BANK0 ] unsigned char 
  3627 ;; Return value:  Size  Location     Type
  3628 ;;                  1    wreg      void 
  3629 ;; Registers used:
  3630 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3631 ;; Tracked objects:
  3632 ;;		On entry : 0/0
  3633 ;;		On exit  : 0/0
  3634 ;;		Unchanged: 0/0
  3635 ;; Data sizes:     COMMON   BANK0   BANK1
  3636 ;;      Params:         0       1       0
  3637 ;;      Locals:         0       2       0
  3638 ;;      Temps:          0       2       0
  3639 ;;      Totals:         0       5       0
  3640 ;;Total ram usage:        5 bytes
  3641 ;; Hardware stack levels used:    1
  3642 ;; Hardware stack levels required when called:    3
  3643 ;; This function calls:
  3644 ;;		_close_RX_USART
  3645 ;; This function is called by:
  3646 ;;		_mess_handler
  3647 ;;		_config_ASIC
  3648 ;;		_read_ADC_channels
  3649 ;;		_measure_Impedance
  3650 ;;		_measure_Impedance_no_offset
  3651 ;;		_measure_Offset
  3652 ;;		_measure_Impedance_SE
  3653 ;; This function uses a non-reentrant model
  3654 ;;
  3655                           
  3656                           
  3657                           ;psect for function _lputs_ISR
  3658  02C6                     _lputs_ISR:	
  3659                           
  3660                           ;incstack = 0
  3661                           ; Regs used in _lputs_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3662                           ;lputs_ISR@data stored from wreg
  3663  02C6  0020               	movlb	0	; select bank0
  3664  02C7  00CF               	movwf	lputs_ISR@data
  3665                           
  3666                           ;USART1823.c: 134: unsigned char i;
  3667                           ;USART1823.c: 136: if (USART_tx_flag == 1)
  3668  02C8  0372               	decf	_USART_tx_flag,w	;volatile
  3669  02C9  1903               	btfsc	3,2
  3670  02CA  0008               	return
  3671                           
  3672                           ;USART1823.c: 139: for (i = 0; i < length; i++)
  3673                           
  3674                           ;USART1823.c: 137: return;
  3675  02CB  01D0               	clrf	lputs_ISR@i
  3676  02CC                     l2080:	
  3677  02CC  084C               	movf	lputs_ISR@length,w
  3678  02CD  0250               	subwf	lputs_ISR@i,w
  3679  02CE  1803               	btfsc	3,0
  3680  02CF  2AE3               	goto	l2082
  3681                           
  3682                           ;USART1823.c: 140: USART_tx_data[i] = data[i];
  3683  02D0  0850               	movf	lputs_ISR@i,w
  3684  02D1  074F               	addwf	lputs_ISR@data,w
  3685  02D2  00CD               	movwf	??_lputs_ISR
  3686  02D3  084D               	movf	??_lputs_ISR,w
  3687  02D4  0086               	movwf	6
  3688  02D5  0187               	clrf	7
  3689  02D6  0801               	movf	1,w
  3690  02D7  00CE               	movwf	??_lputs_ISR+1
  3691  02D8  0850               	movf	lputs_ISR@i,w
  3692  02D9  3E2F               	addlw	(low (_USART_tx_data| 0))& (0+255)
  3693  02DA  0086               	movwf	6
  3694  02DB  0187               	clrf	7
  3695  02DC  084E               	movf	??_lputs_ISR+1,w
  3696  02DD  0081               	movwf	1
  3697  02DE  3001               	movlw	1
  3698  02DF  00CD               	movwf	??_lputs_ISR
  3699  02E0  084D               	movf	??_lputs_ISR,w
  3700  02E1  07D0               	addwf	lputs_ISR@i,f
  3701  02E2  2ACC               	goto	l2080
  3702  02E3                     l2082:	
  3703                           
  3704                           ;USART1823.c: 142: close_RX_USART();
  3705  02E3  2415               	fcall	_close_RX_USART
  3706                           
  3707                           ;USART1823.c: 144: USART_tx_index = 0;
  3708  02E4  01F3               	clrf	_USART_tx_index	;volatile
  3709                           
  3710                           ;USART1823.c: 145: USART_tx_length = length;
  3711  02E5  0020               	movlb	0	; select bank0
  3712  02E6  084C               	movf	lputs_ISR@length,w
  3713  02E7  00CD               	movwf	??_lputs_ISR
  3714  02E8  084D               	movf	??_lputs_ISR,w
  3715  02E9  00F4               	movwf	_USART_tx_length	;volatile
  3716                           
  3717                           ;USART1823.c: 147: USART_tx_flag = 1;
  3718  02EA  3001               	movlw	1
  3719  02EB  00CD               	movwf	??_lputs_ISR
  3720  02EC  084D               	movf	??_lputs_ISR,w
  3721  02ED  00F2               	movwf	_USART_tx_flag	;volatile
  3722                           
  3723                           ;USART1823.c: 148: TXIE = 1;
  3724  02EE  0021               	movlb	1	; select bank1
  3725  02EF  1611               	bsf	17,4	;volatile
  3726  02F0  0008               	return
  3727  02F1                     __end_of_lputs_ISR:	
  3728                           
  3729                           	psect	text18
  3730  0415                     __ptext18:	
  3731 ;; *************** function _close_RX_USART *****************
  3732 ;; Defined at:
  3733 ;;		line 35 in file "USART1823.c"
  3734 ;; Parameters:    Size  Location     Type
  3735 ;;		None
  3736 ;; Auto vars:     Size  Location     Type
  3737 ;;		None
  3738 ;; Return value:  Size  Location     Type
  3739 ;;                  1    wreg      void 
  3740 ;; Registers used:
  3741 ;;		status,2
  3742 ;; Tracked objects:
  3743 ;;		On entry : 0/0
  3744 ;;		On exit  : 0/0
  3745 ;;		Unchanged: 0/0
  3746 ;; Data sizes:     COMMON   BANK0   BANK1
  3747 ;;      Params:         0       0       0
  3748 ;;      Locals:         0       0       0
  3749 ;;      Temps:          0       0       0
  3750 ;;      Totals:         0       0       0
  3751 ;;Total ram usage:        0 bytes
  3752 ;; Hardware stack levels used:    1
  3753 ;; Hardware stack levels required when called:    2
  3754 ;; This function calls:
  3755 ;;		Nothing
  3756 ;; This function is called by:
  3757 ;;		_lputs_ISR
  3758 ;; This function uses a non-reentrant model
  3759 ;;
  3760                           
  3761                           
  3762                           ;psect for function _close_RX_USART
  3763  0415                     _close_RX_USART:	
  3764                           
  3765                           ;USART1823.c: 39: RCIE = 0;
  3766                           
  3767                           ;incstack = 0
  3768                           ; Regs used in _close_RX_USART: [status,2]
  3769  0415  0021               	movlb	1	; select bank1
  3770  0416  1291               	bcf	17,5	;volatile
  3771                           
  3772                           ;USART1823.c: 40: CREN = 0;
  3773  0417  0023               	movlb	3	; select bank3
  3774  0418  121D               	bcf	29,4	;volatile
  3775                           
  3776                           ;USART1823.c: 41: USART_rx_index = 0;
  3777  0419  0020               	movlb	0	; select bank0
  3778  041A  01C0               	clrf	_USART_rx_index	;volatile
  3779  041B  0008               	return
  3780  041C                     __end_of_close_RX_USART:	
  3781                           
  3782                           	psect	text19
  3783  02F1                     __ptext19:	
  3784 ;; *************** function _BIO_config *****************
  3785 ;; Defined at:
  3786 ;;		line 41 in file "bio3.c"
  3787 ;; Parameters:    Size  Location     Type
  3788 ;;  conf            2    0[BANK0 ] struct .
  3789 ;; Auto vars:     Size  Location     Type
  3790 ;;  out             1    4[BANK0 ] unsigned char 
  3791 ;;  i               1    3[BANK0 ] unsigned char 
  3792 ;; Return value:  Size  Location     Type
  3793 ;;                  1    wreg      void 
  3794 ;; Registers used:
  3795 ;;		wreg, status,2, status,0
  3796 ;; Tracked objects:
  3797 ;;		On entry : 0/0
  3798 ;;		On exit  : 0/0
  3799 ;;		Unchanged: 0/0
  3800 ;; Data sizes:     COMMON   BANK0   BANK1
  3801 ;;      Params:         0       2       0
  3802 ;;      Locals:         0       2       0
  3803 ;;      Temps:          0       1       0
  3804 ;;      Totals:         0       5       0
  3805 ;;Total ram usage:        5 bytes
  3806 ;; Hardware stack levels used:    1
  3807 ;; Hardware stack levels required when called:    2
  3808 ;; This function calls:
  3809 ;;		Nothing
  3810 ;; This function is called by:
  3811 ;;		_config_ASIC
  3812 ;;		_measure_Impedance
  3813 ;;		_measure_Impedance_no_offset
  3814 ;;		_measure_Offset
  3815 ;;		_measure_Impedance_SE
  3816 ;; This function uses a non-reentrant model
  3817 ;;
  3818                           
  3819                           
  3820                           ;psect for function _BIO_config
  3821  02F1                     _BIO_config:	
  3822                           
  3823                           ;bio3.c: 43: unsigned char i, out;
  3824                           ;bio3.c: 45: out &= 0b11110111; PORTC = out;;
  3825                           
  3826                           ;incstack = 0
  3827                           ; Regs used in _BIO_config: [wreg+status,2+status,0]
  3828  02F1  30F7               	movlw	247
  3829  02F2  0020               	movlb	0	; select bank0
  3830  02F3  00CE               	movwf	??_BIO_config
  3831  02F4  084E               	movf	??_BIO_config,w
  3832  02F5  05D0               	andwf	BIO_config@out,f
  3833  02F6  0850               	movf	BIO_config@out,w
  3834  02F7  008E               	movwf	14	;volatile
  3835                           
  3836                           ;bio3.c: 46: ;;
  3837                           ;bio3.c: 48: RA5 = 0;;
  3838  02F8  128C               	bcf	12,5	;volatile
  3839                           
  3840                           ;bio3.c: 49: ;;
  3841                           ;bio3.c: 51: RA5 = 1;;
  3842  02F9  168C               	bsf	12,5	;volatile
  3843                           
  3844                           ;bio3.c: 53: for(i = 0; i < 16; i++) {
  3845  02FA  01CF               	clrf	BIO_config@i
  3846  02FB                     L1:	
  3847  02FB  3010               	movlw	16
  3848  02FC  024F               	subwf	BIO_config@i,w
  3849  02FD  1803               	btfsc	3,0
  3850  02FE  0008               	return
  3851                           
  3852                           ;bio3.c: 54: if (conf.datashort & 0x0001) {
  3853  02FF  1C4C               	btfss	BIO_config@conf,0
  3854  0300  2B03               	goto	l2056
  3855                           
  3856                           ;bio3.c: 55: out |= 0b00000100; PORTC = out;;
  3857  0301  1550               	bsf	BIO_config@out,2
  3858  0302  2B07               	goto	l2058
  3859  0303                     l2056:	
  3860                           ;bio3.c: 56: } else {
  3861                           
  3862                           
  3863                           ;bio3.c: 57: out &= 0b11111011; PORTC = out;;
  3864  0303  30FB               	movlw	251
  3865  0304  00CE               	movwf	??_BIO_config
  3866  0305  084E               	movf	??_BIO_config,w
  3867  0306  05D0               	andwf	BIO_config@out,f
  3868  0307                     l2058:	
  3869  0307  0850               	movf	BIO_config@out,w
  3870  0308  008E               	movwf	14	;volatile
  3871                           
  3872                           ;bio3.c: 58: }
  3873                           ;bio3.c: 59: conf.datashort >>= 1;
  3874  0309  3001               	movlw	1
  3875  030A                     u715:	
  3876  030A  36CD               	lsrf	BIO_config@conf+1,f
  3877  030B  0CCC               	rrf	BIO_config@conf,f
  3878  030C  0B89               	decfsz	9,f
  3879  030D  2B0A               	goto	u715
  3880                           
  3881                           ;bio3.c: 61: ;;
  3882                           ;bio3.c: 63: out |= 0b00001000; PORTC = out;;
  3883  030E  15D0               	bsf	BIO_config@out,3
  3884  030F  0850               	movf	BIO_config@out,w
  3885  0310  008E               	movwf	14	;volatile
  3886                           
  3887                           ;bio3.c: 64: ;;
  3888                           ;bio3.c: 65: out &= 0b11110111; PORTC = out;;
  3889  0311  30F7               	movlw	247
  3890  0312  00CE               	movwf	??_BIO_config
  3891  0313  084E               	movf	??_BIO_config,w
  3892  0314  05D0               	andwf	BIO_config@out,f
  3893  0315  0850               	movf	BIO_config@out,w
  3894  0316  008E               	movwf	14	;volatile
  3895  0317  3001               	movlw	1
  3896  0318  00CE               	movwf	??_BIO_config
  3897  0319  084E               	movf	??_BIO_config,w
  3898  031A  07CF               	addwf	BIO_config@i,f
  3899  031B  2AFB               	goto	L1
  3900  031C                     __end_of_BIO_config:	
  3901                           
  3902                           	psect	text20
  3903  0432                     __ptext20:	
  3904 ;; *************** function _USARTX_change_pol *****************
  3905 ;; Defined at:
  3906 ;;		line 90 in file "mcc_generated_files/mcc.c"
  3907 ;; Parameters:    Size  Location     Type
  3908 ;;		None
  3909 ;; Auto vars:     Size  Location     Type
  3910 ;;		None
  3911 ;; Return value:  Size  Location     Type
  3912 ;;                  1    wreg      void 
  3913 ;; Registers used:
  3914 ;;		None
  3915 ;; Tracked objects:
  3916 ;;		On entry : 0/0
  3917 ;;		On exit  : 0/0
  3918 ;;		Unchanged: 0/0
  3919 ;; Data sizes:     COMMON   BANK0   BANK1
  3920 ;;      Params:         0       0       0
  3921 ;;      Locals:         0       0       0
  3922 ;;      Temps:          0       0       0
  3923 ;;      Totals:         0       0       0
  3924 ;;Total ram usage:        0 bytes
  3925 ;; Hardware stack levels used:    1
  3926 ;; Hardware stack levels required when called:    2
  3927 ;; This function calls:
  3928 ;;		Nothing
  3929 ;; This function is called by:
  3930 ;;		_main
  3931 ;; This function uses a non-reentrant model
  3932 ;;
  3933                           
  3934                           
  3935                           ;psect for function _USARTX_change_pol
  3936  0432                     _USARTX_change_pol:	
  3937                           
  3938                           ;mcc.c: 92: SCKP = 1;
  3939                           
  3940                           ;incstack = 0
  3941                           ; Regs used in _USARTX_change_pol: []
  3942  0432  0023               	movlb	3	; select bank3
  3943  0433  161F               	bsf	31,4	;volatile
  3944  0434  0008               	return
  3945  0435                     __end_of_USARTX_change_pol:	
  3946                           
  3947                           	psect	text21
  3948  0435                     __ptext21:	
  3949 ;; *************** function _SYSTEM_Initialize *****************
  3950 ;; Defined at:
  3951 ;;		line 70 in file "mcc_generated_files/mcc.c"
  3952 ;; Parameters:    Size  Location     Type
  3953 ;;		None
  3954 ;; Auto vars:     Size  Location     Type
  3955 ;;		None
  3956 ;; Return value:  Size  Location     Type
  3957 ;;                  1    wreg      void 
  3958 ;; Registers used:
  3959 ;;		wreg, status,2, status,0, pclath, cstack
  3960 ;; Tracked objects:
  3961 ;;		On entry : 0/0
  3962 ;;		On exit  : 0/0
  3963 ;;		Unchanged: 0/0
  3964 ;; Data sizes:     COMMON   BANK0   BANK1
  3965 ;;      Params:         0       0       0
  3966 ;;      Locals:         0       0       0
  3967 ;;      Temps:          0       0       0
  3968 ;;      Totals:         0       0       0
  3969 ;;Total ram usage:        0 bytes
  3970 ;; Hardware stack levels used:    1
  3971 ;; Hardware stack levels required when called:    3
  3972 ;; This function calls:
  3973 ;;		_OSCILLATOR_Initialize
  3974 ;;		_PIN_MANAGER_Initialize
  3975 ;; This function is called by:
  3976 ;;		_main
  3977 ;; This function uses a non-reentrant model
  3978 ;;
  3979                           
  3980                           
  3981                           ;psect for function _SYSTEM_Initialize
  3982  0435                     _SYSTEM_Initialize:	
  3983                           
  3984                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  3985                           
  3986                           ;incstack = 0
  3987                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3988  0435  239E               	fcall	_PIN_MANAGER_Initialize
  3989                           
  3990                           ;mcc.c: 74: OSCILLATOR_Initialize();
  3991  0436  2428               	fcall	_OSCILLATOR_Initialize
  3992  0437  0008               	return
  3993  0438                     __end_of_SYSTEM_Initialize:	
  3994                           
  3995                           	psect	text22
  3996  039E                     __ptext22:	
  3997 ;; *************** function _PIN_MANAGER_Initialize *****************
  3998 ;; Defined at:
  3999 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  4000 ;; Parameters:    Size  Location     Type
  4001 ;;		None
  4002 ;; Auto vars:     Size  Location     Type
  4003 ;;		None
  4004 ;; Return value:  Size  Location     Type
  4005 ;;                  1    wreg      void 
  4006 ;; Registers used:
  4007 ;;		wreg, status,2
  4008 ;; Tracked objects:
  4009 ;;		On entry : 0/0
  4010 ;;		On exit  : 0/0
  4011 ;;		Unchanged: 0/0
  4012 ;; Data sizes:     COMMON   BANK0   BANK1
  4013 ;;      Params:         0       0       0
  4014 ;;      Locals:         0       0       0
  4015 ;;      Temps:          0       0       0
  4016 ;;      Totals:         0       0       0
  4017 ;;Total ram usage:        0 bytes
  4018 ;; Hardware stack levels used:    1
  4019 ;; Hardware stack levels required when called:    2
  4020 ;; This function calls:
  4021 ;;		Nothing
  4022 ;; This function is called by:
  4023 ;;		_SYSTEM_Initialize
  4024 ;; This function uses a non-reentrant model
  4025 ;;
  4026                           
  4027                           
  4028                           ;psect for function _PIN_MANAGER_Initialize
  4029  039E                     _PIN_MANAGER_Initialize:	
  4030                           
  4031                           ;pin_manager.c: 51: LATA = 0x0;
  4032                           
  4033                           ;incstack = 0
  4034                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4035  039E  0022               	movlb	2	; select bank2
  4036  039F  018C               	clrf	12	;volatile
  4037                           
  4038                           ;pin_manager.c: 52: LATC = 0x0;
  4039  03A0  018E               	clrf	14	;volatile
  4040                           
  4041                           ;pin_manager.c: 55: ANSELA = 0b00000100;
  4042  03A1  3004               	movlw	4
  4043  03A2  0023               	movlb	3	; select bank3
  4044  03A3  008C               	movwf	12	;volatile
  4045                           
  4046                           ;pin_manager.c: 56: ANSELC = 0b00000011;
  4047  03A4  3003               	movlw	3
  4048  03A5  008E               	movwf	14	;volatile
  4049                           
  4050                           ;pin_manager.c: 59: WPUA = 0x3B;
  4051  03A6  303B               	movlw	59
  4052  03A7  0024               	movlb	4	; select bank4
  4053  03A8  008C               	movwf	12	;volatile
  4054                           
  4055                           ;pin_manager.c: 61: WPUC = 0x1C;
  4056  03A9  301C               	movlw	28
  4057  03AA  008E               	movwf	14	;volatile
  4058                           
  4059                           ;pin_manager.c: 63: RXDTSEL = 0;
  4060  03AB  0022               	movlb	2	; select bank2
  4061  03AC  139D               	bcf	29,7	;volatile
  4062                           
  4063                           ;pin_manager.c: 64: TXCKSEL = 0;
  4064  03AD  111D               	bcf	29,2	;volatile
  4065                           
  4066                           ;pin_manager.c: 67: TRISC = 0b01100011;
  4067  03AE  3063               	movlw	99
  4068  03AF  0021               	movlb	1	; select bank1
  4069  03B0  008E               	movwf	14	;volatile
  4070                           
  4071                           ;pin_manager.c: 68: TRISA = 0b01011111;
  4072  03B1  305F               	movlw	95
  4073  03B2  008C               	movwf	12	;volatile
  4074                           
  4075                           ;pin_manager.c: 70: OPTION_REGbits.nWPUEN = 0x0;
  4076  03B3  1395               	bcf	21,7	;volatile
  4077                           
  4078                           ;pin_manager.c: 71: APFCON = 0x00;
  4079  03B4  0022               	movlb	2	; select bank2
  4080  03B5  019D               	clrf	29	;volatile
  4081  03B6  0008               	return
  4082  03B7                     __end_of_PIN_MANAGER_Initialize:	
  4083                           
  4084                           	psect	text23
  4085  0428                     __ptext23:	
  4086 ;; *************** function _OSCILLATOR_Initialize *****************
  4087 ;; Defined at:
  4088 ;;		line 78 in file "mcc_generated_files/mcc.c"
  4089 ;; Parameters:    Size  Location     Type
  4090 ;;		None
  4091 ;; Auto vars:     Size  Location     Type
  4092 ;;		None
  4093 ;; Return value:  Size  Location     Type
  4094 ;;                  1    wreg      void 
  4095 ;; Registers used:
  4096 ;;		wreg, status,2
  4097 ;; Tracked objects:
  4098 ;;		On entry : 0/0
  4099 ;;		On exit  : 0/0
  4100 ;;		Unchanged: 0/0
  4101 ;; Data sizes:     COMMON   BANK0   BANK1
  4102 ;;      Params:         0       0       0
  4103 ;;      Locals:         0       0       0
  4104 ;;      Temps:          0       0       0
  4105 ;;      Totals:         0       0       0
  4106 ;;Total ram usage:        0 bytes
  4107 ;; Hardware stack levels used:    1
  4108 ;; Hardware stack levels required when called:    2
  4109 ;; This function calls:
  4110 ;;		Nothing
  4111 ;; This function is called by:
  4112 ;;		_SYSTEM_Initialize
  4113 ;; This function uses a non-reentrant model
  4114 ;;
  4115                           
  4116                           
  4117                           ;psect for function _OSCILLATOR_Initialize
  4118  0428                     _OSCILLATOR_Initialize:	
  4119                           
  4120                           ;mcc.c: 81: OSCCON = 0x3A;
  4121                           
  4122                           ;incstack = 0
  4123                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4124  0428  303A               	movlw	58
  4125  0429  0021               	movlb	1	; select bank1
  4126  042A  0099               	movwf	25	;volatile
  4127                           
  4128                           ;mcc.c: 83: OSCSTAT = 0x00;
  4129  042B  019A               	clrf	26	;volatile
  4130                           
  4131                           ;mcc.c: 85: OSCTUNE = 0x00;
  4132  042C  0198               	clrf	24	;volatile
  4133  042D  0008               	return
  4134  042E                     __end_of_OSCILLATOR_Initialize:	
  4135                           
  4136                           	psect	intentry
  4137  0004                     __pintentry:	
  4138 ;; *************** function _isr *****************
  4139 ;; Defined at:
  4140 ;;		line 139 in file "main.c"
  4141 ;; Parameters:    Size  Location     Type
  4142 ;;		None
  4143 ;; Auto vars:     Size  Location     Type
  4144 ;;		None
  4145 ;; Return value:  Size  Location     Type
  4146 ;;                  1    wreg      void 
  4147 ;; Registers used:
  4148 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4149 ;; Tracked objects:
  4150 ;;		On entry : 0/0
  4151 ;;		On exit  : 0/0
  4152 ;;		Unchanged: 0/0
  4153 ;; Data sizes:     COMMON   BANK0   BANK1
  4154 ;;      Params:         0       0       0
  4155 ;;      Locals:         0       0       0
  4156 ;;      Temps:          2       0       0
  4157 ;;      Totals:         2       0       0
  4158 ;;Total ram usage:        2 bytes
  4159 ;; Hardware stack levels used:    1
  4160 ;; Hardware stack levels required when called:    1
  4161 ;; This function calls:
  4162 ;;		_start_TMR0_ISR
  4163 ;;		_stop_TMR0_ISR
  4164 ;;		i1_start_RX_USART_ISR
  4165 ;; This function is called by:
  4166 ;;		Interrupt level 1
  4167 ;; This function uses a non-reentrant model
  4168 ;;
  4169                           
  4170  0004                     _isr:	
  4171                           
  4172                           ;incstack = 0
  4173  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4174                           
  4175                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4176  0005  3180               	pagesel	$
  4177  0006  0020               	movlb	0	; select bank0
  4178  0007  087F               	movf	127,w
  4179  0008  00F9               	movwf	??_isr+1
  4180                           
  4181                           ;main.c: 143: if (TMR0IF && TMR0IE) {
  4182  0009  190B               	btfsc	11,2	;volatile
  4183  000A  1E8B               	btfss	11,5	;volatile
  4184  000B  2815               	goto	i1l127
  4185                           
  4186                           ;main.c: 145: TMR0IF = 0;
  4187  000C  110B               	bcf	11,2	;volatile
  4188                           
  4189                           ;main.c: 146: TMR0 = TIMER0_timeout;
  4190  000D  0870               	movf	_TIMER0_timeout,w	;volatile
  4191  000E  0095               	movwf	21	;volatile
  4192                           
  4193                           ;main.c: 149: TIMER0_flag = 1;
  4194  000F  3001               	movlw	1
  4195  0010  00F8               	movwf	??_isr
  4196  0011  0878               	movf	??_isr,w
  4197  0012  00BE               	movwf	_TIMER0_flag	;volatile
  4198                           
  4199                           ;main.c: 154: stop_TMR0_ISR();
  4200  0013  2438               	fcall	_stop_TMR0_ISR
  4201                           
  4202                           ;main.c: 156: return;
  4203  0014  2851               	goto	i1l128
  4204  0015                     i1l127:	
  4205                           
  4206                           ;main.c: 157: }
  4207                           ;main.c: 161: if (RCIF) {
  4208  0015  1E91               	btfss	17,5	;volatile
  4209  0016  2836               	goto	i1l129
  4210                           
  4211                           ;main.c: 162: stop_TMR0_ISR();
  4212  0017  2438               	fcall	_stop_TMR0_ISR
  4213                           
  4214                           ;main.c: 165: if (OERR) {
  4215  0018  0023               	movlb	3	; select bank3
  4216  0019  1C9D               	btfss	29,1	;volatile
  4217  001A  2820               	goto	i1l2004
  4218                           
  4219                           ;main.c: 167: CREN = 0;
  4220  001B  121D               	bcf	29,4	;volatile
  4221                           
  4222                           ;main.c: 168: CREN = 1;
  4223  001C  161D               	bsf	29,4	;volatile
  4224                           
  4225                           ;main.c: 169: USART_rx_index = 0;
  4226  001D  0020               	movlb	0	; select bank0
  4227  001E  01C0               	clrf	_USART_rx_index	;volatile
  4228                           
  4229                           ;main.c: 170: return;
  4230  001F  2851               	goto	i1l128
  4231  0020                     i1l2004:	
  4232                           
  4233                           ;main.c: 171: }
  4234                           ;main.c: 174: if (USART_rx_index >= 15) {
  4235  0020  300F               	movlw	15
  4236  0021  0020               	movlb	0	; select bank0
  4237  0022  0240               	subwf	_USART_rx_index,w	;volatile
  4238  0023  1803               	btfsc	3,0
  4239                           
  4240                           ;main.c: 175: USART_rx_index = 0;
  4241  0024  01C0               	clrf	_USART_rx_index	;volatile
  4242                           
  4243                           ;main.c: 176: }
  4244                           ;main.c: 178: USART_rx_data[USART_rx_index++] = RCREG;
  4245  0025  0023               	movlb	3	; select bank3
  4246  0026  0819               	movf	25,w	;volatile
  4247  0027  00F8               	movwf	??_isr
  4248  0028  0020               	movlb	0	; select bank0
  4249  0029  0840               	movf	_USART_rx_index,w
  4250  002A  3E20               	addlw	(low (_USART_rx_data| 0))& (0+255)
  4251  002B  0086               	movwf	6
  4252  002C  0187               	clrf	7
  4253  002D  0878               	movf	??_isr,w
  4254  002E  0081               	movwf	1
  4255  002F  3001               	movlw	1
  4256  0030  00F8               	movwf	??_isr
  4257  0031  0878               	movf	??_isr,w
  4258  0032  07C0               	addwf	_USART_rx_index,f	;volatile
  4259                           
  4260                           ;main.c: 180: start_TMR0_ISR(98);
  4261  0033  3062               	movlw	98
  4262  0034  23EF               	fcall	_start_TMR0_ISR
  4263                           
  4264                           ;main.c: 182: return;
  4265  0035  2851               	goto	i1l128
  4266  0036                     i1l129:	
  4267                           
  4268                           ;main.c: 183: }
  4269                           ;main.c: 187: if (TXIF && TXIE) {
  4270  0036  1E11               	btfss	17,4	;volatile
  4271  0037  2851               	goto	i1l128
  4272  0038  0021               	movlb	1	; select bank1
  4273  0039  1E11               	btfss	17,4	;volatile
  4274  003A  2851               	goto	i1l128
  4275                           
  4276                           ;main.c: 189: TXREG = USART_tx_data[USART_tx_index++];
  4277  003B  0873               	movf	_USART_tx_index,w
  4278  003C  3E2F               	addlw	(low (_USART_tx_data| 0))& (0+255)
  4279  003D  0086               	movwf	6
  4280  003E  0187               	clrf	7
  4281  003F  0801               	movf	1,w
  4282  0040  0023               	movlb	3	; select bank3
  4283  0041  009A               	movwf	26	;volatile
  4284  0042  3001               	movlw	1
  4285  0043  00F8               	movwf	??_isr
  4286  0044  0878               	movf	??_isr,w
  4287  0045  07F3               	addwf	_USART_tx_index,f	;volatile
  4288                           
  4289                           ;main.c: 191: if (USART_tx_index >= USART_tx_length) {
  4290  0046  0874               	movf	_USART_tx_length,w	;volatile
  4291  0047  0273               	subwf	_USART_tx_index,w	;volatile
  4292  0048  1C03               	skipc
  4293  0049  2851               	goto	i1l128
  4294                           
  4295                           ;main.c: 192: TXIE = 0;
  4296  004A  0021               	movlb	1	; select bank1
  4297  004B  1211               	bcf	17,4	;volatile
  4298                           
  4299                           ;main.c: 193: USART_tx_flag = 0;
  4300  004C  01F2               	clrf	_USART_tx_flag	;volatile
  4301                           
  4302                           ;main.c: 197: _delay((unsigned long)((3)*(500000/4000.0)));
  4303  004D  307D               	movlw	125
  4304  004E                     u96_27:	
  4305  004E  0B89               	decfsz	9,f
  4306  004F  284E               	goto	u96_27
  4307                           
  4308                           ;main.c: 199: start_RX_USART_ISR();
  4309  0050  23DE               	fcall	i1_start_RX_USART_ISR
  4310  0051                     i1l128:	
  4311                           ;main.c: 200: }
  4312                           ;main.c: 201: return;
  4313                           
  4314  0051  0879               	movf	??_isr+1,w
  4315  0052  0020               	movlb	0	; select bank0
  4316  0053  00FF               	movwf	127
  4317  0054  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4318  0055  0009               	retfie
  4319  0056                     __end_of_isr:	
  4320                           
  4321                           	psect	text25
  4322  03DE                     __ptext25:	
  4323 ;; *************** function i1_start_RX_USART_ISR *****************
  4324 ;; Defined at:
  4325 ;;		line 83 in file "USART1823.c"
  4326 ;; Parameters:    Size  Location     Type
  4327 ;;		None
  4328 ;; Auto vars:     Size  Location     Type
  4329 ;;		None
  4330 ;; Return value:  Size  Location     Type
  4331 ;;                  1    wreg      void 
  4332 ;; Registers used:
  4333 ;;		wreg, status,2
  4334 ;; Tracked objects:
  4335 ;;		On entry : 0/0
  4336 ;;		On exit  : 0/0
  4337 ;;		Unchanged: 0/0
  4338 ;; Data sizes:     COMMON   BANK0   BANK1
  4339 ;;      Params:         0       0       0
  4340 ;;      Locals:         0       0       0
  4341 ;;      Temps:          0       0       0
  4342 ;;      Totals:         0       0       0
  4343 ;;Total ram usage:        0 bytes
  4344 ;; Hardware stack levels used:    1
  4345 ;; This function calls:
  4346 ;;		Nothing
  4347 ;; This function is called by:
  4348 ;;		_isr
  4349 ;; This function uses a non-reentrant model
  4350 ;;
  4351                           
  4352                           
  4353                           ;psect for function i1_start_RX_USART_ISR
  4354  03DE                     i1_start_RX_USART_ISR:	
  4355                           
  4356                           ;USART1823.c: 86: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  4357                           
  4358                           ;incstack = 0
  4359                           ; Regs used in i1_start_RX_USART_ISR: [wreg+status,2]
  4360  03DE  0023               	movlb	3	; select bank3
  4361  03DF  151E               	bsf	30,2	;volatile
  4362  03E0  159F               	bsf	31,3	;volatile
  4363  03E1  019C               	clrf	28	;volatile
  4364  03E2  300C               	movlw	12
  4365  03E3  009B               	movwf	27	;volatile
  4366                           
  4367                           ;USART1823.c: 88: SYNC = 0;
  4368  03E4  121E               	bcf	30,4	;volatile
  4369                           
  4370                           ;USART1823.c: 89: SPEN = 1;
  4371  03E5  179D               	bsf	29,7	;volatile
  4372                           
  4373                           ;USART1823.c: 90: CREN = 1;
  4374  03E6  161D               	bsf	29,4	;volatile
  4375                           
  4376                           ;USART1823.c: 92: USART_rx_flag = 0;
  4377  03E7  0020               	movlb	0	; select bank0
  4378  03E8  01BF               	clrf	_USART_rx_flag	;volatile
  4379                           
  4380                           ;USART1823.c: 93: USART_rx_index = 0;
  4381  03E9  01C0               	clrf	_USART_rx_index	;volatile
  4382                           
  4383                           ;USART1823.c: 95: RCIE = 1;
  4384  03EA  0021               	movlb	1	; select bank1
  4385  03EB  1691               	bsf	17,5	;volatile
  4386                           
  4387                           ;USART1823.c: 96: PEIE = 1;
  4388  03EC  170B               	bsf	11,6	;volatile
  4389                           
  4390                           ;USART1823.c: 97: GIE = 1;
  4391  03ED  178B               	bsf	11,7	;volatile
  4392  03EE  0008               	return
  4393  03EF                     __end_ofi1_start_RX_USART_ISR:	
  4394                           
  4395                           	psect	text26
  4396  0438                     __ptext26:	
  4397 ;; *************** function _stop_TMR0_ISR *****************
  4398 ;; Defined at:
  4399 ;;		line 44 in file "TMR0.c"
  4400 ;; Parameters:    Size  Location     Type
  4401 ;;		None
  4402 ;; Auto vars:     Size  Location     Type
  4403 ;;		None
  4404 ;; Return value:  Size  Location     Type
  4405 ;;                  1    wreg      void 
  4406 ;; Registers used:
  4407 ;;		None
  4408 ;; Tracked objects:
  4409 ;;		On entry : 0/0
  4410 ;;		On exit  : 0/0
  4411 ;;		Unchanged: 0/0
  4412 ;; Data sizes:     COMMON   BANK0   BANK1
  4413 ;;      Params:         0       0       0
  4414 ;;      Locals:         0       0       0
  4415 ;;      Temps:          0       0       0
  4416 ;;      Totals:         0       0       0
  4417 ;;Total ram usage:        0 bytes
  4418 ;; Hardware stack levels used:    1
  4419 ;; This function calls:
  4420 ;;		Nothing
  4421 ;; This function is called by:
  4422 ;;		_isr
  4423 ;; This function uses a non-reentrant model
  4424 ;;
  4425                           
  4426                           
  4427                           ;psect for function _stop_TMR0_ISR
  4428  0438                     _stop_TMR0_ISR:	
  4429                           
  4430                           ;TMR0.c: 47: TMR0IE = 0;
  4431                           
  4432                           ;incstack = 0
  4433                           ; Regs used in _stop_TMR0_ISR: []
  4434  0438  128B               	bcf	11,5	;volatile
  4435                           
  4436                           ;TMR0.c: 48: TMR0IF = 0;
  4437  0439  110B               	bcf	11,2	;volatile
  4438  043A  0008               	return
  4439  043B                     __end_of_stop_TMR0_ISR:	
  4440                           
  4441                           	psect	text27
  4442  03EF                     __ptext27:	
  4443 ;; *************** function _start_TMR0_ISR *****************
  4444 ;; Defined at:
  4445 ;;		line 30 in file "TMR0.c"
  4446 ;; Parameters:    Size  Location     Type
  4447 ;;  val             1    wreg     unsigned char 
  4448 ;; Auto vars:     Size  Location     Type
  4449 ;;  val             1    2[COMMON] unsigned char 
  4450 ;; Return value:  Size  Location     Type
  4451 ;;                  1    wreg      void 
  4452 ;; Registers used:
  4453 ;;		wreg, status,2
  4454 ;; Tracked objects:
  4455 ;;		On entry : 0/0
  4456 ;;		On exit  : 0/0
  4457 ;;		Unchanged: 0/0
  4458 ;; Data sizes:     COMMON   BANK0   BANK1
  4459 ;;      Params:         0       0       0
  4460 ;;      Locals:         1       0       0
  4461 ;;      Temps:          2       0       0
  4462 ;;      Totals:         3       0       0
  4463 ;;Total ram usage:        3 bytes
  4464 ;; Hardware stack levels used:    1
  4465 ;; This function calls:
  4466 ;;		Nothing
  4467 ;; This function is called by:
  4468 ;;		_isr
  4469 ;; This function uses a non-reentrant model
  4470 ;;
  4471                           
  4472                           
  4473                           ;psect for function _start_TMR0_ISR
  4474  03EF                     _start_TMR0_ISR:	
  4475                           
  4476                           ;incstack = 0
  4477                           ; Regs used in _start_TMR0_ISR: [wreg+status,2]
  4478                           ;start_TMR0_ISR@val stored from wreg
  4479  03EF  00F7               	movwf	start_TMR0_ISR@val
  4480                           
  4481                           ;TMR0.c: 32: TIMER0_timeout = val;
  4482  03F0  0877               	movf	start_TMR0_ISR@val,w
  4483  03F1  00F5               	movwf	??_start_TMR0_ISR
  4484  03F2  01F6               	clrf	??_start_TMR0_ISR+1
  4485  03F3  0875               	movf	??_start_TMR0_ISR,w
  4486  03F4  00F0               	movwf	_TIMER0_timeout	;volatile
  4487  03F5  0876               	movf	??_start_TMR0_ISR+1,w
  4488  03F6  00F1               	movwf	_TIMER0_timeout+1	;volatile
  4489                           
  4490                           ;TMR0.c: 33: TIMER0_flag = 0;
  4491  03F7  0020               	movlb	0	; select bank0
  4492  03F8  01BE               	clrf	_TIMER0_flag	;volatile
  4493                           
  4494                           ;TMR0.c: 36: TMR0 = TIMER0_timeout;
  4495  03F9  0870               	movf	_TIMER0_timeout,w	;volatile
  4496  03FA  0095               	movwf	21	;volatile
  4497                           
  4498                           ;TMR0.c: 39: TMR0IF = 0;
  4499  03FB  110B               	bcf	11,2	;volatile
  4500                           
  4501                           ;TMR0.c: 40: TMR0IE = 1;
  4502  03FC  168B               	bsf	11,5	;volatile
  4503                           
  4504                           ;TMR0.c: 41: GIE = 1;
  4505  03FD  178B               	bsf	11,7	;volatile
  4506  03FE  0008               	return
  4507  03FF                     __end_of_start_TMR0_ISR:	
  4508  007E                     btemp	set	126	;btemp
  4509  007E                     int$flags	set	126
  4510  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         49
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     29      73
    BANK1            32      0       0

Pointer List with Targets:

    calculate_checksum@data	PTR unsigned char  size(1) Largest target is 13
		 -> measure_Impedance_SE@aux(BANK0[13]), 

    lputs_ISR@data	PTR unsigned char  size(1) Largest target is 13
		 -> measure_Impedance_SE@aux(BANK0[13]), measure_Offset@aux(BANK0[5]), measure_Impedance_no_offset@aux(BANK0[13]), measure_Impedance@aux(BANK0[13]), 
		 -> read_ADC_channels@aux(BANK0[7]), mess_rec(BANK0[10]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_start_TMR0_ISR

Critical Paths under _main in BANK0

    _main->_mess_handler
    _mess_handler->_measure_Impedance
    _mess_handler->_measure_Impedance_SE
    _mess_handler->_measure_Impedance_no_offset
    _read_ADC_channels->_ADC_2
    _read_ADC_channels->_ADC_4
    _read_ADC_channels->_ADC_5
    _measure_Offset->_ADC_2
    _measure_Offset->_ADC_4
    _measure_Impedance_no_offset->_ADC_2
    _measure_Impedance_no_offset->_ADC_4
    _measure_Impedance_SE->_ADC_5
    _measure_Impedance_SE->_calculate_checksum
    _measure_Impedance->_ADC_2
    _measure_Impedance->_ADC_4
    _config_ASIC->_BIO_config
    _config_ASIC->_lputs_ISR

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   16244
                                             27 BANK0      2     2      0
                  _SYSTEM_Initialize
                  _USARTX_change_pol
                       _mess_handler
                          _setup_ADC
                         _setup_TMR0
                          _start_RCM
                 _start_RX_USART_ISR
                 _start_TX_USART_ISR
 ---------------------------------------------------------------------------------
 (1) _start_TX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RCM                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_TMR0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_ADC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _mess_handler                                         1     1      0   16145
                                             26 BANK0      1     1      0
                        _config_ASIC
                          _lputs_ISR
                  _measure_Impedance
               _measure_Impedance_SE
        _measure_Impedance_no_offset
                     _measure_Offset
                  _read_ADC_channels
 ---------------------------------------------------------------------------------
 (2) _read_ADC_channels                                   14    14      0    1536
                                              6 BANK0     14    14      0
                              _ADC_2
                              _ADC_4
                              _ADC_5
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (2) _measure_Offset                                      12    12      0    2473
                                              6 BANK0     12    12      0
                              _ADC_2
                              _ADC_4
                         _BIO_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (2) _measure_Impedance_no_offset                         22    22      0    2850
                                              6 BANK0     20    20      0
                              _ADC_2
                              _ADC_4
                         _BIO_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (2) _measure_Impedance_SE                                20    20      0    3087
                                              6 BANK0     20    20      0
                              _ADC_5
                         _BIO_config
                 _calculate_checksum
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (3) _calculate_checksum                                   6     5      1     277
                                              0 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (3) _ADC_5                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _measure_Impedance                                   22    22      0    3162
                                              6 BANK0     20    20      0
                              _ADC_2
                              _ADC_4
                         _BIO_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (3) _ADC_4                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _ADC_2                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _config_ASIC                                          3     3      0    2075
                                              5 BANK0      3     3      0
                         _BIO_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (3) _lputs_ISR                                            5     4      1     962
                                              0 BANK0      5     4      1
                     _close_RX_USART
 ---------------------------------------------------------------------------------
 (4) _close_RX_USART                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _BIO_config                                           5     3      2    1042
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _USARTX_change_pol                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  2     2      0      22
                                              3 COMMON     2     2      0
                     _start_TMR0_ISR
                      _stop_TMR0_ISR
               i1_start_RX_USART_ISR
 ---------------------------------------------------------------------------------
 (6) i1_start_RX_USART_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _stop_TMR0_ISR                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _start_TMR0_ISR                                       3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _USARTX_change_pol
   _mess_handler
     _config_ASIC
       _BIO_config
       _lputs_ISR
         _close_RX_USART
     _lputs_ISR
       _close_RX_USART
     _measure_Impedance
       _ADC_2
       _ADC_4
       _BIO_config
       _lputs_ISR
         _close_RX_USART
     _measure_Impedance_SE
       _ADC_5
       _BIO_config
       _calculate_checksum
       _lputs_ISR
         _close_RX_USART
     _measure_Impedance_no_offset
       _ADC_2
       _ADC_4
       _BIO_config
       _lputs_ISR
         _close_RX_USART
     _measure_Offset
       _ADC_2
       _ADC_4
       _BIO_config
       _lputs_ISR
         _close_RX_USART
     _read_ADC_channels
       _ADC_2
       _ADC_4
       _ADC_5
       _lputs_ISR
         _close_RX_USART
   _setup_ADC
   _setup_TMR0
   _start_RCM
   _start_RX_USART_ISR
   _start_TX_USART_ISR

 _isr (ROOT)
   _start_TMR0_ISR
   _stop_TMR0_ISR
   i1_start_RX_USART_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      53       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     1D      49       6       91.2%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      53       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Mar 14 17:04:37 2017

                         __CFG_CP$OFF 0000                         _USART_rx_data 0020  
                       _USART_rx_flag 003F                         _USART_tx_data 002F  
                       _USART_tx_flag 0072                                   l115 01F4  
                                 l341 02C5                                   l383 0368  
                                 l395 0322                                   l389 0345  
                                 _GIE 005F                                   _RA5 0065  
                                 _PS0 04A8                                   _PS1 04A9  
                                 _PS2 04AA                          __CFG_CPD$OFF 0000  
                                 u715 030A                                   u805 032D  
                                 _PSA 04AB                                   u907 0112  
                                 u765 0373                                   u917 0130  
                                 u927 014D                                   u785 0350  
                                 u937 007C                                   u947 00A8  
                                 u867 01ED                                   u957 00D3  
                                 u877 0237                                   u887 018D  
                                 u897 01B8                                   _isr 0004  
                        __CFG_BORV$HI 0000                                   wreg 0009  
                        __CFG_IESO$ON 0000                        _USART_rx_index 0040  
                        __CFG_LVP$OFF 0000                        _USART_tx_index 0073  
                                l2130 039C                                  l2056 0303  
                                l2080 02CC                                  l2128 0389  
                                l2058 0307                                  l2082 02E3  
                                l2410 02A7                                  l2402 0299  
                                l2412 02A9                                  l2404 02A1  
                                l2414 02AB                                  l2406 02A3  
                                l2408 02A5                                  l2440 0200  
                                l2418 02AD                                  l2454 0209  
                                l2456 021E                                  ?_isr 0075  
                                _ADGO 04E9                          __CFG_WDTE$ON 0000  
                                _BRGH 0CF2                                  _CREN 0CEC  
                                _LATA 010C                                  _LATC 010E  
                                _PEIE 005E                                  _RCIE 048D  
                                _RCIF 008D                                  _OERR 0CE9  
                                _SCKP 0CFC                                  _TMR0 0015  
                                _SPEN 0CEF                                  _TXIE 048C  
                                _TXEN 0CF5                                  _TXIF 008C  
                                _SYNC 0CF4                                  _WPUA 020C  
                                _WPUC 020E                __size_of_stop_TMR0_ISR 0003  
                   _read_ADC_channels 025F                          __CFG_WRT$OFF 0000  
                                _main 01E0                                  fsr0h 0005  
                                fsr1h 0007                                  indf0 0000  
                                fsr0l 0004                                  indf1 0001  
                                fsr1l 0006                                  btemp 007E  
                  ?_read_ADC_channels 0075           __size_of_calculate_checksum 0019  
                                start 0056                         __CFG_MCLRE$ON 0000  
          measure_Impedance_SE@value1 0062                   ??_read_ADC_channels 0052  
                               ??_isr 0078        __size_of_OSCILLATOR_Initialize 0006  
                     _USART_tx_length 0074         __end_of_OSCILLATOR_Initialize 042E  
                               ?_main 0075                                 _ADC_2 0362  
                               _ADC_4 033F                                 _ADC_5 031C  
                               _BRG16 0CFB                                 i1l127 0015  
                               i1l128 0051                                 i1l129 0036  
                 __size_of_BIO_config 002B                                 _RCREG 0199  
                               _PORTC 000E                                 _TRISA 008C  
                      _start_TMR0_ISR 03EF                                 _TRISC 008E  
                               u96_27 004E                                 _TXREG 019A  
                      __CFG_FCMEN$OFF 0000             __end_of_read_ADC_channels 0298  
        ?_measure_Impedance_no_offset 0075                                 main@i 0068  
       __size_ofi1_start_RX_USART_ISR 0011                        __CFG_BOREN$OFF 0000  
                               status 0003                                 wtemp0 007E  
                     __initialization 0057                          __end_of_main 0220  
                       _stop_TMR0_ISR 0438                      ??_close_RX_USART 004C  
              __end_of_start_TMR0_ISR 03FF                                ??_main 0067  
                              ?_ADC_2 004C                                ?_ADC_4 004C  
                              ?_ADC_5 004C          __end_of_measure_Impedance_SE 0175  
                      _TIMER0_timeout 0070                        __CFG_PLLEN$OFF 0000  
                              _ADCON0 009D                                _ADCON1 009E  
                              _ADRESH 009C                                _ADRESL 009B  
                              _APFCON 011D                                _ANSELA 018C  
                              _ANSELC 018E                                i1l2004 0020  
                              _OSCCON 0099         ??_measure_Impedance_no_offset 0052  
                              _TMR0IE 005D                                _TMR0IF 005A  
                              _TMR0CS 04AD                                _SPBRGH 019C  
                              _SPBRGL 019B                        __CFG_PWRTE$OFF 0000  
                __size_of_config_ASIC 0016                       config_ASIC@asic 0052  
                      __CFG_STVREN$ON 0000                        ?_stop_TMR0_ISR 0075  
                     ?_start_TMR0_ISR 0075                  measure_Impedance@aux 0053  
         __size_of_start_RX_USART_ISR 0011            __size_of_read_ADC_channels 0039  
                       ?_mess_handler 0075               __size_of_measure_Offset 003F  
                   _SYSTEM_Initialize 0435               __end_of__initialization 0062  
                        ??_BIO_config 004E                         __end_of_ADC_2 0385  
                       __end_of_ADC_4 0362                    ?_SYSTEM_Initialize 0075  
                       __end_of_ADC_5 033F                        __pcstackCOMMON 0075  
                 ??_SYSTEM_Initialize 004C  __size_of_measure_Impedance_no_offset 006B  
                             ??_ADC_2 004E                               ??_ADC_4 004E  
                             ??_ADC_5 004E                        _OPTION_REGbits 0095  
                  __end_of_BIO_config 031C           __size_of_start_TX_USART_ISR 000F  
                      ??_mess_handler 0066             __end_of_SYSTEM_Initialize 0438  
                          __pbssBANK0 0020                  _measure_Impedance_SE 00FB  
                          __pmaintext 01E0                       ??_stop_TMR0_ISR 0075  
                read_ADC_channels@aux 0053                            __pintentry 0004  
                measure_Offset@value1 0058                  measure_Offset@value2 005A  
                             _CLKRCON 039A                    __size_of_lputs_ISR 002B  
                     lputs_ISR@length 004C                    __size_of_setup_ADC 0006  
                             _OSCSTAT 009A                               _OSCTUNE 0098  
                  __size_of_start_RCM 0004                               _RXDTSEL 08EF  
                             _TXCKSEL 08EA            __end_of_calculate_checksum 039E  
               ?_measure_Impedance_SE 0075          __end_ofi1_start_RX_USART_ISR 03EF  
                   measure_Offset@aux 0053                               __ptext1 03FF  
                             __ptext2 03CD                               __ptext3 042E  
                             __ptext4 040E                               __ptext5 0422  
                             __ptext6 0298                               __ptext7 025F  
                             __ptext8 0220                               __ptext9 0175  
               _OSCILLATOR_Initialize 0428                          __size_of_isr 0052  
            ??_PIN_MANAGER_Initialize 004C            __size_of_SYSTEM_Initialize 0003  
                             clrloop0 041D                         _mess_rec_size 0041  
                end_of_initialization 0062                        _measure_Offset 0220  
               measure_Impedance@asic 0064                     __end_of_lputs_ISR 02F1  
                   __end_of_setup_ADC 0428                      ??_start_TMR0_ISR 0075  
                   __end_of_start_RCM 0432                  __end_of_mess_handler 02C6  
                          _setup_TMR0 040E                      __CFG_FOSC$INTOSC 0000  
              __end_of_measure_Offset 025F                ??_measure_Impedance_SE 0052  
                       ??_config_ASIC 0051                     _measure_Impedance 0065  
                  ?_measure_Impedance 0075                        ADC_2@ADC_value 0050  
          __end_of_start_RX_USART_ISR 03DE                ?_OSCILLATOR_Initialize 0075  
   measure_Impedance_no_offset@value1 0060     measure_Impedance_no_offset@value2 0062  
                 start_initialization 0057                   ??_measure_Impedance 0052  
     __size_of_PIN_MANAGER_Initialize 0019                           __end_of_isr 0056  
                     ?_measure_Offset 0075   __end_of_measure_Impedance_no_offset 01E0  
         _measure_Impedance_no_offset 0175              measure_Impedance_SE@asic 0064  
             __size_of_close_RX_USART 0007                     _USARTX_change_pol 0432  
                i1_start_RX_USART_ISR 03DE                    ?_USARTX_change_pol 0075  
                      ADC_4@ADC_value 0050             __end_of_measure_Impedance 00FB  
                 ??_USARTX_change_pol 004C                        ADC_5@ADC_value 0050  
                 __end_of_config_ASIC 03CD                           ?_setup_TMR0 0075  
          __end_of_start_TX_USART_ISR 040E                           __pbssCOMMON 0070  
                           ___latbits 0000                         __pcstackBANK0 004C  
           __end_of_USARTX_change_pol 0435       measure_Impedance_no_offset@asic 0064  
               ?i1_start_RX_USART_ISR 0075                 __size_of_mess_handler 002E  
              _PIN_MANAGER_Initialize 039E                 __end_of_stop_TMR0_ISR 043B  
                  _calculate_checksum 0385                        __size_of_ADC_2 0023  
                      __size_of_ADC_4 0023                        __size_of_ADC_5 0023  
             read_ADC_channels@value1 005A               read_ADC_channels@value2 005C  
             read_ADC_channels@value3 005E                   ?_calculate_checksum 004C  
                        _mess_handler 0298                   __size_of_setup_TMR0 0007  
                         _config_ASIC 03B7                  ??_calculate_checksum 004D  
                           clear_ram0 041C                            lputs_ISR@i 0050  
          __size_of_measure_Impedance 0096             measure_Impedance_SE@check 0061  
                           _lputs_ISR 02C6                             _setup_ADC 0422  
                           _start_RCM 042E            __size_of_USARTX_change_pol 0003  
              ??i1_start_RX_USART_ISR 0075                        _close_RX_USART 0415  
             measure_Impedance@value1 0060               measure_Impedance@value2 0062  
             measure_Impedance_SE@aux 0054                            ?_lputs_ISR 004C  
             calculate_checksum@check 0050                            ?_setup_ADC 0075  
             ??_OSCILLATOR_Initialize 004C                     start_TMR0_ISR@val 0077  
                          ?_start_RCM 0075        measure_Impedance_no_offset@aux 0053  
                    ??_measure_Offset 0052                __end_of_close_RX_USART 041C  
                      BIO_config@conf 004C                    measure_Offset@asic 005C  
                            __ptext10 00FB                              __ptext11 0385  
                            __ptext20 0432                              __ptext12 031C  
                            __ptext21 0435                              __ptext13 0065  
                            __ptext22 039E                              __ptext14 033F  
                            __ptext23 0428                              __ptext15 0362  
                            __ptext16 03B7                              __ptext25 03DE  
                            __ptext17 02C6                              __ptext26 0438  
                            __ptext18 0415                              __ptext27 03EF  
                            __ptext19 02F1                         lputs_ISR@data 004F  
                  _start_RX_USART_ISR 03CD                            _BIO_config 02F1  
                       __size_of_main 0040                              _mess_rec 0042  
       __size_of_measure_Impedance_SE 007A                   ?_start_RX_USART_ISR 0075  
                            int$flags 007E                          ??_setup_TMR0 004C  
                         _TIMER0_flag 003E                  ??_start_RX_USART_ISR 004C  
             __size_of_start_TMR0_ISR 0010                       ?_close_RX_USART 0075  
              calculate_checksum@data 004F                              intlevel1 0000  
                  _start_TX_USART_ISR 03FF                         BIO_config@out 0050  
             ?_PIN_MANAGER_Initialize 0075                     __CFG_CLKOUTEN$OFF 0000  
                  __end_of_setup_TMR0 0415                   ?_start_TX_USART_ISR 0075  
                         ??_lputs_ISR 004D                           ??_setup_ADC 004C  
               calculate_checksum@num 004C                           ??_start_RCM 004C  
                ??_start_TX_USART_ISR 004C                           BIO_config@i 004F  
      __end_of_PIN_MANAGER_Initialize 03B7                           ?_BIO_config 004C  
                 calculate_checksum@i 0051                          ?_config_ASIC 0075  
