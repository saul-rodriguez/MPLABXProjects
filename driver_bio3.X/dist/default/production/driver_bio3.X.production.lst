

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Mon Jul 23 10:43:10 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16LF1823
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	intentry,global,class=CODE,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	dabs	1,0x7E,2
    38  0000                     
    39                           ; Version 2.00
    40                           ; Generated 27/05/2018 GMT
    41                           ; 
    42                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC16LF1823 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     	;# 
    74  0001                     	;# 
    75  0002                     	;# 
    76  0003                     	;# 
    77  0004                     	;# 
    78  0005                     	;# 
    79  0006                     	;# 
    80  0007                     	;# 
    81  0008                     	;# 
    82  0009                     	;# 
    83  000A                     	;# 
    84  000B                     	;# 
    85  000C                     	;# 
    86  000E                     	;# 
    87  0011                     	;# 
    88  0012                     	;# 
    89  0015                     	;# 
    90  0016                     	;# 
    91  0016                     	;# 
    92  0017                     	;# 
    93  0018                     	;# 
    94  0019                     	;# 
    95  001A                     	;# 
    96  001B                     	;# 
    97  001C                     	;# 
    98  001E                     	;# 
    99  001F                     	;# 
   100  008C                     	;# 
   101  008E                     	;# 
   102  0091                     	;# 
   103  0092                     	;# 
   104  0095                     	;# 
   105  0096                     	;# 
   106  0097                     	;# 
   107  0098                     	;# 
   108  0099                     	;# 
   109  009A                     	;# 
   110  009B                     	;# 
   111  009B                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  010C                     	;# 
   116  010E                     	;# 
   117  0111                     	;# 
   118  0112                     	;# 
   119  0113                     	;# 
   120  0114                     	;# 
   121  0115                     	;# 
   122  0116                     	;# 
   123  0117                     	;# 
   124  0118                     	;# 
   125  0119                     	;# 
   126  011A                     	;# 
   127  011B                     	;# 
   128  011D                     	;# 
   129  011D                     	;# 
   130  018C                     	;# 
   131  018E                     	;# 
   132  0191                     	;# 
   133  0191                     	;# 
   134  0192                     	;# 
   135  0193                     	;# 
   136  0193                     	;# 
   137  0193                     	;# 
   138  0194                     	;# 
   139  0195                     	;# 
   140  0196                     	;# 
   141  0199                     	;# 
   142  019A                     	;# 
   143  019B                     	;# 
   144  019B                     	;# 
   145  019B                     	;# 
   146  019B                     	;# 
   147  019C                     	;# 
   148  019C                     	;# 
   149  019D                     	;# 
   150  019E                     	;# 
   151  019F                     	;# 
   152  020C                     	;# 
   153  020E                     	;# 
   154  0211                     	;# 
   155  0211                     	;# 
   156  0212                     	;# 
   157  0212                     	;# 
   158  0213                     	;# 
   159  0213                     	;# 
   160  0214                     	;# 
   161  0214                     	;# 
   162  0215                     	;# 
   163  0215                     	;# 
   164  0215                     	;# 
   165  0216                     	;# 
   166  0216                     	;# 
   167  0217                     	;# 
   168  0217                     	;# 
   169  0291                     	;# 
   170  0291                     	;# 
   171  0292                     	;# 
   172  0293                     	;# 
   173  0294                     	;# 
   174  0295                     	;# 
   175  0295                     	;# 
   176  0296                     	;# 
   177  0391                     	;# 
   178  0392                     	;# 
   179  0393                     	;# 
   180  039A                     	;# 
   181  039C                     	;# 
   182  039D                     	;# 
   183  039E                     	;# 
   184  039F                     	;# 
   185  0FE4                     	;# 
   186  0FE5                     	;# 
   187  0FE6                     	;# 
   188  0FE7                     	;# 
   189  0FE8                     	;# 
   190  0FE9                     	;# 
   191  0FEA                     	;# 
   192  0FEB                     	;# 
   193  0FED                     	;# 
   194  0FEE                     	;# 
   195  0FEF                     	;# 
   196  0000                     	;# 
   197  0001                     	;# 
   198  0002                     	;# 
   199  0003                     	;# 
   200  0004                     	;# 
   201  0005                     	;# 
   202  0006                     	;# 
   203  0007                     	;# 
   204  0008                     	;# 
   205  0009                     	;# 
   206  000A                     	;# 
   207  000B                     	;# 
   208  000C                     	;# 
   209  000E                     	;# 
   210  0011                     	;# 
   211  0012                     	;# 
   212  0015                     	;# 
   213  0016                     	;# 
   214  0016                     	;# 
   215  0017                     	;# 
   216  0018                     	;# 
   217  0019                     	;# 
   218  001A                     	;# 
   219  001B                     	;# 
   220  001C                     	;# 
   221  001E                     	;# 
   222  001F                     	;# 
   223  008C                     	;# 
   224  008E                     	;# 
   225  0091                     	;# 
   226  0092                     	;# 
   227  0095                     	;# 
   228  0096                     	;# 
   229  0097                     	;# 
   230  0098                     	;# 
   231  0099                     	;# 
   232  009A                     	;# 
   233  009B                     	;# 
   234  009B                     	;# 
   235  009C                     	;# 
   236  009D                     	;# 
   237  009E                     	;# 
   238  010C                     	;# 
   239  010E                     	;# 
   240  0111                     	;# 
   241  0112                     	;# 
   242  0113                     	;# 
   243  0114                     	;# 
   244  0115                     	;# 
   245  0116                     	;# 
   246  0117                     	;# 
   247  0118                     	;# 
   248  0119                     	;# 
   249  011A                     	;# 
   250  011B                     	;# 
   251  011D                     	;# 
   252  011D                     	;# 
   253  018C                     	;# 
   254  018E                     	;# 
   255  0191                     	;# 
   256  0191                     	;# 
   257  0192                     	;# 
   258  0193                     	;# 
   259  0193                     	;# 
   260  0193                     	;# 
   261  0194                     	;# 
   262  0195                     	;# 
   263  0196                     	;# 
   264  0199                     	;# 
   265  019A                     	;# 
   266  019B                     	;# 
   267  019B                     	;# 
   268  019B                     	;# 
   269  019B                     	;# 
   270  019C                     	;# 
   271  019C                     	;# 
   272  019D                     	;# 
   273  019E                     	;# 
   274  019F                     	;# 
   275  020C                     	;# 
   276  020E                     	;# 
   277  0211                     	;# 
   278  0211                     	;# 
   279  0212                     	;# 
   280  0212                     	;# 
   281  0213                     	;# 
   282  0213                     	;# 
   283  0214                     	;# 
   284  0214                     	;# 
   285  0215                     	;# 
   286  0215                     	;# 
   287  0215                     	;# 
   288  0216                     	;# 
   289  0216                     	;# 
   290  0217                     	;# 
   291  0217                     	;# 
   292  0291                     	;# 
   293  0291                     	;# 
   294  0292                     	;# 
   295  0293                     	;# 
   296  0294                     	;# 
   297  0295                     	;# 
   298  0295                     	;# 
   299  0296                     	;# 
   300  0391                     	;# 
   301  0392                     	;# 
   302  0393                     	;# 
   303  039A                     	;# 
   304  039C                     	;# 
   305  039D                     	;# 
   306  039E                     	;# 
   307  039F                     	;# 
   308  0FE4                     	;# 
   309  0FE5                     	;# 
   310  0FE6                     	;# 
   311  0FE7                     	;# 
   312  0FE8                     	;# 
   313  0FE9                     	;# 
   314  0FEA                     	;# 
   315  0FEB                     	;# 
   316  0FED                     	;# 
   317  0FEE                     	;# 
   318  0FEF                     	;# 
   319  0000                     	;# 
   320  0001                     	;# 
   321  0002                     	;# 
   322  0003                     	;# 
   323  0004                     	;# 
   324  0005                     	;# 
   325  0006                     	;# 
   326  0007                     	;# 
   327  0008                     	;# 
   328  0009                     	;# 
   329  000A                     	;# 
   330  000B                     	;# 
   331  000C                     	;# 
   332  000E                     	;# 
   333  0011                     	;# 
   334  0012                     	;# 
   335  0015                     	;# 
   336  0016                     	;# 
   337  0016                     	;# 
   338  0017                     	;# 
   339  0018                     	;# 
   340  0019                     	;# 
   341  001A                     	;# 
   342  001B                     	;# 
   343  001C                     	;# 
   344  001E                     	;# 
   345  001F                     	;# 
   346  008C                     	;# 
   347  008E                     	;# 
   348  0091                     	;# 
   349  0092                     	;# 
   350  0095                     	;# 
   351  0096                     	;# 
   352  0097                     	;# 
   353  0098                     	;# 
   354  0099                     	;# 
   355  009A                     	;# 
   356  009B                     	;# 
   357  009B                     	;# 
   358  009C                     	;# 
   359  009D                     	;# 
   360  009E                     	;# 
   361  010C                     	;# 
   362  010E                     	;# 
   363  0111                     	;# 
   364  0112                     	;# 
   365  0113                     	;# 
   366  0114                     	;# 
   367  0115                     	;# 
   368  0116                     	;# 
   369  0117                     	;# 
   370  0118                     	;# 
   371  0119                     	;# 
   372  011A                     	;# 
   373  011B                     	;# 
   374  011D                     	;# 
   375  011D                     	;# 
   376  018C                     	;# 
   377  018E                     	;# 
   378  0191                     	;# 
   379  0191                     	;# 
   380  0192                     	;# 
   381  0193                     	;# 
   382  0193                     	;# 
   383  0193                     	;# 
   384  0194                     	;# 
   385  0195                     	;# 
   386  0196                     	;# 
   387  0199                     	;# 
   388  019A                     	;# 
   389  019B                     	;# 
   390  019B                     	;# 
   391  019B                     	;# 
   392  019B                     	;# 
   393  019C                     	;# 
   394  019C                     	;# 
   395  019D                     	;# 
   396  019E                     	;# 
   397  019F                     	;# 
   398  020C                     	;# 
   399  020E                     	;# 
   400  0211                     	;# 
   401  0211                     	;# 
   402  0212                     	;# 
   403  0212                     	;# 
   404  0213                     	;# 
   405  0213                     	;# 
   406  0214                     	;# 
   407  0214                     	;# 
   408  0215                     	;# 
   409  0215                     	;# 
   410  0215                     	;# 
   411  0216                     	;# 
   412  0216                     	;# 
   413  0217                     	;# 
   414  0217                     	;# 
   415  0291                     	;# 
   416  0291                     	;# 
   417  0292                     	;# 
   418  0293                     	;# 
   419  0294                     	;# 
   420  0295                     	;# 
   421  0295                     	;# 
   422  0296                     	;# 
   423  0391                     	;# 
   424  0392                     	;# 
   425  0393                     	;# 
   426  039A                     	;# 
   427  039C                     	;# 
   428  039D                     	;# 
   429  039E                     	;# 
   430  039F                     	;# 
   431  0FE4                     	;# 
   432  0FE5                     	;# 
   433  0FE6                     	;# 
   434  0FE7                     	;# 
   435  0FE8                     	;# 
   436  0FE9                     	;# 
   437  0FEA                     	;# 
   438  0FEB                     	;# 
   439  0FED                     	;# 
   440  0FEE                     	;# 
   441  0FEF                     	;# 
   442  0000                     	;# 
   443  0001                     	;# 
   444  0002                     	;# 
   445  0003                     	;# 
   446  0004                     	;# 
   447  0005                     	;# 
   448  0006                     	;# 
   449  0007                     	;# 
   450  0008                     	;# 
   451  0009                     	;# 
   452  000A                     	;# 
   453  000B                     	;# 
   454  000C                     	;# 
   455  000E                     	;# 
   456  0011                     	;# 
   457  0012                     	;# 
   458  0015                     	;# 
   459  0016                     	;# 
   460  0016                     	;# 
   461  0017                     	;# 
   462  0018                     	;# 
   463  0019                     	;# 
   464  001A                     	;# 
   465  001B                     	;# 
   466  001C                     	;# 
   467  001E                     	;# 
   468  001F                     	;# 
   469  008C                     	;# 
   470  008E                     	;# 
   471  0091                     	;# 
   472  0092                     	;# 
   473  0095                     	;# 
   474  0096                     	;# 
   475  0097                     	;# 
   476  0098                     	;# 
   477  0099                     	;# 
   478  009A                     	;# 
   479  009B                     	;# 
   480  009B                     	;# 
   481  009C                     	;# 
   482  009D                     	;# 
   483  009E                     	;# 
   484  010C                     	;# 
   485  010E                     	;# 
   486  0111                     	;# 
   487  0112                     	;# 
   488  0113                     	;# 
   489  0114                     	;# 
   490  0115                     	;# 
   491  0116                     	;# 
   492  0117                     	;# 
   493  0118                     	;# 
   494  0119                     	;# 
   495  011A                     	;# 
   496  011B                     	;# 
   497  011D                     	;# 
   498  011D                     	;# 
   499  018C                     	;# 
   500  018E                     	;# 
   501  0191                     	;# 
   502  0191                     	;# 
   503  0192                     	;# 
   504  0193                     	;# 
   505  0193                     	;# 
   506  0193                     	;# 
   507  0194                     	;# 
   508  0195                     	;# 
   509  0196                     	;# 
   510  0199                     	;# 
   511  019A                     	;# 
   512  019B                     	;# 
   513  019B                     	;# 
   514  019B                     	;# 
   515  019B                     	;# 
   516  019C                     	;# 
   517  019C                     	;# 
   518  019D                     	;# 
   519  019E                     	;# 
   520  019F                     	;# 
   521  020C                     	;# 
   522  020E                     	;# 
   523  0211                     	;# 
   524  0211                     	;# 
   525  0212                     	;# 
   526  0212                     	;# 
   527  0213                     	;# 
   528  0213                     	;# 
   529  0214                     	;# 
   530  0214                     	;# 
   531  0215                     	;# 
   532  0215                     	;# 
   533  0215                     	;# 
   534  0216                     	;# 
   535  0216                     	;# 
   536  0217                     	;# 
   537  0217                     	;# 
   538  0291                     	;# 
   539  0291                     	;# 
   540  0292                     	;# 
   541  0293                     	;# 
   542  0294                     	;# 
   543  0295                     	;# 
   544  0295                     	;# 
   545  0296                     	;# 
   546  0391                     	;# 
   547  0392                     	;# 
   548  0393                     	;# 
   549  039A                     	;# 
   550  039C                     	;# 
   551  039D                     	;# 
   552  039E                     	;# 
   553  039F                     	;# 
   554  0FE4                     	;# 
   555  0FE5                     	;# 
   556  0FE6                     	;# 
   557  0FE7                     	;# 
   558  0FE8                     	;# 
   559  0FE9                     	;# 
   560  0FEA                     	;# 
   561  0FEB                     	;# 
   562  0FED                     	;# 
   563  0FEE                     	;# 
   564  0FEF                     	;# 
   565  0000                     	;# 
   566  0001                     	;# 
   567  0002                     	;# 
   568  0003                     	;# 
   569  0004                     	;# 
   570  0005                     	;# 
   571  0006                     	;# 
   572  0007                     	;# 
   573  0008                     	;# 
   574  0009                     	;# 
   575  000A                     	;# 
   576  000B                     	;# 
   577  000C                     	;# 
   578  000E                     	;# 
   579  0011                     	;# 
   580  0012                     	;# 
   581  0015                     	;# 
   582  0016                     	;# 
   583  0016                     	;# 
   584  0017                     	;# 
   585  0018                     	;# 
   586  0019                     	;# 
   587  001A                     	;# 
   588  001B                     	;# 
   589  001C                     	;# 
   590  001E                     	;# 
   591  001F                     	;# 
   592  008C                     	;# 
   593  008E                     	;# 
   594  0091                     	;# 
   595  0092                     	;# 
   596  0095                     	;# 
   597  0096                     	;# 
   598  0097                     	;# 
   599  0098                     	;# 
   600  0099                     	;# 
   601  009A                     	;# 
   602  009B                     	;# 
   603  009B                     	;# 
   604  009C                     	;# 
   605  009D                     	;# 
   606  009E                     	;# 
   607  010C                     	;# 
   608  010E                     	;# 
   609  0111                     	;# 
   610  0112                     	;# 
   611  0113                     	;# 
   612  0114                     	;# 
   613  0115                     	;# 
   614  0116                     	;# 
   615  0117                     	;# 
   616  0118                     	;# 
   617  0119                     	;# 
   618  011A                     	;# 
   619  011B                     	;# 
   620  011D                     	;# 
   621  011D                     	;# 
   622  018C                     	;# 
   623  018E                     	;# 
   624  0191                     	;# 
   625  0191                     	;# 
   626  0192                     	;# 
   627  0193                     	;# 
   628  0193                     	;# 
   629  0193                     	;# 
   630  0194                     	;# 
   631  0195                     	;# 
   632  0196                     	;# 
   633  0199                     	;# 
   634  019A                     	;# 
   635  019B                     	;# 
   636  019B                     	;# 
   637  019B                     	;# 
   638  019B                     	;# 
   639  019C                     	;# 
   640  019C                     	;# 
   641  019D                     	;# 
   642  019E                     	;# 
   643  019F                     	;# 
   644  020C                     	;# 
   645  020E                     	;# 
   646  0211                     	;# 
   647  0211                     	;# 
   648  0212                     	;# 
   649  0212                     	;# 
   650  0213                     	;# 
   651  0213                     	;# 
   652  0214                     	;# 
   653  0214                     	;# 
   654  0215                     	;# 
   655  0215                     	;# 
   656  0215                     	;# 
   657  0216                     	;# 
   658  0216                     	;# 
   659  0217                     	;# 
   660  0217                     	;# 
   661  0291                     	;# 
   662  0291                     	;# 
   663  0292                     	;# 
   664  0293                     	;# 
   665  0294                     	;# 
   666  0295                     	;# 
   667  0295                     	;# 
   668  0296                     	;# 
   669  0391                     	;# 
   670  0392                     	;# 
   671  0393                     	;# 
   672  039A                     	;# 
   673  039C                     	;# 
   674  039D                     	;# 
   675  039E                     	;# 
   676  039F                     	;# 
   677  0FE4                     	;# 
   678  0FE5                     	;# 
   679  0FE6                     	;# 
   680  0FE7                     	;# 
   681  0FE8                     	;# 
   682  0FE9                     	;# 
   683  0FEA                     	;# 
   684  0FEB                     	;# 
   685  0FED                     	;# 
   686  0FEE                     	;# 
   687  0FEF                     	;# 
   688  0000                     	;# 
   689  0001                     	;# 
   690  0002                     	;# 
   691  0003                     	;# 
   692  0004                     	;# 
   693  0005                     	;# 
   694  0006                     	;# 
   695  0007                     	;# 
   696  0008                     	;# 
   697  0009                     	;# 
   698  000A                     	;# 
   699  000B                     	;# 
   700  000C                     	;# 
   701  000E                     	;# 
   702  0011                     	;# 
   703  0012                     	;# 
   704  0015                     	;# 
   705  0016                     	;# 
   706  0016                     	;# 
   707  0017                     	;# 
   708  0018                     	;# 
   709  0019                     	;# 
   710  001A                     	;# 
   711  001B                     	;# 
   712  001C                     	;# 
   713  001E                     	;# 
   714  001F                     	;# 
   715  008C                     	;# 
   716  008E                     	;# 
   717  0091                     	;# 
   718  0092                     	;# 
   719  0095                     	;# 
   720  0096                     	;# 
   721  0097                     	;# 
   722  0098                     	;# 
   723  0099                     	;# 
   724  009A                     	;# 
   725  009B                     	;# 
   726  009B                     	;# 
   727  009C                     	;# 
   728  009D                     	;# 
   729  009E                     	;# 
   730  010C                     	;# 
   731  010E                     	;# 
   732  0111                     	;# 
   733  0112                     	;# 
   734  0113                     	;# 
   735  0114                     	;# 
   736  0115                     	;# 
   737  0116                     	;# 
   738  0117                     	;# 
   739  0118                     	;# 
   740  0119                     	;# 
   741  011A                     	;# 
   742  011B                     	;# 
   743  011D                     	;# 
   744  011D                     	;# 
   745  018C                     	;# 
   746  018E                     	;# 
   747  0191                     	;# 
   748  0191                     	;# 
   749  0192                     	;# 
   750  0193                     	;# 
   751  0193                     	;# 
   752  0193                     	;# 
   753  0194                     	;# 
   754  0195                     	;# 
   755  0196                     	;# 
   756  0199                     	;# 
   757  019A                     	;# 
   758  019B                     	;# 
   759  019B                     	;# 
   760  019B                     	;# 
   761  019B                     	;# 
   762  019C                     	;# 
   763  019C                     	;# 
   764  019D                     	;# 
   765  019E                     	;# 
   766  019F                     	;# 
   767  020C                     	;# 
   768  020E                     	;# 
   769  0211                     	;# 
   770  0211                     	;# 
   771  0212                     	;# 
   772  0212                     	;# 
   773  0213                     	;# 
   774  0213                     	;# 
   775  0214                     	;# 
   776  0214                     	;# 
   777  0215                     	;# 
   778  0215                     	;# 
   779  0215                     	;# 
   780  0216                     	;# 
   781  0216                     	;# 
   782  0217                     	;# 
   783  0217                     	;# 
   784  0291                     	;# 
   785  0291                     	;# 
   786  0292                     	;# 
   787  0293                     	;# 
   788  0294                     	;# 
   789  0295                     	;# 
   790  0295                     	;# 
   791  0296                     	;# 
   792  0391                     	;# 
   793  0392                     	;# 
   794  0393                     	;# 
   795  039A                     	;# 
   796  039C                     	;# 
   797  039D                     	;# 
   798  039E                     	;# 
   799  039F                     	;# 
   800  0FE4                     	;# 
   801  0FE5                     	;# 
   802  0FE6                     	;# 
   803  0FE7                     	;# 
   804  0FE8                     	;# 
   805  0FE9                     	;# 
   806  0FEA                     	;# 
   807  0FEB                     	;# 
   808  0FED                     	;# 
   809  0FEE                     	;# 
   810  0FEF                     	;# 
   811  0000                     	;# 
   812  0001                     	;# 
   813  0002                     	;# 
   814  0003                     	;# 
   815  0004                     	;# 
   816  0005                     	;# 
   817  0006                     	;# 
   818  0007                     	;# 
   819  0008                     	;# 
   820  0009                     	;# 
   821  000A                     	;# 
   822  000B                     	;# 
   823  000C                     	;# 
   824  000E                     	;# 
   825  0011                     	;# 
   826  0012                     	;# 
   827  0015                     	;# 
   828  0016                     	;# 
   829  0016                     	;# 
   830  0017                     	;# 
   831  0018                     	;# 
   832  0019                     	;# 
   833  001A                     	;# 
   834  001B                     	;# 
   835  001C                     	;# 
   836  001E                     	;# 
   837  001F                     	;# 
   838  008C                     	;# 
   839  008E                     	;# 
   840  0091                     	;# 
   841  0092                     	;# 
   842  0095                     	;# 
   843  0096                     	;# 
   844  0097                     	;# 
   845  0098                     	;# 
   846  0099                     	;# 
   847  009A                     	;# 
   848  009B                     	;# 
   849  009B                     	;# 
   850  009C                     	;# 
   851  009D                     	;# 
   852  009E                     	;# 
   853  010C                     	;# 
   854  010E                     	;# 
   855  0111                     	;# 
   856  0112                     	;# 
   857  0113                     	;# 
   858  0114                     	;# 
   859  0115                     	;# 
   860  0116                     	;# 
   861  0117                     	;# 
   862  0118                     	;# 
   863  0119                     	;# 
   864  011A                     	;# 
   865  011B                     	;# 
   866  011D                     	;# 
   867  011D                     	;# 
   868  018C                     	;# 
   869  018E                     	;# 
   870  0191                     	;# 
   871  0191                     	;# 
   872  0192                     	;# 
   873  0193                     	;# 
   874  0193                     	;# 
   875  0193                     	;# 
   876  0194                     	;# 
   877  0195                     	;# 
   878  0196                     	;# 
   879  0199                     	;# 
   880  019A                     	;# 
   881  019B                     	;# 
   882  019B                     	;# 
   883  019B                     	;# 
   884  019B                     	;# 
   885  019C                     	;# 
   886  019C                     	;# 
   887  019D                     	;# 
   888  019E                     	;# 
   889  019F                     	;# 
   890  020C                     	;# 
   891  020E                     	;# 
   892  0211                     	;# 
   893  0211                     	;# 
   894  0212                     	;# 
   895  0212                     	;# 
   896  0213                     	;# 
   897  0213                     	;# 
   898  0214                     	;# 
   899  0214                     	;# 
   900  0215                     	;# 
   901  0215                     	;# 
   902  0215                     	;# 
   903  0216                     	;# 
   904  0216                     	;# 
   905  0217                     	;# 
   906  0217                     	;# 
   907  0291                     	;# 
   908  0291                     	;# 
   909  0292                     	;# 
   910  0293                     	;# 
   911  0294                     	;# 
   912  0295                     	;# 
   913  0295                     	;# 
   914  0296                     	;# 
   915  0391                     	;# 
   916  0392                     	;# 
   917  0393                     	;# 
   918  039A                     	;# 
   919  039C                     	;# 
   920  039D                     	;# 
   921  039E                     	;# 
   922  039F                     	;# 
   923  0FE4                     	;# 
   924  0FE5                     	;# 
   925  0FE6                     	;# 
   926  0FE7                     	;# 
   927  0FE8                     	;# 
   928  0FE9                     	;# 
   929  0FEA                     	;# 
   930  0FEB                     	;# 
   931  0FED                     	;# 
   932  0FEE                     	;# 
   933  0FEF                     	;# 
   934  0000                     	;# 
   935  0001                     	;# 
   936  0002                     	;# 
   937  0003                     	;# 
   938  0004                     	;# 
   939  0005                     	;# 
   940  0006                     	;# 
   941  0007                     	;# 
   942  0008                     	;# 
   943  0009                     	;# 
   944  000A                     	;# 
   945  000B                     	;# 
   946  000C                     	;# 
   947  000E                     	;# 
   948  0011                     	;# 
   949  0012                     	;# 
   950  0015                     	;# 
   951  0016                     	;# 
   952  0016                     	;# 
   953  0017                     	;# 
   954  0018                     	;# 
   955  0019                     	;# 
   956  001A                     	;# 
   957  001B                     	;# 
   958  001C                     	;# 
   959  001E                     	;# 
   960  001F                     	;# 
   961  008C                     	;# 
   962  008E                     	;# 
   963  0091                     	;# 
   964  0092                     	;# 
   965  0095                     	;# 
   966  0096                     	;# 
   967  0097                     	;# 
   968  0098                     	;# 
   969  0099                     	;# 
   970  009A                     	;# 
   971  009B                     	;# 
   972  009B                     	;# 
   973  009C                     	;# 
   974  009D                     	;# 
   975  009E                     	;# 
   976  010C                     	;# 
   977  010E                     	;# 
   978  0111                     	;# 
   979  0112                     	;# 
   980  0113                     	;# 
   981  0114                     	;# 
   982  0115                     	;# 
   983  0116                     	;# 
   984  0117                     	;# 
   985  0118                     	;# 
   986  0119                     	;# 
   987  011A                     	;# 
   988  011B                     	;# 
   989  011D                     	;# 
   990  011D                     	;# 
   991  018C                     	;# 
   992  018E                     	;# 
   993  0191                     	;# 
   994  0191                     	;# 
   995  0192                     	;# 
   996  0193                     	;# 
   997  0193                     	;# 
   998  0193                     	;# 
   999  0194                     	;# 
  1000  0195                     	;# 
  1001  0196                     	;# 
  1002  0199                     	;# 
  1003  019A                     	;# 
  1004  019B                     	;# 
  1005  019B                     	;# 
  1006  019B                     	;# 
  1007  019B                     	;# 
  1008  019C                     	;# 
  1009  019C                     	;# 
  1010  019D                     	;# 
  1011  019E                     	;# 
  1012  019F                     	;# 
  1013  020C                     	;# 
  1014  020E                     	;# 
  1015  0211                     	;# 
  1016  0211                     	;# 
  1017  0212                     	;# 
  1018  0212                     	;# 
  1019  0213                     	;# 
  1020  0213                     	;# 
  1021  0214                     	;# 
  1022  0214                     	;# 
  1023  0215                     	;# 
  1024  0215                     	;# 
  1025  0215                     	;# 
  1026  0216                     	;# 
  1027  0216                     	;# 
  1028  0217                     	;# 
  1029  0217                     	;# 
  1030  0291                     	;# 
  1031  0291                     	;# 
  1032  0292                     	;# 
  1033  0293                     	;# 
  1034  0294                     	;# 
  1035  0295                     	;# 
  1036  0295                     	;# 
  1037  0296                     	;# 
  1038  0391                     	;# 
  1039  0392                     	;# 
  1040  0393                     	;# 
  1041  039A                     	;# 
  1042  039C                     	;# 
  1043  039D                     	;# 
  1044  039E                     	;# 
  1045  039F                     	;# 
  1046  0FE4                     	;# 
  1047  0FE5                     	;# 
  1048  0FE6                     	;# 
  1049  0FE7                     	;# 
  1050  0FE8                     	;# 
  1051  0FE9                     	;# 
  1052  0FEA                     	;# 
  1053  0FEB                     	;# 
  1054  0FED                     	;# 
  1055  0FEE                     	;# 
  1056  0FEF                     	;# 
  1057  0000                     	;# 
  1058  0001                     	;# 
  1059  0002                     	;# 
  1060  0003                     	;# 
  1061  0004                     	;# 
  1062  0005                     	;# 
  1063  0006                     	;# 
  1064  0007                     	;# 
  1065  0008                     	;# 
  1066  0009                     	;# 
  1067  000A                     	;# 
  1068  000B                     	;# 
  1069  000C                     	;# 
  1070  000E                     	;# 
  1071  0011                     	;# 
  1072  0012                     	;# 
  1073  0015                     	;# 
  1074  0016                     	;# 
  1075  0016                     	;# 
  1076  0017                     	;# 
  1077  0018                     	;# 
  1078  0019                     	;# 
  1079  001A                     	;# 
  1080  001B                     	;# 
  1081  001C                     	;# 
  1082  001E                     	;# 
  1083  001F                     	;# 
  1084  008C                     	;# 
  1085  008E                     	;# 
  1086  0091                     	;# 
  1087  0092                     	;# 
  1088  0095                     	;# 
  1089  0096                     	;# 
  1090  0097                     	;# 
  1091  0098                     	;# 
  1092  0099                     	;# 
  1093  009A                     	;# 
  1094  009B                     	;# 
  1095  009B                     	;# 
  1096  009C                     	;# 
  1097  009D                     	;# 
  1098  009E                     	;# 
  1099  010C                     	;# 
  1100  010E                     	;# 
  1101  0111                     	;# 
  1102  0112                     	;# 
  1103  0113                     	;# 
  1104  0114                     	;# 
  1105  0115                     	;# 
  1106  0116                     	;# 
  1107  0117                     	;# 
  1108  0118                     	;# 
  1109  0119                     	;# 
  1110  011A                     	;# 
  1111  011B                     	;# 
  1112  011D                     	;# 
  1113  011D                     	;# 
  1114  018C                     	;# 
  1115  018E                     	;# 
  1116  0191                     	;# 
  1117  0191                     	;# 
  1118  0192                     	;# 
  1119  0193                     	;# 
  1120  0193                     	;# 
  1121  0193                     	;# 
  1122  0194                     	;# 
  1123  0195                     	;# 
  1124  0196                     	;# 
  1125  0199                     	;# 
  1126  019A                     	;# 
  1127  019B                     	;# 
  1128  019B                     	;# 
  1129  019B                     	;# 
  1130  019B                     	;# 
  1131  019C                     	;# 
  1132  019C                     	;# 
  1133  019D                     	;# 
  1134  019E                     	;# 
  1135  019F                     	;# 
  1136  020C                     	;# 
  1137  020E                     	;# 
  1138  0211                     	;# 
  1139  0211                     	;# 
  1140  0212                     	;# 
  1141  0212                     	;# 
  1142  0213                     	;# 
  1143  0213                     	;# 
  1144  0214                     	;# 
  1145  0214                     	;# 
  1146  0215                     	;# 
  1147  0215                     	;# 
  1148  0215                     	;# 
  1149  0216                     	;# 
  1150  0216                     	;# 
  1151  0217                     	;# 
  1152  0217                     	;# 
  1153  0291                     	;# 
  1154  0291                     	;# 
  1155  0292                     	;# 
  1156  0293                     	;# 
  1157  0294                     	;# 
  1158  0295                     	;# 
  1159  0295                     	;# 
  1160  0296                     	;# 
  1161  0391                     	;# 
  1162  0392                     	;# 
  1163  0393                     	;# 
  1164  039A                     	;# 
  1165  039C                     	;# 
  1166  039D                     	;# 
  1167  039E                     	;# 
  1168  039F                     	;# 
  1169  0FE4                     	;# 
  1170  0FE5                     	;# 
  1171  0FE6                     	;# 
  1172  0FE7                     	;# 
  1173  0FE8                     	;# 
  1174  0FE9                     	;# 
  1175  0FEA                     	;# 
  1176  0FEB                     	;# 
  1177  0FED                     	;# 
  1178  0FEE                     	;# 
  1179  0FEF                     	;# 
  1180  0000                     	;# 
  1181  0001                     	;# 
  1182  0002                     	;# 
  1183  0003                     	;# 
  1184  0004                     	;# 
  1185  0005                     	;# 
  1186  0006                     	;# 
  1187  0007                     	;# 
  1188  0008                     	;# 
  1189  0009                     	;# 
  1190  000A                     	;# 
  1191  000B                     	;# 
  1192  000C                     	;# 
  1193  000E                     	;# 
  1194  0011                     	;# 
  1195  0012                     	;# 
  1196  0015                     	;# 
  1197  0016                     	;# 
  1198  0016                     	;# 
  1199  0017                     	;# 
  1200  0018                     	;# 
  1201  0019                     	;# 
  1202  001A                     	;# 
  1203  001B                     	;# 
  1204  001C                     	;# 
  1205  001E                     	;# 
  1206  001F                     	;# 
  1207  008C                     	;# 
  1208  008E                     	;# 
  1209  0091                     	;# 
  1210  0092                     	;# 
  1211  0095                     	;# 
  1212  0096                     	;# 
  1213  0097                     	;# 
  1214  0098                     	;# 
  1215  0099                     	;# 
  1216  009A                     	;# 
  1217  009B                     	;# 
  1218  009B                     	;# 
  1219  009C                     	;# 
  1220  009D                     	;# 
  1221  009E                     	;# 
  1222  010C                     	;# 
  1223  010E                     	;# 
  1224  0111                     	;# 
  1225  0112                     	;# 
  1226  0113                     	;# 
  1227  0114                     	;# 
  1228  0115                     	;# 
  1229  0116                     	;# 
  1230  0117                     	;# 
  1231  0118                     	;# 
  1232  0119                     	;# 
  1233  011A                     	;# 
  1234  011B                     	;# 
  1235  011D                     	;# 
  1236  011D                     	;# 
  1237  018C                     	;# 
  1238  018E                     	;# 
  1239  0191                     	;# 
  1240  0191                     	;# 
  1241  0192                     	;# 
  1242  0193                     	;# 
  1243  0193                     	;# 
  1244  0193                     	;# 
  1245  0194                     	;# 
  1246  0195                     	;# 
  1247  0196                     	;# 
  1248  0199                     	;# 
  1249  019A                     	;# 
  1250  019B                     	;# 
  1251  019B                     	;# 
  1252  019B                     	;# 
  1253  019B                     	;# 
  1254  019C                     	;# 
  1255  019C                     	;# 
  1256  019D                     	;# 
  1257  019E                     	;# 
  1258  019F                     	;# 
  1259  020C                     	;# 
  1260  020E                     	;# 
  1261  0211                     	;# 
  1262  0211                     	;# 
  1263  0212                     	;# 
  1264  0212                     	;# 
  1265  0213                     	;# 
  1266  0213                     	;# 
  1267  0214                     	;# 
  1268  0214                     	;# 
  1269  0215                     	;# 
  1270  0215                     	;# 
  1271  0215                     	;# 
  1272  0216                     	;# 
  1273  0216                     	;# 
  1274  0217                     	;# 
  1275  0217                     	;# 
  1276  0291                     	;# 
  1277  0291                     	;# 
  1278  0292                     	;# 
  1279  0293                     	;# 
  1280  0294                     	;# 
  1281  0295                     	;# 
  1282  0295                     	;# 
  1283  0296                     	;# 
  1284  0391                     	;# 
  1285  0392                     	;# 
  1286  0393                     	;# 
  1287  039A                     	;# 
  1288  039C                     	;# 
  1289  039D                     	;# 
  1290  039E                     	;# 
  1291  039F                     	;# 
  1292  0FE4                     	;# 
  1293  0FE5                     	;# 
  1294  0FE6                     	;# 
  1295  0FE7                     	;# 
  1296  0FE8                     	;# 
  1297  0FE9                     	;# 
  1298  0FEA                     	;# 
  1299  0FEB                     	;# 
  1300  0FED                     	;# 
  1301  0FEE                     	;# 
  1302  0FEF                     	;# 
  1303                           
  1304                           	psect	stringtext1
  1305  024A                     __pstringtext1:	
  1306  024A                     _filt:	
  1307  024A  34C7               	retlw	199
  1308  024B  3440               	retlw	64
  1309  024C  3400               	retlw	0
  1310  024D  3400               	retlw	0
  1311  024E  34CF               	retlw	207
  1312  024F  3440               	retlw	64
  1313  0250  3400               	retlw	0
  1314  0251  3400               	retlw	0
  1315  0252  346F               	retlw	111
  1316  0253  3440               	retlw	64
  1317  0254  3400               	retlw	0
  1318  0255  3400               	retlw	0
  1319  0256  343F               	retlw	63
  1320  0257  3440               	retlw	64
  1321  0258  3400               	retlw	0
  1322  0259  3400               	retlw	0
  1323  025A  340F               	retlw	15
  1324  025B  3489               	retlw	137
  1325  025C  3400               	retlw	0
  1326  025D  3400               	retlw	0
  1327  025E  340F               	retlw	15
  1328  025F  3488               	retlw	136
  1329  0260  3400               	retlw	0
  1330  0261  3400               	retlw	0
  1331  0262  340F               	retlw	15
  1332  0263  34A4               	retlw	164
  1333  0264  3400               	retlw	0
  1334  0265  3400               	retlw	0
  1335  0266  340F               	retlw	15
  1336  0267  3409               	retlw	9
  1337  0268  3401               	retlw	1
  1338  0269  3400               	retlw	0
  1339  026A  340F               	retlw	15
  1340  026B  3408               	retlw	8
  1341  026C  3401               	retlw	1
  1342  026D  3400               	retlw	0
  1343  026E  340F               	retlw	15
  1344  026F  3424               	retlw	36
  1345  0270  3401               	retlw	1
  1346  0271  3400               	retlw	0
  1347  0272  340F               	retlw	15
  1348  0273  3432               	retlw	50
  1349  0274  3401               	retlw	1
  1350  0275  3400               	retlw	0
  1351  0276                     __end_of_filt:	
  1352                           
  1353                           	psect	stringtext2
  1354  0389                     __pstringtext2:	
  1355  0389                     _freqs:	
  1356  0389  3400               	retlw	0
  1357  038A  3401               	retlw	1
  1358  038B  3402               	retlw	2
  1359  038C  3403               	retlw	3
  1360  038D  3404               	retlw	4
  1361  038E  3405               	retlw	5
  1362  038F  3406               	retlw	6
  1363  0390  3407               	retlw	7
  1364  0391  3408               	retlw	8
  1365  0392  3409               	retlw	9
  1366  0393  340A               	retlw	10
  1367  0394                     __end_of_freqs:	
  1368                           
  1369                           	psect	stringtext3
  1370  0394                     __pstringtext3:	
  1371  0394                     _gains:	
  1372  0394  3404               	retlw	4
  1373  0395  3405               	retlw	5
  1374  0396  3407               	retlw	7
  1375  0397  3403               	retlw	3
  1376  0398  3423               	retlw	35
  1377  0399  3463               	retlw	99
  1378  039A  346B               	retlw	107
  1379  039B  347B               	retlw	123
  1380  039C                     __end_of_gains:	
  1381  000E                     _PORTC	set	14
  1382  0015                     _TMR0	set	21
  1383  005E                     _PEIE	set	94
  1384  005F                     _GIE	set	95
  1385  008C                     _TXIF	set	140
  1386  008D                     _RCIF	set	141
  1387  005D                     _TMR0IE	set	93
  1388  005A                     _TMR0IF	set	90
  1389  0065                     _RA5	set	101
  1390  009B                     _ADRESL	set	155
  1391  009C                     _ADRESH	set	156
  1392  009E                     _ADCON1	set	158
  1393  009D                     _ADCON0	set	157
  1394  0098                     _OSCTUNE	set	152
  1395  009A                     _OSCSTAT	set	154
  1396  0099                     _OSCCON	set	153
  1397  0095                     _OPTION_REGbits	set	149
  1398  008C                     _TRISA	set	140
  1399  008E                     _TRISC	set	142
  1400  04E9                     _ADGO	set	1257
  1401  048D                     _RCIE	set	1165
  1402  04AD                     _TMR0CS	set	1197
  1403  04AB                     _PSA	set	1195
  1404  04A8                     _PS0	set	1192
  1405  04A9                     _PS1	set	1193
  1406  04AA                     _PS2	set	1194
  1407  048C                     _TXIE	set	1164
  1408  011D                     _APFCON	set	285
  1409  010E                     _LATC	set	270
  1410  010C                     _LATA	set	268
  1411  08EA                     _TXCKSEL	set	2282
  1412  08EF                     _RXDTSEL	set	2287
  1413  019B                     _SPBRGL	set	411
  1414  019C                     _SPBRGH	set	412
  1415  019A                     _TXREG	set	410
  1416  0199                     _RCREG	set	409
  1417  018E                     _ANSELC	set	398
  1418  018C                     _ANSELA	set	396
  1419  0CF5                     _TXEN	set	3317
  1420  0CEF                     _SPEN	set	3311
  1421  0CF4                     _SYNC	set	3316
  1422  0CFB                     _BRG16	set	3323
  1423  0CF2                     _BRGH	set	3314
  1424  0CEC                     _CREN	set	3308
  1425  0CE9                     _OERR	set	3305
  1426  0CFC                     _SCKP	set	3324
  1427  020E                     _WPUC	set	526
  1428  020C                     _WPUA	set	524
  1429  039A                     _CLKRCON	set	922
  1430                           
  1431                           ; #config settings
  1432  0000                     
  1433                           	psect	cinit
  1434  0053                     start_initialization:	
  1435  0053                     __initialization:	
  1436                           
  1437                           ; Clear objects allocated to COMMON
  1438  0053  01F7               	clrf	__pbssCOMMON& (0+127)
  1439  0054  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
  1440  0055  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
  1441                           
  1442                           ; Clear objects allocated to BANK0
  1443  0056  3020               	movlw	low __pbssBANK0
  1444  0057  0084               	movwf	4
  1445  0058  3000               	movlw	high __pbssBANK0
  1446  0059  0085               	movwf	5
  1447  005A  3029               	movlw	41
  1448  005B  23AA               	fcall	clear_ram0
  1449  005C                     end_of_initialization:	
  1450                           ;End of C runtime variable initialization code
  1451                           
  1452  005C                     __end_of__initialization:	
  1453  005C  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1454  005D  0020               	movlb	0
  1455  005E  2A76               	ljmp	_main	;jump to C main() function
  1456                           
  1457                           	psect	bssCOMMON
  1458  0077                     __pbssCOMMON:	
  1459  0077                     _USART_tx_flag:	
  1460  0077                     	ds	1
  1461  0078                     _USART_tx_length:	
  1462  0078                     	ds	1
  1463  0079                     _USART_tx_index:	
  1464  0079                     	ds	1
  1465                           
  1466                           	psect	bssBANK0
  1467  0020                     __pbssBANK0:	
  1468  0020                     _USART_tx_data:	
  1469  0020                     	ds	15
  1470  002F                     _USART_rx_data:	
  1471  002F                     	ds	10
  1472  0039                     _TIMER0_timeout:	
  1473  0039                     	ds	2
  1474  003B                     _USART_rx_flag:	
  1475  003B                     	ds	1
  1476  003C                     _mess_rec_size:	
  1477  003C                     	ds	1
  1478  003D                     _USART_rx_index:	
  1479  003D                     	ds	1
  1480  003E                     _TIMER0_flag:	
  1481  003E                     	ds	1
  1482  003F                     _mess_rec:	
  1483  003F                     	ds	10
  1484                           
  1485                           	psect	clrtext
  1486  03AA                     clear_ram0:	
  1487                           ;	Called with FSR0 containing the base address, and
  1488                           ;	WREG with the size to clear
  1489                           
  1490  03AA  0064               	clrwdt	;clear the watchdog before getting into this loop
  1491  03AB                     clrloop0:	
  1492  03AB  0180               	clrf	0	;clear RAM location pointed to by FSR
  1493  03AC  3101               	addfsr 0,1
  1494  03AD  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1495  03AE  2BAB               	goto	clrloop0	;have we reached the end yet?
  1496  03AF  3400               	retlw	0	;all done for this memory range, return
  1497                           
  1498                           	psect	cstackBANK1
  1499  00A0                     __pcstackBANK1:	
  1500  00A0                     sweep@check:	
  1501                           
  1502                           ; 1 bytes @ 0x0
  1503  00A0                     	ds	1
  1504  00A1                     sweep@aux:	
  1505                           
  1506                           ; 7 bytes @ 0x1
  1507  00A1                     	ds	7
  1508  00A8                     sweep@freq_index:	
  1509                           
  1510                           ; 1 bytes @ 0x8
  1511  00A8                     	ds	1
  1512  00A9                     sweep@i:	
  1513                           
  1514                           ; 1 bytes @ 0x9
  1515  00A9                     	ds	1
  1516  00AA                     sweep@count:	
  1517                           
  1518                           ; 1 bytes @ 0xA
  1519  00AA                     	ds	1
  1520  00AB                     sweep@I:	
  1521                           
  1522                           ; 2 bytes @ 0xB
  1523  00AB                     	ds	2
  1524  00AD                     sweep@Q:	
  1525                           
  1526                           ; 2 bytes @ 0xD
  1527  00AD                     	ds	2
  1528  00AF                     sweep@gain_index:	
  1529                           
  1530                           ; 1 bytes @ 0xF
  1531  00AF                     	ds	1
  1532  00B0                     sweep@ret:	
  1533                           
  1534                           ; 1 bytes @ 0x10
  1535  00B0                     	ds	1
  1536  00B1                     sweep@asic:	
  1537                           
  1538                           ; 2 bytes @ 0x11
  1539  00B1                     	ds	2
  1540                           
  1541                           	psect	cstackCOMMON
  1542  0070                     __pcstackCOMMON:	
  1543  0070                     ?_OSCILLATOR_Initialize:	
  1544  0070                     ?_setup_TMR0:	
  1545                           ; 1 bytes @ 0x0
  1546                           
  1547  0070                     ?_start_TX_USART_ISR:	
  1548                           ; 1 bytes @ 0x0
  1549                           
  1550  0070                     ?_start_RX_USART_ISR:	
  1551                           ; 1 bytes @ 0x0
  1552                           
  1553  0070                     ?_start_RCM:	
  1554                           ; 1 bytes @ 0x0
  1555                           
  1556  0070                     ?_setup_ADC:	
  1557                           ; 1 bytes @ 0x0
  1558                           
  1559  0070                     ?_sweep:	
  1560                           ; 1 bytes @ 0x0
  1561                           
  1562  0070                     ?_stop_TMR0_ISR:	
  1563                           ; 1 bytes @ 0x0
  1564                           
  1565  0070                     ??_stop_TMR0_ISR:	
  1566                           ; 1 bytes @ 0x0
  1567                           
  1568  0070                     ?_start_TMR0_ISR:	
  1569                           ; 1 bytes @ 0x0
  1570                           
  1571  0070                     ??_start_TMR0_ISR:	
  1572                           ; 1 bytes @ 0x0
  1573                           
  1574  0070                     ?_PIN_MANAGER_Initialize:	
  1575                           ; 1 bytes @ 0x0
  1576                           
  1577  0070                     ?_SYSTEM_Initialize:	
  1578                           ; 1 bytes @ 0x0
  1579                           
  1580  0070                     ?_USARTX_change_pol:	
  1581                           ; 1 bytes @ 0x0
  1582                           
  1583  0070                     ?_main:	
  1584                           ; 1 bytes @ 0x0
  1585                           
  1586  0070                     ?_isr:	
  1587                           ; 1 bytes @ 0x0
  1588                           
  1589  0070                     ?_close_RX_USART:	
  1590                           ; 1 bytes @ 0x0
  1591                           
  1592  0070                     ?i1_start_RX_USART_ISR:	
  1593                           ; 1 bytes @ 0x0
  1594                           
  1595  0070                     ??i1_start_RX_USART_ISR:	
  1596                           ; 1 bytes @ 0x0
  1597                           
  1598                           
  1599                           ; 1 bytes @ 0x0
  1600  0070                     	ds	2
  1601  0072                     start_TMR0_ISR@val:	
  1602                           
  1603                           ; 1 bytes @ 0x2
  1604  0072                     	ds	1
  1605  0073                     ??_isr:	
  1606                           
  1607                           ; 1 bytes @ 0x3
  1608  0073                     	ds	1
  1609  0074                     ??_OSCILLATOR_Initialize:	
  1610  0074                     ??_setup_TMR0:	
  1611                           ; 1 bytes @ 0x4
  1612                           
  1613  0074                     ??_start_TX_USART_ISR:	
  1614                           ; 1 bytes @ 0x4
  1615                           
  1616  0074                     ??_start_RX_USART_ISR:	
  1617                           ; 1 bytes @ 0x4
  1618                           
  1619  0074                     ??_start_RCM:	
  1620                           ; 1 bytes @ 0x4
  1621                           
  1622  0074                     ??_setup_ADC:	
  1623                           ; 1 bytes @ 0x4
  1624                           
  1625  0074                     ?_calculate_checksum:	
  1626                           ; 1 bytes @ 0x4
  1627                           
  1628  0074                     ??_PIN_MANAGER_Initialize:	
  1629                           ; 1 bytes @ 0x4
  1630                           
  1631  0074                     ??_SYSTEM_Initialize:	
  1632                           ; 1 bytes @ 0x4
  1633                           
  1634  0074                     ??_USARTX_change_pol:	
  1635                           ; 1 bytes @ 0x4
  1636                           
  1637  0074                     ?_config:	
  1638                           ; 1 bytes @ 0x4
  1639                           
  1640  0074                     ?_setGain:	
  1641                           ; 1 bytes @ 0x4
  1642                           
  1643  0074                     ?_setFreq:	
  1644                           ; 1 bytes @ 0x4
  1645                           
  1646  0074                     ??_close_RX_USART:	
  1647                           ; 1 bytes @ 0x4
  1648                           
  1649  0074                     ?_lputs_ISR:	
  1650                           ; 1 bytes @ 0x4
  1651                           
  1652  0074                     ?_ADC_5:	
  1653                           ; 1 bytes @ 0x4
  1654                           
  1655  0074                     setGain@gain_index:	
  1656                           ; 2 bytes @ 0x4
  1657                           
  1658  0074                     setFreq@freq_index:	
  1659                           ; 1 bytes @ 0x4
  1660                           
  1661  0074                     lputs_ISR@length:	
  1662                           ; 1 bytes @ 0x4
  1663                           
  1664  0074                     calculate_checksum@num:	
  1665                           ; 1 bytes @ 0x4
  1666                           
  1667  0074                     config@conf:	
  1668                           ; 1 bytes @ 0x4
  1669                           
  1670                           
  1671                           ; 2 bytes @ 0x4
  1672  0074                     	ds	1
  1673  0075                     ??_calculate_checksum:	
  1674  0075                     ??_setGain:	
  1675                           ; 1 bytes @ 0x5
  1676                           
  1677  0075                     ??_setFreq:	
  1678                           ; 1 bytes @ 0x5
  1679                           
  1680  0075                     ??_lputs_ISR:	
  1681                           ; 1 bytes @ 0x5
  1682                           
  1683                           
  1684                           ; 1 bytes @ 0x5
  1685  0075                     	ds	1
  1686  0076                     ??_config:	
  1687                           
  1688                           ; 1 bytes @ 0x6
  1689  0076                     	ds	1
  1690                           
  1691                           	psect	cstackBANK0
  1692  0049                     __pcstackBANK0:	
  1693  0049                     ??_ADC_5:	
  1694  0049                     config@i:	
  1695                           ; 1 bytes @ 0x0
  1696                           
  1697  0049                     setGain@aux:	
  1698                           ; 1 bytes @ 0x0
  1699                           
  1700  0049                     setFreq@asic:	
  1701                           ; 1 bytes @ 0x0
  1702                           
  1703  0049                     lputs_ISR@i:	
  1704                           ; 1 bytes @ 0x0
  1705                           
  1706  0049                     calculate_checksum@check:	
  1707                           ; 1 bytes @ 0x0
  1708                           
  1709                           
  1710                           ; 1 bytes @ 0x0
  1711  0049                     	ds	1
  1712  004A                     config@out:	
  1713  004A                     setGain@asic:	
  1714                           ; 1 bytes @ 0x1
  1715                           
  1716  004A                     setFreq@aux:	
  1717                           ; 1 bytes @ 0x1
  1718                           
  1719  004A                     lputs_ISR@data:	
  1720                           ; 1 bytes @ 0x1
  1721                           
  1722  004A                     calculate_checksum@data:	
  1723                           ; 1 bytes @ 0x1
  1724                           
  1725                           
  1726                           ; 1 bytes @ 0x1
  1727  004A                     	ds	1
  1728  004B                     calculate_checksum@i:	
  1729  004B                     ADC_5@ADC_value:	
  1730                           ; 1 bytes @ 0x2
  1731                           
  1732                           
  1733                           ; 2 bytes @ 0x2
  1734  004B                     	ds	2
  1735  004D                     ?_measure:	
  1736  004D                     measure@Q:	
  1737                           ; 1 bytes @ 0x4
  1738                           
  1739                           
  1740                           ; 1 bytes @ 0x4
  1741  004D                     	ds	1
  1742  004E                     measure@asic:	
  1743                           
  1744                           ; 2 bytes @ 0x5
  1745  004E                     	ds	2
  1746  0050                     ??_measure:	
  1747                           
  1748                           ; 1 bytes @ 0x7
  1749  0050                     	ds	4
  1750  0054                     measure@offset:	
  1751                           
  1752                           ; 2 bytes @ 0xB
  1753  0054                     	ds	2
  1754  0056                     measure@I:	
  1755                           
  1756                           ; 1 bytes @ 0xD
  1757  0056                     	ds	1
  1758  0057                     measure@value:	
  1759                           
  1760                           ; 2 bytes @ 0xE
  1761  0057                     	ds	2
  1762  0059                     measure@aux2:	
  1763                           
  1764                           ; 2 bytes @ 0x10
  1765  0059                     	ds	2
  1766  005B                     measure@aux1:	
  1767                           
  1768                           ; 2 bytes @ 0x12
  1769  005B                     	ds	2
  1770  005D                     ??_sweep:	
  1771                           
  1772                           ; 1 bytes @ 0x14
  1773  005D                     	ds	2
  1774  005F                     ??_main:	
  1775                           
  1776                           ; 1 bytes @ 0x16
  1777  005F                     	ds	1
  1778                           
  1779                           	psect	maintext
  1780  0276                     __pmaintext:	
  1781 ;;
  1782 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1783 ;;
  1784 ;; *************** function _main *****************
  1785 ;; Defined at:
  1786 ;;		line 30 in file "main.c"
  1787 ;; Parameters:    Size  Location     Type
  1788 ;;		None
  1789 ;; Auto vars:     Size  Location     Type
  1790 ;;  i               1    0        unsigned char 
  1791 ;; Return value:  Size  Location     Type
  1792 ;;                  1    wreg      void 
  1793 ;; Registers used:
  1794 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1795 ;; Tracked objects:
  1796 ;;		On entry : B1F/0
  1797 ;;		On exit  : 0/0
  1798 ;;		Unchanged: 0/0
  1799 ;; Data sizes:     COMMON   BANK0   BANK1
  1800 ;;      Params:         0       0       0
  1801 ;;      Locals:         0       0       0
  1802 ;;      Temps:          0       1       0
  1803 ;;      Totals:         0       1       0
  1804 ;;Total ram usage:        1 bytes
  1805 ;; Hardware stack levels required when called:    5
  1806 ;; This function calls:
  1807 ;;		_SYSTEM_Initialize
  1808 ;;		_USARTX_change_pol
  1809 ;;		_setup_ADC
  1810 ;;		_setup_TMR0
  1811 ;;		_start_RCM
  1812 ;;		_start_RX_USART_ISR
  1813 ;;		_start_TX_USART_ISR
  1814 ;;		_sweep
  1815 ;; This function is called by:
  1816 ;;		Startup code after reset
  1817 ;; This function uses a non-reentrant model
  1818 ;;
  1819                           
  1820                           
  1821                           ;psect for function _main
  1822  0276                     _main:	
  1823                           
  1824                           ;main.c: 32:     unsigned char i;;main.c: 34:     SYSTEM_Initialize();
  1825                           
  1826                           ;incstack = 0
  1827                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1828  0276  23C3               	fcall	_SYSTEM_Initialize
  1829                           
  1830                           ;main.c: 36:         USARTX_change_pol();
  1831  0277  23C0               	fcall	_USARTX_change_pol
  1832                           
  1833                           ;main.c: 38:     setup_TMR0();
  1834  0278  23A3               	fcall	_setup_TMR0
  1835                           
  1836                           ;main.c: 39:     start_TX_USART_ISR();
  1837  0279  237A               	fcall	_start_TX_USART_ISR
  1838                           
  1839                           ;main.c: 40:     start_RX_USART_ISR();
  1840  027A  2348               	fcall	_start_RX_USART_ISR
  1841                           
  1842                           ;main.c: 41:     start_RCM();
  1843  027B  23BC               	fcall	_start_RCM
  1844                           
  1845                           ;main.c: 42:     setup_ADC();
  1846  027C  23B0               	fcall	_setup_ADC
  1847                           
  1848                           ;main.c: 45:     RA5 = 0;
  1849  027D  0020               	movlb	0	; select bank0
  1850  027E  128C               	bcf	12,5	;volatile
  1851                           
  1852                           ;main.c: 46:     _delay((unsigned long)((150)*(500000/4000.0)));
  1853  027F  3019               	movlw	25
  1854  0280  0020               	movlb	0	; select bank0
  1855  0281  00DF               	movwf	??_main
  1856  0282  3058               	movlw	88
  1857  0283                     u1427:	
  1858  0283  0B89               	decfsz	9,f
  1859  0284  2A83               	goto	u1427
  1860  0285  0BDF               	decfsz	??_main,f
  1861  0286  2A83               	goto	u1427
  1862  0287  0000               	nop
  1863                           
  1864                           ;main.c: 47:     RA5 = 1;
  1865  0288  0020               	movlb	0	; select bank0
  1866  0289  168C               	bsf	12,5	;volatile
  1867  028A                     l121:	
  1868                           ;main.c: 119:     while(1) {
  1869                           
  1870  028A  0064               	clrwdt	;# 
  1871                           
  1872                           ;main.c: 122:         if (TIMER0_flag) {
  1873  028B  0020               	movlb	0	; select bank0
  1874  028C  083E               	movf	_TIMER0_flag,w	;volatile
  1875  028D  1903               	btfsc	3,2
  1876  028E  2A8A               	goto	l121
  1877                           
  1878                           ;main.c: 123:               TIMER0_flag = 0;
  1879  028F  01BE               	clrf	_TIMER0_flag	;volatile
  1880                           
  1881                           ;main.c: 125:               if (USART_rx_index > 10) {
  1882  0290  300B               	movlw	11
  1883  0291  023D               	subwf	_USART_rx_index,w	;volatile
  1884  0292  1C03               	skipc
  1885  0293  2A96               	goto	l2704
  1886                           
  1887                           ;main.c: 126:                 USART_rx_index = 0;
  1888  0294  01BD               	clrf	_USART_rx_index	;volatile
  1889                           
  1890                           ;main.c: 127:                 continue;
  1891  0295  2A8A               	goto	l121
  1892  0296                     l2704:	
  1893                           ;main.c: 128:               }
  1894                           
  1895                           
  1896                           ;main.c: 130:               if(USART_rx_index == 0)
  1897  0296  083D               	movf	_USART_rx_index,w	;volatile
  1898  0297  1903               	btfsc	3,2
  1899                           
  1900                           ;main.c: 131:                   continue;
  1901  0298  2A8A               	goto	l121
  1902                           
  1903                           ;main.c: 134:               mess_rec_size = USART_rx_index;
  1904  0299  083D               	movf	_USART_rx_index,w	;volatile
  1905  029A  00DF               	movwf	??_main
  1906  029B  085F               	movf	??_main,w
  1907  029C  00BC               	movwf	_mess_rec_size	;volatile
  1908                           
  1909                           ;main.c: 135:               USART_rx_index = 0;
  1910  029D  01BD               	clrf	_USART_rx_index	;volatile
  1911                           
  1912                           ;main.c: 140:               sweep();
  1913  029E  205F               	fcall	_sweep
  1914                           
  1915                           ;main.c: 143:     }
  1916                           
  1917                           ;main.c: 142:         }
  1918  029F  2A8A               	goto	l121
  1919  02A0                     __end_of_main:	
  1920                           
  1921                           	psect	text1
  1922  005F                     __ptext1:	
  1923 ;; *************** function _sweep *****************
  1924 ;; Defined at:
  1925 ;;		line 444 in file "comm.c"
  1926 ;; Parameters:    Size  Location     Type
  1927 ;;		None
  1928 ;; Auto vars:     Size  Location     Type
  1929 ;;  aux             7    1[BANK1 ] unsigned char [7]
  1930 ;;  asic            2   17[BANK1 ] struct .
  1931 ;;  Q               2   13[BANK1 ] short 
  1932 ;;  I               2   11[BANK1 ] short 
  1933 ;;  ret             1   16[BANK1 ] unsigned char 
  1934 ;;  gain_index      1   15[BANK1 ] unsigned char 
  1935 ;;  count           1   10[BANK1 ] unsigned char 
  1936 ;;  i               1    9[BANK1 ] unsigned char 
  1937 ;;  freq_index      1    8[BANK1 ] unsigned char 
  1938 ;;  check           1    0[BANK1 ] unsigned char 
  1939 ;; Return value:  Size  Location     Type
  1940 ;;                  1    wreg      void 
  1941 ;; Registers used:
  1942 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1943 ;; Tracked objects:
  1944 ;;		On entry : 0/0
  1945 ;;		On exit  : 0/0
  1946 ;;		Unchanged: 0/0
  1947 ;; Data sizes:     COMMON   BANK0   BANK1
  1948 ;;      Params:         0       0       0
  1949 ;;      Locals:         0       0      19
  1950 ;;      Temps:          0       2       0
  1951 ;;      Totals:         0       2      19
  1952 ;;Total ram usage:       21 bytes
  1953 ;; Hardware stack levels used:    1
  1954 ;; Hardware stack levels required when called:    4
  1955 ;; This function calls:
  1956 ;;		_calculate_checksum
  1957 ;;		_lputs_ISR
  1958 ;;		_measure
  1959 ;;		_setFreq
  1960 ;;		_setGain
  1961 ;; This function is called by:
  1962 ;;		_main
  1963 ;;		_mess_handler
  1964 ;; This function uses a non-reentrant model
  1965 ;;
  1966                           
  1967                           
  1968                           ;psect for function _sweep
  1969  005F                     _sweep:	
  1970                           
  1971                           ;comm.c: 446:     unsigned char gain_index;;comm.c: 447:     unsigned char freq_index;;c
      +                          omm.c: 448:     unsigned char i, ret, count;;comm.c: 449:     short I,Q;;comm.c: 450:   
      +                            unsigned char aux[7], check;;comm.c: 453:     BIO3 asic;;comm.c: 454:     asic.datasho
      +                          rt = 0;
  1972                           
  1973                           ;incstack = 0
  1974                           ; Regs used in _sweep: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1975  005F  0021               	movlb	1	; select bank1
  1976  0060  01B1               	clrf	sweep@asic^(0+128)
  1977  0061  01B2               	clrf	(sweep@asic+1)^(0+128)
  1978                           
  1979                           ;comm.c: 465:     freq_index = 10;
  1980  0062  300A               	movlw	10
  1981  0063  0020               	movlb	0	; select bank0
  1982  0064  00DD               	movwf	??_sweep
  1983  0065  085D               	movf	??_sweep,w
  1984  0066  0021               	movlb	1	; select bank1
  1985  0067  00A8               	movwf	sweep@freq_index^(0+128)
  1986                           
  1987                           ;comm.c: 466:     gain_index = 0;
  1988  0068  01AF               	clrf	sweep@gain_index^(0+128)
  1989                           
  1990                           ;comm.c: 467:     setGain(&asic,gain_index);
  1991  0069  082F               	movf	sweep@gain_index^(0+128),w
  1992  006A  0020               	movlb	0	; select bank0
  1993  006B  00DD               	movwf	??_sweep
  1994  006C  085D               	movf	??_sweep,w
  1995  006D  00F4               	movwf	setGain@gain_index
  1996  006E  30B1               	movlw	(low (sweep@asic| 0))& (0+255)
  1997  006F  21DD               	fcall	_setGain
  1998                           
  1999                           ;comm.c: 470:     for (i = 0; i < 11; i++) {
  2000  0070  0021               	movlb	1	; select bank1
  2001  0071  01A9               	clrf	sweep@i^(0+128)
  2002  0072                     L1:	
  2003  0072  300B               	movlw	11
  2004  0073  0229               	subwf	sweep@i^(0+128),w
  2005  0074  1803               	btfsc	3,0
  2006  0075  0008               	return
  2007                           
  2008                           ;comm.c: 473:         setFreq(&asic,freq_index);
  2009  0076  0828               	movf	sweep@freq_index^(0+128),w
  2010  0077  0020               	movlb	0	; select bank0
  2011  0078  00DD               	movwf	??_sweep
  2012  0079  085D               	movf	??_sweep,w
  2013  007A  00F4               	movwf	setFreq@freq_index
  2014  007B  30B1               	movlw	(low (sweep@asic| 0))& (0+255)
  2015  007C  22CA               	fcall	_setFreq
  2016                           
  2017                           ;comm.c: 480:         count = 0;
  2018  007D  0021               	movlb	1	; select bank1
  2019  007E  01AA               	clrf	sweep@count^(0+128)
  2020                           
  2021                           ;comm.c: 481:         ret = 0;
  2022  007F  01B0               	clrf	sweep@ret^(0+128)
  2023  0080                     l2628:	
  2024                           ;comm.c: 483:         do {
  2025                           
  2026                           
  2027                           ;comm.c: 485:             ret = measure(&I,&Q,asic);
  2028  0080  30AD               	movlw	(low (sweep@Q| 0))& (0+255)
  2029  0081  0020               	movlb	0	; select bank0
  2030  0082  00DD               	movwf	??_sweep
  2031  0083  085D               	movf	??_sweep,w
  2032  0084  00CD               	movwf	measure@Q
  2033  0085  0021               	movlb	1	; select bank1
  2034  0086  0832               	movf	(sweep@asic+1)^(0+128),w
  2035  0087  0020               	movlb	0	; select bank0
  2036  0088  00CF               	movwf	measure@asic+1
  2037  0089  0021               	movlb	1	; select bank1
  2038  008A  0831               	movf	sweep@asic^(0+128),w
  2039  008B  0020               	movlb	0	; select bank0
  2040  008C  00CE               	movwf	measure@asic
  2041  008D  30AB               	movlw	(low (sweep@I| 0))& (0+255)
  2042  008E  2128               	fcall	_measure
  2043  008F  0020               	movlb	0	; select bank0
  2044  0090  00DE               	movwf	??_sweep+1
  2045  0091  085E               	movf	??_sweep+1,w
  2046  0092  0021               	movlb	1	; select bank1
  2047  0093  00B0               	movwf	sweep@ret^(0+128)
  2048                           
  2049                           ;comm.c: 487:             if (ret == 1) {
  2050  0094  0330               	decf	sweep@ret^(0+128),w
  2051  0095  1D03               	btfss	3,2
  2052  0096  28AC               	goto	l2644
  2053                           
  2054                           ;comm.c: 489:                 if (count == 2) break;
  2055  0097  3002               	movlw	2
  2056  0098  062A               	xorwf	sweep@count^(0+128),w
  2057  0099  1903               	btfsc	3,2
  2058  009A  28CA               	goto	l2660
  2059                           
  2060                           ;comm.c: 490:                 count = ret;
  2061  009B  0830               	movf	sweep@ret^(0+128),w
  2062  009C  0020               	movlb	0	; select bank0
  2063  009D  00DD               	movwf	??_sweep
  2064  009E  085D               	movf	??_sweep,w
  2065  009F  0021               	movlb	1	; select bank1
  2066  00A0  00AA               	movwf	sweep@count^(0+128)
  2067                           
  2068                           ;comm.c: 493:                 if (gain_index < 7) {
  2069  00A1  3007               	movlw	7
  2070  00A2  022F               	subwf	sweep@gain_index^(0+128),w
  2071  00A3  1803               	skipnc
  2072  00A4  28CA               	goto	l2660
  2073                           
  2074                           ;comm.c: 497:                     gain_index++;
  2075  00A5  3001               	movlw	1
  2076  00A6  0020               	movlb	0	; select bank0
  2077  00A7  00DD               	movwf	??_sweep
  2078  00A8  085D               	movf	??_sweep,w
  2079  00A9  0021               	movlb	1	; select bank1
  2080  00AA  07AF               	addwf	sweep@gain_index^(0+128),f
  2081  00AB  28BF               	goto	L2
  2082  00AC                     l2644:	
  2083                           ;comm.c: 505:             } else if (ret == 2) {
  2084                           
  2085                           ;comm.c: 503:                 continue;
  2086                           
  2087                           ;comm.c: 501:                 }
  2088                           
  2089                           ;comm.c: 500:                     break;
  2090                           
  2091                           ;comm.c: 499:                 } else {
  2092                           
  2093                           ;comm.c: 498:                     setGain(&asic,gain_index);
  2094                           
  2095  00AC  3002               	movlw	2
  2096  00AD  0021               	movlb	1	; select bank1
  2097  00AE  0630               	xorwf	sweep@ret^(0+128),w
  2098  00AF  1D03               	btfss	3,2
  2099  00B0  28C6               	goto	l2658
  2100                           
  2101                           ;comm.c: 507:                 if (count == 1) break;
  2102  00B1  032A               	decf	sweep@count^(0+128),w
  2103  00B2  1903               	btfsc	3,2
  2104  00B3  28CA               	goto	l2660
  2105                           
  2106                           ;comm.c: 508:                 count = ret;
  2107  00B4  0830               	movf	sweep@ret^(0+128),w
  2108  00B5  0020               	movlb	0	; select bank0
  2109  00B6  00DD               	movwf	??_sweep
  2110  00B7  085D               	movf	??_sweep,w
  2111  00B8  0021               	movlb	1	; select bank1
  2112  00B9  00AA               	movwf	sweep@count^(0+128)
  2113                           
  2114                           ;comm.c: 510:                 if (gain_index > 0) {
  2115  00BA  082F               	movf	sweep@gain_index^(0+128),w
  2116  00BB  1903               	btfsc	3,2
  2117  00BC  28CA               	goto	l2660
  2118                           
  2119                           ;comm.c: 511:                     gain_index--;
  2120  00BD  3001               	movlw	1
  2121  00BE  02AF               	subwf	sweep@gain_index^(0+128),f
  2122  00BF                     L2:	
  2123                           
  2124                           ;comm.c: 512:                     setGain(&asic,gain_index);
  2125  00BF  082F               	movf	sweep@gain_index^(0+128),w
  2126  00C0  0020               	movlb	0	; select bank0
  2127  00C1  00DD               	movwf	??_sweep
  2128  00C2  085D               	movf	??_sweep,w
  2129  00C3  00F4               	movwf	setGain@gain_index
  2130  00C4  30B1               	movlw	(low (sweep@asic| 0))& (0+255)
  2131  00C5  21DD               	fcall	_setGain
  2132  00C6                     l2658:	
  2133                           ;comm.c: 520:         } while (ret);
  2134                           
  2135                           ;comm.c: 518:             }
  2136                           
  2137                           ;comm.c: 517:                 continue;
  2138                           
  2139                           ;comm.c: 515:                 }
  2140                           
  2141                           ;comm.c: 514:                     break;
  2142                           
  2143                           ;comm.c: 513:                 } else {
  2144                           
  2145  00C6  0021               	movlb	1	; select bank1
  2146  00C7  0830               	movf	sweep@ret^(0+128),w
  2147  00C8  1D03               	btfss	3,2
  2148  00C9  2880               	goto	l2628
  2149  00CA                     l2660:	
  2150                           
  2151                           ;comm.c: 526:         ret = (freq_index << 4) & 0xf0;
  2152  00CA  0021               	movlb	1	; select bank1
  2153  00CB  0828               	movf	sweep@freq_index^(0+128),w
  2154  00CC  0020               	movlb	0	; select bank0
  2155  00CD  00DD               	movwf	??_sweep
  2156  00CE  3003               	movlw	3
  2157  00CF                     u1365:	
  2158  00CF  35DD               	lslf	??_sweep,f
  2159  00D0  3EFF               	addlw	-1
  2160  00D1  1D03               	skipz
  2161  00D2  28CF               	goto	u1365
  2162  00D3  355D               	lslf	??_sweep,w
  2163  00D4  39F0               	andlw	240
  2164  00D5  00DE               	movwf	??_sweep+1
  2165  00D6  085E               	movf	??_sweep+1,w
  2166  00D7  0021               	movlb	1	; select bank1
  2167  00D8  00B0               	movwf	sweep@ret^(0+128)
  2168                           
  2169                           ;comm.c: 527:         ret |= (gain_index & 0xff);
  2170  00D9  082F               	movf	sweep@gain_index^(0+128),w
  2171  00DA  0020               	movlb	0	; select bank0
  2172  00DB  00DD               	movwf	??_sweep
  2173  00DC  085D               	movf	??_sweep,w
  2174  00DD  0021               	movlb	1	; select bank1
  2175  00DE  04B0               	iorwf	sweep@ret^(0+128),f
  2176                           
  2177                           ;comm.c: 529:         aux[0] = 'f';
  2178  00DF  3066               	movlw	102
  2179  00E0  0020               	movlb	0	; select bank0
  2180  00E1  00DD               	movwf	??_sweep
  2181  00E2  085D               	movf	??_sweep,w
  2182  00E3  0021               	movlb	1	; select bank1
  2183  00E4  00A1               	movwf	sweep@aux^(0+128)
  2184                           
  2185                           ;comm.c: 530:         aux[1] = (unsigned char)(I & 0xff);
  2186  00E5  082B               	movf	sweep@I^(0+128),w
  2187  00E6  0020               	movlb	0	; select bank0
  2188  00E7  00DD               	movwf	??_sweep
  2189  00E8  085D               	movf	??_sweep,w
  2190  00E9  0021               	movlb	1	; select bank1
  2191  00EA  00A2               	movwf	(sweep@aux^(0+128)+1)
  2192                           
  2193                           ;comm.c: 531:         aux[2] = (unsigned char)((I >> 8) & 0xff);
  2194  00EB  082C               	movf	(sweep@I+1)^(0+128),w
  2195  00EC  0020               	movlb	0	; select bank0
  2196  00ED  00DD               	movwf	??_sweep
  2197  00EE  085D               	movf	??_sweep,w
  2198  00EF  0021               	movlb	1	; select bank1
  2199  00F0  00A3               	movwf	(sweep@aux^(0+128)+2)
  2200                           
  2201                           ;comm.c: 532:         aux[3] = (unsigned char)(Q & 0xff);
  2202  00F1  082D               	movf	sweep@Q^(0+128),w
  2203  00F2  0020               	movlb	0	; select bank0
  2204  00F3  00DD               	movwf	??_sweep
  2205  00F4  085D               	movf	??_sweep,w
  2206  00F5  0021               	movlb	1	; select bank1
  2207  00F6  00A4               	movwf	(sweep@aux^(0+128)+3)
  2208                           
  2209                           ;comm.c: 533:         aux[4] = (unsigned char)((Q >> 8) & 0xff);
  2210  00F7  082E               	movf	(sweep@Q+1)^(0+128),w
  2211  00F8  0020               	movlb	0	; select bank0
  2212  00F9  00DD               	movwf	??_sweep
  2213  00FA  085D               	movf	??_sweep,w
  2214  00FB  0021               	movlb	1	; select bank1
  2215  00FC  00A5               	movwf	(sweep@aux^(0+128)+4)
  2216                           
  2217                           ;comm.c: 534:         aux[5] = ret;
  2218  00FD  0830               	movf	sweep@ret^(0+128),w
  2219  00FE  0020               	movlb	0	; select bank0
  2220  00FF  00DD               	movwf	??_sweep
  2221  0100  085D               	movf	??_sweep,w
  2222  0101  0021               	movlb	1	; select bank1
  2223  0102  00A6               	movwf	(sweep@aux^(0+128)+5)
  2224                           
  2225                           ;comm.c: 536:         check = calculate_checksum(aux,6);
  2226  0103  3006               	movlw	6
  2227  0104  0020               	movlb	0	; select bank0
  2228  0105  00DD               	movwf	??_sweep
  2229  0106  085D               	movf	??_sweep,w
  2230  0107  00F4               	movwf	calculate_checksum@num
  2231  0108  30A1               	movlw	(low (sweep@aux| 0))& (0+255)
  2232  0109  2316               	fcall	_calculate_checksum
  2233  010A  0020               	movlb	0	; select bank0
  2234  010B  00DE               	movwf	??_sweep+1
  2235  010C  085E               	movf	??_sweep+1,w
  2236  010D  0021               	movlb	1	; select bank1
  2237  010E  00A0               	movwf	sweep@check^(0+128)
  2238                           
  2239                           ;comm.c: 537:         aux[6] = check;
  2240  010F  0820               	movf	sweep@check^(0+128),w
  2241  0110  0020               	movlb	0	; select bank0
  2242  0111  00DD               	movwf	??_sweep
  2243  0112  085D               	movf	??_sweep,w
  2244  0113  0021               	movlb	1	; select bank1
  2245  0114  00A7               	movwf	(sweep@aux^(0+128)+6)
  2246                           
  2247                           ;comm.c: 540:         { ADCON0 = 0b00100100;};
  2248  0115  3024               	movlw	36
  2249  0116  009D               	movwf	29	;volatile
  2250                           
  2251                           ;comm.c: 542:         lputs_ISR(aux,7);
  2252  0117  3007               	movlw	7
  2253  0118  0020               	movlb	0	; select bank0
  2254  0119  00DD               	movwf	??_sweep
  2255  011A  085D               	movf	??_sweep,w
  2256  011B  00F4               	movwf	lputs_ISR@length
  2257  011C  30A1               	movlw	(low (sweep@aux| 0))& (0+255)
  2258  011D  22A0               	fcall	_lputs_ISR
  2259                           
  2260                           ;comm.c: 552:         freq_index--;
  2261  011E  3001               	movlw	1
  2262  011F  0021               	movlb	1	; select bank1
  2263  0120  02A8               	subwf	sweep@freq_index^(0+128),f
  2264                           
  2265                           ;comm.c: 553:     }
  2266  0121  3001               	movlw	1
  2267  0122  0020               	movlb	0	; select bank0
  2268  0123  00DD               	movwf	??_sweep
  2269  0124  085D               	movf	??_sweep,w
  2270  0125  0021               	movlb	1	; select bank1
  2271  0126  07A9               	addwf	sweep@i^(0+128),f
  2272  0127  2872               	goto	L1
  2273  0128                     __end_of_sweep:	
  2274                           
  2275                           	psect	text2
  2276  01DD                     __ptext2:	
  2277 ;; *************** function _setGain *****************
  2278 ;; Defined at:
  2279 ;;		line 161 in file "bio3.c"
  2280 ;; Parameters:    Size  Location     Type
  2281 ;;  asic            1    wreg     PTR struct .
  2282 ;;		 -> sweep@asic(2), 
  2283 ;;  gain_index      1    4[COMMON] unsigned char 
  2284 ;; Auto vars:     Size  Location     Type
  2285 ;;  asic            1    1[BANK0 ] PTR struct .
  2286 ;;		 -> sweep@asic(2), 
  2287 ;;  aux             1    0[BANK0 ] struct .
  2288 ;; Return value:  Size  Location     Type
  2289 ;;                  1    wreg      void 
  2290 ;; Registers used:
  2291 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, pclath
  2292 ;; Tracked objects:
  2293 ;;		On entry : 0/0
  2294 ;;		On exit  : 0/0
  2295 ;;		Unchanged: 0/0
  2296 ;; Data sizes:     COMMON   BANK0   BANK1
  2297 ;;      Params:         1       0       0
  2298 ;;      Locals:         0       2       0
  2299 ;;      Temps:          1       0       0
  2300 ;;      Totals:         2       2       0
  2301 ;;Total ram usage:        4 bytes
  2302 ;; Hardware stack levels used:    1
  2303 ;; Hardware stack levels required when called:    2
  2304 ;; This function calls:
  2305 ;;		Nothing
  2306 ;; This function is called by:
  2307 ;;		_sweep
  2308 ;; This function uses a non-reentrant model
  2309 ;;
  2310                           
  2311                           
  2312                           ;psect for function _setGain
  2313  01DD                     _setGain:	
  2314                           
  2315                           ;incstack = 0
  2316                           ; Regs used in _setGain: [wreg-fsr1h+pclath]
  2317                           ;setGain@asic stored from wreg
  2318  01DD  0020               	movlb	0	; select bank0
  2319  01DE  00CA               	movwf	setGain@asic
  2320                           
  2321                           ;bio3.c: 161: void setGain(BIO3* asic, unsigned char gain_index);bio3.c: 162: {;bio3.c: 
      +                          163:     RADIO_gain aux;;bio3.c: 164:     aux.data = gains[gain_index];
  2322  01DF  0874               	movf	setGain@gain_index,w
  2323  01E0  3E94               	addlw	low (_gains| (0+32768))
  2324  01E1  0084               	movwf	4
  2325  01E2  3083               	movlw	high (_gains| (0+32768))
  2326  01E3  1803               	skipnc
  2327  01E4  3E01               	addlw	1
  2328  01E5  0085               	movwf	5
  2329  01E6  0800               	movf	0,w	;code access
  2330  01E7  00F5               	movwf	??_setGain
  2331  01E8  0875               	movf	??_setGain,w
  2332  01E9  00C9               	movwf	setGain@aux
  2333                           
  2334                           ;bio3.c: 166:     asic->data_bits.GD0 = aux.data_bits.GD0;
  2335  01EA  084A               	movf	setGain@asic,w
  2336  01EB  0086               	movwf	6
  2337  01EC  0187               	clrf	7
  2338  01ED  1101               	bcf	1,2
  2339  01EE  1849               	btfsc	setGain@aux,0
  2340  01EF  1501               	bsf	1,2
  2341                           
  2342                           ;bio3.c: 167:     asic->data_bits.GD1 = aux.data_bits.GD1;
  2343  01F0  0020               	movlb	0	; select bank0
  2344  01F1  084A               	movf	setGain@asic,w
  2345  01F2  0086               	movwf	6
  2346  01F3  0187               	clrf	7
  2347  01F4  1181               	bcf	1,3
  2348  01F5  18C9               	btfsc	setGain@aux,1
  2349  01F6  1581               	bsf	1,3
  2350                           
  2351                           ;bio3.c: 168:     asic->data_bits.GD2 = aux.data_bits.GD2;
  2352  01F7  0020               	movlb	0	; select bank0
  2353  01F8  084A               	movf	setGain@asic,w
  2354  01F9  0086               	movwf	6
  2355  01FA  0187               	clrf	7
  2356  01FB  1201               	bcf	1,4
  2357  01FC  1949               	btfsc	setGain@aux,2
  2358  01FD  1601               	bsf	1,4
  2359                           
  2360                           ;bio3.c: 169:     asic->data_bits.GS0 = aux.data_bits.GS0;
  2361  01FE  0020               	movlb	0	; select bank0
  2362  01FF  084A               	movf	setGain@asic,w
  2363  0200  0086               	movwf	6
  2364  0201  0187               	clrf	7
  2365  0202  1381               	bcf	1,7
  2366  0203  19C9               	btfsc	setGain@aux,3
  2367  0204  1781               	bsf	1,7
  2368                           
  2369                           ;bio3.c: 170:     asic->data_bits.GS1 = aux.data_bits.GS1;
  2370  0205  0020               	movlb	0	; select bank0
  2371  0206  0A4A               	incf	setGain@asic,w
  2372  0207  0086               	movwf	6
  2373  0208  0187               	clrf	7
  2374  0209  1001               	bcf	1,0
  2375  020A  1A49               	btfsc	setGain@aux,4
  2376  020B  1401               	bsf	1,0
  2377                           
  2378                           ;bio3.c: 171:     asic->data_bits.GS2 = aux.data_bits.GS2;
  2379  020C  0020               	movlb	0	; select bank0
  2380  020D  0A4A               	incf	setGain@asic,w
  2381  020E  0086               	movwf	6
  2382  020F  0187               	clrf	7
  2383  0210  1081               	bcf	1,1
  2384  0211  1AC9               	btfsc	setGain@aux,5
  2385  0212  1481               	bsf	1,1
  2386                           
  2387                           ;bio3.c: 172:     asic->data_bits.GS3 = aux.data_bits.GS3;
  2388  0213  0020               	movlb	0	; select bank0
  2389  0214  0A4A               	incf	setGain@asic,w
  2390  0215  0086               	movwf	6
  2391  0216  0187               	clrf	7
  2392  0217  1101               	bcf	1,2
  2393  0218  1B49               	btfsc	setGain@aux,6
  2394  0219  1501               	bsf	1,2
  2395  021A  0008               	return
  2396  021B                     __end_of_setGain:	
  2397                           
  2398                           	psect	text3
  2399  02CA                     __ptext3:	
  2400 ;; *************** function _setFreq *****************
  2401 ;; Defined at:
  2402 ;;		line 175 in file "bio3.c"
  2403 ;; Parameters:    Size  Location     Type
  2404 ;;  asic            1    wreg     PTR struct .
  2405 ;;		 -> sweep@asic(2), 
  2406 ;;  freq_index      1    4[COMMON] unsigned char 
  2407 ;; Auto vars:     Size  Location     Type
  2408 ;;  asic            1    0[BANK0 ] PTR struct .
  2409 ;;		 -> sweep@asic(2), 
  2410 ;;  aux             1    1[BANK0 ] struct .
  2411 ;; Return value:  Size  Location     Type
  2412 ;;                  1    wreg      void 
  2413 ;; Registers used:
  2414 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, pclath
  2415 ;; Tracked objects:
  2416 ;;		On entry : 0/0
  2417 ;;		On exit  : 0/0
  2418 ;;		Unchanged: 0/0
  2419 ;; Data sizes:     COMMON   BANK0   BANK1
  2420 ;;      Params:         1       0       0
  2421 ;;      Locals:         0       2       0
  2422 ;;      Temps:          1       0       0
  2423 ;;      Totals:         2       2       0
  2424 ;;Total ram usage:        4 bytes
  2425 ;; Hardware stack levels used:    1
  2426 ;; Hardware stack levels required when called:    2
  2427 ;; This function calls:
  2428 ;;		Nothing
  2429 ;; This function is called by:
  2430 ;;		_sweep
  2431 ;; This function uses a non-reentrant model
  2432 ;;
  2433                           
  2434                           
  2435                           ;psect for function _setFreq
  2436  02CA                     _setFreq:	
  2437                           
  2438                           ;incstack = 0
  2439                           ; Regs used in _setFreq: [wreg-fsr1h+pclath]
  2440                           ;setFreq@asic stored from wreg
  2441  02CA  0020               	movlb	0	; select bank0
  2442  02CB  00C9               	movwf	setFreq@asic
  2443                           
  2444                           ;bio3.c: 175: void setFreq(BIO3* asic, unsigned char freq_index);bio3.c: 176: {;bio3.c: 
      +                          177:     RADIO_freq aux;;bio3.c: 178:     aux.data = freqs[freq_index];
  2445  02CC  0874               	movf	setFreq@freq_index,w
  2446  02CD  3E89               	addlw	low (_freqs| (0+32768))
  2447  02CE  0084               	movwf	4
  2448  02CF  3083               	movlw	high (_freqs| (0+32768))
  2449  02D0  1803               	skipnc
  2450  02D1  3E01               	addlw	1
  2451  02D2  0085               	movwf	5
  2452  02D3  0800               	movf	0,w	;code access
  2453  02D4  00F5               	movwf	??_setFreq
  2454  02D5  0875               	movf	??_setFreq,w
  2455  02D6  00CA               	movwf	setFreq@aux
  2456                           
  2457                           ;bio3.c: 180:     asic->data_bits.F0 = aux.data_bits.F0;
  2458  02D7  0A49               	incf	setFreq@asic,w
  2459  02D8  0086               	movwf	6
  2460  02D9  0187               	clrf	7
  2461  02DA  1201               	bcf	1,4
  2462  02DB  184A               	btfsc	setFreq@aux,0
  2463  02DC  1601               	bsf	1,4
  2464                           
  2465                           ;bio3.c: 181:     asic->data_bits.F1 = aux.data_bits.F1;
  2466  02DD  0020               	movlb	0	; select bank0
  2467  02DE  0A49               	incf	setFreq@asic,w
  2468  02DF  0086               	movwf	6
  2469  02E0  0187               	clrf	7
  2470  02E1  1281               	bcf	1,5
  2471  02E2  18CA               	btfsc	setFreq@aux,1
  2472  02E3  1681               	bsf	1,5
  2473                           
  2474                           ;bio3.c: 182:     asic->data_bits.F2 = aux.data_bits.F2;
  2475  02E4  0020               	movlb	0	; select bank0
  2476  02E5  0A49               	incf	setFreq@asic,w
  2477  02E6  0086               	movwf	6
  2478  02E7  0187               	clrf	7
  2479  02E8  1301               	bcf	1,6
  2480  02E9  194A               	btfsc	setFreq@aux,2
  2481  02EA  1701               	bsf	1,6
  2482                           
  2483                           ;bio3.c: 183:     asic->data_bits.F3 = aux.data_bits.F3;
  2484  02EB  0020               	movlb	0	; select bank0
  2485  02EC  0A49               	incf	setFreq@asic,w
  2486  02ED  0086               	movwf	6
  2487  02EE  0187               	clrf	7
  2488  02EF  1381               	bcf	1,7
  2489  02F0  19CA               	btfsc	setFreq@aux,3
  2490  02F1  1781               	bsf	1,7
  2491  02F2  0008               	return
  2492  02F3                     __end_of_setFreq:	
  2493                           
  2494                           	psect	text4
  2495  0128                     __ptext4:	
  2496 ;; *************** function _measure *****************
  2497 ;; Defined at:
  2498 ;;		line 561 in file "comm.c"
  2499 ;; Parameters:    Size  Location     Type
  2500 ;;  I               1    wreg     PTR short 
  2501 ;;		 -> sweep@I(2), 
  2502 ;;  Q               1    4[BANK0 ] PTR short 
  2503 ;;		 -> sweep@Q(2), 
  2504 ;;  asic            2    5[BANK0 ] struct .
  2505 ;; Auto vars:     Size  Location     Type
  2506 ;;  I               1   13[BANK0 ] PTR short 
  2507 ;;		 -> sweep@I(2), 
  2508 ;;  aux1            2   18[BANK0 ] short 
  2509 ;;  aux2            2   16[BANK0 ] short 
  2510 ;;  value           2   14[BANK0 ] unsigned short 
  2511 ;;  offset          2   11[BANK0 ] unsigned short 
  2512 ;; Return value:  Size  Location     Type
  2513 ;;                  1    wreg      unsigned char 
  2514 ;; Registers used:
  2515 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2516 ;; Tracked objects:
  2517 ;;		On entry : 0/0
  2518 ;;		On exit  : 0/0
  2519 ;;		Unchanged: 0/0
  2520 ;; Data sizes:     COMMON   BANK0   BANK1
  2521 ;;      Params:         0       3       0
  2522 ;;      Locals:         0       9       0
  2523 ;;      Temps:          0       4       0
  2524 ;;      Totals:         0      16       0
  2525 ;;Total ram usage:       16 bytes
  2526 ;; Hardware stack levels used:    1
  2527 ;; Hardware stack levels required when called:    3
  2528 ;; This function calls:
  2529 ;;		_ADC_5
  2530 ;;		_config
  2531 ;; This function is called by:
  2532 ;;		_sweep
  2533 ;; This function uses a non-reentrant model
  2534 ;;
  2535                           
  2536                           
  2537                           ;psect for function _measure
  2538  0128                     _measure:	
  2539                           
  2540                           ;incstack = 0
  2541                           ; Regs used in _measure: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2542                           ;measure@I stored from wreg
  2543  0128  0020               	movlb	0	; select bank0
  2544  0129  00D6               	movwf	measure@I
  2545                           
  2546                           ;comm.c: 561: unsigned char measure(short* I, short* Q, BIO3 asic);comm.c: 565: {;comm.c
      +                          : 566:     unsigned short offset, value;;comm.c: 567:     short aux1,aux2;;comm.c: 571: 
      +                              asic.data_bits.CE = 0;
  2547  012A  134E               	bcf	measure@asic,6
  2548                           
  2549                           ;comm.c: 572:     config(asic);
  2550  012B  084F               	movf	measure@asic+1,w
  2551  012C  00F5               	movwf	config@conf+1
  2552  012D  084E               	movf	measure@asic,w
  2553  012E  00F4               	movwf	config@conf
  2554  012F  221B               	fcall	_config
  2555                           
  2556                           ;comm.c: 573:      _delay((unsigned long)((20)*(500000/4000.0)));
  2557  0130  3004               	movlw	4
  2558  0131  0020               	movlb	0	; select bank0
  2559  0132  00D0               	movwf	??_measure
  2560  0133  303D               	movlw	61
  2561  0134                     u1437:	
  2562  0134  0B89               	decfsz	9,f
  2563  0135  2934               	goto	u1437
  2564  0136  0BD0               	decfsz	??_measure,f
  2565  0137  2934               	goto	u1437
  2566  0138  3200               	nop2
  2567                           
  2568                           ;comm.c: 575:     offset = ADC_5();
  2569  0139  22F3               	fcall	_ADC_5
  2570  013A  0875               	movf	?_ADC_5+1,w
  2571  013B  0020               	movlb	0	; select bank0
  2572  013C  00D5               	movwf	measure@offset+1
  2573  013D  0874               	movf	?_ADC_5,w
  2574  013E  00D4               	movwf	measure@offset
  2575                           
  2576                           ;comm.c: 578:     asic.data_bits.CE = 1;
  2577  013F  174E               	bsf	measure@asic,6
  2578                           
  2579                           ;comm.c: 579:     asic.data_bits.IQ = 0;
  2580  0140  11CF               	bcf	measure@asic+1,3
  2581                           
  2582                           ;comm.c: 581:     config(asic);
  2583  0141  084F               	movf	measure@asic+1,w
  2584  0142  00F5               	movwf	config@conf+1
  2585  0143  084E               	movf	measure@asic,w
  2586  0144  00F4               	movwf	config@conf
  2587  0145  221B               	fcall	_config
  2588                           
  2589                           ;comm.c: 582:      _delay((unsigned long)((20)*(500000/4000.0)));
  2590  0146  3004               	movlw	4
  2591  0147  0020               	movlb	0	; select bank0
  2592  0148  00D0               	movwf	??_measure
  2593  0149  303D               	movlw	61
  2594  014A                     u1447:	
  2595  014A  0B89               	decfsz	9,f
  2596  014B  294A               	goto	u1447
  2597  014C  0BD0               	decfsz	??_measure,f
  2598  014D  294A               	goto	u1447
  2599  014E  3200               	nop2
  2600                           
  2601                           ;comm.c: 584:     value = ADC_5();
  2602  014F  22F3               	fcall	_ADC_5
  2603  0150  0875               	movf	?_ADC_5+1,w
  2604  0151  0020               	movlb	0	; select bank0
  2605  0152  00D8               	movwf	measure@value+1
  2606  0153  0874               	movf	?_ADC_5,w
  2607  0154  00D7               	movwf	measure@value
  2608                           
  2609                           ;comm.c: 585:     *I = (value - offset);
  2610  0155  0954               	comf	measure@offset,w
  2611  0156  00D0               	movwf	??_measure
  2612  0157  0955               	comf	measure@offset+1,w
  2613  0158  00D1               	movwf	??_measure+1
  2614  0159  0AD0               	incf	??_measure,f
  2615  015A  1903               	skipnz
  2616  015B  0AD1               	incf	??_measure+1,f
  2617  015C  0857               	movf	measure@value,w
  2618  015D  0750               	addwf	??_measure,w
  2619  015E  00D2               	movwf	??_measure+2
  2620  015F  0858               	movf	measure@value+1,w
  2621  0160  3D51               	addwfc	??_measure+1,w
  2622  0161  00D3               	movwf	??_measure+3
  2623  0162  0856               	movf	measure@I,w
  2624  0163  0086               	movwf	6
  2625  0164  0187               	clrf	7
  2626  0165  0852               	movf	??_measure+2,w
  2627  0166  3FC0               	movwi [0]fsr1
  2628  0167  0853               	movf	??_measure+3,w
  2629  0168  3FC1               	movwi [1]fsr1
  2630                           
  2631                           ;comm.c: 586:     aux1 = *I;
  2632  0169  0856               	movf	measure@I,w
  2633  016A  0086               	movwf	6
  2634  016B  0187               	clrf	7
  2635  016C  3F40               	moviw [0]fsr1
  2636  016D  00DB               	movwf	measure@aux1
  2637  016E  3F41               	moviw [1]fsr1
  2638  016F  00DC               	movwf	measure@aux1+1
  2639                           
  2640                           ;comm.c: 588:     if (aux1 < 0) {
  2641  0170  1FDC               	btfss	measure@aux1+1,7
  2642  0171  2977               	goto	l2572
  2643                           
  2644                           ;comm.c: 589:         aux1 = -aux1;
  2645  0172  09DB               	comf	measure@aux1,f
  2646  0173  09DC               	comf	measure@aux1+1,f
  2647  0174  0ADB               	incf	measure@aux1,f
  2648  0175  1903               	skipnz
  2649  0176  0ADC               	incf	measure@aux1+1,f
  2650  0177                     l2572:	
  2651                           ;comm.c: 590:     }
  2652                           
  2653                           
  2654                           ;comm.c: 595:     asic.data_bits.IQ = 1;
  2655  0177  15CF               	bsf	measure@asic+1,3
  2656                           
  2657                           ;comm.c: 597:     config(asic);
  2658  0178  084F               	movf	measure@asic+1,w
  2659  0179  00F5               	movwf	config@conf+1
  2660  017A  084E               	movf	measure@asic,w
  2661  017B  00F4               	movwf	config@conf
  2662  017C  221B               	fcall	_config
  2663                           
  2664                           ;comm.c: 598:      _delay((unsigned long)((20)*(500000/4000.0)));
  2665  017D  3004               	movlw	4
  2666  017E  0020               	movlb	0	; select bank0
  2667  017F  00D0               	movwf	??_measure
  2668  0180  303D               	movlw	61
  2669  0181                     u1457:	
  2670  0181  0B89               	decfsz	9,f
  2671  0182  2981               	goto	u1457
  2672  0183  0BD0               	decfsz	??_measure,f
  2673  0184  2981               	goto	u1457
  2674  0185  3200               	nop2
  2675                           
  2676                           ;comm.c: 600:     value = ADC_5();
  2677  0186  22F3               	fcall	_ADC_5
  2678  0187  0875               	movf	?_ADC_5+1,w
  2679  0188  0020               	movlb	0	; select bank0
  2680  0189  00D8               	movwf	measure@value+1
  2681  018A  0874               	movf	?_ADC_5,w
  2682  018B  00D7               	movwf	measure@value
  2683                           
  2684                           ;comm.c: 601:     *Q = (value - offset);
  2685  018C  0954               	comf	measure@offset,w
  2686  018D  00D0               	movwf	??_measure
  2687  018E  0955               	comf	measure@offset+1,w
  2688  018F  00D1               	movwf	??_measure+1
  2689  0190  0AD0               	incf	??_measure,f
  2690  0191  1903               	skipnz
  2691  0192  0AD1               	incf	??_measure+1,f
  2692  0193  0857               	movf	measure@value,w
  2693  0194  0750               	addwf	??_measure,w
  2694  0195  00D2               	movwf	??_measure+2
  2695  0196  0858               	movf	measure@value+1,w
  2696  0197  3D51               	addwfc	??_measure+1,w
  2697  0198  00D3               	movwf	??_measure+3
  2698  0199  084D               	movf	measure@Q,w
  2699  019A  0086               	movwf	6
  2700  019B  0187               	clrf	7
  2701  019C  0852               	movf	??_measure+2,w
  2702  019D  3FC0               	movwi [0]fsr1
  2703  019E  0853               	movf	??_measure+3,w
  2704  019F  3FC1               	movwi [1]fsr1
  2705                           
  2706                           ;comm.c: 602:     aux2 = *Q;
  2707  01A0  084D               	movf	measure@Q,w
  2708  01A1  0086               	movwf	6
  2709  01A2  0187               	clrf	7
  2710  01A3  3F40               	moviw [0]fsr1
  2711  01A4  00D9               	movwf	measure@aux2
  2712  01A5  3F41               	moviw [1]fsr1
  2713  01A6  00DA               	movwf	measure@aux2+1
  2714                           
  2715                           ;comm.c: 604:     if (aux2 < 0) {
  2716  01A7  1FDA               	btfss	measure@aux2+1,7
  2717  01A8  29AE               	goto	l2588
  2718                           
  2719                           ;comm.c: 605:         aux2 = -aux2;
  2720  01A9  09D9               	comf	measure@aux2,f
  2721  01AA  09DA               	comf	measure@aux2+1,f
  2722  01AB  0AD9               	incf	measure@aux2,f
  2723  01AC  1903               	skipnz
  2724  01AD  0ADA               	incf	measure@aux2+1,f
  2725  01AE                     l2588:	
  2726                           ;comm.c: 606:     }
  2727                           
  2728                           
  2729                           ;comm.c: 608:     if (aux2 > aux1) {
  2730  01AE  085C               	movf	measure@aux1+1,w
  2731  01AF  3A80               	xorlw	128
  2732  01B0  00D0               	movwf	??_measure
  2733  01B1  085A               	movf	measure@aux2+1,w
  2734  01B2  3A80               	xorlw	128
  2735  01B3  0250               	subwf	??_measure,w
  2736  01B4  1D03               	skipz
  2737  01B5  29B8               	goto	u1255
  2738  01B6  0859               	movf	measure@aux2,w
  2739  01B7  025B               	subwf	measure@aux1,w
  2740  01B8                     u1255:	
  2741  01B8  1803               	skipnc
  2742  01B9  29BF               	goto	l416
  2743                           
  2744                           ;comm.c: 609:         aux1 = aux2;
  2745  01BA  0020               	movlb	0	; select bank0
  2746  01BB  085A               	movf	measure@aux2+1,w
  2747  01BC  00DC               	movwf	measure@aux1+1
  2748  01BD  0859               	movf	measure@aux2,w
  2749  01BE  00DB               	movwf	measure@aux1
  2750  01BF                     l416:	
  2751                           ;comm.c: 610:     }
  2752                           
  2753                           
  2754                           ;comm.c: 612:     if (aux1 > 370) {
  2755  01BF  0020               	movlb	0	; select bank0
  2756  01C0  085C               	movf	measure@aux1+1,w
  2757  01C1  3A80               	xorlw	128
  2758  01C2  00D0               	movwf	??_measure
  2759  01C3  3081               	movlw	129
  2760  01C4  0250               	subwf	??_measure,w
  2761  01C5  1D03               	skipz
  2762  01C6  29C9               	goto	u1265
  2763  01C7  3073               	movlw	115
  2764  01C8  025B               	subwf	measure@aux1,w
  2765  01C9                     u1265:	
  2766  01C9  1C03               	skipc
  2767  01CA  29CD               	goto	l2598
  2768                           
  2769                           ;comm.c: 613:         return 2;
  2770  01CB  3002               	movlw	2
  2771  01CC  0008               	return
  2772  01CD                     l2598:	
  2773                           ;comm.c: 614:     } else if (aux1 < 86) {
  2774                           
  2775  01CD  0020               	movlb	0	; select bank0
  2776  01CE  085C               	movf	measure@aux1+1,w
  2777  01CF  3A80               	xorlw	128
  2778  01D0  00D0               	movwf	??_measure
  2779  01D1  3080               	movlw	128
  2780  01D2  0250               	subwf	??_measure,w
  2781  01D3  1D03               	skipz
  2782  01D4  29D7               	goto	u1275
  2783  01D5  3056               	movlw	86
  2784  01D6  025B               	subwf	measure@aux1,w
  2785  01D7                     u1275:	
  2786  01D7  1803               	skipnc
  2787  01D8  29DB               	goto	l2604
  2788                           
  2789                           ;comm.c: 615:         return 1;
  2790  01D9  3001               	movlw	1
  2791  01DA  0008               	return
  2792  01DB                     l2604:	
  2793                           ;comm.c: 616:     }
  2794                           
  2795                           
  2796                           ;comm.c: 618:     return 0;
  2797  01DB  3000               	movlw	0
  2798  01DC  0008               	return
  2799  01DD                     __end_of_measure:	
  2800                           
  2801                           	psect	text5
  2802  021B                     __ptext5:	
  2803 ;; *************** function _config *****************
  2804 ;; Defined at:
  2805 ;;		line 131 in file "bio3.c"
  2806 ;; Parameters:    Size  Location     Type
  2807 ;;  conf            2    4[COMMON] struct .
  2808 ;; Auto vars:     Size  Location     Type
  2809 ;;  out             1    1[BANK0 ] unsigned char 
  2810 ;;  i               1    0[BANK0 ] unsigned char 
  2811 ;; Return value:  Size  Location     Type
  2812 ;;                  1    wreg      void 
  2813 ;; Registers used:
  2814 ;;		wreg, status,2, status,0
  2815 ;; Tracked objects:
  2816 ;;		On entry : 0/0
  2817 ;;		On exit  : 0/0
  2818 ;;		Unchanged: 0/0
  2819 ;; Data sizes:     COMMON   BANK0   BANK1
  2820 ;;      Params:         2       0       0
  2821 ;;      Locals:         0       2       0
  2822 ;;      Temps:          1       0       0
  2823 ;;      Totals:         3       2       0
  2824 ;;Total ram usage:        5 bytes
  2825 ;; Hardware stack levels used:    1
  2826 ;; Hardware stack levels required when called:    2
  2827 ;; This function calls:
  2828 ;;		Nothing
  2829 ;; This function is called by:
  2830 ;;		_measure
  2831 ;;		_config_ASIC
  2832 ;;		_measure_Impedance
  2833 ;;		_measure_Impedance_no_offset
  2834 ;;		_measure_Offset
  2835 ;;		_measure_Impedance_SE
  2836 ;; This function uses a non-reentrant model
  2837 ;;
  2838                           
  2839                           
  2840                           ;psect for function _config
  2841  021B                     _config:	
  2842                           
  2843                           ;bio3.c: 131: void config(BIO3 conf);bio3.c: 132: {;bio3.c: 133:     unsigned char i, ou
      +                          t;;bio3.c: 135:     out &= 0b11110111; PORTC = out;;
  2844                           
  2845                           ;incstack = 0
  2846                           ; Regs used in _config: [wreg+status,2+status,0]
  2847  021B  30F7               	movlw	247
  2848  021C  00F6               	movwf	??_config
  2849  021D  0876               	movf	??_config,w
  2850  021E  0020               	movlb	0	; select bank0
  2851  021F  05CA               	andwf	config@out,f
  2852  0220  084A               	movf	config@out,w
  2853  0221  008E               	movwf	14	;volatile
  2854                           
  2855                           ;bio3.c: 138:     RA5 = 0;;
  2856                           
  2857                           ;bio3.c: 136:     _delay((unsigned long)((5)*(500000/4000000.0)));
  2858  0222  0020               	movlb	0	; select bank0
  2859  0223  128C               	bcf	12,5	;volatile
  2860                           
  2861                           ;bio3.c: 141:     RA5 = 1;;
  2862                           
  2863                           ;bio3.c: 139:     _delay((unsigned long)((5)*(500000/4000000.0)));
  2864  0224  0020               	movlb	0	; select bank0
  2865  0225  168C               	bsf	12,5	;volatile
  2866                           
  2867                           ;bio3.c: 143:     for(i = 0; i < 16; i++) {
  2868  0226  01C9               	clrf	config@i
  2869  0227                     L3:	
  2870  0227  3010               	movlw	16
  2871  0228  0249               	subwf	config@i,w
  2872  0229  1803               	btfsc	3,0
  2873  022A  0008               	return
  2874                           
  2875                           ;bio3.c: 144:         if (conf.datashort & 0x0001) {
  2876  022B  1C74               	btfss	config@conf,0
  2877  022C  2A2F               	goto	l2456
  2878                           
  2879                           ;bio3.c: 145:             out |= 0b00000100; PORTC = out;;
  2880  022D  154A               	bsf	config@out,2
  2881  022E  2A33               	goto	l2458
  2882  022F                     l2456:	
  2883                           ;bio3.c: 146:         } else {
  2884                           
  2885                           
  2886                           ;bio3.c: 147:             out &= 0b11111011; PORTC = out;;
  2887  022F  30FB               	movlw	251
  2888  0230  00F6               	movwf	??_config
  2889  0231  0876               	movf	??_config,w
  2890  0232  05CA               	andwf	config@out,f
  2891  0233                     l2458:	
  2892  0233  084A               	movf	config@out,w
  2893  0234  008E               	movwf	14	;volatile
  2894                           
  2895                           ;bio3.c: 149:         conf.datashort >>= 1;
  2896                           
  2897                           ;bio3.c: 148:         }
  2898  0235  3001               	movlw	1
  2899  0236                     u1055:	
  2900  0236  36F5               	lsrf	config@conf+1,f
  2901  0237  0CF4               	rrf	config@conf,f
  2902  0238  0B89               	decfsz	9,f
  2903  0239  2A36               	goto	u1055
  2904                           
  2905                           ;bio3.c: 153:         out |= 0b00001000; PORTC = out;;
  2906                           
  2907                           ;bio3.c: 151:         _delay((unsigned long)((5)*(500000/4000000.0)));
  2908  023A  0020               	movlb	0	; select bank0
  2909  023B  15CA               	bsf	config@out,3
  2910  023C  084A               	movf	config@out,w
  2911  023D  008E               	movwf	14	;volatile
  2912                           
  2913                           ;bio3.c: 155:         out &= 0b11110111; PORTC = out;;
  2914                           
  2915                           ;bio3.c: 154:         _delay((unsigned long)((5)*(500000/4000000.0)));
  2916  023E  30F7               	movlw	247
  2917  023F  00F6               	movwf	??_config
  2918  0240  0876               	movf	??_config,w
  2919  0241  0020               	movlb	0	; select bank0
  2920  0242  05CA               	andwf	config@out,f
  2921  0243  084A               	movf	config@out,w
  2922  0244  008E               	movwf	14	;volatile
  2923                           
  2924                           ;bio3.c: 157:     }
  2925  0245  3001               	movlw	1
  2926  0246  00F6               	movwf	??_config
  2927  0247  0876               	movf	??_config,w
  2928  0248  07C9               	addwf	config@i,f
  2929  0249  2A27               	goto	L3
  2930  024A                     __end_of_config:	
  2931                           
  2932                           	psect	text6
  2933  02F3                     __ptext6:	
  2934 ;; *************** function _ADC_5 *****************
  2935 ;; Defined at:
  2936 ;;		line 48 in file "ADC1823.c"
  2937 ;; Parameters:    Size  Location     Type
  2938 ;;		None
  2939 ;; Auto vars:     Size  Location     Type
  2940 ;;  ADC_value       2    2[BANK0 ] unsigned short 
  2941 ;; Return value:  Size  Location     Type
  2942 ;;                  2    4[COMMON] unsigned short 
  2943 ;; Registers used:
  2944 ;;		wreg
  2945 ;; Tracked objects:
  2946 ;;		On entry : 0/0
  2947 ;;		On exit  : 0/0
  2948 ;;		Unchanged: 0/0
  2949 ;; Data sizes:     COMMON   BANK0   BANK1
  2950 ;;      Params:         2       0       0
  2951 ;;      Locals:         0       2       0
  2952 ;;      Temps:          0       2       0
  2953 ;;      Totals:         2       4       0
  2954 ;;Total ram usage:        6 bytes
  2955 ;; Hardware stack levels used:    1
  2956 ;; Hardware stack levels required when called:    2
  2957 ;; This function calls:
  2958 ;;		Nothing
  2959 ;; This function is called by:
  2960 ;;		_measure
  2961 ;;		_read_ADC_channels
  2962 ;;		_measure_Impedance_SE
  2963 ;; This function uses a non-reentrant model
  2964 ;;
  2965                           
  2966                           
  2967                           ;psect for function _ADC_5
  2968  02F3                     _ADC_5:	
  2969                           
  2970                           ;ADC1823.c: 50:     unsigned short ADC_value;;ADC1823.c: 52:     { ADCON0 = 0b00010101;}
      +                          ;
  2971                           
  2972                           ;incstack = 0
  2973                           ; Regs used in _ADC_5: [wreg]
  2974  02F3  3015               	movlw	21
  2975  02F4  0021               	movlb	1	; select bank1
  2976  02F5  009D               	movwf	29	;volatile
  2977                           
  2978                           ;ADC1823.c: 53:     __nop();
  2979  02F6  0000               	nop
  2980                           
  2981                           ;ADC1823.c: 54:     { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_v
      +                          alue |= ADRESL;};
  2982  02F7  0021               	movlb	1	; select bank1
  2983  02F8  149D               	bsf	29,1	;volatile
  2984  02F9                     l450:	
  2985  02F9  189D               	btfsc	29,1	;volatile
  2986  02FA  2AF9               	goto	l450
  2987  02FB  081C               	movf	28,w	;volatile
  2988  02FC  0020               	movlb	0	; select bank0
  2989  02FD  00C9               	movwf	??_ADC_5
  2990  02FE  01CA               	clrf	??_ADC_5+1
  2991  02FF  0849               	movf	??_ADC_5,w
  2992  0300  00CB               	movwf	ADC_5@ADC_value
  2993  0301  084A               	movf	??_ADC_5+1,w
  2994  0302  00CC               	movwf	ADC_5@ADC_value+1
  2995  0303  3008               	movlw	8
  2996  0304                     u1085:	
  2997  0304  35CB               	lslf	ADC_5@ADC_value,f
  2998  0305  0DCC               	rlf	ADC_5@ADC_value+1,f
  2999  0306  0B89               	decfsz	9,f
  3000  0307  2B04               	goto	u1085
  3001  0308  0021               	movlb	1	; select bank1
  3002  0309  081B               	movf	27,w	;volatile
  3003  030A  0020               	movlb	0	; select bank0
  3004  030B  00C9               	movwf	??_ADC_5
  3005  030C  01CA               	clrf	??_ADC_5+1
  3006  030D  0849               	movf	??_ADC_5,w
  3007  030E  04CB               	iorwf	ADC_5@ADC_value,f
  3008  030F  084A               	movf	??_ADC_5+1,w
  3009  0310  04CC               	iorwf	ADC_5@ADC_value+1,f
  3010                           
  3011                           ;ADC1823.c: 56:     return ADC_value;
  3012  0311  084C               	movf	ADC_5@ADC_value+1,w
  3013  0312  00F5               	movwf	?_ADC_5+1
  3014  0313  084B               	movf	ADC_5@ADC_value,w
  3015  0314  00F4               	movwf	?_ADC_5
  3016  0315  0008               	return
  3017  0316                     __end_of_ADC_5:	
  3018                           
  3019                           	psect	text7
  3020  02A0                     __ptext7:	
  3021 ;; *************** function _lputs_ISR *****************
  3022 ;; Defined at:
  3023 ;;		line 132 in file "USART1823.c"
  3024 ;; Parameters:    Size  Location     Type
  3025 ;;  data            1    wreg     PTR unsigned char 
  3026 ;;		 -> sweep@aux(7), calibrate_reader@aux(8), measure_Impedance_SE@aux(8), measure_Offset@aux(5), 
  3027 ;;		 -> measure_Impedance_no_offset@aux(13), measure_Impedance@aux(13), read_ADC_channels@aux(7), mess_rec(10), 
  3028 ;;  length          1    4[COMMON] unsigned char 
  3029 ;; Auto vars:     Size  Location     Type
  3030 ;;  data            1    1[BANK0 ] PTR unsigned char 
  3031 ;;		 -> sweep@aux(7), calibrate_reader@aux(8), measure_Impedance_SE@aux(8), measure_Offset@aux(5), 
  3032 ;;		 -> measure_Impedance_no_offset@aux(13), measure_Impedance@aux(13), read_ADC_channels@aux(7), mess_rec(10), 
  3033 ;;  i               1    0[BANK0 ] unsigned char 
  3034 ;; Return value:  Size  Location     Type
  3035 ;;                  1    wreg      void 
  3036 ;; Registers used:
  3037 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3038 ;; Tracked objects:
  3039 ;;		On entry : 0/0
  3040 ;;		On exit  : 0/0
  3041 ;;		Unchanged: 0/0
  3042 ;; Data sizes:     COMMON   BANK0   BANK1
  3043 ;;      Params:         1       0       0
  3044 ;;      Locals:         0       2       0
  3045 ;;      Temps:          2       0       0
  3046 ;;      Totals:         3       2       0
  3047 ;;Total ram usage:        5 bytes
  3048 ;; Hardware stack levels used:    1
  3049 ;; Hardware stack levels required when called:    3
  3050 ;; This function calls:
  3051 ;;		_close_RX_USART
  3052 ;; This function is called by:
  3053 ;;		_sweep
  3054 ;;		_mess_handler
  3055 ;;		_config_ASIC
  3056 ;;		_read_ADC_channels
  3057 ;;		_measure_Impedance
  3058 ;;		_measure_Impedance_no_offset
  3059 ;;		_measure_Offset
  3060 ;;		_measure_Impedance_SE
  3061 ;;		_calibrate_reader
  3062 ;; This function uses a non-reentrant model
  3063 ;;
  3064                           
  3065                           
  3066                           ;psect for function _lputs_ISR
  3067  02A0                     _lputs_ISR:	
  3068                           
  3069                           ;incstack = 0
  3070                           ; Regs used in _lputs_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3071                           ;lputs_ISR@data stored from wreg
  3072  02A0  0020               	movlb	0	; select bank0
  3073  02A1  00CA               	movwf	lputs_ISR@data
  3074                           
  3075                           ;USART1823.c: 132: void lputs_ISR(unsigned char* data, unsigned char length);USART1823.c
      +                          : 133: {;USART1823.c: 134:     unsigned char i;;USART1823.c: 136:     if (USART_tx_flag 
      +                          == 1)
  3076  02A2  0377               	decf	_USART_tx_flag,w	;volatile
  3077  02A3  1903               	btfsc	3,2
  3078  02A4  0008               	return
  3079                           
  3080                           ;USART1823.c: 139:     for (i = 0; i < length; i++)
  3081                           
  3082                           ;USART1823.c: 137:         return;
  3083  02A5  01C9               	clrf	lputs_ISR@i
  3084  02A6                     l2524:	
  3085  02A6  0874               	movf	lputs_ISR@length,w
  3086  02A7  0249               	subwf	lputs_ISR@i,w
  3087  02A8  1803               	btfsc	3,0
  3088  02A9  2ABD               	goto	l2526
  3089                           
  3090                           ;USART1823.c: 140:         USART_tx_data[i] = data[i];
  3091  02AA  0849               	movf	lputs_ISR@i,w
  3092  02AB  074A               	addwf	lputs_ISR@data,w
  3093  02AC  00F5               	movwf	??_lputs_ISR
  3094  02AD  0875               	movf	??_lputs_ISR,w
  3095  02AE  0086               	movwf	6
  3096  02AF  0187               	clrf	7
  3097  02B0  0801               	movf	1,w
  3098  02B1  00F6               	movwf	??_lputs_ISR+1
  3099  02B2  0849               	movf	lputs_ISR@i,w
  3100  02B3  3E20               	addlw	(low (_USART_tx_data| 0))& (0+255)
  3101  02B4  0086               	movwf	6
  3102  02B5  0187               	clrf	7
  3103  02B6  0876               	movf	??_lputs_ISR+1,w
  3104  02B7  0081               	movwf	1
  3105  02B8  3001               	movlw	1
  3106  02B9  00F5               	movwf	??_lputs_ISR
  3107  02BA  0875               	movf	??_lputs_ISR,w
  3108  02BB  07C9               	addwf	lputs_ISR@i,f
  3109  02BC  2AA6               	goto	l2524
  3110  02BD                     l2526:	
  3111                           
  3112                           ;USART1823.c: 142:     close_RX_USART();
  3113  02BD  239C               	fcall	_close_RX_USART
  3114                           
  3115                           ;USART1823.c: 144:     USART_tx_index = 0;
  3116  02BE  01F9               	clrf	_USART_tx_index	;volatile
  3117                           
  3118                           ;USART1823.c: 145:     USART_tx_length = length;
  3119  02BF  0874               	movf	lputs_ISR@length,w
  3120  02C0  00F5               	movwf	??_lputs_ISR
  3121  02C1  0875               	movf	??_lputs_ISR,w
  3122  02C2  00F8               	movwf	_USART_tx_length	;volatile
  3123                           
  3124                           ;USART1823.c: 147:     USART_tx_flag = 1;
  3125  02C3  3001               	movlw	1
  3126  02C4  00F5               	movwf	??_lputs_ISR
  3127  02C5  0875               	movf	??_lputs_ISR,w
  3128  02C6  00F7               	movwf	_USART_tx_flag	;volatile
  3129                           
  3130                           ;USART1823.c: 148:     TXIE = 1;
  3131  02C7  0021               	movlb	1	; select bank1
  3132  02C8  1611               	bsf	17,4	;volatile
  3133  02C9  0008               	return
  3134  02CA                     __end_of_lputs_ISR:	
  3135                           
  3136                           	psect	text8
  3137  039C                     __ptext8:	
  3138 ;; *************** function _close_RX_USART *****************
  3139 ;; Defined at:
  3140 ;;		line 35 in file "USART1823.c"
  3141 ;; Parameters:    Size  Location     Type
  3142 ;;		None
  3143 ;; Auto vars:     Size  Location     Type
  3144 ;;		None
  3145 ;; Return value:  Size  Location     Type
  3146 ;;                  1    wreg      void 
  3147 ;; Registers used:
  3148 ;;		status,2
  3149 ;; Tracked objects:
  3150 ;;		On entry : 0/0
  3151 ;;		On exit  : 0/0
  3152 ;;		Unchanged: 0/0
  3153 ;; Data sizes:     COMMON   BANK0   BANK1
  3154 ;;      Params:         0       0       0
  3155 ;;      Locals:         0       0       0
  3156 ;;      Temps:          0       0       0
  3157 ;;      Totals:         0       0       0
  3158 ;;Total ram usage:        0 bytes
  3159 ;; Hardware stack levels used:    1
  3160 ;; Hardware stack levels required when called:    2
  3161 ;; This function calls:
  3162 ;;		Nothing
  3163 ;; This function is called by:
  3164 ;;		_lputs_ISR
  3165 ;; This function uses a non-reentrant model
  3166 ;;
  3167                           
  3168                           
  3169                           ;psect for function _close_RX_USART
  3170  039C                     _close_RX_USART:	
  3171                           
  3172                           ;USART1823.c: 39:     RCIE = 0;
  3173                           
  3174                           ;incstack = 0
  3175                           ; Regs used in _close_RX_USART: [status,2]
  3176  039C  0021               	movlb	1	; select bank1
  3177  039D  1291               	bcf	17,5	;volatile
  3178                           
  3179                           ;USART1823.c: 40:     CREN = 0;
  3180  039E  0023               	movlb	3	; select bank3
  3181  039F  121D               	bcf	29,4	;volatile
  3182                           
  3183                           ;USART1823.c: 41:     USART_rx_index = 0;
  3184  03A0  0020               	movlb	0	; select bank0
  3185  03A1  01BD               	clrf	_USART_rx_index	;volatile
  3186  03A2  0008               	return
  3187  03A3                     __end_of_close_RX_USART:	
  3188                           
  3189                           	psect	text9
  3190  0316                     __ptext9:	
  3191 ;; *************** function _calculate_checksum *****************
  3192 ;; Defined at:
  3193 ;;		line 407 in file "comm.c"
  3194 ;; Parameters:    Size  Location     Type
  3195 ;;  data            1    wreg     PTR unsigned char 
  3196 ;;		 -> sweep@aux(7), measure_Impedance_SE@aux(8), mess_rec(10), 
  3197 ;;  num             1    4[COMMON] unsigned char 
  3198 ;; Auto vars:     Size  Location     Type
  3199 ;;  data            1    1[BANK0 ] PTR unsigned char 
  3200 ;;		 -> sweep@aux(7), measure_Impedance_SE@aux(8), mess_rec(10), 
  3201 ;;  i               1    2[BANK0 ] unsigned char 
  3202 ;;  check           1    0[BANK0 ] unsigned char 
  3203 ;; Return value:  Size  Location     Type
  3204 ;;                  1    wreg      unsigned char 
  3205 ;; Registers used:
  3206 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3207 ;; Tracked objects:
  3208 ;;		On entry : 0/0
  3209 ;;		On exit  : 0/0
  3210 ;;		Unchanged: 0/0
  3211 ;; Data sizes:     COMMON   BANK0   BANK1
  3212 ;;      Params:         1       0       0
  3213 ;;      Locals:         0       3       0
  3214 ;;      Temps:          2       0       0
  3215 ;;      Totals:         3       3       0
  3216 ;;Total ram usage:        6 bytes
  3217 ;; Hardware stack levels used:    1
  3218 ;; Hardware stack levels required when called:    2
  3219 ;; This function calls:
  3220 ;;		Nothing
  3221 ;; This function is called by:
  3222 ;;		_sweep
  3223 ;;		_measure_Impedance_SE
  3224 ;; This function uses a non-reentrant model
  3225 ;;
  3226                           
  3227                           
  3228                           ;psect for function _calculate_checksum
  3229  0316                     _calculate_checksum:	
  3230                           
  3231                           ;incstack = 0
  3232                           ; Regs used in _calculate_checksum: [wreg+fsr1l+fsr1h+status,2+status,0]
  3233                           ;calculate_checksum@data stored from wreg
  3234  0316  0020               	movlb	0	; select bank0
  3235  0317  00CA               	movwf	calculate_checksum@data
  3236                           
  3237                           ;comm.c: 407: unsigned char calculate_checksum(unsigned char* data, unsigned char num);c
      +                          omm.c: 408: {;comm.c: 409:     unsigned char check, i;;comm.c: 411:     check = 0;
  3238  0318  01C9               	clrf	calculate_checksum@check
  3239                           
  3240                           ;comm.c: 412:     for (i = 0; i < num; i++) {
  3241  0319  01CB               	clrf	calculate_checksum@i
  3242  031A                     l2542:	
  3243  031A  0874               	movf	calculate_checksum@num,w
  3244  031B  024B               	subwf	calculate_checksum@i,w
  3245  031C  1803               	btfsc	3,0
  3246  031D  2B2D               	goto	l2544
  3247                           
  3248                           ;comm.c: 413:         check ^= data[i];
  3249  031E  084B               	movf	calculate_checksum@i,w
  3250  031F  074A               	addwf	calculate_checksum@data,w
  3251  0320  00F5               	movwf	??_calculate_checksum
  3252  0321  0875               	movf	??_calculate_checksum,w
  3253  0322  0086               	movwf	6
  3254  0323  0187               	clrf	7
  3255  0324  0801               	movf	1,w
  3256  0325  00F6               	movwf	??_calculate_checksum+1
  3257  0326  0876               	movf	??_calculate_checksum+1,w
  3258  0327  06C9               	xorwf	calculate_checksum@check,f
  3259                           
  3260                           ;comm.c: 414:     }
  3261  0328  3001               	movlw	1
  3262  0329  00F5               	movwf	??_calculate_checksum
  3263  032A  0875               	movf	??_calculate_checksum,w
  3264  032B  07CB               	addwf	calculate_checksum@i,f
  3265  032C  2B1A               	goto	l2542
  3266  032D                     l2544:	
  3267                           
  3268                           ;comm.c: 416:     return check;
  3269  032D  0849               	movf	calculate_checksum@check,w
  3270  032E  0008               	return
  3271  032F                     __end_of_calculate_checksum:	
  3272                           
  3273                           	psect	text10
  3274  037A                     __ptext10:	
  3275 ;; *************** function _start_TX_USART_ISR *****************
  3276 ;; Defined at:
  3277 ;;		line 101 in file "USART1823.c"
  3278 ;; Parameters:    Size  Location     Type
  3279 ;;		None
  3280 ;; Auto vars:     Size  Location     Type
  3281 ;;		None
  3282 ;; Return value:  Size  Location     Type
  3283 ;;                  1    wreg      void 
  3284 ;; Registers used:
  3285 ;;		wreg, status,2
  3286 ;; Tracked objects:
  3287 ;;		On entry : 0/0
  3288 ;;		On exit  : 0/0
  3289 ;;		Unchanged: 0/0
  3290 ;; Data sizes:     COMMON   BANK0   BANK1
  3291 ;;      Params:         0       0       0
  3292 ;;      Locals:         0       0       0
  3293 ;;      Temps:          0       0       0
  3294 ;;      Totals:         0       0       0
  3295 ;;Total ram usage:        0 bytes
  3296 ;; Hardware stack levels used:    1
  3297 ;; Hardware stack levels required when called:    2
  3298 ;; This function calls:
  3299 ;;		Nothing
  3300 ;; This function is called by:
  3301 ;;		_main
  3302 ;; This function uses a non-reentrant model
  3303 ;;
  3304                           
  3305                           
  3306                           ;psect for function _start_TX_USART_ISR
  3307  037A                     _start_TX_USART_ISR:	
  3308                           
  3309                           ;USART1823.c: 103:     { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  3310                           
  3311                           ;incstack = 0
  3312                           ; Regs used in _start_TX_USART_ISR: [wreg+status,2]
  3313  037A  0023               	movlb	3	; select bank3
  3314  037B  151E               	bsf	30,2	;volatile
  3315  037C  159F               	bsf	31,3	;volatile
  3316  037D  019C               	clrf	28	;volatile
  3317  037E  300C               	movlw	12
  3318  037F  009B               	movwf	27	;volatile
  3319                           
  3320                           ;USART1823.c: 104:     SYNC = 0;
  3321  0380  121E               	bcf	30,4	;volatile
  3322                           
  3323                           ;USART1823.c: 105:     SPEN = 1;
  3324  0381  179D               	bsf	29,7	;volatile
  3325                           
  3326                           ;USART1823.c: 106:     TXEN = 1;
  3327  0382  169E               	bsf	30,5	;volatile
  3328                           
  3329                           ;USART1823.c: 108:     USART_tx_flag = 0;
  3330  0383  01F7               	clrf	_USART_tx_flag	;volatile
  3331                           
  3332                           ;USART1823.c: 109:     USART_tx_index = 0;
  3333  0384  01F9               	clrf	_USART_tx_index	;volatile
  3334                           
  3335                           ;USART1823.c: 110:     USART_tx_length = 0;
  3336  0385  01F8               	clrf	_USART_tx_length	;volatile
  3337                           
  3338                           ;USART1823.c: 113:     PEIE = 1;
  3339  0386  170B               	bsf	11,6	;volatile
  3340                           
  3341                           ;USART1823.c: 114:     GIE = 1;
  3342  0387  178B               	bsf	11,7	;volatile
  3343  0388  0008               	return
  3344  0389                     __end_of_start_TX_USART_ISR:	
  3345                           
  3346                           	psect	text11
  3347  0348                     __ptext11:	
  3348 ;; *************** function _start_RX_USART_ISR *****************
  3349 ;; Defined at:
  3350 ;;		line 83 in file "USART1823.c"
  3351 ;; Parameters:    Size  Location     Type
  3352 ;;		None
  3353 ;; Auto vars:     Size  Location     Type
  3354 ;;		None
  3355 ;; Return value:  Size  Location     Type
  3356 ;;                  1    wreg      void 
  3357 ;; Registers used:
  3358 ;;		wreg, status,2
  3359 ;; Tracked objects:
  3360 ;;		On entry : 0/0
  3361 ;;		On exit  : 0/0
  3362 ;;		Unchanged: 0/0
  3363 ;; Data sizes:     COMMON   BANK0   BANK1
  3364 ;;      Params:         0       0       0
  3365 ;;      Locals:         0       0       0
  3366 ;;      Temps:          0       0       0
  3367 ;;      Totals:         0       0       0
  3368 ;;Total ram usage:        0 bytes
  3369 ;; Hardware stack levels used:    1
  3370 ;; Hardware stack levels required when called:    2
  3371 ;; This function calls:
  3372 ;;		Nothing
  3373 ;; This function is called by:
  3374 ;;		_main
  3375 ;; This function uses a non-reentrant model
  3376 ;;
  3377                           
  3378                           
  3379                           ;psect for function _start_RX_USART_ISR
  3380  0348                     _start_RX_USART_ISR:	
  3381                           
  3382                           ;USART1823.c: 86:      { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  3383                           
  3384                           ;incstack = 0
  3385                           ; Regs used in _start_RX_USART_ISR: [wreg+status,2]
  3386  0348  0023               	movlb	3	; select bank3
  3387  0349  151E               	bsf	30,2	;volatile
  3388  034A  159F               	bsf	31,3	;volatile
  3389  034B  019C               	clrf	28	;volatile
  3390  034C  300C               	movlw	12
  3391  034D  009B               	movwf	27	;volatile
  3392                           
  3393                           ;USART1823.c: 88:     SYNC = 0;
  3394  034E  121E               	bcf	30,4	;volatile
  3395                           
  3396                           ;USART1823.c: 89:     SPEN = 1;
  3397  034F  179D               	bsf	29,7	;volatile
  3398                           
  3399                           ;USART1823.c: 90:     CREN = 1;
  3400  0350  161D               	bsf	29,4	;volatile
  3401                           
  3402                           ;USART1823.c: 92:     USART_rx_flag = 0;
  3403  0351  0020               	movlb	0	; select bank0
  3404  0352  01BB               	clrf	_USART_rx_flag	;volatile
  3405                           
  3406                           ;USART1823.c: 93:     USART_rx_index = 0;
  3407  0353  01BD               	clrf	_USART_rx_index	;volatile
  3408                           
  3409                           ;USART1823.c: 95:     RCIE = 1;
  3410  0354  0021               	movlb	1	; select bank1
  3411  0355  1691               	bsf	17,5	;volatile
  3412                           
  3413                           ;USART1823.c: 96:     PEIE = 1;
  3414  0356  170B               	bsf	11,6	;volatile
  3415                           
  3416                           ;USART1823.c: 97:     GIE = 1;
  3417  0357  178B               	bsf	11,7	;volatile
  3418  0358  0008               	return
  3419  0359                     __end_of_start_RX_USART_ISR:	
  3420                           
  3421                           	psect	text12
  3422  03BC                     __ptext12:	
  3423 ;; *************** function _start_RCM *****************
  3424 ;; Defined at:
  3425 ;;		line 4 in file "RCM1823.c"
  3426 ;; Parameters:    Size  Location     Type
  3427 ;;		None
  3428 ;; Auto vars:     Size  Location     Type
  3429 ;;		None
  3430 ;; Return value:  Size  Location     Type
  3431 ;;                  1    wreg      void 
  3432 ;; Registers used:
  3433 ;;		wreg
  3434 ;; Tracked objects:
  3435 ;;		On entry : 0/0
  3436 ;;		On exit  : 0/0
  3437 ;;		Unchanged: 0/0
  3438 ;; Data sizes:     COMMON   BANK0   BANK1
  3439 ;;      Params:         0       0       0
  3440 ;;      Locals:         0       0       0
  3441 ;;      Temps:          0       0       0
  3442 ;;      Totals:         0       0       0
  3443 ;;Total ram usage:        0 bytes
  3444 ;; Hardware stack levels used:    1
  3445 ;; Hardware stack levels required when called:    2
  3446 ;; This function calls:
  3447 ;;		Nothing
  3448 ;; This function is called by:
  3449 ;;		_main
  3450 ;; This function uses a non-reentrant model
  3451 ;;
  3452                           
  3453                           
  3454                           ;psect for function _start_RCM
  3455  03BC                     _start_RCM:	
  3456                           
  3457                           ;RCM1823.c: 6:     CLKRCON = 0b11010000;
  3458                           
  3459                           ;incstack = 0
  3460                           ; Regs used in _start_RCM: [wreg]
  3461  03BC  30D0               	movlw	208
  3462  03BD  0027               	movlb	7	; select bank7
  3463  03BE  009A               	movwf	26	;volatile
  3464  03BF  0008               	return
  3465  03C0                     __end_of_start_RCM:	
  3466                           
  3467                           	psect	text13
  3468  03A3                     __ptext13:	
  3469 ;; *************** function _setup_TMR0 *****************
  3470 ;; Defined at:
  3471 ;;		line 10 in file "TMR0.c"
  3472 ;; Parameters:    Size  Location     Type
  3473 ;;		None
  3474 ;; Auto vars:     Size  Location     Type
  3475 ;;		None
  3476 ;; Return value:  Size  Location     Type
  3477 ;;                  1    wreg      void 
  3478 ;; Registers used:
  3479 ;;		None
  3480 ;; Tracked objects:
  3481 ;;		On entry : 0/0
  3482 ;;		On exit  : 0/0
  3483 ;;		Unchanged: 0/0
  3484 ;; Data sizes:     COMMON   BANK0   BANK1
  3485 ;;      Params:         0       0       0
  3486 ;;      Locals:         0       0       0
  3487 ;;      Temps:          0       0       0
  3488 ;;      Totals:         0       0       0
  3489 ;;Total ram usage:        0 bytes
  3490 ;; Hardware stack levels used:    1
  3491 ;; Hardware stack levels required when called:    2
  3492 ;; This function calls:
  3493 ;;		Nothing
  3494 ;; This function is called by:
  3495 ;;		_main
  3496 ;; This function uses a non-reentrant model
  3497 ;;
  3498                           
  3499                           
  3500                           ;psect for function _setup_TMR0
  3501  03A3                     _setup_TMR0:	
  3502                           
  3503                           ;TMR0.c: 13:     PS2 = 0; PS1 = 1; PS0 = 0;
  3504                           
  3505                           ;incstack = 0
  3506                           ; Regs used in _setup_TMR0: []
  3507  03A3  0021               	movlb	1	; select bank1
  3508  03A4  1115               	bcf	21,2	;volatile
  3509  03A5  1495               	bsf	21,1	;volatile
  3510  03A6  1015               	bcf	21,0	;volatile
  3511                           
  3512                           ;TMR0.c: 16:     PSA = 0;
  3513  03A7  1195               	bcf	21,3	;volatile
  3514                           
  3515                           ;TMR0.c: 18:     TMR0CS = 0;
  3516  03A8  1295               	bcf	21,5	;volatile
  3517  03A9  0008               	return
  3518  03AA                     __end_of_setup_TMR0:	
  3519                           
  3520                           	psect	text14
  3521  03B0                     __ptext14:	
  3522 ;; *************** function _setup_ADC *****************
  3523 ;; Defined at:
  3524 ;;		line 3 in file "ADC1823.c"
  3525 ;; Parameters:    Size  Location     Type
  3526 ;;		None
  3527 ;; Auto vars:     Size  Location     Type
  3528 ;;		None
  3529 ;; Return value:  Size  Location     Type
  3530 ;;                  1    wreg      void 
  3531 ;; Registers used:
  3532 ;;		wreg
  3533 ;; Tracked objects:
  3534 ;;		On entry : 0/0
  3535 ;;		On exit  : 0/0
  3536 ;;		Unchanged: 0/0
  3537 ;; Data sizes:     COMMON   BANK0   BANK1
  3538 ;;      Params:         0       0       0
  3539 ;;      Locals:         0       0       0
  3540 ;;      Temps:          0       0       0
  3541 ;;      Totals:         0       0       0
  3542 ;;Total ram usage:        0 bytes
  3543 ;; Hardware stack levels used:    1
  3544 ;; Hardware stack levels required when called:    2
  3545 ;; This function calls:
  3546 ;;		Nothing
  3547 ;; This function is called by:
  3548 ;;		_main
  3549 ;; This function uses a non-reentrant model
  3550 ;;
  3551                           
  3552                           
  3553                           ;psect for function _setup_ADC
  3554  03B0                     _setup_ADC:	
  3555                           
  3556                           ;ADC1823.c: 20:     ADCON1 = 0b11110000;
  3557                           
  3558                           ;incstack = 0
  3559                           ; Regs used in _setup_ADC: [wreg]
  3560  03B0  30F0               	movlw	240
  3561  03B1  0021               	movlb	1	; select bank1
  3562  03B2  009E               	movwf	30	;volatile
  3563                           
  3564                           ;ADC1823.c: 21:     { ADCON0 = 0b00100100;};
  3565  03B3  3024               	movlw	36
  3566  03B4  009D               	movwf	29	;volatile
  3567  03B5  0008               	return
  3568  03B6                     __end_of_setup_ADC:	
  3569                           
  3570                           	psect	text15
  3571  03C0                     __ptext15:	
  3572 ;; *************** function _USARTX_change_pol *****************
  3573 ;; Defined at:
  3574 ;;		line 90 in file "mcc_generated_files/mcc.c"
  3575 ;; Parameters:    Size  Location     Type
  3576 ;;		None
  3577 ;; Auto vars:     Size  Location     Type
  3578 ;;		None
  3579 ;; Return value:  Size  Location     Type
  3580 ;;                  1    wreg      void 
  3581 ;; Registers used:
  3582 ;;		None
  3583 ;; Tracked objects:
  3584 ;;		On entry : 0/0
  3585 ;;		On exit  : 0/0
  3586 ;;		Unchanged: 0/0
  3587 ;; Data sizes:     COMMON   BANK0   BANK1
  3588 ;;      Params:         0       0       0
  3589 ;;      Locals:         0       0       0
  3590 ;;      Temps:          0       0       0
  3591 ;;      Totals:         0       0       0
  3592 ;;Total ram usage:        0 bytes
  3593 ;; Hardware stack levels used:    1
  3594 ;; Hardware stack levels required when called:    2
  3595 ;; This function calls:
  3596 ;;		Nothing
  3597 ;; This function is called by:
  3598 ;;		_main
  3599 ;; This function uses a non-reentrant model
  3600 ;;
  3601                           
  3602                           
  3603                           ;psect for function _USARTX_change_pol
  3604  03C0                     _USARTX_change_pol:	
  3605                           
  3606                           ;mcc_generated_files/mcc.c: 92:     SCKP = 1;
  3607                           
  3608                           ;incstack = 0
  3609                           ; Regs used in _USARTX_change_pol: []
  3610  03C0  0023               	movlb	3	; select bank3
  3611  03C1  161F               	bsf	31,4	;volatile
  3612  03C2  0008               	return
  3613  03C3                     __end_of_USARTX_change_pol:	
  3614                           
  3615                           	psect	text16
  3616  03C3                     __ptext16:	
  3617 ;; *************** function _SYSTEM_Initialize *****************
  3618 ;; Defined at:
  3619 ;;		line 70 in file "mcc_generated_files/mcc.c"
  3620 ;; Parameters:    Size  Location     Type
  3621 ;;		None
  3622 ;; Auto vars:     Size  Location     Type
  3623 ;;		None
  3624 ;; Return value:  Size  Location     Type
  3625 ;;                  1    wreg      void 
  3626 ;; Registers used:
  3627 ;;		wreg, status,2, status,0, pclath, cstack
  3628 ;; Tracked objects:
  3629 ;;		On entry : 0/0
  3630 ;;		On exit  : 0/0
  3631 ;;		Unchanged: 0/0
  3632 ;; Data sizes:     COMMON   BANK0   BANK1
  3633 ;;      Params:         0       0       0
  3634 ;;      Locals:         0       0       0
  3635 ;;      Temps:          0       0       0
  3636 ;;      Totals:         0       0       0
  3637 ;;Total ram usage:        0 bytes
  3638 ;; Hardware stack levels used:    1
  3639 ;; Hardware stack levels required when called:    3
  3640 ;; This function calls:
  3641 ;;		_OSCILLATOR_Initialize
  3642 ;;		_PIN_MANAGER_Initialize
  3643 ;; This function is called by:
  3644 ;;		_main
  3645 ;; This function uses a non-reentrant model
  3646 ;;
  3647                           
  3648                           
  3649                           ;psect for function _SYSTEM_Initialize
  3650  03C3                     _SYSTEM_Initialize:	
  3651                           
  3652                           ;mcc_generated_files/mcc.c: 73:     PIN_MANAGER_Initialize();
  3653                           
  3654                           ;incstack = 0
  3655                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3656  03C3  232F               	fcall	_PIN_MANAGER_Initialize
  3657                           
  3658                           ;mcc_generated_files/mcc.c: 74:     OSCILLATOR_Initialize();
  3659  03C4  23B6               	fcall	_OSCILLATOR_Initialize
  3660  03C5  0008               	return
  3661  03C6                     __end_of_SYSTEM_Initialize:	
  3662                           
  3663                           	psect	text17
  3664  032F                     __ptext17:	
  3665 ;; *************** function _PIN_MANAGER_Initialize *****************
  3666 ;; Defined at:
  3667 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  3668 ;; Parameters:    Size  Location     Type
  3669 ;;		None
  3670 ;; Auto vars:     Size  Location     Type
  3671 ;;		None
  3672 ;; Return value:  Size  Location     Type
  3673 ;;                  1    wreg      void 
  3674 ;; Registers used:
  3675 ;;		wreg, status,2
  3676 ;; Tracked objects:
  3677 ;;		On entry : 0/0
  3678 ;;		On exit  : 0/0
  3679 ;;		Unchanged: 0/0
  3680 ;; Data sizes:     COMMON   BANK0   BANK1
  3681 ;;      Params:         0       0       0
  3682 ;;      Locals:         0       0       0
  3683 ;;      Temps:          0       0       0
  3684 ;;      Totals:         0       0       0
  3685 ;;Total ram usage:        0 bytes
  3686 ;; Hardware stack levels used:    1
  3687 ;; Hardware stack levels required when called:    2
  3688 ;; This function calls:
  3689 ;;		Nothing
  3690 ;; This function is called by:
  3691 ;;		_SYSTEM_Initialize
  3692 ;; This function uses a non-reentrant model
  3693 ;;
  3694                           
  3695                           
  3696                           ;psect for function _PIN_MANAGER_Initialize
  3697  032F                     _PIN_MANAGER_Initialize:	
  3698                           
  3699                           ;mcc_generated_files/pin_manager.c: 51:     LATA = 0x0;
  3700                           
  3701                           ;incstack = 0
  3702                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3703  032F  0022               	movlb	2	; select bank2
  3704  0330  018C               	clrf	12	;volatile
  3705                           
  3706                           ;mcc_generated_files/pin_manager.c: 52:     LATC = 0x0;
  3707  0331  018E               	clrf	14	;volatile
  3708                           
  3709                           ;mcc_generated_files/pin_manager.c: 55:     ANSELA = 0b00000100;
  3710  0332  3004               	movlw	4
  3711  0333  0023               	movlb	3	; select bank3
  3712  0334  008C               	movwf	12	;volatile
  3713                           
  3714                           ;mcc_generated_files/pin_manager.c: 56:     ANSELC = 0b00000011;
  3715  0335  3003               	movlw	3
  3716  0336  008E               	movwf	14	;volatile
  3717                           
  3718                           ;mcc_generated_files/pin_manager.c: 59:     WPUA = 0x3B;
  3719  0337  303B               	movlw	59
  3720  0338  0024               	movlb	4	; select bank4
  3721  0339  008C               	movwf	12	;volatile
  3722                           
  3723                           ;mcc_generated_files/pin_manager.c: 61:     WPUC = 0x1C;
  3724  033A  301C               	movlw	28
  3725  033B  008E               	movwf	14	;volatile
  3726                           
  3727                           ;mcc_generated_files/pin_manager.c: 63:     RXDTSEL = 0;
  3728  033C  0022               	movlb	2	; select bank2
  3729  033D  139D               	bcf	29,7	;volatile
  3730                           
  3731                           ;mcc_generated_files/pin_manager.c: 64:     TXCKSEL = 0;
  3732  033E  111D               	bcf	29,2	;volatile
  3733                           
  3734                           ;mcc_generated_files/pin_manager.c: 67:     TRISC = 0b01100011;
  3735  033F  3063               	movlw	99
  3736  0340  0021               	movlb	1	; select bank1
  3737  0341  008E               	movwf	14	;volatile
  3738                           
  3739                           ;mcc_generated_files/pin_manager.c: 68:     TRISA = 0b01011111;
  3740  0342  305F               	movlw	95
  3741  0343  008C               	movwf	12	;volatile
  3742                           
  3743                           ;mcc_generated_files/pin_manager.c: 70:     OPTION_REGbits.nWPUEN = 0x0;
  3744  0344  1395               	bcf	21,7	;volatile
  3745                           
  3746                           ;mcc_generated_files/pin_manager.c: 71:     APFCON = 0x00;
  3747  0345  0022               	movlb	2	; select bank2
  3748  0346  019D               	clrf	29	;volatile
  3749  0347  0008               	return
  3750  0348                     __end_of_PIN_MANAGER_Initialize:	
  3751                           
  3752                           	psect	text18
  3753  03B6                     __ptext18:	
  3754 ;; *************** function _OSCILLATOR_Initialize *****************
  3755 ;; Defined at:
  3756 ;;		line 78 in file "mcc_generated_files/mcc.c"
  3757 ;; Parameters:    Size  Location     Type
  3758 ;;		None
  3759 ;; Auto vars:     Size  Location     Type
  3760 ;;		None
  3761 ;; Return value:  Size  Location     Type
  3762 ;;                  1    wreg      void 
  3763 ;; Registers used:
  3764 ;;		wreg, status,2
  3765 ;; Tracked objects:
  3766 ;;		On entry : 0/0
  3767 ;;		On exit  : 0/0
  3768 ;;		Unchanged: 0/0
  3769 ;; Data sizes:     COMMON   BANK0   BANK1
  3770 ;;      Params:         0       0       0
  3771 ;;      Locals:         0       0       0
  3772 ;;      Temps:          0       0       0
  3773 ;;      Totals:         0       0       0
  3774 ;;Total ram usage:        0 bytes
  3775 ;; Hardware stack levels used:    1
  3776 ;; Hardware stack levels required when called:    2
  3777 ;; This function calls:
  3778 ;;		Nothing
  3779 ;; This function is called by:
  3780 ;;		_SYSTEM_Initialize
  3781 ;; This function uses a non-reentrant model
  3782 ;;
  3783                           
  3784                           
  3785                           ;psect for function _OSCILLATOR_Initialize
  3786  03B6                     _OSCILLATOR_Initialize:	
  3787                           
  3788                           ;mcc_generated_files/mcc.c: 81:     OSCCON = 0x3A;
  3789                           
  3790                           ;incstack = 0
  3791                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3792  03B6  303A               	movlw	58
  3793  03B7  0021               	movlb	1	; select bank1
  3794  03B8  0099               	movwf	25	;volatile
  3795                           
  3796                           ;mcc_generated_files/mcc.c: 83:     OSCSTAT = 0x00;
  3797  03B9  019A               	clrf	26	;volatile
  3798                           
  3799                           ;mcc_generated_files/mcc.c: 85:     OSCTUNE = 0x00;
  3800  03BA  0198               	clrf	24	;volatile
  3801  03BB  0008               	return
  3802  03BC                     __end_of_OSCILLATOR_Initialize:	
  3803                           
  3804                           	psect	intentry
  3805  0004                     __pintentry:	
  3806 ;; *************** function _isr *****************
  3807 ;; Defined at:
  3808 ;;		line 152 in file "main.c"
  3809 ;; Parameters:    Size  Location     Type
  3810 ;;		None
  3811 ;; Auto vars:     Size  Location     Type
  3812 ;;		None
  3813 ;; Return value:  Size  Location     Type
  3814 ;;                  1    wreg      void 
  3815 ;; Registers used:
  3816 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3817 ;; Tracked objects:
  3818 ;;		On entry : 0/0
  3819 ;;		On exit  : 0/0
  3820 ;;		Unchanged: 0/0
  3821 ;; Data sizes:     COMMON   BANK0   BANK1
  3822 ;;      Params:         0       0       0
  3823 ;;      Locals:         0       0       0
  3824 ;;      Temps:          1       0       0
  3825 ;;      Totals:         1       0       0
  3826 ;;Total ram usage:        1 bytes
  3827 ;; Hardware stack levels used:    1
  3828 ;; Hardware stack levels required when called:    1
  3829 ;; This function calls:
  3830 ;;		_start_TMR0_ISR
  3831 ;;		_stop_TMR0_ISR
  3832 ;;		i1_start_RX_USART_ISR
  3833 ;; This function is called by:
  3834 ;;		Interrupt level 1
  3835 ;; This function uses a non-reentrant model
  3836 ;;
  3837                           
  3838  0004                     _isr:	
  3839                           
  3840                           ;incstack = 0
  3841  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  3842                           
  3843                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3844  0005  3180               	pagesel	$
  3845                           
  3846                           ;main.c: 156:     if (TMR0IF && TMR0IE) {
  3847  0006  190B               	btfsc	11,2	;volatile
  3848  0007  1E8B               	btfss	11,5	;volatile
  3849  0008  2813               	goto	i1l132
  3850                           
  3851                           ;main.c: 158:         TMR0IF = 0;
  3852  0009  110B               	bcf	11,2	;volatile
  3853                           
  3854                           ;main.c: 159:         TMR0 = TIMER0_timeout;
  3855  000A  0020               	movlb	0	; select bank0
  3856  000B  0839               	movf	_TIMER0_timeout,w	;volatile
  3857  000C  0095               	movwf	21	;volatile
  3858                           
  3859                           ;main.c: 162:         TIMER0_flag = 1;
  3860  000D  3001               	movlw	1
  3861  000E  00F3               	movwf	??_isr
  3862  000F  0873               	movf	??_isr,w
  3863  0010  00BE               	movwf	_TIMER0_flag	;volatile
  3864                           
  3865                           ;main.c: 167:         stop_TMR0_ISR();
  3866  0011  23C6               	fcall	_stop_TMR0_ISR
  3867                           
  3868                           ;main.c: 169:         return;
  3869  0012  2850               	goto	i1l133
  3870  0013                     i1l132:	
  3871                           ;main.c: 170:     }
  3872                           
  3873                           
  3874                           ;main.c: 174:     if (RCIF) {
  3875  0013  0020               	movlb	0	; select bank0
  3876  0014  1E91               	btfss	17,5	;volatile
  3877  0015  2835               	goto	i1l134
  3878                           
  3879                           ;main.c: 175:         stop_TMR0_ISR();
  3880  0016  23C6               	fcall	_stop_TMR0_ISR
  3881                           
  3882                           ;main.c: 178:        if (OERR) {
  3883  0017  0023               	movlb	3	; select bank3
  3884  0018  1C9D               	btfss	29,1	;volatile
  3885  0019  281F               	goto	i1l2140
  3886                           
  3887                           ;main.c: 180:             CREN = 0;
  3888  001A  121D               	bcf	29,4	;volatile
  3889                           
  3890                           ;main.c: 181:             CREN = 1;
  3891  001B  161D               	bsf	29,4	;volatile
  3892                           
  3893                           ;main.c: 182:             USART_rx_index = 0;
  3894  001C  0020               	movlb	0	; select bank0
  3895  001D  01BD               	clrf	_USART_rx_index	;volatile
  3896                           
  3897                           ;main.c: 183:             return;
  3898  001E  2850               	goto	i1l133
  3899  001F                     i1l2140:	
  3900                           ;main.c: 184:         }
  3901                           
  3902                           
  3903                           ;main.c: 187:         if (USART_rx_index >= 10) {
  3904  001F  300A               	movlw	10
  3905  0020  0020               	movlb	0	; select bank0
  3906  0021  023D               	subwf	_USART_rx_index,w	;volatile
  3907  0022  1803               	btfsc	3,0
  3908                           
  3909                           ;main.c: 188:             USART_rx_index = 0;
  3910  0023  01BD               	clrf	_USART_rx_index	;volatile
  3911                           
  3912                           ;main.c: 191:         USART_rx_data[USART_rx_index++] = RCREG;
  3913                           
  3914                           ;main.c: 189:         }
  3915  0024  0023               	movlb	3	; select bank3
  3916  0025  0819               	movf	25,w	;volatile
  3917  0026  00F3               	movwf	??_isr
  3918  0027  0020               	movlb	0	; select bank0
  3919  0028  083D               	movf	_USART_rx_index,w
  3920  0029  3E2F               	addlw	(low (_USART_rx_data| 0))& (0+255)
  3921  002A  0086               	movwf	6
  3922  002B  0187               	clrf	7
  3923  002C  0873               	movf	??_isr,w
  3924  002D  0081               	movwf	1
  3925  002E  3001               	movlw	1
  3926  002F  00F3               	movwf	??_isr
  3927  0030  0873               	movf	??_isr,w
  3928  0031  07BD               	addwf	_USART_rx_index,f	;volatile
  3929                           
  3930                           ;main.c: 193:         start_TMR0_ISR(98);
  3931  0032  3062               	movlw	98
  3932  0033  236A               	fcall	_start_TMR0_ISR
  3933                           
  3934                           ;main.c: 195:         return;
  3935  0034  2850               	goto	i1l133
  3936  0035                     i1l134:	
  3937                           ;main.c: 196:     }
  3938                           
  3939                           
  3940                           ;main.c: 200:     if (TXIF && TXIE) {
  3941  0035  1E11               	btfss	17,4	;volatile
  3942  0036  2850               	goto	i1l133
  3943  0037  0021               	movlb	1	; select bank1
  3944  0038  1E11               	btfss	17,4	;volatile
  3945  0039  2850               	goto	i1l133
  3946                           
  3947                           ;main.c: 202:         TXREG = USART_tx_data[USART_tx_index++];
  3948  003A  0879               	movf	_USART_tx_index,w
  3949  003B  3E20               	addlw	(low (_USART_tx_data| 0))& (0+255)
  3950  003C  0086               	movwf	6
  3951  003D  0187               	clrf	7
  3952  003E  0801               	movf	1,w
  3953  003F  0023               	movlb	3	; select bank3
  3954  0040  009A               	movwf	26	;volatile
  3955  0041  3001               	movlw	1
  3956  0042  00F3               	movwf	??_isr
  3957  0043  0873               	movf	??_isr,w
  3958  0044  07F9               	addwf	_USART_tx_index,f	;volatile
  3959                           
  3960                           ;main.c: 204:         if (USART_tx_index >= USART_tx_length) {
  3961  0045  0878               	movf	_USART_tx_length,w	;volatile
  3962  0046  0279               	subwf	_USART_tx_index,w	;volatile
  3963  0047  1C03               	skipc
  3964  0048  2850               	goto	i1l133
  3965                           
  3966                           ;main.c: 205:             TXIE = 0;
  3967  0049  0021               	movlb	1	; select bank1
  3968  004A  1211               	bcf	17,4	;volatile
  3969                           
  3970                           ;main.c: 206:             USART_tx_flag = 0;
  3971  004B  01F7               	clrf	_USART_tx_flag	;volatile
  3972                           
  3973                           ;main.c: 210:             _delay((unsigned long)((3)*(500000/4000.0)));
  3974  004C  307D               	movlw	125
  3975  004D                     u146_27:	
  3976  004D  0B89               	decfsz	9,f
  3977  004E  284D               	goto	u146_27
  3978                           
  3979                           ;main.c: 212:             start_RX_USART_ISR();
  3980  004F  2359               	fcall	i1_start_RX_USART_ISR
  3981  0050                     i1l133:	
  3982                           ;main.c: 215:     }
  3983                           
  3984                           ;main.c: 214:         return;
  3985                           
  3986                           ;main.c: 213:         }
  3987                           
  3988  0050  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  3989  0051  0009               	retfie
  3990  0052                     __end_of_isr:	
  3991                           
  3992                           	psect	text20
  3993  0359                     __ptext20:	
  3994 ;; *************** function i1_start_RX_USART_ISR *****************
  3995 ;; Defined at:
  3996 ;;		line 83 in file "USART1823.c"
  3997 ;; Parameters:    Size  Location     Type
  3998 ;;		None
  3999 ;; Auto vars:     Size  Location     Type
  4000 ;;		None
  4001 ;; Return value:  Size  Location     Type
  4002 ;;                  1    wreg      void 
  4003 ;; Registers used:
  4004 ;;		wreg, status,2
  4005 ;; Tracked objects:
  4006 ;;		On entry : 0/0
  4007 ;;		On exit  : 0/0
  4008 ;;		Unchanged: 0/0
  4009 ;; Data sizes:     COMMON   BANK0   BANK1
  4010 ;;      Params:         0       0       0
  4011 ;;      Locals:         0       0       0
  4012 ;;      Temps:          0       0       0
  4013 ;;      Totals:         0       0       0
  4014 ;;Total ram usage:        0 bytes
  4015 ;; Hardware stack levels used:    1
  4016 ;; This function calls:
  4017 ;;		Nothing
  4018 ;; This function is called by:
  4019 ;;		_isr
  4020 ;; This function uses a non-reentrant model
  4021 ;;
  4022                           
  4023                           
  4024                           ;psect for function i1_start_RX_USART_ISR
  4025  0359                     i1_start_RX_USART_ISR:	
  4026                           
  4027                           ;USART1823.c: 86:      { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  4028                           
  4029                           ;incstack = 0
  4030                           ; Regs used in i1_start_RX_USART_ISR: [wreg+status,2]
  4031  0359  0023               	movlb	3	; select bank3
  4032  035A  151E               	bsf	30,2	;volatile
  4033  035B  159F               	bsf	31,3	;volatile
  4034  035C  019C               	clrf	28	;volatile
  4035  035D  300C               	movlw	12
  4036  035E  009B               	movwf	27	;volatile
  4037                           
  4038                           ;USART1823.c: 88:     SYNC = 0;
  4039  035F  121E               	bcf	30,4	;volatile
  4040                           
  4041                           ;USART1823.c: 89:     SPEN = 1;
  4042  0360  179D               	bsf	29,7	;volatile
  4043                           
  4044                           ;USART1823.c: 90:     CREN = 1;
  4045  0361  161D               	bsf	29,4	;volatile
  4046                           
  4047                           ;USART1823.c: 92:     USART_rx_flag = 0;
  4048  0362  0020               	movlb	0	; select bank0
  4049  0363  01BB               	clrf	_USART_rx_flag	;volatile
  4050                           
  4051                           ;USART1823.c: 93:     USART_rx_index = 0;
  4052  0364  01BD               	clrf	_USART_rx_index	;volatile
  4053                           
  4054                           ;USART1823.c: 95:     RCIE = 1;
  4055  0365  0021               	movlb	1	; select bank1
  4056  0366  1691               	bsf	17,5	;volatile
  4057                           
  4058                           ;USART1823.c: 96:     PEIE = 1;
  4059  0367  170B               	bsf	11,6	;volatile
  4060                           
  4061                           ;USART1823.c: 97:     GIE = 1;
  4062  0368  178B               	bsf	11,7	;volatile
  4063  0369  0008               	return
  4064  036A                     __end_ofi1_start_RX_USART_ISR:	
  4065                           
  4066                           	psect	text21
  4067  03C6                     __ptext21:	
  4068 ;; *************** function _stop_TMR0_ISR *****************
  4069 ;; Defined at:
  4070 ;;		line 44 in file "TMR0.c"
  4071 ;; Parameters:    Size  Location     Type
  4072 ;;		None
  4073 ;; Auto vars:     Size  Location     Type
  4074 ;;		None
  4075 ;; Return value:  Size  Location     Type
  4076 ;;                  1    wreg      void 
  4077 ;; Registers used:
  4078 ;;		None
  4079 ;; Tracked objects:
  4080 ;;		On entry : 0/0
  4081 ;;		On exit  : 0/0
  4082 ;;		Unchanged: 0/0
  4083 ;; Data sizes:     COMMON   BANK0   BANK1
  4084 ;;      Params:         0       0       0
  4085 ;;      Locals:         0       0       0
  4086 ;;      Temps:          0       0       0
  4087 ;;      Totals:         0       0       0
  4088 ;;Total ram usage:        0 bytes
  4089 ;; Hardware stack levels used:    1
  4090 ;; This function calls:
  4091 ;;		Nothing
  4092 ;; This function is called by:
  4093 ;;		_isr
  4094 ;; This function uses a non-reentrant model
  4095 ;;
  4096                           
  4097                           
  4098                           ;psect for function _stop_TMR0_ISR
  4099  03C6                     _stop_TMR0_ISR:	
  4100                           
  4101                           ;TMR0.c: 47:     TMR0IE = 0;
  4102                           
  4103                           ;incstack = 0
  4104                           ; Regs used in _stop_TMR0_ISR: []
  4105  03C6  128B               	bcf	11,5	;volatile
  4106                           
  4107                           ;TMR0.c: 48:     TMR0IF = 0;
  4108  03C7  110B               	bcf	11,2	;volatile
  4109  03C8  0008               	return
  4110  03C9                     __end_of_stop_TMR0_ISR:	
  4111                           
  4112                           	psect	text22
  4113  036A                     __ptext22:	
  4114 ;; *************** function _start_TMR0_ISR *****************
  4115 ;; Defined at:
  4116 ;;		line 30 in file "TMR0.c"
  4117 ;; Parameters:    Size  Location     Type
  4118 ;;  val             1    wreg     unsigned char 
  4119 ;; Auto vars:     Size  Location     Type
  4120 ;;  val             1    2[COMMON] unsigned char 
  4121 ;; Return value:  Size  Location     Type
  4122 ;;                  1    wreg      void 
  4123 ;; Registers used:
  4124 ;;		wreg, status,2
  4125 ;; Tracked objects:
  4126 ;;		On entry : 0/0
  4127 ;;		On exit  : 0/0
  4128 ;;		Unchanged: 0/0
  4129 ;; Data sizes:     COMMON   BANK0   BANK1
  4130 ;;      Params:         0       0       0
  4131 ;;      Locals:         1       0       0
  4132 ;;      Temps:          2       0       0
  4133 ;;      Totals:         3       0       0
  4134 ;;Total ram usage:        3 bytes
  4135 ;; Hardware stack levels used:    1
  4136 ;; This function calls:
  4137 ;;		Nothing
  4138 ;; This function is called by:
  4139 ;;		_isr
  4140 ;; This function uses a non-reentrant model
  4141 ;;
  4142                           
  4143                           
  4144                           ;psect for function _start_TMR0_ISR
  4145  036A                     _start_TMR0_ISR:	
  4146                           
  4147                           ;incstack = 0
  4148                           ; Regs used in _start_TMR0_ISR: [wreg+status,2]
  4149                           ;start_TMR0_ISR@val stored from wreg
  4150  036A  00F2               	movwf	start_TMR0_ISR@val
  4151                           
  4152                           ;TMR0.c: 30: void start_TMR0_ISR(unsigned char val);TMR0.c: 31: {;TMR0.c: 32:     TIMER0
      +                          _timeout = val;
  4153  036B  0872               	movf	start_TMR0_ISR@val,w
  4154  036C  00F0               	movwf	??_start_TMR0_ISR
  4155  036D  01F1               	clrf	??_start_TMR0_ISR+1
  4156  036E  0870               	movf	??_start_TMR0_ISR,w
  4157  036F  0020               	movlb	0	; select bank0
  4158  0370  00B9               	movwf	_TIMER0_timeout	;volatile
  4159  0371  0871               	movf	??_start_TMR0_ISR+1,w
  4160  0372  00BA               	movwf	_TIMER0_timeout+1	;volatile
  4161                           
  4162                           ;TMR0.c: 33:     TIMER0_flag = 0;
  4163  0373  01BE               	clrf	_TIMER0_flag	;volatile
  4164                           
  4165                           ;TMR0.c: 36:     TMR0 = TIMER0_timeout;
  4166  0374  0839               	movf	_TIMER0_timeout,w	;volatile
  4167  0375  0095               	movwf	21	;volatile
  4168                           
  4169                           ;TMR0.c: 39:     TMR0IF = 0;
  4170  0376  110B               	bcf	11,2	;volatile
  4171                           
  4172                           ;TMR0.c: 40:     TMR0IE = 1;
  4173  0377  168B               	bsf	11,5	;volatile
  4174                           
  4175                           ;TMR0.c: 41:     GIE = 1;
  4176  0378  178B               	bsf	11,7	;volatile
  4177  0379  0008               	return
  4178  037A                     __end_of_start_TMR0_ISR:	
  4179  007E                     btemp	set	126	;btemp
  4180  007E                     int$flags	set	126
  4181  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    63
    Data        0
    BSS         44
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      10
    BANK0            80     23      64
    BANK1            32     19      19

Pointer List with Targets:

    measure@Q	PTR short  size(1) Largest target is 2
		 -> sweep@Q(BANK1[2]), 

    measure@I	PTR short  size(1) Largest target is 2
		 -> sweep@I(BANK1[2]), 

    calculate_checksum@data	PTR unsigned char  size(1) Largest target is 10
		 -> sweep@aux(BANK1[7]), measure_Impedance_SE@aux(COMMON[8]), mess_rec(BANK0[10]), 

    lputs_ISR@data	PTR unsigned char  size(1) Largest target is 13
		 -> sweep@aux(BANK1[7]), calibrate_reader@aux(COMMON[8]), measure_Impedance_SE@aux(COMMON[8]), measure_Offset@aux(COMMON[5]), 
		 -> measure_Impedance_no_offset@aux(COMMON[13]), measure_Impedance@aux(COMMON[13]), read_ADC_channels@aux(COMMON[7]), mess_rec(BANK0[10]), 

    setFreq@asic	PTR struct . size(1) Largest target is 2
		 -> sweep@asic(BANK1[2]), 

    setGain@asic	PTR struct . size(1) Largest target is 2
		 -> sweep@asic(BANK1[2]), 


Critical Paths under _main in COMMON

    _sweep->_calculate_checksum
    _sweep->_lputs_ISR
    _measure->_config

Critical Paths under _isr in COMMON

    _isr->_start_TMR0_ISR

Critical Paths under _main in BANK0

    _main->_sweep
    _sweep->_measure
    _measure->_ADC_5

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sweep

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    6989
                                             22 BANK0      1     1      0
                  _SYSTEM_Initialize
                  _USARTX_change_pol
                          _setup_ADC
                         _setup_TMR0
                          _start_RCM
                 _start_RX_USART_ISR
                 _start_TX_USART_ISR
                              _sweep
 ---------------------------------------------------------------------------------
 (1) _sweep                                               21    21      0    6989
                                             20 BANK0      2     2      0
                                              0 BANK1     19    19      0
                 _calculate_checksum
                          _lputs_ISR
                            _measure
                            _setFreq
                            _setGain
 ---------------------------------------------------------------------------------
 (2) _setGain                                              4     3      1     846
                                              4 COMMON     2     1      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setFreq                                              4     3      1     408
                                              4 COMMON     2     1      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _measure                                             16    13      3    2416
                                              4 BANK0     16    13      3
                              _ADC_5
                             _config
 ---------------------------------------------------------------------------------
 (3) _config                                               5     3      2    1442
                                              4 COMMON     3     1      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_5                                                6     4      2      40
                                              4 COMMON     2     0      2
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _lputs_ISR                                            5     4      1    1452
                                              4 COMMON     3     2      1
                                              0 BANK0      2     2      0
                     _close_RX_USART
 ---------------------------------------------------------------------------------
 (3) _close_RX_USART                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _calculate_checksum                                   6     5      1     545
                                              4 COMMON     3     2      1
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _start_TX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RCM                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_TMR0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_ADC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _USARTX_change_pol                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  1     1      0      22
                                              3 COMMON     1     1      0
                     _start_TMR0_ISR
                      _stop_TMR0_ISR
               i1_start_RX_USART_ISR
 ---------------------------------------------------------------------------------
 (5) i1_start_RX_USART_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _stop_TMR0_ISR                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _start_TMR0_ISR                                       3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _USARTX_change_pol
   _setup_ADC
   _setup_TMR0
   _start_RCM
   _start_RX_USART_ISR
   _start_TX_USART_ISR
   _sweep
     _calculate_checksum
     _lputs_ISR
       _close_RX_USART
     _measure
       _ADC_5
       _config
     _setFreq
     _setGain

 _isr (ROOT)
   _start_TMR0_ISR
   _stop_TMR0_ISR
   i1_start_RX_USART_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      5D       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     17      40       6       80.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20     13      13       8       59.4%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      5D       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Mon Jul 23 10:43:10 2018

                    __CFG_CP$OFF 0000                    _USART_rx_data 002F                    _USART_rx_flag 003B  
                  _USART_tx_data 0020                    _USART_tx_flag 0077                              l121 028A  
                            l416 01BF                              l450 02F9                              _GIE 005F  
                            _RA5 0065                              _PS0 04A8                              _PS1 04A9  
                            _PS2 04AA                     __CFG_CPD$OFF 0000                              _PSA 04AB  
                            _isr 0004                     __CFG_BORV$HI 0000                              wreg 0009  
                   __CFG_IESO$ON 0000                   _USART_rx_index 003D                     __CFG_LVP$OFF 0000  
                 _USART_tx_index 0079                             l2524 02A6                             l2604 01DB  
                           l2542 031A                             l2526 02BD                             l2544 032D  
                           l2456 022F                             l2704 0296                             l2458 0233  
                           l2572 0177                             l2660 00CA                             l2644 00AC  
                           l2628 0080                             l2658 00C6                             l2588 01AE  
                           l2598 01CD                             ?_isr 0070                             _ADGO 04E9  
                   __CFG_WDTE$ON 0000                             _BRGH 0CF2                             _CREN 0CEC  
                           u1055 0236                             u1085 0304                             _LATA 010C  
                           u1255 01B8                             _LATC 010E                             u1265 01C9  
                           u1275 01D7                             u1427 0283                             u1437 0134  
                           u1365 00CF                             u1447 014A                             u1457 0181  
                           _PEIE 005E                             _RCIE 048D                             _RCIF 008D  
                           _OERR 0CE9                             _SCKP 0CFC                             _TMR0 0015  
                           _SPEN 0CEF                             _TXIE 048C                             _TXEN 0CF5  
                           _TXIF 008C                             _SYNC 0CF4                             _WPUA 020C  
                           _WPUC 020E           __size_of_stop_TMR0_ISR 0003                     __CFG_WRT$OFF 0000  
                           _filt 024A                             _main 0276                             fsr0h 0005  
                           fsr1h 0007                             indf0 0000                             fsr0l 0004  
                           indf1 0001                             fsr1l 0006                             btemp 007E  
    __size_of_calculate_checksum 0019                             start 0052                    __CFG_MCLRE$ON 0000  
                          ??_isr 0073   __size_of_OSCILLATOR_Initialize 0006                  _USART_tx_length 0078  
  __end_of_OSCILLATOR_Initialize 03BC                            ?_main 0070                            _ADC_5 02F3  
                          _BRG16 0CFB                            i1l132 0013                            i1l133 0050  
                          i1l134 0035                            _RCREG 0199                            _PORTC 000E  
                          _TRISA 008C                   _start_TMR0_ISR 036A                            _TRISC 008E  
                          _TXREG 019A                   __CFG_FCMEN$OFF 0000                            _gains 0394  
                __end_of_measure 01DD                            _freqs 0389                  __end_of_setGain 021B  
                          _sweep 005F                  __end_of_setFreq 02F3    __size_ofi1_start_RX_USART_ISR 0011  
                 __CFG_BOREN$OFF 0000                            status 0003                            wtemp0 007E  
                __initialization 0053                     __end_of_filt 0276                     __end_of_main 02A0  
                  _stop_TMR0_ISR 03C6                 ??_close_RX_USART 0074           __end_of_start_TMR0_ISR 037A  
                         ??_main 005F                           ?_ADC_5 0074                   _TIMER0_timeout 0039  
                 __CFG_PLLEN$OFF 0000                           _ADCON0 009D                           _ADCON1 009E  
                    measure@aux1 005B                      measure@aux2 0059                      measure@asic 004E  
                         _ADRESH 009C                           _ADRESL 009B                           _APFCON 011D  
                         _ANSELA 018C                           _ANSELC 018E                           ?_sweep 0070  
                         i1l2140 001F                           u146_27 004D                           _OSCCON 0099  
                         _TMR0IE 005D                           _TMR0IF 005A                           _TMR0CS 04AD  
                         _SPBRGH 019C                           _SPBRGL 019B                   __CFG_PWRTE$OFF 0000  
                 __CFG_STVREN$ON 0000                   ?_stop_TMR0_ISR 0070                           _config 021B  
                ?_start_TMR0_ISR 0070                        ??_measure 0050      __size_of_start_RX_USART_ISR 0011  
                      ??_setGain 0075                        ??_setFreq 0075                           sweep@I 00AB  
                         sweep@Q 00AD                           sweep@i 00A9                _SYSTEM_Initialize 03C3  
        __end_of__initialization 005C               ?_SYSTEM_Initialize 0070                    __end_of_ADC_5 0316  
                 __pcstackCOMMON 0070              ??_SYSTEM_Initialize 0074                    __end_of_gains 039C  
                  __end_of_freqs 0394                    __end_of_sweep 0128                          ??_ADC_5 0049  
                 _OPTION_REGbits 0095      __size_of_start_TX_USART_ISR 000F                      setGain@asic 004A  
      __end_of_SYSTEM_Initialize 03C6                          ??_sweep 005D                       __pbssBANK0 0020  
                    setFreq@asic 0049                       __pmaintext 0276                  ??_stop_TMR0_ISR 0070  
                     __pintentry 0004                          ?_config 0074                     measure@value 0057  
                        _CLKRCON 039A               __size_of_lputs_ISR 002A                  lputs_ISR@length 0074  
              setFreq@freq_index 0074               __size_of_setup_ADC 0006                          _OSCSTAT 009A  
                        _OSCTUNE 0098               __size_of_start_RCM 0004                          _RXDTSEL 08EF  
                        _TXCKSEL 08EA       __end_of_calculate_checksum 032F     __end_ofi1_start_RX_USART_ISR 036A  
                __size_of_config 002F                          __ptext1 005F                          __ptext2 01DD  
                        __ptext3 02CA                          __ptext4 0128                          __ptext5 021B  
                        __ptext6 02F3                          __ptext7 02A0                          __ptext8 039C  
                        __ptext9 0316                          _measure 0128            _OSCILLATOR_Initialize 03B6  
                   __size_of_isr 004E                          _setGain 01DD                          _setFreq 02CA  
       ??_PIN_MANAGER_Initialize 0074                          config@i 0049                setGain@gain_index 0074  
     __size_of_SYSTEM_Initialize 0003                          clrloop0 03AB                    _mess_rec_size 003C  
           end_of_initialization 005C                __end_of_lputs_ISR 02CA                __end_of_setup_ADC 03B6  
               ??_start_TMR0_ISR 0070                __end_of_start_RCM 03C0                       _setup_TMR0 03A3  
               __CFG_FOSC$INTOSC 0000                       config@conf 0074                   __end_of_config 024A  
     __end_of_start_RX_USART_ISR 0359           ?_OSCILLATOR_Initialize 0070              start_initialization 0053  
__size_of_PIN_MANAGER_Initialize 0019                      __end_of_isr 0052          __size_of_close_RX_USART 0007  
              _USARTX_change_pol 03C0             i1_start_RX_USART_ISR 0359               ?_USARTX_change_pol 0070  
            ??_USARTX_change_pol 0074                   ADC_5@ADC_value 004B                         ??_config 0076  
                    ?_setup_TMR0 0070       __end_of_start_TX_USART_ISR 0389                      __pbssCOMMON 0077  
                      ___latbits 0000                    __pcstackBANK0 0049                    __pcstackBANK1 00A0  
      __end_of_USARTX_change_pol 03C3                  sweep@gain_index 00AF            ?i1_start_RX_USART_ISR 0070  
                     setGain@aux 0049           _PIN_MANAGER_Initialize 032F                       setFreq@aux 004A  
          __end_of_stop_TMR0_ISR 03C9               _calculate_checksum 0316                   __size_of_ADC_5 0023  
            ?_calculate_checksum 0074                         ?_measure 004D                         ?_setGain 0074  
                       ?_setFreq 0074                    measure@offset 0054                  sweep@freq_index 00A8  
                 __size_of_sweep 00C9              __size_of_setup_TMR0 0007             ??_calculate_checksum 0075  
                      clear_ram0 03AA                       lputs_ISR@i 0049                        _lputs_ISR 02A0  
                      _setup_ADC 03B0                        _start_RCM 03BC                        config@out 004A  
     __size_of_USARTX_change_pol 0003           ??i1_start_RX_USART_ISR 0070                   _close_RX_USART 039C  
                     sweep@check 00A0                       sweep@count 00AA                       ?_lputs_ISR 0074  
        calculate_checksum@check 0049                       ?_setup_ADC 0070          ??_OSCILLATOR_Initialize 0074  
              start_TMR0_ISR@val 0072                       ?_start_RCM 0070           __end_of_close_RX_USART 03A3  
               __size_of_measure 00B5                 __size_of_setGain 003E                 __size_of_setFreq 0029  
                       __ptext10 037A                         __ptext11 0348                         __ptext20 0359  
                       __ptext12 03BC                         __ptext21 03C6                         __ptext13 03A3  
                       __ptext22 036A                         __ptext14 03B0                         __ptext15 03C0  
                       __ptext16 03C3                         __ptext17 032F                         __ptext18 03B6  
                  lputs_ISR@data 004A               _start_RX_USART_ISR 0348                    __size_of_main 002A  
                       _mess_rec 003F              ?_start_RX_USART_ISR 0070                         int$flags 007E  
                   ??_setup_TMR0 0074                      _TIMER0_flag 003E             ??_start_RX_USART_ISR 0074  
                       measure@I 0056          __size_of_start_TMR0_ISR 0010                         measure@Q 004D  
                ?_close_RX_USART 0070                        sweep@asic 00B1           calculate_checksum@data 004A  
                       intlevel1 0000               _start_TX_USART_ISR 037A          ?_PIN_MANAGER_Initialize 0070  
              __CFG_CLKOUTEN$OFF 0000               __end_of_setup_TMR0 03AA              ?_start_TX_USART_ISR 0070  
                    ??_lputs_ISR 0075                      ??_setup_ADC 0074                         sweep@aux 00A1  
                       sweep@ret 00B0                    __pstringtext1 024A                    __pstringtext2 0389  
                  __pstringtext3 0394            calculate_checksum@num 0074                      ??_start_RCM 0074  
           ??_start_TX_USART_ISR 0074   __end_of_PIN_MANAGER_Initialize 0348              calculate_checksum@i 004B  
