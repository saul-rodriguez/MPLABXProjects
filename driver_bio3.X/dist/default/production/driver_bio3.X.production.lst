

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Mar  3 15:42:38 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16LF1823
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	psect	text17,local,class=CODE,merge=1,delta=2
    28                           	psect	text18,local,class=CODE,merge=1,delta=2
    29                           	psect	text19,local,class=CODE,merge=1,delta=2
    30                           	psect	text20,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	text22,local,class=CODE,merge=1,delta=2
    33                           	psect	text23,local,class=CODE,merge=1,delta=2
    34                           	psect	text24,local,class=CODE,merge=1,delta=2
    35                           	dabs	1,0x7E,2
    36  0000                     
    37                           ; Version 1.40
    38                           ; Generated 01/12/2016 GMT
    39                           ; 
    40                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC16LF1823 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     	;# 
    72  0001                     	;# 
    73  0002                     	;# 
    74  0003                     	;# 
    75  0004                     	;# 
    76  0005                     	;# 
    77  0006                     	;# 
    78  0007                     	;# 
    79  0008                     	;# 
    80  0009                     	;# 
    81  000A                     	;# 
    82  000B                     	;# 
    83  000C                     	;# 
    84  000E                     	;# 
    85  0011                     	;# 
    86  0012                     	;# 
    87  0015                     	;# 
    88  0016                     	;# 
    89  0016                     	;# 
    90  0017                     	;# 
    91  0018                     	;# 
    92  0019                     	;# 
    93  001A                     	;# 
    94  001B                     	;# 
    95  001C                     	;# 
    96  001E                     	;# 
    97  001F                     	;# 
    98  008C                     	;# 
    99  008E                     	;# 
   100  0091                     	;# 
   101  0092                     	;# 
   102  0095                     	;# 
   103  0096                     	;# 
   104  0097                     	;# 
   105  0098                     	;# 
   106  0099                     	;# 
   107  009A                     	;# 
   108  009B                     	;# 
   109  009B                     	;# 
   110  009C                     	;# 
   111  009D                     	;# 
   112  009E                     	;# 
   113  010C                     	;# 
   114  010E                     	;# 
   115  0111                     	;# 
   116  0112                     	;# 
   117  0113                     	;# 
   118  0114                     	;# 
   119  0115                     	;# 
   120  0116                     	;# 
   121  0117                     	;# 
   122  0118                     	;# 
   123  0119                     	;# 
   124  011A                     	;# 
   125  011B                     	;# 
   126  011D                     	;# 
   127  011D                     	;# 
   128  018C                     	;# 
   129  018E                     	;# 
   130  0191                     	;# 
   131  0191                     	;# 
   132  0192                     	;# 
   133  0193                     	;# 
   134  0193                     	;# 
   135  0193                     	;# 
   136  0194                     	;# 
   137  0195                     	;# 
   138  0196                     	;# 
   139  0199                     	;# 
   140  019A                     	;# 
   141  019B                     	;# 
   142  019B                     	;# 
   143  019B                     	;# 
   144  019B                     	;# 
   145  019C                     	;# 
   146  019C                     	;# 
   147  019D                     	;# 
   148  019E                     	;# 
   149  019F                     	;# 
   150  020C                     	;# 
   151  020E                     	;# 
   152  0211                     	;# 
   153  0211                     	;# 
   154  0212                     	;# 
   155  0212                     	;# 
   156  0213                     	;# 
   157  0213                     	;# 
   158  0214                     	;# 
   159  0214                     	;# 
   160  0215                     	;# 
   161  0215                     	;# 
   162  0215                     	;# 
   163  0216                     	;# 
   164  0216                     	;# 
   165  0217                     	;# 
   166  0217                     	;# 
   167  0291                     	;# 
   168  0291                     	;# 
   169  0292                     	;# 
   170  0293                     	;# 
   171  0294                     	;# 
   172  0295                     	;# 
   173  0295                     	;# 
   174  0296                     	;# 
   175  0391                     	;# 
   176  0392                     	;# 
   177  0393                     	;# 
   178  039A                     	;# 
   179  039C                     	;# 
   180  039D                     	;# 
   181  039E                     	;# 
   182  039F                     	;# 
   183  0FE4                     	;# 
   184  0FE5                     	;# 
   185  0FE6                     	;# 
   186  0FE7                     	;# 
   187  0FE8                     	;# 
   188  0FE9                     	;# 
   189  0FEA                     	;# 
   190  0FEB                     	;# 
   191  0FED                     	;# 
   192  0FEE                     	;# 
   193  0FEF                     	;# 
   194  0000                     	;# 
   195  0001                     	;# 
   196  0002                     	;# 
   197  0003                     	;# 
   198  0004                     	;# 
   199  0005                     	;# 
   200  0006                     	;# 
   201  0007                     	;# 
   202  0008                     	;# 
   203  0009                     	;# 
   204  000A                     	;# 
   205  000B                     	;# 
   206  000C                     	;# 
   207  000E                     	;# 
   208  0011                     	;# 
   209  0012                     	;# 
   210  0015                     	;# 
   211  0016                     	;# 
   212  0016                     	;# 
   213  0017                     	;# 
   214  0018                     	;# 
   215  0019                     	;# 
   216  001A                     	;# 
   217  001B                     	;# 
   218  001C                     	;# 
   219  001E                     	;# 
   220  001F                     	;# 
   221  008C                     	;# 
   222  008E                     	;# 
   223  0091                     	;# 
   224  0092                     	;# 
   225  0095                     	;# 
   226  0096                     	;# 
   227  0097                     	;# 
   228  0098                     	;# 
   229  0099                     	;# 
   230  009A                     	;# 
   231  009B                     	;# 
   232  009B                     	;# 
   233  009C                     	;# 
   234  009D                     	;# 
   235  009E                     	;# 
   236  010C                     	;# 
   237  010E                     	;# 
   238  0111                     	;# 
   239  0112                     	;# 
   240  0113                     	;# 
   241  0114                     	;# 
   242  0115                     	;# 
   243  0116                     	;# 
   244  0117                     	;# 
   245  0118                     	;# 
   246  0119                     	;# 
   247  011A                     	;# 
   248  011B                     	;# 
   249  011D                     	;# 
   250  011D                     	;# 
   251  018C                     	;# 
   252  018E                     	;# 
   253  0191                     	;# 
   254  0191                     	;# 
   255  0192                     	;# 
   256  0193                     	;# 
   257  0193                     	;# 
   258  0193                     	;# 
   259  0194                     	;# 
   260  0195                     	;# 
   261  0196                     	;# 
   262  0199                     	;# 
   263  019A                     	;# 
   264  019B                     	;# 
   265  019B                     	;# 
   266  019B                     	;# 
   267  019B                     	;# 
   268  019C                     	;# 
   269  019C                     	;# 
   270  019D                     	;# 
   271  019E                     	;# 
   272  019F                     	;# 
   273  020C                     	;# 
   274  020E                     	;# 
   275  0211                     	;# 
   276  0211                     	;# 
   277  0212                     	;# 
   278  0212                     	;# 
   279  0213                     	;# 
   280  0213                     	;# 
   281  0214                     	;# 
   282  0214                     	;# 
   283  0215                     	;# 
   284  0215                     	;# 
   285  0215                     	;# 
   286  0216                     	;# 
   287  0216                     	;# 
   288  0217                     	;# 
   289  0217                     	;# 
   290  0291                     	;# 
   291  0291                     	;# 
   292  0292                     	;# 
   293  0293                     	;# 
   294  0294                     	;# 
   295  0295                     	;# 
   296  0295                     	;# 
   297  0296                     	;# 
   298  0391                     	;# 
   299  0392                     	;# 
   300  0393                     	;# 
   301  039A                     	;# 
   302  039C                     	;# 
   303  039D                     	;# 
   304  039E                     	;# 
   305  039F                     	;# 
   306  0FE4                     	;# 
   307  0FE5                     	;# 
   308  0FE6                     	;# 
   309  0FE7                     	;# 
   310  0FE8                     	;# 
   311  0FE9                     	;# 
   312  0FEA                     	;# 
   313  0FEB                     	;# 
   314  0FED                     	;# 
   315  0FEE                     	;# 
   316  0FEF                     	;# 
   317  0000                     	;# 
   318  0001                     	;# 
   319  0002                     	;# 
   320  0003                     	;# 
   321  0004                     	;# 
   322  0005                     	;# 
   323  0006                     	;# 
   324  0007                     	;# 
   325  0008                     	;# 
   326  0009                     	;# 
   327  000A                     	;# 
   328  000B                     	;# 
   329  000C                     	;# 
   330  000E                     	;# 
   331  0011                     	;# 
   332  0012                     	;# 
   333  0015                     	;# 
   334  0016                     	;# 
   335  0016                     	;# 
   336  0017                     	;# 
   337  0018                     	;# 
   338  0019                     	;# 
   339  001A                     	;# 
   340  001B                     	;# 
   341  001C                     	;# 
   342  001E                     	;# 
   343  001F                     	;# 
   344  008C                     	;# 
   345  008E                     	;# 
   346  0091                     	;# 
   347  0092                     	;# 
   348  0095                     	;# 
   349  0096                     	;# 
   350  0097                     	;# 
   351  0098                     	;# 
   352  0099                     	;# 
   353  009A                     	;# 
   354  009B                     	;# 
   355  009B                     	;# 
   356  009C                     	;# 
   357  009D                     	;# 
   358  009E                     	;# 
   359  010C                     	;# 
   360  010E                     	;# 
   361  0111                     	;# 
   362  0112                     	;# 
   363  0113                     	;# 
   364  0114                     	;# 
   365  0115                     	;# 
   366  0116                     	;# 
   367  0117                     	;# 
   368  0118                     	;# 
   369  0119                     	;# 
   370  011A                     	;# 
   371  011B                     	;# 
   372  011D                     	;# 
   373  011D                     	;# 
   374  018C                     	;# 
   375  018E                     	;# 
   376  0191                     	;# 
   377  0191                     	;# 
   378  0192                     	;# 
   379  0193                     	;# 
   380  0193                     	;# 
   381  0193                     	;# 
   382  0194                     	;# 
   383  0195                     	;# 
   384  0196                     	;# 
   385  0199                     	;# 
   386  019A                     	;# 
   387  019B                     	;# 
   388  019B                     	;# 
   389  019B                     	;# 
   390  019B                     	;# 
   391  019C                     	;# 
   392  019C                     	;# 
   393  019D                     	;# 
   394  019E                     	;# 
   395  019F                     	;# 
   396  020C                     	;# 
   397  020E                     	;# 
   398  0211                     	;# 
   399  0211                     	;# 
   400  0212                     	;# 
   401  0212                     	;# 
   402  0213                     	;# 
   403  0213                     	;# 
   404  0214                     	;# 
   405  0214                     	;# 
   406  0215                     	;# 
   407  0215                     	;# 
   408  0215                     	;# 
   409  0216                     	;# 
   410  0216                     	;# 
   411  0217                     	;# 
   412  0217                     	;# 
   413  0291                     	;# 
   414  0291                     	;# 
   415  0292                     	;# 
   416  0293                     	;# 
   417  0294                     	;# 
   418  0295                     	;# 
   419  0295                     	;# 
   420  0296                     	;# 
   421  0391                     	;# 
   422  0392                     	;# 
   423  0393                     	;# 
   424  039A                     	;# 
   425  039C                     	;# 
   426  039D                     	;# 
   427  039E                     	;# 
   428  039F                     	;# 
   429  0FE4                     	;# 
   430  0FE5                     	;# 
   431  0FE6                     	;# 
   432  0FE7                     	;# 
   433  0FE8                     	;# 
   434  0FE9                     	;# 
   435  0FEA                     	;# 
   436  0FEB                     	;# 
   437  0FED                     	;# 
   438  0FEE                     	;# 
   439  0FEF                     	;# 
   440  0000                     	;# 
   441  0001                     	;# 
   442  0002                     	;# 
   443  0003                     	;# 
   444  0004                     	;# 
   445  0005                     	;# 
   446  0006                     	;# 
   447  0007                     	;# 
   448  0008                     	;# 
   449  0009                     	;# 
   450  000A                     	;# 
   451  000B                     	;# 
   452  000C                     	;# 
   453  000E                     	;# 
   454  0011                     	;# 
   455  0012                     	;# 
   456  0015                     	;# 
   457  0016                     	;# 
   458  0016                     	;# 
   459  0017                     	;# 
   460  0018                     	;# 
   461  0019                     	;# 
   462  001A                     	;# 
   463  001B                     	;# 
   464  001C                     	;# 
   465  001E                     	;# 
   466  001F                     	;# 
   467  008C                     	;# 
   468  008E                     	;# 
   469  0091                     	;# 
   470  0092                     	;# 
   471  0095                     	;# 
   472  0096                     	;# 
   473  0097                     	;# 
   474  0098                     	;# 
   475  0099                     	;# 
   476  009A                     	;# 
   477  009B                     	;# 
   478  009B                     	;# 
   479  009C                     	;# 
   480  009D                     	;# 
   481  009E                     	;# 
   482  010C                     	;# 
   483  010E                     	;# 
   484  0111                     	;# 
   485  0112                     	;# 
   486  0113                     	;# 
   487  0114                     	;# 
   488  0115                     	;# 
   489  0116                     	;# 
   490  0117                     	;# 
   491  0118                     	;# 
   492  0119                     	;# 
   493  011A                     	;# 
   494  011B                     	;# 
   495  011D                     	;# 
   496  011D                     	;# 
   497  018C                     	;# 
   498  018E                     	;# 
   499  0191                     	;# 
   500  0191                     	;# 
   501  0192                     	;# 
   502  0193                     	;# 
   503  0193                     	;# 
   504  0193                     	;# 
   505  0194                     	;# 
   506  0195                     	;# 
   507  0196                     	;# 
   508  0199                     	;# 
   509  019A                     	;# 
   510  019B                     	;# 
   511  019B                     	;# 
   512  019B                     	;# 
   513  019B                     	;# 
   514  019C                     	;# 
   515  019C                     	;# 
   516  019D                     	;# 
   517  019E                     	;# 
   518  019F                     	;# 
   519  020C                     	;# 
   520  020E                     	;# 
   521  0211                     	;# 
   522  0211                     	;# 
   523  0212                     	;# 
   524  0212                     	;# 
   525  0213                     	;# 
   526  0213                     	;# 
   527  0214                     	;# 
   528  0214                     	;# 
   529  0215                     	;# 
   530  0215                     	;# 
   531  0215                     	;# 
   532  0216                     	;# 
   533  0216                     	;# 
   534  0217                     	;# 
   535  0217                     	;# 
   536  0291                     	;# 
   537  0291                     	;# 
   538  0292                     	;# 
   539  0293                     	;# 
   540  0294                     	;# 
   541  0295                     	;# 
   542  0295                     	;# 
   543  0296                     	;# 
   544  0391                     	;# 
   545  0392                     	;# 
   546  0393                     	;# 
   547  039A                     	;# 
   548  039C                     	;# 
   549  039D                     	;# 
   550  039E                     	;# 
   551  039F                     	;# 
   552  0FE4                     	;# 
   553  0FE5                     	;# 
   554  0FE6                     	;# 
   555  0FE7                     	;# 
   556  0FE8                     	;# 
   557  0FE9                     	;# 
   558  0FEA                     	;# 
   559  0FEB                     	;# 
   560  0FED                     	;# 
   561  0FEE                     	;# 
   562  0FEF                     	;# 
   563  0000                     	;# 
   564  0001                     	;# 
   565  0002                     	;# 
   566  0003                     	;# 
   567  0004                     	;# 
   568  0005                     	;# 
   569  0006                     	;# 
   570  0007                     	;# 
   571  0008                     	;# 
   572  0009                     	;# 
   573  000A                     	;# 
   574  000B                     	;# 
   575  000C                     	;# 
   576  000E                     	;# 
   577  0011                     	;# 
   578  0012                     	;# 
   579  0015                     	;# 
   580  0016                     	;# 
   581  0016                     	;# 
   582  0017                     	;# 
   583  0018                     	;# 
   584  0019                     	;# 
   585  001A                     	;# 
   586  001B                     	;# 
   587  001C                     	;# 
   588  001E                     	;# 
   589  001F                     	;# 
   590  008C                     	;# 
   591  008E                     	;# 
   592  0091                     	;# 
   593  0092                     	;# 
   594  0095                     	;# 
   595  0096                     	;# 
   596  0097                     	;# 
   597  0098                     	;# 
   598  0099                     	;# 
   599  009A                     	;# 
   600  009B                     	;# 
   601  009B                     	;# 
   602  009C                     	;# 
   603  009D                     	;# 
   604  009E                     	;# 
   605  010C                     	;# 
   606  010E                     	;# 
   607  0111                     	;# 
   608  0112                     	;# 
   609  0113                     	;# 
   610  0114                     	;# 
   611  0115                     	;# 
   612  0116                     	;# 
   613  0117                     	;# 
   614  0118                     	;# 
   615  0119                     	;# 
   616  011A                     	;# 
   617  011B                     	;# 
   618  011D                     	;# 
   619  011D                     	;# 
   620  018C                     	;# 
   621  018E                     	;# 
   622  0191                     	;# 
   623  0191                     	;# 
   624  0192                     	;# 
   625  0193                     	;# 
   626  0193                     	;# 
   627  0193                     	;# 
   628  0194                     	;# 
   629  0195                     	;# 
   630  0196                     	;# 
   631  0199                     	;# 
   632  019A                     	;# 
   633  019B                     	;# 
   634  019B                     	;# 
   635  019B                     	;# 
   636  019B                     	;# 
   637  019C                     	;# 
   638  019C                     	;# 
   639  019D                     	;# 
   640  019E                     	;# 
   641  019F                     	;# 
   642  020C                     	;# 
   643  020E                     	;# 
   644  0211                     	;# 
   645  0211                     	;# 
   646  0212                     	;# 
   647  0212                     	;# 
   648  0213                     	;# 
   649  0213                     	;# 
   650  0214                     	;# 
   651  0214                     	;# 
   652  0215                     	;# 
   653  0215                     	;# 
   654  0215                     	;# 
   655  0216                     	;# 
   656  0216                     	;# 
   657  0217                     	;# 
   658  0217                     	;# 
   659  0291                     	;# 
   660  0291                     	;# 
   661  0292                     	;# 
   662  0293                     	;# 
   663  0294                     	;# 
   664  0295                     	;# 
   665  0295                     	;# 
   666  0296                     	;# 
   667  0391                     	;# 
   668  0392                     	;# 
   669  0393                     	;# 
   670  039A                     	;# 
   671  039C                     	;# 
   672  039D                     	;# 
   673  039E                     	;# 
   674  039F                     	;# 
   675  0FE4                     	;# 
   676  0FE5                     	;# 
   677  0FE6                     	;# 
   678  0FE7                     	;# 
   679  0FE8                     	;# 
   680  0FE9                     	;# 
   681  0FEA                     	;# 
   682  0FEB                     	;# 
   683  0FED                     	;# 
   684  0FEE                     	;# 
   685  0FEF                     	;# 
   686  0000                     	;# 
   687  0001                     	;# 
   688  0002                     	;# 
   689  0003                     	;# 
   690  0004                     	;# 
   691  0005                     	;# 
   692  0006                     	;# 
   693  0007                     	;# 
   694  0008                     	;# 
   695  0009                     	;# 
   696  000A                     	;# 
   697  000B                     	;# 
   698  000C                     	;# 
   699  000E                     	;# 
   700  0011                     	;# 
   701  0012                     	;# 
   702  0015                     	;# 
   703  0016                     	;# 
   704  0016                     	;# 
   705  0017                     	;# 
   706  0018                     	;# 
   707  0019                     	;# 
   708  001A                     	;# 
   709  001B                     	;# 
   710  001C                     	;# 
   711  001E                     	;# 
   712  001F                     	;# 
   713  008C                     	;# 
   714  008E                     	;# 
   715  0091                     	;# 
   716  0092                     	;# 
   717  0095                     	;# 
   718  0096                     	;# 
   719  0097                     	;# 
   720  0098                     	;# 
   721  0099                     	;# 
   722  009A                     	;# 
   723  009B                     	;# 
   724  009B                     	;# 
   725  009C                     	;# 
   726  009D                     	;# 
   727  009E                     	;# 
   728  010C                     	;# 
   729  010E                     	;# 
   730  0111                     	;# 
   731  0112                     	;# 
   732  0113                     	;# 
   733  0114                     	;# 
   734  0115                     	;# 
   735  0116                     	;# 
   736  0117                     	;# 
   737  0118                     	;# 
   738  0119                     	;# 
   739  011A                     	;# 
   740  011B                     	;# 
   741  011D                     	;# 
   742  011D                     	;# 
   743  018C                     	;# 
   744  018E                     	;# 
   745  0191                     	;# 
   746  0191                     	;# 
   747  0192                     	;# 
   748  0193                     	;# 
   749  0193                     	;# 
   750  0193                     	;# 
   751  0194                     	;# 
   752  0195                     	;# 
   753  0196                     	;# 
   754  0199                     	;# 
   755  019A                     	;# 
   756  019B                     	;# 
   757  019B                     	;# 
   758  019B                     	;# 
   759  019B                     	;# 
   760  019C                     	;# 
   761  019C                     	;# 
   762  019D                     	;# 
   763  019E                     	;# 
   764  019F                     	;# 
   765  020C                     	;# 
   766  020E                     	;# 
   767  0211                     	;# 
   768  0211                     	;# 
   769  0212                     	;# 
   770  0212                     	;# 
   771  0213                     	;# 
   772  0213                     	;# 
   773  0214                     	;# 
   774  0214                     	;# 
   775  0215                     	;# 
   776  0215                     	;# 
   777  0215                     	;# 
   778  0216                     	;# 
   779  0216                     	;# 
   780  0217                     	;# 
   781  0217                     	;# 
   782  0291                     	;# 
   783  0291                     	;# 
   784  0292                     	;# 
   785  0293                     	;# 
   786  0294                     	;# 
   787  0295                     	;# 
   788  0295                     	;# 
   789  0296                     	;# 
   790  0391                     	;# 
   791  0392                     	;# 
   792  0393                     	;# 
   793  039A                     	;# 
   794  039C                     	;# 
   795  039D                     	;# 
   796  039E                     	;# 
   797  039F                     	;# 
   798  0FE4                     	;# 
   799  0FE5                     	;# 
   800  0FE6                     	;# 
   801  0FE7                     	;# 
   802  0FE8                     	;# 
   803  0FE9                     	;# 
   804  0FEA                     	;# 
   805  0FEB                     	;# 
   806  0FED                     	;# 
   807  0FEE                     	;# 
   808  0FEF                     	;# 
   809  0000                     	;# 
   810  0001                     	;# 
   811  0002                     	;# 
   812  0003                     	;# 
   813  0004                     	;# 
   814  0005                     	;# 
   815  0006                     	;# 
   816  0007                     	;# 
   817  0008                     	;# 
   818  0009                     	;# 
   819  000A                     	;# 
   820  000B                     	;# 
   821  000C                     	;# 
   822  000E                     	;# 
   823  0011                     	;# 
   824  0012                     	;# 
   825  0015                     	;# 
   826  0016                     	;# 
   827  0016                     	;# 
   828  0017                     	;# 
   829  0018                     	;# 
   830  0019                     	;# 
   831  001A                     	;# 
   832  001B                     	;# 
   833  001C                     	;# 
   834  001E                     	;# 
   835  001F                     	;# 
   836  008C                     	;# 
   837  008E                     	;# 
   838  0091                     	;# 
   839  0092                     	;# 
   840  0095                     	;# 
   841  0096                     	;# 
   842  0097                     	;# 
   843  0098                     	;# 
   844  0099                     	;# 
   845  009A                     	;# 
   846  009B                     	;# 
   847  009B                     	;# 
   848  009C                     	;# 
   849  009D                     	;# 
   850  009E                     	;# 
   851  010C                     	;# 
   852  010E                     	;# 
   853  0111                     	;# 
   854  0112                     	;# 
   855  0113                     	;# 
   856  0114                     	;# 
   857  0115                     	;# 
   858  0116                     	;# 
   859  0117                     	;# 
   860  0118                     	;# 
   861  0119                     	;# 
   862  011A                     	;# 
   863  011B                     	;# 
   864  011D                     	;# 
   865  011D                     	;# 
   866  018C                     	;# 
   867  018E                     	;# 
   868  0191                     	;# 
   869  0191                     	;# 
   870  0192                     	;# 
   871  0193                     	;# 
   872  0193                     	;# 
   873  0193                     	;# 
   874  0194                     	;# 
   875  0195                     	;# 
   876  0196                     	;# 
   877  0199                     	;# 
   878  019A                     	;# 
   879  019B                     	;# 
   880  019B                     	;# 
   881  019B                     	;# 
   882  019B                     	;# 
   883  019C                     	;# 
   884  019C                     	;# 
   885  019D                     	;# 
   886  019E                     	;# 
   887  019F                     	;# 
   888  020C                     	;# 
   889  020E                     	;# 
   890  0211                     	;# 
   891  0211                     	;# 
   892  0212                     	;# 
   893  0212                     	;# 
   894  0213                     	;# 
   895  0213                     	;# 
   896  0214                     	;# 
   897  0214                     	;# 
   898  0215                     	;# 
   899  0215                     	;# 
   900  0215                     	;# 
   901  0216                     	;# 
   902  0216                     	;# 
   903  0217                     	;# 
   904  0217                     	;# 
   905  0291                     	;# 
   906  0291                     	;# 
   907  0292                     	;# 
   908  0293                     	;# 
   909  0294                     	;# 
   910  0295                     	;# 
   911  0295                     	;# 
   912  0296                     	;# 
   913  0391                     	;# 
   914  0392                     	;# 
   915  0393                     	;# 
   916  039A                     	;# 
   917  039C                     	;# 
   918  039D                     	;# 
   919  039E                     	;# 
   920  039F                     	;# 
   921  0FE4                     	;# 
   922  0FE5                     	;# 
   923  0FE6                     	;# 
   924  0FE7                     	;# 
   925  0FE8                     	;# 
   926  0FE9                     	;# 
   927  0FEA                     	;# 
   928  0FEB                     	;# 
   929  0FED                     	;# 
   930  0FEE                     	;# 
   931  0FEF                     	;# 
   932  0000                     	;# 
   933  0001                     	;# 
   934  0002                     	;# 
   935  0003                     	;# 
   936  0004                     	;# 
   937  0005                     	;# 
   938  0006                     	;# 
   939  0007                     	;# 
   940  0008                     	;# 
   941  0009                     	;# 
   942  000A                     	;# 
   943  000B                     	;# 
   944  000C                     	;# 
   945  000E                     	;# 
   946  0011                     	;# 
   947  0012                     	;# 
   948  0015                     	;# 
   949  0016                     	;# 
   950  0016                     	;# 
   951  0017                     	;# 
   952  0018                     	;# 
   953  0019                     	;# 
   954  001A                     	;# 
   955  001B                     	;# 
   956  001C                     	;# 
   957  001E                     	;# 
   958  001F                     	;# 
   959  008C                     	;# 
   960  008E                     	;# 
   961  0091                     	;# 
   962  0092                     	;# 
   963  0095                     	;# 
   964  0096                     	;# 
   965  0097                     	;# 
   966  0098                     	;# 
   967  0099                     	;# 
   968  009A                     	;# 
   969  009B                     	;# 
   970  009B                     	;# 
   971  009C                     	;# 
   972  009D                     	;# 
   973  009E                     	;# 
   974  010C                     	;# 
   975  010E                     	;# 
   976  0111                     	;# 
   977  0112                     	;# 
   978  0113                     	;# 
   979  0114                     	;# 
   980  0115                     	;# 
   981  0116                     	;# 
   982  0117                     	;# 
   983  0118                     	;# 
   984  0119                     	;# 
   985  011A                     	;# 
   986  011B                     	;# 
   987  011D                     	;# 
   988  011D                     	;# 
   989  018C                     	;# 
   990  018E                     	;# 
   991  0191                     	;# 
   992  0191                     	;# 
   993  0192                     	;# 
   994  0193                     	;# 
   995  0193                     	;# 
   996  0193                     	;# 
   997  0194                     	;# 
   998  0195                     	;# 
   999  0196                     	;# 
  1000  0199                     	;# 
  1001  019A                     	;# 
  1002  019B                     	;# 
  1003  019B                     	;# 
  1004  019B                     	;# 
  1005  019B                     	;# 
  1006  019C                     	;# 
  1007  019C                     	;# 
  1008  019D                     	;# 
  1009  019E                     	;# 
  1010  019F                     	;# 
  1011  020C                     	;# 
  1012  020E                     	;# 
  1013  0211                     	;# 
  1014  0211                     	;# 
  1015  0212                     	;# 
  1016  0212                     	;# 
  1017  0213                     	;# 
  1018  0213                     	;# 
  1019  0214                     	;# 
  1020  0214                     	;# 
  1021  0215                     	;# 
  1022  0215                     	;# 
  1023  0215                     	;# 
  1024  0216                     	;# 
  1025  0216                     	;# 
  1026  0217                     	;# 
  1027  0217                     	;# 
  1028  0291                     	;# 
  1029  0291                     	;# 
  1030  0292                     	;# 
  1031  0293                     	;# 
  1032  0294                     	;# 
  1033  0295                     	;# 
  1034  0295                     	;# 
  1035  0296                     	;# 
  1036  0391                     	;# 
  1037  0392                     	;# 
  1038  0393                     	;# 
  1039  039A                     	;# 
  1040  039C                     	;# 
  1041  039D                     	;# 
  1042  039E                     	;# 
  1043  039F                     	;# 
  1044  0FE4                     	;# 
  1045  0FE5                     	;# 
  1046  0FE6                     	;# 
  1047  0FE7                     	;# 
  1048  0FE8                     	;# 
  1049  0FE9                     	;# 
  1050  0FEA                     	;# 
  1051  0FEB                     	;# 
  1052  0FED                     	;# 
  1053  0FEE                     	;# 
  1054  0FEF                     	;# 
  1055  0000                     	;# 
  1056  0001                     	;# 
  1057  0002                     	;# 
  1058  0003                     	;# 
  1059  0004                     	;# 
  1060  0005                     	;# 
  1061  0006                     	;# 
  1062  0007                     	;# 
  1063  0008                     	;# 
  1064  0009                     	;# 
  1065  000A                     	;# 
  1066  000B                     	;# 
  1067  000C                     	;# 
  1068  000E                     	;# 
  1069  0011                     	;# 
  1070  0012                     	;# 
  1071  0015                     	;# 
  1072  0016                     	;# 
  1073  0016                     	;# 
  1074  0017                     	;# 
  1075  0018                     	;# 
  1076  0019                     	;# 
  1077  001A                     	;# 
  1078  001B                     	;# 
  1079  001C                     	;# 
  1080  001E                     	;# 
  1081  001F                     	;# 
  1082  008C                     	;# 
  1083  008E                     	;# 
  1084  0091                     	;# 
  1085  0092                     	;# 
  1086  0095                     	;# 
  1087  0096                     	;# 
  1088  0097                     	;# 
  1089  0098                     	;# 
  1090  0099                     	;# 
  1091  009A                     	;# 
  1092  009B                     	;# 
  1093  009B                     	;# 
  1094  009C                     	;# 
  1095  009D                     	;# 
  1096  009E                     	;# 
  1097  010C                     	;# 
  1098  010E                     	;# 
  1099  0111                     	;# 
  1100  0112                     	;# 
  1101  0113                     	;# 
  1102  0114                     	;# 
  1103  0115                     	;# 
  1104  0116                     	;# 
  1105  0117                     	;# 
  1106  0118                     	;# 
  1107  0119                     	;# 
  1108  011A                     	;# 
  1109  011B                     	;# 
  1110  011D                     	;# 
  1111  011D                     	;# 
  1112  018C                     	;# 
  1113  018E                     	;# 
  1114  0191                     	;# 
  1115  0191                     	;# 
  1116  0192                     	;# 
  1117  0193                     	;# 
  1118  0193                     	;# 
  1119  0193                     	;# 
  1120  0194                     	;# 
  1121  0195                     	;# 
  1122  0196                     	;# 
  1123  0199                     	;# 
  1124  019A                     	;# 
  1125  019B                     	;# 
  1126  019B                     	;# 
  1127  019B                     	;# 
  1128  019B                     	;# 
  1129  019C                     	;# 
  1130  019C                     	;# 
  1131  019D                     	;# 
  1132  019E                     	;# 
  1133  019F                     	;# 
  1134  020C                     	;# 
  1135  020E                     	;# 
  1136  0211                     	;# 
  1137  0211                     	;# 
  1138  0212                     	;# 
  1139  0212                     	;# 
  1140  0213                     	;# 
  1141  0213                     	;# 
  1142  0214                     	;# 
  1143  0214                     	;# 
  1144  0215                     	;# 
  1145  0215                     	;# 
  1146  0215                     	;# 
  1147  0216                     	;# 
  1148  0216                     	;# 
  1149  0217                     	;# 
  1150  0217                     	;# 
  1151  0291                     	;# 
  1152  0291                     	;# 
  1153  0292                     	;# 
  1154  0293                     	;# 
  1155  0294                     	;# 
  1156  0295                     	;# 
  1157  0295                     	;# 
  1158  0296                     	;# 
  1159  0391                     	;# 
  1160  0392                     	;# 
  1161  0393                     	;# 
  1162  039A                     	;# 
  1163  039C                     	;# 
  1164  039D                     	;# 
  1165  039E                     	;# 
  1166  039F                     	;# 
  1167  0FE4                     	;# 
  1168  0FE5                     	;# 
  1169  0FE6                     	;# 
  1170  0FE7                     	;# 
  1171  0FE8                     	;# 
  1172  0FE9                     	;# 
  1173  0FEA                     	;# 
  1174  0FEB                     	;# 
  1175  0FED                     	;# 
  1176  0FEE                     	;# 
  1177  0FEF                     	;# 
  1178  000E                     _PORTC	set	14
  1179  0015                     _TMR0	set	21
  1180  005F                     _GIE	set	95
  1181  005E                     _PEIE	set	94
  1182  0065                     _RA5	set	101
  1183  008D                     _RCIF	set	141
  1184  005D                     _TMR0IE	set	93
  1185  005A                     _TMR0IF	set	90
  1186  008C                     _TXIF	set	140
  1187  009D                     _ADCON0	set	157
  1188  009E                     _ADCON1	set	158
  1189  009C                     _ADRESH	set	156
  1190  009B                     _ADRESL	set	155
  1191  0095                     _OPTION_REGbits	set	149
  1192  0099                     _OSCCON	set	153
  1193  009A                     _OSCSTAT	set	154
  1194  0098                     _OSCTUNE	set	152
  1195  008C                     _TRISA	set	140
  1196  008E                     _TRISC	set	142
  1197  04E9                     _ADGO	set	1257
  1198  04A8                     _PS0	set	1192
  1199  04A9                     _PS1	set	1193
  1200  04AA                     _PS2	set	1194
  1201  04AB                     _PSA	set	1195
  1202  048D                     _RCIE	set	1165
  1203  04AD                     _TMR0CS	set	1197
  1204  048C                     _TXIE	set	1164
  1205  011D                     _APFCON	set	285
  1206  010C                     _LATA	set	268
  1207  010E                     _LATC	set	270
  1208  08EF                     _RXDTSEL	set	2287
  1209  08EA                     _TXCKSEL	set	2282
  1210  018C                     _ANSELA	set	396
  1211  018E                     _ANSELC	set	398
  1212  0199                     _RCREG	set	409
  1213  019C                     _SPBRGH	set	412
  1214  019B                     _SPBRGL	set	411
  1215  019A                     _TXREG	set	410
  1216  0CFB                     _BRG16	set	3323
  1217  0CF2                     _BRGH	set	3314
  1218  0CEC                     _CREN	set	3308
  1219  0CE9                     _OERR	set	3305
  1220  0CEF                     _SPEN	set	3311
  1221  0CF4                     _SYNC	set	3316
  1222  0CF5                     _TXEN	set	3317
  1223  020C                     _WPUA	set	524
  1224  020E                     _WPUC	set	526
  1225  039A                     _CLKRCON	set	922
  1226                           
  1227                           ; #config settings
  1228  0000                     
  1229                           	psect	cinit
  1230  0056                     start_initialization:	
  1231  0056                     __initialization:	
  1232                           
  1233                           ; Clear objects allocated to COMMON
  1234  0056  01F0               	clrf	__pbssCOMMON& (0+127)
  1235  0057  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  1236  0058  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  1237  0059  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  1238  005A  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  1239                           
  1240                           ; Clear objects allocated to BANK0
  1241  005B  3020               	movlw	low __pbssBANK0
  1242  005C  0084               	movwf	4
  1243  005D  3000               	movlw	high __pbssBANK0
  1244  005E  0085               	movwf	5
  1245  005F  302C               	movlw	44
  1246  0060  2464               	fcall	clear_ram0
  1247  0061                     end_of_initialization:	
  1248                           ;End of C runtime variable initialization code
  1249                           
  1250  0061                     __end_of__initialization:	
  1251  0061  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1252  0062  0020               	movlb	0
  1253  0063  2A9E               	ljmp	_main	;jump to C main() function
  1254                           
  1255                           	psect	bssCOMMON
  1256  0070                     __pbssCOMMON:	
  1257  0070                     _TIMER0_timeout:	
  1258  0070                     	ds	2
  1259  0072                     _USART_tx_flag:	
  1260  0072                     	ds	1
  1261  0073                     _USART_tx_index:	
  1262  0073                     	ds	1
  1263  0074                     _USART_tx_length:	
  1264  0074                     	ds	1
  1265                           
  1266                           	psect	bssBANK0
  1267  0020                     __pbssBANK0:	
  1268  0020                     _USART_rx_data:	
  1269  0020                     	ds	15
  1270  002F                     _USART_tx_data:	
  1271  002F                     	ds	15
  1272  003E                     _TIMER0_flag:	
  1273  003E                     	ds	1
  1274  003F                     _USART_rx_flag:	
  1275  003F                     	ds	1
  1276  0040                     _USART_rx_index:	
  1277  0040                     	ds	1
  1278  0041                     _mess_rec_size:	
  1279  0041                     	ds	1
  1280  0042                     _mess_rec:	
  1281  0042                     	ds	10
  1282                           
  1283                           	psect	clrtext
  1284  0464                     clear_ram0:	
  1285                           ;	Called with FSR0 containing the base address, and
  1286                           ;	WREG with the size to clear
  1287                           
  1288  0464  0064               	clrwdt	;clear the watchdog before getting into this loop
  1289  0465                     clrloop0:	
  1290  0465  0180               	clrf	0	;clear RAM location pointed to by FSR
  1291  0466  3101               	addfsr 0,1
  1292  0467  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1293  0468  2C65               	goto	clrloop0	;have we reached the end yet?
  1294  0469  3400               	retlw	0	;all done for this memory range, return
  1295                           
  1296                           	psect	cstackCOMMON
  1297  0075                     __pcstackCOMMON:	
  1298  0075                     ?_OSCILLATOR_Initialize:	
  1299  0075                     ?_setup_TMR0:	
  1300                           ; 1 bytes @ 0x0
  1301                           
  1302  0075                     ?_start_TX_USART_ISR:	
  1303                           ; 1 bytes @ 0x0
  1304                           
  1305  0075                     ?_start_RX_USART_ISR:	
  1306                           ; 1 bytes @ 0x0
  1307                           
  1308  0075                     ?_start_RCM:	
  1309                           ; 1 bytes @ 0x0
  1310                           
  1311  0075                     ?_setup_ADC:	
  1312                           ; 1 bytes @ 0x0
  1313                           
  1314  0075                     ?_mess_handler:	
  1315                           ; 1 bytes @ 0x0
  1316                           
  1317  0075                     ?_stop_TMR0_ISR:	
  1318                           ; 1 bytes @ 0x0
  1319                           
  1320  0075                     ??_stop_TMR0_ISR:	
  1321                           ; 1 bytes @ 0x0
  1322                           
  1323  0075                     ?_start_TMR0_ISR:	
  1324                           ; 1 bytes @ 0x0
  1325                           
  1326  0075                     ??_start_TMR0_ISR:	
  1327                           ; 1 bytes @ 0x0
  1328                           
  1329  0075                     ?_config_ASIC:	
  1330                           ; 1 bytes @ 0x0
  1331                           
  1332  0075                     ?_read_ADC_channels:	
  1333                           ; 1 bytes @ 0x0
  1334                           
  1335  0075                     ?_measure_Impedance:	
  1336                           ; 1 bytes @ 0x0
  1337                           
  1338  0075                     ?_measure_Impedance_no_offset:	
  1339                           ; 1 bytes @ 0x0
  1340                           
  1341  0075                     ?_measure_Offset:	
  1342                           ; 1 bytes @ 0x0
  1343                           
  1344  0075                     ?_PIN_MANAGER_Initialize:	
  1345                           ; 1 bytes @ 0x0
  1346                           
  1347  0075                     ?_SYSTEM_Initialize:	
  1348                           ; 1 bytes @ 0x0
  1349                           
  1350  0075                     ?_main:	
  1351                           ; 1 bytes @ 0x0
  1352                           
  1353  0075                     ?_isr:	
  1354                           ; 1 bytes @ 0x0
  1355                           
  1356  0075                     ?_close_RX_USART:	
  1357                           ; 1 bytes @ 0x0
  1358                           
  1359  0075                     ?i1_start_RX_USART_ISR:	
  1360                           ; 1 bytes @ 0x0
  1361                           
  1362  0075                     ??i1_start_RX_USART_ISR:	
  1363                           ; 1 bytes @ 0x0
  1364                           
  1365                           
  1366                           ; 1 bytes @ 0x0
  1367  0075                     	ds	2
  1368  0077                     start_TMR0_ISR@val:	
  1369                           
  1370                           ; 1 bytes @ 0x2
  1371  0077                     	ds	1
  1372  0078                     ??_isr:	
  1373                           
  1374                           ; 1 bytes @ 0x3
  1375  0078                     	ds	2
  1376                           
  1377                           	psect	cstackBANK0
  1378  004C                     __pcstackBANK0:	
  1379  004C                     ??_OSCILLATOR_Initialize:	
  1380  004C                     ??_setup_TMR0:	
  1381                           ; 1 bytes @ 0x0
  1382                           
  1383  004C                     ??_start_TX_USART_ISR:	
  1384                           ; 1 bytes @ 0x0
  1385                           
  1386  004C                     ??_start_RX_USART_ISR:	
  1387                           ; 1 bytes @ 0x0
  1388                           
  1389  004C                     ??_start_RCM:	
  1390                           ; 1 bytes @ 0x0
  1391                           
  1392  004C                     ??_setup_ADC:	
  1393                           ; 1 bytes @ 0x0
  1394                           
  1395  004C                     ??_PIN_MANAGER_Initialize:	
  1396                           ; 1 bytes @ 0x0
  1397                           
  1398  004C                     ??_SYSTEM_Initialize:	
  1399                           ; 1 bytes @ 0x0
  1400                           
  1401  004C                     ?_VIN_config:	
  1402                           ; 1 bytes @ 0x0
  1403                           
  1404  004C                     ??_close_RX_USART:	
  1405                           ; 1 bytes @ 0x0
  1406                           
  1407  004C                     ?_lputs_ISR:	
  1408                           ; 1 bytes @ 0x0
  1409                           
  1410  004C                     ?_ADC_2:	
  1411                           ; 1 bytes @ 0x0
  1412                           
  1413  004C                     ?_ADC_4:	
  1414                           ; 2 bytes @ 0x0
  1415                           
  1416  004C                     ?_ADC_5:	
  1417                           ; 2 bytes @ 0x0
  1418                           
  1419  004C                     lputs_ISR@length:	
  1420                           ; 2 bytes @ 0x0
  1421                           
  1422  004C                     VIN_config@conf:	
  1423                           ; 1 bytes @ 0x0
  1424                           
  1425                           
  1426                           ; 6 bytes @ 0x0
  1427  004C                     	ds	1
  1428  004D                     ??_lputs_ISR:	
  1429                           
  1430                           ; 1 bytes @ 0x1
  1431  004D                     	ds	1
  1432  004E                     ??_ADC_2:	
  1433  004E                     ??_ADC_4:	
  1434                           ; 1 bytes @ 0x2
  1435                           
  1436  004E                     ??_ADC_5:	
  1437                           ; 1 bytes @ 0x2
  1438                           
  1439                           
  1440                           ; 1 bytes @ 0x2
  1441  004E                     	ds	1
  1442  004F                     lputs_ISR@data:	
  1443                           
  1444                           ; 1 bytes @ 0x3
  1445  004F                     	ds	1
  1446  0050                     lputs_ISR@i:	
  1447  0050                     ADC_2@ADC_value:	
  1448                           ; 1 bytes @ 0x4
  1449                           
  1450  0050                     ADC_4@ADC_value:	
  1451                           ; 2 bytes @ 0x4
  1452                           
  1453  0050                     ADC_5@ADC_value:	
  1454                           ; 2 bytes @ 0x4
  1455                           
  1456                           
  1457                           ; 2 bytes @ 0x4
  1458  0050                     	ds	2
  1459  0052                     ??_read_ADC_channels:	
  1460  0052                     ??_VIN_config:	
  1461                           ; 1 bytes @ 0x6
  1462                           
  1463                           
  1464                           ; 1 bytes @ 0x6
  1465  0052                     	ds	1
  1466  0053                     VIN_config@i:	
  1467  0053                     read_ADC_channels@aux:	
  1468                           ; 1 bytes @ 0x7
  1469                           
  1470                           
  1471                           ; 7 bytes @ 0x7
  1472  0053                     	ds	1
  1473  0054                     VIN_config@out:	
  1474                           
  1475                           ; 1 bytes @ 0x8
  1476  0054                     	ds	1
  1477  0055                     ??_config_ASIC:	
  1478  0055                     ??_measure_Impedance:	
  1479                           ; 1 bytes @ 0x9
  1480                           
  1481  0055                     ??_measure_Impedance_no_offset:	
  1482                           ; 1 bytes @ 0x9
  1483                           
  1484  0055                     ??_measure_Offset:	
  1485                           ; 1 bytes @ 0x9
  1486                           
  1487                           
  1488                           ; 1 bytes @ 0x9
  1489  0055                     	ds	1
  1490  0056                     measure_Offset@aux:	
  1491  0056                     config_ASIC@asic:	
  1492                           ; 5 bytes @ 0xA
  1493                           
  1494  0056                     measure_Impedance@aux:	
  1495                           ; 6 bytes @ 0xA
  1496                           
  1497  0056                     measure_Impedance_no_offset@aux:	
  1498                           ; 13 bytes @ 0xA
  1499                           
  1500                           
  1501                           ; 13 bytes @ 0xA
  1502  0056                     	ds	4
  1503  005A                     read_ADC_channels@value1:	
  1504                           
  1505                           ; 2 bytes @ 0xE
  1506  005A                     	ds	1
  1507  005B                     measure_Offset@value1:	
  1508                           
  1509                           ; 2 bytes @ 0xF
  1510  005B                     	ds	1
  1511  005C                     read_ADC_channels@value2:	
  1512                           
  1513                           ; 2 bytes @ 0x10
  1514  005C                     	ds	1
  1515  005D                     measure_Offset@value2:	
  1516                           
  1517                           ; 2 bytes @ 0x11
  1518  005D                     	ds	1
  1519  005E                     read_ADC_channels@value3:	
  1520                           
  1521                           ; 2 bytes @ 0x12
  1522  005E                     	ds	1
  1523  005F                     measure_Offset@asic:	
  1524                           
  1525                           ; 6 bytes @ 0x13
  1526  005F                     	ds	4
  1527  0063                     measure_Impedance@value1:	
  1528  0063                     measure_Impedance_no_offset@value1:	
  1529                           ; 2 bytes @ 0x17
  1530                           
  1531                           
  1532                           ; 2 bytes @ 0x17
  1533  0063                     	ds	2
  1534  0065                     measure_Impedance@value2:	
  1535  0065                     measure_Impedance_no_offset@value2:	
  1536                           ; 2 bytes @ 0x19
  1537                           
  1538                           
  1539                           ; 2 bytes @ 0x19
  1540  0065                     	ds	2
  1541  0067                     measure_Impedance@asic:	
  1542  0067                     measure_Impedance_no_offset@asic:	
  1543                           ; 6 bytes @ 0x1B
  1544                           
  1545                           
  1546                           ; 6 bytes @ 0x1B
  1547  0067                     	ds	6
  1548  006D                     ??_mess_handler:	
  1549                           
  1550                           ; 1 bytes @ 0x21
  1551  006D                     	ds	1
  1552  006E                     ??_main:	
  1553                           
  1554                           ; 1 bytes @ 0x22
  1555  006E                     	ds	1
  1556  006F                     main@i:	
  1557                           
  1558                           ; 1 bytes @ 0x23
  1559  006F                     	ds	1
  1560                           
  1561                           	psect	maintext
  1562  029E                     __pmaintext:	
  1563 ;;
  1564 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1565 ;;
  1566 ;; *************** function _main *****************
  1567 ;; Defined at:
  1568 ;;		line 17 in file "main.c"
  1569 ;; Parameters:    Size  Location     Type
  1570 ;;		None
  1571 ;; Auto vars:     Size  Location     Type
  1572 ;;  i               1   35[BANK0 ] unsigned char 
  1573 ;; Return value:  Size  Location     Type
  1574 ;;                  1    wreg      void 
  1575 ;; Registers used:
  1576 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1577 ;; Tracked objects:
  1578 ;;		On entry : B1F/0
  1579 ;;		On exit  : 0/0
  1580 ;;		Unchanged: 0/0
  1581 ;; Data sizes:     COMMON   BANK0   BANK1
  1582 ;;      Params:         0       0       0
  1583 ;;      Locals:         0       1       0
  1584 ;;      Temps:          0       1       0
  1585 ;;      Totals:         0       2       0
  1586 ;;Total ram usage:        2 bytes
  1587 ;; Hardware stack levels required when called:    6
  1588 ;; This function calls:
  1589 ;;		_SYSTEM_Initialize
  1590 ;;		_mess_handler
  1591 ;;		_setup_ADC
  1592 ;;		_setup_TMR0
  1593 ;;		_start_RCM
  1594 ;;		_start_RX_USART_ISR
  1595 ;;		_start_TX_USART_ISR
  1596 ;; This function is called by:
  1597 ;;		Startup code after reset
  1598 ;; This function uses a non-reentrant model
  1599 ;;
  1600                           
  1601                           
  1602                           ;psect for function _main
  1603  029E                     _main:	
  1604                           
  1605                           ;main.c: 19: unsigned char i;
  1606                           ;main.c: 21: SYSTEM_Initialize();
  1607                           
  1608                           ;incstack = 0
  1609                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1610  029E  247F               	fcall	_SYSTEM_Initialize
  1611                           
  1612                           ;main.c: 22: setup_TMR0();
  1613  029F  245D               	fcall	_setup_TMR0
  1614                           
  1615                           ;main.c: 23: start_TX_USART_ISR();
  1616  02A0  244E               	fcall	_start_TX_USART_ISR
  1617                           
  1618                           ;main.c: 24: start_RX_USART_ISR();
  1619  02A1  241C               	fcall	_start_RX_USART_ISR
  1620                           
  1621                           ;main.c: 25: start_RCM();
  1622  02A2  247B               	fcall	_start_RCM
  1623                           
  1624                           ;main.c: 26: setup_ADC();
  1625  02A3  246A               	fcall	_setup_ADC
  1626                           
  1627                           ;main.c: 28: RA5 = 0;
  1628  02A4  0020               	movlb	0	; select bank0
  1629  02A5  128C               	bcf	12,5	;volatile
  1630                           
  1631                           ;main.c: 29: _delay((unsigned long)((150)*(500000/4000.0)));
  1632  02A6  3019               	movlw	25
  1633  02A7  0020               	movlb	0	; select bank0
  1634  02A8  00EE               	movwf	??_main
  1635  02A9  3058               	movlw	88
  1636  02AA                     u997:	
  1637  02AA  0B89               	decfsz	9,f
  1638  02AB  2AAA               	goto	u997
  1639  02AC  0BEE               	decfsz	??_main,f
  1640  02AD  2AAA               	goto	u997
  1641  02AE  0000               	nop
  1642                           
  1643                           ;main.c: 30: RA5 = 1;
  1644  02AF  0020               	movlb	0	; select bank0
  1645  02B0  168C               	bsf	12,5	;volatile
  1646  02B1                     l108:	
  1647                           ;main.c: 35: while(1) {
  1648                           
  1649  02B1  0064               	clrwdt	;# 
  1650                           
  1651                           ;main.c: 39: if (TIMER0_flag) {
  1652  02B2  0020               	movlb	0	; select bank0
  1653  02B3  083E               	movf	_TIMER0_flag,w	;volatile
  1654  02B4  1903               	btfsc	3,2
  1655  02B5  2AB1               	goto	l108
  1656                           
  1657                           ;main.c: 40: TIMER0_flag = 0;
  1658  02B6  01BE               	clrf	_TIMER0_flag	;volatile
  1659                           
  1660                           ;main.c: 42: if (USART_rx_index > 10) {
  1661  02B7  300B               	movlw	11
  1662  02B8  0240               	subwf	_USART_rx_index,w	;volatile
  1663  02B9  1C03               	skipc
  1664  02BA  2ABD               	goto	l2337
  1665                           
  1666                           ;main.c: 43: USART_rx_index = 0;
  1667  02BB  01C0               	clrf	_USART_rx_index	;volatile
  1668                           
  1669                           ;main.c: 44: continue;
  1670  02BC  2AB1               	goto	l108
  1671  02BD                     l2337:	
  1672                           
  1673                           ;main.c: 45: }
  1674                           ;main.c: 47: if(USART_rx_index == 0)
  1675  02BD  0840               	movf	_USART_rx_index,w	;volatile
  1676  02BE  1903               	btfsc	3,2
  1677                           
  1678                           ;main.c: 48: continue;
  1679  02BF  2AB1               	goto	l108
  1680                           
  1681                           ;main.c: 51: mess_rec_size = USART_rx_index;
  1682  02C0  0840               	movf	_USART_rx_index,w	;volatile
  1683  02C1  00EE               	movwf	??_main
  1684  02C2  086E               	movf	??_main,w
  1685  02C3  00C1               	movwf	_mess_rec_size	;volatile
  1686                           
  1687                           ;main.c: 53: for (i = 0; i < mess_rec_size; i++)
  1688  02C4  01EF               	clrf	main@i
  1689  02C5                     l2349:	
  1690  02C5  0841               	movf	_mess_rec_size,w	;volatile
  1691  02C6  026F               	subwf	main@i,w
  1692  02C7  1803               	btfsc	3,0
  1693  02C8  2ADA               	goto	l2351
  1694                           
  1695                           ;main.c: 54: mess_rec[i] = USART_rx_data[i];
  1696  02C9  086F               	movf	main@i,w
  1697  02CA  3E20               	addlw	(low (_USART_rx_data| 0))& (0+255)
  1698  02CB  0086               	movwf	6
  1699  02CC  0187               	clrf	7
  1700  02CD  0801               	movf	1,w
  1701  02CE  00EE               	movwf	??_main
  1702  02CF  086F               	movf	main@i,w
  1703  02D0  3E42               	addlw	(low (_mess_rec| 0))& (0+255)
  1704  02D1  0086               	movwf	6
  1705  02D2  0187               	clrf	7
  1706  02D3  086E               	movf	??_main,w
  1707  02D4  0081               	movwf	1
  1708  02D5  3001               	movlw	1
  1709  02D6  00EE               	movwf	??_main
  1710  02D7  086E               	movf	??_main,w
  1711  02D8  07EF               	addwf	main@i,f
  1712  02D9  2AC5               	goto	l2349
  1713  02DA                     l2351:	
  1714                           
  1715                           ;main.c: 57: mess_handler();
  1716  02DA  2371               	fcall	_mess_handler
  1717  02DB  2AB1               	goto	l108
  1718  02DC                     __end_of_main:	
  1719                           
  1720                           	psect	text1
  1721  044E                     __ptext1:	
  1722 ;; *************** function _start_TX_USART_ISR *****************
  1723 ;; Defined at:
  1724 ;;		line 100 in file "USART1823.c"
  1725 ;; Parameters:    Size  Location     Type
  1726 ;;		None
  1727 ;; Auto vars:     Size  Location     Type
  1728 ;;		None
  1729 ;; Return value:  Size  Location     Type
  1730 ;;                  1    wreg      void 
  1731 ;; Registers used:
  1732 ;;		wreg, status,2
  1733 ;; Tracked objects:
  1734 ;;		On entry : 0/0
  1735 ;;		On exit  : 0/0
  1736 ;;		Unchanged: 0/0
  1737 ;; Data sizes:     COMMON   BANK0   BANK1
  1738 ;;      Params:         0       0       0
  1739 ;;      Locals:         0       0       0
  1740 ;;      Temps:          0       0       0
  1741 ;;      Totals:         0       0       0
  1742 ;;Total ram usage:        0 bytes
  1743 ;; Hardware stack levels used:    1
  1744 ;; Hardware stack levels required when called:    2
  1745 ;; This function calls:
  1746 ;;		Nothing
  1747 ;; This function is called by:
  1748 ;;		_main
  1749 ;; This function uses a non-reentrant model
  1750 ;;
  1751                           
  1752                           
  1753                           ;psect for function _start_TX_USART_ISR
  1754  044E                     _start_TX_USART_ISR:	
  1755                           
  1756                           ;USART1823.c: 102: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  1757                           
  1758                           ;incstack = 0
  1759                           ; Regs used in _start_TX_USART_ISR: [wreg+status,2]
  1760  044E  0023               	movlb	3	; select bank3
  1761  044F  151E               	bsf	30,2	;volatile
  1762  0450  159F               	bsf	31,3	;volatile
  1763  0451  019C               	clrf	28	;volatile
  1764  0452  300C               	movlw	12
  1765  0453  009B               	movwf	27	;volatile
  1766                           
  1767                           ;USART1823.c: 103: SYNC = 0;
  1768  0454  121E               	bcf	30,4	;volatile
  1769                           
  1770                           ;USART1823.c: 104: SPEN = 1;
  1771  0455  179D               	bsf	29,7	;volatile
  1772                           
  1773                           ;USART1823.c: 105: TXEN = 1;
  1774  0456  169E               	bsf	30,5	;volatile
  1775                           
  1776                           ;USART1823.c: 107: USART_tx_flag = 0;
  1777  0457  01F2               	clrf	_USART_tx_flag	;volatile
  1778                           
  1779                           ;USART1823.c: 108: USART_tx_index = 0;
  1780  0458  01F3               	clrf	_USART_tx_index	;volatile
  1781                           
  1782                           ;USART1823.c: 109: USART_tx_length = 0;
  1783  0459  01F4               	clrf	_USART_tx_length	;volatile
  1784                           
  1785                           ;USART1823.c: 112: PEIE = 1;
  1786  045A  170B               	bsf	11,6	;volatile
  1787                           
  1788                           ;USART1823.c: 113: GIE = 1;
  1789  045B  178B               	bsf	11,7	;volatile
  1790  045C  0008               	return
  1791  045D                     __end_of_start_TX_USART_ISR:	
  1792                           
  1793                           	psect	text2
  1794  041C                     __ptext2:	
  1795 ;; *************** function _start_RX_USART_ISR *****************
  1796 ;; Defined at:
  1797 ;;		line 82 in file "USART1823.c"
  1798 ;; Parameters:    Size  Location     Type
  1799 ;;		None
  1800 ;; Auto vars:     Size  Location     Type
  1801 ;;		None
  1802 ;; Return value:  Size  Location     Type
  1803 ;;                  1    wreg      void 
  1804 ;; Registers used:
  1805 ;;		wreg, status,2
  1806 ;; Tracked objects:
  1807 ;;		On entry : 0/0
  1808 ;;		On exit  : 0/0
  1809 ;;		Unchanged: 0/0
  1810 ;; Data sizes:     COMMON   BANK0   BANK1
  1811 ;;      Params:         0       0       0
  1812 ;;      Locals:         0       0       0
  1813 ;;      Temps:          0       0       0
  1814 ;;      Totals:         0       0       0
  1815 ;;Total ram usage:        0 bytes
  1816 ;; Hardware stack levels used:    1
  1817 ;; Hardware stack levels required when called:    2
  1818 ;; This function calls:
  1819 ;;		Nothing
  1820 ;; This function is called by:
  1821 ;;		_main
  1822 ;; This function uses a non-reentrant model
  1823 ;;
  1824                           
  1825                           
  1826                           ;psect for function _start_RX_USART_ISR
  1827  041C                     _start_RX_USART_ISR:	
  1828                           
  1829                           ;USART1823.c: 85: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  1830                           
  1831                           ;incstack = 0
  1832                           ; Regs used in _start_RX_USART_ISR: [wreg+status,2]
  1833  041C  0023               	movlb	3	; select bank3
  1834  041D  151E               	bsf	30,2	;volatile
  1835  041E  159F               	bsf	31,3	;volatile
  1836  041F  019C               	clrf	28	;volatile
  1837  0420  300C               	movlw	12
  1838  0421  009B               	movwf	27	;volatile
  1839                           
  1840                           ;USART1823.c: 87: SYNC = 0;
  1841  0422  121E               	bcf	30,4	;volatile
  1842                           
  1843                           ;USART1823.c: 88: SPEN = 1;
  1844  0423  179D               	bsf	29,7	;volatile
  1845                           
  1846                           ;USART1823.c: 89: CREN = 1;
  1847  0424  161D               	bsf	29,4	;volatile
  1848                           
  1849                           ;USART1823.c: 91: USART_rx_flag = 0;
  1850  0425  0020               	movlb	0	; select bank0
  1851  0426  01BF               	clrf	_USART_rx_flag	;volatile
  1852                           
  1853                           ;USART1823.c: 92: USART_rx_index = 0;
  1854  0427  01C0               	clrf	_USART_rx_index	;volatile
  1855                           
  1856                           ;USART1823.c: 94: RCIE = 1;
  1857  0428  0021               	movlb	1	; select bank1
  1858  0429  1691               	bsf	17,5	;volatile
  1859                           
  1860                           ;USART1823.c: 95: PEIE = 1;
  1861  042A  170B               	bsf	11,6	;volatile
  1862                           
  1863                           ;USART1823.c: 96: GIE = 1;
  1864  042B  178B               	bsf	11,7	;volatile
  1865  042C  0008               	return
  1866  042D                     __end_of_start_RX_USART_ISR:	
  1867                           
  1868                           	psect	text3
  1869  047B                     __ptext3:	
  1870 ;; *************** function _start_RCM *****************
  1871 ;; Defined at:
  1872 ;;		line 4 in file "RCM1823.c"
  1873 ;; Parameters:    Size  Location     Type
  1874 ;;		None
  1875 ;; Auto vars:     Size  Location     Type
  1876 ;;		None
  1877 ;; Return value:  Size  Location     Type
  1878 ;;                  1    wreg      void 
  1879 ;; Registers used:
  1880 ;;		wreg
  1881 ;; Tracked objects:
  1882 ;;		On entry : 0/0
  1883 ;;		On exit  : 0/0
  1884 ;;		Unchanged: 0/0
  1885 ;; Data sizes:     COMMON   BANK0   BANK1
  1886 ;;      Params:         0       0       0
  1887 ;;      Locals:         0       0       0
  1888 ;;      Temps:          0       0       0
  1889 ;;      Totals:         0       0       0
  1890 ;;Total ram usage:        0 bytes
  1891 ;; Hardware stack levels used:    1
  1892 ;; Hardware stack levels required when called:    2
  1893 ;; This function calls:
  1894 ;;		Nothing
  1895 ;; This function is called by:
  1896 ;;		_main
  1897 ;; This function uses a non-reentrant model
  1898 ;;
  1899                           
  1900                           
  1901                           ;psect for function _start_RCM
  1902  047B                     _start_RCM:	
  1903                           
  1904                           ;RCM1823.c: 6: CLKRCON = 0b11010000;
  1905                           
  1906                           ;incstack = 0
  1907                           ; Regs used in _start_RCM: [wreg]
  1908  047B  30D0               	movlw	208
  1909  047C  0027               	movlb	7	; select bank7
  1910  047D  009A               	movwf	26	;volatile
  1911  047E  0008               	return
  1912  047F                     __end_of_start_RCM:	
  1913                           
  1914                           	psect	text4
  1915  045D                     __ptext4:	
  1916 ;; *************** function _setup_TMR0 *****************
  1917 ;; Defined at:
  1918 ;;		line 10 in file "TMR0.c"
  1919 ;; Parameters:    Size  Location     Type
  1920 ;;		None
  1921 ;; Auto vars:     Size  Location     Type
  1922 ;;		None
  1923 ;; Return value:  Size  Location     Type
  1924 ;;                  1    wreg      void 
  1925 ;; Registers used:
  1926 ;;		None
  1927 ;; Tracked objects:
  1928 ;;		On entry : 0/0
  1929 ;;		On exit  : 0/0
  1930 ;;		Unchanged: 0/0
  1931 ;; Data sizes:     COMMON   BANK0   BANK1
  1932 ;;      Params:         0       0       0
  1933 ;;      Locals:         0       0       0
  1934 ;;      Temps:          0       0       0
  1935 ;;      Totals:         0       0       0
  1936 ;;Total ram usage:        0 bytes
  1937 ;; Hardware stack levels used:    1
  1938 ;; Hardware stack levels required when called:    2
  1939 ;; This function calls:
  1940 ;;		Nothing
  1941 ;; This function is called by:
  1942 ;;		_main
  1943 ;; This function uses a non-reentrant model
  1944 ;;
  1945                           
  1946                           
  1947                           ;psect for function _setup_TMR0
  1948  045D                     _setup_TMR0:	
  1949                           
  1950                           ;TMR0.c: 13: PS2 = 0; PS1 = 1; PS0 = 0;
  1951                           
  1952                           ;incstack = 0
  1953                           ; Regs used in _setup_TMR0: []
  1954  045D  0021               	movlb	1	; select bank1
  1955  045E  1115               	bcf	21,2	;volatile
  1956  045F  1495               	bsf	21,1	;volatile
  1957  0460  1015               	bcf	21,0	;volatile
  1958                           
  1959                           ;TMR0.c: 16: PSA = 0;
  1960  0461  1195               	bcf	21,3	;volatile
  1961                           
  1962                           ;TMR0.c: 18: TMR0CS = 0;
  1963  0462  1295               	bcf	21,5	;volatile
  1964  0463  0008               	return
  1965  0464                     __end_of_setup_TMR0:	
  1966                           
  1967                           	psect	text5
  1968  046A                     __ptext5:	
  1969 ;; *************** function _setup_ADC *****************
  1970 ;; Defined at:
  1971 ;;		line 3 in file "ADC1823.c"
  1972 ;; Parameters:    Size  Location     Type
  1973 ;;		None
  1974 ;; Auto vars:     Size  Location     Type
  1975 ;;		None
  1976 ;; Return value:  Size  Location     Type
  1977 ;;                  1    wreg      void 
  1978 ;; Registers used:
  1979 ;;		wreg
  1980 ;; Tracked objects:
  1981 ;;		On entry : 0/0
  1982 ;;		On exit  : 0/0
  1983 ;;		Unchanged: 0/0
  1984 ;; Data sizes:     COMMON   BANK0   BANK1
  1985 ;;      Params:         0       0       0
  1986 ;;      Locals:         0       0       0
  1987 ;;      Temps:          0       0       0
  1988 ;;      Totals:         0       0       0
  1989 ;;Total ram usage:        0 bytes
  1990 ;; Hardware stack levels used:    1
  1991 ;; Hardware stack levels required when called:    2
  1992 ;; This function calls:
  1993 ;;		Nothing
  1994 ;; This function is called by:
  1995 ;;		_main
  1996 ;; This function uses a non-reentrant model
  1997 ;;
  1998                           
  1999                           
  2000                           ;psect for function _setup_ADC
  2001  046A                     _setup_ADC:	
  2002                           
  2003                           ;ADC1823.c: 20: ADCON1 = 0b11110000;
  2004                           
  2005                           ;incstack = 0
  2006                           ; Regs used in _setup_ADC: [wreg]
  2007  046A  30F0               	movlw	240
  2008  046B  0021               	movlb	1	; select bank1
  2009  046C  009E               	movwf	30	;volatile
  2010                           
  2011                           ;ADC1823.c: 21: { ADCON0 = 0b00100100;};
  2012  046D  3024               	movlw	36
  2013  046E  009D               	movwf	29	;volatile
  2014  046F  0008               	return
  2015  0470                     __end_of_setup_ADC:	
  2016                           
  2017                           	psect	text6
  2018  0371                     __ptext6:	
  2019 ;; *************** function _mess_handler *****************
  2020 ;; Defined at:
  2021 ;;		line 11 in file "comm.c"
  2022 ;; Parameters:    Size  Location     Type
  2023 ;;		None
  2024 ;; Auto vars:     Size  Location     Type
  2025 ;;		None
  2026 ;; Return value:  Size  Location     Type
  2027 ;;                  1    wreg      void 
  2028 ;; Registers used:
  2029 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2030 ;; Tracked objects:
  2031 ;;		On entry : 0/0
  2032 ;;		On exit  : 0/0
  2033 ;;		Unchanged: 0/0
  2034 ;; Data sizes:     COMMON   BANK0   BANK1
  2035 ;;      Params:         0       0       0
  2036 ;;      Locals:         0       0       0
  2037 ;;      Temps:          0       1       0
  2038 ;;      Totals:         0       1       0
  2039 ;;Total ram usage:        1 bytes
  2040 ;; Hardware stack levels used:    1
  2041 ;; Hardware stack levels required when called:    5
  2042 ;; This function calls:
  2043 ;;		_config_ASIC
  2044 ;;		_lputs_ISR
  2045 ;;		_measure_Impedance
  2046 ;;		_measure_Impedance_no_offset
  2047 ;;		_measure_Offset
  2048 ;;		_read_ADC_channels
  2049 ;; This function is called by:
  2050 ;;		_main
  2051 ;; This function uses a non-reentrant model
  2052 ;;
  2053                           
  2054                           
  2055                           ;psect for function _mess_handler
  2056  0371                     _mess_handler:	
  2057                           
  2058                           ;comm.c: 16: switch (mess_rec[0]) {
  2059                           
  2060                           ;incstack = 0
  2061                           ; Regs used in _mess_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2062  0371  2B84               	goto	l2311
  2063  0372                     l2297:	
  2064                           ;comm.c: 17: case 't':
  2065                           
  2066                           
  2067                           ;comm.c: 18: lputs_ISR(mess_rec,mess_rec_size);
  2068  0372  0020               	movlb	0	; select bank0
  2069  0373  0841               	movf	_mess_rec_size,w	;volatile
  2070  0374  00ED               	movwf	??_mess_handler
  2071  0375  086D               	movf	??_mess_handler,w
  2072  0376  00CC               	movwf	lputs_ISR@length
  2073  0377  3042               	movlw	(low (_mess_rec| 0))& (0+255)
  2074  0378  2346               	fcall	_lputs_ISR
  2075                           
  2076                           ;comm.c: 19: break;
  2077  0379  0008               	return
  2078  037A                     l2299:	
  2079                           ;comm.c: 21: case 'c':
  2080                           
  2081                           
  2082                           ;comm.c: 22: config_ASIC();
  2083  037A  2315               	fcall	_config_ASIC
  2084                           
  2085                           ;comm.c: 23: break;
  2086  037B  0008               	return
  2087  037C                     l2301:	
  2088                           ;comm.c: 25: case 'm':
  2089                           
  2090                           
  2091                           ;comm.c: 26: read_ADC_channels();
  2092  037C  22DC               	fcall	_read_ADC_channels
  2093                           
  2094                           ;comm.c: 27: break;
  2095  037D  0008               	return
  2096  037E                     l2303:	
  2097                           ;comm.c: 29: case 'z':
  2098                           
  2099                           
  2100                           ;comm.c: 30: measure_Impedance();
  2101  037E  2064               	fcall	_measure_Impedance
  2102                           
  2103                           ;comm.c: 31: break;
  2104  037F  0008               	return
  2105  0380                     l2305:	
  2106                           ;comm.c: 33: case 'y':
  2107                           
  2108                           
  2109                           ;comm.c: 34: measure_Impedance_no_offset();
  2110  0380  21BB               	fcall	_measure_Impedance_no_offset
  2111                           
  2112                           ;comm.c: 35: break;
  2113  0381  0008               	return
  2114  0382                     l2307:	
  2115                           ;comm.c: 37: case 'o':
  2116                           
  2117                           
  2118                           ;comm.c: 38: measure_Offset();
  2119  0382  2248               	fcall	_measure_Offset
  2120                           
  2121                           ;comm.c: 43: }
  2122                           
  2123                           ;comm.c: 42: break;
  2124                           
  2125                           ;comm.c: 41: default:
  2126                           
  2127                           ;comm.c: 39: break;
  2128  0383  0008               	return
  2129  0384                     l2311:	
  2130  0384  0020               	movlb	0	; select bank0
  2131  0385  0842               	movf	_mess_rec,w	;volatile
  2132                           
  2133                           ; Switch size 1, requested type "space"
  2134                           ; Number of cases is 6, Range of values is 99 to 122
  2135                           ; switch strategies available:
  2136                           ; Name         Instructions Cycles
  2137                           ; simple_byte           19    10 (average)
  2138                           ; direct_byte           57     9 (fixed)
  2139                           ; jumptable            263     9 (fixed)
  2140                           ;	Chosen strategy is simple_byte
  2141  0386  3A63               	xorlw	99	; case 99
  2142  0387  1903               	skipnz
  2143  0388  2B7A               	goto	l2299
  2144  0389  3A0E               	xorlw	14	; case 109
  2145  038A  1903               	skipnz
  2146  038B  2B7C               	goto	l2301
  2147  038C  3A02               	xorlw	2	; case 111
  2148  038D  1903               	skipnz
  2149  038E  2B82               	goto	l2307
  2150  038F  3A1B               	xorlw	27	; case 116
  2151  0390  1903               	skipnz
  2152  0391  2B72               	goto	l2297
  2153  0392  3A0D               	xorlw	13	; case 121
  2154  0393  1903               	skipnz
  2155  0394  2B80               	goto	l2305
  2156  0395  3A03               	xorlw	3	; case 122
  2157  0396  1903               	skipnz
  2158  0397  2B7E               	goto	l2303
  2159  0398  2B99               	goto	l331
  2160  0399                     l331:	
  2161  0399  0008               	return
  2162  039A                     __end_of_mess_handler:	
  2163                           
  2164                           	psect	text7
  2165  02DC                     __ptext7:	
  2166 ;; *************** function _read_ADC_channels *****************
  2167 ;; Defined at:
  2168 ;;		line 76 in file "comm.c"
  2169 ;; Parameters:    Size  Location     Type
  2170 ;;		None
  2171 ;; Auto vars:     Size  Location     Type
  2172 ;;  aux             7    7[BANK0 ] unsigned char [7]
  2173 ;;  value3          2   18[BANK0 ] unsigned short 
  2174 ;;  value2          2   16[BANK0 ] unsigned short 
  2175 ;;  value1          2   14[BANK0 ] unsigned short 
  2176 ;; Return value:  Size  Location     Type
  2177 ;;                  1    wreg      void 
  2178 ;; Registers used:
  2179 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2180 ;; Tracked objects:
  2181 ;;		On entry : 0/0
  2182 ;;		On exit  : 0/0
  2183 ;;		Unchanged: 0/0
  2184 ;; Data sizes:     COMMON   BANK0   BANK1
  2185 ;;      Params:         0       0       0
  2186 ;;      Locals:         0      13       0
  2187 ;;      Temps:          0       1       0
  2188 ;;      Totals:         0      14       0
  2189 ;;Total ram usage:       14 bytes
  2190 ;; Hardware stack levels used:    1
  2191 ;; Hardware stack levels required when called:    4
  2192 ;; This function calls:
  2193 ;;		_ADC_2
  2194 ;;		_ADC_4
  2195 ;;		_ADC_5
  2196 ;;		_lputs_ISR
  2197 ;; This function is called by:
  2198 ;;		_mess_handler
  2199 ;; This function uses a non-reentrant model
  2200 ;;
  2201                           
  2202                           
  2203                           ;psect for function _read_ADC_channels
  2204  02DC                     _read_ADC_channels:	
  2205                           
  2206                           ;comm.c: 78: unsigned char aux[7];
  2207                           ;comm.c: 79: unsigned short value1,value2,value3;
  2208                           ;comm.c: 82: value1 = ADC_2();
  2209                           
  2210                           ;incstack = 0
  2211                           ; Regs used in _read_ADC_channels: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2212  02DC  23E0               	fcall	_ADC_2
  2213  02DD  0020               	movlb	0	; select bank0
  2214  02DE  084D               	movf	?_ADC_2+1,w
  2215  02DF  00DB               	movwf	read_ADC_channels@value1+1
  2216  02E0  084C               	movf	?_ADC_2,w
  2217  02E1  00DA               	movwf	read_ADC_channels@value1
  2218                           
  2219                           ;comm.c: 84: value2 = ADC_4();
  2220  02E2  23BD               	fcall	_ADC_4
  2221  02E3  0020               	movlb	0	; select bank0
  2222  02E4  084D               	movf	?_ADC_4+1,w
  2223  02E5  00DD               	movwf	read_ADC_channels@value2+1
  2224  02E6  084C               	movf	?_ADC_4,w
  2225  02E7  00DC               	movwf	read_ADC_channels@value2
  2226                           
  2227                           ;comm.c: 86: value3 = ADC_5();
  2228  02E8  239A               	fcall	_ADC_5
  2229  02E9  0020               	movlb	0	; select bank0
  2230  02EA  084D               	movf	?_ADC_5+1,w
  2231  02EB  00DF               	movwf	read_ADC_channels@value3+1
  2232  02EC  084C               	movf	?_ADC_5,w
  2233  02ED  00DE               	movwf	read_ADC_channels@value3
  2234                           
  2235                           ;comm.c: 87: { ADCON0 = 0b00100100;};
  2236  02EE  3024               	movlw	36
  2237  02EF  0021               	movlb	1	; select bank1
  2238  02F0  009D               	movwf	29	;volatile
  2239                           
  2240                           ;comm.c: 89: aux[0] = 'm';
  2241  02F1  306D               	movlw	109
  2242  02F2  0020               	movlb	0	; select bank0
  2243  02F3  00D2               	movwf	??_read_ADC_channels
  2244  02F4  0852               	movf	??_read_ADC_channels,w
  2245  02F5  00D3               	movwf	read_ADC_channels@aux
  2246                           
  2247                           ;comm.c: 90: aux[1] = (unsigned char)(value1 & 0xff);
  2248  02F6  085A               	movf	read_ADC_channels@value1,w
  2249  02F7  00D2               	movwf	??_read_ADC_channels
  2250  02F8  0852               	movf	??_read_ADC_channels,w
  2251  02F9  00D4               	movwf	read_ADC_channels@aux+1
  2252                           
  2253                           ;comm.c: 91: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  2254  02FA  085B               	movf	read_ADC_channels@value1+1,w
  2255  02FB  00D2               	movwf	??_read_ADC_channels
  2256  02FC  0852               	movf	??_read_ADC_channels,w
  2257  02FD  00D5               	movwf	read_ADC_channels@aux+2
  2258                           
  2259                           ;comm.c: 92: aux[3] = (unsigned char)(value2 & 0xff);
  2260  02FE  085C               	movf	read_ADC_channels@value2,w
  2261  02FF  00D2               	movwf	??_read_ADC_channels
  2262  0300  0852               	movf	??_read_ADC_channels,w
  2263  0301  00D6               	movwf	read_ADC_channels@aux+3
  2264                           
  2265                           ;comm.c: 93: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  2266  0302  085D               	movf	read_ADC_channels@value2+1,w
  2267  0303  00D2               	movwf	??_read_ADC_channels
  2268  0304  0852               	movf	??_read_ADC_channels,w
  2269  0305  00D7               	movwf	read_ADC_channels@aux+4
  2270                           
  2271                           ;comm.c: 94: aux[5] = (unsigned char)(value3 & 0xff);
  2272  0306  085E               	movf	read_ADC_channels@value3,w
  2273  0307  00D2               	movwf	??_read_ADC_channels
  2274  0308  0852               	movf	??_read_ADC_channels,w
  2275  0309  00D8               	movwf	read_ADC_channels@aux+5
  2276                           
  2277                           ;comm.c: 95: aux[6] = (unsigned char)((value3 >> 8) & 0xff);
  2278  030A  085F               	movf	read_ADC_channels@value3+1,w
  2279  030B  00D2               	movwf	??_read_ADC_channels
  2280  030C  0852               	movf	??_read_ADC_channels,w
  2281  030D  00D9               	movwf	read_ADC_channels@aux+6
  2282                           
  2283                           ;comm.c: 97: lputs_ISR(aux,7);
  2284  030E  3007               	movlw	7
  2285  030F  00D2               	movwf	??_read_ADC_channels
  2286  0310  0852               	movf	??_read_ADC_channels,w
  2287  0311  00CC               	movwf	lputs_ISR@length
  2288  0312  3053               	movlw	(low (read_ADC_channels@aux| 0))& (0+255)
  2289  0313  2346               	fcall	_lputs_ISR
  2290  0314  0008               	return
  2291  0315                     __end_of_read_ADC_channels:	
  2292                           
  2293                           	psect	text8
  2294  039A                     __ptext8:	
  2295 ;; *************** function _ADC_5 *****************
  2296 ;; Defined at:
  2297 ;;		line 48 in file "ADC1823.c"
  2298 ;; Parameters:    Size  Location     Type
  2299 ;;		None
  2300 ;; Auto vars:     Size  Location     Type
  2301 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  2302 ;; Return value:  Size  Location     Type
  2303 ;;                  2    0[BANK0 ] unsigned short 
  2304 ;; Registers used:
  2305 ;;		wreg
  2306 ;; Tracked objects:
  2307 ;;		On entry : 0/0
  2308 ;;		On exit  : 0/0
  2309 ;;		Unchanged: 0/0
  2310 ;; Data sizes:     COMMON   BANK0   BANK1
  2311 ;;      Params:         0       2       0
  2312 ;;      Locals:         0       2       0
  2313 ;;      Temps:          0       2       0
  2314 ;;      Totals:         0       6       0
  2315 ;;Total ram usage:        6 bytes
  2316 ;; Hardware stack levels used:    1
  2317 ;; Hardware stack levels required when called:    2
  2318 ;; This function calls:
  2319 ;;		Nothing
  2320 ;; This function is called by:
  2321 ;;		_read_ADC_channels
  2322 ;; This function uses a non-reentrant model
  2323 ;;
  2324                           
  2325                           
  2326                           ;psect for function _ADC_5
  2327  039A                     _ADC_5:	
  2328                           
  2329                           ;ADC1823.c: 50: unsigned short ADC_value;
  2330                           ;ADC1823.c: 52: { ADCON0 = 0b00010101;};
  2331                           
  2332                           ;incstack = 0
  2333                           ; Regs used in _ADC_5: [wreg]
  2334  039A  3015               	movlw	21
  2335  039B  0021               	movlb	1	; select bank1
  2336  039C  009D               	movwf	29	;volatile
  2337                           
  2338                           ;ADC1823.c: 53: __nop();
  2339  039D  0000               	nop
  2340                           
  2341                           ;ADC1823.c: 54: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  2342  039E  0021               	movlb	1	; select bank1
  2343  039F  149D               	bsf	29,1	;volatile
  2344  03A0                     l376:	
  2345  03A0  189D               	btfsc	29,1	;volatile
  2346  03A1  2BA0               	goto	l376
  2347  03A2  081C               	movf	28,w	;volatile
  2348  03A3  0020               	movlb	0	; select bank0
  2349  03A4  00CE               	movwf	??_ADC_5
  2350  03A5  01CF               	clrf	??_ADC_5+1
  2351  03A6  084E               	movf	??_ADC_5,w
  2352  03A7  00D0               	movwf	ADC_5@ADC_value
  2353  03A8  084F               	movf	??_ADC_5+1,w
  2354  03A9  00D1               	movwf	ADC_5@ADC_value+1
  2355  03AA  3008               	movlw	8
  2356  03AB                     u945:	
  2357  03AB  35D0               	lslf	ADC_5@ADC_value,f
  2358  03AC  0DD1               	rlf	ADC_5@ADC_value+1,f
  2359  03AD  0B89               	decfsz	9,f
  2360  03AE  2BAB               	goto	u945
  2361  03AF  0021               	movlb	1	; select bank1
  2362  03B0  081B               	movf	27,w	;volatile
  2363  03B1  0020               	movlb	0	; select bank0
  2364  03B2  00CE               	movwf	??_ADC_5
  2365  03B3  01CF               	clrf	??_ADC_5+1
  2366  03B4  084E               	movf	??_ADC_5,w
  2367  03B5  04D0               	iorwf	ADC_5@ADC_value,f
  2368  03B6  084F               	movf	??_ADC_5+1,w
  2369  03B7  04D1               	iorwf	ADC_5@ADC_value+1,f
  2370                           
  2371                           ;ADC1823.c: 55: return ADC_value;
  2372  03B8  0851               	movf	ADC_5@ADC_value+1,w
  2373  03B9  00CD               	movwf	?_ADC_5+1
  2374  03BA  0850               	movf	ADC_5@ADC_value,w
  2375  03BB  00CC               	movwf	?_ADC_5
  2376  03BC  0008               	return
  2377  03BD                     __end_of_ADC_5:	
  2378                           
  2379                           	psect	text9
  2380  0248                     __ptext9:	
  2381 ;; *************** function _measure_Offset *****************
  2382 ;; Defined at:
  2383 ;;		line 250 in file "comm.c"
  2384 ;; Parameters:    Size  Location     Type
  2385 ;;		None
  2386 ;; Auto vars:     Size  Location     Type
  2387 ;;  asic            6   19[BANK0 ] struct .
  2388 ;;  aux             5   10[BANK0 ] unsigned char [5]
  2389 ;;  value2          2   17[BANK0 ] unsigned short 
  2390 ;;  value1          2   15[BANK0 ] unsigned short 
  2391 ;; Return value:  Size  Location     Type
  2392 ;;                  1    wreg      void 
  2393 ;; Registers used:
  2394 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2395 ;; Tracked objects:
  2396 ;;		On entry : 0/0
  2397 ;;		On exit  : 0/0
  2398 ;;		Unchanged: 0/0
  2399 ;; Data sizes:     COMMON   BANK0   BANK1
  2400 ;;      Params:         0       0       0
  2401 ;;      Locals:         0      15       0
  2402 ;;      Temps:          0       1       0
  2403 ;;      Totals:         0      16       0
  2404 ;;Total ram usage:       16 bytes
  2405 ;; Hardware stack levels used:    1
  2406 ;; Hardware stack levels required when called:    4
  2407 ;; This function calls:
  2408 ;;		_ADC_2
  2409 ;;		_ADC_4
  2410 ;;		_VIN_config
  2411 ;;		_lputs_ISR
  2412 ;; This function is called by:
  2413 ;;		_mess_handler
  2414 ;; This function uses a non-reentrant model
  2415 ;;
  2416                           
  2417                           
  2418                           ;psect for function _measure_Offset
  2419  0248                     _measure_Offset:	
  2420                           
  2421                           ;comm.c: 252: unsigned char aux[5];
  2422                           ;comm.c: 253: unsigned short value1,value2;
  2423                           ;comm.c: 258: VIN asic;
  2424                           ;comm.c: 262: aux[0] = 'o';
  2425                           
  2426                           ;incstack = 0
  2427                           ; Regs used in _measure_Offset: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2428  0248  306F               	movlw	111
  2429  0249  0020               	movlb	0	; select bank0
  2430  024A  00D5               	movwf	??_measure_Offset
  2431  024B  0855               	movf	??_measure_Offset,w
  2432  024C  00D6               	movwf	measure_Offset@aux
  2433                           
  2434                           ;comm.c: 273: asic.data[0] = mess_rec[1];
  2435  024D  0843               	movf	_mess_rec+1,w	;volatile
  2436  024E  00D5               	movwf	??_measure_Offset
  2437  024F  0855               	movf	??_measure_Offset,w
  2438  0250  00DF               	movwf	measure_Offset@asic
  2439                           
  2440                           ;comm.c: 274: asic.data[1] = mess_rec[2];
  2441  0251  0844               	movf	_mess_rec+2,w	;volatile
  2442  0252  00D5               	movwf	??_measure_Offset
  2443  0253  0855               	movf	??_measure_Offset,w
  2444  0254  00E0               	movwf	measure_Offset@asic+1
  2445                           
  2446                           ;comm.c: 275: asic.data[2] = mess_rec[3];
  2447  0255  0845               	movf	_mess_rec+3,w	;volatile
  2448  0256  00D5               	movwf	??_measure_Offset
  2449  0257  0855               	movf	??_measure_Offset,w
  2450  0258  00E1               	movwf	measure_Offset@asic+2
  2451                           
  2452                           ;comm.c: 276: asic.data[3] = mess_rec[4];
  2453  0259  0846               	movf	_mess_rec+4,w	;volatile
  2454  025A  00D5               	movwf	??_measure_Offset
  2455  025B  0855               	movf	??_measure_Offset,w
  2456  025C  00E2               	movwf	measure_Offset@asic+3
  2457                           
  2458                           ;comm.c: 277: asic.data[4] = mess_rec[5];
  2459  025D  0847               	movf	_mess_rec+5,w	;volatile
  2460  025E  00D5               	movwf	??_measure_Offset
  2461  025F  0855               	movf	??_measure_Offset,w
  2462  0260  00E3               	movwf	measure_Offset@asic+4
  2463                           
  2464                           ;comm.c: 279: asic.data_bits.CE = 0;
  2465  0261  135F               	bcf	measure_Offset@asic,6
  2466                           
  2467                           ;comm.c: 280: VIN_config(asic);
  2468  0262  305F               	movlw	low measure_Offset@asic
  2469  0263  0086               	movwf	6
  2470  0264  3000               	movlw	high measure_Offset@asic
  2471  0265  0087               	movwf	7
  2472  0266  304C               	movlw	low VIN_config@conf
  2473  0267  0084               	movwf	4
  2474  0268  3000               	movlw	high VIN_config@conf
  2475  0269  0085               	movwf	5
  2476  026A  3F40               	moviw [0]fsr1
  2477  026B  3F80               	movwi [0]fsr0
  2478  026C  3F41               	moviw [1]fsr1
  2479  026D  3F81               	movwi [1]fsr0
  2480  026E  3F42               	moviw [2]fsr1
  2481  026F  3F82               	movwi [2]fsr0
  2482  0270  3F43               	moviw [3]fsr1
  2483  0271  3F83               	movwi [3]fsr0
  2484  0272  3F44               	moviw [4]fsr1
  2485  0273  3F84               	movwi [4]fsr0
  2486  0274  3F45               	moviw [5]fsr1
  2487  0275  3F85               	movwi [5]fsr0
  2488  0276  2127               	fcall	_VIN_config
  2489                           
  2490                           ;comm.c: 283: _delay((unsigned long)((10)*(500000/4000.0)));
  2491  0277  30FA               	movlw	250
  2492  0278                     u1007:	
  2493  0278  3200               	nop2
  2494  0279  0B89               	decfsz	9,f
  2495  027A  2A78               	goto	u1007
  2496                           
  2497                           ;comm.c: 285: value1 = ADC_2();
  2498  027B  23E0               	fcall	_ADC_2
  2499  027C  0020               	movlb	0	; select bank0
  2500  027D  084D               	movf	?_ADC_2+1,w
  2501  027E  00DC               	movwf	measure_Offset@value1+1
  2502  027F  084C               	movf	?_ADC_2,w
  2503  0280  00DB               	movwf	measure_Offset@value1
  2504                           
  2505                           ;comm.c: 286: value2 = ADC_4();
  2506  0281  23BD               	fcall	_ADC_4
  2507  0282  0020               	movlb	0	; select bank0
  2508  0283  084D               	movf	?_ADC_4+1,w
  2509  0284  00DE               	movwf	measure_Offset@value2+1
  2510  0285  084C               	movf	?_ADC_4,w
  2511  0286  00DD               	movwf	measure_Offset@value2
  2512                           
  2513                           ;comm.c: 288: aux[1] = (unsigned char)(value1 & 0xff);
  2514  0287  085B               	movf	measure_Offset@value1,w
  2515  0288  00D5               	movwf	??_measure_Offset
  2516  0289  0855               	movf	??_measure_Offset,w
  2517  028A  00D7               	movwf	measure_Offset@aux+1
  2518                           
  2519                           ;comm.c: 289: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  2520  028B  085C               	movf	measure_Offset@value1+1,w
  2521  028C  00D5               	movwf	??_measure_Offset
  2522  028D  0855               	movf	??_measure_Offset,w
  2523  028E  00D8               	movwf	measure_Offset@aux+2
  2524                           
  2525                           ;comm.c: 290: aux[3] = (unsigned char)(value2 & 0xff);
  2526  028F  085D               	movf	measure_Offset@value2,w
  2527  0290  00D5               	movwf	??_measure_Offset
  2528  0291  0855               	movf	??_measure_Offset,w
  2529  0292  00D9               	movwf	measure_Offset@aux+3
  2530                           
  2531                           ;comm.c: 291: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  2532  0293  085E               	movf	measure_Offset@value2+1,w
  2533  0294  00D5               	movwf	??_measure_Offset
  2534  0295  0855               	movf	??_measure_Offset,w
  2535  0296  00DA               	movwf	measure_Offset@aux+4
  2536                           
  2537                           ;comm.c: 294: lputs_ISR(aux,5);
  2538  0297  3005               	movlw	5
  2539  0298  00D5               	movwf	??_measure_Offset
  2540  0299  0855               	movf	??_measure_Offset,w
  2541  029A  00CC               	movwf	lputs_ISR@length
  2542  029B  3056               	movlw	(low (measure_Offset@aux| 0))& (0+255)
  2543  029C  2346               	fcall	_lputs_ISR
  2544  029D  0008               	return
  2545  029E                     __end_of_measure_Offset:	
  2546                           
  2547                           	psect	text10
  2548  01BB                     __ptext10:	
  2549 ;; *************** function _measure_Impedance_no_offset *****************
  2550 ;; Defined at:
  2551 ;;		line 185 in file "comm.c"
  2552 ;; Parameters:    Size  Location     Type
  2553 ;;		None
  2554 ;; Auto vars:     Size  Location     Type
  2555 ;;  aux            13   10[BANK0 ] unsigned char [13]
  2556 ;;  asic            6   27[BANK0 ] struct .
  2557 ;;  value2          2   25[BANK0 ] unsigned short 
  2558 ;;  value1          2   23[BANK0 ] unsigned short 
  2559 ;;  value3          2    0        unsigned short 
  2560 ;; Return value:  Size  Location     Type
  2561 ;;                  1    wreg      void 
  2562 ;; Registers used:
  2563 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2564 ;; Tracked objects:
  2565 ;;		On entry : 0/0
  2566 ;;		On exit  : 0/0
  2567 ;;		Unchanged: 0/0
  2568 ;; Data sizes:     COMMON   BANK0   BANK1
  2569 ;;      Params:         0       0       0
  2570 ;;      Locals:         0      23       0
  2571 ;;      Temps:          0       1       0
  2572 ;;      Totals:         0      24       0
  2573 ;;Total ram usage:       24 bytes
  2574 ;; Hardware stack levels used:    1
  2575 ;; Hardware stack levels required when called:    4
  2576 ;; This function calls:
  2577 ;;		_ADC_2
  2578 ;;		_ADC_4
  2579 ;;		_VIN_config
  2580 ;;		_lputs_ISR
  2581 ;; This function is called by:
  2582 ;;		_mess_handler
  2583 ;; This function uses a non-reentrant model
  2584 ;;
  2585                           
  2586                           
  2587                           ;psect for function _measure_Impedance_no_offset
  2588  01BB                     _measure_Impedance_no_offset:	
  2589                           
  2590                           ;comm.c: 187: unsigned char aux[13];
  2591                           ;comm.c: 188: unsigned short value1,value2,value3;
  2592                           ;comm.c: 193: VIN asic;
  2593                           ;comm.c: 196: aux[0] = 'y';
  2594                           
  2595                           ;incstack = 0
  2596                           ; Regs used in _measure_Impedance_no_offset: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  2597  01BB  3079               	movlw	121
  2598  01BC  0020               	movlb	0	; select bank0
  2599  01BD  00D5               	movwf	??_measure_Impedance_no_offset
  2600  01BE  0855               	movf	??_measure_Impedance_no_offset,w
  2601  01BF  00D6               	movwf	measure_Impedance_no_offset@aux
  2602                           
  2603                           ;comm.c: 202: asic.data[0] = mess_rec[1];
  2604  01C0  0843               	movf	_mess_rec+1,w	;volatile
  2605  01C1  00D5               	movwf	??_measure_Impedance_no_offset
  2606  01C2  0855               	movf	??_measure_Impedance_no_offset,w
  2607  01C3  00E7               	movwf	measure_Impedance_no_offset@asic
  2608                           
  2609                           ;comm.c: 203: asic.data[1] = mess_rec[2];
  2610  01C4  0844               	movf	_mess_rec+2,w	;volatile
  2611  01C5  00D5               	movwf	??_measure_Impedance_no_offset
  2612  01C6  0855               	movf	??_measure_Impedance_no_offset,w
  2613  01C7  00E8               	movwf	measure_Impedance_no_offset@asic+1
  2614                           
  2615                           ;comm.c: 204: asic.data[2] = mess_rec[3];
  2616  01C8  0845               	movf	_mess_rec+3,w	;volatile
  2617  01C9  00D5               	movwf	??_measure_Impedance_no_offset
  2618  01CA  0855               	movf	??_measure_Impedance_no_offset,w
  2619  01CB  00E9               	movwf	measure_Impedance_no_offset@asic+2
  2620                           
  2621                           ;comm.c: 205: asic.data[3] = mess_rec[4];
  2622  01CC  0846               	movf	_mess_rec+4,w	;volatile
  2623  01CD  00D5               	movwf	??_measure_Impedance_no_offset
  2624  01CE  0855               	movf	??_measure_Impedance_no_offset,w
  2625  01CF  00EA               	movwf	measure_Impedance_no_offset@asic+3
  2626                           
  2627                           ;comm.c: 206: asic.data[4] = mess_rec[5];
  2628  01D0  0847               	movf	_mess_rec+5,w	;volatile
  2629  01D1  00D5               	movwf	??_measure_Impedance_no_offset
  2630  01D2  0855               	movf	??_measure_Impedance_no_offset,w
  2631  01D3  00EB               	movwf	measure_Impedance_no_offset@asic+4
  2632                           
  2633                           ;comm.c: 210: asic.data_bits.CE = 1;
  2634  01D4  1767               	bsf	measure_Impedance_no_offset@asic,6
  2635                           
  2636                           ;comm.c: 211: asic.data_bits.IQ = 0;
  2637  01D5  11E8               	bcf	measure_Impedance_no_offset@asic+1,3
  2638                           
  2639                           ;comm.c: 216: VIN_config(asic);
  2640  01D6  3067               	movlw	low measure_Impedance_no_offset@asic
  2641  01D7  0086               	movwf	6
  2642  01D8  3000               	movlw	high measure_Impedance_no_offset@asic
  2643  01D9  0087               	movwf	7
  2644  01DA  304C               	movlw	low VIN_config@conf
  2645  01DB  0084               	movwf	4
  2646  01DC  3000               	movlw	high VIN_config@conf
  2647  01DD  0085               	movwf	5
  2648  01DE  3F40               	moviw [0]fsr1
  2649  01DF  3F80               	movwi [0]fsr0
  2650  01E0  3F41               	moviw [1]fsr1
  2651  01E1  3F81               	movwi [1]fsr0
  2652  01E2  3F42               	moviw [2]fsr1
  2653  01E3  3F82               	movwi [2]fsr0
  2654  01E4  3F43               	moviw [3]fsr1
  2655  01E5  3F83               	movwi [3]fsr0
  2656  01E6  3F44               	moviw [4]fsr1
  2657  01E7  3F84               	movwi [4]fsr0
  2658  01E8  3F45               	moviw [5]fsr1
  2659  01E9  3F85               	movwi [5]fsr0
  2660  01EA  2127               	fcall	_VIN_config
  2661                           
  2662                           ;comm.c: 218: _delay((unsigned long)((10)*(500000/4000.0)));
  2663  01EB  30FA               	movlw	250
  2664  01EC                     u1017:	
  2665  01EC  3200               	nop2
  2666  01ED  0B89               	decfsz	9,f
  2667  01EE  29EC               	goto	u1017
  2668                           
  2669                           ;comm.c: 220: value1 = ADC_2();
  2670  01EF  23E0               	fcall	_ADC_2
  2671  01F0  0020               	movlb	0	; select bank0
  2672  01F1  084D               	movf	?_ADC_2+1,w
  2673  01F2  00E4               	movwf	measure_Impedance_no_offset@value1+1
  2674  01F3  084C               	movf	?_ADC_2,w
  2675  01F4  00E3               	movwf	measure_Impedance_no_offset@value1
  2676                           
  2677                           ;comm.c: 221: value2 = ADC_4();
  2678  01F5  23BD               	fcall	_ADC_4
  2679  01F6  0020               	movlb	0	; select bank0
  2680  01F7  084D               	movf	?_ADC_4+1,w
  2681  01F8  00E6               	movwf	measure_Impedance_no_offset@value2+1
  2682  01F9  084C               	movf	?_ADC_4,w
  2683  01FA  00E5               	movwf	measure_Impedance_no_offset@value2
  2684                           
  2685                           ;comm.c: 223: aux[1] = (unsigned char)(value1 & 0xff);
  2686  01FB  0863               	movf	measure_Impedance_no_offset@value1,w
  2687  01FC  00D5               	movwf	??_measure_Impedance_no_offset
  2688  01FD  0855               	movf	??_measure_Impedance_no_offset,w
  2689  01FE  00D7               	movwf	measure_Impedance_no_offset@aux+1
  2690                           
  2691                           ;comm.c: 224: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  2692  01FF  0864               	movf	measure_Impedance_no_offset@value1+1,w
  2693  0200  00D5               	movwf	??_measure_Impedance_no_offset
  2694  0201  0855               	movf	??_measure_Impedance_no_offset,w
  2695  0202  00D8               	movwf	measure_Impedance_no_offset@aux+2
  2696                           
  2697                           ;comm.c: 225: aux[3] = (unsigned char)(value2 & 0xff);
  2698  0203  0865               	movf	measure_Impedance_no_offset@value2,w
  2699  0204  00D5               	movwf	??_measure_Impedance_no_offset
  2700  0205  0855               	movf	??_measure_Impedance_no_offset,w
  2701  0206  00D9               	movwf	measure_Impedance_no_offset@aux+3
  2702                           
  2703                           ;comm.c: 226: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  2704  0207  0866               	movf	measure_Impedance_no_offset@value2+1,w
  2705  0208  00D5               	movwf	??_measure_Impedance_no_offset
  2706  0209  0855               	movf	??_measure_Impedance_no_offset,w
  2707  020A  00DA               	movwf	measure_Impedance_no_offset@aux+4
  2708                           
  2709                           ;comm.c: 229: asic.data_bits.IQ = 1;
  2710  020B  15E8               	bsf	measure_Impedance_no_offset@asic+1,3
  2711                           
  2712                           ;comm.c: 234: VIN_config(asic);
  2713  020C  3067               	movlw	low measure_Impedance_no_offset@asic
  2714  020D  0086               	movwf	6
  2715  020E  3000               	movlw	high measure_Impedance_no_offset@asic
  2716  020F  0087               	movwf	7
  2717  0210  304C               	movlw	low VIN_config@conf
  2718  0211  0084               	movwf	4
  2719  0212  3000               	movlw	high VIN_config@conf
  2720  0213  0085               	movwf	5
  2721  0214  3F40               	moviw [0]fsr1
  2722  0215  3F80               	movwi [0]fsr0
  2723  0216  3F41               	moviw [1]fsr1
  2724  0217  3F81               	movwi [1]fsr0
  2725  0218  3F42               	moviw [2]fsr1
  2726  0219  3F82               	movwi [2]fsr0
  2727  021A  3F43               	moviw [3]fsr1
  2728  021B  3F83               	movwi [3]fsr0
  2729  021C  3F44               	moviw [4]fsr1
  2730  021D  3F84               	movwi [4]fsr0
  2731  021E  3F45               	moviw [5]fsr1
  2732  021F  3F85               	movwi [5]fsr0
  2733  0220  2127               	fcall	_VIN_config
  2734                           
  2735                           ;comm.c: 236: _delay((unsigned long)((10)*(500000/4000.0)));
  2736  0221  30FA               	movlw	250
  2737  0222                     u1027:	
  2738  0222  3200               	nop2
  2739  0223  0B89               	decfsz	9,f
  2740  0224  2A22               	goto	u1027
  2741                           
  2742                           ;comm.c: 238: value1 = ADC_2();
  2743  0225  23E0               	fcall	_ADC_2
  2744  0226  0020               	movlb	0	; select bank0
  2745  0227  084D               	movf	?_ADC_2+1,w
  2746  0228  00E4               	movwf	measure_Impedance_no_offset@value1+1
  2747  0229  084C               	movf	?_ADC_2,w
  2748  022A  00E3               	movwf	measure_Impedance_no_offset@value1
  2749                           
  2750                           ;comm.c: 239: value2 = ADC_4();
  2751  022B  23BD               	fcall	_ADC_4
  2752  022C  0020               	movlb	0	; select bank0
  2753  022D  084D               	movf	?_ADC_4+1,w
  2754  022E  00E6               	movwf	measure_Impedance_no_offset@value2+1
  2755  022F  084C               	movf	?_ADC_4,w
  2756  0230  00E5               	movwf	measure_Impedance_no_offset@value2
  2757                           
  2758                           ;comm.c: 241: aux[5] = (unsigned char)(value1 & 0xff);
  2759  0231  0863               	movf	measure_Impedance_no_offset@value1,w
  2760  0232  00D5               	movwf	??_measure_Impedance_no_offset
  2761  0233  0855               	movf	??_measure_Impedance_no_offset,w
  2762  0234  00DB               	movwf	measure_Impedance_no_offset@aux+5
  2763                           
  2764                           ;comm.c: 242: aux[6] = (unsigned char)((value1 >> 8) & 0xff);
  2765  0235  0864               	movf	measure_Impedance_no_offset@value1+1,w
  2766  0236  00D5               	movwf	??_measure_Impedance_no_offset
  2767  0237  0855               	movf	??_measure_Impedance_no_offset,w
  2768  0238  00DC               	movwf	measure_Impedance_no_offset@aux+6
  2769                           
  2770                           ;comm.c: 243: aux[7] = (unsigned char)(value2 & 0xff);
  2771  0239  0865               	movf	measure_Impedance_no_offset@value2,w
  2772  023A  00D5               	movwf	??_measure_Impedance_no_offset
  2773  023B  0855               	movf	??_measure_Impedance_no_offset,w
  2774  023C  00DD               	movwf	measure_Impedance_no_offset@aux+7
  2775                           
  2776                           ;comm.c: 244: aux[8] = (unsigned char)((value2 >> 8) & 0xff);
  2777  023D  0866               	movf	measure_Impedance_no_offset@value2+1,w
  2778  023E  00D5               	movwf	??_measure_Impedance_no_offset
  2779  023F  0855               	movf	??_measure_Impedance_no_offset,w
  2780  0240  00DE               	movwf	measure_Impedance_no_offset@aux+8
  2781                           
  2782                           ;comm.c: 247: lputs_ISR(aux,9);
  2783  0241  3009               	movlw	9
  2784  0242  00D5               	movwf	??_measure_Impedance_no_offset
  2785  0243  0855               	movf	??_measure_Impedance_no_offset,w
  2786  0244  00CC               	movwf	lputs_ISR@length
  2787  0245  3056               	movlw	(low (measure_Impedance_no_offset@aux| 0))& (0+255)
  2788  0246  2346               	fcall	_lputs_ISR
  2789  0247  0008               	return
  2790  0248                     __end_of_measure_Impedance_no_offset:	
  2791                           
  2792                           	psect	text11
  2793  0064                     __ptext11:	
  2794 ;; *************** function _measure_Impedance *****************
  2795 ;; Defined at:
  2796 ;;		line 100 in file "comm.c"
  2797 ;; Parameters:    Size  Location     Type
  2798 ;;		None
  2799 ;; Auto vars:     Size  Location     Type
  2800 ;;  aux            13   10[BANK0 ] unsigned char [13]
  2801 ;;  asic            6   27[BANK0 ] struct .
  2802 ;;  value2          2   25[BANK0 ] unsigned short 
  2803 ;;  value1          2   23[BANK0 ] unsigned short 
  2804 ;;  value3          2    0        unsigned short 
  2805 ;; Return value:  Size  Location     Type
  2806 ;;                  1    wreg      void 
  2807 ;; Registers used:
  2808 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2809 ;; Tracked objects:
  2810 ;;		On entry : 0/0
  2811 ;;		On exit  : 0/0
  2812 ;;		Unchanged: 0/0
  2813 ;; Data sizes:     COMMON   BANK0   BANK1
  2814 ;;      Params:         0       0       0
  2815 ;;      Locals:         0      23       0
  2816 ;;      Temps:          0       1       0
  2817 ;;      Totals:         0      24       0
  2818 ;;Total ram usage:       24 bytes
  2819 ;; Hardware stack levels used:    1
  2820 ;; Hardware stack levels required when called:    4
  2821 ;; This function calls:
  2822 ;;		_ADC_2
  2823 ;;		_ADC_4
  2824 ;;		_VIN_config
  2825 ;;		_lputs_ISR
  2826 ;; This function is called by:
  2827 ;;		_mess_handler
  2828 ;; This function uses a non-reentrant model
  2829 ;;
  2830                           
  2831                           
  2832                           ;psect for function _measure_Impedance
  2833  0064                     _measure_Impedance:	
  2834                           
  2835                           ;comm.c: 102: unsigned char aux[13];
  2836                           ;comm.c: 103: unsigned short value1,value2,value3;
  2837                           ;comm.c: 108: VIN asic;
  2838                           ;comm.c: 112: aux[0] = 'z';
  2839                           
  2840                           ;incstack = 0
  2841                           ; Regs used in _measure_Impedance: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2842  0064  307A               	movlw	122
  2843  0065  0020               	movlb	0	; select bank0
  2844  0066  00D5               	movwf	??_measure_Impedance
  2845  0067  0855               	movf	??_measure_Impedance,w
  2846  0068  00D6               	movwf	measure_Impedance@aux
  2847                           
  2848                           ;comm.c: 124: asic.data[0] = mess_rec[1];
  2849  0069  0843               	movf	_mess_rec+1,w	;volatile
  2850  006A  00D5               	movwf	??_measure_Impedance
  2851  006B  0855               	movf	??_measure_Impedance,w
  2852  006C  00E7               	movwf	measure_Impedance@asic
  2853                           
  2854                           ;comm.c: 125: asic.data[1] = mess_rec[2];
  2855  006D  0844               	movf	_mess_rec+2,w	;volatile
  2856  006E  00D5               	movwf	??_measure_Impedance
  2857  006F  0855               	movf	??_measure_Impedance,w
  2858  0070  00E8               	movwf	measure_Impedance@asic+1
  2859                           
  2860                           ;comm.c: 126: asic.data[2] = mess_rec[3];
  2861  0071  0845               	movf	_mess_rec+3,w	;volatile
  2862  0072  00D5               	movwf	??_measure_Impedance
  2863  0073  0855               	movf	??_measure_Impedance,w
  2864  0074  00E9               	movwf	measure_Impedance@asic+2
  2865                           
  2866                           ;comm.c: 127: asic.data[3] = mess_rec[4];
  2867  0075  0846               	movf	_mess_rec+4,w	;volatile
  2868  0076  00D5               	movwf	??_measure_Impedance
  2869  0077  0855               	movf	??_measure_Impedance,w
  2870  0078  00EA               	movwf	measure_Impedance@asic+3
  2871                           
  2872                           ;comm.c: 128: asic.data[4] = mess_rec[5];
  2873  0079  0847               	movf	_mess_rec+5,w	;volatile
  2874  007A  00D5               	movwf	??_measure_Impedance
  2875  007B  0855               	movf	??_measure_Impedance,w
  2876  007C  00EB               	movwf	measure_Impedance@asic+4
  2877                           
  2878                           ;comm.c: 130: asic.data_bits.CE = 0;
  2879  007D  1367               	bcf	measure_Impedance@asic,6
  2880                           
  2881                           ;comm.c: 131: VIN_config(asic);
  2882  007E  3067               	movlw	low measure_Impedance@asic
  2883  007F  0086               	movwf	6
  2884  0080  3000               	movlw	high measure_Impedance@asic
  2885  0081  0087               	movwf	7
  2886  0082  304C               	movlw	low VIN_config@conf
  2887  0083  0084               	movwf	4
  2888  0084  3000               	movlw	high VIN_config@conf
  2889  0085  0085               	movwf	5
  2890  0086  3F40               	moviw [0]fsr1
  2891  0087  3F80               	movwi [0]fsr0
  2892  0088  3F41               	moviw [1]fsr1
  2893  0089  3F81               	movwi [1]fsr0
  2894  008A  3F42               	moviw [2]fsr1
  2895  008B  3F82               	movwi [2]fsr0
  2896  008C  3F43               	moviw [3]fsr1
  2897  008D  3F83               	movwi [3]fsr0
  2898  008E  3F44               	moviw [4]fsr1
  2899  008F  3F84               	movwi [4]fsr0
  2900  0090  3F45               	moviw [5]fsr1
  2901  0091  3F85               	movwi [5]fsr0
  2902  0092  2127               	fcall	_VIN_config
  2903                           
  2904                           ;comm.c: 134: _delay((unsigned long)((10)*(500000/4000.0)));
  2905  0093  30FA               	movlw	250
  2906  0094                     u1037:	
  2907  0094  3200               	nop2
  2908  0095  0B89               	decfsz	9,f
  2909  0096  2894               	goto	u1037
  2910                           
  2911                           ;comm.c: 136: value1 = ADC_2();
  2912  0097  23E0               	fcall	_ADC_2
  2913  0098  0020               	movlb	0	; select bank0
  2914  0099  084D               	movf	?_ADC_2+1,w
  2915  009A  00E4               	movwf	measure_Impedance@value1+1
  2916  009B  084C               	movf	?_ADC_2,w
  2917  009C  00E3               	movwf	measure_Impedance@value1
  2918                           
  2919                           ;comm.c: 137: value2 = ADC_4();
  2920  009D  23BD               	fcall	_ADC_4
  2921  009E  0020               	movlb	0	; select bank0
  2922  009F  084D               	movf	?_ADC_4+1,w
  2923  00A0  00E6               	movwf	measure_Impedance@value2+1
  2924  00A1  084C               	movf	?_ADC_4,w
  2925  00A2  00E5               	movwf	measure_Impedance@value2
  2926                           
  2927                           ;comm.c: 139: aux[1] = (unsigned char)(value1 & 0xff);
  2928  00A3  0863               	movf	measure_Impedance@value1,w
  2929  00A4  00D5               	movwf	??_measure_Impedance
  2930  00A5  0855               	movf	??_measure_Impedance,w
  2931  00A6  00D7               	movwf	measure_Impedance@aux+1
  2932                           
  2933                           ;comm.c: 140: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  2934  00A7  0864               	movf	measure_Impedance@value1+1,w
  2935  00A8  00D5               	movwf	??_measure_Impedance
  2936  00A9  0855               	movf	??_measure_Impedance,w
  2937  00AA  00D8               	movwf	measure_Impedance@aux+2
  2938                           
  2939                           ;comm.c: 141: aux[3] = (unsigned char)(value2 & 0xff);
  2940  00AB  0865               	movf	measure_Impedance@value2,w
  2941  00AC  00D5               	movwf	??_measure_Impedance
  2942  00AD  0855               	movf	??_measure_Impedance,w
  2943  00AE  00D9               	movwf	measure_Impedance@aux+3
  2944                           
  2945                           ;comm.c: 142: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  2946  00AF  0866               	movf	measure_Impedance@value2+1,w
  2947  00B0  00D5               	movwf	??_measure_Impedance
  2948  00B1  0855               	movf	??_measure_Impedance,w
  2949  00B2  00DA               	movwf	measure_Impedance@aux+4
  2950                           
  2951                           ;comm.c: 145: asic.data_bits.CE = 1;
  2952  00B3  1767               	bsf	measure_Impedance@asic,6
  2953                           
  2954                           ;comm.c: 146: asic.data_bits.IQ = 0;
  2955  00B4  11E8               	bcf	measure_Impedance@asic+1,3
  2956                           
  2957                           ;comm.c: 151: VIN_config(asic);
  2958  00B5  3067               	movlw	low measure_Impedance@asic
  2959  00B6  0086               	movwf	6
  2960  00B7  3000               	movlw	high measure_Impedance@asic
  2961  00B8  0087               	movwf	7
  2962  00B9  304C               	movlw	low VIN_config@conf
  2963  00BA  0084               	movwf	4
  2964  00BB  3000               	movlw	high VIN_config@conf
  2965  00BC  0085               	movwf	5
  2966  00BD  3F40               	moviw [0]fsr1
  2967  00BE  3F80               	movwi [0]fsr0
  2968  00BF  3F41               	moviw [1]fsr1
  2969  00C0  3F81               	movwi [1]fsr0
  2970  00C1  3F42               	moviw [2]fsr1
  2971  00C2  3F82               	movwi [2]fsr0
  2972  00C3  3F43               	moviw [3]fsr1
  2973  00C4  3F83               	movwi [3]fsr0
  2974  00C5  3F44               	moviw [4]fsr1
  2975  00C6  3F84               	movwi [4]fsr0
  2976  00C7  3F45               	moviw [5]fsr1
  2977  00C8  3F85               	movwi [5]fsr0
  2978  00C9  2127               	fcall	_VIN_config
  2979                           
  2980                           ;comm.c: 153: _delay((unsigned long)((10)*(500000/4000.0)));
  2981  00CA  30FA               	movlw	250
  2982  00CB                     u1047:	
  2983  00CB  3200               	nop2
  2984  00CC  0B89               	decfsz	9,f
  2985  00CD  28CB               	goto	u1047
  2986                           
  2987                           ;comm.c: 155: value1 = ADC_2();
  2988  00CE  23E0               	fcall	_ADC_2
  2989  00CF  0020               	movlb	0	; select bank0
  2990  00D0  084D               	movf	?_ADC_2+1,w
  2991  00D1  00E4               	movwf	measure_Impedance@value1+1
  2992  00D2  084C               	movf	?_ADC_2,w
  2993  00D3  00E3               	movwf	measure_Impedance@value1
  2994                           
  2995                           ;comm.c: 156: value2 = ADC_4();
  2996  00D4  23BD               	fcall	_ADC_4
  2997  00D5  0020               	movlb	0	; select bank0
  2998  00D6  084D               	movf	?_ADC_4+1,w
  2999  00D7  00E6               	movwf	measure_Impedance@value2+1
  3000  00D8  084C               	movf	?_ADC_4,w
  3001  00D9  00E5               	movwf	measure_Impedance@value2
  3002                           
  3003                           ;comm.c: 158: aux[5] = (unsigned char)(value1 & 0xff);
  3004  00DA  0863               	movf	measure_Impedance@value1,w
  3005  00DB  00D5               	movwf	??_measure_Impedance
  3006  00DC  0855               	movf	??_measure_Impedance,w
  3007  00DD  00DB               	movwf	measure_Impedance@aux+5
  3008                           
  3009                           ;comm.c: 159: aux[6] = (unsigned char)((value1 >> 8) & 0xff);
  3010  00DE  0864               	movf	measure_Impedance@value1+1,w
  3011  00DF  00D5               	movwf	??_measure_Impedance
  3012  00E0  0855               	movf	??_measure_Impedance,w
  3013  00E1  00DC               	movwf	measure_Impedance@aux+6
  3014                           
  3015                           ;comm.c: 160: aux[7] = (unsigned char)(value2 & 0xff);
  3016  00E2  0865               	movf	measure_Impedance@value2,w
  3017  00E3  00D5               	movwf	??_measure_Impedance
  3018  00E4  0855               	movf	??_measure_Impedance,w
  3019  00E5  00DD               	movwf	measure_Impedance@aux+7
  3020                           
  3021                           ;comm.c: 161: aux[8] = (unsigned char)((value2 >> 8) & 0xff);
  3022  00E6  0866               	movf	measure_Impedance@value2+1,w
  3023  00E7  00D5               	movwf	??_measure_Impedance
  3024  00E8  0855               	movf	??_measure_Impedance,w
  3025  00E9  00DE               	movwf	measure_Impedance@aux+8
  3026                           
  3027                           ;comm.c: 164: asic.data_bits.IQ = 1;
  3028  00EA  15E8               	bsf	measure_Impedance@asic+1,3
  3029                           
  3030                           ;comm.c: 169: VIN_config(asic);
  3031  00EB  3067               	movlw	low measure_Impedance@asic
  3032  00EC  0086               	movwf	6
  3033  00ED  3000               	movlw	high measure_Impedance@asic
  3034  00EE  0087               	movwf	7
  3035  00EF  304C               	movlw	low VIN_config@conf
  3036  00F0  0084               	movwf	4
  3037  00F1  3000               	movlw	high VIN_config@conf
  3038  00F2  0085               	movwf	5
  3039  00F3  3F40               	moviw [0]fsr1
  3040  00F4  3F80               	movwi [0]fsr0
  3041  00F5  3F41               	moviw [1]fsr1
  3042  00F6  3F81               	movwi [1]fsr0
  3043  00F7  3F42               	moviw [2]fsr1
  3044  00F8  3F82               	movwi [2]fsr0
  3045  00F9  3F43               	moviw [3]fsr1
  3046  00FA  3F83               	movwi [3]fsr0
  3047  00FB  3F44               	moviw [4]fsr1
  3048  00FC  3F84               	movwi [4]fsr0
  3049  00FD  3F45               	moviw [5]fsr1
  3050  00FE  3F85               	movwi [5]fsr0
  3051  00FF  2127               	fcall	_VIN_config
  3052                           
  3053                           ;comm.c: 171: _delay((unsigned long)((10)*(500000/4000.0)));
  3054  0100  30FA               	movlw	250
  3055  0101                     u1057:	
  3056  0101  3200               	nop2
  3057  0102  0B89               	decfsz	9,f
  3058  0103  2901               	goto	u1057
  3059                           
  3060                           ;comm.c: 173: value1 = ADC_2();
  3061  0104  23E0               	fcall	_ADC_2
  3062  0105  0020               	movlb	0	; select bank0
  3063  0106  084D               	movf	?_ADC_2+1,w
  3064  0107  00E4               	movwf	measure_Impedance@value1+1
  3065  0108  084C               	movf	?_ADC_2,w
  3066  0109  00E3               	movwf	measure_Impedance@value1
  3067                           
  3068                           ;comm.c: 174: value2 = ADC_4();
  3069  010A  23BD               	fcall	_ADC_4
  3070  010B  0020               	movlb	0	; select bank0
  3071  010C  084D               	movf	?_ADC_4+1,w
  3072  010D  00E6               	movwf	measure_Impedance@value2+1
  3073  010E  084C               	movf	?_ADC_4,w
  3074  010F  00E5               	movwf	measure_Impedance@value2
  3075                           
  3076                           ;comm.c: 176: aux[9] = (unsigned char)(value1 & 0xff);
  3077  0110  0863               	movf	measure_Impedance@value1,w
  3078  0111  00D5               	movwf	??_measure_Impedance
  3079  0112  0855               	movf	??_measure_Impedance,w
  3080  0113  00DF               	movwf	measure_Impedance@aux+9
  3081                           
  3082                           ;comm.c: 177: aux[10] = (unsigned char)((value1 >> 8) & 0xff);
  3083  0114  0864               	movf	measure_Impedance@value1+1,w
  3084  0115  00D5               	movwf	??_measure_Impedance
  3085  0116  0855               	movf	??_measure_Impedance,w
  3086  0117  00E0               	movwf	measure_Impedance@aux+10
  3087                           
  3088                           ;comm.c: 178: aux[11] = (unsigned char)(value2 & 0xff);
  3089  0118  0865               	movf	measure_Impedance@value2,w
  3090  0119  00D5               	movwf	??_measure_Impedance
  3091  011A  0855               	movf	??_measure_Impedance,w
  3092  011B  00E1               	movwf	measure_Impedance@aux+11
  3093                           
  3094                           ;comm.c: 179: aux[12] = (unsigned char)((value2 >> 8) & 0xff);
  3095  011C  0866               	movf	measure_Impedance@value2+1,w
  3096  011D  00D5               	movwf	??_measure_Impedance
  3097  011E  0855               	movf	??_measure_Impedance,w
  3098  011F  00E2               	movwf	measure_Impedance@aux+12
  3099                           
  3100                           ;comm.c: 182: lputs_ISR(aux,13);
  3101  0120  300D               	movlw	13
  3102  0121  00D5               	movwf	??_measure_Impedance
  3103  0122  0855               	movf	??_measure_Impedance,w
  3104  0123  00CC               	movwf	lputs_ISR@length
  3105  0124  3056               	movlw	(low (measure_Impedance@aux| 0))& (0+255)
  3106  0125  2346               	fcall	_lputs_ISR
  3107  0126  0008               	return
  3108  0127                     __end_of_measure_Impedance:	
  3109                           
  3110                           	psect	text12
  3111  03BD                     __ptext12:	
  3112 ;; *************** function _ADC_4 *****************
  3113 ;; Defined at:
  3114 ;;		line 38 in file "ADC1823.c"
  3115 ;; Parameters:    Size  Location     Type
  3116 ;;		None
  3117 ;; Auto vars:     Size  Location     Type
  3118 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  3119 ;; Return value:  Size  Location     Type
  3120 ;;                  2    0[BANK0 ] unsigned short 
  3121 ;; Registers used:
  3122 ;;		wreg
  3123 ;; Tracked objects:
  3124 ;;		On entry : 0/0
  3125 ;;		On exit  : 0/0
  3126 ;;		Unchanged: 0/0
  3127 ;; Data sizes:     COMMON   BANK0   BANK1
  3128 ;;      Params:         0       2       0
  3129 ;;      Locals:         0       2       0
  3130 ;;      Temps:          0       2       0
  3131 ;;      Totals:         0       6       0
  3132 ;;Total ram usage:        6 bytes
  3133 ;; Hardware stack levels used:    1
  3134 ;; Hardware stack levels required when called:    2
  3135 ;; This function calls:
  3136 ;;		Nothing
  3137 ;; This function is called by:
  3138 ;;		_read_ADC_channels
  3139 ;;		_measure_Impedance
  3140 ;;		_measure_Impedance_no_offset
  3141 ;;		_measure_Offset
  3142 ;; This function uses a non-reentrant model
  3143 ;;
  3144                           
  3145                           
  3146                           ;psect for function _ADC_4
  3147  03BD                     _ADC_4:	
  3148                           
  3149                           ;ADC1823.c: 40: unsigned short ADC_value;
  3150                           ;ADC1823.c: 42: { ADCON0 = 0b00010001;};
  3151                           
  3152                           ;incstack = 0
  3153                           ; Regs used in _ADC_4: [wreg]
  3154  03BD  3011               	movlw	17
  3155  03BE  0021               	movlb	1	; select bank1
  3156  03BF  009D               	movwf	29	;volatile
  3157                           
  3158                           ;ADC1823.c: 43: __nop();
  3159  03C0  0000               	nop
  3160                           
  3161                           ;ADC1823.c: 44: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  3162  03C1  0021               	movlb	1	; select bank1
  3163  03C2  149D               	bsf	29,1	;volatile
  3164  03C3                     l370:	
  3165  03C3  189D               	btfsc	29,1	;volatile
  3166  03C4  2BC3               	goto	l370
  3167  03C5  081C               	movf	28,w	;volatile
  3168  03C6  0020               	movlb	0	; select bank0
  3169  03C7  00CE               	movwf	??_ADC_4
  3170  03C8  01CF               	clrf	??_ADC_4+1
  3171  03C9  084E               	movf	??_ADC_4,w
  3172  03CA  00D0               	movwf	ADC_4@ADC_value
  3173  03CB  084F               	movf	??_ADC_4+1,w
  3174  03CC  00D1               	movwf	ADC_4@ADC_value+1
  3175  03CD  3008               	movlw	8
  3176  03CE                     u925:	
  3177  03CE  35D0               	lslf	ADC_4@ADC_value,f
  3178  03CF  0DD1               	rlf	ADC_4@ADC_value+1,f
  3179  03D0  0B89               	decfsz	9,f
  3180  03D1  2BCE               	goto	u925
  3181  03D2  0021               	movlb	1	; select bank1
  3182  03D3  081B               	movf	27,w	;volatile
  3183  03D4  0020               	movlb	0	; select bank0
  3184  03D5  00CE               	movwf	??_ADC_4
  3185  03D6  01CF               	clrf	??_ADC_4+1
  3186  03D7  084E               	movf	??_ADC_4,w
  3187  03D8  04D0               	iorwf	ADC_4@ADC_value,f
  3188  03D9  084F               	movf	??_ADC_4+1,w
  3189  03DA  04D1               	iorwf	ADC_4@ADC_value+1,f
  3190                           
  3191                           ;ADC1823.c: 45: return ADC_value;
  3192  03DB  0851               	movf	ADC_4@ADC_value+1,w
  3193  03DC  00CD               	movwf	?_ADC_4+1
  3194  03DD  0850               	movf	ADC_4@ADC_value,w
  3195  03DE  00CC               	movwf	?_ADC_4
  3196  03DF  0008               	return
  3197  03E0                     __end_of_ADC_4:	
  3198                           
  3199                           	psect	text13
  3200  03E0                     __ptext13:	
  3201 ;; *************** function _ADC_2 *****************
  3202 ;; Defined at:
  3203 ;;		line 25 in file "ADC1823.c"
  3204 ;; Parameters:    Size  Location     Type
  3205 ;;		None
  3206 ;; Auto vars:     Size  Location     Type
  3207 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  3208 ;; Return value:  Size  Location     Type
  3209 ;;                  2    0[BANK0 ] unsigned short 
  3210 ;; Registers used:
  3211 ;;		wreg
  3212 ;; Tracked objects:
  3213 ;;		On entry : 0/0
  3214 ;;		On exit  : 0/0
  3215 ;;		Unchanged: 0/0
  3216 ;; Data sizes:     COMMON   BANK0   BANK1
  3217 ;;      Params:         0       2       0
  3218 ;;      Locals:         0       2       0
  3219 ;;      Temps:          0       2       0
  3220 ;;      Totals:         0       6       0
  3221 ;;Total ram usage:        6 bytes
  3222 ;; Hardware stack levels used:    1
  3223 ;; Hardware stack levels required when called:    2
  3224 ;; This function calls:
  3225 ;;		Nothing
  3226 ;; This function is called by:
  3227 ;;		_read_ADC_channels
  3228 ;;		_measure_Impedance
  3229 ;;		_measure_Impedance_no_offset
  3230 ;;		_measure_Offset
  3231 ;; This function uses a non-reentrant model
  3232 ;;
  3233                           
  3234                           
  3235                           ;psect for function _ADC_2
  3236  03E0                     _ADC_2:	
  3237                           
  3238                           ;ADC1823.c: 27: unsigned short ADC_value;
  3239                           ;ADC1823.c: 29: { ADCON0 = 0b00001001;};
  3240                           
  3241                           ;incstack = 0
  3242                           ; Regs used in _ADC_2: [wreg]
  3243  03E0  3009               	movlw	9
  3244  03E1  0021               	movlb	1	; select bank1
  3245  03E2  009D               	movwf	29	;volatile
  3246                           
  3247                           ;ADC1823.c: 30: __nop();
  3248  03E3  0000               	nop
  3249                           
  3250                           ;ADC1823.c: 34: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  3251  03E4  0021               	movlb	1	; select bank1
  3252  03E5  149D               	bsf	29,1	;volatile
  3253  03E6                     l364:	
  3254  03E6  189D               	btfsc	29,1	;volatile
  3255  03E7  2BE6               	goto	l364
  3256  03E8  081C               	movf	28,w	;volatile
  3257  03E9  0020               	movlb	0	; select bank0
  3258  03EA  00CE               	movwf	??_ADC_2
  3259  03EB  01CF               	clrf	??_ADC_2+1
  3260  03EC  084E               	movf	??_ADC_2,w
  3261  03ED  00D0               	movwf	ADC_2@ADC_value
  3262  03EE  084F               	movf	??_ADC_2+1,w
  3263  03EF  00D1               	movwf	ADC_2@ADC_value+1
  3264  03F0  3008               	movlw	8
  3265  03F1                     u905:	
  3266  03F1  35D0               	lslf	ADC_2@ADC_value,f
  3267  03F2  0DD1               	rlf	ADC_2@ADC_value+1,f
  3268  03F3  0B89               	decfsz	9,f
  3269  03F4  2BF1               	goto	u905
  3270  03F5  0021               	movlb	1	; select bank1
  3271  03F6  081B               	movf	27,w	;volatile
  3272  03F7  0020               	movlb	0	; select bank0
  3273  03F8  00CE               	movwf	??_ADC_2
  3274  03F9  01CF               	clrf	??_ADC_2+1
  3275  03FA  084E               	movf	??_ADC_2,w
  3276  03FB  04D0               	iorwf	ADC_2@ADC_value,f
  3277  03FC  084F               	movf	??_ADC_2+1,w
  3278  03FD  04D1               	iorwf	ADC_2@ADC_value+1,f
  3279                           
  3280                           ;ADC1823.c: 35: return ADC_value;
  3281  03FE  0851               	movf	ADC_2@ADC_value+1,w
  3282  03FF  00CD               	movwf	?_ADC_2+1
  3283  0400  0850               	movf	ADC_2@ADC_value,w
  3284  0401  00CC               	movwf	?_ADC_2
  3285  0402  0008               	return
  3286  0403                     __end_of_ADC_2:	
  3287                           
  3288                           	psect	text14
  3289  0315                     __ptext14:	
  3290 ;; *************** function _config_ASIC *****************
  3291 ;; Defined at:
  3292 ;;		line 46 in file "comm.c"
  3293 ;; Parameters:    Size  Location     Type
  3294 ;;		None
  3295 ;; Auto vars:     Size  Location     Type
  3296 ;;  asic            6   10[BANK0 ] struct .
  3297 ;; Return value:  Size  Location     Type
  3298 ;;                  1    wreg      void 
  3299 ;; Registers used:
  3300 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3301 ;; Tracked objects:
  3302 ;;		On entry : 0/0
  3303 ;;		On exit  : 0/0
  3304 ;;		Unchanged: 0/0
  3305 ;; Data sizes:     COMMON   BANK0   BANK1
  3306 ;;      Params:         0       0       0
  3307 ;;      Locals:         0       6       0
  3308 ;;      Temps:          0       1       0
  3309 ;;      Totals:         0       7       0
  3310 ;;Total ram usage:        7 bytes
  3311 ;; Hardware stack levels used:    1
  3312 ;; Hardware stack levels required when called:    4
  3313 ;; This function calls:
  3314 ;;		_VIN_config
  3315 ;;		_lputs_ISR
  3316 ;; This function is called by:
  3317 ;;		_mess_handler
  3318 ;; This function uses a non-reentrant model
  3319 ;;
  3320                           
  3321                           
  3322                           ;psect for function _config_ASIC
  3323  0315                     _config_ASIC:	
  3324                           
  3325                           ;comm.c: 62: VIN asic;
  3326                           ;comm.c: 64: asic.data[0] = mess_rec[1];
  3327                           
  3328                           ;incstack = 0
  3329                           ; Regs used in _config_ASIC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3330  0315  0020               	movlb	0	; select bank0
  3331  0316  0843               	movf	_mess_rec+1,w	;volatile
  3332  0317  00D5               	movwf	??_config_ASIC
  3333  0318  0855               	movf	??_config_ASIC,w
  3334  0319  00D6               	movwf	config_ASIC@asic
  3335                           
  3336                           ;comm.c: 65: asic.data[1] = mess_rec[2];
  3337  031A  0844               	movf	_mess_rec+2,w	;volatile
  3338  031B  00D5               	movwf	??_config_ASIC
  3339  031C  0855               	movf	??_config_ASIC,w
  3340  031D  00D7               	movwf	config_ASIC@asic+1
  3341                           
  3342                           ;comm.c: 66: asic.data[2] = mess_rec[3];
  3343  031E  0845               	movf	_mess_rec+3,w	;volatile
  3344  031F  00D5               	movwf	??_config_ASIC
  3345  0320  0855               	movf	??_config_ASIC,w
  3346  0321  00D8               	movwf	config_ASIC@asic+2
  3347                           
  3348                           ;comm.c: 67: asic.data[3] = mess_rec[4];
  3349  0322  0846               	movf	_mess_rec+4,w	;volatile
  3350  0323  00D5               	movwf	??_config_ASIC
  3351  0324  0855               	movf	??_config_ASIC,w
  3352  0325  00D9               	movwf	config_ASIC@asic+3
  3353                           
  3354                           ;comm.c: 68: asic.data[4] = mess_rec[5];
  3355  0326  0847               	movf	_mess_rec+5,w	;volatile
  3356  0327  00D5               	movwf	??_config_ASIC
  3357  0328  0855               	movf	??_config_ASIC,w
  3358  0329  00DA               	movwf	config_ASIC@asic+4
  3359                           
  3360                           ;comm.c: 70: lputs_ISR(mess_rec,mess_rec_size);
  3361  032A  0841               	movf	_mess_rec_size,w	;volatile
  3362  032B  00D5               	movwf	??_config_ASIC
  3363  032C  0855               	movf	??_config_ASIC,w
  3364  032D  00CC               	movwf	lputs_ISR@length
  3365  032E  3042               	movlw	(low (_mess_rec| 0))& (0+255)
  3366  032F  2346               	fcall	_lputs_ISR
  3367                           
  3368                           ;comm.c: 72: VIN_config(asic);
  3369  0330  3056               	movlw	low config_ASIC@asic
  3370  0331  0086               	movwf	6
  3371  0332  3000               	movlw	high config_ASIC@asic
  3372  0333  0087               	movwf	7
  3373  0334  304C               	movlw	low VIN_config@conf
  3374  0335  0084               	movwf	4
  3375  0336  3000               	movlw	high VIN_config@conf
  3376  0337  0085               	movwf	5
  3377  0338  3F40               	moviw [0]fsr1
  3378  0339  3F80               	movwi [0]fsr0
  3379  033A  3F41               	moviw [1]fsr1
  3380  033B  3F81               	movwi [1]fsr0
  3381  033C  3F42               	moviw [2]fsr1
  3382  033D  3F82               	movwi [2]fsr0
  3383  033E  3F43               	moviw [3]fsr1
  3384  033F  3F83               	movwi [3]fsr0
  3385  0340  3F44               	moviw [4]fsr1
  3386  0341  3F84               	movwi [4]fsr0
  3387  0342  3F45               	moviw [5]fsr1
  3388  0343  3F85               	movwi [5]fsr0
  3389  0344  2127               	fcall	_VIN_config
  3390  0345  0008               	return
  3391  0346                     __end_of_config_ASIC:	
  3392                           
  3393                           	psect	text15
  3394  0346                     __ptext15:	
  3395 ;; *************** function _lputs_ISR *****************
  3396 ;; Defined at:
  3397 ;;		line 131 in file "USART1823.c"
  3398 ;; Parameters:    Size  Location     Type
  3399 ;;  data            1    wreg     PTR unsigned char 
  3400 ;;		 -> measure_Offset@aux(5), measure_Impedance_no_offset@aux(13), measure_Impedance@aux(13), read_ADC_channels@aux(7),
      + 
  3401 ;;		 -> mess_rec(10), 
  3402 ;;  length          1    0[BANK0 ] unsigned char 
  3403 ;; Auto vars:     Size  Location     Type
  3404 ;;  data            1    3[BANK0 ] PTR unsigned char 
  3405 ;;		 -> measure_Offset@aux(5), measure_Impedance_no_offset@aux(13), measure_Impedance@aux(13), read_ADC_channels@aux(7),
      + 
  3406 ;;		 -> mess_rec(10), 
  3407 ;;  i               1    4[BANK0 ] unsigned char 
  3408 ;; Return value:  Size  Location     Type
  3409 ;;                  1    wreg      void 
  3410 ;; Registers used:
  3411 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3412 ;; Tracked objects:
  3413 ;;		On entry : 0/0
  3414 ;;		On exit  : 0/0
  3415 ;;		Unchanged: 0/0
  3416 ;; Data sizes:     COMMON   BANK0   BANK1
  3417 ;;      Params:         0       1       0
  3418 ;;      Locals:         0       2       0
  3419 ;;      Temps:          0       2       0
  3420 ;;      Totals:         0       5       0
  3421 ;;Total ram usage:        5 bytes
  3422 ;; Hardware stack levels used:    1
  3423 ;; Hardware stack levels required when called:    3
  3424 ;; This function calls:
  3425 ;;		_close_RX_USART
  3426 ;; This function is called by:
  3427 ;;		_mess_handler
  3428 ;;		_config_ASIC
  3429 ;;		_read_ADC_channels
  3430 ;;		_measure_Impedance
  3431 ;;		_measure_Impedance_no_offset
  3432 ;;		_measure_Offset
  3433 ;; This function uses a non-reentrant model
  3434 ;;
  3435                           
  3436                           
  3437                           ;psect for function _lputs_ISR
  3438  0346                     _lputs_ISR:	
  3439                           
  3440                           ;incstack = 0
  3441                           ; Regs used in _lputs_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3442                           ;lputs_ISR@data stored from wreg
  3443  0346  0020               	movlb	0	; select bank0
  3444  0347  00CF               	movwf	lputs_ISR@data
  3445                           
  3446                           ;USART1823.c: 133: unsigned char i;
  3447                           ;USART1823.c: 135: if (USART_tx_flag == 1)
  3448  0348  0372               	decf	_USART_tx_flag,w	;volatile
  3449  0349  1903               	btfsc	3,2
  3450  034A  0008               	return
  3451                           
  3452                           ;USART1823.c: 138: for (i = 0; i < length; i++)
  3453                           
  3454                           ;USART1823.c: 136: return;
  3455  034B  01D0               	clrf	lputs_ISR@i
  3456  034C                     l2035:	
  3457  034C  084C               	movf	lputs_ISR@length,w
  3458  034D  0250               	subwf	lputs_ISR@i,w
  3459  034E  1803               	btfsc	3,0
  3460  034F  2B63               	goto	l2037
  3461                           
  3462                           ;USART1823.c: 139: USART_tx_data[i] = data[i];
  3463  0350  0850               	movf	lputs_ISR@i,w
  3464  0351  074F               	addwf	lputs_ISR@data,w
  3465  0352  00CD               	movwf	??_lputs_ISR
  3466  0353  084D               	movf	??_lputs_ISR,w
  3467  0354  0086               	movwf	6
  3468  0355  0187               	clrf	7
  3469  0356  0801               	movf	1,w
  3470  0357  00CE               	movwf	??_lputs_ISR+1
  3471  0358  0850               	movf	lputs_ISR@i,w
  3472  0359  3E2F               	addlw	(low (_USART_tx_data| 0))& (0+255)
  3473  035A  0086               	movwf	6
  3474  035B  0187               	clrf	7
  3475  035C  084E               	movf	??_lputs_ISR+1,w
  3476  035D  0081               	movwf	1
  3477  035E  3001               	movlw	1
  3478  035F  00CD               	movwf	??_lputs_ISR
  3479  0360  084D               	movf	??_lputs_ISR,w
  3480  0361  07D0               	addwf	lputs_ISR@i,f
  3481  0362  2B4C               	goto	l2035
  3482  0363                     l2037:	
  3483                           
  3484                           ;USART1823.c: 141: close_RX_USART();
  3485  0363  2476               	fcall	_close_RX_USART
  3486                           
  3487                           ;USART1823.c: 143: USART_tx_index = 0;
  3488  0364  01F3               	clrf	_USART_tx_index	;volatile
  3489                           
  3490                           ;USART1823.c: 144: USART_tx_length = length;
  3491  0365  0020               	movlb	0	; select bank0
  3492  0366  084C               	movf	lputs_ISR@length,w
  3493  0367  00CD               	movwf	??_lputs_ISR
  3494  0368  084D               	movf	??_lputs_ISR,w
  3495  0369  00F4               	movwf	_USART_tx_length	;volatile
  3496                           
  3497                           ;USART1823.c: 146: USART_tx_flag = 1;
  3498  036A  3001               	movlw	1
  3499  036B  00CD               	movwf	??_lputs_ISR
  3500  036C  084D               	movf	??_lputs_ISR,w
  3501  036D  00F2               	movwf	_USART_tx_flag	;volatile
  3502                           
  3503                           ;USART1823.c: 147: TXIE = 1;
  3504  036E  0021               	movlb	1	; select bank1
  3505  036F  1611               	bsf	17,4	;volatile
  3506  0370  0008               	return
  3507  0371                     __end_of_lputs_ISR:	
  3508                           
  3509                           	psect	text16
  3510  0476                     __ptext16:	
  3511 ;; *************** function _close_RX_USART *****************
  3512 ;; Defined at:
  3513 ;;		line 35 in file "USART1823.c"
  3514 ;; Parameters:    Size  Location     Type
  3515 ;;		None
  3516 ;; Auto vars:     Size  Location     Type
  3517 ;;		None
  3518 ;; Return value:  Size  Location     Type
  3519 ;;                  1    wreg      void 
  3520 ;; Registers used:
  3521 ;;		None
  3522 ;; Tracked objects:
  3523 ;;		On entry : 0/0
  3524 ;;		On exit  : 0/0
  3525 ;;		Unchanged: 0/0
  3526 ;; Data sizes:     COMMON   BANK0   BANK1
  3527 ;;      Params:         0       0       0
  3528 ;;      Locals:         0       0       0
  3529 ;;      Temps:          0       0       0
  3530 ;;      Totals:         0       0       0
  3531 ;;Total ram usage:        0 bytes
  3532 ;; Hardware stack levels used:    1
  3533 ;; Hardware stack levels required when called:    2
  3534 ;; This function calls:
  3535 ;;		Nothing
  3536 ;; This function is called by:
  3537 ;;		_lputs_ISR
  3538 ;; This function uses a non-reentrant model
  3539 ;;
  3540                           
  3541                           
  3542                           ;psect for function _close_RX_USART
  3543  0476                     _close_RX_USART:	
  3544                           
  3545                           ;USART1823.c: 39: RCIE = 0;
  3546                           
  3547                           ;incstack = 0
  3548                           ; Regs used in _close_RX_USART: []
  3549  0476  0021               	movlb	1	; select bank1
  3550  0477  1291               	bcf	17,5	;volatile
  3551                           
  3552                           ;USART1823.c: 40: CREN = 0;
  3553  0478  0023               	movlb	3	; select bank3
  3554  0479  121D               	bcf	29,4	;volatile
  3555  047A  0008               	return
  3556  047B                     __end_of_close_RX_USART:	
  3557                           
  3558                           	psect	text17
  3559  0127                     __ptext17:	
  3560 ;; *************** function _VIN_config *****************
  3561 ;; Defined at:
  3562 ;;		line 68 in file "bio3.c"
  3563 ;; Parameters:    Size  Location     Type
  3564 ;;  conf            6    0[BANK0 ] struct .
  3565 ;; Auto vars:     Size  Location     Type
  3566 ;;  out             1    8[BANK0 ] unsigned char 
  3567 ;;  i               1    7[BANK0 ] unsigned char 
  3568 ;;  j               1    0        unsigned char 
  3569 ;; Return value:  Size  Location     Type
  3570 ;;                  1    wreg      void 
  3571 ;; Registers used:
  3572 ;;		wreg, status,2, status,0
  3573 ;; Tracked objects:
  3574 ;;		On entry : 0/0
  3575 ;;		On exit  : 0/0
  3576 ;;		Unchanged: 0/0
  3577 ;; Data sizes:     COMMON   BANK0   BANK1
  3578 ;;      Params:         0       6       0
  3579 ;;      Locals:         0       2       0
  3580 ;;      Temps:          0       1       0
  3581 ;;      Totals:         0       9       0
  3582 ;;Total ram usage:        9 bytes
  3583 ;; Hardware stack levels used:    1
  3584 ;; Hardware stack levels required when called:    2
  3585 ;; This function calls:
  3586 ;;		Nothing
  3587 ;; This function is called by:
  3588 ;;		_config_ASIC
  3589 ;;		_measure_Impedance
  3590 ;;		_measure_Impedance_no_offset
  3591 ;;		_measure_Offset
  3592 ;; This function uses a non-reentrant model
  3593 ;;
  3594                           
  3595                           
  3596                           ;psect for function _VIN_config
  3597  0127                     _VIN_config:	
  3598                           
  3599                           ;bio3.c: 71: unsigned char i,j,out;
  3600                           ;bio3.c: 73: out &= 0b11110111; PORTC = out;;
  3601                           
  3602                           ;incstack = 0
  3603                           ; Regs used in _VIN_config: [wreg+status,2+status,0]
  3604  0127  30F7               	movlw	247
  3605  0128  0020               	movlb	0	; select bank0
  3606  0129  00D2               	movwf	??_VIN_config
  3607  012A  0852               	movf	??_VIN_config,w
  3608  012B  05D4               	andwf	VIN_config@out,f
  3609  012C  0854               	movf	VIN_config@out,w
  3610  012D  008E               	movwf	14	;volatile
  3611                           
  3612                           ;bio3.c: 74: _delay((unsigned long)((100)*(500000/4000000.0)));
  3613  012E  3004               	movlw	4
  3614  012F                     u1067:	
  3615  012F  0B89               	decfsz	9,f
  3616  0130  292F               	goto	u1067
  3617                           
  3618                           ;bio3.c: 76: RA5 = 0;;
  3619  0131  0020               	movlb	0	; select bank0
  3620  0132  128C               	bcf	12,5	;volatile
  3621                           
  3622                           ;bio3.c: 77: _delay((unsigned long)((100)*(500000/4000000.0)));
  3623  0133  3004               	movlw	4
  3624  0134                     u1077:	
  3625  0134  0B89               	decfsz	9,f
  3626  0135  2934               	goto	u1077
  3627                           
  3628                           ;bio3.c: 79: RA5 = 1;;
  3629  0136  0020               	movlb	0	; select bank0
  3630  0137  168C               	bsf	12,5	;volatile
  3631                           
  3632                           ;bio3.c: 81: for(i = 0; i < 16; i++) {
  3633  0138  01D3               	clrf	VIN_config@i
  3634  0139  3010               	movlw	16
  3635  013A  0253               	subwf	VIN_config@i,w
  3636  013B  1803               	btfsc	3,0
  3637  013C  2965               	goto	l1979
  3638  013D                     l142:	
  3639                           
  3640                           ;bio3.c: 82: if (conf.datas[0] & 0x0001) {
  3641  013D  1C4C               	btfss	VIN_config@conf,0
  3642  013E  2941               	goto	l1965
  3643                           
  3644                           ;bio3.c: 83: out |= 0b00000100; PORTC = out;;
  3645  013F  1554               	bsf	VIN_config@out,2
  3646  0140  2945               	goto	l1967
  3647  0141                     l1965:	
  3648                           ;bio3.c: 84: } else {
  3649                           
  3650                           
  3651                           ;bio3.c: 85: out &= 0b11111011; PORTC = out;;
  3652  0141  30FB               	movlw	251
  3653  0142  00D2               	movwf	??_VIN_config
  3654  0143  0852               	movf	??_VIN_config,w
  3655  0144  05D4               	andwf	VIN_config@out,f
  3656  0145                     l1967:	
  3657  0145  0854               	movf	VIN_config@out,w
  3658  0146  008E               	movwf	14	;volatile
  3659                           
  3660                           ;bio3.c: 86: }
  3661                           ;bio3.c: 87: conf.datas[0] >>= 1;
  3662  0147  3001               	movlw	1
  3663  0148                     u775:	
  3664  0148  36CD               	lsrf	VIN_config@conf+1,f
  3665  0149  0CCC               	rrf	VIN_config@conf,f
  3666  014A  0B89               	decfsz	9,f
  3667  014B  2948               	goto	u775
  3668                           
  3669                           ;bio3.c: 89: _delay((unsigned long)((100)*(500000/4000000.0)));
  3670  014C  3004               	movlw	4
  3671  014D                     u1087:	
  3672  014D  0B89               	decfsz	9,f
  3673  014E  294D               	goto	u1087
  3674                           
  3675                           ;bio3.c: 91: out |= 0b00001000; PORTC = out;;
  3676  014F  0020               	movlb	0	; select bank0
  3677  0150  15D4               	bsf	VIN_config@out,3
  3678  0151  0854               	movf	VIN_config@out,w
  3679  0152  008E               	movwf	14	;volatile
  3680                           
  3681                           ;bio3.c: 92: _delay((unsigned long)((100)*(500000/4000000.0)));
  3682  0153  3004               	movlw	4
  3683  0154                     u1097:	
  3684  0154  0B89               	decfsz	9,f
  3685  0155  2954               	goto	u1097
  3686                           
  3687                           ;bio3.c: 93: out &= 0b11110111; PORTC = out;;
  3688  0156  30F7               	movlw	247
  3689  0157  0020               	movlb	0	; select bank0
  3690  0158  00D2               	movwf	??_VIN_config
  3691  0159  0852               	movf	??_VIN_config,w
  3692  015A  05D4               	andwf	VIN_config@out,f
  3693  015B  0854               	movf	VIN_config@out,w
  3694  015C  008E               	movwf	14	;volatile
  3695  015D  3001               	movlw	1
  3696  015E  00D2               	movwf	??_VIN_config
  3697  015F  0852               	movf	??_VIN_config,w
  3698  0160  07D3               	addwf	VIN_config@i,f
  3699  0161  3010               	movlw	16
  3700  0162  0253               	subwf	VIN_config@i,w
  3701  0163  1C03               	skipc
  3702  0164  293D               	goto	l142
  3703  0165                     l1979:	
  3704                           
  3705                           ;bio3.c: 94: }
  3706                           ;bio3.c: 96: for(i = 0; i < 16; i++) {
  3707  0165  01D3               	clrf	VIN_config@i
  3708  0166  3010               	movlw	16
  3709  0167  0253               	subwf	VIN_config@i,w
  3710  0168  1803               	btfsc	3,0
  3711  0169  2992               	goto	l2003
  3712  016A                     l146:	
  3713                           
  3714                           ;bio3.c: 97: if (conf.datas[1] & 0x0001) {
  3715  016A  1C4E               	btfss	VIN_config@conf+2,0
  3716  016B  296E               	goto	l1989
  3717                           
  3718                           ;bio3.c: 98: out |= 0b00000100; PORTC = out;;
  3719  016C  1554               	bsf	VIN_config@out,2
  3720  016D  2972               	goto	l1991
  3721  016E                     l1989:	
  3722                           ;bio3.c: 99: } else {
  3723                           
  3724                           
  3725                           ;bio3.c: 100: out &= 0b11111011; PORTC = out;;
  3726  016E  30FB               	movlw	251
  3727  016F  00D2               	movwf	??_VIN_config
  3728  0170  0852               	movf	??_VIN_config,w
  3729  0171  05D4               	andwf	VIN_config@out,f
  3730  0172                     l1991:	
  3731  0172  0854               	movf	VIN_config@out,w
  3732  0173  008E               	movwf	14	;volatile
  3733                           
  3734                           ;bio3.c: 101: }
  3735                           ;bio3.c: 102: conf.datas[1] >>= 1;
  3736  0174  3001               	movlw	1
  3737  0175                     u815:	
  3738  0175  36CF               	lsrf	VIN_config@conf+3,f
  3739  0176  0CCE               	rrf	VIN_config@conf+2,f
  3740  0177  0B89               	decfsz	9,f
  3741  0178  2975               	goto	u815
  3742                           
  3743                           ;bio3.c: 104: _delay((unsigned long)((100)*(500000/4000000.0)));
  3744  0179  3004               	movlw	4
  3745  017A                     u1107:	
  3746  017A  0B89               	decfsz	9,f
  3747  017B  297A               	goto	u1107
  3748                           
  3749                           ;bio3.c: 106: out |= 0b00001000; PORTC = out;;
  3750  017C  0020               	movlb	0	; select bank0
  3751  017D  15D4               	bsf	VIN_config@out,3
  3752  017E  0854               	movf	VIN_config@out,w
  3753  017F  008E               	movwf	14	;volatile
  3754                           
  3755                           ;bio3.c: 107: _delay((unsigned long)((100)*(500000/4000000.0)));
  3756  0180  3004               	movlw	4
  3757  0181                     u1117:	
  3758  0181  0B89               	decfsz	9,f
  3759  0182  2981               	goto	u1117
  3760                           
  3761                           ;bio3.c: 108: out &= 0b11110111; PORTC = out;;
  3762  0183  30F7               	movlw	247
  3763  0184  0020               	movlb	0	; select bank0
  3764  0185  00D2               	movwf	??_VIN_config
  3765  0186  0852               	movf	??_VIN_config,w
  3766  0187  05D4               	andwf	VIN_config@out,f
  3767  0188  0854               	movf	VIN_config@out,w
  3768  0189  008E               	movwf	14	;volatile
  3769  018A  3001               	movlw	1
  3770  018B  00D2               	movwf	??_VIN_config
  3771  018C  0852               	movf	??_VIN_config,w
  3772  018D  07D3               	addwf	VIN_config@i,f
  3773  018E  3010               	movlw	16
  3774  018F  0253               	subwf	VIN_config@i,w
  3775  0190  1C03               	skipc
  3776  0191  296A               	goto	l146
  3777  0192                     l2003:	
  3778                           
  3779                           ;bio3.c: 109: }
  3780                           ;bio3.c: 111: for(i = 0; i < 1; i++) {
  3781  0192  01D3               	clrf	VIN_config@i
  3782  0193                     L1:	
  3783  0193  0853               	movf	VIN_config@i,w
  3784  0194  1D03               	btfss	3,2
  3785  0195  0008               	return
  3786                           
  3787                           ;bio3.c: 112: if (conf.datas[2] & 0x0001) {
  3788  0196  1C50               	btfss	VIN_config@conf+4,0
  3789  0197  299A               	goto	l2013
  3790                           
  3791                           ;bio3.c: 113: out |= 0b00000100; PORTC = out;;
  3792  0198  1554               	bsf	VIN_config@out,2
  3793  0199  299E               	goto	l2015
  3794  019A                     l2013:	
  3795                           ;bio3.c: 114: } else {
  3796                           
  3797                           
  3798                           ;bio3.c: 115: out &= 0b11111011; PORTC = out;;
  3799  019A  30FB               	movlw	251
  3800  019B  00D2               	movwf	??_VIN_config
  3801  019C  0852               	movf	??_VIN_config,w
  3802  019D  05D4               	andwf	VIN_config@out,f
  3803  019E                     l2015:	
  3804  019E  0854               	movf	VIN_config@out,w
  3805  019F  008E               	movwf	14	;volatile
  3806                           
  3807                           ;bio3.c: 116: }
  3808                           ;bio3.c: 117: conf.datas[2] >>= 1;
  3809  01A0  3001               	movlw	1
  3810  01A1                     u855:	
  3811  01A1  36D1               	lsrf	VIN_config@conf+5,f
  3812  01A2  0CD0               	rrf	VIN_config@conf+4,f
  3813  01A3  0B89               	decfsz	9,f
  3814  01A4  29A1               	goto	u855
  3815                           
  3816                           ;bio3.c: 119: _delay((unsigned long)((100)*(500000/4000000.0)));
  3817  01A5  3004               	movlw	4
  3818  01A6                     u1127:	
  3819  01A6  0B89               	decfsz	9,f
  3820  01A7  29A6               	goto	u1127
  3821                           
  3822                           ;bio3.c: 121: out |= 0b00001000; PORTC = out;;
  3823  01A8  0020               	movlb	0	; select bank0
  3824  01A9  15D4               	bsf	VIN_config@out,3
  3825  01AA  0854               	movf	VIN_config@out,w
  3826  01AB  008E               	movwf	14	;volatile
  3827                           
  3828                           ;bio3.c: 122: _delay((unsigned long)((100)*(500000/4000000.0)));
  3829  01AC  3004               	movlw	4
  3830  01AD                     u1137:	
  3831  01AD  0B89               	decfsz	9,f
  3832  01AE  29AD               	goto	u1137
  3833                           
  3834                           ;bio3.c: 123: out &= 0b11110111; PORTC = out;;
  3835  01AF  30F7               	movlw	247
  3836  01B0  0020               	movlb	0	; select bank0
  3837  01B1  00D2               	movwf	??_VIN_config
  3838  01B2  0852               	movf	??_VIN_config,w
  3839  01B3  05D4               	andwf	VIN_config@out,f
  3840  01B4  0854               	movf	VIN_config@out,w
  3841  01B5  008E               	movwf	14	;volatile
  3842  01B6  3001               	movlw	1
  3843  01B7  00D2               	movwf	??_VIN_config
  3844  01B8  0852               	movf	??_VIN_config,w
  3845  01B9  07D3               	addwf	VIN_config@i,f
  3846  01BA  2993               	goto	L1
  3847  01BB                     __end_of_VIN_config:	
  3848                           
  3849                           	psect	text18
  3850  047F                     __ptext18:	
  3851 ;; *************** function _SYSTEM_Initialize *****************
  3852 ;; Defined at:
  3853 ;;		line 70 in file "mcc_generated_files/mcc.c"
  3854 ;; Parameters:    Size  Location     Type
  3855 ;;		None
  3856 ;; Auto vars:     Size  Location     Type
  3857 ;;		None
  3858 ;; Return value:  Size  Location     Type
  3859 ;;                  1    wreg      void 
  3860 ;; Registers used:
  3861 ;;		wreg, status,2, status,0, pclath, cstack
  3862 ;; Tracked objects:
  3863 ;;		On entry : 0/0
  3864 ;;		On exit  : 0/0
  3865 ;;		Unchanged: 0/0
  3866 ;; Data sizes:     COMMON   BANK0   BANK1
  3867 ;;      Params:         0       0       0
  3868 ;;      Locals:         0       0       0
  3869 ;;      Temps:          0       0       0
  3870 ;;      Totals:         0       0       0
  3871 ;;Total ram usage:        0 bytes
  3872 ;; Hardware stack levels used:    1
  3873 ;; Hardware stack levels required when called:    3
  3874 ;; This function calls:
  3875 ;;		_OSCILLATOR_Initialize
  3876 ;;		_PIN_MANAGER_Initialize
  3877 ;; This function is called by:
  3878 ;;		_main
  3879 ;; This function uses a non-reentrant model
  3880 ;;
  3881                           
  3882                           
  3883                           ;psect for function _SYSTEM_Initialize
  3884  047F                     _SYSTEM_Initialize:	
  3885                           
  3886                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  3887                           
  3888                           ;incstack = 0
  3889                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3890  047F  2403               	fcall	_PIN_MANAGER_Initialize
  3891                           
  3892                           ;mcc.c: 74: OSCILLATOR_Initialize();
  3893  0480  2470               	fcall	_OSCILLATOR_Initialize
  3894  0481  0008               	return
  3895  0482                     __end_of_SYSTEM_Initialize:	
  3896                           
  3897                           	psect	text19
  3898  0403                     __ptext19:	
  3899 ;; *************** function _PIN_MANAGER_Initialize *****************
  3900 ;; Defined at:
  3901 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  3902 ;; Parameters:    Size  Location     Type
  3903 ;;		None
  3904 ;; Auto vars:     Size  Location     Type
  3905 ;;		None
  3906 ;; Return value:  Size  Location     Type
  3907 ;;                  1    wreg      void 
  3908 ;; Registers used:
  3909 ;;		wreg, status,2
  3910 ;; Tracked objects:
  3911 ;;		On entry : 0/0
  3912 ;;		On exit  : 0/0
  3913 ;;		Unchanged: 0/0
  3914 ;; Data sizes:     COMMON   BANK0   BANK1
  3915 ;;      Params:         0       0       0
  3916 ;;      Locals:         0       0       0
  3917 ;;      Temps:          0       0       0
  3918 ;;      Totals:         0       0       0
  3919 ;;Total ram usage:        0 bytes
  3920 ;; Hardware stack levels used:    1
  3921 ;; Hardware stack levels required when called:    2
  3922 ;; This function calls:
  3923 ;;		Nothing
  3924 ;; This function is called by:
  3925 ;;		_SYSTEM_Initialize
  3926 ;; This function uses a non-reentrant model
  3927 ;;
  3928                           
  3929                           
  3930                           ;psect for function _PIN_MANAGER_Initialize
  3931  0403                     _PIN_MANAGER_Initialize:	
  3932                           
  3933                           ;pin_manager.c: 51: LATA = 0x0;
  3934                           
  3935                           ;incstack = 0
  3936                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3937  0403  0022               	movlb	2	; select bank2
  3938  0404  018C               	clrf	12	;volatile
  3939                           
  3940                           ;pin_manager.c: 52: LATC = 0x0;
  3941  0405  018E               	clrf	14	;volatile
  3942                           
  3943                           ;pin_manager.c: 55: ANSELA = 0b00000100;
  3944  0406  3004               	movlw	4
  3945  0407  0023               	movlb	3	; select bank3
  3946  0408  008C               	movwf	12	;volatile
  3947                           
  3948                           ;pin_manager.c: 56: ANSELC = 0b00000011;
  3949  0409  3003               	movlw	3
  3950  040A  008E               	movwf	14	;volatile
  3951                           
  3952                           ;pin_manager.c: 59: WPUA = 0x3B;
  3953  040B  303B               	movlw	59
  3954  040C  0024               	movlb	4	; select bank4
  3955  040D  008C               	movwf	12	;volatile
  3956                           
  3957                           ;pin_manager.c: 60: WPUC = 0x3C;
  3958  040E  303C               	movlw	60
  3959  040F  008E               	movwf	14	;volatile
  3960                           
  3961                           ;pin_manager.c: 62: RXDTSEL = 0;
  3962  0410  0022               	movlb	2	; select bank2
  3963  0411  139D               	bcf	29,7	;volatile
  3964                           
  3965                           ;pin_manager.c: 63: TXCKSEL = 0;
  3966  0412  111D               	bcf	29,2	;volatile
  3967                           
  3968                           ;pin_manager.c: 66: TRISC = 0b01100011;
  3969  0413  3063               	movlw	99
  3970  0414  0021               	movlb	1	; select bank1
  3971  0415  008E               	movwf	14	;volatile
  3972                           
  3973                           ;pin_manager.c: 67: TRISA = 0b01011111;
  3974  0416  305F               	movlw	95
  3975  0417  008C               	movwf	12	;volatile
  3976                           
  3977                           ;pin_manager.c: 69: OPTION_REGbits.nWPUEN = 0x0;
  3978  0418  1395               	bcf	21,7	;volatile
  3979                           
  3980                           ;pin_manager.c: 70: APFCON = 0x00;
  3981  0419  0022               	movlb	2	; select bank2
  3982  041A  019D               	clrf	29	;volatile
  3983  041B  0008               	return
  3984  041C                     __end_of_PIN_MANAGER_Initialize:	
  3985                           
  3986                           	psect	text20
  3987  0470                     __ptext20:	
  3988 ;; *************** function _OSCILLATOR_Initialize *****************
  3989 ;; Defined at:
  3990 ;;		line 78 in file "mcc_generated_files/mcc.c"
  3991 ;; Parameters:    Size  Location     Type
  3992 ;;		None
  3993 ;; Auto vars:     Size  Location     Type
  3994 ;;		None
  3995 ;; Return value:  Size  Location     Type
  3996 ;;                  1    wreg      void 
  3997 ;; Registers used:
  3998 ;;		wreg, status,2
  3999 ;; Tracked objects:
  4000 ;;		On entry : 0/0
  4001 ;;		On exit  : 0/0
  4002 ;;		Unchanged: 0/0
  4003 ;; Data sizes:     COMMON   BANK0   BANK1
  4004 ;;      Params:         0       0       0
  4005 ;;      Locals:         0       0       0
  4006 ;;      Temps:          0       0       0
  4007 ;;      Totals:         0       0       0
  4008 ;;Total ram usage:        0 bytes
  4009 ;; Hardware stack levels used:    1
  4010 ;; Hardware stack levels required when called:    2
  4011 ;; This function calls:
  4012 ;;		Nothing
  4013 ;; This function is called by:
  4014 ;;		_SYSTEM_Initialize
  4015 ;; This function uses a non-reentrant model
  4016 ;;
  4017                           
  4018                           
  4019                           ;psect for function _OSCILLATOR_Initialize
  4020  0470                     _OSCILLATOR_Initialize:	
  4021                           
  4022                           ;mcc.c: 81: OSCCON = 0x3A;
  4023                           
  4024                           ;incstack = 0
  4025                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4026  0470  303A               	movlw	58
  4027  0471  0021               	movlb	1	; select bank1
  4028  0472  0099               	movwf	25	;volatile
  4029                           
  4030                           ;mcc.c: 83: OSCSTAT = 0x00;
  4031  0473  019A               	clrf	26	;volatile
  4032                           
  4033                           ;mcc.c: 85: OSCTUNE = 0x00;
  4034  0474  0198               	clrf	24	;volatile
  4035  0475  0008               	return
  4036  0476                     __end_of_OSCILLATOR_Initialize:	
  4037                           
  4038                           	psect	intentry
  4039  0004                     __pintentry:	
  4040 ;; *************** function _isr *****************
  4041 ;; Defined at:
  4042 ;;		line 65 in file "main.c"
  4043 ;; Parameters:    Size  Location     Type
  4044 ;;		None
  4045 ;; Auto vars:     Size  Location     Type
  4046 ;;		None
  4047 ;; Return value:  Size  Location     Type
  4048 ;;                  1    wreg      void 
  4049 ;; Registers used:
  4050 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4051 ;; Tracked objects:
  4052 ;;		On entry : 0/0
  4053 ;;		On exit  : 0/0
  4054 ;;		Unchanged: 0/0
  4055 ;; Data sizes:     COMMON   BANK0   BANK1
  4056 ;;      Params:         0       0       0
  4057 ;;      Locals:         0       0       0
  4058 ;;      Temps:          2       0       0
  4059 ;;      Totals:         2       0       0
  4060 ;;Total ram usage:        2 bytes
  4061 ;; Hardware stack levels used:    1
  4062 ;; Hardware stack levels required when called:    1
  4063 ;; This function calls:
  4064 ;;		_start_TMR0_ISR
  4065 ;;		_stop_TMR0_ISR
  4066 ;;		i1_start_RX_USART_ISR
  4067 ;; This function is called by:
  4068 ;;		Interrupt level 1
  4069 ;; This function uses a non-reentrant model
  4070 ;;
  4071                           
  4072  0004                     _isr:	
  4073                           
  4074                           ;incstack = 0
  4075  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4076                           
  4077                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4078  0005  3180               	pagesel	$
  4079  0006  0020               	movlb	0	; select bank0
  4080  0007  087F               	movf	127,w
  4081  0008  00F9               	movwf	??_isr+1
  4082                           
  4083                           ;main.c: 69: if (TMR0IF && TMR0IE) {
  4084  0009  190B               	btfsc	11,2	;volatile
  4085  000A  1E8B               	btfss	11,5	;volatile
  4086  000B  2815               	goto	i1l120
  4087                           
  4088                           ;main.c: 71: TMR0IF = 0;
  4089  000C  110B               	bcf	11,2	;volatile
  4090                           
  4091                           ;main.c: 72: TMR0 = TIMER0_timeout;
  4092  000D  0870               	movf	_TIMER0_timeout,w	;volatile
  4093  000E  0095               	movwf	21	;volatile
  4094                           
  4095                           ;main.c: 75: TIMER0_flag = 1;
  4096  000F  3001               	movlw	1
  4097  0010  00F8               	movwf	??_isr
  4098  0011  0878               	movf	??_isr,w
  4099  0012  00BE               	movwf	_TIMER0_flag	;volatile
  4100                           
  4101                           ;main.c: 80: stop_TMR0_ISR();
  4102  0013  2482               	fcall	_stop_TMR0_ISR
  4103                           
  4104                           ;main.c: 82: return;
  4105  0014  2850               	goto	i1l121
  4106  0015                     i1l120:	
  4107                           
  4108                           ;main.c: 83: }
  4109                           ;main.c: 87: if (RCIF) {
  4110  0015  1E91               	btfss	17,5	;volatile
  4111  0016  2834               	goto	i1l122
  4112                           
  4113                           ;main.c: 88: stop_TMR0_ISR();
  4114  0017  2482               	fcall	_stop_TMR0_ISR
  4115                           
  4116                           ;main.c: 91: if (OERR) {
  4117  0018  0023               	movlb	3	; select bank3
  4118  0019  1C9D               	btfss	29,1	;volatile
  4119  001A  281E               	goto	i1l1911
  4120                           
  4121                           ;main.c: 93: CREN = 0;
  4122  001B  121D               	bcf	29,4	;volatile
  4123                           
  4124                           ;main.c: 94: CREN = 1;
  4125  001C  161D               	bsf	29,4	;volatile
  4126                           
  4127                           ;main.c: 95: return;
  4128  001D  2850               	goto	i1l121
  4129  001E                     i1l1911:	
  4130                           
  4131                           ;main.c: 96: }
  4132                           ;main.c: 99: if (USART_rx_index >= 15) {
  4133  001E  300F               	movlw	15
  4134  001F  0020               	movlb	0	; select bank0
  4135  0020  0240               	subwf	_USART_rx_index,w	;volatile
  4136  0021  1803               	btfsc	3,0
  4137                           
  4138                           ;main.c: 100: USART_rx_index = 0;
  4139  0022  01C0               	clrf	_USART_rx_index	;volatile
  4140                           
  4141                           ;main.c: 101: }
  4142                           ;main.c: 103: USART_rx_data[USART_rx_index++] = RCREG;
  4143  0023  0023               	movlb	3	; select bank3
  4144  0024  0819               	movf	25,w	;volatile
  4145  0025  00F8               	movwf	??_isr
  4146  0026  0020               	movlb	0	; select bank0
  4147  0027  0840               	movf	_USART_rx_index,w
  4148  0028  3E20               	addlw	(low (_USART_rx_data| 0))& (0+255)
  4149  0029  0086               	movwf	6
  4150  002A  0187               	clrf	7
  4151  002B  0878               	movf	??_isr,w
  4152  002C  0081               	movwf	1
  4153  002D  3001               	movlw	1
  4154  002E  00F8               	movwf	??_isr
  4155  002F  0878               	movf	??_isr,w
  4156  0030  07C0               	addwf	_USART_rx_index,f	;volatile
  4157                           
  4158                           ;main.c: 105: start_TMR0_ISR(98);
  4159  0031  3062               	movlw	98
  4160  0032  243E               	fcall	_start_TMR0_ISR
  4161                           
  4162                           ;main.c: 107: return;
  4163  0033  2850               	goto	i1l121
  4164  0034                     i1l122:	
  4165                           
  4166                           ;main.c: 108: }
  4167                           ;main.c: 112: if (TXIF && TXIE) {
  4168  0034  1E11               	btfss	17,4	;volatile
  4169  0035  2850               	goto	i1l121
  4170  0036  0021               	movlb	1	; select bank1
  4171  0037  1E11               	btfss	17,4	;volatile
  4172  0038  2850               	goto	i1l121
  4173                           
  4174                           ;main.c: 114: TXREG = USART_tx_data[USART_tx_index++];
  4175  0039  0873               	movf	_USART_tx_index,w
  4176  003A  3E2F               	addlw	(low (_USART_tx_data| 0))& (0+255)
  4177  003B  0086               	movwf	6
  4178  003C  0187               	clrf	7
  4179  003D  0801               	movf	1,w
  4180  003E  0023               	movlb	3	; select bank3
  4181  003F  009A               	movwf	26	;volatile
  4182  0040  3001               	movlw	1
  4183  0041  00F8               	movwf	??_isr
  4184  0042  0878               	movf	??_isr,w
  4185  0043  07F3               	addwf	_USART_tx_index,f	;volatile
  4186                           
  4187                           ;main.c: 116: if (USART_tx_index >= USART_tx_length) {
  4188  0044  0874               	movf	_USART_tx_length,w	;volatile
  4189  0045  0273               	subwf	_USART_tx_index,w	;volatile
  4190  0046  1C03               	skipc
  4191  0047  2850               	goto	i1l121
  4192                           
  4193                           ;main.c: 117: TXIE = 0;
  4194  0048  0021               	movlb	1	; select bank1
  4195  0049  1211               	bcf	17,4	;volatile
  4196                           
  4197                           ;main.c: 118: USART_tx_flag = 0;
  4198  004A  01F2               	clrf	_USART_tx_flag	;volatile
  4199                           
  4200                           ;main.c: 121: _delay((unsigned long)((2)*(500000/4000.0)));
  4201  004B  3053               	movlw	83
  4202  004C                     u114_27:	
  4203  004C  0B89               	decfsz	9,f
  4204  004D  284C               	goto	u114_27
  4205  004E  0000               	nop
  4206                           
  4207                           ;main.c: 122: start_RX_USART_ISR();
  4208  004F  242D               	fcall	i1_start_RX_USART_ISR
  4209  0050                     i1l121:	
  4210                           ;main.c: 123: }
  4211                           ;main.c: 124: return;
  4212                           
  4213  0050  0879               	movf	??_isr+1,w
  4214  0051  0020               	movlb	0	; select bank0
  4215  0052  00FF               	movwf	127
  4216  0053  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4217  0054  0009               	retfie
  4218  0055                     __end_of_isr:	
  4219                           
  4220                           	psect	text22
  4221  042D                     __ptext22:	
  4222 ;; *************** function i1_start_RX_USART_ISR *****************
  4223 ;; Defined at:
  4224 ;;		line 82 in file "USART1823.c"
  4225 ;; Parameters:    Size  Location     Type
  4226 ;;		None
  4227 ;; Auto vars:     Size  Location     Type
  4228 ;;		None
  4229 ;; Return value:  Size  Location     Type
  4230 ;;                  1    wreg      void 
  4231 ;; Registers used:
  4232 ;;		wreg, status,2
  4233 ;; Tracked objects:
  4234 ;;		On entry : 0/0
  4235 ;;		On exit  : 0/0
  4236 ;;		Unchanged: 0/0
  4237 ;; Data sizes:     COMMON   BANK0   BANK1
  4238 ;;      Params:         0       0       0
  4239 ;;      Locals:         0       0       0
  4240 ;;      Temps:          0       0       0
  4241 ;;      Totals:         0       0       0
  4242 ;;Total ram usage:        0 bytes
  4243 ;; Hardware stack levels used:    1
  4244 ;; This function calls:
  4245 ;;		Nothing
  4246 ;; This function is called by:
  4247 ;;		_isr
  4248 ;; This function uses a non-reentrant model
  4249 ;;
  4250                           
  4251                           
  4252                           ;psect for function i1_start_RX_USART_ISR
  4253  042D                     i1_start_RX_USART_ISR:	
  4254                           
  4255                           ;USART1823.c: 85: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  4256                           
  4257                           ;incstack = 0
  4258                           ; Regs used in i1_start_RX_USART_ISR: [wreg+status,2]
  4259  042D  0023               	movlb	3	; select bank3
  4260  042E  151E               	bsf	30,2	;volatile
  4261  042F  159F               	bsf	31,3	;volatile
  4262  0430  019C               	clrf	28	;volatile
  4263  0431  300C               	movlw	12
  4264  0432  009B               	movwf	27	;volatile
  4265                           
  4266                           ;USART1823.c: 87: SYNC = 0;
  4267  0433  121E               	bcf	30,4	;volatile
  4268                           
  4269                           ;USART1823.c: 88: SPEN = 1;
  4270  0434  179D               	bsf	29,7	;volatile
  4271                           
  4272                           ;USART1823.c: 89: CREN = 1;
  4273  0435  161D               	bsf	29,4	;volatile
  4274                           
  4275                           ;USART1823.c: 91: USART_rx_flag = 0;
  4276  0436  0020               	movlb	0	; select bank0
  4277  0437  01BF               	clrf	_USART_rx_flag	;volatile
  4278                           
  4279                           ;USART1823.c: 92: USART_rx_index = 0;
  4280  0438  01C0               	clrf	_USART_rx_index	;volatile
  4281                           
  4282                           ;USART1823.c: 94: RCIE = 1;
  4283  0439  0021               	movlb	1	; select bank1
  4284  043A  1691               	bsf	17,5	;volatile
  4285                           
  4286                           ;USART1823.c: 95: PEIE = 1;
  4287  043B  170B               	bsf	11,6	;volatile
  4288                           
  4289                           ;USART1823.c: 96: GIE = 1;
  4290  043C  178B               	bsf	11,7	;volatile
  4291  043D  0008               	return
  4292  043E                     __end_ofi1_start_RX_USART_ISR:	
  4293                           
  4294                           	psect	text23
  4295  0482                     __ptext23:	
  4296 ;; *************** function _stop_TMR0_ISR *****************
  4297 ;; Defined at:
  4298 ;;		line 44 in file "TMR0.c"
  4299 ;; Parameters:    Size  Location     Type
  4300 ;;		None
  4301 ;; Auto vars:     Size  Location     Type
  4302 ;;		None
  4303 ;; Return value:  Size  Location     Type
  4304 ;;                  1    wreg      void 
  4305 ;; Registers used:
  4306 ;;		None
  4307 ;; Tracked objects:
  4308 ;;		On entry : 0/0
  4309 ;;		On exit  : 0/0
  4310 ;;		Unchanged: 0/0
  4311 ;; Data sizes:     COMMON   BANK0   BANK1
  4312 ;;      Params:         0       0       0
  4313 ;;      Locals:         0       0       0
  4314 ;;      Temps:          0       0       0
  4315 ;;      Totals:         0       0       0
  4316 ;;Total ram usage:        0 bytes
  4317 ;; Hardware stack levels used:    1
  4318 ;; This function calls:
  4319 ;;		Nothing
  4320 ;; This function is called by:
  4321 ;;		_isr
  4322 ;; This function uses a non-reentrant model
  4323 ;;
  4324                           
  4325                           
  4326                           ;psect for function _stop_TMR0_ISR
  4327  0482                     _stop_TMR0_ISR:	
  4328                           
  4329                           ;TMR0.c: 47: TMR0IE = 0;
  4330                           
  4331                           ;incstack = 0
  4332                           ; Regs used in _stop_TMR0_ISR: []
  4333  0482  128B               	bcf	11,5	;volatile
  4334                           
  4335                           ;TMR0.c: 48: TMR0IF = 0;
  4336  0483  110B               	bcf	11,2	;volatile
  4337  0484  0008               	return
  4338  0485                     __end_of_stop_TMR0_ISR:	
  4339                           
  4340                           	psect	text24
  4341  043E                     __ptext24:	
  4342 ;; *************** function _start_TMR0_ISR *****************
  4343 ;; Defined at:
  4344 ;;		line 30 in file "TMR0.c"
  4345 ;; Parameters:    Size  Location     Type
  4346 ;;  val             1    wreg     unsigned char 
  4347 ;; Auto vars:     Size  Location     Type
  4348 ;;  val             1    2[COMMON] unsigned char 
  4349 ;; Return value:  Size  Location     Type
  4350 ;;                  1    wreg      void 
  4351 ;; Registers used:
  4352 ;;		wreg, status,2
  4353 ;; Tracked objects:
  4354 ;;		On entry : 0/0
  4355 ;;		On exit  : 0/0
  4356 ;;		Unchanged: 0/0
  4357 ;; Data sizes:     COMMON   BANK0   BANK1
  4358 ;;      Params:         0       0       0
  4359 ;;      Locals:         1       0       0
  4360 ;;      Temps:          2       0       0
  4361 ;;      Totals:         3       0       0
  4362 ;;Total ram usage:        3 bytes
  4363 ;; Hardware stack levels used:    1
  4364 ;; This function calls:
  4365 ;;		Nothing
  4366 ;; This function is called by:
  4367 ;;		_isr
  4368 ;; This function uses a non-reentrant model
  4369 ;;
  4370                           
  4371                           
  4372                           ;psect for function _start_TMR0_ISR
  4373  043E                     _start_TMR0_ISR:	
  4374                           
  4375                           ;incstack = 0
  4376                           ; Regs used in _start_TMR0_ISR: [wreg+status,2]
  4377                           ;start_TMR0_ISR@val stored from wreg
  4378  043E  00F7               	movwf	start_TMR0_ISR@val
  4379                           
  4380                           ;TMR0.c: 32: TIMER0_timeout = val;
  4381  043F  0877               	movf	start_TMR0_ISR@val,w
  4382  0440  00F5               	movwf	??_start_TMR0_ISR
  4383  0441  01F6               	clrf	??_start_TMR0_ISR+1
  4384  0442  0875               	movf	??_start_TMR0_ISR,w
  4385  0443  00F0               	movwf	_TIMER0_timeout	;volatile
  4386  0444  0876               	movf	??_start_TMR0_ISR+1,w
  4387  0445  00F1               	movwf	_TIMER0_timeout+1	;volatile
  4388                           
  4389                           ;TMR0.c: 33: TIMER0_flag = 0;
  4390  0446  0020               	movlb	0	; select bank0
  4391  0447  01BE               	clrf	_TIMER0_flag	;volatile
  4392                           
  4393                           ;TMR0.c: 36: TMR0 = TIMER0_timeout;
  4394  0448  0870               	movf	_TIMER0_timeout,w	;volatile
  4395  0449  0095               	movwf	21	;volatile
  4396                           
  4397                           ;TMR0.c: 39: TMR0IF = 0;
  4398  044A  110B               	bcf	11,2	;volatile
  4399                           
  4400                           ;TMR0.c: 40: TMR0IE = 1;
  4401  044B  168B               	bsf	11,5	;volatile
  4402                           
  4403                           ;TMR0.c: 41: GIE = 1;
  4404  044C  178B               	bsf	11,7	;volatile
  4405  044D  0008               	return
  4406  044E                     __end_of_start_TMR0_ISR:	
  4407  007E                     btemp	set	126	;btemp
  4408  007E                     int$flags	set	126
  4409  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         49
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     36      80
    BANK1            32      0       0

Pointer List with Targets:

    lputs_ISR@data	PTR unsigned char  size(1) Largest target is 13
		 -> measure_Offset@aux(BANK0[5]), measure_Impedance_no_offset@aux(BANK0[13]), measure_Impedance@aux(BANK0[13]), read_ADC_channels@aux(BANK0[7]), 
		 -> mess_rec(BANK0[10]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_start_TMR0_ISR

Critical Paths under _main in BANK0

    _main->_mess_handler
    _mess_handler->_measure_Impedance
    _mess_handler->_measure_Impedance_no_offset
    _read_ADC_channels->_ADC_2
    _read_ADC_channels->_ADC_4
    _read_ADC_channels->_ADC_5
    _measure_Offset->_VIN_config
    _measure_Impedance_no_offset->_VIN_config
    _measure_Impedance->_VIN_config
    _config_ASIC->_VIN_config

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   14217
                                             34 BANK0      2     2      0
                  _SYSTEM_Initialize
                       _mess_handler
                          _setup_ADC
                         _setup_TMR0
                          _start_RCM
                 _start_RX_USART_ISR
                 _start_TX_USART_ISR
 ---------------------------------------------------------------------------------
 (1) _start_TX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RCM                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_TMR0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_ADC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _mess_handler                                         1     1      0   14118
                                             33 BANK0      1     1      0
                        _config_ASIC
                          _lputs_ISR
                  _measure_Impedance
        _measure_Impedance_no_offset
                     _measure_Offset
                  _read_ADC_channels
 ---------------------------------------------------------------------------------
 (2) _read_ADC_channels                                   14    14      0    1426
                                              6 BANK0     14    14      0
                              _ADC_2
                              _ADC_4
                              _ADC_5
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (3) _ADC_5                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _measure_Offset                                      16    16      0    2793
                                              9 BANK0     16    16      0
                              _ADC_2
                              _ADC_4
                         _VIN_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (2) _measure_Impedance_no_offset                         26    26      0    3170
                                              9 BANK0     24    24      0
                              _ADC_2
                              _ADC_4
                         _VIN_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (2) _measure_Impedance                                   26    26      0    3482
                                              9 BANK0     24    24      0
                              _ADC_2
                              _ADC_4
                         _VIN_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (3) _ADC_4                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _ADC_2                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _config_ASIC                                          7     7      0    2395
                                              9 BANK0      7     7      0
                         _VIN_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (3) _lputs_ISR                                            5     4      1     852
                                              0 BANK0      5     4      1
                     _close_RX_USART
 ---------------------------------------------------------------------------------
 (4) _close_RX_USART                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _VIN_config                                          10     4      6    1361
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  2     2      0      22
                                              3 COMMON     2     2      0
                     _start_TMR0_ISR
                      _stop_TMR0_ISR
               i1_start_RX_USART_ISR
 ---------------------------------------------------------------------------------
 (6) i1_start_RX_USART_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _stop_TMR0_ISR                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _start_TMR0_ISR                                       3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _mess_handler
     _config_ASIC
       _VIN_config
       _lputs_ISR
         _close_RX_USART
     _lputs_ISR
       _close_RX_USART
     _measure_Impedance
       _ADC_2
       _ADC_4
       _VIN_config
       _lputs_ISR
         _close_RX_USART
     _measure_Impedance_no_offset
       _ADC_2
       _ADC_4
       _VIN_config
       _lputs_ISR
         _close_RX_USART
     _measure_Offset
       _ADC_2
       _ADC_4
       _VIN_config
       _lputs_ISR
         _close_RX_USART
     _read_ADC_channels
       _ADC_2
       _ADC_4
       _ADC_5
       _lputs_ISR
         _close_RX_USART
   _setup_ADC
   _setup_TMR0
   _start_RCM
   _start_RX_USART_ISR
   _start_TX_USART_ISR

 _isr (ROOT)
   _start_TMR0_ISR
   _stop_TMR0_ISR
   i1_start_RX_USART_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      5A       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     24      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      5A       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Mar  3 15:42:38 2017

                         __CFG_CP$OFF 0000                         _USART_rx_data 0020  
                       _USART_rx_flag 003F                         _USART_tx_data 002F  
                       _USART_tx_flag 0072                            _VIN_config 0127  
                                 l108 02B1                                   l142 013D  
                                 l146 016A                                   l331 0399  
                                 l370 03C3                                   l364 03E6  
                                 l376 03A0                                   _GIE 005F  
                                 _RA5 0065                                   _PS0 04A8  
                                 _PS1 04A9                                   _PS2 04AA  
                        __CFG_CPD$OFF 0000                                   u815 0175  
                                 _PSA 04AB                                   u905 03F1  
                                 u925 03CE                                   u855 01A1  
                                 u775 0148                                   u945 03AB  
                                 u997 02AA                                   _isr 0004  
                        __CFG_BORV$HI 0000                                   wreg 0009  
                        __CFG_IESO$ON 0000                        _USART_rx_index 0040  
                        __CFG_LVP$OFF 0000                        _USART_tx_index 0073  
                                l2003 0192                                  l2013 019A  
                                l2015 019E                                  l2035 034C  
                                l2037 0363                                  l2301 037C  
                                l2303 037E                                  l2311 0384  
                                l2305 0380                                  l2307 0382  
                                l2351 02DA                                  l2337 02BD  
                                l2349 02C5                                  l2297 0372  
                                l2299 037A                                  l1965 0141  
                                l1991 0172                                  l1967 0145  
                                l1979 0165                                  l1989 016E  
                                ?_isr 0075                                  _ADGO 04E9  
                        __CFG_WDTE$ON 0000                                  _BRGH 0CF2  
                                _CREN 0CEC                                  u1007 0278  
                                u1017 01EC                                  u1107 017A  
                                u1027 0222                                  u1117 0181  
                                u1037 0094                                  u1127 01A6  
                                u1047 00CB                                  u1137 01AD  
                                u1057 0101                                  u1067 012F  
                                u1077 0134                                  _LATA 010C  
                                u1087 014D                                  _LATC 010E  
                                u1097 0154                                  _PEIE 005E  
                                _RCIE 048D                                  _RCIF 008D  
                                _OERR 0CE9                                  _TMR0 0015  
                                _SPEN 0CEF                                  _TXIE 048C  
                                _TXEN 0CF5                                  _TXIF 008C  
                                _SYNC 0CF4                                  _WPUA 020C  
                                _WPUC 020E                __size_of_stop_TMR0_ISR 0003  
                   _read_ADC_channels 02DC                          __CFG_WRT$OFF 0000  
                                _main 029E                                  fsr0h 0005  
                                fsr1h 0007                                  indf0 0000  
                                fsr0l 0004                                  indf1 0001  
                                fsr1l 0006                                  btemp 007E  
                  ?_read_ADC_channels 0075                                  start 0055  
                       __CFG_MCLRE$ON 0000                   ??_read_ADC_channels 0052  
                               ??_isr 0078        __size_of_OSCILLATOR_Initialize 0006  
                     _USART_tx_length 0074         __end_of_OSCILLATOR_Initialize 0476  
                               ?_main 0075                                 _ADC_2 03E0  
                               _ADC_4 03BD                                 _ADC_5 039A  
                               _BRG16 0CFB                                 i1l120 0015  
                               i1l121 0050                                 i1l122 0034  
                               _RCREG 0199                                 _PORTC 000E  
                               _TRISA 008C                        _start_TMR0_ISR 043E  
                               _TRISC 008E                                 _TXREG 019A  
                      __CFG_FCMEN$OFF 0000             __end_of_read_ADC_channels 0315  
        ?_measure_Impedance_no_offset 0075                                 main@i 006F  
       __size_ofi1_start_RX_USART_ISR 0011                        __CFG_BOREN$OFF 0000  
                               status 0003                                 wtemp0 007E  
                     __initialization 0056                          __end_of_main 02DC  
                       _stop_TMR0_ISR 0482                      ??_close_RX_USART 004C  
              __end_of_start_TMR0_ISR 044E                                ??_main 006E  
                              ?_ADC_2 004C                                ?_ADC_4 004C  
                              ?_ADC_5 004C                           ?_VIN_config 004C  
                      _TIMER0_timeout 0070                        __CFG_PLLEN$OFF 0000  
                              _ADCON0 009D                                _ADCON1 009E  
                              _ADRESH 009C                                _ADRESL 009B  
                              _APFCON 011D                                _ANSELA 018C  
                              _ANSELC 018E                                i1l1911 001E  
                              u114_27 004C                        VIN_config@conf 004C  
                              _OSCCON 0099         ??_measure_Impedance_no_offset 0055  
                              _TMR0IE 005D                                _TMR0IF 005A  
                              _TMR0CS 04AD                                _SPBRGH 019C  
                              _SPBRGL 019B                        __CFG_PWRTE$OFF 0000  
                __size_of_config_ASIC 0031                       config_ASIC@asic 0056  
                      __CFG_STVREN$ON 0000                        ?_stop_TMR0_ISR 0075  
                     ?_start_TMR0_ISR 0075                  measure_Impedance@aux 0056  
         __size_of_start_RX_USART_ISR 0011            __size_of_read_ADC_channels 0039  
                       ?_mess_handler 0075               __size_of_measure_Offset 0056  
                   _SYSTEM_Initialize 047F               __end_of__initialization 0061  
                       __end_of_ADC_2 0403                         __end_of_ADC_4 03E0  
                  ?_SYSTEM_Initialize 0075                         __end_of_ADC_5 03BD  
                 __size_of_VIN_config 0094                        __pcstackCOMMON 0075  
                 ??_SYSTEM_Initialize 004C  __size_of_measure_Impedance_no_offset 008D  
                             ??_ADC_2 004E                               ??_ADC_4 004E  
                             ??_ADC_5 004E                        _OPTION_REGbits 0095  
         __size_of_start_TX_USART_ISR 000F                        ??_mess_handler 006D  
           __end_of_SYSTEM_Initialize 0482                            __pbssBANK0 0020  
                          __pmaintext 029E                       ??_stop_TMR0_ISR 0075  
                read_ADC_channels@aux 0053                            __pintentry 0004  
                measure_Offset@value1 005B                  measure_Offset@value2 005D  
                             _CLKRCON 039A                    __size_of_lputs_ISR 002B  
                     lputs_ISR@length 004C                    __size_of_setup_ADC 0006  
                             _OSCSTAT 009A                               _OSCTUNE 0098  
                  __size_of_start_RCM 0004                               _RXDTSEL 08EF  
                             _TXCKSEL 08EA          __end_ofi1_start_RX_USART_ISR 043E  
                   measure_Offset@aux 0056                          ??_VIN_config 0052  
                             __ptext1 044E                               __ptext2 041C  
                             __ptext3 047B                               __ptext4 045D  
                             __ptext5 046A                               __ptext6 0371  
                             __ptext7 02DC                               __ptext8 039A  
                             __ptext9 0248                 _OSCILLATOR_Initialize 0470  
                        __size_of_isr 0051              ??_PIN_MANAGER_Initialize 004C  
          __size_of_SYSTEM_Initialize 0003                               clrloop0 0465  
                       _mess_rec_size 0041                  end_of_initialization 0061  
                      _measure_Offset 0248                 measure_Impedance@asic 0067  
                   __end_of_lputs_ISR 0371                     __end_of_setup_ADC 0470  
                  __end_of_VIN_config 01BB                      ??_start_TMR0_ISR 0075  
                   __end_of_start_RCM 047F                  __end_of_mess_handler 039A  
                          _setup_TMR0 045D                      __CFG_FOSC$INTOSC 0000  
              __end_of_measure_Offset 029E                         ??_config_ASIC 0055  
                   _measure_Impedance 0064                    ?_measure_Impedance 0075  
                      ADC_2@ADC_value 0050            __end_of_start_RX_USART_ISR 042D  
              ?_OSCILLATOR_Initialize 0075     measure_Impedance_no_offset@value1 0063  
   measure_Impedance_no_offset@value2 0065                   start_initialization 0056  
                 ??_measure_Impedance 0055       __size_of_PIN_MANAGER_Initialize 0019  
                         __end_of_isr 0055                       ?_measure_Offset 0075  
 __end_of_measure_Impedance_no_offset 0248           _measure_Impedance_no_offset 01BB  
             __size_of_close_RX_USART 0005                  i1_start_RX_USART_ISR 042D  
                      ADC_4@ADC_value 0050                         VIN_config@out 0054  
           __end_of_measure_Impedance 0127                        ADC_5@ADC_value 0050  
                 __end_of_config_ASIC 0346                           ?_setup_TMR0 0075  
          __end_of_start_TX_USART_ISR 045D                           __pbssCOMMON 0070  
                           ___latbits 0000                         __pcstackBANK0 004C  
     measure_Impedance_no_offset@asic 0067                 ?i1_start_RX_USART_ISR 0075  
                         VIN_config@i 0053                 __size_of_mess_handler 0029  
              _PIN_MANAGER_Initialize 0403                 __end_of_stop_TMR0_ISR 0485  
                      __size_of_ADC_2 0023                        __size_of_ADC_4 0023  
                      __size_of_ADC_5 0023               read_ADC_channels@value1 005A  
             read_ADC_channels@value2 005C               read_ADC_channels@value3 005E  
                        _mess_handler 0371                   __size_of_setup_TMR0 0007  
                         _config_ASIC 0315                             clear_ram0 0464  
                          lputs_ISR@i 0050            __size_of_measure_Impedance 00C3  
                           _lputs_ISR 0346                             _setup_ADC 046A  
                           _start_RCM 047B                ??i1_start_RX_USART_ISR 0075  
                      _close_RX_USART 0476               measure_Impedance@value1 0063  
             measure_Impedance@value2 0065                            ?_lputs_ISR 004C  
                          ?_setup_ADC 0075               ??_OSCILLATOR_Initialize 004C  
                   start_TMR0_ISR@val 0077                            ?_start_RCM 0075  
      measure_Impedance_no_offset@aux 0056                      ??_measure_Offset 0055  
              __end_of_close_RX_USART 047B                    measure_Offset@asic 005F  
                            __ptext10 01BB                              __ptext11 0064  
                            __ptext20 0470                              __ptext12 03BD  
                            __ptext13 03E0                              __ptext22 042D  
                            __ptext14 0315                              __ptext23 0482  
                            __ptext15 0346                              __ptext24 043E  
                            __ptext16 0476                              __ptext17 0127  
                            __ptext18 047F                              __ptext19 0403  
                       lputs_ISR@data 004F                    _start_RX_USART_ISR 041C  
                       __size_of_main 003E                              _mess_rec 0042  
                 ?_start_RX_USART_ISR 0075                              int$flags 007E  
                        ??_setup_TMR0 004C                           _TIMER0_flag 003E  
                ??_start_RX_USART_ISR 004C               __size_of_start_TMR0_ISR 0010  
                     ?_close_RX_USART 0075                              intlevel1 0000  
                  _start_TX_USART_ISR 044E               ?_PIN_MANAGER_Initialize 0075  
                   __CFG_CLKOUTEN$OFF 0000                    __end_of_setup_TMR0 0464  
                 ?_start_TX_USART_ISR 0075                           ??_lputs_ISR 004D  
                         ??_setup_ADC 004C                           ??_start_RCM 004C  
                ??_start_TX_USART_ISR 004C        __end_of_PIN_MANAGER_Initialize 041C  
                        ?_config_ASIC 0075  
