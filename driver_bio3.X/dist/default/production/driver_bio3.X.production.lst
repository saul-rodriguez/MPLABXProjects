

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Apr  7 16:20:56 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16LF1823
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	intentry,global,class=CODE,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2
    44                           	psect	text31,local,class=CODE,merge=1,delta=2
    45                           	psect	text32,local,class=CODE,merge=1,delta=2
    46                           	dabs	1,0x7E,2
    47  0000                     
    48                           ; Version 1.40
    49                           ; Generated 01/12/2016 GMT
    50                           ; 
    51                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC16LF1823 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     	;# 
    83  0001                     	;# 
    84  0002                     	;# 
    85  0003                     	;# 
    86  0004                     	;# 
    87  0005                     	;# 
    88  0006                     	;# 
    89  0007                     	;# 
    90  0008                     	;# 
    91  0009                     	;# 
    92  000A                     	;# 
    93  000B                     	;# 
    94  000C                     	;# 
    95  000E                     	;# 
    96  0011                     	;# 
    97  0012                     	;# 
    98  0015                     	;# 
    99  0016                     	;# 
   100  0016                     	;# 
   101  0017                     	;# 
   102  0018                     	;# 
   103  0019                     	;# 
   104  001A                     	;# 
   105  001B                     	;# 
   106  001C                     	;# 
   107  001E                     	;# 
   108  001F                     	;# 
   109  008C                     	;# 
   110  008E                     	;# 
   111  0091                     	;# 
   112  0092                     	;# 
   113  0095                     	;# 
   114  0096                     	;# 
   115  0097                     	;# 
   116  0098                     	;# 
   117  0099                     	;# 
   118  009A                     	;# 
   119  009B                     	;# 
   120  009B                     	;# 
   121  009C                     	;# 
   122  009D                     	;# 
   123  009E                     	;# 
   124  010C                     	;# 
   125  010E                     	;# 
   126  0111                     	;# 
   127  0112                     	;# 
   128  0113                     	;# 
   129  0114                     	;# 
   130  0115                     	;# 
   131  0116                     	;# 
   132  0117                     	;# 
   133  0118                     	;# 
   134  0119                     	;# 
   135  011A                     	;# 
   136  011B                     	;# 
   137  011D                     	;# 
   138  011D                     	;# 
   139  018C                     	;# 
   140  018E                     	;# 
   141  0191                     	;# 
   142  0191                     	;# 
   143  0192                     	;# 
   144  0193                     	;# 
   145  0193                     	;# 
   146  0193                     	;# 
   147  0194                     	;# 
   148  0195                     	;# 
   149  0196                     	;# 
   150  0199                     	;# 
   151  019A                     	;# 
   152  019B                     	;# 
   153  019B                     	;# 
   154  019B                     	;# 
   155  019B                     	;# 
   156  019C                     	;# 
   157  019C                     	;# 
   158  019D                     	;# 
   159  019E                     	;# 
   160  019F                     	;# 
   161  020C                     	;# 
   162  020E                     	;# 
   163  0211                     	;# 
   164  0211                     	;# 
   165  0212                     	;# 
   166  0212                     	;# 
   167  0213                     	;# 
   168  0213                     	;# 
   169  0214                     	;# 
   170  0214                     	;# 
   171  0215                     	;# 
   172  0215                     	;# 
   173  0215                     	;# 
   174  0216                     	;# 
   175  0216                     	;# 
   176  0217                     	;# 
   177  0217                     	;# 
   178  0291                     	;# 
   179  0291                     	;# 
   180  0292                     	;# 
   181  0293                     	;# 
   182  0294                     	;# 
   183  0295                     	;# 
   184  0295                     	;# 
   185  0296                     	;# 
   186  0391                     	;# 
   187  0392                     	;# 
   188  0393                     	;# 
   189  039A                     	;# 
   190  039C                     	;# 
   191  039D                     	;# 
   192  039E                     	;# 
   193  039F                     	;# 
   194  0FE4                     	;# 
   195  0FE5                     	;# 
   196  0FE6                     	;# 
   197  0FE7                     	;# 
   198  0FE8                     	;# 
   199  0FE9                     	;# 
   200  0FEA                     	;# 
   201  0FEB                     	;# 
   202  0FED                     	;# 
   203  0FEE                     	;# 
   204  0FEF                     	;# 
   205  0000                     	;# 
   206  0001                     	;# 
   207  0002                     	;# 
   208  0003                     	;# 
   209  0004                     	;# 
   210  0005                     	;# 
   211  0006                     	;# 
   212  0007                     	;# 
   213  0008                     	;# 
   214  0009                     	;# 
   215  000A                     	;# 
   216  000B                     	;# 
   217  000C                     	;# 
   218  000E                     	;# 
   219  0011                     	;# 
   220  0012                     	;# 
   221  0015                     	;# 
   222  0016                     	;# 
   223  0016                     	;# 
   224  0017                     	;# 
   225  0018                     	;# 
   226  0019                     	;# 
   227  001A                     	;# 
   228  001B                     	;# 
   229  001C                     	;# 
   230  001E                     	;# 
   231  001F                     	;# 
   232  008C                     	;# 
   233  008E                     	;# 
   234  0091                     	;# 
   235  0092                     	;# 
   236  0095                     	;# 
   237  0096                     	;# 
   238  0097                     	;# 
   239  0098                     	;# 
   240  0099                     	;# 
   241  009A                     	;# 
   242  009B                     	;# 
   243  009B                     	;# 
   244  009C                     	;# 
   245  009D                     	;# 
   246  009E                     	;# 
   247  010C                     	;# 
   248  010E                     	;# 
   249  0111                     	;# 
   250  0112                     	;# 
   251  0113                     	;# 
   252  0114                     	;# 
   253  0115                     	;# 
   254  0116                     	;# 
   255  0117                     	;# 
   256  0118                     	;# 
   257  0119                     	;# 
   258  011A                     	;# 
   259  011B                     	;# 
   260  011D                     	;# 
   261  011D                     	;# 
   262  018C                     	;# 
   263  018E                     	;# 
   264  0191                     	;# 
   265  0191                     	;# 
   266  0192                     	;# 
   267  0193                     	;# 
   268  0193                     	;# 
   269  0193                     	;# 
   270  0194                     	;# 
   271  0195                     	;# 
   272  0196                     	;# 
   273  0199                     	;# 
   274  019A                     	;# 
   275  019B                     	;# 
   276  019B                     	;# 
   277  019B                     	;# 
   278  019B                     	;# 
   279  019C                     	;# 
   280  019C                     	;# 
   281  019D                     	;# 
   282  019E                     	;# 
   283  019F                     	;# 
   284  020C                     	;# 
   285  020E                     	;# 
   286  0211                     	;# 
   287  0211                     	;# 
   288  0212                     	;# 
   289  0212                     	;# 
   290  0213                     	;# 
   291  0213                     	;# 
   292  0214                     	;# 
   293  0214                     	;# 
   294  0215                     	;# 
   295  0215                     	;# 
   296  0215                     	;# 
   297  0216                     	;# 
   298  0216                     	;# 
   299  0217                     	;# 
   300  0217                     	;# 
   301  0291                     	;# 
   302  0291                     	;# 
   303  0292                     	;# 
   304  0293                     	;# 
   305  0294                     	;# 
   306  0295                     	;# 
   307  0295                     	;# 
   308  0296                     	;# 
   309  0391                     	;# 
   310  0392                     	;# 
   311  0393                     	;# 
   312  039A                     	;# 
   313  039C                     	;# 
   314  039D                     	;# 
   315  039E                     	;# 
   316  039F                     	;# 
   317  0FE4                     	;# 
   318  0FE5                     	;# 
   319  0FE6                     	;# 
   320  0FE7                     	;# 
   321  0FE8                     	;# 
   322  0FE9                     	;# 
   323  0FEA                     	;# 
   324  0FEB                     	;# 
   325  0FED                     	;# 
   326  0FEE                     	;# 
   327  0FEF                     	;# 
   328  0000                     	;# 
   329  0001                     	;# 
   330  0002                     	;# 
   331  0003                     	;# 
   332  0004                     	;# 
   333  0005                     	;# 
   334  0006                     	;# 
   335  0007                     	;# 
   336  0008                     	;# 
   337  0009                     	;# 
   338  000A                     	;# 
   339  000B                     	;# 
   340  000C                     	;# 
   341  000E                     	;# 
   342  0011                     	;# 
   343  0012                     	;# 
   344  0015                     	;# 
   345  0016                     	;# 
   346  0016                     	;# 
   347  0017                     	;# 
   348  0018                     	;# 
   349  0019                     	;# 
   350  001A                     	;# 
   351  001B                     	;# 
   352  001C                     	;# 
   353  001E                     	;# 
   354  001F                     	;# 
   355  008C                     	;# 
   356  008E                     	;# 
   357  0091                     	;# 
   358  0092                     	;# 
   359  0095                     	;# 
   360  0096                     	;# 
   361  0097                     	;# 
   362  0098                     	;# 
   363  0099                     	;# 
   364  009A                     	;# 
   365  009B                     	;# 
   366  009B                     	;# 
   367  009C                     	;# 
   368  009D                     	;# 
   369  009E                     	;# 
   370  010C                     	;# 
   371  010E                     	;# 
   372  0111                     	;# 
   373  0112                     	;# 
   374  0113                     	;# 
   375  0114                     	;# 
   376  0115                     	;# 
   377  0116                     	;# 
   378  0117                     	;# 
   379  0118                     	;# 
   380  0119                     	;# 
   381  011A                     	;# 
   382  011B                     	;# 
   383  011D                     	;# 
   384  011D                     	;# 
   385  018C                     	;# 
   386  018E                     	;# 
   387  0191                     	;# 
   388  0191                     	;# 
   389  0192                     	;# 
   390  0193                     	;# 
   391  0193                     	;# 
   392  0193                     	;# 
   393  0194                     	;# 
   394  0195                     	;# 
   395  0196                     	;# 
   396  0199                     	;# 
   397  019A                     	;# 
   398  019B                     	;# 
   399  019B                     	;# 
   400  019B                     	;# 
   401  019B                     	;# 
   402  019C                     	;# 
   403  019C                     	;# 
   404  019D                     	;# 
   405  019E                     	;# 
   406  019F                     	;# 
   407  020C                     	;# 
   408  020E                     	;# 
   409  0211                     	;# 
   410  0211                     	;# 
   411  0212                     	;# 
   412  0212                     	;# 
   413  0213                     	;# 
   414  0213                     	;# 
   415  0214                     	;# 
   416  0214                     	;# 
   417  0215                     	;# 
   418  0215                     	;# 
   419  0215                     	;# 
   420  0216                     	;# 
   421  0216                     	;# 
   422  0217                     	;# 
   423  0217                     	;# 
   424  0291                     	;# 
   425  0291                     	;# 
   426  0292                     	;# 
   427  0293                     	;# 
   428  0294                     	;# 
   429  0295                     	;# 
   430  0295                     	;# 
   431  0296                     	;# 
   432  0391                     	;# 
   433  0392                     	;# 
   434  0393                     	;# 
   435  039A                     	;# 
   436  039C                     	;# 
   437  039D                     	;# 
   438  039E                     	;# 
   439  039F                     	;# 
   440  0FE4                     	;# 
   441  0FE5                     	;# 
   442  0FE6                     	;# 
   443  0FE7                     	;# 
   444  0FE8                     	;# 
   445  0FE9                     	;# 
   446  0FEA                     	;# 
   447  0FEB                     	;# 
   448  0FED                     	;# 
   449  0FEE                     	;# 
   450  0FEF                     	;# 
   451  0000                     	;# 
   452  0001                     	;# 
   453  0002                     	;# 
   454  0003                     	;# 
   455  0004                     	;# 
   456  0005                     	;# 
   457  0006                     	;# 
   458  0007                     	;# 
   459  0008                     	;# 
   460  0009                     	;# 
   461  000A                     	;# 
   462  000B                     	;# 
   463  000C                     	;# 
   464  000E                     	;# 
   465  0011                     	;# 
   466  0012                     	;# 
   467  0015                     	;# 
   468  0016                     	;# 
   469  0016                     	;# 
   470  0017                     	;# 
   471  0018                     	;# 
   472  0019                     	;# 
   473  001A                     	;# 
   474  001B                     	;# 
   475  001C                     	;# 
   476  001E                     	;# 
   477  001F                     	;# 
   478  008C                     	;# 
   479  008E                     	;# 
   480  0091                     	;# 
   481  0092                     	;# 
   482  0095                     	;# 
   483  0096                     	;# 
   484  0097                     	;# 
   485  0098                     	;# 
   486  0099                     	;# 
   487  009A                     	;# 
   488  009B                     	;# 
   489  009B                     	;# 
   490  009C                     	;# 
   491  009D                     	;# 
   492  009E                     	;# 
   493  010C                     	;# 
   494  010E                     	;# 
   495  0111                     	;# 
   496  0112                     	;# 
   497  0113                     	;# 
   498  0114                     	;# 
   499  0115                     	;# 
   500  0116                     	;# 
   501  0117                     	;# 
   502  0118                     	;# 
   503  0119                     	;# 
   504  011A                     	;# 
   505  011B                     	;# 
   506  011D                     	;# 
   507  011D                     	;# 
   508  018C                     	;# 
   509  018E                     	;# 
   510  0191                     	;# 
   511  0191                     	;# 
   512  0192                     	;# 
   513  0193                     	;# 
   514  0193                     	;# 
   515  0193                     	;# 
   516  0194                     	;# 
   517  0195                     	;# 
   518  0196                     	;# 
   519  0199                     	;# 
   520  019A                     	;# 
   521  019B                     	;# 
   522  019B                     	;# 
   523  019B                     	;# 
   524  019B                     	;# 
   525  019C                     	;# 
   526  019C                     	;# 
   527  019D                     	;# 
   528  019E                     	;# 
   529  019F                     	;# 
   530  020C                     	;# 
   531  020E                     	;# 
   532  0211                     	;# 
   533  0211                     	;# 
   534  0212                     	;# 
   535  0212                     	;# 
   536  0213                     	;# 
   537  0213                     	;# 
   538  0214                     	;# 
   539  0214                     	;# 
   540  0215                     	;# 
   541  0215                     	;# 
   542  0215                     	;# 
   543  0216                     	;# 
   544  0216                     	;# 
   545  0217                     	;# 
   546  0217                     	;# 
   547  0291                     	;# 
   548  0291                     	;# 
   549  0292                     	;# 
   550  0293                     	;# 
   551  0294                     	;# 
   552  0295                     	;# 
   553  0295                     	;# 
   554  0296                     	;# 
   555  0391                     	;# 
   556  0392                     	;# 
   557  0393                     	;# 
   558  039A                     	;# 
   559  039C                     	;# 
   560  039D                     	;# 
   561  039E                     	;# 
   562  039F                     	;# 
   563  0FE4                     	;# 
   564  0FE5                     	;# 
   565  0FE6                     	;# 
   566  0FE7                     	;# 
   567  0FE8                     	;# 
   568  0FE9                     	;# 
   569  0FEA                     	;# 
   570  0FEB                     	;# 
   571  0FED                     	;# 
   572  0FEE                     	;# 
   573  0FEF                     	;# 
   574  0000                     	;# 
   575  0001                     	;# 
   576  0002                     	;# 
   577  0003                     	;# 
   578  0004                     	;# 
   579  0005                     	;# 
   580  0006                     	;# 
   581  0007                     	;# 
   582  0008                     	;# 
   583  0009                     	;# 
   584  000A                     	;# 
   585  000B                     	;# 
   586  000C                     	;# 
   587  000E                     	;# 
   588  0011                     	;# 
   589  0012                     	;# 
   590  0015                     	;# 
   591  0016                     	;# 
   592  0016                     	;# 
   593  0017                     	;# 
   594  0018                     	;# 
   595  0019                     	;# 
   596  001A                     	;# 
   597  001B                     	;# 
   598  001C                     	;# 
   599  001E                     	;# 
   600  001F                     	;# 
   601  008C                     	;# 
   602  008E                     	;# 
   603  0091                     	;# 
   604  0092                     	;# 
   605  0095                     	;# 
   606  0096                     	;# 
   607  0097                     	;# 
   608  0098                     	;# 
   609  0099                     	;# 
   610  009A                     	;# 
   611  009B                     	;# 
   612  009B                     	;# 
   613  009C                     	;# 
   614  009D                     	;# 
   615  009E                     	;# 
   616  010C                     	;# 
   617  010E                     	;# 
   618  0111                     	;# 
   619  0112                     	;# 
   620  0113                     	;# 
   621  0114                     	;# 
   622  0115                     	;# 
   623  0116                     	;# 
   624  0117                     	;# 
   625  0118                     	;# 
   626  0119                     	;# 
   627  011A                     	;# 
   628  011B                     	;# 
   629  011D                     	;# 
   630  011D                     	;# 
   631  018C                     	;# 
   632  018E                     	;# 
   633  0191                     	;# 
   634  0191                     	;# 
   635  0192                     	;# 
   636  0193                     	;# 
   637  0193                     	;# 
   638  0193                     	;# 
   639  0194                     	;# 
   640  0195                     	;# 
   641  0196                     	;# 
   642  0199                     	;# 
   643  019A                     	;# 
   644  019B                     	;# 
   645  019B                     	;# 
   646  019B                     	;# 
   647  019B                     	;# 
   648  019C                     	;# 
   649  019C                     	;# 
   650  019D                     	;# 
   651  019E                     	;# 
   652  019F                     	;# 
   653  020C                     	;# 
   654  020E                     	;# 
   655  0211                     	;# 
   656  0211                     	;# 
   657  0212                     	;# 
   658  0212                     	;# 
   659  0213                     	;# 
   660  0213                     	;# 
   661  0214                     	;# 
   662  0214                     	;# 
   663  0215                     	;# 
   664  0215                     	;# 
   665  0215                     	;# 
   666  0216                     	;# 
   667  0216                     	;# 
   668  0217                     	;# 
   669  0217                     	;# 
   670  0291                     	;# 
   671  0291                     	;# 
   672  0292                     	;# 
   673  0293                     	;# 
   674  0294                     	;# 
   675  0295                     	;# 
   676  0295                     	;# 
   677  0296                     	;# 
   678  0391                     	;# 
   679  0392                     	;# 
   680  0393                     	;# 
   681  039A                     	;# 
   682  039C                     	;# 
   683  039D                     	;# 
   684  039E                     	;# 
   685  039F                     	;# 
   686  0FE4                     	;# 
   687  0FE5                     	;# 
   688  0FE6                     	;# 
   689  0FE7                     	;# 
   690  0FE8                     	;# 
   691  0FE9                     	;# 
   692  0FEA                     	;# 
   693  0FEB                     	;# 
   694  0FED                     	;# 
   695  0FEE                     	;# 
   696  0FEF                     	;# 
   697  0000                     	;# 
   698  0001                     	;# 
   699  0002                     	;# 
   700  0003                     	;# 
   701  0004                     	;# 
   702  0005                     	;# 
   703  0006                     	;# 
   704  0007                     	;# 
   705  0008                     	;# 
   706  0009                     	;# 
   707  000A                     	;# 
   708  000B                     	;# 
   709  000C                     	;# 
   710  000E                     	;# 
   711  0011                     	;# 
   712  0012                     	;# 
   713  0015                     	;# 
   714  0016                     	;# 
   715  0016                     	;# 
   716  0017                     	;# 
   717  0018                     	;# 
   718  0019                     	;# 
   719  001A                     	;# 
   720  001B                     	;# 
   721  001C                     	;# 
   722  001E                     	;# 
   723  001F                     	;# 
   724  008C                     	;# 
   725  008E                     	;# 
   726  0091                     	;# 
   727  0092                     	;# 
   728  0095                     	;# 
   729  0096                     	;# 
   730  0097                     	;# 
   731  0098                     	;# 
   732  0099                     	;# 
   733  009A                     	;# 
   734  009B                     	;# 
   735  009B                     	;# 
   736  009C                     	;# 
   737  009D                     	;# 
   738  009E                     	;# 
   739  010C                     	;# 
   740  010E                     	;# 
   741  0111                     	;# 
   742  0112                     	;# 
   743  0113                     	;# 
   744  0114                     	;# 
   745  0115                     	;# 
   746  0116                     	;# 
   747  0117                     	;# 
   748  0118                     	;# 
   749  0119                     	;# 
   750  011A                     	;# 
   751  011B                     	;# 
   752  011D                     	;# 
   753  011D                     	;# 
   754  018C                     	;# 
   755  018E                     	;# 
   756  0191                     	;# 
   757  0191                     	;# 
   758  0192                     	;# 
   759  0193                     	;# 
   760  0193                     	;# 
   761  0193                     	;# 
   762  0194                     	;# 
   763  0195                     	;# 
   764  0196                     	;# 
   765  0199                     	;# 
   766  019A                     	;# 
   767  019B                     	;# 
   768  019B                     	;# 
   769  019B                     	;# 
   770  019B                     	;# 
   771  019C                     	;# 
   772  019C                     	;# 
   773  019D                     	;# 
   774  019E                     	;# 
   775  019F                     	;# 
   776  020C                     	;# 
   777  020E                     	;# 
   778  0211                     	;# 
   779  0211                     	;# 
   780  0212                     	;# 
   781  0212                     	;# 
   782  0213                     	;# 
   783  0213                     	;# 
   784  0214                     	;# 
   785  0214                     	;# 
   786  0215                     	;# 
   787  0215                     	;# 
   788  0215                     	;# 
   789  0216                     	;# 
   790  0216                     	;# 
   791  0217                     	;# 
   792  0217                     	;# 
   793  0291                     	;# 
   794  0291                     	;# 
   795  0292                     	;# 
   796  0293                     	;# 
   797  0294                     	;# 
   798  0295                     	;# 
   799  0295                     	;# 
   800  0296                     	;# 
   801  0391                     	;# 
   802  0392                     	;# 
   803  0393                     	;# 
   804  039A                     	;# 
   805  039C                     	;# 
   806  039D                     	;# 
   807  039E                     	;# 
   808  039F                     	;# 
   809  0FE4                     	;# 
   810  0FE5                     	;# 
   811  0FE6                     	;# 
   812  0FE7                     	;# 
   813  0FE8                     	;# 
   814  0FE9                     	;# 
   815  0FEA                     	;# 
   816  0FEB                     	;# 
   817  0FED                     	;# 
   818  0FEE                     	;# 
   819  0FEF                     	;# 
   820  0000                     	;# 
   821  0001                     	;# 
   822  0002                     	;# 
   823  0003                     	;# 
   824  0004                     	;# 
   825  0005                     	;# 
   826  0006                     	;# 
   827  0007                     	;# 
   828  0008                     	;# 
   829  0009                     	;# 
   830  000A                     	;# 
   831  000B                     	;# 
   832  000C                     	;# 
   833  000E                     	;# 
   834  0011                     	;# 
   835  0012                     	;# 
   836  0015                     	;# 
   837  0016                     	;# 
   838  0016                     	;# 
   839  0017                     	;# 
   840  0018                     	;# 
   841  0019                     	;# 
   842  001A                     	;# 
   843  001B                     	;# 
   844  001C                     	;# 
   845  001E                     	;# 
   846  001F                     	;# 
   847  008C                     	;# 
   848  008E                     	;# 
   849  0091                     	;# 
   850  0092                     	;# 
   851  0095                     	;# 
   852  0096                     	;# 
   853  0097                     	;# 
   854  0098                     	;# 
   855  0099                     	;# 
   856  009A                     	;# 
   857  009B                     	;# 
   858  009B                     	;# 
   859  009C                     	;# 
   860  009D                     	;# 
   861  009E                     	;# 
   862  010C                     	;# 
   863  010E                     	;# 
   864  0111                     	;# 
   865  0112                     	;# 
   866  0113                     	;# 
   867  0114                     	;# 
   868  0115                     	;# 
   869  0116                     	;# 
   870  0117                     	;# 
   871  0118                     	;# 
   872  0119                     	;# 
   873  011A                     	;# 
   874  011B                     	;# 
   875  011D                     	;# 
   876  011D                     	;# 
   877  018C                     	;# 
   878  018E                     	;# 
   879  0191                     	;# 
   880  0191                     	;# 
   881  0192                     	;# 
   882  0193                     	;# 
   883  0193                     	;# 
   884  0193                     	;# 
   885  0194                     	;# 
   886  0195                     	;# 
   887  0196                     	;# 
   888  0199                     	;# 
   889  019A                     	;# 
   890  019B                     	;# 
   891  019B                     	;# 
   892  019B                     	;# 
   893  019B                     	;# 
   894  019C                     	;# 
   895  019C                     	;# 
   896  019D                     	;# 
   897  019E                     	;# 
   898  019F                     	;# 
   899  020C                     	;# 
   900  020E                     	;# 
   901  0211                     	;# 
   902  0211                     	;# 
   903  0212                     	;# 
   904  0212                     	;# 
   905  0213                     	;# 
   906  0213                     	;# 
   907  0214                     	;# 
   908  0214                     	;# 
   909  0215                     	;# 
   910  0215                     	;# 
   911  0215                     	;# 
   912  0216                     	;# 
   913  0216                     	;# 
   914  0217                     	;# 
   915  0217                     	;# 
   916  0291                     	;# 
   917  0291                     	;# 
   918  0292                     	;# 
   919  0293                     	;# 
   920  0294                     	;# 
   921  0295                     	;# 
   922  0295                     	;# 
   923  0296                     	;# 
   924  0391                     	;# 
   925  0392                     	;# 
   926  0393                     	;# 
   927  039A                     	;# 
   928  039C                     	;# 
   929  039D                     	;# 
   930  039E                     	;# 
   931  039F                     	;# 
   932  0FE4                     	;# 
   933  0FE5                     	;# 
   934  0FE6                     	;# 
   935  0FE7                     	;# 
   936  0FE8                     	;# 
   937  0FE9                     	;# 
   938  0FEA                     	;# 
   939  0FEB                     	;# 
   940  0FED                     	;# 
   941  0FEE                     	;# 
   942  0FEF                     	;# 
   943  0000                     	;# 
   944  0001                     	;# 
   945  0002                     	;# 
   946  0003                     	;# 
   947  0004                     	;# 
   948  0005                     	;# 
   949  0006                     	;# 
   950  0007                     	;# 
   951  0008                     	;# 
   952  0009                     	;# 
   953  000A                     	;# 
   954  000B                     	;# 
   955  000C                     	;# 
   956  000E                     	;# 
   957  0011                     	;# 
   958  0012                     	;# 
   959  0015                     	;# 
   960  0016                     	;# 
   961  0016                     	;# 
   962  0017                     	;# 
   963  0018                     	;# 
   964  0019                     	;# 
   965  001A                     	;# 
   966  001B                     	;# 
   967  001C                     	;# 
   968  001E                     	;# 
   969  001F                     	;# 
   970  008C                     	;# 
   971  008E                     	;# 
   972  0091                     	;# 
   973  0092                     	;# 
   974  0095                     	;# 
   975  0096                     	;# 
   976  0097                     	;# 
   977  0098                     	;# 
   978  0099                     	;# 
   979  009A                     	;# 
   980  009B                     	;# 
   981  009B                     	;# 
   982  009C                     	;# 
   983  009D                     	;# 
   984  009E                     	;# 
   985  010C                     	;# 
   986  010E                     	;# 
   987  0111                     	;# 
   988  0112                     	;# 
   989  0113                     	;# 
   990  0114                     	;# 
   991  0115                     	;# 
   992  0116                     	;# 
   993  0117                     	;# 
   994  0118                     	;# 
   995  0119                     	;# 
   996  011A                     	;# 
   997  011B                     	;# 
   998  011D                     	;# 
   999  011D                     	;# 
  1000  018C                     	;# 
  1001  018E                     	;# 
  1002  0191                     	;# 
  1003  0191                     	;# 
  1004  0192                     	;# 
  1005  0193                     	;# 
  1006  0193                     	;# 
  1007  0193                     	;# 
  1008  0194                     	;# 
  1009  0195                     	;# 
  1010  0196                     	;# 
  1011  0199                     	;# 
  1012  019A                     	;# 
  1013  019B                     	;# 
  1014  019B                     	;# 
  1015  019B                     	;# 
  1016  019B                     	;# 
  1017  019C                     	;# 
  1018  019C                     	;# 
  1019  019D                     	;# 
  1020  019E                     	;# 
  1021  019F                     	;# 
  1022  020C                     	;# 
  1023  020E                     	;# 
  1024  0211                     	;# 
  1025  0211                     	;# 
  1026  0212                     	;# 
  1027  0212                     	;# 
  1028  0213                     	;# 
  1029  0213                     	;# 
  1030  0214                     	;# 
  1031  0214                     	;# 
  1032  0215                     	;# 
  1033  0215                     	;# 
  1034  0215                     	;# 
  1035  0216                     	;# 
  1036  0216                     	;# 
  1037  0217                     	;# 
  1038  0217                     	;# 
  1039  0291                     	;# 
  1040  0291                     	;# 
  1041  0292                     	;# 
  1042  0293                     	;# 
  1043  0294                     	;# 
  1044  0295                     	;# 
  1045  0295                     	;# 
  1046  0296                     	;# 
  1047  0391                     	;# 
  1048  0392                     	;# 
  1049  0393                     	;# 
  1050  039A                     	;# 
  1051  039C                     	;# 
  1052  039D                     	;# 
  1053  039E                     	;# 
  1054  039F                     	;# 
  1055  0FE4                     	;# 
  1056  0FE5                     	;# 
  1057  0FE6                     	;# 
  1058  0FE7                     	;# 
  1059  0FE8                     	;# 
  1060  0FE9                     	;# 
  1061  0FEA                     	;# 
  1062  0FEB                     	;# 
  1063  0FED                     	;# 
  1064  0FEE                     	;# 
  1065  0FEF                     	;# 
  1066  0000                     	;# 
  1067  0001                     	;# 
  1068  0002                     	;# 
  1069  0003                     	;# 
  1070  0004                     	;# 
  1071  0005                     	;# 
  1072  0006                     	;# 
  1073  0007                     	;# 
  1074  0008                     	;# 
  1075  0009                     	;# 
  1076  000A                     	;# 
  1077  000B                     	;# 
  1078  000C                     	;# 
  1079  000E                     	;# 
  1080  0011                     	;# 
  1081  0012                     	;# 
  1082  0015                     	;# 
  1083  0016                     	;# 
  1084  0016                     	;# 
  1085  0017                     	;# 
  1086  0018                     	;# 
  1087  0019                     	;# 
  1088  001A                     	;# 
  1089  001B                     	;# 
  1090  001C                     	;# 
  1091  001E                     	;# 
  1092  001F                     	;# 
  1093  008C                     	;# 
  1094  008E                     	;# 
  1095  0091                     	;# 
  1096  0092                     	;# 
  1097  0095                     	;# 
  1098  0096                     	;# 
  1099  0097                     	;# 
  1100  0098                     	;# 
  1101  0099                     	;# 
  1102  009A                     	;# 
  1103  009B                     	;# 
  1104  009B                     	;# 
  1105  009C                     	;# 
  1106  009D                     	;# 
  1107  009E                     	;# 
  1108  010C                     	;# 
  1109  010E                     	;# 
  1110  0111                     	;# 
  1111  0112                     	;# 
  1112  0113                     	;# 
  1113  0114                     	;# 
  1114  0115                     	;# 
  1115  0116                     	;# 
  1116  0117                     	;# 
  1117  0118                     	;# 
  1118  0119                     	;# 
  1119  011A                     	;# 
  1120  011B                     	;# 
  1121  011D                     	;# 
  1122  011D                     	;# 
  1123  018C                     	;# 
  1124  018E                     	;# 
  1125  0191                     	;# 
  1126  0191                     	;# 
  1127  0192                     	;# 
  1128  0193                     	;# 
  1129  0193                     	;# 
  1130  0193                     	;# 
  1131  0194                     	;# 
  1132  0195                     	;# 
  1133  0196                     	;# 
  1134  0199                     	;# 
  1135  019A                     	;# 
  1136  019B                     	;# 
  1137  019B                     	;# 
  1138  019B                     	;# 
  1139  019B                     	;# 
  1140  019C                     	;# 
  1141  019C                     	;# 
  1142  019D                     	;# 
  1143  019E                     	;# 
  1144  019F                     	;# 
  1145  020C                     	;# 
  1146  020E                     	;# 
  1147  0211                     	;# 
  1148  0211                     	;# 
  1149  0212                     	;# 
  1150  0212                     	;# 
  1151  0213                     	;# 
  1152  0213                     	;# 
  1153  0214                     	;# 
  1154  0214                     	;# 
  1155  0215                     	;# 
  1156  0215                     	;# 
  1157  0215                     	;# 
  1158  0216                     	;# 
  1159  0216                     	;# 
  1160  0217                     	;# 
  1161  0217                     	;# 
  1162  0291                     	;# 
  1163  0291                     	;# 
  1164  0292                     	;# 
  1165  0293                     	;# 
  1166  0294                     	;# 
  1167  0295                     	;# 
  1168  0295                     	;# 
  1169  0296                     	;# 
  1170  0391                     	;# 
  1171  0392                     	;# 
  1172  0393                     	;# 
  1173  039A                     	;# 
  1174  039C                     	;# 
  1175  039D                     	;# 
  1176  039E                     	;# 
  1177  039F                     	;# 
  1178  0FE4                     	;# 
  1179  0FE5                     	;# 
  1180  0FE6                     	;# 
  1181  0FE7                     	;# 
  1182  0FE8                     	;# 
  1183  0FE9                     	;# 
  1184  0FEA                     	;# 
  1185  0FEB                     	;# 
  1186  0FED                     	;# 
  1187  0FEE                     	;# 
  1188  0FEF                     	;# 
  1189                           
  1190                           	psect	stringtext
  1191  05DA                     __pstringtext:	
  1192  05DA                     _filt:	
  1193  05DA  34C7               	retlw	199
  1194  05DB  3440               	retlw	64
  1195  05DC  3400               	retlw	0
  1196  05DD  34CF               	retlw	207
  1197  05DE  3440               	retlw	64
  1198  05DF  3400               	retlw	0
  1199  05E0  346F               	retlw	111
  1200  05E1  3440               	retlw	64
  1201  05E2  3400               	retlw	0
  1202  05E3  343F               	retlw	63
  1203  05E4  3440               	retlw	64
  1204  05E5  3400               	retlw	0
  1205  05E6  340F               	retlw	15
  1206  05E7  3489               	retlw	137
  1207  05E8  3400               	retlw	0
  1208  05E9  340F               	retlw	15
  1209  05EA  3488               	retlw	136
  1210  05EB  3400               	retlw	0
  1211  05EC  340F               	retlw	15
  1212  05ED  34A4               	retlw	164
  1213  05EE  3400               	retlw	0
  1214  05EF  340F               	retlw	15
  1215  05F0  3409               	retlw	9
  1216  05F1  3401               	retlw	1
  1217  05F2  340F               	retlw	15
  1218  05F3  3408               	retlw	8
  1219  05F4  3401               	retlw	1
  1220  05F5  340F               	retlw	15
  1221  05F6  3424               	retlw	36
  1222  05F7  3401               	retlw	1
  1223  05F8  340F               	retlw	15
  1224  05F9  3432               	retlw	50
  1225  05FA  3401               	retlw	1
  1226  05FB                     __end_of_filt:	
  1227  05FB                     _freqs:	
  1228  05FB  3400               	retlw	0
  1229  05FC  3401               	retlw	1
  1230  05FD  3402               	retlw	2
  1231  05FE  3403               	retlw	3
  1232  05FF  3404               	retlw	4
  1233  0600  3405               	retlw	5
  1234  0601  3406               	retlw	6
  1235  0602  3407               	retlw	7
  1236  0603  3408               	retlw	8
  1237  0604  3409               	retlw	9
  1238  0605  340A               	retlw	10
  1239  0606                     __end_of_freqs:	
  1240  0606                     _gains:	
  1241  0606  3404               	retlw	4
  1242  0607  3424               	retlw	36
  1243  0608  3464               	retlw	100
  1244  0609  346C               	retlw	108
  1245  060A  347C               	retlw	124
  1246  060B  347D               	retlw	125
  1247  060C  347F               	retlw	127
  1248  060D  347B               	retlw	123
  1249  060E                     __end_of_gains:	
  1250  000E                     _PORTC	set	14
  1251  0015                     _TMR0	set	21
  1252  005F                     _GIE	set	95
  1253  005E                     _PEIE	set	94
  1254  0065                     _RA5	set	101
  1255  008D                     _RCIF	set	141
  1256  005D                     _TMR0IE	set	93
  1257  005A                     _TMR0IF	set	90
  1258  008C                     _TXIF	set	140
  1259  009D                     _ADCON0	set	157
  1260  009E                     _ADCON1	set	158
  1261  009C                     _ADRESH	set	156
  1262  009B                     _ADRESL	set	155
  1263  0095                     _OPTION_REGbits	set	149
  1264  0099                     _OSCCON	set	153
  1265  009A                     _OSCSTAT	set	154
  1266  0098                     _OSCTUNE	set	152
  1267  008C                     _TRISA	set	140
  1268  008E                     _TRISC	set	142
  1269  04E9                     _ADGO	set	1257
  1270  04A8                     _PS0	set	1192
  1271  04A9                     _PS1	set	1193
  1272  04AA                     _PS2	set	1194
  1273  04AB                     _PSA	set	1195
  1274  048D                     _RCIE	set	1165
  1275  04AD                     _TMR0CS	set	1197
  1276  048C                     _TXIE	set	1164
  1277  011D                     _APFCON	set	285
  1278  010C                     _LATA	set	268
  1279  010E                     _LATC	set	270
  1280  08EF                     _RXDTSEL	set	2287
  1281  08EA                     _TXCKSEL	set	2282
  1282  018C                     _ANSELA	set	396
  1283  018E                     _ANSELC	set	398
  1284  0199                     _RCREG	set	409
  1285  019C                     _SPBRGH	set	412
  1286  019B                     _SPBRGL	set	411
  1287  019A                     _TXREG	set	410
  1288  0CFB                     _BRG16	set	3323
  1289  0CF2                     _BRGH	set	3314
  1290  0CEC                     _CREN	set	3308
  1291  0CE9                     _OERR	set	3305
  1292  0CFC                     _SCKP	set	3324
  1293  0CEF                     _SPEN	set	3311
  1294  0CF4                     _SYNC	set	3316
  1295  0CF5                     _TXEN	set	3317
  1296  020C                     _WPUA	set	524
  1297  020E                     _WPUC	set	526
  1298  039A                     _CLKRCON	set	922
  1299                           
  1300                           ; #config settings
  1301  0000                     
  1302                           	psect	cinit
  1303  0057                     start_initialization:	
  1304  0057                     __initialization:	
  1305                           
  1306                           ; Clear objects allocated to COMMON
  1307  0057  01F0               	clrf	__pbssCOMMON& (0+127)
  1308  0058  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  1309  0059  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  1310  005A  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  1311  005B  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  1312                           
  1313                           ; Clear objects allocated to BANK0
  1314  005C  3058               	movlw	low __pbssBANK0
  1315  005D  0084               	movwf	4
  1316  005E  3000               	movlw	high __pbssBANK0
  1317  005F  0085               	movwf	5
  1318  0060  3018               	movlw	24
  1319  0061  27CC               	fcall	clear_ram0
  1320                           
  1321                           ; Clear objects allocated to BANK1
  1322  0062  30A0               	movlw	low __pbssBANK1
  1323  0063  0084               	movwf	4
  1324  0064  3000               	movlw	high __pbssBANK1
  1325  0065  0085               	movwf	5
  1326  0066  300F               	movlw	15
  1327  0067  27CC               	fcall	clear_ram0
  1328  0068                     end_of_initialization:	
  1329                           ;End of C runtime variable initialization code
  1330                           
  1331  0068                     __end_of__initialization:	
  1332  0068  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1333  0069  0020               	movlb	0
  1334  006A  2CE7               	ljmp	_main	;jump to C main() function
  1335                           
  1336                           	psect	bssCOMMON
  1337  0070                     __pbssCOMMON:	
  1338  0070                     _TIMER0_timeout:	
  1339  0070                     	ds	2
  1340  0072                     _USART_tx_flag:	
  1341  0072                     	ds	1
  1342  0073                     _USART_tx_index:	
  1343  0073                     	ds	1
  1344  0074                     _USART_tx_length:	
  1345  0074                     	ds	1
  1346                           
  1347                           	psect	bssBANK0
  1348  0058                     __pbssBANK0:	
  1349  0058                     _USART_rx_data:	
  1350  0058                     	ds	10
  1351  0062                     _TIMER0_flag:	
  1352  0062                     	ds	1
  1353  0063                     _USART_rx_flag:	
  1354  0063                     	ds	1
  1355  0064                     _USART_rx_index:	
  1356  0064                     	ds	1
  1357  0065                     _mess_rec_size:	
  1358  0065                     	ds	1
  1359  0066                     _mess_rec:	
  1360  0066                     	ds	10
  1361                           
  1362                           	psect	bssBANK1
  1363  00A0                     __pbssBANK1:	
  1364  00A0                     _USART_tx_data:	
  1365  00A0                     	ds	15
  1366                           
  1367                           	psect	clrtext
  1368  07CC                     clear_ram0:	
  1369                           ;	Called with FSR0 containing the base address, and
  1370                           ;	WREG with the size to clear
  1371                           
  1372  07CC  0064               	clrwdt	;clear the watchdog before getting into this loop
  1373  07CD                     clrloop0:	
  1374  07CD  0180               	clrf	0	;clear RAM location pointed to by FSR
  1375  07CE  3101               	addfsr 0,1
  1376  07CF  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1377  07D0  2FCD               	goto	clrloop0	;have we reached the end yet?
  1378  07D1  3400               	retlw	0	;all done for this memory range, return
  1379                           
  1380                           	psect	cstackBANK1
  1381  00AF                     __pcstackBANK1:	
  1382  00AF                     main@i:	
  1383                           
  1384                           ; 1 bytes @ 0x0
  1385  00AF                     	ds	1
  1386                           
  1387                           	psect	cstackCOMMON
  1388  0075                     __pcstackCOMMON:	
  1389  0075                     ?_OSCILLATOR_Initialize:	
  1390  0075                     ?_setup_TMR0:	
  1391                           ; 1 bytes @ 0x0
  1392                           
  1393  0075                     ?_start_TX_USART_ISR:	
  1394                           ; 1 bytes @ 0x0
  1395                           
  1396  0075                     ?_start_RX_USART_ISR:	
  1397                           ; 1 bytes @ 0x0
  1398                           
  1399  0075                     ?_start_RCM:	
  1400                           ; 1 bytes @ 0x0
  1401                           
  1402  0075                     ?_setup_ADC:	
  1403                           ; 1 bytes @ 0x0
  1404                           
  1405  0075                     ?_mess_handler:	
  1406                           ; 1 bytes @ 0x0
  1407                           
  1408  0075                     ?_stop_TMR0_ISR:	
  1409                           ; 1 bytes @ 0x0
  1410                           
  1411  0075                     ??_stop_TMR0_ISR:	
  1412                           ; 1 bytes @ 0x0
  1413                           
  1414  0075                     ?_start_TMR0_ISR:	
  1415                           ; 1 bytes @ 0x0
  1416                           
  1417  0075                     ??_start_TMR0_ISR:	
  1418                           ; 1 bytes @ 0x0
  1419                           
  1420  0075                     ?_sweep:	
  1421                           ; 1 bytes @ 0x0
  1422                           
  1423  0075                     ?_config_ASIC:	
  1424                           ; 1 bytes @ 0x0
  1425                           
  1426  0075                     ?_read_ADC_channels:	
  1427                           ; 1 bytes @ 0x0
  1428                           
  1429  0075                     ?_measure_Impedance:	
  1430                           ; 1 bytes @ 0x0
  1431                           
  1432  0075                     ?_measure_Impedance_no_offset:	
  1433                           ; 1 bytes @ 0x0
  1434                           
  1435  0075                     ?_measure_Offset:	
  1436                           ; 1 bytes @ 0x0
  1437                           
  1438  0075                     ?_measure_Impedance_SE:	
  1439                           ; 1 bytes @ 0x0
  1440                           
  1441  0075                     ?_PIN_MANAGER_Initialize:	
  1442                           ; 1 bytes @ 0x0
  1443                           
  1444  0075                     ?_SYSTEM_Initialize:	
  1445                           ; 1 bytes @ 0x0
  1446                           
  1447  0075                     ?_main:	
  1448                           ; 1 bytes @ 0x0
  1449                           
  1450  0075                     ?_isr:	
  1451                           ; 1 bytes @ 0x0
  1452                           
  1453  0075                     ?_close_RX_USART:	
  1454                           ; 1 bytes @ 0x0
  1455                           
  1456  0075                     ?i1_start_RX_USART_ISR:	
  1457                           ; 1 bytes @ 0x0
  1458                           
  1459  0075                     ??i1_start_RX_USART_ISR:	
  1460                           ; 1 bytes @ 0x0
  1461                           
  1462                           
  1463                           ; 1 bytes @ 0x0
  1464  0075                     	ds	2
  1465  0077                     start_TMR0_ISR@val:	
  1466                           
  1467                           ; 1 bytes @ 0x2
  1468  0077                     	ds	1
  1469  0078                     ??_isr:	
  1470                           
  1471                           ; 1 bytes @ 0x3
  1472  0078                     	ds	2
  1473                           
  1474                           	psect	cstackBANK0
  1475  0020                     __pcstackBANK0:	
  1476  0020                     ??_OSCILLATOR_Initialize:	
  1477  0020                     ??_setup_TMR0:	
  1478                           ; 1 bytes @ 0x0
  1479                           
  1480  0020                     ??_start_TX_USART_ISR:	
  1481                           ; 1 bytes @ 0x0
  1482                           
  1483  0020                     ??_start_RX_USART_ISR:	
  1484                           ; 1 bytes @ 0x0
  1485                           
  1486  0020                     ??_start_RCM:	
  1487                           ; 1 bytes @ 0x0
  1488                           
  1489  0020                     ??_setup_ADC:	
  1490                           ; 1 bytes @ 0x0
  1491                           
  1492  0020                     ??_PIN_MANAGER_Initialize:	
  1493                           ; 1 bytes @ 0x0
  1494                           
  1495  0020                     ??_SYSTEM_Initialize:	
  1496                           ; 1 bytes @ 0x0
  1497                           
  1498  0020                     ?_config:	
  1499                           ; 1 bytes @ 0x0
  1500                           
  1501  0020                     ?_setGain:	
  1502                           ; 1 bytes @ 0x0
  1503                           
  1504  0020                     ?_setFreq:	
  1505                           ; 1 bytes @ 0x0
  1506                           
  1507  0020                     ??_close_RX_USART:	
  1508                           ; 1 bytes @ 0x0
  1509                           
  1510  0020                     ?_lputs_ISR:	
  1511                           ; 1 bytes @ 0x0
  1512                           
  1513  0020                     ?_calculate_checksum:	
  1514                           ; 1 bytes @ 0x0
  1515                           
  1516  0020                     ?_ADC_2:	
  1517                           ; 1 bytes @ 0x0
  1518                           
  1519  0020                     ?_ADC_4:	
  1520                           ; 2 bytes @ 0x0
  1521                           
  1522  0020                     ?_ADC_5:	
  1523                           ; 2 bytes @ 0x0
  1524                           
  1525  0020                     ?___wmul:	
  1526                           ; 2 bytes @ 0x0
  1527                           
  1528  0020                     setGain@gain_index:	
  1529                           ; 2 bytes @ 0x0
  1530                           
  1531  0020                     setFreq@freq_index:	
  1532                           ; 1 bytes @ 0x0
  1533                           
  1534  0020                     lputs_ISR@length:	
  1535                           ; 1 bytes @ 0x0
  1536                           
  1537  0020                     calculate_checksum@num:	
  1538                           ; 1 bytes @ 0x0
  1539                           
  1540  0020                     ___wmul@multiplier:	
  1541                           ; 1 bytes @ 0x0
  1542                           
  1543  0020                     config@conf:	
  1544                           ; 2 bytes @ 0x0
  1545                           
  1546                           
  1547                           ; 6 bytes @ 0x0
  1548  0020                     	ds	1
  1549  0021                     ??_setGain:	
  1550  0021                     ??_setFreq:	
  1551                           ; 1 bytes @ 0x1
  1552                           
  1553  0021                     ??_lputs_ISR:	
  1554                           ; 1 bytes @ 0x1
  1555                           
  1556  0021                     ??_calculate_checksum:	
  1557                           ; 1 bytes @ 0x1
  1558                           
  1559                           
  1560                           ; 1 bytes @ 0x1
  1561  0021                     	ds	1
  1562  0022                     ??_ADC_2:	
  1563  0022                     ??_ADC_4:	
  1564                           ; 1 bytes @ 0x2
  1565                           
  1566  0022                     ??_ADC_5:	
  1567                           ; 1 bytes @ 0x2
  1568                           
  1569  0022                     setGain@aux:	
  1570                           ; 1 bytes @ 0x2
  1571                           
  1572  0022                     setFreq@asic:	
  1573                           ; 1 bytes @ 0x2
  1574                           
  1575  0022                     ___wmul@multiplicand:	
  1576                           ; 1 bytes @ 0x2
  1577                           
  1578                           
  1579                           ; 2 bytes @ 0x2
  1580  0022                     	ds	1
  1581  0023                     setGain@asic:	
  1582  0023                     setFreq@aux:	
  1583                           ; 1 bytes @ 0x3
  1584                           
  1585  0023                     lputs_ISR@i:	
  1586                           ; 1 bytes @ 0x3
  1587                           
  1588  0023                     calculate_checksum@data:	
  1589                           ; 1 bytes @ 0x3
  1590                           
  1591                           
  1592                           ; 1 bytes @ 0x3
  1593  0023                     	ds	1
  1594  0024                     ??___wmul:	
  1595  0024                     lputs_ISR@data:	
  1596                           ; 1 bytes @ 0x4
  1597                           
  1598  0024                     calculate_checksum@check:	
  1599                           ; 1 bytes @ 0x4
  1600                           
  1601  0024                     ADC_2@ADC_value:	
  1602                           ; 1 bytes @ 0x4
  1603                           
  1604  0024                     ADC_4@ADC_value:	
  1605                           ; 2 bytes @ 0x4
  1606                           
  1607  0024                     ADC_5@ADC_value:	
  1608                           ; 2 bytes @ 0x4
  1609                           
  1610  0024                     ___wmul@product:	
  1611                           ; 2 bytes @ 0x4
  1612                           
  1613                           
  1614                           ; 2 bytes @ 0x4
  1615  0024                     	ds	1
  1616  0025                     calculate_checksum@i:	
  1617                           
  1618                           ; 1 bytes @ 0x5
  1619  0025                     	ds	1
  1620  0026                     ??_read_ADC_channels:	
  1621  0026                     ??_config:	
  1622                           ; 1 bytes @ 0x6
  1623                           
  1624  0026                     ?_setFilt:	
  1625                           ; 1 bytes @ 0x6
  1626                           
  1627  0026                     setFilt@freq_index:	
  1628                           ; 1 bytes @ 0x6
  1629                           
  1630                           
  1631                           ; 1 bytes @ 0x6
  1632  0026                     	ds	1
  1633  0027                     ??_setFilt:	
  1634  0027                     config@i:	
  1635                           ; 1 bytes @ 0x7
  1636                           
  1637  0027                     read_ADC_channels@aux:	
  1638                           ; 1 bytes @ 0x7
  1639                           
  1640                           
  1641                           ; 7 bytes @ 0x7
  1642  0027                     	ds	1
  1643  0028                     config@out:	
  1644                           
  1645                           ; 1 bytes @ 0x8
  1646  0028                     	ds	1
  1647  0029                     ??_config_ASIC:	
  1648  0029                     ??_measure_Impedance:	
  1649                           ; 1 bytes @ 0x9
  1650                           
  1651  0029                     ??_measure_Impedance_no_offset:	
  1652                           ; 1 bytes @ 0x9
  1653                           
  1654  0029                     ??_measure_Offset:	
  1655                           ; 1 bytes @ 0x9
  1656                           
  1657  0029                     ??_measure_Impedance_SE:	
  1658                           ; 1 bytes @ 0x9
  1659                           
  1660  0029                     ?_measure:	
  1661                           ; 1 bytes @ 0x9
  1662                           
  1663  0029                     setFilt@asic:	
  1664                           ; 1 bytes @ 0x9
  1665                           
  1666  0029                     measure@Q:	
  1667                           ; 1 bytes @ 0x9
  1668                           
  1669                           
  1670                           ; 1 bytes @ 0x9
  1671  0029                     	ds	1
  1672  002A                     setFilt@aux:	
  1673  002A                     measure_Offset@aux:	
  1674                           ; 3 bytes @ 0xA
  1675                           
  1676  002A                     config_ASIC@asic:	
  1677                           ; 5 bytes @ 0xA
  1678                           
  1679  002A                     measure@asic:	
  1680                           ; 6 bytes @ 0xA
  1681                           
  1682  002A                     measure_Impedance_SE@aux:	
  1683                           ; 6 bytes @ 0xA
  1684                           
  1685  002A                     measure_Impedance@aux:	
  1686                           ; 8 bytes @ 0xA
  1687                           
  1688  002A                     measure_Impedance_no_offset@aux:	
  1689                           ; 13 bytes @ 0xA
  1690                           
  1691                           
  1692                           ; 13 bytes @ 0xA
  1693  002A                     	ds	4
  1694  002E                     read_ADC_channels@value1:	
  1695                           
  1696                           ; 2 bytes @ 0xE
  1697  002E                     	ds	1
  1698  002F                     measure_Offset@value1:	
  1699                           
  1700                           ; 2 bytes @ 0xF
  1701  002F                     	ds	1
  1702  0030                     ??_measure:	
  1703  0030                     read_ADC_channels@value2:	
  1704                           ; 1 bytes @ 0x10
  1705                           
  1706                           
  1707                           ; 2 bytes @ 0x10
  1708  0030                     	ds	1
  1709  0031                     measure_Offset@value2:	
  1710                           
  1711                           ; 2 bytes @ 0x11
  1712  0031                     	ds	1
  1713  0032                     read_ADC_channels@value3:	
  1714  0032                     measure_Impedance_SE@value1:	
  1715                           ; 2 bytes @ 0x12
  1716                           
  1717                           
  1718                           ; 2 bytes @ 0x12
  1719  0032                     	ds	1
  1720  0033                     measure_Offset@asic:	
  1721                           
  1722                           ; 6 bytes @ 0x13
  1723  0033                     	ds	1
  1724  0034                     measure@offset:	
  1725  0034                     measure_Impedance_SE@asic:	
  1726                           ; 2 bytes @ 0x14
  1727                           
  1728                           
  1729                           ; 6 bytes @ 0x14
  1730  0034                     	ds	2
  1731  0036                     measure@I:	
  1732                           
  1733                           ; 1 bytes @ 0x16
  1734  0036                     	ds	1
  1735  0037                     measure_Impedance@value1:	
  1736  0037                     measure_Impedance_no_offset@value1:	
  1737                           ; 2 bytes @ 0x17
  1738                           
  1739  0037                     measure@value:	
  1740                           ; 2 bytes @ 0x17
  1741                           
  1742                           
  1743                           ; 2 bytes @ 0x17
  1744  0037                     	ds	2
  1745  0039                     measure_Impedance@value2:	
  1746  0039                     measure_Impedance_no_offset@value2:	
  1747                           ; 2 bytes @ 0x19
  1748                           
  1749  0039                     measure@aux2:	
  1750                           ; 2 bytes @ 0x19
  1751                           
  1752                           
  1753                           ; 2 bytes @ 0x19
  1754  0039                     	ds	2
  1755  003B                     measure@aux1:	
  1756  003B                     measure_Impedance@asic:	
  1757                           ; 2 bytes @ 0x1B
  1758                           
  1759  003B                     measure_Impedance_no_offset@asic:	
  1760                           ; 6 bytes @ 0x1B
  1761                           
  1762                           
  1763                           ; 6 bytes @ 0x1B
  1764  003B                     	ds	2
  1765  003D                     ??_sweep:	
  1766                           
  1767                           ; 1 bytes @ 0x1D
  1768  003D                     	ds	2
  1769  003F                     sweep@check:	
  1770                           
  1771                           ; 1 bytes @ 0x1F
  1772  003F                     	ds	1
  1773  0040                     sweep@aux:	
  1774                           
  1775                           ; 7 bytes @ 0x20
  1776  0040                     	ds	7
  1777  0047                     sweep@i:	
  1778                           
  1779                           ; 1 bytes @ 0x27
  1780  0047                     	ds	1
  1781  0048                     sweep@count:	
  1782                           
  1783                           ; 1 bytes @ 0x28
  1784  0048                     	ds	1
  1785  0049                     sweep@freq_index:	
  1786                           
  1787                           ; 1 bytes @ 0x29
  1788  0049                     	ds	1
  1789  004A                     sweep@I:	
  1790                           
  1791                           ; 2 bytes @ 0x2A
  1792  004A                     	ds	2
  1793  004C                     sweep@Q:	
  1794                           
  1795                           ; 2 bytes @ 0x2C
  1796  004C                     	ds	2
  1797  004E                     sweep@gain_index:	
  1798                           
  1799                           ; 1 bytes @ 0x2E
  1800  004E                     	ds	1
  1801  004F                     sweep@ret:	
  1802                           
  1803                           ; 1 bytes @ 0x2F
  1804  004F                     	ds	1
  1805  0050                     sweep@asic:	
  1806                           
  1807                           ; 6 bytes @ 0x30
  1808  0050                     	ds	6
  1809  0056                     ??_mess_handler:	
  1810                           
  1811                           ; 1 bytes @ 0x36
  1812  0056                     	ds	1
  1813  0057                     ??_main:	
  1814                           
  1815                           ; 1 bytes @ 0x37
  1816  0057                     	ds	1
  1817                           
  1818                           	psect	maintext
  1819  04E7                     __pmaintext:	
  1820 ;;
  1821 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1822 ;;
  1823 ;; *************** function _main *****************
  1824 ;; Defined at:
  1825 ;;		line 20 in file "main.c"
  1826 ;; Parameters:    Size  Location     Type
  1827 ;;		None
  1828 ;; Auto vars:     Size  Location     Type
  1829 ;;  i               1    0[BANK1 ] unsigned char 
  1830 ;; Return value:  Size  Location     Type
  1831 ;;                  1    wreg      void 
  1832 ;; Registers used:
  1833 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1834 ;; Tracked objects:
  1835 ;;		On entry : B1F/0
  1836 ;;		On exit  : 0/0
  1837 ;;		Unchanged: 0/0
  1838 ;; Data sizes:     COMMON   BANK0   BANK1
  1839 ;;      Params:         0       0       0
  1840 ;;      Locals:         0       0       1
  1841 ;;      Temps:          0       1       0
  1842 ;;      Totals:         0       1       1
  1843 ;;Total ram usage:        2 bytes
  1844 ;; Hardware stack levels required when called:    6
  1845 ;; This function calls:
  1846 ;;		_SYSTEM_Initialize
  1847 ;;		_mess_handler
  1848 ;;		_setup_ADC
  1849 ;;		_setup_TMR0
  1850 ;;		_start_RCM
  1851 ;;		_start_RX_USART_ISR
  1852 ;;		_start_TX_USART_ISR
  1853 ;; This function is called by:
  1854 ;;		Startup code after reset
  1855 ;; This function uses a non-reentrant model
  1856 ;;
  1857                           
  1858                           
  1859                           ;psect for function _main
  1860  04E7                     _main:	
  1861                           
  1862                           ;main.c: 22: unsigned char i;
  1863                           ;main.c: 24: SYSTEM_Initialize();
  1864                           
  1865                           ;incstack = 0
  1866                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1867  04E7  27E2               	fcall	_SYSTEM_Initialize
  1868                           
  1869                           ;main.c: 28: setup_TMR0();
  1870  04E8  27BE               	fcall	_setup_TMR0
  1871                           
  1872                           ;main.c: 29: start_TX_USART_ISR();
  1873  04E9  27AF               	fcall	_start_TX_USART_ISR
  1874                           
  1875                           ;main.c: 30: start_RX_USART_ISR();
  1876  04EA  277D               	fcall	_start_RX_USART_ISR
  1877                           
  1878                           ;main.c: 31: start_RCM();
  1879  04EB  27DE               	fcall	_start_RCM
  1880                           
  1881                           ;main.c: 32: setup_ADC();
  1882  04EC  27D2               	fcall	_setup_ADC
  1883                           
  1884                           ;main.c: 35: RA5 = 0;
  1885  04ED  0020               	movlb	0	; select bank0
  1886  04EE  128C               	bcf	12,5	;volatile
  1887                           
  1888                           ;main.c: 36: _delay((unsigned long)((150)*(500000/4000.0)));
  1889  04EF  3019               	movlw	25
  1890  04F0  0020               	movlb	0	; select bank0
  1891  04F1  00D7               	movwf	??_main
  1892  04F2  3058               	movlw	88
  1893  04F3                     u1887:	
  1894  04F3  0B89               	decfsz	9,f
  1895  04F4  2CF3               	goto	u1887
  1896  04F5  0BD7               	decfsz	??_main,f
  1897  04F6  2CF3               	goto	u1887
  1898  04F7  0000               	nop
  1899                           
  1900                           ;main.c: 37: RA5 = 1;
  1901  04F8  0020               	movlb	0	; select bank0
  1902  04F9  168C               	bsf	12,5	;volatile
  1903  04FA                     l119:	
  1904                           ;main.c: 109: while(1) {
  1905                           
  1906  04FA  0064               	clrwdt	;# 
  1907                           
  1908                           ;main.c: 113: if (TIMER0_flag) {
  1909  04FB  0020               	movlb	0	; select bank0
  1910  04FC  0862               	movf	_TIMER0_flag,w	;volatile
  1911  04FD  1903               	btfsc	3,2
  1912  04FE  2CFA               	goto	l119
  1913                           
  1914                           ;main.c: 114: TIMER0_flag = 0;
  1915  04FF  01E2               	clrf	_TIMER0_flag	;volatile
  1916                           
  1917                           ;main.c: 116: if (USART_rx_index > 10) {
  1918  0500  300B               	movlw	11
  1919  0501  0264               	subwf	_USART_rx_index,w	;volatile
  1920  0502  1C03               	skipc
  1921  0503  2D06               	goto	l3139
  1922                           
  1923                           ;main.c: 117: USART_rx_index = 0;
  1924  0504  01E4               	clrf	_USART_rx_index	;volatile
  1925                           
  1926                           ;main.c: 118: continue;
  1927  0505  2CFA               	goto	l119
  1928  0506                     l3139:	
  1929                           
  1930                           ;main.c: 119: }
  1931                           ;main.c: 121: if(USART_rx_index == 0)
  1932  0506  0864               	movf	_USART_rx_index,w	;volatile
  1933  0507  1903               	btfsc	3,2
  1934                           
  1935                           ;main.c: 122: continue;
  1936  0508  2CFA               	goto	l119
  1937                           
  1938                           ;main.c: 125: mess_rec_size = USART_rx_index;
  1939  0509  0864               	movf	_USART_rx_index,w	;volatile
  1940  050A  00D7               	movwf	??_main
  1941  050B  0857               	movf	??_main,w
  1942  050C  00E5               	movwf	_mess_rec_size	;volatile
  1943                           
  1944                           ;main.c: 126: USART_rx_index = 0;
  1945  050D  01E4               	clrf	_USART_rx_index	;volatile
  1946                           
  1947                           ;main.c: 128: for (i = 0; i < mess_rec_size; i++)
  1948  050E  0021               	movlb	1	; select bank1
  1949  050F  01AF               	clrf	main@i^(0+128)
  1950  0510                     l3153:	
  1951  0510  0020               	movlb	0	; select bank0
  1952  0511  0865               	movf	_mess_rec_size,w	;volatile
  1953  0512  0021               	movlb	1	; select bank1
  1954  0513  022F               	subwf	main@i^(0+128),w
  1955  0514  1803               	btfsc	3,0
  1956  0515  2D2B               	goto	l3155
  1957                           
  1958                           ;main.c: 129: mess_rec[i] = USART_rx_data[i];
  1959  0516  082F               	movf	main@i^(0+128),w
  1960  0517  3E58               	addlw	(low (_USART_rx_data| 0))& (0+255)
  1961  0518  0086               	movwf	6
  1962  0519  0187               	clrf	7
  1963  051A  0801               	movf	1,w
  1964  051B  0020               	movlb	0	; select bank0
  1965  051C  00D7               	movwf	??_main
  1966  051D  0021               	movlb	1	; select bank1
  1967  051E  082F               	movf	main@i^(0+128),w
  1968  051F  3E66               	addlw	(low (_mess_rec| 0))& (0+255)
  1969  0520  0086               	movwf	6
  1970  0521  0187               	clrf	7
  1971  0522  0020               	movlb	0	; select bank0
  1972  0523  0857               	movf	??_main,w
  1973  0524  0081               	movwf	1
  1974  0525  3001               	movlw	1
  1975  0526  00D7               	movwf	??_main
  1976  0527  0857               	movf	??_main,w
  1977  0528  0021               	movlb	1	; select bank1
  1978  0529  07AF               	addwf	main@i^(0+128),f
  1979  052A  2D10               	goto	l3153
  1980  052B                     l3155:	
  1981                           
  1982                           ;main.c: 132: mess_handler();
  1983  052B  260E               	fcall	_mess_handler
  1984  052C  2CFA               	goto	l119
  1985  052D                     __end_of_main:	
  1986                           
  1987                           	psect	text1
  1988  07AF                     __ptext1:	
  1989 ;; *************** function _start_TX_USART_ISR *****************
  1990 ;; Defined at:
  1991 ;;		line 101 in file "USART1823.c"
  1992 ;; Parameters:    Size  Location     Type
  1993 ;;		None
  1994 ;; Auto vars:     Size  Location     Type
  1995 ;;		None
  1996 ;; Return value:  Size  Location     Type
  1997 ;;                  1    wreg      void 
  1998 ;; Registers used:
  1999 ;;		wreg, status,2
  2000 ;; Tracked objects:
  2001 ;;		On entry : 0/0
  2002 ;;		On exit  : 0/0
  2003 ;;		Unchanged: 0/0
  2004 ;; Data sizes:     COMMON   BANK0   BANK1
  2005 ;;      Params:         0       0       0
  2006 ;;      Locals:         0       0       0
  2007 ;;      Temps:          0       0       0
  2008 ;;      Totals:         0       0       0
  2009 ;;Total ram usage:        0 bytes
  2010 ;; Hardware stack levels used:    1
  2011 ;; Hardware stack levels required when called:    2
  2012 ;; This function calls:
  2013 ;;		Nothing
  2014 ;; This function is called by:
  2015 ;;		_main
  2016 ;; This function uses a non-reentrant model
  2017 ;;
  2018                           
  2019                           
  2020                           ;psect for function _start_TX_USART_ISR
  2021  07AF                     _start_TX_USART_ISR:	
  2022                           
  2023                           ;USART1823.c: 103: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  2024                           
  2025                           ;incstack = 0
  2026                           ; Regs used in _start_TX_USART_ISR: [wreg+status,2]
  2027  07AF  0023               	movlb	3	; select bank3
  2028  07B0  151E               	bsf	30,2	;volatile
  2029  07B1  159F               	bsf	31,3	;volatile
  2030  07B2  019C               	clrf	28	;volatile
  2031  07B3  300C               	movlw	12
  2032  07B4  009B               	movwf	27	;volatile
  2033                           
  2034                           ;USART1823.c: 104: SYNC = 0;
  2035  07B5  121E               	bcf	30,4	;volatile
  2036                           
  2037                           ;USART1823.c: 105: SPEN = 1;
  2038  07B6  179D               	bsf	29,7	;volatile
  2039                           
  2040                           ;USART1823.c: 106: TXEN = 1;
  2041  07B7  169E               	bsf	30,5	;volatile
  2042                           
  2043                           ;USART1823.c: 108: USART_tx_flag = 0;
  2044  07B8  01F2               	clrf	_USART_tx_flag	;volatile
  2045                           
  2046                           ;USART1823.c: 109: USART_tx_index = 0;
  2047  07B9  01F3               	clrf	_USART_tx_index	;volatile
  2048                           
  2049                           ;USART1823.c: 110: USART_tx_length = 0;
  2050  07BA  01F4               	clrf	_USART_tx_length	;volatile
  2051                           
  2052                           ;USART1823.c: 113: PEIE = 1;
  2053  07BB  170B               	bsf	11,6	;volatile
  2054                           
  2055                           ;USART1823.c: 114: GIE = 1;
  2056  07BC  178B               	bsf	11,7	;volatile
  2057  07BD  0008               	return
  2058  07BE                     __end_of_start_TX_USART_ISR:	
  2059                           
  2060                           	psect	text2
  2061  077D                     __ptext2:	
  2062 ;; *************** function _start_RX_USART_ISR *****************
  2063 ;; Defined at:
  2064 ;;		line 83 in file "USART1823.c"
  2065 ;; Parameters:    Size  Location     Type
  2066 ;;		None
  2067 ;; Auto vars:     Size  Location     Type
  2068 ;;		None
  2069 ;; Return value:  Size  Location     Type
  2070 ;;                  1    wreg      void 
  2071 ;; Registers used:
  2072 ;;		wreg, status,2
  2073 ;; Tracked objects:
  2074 ;;		On entry : 0/0
  2075 ;;		On exit  : 0/0
  2076 ;;		Unchanged: 0/0
  2077 ;; Data sizes:     COMMON   BANK0   BANK1
  2078 ;;      Params:         0       0       0
  2079 ;;      Locals:         0       0       0
  2080 ;;      Temps:          0       0       0
  2081 ;;      Totals:         0       0       0
  2082 ;;Total ram usage:        0 bytes
  2083 ;; Hardware stack levels used:    1
  2084 ;; Hardware stack levels required when called:    2
  2085 ;; This function calls:
  2086 ;;		Nothing
  2087 ;; This function is called by:
  2088 ;;		_main
  2089 ;; This function uses a non-reentrant model
  2090 ;;
  2091                           
  2092                           
  2093                           ;psect for function _start_RX_USART_ISR
  2094  077D                     _start_RX_USART_ISR:	
  2095                           
  2096                           ;USART1823.c: 86: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  2097                           
  2098                           ;incstack = 0
  2099                           ; Regs used in _start_RX_USART_ISR: [wreg+status,2]
  2100  077D  0023               	movlb	3	; select bank3
  2101  077E  151E               	bsf	30,2	;volatile
  2102  077F  159F               	bsf	31,3	;volatile
  2103  0780  019C               	clrf	28	;volatile
  2104  0781  300C               	movlw	12
  2105  0782  009B               	movwf	27	;volatile
  2106                           
  2107                           ;USART1823.c: 88: SYNC = 0;
  2108  0783  121E               	bcf	30,4	;volatile
  2109                           
  2110                           ;USART1823.c: 89: SPEN = 1;
  2111  0784  179D               	bsf	29,7	;volatile
  2112                           
  2113                           ;USART1823.c: 90: CREN = 1;
  2114  0785  161D               	bsf	29,4	;volatile
  2115                           
  2116                           ;USART1823.c: 92: USART_rx_flag = 0;
  2117  0786  0020               	movlb	0	; select bank0
  2118  0787  01E3               	clrf	_USART_rx_flag	;volatile
  2119                           
  2120                           ;USART1823.c: 93: USART_rx_index = 0;
  2121  0788  01E4               	clrf	_USART_rx_index	;volatile
  2122                           
  2123                           ;USART1823.c: 95: RCIE = 1;
  2124  0789  0021               	movlb	1	; select bank1
  2125  078A  1691               	bsf	17,5	;volatile
  2126                           
  2127                           ;USART1823.c: 96: PEIE = 1;
  2128  078B  170B               	bsf	11,6	;volatile
  2129                           
  2130                           ;USART1823.c: 97: GIE = 1;
  2131  078C  178B               	bsf	11,7	;volatile
  2132  078D  0008               	return
  2133  078E                     __end_of_start_RX_USART_ISR:	
  2134                           
  2135                           	psect	text3
  2136  07DE                     __ptext3:	
  2137 ;; *************** function _start_RCM *****************
  2138 ;; Defined at:
  2139 ;;		line 4 in file "RCM1823.c"
  2140 ;; Parameters:    Size  Location     Type
  2141 ;;		None
  2142 ;; Auto vars:     Size  Location     Type
  2143 ;;		None
  2144 ;; Return value:  Size  Location     Type
  2145 ;;                  1    wreg      void 
  2146 ;; Registers used:
  2147 ;;		wreg
  2148 ;; Tracked objects:
  2149 ;;		On entry : 0/0
  2150 ;;		On exit  : 0/0
  2151 ;;		Unchanged: 0/0
  2152 ;; Data sizes:     COMMON   BANK0   BANK1
  2153 ;;      Params:         0       0       0
  2154 ;;      Locals:         0       0       0
  2155 ;;      Temps:          0       0       0
  2156 ;;      Totals:         0       0       0
  2157 ;;Total ram usage:        0 bytes
  2158 ;; Hardware stack levels used:    1
  2159 ;; Hardware stack levels required when called:    2
  2160 ;; This function calls:
  2161 ;;		Nothing
  2162 ;; This function is called by:
  2163 ;;		_main
  2164 ;; This function uses a non-reentrant model
  2165 ;;
  2166                           
  2167                           
  2168                           ;psect for function _start_RCM
  2169  07DE                     _start_RCM:	
  2170                           
  2171                           ;RCM1823.c: 6: CLKRCON = 0b11010000;
  2172                           
  2173                           ;incstack = 0
  2174                           ; Regs used in _start_RCM: [wreg]
  2175  07DE  30D0               	movlw	208
  2176  07DF  0027               	movlb	7	; select bank7
  2177  07E0  009A               	movwf	26	;volatile
  2178  07E1  0008               	return
  2179  07E2                     __end_of_start_RCM:	
  2180                           
  2181                           	psect	text4
  2182  07BE                     __ptext4:	
  2183 ;; *************** function _setup_TMR0 *****************
  2184 ;; Defined at:
  2185 ;;		line 10 in file "TMR0.c"
  2186 ;; Parameters:    Size  Location     Type
  2187 ;;		None
  2188 ;; Auto vars:     Size  Location     Type
  2189 ;;		None
  2190 ;; Return value:  Size  Location     Type
  2191 ;;                  1    wreg      void 
  2192 ;; Registers used:
  2193 ;;		None
  2194 ;; Tracked objects:
  2195 ;;		On entry : 0/0
  2196 ;;		On exit  : 0/0
  2197 ;;		Unchanged: 0/0
  2198 ;; Data sizes:     COMMON   BANK0   BANK1
  2199 ;;      Params:         0       0       0
  2200 ;;      Locals:         0       0       0
  2201 ;;      Temps:          0       0       0
  2202 ;;      Totals:         0       0       0
  2203 ;;Total ram usage:        0 bytes
  2204 ;; Hardware stack levels used:    1
  2205 ;; Hardware stack levels required when called:    2
  2206 ;; This function calls:
  2207 ;;		Nothing
  2208 ;; This function is called by:
  2209 ;;		_main
  2210 ;; This function uses a non-reentrant model
  2211 ;;
  2212                           
  2213                           
  2214                           ;psect for function _setup_TMR0
  2215  07BE                     _setup_TMR0:	
  2216                           
  2217                           ;TMR0.c: 13: PS2 = 0; PS1 = 1; PS0 = 0;
  2218                           
  2219                           ;incstack = 0
  2220                           ; Regs used in _setup_TMR0: []
  2221  07BE  0021               	movlb	1	; select bank1
  2222  07BF  1115               	bcf	21,2	;volatile
  2223  07C0  1495               	bsf	21,1	;volatile
  2224  07C1  1015               	bcf	21,0	;volatile
  2225                           
  2226                           ;TMR0.c: 16: PSA = 0;
  2227  07C2  1195               	bcf	21,3	;volatile
  2228                           
  2229                           ;TMR0.c: 18: TMR0CS = 0;
  2230  07C3  1295               	bcf	21,5	;volatile
  2231  07C4  0008               	return
  2232  07C5                     __end_of_setup_TMR0:	
  2233                           
  2234                           	psect	text5
  2235  07D2                     __ptext5:	
  2236 ;; *************** function _setup_ADC *****************
  2237 ;; Defined at:
  2238 ;;		line 3 in file "ADC1823.c"
  2239 ;; Parameters:    Size  Location     Type
  2240 ;;		None
  2241 ;; Auto vars:     Size  Location     Type
  2242 ;;		None
  2243 ;; Return value:  Size  Location     Type
  2244 ;;                  1    wreg      void 
  2245 ;; Registers used:
  2246 ;;		wreg
  2247 ;; Tracked objects:
  2248 ;;		On entry : 0/0
  2249 ;;		On exit  : 0/0
  2250 ;;		Unchanged: 0/0
  2251 ;; Data sizes:     COMMON   BANK0   BANK1
  2252 ;;      Params:         0       0       0
  2253 ;;      Locals:         0       0       0
  2254 ;;      Temps:          0       0       0
  2255 ;;      Totals:         0       0       0
  2256 ;;Total ram usage:        0 bytes
  2257 ;; Hardware stack levels used:    1
  2258 ;; Hardware stack levels required when called:    2
  2259 ;; This function calls:
  2260 ;;		Nothing
  2261 ;; This function is called by:
  2262 ;;		_main
  2263 ;; This function uses a non-reentrant model
  2264 ;;
  2265                           
  2266                           
  2267                           ;psect for function _setup_ADC
  2268  07D2                     _setup_ADC:	
  2269                           
  2270                           ;ADC1823.c: 20: ADCON1 = 0b11110000;
  2271                           
  2272                           ;incstack = 0
  2273                           ; Regs used in _setup_ADC: [wreg]
  2274  07D2  30F0               	movlw	240
  2275  07D3  0021               	movlb	1	; select bank1
  2276  07D4  009E               	movwf	30	;volatile
  2277                           
  2278                           ;ADC1823.c: 21: { ADCON0 = 0b00100100;};
  2279  07D5  3024               	movlw	36
  2280  07D6  009D               	movwf	29	;volatile
  2281  07D7  0008               	return
  2282  07D8                     __end_of_setup_ADC:	
  2283                           
  2284                           	psect	text6
  2285  060E                     __ptext6:	
  2286 ;; *************** function _mess_handler *****************
  2287 ;; Defined at:
  2288 ;;		line 11 in file "comm.c"
  2289 ;; Parameters:    Size  Location     Type
  2290 ;;		None
  2291 ;; Auto vars:     Size  Location     Type
  2292 ;;		None
  2293 ;; Return value:  Size  Location     Type
  2294 ;;                  1    wreg      void 
  2295 ;; Registers used:
  2296 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2297 ;; Tracked objects:
  2298 ;;		On entry : 0/0
  2299 ;;		On exit  : 0/0
  2300 ;;		Unchanged: 0/0
  2301 ;; Data sizes:     COMMON   BANK0   BANK1
  2302 ;;      Params:         0       0       0
  2303 ;;      Locals:         0       0       0
  2304 ;;      Temps:          0       1       0
  2305 ;;      Totals:         0       1       0
  2306 ;;Total ram usage:        1 bytes
  2307 ;; Hardware stack levels used:    1
  2308 ;; Hardware stack levels required when called:    5
  2309 ;; This function calls:
  2310 ;;		_config_ASIC
  2311 ;;		_lputs_ISR
  2312 ;;		_measure_Impedance
  2313 ;;		_measure_Impedance_SE
  2314 ;;		_measure_Impedance_no_offset
  2315 ;;		_measure_Offset
  2316 ;;		_read_ADC_channels
  2317 ;;		_sweep
  2318 ;; This function is called by:
  2319 ;;		_main
  2320 ;; This function uses a non-reentrant model
  2321 ;;
  2322                           
  2323                           
  2324                           ;psect for function _mess_handler
  2325  060E                     _mess_handler:	
  2326                           
  2327                           ;comm.c: 16: switch (mess_rec[0]) {
  2328                           
  2329                           ;incstack = 0
  2330                           ; Regs used in _mess_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2331  060E  2E25               	goto	l3113
  2332  060F                     l3095:	
  2333                           ;comm.c: 17: case 't':
  2334                           
  2335                           
  2336                           ;comm.c: 18: lputs_ISR(mess_rec,mess_rec_size);
  2337  060F  0020               	movlb	0	; select bank0
  2338  0610  0865               	movf	_mess_rec_size,w	;volatile
  2339  0611  00D6               	movwf	??_mess_handler
  2340  0612  0856               	movf	??_mess_handler,w
  2341  0613  00A0               	movwf	lputs_ISR@length
  2342  0614  3066               	movlw	(low (_mess_rec| 0))& (0+255)
  2343  0615  2672               	fcall	_lputs_ISR
  2344                           
  2345                           ;comm.c: 19: break;
  2346  0616  0008               	return
  2347  0617                     l3097:	
  2348                           ;comm.c: 21: case 'f':
  2349                           
  2350                           
  2351                           ;comm.c: 22: sweep();
  2352  0617  221C               	fcall	_sweep
  2353                           
  2354                           ;comm.c: 23: break;
  2355  0618  0008               	return
  2356  0619                     l3099:	
  2357                           ;comm.c: 25: case 'c':
  2358                           
  2359                           
  2360                           ;comm.c: 26: config_ASIC();
  2361  0619  2641               	fcall	_config_ASIC
  2362                           
  2363                           ;comm.c: 27: break;
  2364  061A  0008               	return
  2365  061B                     l3101:	
  2366                           ;comm.c: 29: case 'm':
  2367                           
  2368                           
  2369                           ;comm.c: 30: read_ADC_channels();
  2370  061B  256B               	fcall	_read_ADC_channels
  2371                           
  2372                           ;comm.c: 31: break;
  2373  061C  0008               	return
  2374  061D                     l3103:	
  2375                           ;comm.c: 33: case 'z':
  2376                           
  2377                           
  2378                           ;comm.c: 34: measure_Impedance();
  2379  061D  214D               	fcall	_measure_Impedance
  2380                           
  2381                           ;comm.c: 35: break;
  2382  061E  0008               	return
  2383  061F                     l3105:	
  2384                           ;comm.c: 37: case 'y':
  2385                           
  2386                           
  2387                           ;comm.c: 38: measure_Impedance_no_offset();
  2388  061F  2384               	fcall	_measure_Impedance_no_offset
  2389                           
  2390                           ;comm.c: 39: break;
  2391  0620  0008               	return
  2392  0621                     l3107:	
  2393                           ;comm.c: 41: case 'o':
  2394                           
  2395                           
  2396                           ;comm.c: 42: measure_Offset();
  2397  0621  248D               	fcall	_measure_Offset
  2398                           
  2399                           ;comm.c: 43: break;
  2400  0622  0008               	return
  2401  0623                     l3109:	
  2402                           ;comm.c: 45: case 's':
  2403                           
  2404                           
  2405                           ;comm.c: 46: measure_Impedance_SE();
  2406  0623  22DF               	fcall	_measure_Impedance_SE
  2407                           
  2408                           ;comm.c: 58: }
  2409                           
  2410                           ;comm.c: 57: break;
  2411                           
  2412                           ;comm.c: 56: default:
  2413                           
  2414                           ;comm.c: 47: break;
  2415  0624  0008               	return
  2416  0625                     l3113:	
  2417  0625  0020               	movlb	0	; select bank0
  2418  0626  0866               	movf	_mess_rec,w	;volatile
  2419                           
  2420                           ; Switch size 1, requested type "space"
  2421                           ; Number of cases is 8, Range of values is 99 to 122
  2422                           ; switch strategies available:
  2423                           ; Name         Instructions Cycles
  2424                           ; simple_byte           25    13 (average)
  2425                           ; direct_byte           57     9 (fixed)
  2426                           ; jumptable            263     9 (fixed)
  2427                           ;	Chosen strategy is simple_byte
  2428  0627  3A63               	xorlw	99	; case 99
  2429  0628  1903               	skipnz
  2430  0629  2E19               	goto	l3099
  2431  062A  3A05               	xorlw	5	; case 102
  2432  062B  1903               	skipnz
  2433  062C  2E17               	goto	l3097
  2434  062D  3A0B               	xorlw	11	; case 109
  2435  062E  1903               	skipnz
  2436  062F  2E1B               	goto	l3101
  2437  0630  3A02               	xorlw	2	; case 111
  2438  0631  1903               	skipnz
  2439  0632  2E21               	goto	l3107
  2440  0633  3A1C               	xorlw	28	; case 115
  2441  0634  1903               	skipnz
  2442  0635  2E23               	goto	l3109
  2443  0636  3A07               	xorlw	7	; case 116
  2444  0637  1903               	skipnz
  2445  0638  2E0F               	goto	l3095
  2446  0639  3A0D               	xorlw	13	; case 121
  2447  063A  1903               	skipnz
  2448  063B  2E1F               	goto	l3105
  2449  063C  3A03               	xorlw	3	; case 122
  2450  063D  1903               	skipnz
  2451  063E  2E1D               	goto	l3103
  2452  063F  2E40               	goto	l368
  2453  0640                     l368:	
  2454  0640  0008               	return
  2455  0641                     __end_of_mess_handler:	
  2456                           
  2457                           	psect	text7
  2458  021C                     __ptext7:	
  2459 ;; *************** function _sweep *****************
  2460 ;; Defined at:
  2461 ;;		line 441 in file "comm.c"
  2462 ;; Parameters:    Size  Location     Type
  2463 ;;		None
  2464 ;; Auto vars:     Size  Location     Type
  2465 ;;  aux             7   32[BANK0 ] unsigned char [7]
  2466 ;;  asic            6   48[BANK0 ] struct .
  2467 ;;  Q               2   44[BANK0 ] short 
  2468 ;;  I               2   42[BANK0 ] short 
  2469 ;;  ret             1   47[BANK0 ] unsigned char 
  2470 ;;  gain_index      1   46[BANK0 ] unsigned char 
  2471 ;;  freq_index      1   41[BANK0 ] unsigned char 
  2472 ;;  count           1   40[BANK0 ] unsigned char 
  2473 ;;  i               1   39[BANK0 ] unsigned char 
  2474 ;;  check           1   31[BANK0 ] unsigned char 
  2475 ;; Return value:  Size  Location     Type
  2476 ;;                  1    wreg      void 
  2477 ;; Registers used:
  2478 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2479 ;; Tracked objects:
  2480 ;;		On entry : 0/0
  2481 ;;		On exit  : 0/0
  2482 ;;		Unchanged: 0/0
  2483 ;; Data sizes:     COMMON   BANK0   BANK1
  2484 ;;      Params:         0       0       0
  2485 ;;      Locals:         0      23       0
  2486 ;;      Temps:          0       2       0
  2487 ;;      Totals:         0      25       0
  2488 ;;Total ram usage:       25 bytes
  2489 ;; Hardware stack levels used:    1
  2490 ;; Hardware stack levels required when called:    4
  2491 ;; This function calls:
  2492 ;;		_calculate_checksum
  2493 ;;		_lputs_ISR
  2494 ;;		_measure
  2495 ;;		_setFilt
  2496 ;;		_setFreq
  2497 ;;		_setGain
  2498 ;; This function is called by:
  2499 ;;		_mess_handler
  2500 ;; This function uses a non-reentrant model
  2501 ;;
  2502                           
  2503                           
  2504                           ;psect for function _sweep
  2505  021C                     _sweep:	
  2506                           
  2507                           ;comm.c: 443: unsigned char gain_index;
  2508                           ;comm.c: 444: unsigned char freq_index;
  2509                           ;comm.c: 445: unsigned char i, ret, count;
  2510                           ;comm.c: 446: short I,Q;
  2511                           ;comm.c: 447: unsigned char aux[7], check;
  2512                           ;comm.c: 453: VIN asic;
  2513                           ;comm.c: 454: asic.datas[0] = 0;
  2514                           
  2515                           ;incstack = 0
  2516                           ; Regs used in _sweep: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2517  021C  0020               	movlb	0	; select bank0
  2518  021D  01D0               	clrf	sweep@asic
  2519  021E  01D1               	clrf	sweep@asic+1
  2520                           
  2521                           ;comm.c: 455: asic.datas[1] = 0;
  2522  021F  01D2               	clrf	sweep@asic+2
  2523  0220  01D3               	clrf	sweep@asic+3
  2524                           
  2525                           ;comm.c: 456: asic.datas[2] = 0;
  2526  0221  01D4               	clrf	sweep@asic+4
  2527  0222  01D5               	clrf	sweep@asic+5
  2528                           
  2529                           ;comm.c: 462: freq_index = 10;
  2530  0223  300A               	movlw	10
  2531  0224  00BD               	movwf	??_sweep
  2532  0225  083D               	movf	??_sweep,w
  2533  0226  00C9               	movwf	sweep@freq_index
  2534                           
  2535                           ;comm.c: 463: gain_index = 0;
  2536  0227  01CE               	clrf	sweep@gain_index
  2537                           
  2538                           ;comm.c: 464: setGain(&asic,gain_index);
  2539  0228  084E               	movf	sweep@gain_index,w
  2540  0229  00BD               	movwf	??_sweep
  2541  022A  083D               	movf	??_sweep,w
  2542  022B  00A0               	movwf	setGain@gain_index
  2543  022C  3050               	movlw	(low (sweep@asic| 0))& (0+255)
  2544  022D  252D               	fcall	_setGain
  2545                           
  2546                           ;comm.c: 467: for (i = 0; i < 11; i++) {
  2547  022E  0020               	movlb	0	; select bank0
  2548  022F  01C7               	clrf	sweep@i
  2549  0230                     L1:	
  2550  0230  300B               	movlw	11
  2551  0231  0247               	subwf	sweep@i,w
  2552  0232  1803               	btfsc	3,0
  2553  0233  0008               	return
  2554                           
  2555                           ;comm.c: 472: setFreq(&asic,freq_index);
  2556  0234  0849               	movf	sweep@freq_index,w
  2557  0235  00BD               	movwf	??_sweep
  2558  0236  083D               	movf	??_sweep,w
  2559  0237  00A0               	movwf	setFreq@freq_index
  2560  0238  3050               	movlw	(low (sweep@asic| 0))& (0+255)
  2561  0239  269D               	fcall	_setFreq
  2562                           
  2563                           ;comm.c: 473: setFilt(&asic,freq_index);
  2564  023A  0020               	movlb	0	; select bank0
  2565  023B  0849               	movf	sweep@freq_index,w
  2566  023C  00BD               	movwf	??_sweep
  2567  023D  083D               	movf	??_sweep,w
  2568  023E  00A6               	movwf	setFilt@freq_index
  2569  023F  3050               	movlw	(low (sweep@asic| 0))& (0+255)
  2570  0240  25A4               	fcall	_setFilt
  2571                           
  2572                           ;comm.c: 477: count = 0;
  2573  0241  0020               	movlb	0	; select bank0
  2574  0242  01C8               	clrf	sweep@count
  2575                           
  2576                           ;comm.c: 478: ret = 0;
  2577  0243  01CF               	clrf	sweep@ret
  2578  0244                     l403:	
  2579                           ;comm.c: 480: do {
  2580                           
  2581                           
  2582                           ;comm.c: 482: ret = measure(&I,&Q,asic);
  2583  0244  304C               	movlw	(low (sweep@Q| 0))& (0+255)
  2584  0245  00BD               	movwf	??_sweep
  2585  0246  083D               	movf	??_sweep,w
  2586  0247  00A9               	movwf	measure@Q
  2587  0248  3050               	movlw	low sweep@asic
  2588  0249  0086               	movwf	6
  2589  024A  3000               	movlw	high sweep@asic
  2590  024B  0087               	movwf	7
  2591  024C  302A               	movlw	low measure@asic
  2592  024D  0084               	movwf	4
  2593  024E  3000               	movlw	high measure@asic
  2594  024F  0085               	movwf	5
  2595  0250  3F40               	moviw [0]fsr1
  2596  0251  3F80               	movwi [0]fsr0
  2597  0252  3F41               	moviw [1]fsr1
  2598  0253  3F81               	movwi [1]fsr0
  2599  0254  3F42               	moviw [2]fsr1
  2600  0255  3F82               	movwi [2]fsr0
  2601  0256  3F43               	moviw [3]fsr1
  2602  0257  3F83               	movwi [3]fsr0
  2603  0258  3F44               	moviw [4]fsr1
  2604  0259  3F84               	movwi [4]fsr0
  2605  025A  3F45               	moviw [5]fsr1
  2606  025B  3F85               	movwi [5]fsr0
  2607  025C  304A               	movlw	(low (sweep@I| 0))& (0+255)
  2608  025D  206B               	fcall	_measure
  2609  025E  0020               	movlb	0	; select bank0
  2610  025F  00BE               	movwf	??_sweep+1
  2611  0260  083E               	movf	??_sweep+1,w
  2612  0261  00CF               	movwf	sweep@ret
  2613                           
  2614                           ;comm.c: 484: if (ret == 1) {
  2615  0262  034F               	decf	sweep@ret,w
  2616  0263  1D03               	btfss	3,2
  2617  0264  2A76               	goto	l2819
  2618                           
  2619                           ;comm.c: 486: if (count == 2) break;
  2620  0265  3002               	movlw	2
  2621  0266  0648               	xorwf	sweep@count,w
  2622  0267  1903               	btfsc	3,2
  2623  0268  2A91               	goto	l2835
  2624                           
  2625                           ;comm.c: 487: count = ret;
  2626  0269  084F               	movf	sweep@ret,w
  2627  026A  00BD               	movwf	??_sweep
  2628  026B  083D               	movf	??_sweep,w
  2629  026C  00C8               	movwf	sweep@count
  2630                           
  2631                           ;comm.c: 492: if (gain_index < 5) {
  2632  026D  3005               	movlw	5
  2633  026E  024E               	subwf	sweep@gain_index,w
  2634  026F  1803               	skipnc
  2635  0270  2A91               	goto	l2835
  2636                           
  2637                           ;comm.c: 494: gain_index++;
  2638  0271  3001               	movlw	1
  2639  0272  00BD               	movwf	??_sweep
  2640  0273  083D               	movf	??_sweep,w
  2641  0274  07CE               	addwf	sweep@gain_index,f
  2642  0275  2A87               	goto	L2
  2643  0276                     l2819:	
  2644                           ;comm.c: 502: } else if (ret == 2) {
  2645                           
  2646                           ;comm.c: 498: }
  2647                           ;comm.c: 500: continue;
  2648                           
  2649                           ;comm.c: 497: break;
  2650                           
  2651                           ;comm.c: 496: } else {
  2652                           
  2653                           ;comm.c: 495: setGain(&asic,gain_index);
  2654                           
  2655  0276  3002               	movlw	2
  2656  0277  0020               	movlb	0	; select bank0
  2657  0278  064F               	xorwf	sweep@ret,w
  2658  0279  1D03               	btfss	3,2
  2659  027A  2A8D               	goto	l2833
  2660                           
  2661                           ;comm.c: 504: if (count == 1) break;
  2662  027B  0348               	decf	sweep@count,w
  2663  027C  1903               	btfsc	3,2
  2664  027D  2A91               	goto	l2835
  2665                           
  2666                           ;comm.c: 505: count = ret;
  2667  027E  084F               	movf	sweep@ret,w
  2668  027F  00BD               	movwf	??_sweep
  2669  0280  083D               	movf	??_sweep,w
  2670  0281  00C8               	movwf	sweep@count
  2671                           
  2672                           ;comm.c: 507: if (gain_index > 0) {
  2673  0282  084E               	movf	sweep@gain_index,w
  2674  0283  1903               	btfsc	3,2
  2675  0284  2A91               	goto	l2835
  2676                           
  2677                           ;comm.c: 508: gain_index--;
  2678  0285  3001               	movlw	1
  2679  0286  02CE               	subwf	sweep@gain_index,f
  2680  0287                     L2:	
  2681                           
  2682                           ;comm.c: 509: setGain(&asic,gain_index);
  2683  0287  084E               	movf	sweep@gain_index,w
  2684  0288  00BD               	movwf	??_sweep
  2685  0289  083D               	movf	??_sweep,w
  2686  028A  00A0               	movwf	setGain@gain_index
  2687  028B  3050               	movlw	(low (sweep@asic| 0))& (0+255)
  2688  028C  252D               	fcall	_setGain
  2689  028D                     l2833:	
  2690                           ;comm.c: 512: }
  2691                           ;comm.c: 514: continue;
  2692                           
  2693                           ;comm.c: 511: break;
  2694                           
  2695                           ;comm.c: 510: } else {
  2696                           
  2697                           
  2698                           ;comm.c: 515: }
  2699                           ;comm.c: 517: } while (ret);
  2700  028D  0020               	movlb	0	; select bank0
  2701  028E  084F               	movf	sweep@ret,w
  2702  028F  1D03               	btfss	3,2
  2703  0290  2A44               	goto	l403
  2704  0291                     l2835:	
  2705                           
  2706                           ;comm.c: 523: ret = (freq_index << 4) & 0xf0;
  2707  0291  0020               	movlb	0	; select bank0
  2708  0292  0849               	movf	sweep@freq_index,w
  2709  0293  00BD               	movwf	??_sweep
  2710  0294  3003               	movlw	3
  2711  0295                     u1825:	
  2712  0295  35BD               	lslf	??_sweep,f
  2713  0296  3EFF               	addlw	-1
  2714  0297  1D03               	skipz
  2715  0298  2A95               	goto	u1825
  2716  0299  353D               	lslf	??_sweep,w
  2717  029A  39F0               	andlw	240
  2718  029B  00BE               	movwf	??_sweep+1
  2719  029C  083E               	movf	??_sweep+1,w
  2720  029D  00CF               	movwf	sweep@ret
  2721                           
  2722                           ;comm.c: 524: ret |= (gain_index & 0xff);
  2723  029E  084E               	movf	sweep@gain_index,w
  2724  029F  00BD               	movwf	??_sweep
  2725  02A0  083D               	movf	??_sweep,w
  2726  02A1  04CF               	iorwf	sweep@ret,f
  2727                           
  2728                           ;comm.c: 526: aux[0] = 'f';
  2729  02A2  3066               	movlw	102
  2730  02A3  00BD               	movwf	??_sweep
  2731  02A4  083D               	movf	??_sweep,w
  2732  02A5  00C0               	movwf	sweep@aux
  2733                           
  2734                           ;comm.c: 527: aux[1] = (unsigned char)(I & 0xff);
  2735  02A6  084A               	movf	sweep@I,w
  2736  02A7  00BD               	movwf	??_sweep
  2737  02A8  083D               	movf	??_sweep,w
  2738  02A9  00C1               	movwf	sweep@aux+1
  2739                           
  2740                           ;comm.c: 528: aux[2] = (unsigned char)((I >> 8) & 0xff);
  2741  02AA  084B               	movf	sweep@I+1,w
  2742  02AB  00BD               	movwf	??_sweep
  2743  02AC  083D               	movf	??_sweep,w
  2744  02AD  00C2               	movwf	sweep@aux+2
  2745                           
  2746                           ;comm.c: 529: aux[3] = (unsigned char)(Q & 0xff);
  2747  02AE  084C               	movf	sweep@Q,w
  2748  02AF  00BD               	movwf	??_sweep
  2749  02B0  083D               	movf	??_sweep,w
  2750  02B1  00C3               	movwf	sweep@aux+3
  2751                           
  2752                           ;comm.c: 530: aux[4] = (unsigned char)((Q >> 8) & 0xff);
  2753  02B2  084D               	movf	sweep@Q+1,w
  2754  02B3  00BD               	movwf	??_sweep
  2755  02B4  083D               	movf	??_sweep,w
  2756  02B5  00C4               	movwf	sweep@aux+4
  2757                           
  2758                           ;comm.c: 531: aux[5] = ret;
  2759  02B6  084F               	movf	sweep@ret,w
  2760  02B7  00BD               	movwf	??_sweep
  2761  02B8  083D               	movf	??_sweep,w
  2762  02B9  00C5               	movwf	sweep@aux+5
  2763                           
  2764                           ;comm.c: 533: check = calculate_checksum(aux,6);
  2765  02BA  3006               	movlw	6
  2766  02BB  00BD               	movwf	??_sweep
  2767  02BC  083D               	movf	??_sweep,w
  2768  02BD  00A0               	movwf	calculate_checksum@num
  2769  02BE  3040               	movlw	(low (sweep@aux| 0))& (0+255)
  2770  02BF  274B               	fcall	_calculate_checksum
  2771  02C0  0020               	movlb	0	; select bank0
  2772  02C1  00BE               	movwf	??_sweep+1
  2773  02C2  083E               	movf	??_sweep+1,w
  2774  02C3  00BF               	movwf	sweep@check
  2775                           
  2776                           ;comm.c: 534: aux[6] = check;
  2777  02C4  083F               	movf	sweep@check,w
  2778  02C5  00BD               	movwf	??_sweep
  2779  02C6  083D               	movf	??_sweep,w
  2780  02C7  00C6               	movwf	sweep@aux+6
  2781                           
  2782                           ;comm.c: 537: lputs_ISR(aux,7);
  2783  02C8  3007               	movlw	7
  2784  02C9  00BD               	movwf	??_sweep
  2785  02CA  083D               	movf	??_sweep,w
  2786  02CB  00A0               	movwf	lputs_ISR@length
  2787  02CC  3040               	movlw	(low (sweep@aux| 0))& (0+255)
  2788  02CD  2672               	fcall	_lputs_ISR
  2789                           
  2790                           ;comm.c: 540: _delay((unsigned long)((50)*(500000/4000.0)));
  2791  02CE  3009               	movlw	9
  2792  02CF  0020               	movlb	0	; select bank0
  2793  02D0  00BD               	movwf	??_sweep
  2794  02D1  301C               	movlw	28
  2795  02D2                     u1897:	
  2796  02D2  0B89               	decfsz	9,f
  2797  02D3  2AD2               	goto	u1897
  2798  02D4  0BBD               	decfsz	??_sweep,f
  2799  02D5  2AD2               	goto	u1897
  2800  02D6  0000               	nop
  2801                           
  2802                           ;comm.c: 545: freq_index--;
  2803  02D7  3001               	movlw	1
  2804  02D8  0020               	movlb	0	; select bank0
  2805  02D9  02C9               	subwf	sweep@freq_index,f
  2806  02DA  3001               	movlw	1
  2807  02DB  00BD               	movwf	??_sweep
  2808  02DC  083D               	movf	??_sweep,w
  2809  02DD  07C7               	addwf	sweep@i,f
  2810  02DE  2A30               	goto	L1
  2811  02DF                     __end_of_sweep:	
  2812                           
  2813                           	psect	text8
  2814  052D                     __ptext8:	
  2815 ;; *************** function _setGain *****************
  2816 ;; Defined at:
  2817 ;;		line 250 in file "bio3.c"
  2818 ;; Parameters:    Size  Location     Type
  2819 ;;  asic            1    wreg     PTR struct .
  2820 ;;		 -> sweep@asic(6), 
  2821 ;;  gain_index      1    0[BANK0 ] unsigned char 
  2822 ;; Auto vars:     Size  Location     Type
  2823 ;;  asic            1    3[BANK0 ] PTR struct .
  2824 ;;		 -> sweep@asic(6), 
  2825 ;;  aux             1    2[BANK0 ] struct .
  2826 ;; Return value:  Size  Location     Type
  2827 ;;                  1    wreg      void 
  2828 ;; Registers used:
  2829 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, pclath
  2830 ;; Tracked objects:
  2831 ;;		On entry : 0/0
  2832 ;;		On exit  : 0/0
  2833 ;;		Unchanged: 0/0
  2834 ;; Data sizes:     COMMON   BANK0   BANK1
  2835 ;;      Params:         0       1       0
  2836 ;;      Locals:         0       2       0
  2837 ;;      Temps:          0       1       0
  2838 ;;      Totals:         0       4       0
  2839 ;;Total ram usage:        4 bytes
  2840 ;; Hardware stack levels used:    1
  2841 ;; Hardware stack levels required when called:    2
  2842 ;; This function calls:
  2843 ;;		Nothing
  2844 ;; This function is called by:
  2845 ;;		_sweep
  2846 ;; This function uses a non-reentrant model
  2847 ;;
  2848                           
  2849                           
  2850                           ;psect for function _setGain
  2851  052D                     _setGain:	
  2852                           
  2853                           ;incstack = 0
  2854                           ; Regs used in _setGain: [wreg-fsr1h+pclath]
  2855                           ;setGain@asic stored from wreg
  2856  052D  0020               	movlb	0	; select bank0
  2857  052E  00A3               	movwf	setGain@asic
  2858                           
  2859                           ;bio3.c: 252: RADIO_gain aux;
  2860                           ;bio3.c: 253: aux.data = gains[gain_index];
  2861  052F  0820               	movf	setGain@gain_index,w
  2862  0530  3E06               	addlw	low (_gains| (0+32768))
  2863  0531  0084               	movwf	4
  2864  0532  3086               	movlw	high (_gains| (0+32768))
  2865  0533  1803               	skipnc
  2866  0534  3E01               	addlw	1
  2867  0535  0085               	movwf	5
  2868  0536  0800               	movf	0,w	;code access
  2869  0537  00A1               	movwf	??_setGain
  2870  0538  0821               	movf	??_setGain,w
  2871  0539  00A2               	movwf	setGain@aux
  2872                           
  2873                           ;bio3.c: 255: asic->data_bits.GD0 = aux.data_bits.GD0;
  2874  053A  0823               	movf	setGain@asic,w
  2875  053B  0086               	movwf	6
  2876  053C  0187               	clrf	7
  2877  053D  1101               	bcf	1,2
  2878  053E  1822               	btfsc	setGain@aux,0
  2879  053F  1501               	bsf	1,2
  2880                           
  2881                           ;bio3.c: 256: asic->data_bits.GD1 = aux.data_bits.GD1;
  2882  0540  0020               	movlb	0	; select bank0
  2883  0541  0823               	movf	setGain@asic,w
  2884  0542  0086               	movwf	6
  2885  0543  0187               	clrf	7
  2886  0544  1181               	bcf	1,3
  2887  0545  18A2               	btfsc	setGain@aux,1
  2888  0546  1581               	bsf	1,3
  2889                           
  2890                           ;bio3.c: 257: asic->data_bits.GD2 = aux.data_bits.GD2;
  2891  0547  0020               	movlb	0	; select bank0
  2892  0548  0823               	movf	setGain@asic,w
  2893  0549  0086               	movwf	6
  2894  054A  0187               	clrf	7
  2895  054B  1201               	bcf	1,4
  2896  054C  1922               	btfsc	setGain@aux,2
  2897  054D  1601               	bsf	1,4
  2898                           
  2899                           ;bio3.c: 258: asic->data_bits.GS0 = aux.data_bits.GS0;
  2900  054E  0020               	movlb	0	; select bank0
  2901  054F  0823               	movf	setGain@asic,w
  2902  0550  0086               	movwf	6
  2903  0551  0187               	clrf	7
  2904  0552  1381               	bcf	1,7
  2905  0553  19A2               	btfsc	setGain@aux,3
  2906  0554  1781               	bsf	1,7
  2907                           
  2908                           ;bio3.c: 259: asic->data_bits.GS1 = aux.data_bits.GS1;
  2909  0555  0020               	movlb	0	; select bank0
  2910  0556  0A23               	incf	setGain@asic,w
  2911  0557  0086               	movwf	6
  2912  0558  0187               	clrf	7
  2913  0559  1001               	bcf	1,0
  2914  055A  1A22               	btfsc	setGain@aux,4
  2915  055B  1401               	bsf	1,0
  2916                           
  2917                           ;bio3.c: 260: asic->data_bits.GS2 = aux.data_bits.GS2;
  2918  055C  0020               	movlb	0	; select bank0
  2919  055D  0A23               	incf	setGain@asic,w
  2920  055E  0086               	movwf	6
  2921  055F  0187               	clrf	7
  2922  0560  1081               	bcf	1,1
  2923  0561  1AA2               	btfsc	setGain@aux,5
  2924  0562  1481               	bsf	1,1
  2925                           
  2926                           ;bio3.c: 261: asic->data_bits.GS3 = aux.data_bits.GS3;
  2927  0563  0020               	movlb	0	; select bank0
  2928  0564  0A23               	incf	setGain@asic,w
  2929  0565  0086               	movwf	6
  2930  0566  0187               	clrf	7
  2931  0567  1101               	bcf	1,2
  2932  0568  1B22               	btfsc	setGain@aux,6
  2933  0569  1501               	bsf	1,2
  2934  056A  0008               	return
  2935  056B                     __end_of_setGain:	
  2936                           
  2937                           	psect	text9
  2938  069D                     __ptext9:	
  2939 ;; *************** function _setFreq *****************
  2940 ;; Defined at:
  2941 ;;		line 264 in file "bio3.c"
  2942 ;; Parameters:    Size  Location     Type
  2943 ;;  asic            1    wreg     PTR struct .
  2944 ;;		 -> sweep@asic(6), 
  2945 ;;  freq_index      1    0[BANK0 ] unsigned char 
  2946 ;; Auto vars:     Size  Location     Type
  2947 ;;  asic            1    2[BANK0 ] PTR struct .
  2948 ;;		 -> sweep@asic(6), 
  2949 ;;  aux             1    3[BANK0 ] struct .
  2950 ;; Return value:  Size  Location     Type
  2951 ;;                  1    wreg      void 
  2952 ;; Registers used:
  2953 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, pclath
  2954 ;; Tracked objects:
  2955 ;;		On entry : 0/0
  2956 ;;		On exit  : 0/0
  2957 ;;		Unchanged: 0/0
  2958 ;; Data sizes:     COMMON   BANK0   BANK1
  2959 ;;      Params:         0       1       0
  2960 ;;      Locals:         0       2       0
  2961 ;;      Temps:          0       1       0
  2962 ;;      Totals:         0       4       0
  2963 ;;Total ram usage:        4 bytes
  2964 ;; Hardware stack levels used:    1
  2965 ;; Hardware stack levels required when called:    2
  2966 ;; This function calls:
  2967 ;;		Nothing
  2968 ;; This function is called by:
  2969 ;;		_sweep
  2970 ;; This function uses a non-reentrant model
  2971 ;;
  2972                           
  2973                           
  2974                           ;psect for function _setFreq
  2975  069D                     _setFreq:	
  2976                           
  2977                           ;incstack = 0
  2978                           ; Regs used in _setFreq: [wreg-fsr1h+pclath]
  2979                           ;setFreq@asic stored from wreg
  2980  069D  0020               	movlb	0	; select bank0
  2981  069E  00A2               	movwf	setFreq@asic
  2982                           
  2983                           ;bio3.c: 266: RADIO_freq aux;
  2984                           ;bio3.c: 267: aux.data = freqs[freq_index];
  2985  069F  0820               	movf	setFreq@freq_index,w
  2986  06A0  3EFB               	addlw	low (_freqs| (0+32768))
  2987  06A1  0084               	movwf	4
  2988  06A2  3085               	movlw	high (_freqs| (0+32768))
  2989  06A3  1803               	skipnc
  2990  06A4  3E01               	addlw	1
  2991  06A5  0085               	movwf	5
  2992  06A6  0800               	movf	0,w	;code access
  2993  06A7  00A1               	movwf	??_setFreq
  2994  06A8  0821               	movf	??_setFreq,w
  2995  06A9  00A3               	movwf	setFreq@aux
  2996                           
  2997                           ;bio3.c: 269: asic->data_bits.F0 = aux.data_bits.F0;
  2998  06AA  0A22               	incf	setFreq@asic,w
  2999  06AB  0086               	movwf	6
  3000  06AC  0187               	clrf	7
  3001  06AD  1201               	bcf	1,4
  3002  06AE  1823               	btfsc	setFreq@aux,0
  3003  06AF  1601               	bsf	1,4
  3004                           
  3005                           ;bio3.c: 270: asic->data_bits.F1 = aux.data_bits.F1;
  3006  06B0  0020               	movlb	0	; select bank0
  3007  06B1  0A22               	incf	setFreq@asic,w
  3008  06B2  0086               	movwf	6
  3009  06B3  0187               	clrf	7
  3010  06B4  1281               	bcf	1,5
  3011  06B5  18A3               	btfsc	setFreq@aux,1
  3012  06B6  1681               	bsf	1,5
  3013                           
  3014                           ;bio3.c: 271: asic->data_bits.F2 = aux.data_bits.F2;
  3015  06B7  0020               	movlb	0	; select bank0
  3016  06B8  0A22               	incf	setFreq@asic,w
  3017  06B9  0086               	movwf	6
  3018  06BA  0187               	clrf	7
  3019  06BB  1301               	bcf	1,6
  3020  06BC  1923               	btfsc	setFreq@aux,2
  3021  06BD  1701               	bsf	1,6
  3022                           
  3023                           ;bio3.c: 272: asic->data_bits.F3 = aux.data_bits.F3;
  3024  06BE  0020               	movlb	0	; select bank0
  3025  06BF  0A22               	incf	setFreq@asic,w
  3026  06C0  0086               	movwf	6
  3027  06C1  0187               	clrf	7
  3028  06C2  1381               	bcf	1,7
  3029  06C3  19A3               	btfsc	setFreq@aux,3
  3030  06C4  1781               	bsf	1,7
  3031  06C5  0008               	return
  3032  06C6                     __end_of_setFreq:	
  3033                           
  3034                           	psect	text10
  3035  05A4                     __ptext10:	
  3036 ;; *************** function _setFilt *****************
  3037 ;; Defined at:
  3038 ;;		line 276 in file "bio3.c"
  3039 ;; Parameters:    Size  Location     Type
  3040 ;;  asic            1    wreg     PTR struct .
  3041 ;;		 -> sweep@asic(6), 
  3042 ;;  freq_index      1    6[BANK0 ] unsigned char 
  3043 ;; Auto vars:     Size  Location     Type
  3044 ;;  asic            1    9[BANK0 ] PTR struct .
  3045 ;;		 -> sweep@asic(6), 
  3046 ;;  aux             3   10[BANK0 ] struct .
  3047 ;; Return value:  Size  Location     Type
  3048 ;;                  1    wreg      void 
  3049 ;; Registers used:
  3050 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3051 ;; Tracked objects:
  3052 ;;		On entry : 0/0
  3053 ;;		On exit  : 0/0
  3054 ;;		Unchanged: 0/0
  3055 ;; Data sizes:     COMMON   BANK0   BANK1
  3056 ;;      Params:         0       1       0
  3057 ;;      Locals:         0       4       0
  3058 ;;      Temps:          0       2       0
  3059 ;;      Totals:         0       7       0
  3060 ;;Total ram usage:        7 bytes
  3061 ;; Hardware stack levels used:    1
  3062 ;; Hardware stack levels required when called:    3
  3063 ;; This function calls:
  3064 ;;		___wmul
  3065 ;; This function is called by:
  3066 ;;		_sweep
  3067 ;; This function uses a non-reentrant model
  3068 ;;
  3069                           
  3070                           
  3071                           ;psect for function _setFilt
  3072  05A4                     _setFilt:	
  3073                           
  3074                           ;incstack = 0
  3075                           ; Regs used in _setFilt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3076                           ;setFilt@asic stored from wreg
  3077  05A4  0020               	movlb	0	; select bank0
  3078  05A5  00A9               	movwf	setFilt@asic
  3079                           
  3080                           ;bio3.c: 278: VINfilt aux;
  3081                           ;bio3.c: 279: aux.datal = filt[freq_index];
  3082  05A6  0826               	movf	setFilt@freq_index,w
  3083  05A7  00A7               	movwf	??_setFilt
  3084  05A8  01A8               	clrf	??_setFilt+1
  3085  05A9  0827               	movf	??_setFilt,w
  3086  05AA  00A0               	movwf	___wmul@multiplier
  3087  05AB  0828               	movf	??_setFilt+1,w
  3088  05AC  00A1               	movwf	___wmul@multiplier+1
  3089  05AD  3003               	movlw	3
  3090  05AE  00A2               	movwf	___wmul@multiplicand
  3091  05AF  3000               	movlw	0
  3092  05B0  00A3               	movwf	___wmul@multiplicand+1
  3093  05B1  272F               	fcall	___wmul
  3094  05B2  0020               	movlb	0	; select bank0
  3095  05B3  0821               	movf	?___wmul+1,w
  3096  05B4  0085               	movwf	5
  3097  05B5  0820               	movf	?___wmul,w
  3098  05B6  0084               	movwf	4
  3099  05B7  30DA               	movlw	low (_filt| (0+32768))
  3100  05B8  0784               	addwf	4,f
  3101  05B9  3085               	movlw	high (_filt| (0+32768))
  3102  05BA  3D85               	addwfc	5,f
  3103  05BB  3F00               	moviw [0]fsr0
  3104  05BC  00AA               	movwf	setFilt@aux
  3105  05BD  3F01               	moviw [1]fsr0
  3106  05BE  00AB               	movwf	setFilt@aux+1
  3107  05BF  3F02               	moviw [2]fsr0
  3108  05C0  00AC               	movwf	setFilt@aux+2
  3109                           
  3110                           ;bio3.c: 281: asic->data[2] = aux.data[0];
  3111  05C1  082A               	movf	setFilt@aux,w
  3112  05C2  00A7               	movwf	??_setFilt
  3113  05C3  0829               	movf	setFilt@asic,w
  3114  05C4  3E02               	addlw	2
  3115  05C5  0086               	movwf	6
  3116  05C6  0187               	clrf	7
  3117  05C7  0827               	movf	??_setFilt,w
  3118  05C8  0081               	movwf	1
  3119                           
  3120                           ;bio3.c: 282: asic->data[3] = aux.data[1];
  3121  05C9  082B               	movf	setFilt@aux+1,w
  3122  05CA  00A7               	movwf	??_setFilt
  3123  05CB  0829               	movf	setFilt@asic,w
  3124  05CC  3E03               	addlw	3
  3125  05CD  0086               	movwf	6
  3126  05CE  0187               	clrf	7
  3127  05CF  0827               	movf	??_setFilt,w
  3128  05D0  0081               	movwf	1
  3129                           
  3130                           ;bio3.c: 283: asic->data[4] = aux.data[2];
  3131  05D1  082C               	movf	setFilt@aux+2,w
  3132  05D2  00A7               	movwf	??_setFilt
  3133  05D3  0829               	movf	setFilt@asic,w
  3134  05D4  3E04               	addlw	4
  3135  05D5  0086               	movwf	6
  3136  05D6  0187               	clrf	7
  3137  05D7  0827               	movf	??_setFilt,w
  3138  05D8  0081               	movwf	1
  3139  05D9  0008               	return
  3140  05DA                     __end_of_setFilt:	
  3141                           
  3142                           	psect	text11
  3143  072F                     __ptext11:	
  3144 ;; *************** function ___wmul *****************
  3145 ;; Defined at:
  3146 ;;		line 15 in file "/opt/microchip/xc8/v1.40/sources/common/Umul16.c"
  3147 ;; Parameters:    Size  Location     Type
  3148 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3149 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3150 ;; Auto vars:     Size  Location     Type
  3151 ;;  product         2    4[BANK0 ] unsigned int 
  3152 ;; Return value:  Size  Location     Type
  3153 ;;                  2    0[BANK0 ] unsigned int 
  3154 ;; Registers used:
  3155 ;;		wreg, status,2, status,0
  3156 ;; Tracked objects:
  3157 ;;		On entry : 0/0
  3158 ;;		On exit  : 0/0
  3159 ;;		Unchanged: 0/0
  3160 ;; Data sizes:     COMMON   BANK0   BANK1
  3161 ;;      Params:         0       4       0
  3162 ;;      Locals:         0       2       0
  3163 ;;      Temps:          0       0       0
  3164 ;;      Totals:         0       6       0
  3165 ;;Total ram usage:        6 bytes
  3166 ;; Hardware stack levels used:    1
  3167 ;; Hardware stack levels required when called:    2
  3168 ;; This function calls:
  3169 ;;		Nothing
  3170 ;; This function is called by:
  3171 ;;		_setFilt
  3172 ;; This function uses a non-reentrant model
  3173 ;;
  3174                           
  3175                           
  3176                           ;psect for function ___wmul
  3177  072F                     ___wmul:	
  3178                           
  3179                           ;incstack = 0
  3180                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3181  072F  0020               	movlb	0	; select bank0
  3182  0730  01A4               	clrf	___wmul@product
  3183  0731  01A5               	clrf	___wmul@product+1
  3184  0732                     l2599:	
  3185  0732  1C20               	btfss	___wmul@multiplier,0
  3186  0733  2F38               	goto	l547
  3187  0734  0822               	movf	___wmul@multiplicand,w
  3188  0735  07A4               	addwf	___wmul@product,f
  3189  0736  0823               	movf	___wmul@multiplicand+1,w
  3190  0737  3DA5               	addwfc	___wmul@product+1,f
  3191  0738                     l547:	
  3192  0738  3001               	movlw	1
  3193  0739                     u1485:	
  3194  0739  35A2               	lslf	___wmul@multiplicand,f
  3195  073A  0DA3               	rlf	___wmul@multiplicand+1,f
  3196  073B  0B89               	decfsz	9,f
  3197  073C  2F39               	goto	u1485
  3198  073D  3001               	movlw	1
  3199  073E                     u1495:	
  3200  073E  36A1               	lsrf	___wmul@multiplier+1,f
  3201  073F  0CA0               	rrf	___wmul@multiplier,f
  3202  0740  0B89               	decfsz	9,f
  3203  0741  2F3E               	goto	u1495
  3204  0742  0820               	movf	___wmul@multiplier,w
  3205  0743  0421               	iorwf	___wmul@multiplier+1,w
  3206  0744  1D03               	btfss	3,2
  3207  0745  2F32               	goto	l2599
  3208  0746  0825               	movf	___wmul@product+1,w
  3209  0747  00A1               	movwf	?___wmul+1
  3210  0748  0824               	movf	___wmul@product,w
  3211  0749  00A0               	movwf	?___wmul
  3212  074A  0008               	return
  3213  074B                     __end_of___wmul:	
  3214                           
  3215                           	psect	text12
  3216  006B                     __ptext12:	
  3217 ;; *************** function _measure *****************
  3218 ;; Defined at:
  3219 ;;		line 556 in file "comm.c"
  3220 ;; Parameters:    Size  Location     Type
  3221 ;;  I               1    wreg     PTR short 
  3222 ;;		 -> sweep@I(2), 
  3223 ;;  Q               1    9[BANK0 ] PTR short 
  3224 ;;		 -> sweep@Q(2), 
  3225 ;;  asic            6   10[BANK0 ] struct .
  3226 ;; Auto vars:     Size  Location     Type
  3227 ;;  I               1   22[BANK0 ] PTR short 
  3228 ;;		 -> sweep@I(2), 
  3229 ;;  aux1            2   27[BANK0 ] short 
  3230 ;;  aux2            2   25[BANK0 ] short 
  3231 ;;  value           2   23[BANK0 ] unsigned short 
  3232 ;;  offset          2   20[BANK0 ] unsigned short 
  3233 ;; Return value:  Size  Location     Type
  3234 ;;                  1    wreg      unsigned char 
  3235 ;; Registers used:
  3236 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3237 ;; Tracked objects:
  3238 ;;		On entry : 0/0
  3239 ;;		On exit  : 0/0
  3240 ;;		Unchanged: 0/0
  3241 ;; Data sizes:     COMMON   BANK0   BANK1
  3242 ;;      Params:         0       7       0
  3243 ;;      Locals:         0       9       0
  3244 ;;      Temps:          0       4       0
  3245 ;;      Totals:         0      20       0
  3246 ;;Total ram usage:       20 bytes
  3247 ;; Hardware stack levels used:    1
  3248 ;; Hardware stack levels required when called:    3
  3249 ;; This function calls:
  3250 ;;		_ADC_5
  3251 ;;		_config
  3252 ;; This function is called by:
  3253 ;;		_sweep
  3254 ;; This function uses a non-reentrant model
  3255 ;;
  3256                           
  3257                           
  3258                           ;psect for function _measure
  3259  006B                     _measure:	
  3260                           
  3261                           ;incstack = 0
  3262                           ; Regs used in _measure: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3263                           ;measure@I stored from wreg
  3264  006B  0020               	movlb	0	; select bank0
  3265  006C  00B6               	movwf	measure@I
  3266                           
  3267                           ;comm.c: 559: unsigned short offset, value;
  3268                           ;comm.c: 560: short aux1,aux2;
  3269                           ;comm.c: 564: asic.data_bits.CE = 0;
  3270  006D  132A               	bcf	measure@asic,6
  3271                           
  3272                           ;comm.c: 565: config(asic);
  3273  006E  302A               	movlw	low measure@asic
  3274  006F  0086               	movwf	6
  3275  0070  3000               	movlw	high measure@asic
  3276  0071  0087               	movwf	7
  3277  0072  3020               	movlw	low config@conf
  3278  0073  0084               	movwf	4
  3279  0074  3000               	movlw	high config@conf
  3280  0075  0085               	movwf	5
  3281  0076  3F40               	moviw [0]fsr1
  3282  0077  3F80               	movwi [0]fsr0
  3283  0078  3F41               	moviw [1]fsr1
  3284  0079  3F81               	movwi [1]fsr0
  3285  007A  3F42               	moviw [2]fsr1
  3286  007B  3F82               	movwi [2]fsr0
  3287  007C  3F43               	moviw [3]fsr1
  3288  007D  3F83               	movwi [3]fsr0
  3289  007E  3F44               	moviw [4]fsr1
  3290  007F  3F84               	movwi [4]fsr0
  3291  0080  3F45               	moviw [5]fsr1
  3292  0081  3F85               	movwi [5]fsr0
  3293  0082  2419               	fcall	_config
  3294                           
  3295                           ;comm.c: 566: _delay((unsigned long)((15)*(500000/4000.0)));
  3296  0083  3003               	movlw	3
  3297  0084  0020               	movlb	0	; select bank0
  3298  0085  00B0               	movwf	??_measure
  3299  0086  306E               	movlw	110
  3300  0087                     u1907:	
  3301  0087  0B89               	decfsz	9,f
  3302  0088  2887               	goto	u1907
  3303  0089  0BB0               	decfsz	??_measure,f
  3304  008A  2887               	goto	u1907
  3305                           
  3306                           ;comm.c: 568: offset = ADC_5();
  3307  008B  26C6               	fcall	_ADC_5
  3308  008C  0020               	movlb	0	; select bank0
  3309  008D  0821               	movf	?_ADC_5+1,w
  3310  008E  00B5               	movwf	measure@offset+1
  3311  008F  0820               	movf	?_ADC_5,w
  3312  0090  00B4               	movwf	measure@offset
  3313                           
  3314                           ;comm.c: 571: asic.data_bits.CE = 1;
  3315  0091  172A               	bsf	measure@asic,6
  3316                           
  3317                           ;comm.c: 572: asic.data_bits.IQ = 0;
  3318  0092  11AB               	bcf	measure@asic+1,3
  3319                           
  3320                           ;comm.c: 574: config(asic);
  3321  0093  302A               	movlw	low measure@asic
  3322  0094  0086               	movwf	6
  3323  0095  3000               	movlw	high measure@asic
  3324  0096  0087               	movwf	7
  3325  0097  3020               	movlw	low config@conf
  3326  0098  0084               	movwf	4
  3327  0099  3000               	movlw	high config@conf
  3328  009A  0085               	movwf	5
  3329  009B  3F40               	moviw [0]fsr1
  3330  009C  3F80               	movwi [0]fsr0
  3331  009D  3F41               	moviw [1]fsr1
  3332  009E  3F81               	movwi [1]fsr0
  3333  009F  3F42               	moviw [2]fsr1
  3334  00A0  3F82               	movwi [2]fsr0
  3335  00A1  3F43               	moviw [3]fsr1
  3336  00A2  3F83               	movwi [3]fsr0
  3337  00A3  3F44               	moviw [4]fsr1
  3338  00A4  3F84               	movwi [4]fsr0
  3339  00A5  3F45               	moviw [5]fsr1
  3340  00A6  3F85               	movwi [5]fsr0
  3341  00A7  2419               	fcall	_config
  3342                           
  3343                           ;comm.c: 575: _delay((unsigned long)((15)*(500000/4000.0)));
  3344  00A8  3003               	movlw	3
  3345  00A9  0020               	movlb	0	; select bank0
  3346  00AA  00B0               	movwf	??_measure
  3347  00AB  306E               	movlw	110
  3348  00AC                     u1917:	
  3349  00AC  0B89               	decfsz	9,f
  3350  00AD  28AC               	goto	u1917
  3351  00AE  0BB0               	decfsz	??_measure,f
  3352  00AF  28AC               	goto	u1917
  3353                           
  3354                           ;comm.c: 577: value = ADC_5();
  3355  00B0  26C6               	fcall	_ADC_5
  3356  00B1  0020               	movlb	0	; select bank0
  3357  00B2  0821               	movf	?_ADC_5+1,w
  3358  00B3  00B8               	movwf	measure@value+1
  3359  00B4  0820               	movf	?_ADC_5,w
  3360  00B5  00B7               	movwf	measure@value
  3361                           
  3362                           ;comm.c: 578: *I = (value - offset);
  3363  00B6  0934               	comf	measure@offset,w
  3364  00B7  00B0               	movwf	??_measure
  3365  00B8  0935               	comf	measure@offset+1,w
  3366  00B9  00B1               	movwf	??_measure+1
  3367  00BA  0AB0               	incf	??_measure,f
  3368  00BB  1903               	skipnz
  3369  00BC  0AB1               	incf	??_measure+1,f
  3370  00BD  0837               	movf	measure@value,w
  3371  00BE  0730               	addwf	??_measure,w
  3372  00BF  00B2               	movwf	??_measure+2
  3373  00C0  0838               	movf	measure@value+1,w
  3374  00C1  3D31               	addwfc	??_measure+1,w
  3375  00C2  00B3               	movwf	??_measure+3
  3376  00C3  0836               	movf	measure@I,w
  3377  00C4  0086               	movwf	6
  3378  00C5  0187               	clrf	7
  3379  00C6  0832               	movf	??_measure+2,w
  3380  00C7  3FC0               	movwi [0]fsr1
  3381  00C8  0833               	movf	??_measure+3,w
  3382  00C9  3FC1               	movwi [1]fsr1
  3383                           
  3384                           ;comm.c: 579: aux1 = *I;
  3385  00CA  0836               	movf	measure@I,w
  3386  00CB  0086               	movwf	6
  3387  00CC  0187               	clrf	7
  3388  00CD  3F40               	moviw [0]fsr1
  3389  00CE  00BB               	movwf	measure@aux1
  3390  00CF  3F41               	moviw [1]fsr1
  3391  00D0  00BC               	movwf	measure@aux1+1
  3392                           
  3393                           ;comm.c: 581: if (aux1 < 0) {
  3394  00D1  1FBC               	btfss	measure@aux1+1,7
  3395  00D2  28D8               	goto	l2723
  3396                           
  3397                           ;comm.c: 582: aux1 = -aux1;
  3398  00D3  09BB               	comf	measure@aux1,f
  3399  00D4  09BC               	comf	measure@aux1+1,f
  3400  00D5  0ABB               	incf	measure@aux1,f
  3401  00D6  1903               	skipnz
  3402  00D7  0ABC               	incf	measure@aux1+1,f
  3403  00D8                     l2723:	
  3404                           
  3405                           ;comm.c: 583: }
  3406                           ;comm.c: 588: asic.data_bits.IQ = 1;
  3407  00D8  15AB               	bsf	measure@asic+1,3
  3408                           
  3409                           ;comm.c: 590: config(asic);
  3410  00D9  302A               	movlw	low measure@asic
  3411  00DA  0086               	movwf	6
  3412  00DB  3000               	movlw	high measure@asic
  3413  00DC  0087               	movwf	7
  3414  00DD  3020               	movlw	low config@conf
  3415  00DE  0084               	movwf	4
  3416  00DF  3000               	movlw	high config@conf
  3417  00E0  0085               	movwf	5
  3418  00E1  3F40               	moviw [0]fsr1
  3419  00E2  3F80               	movwi [0]fsr0
  3420  00E3  3F41               	moviw [1]fsr1
  3421  00E4  3F81               	movwi [1]fsr0
  3422  00E5  3F42               	moviw [2]fsr1
  3423  00E6  3F82               	movwi [2]fsr0
  3424  00E7  3F43               	moviw [3]fsr1
  3425  00E8  3F83               	movwi [3]fsr0
  3426  00E9  3F44               	moviw [4]fsr1
  3427  00EA  3F84               	movwi [4]fsr0
  3428  00EB  3F45               	moviw [5]fsr1
  3429  00EC  3F85               	movwi [5]fsr0
  3430  00ED  2419               	fcall	_config
  3431                           
  3432                           ;comm.c: 591: _delay((unsigned long)((15)*(500000/4000.0)));
  3433  00EE  3003               	movlw	3
  3434  00EF  0020               	movlb	0	; select bank0
  3435  00F0  00B0               	movwf	??_measure
  3436  00F1  306E               	movlw	110
  3437  00F2                     u1927:	
  3438  00F2  0B89               	decfsz	9,f
  3439  00F3  28F2               	goto	u1927
  3440  00F4  0BB0               	decfsz	??_measure,f
  3441  00F5  28F2               	goto	u1927
  3442                           
  3443                           ;comm.c: 593: value = ADC_5();
  3444  00F6  26C6               	fcall	_ADC_5
  3445  00F7  0020               	movlb	0	; select bank0
  3446  00F8  0821               	movf	?_ADC_5+1,w
  3447  00F9  00B8               	movwf	measure@value+1
  3448  00FA  0820               	movf	?_ADC_5,w
  3449  00FB  00B7               	movwf	measure@value
  3450                           
  3451                           ;comm.c: 594: *Q = (value - offset);
  3452  00FC  0934               	comf	measure@offset,w
  3453  00FD  00B0               	movwf	??_measure
  3454  00FE  0935               	comf	measure@offset+1,w
  3455  00FF  00B1               	movwf	??_measure+1
  3456  0100  0AB0               	incf	??_measure,f
  3457  0101  1903               	skipnz
  3458  0102  0AB1               	incf	??_measure+1,f
  3459  0103  0837               	movf	measure@value,w
  3460  0104  0730               	addwf	??_measure,w
  3461  0105  00B2               	movwf	??_measure+2
  3462  0106  0838               	movf	measure@value+1,w
  3463  0107  3D31               	addwfc	??_measure+1,w
  3464  0108  00B3               	movwf	??_measure+3
  3465  0109  0829               	movf	measure@Q,w
  3466  010A  0086               	movwf	6
  3467  010B  0187               	clrf	7
  3468  010C  0832               	movf	??_measure+2,w
  3469  010D  3FC0               	movwi [0]fsr1
  3470  010E  0833               	movf	??_measure+3,w
  3471  010F  3FC1               	movwi [1]fsr1
  3472                           
  3473                           ;comm.c: 595: aux2 = *Q;
  3474  0110  0829               	movf	measure@Q,w
  3475  0111  0086               	movwf	6
  3476  0112  0187               	clrf	7
  3477  0113  3F40               	moviw [0]fsr1
  3478  0114  00B9               	movwf	measure@aux2
  3479  0115  3F41               	moviw [1]fsr1
  3480  0116  00BA               	movwf	measure@aux2+1
  3481                           
  3482                           ;comm.c: 597: if (aux2 < 0) {
  3483  0117  1FBA               	btfss	measure@aux2+1,7
  3484  0118  291E               	goto	l2739
  3485                           
  3486                           ;comm.c: 598: aux2 = -aux2;
  3487  0119  09B9               	comf	measure@aux2,f
  3488  011A  09BA               	comf	measure@aux2+1,f
  3489  011B  0AB9               	incf	measure@aux2,f
  3490  011C  1903               	skipnz
  3491  011D  0ABA               	incf	measure@aux2+1,f
  3492  011E                     l2739:	
  3493                           
  3494                           ;comm.c: 599: }
  3495                           ;comm.c: 601: if (aux2 > aux1) {
  3496  011E  083C               	movf	measure@aux1+1,w
  3497  011F  3A80               	xorlw	128
  3498  0120  00B0               	movwf	??_measure
  3499  0121  083A               	movf	measure@aux2+1,w
  3500  0122  3A80               	xorlw	128
  3501  0123  0230               	subwf	??_measure,w
  3502  0124  1D03               	skipz
  3503  0125  2928               	goto	u1715
  3504  0126  0839               	movf	measure@aux2,w
  3505  0127  023B               	subwf	measure@aux1,w
  3506  0128                     u1715:	
  3507  0128  1803               	skipnc
  3508  0129  292F               	goto	l420
  3509                           
  3510                           ;comm.c: 602: aux1 = aux2;
  3511  012A  0020               	movlb	0	; select bank0
  3512  012B  083A               	movf	measure@aux2+1,w
  3513  012C  00BC               	movwf	measure@aux1+1
  3514  012D  0839               	movf	measure@aux2,w
  3515  012E  00BB               	movwf	measure@aux1
  3516  012F                     l420:	
  3517                           
  3518                           ;comm.c: 603: }
  3519                           ;comm.c: 605: if (aux1 > 370) {
  3520  012F  0020               	movlb	0	; select bank0
  3521  0130  083C               	movf	measure@aux1+1,w
  3522  0131  3A80               	xorlw	128
  3523  0132  00B0               	movwf	??_measure
  3524  0133  3081               	movlw	129
  3525  0134  0230               	subwf	??_measure,w
  3526  0135  1D03               	skipz
  3527  0136  2939               	goto	u1725
  3528  0137  3073               	movlw	115
  3529  0138  023B               	subwf	measure@aux1,w
  3530  0139                     u1725:	
  3531  0139  1C03               	skipc
  3532  013A  293D               	goto	l2749
  3533                           
  3534                           ;comm.c: 606: return 2;
  3535  013B  3002               	movlw	2
  3536  013C  0008               	return
  3537  013D                     l2749:	
  3538                           ;comm.c: 607: } else if (aux1 < 86) {
  3539                           
  3540  013D  0020               	movlb	0	; select bank0
  3541  013E  083C               	movf	measure@aux1+1,w
  3542  013F  3A80               	xorlw	128
  3543  0140  00B0               	movwf	??_measure
  3544  0141  3080               	movlw	128
  3545  0142  0230               	subwf	??_measure,w
  3546  0143  1D03               	skipz
  3547  0144  2947               	goto	u1735
  3548  0145  3056               	movlw	86
  3549  0146  023B               	subwf	measure@aux1,w
  3550  0147                     u1735:	
  3551  0147  1803               	skipnc
  3552  0148  294B               	goto	l2755
  3553                           
  3554                           ;comm.c: 608: return 1;
  3555  0149  3001               	movlw	1
  3556  014A  0008               	return
  3557  014B                     l2755:	
  3558                           
  3559                           ;comm.c: 609: }
  3560                           ;comm.c: 611: return 0;
  3561  014B  3000               	movlw	0
  3562  014C  0008               	return
  3563  014D                     __end_of_measure:	
  3564                           
  3565                           	psect	text13
  3566  074B                     __ptext13:	
  3567 ;; *************** function _calculate_checksum *****************
  3568 ;; Defined at:
  3569 ;;		line 407 in file "comm.c"
  3570 ;; Parameters:    Size  Location     Type
  3571 ;;  data            1    wreg     PTR unsigned char 
  3572 ;;		 -> sweep@aux(7), 
  3573 ;;  num             1    0[BANK0 ] unsigned char 
  3574 ;; Auto vars:     Size  Location     Type
  3575 ;;  data            1    3[BANK0 ] PTR unsigned char 
  3576 ;;		 -> sweep@aux(7), 
  3577 ;;  i               1    5[BANK0 ] unsigned char 
  3578 ;;  check           1    4[BANK0 ] unsigned char 
  3579 ;; Return value:  Size  Location     Type
  3580 ;;                  1    wreg      unsigned char 
  3581 ;; Registers used:
  3582 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3583 ;; Tracked objects:
  3584 ;;		On entry : 0/0
  3585 ;;		On exit  : 0/0
  3586 ;;		Unchanged: 0/0
  3587 ;; Data sizes:     COMMON   BANK0   BANK1
  3588 ;;      Params:         0       1       0
  3589 ;;      Locals:         0       3       0
  3590 ;;      Temps:          0       2       0
  3591 ;;      Totals:         0       6       0
  3592 ;;Total ram usage:        6 bytes
  3593 ;; Hardware stack levels used:    1
  3594 ;; Hardware stack levels required when called:    2
  3595 ;; This function calls:
  3596 ;;		Nothing
  3597 ;; This function is called by:
  3598 ;;		_sweep
  3599 ;; This function uses a non-reentrant model
  3600 ;;
  3601                           
  3602                           
  3603                           ;psect for function _calculate_checksum
  3604  074B                     _calculate_checksum:	
  3605                           
  3606                           ;incstack = 0
  3607                           ; Regs used in _calculate_checksum: [wreg+fsr1l+fsr1h+status,2+status,0]
  3608                           ;calculate_checksum@data stored from wreg
  3609  074B  0020               	movlb	0	; select bank0
  3610  074C  00A3               	movwf	calculate_checksum@data
  3611                           
  3612                           ;comm.c: 409: unsigned char check, i;
  3613                           ;comm.c: 411: check = 0;
  3614  074D  01A4               	clrf	calculate_checksum@check
  3615                           
  3616                           ;comm.c: 412: for (i = 0; i < num; i++) {
  3617  074E  01A5               	clrf	calculate_checksum@i
  3618  074F                     l2693:	
  3619  074F  0820               	movf	calculate_checksum@num,w
  3620  0750  0225               	subwf	calculate_checksum@i,w
  3621  0751  1803               	btfsc	3,0
  3622  0752  2F62               	goto	l2695
  3623                           
  3624                           ;comm.c: 413: check ^= data[i];
  3625  0753  0825               	movf	calculate_checksum@i,w
  3626  0754  0723               	addwf	calculate_checksum@data,w
  3627  0755  00A1               	movwf	??_calculate_checksum
  3628  0756  0821               	movf	??_calculate_checksum,w
  3629  0757  0086               	movwf	6
  3630  0758  0187               	clrf	7
  3631  0759  0801               	movf	1,w
  3632  075A  00A2               	movwf	??_calculate_checksum+1
  3633  075B  0822               	movf	??_calculate_checksum+1,w
  3634  075C  06A4               	xorwf	calculate_checksum@check,f
  3635  075D  3001               	movlw	1
  3636  075E  00A1               	movwf	??_calculate_checksum
  3637  075F  0821               	movf	??_calculate_checksum,w
  3638  0760  07A5               	addwf	calculate_checksum@i,f
  3639  0761  2F4F               	goto	l2693
  3640  0762                     l2695:	
  3641                           
  3642                           ;comm.c: 414: }
  3643                           ;comm.c: 416: return check;
  3644  0762  0824               	movf	calculate_checksum@check,w
  3645  0763  0008               	return
  3646  0764                     __end_of_calculate_checksum:	
  3647                           
  3648                           	psect	text14
  3649  056B                     __ptext14:	
  3650 ;; *************** function _read_ADC_channels *****************
  3651 ;; Defined at:
  3652 ;;		line 91 in file "comm.c"
  3653 ;; Parameters:    Size  Location     Type
  3654 ;;		None
  3655 ;; Auto vars:     Size  Location     Type
  3656 ;;  aux             7    7[BANK0 ] unsigned char [7]
  3657 ;;  value3          2   18[BANK0 ] unsigned short 
  3658 ;;  value2          2   16[BANK0 ] unsigned short 
  3659 ;;  value1          2   14[BANK0 ] unsigned short 
  3660 ;; Return value:  Size  Location     Type
  3661 ;;                  1    wreg      void 
  3662 ;; Registers used:
  3663 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3664 ;; Tracked objects:
  3665 ;;		On entry : 0/0
  3666 ;;		On exit  : 0/0
  3667 ;;		Unchanged: 0/0
  3668 ;; Data sizes:     COMMON   BANK0   BANK1
  3669 ;;      Params:         0       0       0
  3670 ;;      Locals:         0      13       0
  3671 ;;      Temps:          0       1       0
  3672 ;;      Totals:         0      14       0
  3673 ;;Total ram usage:       14 bytes
  3674 ;; Hardware stack levels used:    1
  3675 ;; Hardware stack levels required when called:    4
  3676 ;; This function calls:
  3677 ;;		_ADC_2
  3678 ;;		_ADC_4
  3679 ;;		_ADC_5
  3680 ;;		_lputs_ISR
  3681 ;; This function is called by:
  3682 ;;		_mess_handler
  3683 ;; This function uses a non-reentrant model
  3684 ;;
  3685                           
  3686                           
  3687                           ;psect for function _read_ADC_channels
  3688  056B                     _read_ADC_channels:	
  3689                           
  3690                           ;comm.c: 93: unsigned char aux[7];
  3691                           ;comm.c: 94: unsigned short value1,value2,value3;
  3692                           ;comm.c: 97: value1 = ADC_2();
  3693                           
  3694                           ;incstack = 0
  3695                           ; Regs used in _read_ADC_channels: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3696  056B  270C               	fcall	_ADC_2
  3697  056C  0020               	movlb	0	; select bank0
  3698  056D  0821               	movf	?_ADC_2+1,w
  3699  056E  00AF               	movwf	read_ADC_channels@value1+1
  3700  056F  0820               	movf	?_ADC_2,w
  3701  0570  00AE               	movwf	read_ADC_channels@value1
  3702                           
  3703                           ;comm.c: 99: value2 = ADC_4();
  3704  0571  26E9               	fcall	_ADC_4
  3705  0572  0020               	movlb	0	; select bank0
  3706  0573  0821               	movf	?_ADC_4+1,w
  3707  0574  00B1               	movwf	read_ADC_channels@value2+1
  3708  0575  0820               	movf	?_ADC_4,w
  3709  0576  00B0               	movwf	read_ADC_channels@value2
  3710                           
  3711                           ;comm.c: 101: value3 = ADC_5();
  3712  0577  26C6               	fcall	_ADC_5
  3713  0578  0020               	movlb	0	; select bank0
  3714  0579  0821               	movf	?_ADC_5+1,w
  3715  057A  00B3               	movwf	read_ADC_channels@value3+1
  3716  057B  0820               	movf	?_ADC_5,w
  3717  057C  00B2               	movwf	read_ADC_channels@value3
  3718                           
  3719                           ;comm.c: 102: { ADCON0 = 0b00100100;};
  3720  057D  3024               	movlw	36
  3721  057E  0021               	movlb	1	; select bank1
  3722  057F  009D               	movwf	29	;volatile
  3723                           
  3724                           ;comm.c: 104: aux[0] = 'm';
  3725  0580  306D               	movlw	109
  3726  0581  0020               	movlb	0	; select bank0
  3727  0582  00A6               	movwf	??_read_ADC_channels
  3728  0583  0826               	movf	??_read_ADC_channels,w
  3729  0584  00A7               	movwf	read_ADC_channels@aux
  3730                           
  3731                           ;comm.c: 105: aux[1] = (unsigned char)(value1 & 0xff);
  3732  0585  082E               	movf	read_ADC_channels@value1,w
  3733  0586  00A6               	movwf	??_read_ADC_channels
  3734  0587  0826               	movf	??_read_ADC_channels,w
  3735  0588  00A8               	movwf	read_ADC_channels@aux+1
  3736                           
  3737                           ;comm.c: 106: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  3738  0589  082F               	movf	read_ADC_channels@value1+1,w
  3739  058A  00A6               	movwf	??_read_ADC_channels
  3740  058B  0826               	movf	??_read_ADC_channels,w
  3741  058C  00A9               	movwf	read_ADC_channels@aux+2
  3742                           
  3743                           ;comm.c: 107: aux[3] = (unsigned char)(value2 & 0xff);
  3744  058D  0830               	movf	read_ADC_channels@value2,w
  3745  058E  00A6               	movwf	??_read_ADC_channels
  3746  058F  0826               	movf	??_read_ADC_channels,w
  3747  0590  00AA               	movwf	read_ADC_channels@aux+3
  3748                           
  3749                           ;comm.c: 108: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  3750  0591  0831               	movf	read_ADC_channels@value2+1,w
  3751  0592  00A6               	movwf	??_read_ADC_channels
  3752  0593  0826               	movf	??_read_ADC_channels,w
  3753  0594  00AB               	movwf	read_ADC_channels@aux+4
  3754                           
  3755                           ;comm.c: 109: aux[5] = (unsigned char)(value3 & 0xff);
  3756  0595  0832               	movf	read_ADC_channels@value3,w
  3757  0596  00A6               	movwf	??_read_ADC_channels
  3758  0597  0826               	movf	??_read_ADC_channels,w
  3759  0598  00AC               	movwf	read_ADC_channels@aux+5
  3760                           
  3761                           ;comm.c: 110: aux[6] = (unsigned char)((value3 >> 8) & 0xff);
  3762  0599  0833               	movf	read_ADC_channels@value3+1,w
  3763  059A  00A6               	movwf	??_read_ADC_channels
  3764  059B  0826               	movf	??_read_ADC_channels,w
  3765  059C  00AD               	movwf	read_ADC_channels@aux+6
  3766                           
  3767                           ;comm.c: 112: lputs_ISR(aux,7);
  3768  059D  3007               	movlw	7
  3769  059E  00A6               	movwf	??_read_ADC_channels
  3770  059F  0826               	movf	??_read_ADC_channels,w
  3771  05A0  00A0               	movwf	lputs_ISR@length
  3772  05A1  3027               	movlw	(low (read_ADC_channels@aux| 0))& (0+255)
  3773  05A2  2672               	fcall	_lputs_ISR
  3774  05A3  0008               	return
  3775  05A4                     __end_of_read_ADC_channels:	
  3776                           
  3777                           	psect	text15
  3778  048D                     __ptext15:	
  3779 ;; *************** function _measure_Offset *****************
  3780 ;; Defined at:
  3781 ;;		line 265 in file "comm.c"
  3782 ;; Parameters:    Size  Location     Type
  3783 ;;		None
  3784 ;; Auto vars:     Size  Location     Type
  3785 ;;  asic            6   19[BANK0 ] struct .
  3786 ;;  aux             5   10[BANK0 ] unsigned char [5]
  3787 ;;  value2          2   17[BANK0 ] unsigned short 
  3788 ;;  value1          2   15[BANK0 ] unsigned short 
  3789 ;; Return value:  Size  Location     Type
  3790 ;;                  1    wreg      void 
  3791 ;; Registers used:
  3792 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3793 ;; Tracked objects:
  3794 ;;		On entry : 0/0
  3795 ;;		On exit  : 0/0
  3796 ;;		Unchanged: 0/0
  3797 ;; Data sizes:     COMMON   BANK0   BANK1
  3798 ;;      Params:         0       0       0
  3799 ;;      Locals:         0      15       0
  3800 ;;      Temps:          0       1       0
  3801 ;;      Totals:         0      16       0
  3802 ;;Total ram usage:       16 bytes
  3803 ;; Hardware stack levels used:    1
  3804 ;; Hardware stack levels required when called:    4
  3805 ;; This function calls:
  3806 ;;		_ADC_2
  3807 ;;		_ADC_4
  3808 ;;		_config
  3809 ;;		_lputs_ISR
  3810 ;; This function is called by:
  3811 ;;		_mess_handler
  3812 ;; This function uses a non-reentrant model
  3813 ;;
  3814                           
  3815                           
  3816                           ;psect for function _measure_Offset
  3817  048D                     _measure_Offset:	
  3818                           
  3819                           ;comm.c: 267: unsigned char aux[5];
  3820                           ;comm.c: 268: unsigned short value1,value2;
  3821                           ;comm.c: 273: VIN asic;
  3822                           ;comm.c: 277: aux[0] = 'o';
  3823                           
  3824                           ;incstack = 0
  3825                           ; Regs used in _measure_Offset: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3826  048D  306F               	movlw	111
  3827  048E  0020               	movlb	0	; select bank0
  3828  048F  00A9               	movwf	??_measure_Offset
  3829  0490  0829               	movf	??_measure_Offset,w
  3830  0491  00AA               	movwf	measure_Offset@aux
  3831                           
  3832                           ;comm.c: 288: asic.data[0] = mess_rec[1];
  3833  0492  0867               	movf	_mess_rec+1,w	;volatile
  3834  0493  00A9               	movwf	??_measure_Offset
  3835  0494  0829               	movf	??_measure_Offset,w
  3836  0495  00B3               	movwf	measure_Offset@asic
  3837                           
  3838                           ;comm.c: 289: asic.data[1] = mess_rec[2];
  3839  0496  0868               	movf	_mess_rec+2,w	;volatile
  3840  0497  00A9               	movwf	??_measure_Offset
  3841  0498  0829               	movf	??_measure_Offset,w
  3842  0499  00B4               	movwf	measure_Offset@asic+1
  3843                           
  3844                           ;comm.c: 290: asic.data[2] = mess_rec[3];
  3845  049A  0869               	movf	_mess_rec+3,w	;volatile
  3846  049B  00A9               	movwf	??_measure_Offset
  3847  049C  0829               	movf	??_measure_Offset,w
  3848  049D  00B5               	movwf	measure_Offset@asic+2
  3849                           
  3850                           ;comm.c: 291: asic.data[3] = mess_rec[4];
  3851  049E  086A               	movf	_mess_rec+4,w	;volatile
  3852  049F  00A9               	movwf	??_measure_Offset
  3853  04A0  0829               	movf	??_measure_Offset,w
  3854  04A1  00B6               	movwf	measure_Offset@asic+3
  3855                           
  3856                           ;comm.c: 292: asic.data[4] = mess_rec[5];
  3857  04A2  086B               	movf	_mess_rec+5,w	;volatile
  3858  04A3  00A9               	movwf	??_measure_Offset
  3859  04A4  0829               	movf	??_measure_Offset,w
  3860  04A5  00B7               	movwf	measure_Offset@asic+4
  3861                           
  3862                           ;comm.c: 294: asic.data_bits.CE = 0;
  3863  04A6  1333               	bcf	measure_Offset@asic,6
  3864                           
  3865                           ;comm.c: 295: config(asic);
  3866  04A7  3033               	movlw	low measure_Offset@asic
  3867  04A8  0086               	movwf	6
  3868  04A9  3000               	movlw	high measure_Offset@asic
  3869  04AA  0087               	movwf	7
  3870  04AB  3020               	movlw	low config@conf
  3871  04AC  0084               	movwf	4
  3872  04AD  3000               	movlw	high config@conf
  3873  04AE  0085               	movwf	5
  3874  04AF  3F40               	moviw [0]fsr1
  3875  04B0  3F80               	movwi [0]fsr0
  3876  04B1  3F41               	moviw [1]fsr1
  3877  04B2  3F81               	movwi [1]fsr0
  3878  04B3  3F42               	moviw [2]fsr1
  3879  04B4  3F82               	movwi [2]fsr0
  3880  04B5  3F43               	moviw [3]fsr1
  3881  04B6  3F83               	movwi [3]fsr0
  3882  04B7  3F44               	moviw [4]fsr1
  3883  04B8  3F84               	movwi [4]fsr0
  3884  04B9  3F45               	moviw [5]fsr1
  3885  04BA  3F85               	movwi [5]fsr0
  3886  04BB  2419               	fcall	_config
  3887                           
  3888                           ;comm.c: 298: _delay((unsigned long)((15)*(500000/4000.0)));
  3889  04BC  3003               	movlw	3
  3890  04BD  0020               	movlb	0	; select bank0
  3891  04BE  00A9               	movwf	??_measure_Offset
  3892  04BF  306E               	movlw	110
  3893  04C0                     u1937:	
  3894  04C0  0B89               	decfsz	9,f
  3895  04C1  2CC0               	goto	u1937
  3896  04C2  0BA9               	decfsz	??_measure_Offset,f
  3897  04C3  2CC0               	goto	u1937
  3898                           
  3899                           ;comm.c: 300: value1 = ADC_2();
  3900  04C4  270C               	fcall	_ADC_2
  3901  04C5  0020               	movlb	0	; select bank0
  3902  04C6  0821               	movf	?_ADC_2+1,w
  3903  04C7  00B0               	movwf	measure_Offset@value1+1
  3904  04C8  0820               	movf	?_ADC_2,w
  3905  04C9  00AF               	movwf	measure_Offset@value1
  3906                           
  3907                           ;comm.c: 301: value2 = ADC_4();
  3908  04CA  26E9               	fcall	_ADC_4
  3909  04CB  0020               	movlb	0	; select bank0
  3910  04CC  0821               	movf	?_ADC_4+1,w
  3911  04CD  00B2               	movwf	measure_Offset@value2+1
  3912  04CE  0820               	movf	?_ADC_4,w
  3913  04CF  00B1               	movwf	measure_Offset@value2
  3914                           
  3915                           ;comm.c: 303: aux[1] = (unsigned char)(value1 & 0xff);
  3916  04D0  082F               	movf	measure_Offset@value1,w
  3917  04D1  00A9               	movwf	??_measure_Offset
  3918  04D2  0829               	movf	??_measure_Offset,w
  3919  04D3  00AB               	movwf	measure_Offset@aux+1
  3920                           
  3921                           ;comm.c: 304: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  3922  04D4  0830               	movf	measure_Offset@value1+1,w
  3923  04D5  00A9               	movwf	??_measure_Offset
  3924  04D6  0829               	movf	??_measure_Offset,w
  3925  04D7  00AC               	movwf	measure_Offset@aux+2
  3926                           
  3927                           ;comm.c: 305: aux[3] = (unsigned char)(value2 & 0xff);
  3928  04D8  0831               	movf	measure_Offset@value2,w
  3929  04D9  00A9               	movwf	??_measure_Offset
  3930  04DA  0829               	movf	??_measure_Offset,w
  3931  04DB  00AD               	movwf	measure_Offset@aux+3
  3932                           
  3933                           ;comm.c: 306: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  3934  04DC  0832               	movf	measure_Offset@value2+1,w
  3935  04DD  00A9               	movwf	??_measure_Offset
  3936  04DE  0829               	movf	??_measure_Offset,w
  3937  04DF  00AE               	movwf	measure_Offset@aux+4
  3938                           
  3939                           ;comm.c: 309: lputs_ISR(aux,5);
  3940  04E0  3005               	movlw	5
  3941  04E1  00A9               	movwf	??_measure_Offset
  3942  04E2  0829               	movf	??_measure_Offset,w
  3943  04E3  00A0               	movwf	lputs_ISR@length
  3944  04E4  302A               	movlw	(low (measure_Offset@aux| 0))& (0+255)
  3945  04E5  2672               	fcall	_lputs_ISR
  3946  04E6  0008               	return
  3947  04E7                     __end_of_measure_Offset:	
  3948                           
  3949                           	psect	text16
  3950  0384                     __ptext16:	
  3951 ;; *************** function _measure_Impedance_no_offset *****************
  3952 ;; Defined at:
  3953 ;;		line 200 in file "comm.c"
  3954 ;; Parameters:    Size  Location     Type
  3955 ;;		None
  3956 ;; Auto vars:     Size  Location     Type
  3957 ;;  aux            13   10[BANK0 ] unsigned char [13]
  3958 ;;  asic            6   27[BANK0 ] struct .
  3959 ;;  value2          2   25[BANK0 ] unsigned short 
  3960 ;;  value1          2   23[BANK0 ] unsigned short 
  3961 ;;  value3          2    0        unsigned short 
  3962 ;; Return value:  Size  Location     Type
  3963 ;;                  1    wreg      void 
  3964 ;; Registers used:
  3965 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3966 ;; Tracked objects:
  3967 ;;		On entry : 0/0
  3968 ;;		On exit  : 0/0
  3969 ;;		Unchanged: 0/0
  3970 ;; Data sizes:     COMMON   BANK0   BANK1
  3971 ;;      Params:         0       0       0
  3972 ;;      Locals:         0      23       0
  3973 ;;      Temps:          0       1       0
  3974 ;;      Totals:         0      24       0
  3975 ;;Total ram usage:       24 bytes
  3976 ;; Hardware stack levels used:    1
  3977 ;; Hardware stack levels required when called:    4
  3978 ;; This function calls:
  3979 ;;		_ADC_2
  3980 ;;		_ADC_4
  3981 ;;		_config
  3982 ;;		_lputs_ISR
  3983 ;; This function is called by:
  3984 ;;		_mess_handler
  3985 ;; This function uses a non-reentrant model
  3986 ;;
  3987                           
  3988                           
  3989                           ;psect for function _measure_Impedance_no_offset
  3990  0384                     _measure_Impedance_no_offset:	
  3991                           
  3992                           ;comm.c: 202: unsigned char aux[13];
  3993                           ;comm.c: 203: unsigned short value1,value2,value3;
  3994                           ;comm.c: 208: VIN asic;
  3995                           ;comm.c: 211: aux[0] = 'y';
  3996                           
  3997                           ;incstack = 0
  3998                           ; Regs used in _measure_Impedance_no_offset: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  3999  0384  3079               	movlw	121
  4000  0385  0020               	movlb	0	; select bank0
  4001  0386  00A9               	movwf	??_measure_Impedance_no_offset
  4002  0387  0829               	movf	??_measure_Impedance_no_offset,w
  4003  0388  00AA               	movwf	measure_Impedance_no_offset@aux
  4004                           
  4005                           ;comm.c: 217: asic.data[0] = mess_rec[1];
  4006  0389  0867               	movf	_mess_rec+1,w	;volatile
  4007  038A  00A9               	movwf	??_measure_Impedance_no_offset
  4008  038B  0829               	movf	??_measure_Impedance_no_offset,w
  4009  038C  00BB               	movwf	measure_Impedance_no_offset@asic
  4010                           
  4011                           ;comm.c: 218: asic.data[1] = mess_rec[2];
  4012  038D  0868               	movf	_mess_rec+2,w	;volatile
  4013  038E  00A9               	movwf	??_measure_Impedance_no_offset
  4014  038F  0829               	movf	??_measure_Impedance_no_offset,w
  4015  0390  00BC               	movwf	measure_Impedance_no_offset@asic+1
  4016                           
  4017                           ;comm.c: 219: asic.data[2] = mess_rec[3];
  4018  0391  0869               	movf	_mess_rec+3,w	;volatile
  4019  0392  00A9               	movwf	??_measure_Impedance_no_offset
  4020  0393  0829               	movf	??_measure_Impedance_no_offset,w
  4021  0394  00BD               	movwf	measure_Impedance_no_offset@asic+2
  4022                           
  4023                           ;comm.c: 220: asic.data[3] = mess_rec[4];
  4024  0395  086A               	movf	_mess_rec+4,w	;volatile
  4025  0396  00A9               	movwf	??_measure_Impedance_no_offset
  4026  0397  0829               	movf	??_measure_Impedance_no_offset,w
  4027  0398  00BE               	movwf	measure_Impedance_no_offset@asic+3
  4028                           
  4029                           ;comm.c: 221: asic.data[4] = mess_rec[5];
  4030  0399  086B               	movf	_mess_rec+5,w	;volatile
  4031  039A  00A9               	movwf	??_measure_Impedance_no_offset
  4032  039B  0829               	movf	??_measure_Impedance_no_offset,w
  4033  039C  00BF               	movwf	measure_Impedance_no_offset@asic+4
  4034                           
  4035                           ;comm.c: 225: asic.data_bits.CE = 1;
  4036  039D  173B               	bsf	measure_Impedance_no_offset@asic,6
  4037                           
  4038                           ;comm.c: 226: asic.data_bits.IQ = 0;
  4039  039E  11BC               	bcf	measure_Impedance_no_offset@asic+1,3
  4040                           
  4041                           ;comm.c: 231: config(asic);
  4042  039F  303B               	movlw	low measure_Impedance_no_offset@asic
  4043  03A0  0086               	movwf	6
  4044  03A1  3000               	movlw	high measure_Impedance_no_offset@asic
  4045  03A2  0087               	movwf	7
  4046  03A3  3020               	movlw	low config@conf
  4047  03A4  0084               	movwf	4
  4048  03A5  3000               	movlw	high config@conf
  4049  03A6  0085               	movwf	5
  4050  03A7  3F40               	moviw [0]fsr1
  4051  03A8  3F80               	movwi [0]fsr0
  4052  03A9  3F41               	moviw [1]fsr1
  4053  03AA  3F81               	movwi [1]fsr0
  4054  03AB  3F42               	moviw [2]fsr1
  4055  03AC  3F82               	movwi [2]fsr0
  4056  03AD  3F43               	moviw [3]fsr1
  4057  03AE  3F83               	movwi [3]fsr0
  4058  03AF  3F44               	moviw [4]fsr1
  4059  03B0  3F84               	movwi [4]fsr0
  4060  03B1  3F45               	moviw [5]fsr1
  4061  03B2  3F85               	movwi [5]fsr0
  4062  03B3  2419               	fcall	_config
  4063                           
  4064                           ;comm.c: 233: _delay((unsigned long)((15)*(500000/4000.0)));
  4065  03B4  3003               	movlw	3
  4066  03B5  0020               	movlb	0	; select bank0
  4067  03B6  00A9               	movwf	??_measure_Impedance_no_offset
  4068  03B7  306E               	movlw	110
  4069  03B8                     u1947:	
  4070  03B8  0B89               	decfsz	9,f
  4071  03B9  2BB8               	goto	u1947
  4072  03BA  0BA9               	decfsz	??_measure_Impedance_no_offset,f
  4073  03BB  2BB8               	goto	u1947
  4074                           
  4075                           ;comm.c: 235: value1 = ADC_2();
  4076  03BC  270C               	fcall	_ADC_2
  4077  03BD  0020               	movlb	0	; select bank0
  4078  03BE  0821               	movf	?_ADC_2+1,w
  4079  03BF  00B8               	movwf	measure_Impedance_no_offset@value1+1
  4080  03C0  0820               	movf	?_ADC_2,w
  4081  03C1  00B7               	movwf	measure_Impedance_no_offset@value1
  4082                           
  4083                           ;comm.c: 236: value2 = ADC_4();
  4084  03C2  26E9               	fcall	_ADC_4
  4085  03C3  0020               	movlb	0	; select bank0
  4086  03C4  0821               	movf	?_ADC_4+1,w
  4087  03C5  00BA               	movwf	measure_Impedance_no_offset@value2+1
  4088  03C6  0820               	movf	?_ADC_4,w
  4089  03C7  00B9               	movwf	measure_Impedance_no_offset@value2
  4090                           
  4091                           ;comm.c: 238: aux[1] = (unsigned char)(value1 & 0xff);
  4092  03C8  0837               	movf	measure_Impedance_no_offset@value1,w
  4093  03C9  00A9               	movwf	??_measure_Impedance_no_offset
  4094  03CA  0829               	movf	??_measure_Impedance_no_offset,w
  4095  03CB  00AB               	movwf	measure_Impedance_no_offset@aux+1
  4096                           
  4097                           ;comm.c: 239: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  4098  03CC  0838               	movf	measure_Impedance_no_offset@value1+1,w
  4099  03CD  00A9               	movwf	??_measure_Impedance_no_offset
  4100  03CE  0829               	movf	??_measure_Impedance_no_offset,w
  4101  03CF  00AC               	movwf	measure_Impedance_no_offset@aux+2
  4102                           
  4103                           ;comm.c: 240: aux[3] = (unsigned char)(value2 & 0xff);
  4104  03D0  0839               	movf	measure_Impedance_no_offset@value2,w
  4105  03D1  00A9               	movwf	??_measure_Impedance_no_offset
  4106  03D2  0829               	movf	??_measure_Impedance_no_offset,w
  4107  03D3  00AD               	movwf	measure_Impedance_no_offset@aux+3
  4108                           
  4109                           ;comm.c: 241: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  4110  03D4  083A               	movf	measure_Impedance_no_offset@value2+1,w
  4111  03D5  00A9               	movwf	??_measure_Impedance_no_offset
  4112  03D6  0829               	movf	??_measure_Impedance_no_offset,w
  4113  03D7  00AE               	movwf	measure_Impedance_no_offset@aux+4
  4114                           
  4115                           ;comm.c: 244: asic.data_bits.IQ = 1;
  4116  03D8  15BC               	bsf	measure_Impedance_no_offset@asic+1,3
  4117                           
  4118                           ;comm.c: 249: config(asic);
  4119  03D9  303B               	movlw	low measure_Impedance_no_offset@asic
  4120  03DA  0086               	movwf	6
  4121  03DB  3000               	movlw	high measure_Impedance_no_offset@asic
  4122  03DC  0087               	movwf	7
  4123  03DD  3020               	movlw	low config@conf
  4124  03DE  0084               	movwf	4
  4125  03DF  3000               	movlw	high config@conf
  4126  03E0  0085               	movwf	5
  4127  03E1  3F40               	moviw [0]fsr1
  4128  03E2  3F80               	movwi [0]fsr0
  4129  03E3  3F41               	moviw [1]fsr1
  4130  03E4  3F81               	movwi [1]fsr0
  4131  03E5  3F42               	moviw [2]fsr1
  4132  03E6  3F82               	movwi [2]fsr0
  4133  03E7  3F43               	moviw [3]fsr1
  4134  03E8  3F83               	movwi [3]fsr0
  4135  03E9  3F44               	moviw [4]fsr1
  4136  03EA  3F84               	movwi [4]fsr0
  4137  03EB  3F45               	moviw [5]fsr1
  4138  03EC  3F85               	movwi [5]fsr0
  4139  03ED  2419               	fcall	_config
  4140                           
  4141                           ;comm.c: 251: _delay((unsigned long)((15)*(500000/4000.0)));
  4142  03EE  3003               	movlw	3
  4143  03EF  0020               	movlb	0	; select bank0
  4144  03F0  00A9               	movwf	??_measure_Impedance_no_offset
  4145  03F1  306E               	movlw	110
  4146  03F2                     u1957:	
  4147  03F2  0B89               	decfsz	9,f
  4148  03F3  2BF2               	goto	u1957
  4149  03F4  0BA9               	decfsz	??_measure_Impedance_no_offset,f
  4150  03F5  2BF2               	goto	u1957
  4151                           
  4152                           ;comm.c: 253: value1 = ADC_2();
  4153  03F6  270C               	fcall	_ADC_2
  4154  03F7  0020               	movlb	0	; select bank0
  4155  03F8  0821               	movf	?_ADC_2+1,w
  4156  03F9  00B8               	movwf	measure_Impedance_no_offset@value1+1
  4157  03FA  0820               	movf	?_ADC_2,w
  4158  03FB  00B7               	movwf	measure_Impedance_no_offset@value1
  4159                           
  4160                           ;comm.c: 254: value2 = ADC_4();
  4161  03FC  26E9               	fcall	_ADC_4
  4162  03FD  0020               	movlb	0	; select bank0
  4163  03FE  0821               	movf	?_ADC_4+1,w
  4164  03FF  00BA               	movwf	measure_Impedance_no_offset@value2+1
  4165  0400  0820               	movf	?_ADC_4,w
  4166  0401  00B9               	movwf	measure_Impedance_no_offset@value2
  4167                           
  4168                           ;comm.c: 256: aux[5] = (unsigned char)(value1 & 0xff);
  4169  0402  0837               	movf	measure_Impedance_no_offset@value1,w
  4170  0403  00A9               	movwf	??_measure_Impedance_no_offset
  4171  0404  0829               	movf	??_measure_Impedance_no_offset,w
  4172  0405  00AF               	movwf	measure_Impedance_no_offset@aux+5
  4173                           
  4174                           ;comm.c: 257: aux[6] = (unsigned char)((value1 >> 8) & 0xff);
  4175  0406  0838               	movf	measure_Impedance_no_offset@value1+1,w
  4176  0407  00A9               	movwf	??_measure_Impedance_no_offset
  4177  0408  0829               	movf	??_measure_Impedance_no_offset,w
  4178  0409  00B0               	movwf	measure_Impedance_no_offset@aux+6
  4179                           
  4180                           ;comm.c: 258: aux[7] = (unsigned char)(value2 & 0xff);
  4181  040A  0839               	movf	measure_Impedance_no_offset@value2,w
  4182  040B  00A9               	movwf	??_measure_Impedance_no_offset
  4183  040C  0829               	movf	??_measure_Impedance_no_offset,w
  4184  040D  00B1               	movwf	measure_Impedance_no_offset@aux+7
  4185                           
  4186                           ;comm.c: 259: aux[8] = (unsigned char)((value2 >> 8) & 0xff);
  4187  040E  083A               	movf	measure_Impedance_no_offset@value2+1,w
  4188  040F  00A9               	movwf	??_measure_Impedance_no_offset
  4189  0410  0829               	movf	??_measure_Impedance_no_offset,w
  4190  0411  00B2               	movwf	measure_Impedance_no_offset@aux+8
  4191                           
  4192                           ;comm.c: 262: lputs_ISR(aux,9);
  4193  0412  3009               	movlw	9
  4194  0413  00A9               	movwf	??_measure_Impedance_no_offset
  4195  0414  0829               	movf	??_measure_Impedance_no_offset,w
  4196  0415  00A0               	movwf	lputs_ISR@length
  4197  0416  302A               	movlw	(low (measure_Impedance_no_offset@aux| 0))& (0+255)
  4198  0417  2672               	fcall	_lputs_ISR
  4199  0418  0008               	return
  4200  0419                     __end_of_measure_Impedance_no_offset:	
  4201                           
  4202                           	psect	text17
  4203  02DF                     __ptext17:	
  4204 ;; *************** function _measure_Impedance_SE *****************
  4205 ;; Defined at:
  4206 ;;		line 314 in file "comm.c"
  4207 ;; Parameters:    Size  Location     Type
  4208 ;;		None
  4209 ;; Auto vars:     Size  Location     Type
  4210 ;;  aux             8   10[BANK0 ] unsigned char [8]
  4211 ;;  asic            6   20[BANK0 ] struct .
  4212 ;;  value1          2   18[BANK0 ] unsigned short 
  4213 ;;  check           1    0        unsigned char 
  4214 ;; Return value:  Size  Location     Type
  4215 ;;                  1    wreg      void 
  4216 ;; Registers used:
  4217 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4218 ;; Tracked objects:
  4219 ;;		On entry : 0/0
  4220 ;;		On exit  : 0/0
  4221 ;;		Unchanged: 0/0
  4222 ;; Data sizes:     COMMON   BANK0   BANK1
  4223 ;;      Params:         0       0       0
  4224 ;;      Locals:         0      16       0
  4225 ;;      Temps:          0       1       0
  4226 ;;      Totals:         0      17       0
  4227 ;;Total ram usage:       17 bytes
  4228 ;; Hardware stack levels used:    1
  4229 ;; Hardware stack levels required when called:    4
  4230 ;; This function calls:
  4231 ;;		_ADC_5
  4232 ;;		_config
  4233 ;;		_lputs_ISR
  4234 ;; This function is called by:
  4235 ;;		_mess_handler
  4236 ;; This function uses a non-reentrant model
  4237 ;;
  4238                           
  4239                           
  4240                           ;psect for function _measure_Impedance_SE
  4241  02DF                     _measure_Impedance_SE:	
  4242                           
  4243                           ;comm.c: 316: unsigned char aux[8], check;
  4244                           ;comm.c: 318: unsigned short value1;
  4245                           ;comm.c: 323: VIN asic;
  4246                           ;comm.c: 336: aux[0] = 's';
  4247                           
  4248                           ;incstack = 0
  4249                           ; Regs used in _measure_Impedance_SE: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4250  02DF  3073               	movlw	115
  4251  02E0  0020               	movlb	0	; select bank0
  4252  02E1  00A9               	movwf	??_measure_Impedance_SE
  4253  02E2  0829               	movf	??_measure_Impedance_SE,w
  4254  02E3  00AA               	movwf	measure_Impedance_SE@aux
  4255                           
  4256                           ;comm.c: 347: asic.data[0] = mess_rec[1];
  4257  02E4  0867               	movf	_mess_rec+1,w	;volatile
  4258  02E5  00A9               	movwf	??_measure_Impedance_SE
  4259  02E6  0829               	movf	??_measure_Impedance_SE,w
  4260  02E7  00B4               	movwf	measure_Impedance_SE@asic
  4261                           
  4262                           ;comm.c: 348: asic.data[1] = mess_rec[2];
  4263  02E8  0868               	movf	_mess_rec+2,w	;volatile
  4264  02E9  00A9               	movwf	??_measure_Impedance_SE
  4265  02EA  0829               	movf	??_measure_Impedance_SE,w
  4266  02EB  00B5               	movwf	measure_Impedance_SE@asic+1
  4267                           
  4268                           ;comm.c: 349: asic.data[2] = mess_rec[3];
  4269  02EC  0869               	movf	_mess_rec+3,w	;volatile
  4270  02ED  00A9               	movwf	??_measure_Impedance_SE
  4271  02EE  0829               	movf	??_measure_Impedance_SE,w
  4272  02EF  00B6               	movwf	measure_Impedance_SE@asic+2
  4273                           
  4274                           ;comm.c: 350: asic.data[3] = mess_rec[4];
  4275  02F0  086A               	movf	_mess_rec+4,w	;volatile
  4276  02F1  00A9               	movwf	??_measure_Impedance_SE
  4277  02F2  0829               	movf	??_measure_Impedance_SE,w
  4278  02F3  00B7               	movwf	measure_Impedance_SE@asic+3
  4279                           
  4280                           ;comm.c: 351: asic.data[4] = mess_rec[5];
  4281  02F4  086B               	movf	_mess_rec+5,w	;volatile
  4282  02F5  00A9               	movwf	??_measure_Impedance_SE
  4283  02F6  0829               	movf	??_measure_Impedance_SE,w
  4284  02F7  00B8               	movwf	measure_Impedance_SE@asic+4
  4285                           
  4286                           ;comm.c: 353: asic.data_bits.CE = 0;
  4287  02F8  1334               	bcf	measure_Impedance_SE@asic,6
  4288                           
  4289                           ;comm.c: 354: config(asic);
  4290  02F9  3034               	movlw	low measure_Impedance_SE@asic
  4291  02FA  0086               	movwf	6
  4292  02FB  3000               	movlw	high measure_Impedance_SE@asic
  4293  02FC  0087               	movwf	7
  4294  02FD  3020               	movlw	low config@conf
  4295  02FE  0084               	movwf	4
  4296  02FF  3000               	movlw	high config@conf
  4297  0300  0085               	movwf	5
  4298  0301  3F40               	moviw [0]fsr1
  4299  0302  3F80               	movwi [0]fsr0
  4300  0303  3F41               	moviw [1]fsr1
  4301  0304  3F81               	movwi [1]fsr0
  4302  0305  3F42               	moviw [2]fsr1
  4303  0306  3F82               	movwi [2]fsr0
  4304  0307  3F43               	moviw [3]fsr1
  4305  0308  3F83               	movwi [3]fsr0
  4306  0309  3F44               	moviw [4]fsr1
  4307  030A  3F84               	movwi [4]fsr0
  4308  030B  3F45               	moviw [5]fsr1
  4309  030C  3F85               	movwi [5]fsr0
  4310  030D  2419               	fcall	_config
  4311                           
  4312                           ;comm.c: 357: _delay((unsigned long)((15)*(500000/4000.0)));
  4313  030E  3003               	movlw	3
  4314  030F  0020               	movlb	0	; select bank0
  4315  0310  00A9               	movwf	??_measure_Impedance_SE
  4316  0311  306E               	movlw	110
  4317  0312                     u1967:	
  4318  0312  0B89               	decfsz	9,f
  4319  0313  2B12               	goto	u1967
  4320  0314  0BA9               	decfsz	??_measure_Impedance_SE,f
  4321  0315  2B12               	goto	u1967
  4322                           
  4323                           ;comm.c: 359: value1 = ADC_5();
  4324  0316  26C6               	fcall	_ADC_5
  4325  0317  0020               	movlb	0	; select bank0
  4326  0318  0821               	movf	?_ADC_5+1,w
  4327  0319  00B3               	movwf	measure_Impedance_SE@value1+1
  4328  031A  0820               	movf	?_ADC_5,w
  4329  031B  00B2               	movwf	measure_Impedance_SE@value1
  4330                           
  4331                           ;comm.c: 361: aux[1] = (unsigned char)(value1 & 0xff);
  4332  031C  0832               	movf	measure_Impedance_SE@value1,w
  4333  031D  00A9               	movwf	??_measure_Impedance_SE
  4334  031E  0829               	movf	??_measure_Impedance_SE,w
  4335  031F  00AB               	movwf	measure_Impedance_SE@aux+1
  4336                           
  4337                           ;comm.c: 362: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  4338  0320  0833               	movf	measure_Impedance_SE@value1+1,w
  4339  0321  00A9               	movwf	??_measure_Impedance_SE
  4340  0322  0829               	movf	??_measure_Impedance_SE,w
  4341  0323  00AC               	movwf	measure_Impedance_SE@aux+2
  4342                           
  4343                           ;comm.c: 365: asic.data_bits.CE = 1;
  4344  0324  1734               	bsf	measure_Impedance_SE@asic,6
  4345                           
  4346                           ;comm.c: 366: asic.data_bits.IQ = 0;
  4347  0325  11B5               	bcf	measure_Impedance_SE@asic+1,3
  4348                           
  4349                           ;comm.c: 371: config(asic);
  4350  0326  3034               	movlw	low measure_Impedance_SE@asic
  4351  0327  0086               	movwf	6
  4352  0328  3000               	movlw	high measure_Impedance_SE@asic
  4353  0329  0087               	movwf	7
  4354  032A  3020               	movlw	low config@conf
  4355  032B  0084               	movwf	4
  4356  032C  3000               	movlw	high config@conf
  4357  032D  0085               	movwf	5
  4358  032E  3F40               	moviw [0]fsr1
  4359  032F  3F80               	movwi [0]fsr0
  4360  0330  3F41               	moviw [1]fsr1
  4361  0331  3F81               	movwi [1]fsr0
  4362  0332  3F42               	moviw [2]fsr1
  4363  0333  3F82               	movwi [2]fsr0
  4364  0334  3F43               	moviw [3]fsr1
  4365  0335  3F83               	movwi [3]fsr0
  4366  0336  3F44               	moviw [4]fsr1
  4367  0337  3F84               	movwi [4]fsr0
  4368  0338  3F45               	moviw [5]fsr1
  4369  0339  3F85               	movwi [5]fsr0
  4370  033A  2419               	fcall	_config
  4371                           
  4372                           ;comm.c: 373: _delay((unsigned long)((15)*(500000/4000.0)));
  4373  033B  3003               	movlw	3
  4374  033C  0020               	movlb	0	; select bank0
  4375  033D  00A9               	movwf	??_measure_Impedance_SE
  4376  033E  306E               	movlw	110
  4377  033F                     u1977:	
  4378  033F  0B89               	decfsz	9,f
  4379  0340  2B3F               	goto	u1977
  4380  0341  0BA9               	decfsz	??_measure_Impedance_SE,f
  4381  0342  2B3F               	goto	u1977
  4382                           
  4383                           ;comm.c: 375: value1 = ADC_5();
  4384  0343  26C6               	fcall	_ADC_5
  4385  0344  0020               	movlb	0	; select bank0
  4386  0345  0821               	movf	?_ADC_5+1,w
  4387  0346  00B3               	movwf	measure_Impedance_SE@value1+1
  4388  0347  0820               	movf	?_ADC_5,w
  4389  0348  00B2               	movwf	measure_Impedance_SE@value1
  4390                           
  4391                           ;comm.c: 377: aux[3] = (unsigned char)(value1 & 0xff);
  4392  0349  0832               	movf	measure_Impedance_SE@value1,w
  4393  034A  00A9               	movwf	??_measure_Impedance_SE
  4394  034B  0829               	movf	??_measure_Impedance_SE,w
  4395  034C  00AD               	movwf	measure_Impedance_SE@aux+3
  4396                           
  4397                           ;comm.c: 378: aux[4] = (unsigned char)((value1 >> 8) & 0xff);
  4398  034D  0833               	movf	measure_Impedance_SE@value1+1,w
  4399  034E  00A9               	movwf	??_measure_Impedance_SE
  4400  034F  0829               	movf	??_measure_Impedance_SE,w
  4401  0350  00AE               	movwf	measure_Impedance_SE@aux+4
  4402                           
  4403                           ;comm.c: 381: asic.data_bits.IQ = 1;
  4404  0351  15B5               	bsf	measure_Impedance_SE@asic+1,3
  4405                           
  4406                           ;comm.c: 386: config(asic);
  4407  0352  3034               	movlw	low measure_Impedance_SE@asic
  4408  0353  0086               	movwf	6
  4409  0354  3000               	movlw	high measure_Impedance_SE@asic
  4410  0355  0087               	movwf	7
  4411  0356  3020               	movlw	low config@conf
  4412  0357  0084               	movwf	4
  4413  0358  3000               	movlw	high config@conf
  4414  0359  0085               	movwf	5
  4415  035A  3F40               	moviw [0]fsr1
  4416  035B  3F80               	movwi [0]fsr0
  4417  035C  3F41               	moviw [1]fsr1
  4418  035D  3F81               	movwi [1]fsr0
  4419  035E  3F42               	moviw [2]fsr1
  4420  035F  3F82               	movwi [2]fsr0
  4421  0360  3F43               	moviw [3]fsr1
  4422  0361  3F83               	movwi [3]fsr0
  4423  0362  3F44               	moviw [4]fsr1
  4424  0363  3F84               	movwi [4]fsr0
  4425  0364  3F45               	moviw [5]fsr1
  4426  0365  3F85               	movwi [5]fsr0
  4427  0366  2419               	fcall	_config
  4428                           
  4429                           ;comm.c: 388: _delay((unsigned long)((15)*(500000/4000.0)));
  4430  0367  3003               	movlw	3
  4431  0368  0020               	movlb	0	; select bank0
  4432  0369  00A9               	movwf	??_measure_Impedance_SE
  4433  036A  306E               	movlw	110
  4434  036B                     u1987:	
  4435  036B  0B89               	decfsz	9,f
  4436  036C  2B6B               	goto	u1987
  4437  036D  0BA9               	decfsz	??_measure_Impedance_SE,f
  4438  036E  2B6B               	goto	u1987
  4439                           
  4440                           ;comm.c: 390: value1 = ADC_5();
  4441  036F  26C6               	fcall	_ADC_5
  4442  0370  0020               	movlb	0	; select bank0
  4443  0371  0821               	movf	?_ADC_5+1,w
  4444  0372  00B3               	movwf	measure_Impedance_SE@value1+1
  4445  0373  0820               	movf	?_ADC_5,w
  4446  0374  00B2               	movwf	measure_Impedance_SE@value1
  4447                           
  4448                           ;comm.c: 392: aux[5] = (unsigned char)(value1 & 0xff);
  4449  0375  0832               	movf	measure_Impedance_SE@value1,w
  4450  0376  00A9               	movwf	??_measure_Impedance_SE
  4451  0377  0829               	movf	??_measure_Impedance_SE,w
  4452  0378  00AF               	movwf	measure_Impedance_SE@aux+5
  4453                           
  4454                           ;comm.c: 393: aux[6] = (unsigned char)((value1 >> 8) & 0xff);
  4455  0379  0833               	movf	measure_Impedance_SE@value1+1,w
  4456  037A  00A9               	movwf	??_measure_Impedance_SE
  4457  037B  0829               	movf	??_measure_Impedance_SE,w
  4458  037C  00B0               	movwf	measure_Impedance_SE@aux+6
  4459                           
  4460                           ;comm.c: 401: lputs_ISR(aux,7);
  4461  037D  3007               	movlw	7
  4462  037E  00A9               	movwf	??_measure_Impedance_SE
  4463  037F  0829               	movf	??_measure_Impedance_SE,w
  4464  0380  00A0               	movwf	lputs_ISR@length
  4465  0381  302A               	movlw	(low (measure_Impedance_SE@aux| 0))& (0+255)
  4466  0382  2672               	fcall	_lputs_ISR
  4467  0383  0008               	return
  4468  0384                     __end_of_measure_Impedance_SE:	
  4469                           
  4470                           	psect	text18
  4471  06C6                     __ptext18:	
  4472 ;; *************** function _ADC_5 *****************
  4473 ;; Defined at:
  4474 ;;		line 48 in file "ADC1823.c"
  4475 ;; Parameters:    Size  Location     Type
  4476 ;;		None
  4477 ;; Auto vars:     Size  Location     Type
  4478 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  4479 ;; Return value:  Size  Location     Type
  4480 ;;                  2    0[BANK0 ] unsigned short 
  4481 ;; Registers used:
  4482 ;;		wreg
  4483 ;; Tracked objects:
  4484 ;;		On entry : 0/0
  4485 ;;		On exit  : 0/0
  4486 ;;		Unchanged: 0/0
  4487 ;; Data sizes:     COMMON   BANK0   BANK1
  4488 ;;      Params:         0       2       0
  4489 ;;      Locals:         0       2       0
  4490 ;;      Temps:          0       2       0
  4491 ;;      Totals:         0       6       0
  4492 ;;Total ram usage:        6 bytes
  4493 ;; Hardware stack levels used:    1
  4494 ;; Hardware stack levels required when called:    2
  4495 ;; This function calls:
  4496 ;;		Nothing
  4497 ;; This function is called by:
  4498 ;;		_read_ADC_channels
  4499 ;;		_measure_Impedance_SE
  4500 ;;		_measure
  4501 ;; This function uses a non-reentrant model
  4502 ;;
  4503                           
  4504                           
  4505                           ;psect for function _ADC_5
  4506  06C6                     _ADC_5:	
  4507                           
  4508                           ;ADC1823.c: 50: unsigned short ADC_value;
  4509                           ;ADC1823.c: 52: { ADCON0 = 0b00010101;};
  4510                           
  4511                           ;incstack = 0
  4512                           ; Regs used in _ADC_5: [wreg]
  4513  06C6  3015               	movlw	21
  4514  06C7  0021               	movlb	1	; select bank1
  4515  06C8  009D               	movwf	29	;volatile
  4516                           
  4517                           ;ADC1823.c: 53: __nop();
  4518  06C9  0000               	nop
  4519                           
  4520                           ;ADC1823.c: 54: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  4521  06CA  0021               	movlb	1	; select bank1
  4522  06CB  149D               	bsf	29,1	;volatile
  4523  06CC                     l454:	
  4524  06CC  189D               	btfsc	29,1	;volatile
  4525  06CD  2ECC               	goto	l454
  4526  06CE  081C               	movf	28,w	;volatile
  4527  06CF  0020               	movlb	0	; select bank0
  4528  06D0  00A2               	movwf	??_ADC_5
  4529  06D1  01A3               	clrf	??_ADC_5+1
  4530  06D2  0822               	movf	??_ADC_5,w
  4531  06D3  00A4               	movwf	ADC_5@ADC_value
  4532  06D4  0823               	movf	??_ADC_5+1,w
  4533  06D5  00A5               	movwf	ADC_5@ADC_value+1
  4534  06D6  3008               	movlw	8
  4535  06D7                     u1465:	
  4536  06D7  35A4               	lslf	ADC_5@ADC_value,f
  4537  06D8  0DA5               	rlf	ADC_5@ADC_value+1,f
  4538  06D9  0B89               	decfsz	9,f
  4539  06DA  2ED7               	goto	u1465
  4540  06DB  0021               	movlb	1	; select bank1
  4541  06DC  081B               	movf	27,w	;volatile
  4542  06DD  0020               	movlb	0	; select bank0
  4543  06DE  00A2               	movwf	??_ADC_5
  4544  06DF  01A3               	clrf	??_ADC_5+1
  4545  06E0  0822               	movf	??_ADC_5,w
  4546  06E1  04A4               	iorwf	ADC_5@ADC_value,f
  4547  06E2  0823               	movf	??_ADC_5+1,w
  4548  06E3  04A5               	iorwf	ADC_5@ADC_value+1,f
  4549                           
  4550                           ;ADC1823.c: 55: return ADC_value;
  4551  06E4  0825               	movf	ADC_5@ADC_value+1,w
  4552  06E5  00A1               	movwf	?_ADC_5+1
  4553  06E6  0824               	movf	ADC_5@ADC_value,w
  4554  06E7  00A0               	movwf	?_ADC_5
  4555  06E8  0008               	return
  4556  06E9                     __end_of_ADC_5:	
  4557                           
  4558                           	psect	text19
  4559  014D                     __ptext19:	
  4560 ;; *************** function _measure_Impedance *****************
  4561 ;; Defined at:
  4562 ;;		line 115 in file "comm.c"
  4563 ;; Parameters:    Size  Location     Type
  4564 ;;		None
  4565 ;; Auto vars:     Size  Location     Type
  4566 ;;  aux            13   10[BANK0 ] unsigned char [13]
  4567 ;;  asic            6   27[BANK0 ] struct .
  4568 ;;  value2          2   25[BANK0 ] unsigned short 
  4569 ;;  value1          2   23[BANK0 ] unsigned short 
  4570 ;;  value3          2    0        unsigned short 
  4571 ;; Return value:  Size  Location     Type
  4572 ;;                  1    wreg      void 
  4573 ;; Registers used:
  4574 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4575 ;; Tracked objects:
  4576 ;;		On entry : 0/0
  4577 ;;		On exit  : 0/0
  4578 ;;		Unchanged: 0/0
  4579 ;; Data sizes:     COMMON   BANK0   BANK1
  4580 ;;      Params:         0       0       0
  4581 ;;      Locals:         0      23       0
  4582 ;;      Temps:          0       1       0
  4583 ;;      Totals:         0      24       0
  4584 ;;Total ram usage:       24 bytes
  4585 ;; Hardware stack levels used:    1
  4586 ;; Hardware stack levels required when called:    4
  4587 ;; This function calls:
  4588 ;;		_ADC_2
  4589 ;;		_ADC_4
  4590 ;;		_config
  4591 ;;		_lputs_ISR
  4592 ;; This function is called by:
  4593 ;;		_mess_handler
  4594 ;; This function uses a non-reentrant model
  4595 ;;
  4596                           
  4597                           
  4598                           ;psect for function _measure_Impedance
  4599  014D                     _measure_Impedance:	
  4600                           
  4601                           ;comm.c: 117: unsigned char aux[13];
  4602                           ;comm.c: 118: unsigned short value1,value2,value3;
  4603                           ;comm.c: 123: VIN asic;
  4604                           ;comm.c: 127: aux[0] = 'z';
  4605                           
  4606                           ;incstack = 0
  4607                           ; Regs used in _measure_Impedance: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4608  014D  307A               	movlw	122
  4609  014E  0020               	movlb	0	; select bank0
  4610  014F  00A9               	movwf	??_measure_Impedance
  4611  0150  0829               	movf	??_measure_Impedance,w
  4612  0151  00AA               	movwf	measure_Impedance@aux
  4613                           
  4614                           ;comm.c: 139: asic.data[0] = mess_rec[1];
  4615  0152  0867               	movf	_mess_rec+1,w	;volatile
  4616  0153  00A9               	movwf	??_measure_Impedance
  4617  0154  0829               	movf	??_measure_Impedance,w
  4618  0155  00BB               	movwf	measure_Impedance@asic
  4619                           
  4620                           ;comm.c: 140: asic.data[1] = mess_rec[2];
  4621  0156  0868               	movf	_mess_rec+2,w	;volatile
  4622  0157  00A9               	movwf	??_measure_Impedance
  4623  0158  0829               	movf	??_measure_Impedance,w
  4624  0159  00BC               	movwf	measure_Impedance@asic+1
  4625                           
  4626                           ;comm.c: 141: asic.data[2] = mess_rec[3];
  4627  015A  0869               	movf	_mess_rec+3,w	;volatile
  4628  015B  00A9               	movwf	??_measure_Impedance
  4629  015C  0829               	movf	??_measure_Impedance,w
  4630  015D  00BD               	movwf	measure_Impedance@asic+2
  4631                           
  4632                           ;comm.c: 142: asic.data[3] = mess_rec[4];
  4633  015E  086A               	movf	_mess_rec+4,w	;volatile
  4634  015F  00A9               	movwf	??_measure_Impedance
  4635  0160  0829               	movf	??_measure_Impedance,w
  4636  0161  00BE               	movwf	measure_Impedance@asic+3
  4637                           
  4638                           ;comm.c: 143: asic.data[4] = mess_rec[5];
  4639  0162  086B               	movf	_mess_rec+5,w	;volatile
  4640  0163  00A9               	movwf	??_measure_Impedance
  4641  0164  0829               	movf	??_measure_Impedance,w
  4642  0165  00BF               	movwf	measure_Impedance@asic+4
  4643                           
  4644                           ;comm.c: 145: asic.data_bits.CE = 0;
  4645  0166  133B               	bcf	measure_Impedance@asic,6
  4646                           
  4647                           ;comm.c: 146: config(asic);
  4648  0167  303B               	movlw	low measure_Impedance@asic
  4649  0168  0086               	movwf	6
  4650  0169  3000               	movlw	high measure_Impedance@asic
  4651  016A  0087               	movwf	7
  4652  016B  3020               	movlw	low config@conf
  4653  016C  0084               	movwf	4
  4654  016D  3000               	movlw	high config@conf
  4655  016E  0085               	movwf	5
  4656  016F  3F40               	moviw [0]fsr1
  4657  0170  3F80               	movwi [0]fsr0
  4658  0171  3F41               	moviw [1]fsr1
  4659  0172  3F81               	movwi [1]fsr0
  4660  0173  3F42               	moviw [2]fsr1
  4661  0174  3F82               	movwi [2]fsr0
  4662  0175  3F43               	moviw [3]fsr1
  4663  0176  3F83               	movwi [3]fsr0
  4664  0177  3F44               	moviw [4]fsr1
  4665  0178  3F84               	movwi [4]fsr0
  4666  0179  3F45               	moviw [5]fsr1
  4667  017A  3F85               	movwi [5]fsr0
  4668  017B  2419               	fcall	_config
  4669                           
  4670                           ;comm.c: 149: _delay((unsigned long)((15)*(500000/4000.0)));
  4671  017C  3003               	movlw	3
  4672  017D  0020               	movlb	0	; select bank0
  4673  017E  00A9               	movwf	??_measure_Impedance
  4674  017F  306E               	movlw	110
  4675  0180                     u1997:	
  4676  0180  0B89               	decfsz	9,f
  4677  0181  2980               	goto	u1997
  4678  0182  0BA9               	decfsz	??_measure_Impedance,f
  4679  0183  2980               	goto	u1997
  4680                           
  4681                           ;comm.c: 151: value1 = ADC_2();
  4682  0184  270C               	fcall	_ADC_2
  4683  0185  0020               	movlb	0	; select bank0
  4684  0186  0821               	movf	?_ADC_2+1,w
  4685  0187  00B8               	movwf	measure_Impedance@value1+1
  4686  0188  0820               	movf	?_ADC_2,w
  4687  0189  00B7               	movwf	measure_Impedance@value1
  4688                           
  4689                           ;comm.c: 152: value2 = ADC_4();
  4690  018A  26E9               	fcall	_ADC_4
  4691  018B  0020               	movlb	0	; select bank0
  4692  018C  0821               	movf	?_ADC_4+1,w
  4693  018D  00BA               	movwf	measure_Impedance@value2+1
  4694  018E  0820               	movf	?_ADC_4,w
  4695  018F  00B9               	movwf	measure_Impedance@value2
  4696                           
  4697                           ;comm.c: 154: aux[1] = (unsigned char)(value1 & 0xff);
  4698  0190  0837               	movf	measure_Impedance@value1,w
  4699  0191  00A9               	movwf	??_measure_Impedance
  4700  0192  0829               	movf	??_measure_Impedance,w
  4701  0193  00AB               	movwf	measure_Impedance@aux+1
  4702                           
  4703                           ;comm.c: 155: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  4704  0194  0838               	movf	measure_Impedance@value1+1,w
  4705  0195  00A9               	movwf	??_measure_Impedance
  4706  0196  0829               	movf	??_measure_Impedance,w
  4707  0197  00AC               	movwf	measure_Impedance@aux+2
  4708                           
  4709                           ;comm.c: 156: aux[3] = (unsigned char)(value2 & 0xff);
  4710  0198  0839               	movf	measure_Impedance@value2,w
  4711  0199  00A9               	movwf	??_measure_Impedance
  4712  019A  0829               	movf	??_measure_Impedance,w
  4713  019B  00AD               	movwf	measure_Impedance@aux+3
  4714                           
  4715                           ;comm.c: 157: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  4716  019C  083A               	movf	measure_Impedance@value2+1,w
  4717  019D  00A9               	movwf	??_measure_Impedance
  4718  019E  0829               	movf	??_measure_Impedance,w
  4719  019F  00AE               	movwf	measure_Impedance@aux+4
  4720                           
  4721                           ;comm.c: 160: asic.data_bits.CE = 1;
  4722  01A0  173B               	bsf	measure_Impedance@asic,6
  4723                           
  4724                           ;comm.c: 161: asic.data_bits.IQ = 0;
  4725  01A1  11BC               	bcf	measure_Impedance@asic+1,3
  4726                           
  4727                           ;comm.c: 166: config(asic);
  4728  01A2  303B               	movlw	low measure_Impedance@asic
  4729  01A3  0086               	movwf	6
  4730  01A4  3000               	movlw	high measure_Impedance@asic
  4731  01A5  0087               	movwf	7
  4732  01A6  3020               	movlw	low config@conf
  4733  01A7  0084               	movwf	4
  4734  01A8  3000               	movlw	high config@conf
  4735  01A9  0085               	movwf	5
  4736  01AA  3F40               	moviw [0]fsr1
  4737  01AB  3F80               	movwi [0]fsr0
  4738  01AC  3F41               	moviw [1]fsr1
  4739  01AD  3F81               	movwi [1]fsr0
  4740  01AE  3F42               	moviw [2]fsr1
  4741  01AF  3F82               	movwi [2]fsr0
  4742  01B0  3F43               	moviw [3]fsr1
  4743  01B1  3F83               	movwi [3]fsr0
  4744  01B2  3F44               	moviw [4]fsr1
  4745  01B3  3F84               	movwi [4]fsr0
  4746  01B4  3F45               	moviw [5]fsr1
  4747  01B5  3F85               	movwi [5]fsr0
  4748  01B6  2419               	fcall	_config
  4749                           
  4750                           ;comm.c: 168: _delay((unsigned long)((15)*(500000/4000.0)));
  4751  01B7  3003               	movlw	3
  4752  01B8  0020               	movlb	0	; select bank0
  4753  01B9  00A9               	movwf	??_measure_Impedance
  4754  01BA  306E               	movlw	110
  4755  01BB                     u2007:	
  4756  01BB  0B89               	decfsz	9,f
  4757  01BC  29BB               	goto	u2007
  4758  01BD  0BA9               	decfsz	??_measure_Impedance,f
  4759  01BE  29BB               	goto	u2007
  4760                           
  4761                           ;comm.c: 170: value1 = ADC_2();
  4762  01BF  270C               	fcall	_ADC_2
  4763  01C0  0020               	movlb	0	; select bank0
  4764  01C1  0821               	movf	?_ADC_2+1,w
  4765  01C2  00B8               	movwf	measure_Impedance@value1+1
  4766  01C3  0820               	movf	?_ADC_2,w
  4767  01C4  00B7               	movwf	measure_Impedance@value1
  4768                           
  4769                           ;comm.c: 171: value2 = ADC_4();
  4770  01C5  26E9               	fcall	_ADC_4
  4771  01C6  0020               	movlb	0	; select bank0
  4772  01C7  0821               	movf	?_ADC_4+1,w
  4773  01C8  00BA               	movwf	measure_Impedance@value2+1
  4774  01C9  0820               	movf	?_ADC_4,w
  4775  01CA  00B9               	movwf	measure_Impedance@value2
  4776                           
  4777                           ;comm.c: 173: aux[5] = (unsigned char)(value1 & 0xff);
  4778  01CB  0837               	movf	measure_Impedance@value1,w
  4779  01CC  00A9               	movwf	??_measure_Impedance
  4780  01CD  0829               	movf	??_measure_Impedance,w
  4781  01CE  00AF               	movwf	measure_Impedance@aux+5
  4782                           
  4783                           ;comm.c: 174: aux[6] = (unsigned char)((value1 >> 8) & 0xff);
  4784  01CF  0838               	movf	measure_Impedance@value1+1,w
  4785  01D0  00A9               	movwf	??_measure_Impedance
  4786  01D1  0829               	movf	??_measure_Impedance,w
  4787  01D2  00B0               	movwf	measure_Impedance@aux+6
  4788                           
  4789                           ;comm.c: 175: aux[7] = (unsigned char)(value2 & 0xff);
  4790  01D3  0839               	movf	measure_Impedance@value2,w
  4791  01D4  00A9               	movwf	??_measure_Impedance
  4792  01D5  0829               	movf	??_measure_Impedance,w
  4793  01D6  00B1               	movwf	measure_Impedance@aux+7
  4794                           
  4795                           ;comm.c: 176: aux[8] = (unsigned char)((value2 >> 8) & 0xff);
  4796  01D7  083A               	movf	measure_Impedance@value2+1,w
  4797  01D8  00A9               	movwf	??_measure_Impedance
  4798  01D9  0829               	movf	??_measure_Impedance,w
  4799  01DA  00B2               	movwf	measure_Impedance@aux+8
  4800                           
  4801                           ;comm.c: 179: asic.data_bits.IQ = 1;
  4802  01DB  15BC               	bsf	measure_Impedance@asic+1,3
  4803                           
  4804                           ;comm.c: 184: config(asic);
  4805  01DC  303B               	movlw	low measure_Impedance@asic
  4806  01DD  0086               	movwf	6
  4807  01DE  3000               	movlw	high measure_Impedance@asic
  4808  01DF  0087               	movwf	7
  4809  01E0  3020               	movlw	low config@conf
  4810  01E1  0084               	movwf	4
  4811  01E2  3000               	movlw	high config@conf
  4812  01E3  0085               	movwf	5
  4813  01E4  3F40               	moviw [0]fsr1
  4814  01E5  3F80               	movwi [0]fsr0
  4815  01E6  3F41               	moviw [1]fsr1
  4816  01E7  3F81               	movwi [1]fsr0
  4817  01E8  3F42               	moviw [2]fsr1
  4818  01E9  3F82               	movwi [2]fsr0
  4819  01EA  3F43               	moviw [3]fsr1
  4820  01EB  3F83               	movwi [3]fsr0
  4821  01EC  3F44               	moviw [4]fsr1
  4822  01ED  3F84               	movwi [4]fsr0
  4823  01EE  3F45               	moviw [5]fsr1
  4824  01EF  3F85               	movwi [5]fsr0
  4825  01F0  2419               	fcall	_config
  4826                           
  4827                           ;comm.c: 186: _delay((unsigned long)((15)*(500000/4000.0)));
  4828  01F1  3003               	movlw	3
  4829  01F2  0020               	movlb	0	; select bank0
  4830  01F3  00A9               	movwf	??_measure_Impedance
  4831  01F4  306E               	movlw	110
  4832  01F5                     u2017:	
  4833  01F5  0B89               	decfsz	9,f
  4834  01F6  29F5               	goto	u2017
  4835  01F7  0BA9               	decfsz	??_measure_Impedance,f
  4836  01F8  29F5               	goto	u2017
  4837                           
  4838                           ;comm.c: 188: value1 = ADC_2();
  4839  01F9  270C               	fcall	_ADC_2
  4840  01FA  0020               	movlb	0	; select bank0
  4841  01FB  0821               	movf	?_ADC_2+1,w
  4842  01FC  00B8               	movwf	measure_Impedance@value1+1
  4843  01FD  0820               	movf	?_ADC_2,w
  4844  01FE  00B7               	movwf	measure_Impedance@value1
  4845                           
  4846                           ;comm.c: 189: value2 = ADC_4();
  4847  01FF  26E9               	fcall	_ADC_4
  4848  0200  0020               	movlb	0	; select bank0
  4849  0201  0821               	movf	?_ADC_4+1,w
  4850  0202  00BA               	movwf	measure_Impedance@value2+1
  4851  0203  0820               	movf	?_ADC_4,w
  4852  0204  00B9               	movwf	measure_Impedance@value2
  4853                           
  4854                           ;comm.c: 191: aux[9] = (unsigned char)(value1 & 0xff);
  4855  0205  0837               	movf	measure_Impedance@value1,w
  4856  0206  00A9               	movwf	??_measure_Impedance
  4857  0207  0829               	movf	??_measure_Impedance,w
  4858  0208  00B3               	movwf	measure_Impedance@aux+9
  4859                           
  4860                           ;comm.c: 192: aux[10] = (unsigned char)((value1 >> 8) & 0xff);
  4861  0209  0838               	movf	measure_Impedance@value1+1,w
  4862  020A  00A9               	movwf	??_measure_Impedance
  4863  020B  0829               	movf	??_measure_Impedance,w
  4864  020C  00B4               	movwf	measure_Impedance@aux+10
  4865                           
  4866                           ;comm.c: 193: aux[11] = (unsigned char)(value2 & 0xff);
  4867  020D  0839               	movf	measure_Impedance@value2,w
  4868  020E  00A9               	movwf	??_measure_Impedance
  4869  020F  0829               	movf	??_measure_Impedance,w
  4870  0210  00B5               	movwf	measure_Impedance@aux+11
  4871                           
  4872                           ;comm.c: 194: aux[12] = (unsigned char)((value2 >> 8) & 0xff);
  4873  0211  083A               	movf	measure_Impedance@value2+1,w
  4874  0212  00A9               	movwf	??_measure_Impedance
  4875  0213  0829               	movf	??_measure_Impedance,w
  4876  0214  00B6               	movwf	measure_Impedance@aux+12
  4877                           
  4878                           ;comm.c: 197: lputs_ISR(aux,13);
  4879  0215  300D               	movlw	13
  4880  0216  00A9               	movwf	??_measure_Impedance
  4881  0217  0829               	movf	??_measure_Impedance,w
  4882  0218  00A0               	movwf	lputs_ISR@length
  4883  0219  302A               	movlw	(low (measure_Impedance@aux| 0))& (0+255)
  4884  021A  2672               	fcall	_lputs_ISR
  4885  021B  0008               	return
  4886  021C                     __end_of_measure_Impedance:	
  4887                           
  4888                           	psect	text20
  4889  06E9                     __ptext20:	
  4890 ;; *************** function _ADC_4 *****************
  4891 ;; Defined at:
  4892 ;;		line 38 in file "ADC1823.c"
  4893 ;; Parameters:    Size  Location     Type
  4894 ;;		None
  4895 ;; Auto vars:     Size  Location     Type
  4896 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  4897 ;; Return value:  Size  Location     Type
  4898 ;;                  2    0[BANK0 ] unsigned short 
  4899 ;; Registers used:
  4900 ;;		wreg
  4901 ;; Tracked objects:
  4902 ;;		On entry : 0/0
  4903 ;;		On exit  : 0/0
  4904 ;;		Unchanged: 0/0
  4905 ;; Data sizes:     COMMON   BANK0   BANK1
  4906 ;;      Params:         0       2       0
  4907 ;;      Locals:         0       2       0
  4908 ;;      Temps:          0       2       0
  4909 ;;      Totals:         0       6       0
  4910 ;;Total ram usage:        6 bytes
  4911 ;; Hardware stack levels used:    1
  4912 ;; Hardware stack levels required when called:    2
  4913 ;; This function calls:
  4914 ;;		Nothing
  4915 ;; This function is called by:
  4916 ;;		_read_ADC_channels
  4917 ;;		_measure_Impedance
  4918 ;;		_measure_Impedance_no_offset
  4919 ;;		_measure_Offset
  4920 ;; This function uses a non-reentrant model
  4921 ;;
  4922                           
  4923                           
  4924                           ;psect for function _ADC_4
  4925  06E9                     _ADC_4:	
  4926                           
  4927                           ;ADC1823.c: 40: unsigned short ADC_value;
  4928                           ;ADC1823.c: 42: { ADCON0 = 0b00010001;};
  4929                           
  4930                           ;incstack = 0
  4931                           ; Regs used in _ADC_4: [wreg]
  4932  06E9  3011               	movlw	17
  4933  06EA  0021               	movlb	1	; select bank1
  4934  06EB  009D               	movwf	29	;volatile
  4935                           
  4936                           ;ADC1823.c: 43: __nop();
  4937  06EC  0000               	nop
  4938                           
  4939                           ;ADC1823.c: 44: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  4940  06ED  0021               	movlb	1	; select bank1
  4941  06EE  149D               	bsf	29,1	;volatile
  4942  06EF                     l448:	
  4943  06EF  189D               	btfsc	29,1	;volatile
  4944  06F0  2EEF               	goto	l448
  4945  06F1  081C               	movf	28,w	;volatile
  4946  06F2  0020               	movlb	0	; select bank0
  4947  06F3  00A2               	movwf	??_ADC_4
  4948  06F4  01A3               	clrf	??_ADC_4+1
  4949  06F5  0822               	movf	??_ADC_4,w
  4950  06F6  00A4               	movwf	ADC_4@ADC_value
  4951  06F7  0823               	movf	??_ADC_4+1,w
  4952  06F8  00A5               	movwf	ADC_4@ADC_value+1
  4953  06F9  3008               	movlw	8
  4954  06FA                     u1675:	
  4955  06FA  35A4               	lslf	ADC_4@ADC_value,f
  4956  06FB  0DA5               	rlf	ADC_4@ADC_value+1,f
  4957  06FC  0B89               	decfsz	9,f
  4958  06FD  2EFA               	goto	u1675
  4959  06FE  0021               	movlb	1	; select bank1
  4960  06FF  081B               	movf	27,w	;volatile
  4961  0700  0020               	movlb	0	; select bank0
  4962  0701  00A2               	movwf	??_ADC_4
  4963  0702  01A3               	clrf	??_ADC_4+1
  4964  0703  0822               	movf	??_ADC_4,w
  4965  0704  04A4               	iorwf	ADC_4@ADC_value,f
  4966  0705  0823               	movf	??_ADC_4+1,w
  4967  0706  04A5               	iorwf	ADC_4@ADC_value+1,f
  4968                           
  4969                           ;ADC1823.c: 45: return ADC_value;
  4970  0707  0825               	movf	ADC_4@ADC_value+1,w
  4971  0708  00A1               	movwf	?_ADC_4+1
  4972  0709  0824               	movf	ADC_4@ADC_value,w
  4973  070A  00A0               	movwf	?_ADC_4
  4974  070B  0008               	return
  4975  070C                     __end_of_ADC_4:	
  4976                           
  4977                           	psect	text21
  4978  070C                     __ptext21:	
  4979 ;; *************** function _ADC_2 *****************
  4980 ;; Defined at:
  4981 ;;		line 25 in file "ADC1823.c"
  4982 ;; Parameters:    Size  Location     Type
  4983 ;;		None
  4984 ;; Auto vars:     Size  Location     Type
  4985 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  4986 ;; Return value:  Size  Location     Type
  4987 ;;                  2    0[BANK0 ] unsigned short 
  4988 ;; Registers used:
  4989 ;;		wreg
  4990 ;; Tracked objects:
  4991 ;;		On entry : 0/0
  4992 ;;		On exit  : 0/0
  4993 ;;		Unchanged: 0/0
  4994 ;; Data sizes:     COMMON   BANK0   BANK1
  4995 ;;      Params:         0       2       0
  4996 ;;      Locals:         0       2       0
  4997 ;;      Temps:          0       2       0
  4998 ;;      Totals:         0       6       0
  4999 ;;Total ram usage:        6 bytes
  5000 ;; Hardware stack levels used:    1
  5001 ;; Hardware stack levels required when called:    2
  5002 ;; This function calls:
  5003 ;;		Nothing
  5004 ;; This function is called by:
  5005 ;;		_read_ADC_channels
  5006 ;;		_measure_Impedance
  5007 ;;		_measure_Impedance_no_offset
  5008 ;;		_measure_Offset
  5009 ;; This function uses a non-reentrant model
  5010 ;;
  5011                           
  5012                           
  5013                           ;psect for function _ADC_2
  5014  070C                     _ADC_2:	
  5015                           
  5016                           ;ADC1823.c: 27: unsigned short ADC_value;
  5017                           ;ADC1823.c: 29: { ADCON0 = 0b00001001;};
  5018                           
  5019                           ;incstack = 0
  5020                           ; Regs used in _ADC_2: [wreg]
  5021  070C  3009               	movlw	9
  5022  070D  0021               	movlb	1	; select bank1
  5023  070E  009D               	movwf	29	;volatile
  5024                           
  5025                           ;ADC1823.c: 30: __nop();
  5026  070F  0000               	nop
  5027                           
  5028                           ;ADC1823.c: 34: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  5029  0710  0021               	movlb	1	; select bank1
  5030  0711  149D               	bsf	29,1	;volatile
  5031  0712                     l442:	
  5032  0712  189D               	btfsc	29,1	;volatile
  5033  0713  2F12               	goto	l442
  5034  0714  081C               	movf	28,w	;volatile
  5035  0715  0020               	movlb	0	; select bank0
  5036  0716  00A2               	movwf	??_ADC_2
  5037  0717  01A3               	clrf	??_ADC_2+1
  5038  0718  0822               	movf	??_ADC_2,w
  5039  0719  00A4               	movwf	ADC_2@ADC_value
  5040  071A  0823               	movf	??_ADC_2+1,w
  5041  071B  00A5               	movwf	ADC_2@ADC_value+1
  5042  071C  3008               	movlw	8
  5043  071D                     u1655:	
  5044  071D  35A4               	lslf	ADC_2@ADC_value,f
  5045  071E  0DA5               	rlf	ADC_2@ADC_value+1,f
  5046  071F  0B89               	decfsz	9,f
  5047  0720  2F1D               	goto	u1655
  5048  0721  0021               	movlb	1	; select bank1
  5049  0722  081B               	movf	27,w	;volatile
  5050  0723  0020               	movlb	0	; select bank0
  5051  0724  00A2               	movwf	??_ADC_2
  5052  0725  01A3               	clrf	??_ADC_2+1
  5053  0726  0822               	movf	??_ADC_2,w
  5054  0727  04A4               	iorwf	ADC_2@ADC_value,f
  5055  0728  0823               	movf	??_ADC_2+1,w
  5056  0729  04A5               	iorwf	ADC_2@ADC_value+1,f
  5057                           
  5058                           ;ADC1823.c: 35: return ADC_value;
  5059  072A  0825               	movf	ADC_2@ADC_value+1,w
  5060  072B  00A1               	movwf	?_ADC_2+1
  5061  072C  0824               	movf	ADC_2@ADC_value,w
  5062  072D  00A0               	movwf	?_ADC_2
  5063  072E  0008               	return
  5064  072F                     __end_of_ADC_2:	
  5065                           
  5066                           	psect	text22
  5067  0641                     __ptext22:	
  5068 ;; *************** function _config_ASIC *****************
  5069 ;; Defined at:
  5070 ;;		line 61 in file "comm.c"
  5071 ;; Parameters:    Size  Location     Type
  5072 ;;		None
  5073 ;; Auto vars:     Size  Location     Type
  5074 ;;  asic            6   10[BANK0 ] struct .
  5075 ;; Return value:  Size  Location     Type
  5076 ;;                  1    wreg      void 
  5077 ;; Registers used:
  5078 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5079 ;; Tracked objects:
  5080 ;;		On entry : 0/0
  5081 ;;		On exit  : 0/0
  5082 ;;		Unchanged: 0/0
  5083 ;; Data sizes:     COMMON   BANK0   BANK1
  5084 ;;      Params:         0       0       0
  5085 ;;      Locals:         0       6       0
  5086 ;;      Temps:          0       1       0
  5087 ;;      Totals:         0       7       0
  5088 ;;Total ram usage:        7 bytes
  5089 ;; Hardware stack levels used:    1
  5090 ;; Hardware stack levels required when called:    4
  5091 ;; This function calls:
  5092 ;;		_config
  5093 ;;		_lputs_ISR
  5094 ;; This function is called by:
  5095 ;;		_mess_handler
  5096 ;; This function uses a non-reentrant model
  5097 ;;
  5098                           
  5099                           
  5100                           ;psect for function _config_ASIC
  5101  0641                     _config_ASIC:	
  5102                           
  5103                           ;comm.c: 77: VIN asic;
  5104                           ;comm.c: 79: asic.data[0] = mess_rec[1];
  5105                           
  5106                           ;incstack = 0
  5107                           ; Regs used in _config_ASIC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5108  0641  0020               	movlb	0	; select bank0
  5109  0642  0867               	movf	_mess_rec+1,w	;volatile
  5110  0643  00A9               	movwf	??_config_ASIC
  5111  0644  0829               	movf	??_config_ASIC,w
  5112  0645  00AA               	movwf	config_ASIC@asic
  5113                           
  5114                           ;comm.c: 80: asic.data[1] = mess_rec[2];
  5115  0646  0868               	movf	_mess_rec+2,w	;volatile
  5116  0647  00A9               	movwf	??_config_ASIC
  5117  0648  0829               	movf	??_config_ASIC,w
  5118  0649  00AB               	movwf	config_ASIC@asic+1
  5119                           
  5120                           ;comm.c: 81: asic.data[2] = mess_rec[3];
  5121  064A  0869               	movf	_mess_rec+3,w	;volatile
  5122  064B  00A9               	movwf	??_config_ASIC
  5123  064C  0829               	movf	??_config_ASIC,w
  5124  064D  00AC               	movwf	config_ASIC@asic+2
  5125                           
  5126                           ;comm.c: 82: asic.data[3] = mess_rec[4];
  5127  064E  086A               	movf	_mess_rec+4,w	;volatile
  5128  064F  00A9               	movwf	??_config_ASIC
  5129  0650  0829               	movf	??_config_ASIC,w
  5130  0651  00AD               	movwf	config_ASIC@asic+3
  5131                           
  5132                           ;comm.c: 83: asic.data[4] = mess_rec[5];
  5133  0652  086B               	movf	_mess_rec+5,w	;volatile
  5134  0653  00A9               	movwf	??_config_ASIC
  5135  0654  0829               	movf	??_config_ASIC,w
  5136  0655  00AE               	movwf	config_ASIC@asic+4
  5137                           
  5138                           ;comm.c: 85: lputs_ISR(mess_rec,mess_rec_size);
  5139  0656  0865               	movf	_mess_rec_size,w	;volatile
  5140  0657  00A9               	movwf	??_config_ASIC
  5141  0658  0829               	movf	??_config_ASIC,w
  5142  0659  00A0               	movwf	lputs_ISR@length
  5143  065A  3066               	movlw	(low (_mess_rec| 0))& (0+255)
  5144  065B  2672               	fcall	_lputs_ISR
  5145                           
  5146                           ;comm.c: 87: config(asic);
  5147  065C  302A               	movlw	low config_ASIC@asic
  5148  065D  0086               	movwf	6
  5149  065E  3000               	movlw	high config_ASIC@asic
  5150  065F  0087               	movwf	7
  5151  0660  3020               	movlw	low config@conf
  5152  0661  0084               	movwf	4
  5153  0662  3000               	movlw	high config@conf
  5154  0663  0085               	movwf	5
  5155  0664  3F40               	moviw [0]fsr1
  5156  0665  3F80               	movwi [0]fsr0
  5157  0666  3F41               	moviw [1]fsr1
  5158  0667  3F81               	movwi [1]fsr0
  5159  0668  3F42               	moviw [2]fsr1
  5160  0669  3F82               	movwi [2]fsr0
  5161  066A  3F43               	moviw [3]fsr1
  5162  066B  3F83               	movwi [3]fsr0
  5163  066C  3F44               	moviw [4]fsr1
  5164  066D  3F84               	movwi [4]fsr0
  5165  066E  3F45               	moviw [5]fsr1
  5166  066F  3F85               	movwi [5]fsr0
  5167  0670  2419               	fcall	_config
  5168  0671  0008               	return
  5169  0672                     __end_of_config_ASIC:	
  5170                           
  5171                           	psect	text23
  5172  0672                     __ptext23:	
  5173 ;; *************** function _lputs_ISR *****************
  5174 ;; Defined at:
  5175 ;;		line 132 in file "USART1823.c"
  5176 ;; Parameters:    Size  Location     Type
  5177 ;;  data            1    wreg     PTR unsigned char 
  5178 ;;		 -> sweep@aux(7), calibrate_reader@aux(8), measure_Impedance_SE@aux(8), measure_Offset@aux(5), 
  5179 ;;		 -> measure_Impedance_no_offset@aux(13), measure_Impedance@aux(13), read_ADC_channels@aux(7), mess_rec(10), 
  5180 ;;  length          1    0[BANK0 ] unsigned char 
  5181 ;; Auto vars:     Size  Location     Type
  5182 ;;  data            1    4[BANK0 ] PTR unsigned char 
  5183 ;;		 -> sweep@aux(7), calibrate_reader@aux(8), measure_Impedance_SE@aux(8), measure_Offset@aux(5), 
  5184 ;;		 -> measure_Impedance_no_offset@aux(13), measure_Impedance@aux(13), read_ADC_channels@aux(7), mess_rec(10), 
  5185 ;;  i               1    3[BANK0 ] unsigned char 
  5186 ;; Return value:  Size  Location     Type
  5187 ;;                  1    wreg      void 
  5188 ;; Registers used:
  5189 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5190 ;; Tracked objects:
  5191 ;;		On entry : 0/0
  5192 ;;		On exit  : 0/0
  5193 ;;		Unchanged: 0/0
  5194 ;; Data sizes:     COMMON   BANK0   BANK1
  5195 ;;      Params:         0       1       0
  5196 ;;      Locals:         0       2       0
  5197 ;;      Temps:          0       2       0
  5198 ;;      Totals:         0       5       0
  5199 ;;Total ram usage:        5 bytes
  5200 ;; Hardware stack levels used:    1
  5201 ;; Hardware stack levels required when called:    3
  5202 ;; This function calls:
  5203 ;;		_close_RX_USART
  5204 ;; This function is called by:
  5205 ;;		_mess_handler
  5206 ;;		_config_ASIC
  5207 ;;		_read_ADC_channels
  5208 ;;		_measure_Impedance
  5209 ;;		_measure_Impedance_no_offset
  5210 ;;		_measure_Offset
  5211 ;;		_measure_Impedance_SE
  5212 ;;		_sweep
  5213 ;;		_calibrate_reader
  5214 ;; This function uses a non-reentrant model
  5215 ;;
  5216                           
  5217                           
  5218                           ;psect for function _lputs_ISR
  5219  0672                     _lputs_ISR:	
  5220                           
  5221                           ;incstack = 0
  5222                           ; Regs used in _lputs_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5223                           ;lputs_ISR@data stored from wreg
  5224  0672  0020               	movlb	0	; select bank0
  5225  0673  00A4               	movwf	lputs_ISR@data
  5226                           
  5227                           ;USART1823.c: 134: unsigned char i;
  5228                           ;USART1823.c: 136: if (USART_tx_flag == 1)
  5229  0674  0372               	decf	_USART_tx_flag,w	;volatile
  5230  0675  1903               	btfsc	3,2
  5231  0676  0008               	return
  5232                           
  5233                           ;USART1823.c: 139: for (i = 0; i < length; i++)
  5234                           
  5235                           ;USART1823.c: 137: return;
  5236  0677  01A3               	clrf	lputs_ISR@i
  5237  0678                     l2655:	
  5238  0678  0820               	movf	lputs_ISR@length,w
  5239  0679  0223               	subwf	lputs_ISR@i,w
  5240  067A  1803               	btfsc	3,0
  5241  067B  2E8F               	goto	l2657
  5242                           
  5243                           ;USART1823.c: 140: USART_tx_data[i] = data[i];
  5244  067C  0823               	movf	lputs_ISR@i,w
  5245  067D  0724               	addwf	lputs_ISR@data,w
  5246  067E  00A1               	movwf	??_lputs_ISR
  5247  067F  0821               	movf	??_lputs_ISR,w
  5248  0680  0086               	movwf	6
  5249  0681  0187               	clrf	7
  5250  0682  0801               	movf	1,w
  5251  0683  00A2               	movwf	??_lputs_ISR+1
  5252  0684  0823               	movf	lputs_ISR@i,w
  5253  0685  3EA0               	addlw	(low (_USART_tx_data| 0))& (0+255)
  5254  0686  0086               	movwf	6
  5255  0687  0187               	clrf	7
  5256  0688  0822               	movf	??_lputs_ISR+1,w
  5257  0689  0081               	movwf	1
  5258  068A  3001               	movlw	1
  5259  068B  00A1               	movwf	??_lputs_ISR
  5260  068C  0821               	movf	??_lputs_ISR,w
  5261  068D  07A3               	addwf	lputs_ISR@i,f
  5262  068E  2E78               	goto	l2655
  5263  068F                     l2657:	
  5264                           
  5265                           ;USART1823.c: 142: close_RX_USART();
  5266  068F  27C5               	fcall	_close_RX_USART
  5267                           
  5268                           ;USART1823.c: 144: USART_tx_index = 0;
  5269  0690  01F3               	clrf	_USART_tx_index	;volatile
  5270                           
  5271                           ;USART1823.c: 145: USART_tx_length = length;
  5272  0691  0020               	movlb	0	; select bank0
  5273  0692  0820               	movf	lputs_ISR@length,w
  5274  0693  00A1               	movwf	??_lputs_ISR
  5275  0694  0821               	movf	??_lputs_ISR,w
  5276  0695  00F4               	movwf	_USART_tx_length	;volatile
  5277                           
  5278                           ;USART1823.c: 147: USART_tx_flag = 1;
  5279  0696  3001               	movlw	1
  5280  0697  00A1               	movwf	??_lputs_ISR
  5281  0698  0821               	movf	??_lputs_ISR,w
  5282  0699  00F2               	movwf	_USART_tx_flag	;volatile
  5283                           
  5284                           ;USART1823.c: 148: TXIE = 1;
  5285  069A  0021               	movlb	1	; select bank1
  5286  069B  1611               	bsf	17,4	;volatile
  5287  069C  0008               	return
  5288  069D                     __end_of_lputs_ISR:	
  5289                           
  5290                           	psect	text24
  5291  07C5                     __ptext24:	
  5292 ;; *************** function _close_RX_USART *****************
  5293 ;; Defined at:
  5294 ;;		line 35 in file "USART1823.c"
  5295 ;; Parameters:    Size  Location     Type
  5296 ;;		None
  5297 ;; Auto vars:     Size  Location     Type
  5298 ;;		None
  5299 ;; Return value:  Size  Location     Type
  5300 ;;                  1    wreg      void 
  5301 ;; Registers used:
  5302 ;;		status,2
  5303 ;; Tracked objects:
  5304 ;;		On entry : 0/0
  5305 ;;		On exit  : 0/0
  5306 ;;		Unchanged: 0/0
  5307 ;; Data sizes:     COMMON   BANK0   BANK1
  5308 ;;      Params:         0       0       0
  5309 ;;      Locals:         0       0       0
  5310 ;;      Temps:          0       0       0
  5311 ;;      Totals:         0       0       0
  5312 ;;Total ram usage:        0 bytes
  5313 ;; Hardware stack levels used:    1
  5314 ;; Hardware stack levels required when called:    2
  5315 ;; This function calls:
  5316 ;;		Nothing
  5317 ;; This function is called by:
  5318 ;;		_lputs_ISR
  5319 ;; This function uses a non-reentrant model
  5320 ;;
  5321                           
  5322                           
  5323                           ;psect for function _close_RX_USART
  5324  07C5                     _close_RX_USART:	
  5325                           
  5326                           ;USART1823.c: 39: RCIE = 0;
  5327                           
  5328                           ;incstack = 0
  5329                           ; Regs used in _close_RX_USART: [status,2]
  5330  07C5  0021               	movlb	1	; select bank1
  5331  07C6  1291               	bcf	17,5	;volatile
  5332                           
  5333                           ;USART1823.c: 40: CREN = 0;
  5334  07C7  0023               	movlb	3	; select bank3
  5335  07C8  121D               	bcf	29,4	;volatile
  5336                           
  5337                           ;USART1823.c: 41: USART_rx_index = 0;
  5338  07C9  0020               	movlb	0	; select bank0
  5339  07CA  01E4               	clrf	_USART_rx_index	;volatile
  5340  07CB  0008               	return
  5341  07CC                     __end_of_close_RX_USART:	
  5342                           
  5343                           	psect	text25
  5344  0419                     __ptext25:	
  5345 ;; *************** function _config *****************
  5346 ;; Defined at:
  5347 ;;		line 189 in file "bio3.c"
  5348 ;; Parameters:    Size  Location     Type
  5349 ;;  conf            6    0[BANK0 ] struct .
  5350 ;; Auto vars:     Size  Location     Type
  5351 ;;  out             1    8[BANK0 ] unsigned char 
  5352 ;;  i               1    7[BANK0 ] unsigned char 
  5353 ;;  j               1    0        unsigned char 
  5354 ;; Return value:  Size  Location     Type
  5355 ;;                  1    wreg      void 
  5356 ;; Registers used:
  5357 ;;		wreg, status,2, status,0
  5358 ;; Tracked objects:
  5359 ;;		On entry : 0/0
  5360 ;;		On exit  : 0/0
  5361 ;;		Unchanged: 0/0
  5362 ;; Data sizes:     COMMON   BANK0   BANK1
  5363 ;;      Params:         0       6       0
  5364 ;;      Locals:         0       2       0
  5365 ;;      Temps:          0       1       0
  5366 ;;      Totals:         0       9       0
  5367 ;;Total ram usage:        9 bytes
  5368 ;; Hardware stack levels used:    1
  5369 ;; Hardware stack levels required when called:    2
  5370 ;; This function calls:
  5371 ;;		Nothing
  5372 ;; This function is called by:
  5373 ;;		_config_ASIC
  5374 ;;		_measure_Impedance
  5375 ;;		_measure_Impedance_no_offset
  5376 ;;		_measure_Offset
  5377 ;;		_measure_Impedance_SE
  5378 ;;		_measure
  5379 ;; This function uses a non-reentrant model
  5380 ;;
  5381                           
  5382                           
  5383                           ;psect for function _config
  5384  0419                     _config:	
  5385                           
  5386                           ;bio3.c: 192: unsigned char i,j,out;
  5387                           ;bio3.c: 194: out &= 0b11110111; PORTC = out;;
  5388                           
  5389                           ;incstack = 0
  5390                           ; Regs used in _config: [wreg+status,2+status,0]
  5391  0419  30F7               	movlw	247
  5392  041A  0020               	movlb	0	; select bank0
  5393  041B  00A6               	movwf	??_config
  5394  041C  0826               	movf	??_config,w
  5395  041D  05A8               	andwf	config@out,f
  5396  041E  0828               	movf	config@out,w
  5397  041F  008E               	movwf	14	;volatile
  5398                           
  5399                           ;bio3.c: 195: ;;
  5400                           ;bio3.c: 197: RA5 = 0;;
  5401  0420  128C               	bcf	12,5	;volatile
  5402                           
  5403                           ;bio3.c: 198: ;;
  5404                           ;bio3.c: 200: RA5 = 1;;
  5405  0421  168C               	bsf	12,5	;volatile
  5406                           
  5407                           ;bio3.c: 202: for(i = 0; i < 16; i++) {
  5408  0422  01A7               	clrf	config@i
  5409  0423  3010               	movlw	16
  5410  0424  0227               	subwf	config@i,w
  5411  0425  1803               	btfsc	3,0
  5412  0426  2C47               	goto	l2537
  5413  0427                     l150:	
  5414                           
  5415                           ;bio3.c: 203: if (conf.datas[0] & 0x0001) {
  5416  0427  1C20               	btfss	config@conf,0
  5417  0428  2C2B               	goto	l2523
  5418                           
  5419                           ;bio3.c: 204: out |= 0b00000100; PORTC = out;;
  5420  0429  1528               	bsf	config@out,2
  5421  042A  2C2F               	goto	l2525
  5422  042B                     l2523:	
  5423                           ;bio3.c: 205: } else {
  5424                           
  5425                           
  5426                           ;bio3.c: 206: out &= 0b11111011; PORTC = out;;
  5427  042B  30FB               	movlw	251
  5428  042C  00A6               	movwf	??_config
  5429  042D  0826               	movf	??_config,w
  5430  042E  05A8               	andwf	config@out,f
  5431  042F                     l2525:	
  5432  042F  0828               	movf	config@out,w
  5433  0430  008E               	movwf	14	;volatile
  5434                           
  5435                           ;bio3.c: 207: }
  5436                           ;bio3.c: 208: conf.datas[0] >>= 1;
  5437  0431  3001               	movlw	1
  5438  0432                     u1355:	
  5439  0432  36A1               	lsrf	config@conf+1,f
  5440  0433  0CA0               	rrf	config@conf,f
  5441  0434  0B89               	decfsz	9,f
  5442  0435  2C32               	goto	u1355
  5443                           
  5444                           ;bio3.c: 210: ;;
  5445                           ;bio3.c: 212: out |= 0b00001000; PORTC = out;;
  5446  0436  15A8               	bsf	config@out,3
  5447  0437  0828               	movf	config@out,w
  5448  0438  008E               	movwf	14	;volatile
  5449                           
  5450                           ;bio3.c: 213: ;;
  5451                           ;bio3.c: 214: out &= 0b11110111; PORTC = out;;
  5452  0439  30F7               	movlw	247
  5453  043A  00A6               	movwf	??_config
  5454  043B  0826               	movf	??_config,w
  5455  043C  05A8               	andwf	config@out,f
  5456  043D  0828               	movf	config@out,w
  5457  043E  008E               	movwf	14	;volatile
  5458  043F  3001               	movlw	1
  5459  0440  00A6               	movwf	??_config
  5460  0441  0826               	movf	??_config,w
  5461  0442  07A7               	addwf	config@i,f
  5462  0443  3010               	movlw	16
  5463  0444  0227               	subwf	config@i,w
  5464  0445  1C03               	skipc
  5465  0446  2C27               	goto	l150
  5466  0447                     l2537:	
  5467                           
  5468                           ;bio3.c: 215: }
  5469                           ;bio3.c: 217: for(i = 0; i < 16; i++) {
  5470  0447  01A7               	clrf	config@i
  5471  0448  3010               	movlw	16
  5472  0449  0227               	subwf	config@i,w
  5473  044A  1803               	btfsc	3,0
  5474  044B  2C6C               	goto	l2561
  5475  044C                     l154:	
  5476                           
  5477                           ;bio3.c: 218: if (conf.datas[1] & 0x0001) {
  5478  044C  1C22               	btfss	config@conf+2,0
  5479  044D  2C50               	goto	l2547
  5480                           
  5481                           ;bio3.c: 219: out |= 0b00000100; PORTC = out;;
  5482  044E  1528               	bsf	config@out,2
  5483  044F  2C54               	goto	l2549
  5484  0450                     l2547:	
  5485                           ;bio3.c: 220: } else {
  5486                           
  5487                           
  5488                           ;bio3.c: 221: out &= 0b11111011; PORTC = out;;
  5489  0450  30FB               	movlw	251
  5490  0451  00A6               	movwf	??_config
  5491  0452  0826               	movf	??_config,w
  5492  0453  05A8               	andwf	config@out,f
  5493  0454                     l2549:	
  5494  0454  0828               	movf	config@out,w
  5495  0455  008E               	movwf	14	;volatile
  5496                           
  5497                           ;bio3.c: 222: }
  5498                           ;bio3.c: 223: conf.datas[1] >>= 1;
  5499  0456  3001               	movlw	1
  5500  0457                     u1395:	
  5501  0457  36A3               	lsrf	config@conf+3,f
  5502  0458  0CA2               	rrf	config@conf+2,f
  5503  0459  0B89               	decfsz	9,f
  5504  045A  2C57               	goto	u1395
  5505                           
  5506                           ;bio3.c: 225: ;;
  5507                           ;bio3.c: 227: out |= 0b00001000; PORTC = out;;
  5508  045B  15A8               	bsf	config@out,3
  5509  045C  0828               	movf	config@out,w
  5510  045D  008E               	movwf	14	;volatile
  5511                           
  5512                           ;bio3.c: 228: ;;
  5513                           ;bio3.c: 229: out &= 0b11110111; PORTC = out;;
  5514  045E  30F7               	movlw	247
  5515  045F  00A6               	movwf	??_config
  5516  0460  0826               	movf	??_config,w
  5517  0461  05A8               	andwf	config@out,f
  5518  0462  0828               	movf	config@out,w
  5519  0463  008E               	movwf	14	;volatile
  5520  0464  3001               	movlw	1
  5521  0465  00A6               	movwf	??_config
  5522  0466  0826               	movf	??_config,w
  5523  0467  07A7               	addwf	config@i,f
  5524  0468  3010               	movlw	16
  5525  0469  0227               	subwf	config@i,w
  5526  046A  1C03               	skipc
  5527  046B  2C4C               	goto	l154
  5528  046C                     l2561:	
  5529                           
  5530                           ;bio3.c: 230: }
  5531                           ;bio3.c: 232: for(i = 0; i < 1; i++) {
  5532  046C  01A7               	clrf	config@i
  5533  046D                     L3:	
  5534  046D  0827               	movf	config@i,w
  5535  046E  1D03               	btfss	3,2
  5536  046F  0008               	return
  5537                           
  5538                           ;bio3.c: 233: if (conf.datas[2] & 0x0001) {
  5539  0470  1C24               	btfss	config@conf+4,0
  5540  0471  2C74               	goto	l2571
  5541                           
  5542                           ;bio3.c: 234: out |= 0b00000100; PORTC = out;;
  5543  0472  1528               	bsf	config@out,2
  5544  0473  2C78               	goto	l2573
  5545  0474                     l2571:	
  5546                           ;bio3.c: 235: } else {
  5547                           
  5548                           
  5549                           ;bio3.c: 236: out &= 0b11111011; PORTC = out;;
  5550  0474  30FB               	movlw	251
  5551  0475  00A6               	movwf	??_config
  5552  0476  0826               	movf	??_config,w
  5553  0477  05A8               	andwf	config@out,f
  5554  0478                     l2573:	
  5555  0478  0828               	movf	config@out,w
  5556  0479  008E               	movwf	14	;volatile
  5557                           
  5558                           ;bio3.c: 237: }
  5559                           ;bio3.c: 238: conf.datas[2] >>= 1;
  5560  047A  3001               	movlw	1
  5561  047B                     u1435:	
  5562  047B  36A5               	lsrf	config@conf+5,f
  5563  047C  0CA4               	rrf	config@conf+4,f
  5564  047D  0B89               	decfsz	9,f
  5565  047E  2C7B               	goto	u1435
  5566                           
  5567                           ;bio3.c: 240: ;;
  5568                           ;bio3.c: 242: out |= 0b00001000; PORTC = out;;
  5569  047F  15A8               	bsf	config@out,3
  5570  0480  0828               	movf	config@out,w
  5571  0481  008E               	movwf	14	;volatile
  5572                           
  5573                           ;bio3.c: 243: ;;
  5574                           ;bio3.c: 244: out &= 0b11110111; PORTC = out;;
  5575  0482  30F7               	movlw	247
  5576  0483  00A6               	movwf	??_config
  5577  0484  0826               	movf	??_config,w
  5578  0485  05A8               	andwf	config@out,f
  5579  0486  0828               	movf	config@out,w
  5580  0487  008E               	movwf	14	;volatile
  5581  0488  3001               	movlw	1
  5582  0489  00A6               	movwf	??_config
  5583  048A  0826               	movf	??_config,w
  5584  048B  07A7               	addwf	config@i,f
  5585  048C  2C6D               	goto	L3
  5586  048D                     __end_of_config:	
  5587                           
  5588                           	psect	text26
  5589  07E2                     __ptext26:	
  5590 ;; *************** function _SYSTEM_Initialize *****************
  5591 ;; Defined at:
  5592 ;;		line 70 in file "mcc_generated_files/mcc.c"
  5593 ;; Parameters:    Size  Location     Type
  5594 ;;		None
  5595 ;; Auto vars:     Size  Location     Type
  5596 ;;		None
  5597 ;; Return value:  Size  Location     Type
  5598 ;;                  1    wreg      void 
  5599 ;; Registers used:
  5600 ;;		wreg, status,2, status,0, pclath, cstack
  5601 ;; Tracked objects:
  5602 ;;		On entry : 0/0
  5603 ;;		On exit  : 0/0
  5604 ;;		Unchanged: 0/0
  5605 ;; Data sizes:     COMMON   BANK0   BANK1
  5606 ;;      Params:         0       0       0
  5607 ;;      Locals:         0       0       0
  5608 ;;      Temps:          0       0       0
  5609 ;;      Totals:         0       0       0
  5610 ;;Total ram usage:        0 bytes
  5611 ;; Hardware stack levels used:    1
  5612 ;; Hardware stack levels required when called:    3
  5613 ;; This function calls:
  5614 ;;		_OSCILLATOR_Initialize
  5615 ;;		_PIN_MANAGER_Initialize
  5616 ;; This function is called by:
  5617 ;;		_main
  5618 ;; This function uses a non-reentrant model
  5619 ;;
  5620                           
  5621                           
  5622                           ;psect for function _SYSTEM_Initialize
  5623  07E2                     _SYSTEM_Initialize:	
  5624                           
  5625                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  5626                           
  5627                           ;incstack = 0
  5628                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5629  07E2  2764               	fcall	_PIN_MANAGER_Initialize
  5630                           
  5631                           ;mcc.c: 74: OSCILLATOR_Initialize();
  5632  07E3  27D8               	fcall	_OSCILLATOR_Initialize
  5633  07E4  0008               	return
  5634  07E5                     __end_of_SYSTEM_Initialize:	
  5635                           
  5636                           	psect	text27
  5637  0764                     __ptext27:	
  5638 ;; *************** function _PIN_MANAGER_Initialize *****************
  5639 ;; Defined at:
  5640 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  5641 ;; Parameters:    Size  Location     Type
  5642 ;;		None
  5643 ;; Auto vars:     Size  Location     Type
  5644 ;;		None
  5645 ;; Return value:  Size  Location     Type
  5646 ;;                  1    wreg      void 
  5647 ;; Registers used:
  5648 ;;		wreg, status,2
  5649 ;; Tracked objects:
  5650 ;;		On entry : 0/0
  5651 ;;		On exit  : 0/0
  5652 ;;		Unchanged: 0/0
  5653 ;; Data sizes:     COMMON   BANK0   BANK1
  5654 ;;      Params:         0       0       0
  5655 ;;      Locals:         0       0       0
  5656 ;;      Temps:          0       0       0
  5657 ;;      Totals:         0       0       0
  5658 ;;Total ram usage:        0 bytes
  5659 ;; Hardware stack levels used:    1
  5660 ;; Hardware stack levels required when called:    2
  5661 ;; This function calls:
  5662 ;;		Nothing
  5663 ;; This function is called by:
  5664 ;;		_SYSTEM_Initialize
  5665 ;; This function uses a non-reentrant model
  5666 ;;
  5667                           
  5668                           
  5669                           ;psect for function _PIN_MANAGER_Initialize
  5670  0764                     _PIN_MANAGER_Initialize:	
  5671                           
  5672                           ;pin_manager.c: 51: LATA = 0x0;
  5673                           
  5674                           ;incstack = 0
  5675                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  5676  0764  0022               	movlb	2	; select bank2
  5677  0765  018C               	clrf	12	;volatile
  5678                           
  5679                           ;pin_manager.c: 52: LATC = 0x0;
  5680  0766  018E               	clrf	14	;volatile
  5681                           
  5682                           ;pin_manager.c: 55: ANSELA = 0b00000100;
  5683  0767  3004               	movlw	4
  5684  0768  0023               	movlb	3	; select bank3
  5685  0769  008C               	movwf	12	;volatile
  5686                           
  5687                           ;pin_manager.c: 56: ANSELC = 0b00000011;
  5688  076A  3003               	movlw	3
  5689  076B  008E               	movwf	14	;volatile
  5690                           
  5691                           ;pin_manager.c: 59: WPUA = 0x3B;
  5692  076C  303B               	movlw	59
  5693  076D  0024               	movlb	4	; select bank4
  5694  076E  008C               	movwf	12	;volatile
  5695                           
  5696                           ;pin_manager.c: 61: WPUC = 0x1C;
  5697  076F  301C               	movlw	28
  5698  0770  008E               	movwf	14	;volatile
  5699                           
  5700                           ;pin_manager.c: 63: RXDTSEL = 0;
  5701  0771  0022               	movlb	2	; select bank2
  5702  0772  139D               	bcf	29,7	;volatile
  5703                           
  5704                           ;pin_manager.c: 64: TXCKSEL = 0;
  5705  0773  111D               	bcf	29,2	;volatile
  5706                           
  5707                           ;pin_manager.c: 67: TRISC = 0b01100011;
  5708  0774  3063               	movlw	99
  5709  0775  0021               	movlb	1	; select bank1
  5710  0776  008E               	movwf	14	;volatile
  5711                           
  5712                           ;pin_manager.c: 68: TRISA = 0b01011111;
  5713  0777  305F               	movlw	95
  5714  0778  008C               	movwf	12	;volatile
  5715                           
  5716                           ;pin_manager.c: 70: OPTION_REGbits.nWPUEN = 0x0;
  5717  0779  1395               	bcf	21,7	;volatile
  5718                           
  5719                           ;pin_manager.c: 71: APFCON = 0x00;
  5720  077A  0022               	movlb	2	; select bank2
  5721  077B  019D               	clrf	29	;volatile
  5722  077C  0008               	return
  5723  077D                     __end_of_PIN_MANAGER_Initialize:	
  5724                           
  5725                           	psect	text28
  5726  07D8                     __ptext28:	
  5727 ;; *************** function _OSCILLATOR_Initialize *****************
  5728 ;; Defined at:
  5729 ;;		line 78 in file "mcc_generated_files/mcc.c"
  5730 ;; Parameters:    Size  Location     Type
  5731 ;;		None
  5732 ;; Auto vars:     Size  Location     Type
  5733 ;;		None
  5734 ;; Return value:  Size  Location     Type
  5735 ;;                  1    wreg      void 
  5736 ;; Registers used:
  5737 ;;		wreg, status,2
  5738 ;; Tracked objects:
  5739 ;;		On entry : 0/0
  5740 ;;		On exit  : 0/0
  5741 ;;		Unchanged: 0/0
  5742 ;; Data sizes:     COMMON   BANK0   BANK1
  5743 ;;      Params:         0       0       0
  5744 ;;      Locals:         0       0       0
  5745 ;;      Temps:          0       0       0
  5746 ;;      Totals:         0       0       0
  5747 ;;Total ram usage:        0 bytes
  5748 ;; Hardware stack levels used:    1
  5749 ;; Hardware stack levels required when called:    2
  5750 ;; This function calls:
  5751 ;;		Nothing
  5752 ;; This function is called by:
  5753 ;;		_SYSTEM_Initialize
  5754 ;; This function uses a non-reentrant model
  5755 ;;
  5756                           
  5757                           
  5758                           ;psect for function _OSCILLATOR_Initialize
  5759  07D8                     _OSCILLATOR_Initialize:	
  5760                           
  5761                           ;mcc.c: 81: OSCCON = 0x3A;
  5762                           
  5763                           ;incstack = 0
  5764                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  5765  07D8  303A               	movlw	58
  5766  07D9  0021               	movlb	1	; select bank1
  5767  07DA  0099               	movwf	25	;volatile
  5768                           
  5769                           ;mcc.c: 83: OSCSTAT = 0x00;
  5770  07DB  019A               	clrf	26	;volatile
  5771                           
  5772                           ;mcc.c: 85: OSCTUNE = 0x00;
  5773  07DC  0198               	clrf	24	;volatile
  5774  07DD  0008               	return
  5775  07DE                     __end_of_OSCILLATOR_Initialize:	
  5776                           
  5777                           	psect	intentry
  5778  0004                     __pintentry:	
  5779 ;; *************** function _isr *****************
  5780 ;; Defined at:
  5781 ;;		line 142 in file "main.c"
  5782 ;; Parameters:    Size  Location     Type
  5783 ;;		None
  5784 ;; Auto vars:     Size  Location     Type
  5785 ;;		None
  5786 ;; Return value:  Size  Location     Type
  5787 ;;                  1    wreg      void 
  5788 ;; Registers used:
  5789 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5790 ;; Tracked objects:
  5791 ;;		On entry : 0/0
  5792 ;;		On exit  : 0/0
  5793 ;;		Unchanged: 0/0
  5794 ;; Data sizes:     COMMON   BANK0   BANK1
  5795 ;;      Params:         0       0       0
  5796 ;;      Locals:         0       0       0
  5797 ;;      Temps:          2       0       0
  5798 ;;      Totals:         2       0       0
  5799 ;;Total ram usage:        2 bytes
  5800 ;; Hardware stack levels used:    1
  5801 ;; Hardware stack levels required when called:    1
  5802 ;; This function calls:
  5803 ;;		_start_TMR0_ISR
  5804 ;;		_stop_TMR0_ISR
  5805 ;;		i1_start_RX_USART_ISR
  5806 ;; This function is called by:
  5807 ;;		Interrupt level 1
  5808 ;; This function uses a non-reentrant model
  5809 ;;
  5810                           
  5811  0004                     _isr:	
  5812                           
  5813                           ;incstack = 0
  5814  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  5815                           
  5816                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5817  0005  3180               	pagesel	$
  5818  0006  0020               	movlb	0	; select bank0
  5819  0007  087F               	movf	127,w
  5820  0008  00F9               	movwf	??_isr+1
  5821                           
  5822                           ;main.c: 146: if (TMR0IF && TMR0IE) {
  5823  0009  190B               	btfsc	11,2	;volatile
  5824  000A  1E8B               	btfss	11,5	;volatile
  5825  000B  2815               	goto	i1l131
  5826                           
  5827                           ;main.c: 148: TMR0IF = 0;
  5828  000C  110B               	bcf	11,2	;volatile
  5829                           
  5830                           ;main.c: 149: TMR0 = TIMER0_timeout;
  5831  000D  0870               	movf	_TIMER0_timeout,w	;volatile
  5832  000E  0095               	movwf	21	;volatile
  5833                           
  5834                           ;main.c: 152: TIMER0_flag = 1;
  5835  000F  3001               	movlw	1
  5836  0010  00F8               	movwf	??_isr
  5837  0011  0878               	movf	??_isr,w
  5838  0012  00E2               	movwf	_TIMER0_flag	;volatile
  5839                           
  5840                           ;main.c: 157: stop_TMR0_ISR();
  5841  0013  27E5               	fcall	_stop_TMR0_ISR
  5842                           
  5843                           ;main.c: 159: return;
  5844  0014  2851               	goto	i1l132
  5845  0015                     i1l131:	
  5846                           
  5847                           ;main.c: 160: }
  5848                           ;main.c: 164: if (RCIF) {
  5849  0015  1E91               	btfss	17,5	;volatile
  5850  0016  2836               	goto	i1l133
  5851                           
  5852                           ;main.c: 165: stop_TMR0_ISR();
  5853  0017  27E5               	fcall	_stop_TMR0_ISR
  5854                           
  5855                           ;main.c: 168: if (OERR) {
  5856  0018  0023               	movlb	3	; select bank3
  5857  0019  1C9D               	btfss	29,1	;volatile
  5858  001A  2820               	goto	i1l2461
  5859                           
  5860                           ;main.c: 170: CREN = 0;
  5861  001B  121D               	bcf	29,4	;volatile
  5862                           
  5863                           ;main.c: 171: CREN = 1;
  5864  001C  161D               	bsf	29,4	;volatile
  5865                           
  5866                           ;main.c: 172: USART_rx_index = 0;
  5867  001D  0020               	movlb	0	; select bank0
  5868  001E  01E4               	clrf	_USART_rx_index	;volatile
  5869                           
  5870                           ;main.c: 173: return;
  5871  001F  2851               	goto	i1l132
  5872  0020                     i1l2461:	
  5873                           
  5874                           ;main.c: 174: }
  5875                           ;main.c: 177: if (USART_rx_index >= 10) {
  5876  0020  300A               	movlw	10
  5877  0021  0020               	movlb	0	; select bank0
  5878  0022  0264               	subwf	_USART_rx_index,w	;volatile
  5879  0023  1803               	btfsc	3,0
  5880                           
  5881                           ;main.c: 178: USART_rx_index = 0;
  5882  0024  01E4               	clrf	_USART_rx_index	;volatile
  5883                           
  5884                           ;main.c: 179: }
  5885                           ;main.c: 181: USART_rx_data[USART_rx_index++] = RCREG;
  5886  0025  0023               	movlb	3	; select bank3
  5887  0026  0819               	movf	25,w	;volatile
  5888  0027  00F8               	movwf	??_isr
  5889  0028  0020               	movlb	0	; select bank0
  5890  0029  0864               	movf	_USART_rx_index,w
  5891  002A  3E58               	addlw	(low (_USART_rx_data| 0))& (0+255)
  5892  002B  0086               	movwf	6
  5893  002C  0187               	clrf	7
  5894  002D  0878               	movf	??_isr,w
  5895  002E  0081               	movwf	1
  5896  002F  3001               	movlw	1
  5897  0030  00F8               	movwf	??_isr
  5898  0031  0878               	movf	??_isr,w
  5899  0032  07E4               	addwf	_USART_rx_index,f	;volatile
  5900                           
  5901                           ;main.c: 183: start_TMR0_ISR(98);
  5902  0033  3062               	movlw	98
  5903  0034  279F               	fcall	_start_TMR0_ISR
  5904                           
  5905                           ;main.c: 185: return;
  5906  0035  2851               	goto	i1l132
  5907  0036                     i1l133:	
  5908                           
  5909                           ;main.c: 186: }
  5910                           ;main.c: 190: if (TXIF && TXIE) {
  5911  0036  1E11               	btfss	17,4	;volatile
  5912  0037  2851               	goto	i1l132
  5913  0038  0021               	movlb	1	; select bank1
  5914  0039  1E11               	btfss	17,4	;volatile
  5915  003A  2851               	goto	i1l132
  5916                           
  5917                           ;main.c: 192: TXREG = USART_tx_data[USART_tx_index++];
  5918  003B  0873               	movf	_USART_tx_index,w
  5919  003C  3EA0               	addlw	(low (_USART_tx_data| 0))& (0+255)
  5920  003D  0086               	movwf	6
  5921  003E  0187               	clrf	7
  5922  003F  0801               	movf	1,w
  5923  0040  0023               	movlb	3	; select bank3
  5924  0041  009A               	movwf	26	;volatile
  5925  0042  3001               	movlw	1
  5926  0043  00F8               	movwf	??_isr
  5927  0044  0878               	movf	??_isr,w
  5928  0045  07F3               	addwf	_USART_tx_index,f	;volatile
  5929                           
  5930                           ;main.c: 194: if (USART_tx_index >= USART_tx_length) {
  5931  0046  0874               	movf	_USART_tx_length,w	;volatile
  5932  0047  0273               	subwf	_USART_tx_index,w	;volatile
  5933  0048  1C03               	skipc
  5934  0049  2851               	goto	i1l132
  5935                           
  5936                           ;main.c: 195: TXIE = 0;
  5937  004A  0021               	movlb	1	; select bank1
  5938  004B  1211               	bcf	17,4	;volatile
  5939                           
  5940                           ;main.c: 196: USART_tx_flag = 0;
  5941  004C  01F2               	clrf	_USART_tx_flag	;volatile
  5942                           
  5943                           ;main.c: 200: _delay((unsigned long)((3)*(500000/4000.0)));
  5944  004D  307D               	movlw	125
  5945  004E                     u202_27:	
  5946  004E  0B89               	decfsz	9,f
  5947  004F  284E               	goto	u202_27
  5948                           
  5949                           ;main.c: 202: start_RX_USART_ISR();
  5950  0050  278E               	fcall	i1_start_RX_USART_ISR
  5951  0051                     i1l132:	
  5952                           ;main.c: 203: }
  5953                           ;main.c: 204: return;
  5954                           
  5955  0051  0879               	movf	??_isr+1,w
  5956  0052  0020               	movlb	0	; select bank0
  5957  0053  00FF               	movwf	127
  5958  0054  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  5959  0055  0009               	retfie
  5960  0056                     __end_of_isr:	
  5961                           
  5962                           	psect	text30
  5963  078E                     __ptext30:	
  5964 ;; *************** function i1_start_RX_USART_ISR *****************
  5965 ;; Defined at:
  5966 ;;		line 83 in file "USART1823.c"
  5967 ;; Parameters:    Size  Location     Type
  5968 ;;		None
  5969 ;; Auto vars:     Size  Location     Type
  5970 ;;		None
  5971 ;; Return value:  Size  Location     Type
  5972 ;;                  1    wreg      void 
  5973 ;; Registers used:
  5974 ;;		wreg, status,2
  5975 ;; Tracked objects:
  5976 ;;		On entry : 0/0
  5977 ;;		On exit  : 0/0
  5978 ;;		Unchanged: 0/0
  5979 ;; Data sizes:     COMMON   BANK0   BANK1
  5980 ;;      Params:         0       0       0
  5981 ;;      Locals:         0       0       0
  5982 ;;      Temps:          0       0       0
  5983 ;;      Totals:         0       0       0
  5984 ;;Total ram usage:        0 bytes
  5985 ;; Hardware stack levels used:    1
  5986 ;; This function calls:
  5987 ;;		Nothing
  5988 ;; This function is called by:
  5989 ;;		_isr
  5990 ;; This function uses a non-reentrant model
  5991 ;;
  5992                           
  5993                           
  5994                           ;psect for function i1_start_RX_USART_ISR
  5995  078E                     i1_start_RX_USART_ISR:	
  5996                           
  5997                           ;USART1823.c: 86: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  5998                           
  5999                           ;incstack = 0
  6000                           ; Regs used in i1_start_RX_USART_ISR: [wreg+status,2]
  6001  078E  0023               	movlb	3	; select bank3
  6002  078F  151E               	bsf	30,2	;volatile
  6003  0790  159F               	bsf	31,3	;volatile
  6004  0791  019C               	clrf	28	;volatile
  6005  0792  300C               	movlw	12
  6006  0793  009B               	movwf	27	;volatile
  6007                           
  6008                           ;USART1823.c: 88: SYNC = 0;
  6009  0794  121E               	bcf	30,4	;volatile
  6010                           
  6011                           ;USART1823.c: 89: SPEN = 1;
  6012  0795  179D               	bsf	29,7	;volatile
  6013                           
  6014                           ;USART1823.c: 90: CREN = 1;
  6015  0796  161D               	bsf	29,4	;volatile
  6016                           
  6017                           ;USART1823.c: 92: USART_rx_flag = 0;
  6018  0797  0020               	movlb	0	; select bank0
  6019  0798  01E3               	clrf	_USART_rx_flag	;volatile
  6020                           
  6021                           ;USART1823.c: 93: USART_rx_index = 0;
  6022  0799  01E4               	clrf	_USART_rx_index	;volatile
  6023                           
  6024                           ;USART1823.c: 95: RCIE = 1;
  6025  079A  0021               	movlb	1	; select bank1
  6026  079B  1691               	bsf	17,5	;volatile
  6027                           
  6028                           ;USART1823.c: 96: PEIE = 1;
  6029  079C  170B               	bsf	11,6	;volatile
  6030                           
  6031                           ;USART1823.c: 97: GIE = 1;
  6032  079D  178B               	bsf	11,7	;volatile
  6033  079E  0008               	return
  6034  079F                     __end_ofi1_start_RX_USART_ISR:	
  6035                           
  6036                           	psect	text31
  6037  07E5                     __ptext31:	
  6038 ;; *************** function _stop_TMR0_ISR *****************
  6039 ;; Defined at:
  6040 ;;		line 44 in file "TMR0.c"
  6041 ;; Parameters:    Size  Location     Type
  6042 ;;		None
  6043 ;; Auto vars:     Size  Location     Type
  6044 ;;		None
  6045 ;; Return value:  Size  Location     Type
  6046 ;;                  1    wreg      void 
  6047 ;; Registers used:
  6048 ;;		None
  6049 ;; Tracked objects:
  6050 ;;		On entry : 0/0
  6051 ;;		On exit  : 0/0
  6052 ;;		Unchanged: 0/0
  6053 ;; Data sizes:     COMMON   BANK0   BANK1
  6054 ;;      Params:         0       0       0
  6055 ;;      Locals:         0       0       0
  6056 ;;      Temps:          0       0       0
  6057 ;;      Totals:         0       0       0
  6058 ;;Total ram usage:        0 bytes
  6059 ;; Hardware stack levels used:    1
  6060 ;; This function calls:
  6061 ;;		Nothing
  6062 ;; This function is called by:
  6063 ;;		_isr
  6064 ;; This function uses a non-reentrant model
  6065 ;;
  6066                           
  6067                           
  6068                           ;psect for function _stop_TMR0_ISR
  6069  07E5                     _stop_TMR0_ISR:	
  6070                           
  6071                           ;TMR0.c: 47: TMR0IE = 0;
  6072                           
  6073                           ;incstack = 0
  6074                           ; Regs used in _stop_TMR0_ISR: []
  6075  07E5  128B               	bcf	11,5	;volatile
  6076                           
  6077                           ;TMR0.c: 48: TMR0IF = 0;
  6078  07E6  110B               	bcf	11,2	;volatile
  6079  07E7  0008               	return
  6080  07E8                     __end_of_stop_TMR0_ISR:	
  6081                           
  6082                           	psect	text32
  6083  079F                     __ptext32:	
  6084 ;; *************** function _start_TMR0_ISR *****************
  6085 ;; Defined at:
  6086 ;;		line 30 in file "TMR0.c"
  6087 ;; Parameters:    Size  Location     Type
  6088 ;;  val             1    wreg     unsigned char 
  6089 ;; Auto vars:     Size  Location     Type
  6090 ;;  val             1    2[COMMON] unsigned char 
  6091 ;; Return value:  Size  Location     Type
  6092 ;;                  1    wreg      void 
  6093 ;; Registers used:
  6094 ;;		wreg, status,2
  6095 ;; Tracked objects:
  6096 ;;		On entry : 0/0
  6097 ;;		On exit  : 0/0
  6098 ;;		Unchanged: 0/0
  6099 ;; Data sizes:     COMMON   BANK0   BANK1
  6100 ;;      Params:         0       0       0
  6101 ;;      Locals:         1       0       0
  6102 ;;      Temps:          2       0       0
  6103 ;;      Totals:         3       0       0
  6104 ;;Total ram usage:        3 bytes
  6105 ;; Hardware stack levels used:    1
  6106 ;; This function calls:
  6107 ;;		Nothing
  6108 ;; This function is called by:
  6109 ;;		_isr
  6110 ;; This function uses a non-reentrant model
  6111 ;;
  6112                           
  6113                           
  6114                           ;psect for function _start_TMR0_ISR
  6115  079F                     _start_TMR0_ISR:	
  6116                           
  6117                           ;incstack = 0
  6118                           ; Regs used in _start_TMR0_ISR: [wreg+status,2]
  6119                           ;start_TMR0_ISR@val stored from wreg
  6120  079F  00F7               	movwf	start_TMR0_ISR@val
  6121                           
  6122                           ;TMR0.c: 32: TIMER0_timeout = val;
  6123  07A0  0877               	movf	start_TMR0_ISR@val,w
  6124  07A1  00F5               	movwf	??_start_TMR0_ISR
  6125  07A2  01F6               	clrf	??_start_TMR0_ISR+1
  6126  07A3  0875               	movf	??_start_TMR0_ISR,w
  6127  07A4  00F0               	movwf	_TIMER0_timeout	;volatile
  6128  07A5  0876               	movf	??_start_TMR0_ISR+1,w
  6129  07A6  00F1               	movwf	_TIMER0_timeout+1	;volatile
  6130                           
  6131                           ;TMR0.c: 33: TIMER0_flag = 0;
  6132  07A7  0020               	movlb	0	; select bank0
  6133  07A8  01E2               	clrf	_TIMER0_flag	;volatile
  6134                           
  6135                           ;TMR0.c: 36: TMR0 = TIMER0_timeout;
  6136  07A9  0870               	movf	_TIMER0_timeout,w	;volatile
  6137  07AA  0095               	movwf	21	;volatile
  6138                           
  6139                           ;TMR0.c: 39: TMR0IF = 0;
  6140  07AB  110B               	bcf	11,2	;volatile
  6141                           
  6142                           ;TMR0.c: 40: TMR0IE = 1;
  6143  07AC  168B               	bsf	11,5	;volatile
  6144                           
  6145                           ;TMR0.c: 41: GIE = 1;
  6146  07AD  178B               	bsf	11,7	;volatile
  6147  07AE  0008               	return
  6148  07AF                     __end_of_start_TMR0_ISR:	
  6149  007E                     btemp	set	126	;btemp
  6150  007E                     int$flags	set	126
  6151  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    52
    Data        0
    BSS         44
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     56      80
    BANK1            32      1      16

Pointer List with Targets:

    measure@Q	PTR short  size(1) Largest target is 2
		 -> sweep@Q(BANK0[2]), 

    measure@I	PTR short  size(1) Largest target is 2
		 -> sweep@I(BANK0[2]), 

    calculate_checksum@data	PTR unsigned char  size(1) Largest target is 7
		 -> sweep@aux(BANK0[7]), 

    lputs_ISR@data	PTR unsigned char  size(1) Largest target is 13
		 -> sweep@aux(BANK0[7]), calibrate_reader@aux(COMMON[8]), measure_Impedance_SE@aux(BANK0[8]), measure_Offset@aux(BANK0[5]), 
		 -> measure_Impedance_no_offset@aux(BANK0[13]), measure_Impedance@aux(BANK0[13]), read_ADC_channels@aux(BANK0[7]), mess_rec(BANK0[10]), 

    setFilt@asic	PTR struct . size(1) Largest target is 6
		 -> sweep@asic(BANK0[6]), 

    setFreq@asic	PTR struct . size(1) Largest target is 6
		 -> sweep@asic(BANK0[6]), 

    setGain@asic	PTR struct . size(1) Largest target is 6
		 -> sweep@asic(BANK0[6]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_start_TMR0_ISR

Critical Paths under _main in BANK0

    _main->_mess_handler
    _mess_handler->_sweep
    _sweep->_measure
    _setFilt->___wmul
    _measure->_config
    _read_ADC_channels->_ADC_2
    _read_ADC_channels->_ADC_4
    _read_ADC_channels->_ADC_5
    _measure_Offset->_config
    _measure_Impedance_no_offset->_config
    _measure_Impedance_SE->_config
    _measure_Impedance->_config
    _config_ASIC->_config

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   31698
                                             55 BANK0      1     1      0
                                              0 BANK1      1     1      0
                  _SYSTEM_Initialize
                       _mess_handler
                          _setup_ADC
                         _setup_TMR0
                          _start_RCM
                 _start_RX_USART_ISR
                 _start_TX_USART_ISR
 ---------------------------------------------------------------------------------
 (1) _start_TX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RCM                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_TMR0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_ADC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _mess_handler                                         1     1      0   31599
                                             54 BANK0      1     1      0
                        _config_ASIC
                          _lputs_ISR
                  _measure_Impedance
               _measure_Impedance_SE
        _measure_Impedance_no_offset
                     _measure_Offset
                  _read_ADC_channels
                              _sweep
 ---------------------------------------------------------------------------------
 (2) _sweep                                               25    25      0    7983
                                             29 BANK0     25    25      0
                 _calculate_checksum
                          _lputs_ISR
                            _measure
                            _setFilt
                            _setFreq
                            _setGain
 ---------------------------------------------------------------------------------
 (3) _setGain                                              4     3      1     846
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) _setFreq                                              4     3      1     408
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) _setFilt                                              7     6      1     668
                                              6 BANK0      7     6      1
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     316
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _measure                                             20    13      7    2966
                                              9 BANK0     20    13      7
                              _ADC_5
                             _config
 ---------------------------------------------------------------------------------
 (3) _calculate_checksum                                   6     5      1     293
                                              0 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (2) _read_ADC_channels                                   14    14      0    1900
                                              6 BANK0     14    14      0
                              _ADC_2
                              _ADC_4
                              _ADC_5
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (2) _measure_Offset                                      16    16      0    3898
                                              9 BANK0     16    16      0
                              _ADC_2
                              _ADC_4
                             _config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (2) _measure_Impedance_no_offset                         26    26      0    4275
                                              9 BANK0     24    24      0
                              _ADC_2
                              _ADC_4
                             _config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (2) _measure_Impedance_SE                                18    18      0    4130
                                              9 BANK0     17    17      0
                              _ADC_5
                             _config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (4) _ADC_5                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _measure_Impedance                                   26    26      0    4587
                                              9 BANK0     24    24      0
                              _ADC_2
                              _ADC_4
                             _config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (3) _ADC_4                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _ADC_2                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _config_ASIC                                          7     7      0    3500
                                              9 BANK0      7     7      0
                             _config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (3) _lputs_ISR                                            5     4      1    1326
                                              0 BANK0      5     4      1
                     _close_RX_USART
 ---------------------------------------------------------------------------------
 (4) _close_RX_USART                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _config                                              10     4      6    1992
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  2     2      0      22
                                              3 COMMON     2     2      0
                     _start_TMR0_ISR
                      _stop_TMR0_ISR
               i1_start_RX_USART_ISR
 ---------------------------------------------------------------------------------
 (6) i1_start_RX_USART_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _stop_TMR0_ISR                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _start_TMR0_ISR                                       3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _mess_handler
     _config_ASIC
       _config
       _lputs_ISR
         _close_RX_USART
     _lputs_ISR
       _close_RX_USART
     _measure_Impedance
       _ADC_2
       _ADC_4
       _config
       _lputs_ISR
         _close_RX_USART
     _measure_Impedance_SE
       _ADC_5
       _config
       _lputs_ISR
         _close_RX_USART
     _measure_Impedance_no_offset
       _ADC_2
       _ADC_4
       _config
       _lputs_ISR
         _close_RX_USART
     _measure_Offset
       _ADC_2
       _ADC_4
       _config
       _lputs_ISR
         _close_RX_USART
     _read_ADC_channels
       _ADC_2
       _ADC_4
       _ADC_5
       _lputs_ISR
         _close_RX_USART
     _sweep
       _calculate_checksum
       _lputs_ISR
         _close_RX_USART
       _measure
         _ADC_5
         _config
       _setFilt
         ___wmul
       _setFreq
       _setGain
   _setup_ADC
   _setup_TMR0
   _start_RCM
   _start_RX_USART_ISR
   _start_TX_USART_ISR

 _isr (ROOT)
   _start_TMR0_ISR
   _stop_TMR0_ISR
   i1_start_RX_USART_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      6A       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     38      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      1      10       8       50.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      6A       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Apr  7 16:20:56 2017

                         __CFG_CP$OFF 0000                   ___wmul@multiplicand 0022  
                       _USART_rx_data 0058                         _USART_rx_flag 0063  
                       _USART_tx_data 00A0                         _USART_tx_flag 0072  
                                 l150 0427                                   l119 04FA  
                                 l154 044C                                   l403 0244  
                                 l420 012F                                   l442 0712  
                                 l454 06CC                                   l448 06EF  
                                 l368 0640                                   l547 0738  
                                 _GIE 005F                                   _RA5 0065  
                                 _PS0 04A8                                   _PS1 04A9  
                                 _PS2 04AA                          __CFG_CPD$OFF 0000  
                                 _PSA 04AB                                   _isr 0004  
                        __CFG_BORV$HI 0000                                   wreg 0009  
                        __CFG_IESO$ON 0000                        _USART_rx_index 0064  
                        __CFG_LVP$OFF 0000                        _USART_tx_index 0073  
                                l3101 061B                                  l3103 061D  
                                l3105 061F                                  l3113 0625  
                                l3107 0621                                  l3109 0623  
                                l3153 0510                                  l2523 042B  
                                l3155 052B                                  l3139 0506  
                                l2525 042F                                  l3095 060F  
                                l2561 046C                                  l2537 0447  
                                l3097 0617                                  l2571 0474  
                                l2547 0450                                  l2723 00D8  
                                l3099 0619                                  l2573 0478  
                                l2549 0454                                  l2655 0678  
                                l2657 068F                                  l2833 028D  
                                l2755 014B                                  l2739 011E  
                                l2835 0291                                  l2819 0276  
                                l2693 074F                                  l2749 013D  
                                l2695 0762                                  l2599 0732  
                                ?_isr 0075                                  _ADGO 04E9  
                        __CFG_WDTE$ON 0000                                  _BRGH 0CF2  
                                _CREN 0CEC                                  u2007 01BB  
                                u2017 01F5                                  _LATA 010C  
                                _LATC 010E                                  u1435 047B  
                                u1355 0432                                  u1465 06D7  
                                u1395 0457                                  u1715 0128  
                                u1725 0139                                  u1485 0739  
                                u1655 071D                                  u1735 0147  
                                u1495 073E                                  u1825 0295  
                                u1675 06FA                                  u1907 0087  
                                u1917 00AC                                  u1927 00F2  
                                u1937 04C0                                  u1947 03B8  
                                _PEIE 005E                                  u1957 03F2  
                                u1967 0312                                  u1887 04F3  
                                u1977 033F                                  u1897 02D2  
                                u1987 036B                                  _RCIE 048D  
                                _RCIF 008D                                  u1997 0180  
                                _OERR 0CE9                                  _SCKP 0CFC  
                                _TMR0 0015                                  _SPEN 0CEF  
                                _TXIE 048C                                  _TXEN 0CF5  
                                _TXIF 008C                                  _SYNC 0CF4  
                                _WPUA 020C                                  _WPUC 020E  
              __size_of_stop_TMR0_ISR 0003                     _read_ADC_channels 056B  
                        __CFG_WRT$OFF 0000                                  _filt 05DA  
                                _main 04E7                                  fsr0h 0005  
                                fsr1h 0007                                  indf0 0000  
                                fsr0l 0004                                  indf1 0001  
                                fsr1l 0006                                  btemp 007E  
                  ?_read_ADC_channels 0075           __size_of_calculate_checksum 0019  
                                start 0056                         __CFG_MCLRE$ON 0000  
          measure_Impedance_SE@value1 0032                   ??_read_ADC_channels 0026  
                               ??_isr 0078        __size_of_OSCILLATOR_Initialize 0006  
                     _USART_tx_length 0074         __end_of_OSCILLATOR_Initialize 07DE  
                               ?_main 0075                                 _ADC_2 070C  
                               _ADC_4 06E9                                 _ADC_5 06C6  
                               _BRG16 0CFB                                 i1l131 0015  
                               i1l132 0051                                 i1l133 0036  
                               _RCREG 0199                                 _PORTC 000E  
                               _TRISA 008C                        _start_TMR0_ISR 079F  
                               _TRISC 008E                                 _TXREG 019A  
                      __CFG_FCMEN$OFF 0000                                 _gains 0606  
                     __end_of_measure 014D                                 _freqs 05FB  
           __end_of_read_ADC_channels 05A4                       __end_of_setGain 056B  
        ?_measure_Impedance_no_offset 0075                                 _sweep 021C  
                               main@i 00AF                       __end_of_setFilt 05DA  
                     __end_of_setFreq 06C6         __size_ofi1_start_RX_USART_ISR 0011  
                      __CFG_BOREN$OFF 0000                                 status 0003  
                               wtemp0 007E                       __initialization 0057  
                        __end_of_filt 05FB                          __end_of_main 052D  
                       _stop_TMR0_ISR 07E5                      ??_close_RX_USART 0020  
              __end_of_start_TMR0_ISR 07AF                                ??_main 0057  
                              ?_ADC_2 0020                                ?_ADC_4 0020  
                              ?_ADC_5 0020          __end_of_measure_Impedance_SE 0384  
                      _TIMER0_timeout 0070                        __CFG_PLLEN$OFF 0000  
                              _ADCON0 009D                                _ADCON1 009E  
                         measure@aux1 003B                           measure@aux2 0039  
                         measure@asic 002A                                _ADRESH 009C  
                              _ADRESL 009B                                _APFCON 011D  
                              _ANSELA 018C                                _ANSELC 018E  
                              ?_sweep 0075                                i1l2461 0020  
                              u202_27 004E                                _OSCCON 0099  
       ??_measure_Impedance_no_offset 0029                                _TMR0IE 005D  
                              _TMR0IF 005A                                _TMR0CS 04AD  
                              _SPBRGH 019C                                _SPBRGL 019B  
                      __CFG_PWRTE$OFF 0000                  __size_of_config_ASIC 0031  
                     config_ASIC@asic 002A                                ___wmul 072F  
                      __CFG_STVREN$ON 0000                        ?_stop_TMR0_ISR 0075  
                              _config 0419                       ?_start_TMR0_ISR 0075  
                measure_Impedance@aux 002A                             ??_measure 0030  
         __size_of_start_RX_USART_ISR 0011                             ??_setGain 0021  
                           ??_setFilt 0027                             ??_setFreq 0021  
                              sweep@I 004A                                sweep@Q 004C  
                              sweep@i 0047            __size_of_read_ADC_channels 0039  
                       ?_mess_handler 0075               __size_of_measure_Offset 005A  
                   _SYSTEM_Initialize 07E2               __end_of__initialization 0068  
                       __end_of_ADC_2 072F                         __end_of_ADC_4 070C  
                  ?_SYSTEM_Initialize 0075                         __end_of_ADC_5 06E9  
                      __pcstackCOMMON 0075                   ??_SYSTEM_Initialize 0020  
                       __end_of_gains 060E                         __end_of_freqs 0606  
__size_of_measure_Impedance_no_offset 0095                         __end_of_sweep 02DF  
                             ??_ADC_2 0022                               ??_ADC_4 0022  
                             ??_ADC_5 0022                        _OPTION_REGbits 0095  
         __size_of_start_TX_USART_ISR 000F                           setGain@asic 0023  
                      ??_mess_handler 0056             __end_of_SYSTEM_Initialize 07E5  
                             ??_sweep 003D                            __pbssBANK0 0058  
                          __pbssBANK1 00A0                           setFilt@asic 0029  
                _measure_Impedance_SE 02DF                           setFreq@asic 0022  
                          __pmaintext 04E7                       ??_stop_TMR0_ISR 0075  
                read_ADC_channels@aux 0027                               ?___wmul 0020  
                          __pintentry 0004                               ?_config 0020  
                        measure@value 0037                  measure_Offset@value1 002F  
                measure_Offset@value2 0031                               _CLKRCON 039A  
                  __size_of_lputs_ISR 002B                       lputs_ISR@length 0020  
                   setFreq@freq_index 0020                    __size_of_setup_ADC 0006  
                             _OSCSTAT 009A                               _OSCTUNE 0098  
                  __size_of_start_RCM 0004                               _RXDTSEL 08EF  
                             _TXCKSEL 08EA            __end_of_calculate_checksum 0764  
               ?_measure_Impedance_SE 0075          __end_ofi1_start_RX_USART_ISR 079F  
                     __size_of___wmul 001C                       __size_of_config 0074  
                   measure_Offset@aux 002A                               __ptext1 07AF  
                             __ptext2 077D                               __ptext3 07DE  
                             __ptext4 07BE                               __ptext5 07D2  
                             __ptext6 060E                               __ptext7 021C  
                             __ptext8 052D                               __ptext9 069D  
                             _measure 006B                 _OSCILLATOR_Initialize 07D8  
                        __size_of_isr 0052                               _setGain 052D  
                             _setFilt 05A4                               _setFreq 069D  
            ??_PIN_MANAGER_Initialize 0020                               config@i 0027  
                   setGain@gain_index 0020            __size_of_SYSTEM_Initialize 0003  
                             clrloop0 07CD                         _mess_rec_size 0065  
                end_of_initialization 0068                        _measure_Offset 048D  
               measure_Impedance@asic 003B                     __end_of_lputs_ISR 069D  
                   __end_of_setup_ADC 07D8                      ??_start_TMR0_ISR 0075  
                   __end_of_start_RCM 07E2                  __end_of_mess_handler 0641  
                        __pstringtext 05DA                            _setup_TMR0 07BE  
                    __CFG_FOSC$INTOSC 0000                __end_of_measure_Offset 04E7  
                          config@conf 0020                ??_measure_Impedance_SE 0029  
                       ??_config_ASIC 0029                     _measure_Impedance 014D  
                      __end_of___wmul 074B                    ?_measure_Impedance 0075  
                      __end_of_config 048D                        ADC_2@ADC_value 0024  
          __end_of_start_RX_USART_ISR 078E                ?_OSCILLATOR_Initialize 0075  
   measure_Impedance_no_offset@value1 0037     measure_Impedance_no_offset@value2 0039  
                 start_initialization 0057                   ??_measure_Impedance 0029  
     __size_of_PIN_MANAGER_Initialize 0019                           __end_of_isr 0056  
                     ?_measure_Offset 0075   __end_of_measure_Impedance_no_offset 0419  
         _measure_Impedance_no_offset 0384              measure_Impedance_SE@asic 0034  
             __size_of_close_RX_USART 0007                  i1_start_RX_USART_ISR 078E  
                      ADC_4@ADC_value 0024             __end_of_measure_Impedance 021C  
                      ADC_5@ADC_value 0024                   __end_of_config_ASIC 0672  
                            ??___wmul 0024                              ??_config 0026  
                         ?_setup_TMR0 0075            __end_of_start_TX_USART_ISR 07BE  
                         __pbssCOMMON 0070                             ___latbits 0000  
                       __pcstackBANK0 0020                         __pcstackBANK1 00AF  
     measure_Impedance_no_offset@asic 003B                       sweep@gain_index 004E  
               ?i1_start_RX_USART_ISR 0075                            setGain@aux 0022  
               __size_of_mess_handler 0033                            setFilt@aux 002A  
              _PIN_MANAGER_Initialize 0764                            setFreq@aux 0023  
               __end_of_stop_TMR0_ISR 07E8                    _calculate_checksum 074B  
                      __size_of_ADC_2 0023                        __size_of_ADC_4 0023  
                      __size_of_ADC_5 0023               read_ADC_channels@value1 002E  
             read_ADC_channels@value2 0030               read_ADC_channels@value3 0032  
                 ?_calculate_checksum 0020                              ?_measure 0029  
                            ?_setGain 0020                              ?_setFilt 0026  
                            ?_setFreq 0020                         measure@offset 0034  
                     sweep@freq_index 0049                          _mess_handler 060E  
                      __size_of_sweep 00C3                     setFilt@freq_index 0026  
                      ___wmul@product 0024                   __size_of_setup_TMR0 0007  
                         _config_ASIC 0641                  ??_calculate_checksum 0021  
                           clear_ram0 07CC                            lputs_ISR@i 0023  
          __size_of_measure_Impedance 00CF                             _lputs_ISR 0672  
                           _setup_ADC 07D2                             _start_RCM 07DE  
                   ___wmul@multiplier 0020                             config@out 0028  
              ??i1_start_RX_USART_ISR 0075                        _close_RX_USART 07C5  
             measure_Impedance@value1 0037               measure_Impedance@value2 0039  
             measure_Impedance_SE@aux 002A                            sweep@check 003F  
                          sweep@count 0048                            ?_lputs_ISR 0020  
             calculate_checksum@check 0024                            ?_setup_ADC 0075  
             ??_OSCILLATOR_Initialize 0020                     start_TMR0_ISR@val 0077  
                          ?_start_RCM 0075        measure_Impedance_no_offset@aux 002A  
                    ??_measure_Offset 0029                __end_of_close_RX_USART 07CC  
                    __size_of_measure 00E2                      __size_of_setGain 003E  
                    __size_of_setFilt 0036                      __size_of_setFreq 0029  
                  measure_Offset@asic 0033                              __ptext10 05A4  
                            __ptext11 072F                              __ptext20 06E9  
                            __ptext12 006B                              __ptext21 070C  
                            __ptext13 074B                              __ptext30 078E  
                            __ptext22 0641                              __ptext14 056B  
                            __ptext31 07E5                              __ptext23 0672  
                            __ptext15 048D                              __ptext32 079F  
                            __ptext24 07C5                              __ptext16 0384  
                            __ptext25 0419                              __ptext17 02DF  
                            __ptext26 07E2                              __ptext18 06C6  
                            __ptext27 0764                              __ptext19 014D  
                            __ptext28 07D8                         lputs_ISR@data 0024  
                  _start_RX_USART_ISR 077D                         __size_of_main 0046  
                            _mess_rec 0066         __size_of_measure_Impedance_SE 00A5  
                 ?_start_RX_USART_ISR 0075                              int$flags 007E  
                        ??_setup_TMR0 0020                           _TIMER0_flag 0062  
                ??_start_RX_USART_ISR 0020                              measure@I 0036  
             __size_of_start_TMR0_ISR 0010                              measure@Q 0029  
                     ?_close_RX_USART 0075                             sweep@asic 0050  
              calculate_checksum@data 0023                              intlevel1 0000  
                  _start_TX_USART_ISR 07AF               ?_PIN_MANAGER_Initialize 0075  
                   __CFG_CLKOUTEN$OFF 0000                    __end_of_setup_TMR0 07C5  
                 ?_start_TX_USART_ISR 0075                           ??_lputs_ISR 0021  
                         ??_setup_ADC 0020                              sweep@aux 0040  
                            sweep@ret 004F                 calculate_checksum@num 0020  
                         ??_start_RCM 0020                  ??_start_TX_USART_ISR 0020  
      __end_of_PIN_MANAGER_Initialize 077D                   calculate_checksum@i 0025  
                        ?_config_ASIC 0075  
