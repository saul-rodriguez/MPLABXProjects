

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Mar 15 14:51:14 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16LF1823
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	psect	text17,local,class=CODE,merge=1,delta=2
    28                           	psect	text18,local,class=CODE,merge=1,delta=2
    29                           	psect	text19,local,class=CODE,merge=1,delta=2
    30                           	psect	text20,local,class=CODE,merge=1,delta=2
    31                           	psect	text21,local,class=CODE,merge=1,delta=2
    32                           	psect	text22,local,class=CODE,merge=1,delta=2
    33                           	psect	text23,local,class=CODE,merge=1,delta=2
    34                           	psect	text24,local,class=CODE,merge=1,delta=2
    35                           	psect	intentry,global,class=CODE,delta=2
    36                           	psect	text26,local,class=CODE,merge=1,delta=2
    37                           	psect	text27,local,class=CODE,merge=1,delta=2
    38                           	psect	text28,local,class=CODE,merge=1,delta=2
    39                           	dabs	1,0x7E,2
    40  0000                     
    41                           ; Version 1.40
    42                           ; Generated 01/12/2016 GMT
    43                           ; 
    44                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC16LF1823 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75  0000                     	;# 
    76  0001                     	;# 
    77  0002                     	;# 
    78  0003                     	;# 
    79  0004                     	;# 
    80  0005                     	;# 
    81  0006                     	;# 
    82  0007                     	;# 
    83  0008                     	;# 
    84  0009                     	;# 
    85  000A                     	;# 
    86  000B                     	;# 
    87  000C                     	;# 
    88  000E                     	;# 
    89  0011                     	;# 
    90  0012                     	;# 
    91  0015                     	;# 
    92  0016                     	;# 
    93  0016                     	;# 
    94  0017                     	;# 
    95  0018                     	;# 
    96  0019                     	;# 
    97  001A                     	;# 
    98  001B                     	;# 
    99  001C                     	;# 
   100  001E                     	;# 
   101  001F                     	;# 
   102  008C                     	;# 
   103  008E                     	;# 
   104  0091                     	;# 
   105  0092                     	;# 
   106  0095                     	;# 
   107  0096                     	;# 
   108  0097                     	;# 
   109  0098                     	;# 
   110  0099                     	;# 
   111  009A                     	;# 
   112  009B                     	;# 
   113  009B                     	;# 
   114  009C                     	;# 
   115  009D                     	;# 
   116  009E                     	;# 
   117  010C                     	;# 
   118  010E                     	;# 
   119  0111                     	;# 
   120  0112                     	;# 
   121  0113                     	;# 
   122  0114                     	;# 
   123  0115                     	;# 
   124  0116                     	;# 
   125  0117                     	;# 
   126  0118                     	;# 
   127  0119                     	;# 
   128  011A                     	;# 
   129  011B                     	;# 
   130  011D                     	;# 
   131  011D                     	;# 
   132  018C                     	;# 
   133  018E                     	;# 
   134  0191                     	;# 
   135  0191                     	;# 
   136  0192                     	;# 
   137  0193                     	;# 
   138  0193                     	;# 
   139  0193                     	;# 
   140  0194                     	;# 
   141  0195                     	;# 
   142  0196                     	;# 
   143  0199                     	;# 
   144  019A                     	;# 
   145  019B                     	;# 
   146  019B                     	;# 
   147  019B                     	;# 
   148  019B                     	;# 
   149  019C                     	;# 
   150  019C                     	;# 
   151  019D                     	;# 
   152  019E                     	;# 
   153  019F                     	;# 
   154  020C                     	;# 
   155  020E                     	;# 
   156  0211                     	;# 
   157  0211                     	;# 
   158  0212                     	;# 
   159  0212                     	;# 
   160  0213                     	;# 
   161  0213                     	;# 
   162  0214                     	;# 
   163  0214                     	;# 
   164  0215                     	;# 
   165  0215                     	;# 
   166  0215                     	;# 
   167  0216                     	;# 
   168  0216                     	;# 
   169  0217                     	;# 
   170  0217                     	;# 
   171  0291                     	;# 
   172  0291                     	;# 
   173  0292                     	;# 
   174  0293                     	;# 
   175  0294                     	;# 
   176  0295                     	;# 
   177  0295                     	;# 
   178  0296                     	;# 
   179  0391                     	;# 
   180  0392                     	;# 
   181  0393                     	;# 
   182  039A                     	;# 
   183  039C                     	;# 
   184  039D                     	;# 
   185  039E                     	;# 
   186  039F                     	;# 
   187  0FE4                     	;# 
   188  0FE5                     	;# 
   189  0FE6                     	;# 
   190  0FE7                     	;# 
   191  0FE8                     	;# 
   192  0FE9                     	;# 
   193  0FEA                     	;# 
   194  0FEB                     	;# 
   195  0FED                     	;# 
   196  0FEE                     	;# 
   197  0FEF                     	;# 
   198  0000                     	;# 
   199  0001                     	;# 
   200  0002                     	;# 
   201  0003                     	;# 
   202  0004                     	;# 
   203  0005                     	;# 
   204  0006                     	;# 
   205  0007                     	;# 
   206  0008                     	;# 
   207  0009                     	;# 
   208  000A                     	;# 
   209  000B                     	;# 
   210  000C                     	;# 
   211  000E                     	;# 
   212  0011                     	;# 
   213  0012                     	;# 
   214  0015                     	;# 
   215  0016                     	;# 
   216  0016                     	;# 
   217  0017                     	;# 
   218  0018                     	;# 
   219  0019                     	;# 
   220  001A                     	;# 
   221  001B                     	;# 
   222  001C                     	;# 
   223  001E                     	;# 
   224  001F                     	;# 
   225  008C                     	;# 
   226  008E                     	;# 
   227  0091                     	;# 
   228  0092                     	;# 
   229  0095                     	;# 
   230  0096                     	;# 
   231  0097                     	;# 
   232  0098                     	;# 
   233  0099                     	;# 
   234  009A                     	;# 
   235  009B                     	;# 
   236  009B                     	;# 
   237  009C                     	;# 
   238  009D                     	;# 
   239  009E                     	;# 
   240  010C                     	;# 
   241  010E                     	;# 
   242  0111                     	;# 
   243  0112                     	;# 
   244  0113                     	;# 
   245  0114                     	;# 
   246  0115                     	;# 
   247  0116                     	;# 
   248  0117                     	;# 
   249  0118                     	;# 
   250  0119                     	;# 
   251  011A                     	;# 
   252  011B                     	;# 
   253  011D                     	;# 
   254  011D                     	;# 
   255  018C                     	;# 
   256  018E                     	;# 
   257  0191                     	;# 
   258  0191                     	;# 
   259  0192                     	;# 
   260  0193                     	;# 
   261  0193                     	;# 
   262  0193                     	;# 
   263  0194                     	;# 
   264  0195                     	;# 
   265  0196                     	;# 
   266  0199                     	;# 
   267  019A                     	;# 
   268  019B                     	;# 
   269  019B                     	;# 
   270  019B                     	;# 
   271  019B                     	;# 
   272  019C                     	;# 
   273  019C                     	;# 
   274  019D                     	;# 
   275  019E                     	;# 
   276  019F                     	;# 
   277  020C                     	;# 
   278  020E                     	;# 
   279  0211                     	;# 
   280  0211                     	;# 
   281  0212                     	;# 
   282  0212                     	;# 
   283  0213                     	;# 
   284  0213                     	;# 
   285  0214                     	;# 
   286  0214                     	;# 
   287  0215                     	;# 
   288  0215                     	;# 
   289  0215                     	;# 
   290  0216                     	;# 
   291  0216                     	;# 
   292  0217                     	;# 
   293  0217                     	;# 
   294  0291                     	;# 
   295  0291                     	;# 
   296  0292                     	;# 
   297  0293                     	;# 
   298  0294                     	;# 
   299  0295                     	;# 
   300  0295                     	;# 
   301  0296                     	;# 
   302  0391                     	;# 
   303  0392                     	;# 
   304  0393                     	;# 
   305  039A                     	;# 
   306  039C                     	;# 
   307  039D                     	;# 
   308  039E                     	;# 
   309  039F                     	;# 
   310  0FE4                     	;# 
   311  0FE5                     	;# 
   312  0FE6                     	;# 
   313  0FE7                     	;# 
   314  0FE8                     	;# 
   315  0FE9                     	;# 
   316  0FEA                     	;# 
   317  0FEB                     	;# 
   318  0FED                     	;# 
   319  0FEE                     	;# 
   320  0FEF                     	;# 
   321  0000                     	;# 
   322  0001                     	;# 
   323  0002                     	;# 
   324  0003                     	;# 
   325  0004                     	;# 
   326  0005                     	;# 
   327  0006                     	;# 
   328  0007                     	;# 
   329  0008                     	;# 
   330  0009                     	;# 
   331  000A                     	;# 
   332  000B                     	;# 
   333  000C                     	;# 
   334  000E                     	;# 
   335  0011                     	;# 
   336  0012                     	;# 
   337  0015                     	;# 
   338  0016                     	;# 
   339  0016                     	;# 
   340  0017                     	;# 
   341  0018                     	;# 
   342  0019                     	;# 
   343  001A                     	;# 
   344  001B                     	;# 
   345  001C                     	;# 
   346  001E                     	;# 
   347  001F                     	;# 
   348  008C                     	;# 
   349  008E                     	;# 
   350  0091                     	;# 
   351  0092                     	;# 
   352  0095                     	;# 
   353  0096                     	;# 
   354  0097                     	;# 
   355  0098                     	;# 
   356  0099                     	;# 
   357  009A                     	;# 
   358  009B                     	;# 
   359  009B                     	;# 
   360  009C                     	;# 
   361  009D                     	;# 
   362  009E                     	;# 
   363  010C                     	;# 
   364  010E                     	;# 
   365  0111                     	;# 
   366  0112                     	;# 
   367  0113                     	;# 
   368  0114                     	;# 
   369  0115                     	;# 
   370  0116                     	;# 
   371  0117                     	;# 
   372  0118                     	;# 
   373  0119                     	;# 
   374  011A                     	;# 
   375  011B                     	;# 
   376  011D                     	;# 
   377  011D                     	;# 
   378  018C                     	;# 
   379  018E                     	;# 
   380  0191                     	;# 
   381  0191                     	;# 
   382  0192                     	;# 
   383  0193                     	;# 
   384  0193                     	;# 
   385  0193                     	;# 
   386  0194                     	;# 
   387  0195                     	;# 
   388  0196                     	;# 
   389  0199                     	;# 
   390  019A                     	;# 
   391  019B                     	;# 
   392  019B                     	;# 
   393  019B                     	;# 
   394  019B                     	;# 
   395  019C                     	;# 
   396  019C                     	;# 
   397  019D                     	;# 
   398  019E                     	;# 
   399  019F                     	;# 
   400  020C                     	;# 
   401  020E                     	;# 
   402  0211                     	;# 
   403  0211                     	;# 
   404  0212                     	;# 
   405  0212                     	;# 
   406  0213                     	;# 
   407  0213                     	;# 
   408  0214                     	;# 
   409  0214                     	;# 
   410  0215                     	;# 
   411  0215                     	;# 
   412  0215                     	;# 
   413  0216                     	;# 
   414  0216                     	;# 
   415  0217                     	;# 
   416  0217                     	;# 
   417  0291                     	;# 
   418  0291                     	;# 
   419  0292                     	;# 
   420  0293                     	;# 
   421  0294                     	;# 
   422  0295                     	;# 
   423  0295                     	;# 
   424  0296                     	;# 
   425  0391                     	;# 
   426  0392                     	;# 
   427  0393                     	;# 
   428  039A                     	;# 
   429  039C                     	;# 
   430  039D                     	;# 
   431  039E                     	;# 
   432  039F                     	;# 
   433  0FE4                     	;# 
   434  0FE5                     	;# 
   435  0FE6                     	;# 
   436  0FE7                     	;# 
   437  0FE8                     	;# 
   438  0FE9                     	;# 
   439  0FEA                     	;# 
   440  0FEB                     	;# 
   441  0FED                     	;# 
   442  0FEE                     	;# 
   443  0FEF                     	;# 
   444  0000                     	;# 
   445  0001                     	;# 
   446  0002                     	;# 
   447  0003                     	;# 
   448  0004                     	;# 
   449  0005                     	;# 
   450  0006                     	;# 
   451  0007                     	;# 
   452  0008                     	;# 
   453  0009                     	;# 
   454  000A                     	;# 
   455  000B                     	;# 
   456  000C                     	;# 
   457  000E                     	;# 
   458  0011                     	;# 
   459  0012                     	;# 
   460  0015                     	;# 
   461  0016                     	;# 
   462  0016                     	;# 
   463  0017                     	;# 
   464  0018                     	;# 
   465  0019                     	;# 
   466  001A                     	;# 
   467  001B                     	;# 
   468  001C                     	;# 
   469  001E                     	;# 
   470  001F                     	;# 
   471  008C                     	;# 
   472  008E                     	;# 
   473  0091                     	;# 
   474  0092                     	;# 
   475  0095                     	;# 
   476  0096                     	;# 
   477  0097                     	;# 
   478  0098                     	;# 
   479  0099                     	;# 
   480  009A                     	;# 
   481  009B                     	;# 
   482  009B                     	;# 
   483  009C                     	;# 
   484  009D                     	;# 
   485  009E                     	;# 
   486  010C                     	;# 
   487  010E                     	;# 
   488  0111                     	;# 
   489  0112                     	;# 
   490  0113                     	;# 
   491  0114                     	;# 
   492  0115                     	;# 
   493  0116                     	;# 
   494  0117                     	;# 
   495  0118                     	;# 
   496  0119                     	;# 
   497  011A                     	;# 
   498  011B                     	;# 
   499  011D                     	;# 
   500  011D                     	;# 
   501  018C                     	;# 
   502  018E                     	;# 
   503  0191                     	;# 
   504  0191                     	;# 
   505  0192                     	;# 
   506  0193                     	;# 
   507  0193                     	;# 
   508  0193                     	;# 
   509  0194                     	;# 
   510  0195                     	;# 
   511  0196                     	;# 
   512  0199                     	;# 
   513  019A                     	;# 
   514  019B                     	;# 
   515  019B                     	;# 
   516  019B                     	;# 
   517  019B                     	;# 
   518  019C                     	;# 
   519  019C                     	;# 
   520  019D                     	;# 
   521  019E                     	;# 
   522  019F                     	;# 
   523  020C                     	;# 
   524  020E                     	;# 
   525  0211                     	;# 
   526  0211                     	;# 
   527  0212                     	;# 
   528  0212                     	;# 
   529  0213                     	;# 
   530  0213                     	;# 
   531  0214                     	;# 
   532  0214                     	;# 
   533  0215                     	;# 
   534  0215                     	;# 
   535  0215                     	;# 
   536  0216                     	;# 
   537  0216                     	;# 
   538  0217                     	;# 
   539  0217                     	;# 
   540  0291                     	;# 
   541  0291                     	;# 
   542  0292                     	;# 
   543  0293                     	;# 
   544  0294                     	;# 
   545  0295                     	;# 
   546  0295                     	;# 
   547  0296                     	;# 
   548  0391                     	;# 
   549  0392                     	;# 
   550  0393                     	;# 
   551  039A                     	;# 
   552  039C                     	;# 
   553  039D                     	;# 
   554  039E                     	;# 
   555  039F                     	;# 
   556  0FE4                     	;# 
   557  0FE5                     	;# 
   558  0FE6                     	;# 
   559  0FE7                     	;# 
   560  0FE8                     	;# 
   561  0FE9                     	;# 
   562  0FEA                     	;# 
   563  0FEB                     	;# 
   564  0FED                     	;# 
   565  0FEE                     	;# 
   566  0FEF                     	;# 
   567  0000                     	;# 
   568  0001                     	;# 
   569  0002                     	;# 
   570  0003                     	;# 
   571  0004                     	;# 
   572  0005                     	;# 
   573  0006                     	;# 
   574  0007                     	;# 
   575  0008                     	;# 
   576  0009                     	;# 
   577  000A                     	;# 
   578  000B                     	;# 
   579  000C                     	;# 
   580  000E                     	;# 
   581  0011                     	;# 
   582  0012                     	;# 
   583  0015                     	;# 
   584  0016                     	;# 
   585  0016                     	;# 
   586  0017                     	;# 
   587  0018                     	;# 
   588  0019                     	;# 
   589  001A                     	;# 
   590  001B                     	;# 
   591  001C                     	;# 
   592  001E                     	;# 
   593  001F                     	;# 
   594  008C                     	;# 
   595  008E                     	;# 
   596  0091                     	;# 
   597  0092                     	;# 
   598  0095                     	;# 
   599  0096                     	;# 
   600  0097                     	;# 
   601  0098                     	;# 
   602  0099                     	;# 
   603  009A                     	;# 
   604  009B                     	;# 
   605  009B                     	;# 
   606  009C                     	;# 
   607  009D                     	;# 
   608  009E                     	;# 
   609  010C                     	;# 
   610  010E                     	;# 
   611  0111                     	;# 
   612  0112                     	;# 
   613  0113                     	;# 
   614  0114                     	;# 
   615  0115                     	;# 
   616  0116                     	;# 
   617  0117                     	;# 
   618  0118                     	;# 
   619  0119                     	;# 
   620  011A                     	;# 
   621  011B                     	;# 
   622  011D                     	;# 
   623  011D                     	;# 
   624  018C                     	;# 
   625  018E                     	;# 
   626  0191                     	;# 
   627  0191                     	;# 
   628  0192                     	;# 
   629  0193                     	;# 
   630  0193                     	;# 
   631  0193                     	;# 
   632  0194                     	;# 
   633  0195                     	;# 
   634  0196                     	;# 
   635  0199                     	;# 
   636  019A                     	;# 
   637  019B                     	;# 
   638  019B                     	;# 
   639  019B                     	;# 
   640  019B                     	;# 
   641  019C                     	;# 
   642  019C                     	;# 
   643  019D                     	;# 
   644  019E                     	;# 
   645  019F                     	;# 
   646  020C                     	;# 
   647  020E                     	;# 
   648  0211                     	;# 
   649  0211                     	;# 
   650  0212                     	;# 
   651  0212                     	;# 
   652  0213                     	;# 
   653  0213                     	;# 
   654  0214                     	;# 
   655  0214                     	;# 
   656  0215                     	;# 
   657  0215                     	;# 
   658  0215                     	;# 
   659  0216                     	;# 
   660  0216                     	;# 
   661  0217                     	;# 
   662  0217                     	;# 
   663  0291                     	;# 
   664  0291                     	;# 
   665  0292                     	;# 
   666  0293                     	;# 
   667  0294                     	;# 
   668  0295                     	;# 
   669  0295                     	;# 
   670  0296                     	;# 
   671  0391                     	;# 
   672  0392                     	;# 
   673  0393                     	;# 
   674  039A                     	;# 
   675  039C                     	;# 
   676  039D                     	;# 
   677  039E                     	;# 
   678  039F                     	;# 
   679  0FE4                     	;# 
   680  0FE5                     	;# 
   681  0FE6                     	;# 
   682  0FE7                     	;# 
   683  0FE8                     	;# 
   684  0FE9                     	;# 
   685  0FEA                     	;# 
   686  0FEB                     	;# 
   687  0FED                     	;# 
   688  0FEE                     	;# 
   689  0FEF                     	;# 
   690  0000                     	;# 
   691  0001                     	;# 
   692  0002                     	;# 
   693  0003                     	;# 
   694  0004                     	;# 
   695  0005                     	;# 
   696  0006                     	;# 
   697  0007                     	;# 
   698  0008                     	;# 
   699  0009                     	;# 
   700  000A                     	;# 
   701  000B                     	;# 
   702  000C                     	;# 
   703  000E                     	;# 
   704  0011                     	;# 
   705  0012                     	;# 
   706  0015                     	;# 
   707  0016                     	;# 
   708  0016                     	;# 
   709  0017                     	;# 
   710  0018                     	;# 
   711  0019                     	;# 
   712  001A                     	;# 
   713  001B                     	;# 
   714  001C                     	;# 
   715  001E                     	;# 
   716  001F                     	;# 
   717  008C                     	;# 
   718  008E                     	;# 
   719  0091                     	;# 
   720  0092                     	;# 
   721  0095                     	;# 
   722  0096                     	;# 
   723  0097                     	;# 
   724  0098                     	;# 
   725  0099                     	;# 
   726  009A                     	;# 
   727  009B                     	;# 
   728  009B                     	;# 
   729  009C                     	;# 
   730  009D                     	;# 
   731  009E                     	;# 
   732  010C                     	;# 
   733  010E                     	;# 
   734  0111                     	;# 
   735  0112                     	;# 
   736  0113                     	;# 
   737  0114                     	;# 
   738  0115                     	;# 
   739  0116                     	;# 
   740  0117                     	;# 
   741  0118                     	;# 
   742  0119                     	;# 
   743  011A                     	;# 
   744  011B                     	;# 
   745  011D                     	;# 
   746  011D                     	;# 
   747  018C                     	;# 
   748  018E                     	;# 
   749  0191                     	;# 
   750  0191                     	;# 
   751  0192                     	;# 
   752  0193                     	;# 
   753  0193                     	;# 
   754  0193                     	;# 
   755  0194                     	;# 
   756  0195                     	;# 
   757  0196                     	;# 
   758  0199                     	;# 
   759  019A                     	;# 
   760  019B                     	;# 
   761  019B                     	;# 
   762  019B                     	;# 
   763  019B                     	;# 
   764  019C                     	;# 
   765  019C                     	;# 
   766  019D                     	;# 
   767  019E                     	;# 
   768  019F                     	;# 
   769  020C                     	;# 
   770  020E                     	;# 
   771  0211                     	;# 
   772  0211                     	;# 
   773  0212                     	;# 
   774  0212                     	;# 
   775  0213                     	;# 
   776  0213                     	;# 
   777  0214                     	;# 
   778  0214                     	;# 
   779  0215                     	;# 
   780  0215                     	;# 
   781  0215                     	;# 
   782  0216                     	;# 
   783  0216                     	;# 
   784  0217                     	;# 
   785  0217                     	;# 
   786  0291                     	;# 
   787  0291                     	;# 
   788  0292                     	;# 
   789  0293                     	;# 
   790  0294                     	;# 
   791  0295                     	;# 
   792  0295                     	;# 
   793  0296                     	;# 
   794  0391                     	;# 
   795  0392                     	;# 
   796  0393                     	;# 
   797  039A                     	;# 
   798  039C                     	;# 
   799  039D                     	;# 
   800  039E                     	;# 
   801  039F                     	;# 
   802  0FE4                     	;# 
   803  0FE5                     	;# 
   804  0FE6                     	;# 
   805  0FE7                     	;# 
   806  0FE8                     	;# 
   807  0FE9                     	;# 
   808  0FEA                     	;# 
   809  0FEB                     	;# 
   810  0FED                     	;# 
   811  0FEE                     	;# 
   812  0FEF                     	;# 
   813  0000                     	;# 
   814  0001                     	;# 
   815  0002                     	;# 
   816  0003                     	;# 
   817  0004                     	;# 
   818  0005                     	;# 
   819  0006                     	;# 
   820  0007                     	;# 
   821  0008                     	;# 
   822  0009                     	;# 
   823  000A                     	;# 
   824  000B                     	;# 
   825  000C                     	;# 
   826  000E                     	;# 
   827  0011                     	;# 
   828  0012                     	;# 
   829  0015                     	;# 
   830  0016                     	;# 
   831  0016                     	;# 
   832  0017                     	;# 
   833  0018                     	;# 
   834  0019                     	;# 
   835  001A                     	;# 
   836  001B                     	;# 
   837  001C                     	;# 
   838  001E                     	;# 
   839  001F                     	;# 
   840  008C                     	;# 
   841  008E                     	;# 
   842  0091                     	;# 
   843  0092                     	;# 
   844  0095                     	;# 
   845  0096                     	;# 
   846  0097                     	;# 
   847  0098                     	;# 
   848  0099                     	;# 
   849  009A                     	;# 
   850  009B                     	;# 
   851  009B                     	;# 
   852  009C                     	;# 
   853  009D                     	;# 
   854  009E                     	;# 
   855  010C                     	;# 
   856  010E                     	;# 
   857  0111                     	;# 
   858  0112                     	;# 
   859  0113                     	;# 
   860  0114                     	;# 
   861  0115                     	;# 
   862  0116                     	;# 
   863  0117                     	;# 
   864  0118                     	;# 
   865  0119                     	;# 
   866  011A                     	;# 
   867  011B                     	;# 
   868  011D                     	;# 
   869  011D                     	;# 
   870  018C                     	;# 
   871  018E                     	;# 
   872  0191                     	;# 
   873  0191                     	;# 
   874  0192                     	;# 
   875  0193                     	;# 
   876  0193                     	;# 
   877  0193                     	;# 
   878  0194                     	;# 
   879  0195                     	;# 
   880  0196                     	;# 
   881  0199                     	;# 
   882  019A                     	;# 
   883  019B                     	;# 
   884  019B                     	;# 
   885  019B                     	;# 
   886  019B                     	;# 
   887  019C                     	;# 
   888  019C                     	;# 
   889  019D                     	;# 
   890  019E                     	;# 
   891  019F                     	;# 
   892  020C                     	;# 
   893  020E                     	;# 
   894  0211                     	;# 
   895  0211                     	;# 
   896  0212                     	;# 
   897  0212                     	;# 
   898  0213                     	;# 
   899  0213                     	;# 
   900  0214                     	;# 
   901  0214                     	;# 
   902  0215                     	;# 
   903  0215                     	;# 
   904  0215                     	;# 
   905  0216                     	;# 
   906  0216                     	;# 
   907  0217                     	;# 
   908  0217                     	;# 
   909  0291                     	;# 
   910  0291                     	;# 
   911  0292                     	;# 
   912  0293                     	;# 
   913  0294                     	;# 
   914  0295                     	;# 
   915  0295                     	;# 
   916  0296                     	;# 
   917  0391                     	;# 
   918  0392                     	;# 
   919  0393                     	;# 
   920  039A                     	;# 
   921  039C                     	;# 
   922  039D                     	;# 
   923  039E                     	;# 
   924  039F                     	;# 
   925  0FE4                     	;# 
   926  0FE5                     	;# 
   927  0FE6                     	;# 
   928  0FE7                     	;# 
   929  0FE8                     	;# 
   930  0FE9                     	;# 
   931  0FEA                     	;# 
   932  0FEB                     	;# 
   933  0FED                     	;# 
   934  0FEE                     	;# 
   935  0FEF                     	;# 
   936  0000                     	;# 
   937  0001                     	;# 
   938  0002                     	;# 
   939  0003                     	;# 
   940  0004                     	;# 
   941  0005                     	;# 
   942  0006                     	;# 
   943  0007                     	;# 
   944  0008                     	;# 
   945  0009                     	;# 
   946  000A                     	;# 
   947  000B                     	;# 
   948  000C                     	;# 
   949  000E                     	;# 
   950  0011                     	;# 
   951  0012                     	;# 
   952  0015                     	;# 
   953  0016                     	;# 
   954  0016                     	;# 
   955  0017                     	;# 
   956  0018                     	;# 
   957  0019                     	;# 
   958  001A                     	;# 
   959  001B                     	;# 
   960  001C                     	;# 
   961  001E                     	;# 
   962  001F                     	;# 
   963  008C                     	;# 
   964  008E                     	;# 
   965  0091                     	;# 
   966  0092                     	;# 
   967  0095                     	;# 
   968  0096                     	;# 
   969  0097                     	;# 
   970  0098                     	;# 
   971  0099                     	;# 
   972  009A                     	;# 
   973  009B                     	;# 
   974  009B                     	;# 
   975  009C                     	;# 
   976  009D                     	;# 
   977  009E                     	;# 
   978  010C                     	;# 
   979  010E                     	;# 
   980  0111                     	;# 
   981  0112                     	;# 
   982  0113                     	;# 
   983  0114                     	;# 
   984  0115                     	;# 
   985  0116                     	;# 
   986  0117                     	;# 
   987  0118                     	;# 
   988  0119                     	;# 
   989  011A                     	;# 
   990  011B                     	;# 
   991  011D                     	;# 
   992  011D                     	;# 
   993  018C                     	;# 
   994  018E                     	;# 
   995  0191                     	;# 
   996  0191                     	;# 
   997  0192                     	;# 
   998  0193                     	;# 
   999  0193                     	;# 
  1000  0193                     	;# 
  1001  0194                     	;# 
  1002  0195                     	;# 
  1003  0196                     	;# 
  1004  0199                     	;# 
  1005  019A                     	;# 
  1006  019B                     	;# 
  1007  019B                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019C                     	;# 
  1011  019C                     	;# 
  1012  019D                     	;# 
  1013  019E                     	;# 
  1014  019F                     	;# 
  1015  020C                     	;# 
  1016  020E                     	;# 
  1017  0211                     	;# 
  1018  0211                     	;# 
  1019  0212                     	;# 
  1020  0212                     	;# 
  1021  0213                     	;# 
  1022  0213                     	;# 
  1023  0214                     	;# 
  1024  0214                     	;# 
  1025  0215                     	;# 
  1026  0215                     	;# 
  1027  0215                     	;# 
  1028  0216                     	;# 
  1029  0216                     	;# 
  1030  0217                     	;# 
  1031  0217                     	;# 
  1032  0291                     	;# 
  1033  0291                     	;# 
  1034  0292                     	;# 
  1035  0293                     	;# 
  1036  0294                     	;# 
  1037  0295                     	;# 
  1038  0295                     	;# 
  1039  0296                     	;# 
  1040  0391                     	;# 
  1041  0392                     	;# 
  1042  0393                     	;# 
  1043  039A                     	;# 
  1044  039C                     	;# 
  1045  039D                     	;# 
  1046  039E                     	;# 
  1047  039F                     	;# 
  1048  0FE4                     	;# 
  1049  0FE5                     	;# 
  1050  0FE6                     	;# 
  1051  0FE7                     	;# 
  1052  0FE8                     	;# 
  1053  0FE9                     	;# 
  1054  0FEA                     	;# 
  1055  0FEB                     	;# 
  1056  0FED                     	;# 
  1057  0FEE                     	;# 
  1058  0FEF                     	;# 
  1059  0000                     	;# 
  1060  0001                     	;# 
  1061  0002                     	;# 
  1062  0003                     	;# 
  1063  0004                     	;# 
  1064  0005                     	;# 
  1065  0006                     	;# 
  1066  0007                     	;# 
  1067  0008                     	;# 
  1068  0009                     	;# 
  1069  000A                     	;# 
  1070  000B                     	;# 
  1071  000C                     	;# 
  1072  000E                     	;# 
  1073  0011                     	;# 
  1074  0012                     	;# 
  1075  0015                     	;# 
  1076  0016                     	;# 
  1077  0016                     	;# 
  1078  0017                     	;# 
  1079  0018                     	;# 
  1080  0019                     	;# 
  1081  001A                     	;# 
  1082  001B                     	;# 
  1083  001C                     	;# 
  1084  001E                     	;# 
  1085  001F                     	;# 
  1086  008C                     	;# 
  1087  008E                     	;# 
  1088  0091                     	;# 
  1089  0092                     	;# 
  1090  0095                     	;# 
  1091  0096                     	;# 
  1092  0097                     	;# 
  1093  0098                     	;# 
  1094  0099                     	;# 
  1095  009A                     	;# 
  1096  009B                     	;# 
  1097  009B                     	;# 
  1098  009C                     	;# 
  1099  009D                     	;# 
  1100  009E                     	;# 
  1101  010C                     	;# 
  1102  010E                     	;# 
  1103  0111                     	;# 
  1104  0112                     	;# 
  1105  0113                     	;# 
  1106  0114                     	;# 
  1107  0115                     	;# 
  1108  0116                     	;# 
  1109  0117                     	;# 
  1110  0118                     	;# 
  1111  0119                     	;# 
  1112  011A                     	;# 
  1113  011B                     	;# 
  1114  011D                     	;# 
  1115  011D                     	;# 
  1116  018C                     	;# 
  1117  018E                     	;# 
  1118  0191                     	;# 
  1119  0191                     	;# 
  1120  0192                     	;# 
  1121  0193                     	;# 
  1122  0193                     	;# 
  1123  0193                     	;# 
  1124  0194                     	;# 
  1125  0195                     	;# 
  1126  0196                     	;# 
  1127  0199                     	;# 
  1128  019A                     	;# 
  1129  019B                     	;# 
  1130  019B                     	;# 
  1131  019B                     	;# 
  1132  019B                     	;# 
  1133  019C                     	;# 
  1134  019C                     	;# 
  1135  019D                     	;# 
  1136  019E                     	;# 
  1137  019F                     	;# 
  1138  020C                     	;# 
  1139  020E                     	;# 
  1140  0211                     	;# 
  1141  0211                     	;# 
  1142  0212                     	;# 
  1143  0212                     	;# 
  1144  0213                     	;# 
  1145  0213                     	;# 
  1146  0214                     	;# 
  1147  0214                     	;# 
  1148  0215                     	;# 
  1149  0215                     	;# 
  1150  0215                     	;# 
  1151  0216                     	;# 
  1152  0216                     	;# 
  1153  0217                     	;# 
  1154  0217                     	;# 
  1155  0291                     	;# 
  1156  0291                     	;# 
  1157  0292                     	;# 
  1158  0293                     	;# 
  1159  0294                     	;# 
  1160  0295                     	;# 
  1161  0295                     	;# 
  1162  0296                     	;# 
  1163  0391                     	;# 
  1164  0392                     	;# 
  1165  0393                     	;# 
  1166  039A                     	;# 
  1167  039C                     	;# 
  1168  039D                     	;# 
  1169  039E                     	;# 
  1170  039F                     	;# 
  1171  0FE4                     	;# 
  1172  0FE5                     	;# 
  1173  0FE6                     	;# 
  1174  0FE7                     	;# 
  1175  0FE8                     	;# 
  1176  0FE9                     	;# 
  1177  0FEA                     	;# 
  1178  0FEB                     	;# 
  1179  0FED                     	;# 
  1180  0FEE                     	;# 
  1181  0FEF                     	;# 
  1182  000E                     _PORTC	set	14
  1183  0015                     _TMR0	set	21
  1184  005F                     _GIE	set	95
  1185  005E                     _PEIE	set	94
  1186  0065                     _RA5	set	101
  1187  008D                     _RCIF	set	141
  1188  005D                     _TMR0IE	set	93
  1189  005A                     _TMR0IF	set	90
  1190  008C                     _TXIF	set	140
  1191  009D                     _ADCON0	set	157
  1192  009E                     _ADCON1	set	158
  1193  009C                     _ADRESH	set	156
  1194  009B                     _ADRESL	set	155
  1195  0095                     _OPTION_REGbits	set	149
  1196  0099                     _OSCCON	set	153
  1197  009A                     _OSCSTAT	set	154
  1198  0098                     _OSCTUNE	set	152
  1199  008C                     _TRISA	set	140
  1200  008E                     _TRISC	set	142
  1201  04E9                     _ADGO	set	1257
  1202  04A8                     _PS0	set	1192
  1203  04A9                     _PS1	set	1193
  1204  04AA                     _PS2	set	1194
  1205  04AB                     _PSA	set	1195
  1206  048D                     _RCIE	set	1165
  1207  04AD                     _TMR0CS	set	1197
  1208  048C                     _TXIE	set	1164
  1209  011D                     _APFCON	set	285
  1210  010C                     _LATA	set	268
  1211  010E                     _LATC	set	270
  1212  08EF                     _RXDTSEL	set	2287
  1213  08EA                     _TXCKSEL	set	2282
  1214  018C                     _ANSELA	set	396
  1215  018E                     _ANSELC	set	398
  1216  0199                     _RCREG	set	409
  1217  019C                     _SPBRGH	set	412
  1218  019B                     _SPBRGL	set	411
  1219  019A                     _TXREG	set	410
  1220  0CFB                     _BRG16	set	3323
  1221  0CF2                     _BRGH	set	3314
  1222  0CEC                     _CREN	set	3308
  1223  0CE9                     _OERR	set	3305
  1224  0CFC                     _SCKP	set	3324
  1225  0CEF                     _SPEN	set	3311
  1226  0CF4                     _SYNC	set	3316
  1227  0CF5                     _TXEN	set	3317
  1228  020C                     _WPUA	set	524
  1229  020E                     _WPUC	set	526
  1230  039A                     _CLKRCON	set	922
  1231                           
  1232                           ; #config settings
  1233  0000                     
  1234                           	psect	cinit
  1235  0057                     start_initialization:	
  1236  0057                     __initialization:	
  1237                           
  1238                           ; Clear objects allocated to COMMON
  1239  0057  01F0               	clrf	__pbssCOMMON& (0+127)
  1240  0058  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  1241  0059  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  1242  005A  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  1243  005B  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  1244                           
  1245                           ; Clear objects allocated to BANK0
  1246  005C  3020               	movlw	low __pbssBANK0
  1247  005D  0084               	movwf	4
  1248  005E  3000               	movlw	high __pbssBANK0
  1249  005F  0085               	movwf	5
  1250  0060  302C               	movlw	44
  1251  0061  2468               	fcall	clear_ram0
  1252  0062                     end_of_initialization:	
  1253                           ;End of C runtime variable initialization code
  1254                           
  1255  0062                     __end_of__initialization:	
  1256  0062  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1257  0063  0020               	movlb	0
  1258  0064  29F7               	ljmp	_main	;jump to C main() function
  1259                           
  1260                           	psect	bssCOMMON
  1261  0070                     __pbssCOMMON:	
  1262  0070                     _TIMER0_timeout:	
  1263  0070                     	ds	2
  1264  0072                     _USART_tx_flag:	
  1265  0072                     	ds	1
  1266  0073                     _USART_tx_index:	
  1267  0073                     	ds	1
  1268  0074                     _USART_tx_length:	
  1269  0074                     	ds	1
  1270                           
  1271                           	psect	bssBANK0
  1272  0020                     __pbssBANK0:	
  1273  0020                     _USART_rx_data:	
  1274  0020                     	ds	15
  1275  002F                     _USART_tx_data:	
  1276  002F                     	ds	15
  1277  003E                     _TIMER0_flag:	
  1278  003E                     	ds	1
  1279  003F                     _USART_rx_flag:	
  1280  003F                     	ds	1
  1281  0040                     _USART_rx_index:	
  1282  0040                     	ds	1
  1283  0041                     _mess_rec_size:	
  1284  0041                     	ds	1
  1285  0042                     _mess_rec:	
  1286  0042                     	ds	10
  1287                           
  1288                           	psect	clrtext
  1289  0468                     clear_ram0:	
  1290                           ;	Called with FSR0 containing the base address, and
  1291                           ;	WREG with the size to clear
  1292                           
  1293  0468  0064               	clrwdt	;clear the watchdog before getting into this loop
  1294  0469                     clrloop0:	
  1295  0469  0180               	clrf	0	;clear RAM location pointed to by FSR
  1296  046A  3101               	addfsr 0,1
  1297  046B  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1298  046C  2C69               	goto	clrloop0	;have we reached the end yet?
  1299  046D  3400               	retlw	0	;all done for this memory range, return
  1300                           
  1301                           	psect	cstackCOMMON
  1302  0075                     __pcstackCOMMON:	
  1303  0075                     ?_OSCILLATOR_Initialize:	
  1304  0075                     ?_setup_TMR0:	
  1305                           ; 1 bytes @ 0x0
  1306                           
  1307  0075                     ?_start_TX_USART_ISR:	
  1308                           ; 1 bytes @ 0x0
  1309                           
  1310  0075                     ?_start_RX_USART_ISR:	
  1311                           ; 1 bytes @ 0x0
  1312                           
  1313  0075                     ?_start_RCM:	
  1314                           ; 1 bytes @ 0x0
  1315                           
  1316  0075                     ?_setup_ADC:	
  1317                           ; 1 bytes @ 0x0
  1318                           
  1319  0075                     ?_mess_handler:	
  1320                           ; 1 bytes @ 0x0
  1321                           
  1322  0075                     ?_stop_TMR0_ISR:	
  1323                           ; 1 bytes @ 0x0
  1324                           
  1325  0075                     ??_stop_TMR0_ISR:	
  1326                           ; 1 bytes @ 0x0
  1327                           
  1328  0075                     ?_start_TMR0_ISR:	
  1329                           ; 1 bytes @ 0x0
  1330                           
  1331  0075                     ??_start_TMR0_ISR:	
  1332                           ; 1 bytes @ 0x0
  1333                           
  1334  0075                     ?_config_ASIC:	
  1335                           ; 1 bytes @ 0x0
  1336                           
  1337  0075                     ?_read_ADC_channels:	
  1338                           ; 1 bytes @ 0x0
  1339                           
  1340  0075                     ?_measure_Impedance:	
  1341                           ; 1 bytes @ 0x0
  1342                           
  1343  0075                     ?_measure_Impedance_no_offset:	
  1344                           ; 1 bytes @ 0x0
  1345                           
  1346  0075                     ?_measure_Offset:	
  1347                           ; 1 bytes @ 0x0
  1348                           
  1349  0075                     ?_measure_Impedance_SE:	
  1350                           ; 1 bytes @ 0x0
  1351                           
  1352  0075                     ?_calibrate_reader:	
  1353                           ; 1 bytes @ 0x0
  1354                           
  1355  0075                     ?_PIN_MANAGER_Initialize:	
  1356                           ; 1 bytes @ 0x0
  1357                           
  1358  0075                     ?_SYSTEM_Initialize:	
  1359                           ; 1 bytes @ 0x0
  1360                           
  1361  0075                     ?_USARTX_change_pol:	
  1362                           ; 1 bytes @ 0x0
  1363                           
  1364  0075                     ?_main:	
  1365                           ; 1 bytes @ 0x0
  1366                           
  1367  0075                     ?_isr:	
  1368                           ; 1 bytes @ 0x0
  1369                           
  1370  0075                     ?_close_RX_USART:	
  1371                           ; 1 bytes @ 0x0
  1372                           
  1373  0075                     ?i1_start_RX_USART_ISR:	
  1374                           ; 1 bytes @ 0x0
  1375                           
  1376  0075                     ??i1_start_RX_USART_ISR:	
  1377                           ; 1 bytes @ 0x0
  1378                           
  1379                           
  1380                           ; 1 bytes @ 0x0
  1381  0075                     	ds	2
  1382  0077                     start_TMR0_ISR@val:	
  1383                           
  1384                           ; 1 bytes @ 0x2
  1385  0077                     	ds	1
  1386  0078                     ??_isr:	
  1387                           
  1388                           ; 1 bytes @ 0x3
  1389  0078                     	ds	2
  1390                           
  1391                           	psect	cstackBANK0
  1392  004C                     __pcstackBANK0:	
  1393  004C                     ??_OSCILLATOR_Initialize:	
  1394  004C                     ??_setup_TMR0:	
  1395                           ; 1 bytes @ 0x0
  1396                           
  1397  004C                     ??_start_TX_USART_ISR:	
  1398                           ; 1 bytes @ 0x0
  1399                           
  1400  004C                     ??_start_RX_USART_ISR:	
  1401                           ; 1 bytes @ 0x0
  1402                           
  1403  004C                     ??_start_RCM:	
  1404                           ; 1 bytes @ 0x0
  1405                           
  1406  004C                     ??_setup_ADC:	
  1407                           ; 1 bytes @ 0x0
  1408                           
  1409  004C                     ?_calculate_checksum:	
  1410                           ; 1 bytes @ 0x0
  1411                           
  1412  004C                     ??_PIN_MANAGER_Initialize:	
  1413                           ; 1 bytes @ 0x0
  1414                           
  1415  004C                     ??_SYSTEM_Initialize:	
  1416                           ; 1 bytes @ 0x0
  1417                           
  1418  004C                     ??_USARTX_change_pol:	
  1419                           ; 1 bytes @ 0x0
  1420                           
  1421  004C                     ?_BIO_config:	
  1422                           ; 1 bytes @ 0x0
  1423                           
  1424  004C                     ??_close_RX_USART:	
  1425                           ; 1 bytes @ 0x0
  1426                           
  1427  004C                     ?_lputs_ISR:	
  1428                           ; 1 bytes @ 0x0
  1429                           
  1430  004C                     ?_ADC_2:	
  1431                           ; 1 bytes @ 0x0
  1432                           
  1433  004C                     ?_ADC_4:	
  1434                           ; 2 bytes @ 0x0
  1435                           
  1436  004C                     ?_ADC_5:	
  1437                           ; 2 bytes @ 0x0
  1438                           
  1439  004C                     lputs_ISR@length:	
  1440                           ; 2 bytes @ 0x0
  1441                           
  1442  004C                     calculate_checksum@num:	
  1443                           ; 1 bytes @ 0x0
  1444                           
  1445  004C                     BIO_config@conf:	
  1446                           ; 1 bytes @ 0x0
  1447                           
  1448                           
  1449                           ; 2 bytes @ 0x0
  1450  004C                     	ds	1
  1451  004D                     ??_calculate_checksum:	
  1452  004D                     ??_lputs_ISR:	
  1453                           ; 1 bytes @ 0x1
  1454                           
  1455                           
  1456                           ; 1 bytes @ 0x1
  1457  004D                     	ds	1
  1458  004E                     ??_ADC_2:	
  1459  004E                     ??_ADC_4:	
  1460                           ; 1 bytes @ 0x2
  1461                           
  1462  004E                     ??_ADC_5:	
  1463                           ; 1 bytes @ 0x2
  1464                           
  1465  004E                     ??_BIO_config:	
  1466                           ; 1 bytes @ 0x2
  1467                           
  1468                           
  1469                           ; 1 bytes @ 0x2
  1470  004E                     	ds	1
  1471  004F                     BIO_config@i:	
  1472  004F                     lputs_ISR@i:	
  1473                           ; 1 bytes @ 0x3
  1474                           
  1475  004F                     calculate_checksum@data:	
  1476                           ; 1 bytes @ 0x3
  1477                           
  1478                           
  1479                           ; 1 bytes @ 0x3
  1480  004F                     	ds	1
  1481  0050                     BIO_config@out:	
  1482  0050                     lputs_ISR@data:	
  1483                           ; 1 bytes @ 0x4
  1484                           
  1485  0050                     calculate_checksum@check:	
  1486                           ; 1 bytes @ 0x4
  1487                           
  1488  0050                     ADC_2@ADC_value:	
  1489                           ; 1 bytes @ 0x4
  1490                           
  1491  0050                     ADC_4@ADC_value:	
  1492                           ; 2 bytes @ 0x4
  1493                           
  1494  0050                     ADC_5@ADC_value:	
  1495                           ; 2 bytes @ 0x4
  1496                           
  1497                           
  1498                           ; 2 bytes @ 0x4
  1499  0050                     	ds	1
  1500  0051                     ??_config_ASIC:	
  1501  0051                     ??_calibrate_reader:	
  1502                           ; 1 bytes @ 0x5
  1503                           
  1504  0051                     calculate_checksum@i:	
  1505                           ; 1 bytes @ 0x5
  1506                           
  1507                           
  1508                           ; 1 bytes @ 0x5
  1509  0051                     	ds	1
  1510  0052                     ??_read_ADC_channels:	
  1511  0052                     ??_measure_Impedance:	
  1512                           ; 1 bytes @ 0x6
  1513                           
  1514  0052                     ??_measure_Impedance_no_offset:	
  1515                           ; 1 bytes @ 0x6
  1516                           
  1517  0052                     ??_measure_Offset:	
  1518                           ; 1 bytes @ 0x6
  1519                           
  1520  0052                     ??_measure_Impedance_SE:	
  1521                           ; 1 bytes @ 0x6
  1522                           
  1523  0052                     config_ASIC@asic:	
  1524                           ; 1 bytes @ 0x6
  1525                           
  1526  0052                     calibrate_reader@aux:	
  1527                           ; 2 bytes @ 0x6
  1528                           
  1529                           
  1530                           ; 8 bytes @ 0x6
  1531  0052                     	ds	1
  1532  0053                     measure_Offset@aux:	
  1533  0053                     read_ADC_channels@aux:	
  1534                           ; 5 bytes @ 0x7
  1535                           
  1536  0053                     measure_Impedance@aux:	
  1537                           ; 7 bytes @ 0x7
  1538                           
  1539  0053                     measure_Impedance_no_offset@aux:	
  1540                           ; 13 bytes @ 0x7
  1541                           
  1542                           
  1543                           ; 13 bytes @ 0x7
  1544  0053                     	ds	1
  1545  0054                     measure_Impedance_SE@aux:	
  1546                           
  1547                           ; 13 bytes @ 0x8
  1548  0054                     	ds	4
  1549  0058                     measure_Offset@value1:	
  1550                           
  1551                           ; 2 bytes @ 0xC
  1552  0058                     	ds	2
  1553  005A                     read_ADC_channels@value1:	
  1554  005A                     measure_Offset@value2:	
  1555                           ; 2 bytes @ 0xE
  1556                           
  1557                           
  1558                           ; 2 bytes @ 0xE
  1559  005A                     	ds	2
  1560  005C                     read_ADC_channels@value2:	
  1561  005C                     measure_Offset@asic:	
  1562                           ; 2 bytes @ 0x10
  1563                           
  1564                           
  1565                           ; 2 bytes @ 0x10
  1566  005C                     	ds	2
  1567  005E                     read_ADC_channels@value3:	
  1568                           
  1569                           ; 2 bytes @ 0x12
  1570  005E                     	ds	2
  1571  0060                     measure_Impedance@value1:	
  1572  0060                     measure_Impedance_no_offset@value1:	
  1573                           ; 2 bytes @ 0x14
  1574                           
  1575                           
  1576                           ; 2 bytes @ 0x14
  1577  0060                     	ds	1
  1578  0061                     measure_Impedance_SE@check:	
  1579                           
  1580                           ; 1 bytes @ 0x15
  1581  0061                     	ds	1
  1582  0062                     measure_Impedance@value2:	
  1583  0062                     measure_Impedance_no_offset@value2:	
  1584                           ; 2 bytes @ 0x16
  1585                           
  1586  0062                     measure_Impedance_SE@value1:	
  1587                           ; 2 bytes @ 0x16
  1588                           
  1589                           
  1590                           ; 2 bytes @ 0x16
  1591  0062                     	ds	2
  1592  0064                     measure_Impedance@asic:	
  1593  0064                     measure_Impedance_no_offset@asic:	
  1594                           ; 2 bytes @ 0x18
  1595                           
  1596  0064                     measure_Impedance_SE@asic:	
  1597                           ; 2 bytes @ 0x18
  1598                           
  1599                           
  1600                           ; 2 bytes @ 0x18
  1601  0064                     	ds	2
  1602  0066                     ??_mess_handler:	
  1603                           
  1604                           ; 1 bytes @ 0x1A
  1605  0066                     	ds	1
  1606  0067                     ??_main:	
  1607                           
  1608                           ; 1 bytes @ 0x1B
  1609  0067                     	ds	1
  1610  0068                     main@i:	
  1611                           
  1612                           ; 1 bytes @ 0x1C
  1613  0068                     	ds	1
  1614                           
  1615                           	psect	maintext
  1616  01F7                     __pmaintext:	
  1617 ;;
  1618 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1619 ;;
  1620 ;; *************** function _main *****************
  1621 ;; Defined at:
  1622 ;;		line 20 in file "main.c"
  1623 ;; Parameters:    Size  Location     Type
  1624 ;;		None
  1625 ;; Auto vars:     Size  Location     Type
  1626 ;;  i               1   28[BANK0 ] unsigned char 
  1627 ;; Return value:  Size  Location     Type
  1628 ;;                  1    wreg      void 
  1629 ;; Registers used:
  1630 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1631 ;; Tracked objects:
  1632 ;;		On entry : B1F/0
  1633 ;;		On exit  : 0/0
  1634 ;;		Unchanged: 0/0
  1635 ;; Data sizes:     COMMON   BANK0   BANK1
  1636 ;;      Params:         0       0       0
  1637 ;;      Locals:         0       1       0
  1638 ;;      Temps:          0       1       0
  1639 ;;      Totals:         0       2       0
  1640 ;;Total ram usage:        2 bytes
  1641 ;; Hardware stack levels required when called:    6
  1642 ;; This function calls:
  1643 ;;		_SYSTEM_Initialize
  1644 ;;		_USARTX_change_pol
  1645 ;;		_mess_handler
  1646 ;;		_setup_ADC
  1647 ;;		_setup_TMR0
  1648 ;;		_start_RCM
  1649 ;;		_start_RX_USART_ISR
  1650 ;;		_start_TX_USART_ISR
  1651 ;; This function is called by:
  1652 ;;		Startup code after reset
  1653 ;; This function uses a non-reentrant model
  1654 ;;
  1655                           
  1656                           
  1657                           ;psect for function _main
  1658  01F7                     _main:	
  1659                           
  1660                           ;main.c: 22: unsigned char i;
  1661                           ;main.c: 24: SYSTEM_Initialize();
  1662                           
  1663                           ;incstack = 0
  1664                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1665  01F7  2481               	fcall	_SYSTEM_Initialize
  1666                           
  1667                           ;main.c: 26: USARTX_change_pol();
  1668  01F8  247E               	fcall	_USARTX_change_pol
  1669                           
  1670                           ;main.c: 28: setup_TMR0();
  1671  01F9  245A               	fcall	_setup_TMR0
  1672                           
  1673                           ;main.c: 29: start_TX_USART_ISR();
  1674  01FA  244B               	fcall	_start_TX_USART_ISR
  1675                           
  1676                           ;main.c: 30: start_RX_USART_ISR();
  1677  01FB  2419               	fcall	_start_RX_USART_ISR
  1678                           
  1679                           ;main.c: 31: start_RCM();
  1680  01FC  247A               	fcall	_start_RCM
  1681                           
  1682                           ;main.c: 32: setup_ADC();
  1683  01FD  246E               	fcall	_setup_ADC
  1684                           
  1685                           ;main.c: 35: RA5 = 0;
  1686  01FE  0020               	movlb	0	; select bank0
  1687  01FF  128C               	bcf	12,5	;volatile
  1688                           
  1689                           ;main.c: 36: _delay((unsigned long)((150)*(500000/4000.0)));
  1690  0200  3019               	movlw	25
  1691  0201  0020               	movlb	0	; select bank0
  1692  0202  00E7               	movwf	??_main
  1693  0203  3058               	movlw	88
  1694  0204                     u897:	
  1695  0204  0B89               	decfsz	9,f
  1696  0205  2A04               	goto	u897
  1697  0206  0BE7               	decfsz	??_main,f
  1698  0207  2A04               	goto	u897
  1699  0208  0000               	nop
  1700                           
  1701                           ;main.c: 37: RA5 = 1;
  1702  0209  0020               	movlb	0	; select bank0
  1703  020A  168C               	bsf	12,5	;volatile
  1704  020B                     l115:	
  1705                           ;main.c: 106: while(1) {
  1706                           
  1707  020B  0064               	clrwdt	;# 
  1708                           
  1709                           ;main.c: 110: if (TIMER0_flag) {
  1710  020C  0020               	movlb	0	; select bank0
  1711  020D  083E               	movf	_TIMER0_flag,w	;volatile
  1712  020E  1903               	btfsc	3,2
  1713  020F  2A0B               	goto	l115
  1714                           
  1715                           ;main.c: 111: TIMER0_flag = 0;
  1716  0210  01BE               	clrf	_TIMER0_flag	;volatile
  1717                           
  1718                           ;main.c: 113: if (USART_rx_index > 10) {
  1719  0211  300B               	movlw	11
  1720  0212  0240               	subwf	_USART_rx_index,w	;volatile
  1721  0213  1C03               	skipc
  1722  0214  2A17               	goto	l2528
  1723                           
  1724                           ;main.c: 114: USART_rx_index = 0;
  1725  0215  01C0               	clrf	_USART_rx_index	;volatile
  1726                           
  1727                           ;main.c: 115: continue;
  1728  0216  2A0B               	goto	l115
  1729  0217                     l2528:	
  1730                           
  1731                           ;main.c: 116: }
  1732                           ;main.c: 118: if(USART_rx_index == 0)
  1733  0217  0840               	movf	_USART_rx_index,w	;volatile
  1734  0218  1903               	btfsc	3,2
  1735                           
  1736                           ;main.c: 119: continue;
  1737  0219  2A0B               	goto	l115
  1738                           
  1739                           ;main.c: 122: mess_rec_size = USART_rx_index;
  1740  021A  0840               	movf	_USART_rx_index,w	;volatile
  1741  021B  00E7               	movwf	??_main
  1742  021C  0867               	movf	??_main,w
  1743  021D  00C1               	movwf	_mess_rec_size	;volatile
  1744                           
  1745                           ;main.c: 123: USART_rx_index = 0;
  1746  021E  01C0               	clrf	_USART_rx_index	;volatile
  1747                           
  1748                           ;main.c: 125: for (i = 0; i < mess_rec_size; i++)
  1749  021F  01E8               	clrf	main@i
  1750  0220                     l2542:	
  1751  0220  0841               	movf	_mess_rec_size,w	;volatile
  1752  0221  0268               	subwf	main@i,w
  1753  0222  1803               	btfsc	3,0
  1754  0223  2A35               	goto	l2544
  1755                           
  1756                           ;main.c: 126: mess_rec[i] = USART_rx_data[i];
  1757  0224  0868               	movf	main@i,w
  1758  0225  3E20               	addlw	(low (_USART_rx_data| 0))& (0+255)
  1759  0226  0086               	movwf	6
  1760  0227  0187               	clrf	7
  1761  0228  0801               	movf	1,w
  1762  0229  00E7               	movwf	??_main
  1763  022A  0868               	movf	main@i,w
  1764  022B  3E42               	addlw	(low (_mess_rec| 0))& (0+255)
  1765  022C  0086               	movwf	6
  1766  022D  0187               	clrf	7
  1767  022E  0867               	movf	??_main,w
  1768  022F  0081               	movwf	1
  1769  0230  3001               	movlw	1
  1770  0231  00E7               	movwf	??_main
  1771  0232  0867               	movf	??_main,w
  1772  0233  07E8               	addwf	main@i,f
  1773  0234  2A20               	goto	l2542
  1774  0235                     l2544:	
  1775                           
  1776                           ;main.c: 129: mess_handler();
  1777  0235  22AF               	fcall	_mess_handler
  1778  0236  2A0B               	goto	l115
  1779  0237                     __end_of_main:	
  1780                           
  1781                           	psect	text1
  1782  044B                     __ptext1:	
  1783 ;; *************** function _start_TX_USART_ISR *****************
  1784 ;; Defined at:
  1785 ;;		line 101 in file "USART1823.c"
  1786 ;; Parameters:    Size  Location     Type
  1787 ;;		None
  1788 ;; Auto vars:     Size  Location     Type
  1789 ;;		None
  1790 ;; Return value:  Size  Location     Type
  1791 ;;                  1    wreg      void 
  1792 ;; Registers used:
  1793 ;;		wreg, status,2
  1794 ;; Tracked objects:
  1795 ;;		On entry : 0/0
  1796 ;;		On exit  : 0/0
  1797 ;;		Unchanged: 0/0
  1798 ;; Data sizes:     COMMON   BANK0   BANK1
  1799 ;;      Params:         0       0       0
  1800 ;;      Locals:         0       0       0
  1801 ;;      Temps:          0       0       0
  1802 ;;      Totals:         0       0       0
  1803 ;;Total ram usage:        0 bytes
  1804 ;; Hardware stack levels used:    1
  1805 ;; Hardware stack levels required when called:    2
  1806 ;; This function calls:
  1807 ;;		Nothing
  1808 ;; This function is called by:
  1809 ;;		_main
  1810 ;; This function uses a non-reentrant model
  1811 ;;
  1812                           
  1813                           
  1814                           ;psect for function _start_TX_USART_ISR
  1815  044B                     _start_TX_USART_ISR:	
  1816                           
  1817                           ;USART1823.c: 103: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  1818                           
  1819                           ;incstack = 0
  1820                           ; Regs used in _start_TX_USART_ISR: [wreg+status,2]
  1821  044B  0023               	movlb	3	; select bank3
  1822  044C  151E               	bsf	30,2	;volatile
  1823  044D  159F               	bsf	31,3	;volatile
  1824  044E  019C               	clrf	28	;volatile
  1825  044F  300C               	movlw	12
  1826  0450  009B               	movwf	27	;volatile
  1827                           
  1828                           ;USART1823.c: 104: SYNC = 0;
  1829  0451  121E               	bcf	30,4	;volatile
  1830                           
  1831                           ;USART1823.c: 105: SPEN = 1;
  1832  0452  179D               	bsf	29,7	;volatile
  1833                           
  1834                           ;USART1823.c: 106: TXEN = 1;
  1835  0453  169E               	bsf	30,5	;volatile
  1836                           
  1837                           ;USART1823.c: 108: USART_tx_flag = 0;
  1838  0454  01F2               	clrf	_USART_tx_flag	;volatile
  1839                           
  1840                           ;USART1823.c: 109: USART_tx_index = 0;
  1841  0455  01F3               	clrf	_USART_tx_index	;volatile
  1842                           
  1843                           ;USART1823.c: 110: USART_tx_length = 0;
  1844  0456  01F4               	clrf	_USART_tx_length	;volatile
  1845                           
  1846                           ;USART1823.c: 113: PEIE = 1;
  1847  0457  170B               	bsf	11,6	;volatile
  1848                           
  1849                           ;USART1823.c: 114: GIE = 1;
  1850  0458  178B               	bsf	11,7	;volatile
  1851  0459  0008               	return
  1852  045A                     __end_of_start_TX_USART_ISR:	
  1853                           
  1854                           	psect	text2
  1855  0419                     __ptext2:	
  1856 ;; *************** function _start_RX_USART_ISR *****************
  1857 ;; Defined at:
  1858 ;;		line 83 in file "USART1823.c"
  1859 ;; Parameters:    Size  Location     Type
  1860 ;;		None
  1861 ;; Auto vars:     Size  Location     Type
  1862 ;;		None
  1863 ;; Return value:  Size  Location     Type
  1864 ;;                  1    wreg      void 
  1865 ;; Registers used:
  1866 ;;		wreg, status,2
  1867 ;; Tracked objects:
  1868 ;;		On entry : 0/0
  1869 ;;		On exit  : 0/0
  1870 ;;		Unchanged: 0/0
  1871 ;; Data sizes:     COMMON   BANK0   BANK1
  1872 ;;      Params:         0       0       0
  1873 ;;      Locals:         0       0       0
  1874 ;;      Temps:          0       0       0
  1875 ;;      Totals:         0       0       0
  1876 ;;Total ram usage:        0 bytes
  1877 ;; Hardware stack levels used:    1
  1878 ;; Hardware stack levels required when called:    2
  1879 ;; This function calls:
  1880 ;;		Nothing
  1881 ;; This function is called by:
  1882 ;;		_main
  1883 ;; This function uses a non-reentrant model
  1884 ;;
  1885                           
  1886                           
  1887                           ;psect for function _start_RX_USART_ISR
  1888  0419                     _start_RX_USART_ISR:	
  1889                           
  1890                           ;USART1823.c: 86: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  1891                           
  1892                           ;incstack = 0
  1893                           ; Regs used in _start_RX_USART_ISR: [wreg+status,2]
  1894  0419  0023               	movlb	3	; select bank3
  1895  041A  151E               	bsf	30,2	;volatile
  1896  041B  159F               	bsf	31,3	;volatile
  1897  041C  019C               	clrf	28	;volatile
  1898  041D  300C               	movlw	12
  1899  041E  009B               	movwf	27	;volatile
  1900                           
  1901                           ;USART1823.c: 88: SYNC = 0;
  1902  041F  121E               	bcf	30,4	;volatile
  1903                           
  1904                           ;USART1823.c: 89: SPEN = 1;
  1905  0420  179D               	bsf	29,7	;volatile
  1906                           
  1907                           ;USART1823.c: 90: CREN = 1;
  1908  0421  161D               	bsf	29,4	;volatile
  1909                           
  1910                           ;USART1823.c: 92: USART_rx_flag = 0;
  1911  0422  0020               	movlb	0	; select bank0
  1912  0423  01BF               	clrf	_USART_rx_flag	;volatile
  1913                           
  1914                           ;USART1823.c: 93: USART_rx_index = 0;
  1915  0424  01C0               	clrf	_USART_rx_index	;volatile
  1916                           
  1917                           ;USART1823.c: 95: RCIE = 1;
  1918  0425  0021               	movlb	1	; select bank1
  1919  0426  1691               	bsf	17,5	;volatile
  1920                           
  1921                           ;USART1823.c: 96: PEIE = 1;
  1922  0427  170B               	bsf	11,6	;volatile
  1923                           
  1924                           ;USART1823.c: 97: GIE = 1;
  1925  0428  178B               	bsf	11,7	;volatile
  1926  0429  0008               	return
  1927  042A                     __end_of_start_RX_USART_ISR:	
  1928                           
  1929                           	psect	text3
  1930  047A                     __ptext3:	
  1931 ;; *************** function _start_RCM *****************
  1932 ;; Defined at:
  1933 ;;		line 4 in file "RCM1823.c"
  1934 ;; Parameters:    Size  Location     Type
  1935 ;;		None
  1936 ;; Auto vars:     Size  Location     Type
  1937 ;;		None
  1938 ;; Return value:  Size  Location     Type
  1939 ;;                  1    wreg      void 
  1940 ;; Registers used:
  1941 ;;		wreg
  1942 ;; Tracked objects:
  1943 ;;		On entry : 0/0
  1944 ;;		On exit  : 0/0
  1945 ;;		Unchanged: 0/0
  1946 ;; Data sizes:     COMMON   BANK0   BANK1
  1947 ;;      Params:         0       0       0
  1948 ;;      Locals:         0       0       0
  1949 ;;      Temps:          0       0       0
  1950 ;;      Totals:         0       0       0
  1951 ;;Total ram usage:        0 bytes
  1952 ;; Hardware stack levels used:    1
  1953 ;; Hardware stack levels required when called:    2
  1954 ;; This function calls:
  1955 ;;		Nothing
  1956 ;; This function is called by:
  1957 ;;		_main
  1958 ;; This function uses a non-reentrant model
  1959 ;;
  1960                           
  1961                           
  1962                           ;psect for function _start_RCM
  1963  047A                     _start_RCM:	
  1964                           
  1965                           ;RCM1823.c: 6: CLKRCON = 0b11010000;
  1966                           
  1967                           ;incstack = 0
  1968                           ; Regs used in _start_RCM: [wreg]
  1969  047A  30D0               	movlw	208
  1970  047B  0027               	movlb	7	; select bank7
  1971  047C  009A               	movwf	26	;volatile
  1972  047D  0008               	return
  1973  047E                     __end_of_start_RCM:	
  1974                           
  1975                           	psect	text4
  1976  045A                     __ptext4:	
  1977 ;; *************** function _setup_TMR0 *****************
  1978 ;; Defined at:
  1979 ;;		line 10 in file "TMR0.c"
  1980 ;; Parameters:    Size  Location     Type
  1981 ;;		None
  1982 ;; Auto vars:     Size  Location     Type
  1983 ;;		None
  1984 ;; Return value:  Size  Location     Type
  1985 ;;                  1    wreg      void 
  1986 ;; Registers used:
  1987 ;;		None
  1988 ;; Tracked objects:
  1989 ;;		On entry : 0/0
  1990 ;;		On exit  : 0/0
  1991 ;;		Unchanged: 0/0
  1992 ;; Data sizes:     COMMON   BANK0   BANK1
  1993 ;;      Params:         0       0       0
  1994 ;;      Locals:         0       0       0
  1995 ;;      Temps:          0       0       0
  1996 ;;      Totals:         0       0       0
  1997 ;;Total ram usage:        0 bytes
  1998 ;; Hardware stack levels used:    1
  1999 ;; Hardware stack levels required when called:    2
  2000 ;; This function calls:
  2001 ;;		Nothing
  2002 ;; This function is called by:
  2003 ;;		_main
  2004 ;; This function uses a non-reentrant model
  2005 ;;
  2006                           
  2007                           
  2008                           ;psect for function _setup_TMR0
  2009  045A                     _setup_TMR0:	
  2010                           
  2011                           ;TMR0.c: 13: PS2 = 0; PS1 = 1; PS0 = 0;
  2012                           
  2013                           ;incstack = 0
  2014                           ; Regs used in _setup_TMR0: []
  2015  045A  0021               	movlb	1	; select bank1
  2016  045B  1115               	bcf	21,2	;volatile
  2017  045C  1495               	bsf	21,1	;volatile
  2018  045D  1015               	bcf	21,0	;volatile
  2019                           
  2020                           ;TMR0.c: 16: PSA = 0;
  2021  045E  1195               	bcf	21,3	;volatile
  2022                           
  2023                           ;TMR0.c: 18: TMR0CS = 0;
  2024  045F  1295               	bcf	21,5	;volatile
  2025  0460  0008               	return
  2026  0461                     __end_of_setup_TMR0:	
  2027                           
  2028                           	psect	text5
  2029  046E                     __ptext5:	
  2030 ;; *************** function _setup_ADC *****************
  2031 ;; Defined at:
  2032 ;;		line 3 in file "ADC1823.c"
  2033 ;; Parameters:    Size  Location     Type
  2034 ;;		None
  2035 ;; Auto vars:     Size  Location     Type
  2036 ;;		None
  2037 ;; Return value:  Size  Location     Type
  2038 ;;                  1    wreg      void 
  2039 ;; Registers used:
  2040 ;;		wreg
  2041 ;; Tracked objects:
  2042 ;;		On entry : 0/0
  2043 ;;		On exit  : 0/0
  2044 ;;		Unchanged: 0/0
  2045 ;; Data sizes:     COMMON   BANK0   BANK1
  2046 ;;      Params:         0       0       0
  2047 ;;      Locals:         0       0       0
  2048 ;;      Temps:          0       0       0
  2049 ;;      Totals:         0       0       0
  2050 ;;Total ram usage:        0 bytes
  2051 ;; Hardware stack levels used:    1
  2052 ;; Hardware stack levels required when called:    2
  2053 ;; This function calls:
  2054 ;;		Nothing
  2055 ;; This function is called by:
  2056 ;;		_main
  2057 ;; This function uses a non-reentrant model
  2058 ;;
  2059                           
  2060                           
  2061                           ;psect for function _setup_ADC
  2062  046E                     _setup_ADC:	
  2063                           
  2064                           ;ADC1823.c: 20: ADCON1 = 0b11110000;
  2065                           
  2066                           ;incstack = 0
  2067                           ; Regs used in _setup_ADC: [wreg]
  2068  046E  30F0               	movlw	240
  2069  046F  0021               	movlb	1	; select bank1
  2070  0470  009E               	movwf	30	;volatile
  2071                           
  2072                           ;ADC1823.c: 21: { ADCON0 = 0b00100100;};
  2073  0471  3024               	movlw	36
  2074  0472  009D               	movwf	29	;volatile
  2075  0473  0008               	return
  2076  0474                     __end_of_setup_ADC:	
  2077                           
  2078                           	psect	text6
  2079  02AF                     __ptext6:	
  2080 ;; *************** function _mess_handler *****************
  2081 ;; Defined at:
  2082 ;;		line 11 in file "comm.c"
  2083 ;; Parameters:    Size  Location     Type
  2084 ;;		None
  2085 ;; Auto vars:     Size  Location     Type
  2086 ;;		None
  2087 ;; Return value:  Size  Location     Type
  2088 ;;                  1    wreg      void 
  2089 ;; Registers used:
  2090 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2091 ;; Tracked objects:
  2092 ;;		On entry : 0/0
  2093 ;;		On exit  : 0/0
  2094 ;;		Unchanged: 0/0
  2095 ;; Data sizes:     COMMON   BANK0   BANK1
  2096 ;;      Params:         0       0       0
  2097 ;;      Locals:         0       0       0
  2098 ;;      Temps:          0       1       0
  2099 ;;      Totals:         0       1       0
  2100 ;;Total ram usage:        1 bytes
  2101 ;; Hardware stack levels used:    1
  2102 ;; Hardware stack levels required when called:    5
  2103 ;; This function calls:
  2104 ;;		_calibrate_reader
  2105 ;;		_config_ASIC
  2106 ;;		_lputs_ISR
  2107 ;;		_measure_Impedance
  2108 ;;		_measure_Impedance_SE
  2109 ;;		_measure_Impedance_no_offset
  2110 ;;		_measure_Offset
  2111 ;;		_read_ADC_channels
  2112 ;; This function is called by:
  2113 ;;		_main
  2114 ;; This function uses a non-reentrant model
  2115 ;;
  2116                           
  2117                           
  2118                           ;psect for function _mess_handler
  2119  02AF                     _mess_handler:	
  2120                           
  2121                           ;comm.c: 16: switch (mess_rec[0]) {
  2122                           
  2123                           ;incstack = 0
  2124                           ; Regs used in _mess_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2125  02AF  2AC6               	goto	l2506
  2126  02B0                     l2488:	
  2127                           ;comm.c: 17: case 't':
  2128                           
  2129                           
  2130                           ;comm.c: 18: lputs_ISR(mess_rec,mess_rec_size);
  2131  02B0  0020               	movlb	0	; select bank0
  2132  02B1  0841               	movf	_mess_rec_size,w	;volatile
  2133  02B2  00E6               	movwf	??_mess_handler
  2134  02B3  0866               	movf	??_mess_handler,w
  2135  02B4  00CC               	movwf	lputs_ISR@length
  2136  02B5  3042               	movlw	(low (_mess_rec| 0))& (0+255)
  2137  02B6  233D               	fcall	_lputs_ISR
  2138                           
  2139                           ;comm.c: 19: break;
  2140  02B7  0008               	return
  2141  02B8                     l2490:	
  2142                           ;comm.c: 21: case 'c':
  2143                           
  2144                           
  2145                           ;comm.c: 22: config_ASIC();
  2146  02B8  2403               	fcall	_config_ASIC
  2147                           
  2148                           ;comm.c: 23: break;
  2149  02B9  0008               	return
  2150  02BA                     l2492:	
  2151                           ;comm.c: 25: case 'm':
  2152                           
  2153                           
  2154                           ;comm.c: 26: read_ADC_channels();
  2155  02BA  2276               	fcall	_read_ADC_channels
  2156                           
  2157                           ;comm.c: 27: break;
  2158  02BB  0008               	return
  2159  02BC                     l2494:	
  2160                           ;comm.c: 29: case 'z':
  2161                           
  2162                           
  2163                           ;comm.c: 30: measure_Impedance();
  2164  02BC  2065               	fcall	_measure_Impedance
  2165                           
  2166                           ;comm.c: 31: break;
  2167  02BD  0008               	return
  2168  02BE                     l2496:	
  2169                           ;comm.c: 33: case 'y':
  2170                           
  2171                           
  2172                           ;comm.c: 34: measure_Impedance_no_offset();
  2173  02BE  218C               	fcall	_measure_Impedance_no_offset
  2174                           
  2175                           ;comm.c: 35: break;
  2176  02BF  0008               	return
  2177  02C0                     l2498:	
  2178                           ;comm.c: 37: case 'o':
  2179                           
  2180                           
  2181                           ;comm.c: 38: measure_Offset();
  2182  02C0  2237               	fcall	_measure_Offset
  2183                           
  2184                           ;comm.c: 39: break;
  2185  02C1  0008               	return
  2186  02C2                     l2500:	
  2187                           ;comm.c: 41: case 's':
  2188                           
  2189                           
  2190                           ;comm.c: 42: measure_Impedance_SE();
  2191  02C2  20FB               	fcall	_measure_Impedance_SE
  2192                           
  2193                           ;comm.c: 43: break;
  2194  02C3  0008               	return
  2195  02C4                     l2502:	
  2196                           ;comm.c: 46: case '&':
  2197                           
  2198                           
  2199                           ;comm.c: 47: calibrate_reader();
  2200  02C4  22E2               	fcall	_calibrate_reader
  2201                           
  2202                           ;comm.c: 54: }
  2203                           
  2204                           ;comm.c: 53: break;
  2205                           
  2206                           ;comm.c: 52: default:
  2207                           
  2208                           ;comm.c: 48: break;
  2209  02C5  0008               	return
  2210  02C6                     l2506:	
  2211  02C6  0020               	movlb	0	; select bank0
  2212  02C7  0842               	movf	_mess_rec,w	;volatile
  2213                           
  2214                           ; Switch size 1, requested type "space"
  2215                           ; Number of cases is 8, Range of values is 38 to 122
  2216                           ; switch strategies available:
  2217                           ; Name         Instructions Cycles
  2218                           ; simple_byte           25    13 (average)
  2219                           ; direct_byte          179     9 (fixed)
  2220                           ; jumptable            263     9 (fixed)
  2221                           ;	Chosen strategy is simple_byte
  2222  02C8  3A26               	xorlw	38	; case 38
  2223  02C9  1903               	skipnz
  2224  02CA  2AC4               	goto	l2502
  2225  02CB  3A45               	xorlw	69	; case 99
  2226  02CC  1903               	skipnz
  2227  02CD  2AB8               	goto	l2490
  2228  02CE  3A0E               	xorlw	14	; case 109
  2229  02CF  1903               	skipnz
  2230  02D0  2ABA               	goto	l2492
  2231  02D1  3A02               	xorlw	2	; case 111
  2232  02D2  1903               	skipnz
  2233  02D3  2AC0               	goto	l2498
  2234  02D4  3A1C               	xorlw	28	; case 115
  2235  02D5  1903               	skipnz
  2236  02D6  2AC2               	goto	l2500
  2237  02D7  3A07               	xorlw	7	; case 116
  2238  02D8  1903               	skipnz
  2239  02D9  2AB0               	goto	l2488
  2240  02DA  3A0D               	xorlw	13	; case 121
  2241  02DB  1903               	skipnz
  2242  02DC  2ABE               	goto	l2496
  2243  02DD  3A03               	xorlw	3	; case 122
  2244  02DE  1903               	skipnz
  2245  02DF  2ABC               	goto	l2494
  2246  02E0  2AE1               	goto	l344
  2247  02E1                     l344:	
  2248  02E1  0008               	return
  2249  02E2                     __end_of_mess_handler:	
  2250                           
  2251                           	psect	text7
  2252  0276                     __ptext7:	
  2253 ;; *************** function _read_ADC_channels *****************
  2254 ;; Defined at:
  2255 ;;		line 87 in file "comm.c"
  2256 ;; Parameters:    Size  Location     Type
  2257 ;;		None
  2258 ;; Auto vars:     Size  Location     Type
  2259 ;;  aux             7    7[BANK0 ] unsigned char [7]
  2260 ;;  value3          2   18[BANK0 ] unsigned short 
  2261 ;;  value2          2   16[BANK0 ] unsigned short 
  2262 ;;  value1          2   14[BANK0 ] unsigned short 
  2263 ;; Return value:  Size  Location     Type
  2264 ;;                  1    wreg      void 
  2265 ;; Registers used:
  2266 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2267 ;; Tracked objects:
  2268 ;;		On entry : 0/0
  2269 ;;		On exit  : 0/0
  2270 ;;		Unchanged: 0/0
  2271 ;; Data sizes:     COMMON   BANK0   BANK1
  2272 ;;      Params:         0       0       0
  2273 ;;      Locals:         0      13       0
  2274 ;;      Temps:          0       1       0
  2275 ;;      Totals:         0      14       0
  2276 ;;Total ram usage:       14 bytes
  2277 ;; Hardware stack levels used:    1
  2278 ;; Hardware stack levels required when called:    4
  2279 ;; This function calls:
  2280 ;;		_ADC_2
  2281 ;;		_ADC_4
  2282 ;;		_ADC_5
  2283 ;;		_lputs_ISR
  2284 ;; This function is called by:
  2285 ;;		_mess_handler
  2286 ;; This function uses a non-reentrant model
  2287 ;;
  2288                           
  2289                           
  2290                           ;psect for function _read_ADC_channels
  2291  0276                     _read_ADC_channels:	
  2292                           
  2293                           ;comm.c: 89: unsigned char aux[7];
  2294                           ;comm.c: 90: unsigned short value1,value2,value3;
  2295                           ;comm.c: 93: value1 = ADC_2();
  2296                           
  2297                           ;incstack = 0
  2298                           ; Regs used in _read_ADC_channels: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2299  0276  23AE               	fcall	_ADC_2
  2300  0277  0020               	movlb	0	; select bank0
  2301  0278  084D               	movf	?_ADC_2+1,w
  2302  0279  00DB               	movwf	read_ADC_channels@value1+1
  2303  027A  084C               	movf	?_ADC_2,w
  2304  027B  00DA               	movwf	read_ADC_channels@value1
  2305                           
  2306                           ;comm.c: 95: value2 = ADC_4();
  2307  027C  238B               	fcall	_ADC_4
  2308  027D  0020               	movlb	0	; select bank0
  2309  027E  084D               	movf	?_ADC_4+1,w
  2310  027F  00DD               	movwf	read_ADC_channels@value2+1
  2311  0280  084C               	movf	?_ADC_4,w
  2312  0281  00DC               	movwf	read_ADC_channels@value2
  2313                           
  2314                           ;comm.c: 97: value3 = ADC_5();
  2315  0282  2368               	fcall	_ADC_5
  2316  0283  0020               	movlb	0	; select bank0
  2317  0284  084D               	movf	?_ADC_5+1,w
  2318  0285  00DF               	movwf	read_ADC_channels@value3+1
  2319  0286  084C               	movf	?_ADC_5,w
  2320  0287  00DE               	movwf	read_ADC_channels@value3
  2321                           
  2322                           ;comm.c: 98: { ADCON0 = 0b00100100;};
  2323  0288  3024               	movlw	36
  2324  0289  0021               	movlb	1	; select bank1
  2325  028A  009D               	movwf	29	;volatile
  2326                           
  2327                           ;comm.c: 100: aux[0] = 'm';
  2328  028B  306D               	movlw	109
  2329  028C  0020               	movlb	0	; select bank0
  2330  028D  00D2               	movwf	??_read_ADC_channels
  2331  028E  0852               	movf	??_read_ADC_channels,w
  2332  028F  00D3               	movwf	read_ADC_channels@aux
  2333                           
  2334                           ;comm.c: 101: aux[1] = (unsigned char)(value1 & 0xff);
  2335  0290  085A               	movf	read_ADC_channels@value1,w
  2336  0291  00D2               	movwf	??_read_ADC_channels
  2337  0292  0852               	movf	??_read_ADC_channels,w
  2338  0293  00D4               	movwf	read_ADC_channels@aux+1
  2339                           
  2340                           ;comm.c: 102: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  2341  0294  085B               	movf	read_ADC_channels@value1+1,w
  2342  0295  00D2               	movwf	??_read_ADC_channels
  2343  0296  0852               	movf	??_read_ADC_channels,w
  2344  0297  00D5               	movwf	read_ADC_channels@aux+2
  2345                           
  2346                           ;comm.c: 103: aux[3] = (unsigned char)(value2 & 0xff);
  2347  0298  085C               	movf	read_ADC_channels@value2,w
  2348  0299  00D2               	movwf	??_read_ADC_channels
  2349  029A  0852               	movf	??_read_ADC_channels,w
  2350  029B  00D6               	movwf	read_ADC_channels@aux+3
  2351                           
  2352                           ;comm.c: 104: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  2353  029C  085D               	movf	read_ADC_channels@value2+1,w
  2354  029D  00D2               	movwf	??_read_ADC_channels
  2355  029E  0852               	movf	??_read_ADC_channels,w
  2356  029F  00D7               	movwf	read_ADC_channels@aux+4
  2357                           
  2358                           ;comm.c: 105: aux[5] = (unsigned char)(value3 & 0xff);
  2359  02A0  085E               	movf	read_ADC_channels@value3,w
  2360  02A1  00D2               	movwf	??_read_ADC_channels
  2361  02A2  0852               	movf	??_read_ADC_channels,w
  2362  02A3  00D8               	movwf	read_ADC_channels@aux+5
  2363                           
  2364                           ;comm.c: 106: aux[6] = (unsigned char)((value3 >> 8) & 0xff);
  2365  02A4  085F               	movf	read_ADC_channels@value3+1,w
  2366  02A5  00D2               	movwf	??_read_ADC_channels
  2367  02A6  0852               	movf	??_read_ADC_channels,w
  2368  02A7  00D9               	movwf	read_ADC_channels@aux+6
  2369                           
  2370                           ;comm.c: 108: lputs_ISR(aux,7);
  2371  02A8  3007               	movlw	7
  2372  02A9  00D2               	movwf	??_read_ADC_channels
  2373  02AA  0852               	movf	??_read_ADC_channels,w
  2374  02AB  00CC               	movwf	lputs_ISR@length
  2375  02AC  3053               	movlw	(low (read_ADC_channels@aux| 0))& (0+255)
  2376  02AD  233D               	fcall	_lputs_ISR
  2377  02AE  0008               	return
  2378  02AF                     __end_of_read_ADC_channels:	
  2379                           
  2380                           	psect	text8
  2381  0237                     __ptext8:	
  2382 ;; *************** function _measure_Offset *****************
  2383 ;; Defined at:
  2384 ;;		line 261 in file "comm.c"
  2385 ;; Parameters:    Size  Location     Type
  2386 ;;		None
  2387 ;; Auto vars:     Size  Location     Type
  2388 ;;  aux             5    7[BANK0 ] unsigned char [5]
  2389 ;;  asic            2   16[BANK0 ] struct .
  2390 ;;  value2          2   14[BANK0 ] unsigned short 
  2391 ;;  value1          2   12[BANK0 ] unsigned short 
  2392 ;; Return value:  Size  Location     Type
  2393 ;;                  1    wreg      void 
  2394 ;; Registers used:
  2395 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2396 ;; Tracked objects:
  2397 ;;		On entry : 0/0
  2398 ;;		On exit  : 0/0
  2399 ;;		Unchanged: 0/0
  2400 ;; Data sizes:     COMMON   BANK0   BANK1
  2401 ;;      Params:         0       0       0
  2402 ;;      Locals:         0      11       0
  2403 ;;      Temps:          0       1       0
  2404 ;;      Totals:         0      12       0
  2405 ;;Total ram usage:       12 bytes
  2406 ;; Hardware stack levels used:    1
  2407 ;; Hardware stack levels required when called:    4
  2408 ;; This function calls:
  2409 ;;		_ADC_2
  2410 ;;		_ADC_4
  2411 ;;		_BIO_config
  2412 ;;		_lputs_ISR
  2413 ;; This function is called by:
  2414 ;;		_mess_handler
  2415 ;; This function uses a non-reentrant model
  2416 ;;
  2417                           
  2418                           
  2419                           ;psect for function _measure_Offset
  2420  0237                     _measure_Offset:	
  2421                           
  2422                           ;comm.c: 263: unsigned char aux[5];
  2423                           ;comm.c: 264: unsigned short value1,value2;
  2424                           ;comm.c: 267: BIO3 asic;
  2425                           ;comm.c: 273: aux[0] = 'o';
  2426                           
  2427                           ;incstack = 0
  2428                           ; Regs used in _measure_Offset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2429  0237  306F               	movlw	111
  2430  0238  0020               	movlb	0	; select bank0
  2431  0239  00D2               	movwf	??_measure_Offset
  2432  023A  0852               	movf	??_measure_Offset,w
  2433  023B  00D3               	movwf	measure_Offset@aux
  2434                           
  2435                           ;comm.c: 276: asic.data[0] = (unsigned short)(mess_rec[1]);
  2436  023C  0843               	movf	_mess_rec+1,w	;volatile
  2437  023D  00D2               	movwf	??_measure_Offset
  2438  023E  0852               	movf	??_measure_Offset,w
  2439  023F  00DC               	movwf	measure_Offset@asic
  2440                           
  2441                           ;comm.c: 277: asic.data[1] = (unsigned short)(mess_rec[2]);
  2442  0240  0844               	movf	_mess_rec+2,w	;volatile
  2443  0241  00D2               	movwf	??_measure_Offset
  2444  0242  0852               	movf	??_measure_Offset,w
  2445  0243  00DD               	movwf	measure_Offset@asic+1
  2446                           
  2447                           ;comm.c: 280: asic.data_bits.CE = 0;
  2448  0244  135C               	bcf	measure_Offset@asic,6
  2449                           
  2450                           ;comm.c: 281: BIO_config(asic);
  2451  0245  085D               	movf	measure_Offset@asic+1,w
  2452  0246  00CD               	movwf	BIO_config@conf+1
  2453  0247  085C               	movf	measure_Offset@asic,w
  2454  0248  00CC               	movwf	BIO_config@conf
  2455  0249  2312               	fcall	_BIO_config
  2456                           
  2457                           ;comm.c: 294: _delay((unsigned long)((20)*(500000/4000.0)));
  2458  024A  3004               	movlw	4
  2459  024B  0020               	movlb	0	; select bank0
  2460  024C  00D2               	movwf	??_measure_Offset
  2461  024D  303D               	movlw	61
  2462  024E                     u907:	
  2463  024E  0B89               	decfsz	9,f
  2464  024F  2A4E               	goto	u907
  2465  0250  0BD2               	decfsz	??_measure_Offset,f
  2466  0251  2A4E               	goto	u907
  2467  0252  3200               	nop2
  2468                           
  2469                           ;comm.c: 296: value1 = ADC_2();
  2470  0253  23AE               	fcall	_ADC_2
  2471  0254  0020               	movlb	0	; select bank0
  2472  0255  084D               	movf	?_ADC_2+1,w
  2473  0256  00D9               	movwf	measure_Offset@value1+1
  2474  0257  084C               	movf	?_ADC_2,w
  2475  0258  00D8               	movwf	measure_Offset@value1
  2476                           
  2477                           ;comm.c: 297: value2 = ADC_4();
  2478  0259  238B               	fcall	_ADC_4
  2479  025A  0020               	movlb	0	; select bank0
  2480  025B  084D               	movf	?_ADC_4+1,w
  2481  025C  00DB               	movwf	measure_Offset@value2+1
  2482  025D  084C               	movf	?_ADC_4,w
  2483  025E  00DA               	movwf	measure_Offset@value2
  2484                           
  2485                           ;comm.c: 299: aux[1] = (unsigned char)(value1 & 0xff);
  2486  025F  0858               	movf	measure_Offset@value1,w
  2487  0260  00D2               	movwf	??_measure_Offset
  2488  0261  0852               	movf	??_measure_Offset,w
  2489  0262  00D4               	movwf	measure_Offset@aux+1
  2490                           
  2491                           ;comm.c: 300: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  2492  0263  0859               	movf	measure_Offset@value1+1,w
  2493  0264  00D2               	movwf	??_measure_Offset
  2494  0265  0852               	movf	??_measure_Offset,w
  2495  0266  00D5               	movwf	measure_Offset@aux+2
  2496                           
  2497                           ;comm.c: 301: aux[3] = (unsigned char)(value2 & 0xff);
  2498  0267  085A               	movf	measure_Offset@value2,w
  2499  0268  00D2               	movwf	??_measure_Offset
  2500  0269  0852               	movf	??_measure_Offset,w
  2501  026A  00D6               	movwf	measure_Offset@aux+3
  2502                           
  2503                           ;comm.c: 302: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  2504  026B  085B               	movf	measure_Offset@value2+1,w
  2505  026C  00D2               	movwf	??_measure_Offset
  2506  026D  0852               	movf	??_measure_Offset,w
  2507  026E  00D7               	movwf	measure_Offset@aux+4
  2508                           
  2509                           ;comm.c: 305: lputs_ISR(aux,5);
  2510  026F  3005               	movlw	5
  2511  0270  00D2               	movwf	??_measure_Offset
  2512  0271  0852               	movf	??_measure_Offset,w
  2513  0272  00CC               	movwf	lputs_ISR@length
  2514  0273  3053               	movlw	(low (measure_Offset@aux| 0))& (0+255)
  2515  0274  233D               	fcall	_lputs_ISR
  2516  0275  0008               	return
  2517  0276                     __end_of_measure_Offset:	
  2518                           
  2519                           	psect	text9
  2520  018C                     __ptext9:	
  2521 ;; *************** function _measure_Impedance_no_offset *****************
  2522 ;; Defined at:
  2523 ;;		line 196 in file "comm.c"
  2524 ;; Parameters:    Size  Location     Type
  2525 ;;		None
  2526 ;; Auto vars:     Size  Location     Type
  2527 ;;  aux            13    7[BANK0 ] unsigned char [13]
  2528 ;;  asic            2   24[BANK0 ] struct .
  2529 ;;  value2          2   22[BANK0 ] unsigned short 
  2530 ;;  value1          2   20[BANK0 ] unsigned short 
  2531 ;;  value3          2    0        unsigned short 
  2532 ;; Return value:  Size  Location     Type
  2533 ;;                  1    wreg      void 
  2534 ;; Registers used:
  2535 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2536 ;; Tracked objects:
  2537 ;;		On entry : 0/0
  2538 ;;		On exit  : 0/0
  2539 ;;		Unchanged: 0/0
  2540 ;; Data sizes:     COMMON   BANK0   BANK1
  2541 ;;      Params:         0       0       0
  2542 ;;      Locals:         0      19       0
  2543 ;;      Temps:          0       1       0
  2544 ;;      Totals:         0      20       0
  2545 ;;Total ram usage:       20 bytes
  2546 ;; Hardware stack levels used:    1
  2547 ;; Hardware stack levels required when called:    4
  2548 ;; This function calls:
  2549 ;;		_ADC_2
  2550 ;;		_ADC_4
  2551 ;;		_BIO_config
  2552 ;;		_lputs_ISR
  2553 ;; This function is called by:
  2554 ;;		_mess_handler
  2555 ;; This function uses a non-reentrant model
  2556 ;;
  2557                           
  2558                           
  2559                           ;psect for function _measure_Impedance_no_offset
  2560  018C                     _measure_Impedance_no_offset:	
  2561                           
  2562                           ;comm.c: 198: unsigned char aux[13];
  2563                           ;comm.c: 199: unsigned short value1,value2,value3;
  2564                           ;comm.c: 202: BIO3 asic;
  2565                           ;comm.c: 207: aux[0] = 'y';
  2566                           
  2567                           ;incstack = 0
  2568                           ; Regs used in _measure_Impedance_no_offset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  2569  018C  3079               	movlw	121
  2570  018D  0020               	movlb	0	; select bank0
  2571  018E  00D2               	movwf	??_measure_Impedance_no_offset
  2572  018F  0852               	movf	??_measure_Impedance_no_offset,w
  2573  0190  00D3               	movwf	measure_Impedance_no_offset@aux
  2574                           
  2575                           ;comm.c: 210: asic.data[0] = (unsigned short)(mess_rec[1]);
  2576  0191  0843               	movf	_mess_rec+1,w	;volatile
  2577  0192  00D2               	movwf	??_measure_Impedance_no_offset
  2578  0193  0852               	movf	??_measure_Impedance_no_offset,w
  2579  0194  00E4               	movwf	measure_Impedance_no_offset@asic
  2580                           
  2581                           ;comm.c: 211: asic.data[1] = (unsigned short)(mess_rec[2]);
  2582  0195  0844               	movf	_mess_rec+2,w	;volatile
  2583  0196  00D2               	movwf	??_measure_Impedance_no_offset
  2584  0197  0852               	movf	??_measure_Impedance_no_offset,w
  2585  0198  00E5               	movwf	measure_Impedance_no_offset@asic+1
  2586                           
  2587                           ;comm.c: 221: asic.data_bits.CE = 1;
  2588  0199  1764               	bsf	measure_Impedance_no_offset@asic,6
  2589                           
  2590                           ;comm.c: 222: asic.data_bits.IQ = 0;
  2591  019A  11E5               	bcf	measure_Impedance_no_offset@asic+1,3
  2592                           
  2593                           ;comm.c: 225: BIO_config(asic);
  2594  019B  0865               	movf	measure_Impedance_no_offset@asic+1,w
  2595  019C  00CD               	movwf	BIO_config@conf+1
  2596  019D  0864               	movf	measure_Impedance_no_offset@asic,w
  2597  019E  00CC               	movwf	BIO_config@conf
  2598  019F  2312               	fcall	_BIO_config
  2599                           
  2600                           ;comm.c: 229: _delay((unsigned long)((20)*(500000/4000.0)));
  2601  01A0  3004               	movlw	4
  2602  01A1  0020               	movlb	0	; select bank0
  2603  01A2  00D2               	movwf	??_measure_Impedance_no_offset
  2604  01A3  303D               	movlw	61
  2605  01A4                     u917:	
  2606  01A4  0B89               	decfsz	9,f
  2607  01A5  29A4               	goto	u917
  2608  01A6  0BD2               	decfsz	??_measure_Impedance_no_offset,f
  2609  01A7  29A4               	goto	u917
  2610  01A8  3200               	nop2
  2611                           
  2612                           ;comm.c: 231: value1 = ADC_2();
  2613  01A9  23AE               	fcall	_ADC_2
  2614  01AA  0020               	movlb	0	; select bank0
  2615  01AB  084D               	movf	?_ADC_2+1,w
  2616  01AC  00E1               	movwf	measure_Impedance_no_offset@value1+1
  2617  01AD  084C               	movf	?_ADC_2,w
  2618  01AE  00E0               	movwf	measure_Impedance_no_offset@value1
  2619                           
  2620                           ;comm.c: 232: value2 = ADC_4();
  2621  01AF  238B               	fcall	_ADC_4
  2622  01B0  0020               	movlb	0	; select bank0
  2623  01B1  084D               	movf	?_ADC_4+1,w
  2624  01B2  00E3               	movwf	measure_Impedance_no_offset@value2+1
  2625  01B3  084C               	movf	?_ADC_4,w
  2626  01B4  00E2               	movwf	measure_Impedance_no_offset@value2
  2627                           
  2628                           ;comm.c: 234: aux[1] = (unsigned char)(value1 & 0xff);
  2629  01B5  0860               	movf	measure_Impedance_no_offset@value1,w
  2630  01B6  00D2               	movwf	??_measure_Impedance_no_offset
  2631  01B7  0852               	movf	??_measure_Impedance_no_offset,w
  2632  01B8  00D4               	movwf	measure_Impedance_no_offset@aux+1
  2633                           
  2634                           ;comm.c: 235: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  2635  01B9  0861               	movf	measure_Impedance_no_offset@value1+1,w
  2636  01BA  00D2               	movwf	??_measure_Impedance_no_offset
  2637  01BB  0852               	movf	??_measure_Impedance_no_offset,w
  2638  01BC  00D5               	movwf	measure_Impedance_no_offset@aux+2
  2639                           
  2640                           ;comm.c: 236: aux[3] = (unsigned char)(value2 & 0xff);
  2641  01BD  0862               	movf	measure_Impedance_no_offset@value2,w
  2642  01BE  00D2               	movwf	??_measure_Impedance_no_offset
  2643  01BF  0852               	movf	??_measure_Impedance_no_offset,w
  2644  01C0  00D6               	movwf	measure_Impedance_no_offset@aux+3
  2645                           
  2646                           ;comm.c: 237: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  2647  01C1  0863               	movf	measure_Impedance_no_offset@value2+1,w
  2648  01C2  00D2               	movwf	??_measure_Impedance_no_offset
  2649  01C3  0852               	movf	??_measure_Impedance_no_offset,w
  2650  01C4  00D7               	movwf	measure_Impedance_no_offset@aux+4
  2651                           
  2652                           ;comm.c: 240: asic.data_bits.IQ = 1;
  2653  01C5  15E5               	bsf	measure_Impedance_no_offset@asic+1,3
  2654                           
  2655                           ;comm.c: 243: BIO_config(asic);
  2656  01C6  0865               	movf	measure_Impedance_no_offset@asic+1,w
  2657  01C7  00CD               	movwf	BIO_config@conf+1
  2658  01C8  0864               	movf	measure_Impedance_no_offset@asic,w
  2659  01C9  00CC               	movwf	BIO_config@conf
  2660  01CA  2312               	fcall	_BIO_config
  2661                           
  2662                           ;comm.c: 247: _delay((unsigned long)((20)*(500000/4000.0)));
  2663  01CB  3004               	movlw	4
  2664  01CC  0020               	movlb	0	; select bank0
  2665  01CD  00D2               	movwf	??_measure_Impedance_no_offset
  2666  01CE  303D               	movlw	61
  2667  01CF                     u927:	
  2668  01CF  0B89               	decfsz	9,f
  2669  01D0  29CF               	goto	u927
  2670  01D1  0BD2               	decfsz	??_measure_Impedance_no_offset,f
  2671  01D2  29CF               	goto	u927
  2672  01D3  3200               	nop2
  2673                           
  2674                           ;comm.c: 249: value1 = ADC_2();
  2675  01D4  23AE               	fcall	_ADC_2
  2676  01D5  0020               	movlb	0	; select bank0
  2677  01D6  084D               	movf	?_ADC_2+1,w
  2678  01D7  00E1               	movwf	measure_Impedance_no_offset@value1+1
  2679  01D8  084C               	movf	?_ADC_2,w
  2680  01D9  00E0               	movwf	measure_Impedance_no_offset@value1
  2681                           
  2682                           ;comm.c: 250: value2 = ADC_4();
  2683  01DA  238B               	fcall	_ADC_4
  2684  01DB  0020               	movlb	0	; select bank0
  2685  01DC  084D               	movf	?_ADC_4+1,w
  2686  01DD  00E3               	movwf	measure_Impedance_no_offset@value2+1
  2687  01DE  084C               	movf	?_ADC_4,w
  2688  01DF  00E2               	movwf	measure_Impedance_no_offset@value2
  2689                           
  2690                           ;comm.c: 252: aux[5] = (unsigned char)(value1 & 0xff);
  2691  01E0  0860               	movf	measure_Impedance_no_offset@value1,w
  2692  01E1  00D2               	movwf	??_measure_Impedance_no_offset
  2693  01E2  0852               	movf	??_measure_Impedance_no_offset,w
  2694  01E3  00D8               	movwf	measure_Impedance_no_offset@aux+5
  2695                           
  2696                           ;comm.c: 253: aux[6] = (unsigned char)((value1 >> 8) & 0xff);
  2697  01E4  0861               	movf	measure_Impedance_no_offset@value1+1,w
  2698  01E5  00D2               	movwf	??_measure_Impedance_no_offset
  2699  01E6  0852               	movf	??_measure_Impedance_no_offset,w
  2700  01E7  00D9               	movwf	measure_Impedance_no_offset@aux+6
  2701                           
  2702                           ;comm.c: 254: aux[7] = (unsigned char)(value2 & 0xff);
  2703  01E8  0862               	movf	measure_Impedance_no_offset@value2,w
  2704  01E9  00D2               	movwf	??_measure_Impedance_no_offset
  2705  01EA  0852               	movf	??_measure_Impedance_no_offset,w
  2706  01EB  00DA               	movwf	measure_Impedance_no_offset@aux+7
  2707                           
  2708                           ;comm.c: 255: aux[8] = (unsigned char)((value2 >> 8) & 0xff);
  2709  01EC  0863               	movf	measure_Impedance_no_offset@value2+1,w
  2710  01ED  00D2               	movwf	??_measure_Impedance_no_offset
  2711  01EE  0852               	movf	??_measure_Impedance_no_offset,w
  2712  01EF  00DB               	movwf	measure_Impedance_no_offset@aux+8
  2713                           
  2714                           ;comm.c: 258: lputs_ISR(aux,9);
  2715  01F0  3009               	movlw	9
  2716  01F1  00D2               	movwf	??_measure_Impedance_no_offset
  2717  01F2  0852               	movf	??_measure_Impedance_no_offset,w
  2718  01F3  00CC               	movwf	lputs_ISR@length
  2719  01F4  3053               	movlw	(low (measure_Impedance_no_offset@aux| 0))& (0+255)
  2720  01F5  233D               	fcall	_lputs_ISR
  2721  01F6  0008               	return
  2722  01F7                     __end_of_measure_Impedance_no_offset:	
  2723                           
  2724                           	psect	text10
  2725  00FB                     __ptext10:	
  2726 ;; *************** function _measure_Impedance_SE *****************
  2727 ;; Defined at:
  2728 ;;		line 310 in file "comm.c"
  2729 ;; Parameters:    Size  Location     Type
  2730 ;;		None
  2731 ;; Auto vars:     Size  Location     Type
  2732 ;;  aux            13    8[BANK0 ] unsigned char [13]
  2733 ;;  asic            2   24[BANK0 ] struct .
  2734 ;;  value1          2   22[BANK0 ] unsigned short 
  2735 ;;  check           1   21[BANK0 ] unsigned char 
  2736 ;; Return value:  Size  Location     Type
  2737 ;;                  1    wreg      void 
  2738 ;; Registers used:
  2739 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2740 ;; Tracked objects:
  2741 ;;		On entry : 0/0
  2742 ;;		On exit  : 0/0
  2743 ;;		Unchanged: 0/0
  2744 ;; Data sizes:     COMMON   BANK0   BANK1
  2745 ;;      Params:         0       0       0
  2746 ;;      Locals:         0      18       0
  2747 ;;      Temps:          0       2       0
  2748 ;;      Totals:         0      20       0
  2749 ;;Total ram usage:       20 bytes
  2750 ;; Hardware stack levels used:    1
  2751 ;; Hardware stack levels required when called:    4
  2752 ;; This function calls:
  2753 ;;		_ADC_5
  2754 ;;		_BIO_config
  2755 ;;		_calculate_checksum
  2756 ;;		_lputs_ISR
  2757 ;; This function is called by:
  2758 ;;		_mess_handler
  2759 ;; This function uses a non-reentrant model
  2760 ;;
  2761                           
  2762                           
  2763                           ;psect for function _measure_Impedance_SE
  2764  00FB                     _measure_Impedance_SE:	
  2765                           
  2766                           ;comm.c: 312: unsigned char aux[13], check;
  2767                           ;comm.c: 314: unsigned short value1;
  2768                           ;comm.c: 317: BIO3 asic;
  2769                           ;comm.c: 324: check = calculate_checksum(mess_rec,4);
  2770                           
  2771                           ;incstack = 0
  2772                           ; Regs used in _measure_Impedance_SE: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2773  00FB  3004               	movlw	4
  2774  00FC  0020               	movlb	0	; select bank0
  2775  00FD  00D2               	movwf	??_measure_Impedance_SE
  2776  00FE  0852               	movf	??_measure_Impedance_SE,w
  2777  00FF  00CC               	movwf	calculate_checksum@num
  2778  0100  3042               	movlw	(low (_mess_rec| 0))& (0+255)
  2779  0101  23D1               	fcall	_calculate_checksum
  2780  0102  0020               	movlb	0	; select bank0
  2781  0103  00D3               	movwf	??_measure_Impedance_SE+1
  2782  0104  0853               	movf	??_measure_Impedance_SE+1,w
  2783  0105  00E1               	movwf	measure_Impedance_SE@check
  2784                           
  2785                           ;comm.c: 325: if (check) {
  2786  0106  0861               	movf	measure_Impedance_SE@check,w
  2787  0107  1903               	btfsc	3,2
  2788  0108  2912               	goto	l2372
  2789                           
  2790                           ;comm.c: 326: aux[0] = 'e';
  2791  0109  3065               	movlw	101
  2792  010A  00D2               	movwf	??_measure_Impedance_SE
  2793  010B  0852               	movf	??_measure_Impedance_SE,w
  2794  010C  00D4               	movwf	measure_Impedance_SE@aux
  2795                           
  2796                           ;comm.c: 327: lputs_ISR(aux,1);
  2797  010D  01CC               	clrf	lputs_ISR@length
  2798  010E  0ACC               	incf	lputs_ISR@length,f
  2799  010F  3054               	movlw	(low (measure_Impedance_SE@aux| 0))& (0+255)
  2800  0110  233D               	fcall	_lputs_ISR
  2801                           
  2802                           ;comm.c: 328: return;
  2803  0111  0008               	return
  2804  0112                     l2372:	
  2805                           
  2806                           ;comm.c: 329: }
  2807                           ;comm.c: 332: aux[0] = 's';
  2808  0112  3073               	movlw	115
  2809  0113  0020               	movlb	0	; select bank0
  2810  0114  00D2               	movwf	??_measure_Impedance_SE
  2811  0115  0852               	movf	??_measure_Impedance_SE,w
  2812  0116  00D4               	movwf	measure_Impedance_SE@aux
  2813                           
  2814                           ;comm.c: 335: asic.data[0] = (unsigned short)(mess_rec[1]);
  2815  0117  0843               	movf	_mess_rec+1,w	;volatile
  2816  0118  00D2               	movwf	??_measure_Impedance_SE
  2817  0119  0852               	movf	??_measure_Impedance_SE,w
  2818  011A  00E4               	movwf	measure_Impedance_SE@asic
  2819                           
  2820                           ;comm.c: 336: asic.data[1] = (unsigned short)(mess_rec[2]);
  2821  011B  0844               	movf	_mess_rec+2,w	;volatile
  2822  011C  00D2               	movwf	??_measure_Impedance_SE
  2823  011D  0852               	movf	??_measure_Impedance_SE,w
  2824  011E  00E5               	movwf	measure_Impedance_SE@asic+1
  2825                           
  2826                           ;comm.c: 339: asic.data_bits.CE = 0;
  2827  011F  1364               	bcf	measure_Impedance_SE@asic,6
  2828                           
  2829                           ;comm.c: 340: BIO_config(asic);
  2830  0120  0865               	movf	measure_Impedance_SE@asic+1,w
  2831  0121  00CD               	movwf	BIO_config@conf+1
  2832  0122  0864               	movf	measure_Impedance_SE@asic,w
  2833  0123  00CC               	movwf	BIO_config@conf
  2834  0124  2312               	fcall	_BIO_config
  2835                           
  2836                           ;comm.c: 353: _delay((unsigned long)((20)*(500000/4000.0)));
  2837  0125  3004               	movlw	4
  2838  0126  0020               	movlb	0	; select bank0
  2839  0127  00D2               	movwf	??_measure_Impedance_SE
  2840  0128  303D               	movlw	61
  2841  0129                     u937:	
  2842  0129  0B89               	decfsz	9,f
  2843  012A  2929               	goto	u937
  2844  012B  0BD2               	decfsz	??_measure_Impedance_SE,f
  2845  012C  2929               	goto	u937
  2846  012D  3200               	nop2
  2847                           
  2848                           ;comm.c: 355: value1 = ADC_5();
  2849  012E  2368               	fcall	_ADC_5
  2850  012F  0020               	movlb	0	; select bank0
  2851  0130  084D               	movf	?_ADC_5+1,w
  2852  0131  00E3               	movwf	measure_Impedance_SE@value1+1
  2853  0132  084C               	movf	?_ADC_5,w
  2854  0133  00E2               	movwf	measure_Impedance_SE@value1
  2855                           
  2856                           ;comm.c: 357: aux[1] = (unsigned char)(value1 & 0xff);
  2857  0134  0862               	movf	measure_Impedance_SE@value1,w
  2858  0135  00D2               	movwf	??_measure_Impedance_SE
  2859  0136  0852               	movf	??_measure_Impedance_SE,w
  2860  0137  00D5               	movwf	measure_Impedance_SE@aux+1
  2861                           
  2862                           ;comm.c: 358: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  2863  0138  0863               	movf	measure_Impedance_SE@value1+1,w
  2864  0139  00D2               	movwf	??_measure_Impedance_SE
  2865  013A  0852               	movf	??_measure_Impedance_SE,w
  2866  013B  00D6               	movwf	measure_Impedance_SE@aux+2
  2867                           
  2868                           ;comm.c: 361: asic.data_bits.CE = 1;
  2869  013C  1764               	bsf	measure_Impedance_SE@asic,6
  2870                           
  2871                           ;comm.c: 362: asic.data_bits.IQ = 0;
  2872  013D  11E5               	bcf	measure_Impedance_SE@asic+1,3
  2873                           
  2874                           ;comm.c: 365: BIO_config(asic);
  2875  013E  0865               	movf	measure_Impedance_SE@asic+1,w
  2876  013F  00CD               	movwf	BIO_config@conf+1
  2877  0140  0864               	movf	measure_Impedance_SE@asic,w
  2878  0141  00CC               	movwf	BIO_config@conf
  2879  0142  2312               	fcall	_BIO_config
  2880                           
  2881                           ;comm.c: 369: _delay((unsigned long)((20)*(500000/4000.0)));
  2882  0143  3004               	movlw	4
  2883  0144  0020               	movlb	0	; select bank0
  2884  0145  00D2               	movwf	??_measure_Impedance_SE
  2885  0146  303D               	movlw	61
  2886  0147                     u947:	
  2887  0147  0B89               	decfsz	9,f
  2888  0148  2947               	goto	u947
  2889  0149  0BD2               	decfsz	??_measure_Impedance_SE,f
  2890  014A  2947               	goto	u947
  2891  014B  3200               	nop2
  2892                           
  2893                           ;comm.c: 371: value1 = ADC_5();
  2894  014C  2368               	fcall	_ADC_5
  2895  014D  0020               	movlb	0	; select bank0
  2896  014E  084D               	movf	?_ADC_5+1,w
  2897  014F  00E3               	movwf	measure_Impedance_SE@value1+1
  2898  0150  084C               	movf	?_ADC_5,w
  2899  0151  00E2               	movwf	measure_Impedance_SE@value1
  2900                           
  2901                           ;comm.c: 373: aux[3] = (unsigned char)(value1 & 0xff);
  2902  0152  0862               	movf	measure_Impedance_SE@value1,w
  2903  0153  00D2               	movwf	??_measure_Impedance_SE
  2904  0154  0852               	movf	??_measure_Impedance_SE,w
  2905  0155  00D7               	movwf	measure_Impedance_SE@aux+3
  2906                           
  2907                           ;comm.c: 374: aux[4] = (unsigned char)((value1 >> 8) & 0xff);
  2908  0156  0863               	movf	measure_Impedance_SE@value1+1,w
  2909  0157  00D2               	movwf	??_measure_Impedance_SE
  2910  0158  0852               	movf	??_measure_Impedance_SE,w
  2911  0159  00D8               	movwf	measure_Impedance_SE@aux+4
  2912                           
  2913                           ;comm.c: 377: asic.data_bits.IQ = 1;
  2914  015A  15E5               	bsf	measure_Impedance_SE@asic+1,3
  2915                           
  2916                           ;comm.c: 380: BIO_config(asic);
  2917  015B  0865               	movf	measure_Impedance_SE@asic+1,w
  2918  015C  00CD               	movwf	BIO_config@conf+1
  2919  015D  0864               	movf	measure_Impedance_SE@asic,w
  2920  015E  00CC               	movwf	BIO_config@conf
  2921  015F  2312               	fcall	_BIO_config
  2922                           
  2923                           ;comm.c: 384: _delay((unsigned long)((20)*(500000/4000.0)));
  2924  0160  3004               	movlw	4
  2925  0161  0020               	movlb	0	; select bank0
  2926  0162  00D2               	movwf	??_measure_Impedance_SE
  2927  0163  303D               	movlw	61
  2928  0164                     u957:	
  2929  0164  0B89               	decfsz	9,f
  2930  0165  2964               	goto	u957
  2931  0166  0BD2               	decfsz	??_measure_Impedance_SE,f
  2932  0167  2964               	goto	u957
  2933  0168  3200               	nop2
  2934                           
  2935                           ;comm.c: 386: value1 = ADC_5();
  2936  0169  2368               	fcall	_ADC_5
  2937  016A  0020               	movlb	0	; select bank0
  2938  016B  084D               	movf	?_ADC_5+1,w
  2939  016C  00E3               	movwf	measure_Impedance_SE@value1+1
  2940  016D  084C               	movf	?_ADC_5,w
  2941  016E  00E2               	movwf	measure_Impedance_SE@value1
  2942                           
  2943                           ;comm.c: 388: aux[5] = (unsigned char)(value1 & 0xff);
  2944  016F  0862               	movf	measure_Impedance_SE@value1,w
  2945  0170  00D2               	movwf	??_measure_Impedance_SE
  2946  0171  0852               	movf	??_measure_Impedance_SE,w
  2947  0172  00D9               	movwf	measure_Impedance_SE@aux+5
  2948                           
  2949                           ;comm.c: 389: aux[6] = (unsigned char)((value1 >> 8) & 0xff);
  2950  0173  0863               	movf	measure_Impedance_SE@value1+1,w
  2951  0174  00D2               	movwf	??_measure_Impedance_SE
  2952  0175  0852               	movf	??_measure_Impedance_SE,w
  2953  0176  00DA               	movwf	measure_Impedance_SE@aux+6
  2954                           
  2955                           ;comm.c: 393: check = calculate_checksum(aux,7);
  2956  0177  3007               	movlw	7
  2957  0178  00D2               	movwf	??_measure_Impedance_SE
  2958  0179  0852               	movf	??_measure_Impedance_SE,w
  2959  017A  00CC               	movwf	calculate_checksum@num
  2960  017B  3054               	movlw	(low (measure_Impedance_SE@aux| 0))& (0+255)
  2961  017C  23D1               	fcall	_calculate_checksum
  2962  017D  0020               	movlb	0	; select bank0
  2963  017E  00D3               	movwf	??_measure_Impedance_SE+1
  2964  017F  0853               	movf	??_measure_Impedance_SE+1,w
  2965  0180  00E1               	movwf	measure_Impedance_SE@check
  2966                           
  2967                           ;comm.c: 394: aux[7] = check;
  2968  0181  0861               	movf	measure_Impedance_SE@check,w
  2969  0182  00D2               	movwf	??_measure_Impedance_SE
  2970  0183  0852               	movf	??_measure_Impedance_SE,w
  2971  0184  00DB               	movwf	measure_Impedance_SE@aux+7
  2972                           
  2973                           ;comm.c: 395: lputs_ISR(aux,8);
  2974  0185  3008               	movlw	8
  2975  0186  00D2               	movwf	??_measure_Impedance_SE
  2976  0187  0852               	movf	??_measure_Impedance_SE,w
  2977  0188  00CC               	movwf	lputs_ISR@length
  2978  0189  3054               	movlw	(low (measure_Impedance_SE@aux| 0))& (0+255)
  2979  018A  233D               	fcall	_lputs_ISR
  2980  018B  0008               	return
  2981  018C                     __end_of_measure_Impedance_SE:	
  2982                           
  2983                           	psect	text11
  2984  03D1                     __ptext11:	
  2985 ;; *************** function _calculate_checksum *****************
  2986 ;; Defined at:
  2987 ;;		line 403 in file "comm.c"
  2988 ;; Parameters:    Size  Location     Type
  2989 ;;  data            1    wreg     PTR unsigned char 
  2990 ;;		 -> measure_Impedance_SE@aux(13), mess_rec(10), 
  2991 ;;  num             1    0[BANK0 ] unsigned char 
  2992 ;; Auto vars:     Size  Location     Type
  2993 ;;  data            1    3[BANK0 ] PTR unsigned char 
  2994 ;;		 -> measure_Impedance_SE@aux(13), mess_rec(10), 
  2995 ;;  i               1    5[BANK0 ] unsigned char 
  2996 ;;  check           1    4[BANK0 ] unsigned char 
  2997 ;; Return value:  Size  Location     Type
  2998 ;;                  1    wreg      unsigned char 
  2999 ;; Registers used:
  3000 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3001 ;; Tracked objects:
  3002 ;;		On entry : 0/0
  3003 ;;		On exit  : 0/0
  3004 ;;		Unchanged: 0/0
  3005 ;; Data sizes:     COMMON   BANK0   BANK1
  3006 ;;      Params:         0       1       0
  3007 ;;      Locals:         0       3       0
  3008 ;;      Temps:          0       2       0
  3009 ;;      Totals:         0       6       0
  3010 ;;Total ram usage:        6 bytes
  3011 ;; Hardware stack levels used:    1
  3012 ;; Hardware stack levels required when called:    2
  3013 ;; This function calls:
  3014 ;;		Nothing
  3015 ;; This function is called by:
  3016 ;;		_measure_Impedance_SE
  3017 ;; This function uses a non-reentrant model
  3018 ;;
  3019                           
  3020                           
  3021                           ;psect for function _calculate_checksum
  3022  03D1                     _calculate_checksum:	
  3023                           
  3024                           ;incstack = 0
  3025                           ; Regs used in _calculate_checksum: [wreg+fsr1l+fsr1h+status,2+status,0]
  3026                           ;calculate_checksum@data stored from wreg
  3027  03D1  0020               	movlb	0	; select bank0
  3028  03D2  00CF               	movwf	calculate_checksum@data
  3029                           
  3030                           ;comm.c: 405: unsigned char check, i;
  3031                           ;comm.c: 407: check = 0;
  3032  03D3  01D0               	clrf	calculate_checksum@check
  3033                           
  3034                           ;comm.c: 408: for (i = 0; i < num; i++) {
  3035  03D4  01D1               	clrf	calculate_checksum@i
  3036  03D5                     l2190:	
  3037  03D5  084C               	movf	calculate_checksum@num,w
  3038  03D6  0251               	subwf	calculate_checksum@i,w
  3039  03D7  1803               	btfsc	3,0
  3040  03D8  2BE8               	goto	l2192
  3041                           
  3042                           ;comm.c: 409: check ^= data[i];
  3043  03D9  0851               	movf	calculate_checksum@i,w
  3044  03DA  074F               	addwf	calculate_checksum@data,w
  3045  03DB  00CD               	movwf	??_calculate_checksum
  3046  03DC  084D               	movf	??_calculate_checksum,w
  3047  03DD  0086               	movwf	6
  3048  03DE  0187               	clrf	7
  3049  03DF  0801               	movf	1,w
  3050  03E0  00CE               	movwf	??_calculate_checksum+1
  3051  03E1  084E               	movf	??_calculate_checksum+1,w
  3052  03E2  06D0               	xorwf	calculate_checksum@check,f
  3053  03E3  3001               	movlw	1
  3054  03E4  00CD               	movwf	??_calculate_checksum
  3055  03E5  084D               	movf	??_calculate_checksum,w
  3056  03E6  07D1               	addwf	calculate_checksum@i,f
  3057  03E7  2BD5               	goto	l2190
  3058  03E8                     l2192:	
  3059                           
  3060                           ;comm.c: 410: }
  3061                           ;comm.c: 412: return check;
  3062  03E8  0850               	movf	calculate_checksum@check,w
  3063  03E9  0008               	return
  3064  03EA                     __end_of_calculate_checksum:	
  3065                           
  3066                           	psect	text12
  3067  0368                     __ptext12:	
  3068 ;; *************** function _ADC_5 *****************
  3069 ;; Defined at:
  3070 ;;		line 48 in file "ADC1823.c"
  3071 ;; Parameters:    Size  Location     Type
  3072 ;;		None
  3073 ;; Auto vars:     Size  Location     Type
  3074 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  3075 ;; Return value:  Size  Location     Type
  3076 ;;                  2    0[BANK0 ] unsigned short 
  3077 ;; Registers used:
  3078 ;;		wreg
  3079 ;; Tracked objects:
  3080 ;;		On entry : 0/0
  3081 ;;		On exit  : 0/0
  3082 ;;		Unchanged: 0/0
  3083 ;; Data sizes:     COMMON   BANK0   BANK1
  3084 ;;      Params:         0       2       0
  3085 ;;      Locals:         0       2       0
  3086 ;;      Temps:          0       2       0
  3087 ;;      Totals:         0       6       0
  3088 ;;Total ram usage:        6 bytes
  3089 ;; Hardware stack levels used:    1
  3090 ;; Hardware stack levels required when called:    2
  3091 ;; This function calls:
  3092 ;;		Nothing
  3093 ;; This function is called by:
  3094 ;;		_read_ADC_channels
  3095 ;;		_measure_Impedance_SE
  3096 ;; This function uses a non-reentrant model
  3097 ;;
  3098                           
  3099                           
  3100                           ;psect for function _ADC_5
  3101  0368                     _ADC_5:	
  3102                           
  3103                           ;ADC1823.c: 50: unsigned short ADC_value;
  3104                           ;ADC1823.c: 52: { ADCON0 = 0b00010101;};
  3105                           
  3106                           ;incstack = 0
  3107                           ; Regs used in _ADC_5: [wreg]
  3108  0368  3015               	movlw	21
  3109  0369  0021               	movlb	1	; select bank1
  3110  036A  009D               	movwf	29	;volatile
  3111                           
  3112                           ;ADC1823.c: 53: __nop();
  3113  036B  0000               	nop
  3114                           
  3115                           ;ADC1823.c: 54: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  3116  036C  0021               	movlb	1	; select bank1
  3117  036D  149D               	bsf	29,1	;volatile
  3118  036E                     l405:	
  3119  036E  189D               	btfsc	29,1	;volatile
  3120  036F  2B6E               	goto	l405
  3121  0370  081C               	movf	28,w	;volatile
  3122  0371  0020               	movlb	0	; select bank0
  3123  0372  00CE               	movwf	??_ADC_5
  3124  0373  01CF               	clrf	??_ADC_5+1
  3125  0374  084E               	movf	??_ADC_5,w
  3126  0375  00D0               	movwf	ADC_5@ADC_value
  3127  0376  084F               	movf	??_ADC_5+1,w
  3128  0377  00D1               	movwf	ADC_5@ADC_value+1
  3129  0378  3008               	movlw	8
  3130  0379                     u825:	
  3131  0379  35D0               	lslf	ADC_5@ADC_value,f
  3132  037A  0DD1               	rlf	ADC_5@ADC_value+1,f
  3133  037B  0B89               	decfsz	9,f
  3134  037C  2B79               	goto	u825
  3135  037D  0021               	movlb	1	; select bank1
  3136  037E  081B               	movf	27,w	;volatile
  3137  037F  0020               	movlb	0	; select bank0
  3138  0380  00CE               	movwf	??_ADC_5
  3139  0381  01CF               	clrf	??_ADC_5+1
  3140  0382  084E               	movf	??_ADC_5,w
  3141  0383  04D0               	iorwf	ADC_5@ADC_value,f
  3142  0384  084F               	movf	??_ADC_5+1,w
  3143  0385  04D1               	iorwf	ADC_5@ADC_value+1,f
  3144                           
  3145                           ;ADC1823.c: 55: return ADC_value;
  3146  0386  0851               	movf	ADC_5@ADC_value+1,w
  3147  0387  00CD               	movwf	?_ADC_5+1
  3148  0388  0850               	movf	ADC_5@ADC_value,w
  3149  0389  00CC               	movwf	?_ADC_5
  3150  038A  0008               	return
  3151  038B                     __end_of_ADC_5:	
  3152                           
  3153                           	psect	text13
  3154  0065                     __ptext13:	
  3155 ;; *************** function _measure_Impedance *****************
  3156 ;; Defined at:
  3157 ;;		line 111 in file "comm.c"
  3158 ;; Parameters:    Size  Location     Type
  3159 ;;		None
  3160 ;; Auto vars:     Size  Location     Type
  3161 ;;  aux            13    7[BANK0 ] unsigned char [13]
  3162 ;;  asic            2   24[BANK0 ] struct .
  3163 ;;  value2          2   22[BANK0 ] unsigned short 
  3164 ;;  value1          2   20[BANK0 ] unsigned short 
  3165 ;;  value3          2    0        unsigned short 
  3166 ;; Return value:  Size  Location     Type
  3167 ;;                  1    wreg      void 
  3168 ;; Registers used:
  3169 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3170 ;; Tracked objects:
  3171 ;;		On entry : 0/0
  3172 ;;		On exit  : 0/0
  3173 ;;		Unchanged: 0/0
  3174 ;; Data sizes:     COMMON   BANK0   BANK1
  3175 ;;      Params:         0       0       0
  3176 ;;      Locals:         0      19       0
  3177 ;;      Temps:          0       1       0
  3178 ;;      Totals:         0      20       0
  3179 ;;Total ram usage:       20 bytes
  3180 ;; Hardware stack levels used:    1
  3181 ;; Hardware stack levels required when called:    4
  3182 ;; This function calls:
  3183 ;;		_ADC_2
  3184 ;;		_ADC_4
  3185 ;;		_BIO_config
  3186 ;;		_lputs_ISR
  3187 ;; This function is called by:
  3188 ;;		_mess_handler
  3189 ;; This function uses a non-reentrant model
  3190 ;;
  3191                           
  3192                           
  3193                           ;psect for function _measure_Impedance
  3194  0065                     _measure_Impedance:	
  3195                           
  3196                           ;comm.c: 113: unsigned char aux[13];
  3197                           ;comm.c: 114: unsigned short value1,value2,value3;
  3198                           ;comm.c: 117: BIO3 asic;
  3199                           ;comm.c: 123: aux[0] = 'z';
  3200                           
  3201                           ;incstack = 0
  3202                           ; Regs used in _measure_Impedance: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3203  0065  307A               	movlw	122
  3204  0066  0020               	movlb	0	; select bank0
  3205  0067  00D2               	movwf	??_measure_Impedance
  3206  0068  0852               	movf	??_measure_Impedance,w
  3207  0069  00D3               	movwf	measure_Impedance@aux
  3208                           
  3209                           ;comm.c: 127: asic.data[0] = (unsigned short)(mess_rec[1]);
  3210  006A  0843               	movf	_mess_rec+1,w	;volatile
  3211  006B  00D2               	movwf	??_measure_Impedance
  3212  006C  0852               	movf	??_measure_Impedance,w
  3213  006D  00E4               	movwf	measure_Impedance@asic
  3214                           
  3215                           ;comm.c: 128: asic.data[1] = (unsigned short)(mess_rec[2]);
  3216  006E  0844               	movf	_mess_rec+2,w	;volatile
  3217  006F  00D2               	movwf	??_measure_Impedance
  3218  0070  0852               	movf	??_measure_Impedance,w
  3219  0071  00E5               	movwf	measure_Impedance@asic+1
  3220                           
  3221                           ;comm.c: 131: asic.data_bits.CE = 0;
  3222  0072  1364               	bcf	measure_Impedance@asic,6
  3223                           
  3224                           ;comm.c: 132: BIO_config(asic);
  3225  0073  0865               	movf	measure_Impedance@asic+1,w
  3226  0074  00CD               	movwf	BIO_config@conf+1
  3227  0075  0864               	movf	measure_Impedance@asic,w
  3228  0076  00CC               	movwf	BIO_config@conf
  3229  0077  2312               	fcall	_BIO_config
  3230                           
  3231                           ;comm.c: 145: _delay((unsigned long)((20)*(500000/4000.0)));
  3232  0078  3004               	movlw	4
  3233  0079  0020               	movlb	0	; select bank0
  3234  007A  00D2               	movwf	??_measure_Impedance
  3235  007B  303D               	movlw	61
  3236  007C                     u967:	
  3237  007C  0B89               	decfsz	9,f
  3238  007D  287C               	goto	u967
  3239  007E  0BD2               	decfsz	??_measure_Impedance,f
  3240  007F  287C               	goto	u967
  3241  0080  3200               	nop2
  3242                           
  3243                           ;comm.c: 147: value1 = ADC_2();
  3244  0081  23AE               	fcall	_ADC_2
  3245  0082  0020               	movlb	0	; select bank0
  3246  0083  084D               	movf	?_ADC_2+1,w
  3247  0084  00E1               	movwf	measure_Impedance@value1+1
  3248  0085  084C               	movf	?_ADC_2,w
  3249  0086  00E0               	movwf	measure_Impedance@value1
  3250                           
  3251                           ;comm.c: 148: value2 = ADC_4();
  3252  0087  238B               	fcall	_ADC_4
  3253  0088  0020               	movlb	0	; select bank0
  3254  0089  084D               	movf	?_ADC_4+1,w
  3255  008A  00E3               	movwf	measure_Impedance@value2+1
  3256  008B  084C               	movf	?_ADC_4,w
  3257  008C  00E2               	movwf	measure_Impedance@value2
  3258                           
  3259                           ;comm.c: 150: aux[1] = (unsigned char)(value1 & 0xff);
  3260  008D  0860               	movf	measure_Impedance@value1,w
  3261  008E  00D2               	movwf	??_measure_Impedance
  3262  008F  0852               	movf	??_measure_Impedance,w
  3263  0090  00D4               	movwf	measure_Impedance@aux+1
  3264                           
  3265                           ;comm.c: 151: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  3266  0091  0861               	movf	measure_Impedance@value1+1,w
  3267  0092  00D2               	movwf	??_measure_Impedance
  3268  0093  0852               	movf	??_measure_Impedance,w
  3269  0094  00D5               	movwf	measure_Impedance@aux+2
  3270                           
  3271                           ;comm.c: 152: aux[3] = (unsigned char)(value2 & 0xff);
  3272  0095  0862               	movf	measure_Impedance@value2,w
  3273  0096  00D2               	movwf	??_measure_Impedance
  3274  0097  0852               	movf	??_measure_Impedance,w
  3275  0098  00D6               	movwf	measure_Impedance@aux+3
  3276                           
  3277                           ;comm.c: 153: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  3278  0099  0863               	movf	measure_Impedance@value2+1,w
  3279  009A  00D2               	movwf	??_measure_Impedance
  3280  009B  0852               	movf	??_measure_Impedance,w
  3281  009C  00D7               	movwf	measure_Impedance@aux+4
  3282                           
  3283                           ;comm.c: 156: asic.data_bits.CE = 1;
  3284  009D  1764               	bsf	measure_Impedance@asic,6
  3285                           
  3286                           ;comm.c: 157: asic.data_bits.IQ = 0;
  3287  009E  11E5               	bcf	measure_Impedance@asic+1,3
  3288                           
  3289                           ;comm.c: 160: BIO_config(asic);
  3290  009F  0865               	movf	measure_Impedance@asic+1,w
  3291  00A0  00CD               	movwf	BIO_config@conf+1
  3292  00A1  0864               	movf	measure_Impedance@asic,w
  3293  00A2  00CC               	movwf	BIO_config@conf
  3294  00A3  2312               	fcall	_BIO_config
  3295                           
  3296                           ;comm.c: 164: _delay((unsigned long)((20)*(500000/4000.0)));
  3297  00A4  3004               	movlw	4
  3298  00A5  0020               	movlb	0	; select bank0
  3299  00A6  00D2               	movwf	??_measure_Impedance
  3300  00A7  303D               	movlw	61
  3301  00A8                     u977:	
  3302  00A8  0B89               	decfsz	9,f
  3303  00A9  28A8               	goto	u977
  3304  00AA  0BD2               	decfsz	??_measure_Impedance,f
  3305  00AB  28A8               	goto	u977
  3306  00AC  3200               	nop2
  3307                           
  3308                           ;comm.c: 166: value1 = ADC_2();
  3309  00AD  23AE               	fcall	_ADC_2
  3310  00AE  0020               	movlb	0	; select bank0
  3311  00AF  084D               	movf	?_ADC_2+1,w
  3312  00B0  00E1               	movwf	measure_Impedance@value1+1
  3313  00B1  084C               	movf	?_ADC_2,w
  3314  00B2  00E0               	movwf	measure_Impedance@value1
  3315                           
  3316                           ;comm.c: 167: value2 = ADC_4();
  3317  00B3  238B               	fcall	_ADC_4
  3318  00B4  0020               	movlb	0	; select bank0
  3319  00B5  084D               	movf	?_ADC_4+1,w
  3320  00B6  00E3               	movwf	measure_Impedance@value2+1
  3321  00B7  084C               	movf	?_ADC_4,w
  3322  00B8  00E2               	movwf	measure_Impedance@value2
  3323                           
  3324                           ;comm.c: 169: aux[5] = (unsigned char)(value1 & 0xff);
  3325  00B9  0860               	movf	measure_Impedance@value1,w
  3326  00BA  00D2               	movwf	??_measure_Impedance
  3327  00BB  0852               	movf	??_measure_Impedance,w
  3328  00BC  00D8               	movwf	measure_Impedance@aux+5
  3329                           
  3330                           ;comm.c: 170: aux[6] = (unsigned char)((value1 >> 8) & 0xff);
  3331  00BD  0861               	movf	measure_Impedance@value1+1,w
  3332  00BE  00D2               	movwf	??_measure_Impedance
  3333  00BF  0852               	movf	??_measure_Impedance,w
  3334  00C0  00D9               	movwf	measure_Impedance@aux+6
  3335                           
  3336                           ;comm.c: 171: aux[7] = (unsigned char)(value2 & 0xff);
  3337  00C1  0862               	movf	measure_Impedance@value2,w
  3338  00C2  00D2               	movwf	??_measure_Impedance
  3339  00C3  0852               	movf	??_measure_Impedance,w
  3340  00C4  00DA               	movwf	measure_Impedance@aux+7
  3341                           
  3342                           ;comm.c: 172: aux[8] = (unsigned char)((value2 >> 8) & 0xff);
  3343  00C5  0863               	movf	measure_Impedance@value2+1,w
  3344  00C6  00D2               	movwf	??_measure_Impedance
  3345  00C7  0852               	movf	??_measure_Impedance,w
  3346  00C8  00DB               	movwf	measure_Impedance@aux+8
  3347                           
  3348                           ;comm.c: 175: asic.data_bits.IQ = 1;
  3349  00C9  15E5               	bsf	measure_Impedance@asic+1,3
  3350                           
  3351                           ;comm.c: 178: BIO_config(asic);
  3352  00CA  0865               	movf	measure_Impedance@asic+1,w
  3353  00CB  00CD               	movwf	BIO_config@conf+1
  3354  00CC  0864               	movf	measure_Impedance@asic,w
  3355  00CD  00CC               	movwf	BIO_config@conf
  3356  00CE  2312               	fcall	_BIO_config
  3357                           
  3358                           ;comm.c: 182: _delay((unsigned long)((20)*(500000/4000.0)));
  3359  00CF  3004               	movlw	4
  3360  00D0  0020               	movlb	0	; select bank0
  3361  00D1  00D2               	movwf	??_measure_Impedance
  3362  00D2  303D               	movlw	61
  3363  00D3                     u987:	
  3364  00D3  0B89               	decfsz	9,f
  3365  00D4  28D3               	goto	u987
  3366  00D5  0BD2               	decfsz	??_measure_Impedance,f
  3367  00D6  28D3               	goto	u987
  3368  00D7  3200               	nop2
  3369                           
  3370                           ;comm.c: 184: value1 = ADC_2();
  3371  00D8  23AE               	fcall	_ADC_2
  3372  00D9  0020               	movlb	0	; select bank0
  3373  00DA  084D               	movf	?_ADC_2+1,w
  3374  00DB  00E1               	movwf	measure_Impedance@value1+1
  3375  00DC  084C               	movf	?_ADC_2,w
  3376  00DD  00E0               	movwf	measure_Impedance@value1
  3377                           
  3378                           ;comm.c: 185: value2 = ADC_4();
  3379  00DE  238B               	fcall	_ADC_4
  3380  00DF  0020               	movlb	0	; select bank0
  3381  00E0  084D               	movf	?_ADC_4+1,w
  3382  00E1  00E3               	movwf	measure_Impedance@value2+1
  3383  00E2  084C               	movf	?_ADC_4,w
  3384  00E3  00E2               	movwf	measure_Impedance@value2
  3385                           
  3386                           ;comm.c: 187: aux[9] = (unsigned char)(value1 & 0xff);
  3387  00E4  0860               	movf	measure_Impedance@value1,w
  3388  00E5  00D2               	movwf	??_measure_Impedance
  3389  00E6  0852               	movf	??_measure_Impedance,w
  3390  00E7  00DC               	movwf	measure_Impedance@aux+9
  3391                           
  3392                           ;comm.c: 188: aux[10] = (unsigned char)((value1 >> 8) & 0xff);
  3393  00E8  0861               	movf	measure_Impedance@value1+1,w
  3394  00E9  00D2               	movwf	??_measure_Impedance
  3395  00EA  0852               	movf	??_measure_Impedance,w
  3396  00EB  00DD               	movwf	measure_Impedance@aux+10
  3397                           
  3398                           ;comm.c: 189: aux[11] = (unsigned char)(value2 & 0xff);
  3399  00EC  0862               	movf	measure_Impedance@value2,w
  3400  00ED  00D2               	movwf	??_measure_Impedance
  3401  00EE  0852               	movf	??_measure_Impedance,w
  3402  00EF  00DE               	movwf	measure_Impedance@aux+11
  3403                           
  3404                           ;comm.c: 190: aux[12] = (unsigned char)((value2 >> 8) & 0xff);
  3405  00F0  0863               	movf	measure_Impedance@value2+1,w
  3406  00F1  00D2               	movwf	??_measure_Impedance
  3407  00F2  0852               	movf	??_measure_Impedance,w
  3408  00F3  00DF               	movwf	measure_Impedance@aux+12
  3409                           
  3410                           ;comm.c: 193: lputs_ISR(aux,13);
  3411  00F4  300D               	movlw	13
  3412  00F5  00D2               	movwf	??_measure_Impedance
  3413  00F6  0852               	movf	??_measure_Impedance,w
  3414  00F7  00CC               	movwf	lputs_ISR@length
  3415  00F8  3053               	movlw	(low (measure_Impedance@aux| 0))& (0+255)
  3416  00F9  233D               	fcall	_lputs_ISR
  3417  00FA  0008               	return
  3418  00FB                     __end_of_measure_Impedance:	
  3419                           
  3420                           	psect	text14
  3421  038B                     __ptext14:	
  3422 ;; *************** function _ADC_4 *****************
  3423 ;; Defined at:
  3424 ;;		line 38 in file "ADC1823.c"
  3425 ;; Parameters:    Size  Location     Type
  3426 ;;		None
  3427 ;; Auto vars:     Size  Location     Type
  3428 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  3429 ;; Return value:  Size  Location     Type
  3430 ;;                  2    0[BANK0 ] unsigned short 
  3431 ;; Registers used:
  3432 ;;		wreg
  3433 ;; Tracked objects:
  3434 ;;		On entry : 0/0
  3435 ;;		On exit  : 0/0
  3436 ;;		Unchanged: 0/0
  3437 ;; Data sizes:     COMMON   BANK0   BANK1
  3438 ;;      Params:         0       2       0
  3439 ;;      Locals:         0       2       0
  3440 ;;      Temps:          0       2       0
  3441 ;;      Totals:         0       6       0
  3442 ;;Total ram usage:        6 bytes
  3443 ;; Hardware stack levels used:    1
  3444 ;; Hardware stack levels required when called:    2
  3445 ;; This function calls:
  3446 ;;		Nothing
  3447 ;; This function is called by:
  3448 ;;		_read_ADC_channels
  3449 ;;		_measure_Impedance
  3450 ;;		_measure_Impedance_no_offset
  3451 ;;		_measure_Offset
  3452 ;; This function uses a non-reentrant model
  3453 ;;
  3454                           
  3455                           
  3456                           ;psect for function _ADC_4
  3457  038B                     _ADC_4:	
  3458                           
  3459                           ;ADC1823.c: 40: unsigned short ADC_value;
  3460                           ;ADC1823.c: 42: { ADCON0 = 0b00010001;};
  3461                           
  3462                           ;incstack = 0
  3463                           ; Regs used in _ADC_4: [wreg]
  3464  038B  3011               	movlw	17
  3465  038C  0021               	movlb	1	; select bank1
  3466  038D  009D               	movwf	29	;volatile
  3467                           
  3468                           ;ADC1823.c: 43: __nop();
  3469  038E  0000               	nop
  3470                           
  3471                           ;ADC1823.c: 44: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  3472  038F  0021               	movlb	1	; select bank1
  3473  0390  149D               	bsf	29,1	;volatile
  3474  0391                     l399:	
  3475  0391  189D               	btfsc	29,1	;volatile
  3476  0392  2B91               	goto	l399
  3477  0393  081C               	movf	28,w	;volatile
  3478  0394  0020               	movlb	0	; select bank0
  3479  0395  00CE               	movwf	??_ADC_4
  3480  0396  01CF               	clrf	??_ADC_4+1
  3481  0397  084E               	movf	??_ADC_4,w
  3482  0398  00D0               	movwf	ADC_4@ADC_value
  3483  0399  084F               	movf	??_ADC_4+1,w
  3484  039A  00D1               	movwf	ADC_4@ADC_value+1
  3485  039B  3008               	movlw	8
  3486  039C                     u805:	
  3487  039C  35D0               	lslf	ADC_4@ADC_value,f
  3488  039D  0DD1               	rlf	ADC_4@ADC_value+1,f
  3489  039E  0B89               	decfsz	9,f
  3490  039F  2B9C               	goto	u805
  3491  03A0  0021               	movlb	1	; select bank1
  3492  03A1  081B               	movf	27,w	;volatile
  3493  03A2  0020               	movlb	0	; select bank0
  3494  03A3  00CE               	movwf	??_ADC_4
  3495  03A4  01CF               	clrf	??_ADC_4+1
  3496  03A5  084E               	movf	??_ADC_4,w
  3497  03A6  04D0               	iorwf	ADC_4@ADC_value,f
  3498  03A7  084F               	movf	??_ADC_4+1,w
  3499  03A8  04D1               	iorwf	ADC_4@ADC_value+1,f
  3500                           
  3501                           ;ADC1823.c: 45: return ADC_value;
  3502  03A9  0851               	movf	ADC_4@ADC_value+1,w
  3503  03AA  00CD               	movwf	?_ADC_4+1
  3504  03AB  0850               	movf	ADC_4@ADC_value,w
  3505  03AC  00CC               	movwf	?_ADC_4
  3506  03AD  0008               	return
  3507  03AE                     __end_of_ADC_4:	
  3508                           
  3509                           	psect	text15
  3510  03AE                     __ptext15:	
  3511 ;; *************** function _ADC_2 *****************
  3512 ;; Defined at:
  3513 ;;		line 25 in file "ADC1823.c"
  3514 ;; Parameters:    Size  Location     Type
  3515 ;;		None
  3516 ;; Auto vars:     Size  Location     Type
  3517 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  3518 ;; Return value:  Size  Location     Type
  3519 ;;                  2    0[BANK0 ] unsigned short 
  3520 ;; Registers used:
  3521 ;;		wreg
  3522 ;; Tracked objects:
  3523 ;;		On entry : 0/0
  3524 ;;		On exit  : 0/0
  3525 ;;		Unchanged: 0/0
  3526 ;; Data sizes:     COMMON   BANK0   BANK1
  3527 ;;      Params:         0       2       0
  3528 ;;      Locals:         0       2       0
  3529 ;;      Temps:          0       2       0
  3530 ;;      Totals:         0       6       0
  3531 ;;Total ram usage:        6 bytes
  3532 ;; Hardware stack levels used:    1
  3533 ;; Hardware stack levels required when called:    2
  3534 ;; This function calls:
  3535 ;;		Nothing
  3536 ;; This function is called by:
  3537 ;;		_read_ADC_channels
  3538 ;;		_measure_Impedance
  3539 ;;		_measure_Impedance_no_offset
  3540 ;;		_measure_Offset
  3541 ;; This function uses a non-reentrant model
  3542 ;;
  3543                           
  3544                           
  3545                           ;psect for function _ADC_2
  3546  03AE                     _ADC_2:	
  3547                           
  3548                           ;ADC1823.c: 27: unsigned short ADC_value;
  3549                           ;ADC1823.c: 29: { ADCON0 = 0b00001001;};
  3550                           
  3551                           ;incstack = 0
  3552                           ; Regs used in _ADC_2: [wreg]
  3553  03AE  3009               	movlw	9
  3554  03AF  0021               	movlb	1	; select bank1
  3555  03B0  009D               	movwf	29	;volatile
  3556                           
  3557                           ;ADC1823.c: 30: __nop();
  3558  03B1  0000               	nop
  3559                           
  3560                           ;ADC1823.c: 34: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  3561  03B2  0021               	movlb	1	; select bank1
  3562  03B3  149D               	bsf	29,1	;volatile
  3563  03B4                     l393:	
  3564  03B4  189D               	btfsc	29,1	;volatile
  3565  03B5  2BB4               	goto	l393
  3566  03B6  081C               	movf	28,w	;volatile
  3567  03B7  0020               	movlb	0	; select bank0
  3568  03B8  00CE               	movwf	??_ADC_2
  3569  03B9  01CF               	clrf	??_ADC_2+1
  3570  03BA  084E               	movf	??_ADC_2,w
  3571  03BB  00D0               	movwf	ADC_2@ADC_value
  3572  03BC  084F               	movf	??_ADC_2+1,w
  3573  03BD  00D1               	movwf	ADC_2@ADC_value+1
  3574  03BE  3008               	movlw	8
  3575  03BF                     u785:	
  3576  03BF  35D0               	lslf	ADC_2@ADC_value,f
  3577  03C0  0DD1               	rlf	ADC_2@ADC_value+1,f
  3578  03C1  0B89               	decfsz	9,f
  3579  03C2  2BBF               	goto	u785
  3580  03C3  0021               	movlb	1	; select bank1
  3581  03C4  081B               	movf	27,w	;volatile
  3582  03C5  0020               	movlb	0	; select bank0
  3583  03C6  00CE               	movwf	??_ADC_2
  3584  03C7  01CF               	clrf	??_ADC_2+1
  3585  03C8  084E               	movf	??_ADC_2,w
  3586  03C9  04D0               	iorwf	ADC_2@ADC_value,f
  3587  03CA  084F               	movf	??_ADC_2+1,w
  3588  03CB  04D1               	iorwf	ADC_2@ADC_value+1,f
  3589                           
  3590                           ;ADC1823.c: 35: return ADC_value;
  3591  03CC  0851               	movf	ADC_2@ADC_value+1,w
  3592  03CD  00CD               	movwf	?_ADC_2+1
  3593  03CE  0850               	movf	ADC_2@ADC_value,w
  3594  03CF  00CC               	movwf	?_ADC_2
  3595  03D0  0008               	return
  3596  03D1                     __end_of_ADC_2:	
  3597                           
  3598                           	psect	text16
  3599  0403                     __ptext16:	
  3600 ;; *************** function _config_ASIC *****************
  3601 ;; Defined at:
  3602 ;;		line 57 in file "comm.c"
  3603 ;; Parameters:    Size  Location     Type
  3604 ;;		None
  3605 ;; Auto vars:     Size  Location     Type
  3606 ;;  asic            2    6[BANK0 ] struct .
  3607 ;; Return value:  Size  Location     Type
  3608 ;;                  1    wreg      void 
  3609 ;; Registers used:
  3610 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3611 ;; Tracked objects:
  3612 ;;		On entry : 0/0
  3613 ;;		On exit  : 0/0
  3614 ;;		Unchanged: 0/0
  3615 ;; Data sizes:     COMMON   BANK0   BANK1
  3616 ;;      Params:         0       0       0
  3617 ;;      Locals:         0       2       0
  3618 ;;      Temps:          0       1       0
  3619 ;;      Totals:         0       3       0
  3620 ;;Total ram usage:        3 bytes
  3621 ;; Hardware stack levels used:    1
  3622 ;; Hardware stack levels required when called:    4
  3623 ;; This function calls:
  3624 ;;		_BIO_config
  3625 ;;		_lputs_ISR
  3626 ;; This function is called by:
  3627 ;;		_mess_handler
  3628 ;; This function uses a non-reentrant model
  3629 ;;
  3630                           
  3631                           
  3632                           ;psect for function _config_ASIC
  3633  0403                     _config_ASIC:	
  3634                           
  3635                           ;comm.c: 60: BIO3 asic;
  3636                           ;comm.c: 66: asic.data[0] = mess_rec[1];
  3637                           
  3638                           ;incstack = 0
  3639                           ; Regs used in _config_ASIC: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3640  0403  0020               	movlb	0	; select bank0
  3641  0404  0843               	movf	_mess_rec+1,w	;volatile
  3642  0405  00D1               	movwf	??_config_ASIC
  3643  0406  0851               	movf	??_config_ASIC,w
  3644  0407  00D2               	movwf	config_ASIC@asic
  3645                           
  3646                           ;comm.c: 67: asic.data[1] = mess_rec[2];
  3647  0408  0844               	movf	_mess_rec+2,w	;volatile
  3648  0409  00D1               	movwf	??_config_ASIC
  3649  040A  0851               	movf	??_config_ASIC,w
  3650  040B  00D3               	movwf	config_ASIC@asic+1
  3651                           
  3652                           ;comm.c: 69: lputs_ISR(mess_rec,mess_rec_size);
  3653  040C  0841               	movf	_mess_rec_size,w	;volatile
  3654  040D  00D1               	movwf	??_config_ASIC
  3655  040E  0851               	movf	??_config_ASIC,w
  3656  040F  00CC               	movwf	lputs_ISR@length
  3657  0410  3042               	movlw	(low (_mess_rec| 0))& (0+255)
  3658  0411  233D               	fcall	_lputs_ISR
  3659                           
  3660                           ;comm.c: 71: BIO_config(asic);
  3661  0412  0020               	movlb	0	; select bank0
  3662  0413  0853               	movf	config_ASIC@asic+1,w
  3663  0414  00CD               	movwf	BIO_config@conf+1
  3664  0415  0852               	movf	config_ASIC@asic,w
  3665  0416  00CC               	movwf	BIO_config@conf
  3666  0417  2312               	fcall	_BIO_config
  3667  0418  0008               	return
  3668  0419                     __end_of_config_ASIC:	
  3669                           
  3670                           	psect	text17
  3671  0312                     __ptext17:	
  3672 ;; *************** function _BIO_config *****************
  3673 ;; Defined at:
  3674 ;;		line 41 in file "bio3.c"
  3675 ;; Parameters:    Size  Location     Type
  3676 ;;  conf            2    0[BANK0 ] struct .
  3677 ;; Auto vars:     Size  Location     Type
  3678 ;;  out             1    4[BANK0 ] unsigned char 
  3679 ;;  i               1    3[BANK0 ] unsigned char 
  3680 ;; Return value:  Size  Location     Type
  3681 ;;                  1    wreg      void 
  3682 ;; Registers used:
  3683 ;;		wreg, status,2, status,0
  3684 ;; Tracked objects:
  3685 ;;		On entry : 0/0
  3686 ;;		On exit  : 0/0
  3687 ;;		Unchanged: 0/0
  3688 ;; Data sizes:     COMMON   BANK0   BANK1
  3689 ;;      Params:         0       2       0
  3690 ;;      Locals:         0       2       0
  3691 ;;      Temps:          0       1       0
  3692 ;;      Totals:         0       5       0
  3693 ;;Total ram usage:        5 bytes
  3694 ;; Hardware stack levels used:    1
  3695 ;; Hardware stack levels required when called:    2
  3696 ;; This function calls:
  3697 ;;		Nothing
  3698 ;; This function is called by:
  3699 ;;		_config_ASIC
  3700 ;;		_measure_Impedance
  3701 ;;		_measure_Impedance_no_offset
  3702 ;;		_measure_Offset
  3703 ;;		_measure_Impedance_SE
  3704 ;; This function uses a non-reentrant model
  3705 ;;
  3706                           
  3707                           
  3708                           ;psect for function _BIO_config
  3709  0312                     _BIO_config:	
  3710                           
  3711                           ;bio3.c: 43: unsigned char i, out;
  3712                           ;bio3.c: 45: out &= 0b11110111; PORTC = out;;
  3713                           
  3714                           ;incstack = 0
  3715                           ; Regs used in _BIO_config: [wreg+status,2+status,0]
  3716  0312  30F7               	movlw	247
  3717  0313  0020               	movlb	0	; select bank0
  3718  0314  00CE               	movwf	??_BIO_config
  3719  0315  084E               	movf	??_BIO_config,w
  3720  0316  05D0               	andwf	BIO_config@out,f
  3721  0317  0850               	movf	BIO_config@out,w
  3722  0318  008E               	movwf	14	;volatile
  3723                           
  3724                           ;bio3.c: 46: ;;
  3725                           ;bio3.c: 48: RA5 = 0;;
  3726  0319  128C               	bcf	12,5	;volatile
  3727                           
  3728                           ;bio3.c: 49: ;;
  3729                           ;bio3.c: 51: RA5 = 1;;
  3730  031A  168C               	bsf	12,5	;volatile
  3731                           
  3732                           ;bio3.c: 53: for(i = 0; i < 16; i++) {
  3733  031B  01CF               	clrf	BIO_config@i
  3734  031C                     L1:	
  3735  031C  3010               	movlw	16
  3736  031D  024F               	subwf	BIO_config@i,w
  3737  031E  1803               	btfsc	3,0
  3738  031F  0008               	return
  3739                           
  3740                           ;bio3.c: 54: if (conf.datashort & 0x0001) {
  3741  0320  1C4C               	btfss	BIO_config@conf,0
  3742  0321  2B24               	goto	l2118
  3743                           
  3744                           ;bio3.c: 55: out |= 0b00000100; PORTC = out;;
  3745  0322  1550               	bsf	BIO_config@out,2
  3746  0323  2B28               	goto	l2120
  3747  0324                     l2118:	
  3748                           ;bio3.c: 56: } else {
  3749                           
  3750                           
  3751                           ;bio3.c: 57: out &= 0b11111011; PORTC = out;;
  3752  0324  30FB               	movlw	251
  3753  0325  00CE               	movwf	??_BIO_config
  3754  0326  084E               	movf	??_BIO_config,w
  3755  0327  05D0               	andwf	BIO_config@out,f
  3756  0328                     l2120:	
  3757  0328  0850               	movf	BIO_config@out,w
  3758  0329  008E               	movwf	14	;volatile
  3759                           
  3760                           ;bio3.c: 58: }
  3761                           ;bio3.c: 59: conf.datashort >>= 1;
  3762  032A  3001               	movlw	1
  3763  032B                     u735:	
  3764  032B  36CD               	lsrf	BIO_config@conf+1,f
  3765  032C  0CCC               	rrf	BIO_config@conf,f
  3766  032D  0B89               	decfsz	9,f
  3767  032E  2B2B               	goto	u735
  3768                           
  3769                           ;bio3.c: 61: ;;
  3770                           ;bio3.c: 63: out |= 0b00001000; PORTC = out;;
  3771  032F  15D0               	bsf	BIO_config@out,3
  3772  0330  0850               	movf	BIO_config@out,w
  3773  0331  008E               	movwf	14	;volatile
  3774                           
  3775                           ;bio3.c: 64: ;;
  3776                           ;bio3.c: 65: out &= 0b11110111; PORTC = out;;
  3777  0332  30F7               	movlw	247
  3778  0333  00CE               	movwf	??_BIO_config
  3779  0334  084E               	movf	??_BIO_config,w
  3780  0335  05D0               	andwf	BIO_config@out,f
  3781  0336  0850               	movf	BIO_config@out,w
  3782  0337  008E               	movwf	14	;volatile
  3783  0338  3001               	movlw	1
  3784  0339  00CE               	movwf	??_BIO_config
  3785  033A  084E               	movf	??_BIO_config,w
  3786  033B  07CF               	addwf	BIO_config@i,f
  3787  033C  2B1C               	goto	L1
  3788  033D                     __end_of_BIO_config:	
  3789                           
  3790                           	psect	text18
  3791  02E2                     __ptext18:	
  3792 ;; *************** function _calibrate_reader *****************
  3793 ;; Defined at:
  3794 ;;		line 415 in file "comm.c"
  3795 ;; Parameters:    Size  Location     Type
  3796 ;;		None
  3797 ;; Auto vars:     Size  Location     Type
  3798 ;;  aux             8    6[BANK0 ] unsigned char [8]
  3799 ;; Return value:  Size  Location     Type
  3800 ;;                  1    wreg      void 
  3801 ;; Registers used:
  3802 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3803 ;; Tracked objects:
  3804 ;;		On entry : 0/0
  3805 ;;		On exit  : 0/0
  3806 ;;		Unchanged: 0/0
  3807 ;; Data sizes:     COMMON   BANK0   BANK1
  3808 ;;      Params:         0       0       0
  3809 ;;      Locals:         0       8       0
  3810 ;;      Temps:          0       1       0
  3811 ;;      Totals:         0       9       0
  3812 ;;Total ram usage:        9 bytes
  3813 ;; Hardware stack levels used:    1
  3814 ;; Hardware stack levels required when called:    4
  3815 ;; This function calls:
  3816 ;;		_lputs_ISR
  3817 ;; This function is called by:
  3818 ;;		_mess_handler
  3819 ;; This function uses a non-reentrant model
  3820 ;;
  3821                           
  3822                           
  3823                           ;psect for function _calibrate_reader
  3824  02E2                     _calibrate_reader:	
  3825                           
  3826                           ;comm.c: 417: unsigned char aux[8];
  3827                           ;comm.c: 419: aux[0] = 'h';
  3828                           
  3829                           ;incstack = 0
  3830                           ; Regs used in _calibrate_reader: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3831  02E2  3068               	movlw	104
  3832  02E3  0020               	movlb	0	; select bank0
  3833  02E4  00D1               	movwf	??_calibrate_reader
  3834  02E5  0851               	movf	??_calibrate_reader,w
  3835  02E6  00D2               	movwf	calibrate_reader@aux
  3836                           
  3837                           ;comm.c: 420: aux[1] = 'o';
  3838  02E7  306F               	movlw	111
  3839  02E8  00D1               	movwf	??_calibrate_reader
  3840  02E9  0851               	movf	??_calibrate_reader,w
  3841  02EA  00D3               	movwf	calibrate_reader@aux+1
  3842                           
  3843                           ;comm.c: 421: aux[2] = 'l';
  3844  02EB  306C               	movlw	108
  3845  02EC  00D1               	movwf	??_calibrate_reader
  3846  02ED  0851               	movf	??_calibrate_reader,w
  3847  02EE  00D4               	movwf	calibrate_reader@aux+2
  3848                           
  3849                           ;comm.c: 422: aux[3] = 'a';
  3850  02EF  3061               	movlw	97
  3851  02F0  00D1               	movwf	??_calibrate_reader
  3852  02F1  0851               	movf	??_calibrate_reader,w
  3853  02F2  00D5               	movwf	calibrate_reader@aux+3
  3854                           
  3855                           ;comm.c: 423: aux[4] = 0x00;
  3856  02F3  01D6               	clrf	calibrate_reader@aux+4
  3857                           
  3858                           ;comm.c: 424: aux[5] = 0xaa;
  3859  02F4  30AA               	movlw	170
  3860  02F5  00D1               	movwf	??_calibrate_reader
  3861  02F6  0851               	movf	??_calibrate_reader,w
  3862  02F7  00D7               	movwf	calibrate_reader@aux+5
  3863                           
  3864                           ;comm.c: 425: aux[6] = 0xfe;
  3865  02F8  30FE               	movlw	254
  3866  02F9  00D1               	movwf	??_calibrate_reader
  3867  02FA  0851               	movf	??_calibrate_reader,w
  3868  02FB  00D8               	movwf	calibrate_reader@aux+6
  3869                           
  3870                           ;comm.c: 426: aux[7] = '@';
  3871  02FC  3040               	movlw	64
  3872  02FD  00D1               	movwf	??_calibrate_reader
  3873  02FE  0851               	movf	??_calibrate_reader,w
  3874  02FF  00D9               	movwf	calibrate_reader@aux+7
  3875  0300                     l372:	
  3876                           ;comm.c: 428: while (1) {
  3877                           
  3878  0300  0064               	clrwdt	;# 
  3879                           
  3880                           ;comm.c: 430: _delay((unsigned long)((250)*(500000/4000.0)));
  3881  0301  3029               	movlw	41
  3882  0302  0020               	movlb	0	; select bank0
  3883  0303  00D1               	movwf	??_calibrate_reader
  3884  0304  3094               	movlw	148
  3885  0305                     u997:	
  3886  0305  0B89               	decfsz	9,f
  3887  0306  2B05               	goto	u997
  3888  0307  0BD1               	decfsz	??_calibrate_reader,f
  3889  0308  2B05               	goto	u997
  3890  0309  0000               	nop
  3891                           
  3892                           ;comm.c: 431: lputs_ISR(aux,8);
  3893  030A  3008               	movlw	8
  3894  030B  0020               	movlb	0	; select bank0
  3895  030C  00D1               	movwf	??_calibrate_reader
  3896  030D  0851               	movf	??_calibrate_reader,w
  3897  030E  00CC               	movwf	lputs_ISR@length
  3898  030F  3052               	movlw	(low (calibrate_reader@aux| 0))& (0+255)
  3899  0310  233D               	fcall	_lputs_ISR
  3900  0311  2B00               	goto	l372
  3901  0312                     __end_of_calibrate_reader:	
  3902                           
  3903                           	psect	text19
  3904  033D                     __ptext19:	
  3905 ;; *************** function _lputs_ISR *****************
  3906 ;; Defined at:
  3907 ;;		line 132 in file "USART1823.c"
  3908 ;; Parameters:    Size  Location     Type
  3909 ;;  data            1    wreg     PTR unsigned char 
  3910 ;;		 -> calibrate_reader@aux(8), measure_Impedance_SE@aux(13), measure_Offset@aux(5), measure_Impedance_no_offset@aux(13
      +), 
  3911 ;;		 -> measure_Impedance@aux(13), read_ADC_channels@aux(7), mess_rec(10), 
  3912 ;;  length          1    0[BANK0 ] unsigned char 
  3913 ;; Auto vars:     Size  Location     Type
  3914 ;;  data            1    4[BANK0 ] PTR unsigned char 
  3915 ;;		 -> calibrate_reader@aux(8), measure_Impedance_SE@aux(13), measure_Offset@aux(5), measure_Impedance_no_offset@aux(13
      +), 
  3916 ;;		 -> measure_Impedance@aux(13), read_ADC_channels@aux(7), mess_rec(10), 
  3917 ;;  i               1    3[BANK0 ] unsigned char 
  3918 ;; Return value:  Size  Location     Type
  3919 ;;                  1    wreg      void 
  3920 ;; Registers used:
  3921 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3922 ;; Tracked objects:
  3923 ;;		On entry : 0/0
  3924 ;;		On exit  : 0/0
  3925 ;;		Unchanged: 0/0
  3926 ;; Data sizes:     COMMON   BANK0   BANK1
  3927 ;;      Params:         0       1       0
  3928 ;;      Locals:         0       2       0
  3929 ;;      Temps:          0       2       0
  3930 ;;      Totals:         0       5       0
  3931 ;;Total ram usage:        5 bytes
  3932 ;; Hardware stack levels used:    1
  3933 ;; Hardware stack levels required when called:    3
  3934 ;; This function calls:
  3935 ;;		_close_RX_USART
  3936 ;; This function is called by:
  3937 ;;		_mess_handler
  3938 ;;		_config_ASIC
  3939 ;;		_read_ADC_channels
  3940 ;;		_measure_Impedance
  3941 ;;		_measure_Impedance_no_offset
  3942 ;;		_measure_Offset
  3943 ;;		_measure_Impedance_SE
  3944 ;;		_calibrate_reader
  3945 ;; This function uses a non-reentrant model
  3946 ;;
  3947                           
  3948                           
  3949                           ;psect for function _lputs_ISR
  3950  033D                     _lputs_ISR:	
  3951                           
  3952                           ;incstack = 0
  3953                           ; Regs used in _lputs_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3954                           ;lputs_ISR@data stored from wreg
  3955  033D  0020               	movlb	0	; select bank0
  3956  033E  00D0               	movwf	lputs_ISR@data
  3957                           
  3958                           ;USART1823.c: 134: unsigned char i;
  3959                           ;USART1823.c: 136: if (USART_tx_flag == 1)
  3960  033F  0372               	decf	_USART_tx_flag,w	;volatile
  3961  0340  1903               	btfsc	3,2
  3962  0341  0008               	return
  3963                           
  3964                           ;USART1823.c: 139: for (i = 0; i < length; i++)
  3965                           
  3966                           ;USART1823.c: 137: return;
  3967  0342  01CF               	clrf	lputs_ISR@i
  3968  0343                     l2142:	
  3969  0343  084C               	movf	lputs_ISR@length,w
  3970  0344  024F               	subwf	lputs_ISR@i,w
  3971  0345  1803               	btfsc	3,0
  3972  0346  2B5A               	goto	l2144
  3973                           
  3974                           ;USART1823.c: 140: USART_tx_data[i] = data[i];
  3975  0347  084F               	movf	lputs_ISR@i,w
  3976  0348  0750               	addwf	lputs_ISR@data,w
  3977  0349  00CD               	movwf	??_lputs_ISR
  3978  034A  084D               	movf	??_lputs_ISR,w
  3979  034B  0086               	movwf	6
  3980  034C  0187               	clrf	7
  3981  034D  0801               	movf	1,w
  3982  034E  00CE               	movwf	??_lputs_ISR+1
  3983  034F  084F               	movf	lputs_ISR@i,w
  3984  0350  3E2F               	addlw	(low (_USART_tx_data| 0))& (0+255)
  3985  0351  0086               	movwf	6
  3986  0352  0187               	clrf	7
  3987  0353  084E               	movf	??_lputs_ISR+1,w
  3988  0354  0081               	movwf	1
  3989  0355  3001               	movlw	1
  3990  0356  00CD               	movwf	??_lputs_ISR
  3991  0357  084D               	movf	??_lputs_ISR,w
  3992  0358  07CF               	addwf	lputs_ISR@i,f
  3993  0359  2B43               	goto	l2142
  3994  035A                     l2144:	
  3995                           
  3996                           ;USART1823.c: 142: close_RX_USART();
  3997  035A  2461               	fcall	_close_RX_USART
  3998                           
  3999                           ;USART1823.c: 144: USART_tx_index = 0;
  4000  035B  01F3               	clrf	_USART_tx_index	;volatile
  4001                           
  4002                           ;USART1823.c: 145: USART_tx_length = length;
  4003  035C  0020               	movlb	0	; select bank0
  4004  035D  084C               	movf	lputs_ISR@length,w
  4005  035E  00CD               	movwf	??_lputs_ISR
  4006  035F  084D               	movf	??_lputs_ISR,w
  4007  0360  00F4               	movwf	_USART_tx_length	;volatile
  4008                           
  4009                           ;USART1823.c: 147: USART_tx_flag = 1;
  4010  0361  3001               	movlw	1
  4011  0362  00CD               	movwf	??_lputs_ISR
  4012  0363  084D               	movf	??_lputs_ISR,w
  4013  0364  00F2               	movwf	_USART_tx_flag	;volatile
  4014                           
  4015                           ;USART1823.c: 148: TXIE = 1;
  4016  0365  0021               	movlb	1	; select bank1
  4017  0366  1611               	bsf	17,4	;volatile
  4018  0367  0008               	return
  4019  0368                     __end_of_lputs_ISR:	
  4020                           
  4021                           	psect	text20
  4022  0461                     __ptext20:	
  4023 ;; *************** function _close_RX_USART *****************
  4024 ;; Defined at:
  4025 ;;		line 35 in file "USART1823.c"
  4026 ;; Parameters:    Size  Location     Type
  4027 ;;		None
  4028 ;; Auto vars:     Size  Location     Type
  4029 ;;		None
  4030 ;; Return value:  Size  Location     Type
  4031 ;;                  1    wreg      void 
  4032 ;; Registers used:
  4033 ;;		status,2
  4034 ;; Tracked objects:
  4035 ;;		On entry : 0/0
  4036 ;;		On exit  : 0/0
  4037 ;;		Unchanged: 0/0
  4038 ;; Data sizes:     COMMON   BANK0   BANK1
  4039 ;;      Params:         0       0       0
  4040 ;;      Locals:         0       0       0
  4041 ;;      Temps:          0       0       0
  4042 ;;      Totals:         0       0       0
  4043 ;;Total ram usage:        0 bytes
  4044 ;; Hardware stack levels used:    1
  4045 ;; Hardware stack levels required when called:    2
  4046 ;; This function calls:
  4047 ;;		Nothing
  4048 ;; This function is called by:
  4049 ;;		_lputs_ISR
  4050 ;; This function uses a non-reentrant model
  4051 ;;
  4052                           
  4053                           
  4054                           ;psect for function _close_RX_USART
  4055  0461                     _close_RX_USART:	
  4056                           
  4057                           ;USART1823.c: 39: RCIE = 0;
  4058                           
  4059                           ;incstack = 0
  4060                           ; Regs used in _close_RX_USART: [status,2]
  4061  0461  0021               	movlb	1	; select bank1
  4062  0462  1291               	bcf	17,5	;volatile
  4063                           
  4064                           ;USART1823.c: 40: CREN = 0;
  4065  0463  0023               	movlb	3	; select bank3
  4066  0464  121D               	bcf	29,4	;volatile
  4067                           
  4068                           ;USART1823.c: 41: USART_rx_index = 0;
  4069  0465  0020               	movlb	0	; select bank0
  4070  0466  01C0               	clrf	_USART_rx_index	;volatile
  4071  0467  0008               	return
  4072  0468                     __end_of_close_RX_USART:	
  4073                           
  4074                           	psect	text21
  4075  047E                     __ptext21:	
  4076 ;; *************** function _USARTX_change_pol *****************
  4077 ;; Defined at:
  4078 ;;		line 90 in file "mcc_generated_files/mcc.c"
  4079 ;; Parameters:    Size  Location     Type
  4080 ;;		None
  4081 ;; Auto vars:     Size  Location     Type
  4082 ;;		None
  4083 ;; Return value:  Size  Location     Type
  4084 ;;                  1    wreg      void 
  4085 ;; Registers used:
  4086 ;;		None
  4087 ;; Tracked objects:
  4088 ;;		On entry : 0/0
  4089 ;;		On exit  : 0/0
  4090 ;;		Unchanged: 0/0
  4091 ;; Data sizes:     COMMON   BANK0   BANK1
  4092 ;;      Params:         0       0       0
  4093 ;;      Locals:         0       0       0
  4094 ;;      Temps:          0       0       0
  4095 ;;      Totals:         0       0       0
  4096 ;;Total ram usage:        0 bytes
  4097 ;; Hardware stack levels used:    1
  4098 ;; Hardware stack levels required when called:    2
  4099 ;; This function calls:
  4100 ;;		Nothing
  4101 ;; This function is called by:
  4102 ;;		_main
  4103 ;; This function uses a non-reentrant model
  4104 ;;
  4105                           
  4106                           
  4107                           ;psect for function _USARTX_change_pol
  4108  047E                     _USARTX_change_pol:	
  4109                           
  4110                           ;mcc.c: 92: SCKP = 1;
  4111                           
  4112                           ;incstack = 0
  4113                           ; Regs used in _USARTX_change_pol: []
  4114  047E  0023               	movlb	3	; select bank3
  4115  047F  161F               	bsf	31,4	;volatile
  4116  0480  0008               	return
  4117  0481                     __end_of_USARTX_change_pol:	
  4118                           
  4119                           	psect	text22
  4120  0481                     __ptext22:	
  4121 ;; *************** function _SYSTEM_Initialize *****************
  4122 ;; Defined at:
  4123 ;;		line 70 in file "mcc_generated_files/mcc.c"
  4124 ;; Parameters:    Size  Location     Type
  4125 ;;		None
  4126 ;; Auto vars:     Size  Location     Type
  4127 ;;		None
  4128 ;; Return value:  Size  Location     Type
  4129 ;;                  1    wreg      void 
  4130 ;; Registers used:
  4131 ;;		wreg, status,2, status,0, pclath, cstack
  4132 ;; Tracked objects:
  4133 ;;		On entry : 0/0
  4134 ;;		On exit  : 0/0
  4135 ;;		Unchanged: 0/0
  4136 ;; Data sizes:     COMMON   BANK0   BANK1
  4137 ;;      Params:         0       0       0
  4138 ;;      Locals:         0       0       0
  4139 ;;      Temps:          0       0       0
  4140 ;;      Totals:         0       0       0
  4141 ;;Total ram usage:        0 bytes
  4142 ;; Hardware stack levels used:    1
  4143 ;; Hardware stack levels required when called:    3
  4144 ;; This function calls:
  4145 ;;		_OSCILLATOR_Initialize
  4146 ;;		_PIN_MANAGER_Initialize
  4147 ;; This function is called by:
  4148 ;;		_main
  4149 ;; This function uses a non-reentrant model
  4150 ;;
  4151                           
  4152                           
  4153                           ;psect for function _SYSTEM_Initialize
  4154  0481                     _SYSTEM_Initialize:	
  4155                           
  4156                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  4157                           
  4158                           ;incstack = 0
  4159                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4160  0481  23EA               	fcall	_PIN_MANAGER_Initialize
  4161                           
  4162                           ;mcc.c: 74: OSCILLATOR_Initialize();
  4163  0482  2474               	fcall	_OSCILLATOR_Initialize
  4164  0483  0008               	return
  4165  0484                     __end_of_SYSTEM_Initialize:	
  4166                           
  4167                           	psect	text23
  4168  03EA                     __ptext23:	
  4169 ;; *************** function _PIN_MANAGER_Initialize *****************
  4170 ;; Defined at:
  4171 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  4172 ;; Parameters:    Size  Location     Type
  4173 ;;		None
  4174 ;; Auto vars:     Size  Location     Type
  4175 ;;		None
  4176 ;; Return value:  Size  Location     Type
  4177 ;;                  1    wreg      void 
  4178 ;; Registers used:
  4179 ;;		wreg, status,2
  4180 ;; Tracked objects:
  4181 ;;		On entry : 0/0
  4182 ;;		On exit  : 0/0
  4183 ;;		Unchanged: 0/0
  4184 ;; Data sizes:     COMMON   BANK0   BANK1
  4185 ;;      Params:         0       0       0
  4186 ;;      Locals:         0       0       0
  4187 ;;      Temps:          0       0       0
  4188 ;;      Totals:         0       0       0
  4189 ;;Total ram usage:        0 bytes
  4190 ;; Hardware stack levels used:    1
  4191 ;; Hardware stack levels required when called:    2
  4192 ;; This function calls:
  4193 ;;		Nothing
  4194 ;; This function is called by:
  4195 ;;		_SYSTEM_Initialize
  4196 ;; This function uses a non-reentrant model
  4197 ;;
  4198                           
  4199                           
  4200                           ;psect for function _PIN_MANAGER_Initialize
  4201  03EA                     _PIN_MANAGER_Initialize:	
  4202                           
  4203                           ;pin_manager.c: 51: LATA = 0x0;
  4204                           
  4205                           ;incstack = 0
  4206                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4207  03EA  0022               	movlb	2	; select bank2
  4208  03EB  018C               	clrf	12	;volatile
  4209                           
  4210                           ;pin_manager.c: 52: LATC = 0x0;
  4211  03EC  018E               	clrf	14	;volatile
  4212                           
  4213                           ;pin_manager.c: 55: ANSELA = 0b00000100;
  4214  03ED  3004               	movlw	4
  4215  03EE  0023               	movlb	3	; select bank3
  4216  03EF  008C               	movwf	12	;volatile
  4217                           
  4218                           ;pin_manager.c: 56: ANSELC = 0b00000011;
  4219  03F0  3003               	movlw	3
  4220  03F1  008E               	movwf	14	;volatile
  4221                           
  4222                           ;pin_manager.c: 59: WPUA = 0x3B;
  4223  03F2  303B               	movlw	59
  4224  03F3  0024               	movlb	4	; select bank4
  4225  03F4  008C               	movwf	12	;volatile
  4226                           
  4227                           ;pin_manager.c: 61: WPUC = 0x1C;
  4228  03F5  301C               	movlw	28
  4229  03F6  008E               	movwf	14	;volatile
  4230                           
  4231                           ;pin_manager.c: 63: RXDTSEL = 0;
  4232  03F7  0022               	movlb	2	; select bank2
  4233  03F8  139D               	bcf	29,7	;volatile
  4234                           
  4235                           ;pin_manager.c: 64: TXCKSEL = 0;
  4236  03F9  111D               	bcf	29,2	;volatile
  4237                           
  4238                           ;pin_manager.c: 67: TRISC = 0b01100011;
  4239  03FA  3063               	movlw	99
  4240  03FB  0021               	movlb	1	; select bank1
  4241  03FC  008E               	movwf	14	;volatile
  4242                           
  4243                           ;pin_manager.c: 68: TRISA = 0b01011111;
  4244  03FD  305F               	movlw	95
  4245  03FE  008C               	movwf	12	;volatile
  4246                           
  4247                           ;pin_manager.c: 70: OPTION_REGbits.nWPUEN = 0x0;
  4248  03FF  1395               	bcf	21,7	;volatile
  4249                           
  4250                           ;pin_manager.c: 71: APFCON = 0x00;
  4251  0400  0022               	movlb	2	; select bank2
  4252  0401  019D               	clrf	29	;volatile
  4253  0402  0008               	return
  4254  0403                     __end_of_PIN_MANAGER_Initialize:	
  4255                           
  4256                           	psect	text24
  4257  0474                     __ptext24:	
  4258 ;; *************** function _OSCILLATOR_Initialize *****************
  4259 ;; Defined at:
  4260 ;;		line 78 in file "mcc_generated_files/mcc.c"
  4261 ;; Parameters:    Size  Location     Type
  4262 ;;		None
  4263 ;; Auto vars:     Size  Location     Type
  4264 ;;		None
  4265 ;; Return value:  Size  Location     Type
  4266 ;;                  1    wreg      void 
  4267 ;; Registers used:
  4268 ;;		wreg, status,2
  4269 ;; Tracked objects:
  4270 ;;		On entry : 0/0
  4271 ;;		On exit  : 0/0
  4272 ;;		Unchanged: 0/0
  4273 ;; Data sizes:     COMMON   BANK0   BANK1
  4274 ;;      Params:         0       0       0
  4275 ;;      Locals:         0       0       0
  4276 ;;      Temps:          0       0       0
  4277 ;;      Totals:         0       0       0
  4278 ;;Total ram usage:        0 bytes
  4279 ;; Hardware stack levels used:    1
  4280 ;; Hardware stack levels required when called:    2
  4281 ;; This function calls:
  4282 ;;		Nothing
  4283 ;; This function is called by:
  4284 ;;		_SYSTEM_Initialize
  4285 ;; This function uses a non-reentrant model
  4286 ;;
  4287                           
  4288                           
  4289                           ;psect for function _OSCILLATOR_Initialize
  4290  0474                     _OSCILLATOR_Initialize:	
  4291                           
  4292                           ;mcc.c: 81: OSCCON = 0x3A;
  4293                           
  4294                           ;incstack = 0
  4295                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4296  0474  303A               	movlw	58
  4297  0475  0021               	movlb	1	; select bank1
  4298  0476  0099               	movwf	25	;volatile
  4299                           
  4300                           ;mcc.c: 83: OSCSTAT = 0x00;
  4301  0477  019A               	clrf	26	;volatile
  4302                           
  4303                           ;mcc.c: 85: OSCTUNE = 0x00;
  4304  0478  0198               	clrf	24	;volatile
  4305  0479  0008               	return
  4306  047A                     __end_of_OSCILLATOR_Initialize:	
  4307                           
  4308                           	psect	intentry
  4309  0004                     __pintentry:	
  4310 ;; *************** function _isr *****************
  4311 ;; Defined at:
  4312 ;;		line 139 in file "main.c"
  4313 ;; Parameters:    Size  Location     Type
  4314 ;;		None
  4315 ;; Auto vars:     Size  Location     Type
  4316 ;;		None
  4317 ;; Return value:  Size  Location     Type
  4318 ;;                  1    wreg      void 
  4319 ;; Registers used:
  4320 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4321 ;; Tracked objects:
  4322 ;;		On entry : 0/0
  4323 ;;		On exit  : 0/0
  4324 ;;		Unchanged: 0/0
  4325 ;; Data sizes:     COMMON   BANK0   BANK1
  4326 ;;      Params:         0       0       0
  4327 ;;      Locals:         0       0       0
  4328 ;;      Temps:          2       0       0
  4329 ;;      Totals:         2       0       0
  4330 ;;Total ram usage:        2 bytes
  4331 ;; Hardware stack levels used:    1
  4332 ;; Hardware stack levels required when called:    1
  4333 ;; This function calls:
  4334 ;;		_start_TMR0_ISR
  4335 ;;		_stop_TMR0_ISR
  4336 ;;		i1_start_RX_USART_ISR
  4337 ;; This function is called by:
  4338 ;;		Interrupt level 1
  4339 ;; This function uses a non-reentrant model
  4340 ;;
  4341                           
  4342  0004                     _isr:	
  4343                           
  4344                           ;incstack = 0
  4345  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4346                           
  4347                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4348  0005  3180               	pagesel	$
  4349  0006  0020               	movlb	0	; select bank0
  4350  0007  087F               	movf	127,w
  4351  0008  00F9               	movwf	??_isr+1
  4352                           
  4353                           ;main.c: 143: if (TMR0IF && TMR0IE) {
  4354  0009  190B               	btfsc	11,2	;volatile
  4355  000A  1E8B               	btfss	11,5	;volatile
  4356  000B  2815               	goto	i1l127
  4357                           
  4358                           ;main.c: 145: TMR0IF = 0;
  4359  000C  110B               	bcf	11,2	;volatile
  4360                           
  4361                           ;main.c: 146: TMR0 = TIMER0_timeout;
  4362  000D  0870               	movf	_TIMER0_timeout,w	;volatile
  4363  000E  0095               	movwf	21	;volatile
  4364                           
  4365                           ;main.c: 149: TIMER0_flag = 1;
  4366  000F  3001               	movlw	1
  4367  0010  00F8               	movwf	??_isr
  4368  0011  0878               	movf	??_isr,w
  4369  0012  00BE               	movwf	_TIMER0_flag	;volatile
  4370                           
  4371                           ;main.c: 154: stop_TMR0_ISR();
  4372  0013  2484               	fcall	_stop_TMR0_ISR
  4373                           
  4374                           ;main.c: 156: return;
  4375  0014  2851               	goto	i1l128
  4376  0015                     i1l127:	
  4377                           
  4378                           ;main.c: 157: }
  4379                           ;main.c: 161: if (RCIF) {
  4380  0015  1E91               	btfss	17,5	;volatile
  4381  0016  2836               	goto	i1l129
  4382                           
  4383                           ;main.c: 162: stop_TMR0_ISR();
  4384  0017  2484               	fcall	_stop_TMR0_ISR
  4385                           
  4386                           ;main.c: 165: if (OERR) {
  4387  0018  0023               	movlb	3	; select bank3
  4388  0019  1C9D               	btfss	29,1	;volatile
  4389  001A  2820               	goto	i1l2066
  4390                           
  4391                           ;main.c: 167: CREN = 0;
  4392  001B  121D               	bcf	29,4	;volatile
  4393                           
  4394                           ;main.c: 168: CREN = 1;
  4395  001C  161D               	bsf	29,4	;volatile
  4396                           
  4397                           ;main.c: 169: USART_rx_index = 0;
  4398  001D  0020               	movlb	0	; select bank0
  4399  001E  01C0               	clrf	_USART_rx_index	;volatile
  4400                           
  4401                           ;main.c: 170: return;
  4402  001F  2851               	goto	i1l128
  4403  0020                     i1l2066:	
  4404                           
  4405                           ;main.c: 171: }
  4406                           ;main.c: 174: if (USART_rx_index >= 15) {
  4407  0020  300F               	movlw	15
  4408  0021  0020               	movlb	0	; select bank0
  4409  0022  0240               	subwf	_USART_rx_index,w	;volatile
  4410  0023  1803               	btfsc	3,0
  4411                           
  4412                           ;main.c: 175: USART_rx_index = 0;
  4413  0024  01C0               	clrf	_USART_rx_index	;volatile
  4414                           
  4415                           ;main.c: 176: }
  4416                           ;main.c: 178: USART_rx_data[USART_rx_index++] = RCREG;
  4417  0025  0023               	movlb	3	; select bank3
  4418  0026  0819               	movf	25,w	;volatile
  4419  0027  00F8               	movwf	??_isr
  4420  0028  0020               	movlb	0	; select bank0
  4421  0029  0840               	movf	_USART_rx_index,w
  4422  002A  3E20               	addlw	(low (_USART_rx_data| 0))& (0+255)
  4423  002B  0086               	movwf	6
  4424  002C  0187               	clrf	7
  4425  002D  0878               	movf	??_isr,w
  4426  002E  0081               	movwf	1
  4427  002F  3001               	movlw	1
  4428  0030  00F8               	movwf	??_isr
  4429  0031  0878               	movf	??_isr,w
  4430  0032  07C0               	addwf	_USART_rx_index,f	;volatile
  4431                           
  4432                           ;main.c: 180: start_TMR0_ISR(98);
  4433  0033  3062               	movlw	98
  4434  0034  243B               	fcall	_start_TMR0_ISR
  4435                           
  4436                           ;main.c: 182: return;
  4437  0035  2851               	goto	i1l128
  4438  0036                     i1l129:	
  4439                           
  4440                           ;main.c: 183: }
  4441                           ;main.c: 187: if (TXIF && TXIE) {
  4442  0036  1E11               	btfss	17,4	;volatile
  4443  0037  2851               	goto	i1l128
  4444  0038  0021               	movlb	1	; select bank1
  4445  0039  1E11               	btfss	17,4	;volatile
  4446  003A  2851               	goto	i1l128
  4447                           
  4448                           ;main.c: 189: TXREG = USART_tx_data[USART_tx_index++];
  4449  003B  0873               	movf	_USART_tx_index,w
  4450  003C  3E2F               	addlw	(low (_USART_tx_data| 0))& (0+255)
  4451  003D  0086               	movwf	6
  4452  003E  0187               	clrf	7
  4453  003F  0801               	movf	1,w
  4454  0040  0023               	movlb	3	; select bank3
  4455  0041  009A               	movwf	26	;volatile
  4456  0042  3001               	movlw	1
  4457  0043  00F8               	movwf	??_isr
  4458  0044  0878               	movf	??_isr,w
  4459  0045  07F3               	addwf	_USART_tx_index,f	;volatile
  4460                           
  4461                           ;main.c: 191: if (USART_tx_index >= USART_tx_length) {
  4462  0046  0874               	movf	_USART_tx_length,w	;volatile
  4463  0047  0273               	subwf	_USART_tx_index,w	;volatile
  4464  0048  1C03               	skipc
  4465  0049  2851               	goto	i1l128
  4466                           
  4467                           ;main.c: 192: TXIE = 0;
  4468  004A  0021               	movlb	1	; select bank1
  4469  004B  1211               	bcf	17,4	;volatile
  4470                           
  4471                           ;main.c: 193: USART_tx_flag = 0;
  4472  004C  01F2               	clrf	_USART_tx_flag	;volatile
  4473                           
  4474                           ;main.c: 197: _delay((unsigned long)((3)*(500000/4000.0)));
  4475  004D  307D               	movlw	125
  4476  004E                     u100_27:	
  4477  004E  0B89               	decfsz	9,f
  4478  004F  284E               	goto	u100_27
  4479                           
  4480                           ;main.c: 199: start_RX_USART_ISR();
  4481  0050  242A               	fcall	i1_start_RX_USART_ISR
  4482  0051                     i1l128:	
  4483                           ;main.c: 200: }
  4484                           ;main.c: 201: return;
  4485                           
  4486  0051  0879               	movf	??_isr+1,w
  4487  0052  0020               	movlb	0	; select bank0
  4488  0053  00FF               	movwf	127
  4489  0054  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4490  0055  0009               	retfie
  4491  0056                     __end_of_isr:	
  4492                           
  4493                           	psect	text26
  4494  042A                     __ptext26:	
  4495 ;; *************** function i1_start_RX_USART_ISR *****************
  4496 ;; Defined at:
  4497 ;;		line 83 in file "USART1823.c"
  4498 ;; Parameters:    Size  Location     Type
  4499 ;;		None
  4500 ;; Auto vars:     Size  Location     Type
  4501 ;;		None
  4502 ;; Return value:  Size  Location     Type
  4503 ;;                  1    wreg      void 
  4504 ;; Registers used:
  4505 ;;		wreg, status,2
  4506 ;; Tracked objects:
  4507 ;;		On entry : 0/0
  4508 ;;		On exit  : 0/0
  4509 ;;		Unchanged: 0/0
  4510 ;; Data sizes:     COMMON   BANK0   BANK1
  4511 ;;      Params:         0       0       0
  4512 ;;      Locals:         0       0       0
  4513 ;;      Temps:          0       0       0
  4514 ;;      Totals:         0       0       0
  4515 ;;Total ram usage:        0 bytes
  4516 ;; Hardware stack levels used:    1
  4517 ;; This function calls:
  4518 ;;		Nothing
  4519 ;; This function is called by:
  4520 ;;		_isr
  4521 ;; This function uses a non-reentrant model
  4522 ;;
  4523                           
  4524                           
  4525                           ;psect for function i1_start_RX_USART_ISR
  4526  042A                     i1_start_RX_USART_ISR:	
  4527                           
  4528                           ;USART1823.c: 86: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  4529                           
  4530                           ;incstack = 0
  4531                           ; Regs used in i1_start_RX_USART_ISR: [wreg+status,2]
  4532  042A  0023               	movlb	3	; select bank3
  4533  042B  151E               	bsf	30,2	;volatile
  4534  042C  159F               	bsf	31,3	;volatile
  4535  042D  019C               	clrf	28	;volatile
  4536  042E  300C               	movlw	12
  4537  042F  009B               	movwf	27	;volatile
  4538                           
  4539                           ;USART1823.c: 88: SYNC = 0;
  4540  0430  121E               	bcf	30,4	;volatile
  4541                           
  4542                           ;USART1823.c: 89: SPEN = 1;
  4543  0431  179D               	bsf	29,7	;volatile
  4544                           
  4545                           ;USART1823.c: 90: CREN = 1;
  4546  0432  161D               	bsf	29,4	;volatile
  4547                           
  4548                           ;USART1823.c: 92: USART_rx_flag = 0;
  4549  0433  0020               	movlb	0	; select bank0
  4550  0434  01BF               	clrf	_USART_rx_flag	;volatile
  4551                           
  4552                           ;USART1823.c: 93: USART_rx_index = 0;
  4553  0435  01C0               	clrf	_USART_rx_index	;volatile
  4554                           
  4555                           ;USART1823.c: 95: RCIE = 1;
  4556  0436  0021               	movlb	1	; select bank1
  4557  0437  1691               	bsf	17,5	;volatile
  4558                           
  4559                           ;USART1823.c: 96: PEIE = 1;
  4560  0438  170B               	bsf	11,6	;volatile
  4561                           
  4562                           ;USART1823.c: 97: GIE = 1;
  4563  0439  178B               	bsf	11,7	;volatile
  4564  043A  0008               	return
  4565  043B                     __end_ofi1_start_RX_USART_ISR:	
  4566                           
  4567                           	psect	text27
  4568  0484                     __ptext27:	
  4569 ;; *************** function _stop_TMR0_ISR *****************
  4570 ;; Defined at:
  4571 ;;		line 44 in file "TMR0.c"
  4572 ;; Parameters:    Size  Location     Type
  4573 ;;		None
  4574 ;; Auto vars:     Size  Location     Type
  4575 ;;		None
  4576 ;; Return value:  Size  Location     Type
  4577 ;;                  1    wreg      void 
  4578 ;; Registers used:
  4579 ;;		None
  4580 ;; Tracked objects:
  4581 ;;		On entry : 0/0
  4582 ;;		On exit  : 0/0
  4583 ;;		Unchanged: 0/0
  4584 ;; Data sizes:     COMMON   BANK0   BANK1
  4585 ;;      Params:         0       0       0
  4586 ;;      Locals:         0       0       0
  4587 ;;      Temps:          0       0       0
  4588 ;;      Totals:         0       0       0
  4589 ;;Total ram usage:        0 bytes
  4590 ;; Hardware stack levels used:    1
  4591 ;; This function calls:
  4592 ;;		Nothing
  4593 ;; This function is called by:
  4594 ;;		_isr
  4595 ;; This function uses a non-reentrant model
  4596 ;;
  4597                           
  4598                           
  4599                           ;psect for function _stop_TMR0_ISR
  4600  0484                     _stop_TMR0_ISR:	
  4601                           
  4602                           ;TMR0.c: 47: TMR0IE = 0;
  4603                           
  4604                           ;incstack = 0
  4605                           ; Regs used in _stop_TMR0_ISR: []
  4606  0484  128B               	bcf	11,5	;volatile
  4607                           
  4608                           ;TMR0.c: 48: TMR0IF = 0;
  4609  0485  110B               	bcf	11,2	;volatile
  4610  0486  0008               	return
  4611  0487                     __end_of_stop_TMR0_ISR:	
  4612                           
  4613                           	psect	text28
  4614  043B                     __ptext28:	
  4615 ;; *************** function _start_TMR0_ISR *****************
  4616 ;; Defined at:
  4617 ;;		line 30 in file "TMR0.c"
  4618 ;; Parameters:    Size  Location     Type
  4619 ;;  val             1    wreg     unsigned char 
  4620 ;; Auto vars:     Size  Location     Type
  4621 ;;  val             1    2[COMMON] unsigned char 
  4622 ;; Return value:  Size  Location     Type
  4623 ;;                  1    wreg      void 
  4624 ;; Registers used:
  4625 ;;		wreg, status,2
  4626 ;; Tracked objects:
  4627 ;;		On entry : 0/0
  4628 ;;		On exit  : 0/0
  4629 ;;		Unchanged: 0/0
  4630 ;; Data sizes:     COMMON   BANK0   BANK1
  4631 ;;      Params:         0       0       0
  4632 ;;      Locals:         1       0       0
  4633 ;;      Temps:          2       0       0
  4634 ;;      Totals:         3       0       0
  4635 ;;Total ram usage:        3 bytes
  4636 ;; Hardware stack levels used:    1
  4637 ;; This function calls:
  4638 ;;		Nothing
  4639 ;; This function is called by:
  4640 ;;		_isr
  4641 ;; This function uses a non-reentrant model
  4642 ;;
  4643                           
  4644                           
  4645                           ;psect for function _start_TMR0_ISR
  4646  043B                     _start_TMR0_ISR:	
  4647                           
  4648                           ;incstack = 0
  4649                           ; Regs used in _start_TMR0_ISR: [wreg+status,2]
  4650                           ;start_TMR0_ISR@val stored from wreg
  4651  043B  00F7               	movwf	start_TMR0_ISR@val
  4652                           
  4653                           ;TMR0.c: 32: TIMER0_timeout = val;
  4654  043C  0877               	movf	start_TMR0_ISR@val,w
  4655  043D  00F5               	movwf	??_start_TMR0_ISR
  4656  043E  01F6               	clrf	??_start_TMR0_ISR+1
  4657  043F  0875               	movf	??_start_TMR0_ISR,w
  4658  0440  00F0               	movwf	_TIMER0_timeout	;volatile
  4659  0441  0876               	movf	??_start_TMR0_ISR+1,w
  4660  0442  00F1               	movwf	_TIMER0_timeout+1	;volatile
  4661                           
  4662                           ;TMR0.c: 33: TIMER0_flag = 0;
  4663  0443  0020               	movlb	0	; select bank0
  4664  0444  01BE               	clrf	_TIMER0_flag	;volatile
  4665                           
  4666                           ;TMR0.c: 36: TMR0 = TIMER0_timeout;
  4667  0445  0870               	movf	_TIMER0_timeout,w	;volatile
  4668  0446  0095               	movwf	21	;volatile
  4669                           
  4670                           ;TMR0.c: 39: TMR0IF = 0;
  4671  0447  110B               	bcf	11,2	;volatile
  4672                           
  4673                           ;TMR0.c: 40: TMR0IE = 1;
  4674  0448  168B               	bsf	11,5	;volatile
  4675                           
  4676                           ;TMR0.c: 41: GIE = 1;
  4677  0449  178B               	bsf	11,7	;volatile
  4678  044A  0008               	return
  4679  044B                     __end_of_start_TMR0_ISR:	
  4680  007E                     btemp	set	126	;btemp
  4681  007E                     int$flags	set	126
  4682  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         49
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     29      73
    BANK1            32      0       0

Pointer List with Targets:

    calculate_checksum@data	PTR unsigned char  size(1) Largest target is 13
		 -> measure_Impedance_SE@aux(BANK0[13]), mess_rec(BANK0[10]), 

    lputs_ISR@data	PTR unsigned char  size(1) Largest target is 13
		 -> calibrate_reader@aux(BANK0[8]), measure_Impedance_SE@aux(BANK0[13]), measure_Offset@aux(BANK0[5]), measure_Impedance_no_offset@aux(BANK0[13]), 
		 -> measure_Impedance@aux(BANK0[13]), read_ADC_channels@aux(BANK0[7]), mess_rec(BANK0[10]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_start_TMR0_ISR

Critical Paths under _main in BANK0

    _main->_mess_handler
    _mess_handler->_measure_Impedance
    _mess_handler->_measure_Impedance_SE
    _mess_handler->_measure_Impedance_no_offset
    _read_ADC_channels->_ADC_2
    _read_ADC_channels->_ADC_4
    _read_ADC_channels->_ADC_5
    _measure_Offset->_ADC_2
    _measure_Offset->_ADC_4
    _measure_Impedance_no_offset->_ADC_2
    _measure_Impedance_no_offset->_ADC_4
    _measure_Impedance_SE->_ADC_5
    _measure_Impedance_SE->_calculate_checksum
    _measure_Impedance->_ADC_2
    _measure_Impedance->_ADC_4
    _config_ASIC->_BIO_config
    _config_ASIC->_lputs_ISR
    _calibrate_reader->_lputs_ISR

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   19440
                                             27 BANK0      2     2      0
                  _SYSTEM_Initialize
                  _USARTX_change_pol
                       _mess_handler
                          _setup_ADC
                         _setup_TMR0
                          _start_RCM
                 _start_RX_USART_ISR
                 _start_TX_USART_ISR
 ---------------------------------------------------------------------------------
 (1) _start_TX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RCM                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_TMR0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_ADC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _mess_handler                                         1     1      0   19341
                                             26 BANK0      1     1      0
                   _calibrate_reader
                        _config_ASIC
                          _lputs_ISR
                  _measure_Impedance
               _measure_Impedance_SE
        _measure_Impedance_no_offset
                     _measure_Offset
                  _read_ADC_channels
 ---------------------------------------------------------------------------------
 (2) _read_ADC_channels                                   14    14      0    1756
                                              6 BANK0     14    14      0
                              _ADC_2
                              _ADC_4
                              _ADC_5
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (2) _measure_Offset                                      12    12      0    2693
                                              6 BANK0     12    12      0
                              _ADC_2
                              _ADC_4
                         _BIO_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (2) _measure_Impedance_no_offset                         22    22      0    3070
                                              6 BANK0     20    20      0
                              _ADC_2
                              _ADC_4
                         _BIO_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (2) _measure_Impedance_SE                                20    20      0    3485
                                              6 BANK0     20    20      0
                              _ADC_5
                         _BIO_config
                 _calculate_checksum
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (3) _calculate_checksum                                   6     5      1     387
                                              0 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (3) _ADC_5                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _measure_Impedance                                   22    22      0    3382
                                              6 BANK0     20    20      0
                              _ADC_2
                              _ADC_4
                         _BIO_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (3) _ADC_4                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _ADC_2                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _config_ASIC                                          3     3      0    2295
                                              5 BANK0      3     3      0
                         _BIO_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (3) _BIO_config                                           5     3      2    1042
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _calibrate_reader                                     9     9      0    1478
                                              5 BANK0      9     9      0
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (3) _lputs_ISR                                            5     4      1    1182
                                              0 BANK0      5     4      1
                     _close_RX_USART
 ---------------------------------------------------------------------------------
 (4) _close_RX_USART                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _USARTX_change_pol                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  2     2      0      22
                                              3 COMMON     2     2      0
                     _start_TMR0_ISR
                      _stop_TMR0_ISR
               i1_start_RX_USART_ISR
 ---------------------------------------------------------------------------------
 (6) i1_start_RX_USART_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _stop_TMR0_ISR                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _start_TMR0_ISR                                       3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _USARTX_change_pol
   _mess_handler
     _calibrate_reader
       _lputs_ISR
         _close_RX_USART
     _config_ASIC
       _BIO_config
       _lputs_ISR
         _close_RX_USART
     _lputs_ISR
       _close_RX_USART
     _measure_Impedance
       _ADC_2
       _ADC_4
       _BIO_config
       _lputs_ISR
         _close_RX_USART
     _measure_Impedance_SE
       _ADC_5
       _BIO_config
       _calculate_checksum
       _lputs_ISR
         _close_RX_USART
     _measure_Impedance_no_offset
       _ADC_2
       _ADC_4
       _BIO_config
       _lputs_ISR
         _close_RX_USART
     _measure_Offset
       _ADC_2
       _ADC_4
       _BIO_config
       _lputs_ISR
         _close_RX_USART
     _read_ADC_channels
       _ADC_2
       _ADC_4
       _ADC_5
       _lputs_ISR
         _close_RX_USART
   _setup_ADC
   _setup_TMR0
   _start_RCM
   _start_RX_USART_ISR
   _start_TX_USART_ISR

 _isr (ROOT)
   _start_TMR0_ISR
   _stop_TMR0_ISR
   i1_start_RX_USART_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      53       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     1D      49       6       91.2%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      53       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Mar 15 14:51:14 2017

                         __CFG_CP$OFF 0000                         _USART_rx_data 0020  
                       _USART_rx_flag 003F                         _USART_tx_data 002F  
                       _USART_tx_flag 0072                                   l115 020B  
                                 l405 036E                                   l344 02E1  
                                 l372 0300                                   l393 03B4  
                                 l399 0391                                   _GIE 005F  
                                 _RA5 0065                                   _PS0 04A8  
                                 _PS1 04A9                                   _PS2 04AA  
                        __CFG_CPD$OFF 0000                                   u805 039C  
                                 u735 032B                                   _PSA 04AB  
                                 u825 0379                                   u907 024E  
                                 u917 01A4                                   u927 01CF  
                                 u785 03BF                                   u937 0129  
                                 u947 0147                                   u957 0164  
                                 u967 007C                                   u977 00A8  
                                 u897 0204                                   u987 00D3  
                                 u997 0305                                   _isr 0004  
                        __CFG_BORV$HI 0000                                   wreg 0009  
                        __CFG_IESO$ON 0000                        _USART_rx_index 0040  
                        __CFG_LVP$OFF 0000                        _USART_tx_index 0073  
                                l2120 0328                                  l2142 0343  
                                l2118 0324                                  l2144 035A  
                                l2500 02C2                                  l2190 03D5  
                                l2502 02C4                                  l2192 03E8  
                                l2506 02C6                                  l2372 0112  
                                l2542 0220                                  l2544 0235  
                                l2528 0217                                  l2490 02B8  
                                l2492 02BA                                  l2494 02BC  
                                l2496 02BE                                  l2488 02B0  
                                l2498 02C0                                  ?_isr 0075  
                                _ADGO 04E9                     ?_calibrate_reader 0075  
                        __CFG_WDTE$ON 0000                                  _BRGH 0CF2  
                                _CREN 0CEC                                  _LATA 010C  
                                _LATC 010E                                  _PEIE 005E  
                                _RCIE 048D                                  _RCIF 008D  
                                _OERR 0CE9                                  _SCKP 0CFC  
                                _TMR0 0015                                  _SPEN 0CEF  
                                _TXIE 048C                                  _TXEN 0CF5  
                                _TXIF 008C                                  _SYNC 0CF4  
                                _WPUA 020C                                  _WPUC 020E  
              __size_of_stop_TMR0_ISR 0003                     _read_ADC_channels 0276  
                        __CFG_WRT$OFF 0000                    ??_calibrate_reader 0051  
                                _main 01F7                                  fsr0h 0005  
                                fsr1h 0007                                  indf0 0000  
                                fsr0l 0004                                  indf1 0001  
                                fsr1l 0006                                  btemp 007E  
                  ?_read_ADC_channels 0075           __size_of_calculate_checksum 0019  
                                start 0056                         __CFG_MCLRE$ON 0000  
          measure_Impedance_SE@value1 0062                   ??_read_ADC_channels 0052  
                               ??_isr 0078        __size_of_OSCILLATOR_Initialize 0006  
                     _USART_tx_length 0074         __end_of_OSCILLATOR_Initialize 047A  
                               ?_main 0075                                 _ADC_2 03AE  
                               _ADC_4 038B                                 _ADC_5 0368  
                               _BRG16 0CFB                                 i1l127 0015  
                               i1l128 0051                                 i1l129 0036  
                 __size_of_BIO_config 002B                                 _RCREG 0199  
                               _PORTC 000E                                 _TRISA 008C  
                      _start_TMR0_ISR 043B                                 _TRISC 008E  
                               _TXREG 019A                        __CFG_FCMEN$OFF 0000  
           __end_of_read_ADC_channels 02AF          ?_measure_Impedance_no_offset 0075  
                               main@i 0068         __size_ofi1_start_RX_USART_ISR 0011  
                      __CFG_BOREN$OFF 0000                                 status 0003  
                               wtemp0 007E                       __initialization 0057  
                        __end_of_main 0237                         _stop_TMR0_ISR 0484  
                    ??_close_RX_USART 004C                __end_of_start_TMR0_ISR 044B  
                              ??_main 0067                                ?_ADC_2 004C  
                              ?_ADC_4 004C                                ?_ADC_5 004C  
        __end_of_measure_Impedance_SE 018C                        _TIMER0_timeout 0070  
                      __CFG_PLLEN$OFF 0000                                _ADCON0 009D  
                              _ADCON1 009E                                _ADRESH 009C  
                              _ADRESL 009B                                _APFCON 011D  
                              _ANSELA 018C                                _ANSELC 018E  
                              u100_27 004E                                i1l2066 0020  
                              _OSCCON 0099         ??_measure_Impedance_no_offset 0052  
                              _TMR0IE 005D                                _TMR0IF 005A  
                              _TMR0CS 04AD                                _SPBRGH 019C  
                              _SPBRGL 019B                        __CFG_PWRTE$OFF 0000  
                __size_of_config_ASIC 0016                       config_ASIC@asic 0052  
                      __CFG_STVREN$ON 0000                        ?_stop_TMR0_ISR 0075  
                     ?_start_TMR0_ISR 0075                  measure_Impedance@aux 0053  
         __size_of_start_RX_USART_ISR 0011            __size_of_read_ADC_channels 0039  
                       ?_mess_handler 0075               __size_of_measure_Offset 003F  
                   _SYSTEM_Initialize 0481               __end_of__initialization 0062  
                        ??_BIO_config 004E                         __end_of_ADC_2 03D1  
                       __end_of_ADC_4 03AE                    ?_SYSTEM_Initialize 0075  
                       __end_of_ADC_5 038B                        __pcstackCOMMON 0075  
                 ??_SYSTEM_Initialize 004C  __size_of_measure_Impedance_no_offset 006B  
                             ??_ADC_2 004E                               ??_ADC_4 004E  
                             ??_ADC_5 004E                        _OPTION_REGbits 0095  
                  __end_of_BIO_config 033D           __size_of_start_TX_USART_ISR 000F  
                      ??_mess_handler 0066             __end_of_SYSTEM_Initialize 0484  
                          __pbssBANK0 0020                  _measure_Impedance_SE 00FB  
                          __pmaintext 01F7                       ??_stop_TMR0_ISR 0075  
                read_ADC_channels@aux 0053             __size_of_calibrate_reader 0030  
                          __pintentry 0004                  measure_Offset@value1 0058  
                measure_Offset@value2 005A                               _CLKRCON 039A  
                  __size_of_lputs_ISR 002B                       lputs_ISR@length 004C  
                  __size_of_setup_ADC 0006                               _OSCSTAT 009A  
                             _OSCTUNE 0098                    __size_of_start_RCM 0004  
                             _RXDTSEL 08EF                               _TXCKSEL 08EA  
          __end_of_calculate_checksum 03EA                 ?_measure_Impedance_SE 0075  
        __end_ofi1_start_RX_USART_ISR 043B                     measure_Offset@aux 0053  
                             __ptext1 044B                               __ptext2 0419  
                             __ptext3 047A                               __ptext4 045A  
                             __ptext5 046E                               __ptext6 02AF  
                             __ptext7 0276                               __ptext8 0237  
                             __ptext9 018C                 _OSCILLATOR_Initialize 0474  
                        __size_of_isr 0052              ??_PIN_MANAGER_Initialize 004C  
          __size_of_SYSTEM_Initialize 0003                               clrloop0 0469  
                       _mess_rec_size 0041                  end_of_initialization 0062  
                      _measure_Offset 0237                 measure_Impedance@asic 0064  
                   __end_of_lputs_ISR 0368                     __end_of_setup_ADC 0474  
                    ??_start_TMR0_ISR 0075                     __end_of_start_RCM 047E  
                __end_of_mess_handler 02E2                            _setup_TMR0 045A  
                    __CFG_FOSC$INTOSC 0000                __end_of_measure_Offset 0276  
              ??_measure_Impedance_SE 0052                         ??_config_ASIC 0051  
                    _calibrate_reader 02E2                     _measure_Impedance 0065  
                  ?_measure_Impedance 0075                        ADC_2@ADC_value 0050  
          __end_of_start_RX_USART_ISR 042A                ?_OSCILLATOR_Initialize 0075  
   measure_Impedance_no_offset@value1 0060     measure_Impedance_no_offset@value2 0062  
                 start_initialization 0057                   ??_measure_Impedance 0052  
     __size_of_PIN_MANAGER_Initialize 0019                           __end_of_isr 0056  
                     ?_measure_Offset 0075   __end_of_measure_Impedance_no_offset 01F7  
         _measure_Impedance_no_offset 018C              measure_Impedance_SE@asic 0064  
             __size_of_close_RX_USART 0007                     _USARTX_change_pol 047E  
                i1_start_RX_USART_ISR 042A                    ?_USARTX_change_pol 0075  
                      ADC_4@ADC_value 0050             __end_of_measure_Impedance 00FB  
                 ??_USARTX_change_pol 004C                        ADC_5@ADC_value 0050  
                 __end_of_config_ASIC 0419                           ?_setup_TMR0 0075  
          __end_of_start_TX_USART_ISR 045A                           __pbssCOMMON 0070  
                           ___latbits 0000                         __pcstackBANK0 004C  
           __end_of_USARTX_change_pol 0481       measure_Impedance_no_offset@asic 0064  
               ?i1_start_RX_USART_ISR 0075                 __size_of_mess_handler 0033  
              _PIN_MANAGER_Initialize 03EA                 __end_of_stop_TMR0_ISR 0487  
                  _calculate_checksum 03D1                        __size_of_ADC_2 0023  
                      __size_of_ADC_4 0023                        __size_of_ADC_5 0023  
             read_ADC_channels@value1 005A               read_ADC_channels@value2 005C  
             read_ADC_channels@value3 005E                   ?_calculate_checksum 004C  
                        _mess_handler 02AF                   __size_of_setup_TMR0 0007  
                         _config_ASIC 0403                  ??_calculate_checksum 004D  
                           clear_ram0 0468                            lputs_ISR@i 004F  
          __size_of_measure_Impedance 0096             measure_Impedance_SE@check 0061  
                           _lputs_ISR 033D                             _setup_ADC 046E  
                           _start_RCM 047A            __size_of_USARTX_change_pol 0003  
              ??i1_start_RX_USART_ISR 0075                        _close_RX_USART 0461  
            __end_of_calibrate_reader 0312               measure_Impedance@value1 0060  
             measure_Impedance@value2 0062               measure_Impedance_SE@aux 0054  
                          ?_lputs_ISR 004C               calculate_checksum@check 0050  
                          ?_setup_ADC 0075               ??_OSCILLATOR_Initialize 004C  
                   start_TMR0_ISR@val 0077                            ?_start_RCM 0075  
      measure_Impedance_no_offset@aux 0053                      ??_measure_Offset 0052  
              __end_of_close_RX_USART 0468                        BIO_config@conf 004C  
                  measure_Offset@asic 005C                              __ptext10 00FB  
                            __ptext11 03D1                              __ptext20 0461  
                            __ptext12 0368                              __ptext21 047E  
                            __ptext13 0065                              __ptext22 0481  
                            __ptext14 038B                              __ptext23 03EA  
                            __ptext15 03AE                              __ptext24 0474  
                            __ptext16 0403                              __ptext17 0312  
                            __ptext26 042A                              __ptext18 02E2  
                            __ptext27 0484                              __ptext19 033D  
                            __ptext28 043B                         lputs_ISR@data 0050  
                  _start_RX_USART_ISR 0419                            _BIO_config 0312  
                       __size_of_main 0040                              _mess_rec 0042  
       __size_of_measure_Impedance_SE 0091                   ?_start_RX_USART_ISR 0075  
                            int$flags 007E                          ??_setup_TMR0 004C  
                         _TIMER0_flag 003E                  ??_start_RX_USART_ISR 004C  
             __size_of_start_TMR0_ISR 0010                       ?_close_RX_USART 0075  
              calculate_checksum@data 004F                              intlevel1 0000  
                  _start_TX_USART_ISR 044B                         BIO_config@out 0050  
                 calibrate_reader@aux 0052               ?_PIN_MANAGER_Initialize 0075  
                   __CFG_CLKOUTEN$OFF 0000                    __end_of_setup_TMR0 0461  
                 ?_start_TX_USART_ISR 0075                           ??_lputs_ISR 004D  
                         ??_setup_ADC 004C                 calculate_checksum@num 004C  
                         ??_start_RCM 004C                  ??_start_TX_USART_ISR 004C  
                         BIO_config@i 004F        __end_of_PIN_MANAGER_Initialize 0403  
                         ?_BIO_config 004C                   calculate_checksum@i 0051  
                        ?_config_ASIC 0075  
