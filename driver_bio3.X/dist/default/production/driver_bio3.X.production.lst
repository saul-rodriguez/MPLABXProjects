

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Thu Mar  2 13:38:33 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16LF1823
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	psect	text17,local,class=CODE,merge=1,delta=2
    28                           	psect	text18,local,class=CODE,merge=1,delta=2
    29                           	psect	intentry,global,class=CODE,delta=2
    30                           	psect	text20,local,class=CODE,merge=1,delta=2
    31                           	psect	text21,local,class=CODE,merge=1,delta=2
    32                           	psect	text22,local,class=CODE,merge=1,delta=2
    33                           	dabs	1,0x7E,2
    34  0000                     
    35                           ; Version 1.40
    36                           ; Generated 01/12/2016 GMT
    37                           ; 
    38                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC16LF1823 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     	;# 
    70  0001                     	;# 
    71  0002                     	;# 
    72  0003                     	;# 
    73  0004                     	;# 
    74  0005                     	;# 
    75  0006                     	;# 
    76  0007                     	;# 
    77  0008                     	;# 
    78  0009                     	;# 
    79  000A                     	;# 
    80  000B                     	;# 
    81  000C                     	;# 
    82  000E                     	;# 
    83  0011                     	;# 
    84  0012                     	;# 
    85  0015                     	;# 
    86  0016                     	;# 
    87  0016                     	;# 
    88  0017                     	;# 
    89  0018                     	;# 
    90  0019                     	;# 
    91  001A                     	;# 
    92  001B                     	;# 
    93  001C                     	;# 
    94  001E                     	;# 
    95  001F                     	;# 
    96  008C                     	;# 
    97  008E                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0095                     	;# 
   101  0096                     	;# 
   102  0097                     	;# 
   103  0098                     	;# 
   104  0099                     	;# 
   105  009A                     	;# 
   106  009B                     	;# 
   107  009B                     	;# 
   108  009C                     	;# 
   109  009D                     	;# 
   110  009E                     	;# 
   111  010C                     	;# 
   112  010E                     	;# 
   113  0111                     	;# 
   114  0112                     	;# 
   115  0113                     	;# 
   116  0114                     	;# 
   117  0115                     	;# 
   118  0116                     	;# 
   119  0117                     	;# 
   120  0118                     	;# 
   121  0119                     	;# 
   122  011A                     	;# 
   123  011B                     	;# 
   124  011D                     	;# 
   125  011D                     	;# 
   126  018C                     	;# 
   127  018E                     	;# 
   128  0191                     	;# 
   129  0191                     	;# 
   130  0192                     	;# 
   131  0193                     	;# 
   132  0193                     	;# 
   133  0193                     	;# 
   134  0194                     	;# 
   135  0195                     	;# 
   136  0196                     	;# 
   137  0199                     	;# 
   138  019A                     	;# 
   139  019B                     	;# 
   140  019B                     	;# 
   141  019B                     	;# 
   142  019B                     	;# 
   143  019C                     	;# 
   144  019C                     	;# 
   145  019D                     	;# 
   146  019E                     	;# 
   147  019F                     	;# 
   148  020C                     	;# 
   149  020E                     	;# 
   150  0211                     	;# 
   151  0211                     	;# 
   152  0212                     	;# 
   153  0212                     	;# 
   154  0213                     	;# 
   155  0213                     	;# 
   156  0214                     	;# 
   157  0214                     	;# 
   158  0215                     	;# 
   159  0215                     	;# 
   160  0215                     	;# 
   161  0216                     	;# 
   162  0216                     	;# 
   163  0217                     	;# 
   164  0217                     	;# 
   165  0291                     	;# 
   166  0291                     	;# 
   167  0292                     	;# 
   168  0293                     	;# 
   169  0294                     	;# 
   170  0295                     	;# 
   171  0295                     	;# 
   172  0296                     	;# 
   173  0391                     	;# 
   174  0392                     	;# 
   175  0393                     	;# 
   176  039A                     	;# 
   177  039C                     	;# 
   178  039D                     	;# 
   179  039E                     	;# 
   180  039F                     	;# 
   181  0FE4                     	;# 
   182  0FE5                     	;# 
   183  0FE6                     	;# 
   184  0FE7                     	;# 
   185  0FE8                     	;# 
   186  0FE9                     	;# 
   187  0FEA                     	;# 
   188  0FEB                     	;# 
   189  0FED                     	;# 
   190  0FEE                     	;# 
   191  0FEF                     	;# 
   192  0000                     	;# 
   193  0001                     	;# 
   194  0002                     	;# 
   195  0003                     	;# 
   196  0004                     	;# 
   197  0005                     	;# 
   198  0006                     	;# 
   199  0007                     	;# 
   200  0008                     	;# 
   201  0009                     	;# 
   202  000A                     	;# 
   203  000B                     	;# 
   204  000C                     	;# 
   205  000E                     	;# 
   206  0011                     	;# 
   207  0012                     	;# 
   208  0015                     	;# 
   209  0016                     	;# 
   210  0016                     	;# 
   211  0017                     	;# 
   212  0018                     	;# 
   213  0019                     	;# 
   214  001A                     	;# 
   215  001B                     	;# 
   216  001C                     	;# 
   217  001E                     	;# 
   218  001F                     	;# 
   219  008C                     	;# 
   220  008E                     	;# 
   221  0091                     	;# 
   222  0092                     	;# 
   223  0095                     	;# 
   224  0096                     	;# 
   225  0097                     	;# 
   226  0098                     	;# 
   227  0099                     	;# 
   228  009A                     	;# 
   229  009B                     	;# 
   230  009B                     	;# 
   231  009C                     	;# 
   232  009D                     	;# 
   233  009E                     	;# 
   234  010C                     	;# 
   235  010E                     	;# 
   236  0111                     	;# 
   237  0112                     	;# 
   238  0113                     	;# 
   239  0114                     	;# 
   240  0115                     	;# 
   241  0116                     	;# 
   242  0117                     	;# 
   243  0118                     	;# 
   244  0119                     	;# 
   245  011A                     	;# 
   246  011B                     	;# 
   247  011D                     	;# 
   248  011D                     	;# 
   249  018C                     	;# 
   250  018E                     	;# 
   251  0191                     	;# 
   252  0191                     	;# 
   253  0192                     	;# 
   254  0193                     	;# 
   255  0193                     	;# 
   256  0193                     	;# 
   257  0194                     	;# 
   258  0195                     	;# 
   259  0196                     	;# 
   260  0199                     	;# 
   261  019A                     	;# 
   262  019B                     	;# 
   263  019B                     	;# 
   264  019B                     	;# 
   265  019B                     	;# 
   266  019C                     	;# 
   267  019C                     	;# 
   268  019D                     	;# 
   269  019E                     	;# 
   270  019F                     	;# 
   271  020C                     	;# 
   272  020E                     	;# 
   273  0211                     	;# 
   274  0211                     	;# 
   275  0212                     	;# 
   276  0212                     	;# 
   277  0213                     	;# 
   278  0213                     	;# 
   279  0214                     	;# 
   280  0214                     	;# 
   281  0215                     	;# 
   282  0215                     	;# 
   283  0215                     	;# 
   284  0216                     	;# 
   285  0216                     	;# 
   286  0217                     	;# 
   287  0217                     	;# 
   288  0291                     	;# 
   289  0291                     	;# 
   290  0292                     	;# 
   291  0293                     	;# 
   292  0294                     	;# 
   293  0295                     	;# 
   294  0295                     	;# 
   295  0296                     	;# 
   296  0391                     	;# 
   297  0392                     	;# 
   298  0393                     	;# 
   299  039A                     	;# 
   300  039C                     	;# 
   301  039D                     	;# 
   302  039E                     	;# 
   303  039F                     	;# 
   304  0FE4                     	;# 
   305  0FE5                     	;# 
   306  0FE6                     	;# 
   307  0FE7                     	;# 
   308  0FE8                     	;# 
   309  0FE9                     	;# 
   310  0FEA                     	;# 
   311  0FEB                     	;# 
   312  0FED                     	;# 
   313  0FEE                     	;# 
   314  0FEF                     	;# 
   315  0000                     	;# 
   316  0001                     	;# 
   317  0002                     	;# 
   318  0003                     	;# 
   319  0004                     	;# 
   320  0005                     	;# 
   321  0006                     	;# 
   322  0007                     	;# 
   323  0008                     	;# 
   324  0009                     	;# 
   325  000A                     	;# 
   326  000B                     	;# 
   327  000C                     	;# 
   328  000E                     	;# 
   329  0011                     	;# 
   330  0012                     	;# 
   331  0015                     	;# 
   332  0016                     	;# 
   333  0016                     	;# 
   334  0017                     	;# 
   335  0018                     	;# 
   336  0019                     	;# 
   337  001A                     	;# 
   338  001B                     	;# 
   339  001C                     	;# 
   340  001E                     	;# 
   341  001F                     	;# 
   342  008C                     	;# 
   343  008E                     	;# 
   344  0091                     	;# 
   345  0092                     	;# 
   346  0095                     	;# 
   347  0096                     	;# 
   348  0097                     	;# 
   349  0098                     	;# 
   350  0099                     	;# 
   351  009A                     	;# 
   352  009B                     	;# 
   353  009B                     	;# 
   354  009C                     	;# 
   355  009D                     	;# 
   356  009E                     	;# 
   357  010C                     	;# 
   358  010E                     	;# 
   359  0111                     	;# 
   360  0112                     	;# 
   361  0113                     	;# 
   362  0114                     	;# 
   363  0115                     	;# 
   364  0116                     	;# 
   365  0117                     	;# 
   366  0118                     	;# 
   367  0119                     	;# 
   368  011A                     	;# 
   369  011B                     	;# 
   370  011D                     	;# 
   371  011D                     	;# 
   372  018C                     	;# 
   373  018E                     	;# 
   374  0191                     	;# 
   375  0191                     	;# 
   376  0192                     	;# 
   377  0193                     	;# 
   378  0193                     	;# 
   379  0193                     	;# 
   380  0194                     	;# 
   381  0195                     	;# 
   382  0196                     	;# 
   383  0199                     	;# 
   384  019A                     	;# 
   385  019B                     	;# 
   386  019B                     	;# 
   387  019B                     	;# 
   388  019B                     	;# 
   389  019C                     	;# 
   390  019C                     	;# 
   391  019D                     	;# 
   392  019E                     	;# 
   393  019F                     	;# 
   394  020C                     	;# 
   395  020E                     	;# 
   396  0211                     	;# 
   397  0211                     	;# 
   398  0212                     	;# 
   399  0212                     	;# 
   400  0213                     	;# 
   401  0213                     	;# 
   402  0214                     	;# 
   403  0214                     	;# 
   404  0215                     	;# 
   405  0215                     	;# 
   406  0215                     	;# 
   407  0216                     	;# 
   408  0216                     	;# 
   409  0217                     	;# 
   410  0217                     	;# 
   411  0291                     	;# 
   412  0291                     	;# 
   413  0292                     	;# 
   414  0293                     	;# 
   415  0294                     	;# 
   416  0295                     	;# 
   417  0295                     	;# 
   418  0296                     	;# 
   419  0391                     	;# 
   420  0392                     	;# 
   421  0393                     	;# 
   422  039A                     	;# 
   423  039C                     	;# 
   424  039D                     	;# 
   425  039E                     	;# 
   426  039F                     	;# 
   427  0FE4                     	;# 
   428  0FE5                     	;# 
   429  0FE6                     	;# 
   430  0FE7                     	;# 
   431  0FE8                     	;# 
   432  0FE9                     	;# 
   433  0FEA                     	;# 
   434  0FEB                     	;# 
   435  0FED                     	;# 
   436  0FEE                     	;# 
   437  0FEF                     	;# 
   438  0000                     	;# 
   439  0001                     	;# 
   440  0002                     	;# 
   441  0003                     	;# 
   442  0004                     	;# 
   443  0005                     	;# 
   444  0006                     	;# 
   445  0007                     	;# 
   446  0008                     	;# 
   447  0009                     	;# 
   448  000A                     	;# 
   449  000B                     	;# 
   450  000C                     	;# 
   451  000E                     	;# 
   452  0011                     	;# 
   453  0012                     	;# 
   454  0015                     	;# 
   455  0016                     	;# 
   456  0016                     	;# 
   457  0017                     	;# 
   458  0018                     	;# 
   459  0019                     	;# 
   460  001A                     	;# 
   461  001B                     	;# 
   462  001C                     	;# 
   463  001E                     	;# 
   464  001F                     	;# 
   465  008C                     	;# 
   466  008E                     	;# 
   467  0091                     	;# 
   468  0092                     	;# 
   469  0095                     	;# 
   470  0096                     	;# 
   471  0097                     	;# 
   472  0098                     	;# 
   473  0099                     	;# 
   474  009A                     	;# 
   475  009B                     	;# 
   476  009B                     	;# 
   477  009C                     	;# 
   478  009D                     	;# 
   479  009E                     	;# 
   480  010C                     	;# 
   481  010E                     	;# 
   482  0111                     	;# 
   483  0112                     	;# 
   484  0113                     	;# 
   485  0114                     	;# 
   486  0115                     	;# 
   487  0116                     	;# 
   488  0117                     	;# 
   489  0118                     	;# 
   490  0119                     	;# 
   491  011A                     	;# 
   492  011B                     	;# 
   493  011D                     	;# 
   494  011D                     	;# 
   495  018C                     	;# 
   496  018E                     	;# 
   497  0191                     	;# 
   498  0191                     	;# 
   499  0192                     	;# 
   500  0193                     	;# 
   501  0193                     	;# 
   502  0193                     	;# 
   503  0194                     	;# 
   504  0195                     	;# 
   505  0196                     	;# 
   506  0199                     	;# 
   507  019A                     	;# 
   508  019B                     	;# 
   509  019B                     	;# 
   510  019B                     	;# 
   511  019B                     	;# 
   512  019C                     	;# 
   513  019C                     	;# 
   514  019D                     	;# 
   515  019E                     	;# 
   516  019F                     	;# 
   517  020C                     	;# 
   518  020E                     	;# 
   519  0211                     	;# 
   520  0211                     	;# 
   521  0212                     	;# 
   522  0212                     	;# 
   523  0213                     	;# 
   524  0213                     	;# 
   525  0214                     	;# 
   526  0214                     	;# 
   527  0215                     	;# 
   528  0215                     	;# 
   529  0215                     	;# 
   530  0216                     	;# 
   531  0216                     	;# 
   532  0217                     	;# 
   533  0217                     	;# 
   534  0291                     	;# 
   535  0291                     	;# 
   536  0292                     	;# 
   537  0293                     	;# 
   538  0294                     	;# 
   539  0295                     	;# 
   540  0295                     	;# 
   541  0296                     	;# 
   542  0391                     	;# 
   543  0392                     	;# 
   544  0393                     	;# 
   545  039A                     	;# 
   546  039C                     	;# 
   547  039D                     	;# 
   548  039E                     	;# 
   549  039F                     	;# 
   550  0FE4                     	;# 
   551  0FE5                     	;# 
   552  0FE6                     	;# 
   553  0FE7                     	;# 
   554  0FE8                     	;# 
   555  0FE9                     	;# 
   556  0FEA                     	;# 
   557  0FEB                     	;# 
   558  0FED                     	;# 
   559  0FEE                     	;# 
   560  0FEF                     	;# 
   561  0000                     	;# 
   562  0001                     	;# 
   563  0002                     	;# 
   564  0003                     	;# 
   565  0004                     	;# 
   566  0005                     	;# 
   567  0006                     	;# 
   568  0007                     	;# 
   569  0008                     	;# 
   570  0009                     	;# 
   571  000A                     	;# 
   572  000B                     	;# 
   573  000C                     	;# 
   574  000E                     	;# 
   575  0011                     	;# 
   576  0012                     	;# 
   577  0015                     	;# 
   578  0016                     	;# 
   579  0016                     	;# 
   580  0017                     	;# 
   581  0018                     	;# 
   582  0019                     	;# 
   583  001A                     	;# 
   584  001B                     	;# 
   585  001C                     	;# 
   586  001E                     	;# 
   587  001F                     	;# 
   588  008C                     	;# 
   589  008E                     	;# 
   590  0091                     	;# 
   591  0092                     	;# 
   592  0095                     	;# 
   593  0096                     	;# 
   594  0097                     	;# 
   595  0098                     	;# 
   596  0099                     	;# 
   597  009A                     	;# 
   598  009B                     	;# 
   599  009B                     	;# 
   600  009C                     	;# 
   601  009D                     	;# 
   602  009E                     	;# 
   603  010C                     	;# 
   604  010E                     	;# 
   605  0111                     	;# 
   606  0112                     	;# 
   607  0113                     	;# 
   608  0114                     	;# 
   609  0115                     	;# 
   610  0116                     	;# 
   611  0117                     	;# 
   612  0118                     	;# 
   613  0119                     	;# 
   614  011A                     	;# 
   615  011B                     	;# 
   616  011D                     	;# 
   617  011D                     	;# 
   618  018C                     	;# 
   619  018E                     	;# 
   620  0191                     	;# 
   621  0191                     	;# 
   622  0192                     	;# 
   623  0193                     	;# 
   624  0193                     	;# 
   625  0193                     	;# 
   626  0194                     	;# 
   627  0195                     	;# 
   628  0196                     	;# 
   629  0199                     	;# 
   630  019A                     	;# 
   631  019B                     	;# 
   632  019B                     	;# 
   633  019B                     	;# 
   634  019B                     	;# 
   635  019C                     	;# 
   636  019C                     	;# 
   637  019D                     	;# 
   638  019E                     	;# 
   639  019F                     	;# 
   640  020C                     	;# 
   641  020E                     	;# 
   642  0211                     	;# 
   643  0211                     	;# 
   644  0212                     	;# 
   645  0212                     	;# 
   646  0213                     	;# 
   647  0213                     	;# 
   648  0214                     	;# 
   649  0214                     	;# 
   650  0215                     	;# 
   651  0215                     	;# 
   652  0215                     	;# 
   653  0216                     	;# 
   654  0216                     	;# 
   655  0217                     	;# 
   656  0217                     	;# 
   657  0291                     	;# 
   658  0291                     	;# 
   659  0292                     	;# 
   660  0293                     	;# 
   661  0294                     	;# 
   662  0295                     	;# 
   663  0295                     	;# 
   664  0296                     	;# 
   665  0391                     	;# 
   666  0392                     	;# 
   667  0393                     	;# 
   668  039A                     	;# 
   669  039C                     	;# 
   670  039D                     	;# 
   671  039E                     	;# 
   672  039F                     	;# 
   673  0FE4                     	;# 
   674  0FE5                     	;# 
   675  0FE6                     	;# 
   676  0FE7                     	;# 
   677  0FE8                     	;# 
   678  0FE9                     	;# 
   679  0FEA                     	;# 
   680  0FEB                     	;# 
   681  0FED                     	;# 
   682  0FEE                     	;# 
   683  0FEF                     	;# 
   684  0000                     	;# 
   685  0001                     	;# 
   686  0002                     	;# 
   687  0003                     	;# 
   688  0004                     	;# 
   689  0005                     	;# 
   690  0006                     	;# 
   691  0007                     	;# 
   692  0008                     	;# 
   693  0009                     	;# 
   694  000A                     	;# 
   695  000B                     	;# 
   696  000C                     	;# 
   697  000E                     	;# 
   698  0011                     	;# 
   699  0012                     	;# 
   700  0015                     	;# 
   701  0016                     	;# 
   702  0016                     	;# 
   703  0017                     	;# 
   704  0018                     	;# 
   705  0019                     	;# 
   706  001A                     	;# 
   707  001B                     	;# 
   708  001C                     	;# 
   709  001E                     	;# 
   710  001F                     	;# 
   711  008C                     	;# 
   712  008E                     	;# 
   713  0091                     	;# 
   714  0092                     	;# 
   715  0095                     	;# 
   716  0096                     	;# 
   717  0097                     	;# 
   718  0098                     	;# 
   719  0099                     	;# 
   720  009A                     	;# 
   721  009B                     	;# 
   722  009B                     	;# 
   723  009C                     	;# 
   724  009D                     	;# 
   725  009E                     	;# 
   726  010C                     	;# 
   727  010E                     	;# 
   728  0111                     	;# 
   729  0112                     	;# 
   730  0113                     	;# 
   731  0114                     	;# 
   732  0115                     	;# 
   733  0116                     	;# 
   734  0117                     	;# 
   735  0118                     	;# 
   736  0119                     	;# 
   737  011A                     	;# 
   738  011B                     	;# 
   739  011D                     	;# 
   740  011D                     	;# 
   741  018C                     	;# 
   742  018E                     	;# 
   743  0191                     	;# 
   744  0191                     	;# 
   745  0192                     	;# 
   746  0193                     	;# 
   747  0193                     	;# 
   748  0193                     	;# 
   749  0194                     	;# 
   750  0195                     	;# 
   751  0196                     	;# 
   752  0199                     	;# 
   753  019A                     	;# 
   754  019B                     	;# 
   755  019B                     	;# 
   756  019B                     	;# 
   757  019B                     	;# 
   758  019C                     	;# 
   759  019C                     	;# 
   760  019D                     	;# 
   761  019E                     	;# 
   762  019F                     	;# 
   763  020C                     	;# 
   764  020E                     	;# 
   765  0211                     	;# 
   766  0211                     	;# 
   767  0212                     	;# 
   768  0212                     	;# 
   769  0213                     	;# 
   770  0213                     	;# 
   771  0214                     	;# 
   772  0214                     	;# 
   773  0215                     	;# 
   774  0215                     	;# 
   775  0215                     	;# 
   776  0216                     	;# 
   777  0216                     	;# 
   778  0217                     	;# 
   779  0217                     	;# 
   780  0291                     	;# 
   781  0291                     	;# 
   782  0292                     	;# 
   783  0293                     	;# 
   784  0294                     	;# 
   785  0295                     	;# 
   786  0295                     	;# 
   787  0296                     	;# 
   788  0391                     	;# 
   789  0392                     	;# 
   790  0393                     	;# 
   791  039A                     	;# 
   792  039C                     	;# 
   793  039D                     	;# 
   794  039E                     	;# 
   795  039F                     	;# 
   796  0FE4                     	;# 
   797  0FE5                     	;# 
   798  0FE6                     	;# 
   799  0FE7                     	;# 
   800  0FE8                     	;# 
   801  0FE9                     	;# 
   802  0FEA                     	;# 
   803  0FEB                     	;# 
   804  0FED                     	;# 
   805  0FEE                     	;# 
   806  0FEF                     	;# 
   807  0000                     	;# 
   808  0001                     	;# 
   809  0002                     	;# 
   810  0003                     	;# 
   811  0004                     	;# 
   812  0005                     	;# 
   813  0006                     	;# 
   814  0007                     	;# 
   815  0008                     	;# 
   816  0009                     	;# 
   817  000A                     	;# 
   818  000B                     	;# 
   819  000C                     	;# 
   820  000E                     	;# 
   821  0011                     	;# 
   822  0012                     	;# 
   823  0015                     	;# 
   824  0016                     	;# 
   825  0016                     	;# 
   826  0017                     	;# 
   827  0018                     	;# 
   828  0019                     	;# 
   829  001A                     	;# 
   830  001B                     	;# 
   831  001C                     	;# 
   832  001E                     	;# 
   833  001F                     	;# 
   834  008C                     	;# 
   835  008E                     	;# 
   836  0091                     	;# 
   837  0092                     	;# 
   838  0095                     	;# 
   839  0096                     	;# 
   840  0097                     	;# 
   841  0098                     	;# 
   842  0099                     	;# 
   843  009A                     	;# 
   844  009B                     	;# 
   845  009B                     	;# 
   846  009C                     	;# 
   847  009D                     	;# 
   848  009E                     	;# 
   849  010C                     	;# 
   850  010E                     	;# 
   851  0111                     	;# 
   852  0112                     	;# 
   853  0113                     	;# 
   854  0114                     	;# 
   855  0115                     	;# 
   856  0116                     	;# 
   857  0117                     	;# 
   858  0118                     	;# 
   859  0119                     	;# 
   860  011A                     	;# 
   861  011B                     	;# 
   862  011D                     	;# 
   863  011D                     	;# 
   864  018C                     	;# 
   865  018E                     	;# 
   866  0191                     	;# 
   867  0191                     	;# 
   868  0192                     	;# 
   869  0193                     	;# 
   870  0193                     	;# 
   871  0193                     	;# 
   872  0194                     	;# 
   873  0195                     	;# 
   874  0196                     	;# 
   875  0199                     	;# 
   876  019A                     	;# 
   877  019B                     	;# 
   878  019B                     	;# 
   879  019B                     	;# 
   880  019B                     	;# 
   881  019C                     	;# 
   882  019C                     	;# 
   883  019D                     	;# 
   884  019E                     	;# 
   885  019F                     	;# 
   886  020C                     	;# 
   887  020E                     	;# 
   888  0211                     	;# 
   889  0211                     	;# 
   890  0212                     	;# 
   891  0212                     	;# 
   892  0213                     	;# 
   893  0213                     	;# 
   894  0214                     	;# 
   895  0214                     	;# 
   896  0215                     	;# 
   897  0215                     	;# 
   898  0215                     	;# 
   899  0216                     	;# 
   900  0216                     	;# 
   901  0217                     	;# 
   902  0217                     	;# 
   903  0291                     	;# 
   904  0291                     	;# 
   905  0292                     	;# 
   906  0293                     	;# 
   907  0294                     	;# 
   908  0295                     	;# 
   909  0295                     	;# 
   910  0296                     	;# 
   911  0391                     	;# 
   912  0392                     	;# 
   913  0393                     	;# 
   914  039A                     	;# 
   915  039C                     	;# 
   916  039D                     	;# 
   917  039E                     	;# 
   918  039F                     	;# 
   919  0FE4                     	;# 
   920  0FE5                     	;# 
   921  0FE6                     	;# 
   922  0FE7                     	;# 
   923  0FE8                     	;# 
   924  0FE9                     	;# 
   925  0FEA                     	;# 
   926  0FEB                     	;# 
   927  0FED                     	;# 
   928  0FEE                     	;# 
   929  0FEF                     	;# 
   930  0000                     	;# 
   931  0001                     	;# 
   932  0002                     	;# 
   933  0003                     	;# 
   934  0004                     	;# 
   935  0005                     	;# 
   936  0006                     	;# 
   937  0007                     	;# 
   938  0008                     	;# 
   939  0009                     	;# 
   940  000A                     	;# 
   941  000B                     	;# 
   942  000C                     	;# 
   943  000E                     	;# 
   944  0011                     	;# 
   945  0012                     	;# 
   946  0015                     	;# 
   947  0016                     	;# 
   948  0016                     	;# 
   949  0017                     	;# 
   950  0018                     	;# 
   951  0019                     	;# 
   952  001A                     	;# 
   953  001B                     	;# 
   954  001C                     	;# 
   955  001E                     	;# 
   956  001F                     	;# 
   957  008C                     	;# 
   958  008E                     	;# 
   959  0091                     	;# 
   960  0092                     	;# 
   961  0095                     	;# 
   962  0096                     	;# 
   963  0097                     	;# 
   964  0098                     	;# 
   965  0099                     	;# 
   966  009A                     	;# 
   967  009B                     	;# 
   968  009B                     	;# 
   969  009C                     	;# 
   970  009D                     	;# 
   971  009E                     	;# 
   972  010C                     	;# 
   973  010E                     	;# 
   974  0111                     	;# 
   975  0112                     	;# 
   976  0113                     	;# 
   977  0114                     	;# 
   978  0115                     	;# 
   979  0116                     	;# 
   980  0117                     	;# 
   981  0118                     	;# 
   982  0119                     	;# 
   983  011A                     	;# 
   984  011B                     	;# 
   985  011D                     	;# 
   986  011D                     	;# 
   987  018C                     	;# 
   988  018E                     	;# 
   989  0191                     	;# 
   990  0191                     	;# 
   991  0192                     	;# 
   992  0193                     	;# 
   993  0193                     	;# 
   994  0193                     	;# 
   995  0194                     	;# 
   996  0195                     	;# 
   997  0196                     	;# 
   998  0199                     	;# 
   999  019A                     	;# 
  1000  019B                     	;# 
  1001  019B                     	;# 
  1002  019B                     	;# 
  1003  019B                     	;# 
  1004  019C                     	;# 
  1005  019C                     	;# 
  1006  019D                     	;# 
  1007  019E                     	;# 
  1008  019F                     	;# 
  1009  020C                     	;# 
  1010  020E                     	;# 
  1011  0211                     	;# 
  1012  0211                     	;# 
  1013  0212                     	;# 
  1014  0212                     	;# 
  1015  0213                     	;# 
  1016  0213                     	;# 
  1017  0214                     	;# 
  1018  0214                     	;# 
  1019  0215                     	;# 
  1020  0215                     	;# 
  1021  0215                     	;# 
  1022  0216                     	;# 
  1023  0216                     	;# 
  1024  0217                     	;# 
  1025  0217                     	;# 
  1026  0291                     	;# 
  1027  0291                     	;# 
  1028  0292                     	;# 
  1029  0293                     	;# 
  1030  0294                     	;# 
  1031  0295                     	;# 
  1032  0295                     	;# 
  1033  0296                     	;# 
  1034  0391                     	;# 
  1035  0392                     	;# 
  1036  0393                     	;# 
  1037  039A                     	;# 
  1038  039C                     	;# 
  1039  039D                     	;# 
  1040  039E                     	;# 
  1041  039F                     	;# 
  1042  0FE4                     	;# 
  1043  0FE5                     	;# 
  1044  0FE6                     	;# 
  1045  0FE7                     	;# 
  1046  0FE8                     	;# 
  1047  0FE9                     	;# 
  1048  0FEA                     	;# 
  1049  0FEB                     	;# 
  1050  0FED                     	;# 
  1051  0FEE                     	;# 
  1052  0FEF                     	;# 
  1053  0000                     	;# 
  1054  0001                     	;# 
  1055  0002                     	;# 
  1056  0003                     	;# 
  1057  0004                     	;# 
  1058  0005                     	;# 
  1059  0006                     	;# 
  1060  0007                     	;# 
  1061  0008                     	;# 
  1062  0009                     	;# 
  1063  000A                     	;# 
  1064  000B                     	;# 
  1065  000C                     	;# 
  1066  000E                     	;# 
  1067  0011                     	;# 
  1068  0012                     	;# 
  1069  0015                     	;# 
  1070  0016                     	;# 
  1071  0016                     	;# 
  1072  0017                     	;# 
  1073  0018                     	;# 
  1074  0019                     	;# 
  1075  001A                     	;# 
  1076  001B                     	;# 
  1077  001C                     	;# 
  1078  001E                     	;# 
  1079  001F                     	;# 
  1080  008C                     	;# 
  1081  008E                     	;# 
  1082  0091                     	;# 
  1083  0092                     	;# 
  1084  0095                     	;# 
  1085  0096                     	;# 
  1086  0097                     	;# 
  1087  0098                     	;# 
  1088  0099                     	;# 
  1089  009A                     	;# 
  1090  009B                     	;# 
  1091  009B                     	;# 
  1092  009C                     	;# 
  1093  009D                     	;# 
  1094  009E                     	;# 
  1095  010C                     	;# 
  1096  010E                     	;# 
  1097  0111                     	;# 
  1098  0112                     	;# 
  1099  0113                     	;# 
  1100  0114                     	;# 
  1101  0115                     	;# 
  1102  0116                     	;# 
  1103  0117                     	;# 
  1104  0118                     	;# 
  1105  0119                     	;# 
  1106  011A                     	;# 
  1107  011B                     	;# 
  1108  011D                     	;# 
  1109  011D                     	;# 
  1110  018C                     	;# 
  1111  018E                     	;# 
  1112  0191                     	;# 
  1113  0191                     	;# 
  1114  0192                     	;# 
  1115  0193                     	;# 
  1116  0193                     	;# 
  1117  0193                     	;# 
  1118  0194                     	;# 
  1119  0195                     	;# 
  1120  0196                     	;# 
  1121  0199                     	;# 
  1122  019A                     	;# 
  1123  019B                     	;# 
  1124  019B                     	;# 
  1125  019B                     	;# 
  1126  019B                     	;# 
  1127  019C                     	;# 
  1128  019C                     	;# 
  1129  019D                     	;# 
  1130  019E                     	;# 
  1131  019F                     	;# 
  1132  020C                     	;# 
  1133  020E                     	;# 
  1134  0211                     	;# 
  1135  0211                     	;# 
  1136  0212                     	;# 
  1137  0212                     	;# 
  1138  0213                     	;# 
  1139  0213                     	;# 
  1140  0214                     	;# 
  1141  0214                     	;# 
  1142  0215                     	;# 
  1143  0215                     	;# 
  1144  0215                     	;# 
  1145  0216                     	;# 
  1146  0216                     	;# 
  1147  0217                     	;# 
  1148  0217                     	;# 
  1149  0291                     	;# 
  1150  0291                     	;# 
  1151  0292                     	;# 
  1152  0293                     	;# 
  1153  0294                     	;# 
  1154  0295                     	;# 
  1155  0295                     	;# 
  1156  0296                     	;# 
  1157  0391                     	;# 
  1158  0392                     	;# 
  1159  0393                     	;# 
  1160  039A                     	;# 
  1161  039C                     	;# 
  1162  039D                     	;# 
  1163  039E                     	;# 
  1164  039F                     	;# 
  1165  0FE4                     	;# 
  1166  0FE5                     	;# 
  1167  0FE6                     	;# 
  1168  0FE7                     	;# 
  1169  0FE8                     	;# 
  1170  0FE9                     	;# 
  1171  0FEA                     	;# 
  1172  0FEB                     	;# 
  1173  0FED                     	;# 
  1174  0FEE                     	;# 
  1175  0FEF                     	;# 
  1176  000E                     _PORTC	set	14
  1177  0015                     _TMR0	set	21
  1178  005F                     _GIE	set	95
  1179  005E                     _PEIE	set	94
  1180  0065                     _RA5	set	101
  1181  008D                     _RCIF	set	141
  1182  005D                     _TMR0IE	set	93
  1183  005A                     _TMR0IF	set	90
  1184  008C                     _TXIF	set	140
  1185  009D                     _ADCON0	set	157
  1186  009E                     _ADCON1	set	158
  1187  009C                     _ADRESH	set	156
  1188  009B                     _ADRESL	set	155
  1189  0095                     _OPTION_REGbits	set	149
  1190  0099                     _OSCCON	set	153
  1191  009A                     _OSCSTAT	set	154
  1192  0098                     _OSCTUNE	set	152
  1193  008C                     _TRISA	set	140
  1194  008E                     _TRISC	set	142
  1195  04E9                     _ADGO	set	1257
  1196  04A8                     _PS0	set	1192
  1197  04A9                     _PS1	set	1193
  1198  04AA                     _PS2	set	1194
  1199  04AB                     _PSA	set	1195
  1200  048D                     _RCIE	set	1165
  1201  04AD                     _TMR0CS	set	1197
  1202  048C                     _TXIE	set	1164
  1203  011D                     _APFCON	set	285
  1204  010C                     _LATA	set	268
  1205  010E                     _LATC	set	270
  1206  08EF                     _RXDTSEL	set	2287
  1207  08EA                     _TXCKSEL	set	2282
  1208  018C                     _ANSELA	set	396
  1209  018E                     _ANSELC	set	398
  1210  0199                     _RCREG	set	409
  1211  019C                     _SPBRGH	set	412
  1212  019B                     _SPBRGL	set	411
  1213  019A                     _TXREG	set	410
  1214  0CFB                     _BRG16	set	3323
  1215  0CF2                     _BRGH	set	3314
  1216  0CEC                     _CREN	set	3308
  1217  0CE9                     _OERR	set	3305
  1218  0CEF                     _SPEN	set	3311
  1219  0CF4                     _SYNC	set	3316
  1220  0CF5                     _TXEN	set	3317
  1221  020C                     _WPUA	set	524
  1222  020E                     _WPUC	set	526
  1223  039A                     _CLKRCON	set	922
  1224                           
  1225                           ; #config settings
  1226  0000                     
  1227                           	psect	cinit
  1228  0056                     start_initialization:	
  1229  0056                     __initialization:	
  1230                           
  1231                           ; Clear objects allocated to COMMON
  1232  0056  01F0               	clrf	__pbssCOMMON& (0+127)
  1233  0057  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  1234  0058  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  1235  0059  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  1236  005A  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  1237                           
  1238                           ; Clear objects allocated to BANK0
  1239  005B  3020               	movlw	low __pbssBANK0
  1240  005C  0084               	movwf	4
  1241  005D  3000               	movlw	high __pbssBANK0
  1242  005E  0085               	movwf	5
  1243  005F  302C               	movlw	44
  1244  0060  2383               	fcall	clear_ram0
  1245  0061                     end_of_initialization:	
  1246                           ;End of C runtime variable initialization code
  1247                           
  1248  0061                     __end_of__initialization:	
  1249  0061  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1250  0062  0020               	movlb	0
  1251  0063  29C7               	ljmp	_main	;jump to C main() function
  1252                           
  1253                           	psect	bssCOMMON
  1254  0070                     __pbssCOMMON:	
  1255  0070                     _TIMER0_timeout:	
  1256  0070                     	ds	2
  1257  0072                     _USART_tx_flag:	
  1258  0072                     	ds	1
  1259  0073                     _USART_tx_index:	
  1260  0073                     	ds	1
  1261  0074                     _USART_tx_length:	
  1262  0074                     	ds	1
  1263                           
  1264                           	psect	bssBANK0
  1265  0020                     __pbssBANK0:	
  1266  0020                     _USART_rx_data:	
  1267  0020                     	ds	15
  1268  002F                     _USART_tx_data:	
  1269  002F                     	ds	15
  1270  003E                     _TIMER0_flag:	
  1271  003E                     	ds	1
  1272  003F                     _USART_rx_flag:	
  1273  003F                     	ds	1
  1274  0040                     _USART_rx_index:	
  1275  0040                     	ds	1
  1276  0041                     _mess_rec_size:	
  1277  0041                     	ds	1
  1278  0042                     _mess_rec:	
  1279  0042                     	ds	10
  1280                           
  1281                           	psect	clrtext
  1282  0383                     clear_ram0:	
  1283                           ;	Called with FSR0 containing the base address, and
  1284                           ;	WREG with the size to clear
  1285                           
  1286  0383  0064               	clrwdt	;clear the watchdog before getting into this loop
  1287  0384                     clrloop0:	
  1288  0384  0180               	clrf	0	;clear RAM location pointed to by FSR
  1289  0385  3101               	addfsr 0,1
  1290  0386  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1291  0387  2B84               	goto	clrloop0	;have we reached the end yet?
  1292  0388  3400               	retlw	0	;all done for this memory range, return
  1293                           
  1294                           	psect	cstackCOMMON
  1295  0075                     __pcstackCOMMON:	
  1296  0075                     ?_OSCILLATOR_Initialize:	
  1297  0075                     ?_setup_TMR0:	
  1298                           ; 1 bytes @ 0x0
  1299                           
  1300  0075                     ?_start_TX_USART_ISR:	
  1301                           ; 1 bytes @ 0x0
  1302                           
  1303  0075                     ?_start_RX_USART_ISR:	
  1304                           ; 1 bytes @ 0x0
  1305                           
  1306  0075                     ?_start_RCM:	
  1307                           ; 1 bytes @ 0x0
  1308                           
  1309  0075                     ?_setup_ADC:	
  1310                           ; 1 bytes @ 0x0
  1311                           
  1312  0075                     ?_mess_handler:	
  1313                           ; 1 bytes @ 0x0
  1314                           
  1315  0075                     ?_stop_TMR0_ISR:	
  1316                           ; 1 bytes @ 0x0
  1317                           
  1318  0075                     ??_stop_TMR0_ISR:	
  1319                           ; 1 bytes @ 0x0
  1320                           
  1321  0075                     ?_start_TMR0_ISR:	
  1322                           ; 1 bytes @ 0x0
  1323                           
  1324  0075                     ??_start_TMR0_ISR:	
  1325                           ; 1 bytes @ 0x0
  1326                           
  1327  0075                     ?_config_ASIC:	
  1328                           ; 1 bytes @ 0x0
  1329                           
  1330  0075                     ?_read_ADC_channels:	
  1331                           ; 1 bytes @ 0x0
  1332                           
  1333  0075                     ?_measure_Impedance:	
  1334                           ; 1 bytes @ 0x0
  1335                           
  1336  0075                     ?_PIN_MANAGER_Initialize:	
  1337                           ; 1 bytes @ 0x0
  1338                           
  1339  0075                     ?_SYSTEM_Initialize:	
  1340                           ; 1 bytes @ 0x0
  1341                           
  1342  0075                     ?_main:	
  1343                           ; 1 bytes @ 0x0
  1344                           
  1345  0075                     ?_isr:	
  1346                           ; 1 bytes @ 0x0
  1347                           
  1348  0075                     ?_close_RX_USART:	
  1349                           ; 1 bytes @ 0x0
  1350                           
  1351  0075                     ?i1_start_RX_USART_ISR:	
  1352                           ; 1 bytes @ 0x0
  1353                           
  1354  0075                     ??i1_start_RX_USART_ISR:	
  1355                           ; 1 bytes @ 0x0
  1356                           
  1357                           
  1358                           ; 1 bytes @ 0x0
  1359  0075                     	ds	2
  1360  0077                     start_TMR0_ISR@val:	
  1361                           
  1362                           ; 1 bytes @ 0x2
  1363  0077                     	ds	1
  1364  0078                     ??_isr:	
  1365                           
  1366                           ; 1 bytes @ 0x3
  1367  0078                     	ds	2
  1368                           
  1369                           	psect	cstackBANK0
  1370  004C                     __pcstackBANK0:	
  1371  004C                     ??_OSCILLATOR_Initialize:	
  1372  004C                     ??_setup_TMR0:	
  1373                           ; 1 bytes @ 0x0
  1374                           
  1375  004C                     ??_start_TX_USART_ISR:	
  1376                           ; 1 bytes @ 0x0
  1377                           
  1378  004C                     ??_start_RX_USART_ISR:	
  1379                           ; 1 bytes @ 0x0
  1380                           
  1381  004C                     ??_start_RCM:	
  1382                           ; 1 bytes @ 0x0
  1383                           
  1384  004C                     ??_setup_ADC:	
  1385                           ; 1 bytes @ 0x0
  1386                           
  1387  004C                     ??_PIN_MANAGER_Initialize:	
  1388                           ; 1 bytes @ 0x0
  1389                           
  1390  004C                     ??_SYSTEM_Initialize:	
  1391                           ; 1 bytes @ 0x0
  1392                           
  1393  004C                     ?_VIN_config:	
  1394                           ; 1 bytes @ 0x0
  1395                           
  1396  004C                     ??_close_RX_USART:	
  1397                           ; 1 bytes @ 0x0
  1398                           
  1399  004C                     ?_lputs_ISR:	
  1400                           ; 1 bytes @ 0x0
  1401                           
  1402  004C                     ?_ADC_2:	
  1403                           ; 1 bytes @ 0x0
  1404                           
  1405  004C                     ?_ADC_4:	
  1406                           ; 2 bytes @ 0x0
  1407                           
  1408  004C                     ?_ADC_5:	
  1409                           ; 2 bytes @ 0x0
  1410                           
  1411  004C                     lputs_ISR@length:	
  1412                           ; 2 bytes @ 0x0
  1413                           
  1414  004C                     VIN_config@conf:	
  1415                           ; 1 bytes @ 0x0
  1416                           
  1417                           
  1418                           ; 6 bytes @ 0x0
  1419  004C                     	ds	1
  1420  004D                     ??_lputs_ISR:	
  1421                           
  1422                           ; 1 bytes @ 0x1
  1423  004D                     	ds	1
  1424  004E                     ??_ADC_2:	
  1425  004E                     ??_ADC_4:	
  1426                           ; 1 bytes @ 0x2
  1427                           
  1428  004E                     ??_ADC_5:	
  1429                           ; 1 bytes @ 0x2
  1430                           
  1431                           
  1432                           ; 1 bytes @ 0x2
  1433  004E                     	ds	1
  1434  004F                     lputs_ISR@data:	
  1435                           
  1436                           ; 1 bytes @ 0x3
  1437  004F                     	ds	1
  1438  0050                     lputs_ISR@i:	
  1439  0050                     ADC_2@ADC_value:	
  1440                           ; 1 bytes @ 0x4
  1441                           
  1442  0050                     ADC_4@ADC_value:	
  1443                           ; 2 bytes @ 0x4
  1444                           
  1445  0050                     ADC_5@ADC_value:	
  1446                           ; 2 bytes @ 0x4
  1447                           
  1448                           
  1449                           ; 2 bytes @ 0x4
  1450  0050                     	ds	2
  1451  0052                     ??_read_ADC_channels:	
  1452  0052                     ??_VIN_config:	
  1453                           ; 1 bytes @ 0x6
  1454                           
  1455                           
  1456                           ; 1 bytes @ 0x6
  1457  0052                     	ds	1
  1458  0053                     VIN_config@i:	
  1459  0053                     read_ADC_channels@aux:	
  1460                           ; 1 bytes @ 0x7
  1461                           
  1462                           
  1463                           ; 7 bytes @ 0x7
  1464  0053                     	ds	1
  1465  0054                     VIN_config@out:	
  1466                           
  1467                           ; 1 bytes @ 0x8
  1468  0054                     	ds	1
  1469  0055                     ??_config_ASIC:	
  1470  0055                     ??_measure_Impedance:	
  1471                           ; 1 bytes @ 0x9
  1472                           
  1473                           
  1474                           ; 1 bytes @ 0x9
  1475  0055                     	ds	1
  1476  0056                     config_ASIC@asic:	
  1477  0056                     measure_Impedance@aux:	
  1478                           ; 6 bytes @ 0xA
  1479                           
  1480                           
  1481                           ; 13 bytes @ 0xA
  1482  0056                     	ds	4
  1483  005A                     read_ADC_channels@value1:	
  1484                           
  1485                           ; 2 bytes @ 0xE
  1486  005A                     	ds	2
  1487  005C                     read_ADC_channels@value2:	
  1488                           
  1489                           ; 2 bytes @ 0x10
  1490  005C                     	ds	2
  1491  005E                     read_ADC_channels@value3:	
  1492                           
  1493                           ; 2 bytes @ 0x12
  1494  005E                     	ds	5
  1495  0063                     measure_Impedance@value1:	
  1496                           
  1497                           ; 2 bytes @ 0x17
  1498  0063                     	ds	2
  1499  0065                     measure_Impedance@value2:	
  1500                           
  1501                           ; 2 bytes @ 0x19
  1502  0065                     	ds	2
  1503  0067                     measure_Impedance@asic:	
  1504                           
  1505                           ; 6 bytes @ 0x1B
  1506  0067                     	ds	6
  1507  006D                     ??_mess_handler:	
  1508                           
  1509                           ; 1 bytes @ 0x21
  1510  006D                     	ds	1
  1511  006E                     ??_main:	
  1512                           
  1513                           ; 1 bytes @ 0x22
  1514  006E                     	ds	1
  1515  006F                     main@i:	
  1516                           
  1517                           ; 1 bytes @ 0x23
  1518  006F                     	ds	1
  1519                           
  1520                           	psect	maintext
  1521  01C7                     __pmaintext:	
  1522 ;;
  1523 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1524 ;;
  1525 ;; *************** function _main *****************
  1526 ;; Defined at:
  1527 ;;		line 17 in file "main.c"
  1528 ;; Parameters:    Size  Location     Type
  1529 ;;		None
  1530 ;; Auto vars:     Size  Location     Type
  1531 ;;  i               1   35[BANK0 ] unsigned char 
  1532 ;; Return value:  Size  Location     Type
  1533 ;;                  1    wreg      void 
  1534 ;; Registers used:
  1535 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1536 ;; Tracked objects:
  1537 ;;		On entry : B1F/0
  1538 ;;		On exit  : 0/0
  1539 ;;		Unchanged: 0/0
  1540 ;; Data sizes:     COMMON   BANK0   BANK1
  1541 ;;      Params:         0       0       0
  1542 ;;      Locals:         0       1       0
  1543 ;;      Temps:          0       1       0
  1544 ;;      Totals:         0       2       0
  1545 ;;Total ram usage:        2 bytes
  1546 ;; Hardware stack levels required when called:    6
  1547 ;; This function calls:
  1548 ;;		_SYSTEM_Initialize
  1549 ;;		_mess_handler
  1550 ;;		_setup_ADC
  1551 ;;		_setup_TMR0
  1552 ;;		_start_RCM
  1553 ;;		_start_RX_USART_ISR
  1554 ;;		_start_TX_USART_ISR
  1555 ;; This function is called by:
  1556 ;;		Startup code after reset
  1557 ;; This function uses a non-reentrant model
  1558 ;;
  1559                           
  1560                           
  1561                           ;psect for function _main
  1562  01C7                     _main:	
  1563                           
  1564                           ;main.c: 19: unsigned char i;
  1565                           ;main.c: 21: SYSTEM_Initialize();
  1566                           
  1567                           ;incstack = 0
  1568                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1569  01C7  239E               	fcall	_SYSTEM_Initialize
  1570                           
  1571                           ;main.c: 22: setup_TMR0();
  1572  01C8  237C               	fcall	_setup_TMR0
  1573                           
  1574                           ;main.c: 23: start_TX_USART_ISR();
  1575  01C9  236D               	fcall	_start_TX_USART_ISR
  1576                           
  1577                           ;main.c: 24: start_RX_USART_ISR();
  1578  01CA  233B               	fcall	_start_RX_USART_ISR
  1579                           
  1580                           ;main.c: 25: start_RCM();
  1581  01CB  239A               	fcall	_start_RCM
  1582                           
  1583                           ;main.c: 26: setup_ADC();
  1584  01CC  2389               	fcall	_setup_ADC
  1585                           
  1586                           ;main.c: 28: RA5 = 0;
  1587  01CD  0020               	movlb	0	; select bank0
  1588  01CE  128C               	bcf	12,5	;volatile
  1589                           
  1590                           ;main.c: 29: _delay((unsigned long)((150)*(500000/4000.0)));
  1591  01CF  3019               	movlw	25
  1592  01D0  0020               	movlb	0	; select bank0
  1593  01D1  00EE               	movwf	??_main
  1594  01D2  3058               	movlw	88
  1595  01D3                     u997:	
  1596  01D3  0B89               	decfsz	9,f
  1597  01D4  29D3               	goto	u997
  1598  01D5  0BEE               	decfsz	??_main,f
  1599  01D6  29D3               	goto	u997
  1600  01D7  0000               	nop
  1601                           
  1602                           ;main.c: 30: RA5 = 1;
  1603  01D8  0020               	movlb	0	; select bank0
  1604  01D9  168C               	bsf	12,5	;volatile
  1605  01DA                     l108:	
  1606                           ;main.c: 35: while(1) {
  1607                           
  1608  01DA  0064               	clrwdt	;# 
  1609                           
  1610                           ;main.c: 39: if (TIMER0_flag) {
  1611  01DB  0020               	movlb	0	; select bank0
  1612  01DC  083E               	movf	_TIMER0_flag,w	;volatile
  1613  01DD  1903               	btfsc	3,2
  1614  01DE  29DA               	goto	l108
  1615                           
  1616                           ;main.c: 40: TIMER0_flag = 0;
  1617  01DF  01BE               	clrf	_TIMER0_flag	;volatile
  1618                           
  1619                           ;main.c: 42: if (USART_rx_index > 10) {
  1620  01E0  300B               	movlw	11
  1621  01E1  0240               	subwf	_USART_rx_index,w	;volatile
  1622  01E2  1C03               	skipc
  1623  01E3  29E6               	goto	l2127
  1624                           
  1625                           ;main.c: 43: USART_rx_index = 0;
  1626  01E4  01C0               	clrf	_USART_rx_index	;volatile
  1627                           
  1628                           ;main.c: 44: continue;
  1629  01E5  29DA               	goto	l108
  1630  01E6                     l2127:	
  1631                           
  1632                           ;main.c: 45: }
  1633                           ;main.c: 47: if(USART_rx_index == 0)
  1634  01E6  0840               	movf	_USART_rx_index,w	;volatile
  1635  01E7  1903               	btfsc	3,2
  1636                           
  1637                           ;main.c: 48: continue;
  1638  01E8  29DA               	goto	l108
  1639                           
  1640                           ;main.c: 51: mess_rec_size = USART_rx_index;
  1641  01E9  0840               	movf	_USART_rx_index,w	;volatile
  1642  01EA  00EE               	movwf	??_main
  1643  01EB  086E               	movf	??_main,w
  1644  01EC  00C1               	movwf	_mess_rec_size	;volatile
  1645                           
  1646                           ;main.c: 53: for (i = 0; i < mess_rec_size; i++)
  1647  01ED  01EF               	clrf	main@i
  1648  01EE                     l2139:	
  1649  01EE  0841               	movf	_mess_rec_size,w	;volatile
  1650  01EF  026F               	subwf	main@i,w
  1651  01F0  1803               	btfsc	3,0
  1652  01F1  2A03               	goto	l2141
  1653                           
  1654                           ;main.c: 54: mess_rec[i] = USART_rx_data[i];
  1655  01F2  086F               	movf	main@i,w
  1656  01F3  3E20               	addlw	(low (_USART_rx_data| 0))& (0+255)
  1657  01F4  0086               	movwf	6
  1658  01F5  0187               	clrf	7
  1659  01F6  0801               	movf	1,w
  1660  01F7  00EE               	movwf	??_main
  1661  01F8  086F               	movf	main@i,w
  1662  01F9  3E42               	addlw	(low (_mess_rec| 0))& (0+255)
  1663  01FA  0086               	movwf	6
  1664  01FB  0187               	clrf	7
  1665  01FC  086E               	movf	??_main,w
  1666  01FD  0081               	movwf	1
  1667  01FE  3001               	movlw	1
  1668  01FF  00EE               	movwf	??_main
  1669  0200  086E               	movf	??_main,w
  1670  0201  07EF               	addwf	main@i,f
  1671  0202  29EE               	goto	l2139
  1672  0203                     l2141:	
  1673                           
  1674                           ;main.c: 57: mess_handler();
  1675  0203  2303               	fcall	_mess_handler
  1676  0204  29DA               	goto	l108
  1677  0205                     __end_of_main:	
  1678                           
  1679                           	psect	text1
  1680  036D                     __ptext1:	
  1681 ;; *************** function _start_TX_USART_ISR *****************
  1682 ;; Defined at:
  1683 ;;		line 100 in file "USART1823.c"
  1684 ;; Parameters:    Size  Location     Type
  1685 ;;		None
  1686 ;; Auto vars:     Size  Location     Type
  1687 ;;		None
  1688 ;; Return value:  Size  Location     Type
  1689 ;;                  1    wreg      void 
  1690 ;; Registers used:
  1691 ;;		wreg, status,2
  1692 ;; Tracked objects:
  1693 ;;		On entry : 0/0
  1694 ;;		On exit  : 0/0
  1695 ;;		Unchanged: 0/0
  1696 ;; Data sizes:     COMMON   BANK0   BANK1
  1697 ;;      Params:         0       0       0
  1698 ;;      Locals:         0       0       0
  1699 ;;      Temps:          0       0       0
  1700 ;;      Totals:         0       0       0
  1701 ;;Total ram usage:        0 bytes
  1702 ;; Hardware stack levels used:    1
  1703 ;; Hardware stack levels required when called:    2
  1704 ;; This function calls:
  1705 ;;		Nothing
  1706 ;; This function is called by:
  1707 ;;		_main
  1708 ;; This function uses a non-reentrant model
  1709 ;;
  1710                           
  1711                           
  1712                           ;psect for function _start_TX_USART_ISR
  1713  036D                     _start_TX_USART_ISR:	
  1714                           
  1715                           ;USART1823.c: 102: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  1716                           
  1717                           ;incstack = 0
  1718                           ; Regs used in _start_TX_USART_ISR: [wreg+status,2]
  1719  036D  0023               	movlb	3	; select bank3
  1720  036E  151E               	bsf	30,2	;volatile
  1721  036F  159F               	bsf	31,3	;volatile
  1722  0370  019C               	clrf	28	;volatile
  1723  0371  300C               	movlw	12
  1724  0372  009B               	movwf	27	;volatile
  1725                           
  1726                           ;USART1823.c: 103: SYNC = 0;
  1727  0373  121E               	bcf	30,4	;volatile
  1728                           
  1729                           ;USART1823.c: 104: SPEN = 1;
  1730  0374  179D               	bsf	29,7	;volatile
  1731                           
  1732                           ;USART1823.c: 105: TXEN = 1;
  1733  0375  169E               	bsf	30,5	;volatile
  1734                           
  1735                           ;USART1823.c: 107: USART_tx_flag = 0;
  1736  0376  01F2               	clrf	_USART_tx_flag	;volatile
  1737                           
  1738                           ;USART1823.c: 108: USART_tx_index = 0;
  1739  0377  01F3               	clrf	_USART_tx_index	;volatile
  1740                           
  1741                           ;USART1823.c: 109: USART_tx_length = 0;
  1742  0378  01F4               	clrf	_USART_tx_length	;volatile
  1743                           
  1744                           ;USART1823.c: 112: PEIE = 1;
  1745  0379  170B               	bsf	11,6	;volatile
  1746                           
  1747                           ;USART1823.c: 113: GIE = 1;
  1748  037A  178B               	bsf	11,7	;volatile
  1749  037B  0008               	return
  1750  037C                     __end_of_start_TX_USART_ISR:	
  1751                           
  1752                           	psect	text2
  1753  033B                     __ptext2:	
  1754 ;; *************** function _start_RX_USART_ISR *****************
  1755 ;; Defined at:
  1756 ;;		line 82 in file "USART1823.c"
  1757 ;; Parameters:    Size  Location     Type
  1758 ;;		None
  1759 ;; Auto vars:     Size  Location     Type
  1760 ;;		None
  1761 ;; Return value:  Size  Location     Type
  1762 ;;                  1    wreg      void 
  1763 ;; Registers used:
  1764 ;;		wreg, status,2
  1765 ;; Tracked objects:
  1766 ;;		On entry : 0/0
  1767 ;;		On exit  : 0/0
  1768 ;;		Unchanged: 0/0
  1769 ;; Data sizes:     COMMON   BANK0   BANK1
  1770 ;;      Params:         0       0       0
  1771 ;;      Locals:         0       0       0
  1772 ;;      Temps:          0       0       0
  1773 ;;      Totals:         0       0       0
  1774 ;;Total ram usage:        0 bytes
  1775 ;; Hardware stack levels used:    1
  1776 ;; Hardware stack levels required when called:    2
  1777 ;; This function calls:
  1778 ;;		Nothing
  1779 ;; This function is called by:
  1780 ;;		_main
  1781 ;; This function uses a non-reentrant model
  1782 ;;
  1783                           
  1784                           
  1785                           ;psect for function _start_RX_USART_ISR
  1786  033B                     _start_RX_USART_ISR:	
  1787                           
  1788                           ;USART1823.c: 85: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  1789                           
  1790                           ;incstack = 0
  1791                           ; Regs used in _start_RX_USART_ISR: [wreg+status,2]
  1792  033B  0023               	movlb	3	; select bank3
  1793  033C  151E               	bsf	30,2	;volatile
  1794  033D  159F               	bsf	31,3	;volatile
  1795  033E  019C               	clrf	28	;volatile
  1796  033F  300C               	movlw	12
  1797  0340  009B               	movwf	27	;volatile
  1798                           
  1799                           ;USART1823.c: 87: SYNC = 0;
  1800  0341  121E               	bcf	30,4	;volatile
  1801                           
  1802                           ;USART1823.c: 88: SPEN = 1;
  1803  0342  179D               	bsf	29,7	;volatile
  1804                           
  1805                           ;USART1823.c: 89: CREN = 1;
  1806  0343  161D               	bsf	29,4	;volatile
  1807                           
  1808                           ;USART1823.c: 91: USART_rx_flag = 0;
  1809  0344  0020               	movlb	0	; select bank0
  1810  0345  01BF               	clrf	_USART_rx_flag	;volatile
  1811                           
  1812                           ;USART1823.c: 92: USART_rx_index = 0;
  1813  0346  01C0               	clrf	_USART_rx_index	;volatile
  1814                           
  1815                           ;USART1823.c: 94: RCIE = 1;
  1816  0347  0021               	movlb	1	; select bank1
  1817  0348  1691               	bsf	17,5	;volatile
  1818                           
  1819                           ;USART1823.c: 95: PEIE = 1;
  1820  0349  170B               	bsf	11,6	;volatile
  1821                           
  1822                           ;USART1823.c: 96: GIE = 1;
  1823  034A  178B               	bsf	11,7	;volatile
  1824  034B  0008               	return
  1825  034C                     __end_of_start_RX_USART_ISR:	
  1826                           
  1827                           	psect	text3
  1828  039A                     __ptext3:	
  1829 ;; *************** function _start_RCM *****************
  1830 ;; Defined at:
  1831 ;;		line 4 in file "RCM1823.c"
  1832 ;; Parameters:    Size  Location     Type
  1833 ;;		None
  1834 ;; Auto vars:     Size  Location     Type
  1835 ;;		None
  1836 ;; Return value:  Size  Location     Type
  1837 ;;                  1    wreg      void 
  1838 ;; Registers used:
  1839 ;;		wreg
  1840 ;; Tracked objects:
  1841 ;;		On entry : 0/0
  1842 ;;		On exit  : 0/0
  1843 ;;		Unchanged: 0/0
  1844 ;; Data sizes:     COMMON   BANK0   BANK1
  1845 ;;      Params:         0       0       0
  1846 ;;      Locals:         0       0       0
  1847 ;;      Temps:          0       0       0
  1848 ;;      Totals:         0       0       0
  1849 ;;Total ram usage:        0 bytes
  1850 ;; Hardware stack levels used:    1
  1851 ;; Hardware stack levels required when called:    2
  1852 ;; This function calls:
  1853 ;;		Nothing
  1854 ;; This function is called by:
  1855 ;;		_main
  1856 ;; This function uses a non-reentrant model
  1857 ;;
  1858                           
  1859                           
  1860                           ;psect for function _start_RCM
  1861  039A                     _start_RCM:	
  1862                           
  1863                           ;RCM1823.c: 6: CLKRCON = 0b11010000;
  1864                           
  1865                           ;incstack = 0
  1866                           ; Regs used in _start_RCM: [wreg]
  1867  039A  30D0               	movlw	208
  1868  039B  0027               	movlb	7	; select bank7
  1869  039C  009A               	movwf	26	;volatile
  1870  039D  0008               	return
  1871  039E                     __end_of_start_RCM:	
  1872                           
  1873                           	psect	text4
  1874  037C                     __ptext4:	
  1875 ;; *************** function _setup_TMR0 *****************
  1876 ;; Defined at:
  1877 ;;		line 10 in file "TMR0.c"
  1878 ;; Parameters:    Size  Location     Type
  1879 ;;		None
  1880 ;; Auto vars:     Size  Location     Type
  1881 ;;		None
  1882 ;; Return value:  Size  Location     Type
  1883 ;;                  1    wreg      void 
  1884 ;; Registers used:
  1885 ;;		None
  1886 ;; Tracked objects:
  1887 ;;		On entry : 0/0
  1888 ;;		On exit  : 0/0
  1889 ;;		Unchanged: 0/0
  1890 ;; Data sizes:     COMMON   BANK0   BANK1
  1891 ;;      Params:         0       0       0
  1892 ;;      Locals:         0       0       0
  1893 ;;      Temps:          0       0       0
  1894 ;;      Totals:         0       0       0
  1895 ;;Total ram usage:        0 bytes
  1896 ;; Hardware stack levels used:    1
  1897 ;; Hardware stack levels required when called:    2
  1898 ;; This function calls:
  1899 ;;		Nothing
  1900 ;; This function is called by:
  1901 ;;		_main
  1902 ;; This function uses a non-reentrant model
  1903 ;;
  1904                           
  1905                           
  1906                           ;psect for function _setup_TMR0
  1907  037C                     _setup_TMR0:	
  1908                           
  1909                           ;TMR0.c: 13: PS2 = 0; PS1 = 1; PS0 = 0;
  1910                           
  1911                           ;incstack = 0
  1912                           ; Regs used in _setup_TMR0: []
  1913  037C  0021               	movlb	1	; select bank1
  1914  037D  1115               	bcf	21,2	;volatile
  1915  037E  1495               	bsf	21,1	;volatile
  1916  037F  1015               	bcf	21,0	;volatile
  1917                           
  1918                           ;TMR0.c: 16: PSA = 0;
  1919  0380  1195               	bcf	21,3	;volatile
  1920                           
  1921                           ;TMR0.c: 18: TMR0CS = 0;
  1922  0381  1295               	bcf	21,5	;volatile
  1923  0382  0008               	return
  1924  0383                     __end_of_setup_TMR0:	
  1925                           
  1926                           	psect	text5
  1927  0389                     __ptext5:	
  1928 ;; *************** function _setup_ADC *****************
  1929 ;; Defined at:
  1930 ;;		line 3 in file "ADC1823.c"
  1931 ;; Parameters:    Size  Location     Type
  1932 ;;		None
  1933 ;; Auto vars:     Size  Location     Type
  1934 ;;		None
  1935 ;; Return value:  Size  Location     Type
  1936 ;;                  1    wreg      void 
  1937 ;; Registers used:
  1938 ;;		wreg
  1939 ;; Tracked objects:
  1940 ;;		On entry : 0/0
  1941 ;;		On exit  : 0/0
  1942 ;;		Unchanged: 0/0
  1943 ;; Data sizes:     COMMON   BANK0   BANK1
  1944 ;;      Params:         0       0       0
  1945 ;;      Locals:         0       0       0
  1946 ;;      Temps:          0       0       0
  1947 ;;      Totals:         0       0       0
  1948 ;;Total ram usage:        0 bytes
  1949 ;; Hardware stack levels used:    1
  1950 ;; Hardware stack levels required when called:    2
  1951 ;; This function calls:
  1952 ;;		Nothing
  1953 ;; This function is called by:
  1954 ;;		_main
  1955 ;; This function uses a non-reentrant model
  1956 ;;
  1957                           
  1958                           
  1959                           ;psect for function _setup_ADC
  1960  0389                     _setup_ADC:	
  1961                           
  1962                           ;ADC1823.c: 20: ADCON1 = 0b11110000;
  1963                           
  1964                           ;incstack = 0
  1965                           ; Regs used in _setup_ADC: [wreg]
  1966  0389  30F0               	movlw	240
  1967  038A  0021               	movlb	1	; select bank1
  1968  038B  009E               	movwf	30	;volatile
  1969                           
  1970                           ;ADC1823.c: 21: { ADCON0 = 0b00100100;};
  1971  038C  3024               	movlw	36
  1972  038D  009D               	movwf	29	;volatile
  1973  038E  0008               	return
  1974  038F                     __end_of_setup_ADC:	
  1975                           
  1976                           	psect	text6
  1977  0303                     __ptext6:	
  1978 ;; *************** function _mess_handler *****************
  1979 ;; Defined at:
  1980 ;;		line 11 in file "comm.c"
  1981 ;; Parameters:    Size  Location     Type
  1982 ;;		None
  1983 ;; Auto vars:     Size  Location     Type
  1984 ;;		None
  1985 ;; Return value:  Size  Location     Type
  1986 ;;                  1    wreg      void 
  1987 ;; Registers used:
  1988 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1989 ;; Tracked objects:
  1990 ;;		On entry : 0/0
  1991 ;;		On exit  : 0/0
  1992 ;;		Unchanged: 0/0
  1993 ;; Data sizes:     COMMON   BANK0   BANK1
  1994 ;;      Params:         0       0       0
  1995 ;;      Locals:         0       0       0
  1996 ;;      Temps:          0       1       0
  1997 ;;      Totals:         0       1       0
  1998 ;;Total ram usage:        1 bytes
  1999 ;; Hardware stack levels used:    1
  2000 ;; Hardware stack levels required when called:    5
  2001 ;; This function calls:
  2002 ;;		_config_ASIC
  2003 ;;		_lputs_ISR
  2004 ;;		_measure_Impedance
  2005 ;;		_read_ADC_channels
  2006 ;; This function is called by:
  2007 ;;		_main
  2008 ;; This function uses a non-reentrant model
  2009 ;;
  2010                           
  2011                           
  2012                           ;psect for function _mess_handler
  2013  0303                     _mess_handler:	
  2014                           
  2015                           ;comm.c: 16: switch (mess_rec[0]) {
  2016                           
  2017                           ;incstack = 0
  2018                           ; Regs used in _mess_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2019  0303  2B12               	goto	l2101
  2020  0304                     l2091:	
  2021                           ;comm.c: 17: case 't':
  2022                           
  2023                           
  2024                           ;comm.c: 18: lputs_ISR(mess_rec,mess_rec_size);
  2025  0304  0020               	movlb	0	; select bank0
  2026  0305  0841               	movf	_mess_rec_size,w	;volatile
  2027  0306  00ED               	movwf	??_mess_handler
  2028  0307  086D               	movf	??_mess_handler,w
  2029  0308  00CC               	movwf	lputs_ISR@length
  2030  0309  3042               	movlw	(low (_mess_rec| 0))& (0+255)
  2031  030A  226F               	fcall	_lputs_ISR
  2032                           
  2033                           ;comm.c: 19: break;
  2034  030B  0008               	return
  2035  030C                     l2093:	
  2036                           ;comm.c: 21: case 'c':
  2037                           
  2038                           
  2039                           ;comm.c: 22: config_ASIC();
  2040  030C  223E               	fcall	_config_ASIC
  2041                           
  2042                           ;comm.c: 23: break;
  2043  030D  0008               	return
  2044  030E                     l2095:	
  2045                           ;comm.c: 25: case 'm':
  2046                           
  2047                           
  2048                           ;comm.c: 26: read_ADC_channels();
  2049  030E  2205               	fcall	_read_ADC_channels
  2050                           
  2051                           ;comm.c: 27: break;
  2052  030F  0008               	return
  2053  0310                     l2097:	
  2054                           ;comm.c: 29: case 'z':
  2055                           
  2056                           
  2057                           ;comm.c: 30: measure_Impedance();
  2058  0310  2064               	fcall	_measure_Impedance
  2059                           
  2060                           ;comm.c: 35: }
  2061                           
  2062                           ;comm.c: 34: break;
  2063                           
  2064                           ;comm.c: 33: default:
  2065                           
  2066                           ;comm.c: 31: break;
  2067  0311  0008               	return
  2068  0312                     l2101:	
  2069  0312  0020               	movlb	0	; select bank0
  2070  0313  0842               	movf	_mess_rec,w	;volatile
  2071                           
  2072                           ; Switch size 1, requested type "space"
  2073                           ; Number of cases is 4, Range of values is 99 to 122
  2074                           ; switch strategies available:
  2075                           ; Name         Instructions Cycles
  2076                           ; simple_byte           13     7 (average)
  2077                           ; direct_byte           57     9 (fixed)
  2078                           ; jumptable            263     9 (fixed)
  2079                           ;	Chosen strategy is simple_byte
  2080  0314  3A63               	xorlw	99	; case 99
  2081  0315  1903               	skipnz
  2082  0316  2B0C               	goto	l2093
  2083  0317  3A0E               	xorlw	14	; case 109
  2084  0318  1903               	skipnz
  2085  0319  2B0E               	goto	l2095
  2086  031A  3A19               	xorlw	25	; case 116
  2087  031B  1903               	skipnz
  2088  031C  2B04               	goto	l2091
  2089  031D  3A0E               	xorlw	14	; case 122
  2090  031E  1903               	skipnz
  2091  031F  2B10               	goto	l2097
  2092  0320  2B21               	goto	l325
  2093  0321                     l325:	
  2094  0321  0008               	return
  2095  0322                     __end_of_mess_handler:	
  2096                           
  2097                           	psect	text7
  2098  0205                     __ptext7:	
  2099 ;; *************** function _read_ADC_channels *****************
  2100 ;; Defined at:
  2101 ;;		line 68 in file "comm.c"
  2102 ;; Parameters:    Size  Location     Type
  2103 ;;		None
  2104 ;; Auto vars:     Size  Location     Type
  2105 ;;  aux             7    7[BANK0 ] unsigned char [7]
  2106 ;;  value3          2   18[BANK0 ] unsigned short 
  2107 ;;  value2          2   16[BANK0 ] unsigned short 
  2108 ;;  value1          2   14[BANK0 ] unsigned short 
  2109 ;; Return value:  Size  Location     Type
  2110 ;;                  1    wreg      void 
  2111 ;; Registers used:
  2112 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2113 ;; Tracked objects:
  2114 ;;		On entry : 0/0
  2115 ;;		On exit  : 0/0
  2116 ;;		Unchanged: 0/0
  2117 ;; Data sizes:     COMMON   BANK0   BANK1
  2118 ;;      Params:         0       0       0
  2119 ;;      Locals:         0      13       0
  2120 ;;      Temps:          0       1       0
  2121 ;;      Totals:         0      14       0
  2122 ;;Total ram usage:       14 bytes
  2123 ;; Hardware stack levels used:    1
  2124 ;; Hardware stack levels required when called:    4
  2125 ;; This function calls:
  2126 ;;		_ADC_2
  2127 ;;		_ADC_4
  2128 ;;		_ADC_5
  2129 ;;		_lputs_ISR
  2130 ;; This function is called by:
  2131 ;;		_mess_handler
  2132 ;; This function uses a non-reentrant model
  2133 ;;
  2134                           
  2135                           
  2136                           ;psect for function _read_ADC_channels
  2137  0205                     _read_ADC_channels:	
  2138                           
  2139                           ;comm.c: 70: unsigned char aux[7];
  2140                           ;comm.c: 71: unsigned short value1,value2,value3;
  2141                           ;comm.c: 74: value1 = ADC_2();
  2142                           
  2143                           ;incstack = 0
  2144                           ; Regs used in _read_ADC_channels: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2145  0205  22E0               	fcall	_ADC_2
  2146  0206  0020               	movlb	0	; select bank0
  2147  0207  084D               	movf	?_ADC_2+1,w
  2148  0208  00DB               	movwf	read_ADC_channels@value1+1
  2149  0209  084C               	movf	?_ADC_2,w
  2150  020A  00DA               	movwf	read_ADC_channels@value1
  2151                           
  2152                           ;comm.c: 76: value2 = ADC_4();
  2153  020B  22BD               	fcall	_ADC_4
  2154  020C  0020               	movlb	0	; select bank0
  2155  020D  084D               	movf	?_ADC_4+1,w
  2156  020E  00DD               	movwf	read_ADC_channels@value2+1
  2157  020F  084C               	movf	?_ADC_4,w
  2158  0210  00DC               	movwf	read_ADC_channels@value2
  2159                           
  2160                           ;comm.c: 78: value3 = ADC_5();
  2161  0211  229A               	fcall	_ADC_5
  2162  0212  0020               	movlb	0	; select bank0
  2163  0213  084D               	movf	?_ADC_5+1,w
  2164  0214  00DF               	movwf	read_ADC_channels@value3+1
  2165  0215  084C               	movf	?_ADC_5,w
  2166  0216  00DE               	movwf	read_ADC_channels@value3
  2167                           
  2168                           ;comm.c: 79: { ADCON0 = 0b00100100;};
  2169  0217  3024               	movlw	36
  2170  0218  0021               	movlb	1	; select bank1
  2171  0219  009D               	movwf	29	;volatile
  2172                           
  2173                           ;comm.c: 81: aux[0] = 'm';
  2174  021A  306D               	movlw	109
  2175  021B  0020               	movlb	0	; select bank0
  2176  021C  00D2               	movwf	??_read_ADC_channels
  2177  021D  0852               	movf	??_read_ADC_channels,w
  2178  021E  00D3               	movwf	read_ADC_channels@aux
  2179                           
  2180                           ;comm.c: 82: aux[1] = (unsigned char)(value1 & 0xff);
  2181  021F  085A               	movf	read_ADC_channels@value1,w
  2182  0220  00D2               	movwf	??_read_ADC_channels
  2183  0221  0852               	movf	??_read_ADC_channels,w
  2184  0222  00D4               	movwf	read_ADC_channels@aux+1
  2185                           
  2186                           ;comm.c: 83: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  2187  0223  085B               	movf	read_ADC_channels@value1+1,w
  2188  0224  00D2               	movwf	??_read_ADC_channels
  2189  0225  0852               	movf	??_read_ADC_channels,w
  2190  0226  00D5               	movwf	read_ADC_channels@aux+2
  2191                           
  2192                           ;comm.c: 84: aux[3] = (unsigned char)(value2 & 0xff);
  2193  0227  085C               	movf	read_ADC_channels@value2,w
  2194  0228  00D2               	movwf	??_read_ADC_channels
  2195  0229  0852               	movf	??_read_ADC_channels,w
  2196  022A  00D6               	movwf	read_ADC_channels@aux+3
  2197                           
  2198                           ;comm.c: 85: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  2199  022B  085D               	movf	read_ADC_channels@value2+1,w
  2200  022C  00D2               	movwf	??_read_ADC_channels
  2201  022D  0852               	movf	??_read_ADC_channels,w
  2202  022E  00D7               	movwf	read_ADC_channels@aux+4
  2203                           
  2204                           ;comm.c: 86: aux[5] = (unsigned char)(value3 & 0xff);
  2205  022F  085E               	movf	read_ADC_channels@value3,w
  2206  0230  00D2               	movwf	??_read_ADC_channels
  2207  0231  0852               	movf	??_read_ADC_channels,w
  2208  0232  00D8               	movwf	read_ADC_channels@aux+5
  2209                           
  2210                           ;comm.c: 87: aux[6] = (unsigned char)((value3 >> 8) & 0xff);
  2211  0233  085F               	movf	read_ADC_channels@value3+1,w
  2212  0234  00D2               	movwf	??_read_ADC_channels
  2213  0235  0852               	movf	??_read_ADC_channels,w
  2214  0236  00D9               	movwf	read_ADC_channels@aux+6
  2215                           
  2216                           ;comm.c: 89: lputs_ISR(aux,7);
  2217  0237  3007               	movlw	7
  2218  0238  00D2               	movwf	??_read_ADC_channels
  2219  0239  0852               	movf	??_read_ADC_channels,w
  2220  023A  00CC               	movwf	lputs_ISR@length
  2221  023B  3053               	movlw	(low (read_ADC_channels@aux| 0))& (0+255)
  2222  023C  226F               	fcall	_lputs_ISR
  2223  023D  0008               	return
  2224  023E                     __end_of_read_ADC_channels:	
  2225                           
  2226                           	psect	text8
  2227  029A                     __ptext8:	
  2228 ;; *************** function _ADC_5 *****************
  2229 ;; Defined at:
  2230 ;;		line 48 in file "ADC1823.c"
  2231 ;; Parameters:    Size  Location     Type
  2232 ;;		None
  2233 ;; Auto vars:     Size  Location     Type
  2234 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  2235 ;; Return value:  Size  Location     Type
  2236 ;;                  2    0[BANK0 ] unsigned short 
  2237 ;; Registers used:
  2238 ;;		wreg
  2239 ;; Tracked objects:
  2240 ;;		On entry : 0/0
  2241 ;;		On exit  : 0/0
  2242 ;;		Unchanged: 0/0
  2243 ;; Data sizes:     COMMON   BANK0   BANK1
  2244 ;;      Params:         0       2       0
  2245 ;;      Locals:         0       2       0
  2246 ;;      Temps:          0       2       0
  2247 ;;      Totals:         0       6       0
  2248 ;;Total ram usage:        6 bytes
  2249 ;; Hardware stack levels used:    1
  2250 ;; Hardware stack levels required when called:    2
  2251 ;; This function calls:
  2252 ;;		Nothing
  2253 ;; This function is called by:
  2254 ;;		_read_ADC_channels
  2255 ;; This function uses a non-reentrant model
  2256 ;;
  2257                           
  2258                           
  2259                           ;psect for function _ADC_5
  2260  029A                     _ADC_5:	
  2261                           
  2262                           ;ADC1823.c: 50: unsigned short ADC_value;
  2263                           ;ADC1823.c: 52: { ADCON0 = 0b00010101;};
  2264                           
  2265                           ;incstack = 0
  2266                           ; Regs used in _ADC_5: [wreg]
  2267  029A  3015               	movlw	21
  2268  029B  0021               	movlb	1	; select bank1
  2269  029C  009D               	movwf	29	;volatile
  2270                           
  2271                           ;ADC1823.c: 53: __nop();
  2272  029D  0000               	nop
  2273                           
  2274                           ;ADC1823.c: 54: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  2275  029E  0021               	movlb	1	; select bank1
  2276  029F  149D               	bsf	29,1	;volatile
  2277  02A0                     l364:	
  2278  02A0  189D               	btfsc	29,1	;volatile
  2279  02A1  2AA0               	goto	l364
  2280  02A2  081C               	movf	28,w	;volatile
  2281  02A3  0020               	movlb	0	; select bank0
  2282  02A4  00CE               	movwf	??_ADC_5
  2283  02A5  01CF               	clrf	??_ADC_5+1
  2284  02A6  084E               	movf	??_ADC_5,w
  2285  02A7  00D0               	movwf	ADC_5@ADC_value
  2286  02A8  084F               	movf	??_ADC_5+1,w
  2287  02A9  00D1               	movwf	ADC_5@ADC_value+1
  2288  02AA  3008               	movlw	8
  2289  02AB                     u945:	
  2290  02AB  35D0               	lslf	ADC_5@ADC_value,f
  2291  02AC  0DD1               	rlf	ADC_5@ADC_value+1,f
  2292  02AD  0B89               	decfsz	9,f
  2293  02AE  2AAB               	goto	u945
  2294  02AF  0021               	movlb	1	; select bank1
  2295  02B0  081B               	movf	27,w	;volatile
  2296  02B1  0020               	movlb	0	; select bank0
  2297  02B2  00CE               	movwf	??_ADC_5
  2298  02B3  01CF               	clrf	??_ADC_5+1
  2299  02B4  084E               	movf	??_ADC_5,w
  2300  02B5  04D0               	iorwf	ADC_5@ADC_value,f
  2301  02B6  084F               	movf	??_ADC_5+1,w
  2302  02B7  04D1               	iorwf	ADC_5@ADC_value+1,f
  2303                           
  2304                           ;ADC1823.c: 55: return ADC_value;
  2305  02B8  0851               	movf	ADC_5@ADC_value+1,w
  2306  02B9  00CD               	movwf	?_ADC_5+1
  2307  02BA  0850               	movf	ADC_5@ADC_value,w
  2308  02BB  00CC               	movwf	?_ADC_5
  2309  02BC  0008               	return
  2310  02BD                     __end_of_ADC_5:	
  2311                           
  2312                           	psect	text9
  2313  0064                     __ptext9:	
  2314 ;; *************** function _measure_Impedance *****************
  2315 ;; Defined at:
  2316 ;;		line 92 in file "comm.c"
  2317 ;; Parameters:    Size  Location     Type
  2318 ;;		None
  2319 ;; Auto vars:     Size  Location     Type
  2320 ;;  aux            13   10[BANK0 ] unsigned char [13]
  2321 ;;  asic            6   27[BANK0 ] struct .
  2322 ;;  value2          2   25[BANK0 ] unsigned short 
  2323 ;;  value1          2   23[BANK0 ] unsigned short 
  2324 ;;  value3          2    0        unsigned short 
  2325 ;; Return value:  Size  Location     Type
  2326 ;;                  1    wreg      void 
  2327 ;; Registers used:
  2328 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2329 ;; Tracked objects:
  2330 ;;		On entry : 0/0
  2331 ;;		On exit  : 0/0
  2332 ;;		Unchanged: 0/0
  2333 ;; Data sizes:     COMMON   BANK0   BANK1
  2334 ;;      Params:         0       0       0
  2335 ;;      Locals:         0      23       0
  2336 ;;      Temps:          0       1       0
  2337 ;;      Totals:         0      24       0
  2338 ;;Total ram usage:       24 bytes
  2339 ;; Hardware stack levels used:    1
  2340 ;; Hardware stack levels required when called:    4
  2341 ;; This function calls:
  2342 ;;		_ADC_2
  2343 ;;		_ADC_4
  2344 ;;		_VIN_config
  2345 ;;		_lputs_ISR
  2346 ;; This function is called by:
  2347 ;;		_mess_handler
  2348 ;; This function uses a non-reentrant model
  2349 ;;
  2350                           
  2351                           
  2352                           ;psect for function _measure_Impedance
  2353  0064                     _measure_Impedance:	
  2354                           
  2355                           ;comm.c: 94: unsigned char aux[13];
  2356                           ;comm.c: 95: unsigned short value1,value2,value3;
  2357                           ;comm.c: 100: VIN asic;
  2358                           ;comm.c: 104: aux[0] = 'z';
  2359                           
  2360                           ;incstack = 0
  2361                           ; Regs used in _measure_Impedance: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2362  0064  307A               	movlw	122
  2363  0065  0020               	movlb	0	; select bank0
  2364  0066  00D5               	movwf	??_measure_Impedance
  2365  0067  0855               	movf	??_measure_Impedance,w
  2366  0068  00D6               	movwf	measure_Impedance@aux
  2367                           
  2368                           ;comm.c: 116: asic.data[0] = mess_rec[1];
  2369  0069  0843               	movf	_mess_rec+1,w	;volatile
  2370  006A  00D5               	movwf	??_measure_Impedance
  2371  006B  0855               	movf	??_measure_Impedance,w
  2372  006C  00E7               	movwf	measure_Impedance@asic
  2373                           
  2374                           ;comm.c: 117: asic.data[1] = mess_rec[2];
  2375  006D  0844               	movf	_mess_rec+2,w	;volatile
  2376  006E  00D5               	movwf	??_measure_Impedance
  2377  006F  0855               	movf	??_measure_Impedance,w
  2378  0070  00E8               	movwf	measure_Impedance@asic+1
  2379                           
  2380                           ;comm.c: 118: asic.data[2] = mess_rec[3];
  2381  0071  0845               	movf	_mess_rec+3,w	;volatile
  2382  0072  00D5               	movwf	??_measure_Impedance
  2383  0073  0855               	movf	??_measure_Impedance,w
  2384  0074  00E9               	movwf	measure_Impedance@asic+2
  2385                           
  2386                           ;comm.c: 119: asic.data[3] = mess_rec[4];
  2387  0075  0846               	movf	_mess_rec+4,w	;volatile
  2388  0076  00D5               	movwf	??_measure_Impedance
  2389  0077  0855               	movf	??_measure_Impedance,w
  2390  0078  00EA               	movwf	measure_Impedance@asic+3
  2391                           
  2392                           ;comm.c: 120: asic.data[4] = mess_rec[5];
  2393  0079  0847               	movf	_mess_rec+5,w	;volatile
  2394  007A  00D5               	movwf	??_measure_Impedance
  2395  007B  0855               	movf	??_measure_Impedance,w
  2396  007C  00EB               	movwf	measure_Impedance@asic+4
  2397                           
  2398                           ;comm.c: 122: asic.data_bits.CE = 0;
  2399  007D  1367               	bcf	measure_Impedance@asic,6
  2400                           
  2401                           ;comm.c: 123: VIN_config(asic);
  2402  007E  3067               	movlw	low measure_Impedance@asic
  2403  007F  0086               	movwf	6
  2404  0080  3000               	movlw	high measure_Impedance@asic
  2405  0081  0087               	movwf	7
  2406  0082  304C               	movlw	low VIN_config@conf
  2407  0083  0084               	movwf	4
  2408  0084  3000               	movlw	high VIN_config@conf
  2409  0085  0085               	movwf	5
  2410  0086  3F40               	moviw [0]fsr1
  2411  0087  3F80               	movwi [0]fsr0
  2412  0088  3F41               	moviw [1]fsr1
  2413  0089  3F81               	movwi [1]fsr0
  2414  008A  3F42               	moviw [2]fsr1
  2415  008B  3F82               	movwi [2]fsr0
  2416  008C  3F43               	moviw [3]fsr1
  2417  008D  3F83               	movwi [3]fsr0
  2418  008E  3F44               	moviw [4]fsr1
  2419  008F  3F84               	movwi [4]fsr0
  2420  0090  3F45               	moviw [5]fsr1
  2421  0091  3F85               	movwi [5]fsr0
  2422  0092  2133               	fcall	_VIN_config
  2423                           
  2424                           ;comm.c: 126: _delay((unsigned long)((15)*(500000/4000.0)));
  2425  0093  3003               	movlw	3
  2426  0094  0020               	movlb	0	; select bank0
  2427  0095  00D5               	movwf	??_measure_Impedance
  2428  0096  306E               	movlw	110
  2429  0097                     u1007:	
  2430  0097  0B89               	decfsz	9,f
  2431  0098  2897               	goto	u1007
  2432  0099  0BD5               	decfsz	??_measure_Impedance,f
  2433  009A  2897               	goto	u1007
  2434                           
  2435                           ;comm.c: 128: value1 = ADC_2();
  2436  009B  22E0               	fcall	_ADC_2
  2437  009C  0020               	movlb	0	; select bank0
  2438  009D  084D               	movf	?_ADC_2+1,w
  2439  009E  00E4               	movwf	measure_Impedance@value1+1
  2440  009F  084C               	movf	?_ADC_2,w
  2441  00A0  00E3               	movwf	measure_Impedance@value1
  2442                           
  2443                           ;comm.c: 129: value2 = ADC_4();
  2444  00A1  22BD               	fcall	_ADC_4
  2445  00A2  0020               	movlb	0	; select bank0
  2446  00A3  084D               	movf	?_ADC_4+1,w
  2447  00A4  00E6               	movwf	measure_Impedance@value2+1
  2448  00A5  084C               	movf	?_ADC_4,w
  2449  00A6  00E5               	movwf	measure_Impedance@value2
  2450                           
  2451                           ;comm.c: 131: aux[1] = (unsigned char)(value1 & 0xff);
  2452  00A7  0863               	movf	measure_Impedance@value1,w
  2453  00A8  00D5               	movwf	??_measure_Impedance
  2454  00A9  0855               	movf	??_measure_Impedance,w
  2455  00AA  00D7               	movwf	measure_Impedance@aux+1
  2456                           
  2457                           ;comm.c: 132: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  2458  00AB  0864               	movf	measure_Impedance@value1+1,w
  2459  00AC  00D5               	movwf	??_measure_Impedance
  2460  00AD  0855               	movf	??_measure_Impedance,w
  2461  00AE  00D8               	movwf	measure_Impedance@aux+2
  2462                           
  2463                           ;comm.c: 133: aux[3] = (unsigned char)(value2 & 0xff);
  2464  00AF  0865               	movf	measure_Impedance@value2,w
  2465  00B0  00D5               	movwf	??_measure_Impedance
  2466  00B1  0855               	movf	??_measure_Impedance,w
  2467  00B2  00D9               	movwf	measure_Impedance@aux+3
  2468                           
  2469                           ;comm.c: 134: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  2470  00B3  0866               	movf	measure_Impedance@value2+1,w
  2471  00B4  00D5               	movwf	??_measure_Impedance
  2472  00B5  0855               	movf	??_measure_Impedance,w
  2473  00B6  00DA               	movwf	measure_Impedance@aux+4
  2474                           
  2475                           ;comm.c: 137: asic.data_bits.CE = 1;
  2476  00B7  1767               	bsf	measure_Impedance@asic,6
  2477                           
  2478                           ;comm.c: 138: asic.data_bits.IQ = 0;
  2479  00B8  11E8               	bcf	measure_Impedance@asic+1,3
  2480                           
  2481                           ;comm.c: 143: VIN_config(asic);
  2482  00B9  3067               	movlw	low measure_Impedance@asic
  2483  00BA  0086               	movwf	6
  2484  00BB  3000               	movlw	high measure_Impedance@asic
  2485  00BC  0087               	movwf	7
  2486  00BD  304C               	movlw	low VIN_config@conf
  2487  00BE  0084               	movwf	4
  2488  00BF  3000               	movlw	high VIN_config@conf
  2489  00C0  0085               	movwf	5
  2490  00C1  3F40               	moviw [0]fsr1
  2491  00C2  3F80               	movwi [0]fsr0
  2492  00C3  3F41               	moviw [1]fsr1
  2493  00C4  3F81               	movwi [1]fsr0
  2494  00C5  3F42               	moviw [2]fsr1
  2495  00C6  3F82               	movwi [2]fsr0
  2496  00C7  3F43               	moviw [3]fsr1
  2497  00C8  3F83               	movwi [3]fsr0
  2498  00C9  3F44               	moviw [4]fsr1
  2499  00CA  3F84               	movwi [4]fsr0
  2500  00CB  3F45               	moviw [5]fsr1
  2501  00CC  3F85               	movwi [5]fsr0
  2502  00CD  2133               	fcall	_VIN_config
  2503                           
  2504                           ;comm.c: 145: _delay((unsigned long)((15)*(500000/4000.0)));
  2505  00CE  3003               	movlw	3
  2506  00CF  0020               	movlb	0	; select bank0
  2507  00D0  00D5               	movwf	??_measure_Impedance
  2508  00D1  306E               	movlw	110
  2509  00D2                     u1017:	
  2510  00D2  0B89               	decfsz	9,f
  2511  00D3  28D2               	goto	u1017
  2512  00D4  0BD5               	decfsz	??_measure_Impedance,f
  2513  00D5  28D2               	goto	u1017
  2514                           
  2515                           ;comm.c: 147: value1 = ADC_2();
  2516  00D6  22E0               	fcall	_ADC_2
  2517  00D7  0020               	movlb	0	; select bank0
  2518  00D8  084D               	movf	?_ADC_2+1,w
  2519  00D9  00E4               	movwf	measure_Impedance@value1+1
  2520  00DA  084C               	movf	?_ADC_2,w
  2521  00DB  00E3               	movwf	measure_Impedance@value1
  2522                           
  2523                           ;comm.c: 148: value2 = ADC_4();
  2524  00DC  22BD               	fcall	_ADC_4
  2525  00DD  0020               	movlb	0	; select bank0
  2526  00DE  084D               	movf	?_ADC_4+1,w
  2527  00DF  00E6               	movwf	measure_Impedance@value2+1
  2528  00E0  084C               	movf	?_ADC_4,w
  2529  00E1  00E5               	movwf	measure_Impedance@value2
  2530                           
  2531                           ;comm.c: 150: aux[5] = (unsigned char)(value1 & 0xff);
  2532  00E2  0863               	movf	measure_Impedance@value1,w
  2533  00E3  00D5               	movwf	??_measure_Impedance
  2534  00E4  0855               	movf	??_measure_Impedance,w
  2535  00E5  00DB               	movwf	measure_Impedance@aux+5
  2536                           
  2537                           ;comm.c: 151: aux[6] = (unsigned char)((value1 >> 8) & 0xff);
  2538  00E6  0864               	movf	measure_Impedance@value1+1,w
  2539  00E7  00D5               	movwf	??_measure_Impedance
  2540  00E8  0855               	movf	??_measure_Impedance,w
  2541  00E9  00DC               	movwf	measure_Impedance@aux+6
  2542                           
  2543                           ;comm.c: 152: aux[7] = (unsigned char)(value2 & 0xff);
  2544  00EA  0865               	movf	measure_Impedance@value2,w
  2545  00EB  00D5               	movwf	??_measure_Impedance
  2546  00EC  0855               	movf	??_measure_Impedance,w
  2547  00ED  00DD               	movwf	measure_Impedance@aux+7
  2548                           
  2549                           ;comm.c: 153: aux[8] = (unsigned char)((value2 >> 8) & 0xff);
  2550  00EE  0866               	movf	measure_Impedance@value2+1,w
  2551  00EF  00D5               	movwf	??_measure_Impedance
  2552  00F0  0855               	movf	??_measure_Impedance,w
  2553  00F1  00DE               	movwf	measure_Impedance@aux+8
  2554                           
  2555                           ;comm.c: 156: asic.data_bits.IQ = 1;
  2556  00F2  15E8               	bsf	measure_Impedance@asic+1,3
  2557                           
  2558                           ;comm.c: 161: VIN_config(asic);
  2559  00F3  3067               	movlw	low measure_Impedance@asic
  2560  00F4  0086               	movwf	6
  2561  00F5  3000               	movlw	high measure_Impedance@asic
  2562  00F6  0087               	movwf	7
  2563  00F7  304C               	movlw	low VIN_config@conf
  2564  00F8  0084               	movwf	4
  2565  00F9  3000               	movlw	high VIN_config@conf
  2566  00FA  0085               	movwf	5
  2567  00FB  3F40               	moviw [0]fsr1
  2568  00FC  3F80               	movwi [0]fsr0
  2569  00FD  3F41               	moviw [1]fsr1
  2570  00FE  3F81               	movwi [1]fsr0
  2571  00FF  3F42               	moviw [2]fsr1
  2572  0100  3F82               	movwi [2]fsr0
  2573  0101  3F43               	moviw [3]fsr1
  2574  0102  3F83               	movwi [3]fsr0
  2575  0103  3F44               	moviw [4]fsr1
  2576  0104  3F84               	movwi [4]fsr0
  2577  0105  3F45               	moviw [5]fsr1
  2578  0106  3F85               	movwi [5]fsr0
  2579  0107  2133               	fcall	_VIN_config
  2580                           
  2581                           ;comm.c: 163: _delay((unsigned long)((15)*(500000/4000.0)));
  2582  0108  3003               	movlw	3
  2583  0109  0020               	movlb	0	; select bank0
  2584  010A  00D5               	movwf	??_measure_Impedance
  2585  010B  306E               	movlw	110
  2586  010C                     u1027:	
  2587  010C  0B89               	decfsz	9,f
  2588  010D  290C               	goto	u1027
  2589  010E  0BD5               	decfsz	??_measure_Impedance,f
  2590  010F  290C               	goto	u1027
  2591                           
  2592                           ;comm.c: 165: value1 = ADC_2();
  2593  0110  22E0               	fcall	_ADC_2
  2594  0111  0020               	movlb	0	; select bank0
  2595  0112  084D               	movf	?_ADC_2+1,w
  2596  0113  00E4               	movwf	measure_Impedance@value1+1
  2597  0114  084C               	movf	?_ADC_2,w
  2598  0115  00E3               	movwf	measure_Impedance@value1
  2599                           
  2600                           ;comm.c: 166: value2 = ADC_4();
  2601  0116  22BD               	fcall	_ADC_4
  2602  0117  0020               	movlb	0	; select bank0
  2603  0118  084D               	movf	?_ADC_4+1,w
  2604  0119  00E6               	movwf	measure_Impedance@value2+1
  2605  011A  084C               	movf	?_ADC_4,w
  2606  011B  00E5               	movwf	measure_Impedance@value2
  2607                           
  2608                           ;comm.c: 168: aux[9] = (unsigned char)(value1 & 0xff);
  2609  011C  0863               	movf	measure_Impedance@value1,w
  2610  011D  00D5               	movwf	??_measure_Impedance
  2611  011E  0855               	movf	??_measure_Impedance,w
  2612  011F  00DF               	movwf	measure_Impedance@aux+9
  2613                           
  2614                           ;comm.c: 169: aux[10] = (unsigned char)((value1 >> 8) & 0xff);
  2615  0120  0864               	movf	measure_Impedance@value1+1,w
  2616  0121  00D5               	movwf	??_measure_Impedance
  2617  0122  0855               	movf	??_measure_Impedance,w
  2618  0123  00E0               	movwf	measure_Impedance@aux+10
  2619                           
  2620                           ;comm.c: 170: aux[11] = (unsigned char)(value2 & 0xff);
  2621  0124  0865               	movf	measure_Impedance@value2,w
  2622  0125  00D5               	movwf	??_measure_Impedance
  2623  0126  0855               	movf	??_measure_Impedance,w
  2624  0127  00E1               	movwf	measure_Impedance@aux+11
  2625                           
  2626                           ;comm.c: 171: aux[12] = (unsigned char)((value2 >> 8) & 0xff);
  2627  0128  0866               	movf	measure_Impedance@value2+1,w
  2628  0129  00D5               	movwf	??_measure_Impedance
  2629  012A  0855               	movf	??_measure_Impedance,w
  2630  012B  00E2               	movwf	measure_Impedance@aux+12
  2631                           
  2632                           ;comm.c: 174: lputs_ISR(aux,13);
  2633  012C  300D               	movlw	13
  2634  012D  00D5               	movwf	??_measure_Impedance
  2635  012E  0855               	movf	??_measure_Impedance,w
  2636  012F  00CC               	movwf	lputs_ISR@length
  2637  0130  3056               	movlw	(low (measure_Impedance@aux| 0))& (0+255)
  2638  0131  226F               	fcall	_lputs_ISR
  2639  0132  0008               	return
  2640  0133                     __end_of_measure_Impedance:	
  2641                           
  2642                           	psect	text10
  2643  02BD                     __ptext10:	
  2644 ;; *************** function _ADC_4 *****************
  2645 ;; Defined at:
  2646 ;;		line 38 in file "ADC1823.c"
  2647 ;; Parameters:    Size  Location     Type
  2648 ;;		None
  2649 ;; Auto vars:     Size  Location     Type
  2650 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  2651 ;; Return value:  Size  Location     Type
  2652 ;;                  2    0[BANK0 ] unsigned short 
  2653 ;; Registers used:
  2654 ;;		wreg
  2655 ;; Tracked objects:
  2656 ;;		On entry : 0/0
  2657 ;;		On exit  : 0/0
  2658 ;;		Unchanged: 0/0
  2659 ;; Data sizes:     COMMON   BANK0   BANK1
  2660 ;;      Params:         0       2       0
  2661 ;;      Locals:         0       2       0
  2662 ;;      Temps:          0       2       0
  2663 ;;      Totals:         0       6       0
  2664 ;;Total ram usage:        6 bytes
  2665 ;; Hardware stack levels used:    1
  2666 ;; Hardware stack levels required when called:    2
  2667 ;; This function calls:
  2668 ;;		Nothing
  2669 ;; This function is called by:
  2670 ;;		_read_ADC_channels
  2671 ;;		_measure_Impedance
  2672 ;; This function uses a non-reentrant model
  2673 ;;
  2674                           
  2675                           
  2676                           ;psect for function _ADC_4
  2677  02BD                     _ADC_4:	
  2678                           
  2679                           ;ADC1823.c: 40: unsigned short ADC_value;
  2680                           ;ADC1823.c: 42: { ADCON0 = 0b00010001;};
  2681                           
  2682                           ;incstack = 0
  2683                           ; Regs used in _ADC_4: [wreg]
  2684  02BD  3011               	movlw	17
  2685  02BE  0021               	movlb	1	; select bank1
  2686  02BF  009D               	movwf	29	;volatile
  2687                           
  2688                           ;ADC1823.c: 43: __nop();
  2689  02C0  0000               	nop
  2690                           
  2691                           ;ADC1823.c: 44: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  2692  02C1  0021               	movlb	1	; select bank1
  2693  02C2  149D               	bsf	29,1	;volatile
  2694  02C3                     l358:	
  2695  02C3  189D               	btfsc	29,1	;volatile
  2696  02C4  2AC3               	goto	l358
  2697  02C5  081C               	movf	28,w	;volatile
  2698  02C6  0020               	movlb	0	; select bank0
  2699  02C7  00CE               	movwf	??_ADC_4
  2700  02C8  01CF               	clrf	??_ADC_4+1
  2701  02C9  084E               	movf	??_ADC_4,w
  2702  02CA  00D0               	movwf	ADC_4@ADC_value
  2703  02CB  084F               	movf	??_ADC_4+1,w
  2704  02CC  00D1               	movwf	ADC_4@ADC_value+1
  2705  02CD  3008               	movlw	8
  2706  02CE                     u925:	
  2707  02CE  35D0               	lslf	ADC_4@ADC_value,f
  2708  02CF  0DD1               	rlf	ADC_4@ADC_value+1,f
  2709  02D0  0B89               	decfsz	9,f
  2710  02D1  2ACE               	goto	u925
  2711  02D2  0021               	movlb	1	; select bank1
  2712  02D3  081B               	movf	27,w	;volatile
  2713  02D4  0020               	movlb	0	; select bank0
  2714  02D5  00CE               	movwf	??_ADC_4
  2715  02D6  01CF               	clrf	??_ADC_4+1
  2716  02D7  084E               	movf	??_ADC_4,w
  2717  02D8  04D0               	iorwf	ADC_4@ADC_value,f
  2718  02D9  084F               	movf	??_ADC_4+1,w
  2719  02DA  04D1               	iorwf	ADC_4@ADC_value+1,f
  2720                           
  2721                           ;ADC1823.c: 45: return ADC_value;
  2722  02DB  0851               	movf	ADC_4@ADC_value+1,w
  2723  02DC  00CD               	movwf	?_ADC_4+1
  2724  02DD  0850               	movf	ADC_4@ADC_value,w
  2725  02DE  00CC               	movwf	?_ADC_4
  2726  02DF  0008               	return
  2727  02E0                     __end_of_ADC_4:	
  2728                           
  2729                           	psect	text11
  2730  02E0                     __ptext11:	
  2731 ;; *************** function _ADC_2 *****************
  2732 ;; Defined at:
  2733 ;;		line 25 in file "ADC1823.c"
  2734 ;; Parameters:    Size  Location     Type
  2735 ;;		None
  2736 ;; Auto vars:     Size  Location     Type
  2737 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  2738 ;; Return value:  Size  Location     Type
  2739 ;;                  2    0[BANK0 ] unsigned short 
  2740 ;; Registers used:
  2741 ;;		wreg
  2742 ;; Tracked objects:
  2743 ;;		On entry : 0/0
  2744 ;;		On exit  : 0/0
  2745 ;;		Unchanged: 0/0
  2746 ;; Data sizes:     COMMON   BANK0   BANK1
  2747 ;;      Params:         0       2       0
  2748 ;;      Locals:         0       2       0
  2749 ;;      Temps:          0       2       0
  2750 ;;      Totals:         0       6       0
  2751 ;;Total ram usage:        6 bytes
  2752 ;; Hardware stack levels used:    1
  2753 ;; Hardware stack levels required when called:    2
  2754 ;; This function calls:
  2755 ;;		Nothing
  2756 ;; This function is called by:
  2757 ;;		_read_ADC_channels
  2758 ;;		_measure_Impedance
  2759 ;; This function uses a non-reentrant model
  2760 ;;
  2761                           
  2762                           
  2763                           ;psect for function _ADC_2
  2764  02E0                     _ADC_2:	
  2765                           
  2766                           ;ADC1823.c: 27: unsigned short ADC_value;
  2767                           ;ADC1823.c: 29: { ADCON0 = 0b00001001;};
  2768                           
  2769                           ;incstack = 0
  2770                           ; Regs used in _ADC_2: [wreg]
  2771  02E0  3009               	movlw	9
  2772  02E1  0021               	movlb	1	; select bank1
  2773  02E2  009D               	movwf	29	;volatile
  2774                           
  2775                           ;ADC1823.c: 30: __nop();
  2776  02E3  0000               	nop
  2777                           
  2778                           ;ADC1823.c: 34: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  2779  02E4  0021               	movlb	1	; select bank1
  2780  02E5  149D               	bsf	29,1	;volatile
  2781  02E6                     l352:	
  2782  02E6  189D               	btfsc	29,1	;volatile
  2783  02E7  2AE6               	goto	l352
  2784  02E8  081C               	movf	28,w	;volatile
  2785  02E9  0020               	movlb	0	; select bank0
  2786  02EA  00CE               	movwf	??_ADC_2
  2787  02EB  01CF               	clrf	??_ADC_2+1
  2788  02EC  084E               	movf	??_ADC_2,w
  2789  02ED  00D0               	movwf	ADC_2@ADC_value
  2790  02EE  084F               	movf	??_ADC_2+1,w
  2791  02EF  00D1               	movwf	ADC_2@ADC_value+1
  2792  02F0  3008               	movlw	8
  2793  02F1                     u905:	
  2794  02F1  35D0               	lslf	ADC_2@ADC_value,f
  2795  02F2  0DD1               	rlf	ADC_2@ADC_value+1,f
  2796  02F3  0B89               	decfsz	9,f
  2797  02F4  2AF1               	goto	u905
  2798  02F5  0021               	movlb	1	; select bank1
  2799  02F6  081B               	movf	27,w	;volatile
  2800  02F7  0020               	movlb	0	; select bank0
  2801  02F8  00CE               	movwf	??_ADC_2
  2802  02F9  01CF               	clrf	??_ADC_2+1
  2803  02FA  084E               	movf	??_ADC_2,w
  2804  02FB  04D0               	iorwf	ADC_2@ADC_value,f
  2805  02FC  084F               	movf	??_ADC_2+1,w
  2806  02FD  04D1               	iorwf	ADC_2@ADC_value+1,f
  2807                           
  2808                           ;ADC1823.c: 35: return ADC_value;
  2809  02FE  0851               	movf	ADC_2@ADC_value+1,w
  2810  02FF  00CD               	movwf	?_ADC_2+1
  2811  0300  0850               	movf	ADC_2@ADC_value,w
  2812  0301  00CC               	movwf	?_ADC_2
  2813  0302  0008               	return
  2814  0303                     __end_of_ADC_2:	
  2815                           
  2816                           	psect	text12
  2817  023E                     __ptext12:	
  2818 ;; *************** function _config_ASIC *****************
  2819 ;; Defined at:
  2820 ;;		line 38 in file "comm.c"
  2821 ;; Parameters:    Size  Location     Type
  2822 ;;		None
  2823 ;; Auto vars:     Size  Location     Type
  2824 ;;  asic            6   10[BANK0 ] struct .
  2825 ;; Return value:  Size  Location     Type
  2826 ;;                  1    wreg      void 
  2827 ;; Registers used:
  2828 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2829 ;; Tracked objects:
  2830 ;;		On entry : 0/0
  2831 ;;		On exit  : 0/0
  2832 ;;		Unchanged: 0/0
  2833 ;; Data sizes:     COMMON   BANK0   BANK1
  2834 ;;      Params:         0       0       0
  2835 ;;      Locals:         0       6       0
  2836 ;;      Temps:          0       1       0
  2837 ;;      Totals:         0       7       0
  2838 ;;Total ram usage:        7 bytes
  2839 ;; Hardware stack levels used:    1
  2840 ;; Hardware stack levels required when called:    4
  2841 ;; This function calls:
  2842 ;;		_VIN_config
  2843 ;;		_lputs_ISR
  2844 ;; This function is called by:
  2845 ;;		_mess_handler
  2846 ;; This function uses a non-reentrant model
  2847 ;;
  2848                           
  2849                           
  2850                           ;psect for function _config_ASIC
  2851  023E                     _config_ASIC:	
  2852                           
  2853                           ;comm.c: 54: VIN asic;
  2854                           ;comm.c: 56: asic.data[0] = mess_rec[1];
  2855                           
  2856                           ;incstack = 0
  2857                           ; Regs used in _config_ASIC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2858  023E  0020               	movlb	0	; select bank0
  2859  023F  0843               	movf	_mess_rec+1,w	;volatile
  2860  0240  00D5               	movwf	??_config_ASIC
  2861  0241  0855               	movf	??_config_ASIC,w
  2862  0242  00D6               	movwf	config_ASIC@asic
  2863                           
  2864                           ;comm.c: 57: asic.data[1] = mess_rec[2];
  2865  0243  0844               	movf	_mess_rec+2,w	;volatile
  2866  0244  00D5               	movwf	??_config_ASIC
  2867  0245  0855               	movf	??_config_ASIC,w
  2868  0246  00D7               	movwf	config_ASIC@asic+1
  2869                           
  2870                           ;comm.c: 58: asic.data[2] = mess_rec[3];
  2871  0247  0845               	movf	_mess_rec+3,w	;volatile
  2872  0248  00D5               	movwf	??_config_ASIC
  2873  0249  0855               	movf	??_config_ASIC,w
  2874  024A  00D8               	movwf	config_ASIC@asic+2
  2875                           
  2876                           ;comm.c: 59: asic.data[3] = mess_rec[4];
  2877  024B  0846               	movf	_mess_rec+4,w	;volatile
  2878  024C  00D5               	movwf	??_config_ASIC
  2879  024D  0855               	movf	??_config_ASIC,w
  2880  024E  00D9               	movwf	config_ASIC@asic+3
  2881                           
  2882                           ;comm.c: 60: asic.data[4] = mess_rec[5];
  2883  024F  0847               	movf	_mess_rec+5,w	;volatile
  2884  0250  00D5               	movwf	??_config_ASIC
  2885  0251  0855               	movf	??_config_ASIC,w
  2886  0252  00DA               	movwf	config_ASIC@asic+4
  2887                           
  2888                           ;comm.c: 62: lputs_ISR(mess_rec,mess_rec_size);
  2889  0253  0841               	movf	_mess_rec_size,w	;volatile
  2890  0254  00D5               	movwf	??_config_ASIC
  2891  0255  0855               	movf	??_config_ASIC,w
  2892  0256  00CC               	movwf	lputs_ISR@length
  2893  0257  3042               	movlw	(low (_mess_rec| 0))& (0+255)
  2894  0258  226F               	fcall	_lputs_ISR
  2895                           
  2896                           ;comm.c: 64: VIN_config(asic);
  2897  0259  3056               	movlw	low config_ASIC@asic
  2898  025A  0086               	movwf	6
  2899  025B  3000               	movlw	high config_ASIC@asic
  2900  025C  0087               	movwf	7
  2901  025D  304C               	movlw	low VIN_config@conf
  2902  025E  0084               	movwf	4
  2903  025F  3000               	movlw	high VIN_config@conf
  2904  0260  0085               	movwf	5
  2905  0261  3F40               	moviw [0]fsr1
  2906  0262  3F80               	movwi [0]fsr0
  2907  0263  3F41               	moviw [1]fsr1
  2908  0264  3F81               	movwi [1]fsr0
  2909  0265  3F42               	moviw [2]fsr1
  2910  0266  3F82               	movwi [2]fsr0
  2911  0267  3F43               	moviw [3]fsr1
  2912  0268  3F83               	movwi [3]fsr0
  2913  0269  3F44               	moviw [4]fsr1
  2914  026A  3F84               	movwi [4]fsr0
  2915  026B  3F45               	moviw [5]fsr1
  2916  026C  3F85               	movwi [5]fsr0
  2917  026D  2133               	fcall	_VIN_config
  2918  026E  0008               	return
  2919  026F                     __end_of_config_ASIC:	
  2920                           
  2921                           	psect	text13
  2922  026F                     __ptext13:	
  2923 ;; *************** function _lputs_ISR *****************
  2924 ;; Defined at:
  2925 ;;		line 131 in file "USART1823.c"
  2926 ;; Parameters:    Size  Location     Type
  2927 ;;  data            1    wreg     PTR unsigned char 
  2928 ;;		 -> measure_Impedance@aux(13), read_ADC_channels@aux(7), mess_rec(10), 
  2929 ;;  length          1    0[BANK0 ] unsigned char 
  2930 ;; Auto vars:     Size  Location     Type
  2931 ;;  data            1    3[BANK0 ] PTR unsigned char 
  2932 ;;		 -> measure_Impedance@aux(13), read_ADC_channels@aux(7), mess_rec(10), 
  2933 ;;  i               1    4[BANK0 ] unsigned char 
  2934 ;; Return value:  Size  Location     Type
  2935 ;;                  1    wreg      void 
  2936 ;; Registers used:
  2937 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2938 ;; Tracked objects:
  2939 ;;		On entry : 0/0
  2940 ;;		On exit  : 0/0
  2941 ;;		Unchanged: 0/0
  2942 ;; Data sizes:     COMMON   BANK0   BANK1
  2943 ;;      Params:         0       1       0
  2944 ;;      Locals:         0       2       0
  2945 ;;      Temps:          0       2       0
  2946 ;;      Totals:         0       5       0
  2947 ;;Total ram usage:        5 bytes
  2948 ;; Hardware stack levels used:    1
  2949 ;; Hardware stack levels required when called:    3
  2950 ;; This function calls:
  2951 ;;		_close_RX_USART
  2952 ;; This function is called by:
  2953 ;;		_mess_handler
  2954 ;;		_config_ASIC
  2955 ;;		_read_ADC_channels
  2956 ;;		_measure_Impedance
  2957 ;; This function uses a non-reentrant model
  2958 ;;
  2959                           
  2960                           
  2961                           ;psect for function _lputs_ISR
  2962  026F                     _lputs_ISR:	
  2963                           
  2964                           ;incstack = 0
  2965                           ; Regs used in _lputs_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2966                           ;lputs_ISR@data stored from wreg
  2967  026F  0020               	movlb	0	; select bank0
  2968  0270  00CF               	movwf	lputs_ISR@data
  2969                           
  2970                           ;USART1823.c: 133: unsigned char i;
  2971                           ;USART1823.c: 135: if (USART_tx_flag == 1)
  2972  0271  0372               	decf	_USART_tx_flag,w	;volatile
  2973  0272  1903               	btfsc	3,2
  2974  0273  0008               	return
  2975                           
  2976                           ;USART1823.c: 138: for (i = 0; i < length; i++)
  2977                           
  2978                           ;USART1823.c: 136: return;
  2979  0274  01D0               	clrf	lputs_ISR@i
  2980  0275                     l1891:	
  2981  0275  084C               	movf	lputs_ISR@length,w
  2982  0276  0250               	subwf	lputs_ISR@i,w
  2983  0277  1803               	btfsc	3,0
  2984  0278  2A8C               	goto	l1893
  2985                           
  2986                           ;USART1823.c: 139: USART_tx_data[i] = data[i];
  2987  0279  0850               	movf	lputs_ISR@i,w
  2988  027A  074F               	addwf	lputs_ISR@data,w
  2989  027B  00CD               	movwf	??_lputs_ISR
  2990  027C  084D               	movf	??_lputs_ISR,w
  2991  027D  0086               	movwf	6
  2992  027E  0187               	clrf	7
  2993  027F  0801               	movf	1,w
  2994  0280  00CE               	movwf	??_lputs_ISR+1
  2995  0281  0850               	movf	lputs_ISR@i,w
  2996  0282  3E2F               	addlw	(low (_USART_tx_data| 0))& (0+255)
  2997  0283  0086               	movwf	6
  2998  0284  0187               	clrf	7
  2999  0285  084E               	movf	??_lputs_ISR+1,w
  3000  0286  0081               	movwf	1
  3001  0287  3001               	movlw	1
  3002  0288  00CD               	movwf	??_lputs_ISR
  3003  0289  084D               	movf	??_lputs_ISR,w
  3004  028A  07D0               	addwf	lputs_ISR@i,f
  3005  028B  2A75               	goto	l1891
  3006  028C                     l1893:	
  3007                           
  3008                           ;USART1823.c: 141: close_RX_USART();
  3009  028C  2395               	fcall	_close_RX_USART
  3010                           
  3011                           ;USART1823.c: 143: USART_tx_index = 0;
  3012  028D  01F3               	clrf	_USART_tx_index	;volatile
  3013                           
  3014                           ;USART1823.c: 144: USART_tx_length = length;
  3015  028E  0020               	movlb	0	; select bank0
  3016  028F  084C               	movf	lputs_ISR@length,w
  3017  0290  00CD               	movwf	??_lputs_ISR
  3018  0291  084D               	movf	??_lputs_ISR,w
  3019  0292  00F4               	movwf	_USART_tx_length	;volatile
  3020                           
  3021                           ;USART1823.c: 146: USART_tx_flag = 1;
  3022  0293  3001               	movlw	1
  3023  0294  00CD               	movwf	??_lputs_ISR
  3024  0295  084D               	movf	??_lputs_ISR,w
  3025  0296  00F2               	movwf	_USART_tx_flag	;volatile
  3026                           
  3027                           ;USART1823.c: 147: TXIE = 1;
  3028  0297  0021               	movlb	1	; select bank1
  3029  0298  1611               	bsf	17,4	;volatile
  3030  0299  0008               	return
  3031  029A                     __end_of_lputs_ISR:	
  3032                           
  3033                           	psect	text14
  3034  0395                     __ptext14:	
  3035 ;; *************** function _close_RX_USART *****************
  3036 ;; Defined at:
  3037 ;;		line 35 in file "USART1823.c"
  3038 ;; Parameters:    Size  Location     Type
  3039 ;;		None
  3040 ;; Auto vars:     Size  Location     Type
  3041 ;;		None
  3042 ;; Return value:  Size  Location     Type
  3043 ;;                  1    wreg      void 
  3044 ;; Registers used:
  3045 ;;		None
  3046 ;; Tracked objects:
  3047 ;;		On entry : 0/0
  3048 ;;		On exit  : 0/0
  3049 ;;		Unchanged: 0/0
  3050 ;; Data sizes:     COMMON   BANK0   BANK1
  3051 ;;      Params:         0       0       0
  3052 ;;      Locals:         0       0       0
  3053 ;;      Temps:          0       0       0
  3054 ;;      Totals:         0       0       0
  3055 ;;Total ram usage:        0 bytes
  3056 ;; Hardware stack levels used:    1
  3057 ;; Hardware stack levels required when called:    2
  3058 ;; This function calls:
  3059 ;;		Nothing
  3060 ;; This function is called by:
  3061 ;;		_lputs_ISR
  3062 ;; This function uses a non-reentrant model
  3063 ;;
  3064                           
  3065                           
  3066                           ;psect for function _close_RX_USART
  3067  0395                     _close_RX_USART:	
  3068                           
  3069                           ;USART1823.c: 39: RCIE = 0;
  3070                           
  3071                           ;incstack = 0
  3072                           ; Regs used in _close_RX_USART: []
  3073  0395  0021               	movlb	1	; select bank1
  3074  0396  1291               	bcf	17,5	;volatile
  3075                           
  3076                           ;USART1823.c: 40: CREN = 0;
  3077  0397  0023               	movlb	3	; select bank3
  3078  0398  121D               	bcf	29,4	;volatile
  3079  0399  0008               	return
  3080  039A                     __end_of_close_RX_USART:	
  3081                           
  3082                           	psect	text15
  3083  0133                     __ptext15:	
  3084 ;; *************** function _VIN_config *****************
  3085 ;; Defined at:
  3086 ;;		line 68 in file "bio3.c"
  3087 ;; Parameters:    Size  Location     Type
  3088 ;;  conf            6    0[BANK0 ] struct .
  3089 ;; Auto vars:     Size  Location     Type
  3090 ;;  out             1    8[BANK0 ] unsigned char 
  3091 ;;  i               1    7[BANK0 ] unsigned char 
  3092 ;;  j               1    0        unsigned char 
  3093 ;; Return value:  Size  Location     Type
  3094 ;;                  1    wreg      void 
  3095 ;; Registers used:
  3096 ;;		wreg, status,2, status,0
  3097 ;; Tracked objects:
  3098 ;;		On entry : 0/0
  3099 ;;		On exit  : 0/0
  3100 ;;		Unchanged: 0/0
  3101 ;; Data sizes:     COMMON   BANK0   BANK1
  3102 ;;      Params:         0       6       0
  3103 ;;      Locals:         0       2       0
  3104 ;;      Temps:          0       1       0
  3105 ;;      Totals:         0       9       0
  3106 ;;Total ram usage:        9 bytes
  3107 ;; Hardware stack levels used:    1
  3108 ;; Hardware stack levels required when called:    2
  3109 ;; This function calls:
  3110 ;;		Nothing
  3111 ;; This function is called by:
  3112 ;;		_config_ASIC
  3113 ;;		_measure_Impedance
  3114 ;; This function uses a non-reentrant model
  3115 ;;
  3116                           
  3117                           
  3118                           ;psect for function _VIN_config
  3119  0133                     _VIN_config:	
  3120                           
  3121                           ;bio3.c: 71: unsigned char i,j,out;
  3122                           ;bio3.c: 73: out &= 0b11110111; PORTC = out;;
  3123                           
  3124                           ;incstack = 0
  3125                           ; Regs used in _VIN_config: [wreg+status,2+status,0]
  3126  0133  30F7               	movlw	247
  3127  0134  0020               	movlb	0	; select bank0
  3128  0135  00D2               	movwf	??_VIN_config
  3129  0136  0852               	movf	??_VIN_config,w
  3130  0137  05D4               	andwf	VIN_config@out,f
  3131  0138  0854               	movf	VIN_config@out,w
  3132  0139  008E               	movwf	14	;volatile
  3133                           
  3134                           ;bio3.c: 74: _delay((unsigned long)((100)*(500000/4000000.0)));
  3135  013A  3004               	movlw	4
  3136  013B                     u1037:	
  3137  013B  0B89               	decfsz	9,f
  3138  013C  293B               	goto	u1037
  3139                           
  3140                           ;bio3.c: 76: RA5 = 0;;
  3141  013D  0020               	movlb	0	; select bank0
  3142  013E  128C               	bcf	12,5	;volatile
  3143                           
  3144                           ;bio3.c: 77: _delay((unsigned long)((100)*(500000/4000000.0)));
  3145  013F  3004               	movlw	4
  3146  0140                     u1047:	
  3147  0140  0B89               	decfsz	9,f
  3148  0141  2940               	goto	u1047
  3149                           
  3150                           ;bio3.c: 79: RA5 = 1;;
  3151  0142  0020               	movlb	0	; select bank0
  3152  0143  168C               	bsf	12,5	;volatile
  3153                           
  3154                           ;bio3.c: 81: for(i = 0; i < 16; i++) {
  3155  0144  01D3               	clrf	VIN_config@i
  3156  0145  3010               	movlw	16
  3157  0146  0253               	subwf	VIN_config@i,w
  3158  0147  1803               	btfsc	3,0
  3159  0148  2971               	goto	l1835
  3160  0149                     l142:	
  3161                           
  3162                           ;bio3.c: 82: if (conf.datas[0] & 0x0001) {
  3163  0149  1C4C               	btfss	VIN_config@conf,0
  3164  014A  294D               	goto	l1821
  3165                           
  3166                           ;bio3.c: 83: out |= 0b00000100; PORTC = out;;
  3167  014B  1554               	bsf	VIN_config@out,2
  3168  014C  2951               	goto	l1823
  3169  014D                     l1821:	
  3170                           ;bio3.c: 84: } else {
  3171                           
  3172                           
  3173                           ;bio3.c: 85: out &= 0b11111011; PORTC = out;;
  3174  014D  30FB               	movlw	251
  3175  014E  00D2               	movwf	??_VIN_config
  3176  014F  0852               	movf	??_VIN_config,w
  3177  0150  05D4               	andwf	VIN_config@out,f
  3178  0151                     l1823:	
  3179  0151  0854               	movf	VIN_config@out,w
  3180  0152  008E               	movwf	14	;volatile
  3181                           
  3182                           ;bio3.c: 86: }
  3183                           ;bio3.c: 87: conf.datas[0] >>= 1;
  3184  0153  3001               	movlw	1
  3185  0154                     u775:	
  3186  0154  36CD               	lsrf	VIN_config@conf+1,f
  3187  0155  0CCC               	rrf	VIN_config@conf,f
  3188  0156  0B89               	decfsz	9,f
  3189  0157  2954               	goto	u775
  3190                           
  3191                           ;bio3.c: 89: _delay((unsigned long)((100)*(500000/4000000.0)));
  3192  0158  3004               	movlw	4
  3193  0159                     u1057:	
  3194  0159  0B89               	decfsz	9,f
  3195  015A  2959               	goto	u1057
  3196                           
  3197                           ;bio3.c: 91: out |= 0b00001000; PORTC = out;;
  3198  015B  0020               	movlb	0	; select bank0
  3199  015C  15D4               	bsf	VIN_config@out,3
  3200  015D  0854               	movf	VIN_config@out,w
  3201  015E  008E               	movwf	14	;volatile
  3202                           
  3203                           ;bio3.c: 92: _delay((unsigned long)((100)*(500000/4000000.0)));
  3204  015F  3004               	movlw	4
  3205  0160                     u1067:	
  3206  0160  0B89               	decfsz	9,f
  3207  0161  2960               	goto	u1067
  3208                           
  3209                           ;bio3.c: 93: out &= 0b11110111; PORTC = out;;
  3210  0162  30F7               	movlw	247
  3211  0163  0020               	movlb	0	; select bank0
  3212  0164  00D2               	movwf	??_VIN_config
  3213  0165  0852               	movf	??_VIN_config,w
  3214  0166  05D4               	andwf	VIN_config@out,f
  3215  0167  0854               	movf	VIN_config@out,w
  3216  0168  008E               	movwf	14	;volatile
  3217  0169  3001               	movlw	1
  3218  016A  00D2               	movwf	??_VIN_config
  3219  016B  0852               	movf	??_VIN_config,w
  3220  016C  07D3               	addwf	VIN_config@i,f
  3221  016D  3010               	movlw	16
  3222  016E  0253               	subwf	VIN_config@i,w
  3223  016F  1C03               	skipc
  3224  0170  2949               	goto	l142
  3225  0171                     l1835:	
  3226                           
  3227                           ;bio3.c: 94: }
  3228                           ;bio3.c: 96: for(i = 0; i < 16; i++) {
  3229  0171  01D3               	clrf	VIN_config@i
  3230  0172  3010               	movlw	16
  3231  0173  0253               	subwf	VIN_config@i,w
  3232  0174  1803               	btfsc	3,0
  3233  0175  299E               	goto	l1859
  3234  0176                     l146:	
  3235                           
  3236                           ;bio3.c: 97: if (conf.datas[1] & 0x0001) {
  3237  0176  1C4E               	btfss	VIN_config@conf+2,0
  3238  0177  297A               	goto	l1845
  3239                           
  3240                           ;bio3.c: 98: out |= 0b00000100; PORTC = out;;
  3241  0178  1554               	bsf	VIN_config@out,2
  3242  0179  297E               	goto	l1847
  3243  017A                     l1845:	
  3244                           ;bio3.c: 99: } else {
  3245                           
  3246                           
  3247                           ;bio3.c: 100: out &= 0b11111011; PORTC = out;;
  3248  017A  30FB               	movlw	251
  3249  017B  00D2               	movwf	??_VIN_config
  3250  017C  0852               	movf	??_VIN_config,w
  3251  017D  05D4               	andwf	VIN_config@out,f
  3252  017E                     l1847:	
  3253  017E  0854               	movf	VIN_config@out,w
  3254  017F  008E               	movwf	14	;volatile
  3255                           
  3256                           ;bio3.c: 101: }
  3257                           ;bio3.c: 102: conf.datas[1] >>= 1;
  3258  0180  3001               	movlw	1
  3259  0181                     u815:	
  3260  0181  36CF               	lsrf	VIN_config@conf+3,f
  3261  0182  0CCE               	rrf	VIN_config@conf+2,f
  3262  0183  0B89               	decfsz	9,f
  3263  0184  2981               	goto	u815
  3264                           
  3265                           ;bio3.c: 104: _delay((unsigned long)((100)*(500000/4000000.0)));
  3266  0185  3004               	movlw	4
  3267  0186                     u1077:	
  3268  0186  0B89               	decfsz	9,f
  3269  0187  2986               	goto	u1077
  3270                           
  3271                           ;bio3.c: 106: out |= 0b00001000; PORTC = out;;
  3272  0188  0020               	movlb	0	; select bank0
  3273  0189  15D4               	bsf	VIN_config@out,3
  3274  018A  0854               	movf	VIN_config@out,w
  3275  018B  008E               	movwf	14	;volatile
  3276                           
  3277                           ;bio3.c: 107: _delay((unsigned long)((100)*(500000/4000000.0)));
  3278  018C  3004               	movlw	4
  3279  018D                     u1087:	
  3280  018D  0B89               	decfsz	9,f
  3281  018E  298D               	goto	u1087
  3282                           
  3283                           ;bio3.c: 108: out &= 0b11110111; PORTC = out;;
  3284  018F  30F7               	movlw	247
  3285  0190  0020               	movlb	0	; select bank0
  3286  0191  00D2               	movwf	??_VIN_config
  3287  0192  0852               	movf	??_VIN_config,w
  3288  0193  05D4               	andwf	VIN_config@out,f
  3289  0194  0854               	movf	VIN_config@out,w
  3290  0195  008E               	movwf	14	;volatile
  3291  0196  3001               	movlw	1
  3292  0197  00D2               	movwf	??_VIN_config
  3293  0198  0852               	movf	??_VIN_config,w
  3294  0199  07D3               	addwf	VIN_config@i,f
  3295  019A  3010               	movlw	16
  3296  019B  0253               	subwf	VIN_config@i,w
  3297  019C  1C03               	skipc
  3298  019D  2976               	goto	l146
  3299  019E                     l1859:	
  3300                           
  3301                           ;bio3.c: 109: }
  3302                           ;bio3.c: 111: for(i = 0; i < 1; i++) {
  3303  019E  01D3               	clrf	VIN_config@i
  3304  019F                     L1:	
  3305  019F  0853               	movf	VIN_config@i,w
  3306  01A0  1D03               	btfss	3,2
  3307  01A1  0008               	return
  3308                           
  3309                           ;bio3.c: 112: if (conf.datas[2] & 0x0001) {
  3310  01A2  1C50               	btfss	VIN_config@conf+4,0
  3311  01A3  29A6               	goto	l1869
  3312                           
  3313                           ;bio3.c: 113: out |= 0b00000100; PORTC = out;;
  3314  01A4  1554               	bsf	VIN_config@out,2
  3315  01A5  29AA               	goto	l1871
  3316  01A6                     l1869:	
  3317                           ;bio3.c: 114: } else {
  3318                           
  3319                           
  3320                           ;bio3.c: 115: out &= 0b11111011; PORTC = out;;
  3321  01A6  30FB               	movlw	251
  3322  01A7  00D2               	movwf	??_VIN_config
  3323  01A8  0852               	movf	??_VIN_config,w
  3324  01A9  05D4               	andwf	VIN_config@out,f
  3325  01AA                     l1871:	
  3326  01AA  0854               	movf	VIN_config@out,w
  3327  01AB  008E               	movwf	14	;volatile
  3328                           
  3329                           ;bio3.c: 116: }
  3330                           ;bio3.c: 117: conf.datas[2] >>= 1;
  3331  01AC  3001               	movlw	1
  3332  01AD                     u855:	
  3333  01AD  36D1               	lsrf	VIN_config@conf+5,f
  3334  01AE  0CD0               	rrf	VIN_config@conf+4,f
  3335  01AF  0B89               	decfsz	9,f
  3336  01B0  29AD               	goto	u855
  3337                           
  3338                           ;bio3.c: 119: _delay((unsigned long)((100)*(500000/4000000.0)));
  3339  01B1  3004               	movlw	4
  3340  01B2                     u1097:	
  3341  01B2  0B89               	decfsz	9,f
  3342  01B3  29B2               	goto	u1097
  3343                           
  3344                           ;bio3.c: 121: out |= 0b00001000; PORTC = out;;
  3345  01B4  0020               	movlb	0	; select bank0
  3346  01B5  15D4               	bsf	VIN_config@out,3
  3347  01B6  0854               	movf	VIN_config@out,w
  3348  01B7  008E               	movwf	14	;volatile
  3349                           
  3350                           ;bio3.c: 122: _delay((unsigned long)((100)*(500000/4000000.0)));
  3351  01B8  3004               	movlw	4
  3352  01B9                     u1107:	
  3353  01B9  0B89               	decfsz	9,f
  3354  01BA  29B9               	goto	u1107
  3355                           
  3356                           ;bio3.c: 123: out &= 0b11110111; PORTC = out;;
  3357  01BB  30F7               	movlw	247
  3358  01BC  0020               	movlb	0	; select bank0
  3359  01BD  00D2               	movwf	??_VIN_config
  3360  01BE  0852               	movf	??_VIN_config,w
  3361  01BF  05D4               	andwf	VIN_config@out,f
  3362  01C0  0854               	movf	VIN_config@out,w
  3363  01C1  008E               	movwf	14	;volatile
  3364  01C2  3001               	movlw	1
  3365  01C3  00D2               	movwf	??_VIN_config
  3366  01C4  0852               	movf	??_VIN_config,w
  3367  01C5  07D3               	addwf	VIN_config@i,f
  3368  01C6  299F               	goto	L1
  3369  01C7                     __end_of_VIN_config:	
  3370                           
  3371                           	psect	text16
  3372  039E                     __ptext16:	
  3373 ;; *************** function _SYSTEM_Initialize *****************
  3374 ;; Defined at:
  3375 ;;		line 70 in file "mcc_generated_files/mcc.c"
  3376 ;; Parameters:    Size  Location     Type
  3377 ;;		None
  3378 ;; Auto vars:     Size  Location     Type
  3379 ;;		None
  3380 ;; Return value:  Size  Location     Type
  3381 ;;                  1    wreg      void 
  3382 ;; Registers used:
  3383 ;;		wreg, status,2, status,0, pclath, cstack
  3384 ;; Tracked objects:
  3385 ;;		On entry : 0/0
  3386 ;;		On exit  : 0/0
  3387 ;;		Unchanged: 0/0
  3388 ;; Data sizes:     COMMON   BANK0   BANK1
  3389 ;;      Params:         0       0       0
  3390 ;;      Locals:         0       0       0
  3391 ;;      Temps:          0       0       0
  3392 ;;      Totals:         0       0       0
  3393 ;;Total ram usage:        0 bytes
  3394 ;; Hardware stack levels used:    1
  3395 ;; Hardware stack levels required when called:    3
  3396 ;; This function calls:
  3397 ;;		_OSCILLATOR_Initialize
  3398 ;;		_PIN_MANAGER_Initialize
  3399 ;; This function is called by:
  3400 ;;		_main
  3401 ;; This function uses a non-reentrant model
  3402 ;;
  3403                           
  3404                           
  3405                           ;psect for function _SYSTEM_Initialize
  3406  039E                     _SYSTEM_Initialize:	
  3407                           
  3408                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  3409                           
  3410                           ;incstack = 0
  3411                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3412  039E  2322               	fcall	_PIN_MANAGER_Initialize
  3413                           
  3414                           ;mcc.c: 74: OSCILLATOR_Initialize();
  3415  039F  238F               	fcall	_OSCILLATOR_Initialize
  3416  03A0  0008               	return
  3417  03A1                     __end_of_SYSTEM_Initialize:	
  3418                           
  3419                           	psect	text17
  3420  0322                     __ptext17:	
  3421 ;; *************** function _PIN_MANAGER_Initialize *****************
  3422 ;; Defined at:
  3423 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  3424 ;; Parameters:    Size  Location     Type
  3425 ;;		None
  3426 ;; Auto vars:     Size  Location     Type
  3427 ;;		None
  3428 ;; Return value:  Size  Location     Type
  3429 ;;                  1    wreg      void 
  3430 ;; Registers used:
  3431 ;;		wreg, status,2
  3432 ;; Tracked objects:
  3433 ;;		On entry : 0/0
  3434 ;;		On exit  : 0/0
  3435 ;;		Unchanged: 0/0
  3436 ;; Data sizes:     COMMON   BANK0   BANK1
  3437 ;;      Params:         0       0       0
  3438 ;;      Locals:         0       0       0
  3439 ;;      Temps:          0       0       0
  3440 ;;      Totals:         0       0       0
  3441 ;;Total ram usage:        0 bytes
  3442 ;; Hardware stack levels used:    1
  3443 ;; Hardware stack levels required when called:    2
  3444 ;; This function calls:
  3445 ;;		Nothing
  3446 ;; This function is called by:
  3447 ;;		_SYSTEM_Initialize
  3448 ;; This function uses a non-reentrant model
  3449 ;;
  3450                           
  3451                           
  3452                           ;psect for function _PIN_MANAGER_Initialize
  3453  0322                     _PIN_MANAGER_Initialize:	
  3454                           
  3455                           ;pin_manager.c: 51: LATA = 0x0;
  3456                           
  3457                           ;incstack = 0
  3458                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3459  0322  0022               	movlb	2	; select bank2
  3460  0323  018C               	clrf	12	;volatile
  3461                           
  3462                           ;pin_manager.c: 52: LATC = 0x0;
  3463  0324  018E               	clrf	14	;volatile
  3464                           
  3465                           ;pin_manager.c: 55: ANSELA = 0b00000100;
  3466  0325  3004               	movlw	4
  3467  0326  0023               	movlb	3	; select bank3
  3468  0327  008C               	movwf	12	;volatile
  3469                           
  3470                           ;pin_manager.c: 56: ANSELC = 0b00000011;
  3471  0328  3003               	movlw	3
  3472  0329  008E               	movwf	14	;volatile
  3473                           
  3474                           ;pin_manager.c: 59: WPUA = 0x3B;
  3475  032A  303B               	movlw	59
  3476  032B  0024               	movlb	4	; select bank4
  3477  032C  008C               	movwf	12	;volatile
  3478                           
  3479                           ;pin_manager.c: 60: WPUC = 0x3C;
  3480  032D  303C               	movlw	60
  3481  032E  008E               	movwf	14	;volatile
  3482                           
  3483                           ;pin_manager.c: 62: RXDTSEL = 0;
  3484  032F  0022               	movlb	2	; select bank2
  3485  0330  139D               	bcf	29,7	;volatile
  3486                           
  3487                           ;pin_manager.c: 63: TXCKSEL = 0;
  3488  0331  111D               	bcf	29,2	;volatile
  3489                           
  3490                           ;pin_manager.c: 66: TRISC = 0b01100011;
  3491  0332  3063               	movlw	99
  3492  0333  0021               	movlb	1	; select bank1
  3493  0334  008E               	movwf	14	;volatile
  3494                           
  3495                           ;pin_manager.c: 67: TRISA = 0b01011111;
  3496  0335  305F               	movlw	95
  3497  0336  008C               	movwf	12	;volatile
  3498                           
  3499                           ;pin_manager.c: 69: OPTION_REGbits.nWPUEN = 0x0;
  3500  0337  1395               	bcf	21,7	;volatile
  3501                           
  3502                           ;pin_manager.c: 70: APFCON = 0x00;
  3503  0338  0022               	movlb	2	; select bank2
  3504  0339  019D               	clrf	29	;volatile
  3505  033A  0008               	return
  3506  033B                     __end_of_PIN_MANAGER_Initialize:	
  3507                           
  3508                           	psect	text18
  3509  038F                     __ptext18:	
  3510 ;; *************** function _OSCILLATOR_Initialize *****************
  3511 ;; Defined at:
  3512 ;;		line 78 in file "mcc_generated_files/mcc.c"
  3513 ;; Parameters:    Size  Location     Type
  3514 ;;		None
  3515 ;; Auto vars:     Size  Location     Type
  3516 ;;		None
  3517 ;; Return value:  Size  Location     Type
  3518 ;;                  1    wreg      void 
  3519 ;; Registers used:
  3520 ;;		wreg, status,2
  3521 ;; Tracked objects:
  3522 ;;		On entry : 0/0
  3523 ;;		On exit  : 0/0
  3524 ;;		Unchanged: 0/0
  3525 ;; Data sizes:     COMMON   BANK0   BANK1
  3526 ;;      Params:         0       0       0
  3527 ;;      Locals:         0       0       0
  3528 ;;      Temps:          0       0       0
  3529 ;;      Totals:         0       0       0
  3530 ;;Total ram usage:        0 bytes
  3531 ;; Hardware stack levels used:    1
  3532 ;; Hardware stack levels required when called:    2
  3533 ;; This function calls:
  3534 ;;		Nothing
  3535 ;; This function is called by:
  3536 ;;		_SYSTEM_Initialize
  3537 ;; This function uses a non-reentrant model
  3538 ;;
  3539                           
  3540                           
  3541                           ;psect for function _OSCILLATOR_Initialize
  3542  038F                     _OSCILLATOR_Initialize:	
  3543                           
  3544                           ;mcc.c: 81: OSCCON = 0x3A;
  3545                           
  3546                           ;incstack = 0
  3547                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3548  038F  303A               	movlw	58
  3549  0390  0021               	movlb	1	; select bank1
  3550  0391  0099               	movwf	25	;volatile
  3551                           
  3552                           ;mcc.c: 83: OSCSTAT = 0x00;
  3553  0392  019A               	clrf	26	;volatile
  3554                           
  3555                           ;mcc.c: 85: OSCTUNE = 0x00;
  3556  0393  0198               	clrf	24	;volatile
  3557  0394  0008               	return
  3558  0395                     __end_of_OSCILLATOR_Initialize:	
  3559                           
  3560                           	psect	intentry
  3561  0004                     __pintentry:	
  3562 ;; *************** function _isr *****************
  3563 ;; Defined at:
  3564 ;;		line 65 in file "main.c"
  3565 ;; Parameters:    Size  Location     Type
  3566 ;;		None
  3567 ;; Auto vars:     Size  Location     Type
  3568 ;;		None
  3569 ;; Return value:  Size  Location     Type
  3570 ;;                  1    wreg      void 
  3571 ;; Registers used:
  3572 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3573 ;; Tracked objects:
  3574 ;;		On entry : 0/0
  3575 ;;		On exit  : 0/0
  3576 ;;		Unchanged: 0/0
  3577 ;; Data sizes:     COMMON   BANK0   BANK1
  3578 ;;      Params:         0       0       0
  3579 ;;      Locals:         0       0       0
  3580 ;;      Temps:          2       0       0
  3581 ;;      Totals:         2       0       0
  3582 ;;Total ram usage:        2 bytes
  3583 ;; Hardware stack levels used:    1
  3584 ;; Hardware stack levels required when called:    1
  3585 ;; This function calls:
  3586 ;;		_start_TMR0_ISR
  3587 ;;		_stop_TMR0_ISR
  3588 ;;		i1_start_RX_USART_ISR
  3589 ;; This function is called by:
  3590 ;;		Interrupt level 1
  3591 ;; This function uses a non-reentrant model
  3592 ;;
  3593                           
  3594  0004                     _isr:	
  3595                           
  3596                           ;incstack = 0
  3597  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  3598                           
  3599                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3600  0005  3180               	pagesel	$
  3601  0006  0020               	movlb	0	; select bank0
  3602  0007  087F               	movf	127,w
  3603  0008  00F9               	movwf	??_isr+1
  3604                           
  3605                           ;main.c: 69: if (TMR0IF && TMR0IE) {
  3606  0009  190B               	btfsc	11,2	;volatile
  3607  000A  1E8B               	btfss	11,5	;volatile
  3608  000B  2815               	goto	i1l120
  3609                           
  3610                           ;main.c: 71: TMR0IF = 0;
  3611  000C  110B               	bcf	11,2	;volatile
  3612                           
  3613                           ;main.c: 72: TMR0 = TIMER0_timeout;
  3614  000D  0870               	movf	_TIMER0_timeout,w	;volatile
  3615  000E  0095               	movwf	21	;volatile
  3616                           
  3617                           ;main.c: 75: TIMER0_flag = 1;
  3618  000F  3001               	movlw	1
  3619  0010  00F8               	movwf	??_isr
  3620  0011  0878               	movf	??_isr,w
  3621  0012  00BE               	movwf	_TIMER0_flag	;volatile
  3622                           
  3623                           ;main.c: 80: stop_TMR0_ISR();
  3624  0013  23A1               	fcall	_stop_TMR0_ISR
  3625                           
  3626                           ;main.c: 82: return;
  3627  0014  2850               	goto	i1l121
  3628  0015                     i1l120:	
  3629                           
  3630                           ;main.c: 83: }
  3631                           ;main.c: 87: if (RCIF) {
  3632  0015  1E91               	btfss	17,5	;volatile
  3633  0016  2834               	goto	i1l122
  3634                           
  3635                           ;main.c: 88: stop_TMR0_ISR();
  3636  0017  23A1               	fcall	_stop_TMR0_ISR
  3637                           
  3638                           ;main.c: 91: if (OERR) {
  3639  0018  0023               	movlb	3	; select bank3
  3640  0019  1C9D               	btfss	29,1	;volatile
  3641  001A  281E               	goto	i1l1767
  3642                           
  3643                           ;main.c: 93: CREN = 0;
  3644  001B  121D               	bcf	29,4	;volatile
  3645                           
  3646                           ;main.c: 94: CREN = 1;
  3647  001C  161D               	bsf	29,4	;volatile
  3648                           
  3649                           ;main.c: 95: return;
  3650  001D  2850               	goto	i1l121
  3651  001E                     i1l1767:	
  3652                           
  3653                           ;main.c: 96: }
  3654                           ;main.c: 99: if (USART_rx_index >= 15) {
  3655  001E  300F               	movlw	15
  3656  001F  0020               	movlb	0	; select bank0
  3657  0020  0240               	subwf	_USART_rx_index,w	;volatile
  3658  0021  1803               	btfsc	3,0
  3659                           
  3660                           ;main.c: 100: USART_rx_index = 0;
  3661  0022  01C0               	clrf	_USART_rx_index	;volatile
  3662                           
  3663                           ;main.c: 101: }
  3664                           ;main.c: 103: USART_rx_data[USART_rx_index++] = RCREG;
  3665  0023  0023               	movlb	3	; select bank3
  3666  0024  0819               	movf	25,w	;volatile
  3667  0025  00F8               	movwf	??_isr
  3668  0026  0020               	movlb	0	; select bank0
  3669  0027  0840               	movf	_USART_rx_index,w
  3670  0028  3E20               	addlw	(low (_USART_rx_data| 0))& (0+255)
  3671  0029  0086               	movwf	6
  3672  002A  0187               	clrf	7
  3673  002B  0878               	movf	??_isr,w
  3674  002C  0081               	movwf	1
  3675  002D  3001               	movlw	1
  3676  002E  00F8               	movwf	??_isr
  3677  002F  0878               	movf	??_isr,w
  3678  0030  07C0               	addwf	_USART_rx_index,f	;volatile
  3679                           
  3680                           ;main.c: 105: start_TMR0_ISR(98);
  3681  0031  3062               	movlw	98
  3682  0032  235D               	fcall	_start_TMR0_ISR
  3683                           
  3684                           ;main.c: 107: return;
  3685  0033  2850               	goto	i1l121
  3686  0034                     i1l122:	
  3687                           
  3688                           ;main.c: 108: }
  3689                           ;main.c: 112: if (TXIF && TXIE) {
  3690  0034  1E11               	btfss	17,4	;volatile
  3691  0035  2850               	goto	i1l121
  3692  0036  0021               	movlb	1	; select bank1
  3693  0037  1E11               	btfss	17,4	;volatile
  3694  0038  2850               	goto	i1l121
  3695                           
  3696                           ;main.c: 114: TXREG = USART_tx_data[USART_tx_index++];
  3697  0039  0873               	movf	_USART_tx_index,w
  3698  003A  3E2F               	addlw	(low (_USART_tx_data| 0))& (0+255)
  3699  003B  0086               	movwf	6
  3700  003C  0187               	clrf	7
  3701  003D  0801               	movf	1,w
  3702  003E  0023               	movlb	3	; select bank3
  3703  003F  009A               	movwf	26	;volatile
  3704  0040  3001               	movlw	1
  3705  0041  00F8               	movwf	??_isr
  3706  0042  0878               	movf	??_isr,w
  3707  0043  07F3               	addwf	_USART_tx_index,f	;volatile
  3708                           
  3709                           ;main.c: 116: if (USART_tx_index >= USART_tx_length) {
  3710  0044  0874               	movf	_USART_tx_length,w	;volatile
  3711  0045  0273               	subwf	_USART_tx_index,w	;volatile
  3712  0046  1C03               	skipc
  3713  0047  2850               	goto	i1l121
  3714                           
  3715                           ;main.c: 117: TXIE = 0;
  3716  0048  0021               	movlb	1	; select bank1
  3717  0049  1211               	bcf	17,4	;volatile
  3718                           
  3719                           ;main.c: 118: USART_tx_flag = 0;
  3720  004A  01F2               	clrf	_USART_tx_flag	;volatile
  3721                           
  3722                           ;main.c: 121: _delay((unsigned long)((2)*(500000/4000.0)));
  3723  004B  3053               	movlw	83
  3724  004C                     u111_27:	
  3725  004C  0B89               	decfsz	9,f
  3726  004D  284C               	goto	u111_27
  3727  004E  0000               	nop
  3728                           
  3729                           ;main.c: 122: start_RX_USART_ISR();
  3730  004F  234C               	fcall	i1_start_RX_USART_ISR
  3731  0050                     i1l121:	
  3732                           ;main.c: 123: }
  3733                           ;main.c: 124: return;
  3734                           
  3735  0050  0879               	movf	??_isr+1,w
  3736  0051  0020               	movlb	0	; select bank0
  3737  0052  00FF               	movwf	127
  3738  0053  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  3739  0054  0009               	retfie
  3740  0055                     __end_of_isr:	
  3741                           
  3742                           	psect	text20
  3743  034C                     __ptext20:	
  3744 ;; *************** function i1_start_RX_USART_ISR *****************
  3745 ;; Defined at:
  3746 ;;		line 82 in file "USART1823.c"
  3747 ;; Parameters:    Size  Location     Type
  3748 ;;		None
  3749 ;; Auto vars:     Size  Location     Type
  3750 ;;		None
  3751 ;; Return value:  Size  Location     Type
  3752 ;;                  1    wreg      void 
  3753 ;; Registers used:
  3754 ;;		wreg, status,2
  3755 ;; Tracked objects:
  3756 ;;		On entry : 0/0
  3757 ;;		On exit  : 0/0
  3758 ;;		Unchanged: 0/0
  3759 ;; Data sizes:     COMMON   BANK0   BANK1
  3760 ;;      Params:         0       0       0
  3761 ;;      Locals:         0       0       0
  3762 ;;      Temps:          0       0       0
  3763 ;;      Totals:         0       0       0
  3764 ;;Total ram usage:        0 bytes
  3765 ;; Hardware stack levels used:    1
  3766 ;; This function calls:
  3767 ;;		Nothing
  3768 ;; This function is called by:
  3769 ;;		_isr
  3770 ;; This function uses a non-reentrant model
  3771 ;;
  3772                           
  3773                           
  3774                           ;psect for function i1_start_RX_USART_ISR
  3775  034C                     i1_start_RX_USART_ISR:	
  3776                           
  3777                           ;USART1823.c: 85: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  3778                           
  3779                           ;incstack = 0
  3780                           ; Regs used in i1_start_RX_USART_ISR: [wreg+status,2]
  3781  034C  0023               	movlb	3	; select bank3
  3782  034D  151E               	bsf	30,2	;volatile
  3783  034E  159F               	bsf	31,3	;volatile
  3784  034F  019C               	clrf	28	;volatile
  3785  0350  300C               	movlw	12
  3786  0351  009B               	movwf	27	;volatile
  3787                           
  3788                           ;USART1823.c: 87: SYNC = 0;
  3789  0352  121E               	bcf	30,4	;volatile
  3790                           
  3791                           ;USART1823.c: 88: SPEN = 1;
  3792  0353  179D               	bsf	29,7	;volatile
  3793                           
  3794                           ;USART1823.c: 89: CREN = 1;
  3795  0354  161D               	bsf	29,4	;volatile
  3796                           
  3797                           ;USART1823.c: 91: USART_rx_flag = 0;
  3798  0355  0020               	movlb	0	; select bank0
  3799  0356  01BF               	clrf	_USART_rx_flag	;volatile
  3800                           
  3801                           ;USART1823.c: 92: USART_rx_index = 0;
  3802  0357  01C0               	clrf	_USART_rx_index	;volatile
  3803                           
  3804                           ;USART1823.c: 94: RCIE = 1;
  3805  0358  0021               	movlb	1	; select bank1
  3806  0359  1691               	bsf	17,5	;volatile
  3807                           
  3808                           ;USART1823.c: 95: PEIE = 1;
  3809  035A  170B               	bsf	11,6	;volatile
  3810                           
  3811                           ;USART1823.c: 96: GIE = 1;
  3812  035B  178B               	bsf	11,7	;volatile
  3813  035C  0008               	return
  3814  035D                     __end_ofi1_start_RX_USART_ISR:	
  3815                           
  3816                           	psect	text21
  3817  03A1                     __ptext21:	
  3818 ;; *************** function _stop_TMR0_ISR *****************
  3819 ;; Defined at:
  3820 ;;		line 44 in file "TMR0.c"
  3821 ;; Parameters:    Size  Location     Type
  3822 ;;		None
  3823 ;; Auto vars:     Size  Location     Type
  3824 ;;		None
  3825 ;; Return value:  Size  Location     Type
  3826 ;;                  1    wreg      void 
  3827 ;; Registers used:
  3828 ;;		None
  3829 ;; Tracked objects:
  3830 ;;		On entry : 0/0
  3831 ;;		On exit  : 0/0
  3832 ;;		Unchanged: 0/0
  3833 ;; Data sizes:     COMMON   BANK0   BANK1
  3834 ;;      Params:         0       0       0
  3835 ;;      Locals:         0       0       0
  3836 ;;      Temps:          0       0       0
  3837 ;;      Totals:         0       0       0
  3838 ;;Total ram usage:        0 bytes
  3839 ;; Hardware stack levels used:    1
  3840 ;; This function calls:
  3841 ;;		Nothing
  3842 ;; This function is called by:
  3843 ;;		_isr
  3844 ;; This function uses a non-reentrant model
  3845 ;;
  3846                           
  3847                           
  3848                           ;psect for function _stop_TMR0_ISR
  3849  03A1                     _stop_TMR0_ISR:	
  3850                           
  3851                           ;TMR0.c: 47: TMR0IE = 0;
  3852                           
  3853                           ;incstack = 0
  3854                           ; Regs used in _stop_TMR0_ISR: []
  3855  03A1  128B               	bcf	11,5	;volatile
  3856                           
  3857                           ;TMR0.c: 48: TMR0IF = 0;
  3858  03A2  110B               	bcf	11,2	;volatile
  3859  03A3  0008               	return
  3860  03A4                     __end_of_stop_TMR0_ISR:	
  3861                           
  3862                           	psect	text22
  3863  035D                     __ptext22:	
  3864 ;; *************** function _start_TMR0_ISR *****************
  3865 ;; Defined at:
  3866 ;;		line 30 in file "TMR0.c"
  3867 ;; Parameters:    Size  Location     Type
  3868 ;;  val             1    wreg     unsigned char 
  3869 ;; Auto vars:     Size  Location     Type
  3870 ;;  val             1    2[COMMON] unsigned char 
  3871 ;; Return value:  Size  Location     Type
  3872 ;;                  1    wreg      void 
  3873 ;; Registers used:
  3874 ;;		wreg, status,2
  3875 ;; Tracked objects:
  3876 ;;		On entry : 0/0
  3877 ;;		On exit  : 0/0
  3878 ;;		Unchanged: 0/0
  3879 ;; Data sizes:     COMMON   BANK0   BANK1
  3880 ;;      Params:         0       0       0
  3881 ;;      Locals:         1       0       0
  3882 ;;      Temps:          2       0       0
  3883 ;;      Totals:         3       0       0
  3884 ;;Total ram usage:        3 bytes
  3885 ;; Hardware stack levels used:    1
  3886 ;; This function calls:
  3887 ;;		Nothing
  3888 ;; This function is called by:
  3889 ;;		_isr
  3890 ;; This function uses a non-reentrant model
  3891 ;;
  3892                           
  3893                           
  3894                           ;psect for function _start_TMR0_ISR
  3895  035D                     _start_TMR0_ISR:	
  3896                           
  3897                           ;incstack = 0
  3898                           ; Regs used in _start_TMR0_ISR: [wreg+status,2]
  3899                           ;start_TMR0_ISR@val stored from wreg
  3900  035D  00F7               	movwf	start_TMR0_ISR@val
  3901                           
  3902                           ;TMR0.c: 32: TIMER0_timeout = val;
  3903  035E  0877               	movf	start_TMR0_ISR@val,w
  3904  035F  00F5               	movwf	??_start_TMR0_ISR
  3905  0360  01F6               	clrf	??_start_TMR0_ISR+1
  3906  0361  0875               	movf	??_start_TMR0_ISR,w
  3907  0362  00F0               	movwf	_TIMER0_timeout	;volatile
  3908  0363  0876               	movf	??_start_TMR0_ISR+1,w
  3909  0364  00F1               	movwf	_TIMER0_timeout+1	;volatile
  3910                           
  3911                           ;TMR0.c: 33: TIMER0_flag = 0;
  3912  0365  0020               	movlb	0	; select bank0
  3913  0366  01BE               	clrf	_TIMER0_flag	;volatile
  3914                           
  3915                           ;TMR0.c: 36: TMR0 = TIMER0_timeout;
  3916  0367  0870               	movf	_TIMER0_timeout,w	;volatile
  3917  0368  0095               	movwf	21	;volatile
  3918                           
  3919                           ;TMR0.c: 39: TMR0IF = 0;
  3920  0369  110B               	bcf	11,2	;volatile
  3921                           
  3922                           ;TMR0.c: 40: TMR0IE = 1;
  3923  036A  168B               	bsf	11,5	;volatile
  3924                           
  3925                           ;TMR0.c: 41: GIE = 1;
  3926  036B  178B               	bsf	11,7	;volatile
  3927  036C  0008               	return
  3928  036D                     __end_of_start_TMR0_ISR:	
  3929  007E                     btemp	set	126	;btemp
  3930  007E                     int$flags	set	126
  3931  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         49
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     36      80
    BANK1            32      0       0

Pointer List with Targets:

    lputs_ISR@data	PTR unsigned char  size(1) Largest target is 13
		 -> measure_Impedance@aux(BANK0[13]), read_ADC_channels@aux(BANK0[7]), mess_rec(BANK0[10]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_start_TMR0_ISR

Critical Paths under _main in BANK0

    _main->_mess_handler
    _mess_handler->_measure_Impedance
    _read_ADC_channels->_ADC_2
    _read_ADC_channels->_ADC_4
    _read_ADC_channels->_ADC_5
    _measure_Impedance->_VIN_config
    _config_ASIC->_VIN_config

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    6912
                                             34 BANK0      2     2      0
                  _SYSTEM_Initialize
                       _mess_handler
                          _setup_ADC
                         _setup_TMR0
                          _start_RCM
                 _start_RX_USART_ISR
                 _start_TX_USART_ISR
 ---------------------------------------------------------------------------------
 (1) _start_TX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RCM                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_TMR0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_ADC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _mess_handler                                         1     1      0    6813
                                             33 BANK0      1     1      0
                        _config_ASIC
                          _lputs_ISR
                  _measure_Impedance
                  _read_ADC_channels
 ---------------------------------------------------------------------------------
 (2) _read_ADC_channels                                   14    14      0    1206
                                              6 BANK0     14    14      0
                              _ADC_2
                              _ADC_4
                              _ADC_5
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (3) _ADC_5                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _measure_Impedance                                   26    26      0    3031
                                              9 BANK0     24    24      0
                              _ADC_2
                              _ADC_4
                         _VIN_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (3) _ADC_4                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _ADC_2                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _config_ASIC                                          7     7      0    1944
                                              9 BANK0      7     7      0
                         _VIN_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (3) _lputs_ISR                                            5     4      1     632
                                              0 BANK0      5     4      1
                     _close_RX_USART
 ---------------------------------------------------------------------------------
 (4) _close_RX_USART                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _VIN_config                                          10     4      6    1130
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  2     2      0      22
                                              3 COMMON     2     2      0
                     _start_TMR0_ISR
                      _stop_TMR0_ISR
               i1_start_RX_USART_ISR
 ---------------------------------------------------------------------------------
 (6) i1_start_RX_USART_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _stop_TMR0_ISR                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _start_TMR0_ISR                                       3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _mess_handler
     _config_ASIC
       _VIN_config
       _lputs_ISR
         _close_RX_USART
     _lputs_ISR
       _close_RX_USART
     _measure_Impedance
       _ADC_2
       _ADC_4
       _VIN_config
       _lputs_ISR
         _close_RX_USART
     _read_ADC_channels
       _ADC_2
       _ADC_4
       _ADC_5
       _lputs_ISR
         _close_RX_USART
   _setup_ADC
   _setup_TMR0
   _start_RCM
   _start_RX_USART_ISR
   _start_TX_USART_ISR

 _isr (ROOT)
   _start_TMR0_ISR
   _stop_TMR0_ISR
   i1_start_RX_USART_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      5A       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     24      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      5A       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Thu Mar  2 13:38:33 2017

                    __CFG_CP$OFF 0000                    _USART_rx_data 0020                    _USART_rx_flag 003F  
                  _USART_tx_data 002F                    _USART_tx_flag 0072                       _VIN_config 0133  
                            l108 01DA                              l142 0149                              l146 0176  
                            l325 0321                              l352 02E6                              l364 02A0  
                            l358 02C3                              _GIE 005F                              _RA5 0065  
                            _PS0 04A8                              _PS1 04A9                              _PS2 04AA  
                   __CFG_CPD$OFF 0000                              u815 0181                              _PSA 04AB  
                            u905 02F1                              u925 02CE                              u855 01AD  
                            u775 0154                              u945 02AB                              u997 01D3  
                            _isr 0004                     __CFG_BORV$HI 0000                              wreg 0009  
                   __CFG_IESO$ON 0000                   _USART_rx_index 0040                     __CFG_LVP$OFF 0000  
                 _USART_tx_index 0073                             l2101 0312                             l2141 0203  
                           l2127 01E6                             l2091 0304                             l2139 01EE  
                           l2093 030C                             l2095 030E                             l2097 0310  
                           l1821 014D                             l1823 0151                             l1835 0171  
                           l1845 017A                             l1871 01AA                             l1847 017E  
                           l1859 019E                             l1891 0275                             l1869 01A6  
                           l1893 028C                             ?_isr 0075                             _ADGO 04E9  
                   __CFG_WDTE$ON 0000                             _BRGH 0CF2                             _CREN 0CEC  
                           u1007 0097                             u1017 00D2                             u1107 01B9  
                           u1027 010C                             u1037 013B                             u1047 0140  
                           u1057 0159                             u1067 0160                             u1077 0186  
                           _LATA 010C                             u1087 018D                             _LATC 010E  
                           u1097 01B2                             _PEIE 005E                             _RCIE 048D  
                           _RCIF 008D                             _OERR 0CE9                             _TMR0 0015  
                           _SPEN 0CEF                             _TXIE 048C                             _TXEN 0CF5  
                           _TXIF 008C                             _SYNC 0CF4                             _WPUA 020C  
                           _WPUC 020E           __size_of_stop_TMR0_ISR 0003                _read_ADC_channels 0205  
                   __CFG_WRT$OFF 0000                             _main 01C7                             fsr0h 0005  
                           fsr1h 0007                             indf0 0000                             fsr0l 0004  
                           indf1 0001                             fsr1l 0006                             btemp 007E  
             ?_read_ADC_channels 0075                             start 0055                    __CFG_MCLRE$ON 0000  
            ??_read_ADC_channels 0052                            ??_isr 0078   __size_of_OSCILLATOR_Initialize 0006  
                _USART_tx_length 0074    __end_of_OSCILLATOR_Initialize 0395                            ?_main 0075  
                          _ADC_2 02E0                            _ADC_4 02BD                            _ADC_5 029A  
                          _BRG16 0CFB                            i1l120 0015                            i1l121 0050  
                          i1l122 0034                            _RCREG 0199                            _PORTC 000E  
                          _TRISA 008C                   _start_TMR0_ISR 035D                            _TRISC 008E  
                          _TXREG 019A                   __CFG_FCMEN$OFF 0000        __end_of_read_ADC_channels 023E  
                          main@i 006F    __size_ofi1_start_RX_USART_ISR 0011                   __CFG_BOREN$OFF 0000  
                          status 0003                            wtemp0 007E                  __initialization 0056  
                   __end_of_main 0205                    _stop_TMR0_ISR 03A1                 ??_close_RX_USART 004C  
         __end_of_start_TMR0_ISR 036D                           ??_main 006E                           ?_ADC_2 004C  
                         ?_ADC_4 004C                           ?_ADC_5 004C                      ?_VIN_config 004C  
                 _TIMER0_timeout 0070                   __CFG_PLLEN$OFF 0000                           _ADCON0 009D  
                         _ADCON1 009E                           _ADRESH 009C                           _ADRESL 009B  
                         _APFCON 011D                           _ANSELA 018C                           _ANSELC 018E  
                         u111_27 004C                           i1l1767 001E                   VIN_config@conf 004C  
                         _OSCCON 0099                           _TMR0IE 005D                           _TMR0IF 005A  
                         _TMR0CS 04AD                           _SPBRGH 019C                           _SPBRGL 019B  
                 __CFG_PWRTE$OFF 0000             __size_of_config_ASIC 0031                  config_ASIC@asic 0056  
                 __CFG_STVREN$ON 0000                   ?_stop_TMR0_ISR 0075                  ?_start_TMR0_ISR 0075  
           measure_Impedance@aux 0056      __size_of_start_RX_USART_ISR 0011       __size_of_read_ADC_channels 0039  
                  ?_mess_handler 0075                _SYSTEM_Initialize 039E          __end_of__initialization 0061  
                  __end_of_ADC_2 0303                    __end_of_ADC_4 02E0               ?_SYSTEM_Initialize 0075  
                  __end_of_ADC_5 02BD              __size_of_VIN_config 0094                   __pcstackCOMMON 0075  
            ??_SYSTEM_Initialize 004C                          ??_ADC_2 004E                          ??_ADC_4 004E  
                        ??_ADC_5 004E                   _OPTION_REGbits 0095      __size_of_start_TX_USART_ISR 000F  
                 ??_mess_handler 006D        __end_of_SYSTEM_Initialize 03A1                       __pbssBANK0 0020  
                     __pmaintext 01C7                  ??_stop_TMR0_ISR 0075             read_ADC_channels@aux 0053  
                     __pintentry 0004                          _CLKRCON 039A               __size_of_lputs_ISR 002B  
                lputs_ISR@length 004C               __size_of_setup_ADC 0006                          _OSCSTAT 009A  
                        _OSCTUNE 0098               __size_of_start_RCM 0004                          _RXDTSEL 08EF  
                        _TXCKSEL 08EA     __end_ofi1_start_RX_USART_ISR 035D                     ??_VIN_config 0052  
                        __ptext1 036D                          __ptext2 033B                          __ptext3 039A  
                        __ptext4 037C                          __ptext5 0389                          __ptext6 0303  
                        __ptext7 0205                          __ptext8 029A                          __ptext9 0064  
          _OSCILLATOR_Initialize 038F                     __size_of_isr 0051         ??_PIN_MANAGER_Initialize 004C  
     __size_of_SYSTEM_Initialize 0003                          clrloop0 0384                    _mess_rec_size 0041  
           end_of_initialization 0061            measure_Impedance@asic 0067                __end_of_lputs_ISR 029A  
              __end_of_setup_ADC 038F               __end_of_VIN_config 01C7                 ??_start_TMR0_ISR 0075  
              __end_of_start_RCM 039E             __end_of_mess_handler 0322                       _setup_TMR0 037C  
               __CFG_FOSC$INTOSC 0000                    ??_config_ASIC 0055                _measure_Impedance 0064  
             ?_measure_Impedance 0075                   ADC_2@ADC_value 0050       __end_of_start_RX_USART_ISR 034C  
         ?_OSCILLATOR_Initialize 0075              start_initialization 0056              ??_measure_Impedance 0055  
__size_of_PIN_MANAGER_Initialize 0019                      __end_of_isr 0055          __size_of_close_RX_USART 0005  
           i1_start_RX_USART_ISR 034C                   ADC_4@ADC_value 0050                    VIN_config@out 0054  
      __end_of_measure_Impedance 0133                   ADC_5@ADC_value 0050              __end_of_config_ASIC 026F  
                    ?_setup_TMR0 0075       __end_of_start_TX_USART_ISR 037C                      __pbssCOMMON 0070  
                      ___latbits 0000                    __pcstackBANK0 004C            ?i1_start_RX_USART_ISR 0075  
                    VIN_config@i 0053            __size_of_mess_handler 001F           _PIN_MANAGER_Initialize 0322  
          __end_of_stop_TMR0_ISR 03A4                   __size_of_ADC_2 0023                   __size_of_ADC_4 0023  
                 __size_of_ADC_5 0023          read_ADC_channels@value1 005A          read_ADC_channels@value2 005C  
        read_ADC_channels@value3 005E                     _mess_handler 0303              __size_of_setup_TMR0 0007  
                    _config_ASIC 023E                        clear_ram0 0383                       lputs_ISR@i 0050  
     __size_of_measure_Impedance 00CF                        _lputs_ISR 026F                        _setup_ADC 0389  
                      _start_RCM 039A           ??i1_start_RX_USART_ISR 0075                   _close_RX_USART 0395  
        measure_Impedance@value1 0063          measure_Impedance@value2 0065                       ?_lputs_ISR 004C  
                     ?_setup_ADC 0075          ??_OSCILLATOR_Initialize 004C                start_TMR0_ISR@val 0077  
                     ?_start_RCM 0075           __end_of_close_RX_USART 039A                         __ptext10 02BD  
                       __ptext11 02E0                         __ptext20 034C                         __ptext12 023E  
                       __ptext21 03A1                         __ptext13 026F                         __ptext22 035D  
                       __ptext14 0395                         __ptext15 0133                         __ptext16 039E  
                       __ptext17 0322                         __ptext18 038F                    lputs_ISR@data 004F  
             _start_RX_USART_ISR 033B                    __size_of_main 003E                         _mess_rec 0042  
            ?_start_RX_USART_ISR 0075                         int$flags 007E                     ??_setup_TMR0 004C  
                    _TIMER0_flag 003E             ??_start_RX_USART_ISR 004C          __size_of_start_TMR0_ISR 0010  
                ?_close_RX_USART 0075                         intlevel1 0000               _start_TX_USART_ISR 036D  
        ?_PIN_MANAGER_Initialize 0075                __CFG_CLKOUTEN$OFF 0000               __end_of_setup_TMR0 0383  
            ?_start_TX_USART_ISR 0075                      ??_lputs_ISR 004D                      ??_setup_ADC 004C  
                    ??_start_RCM 004C             ??_start_TX_USART_ISR 004C   __end_of_PIN_MANAGER_Initialize 033B  
                   ?_config_ASIC 0075  
