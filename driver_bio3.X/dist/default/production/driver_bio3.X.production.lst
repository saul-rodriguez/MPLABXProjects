

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Feb 27 16:27:51 2018

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16LF1823
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	dabs	1,0x7E,2
    36  0000                     
    37                           ; Version 1.40
    38                           ; Generated 01/12/2016 GMT
    39                           ; 
    40                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC16LF1823 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     	;# 
    72  0001                     	;# 
    73  0002                     	;# 
    74  0003                     	;# 
    75  0004                     	;# 
    76  0005                     	;# 
    77  0006                     	;# 
    78  0007                     	;# 
    79  0008                     	;# 
    80  0009                     	;# 
    81  000A                     	;# 
    82  000B                     	;# 
    83  000C                     	;# 
    84  000E                     	;# 
    85  0011                     	;# 
    86  0012                     	;# 
    87  0015                     	;# 
    88  0016                     	;# 
    89  0016                     	;# 
    90  0017                     	;# 
    91  0018                     	;# 
    92  0019                     	;# 
    93  001A                     	;# 
    94  001B                     	;# 
    95  001C                     	;# 
    96  001E                     	;# 
    97  001F                     	;# 
    98  008C                     	;# 
    99  008E                     	;# 
   100  0091                     	;# 
   101  0092                     	;# 
   102  0095                     	;# 
   103  0096                     	;# 
   104  0097                     	;# 
   105  0098                     	;# 
   106  0099                     	;# 
   107  009A                     	;# 
   108  009B                     	;# 
   109  009B                     	;# 
   110  009C                     	;# 
   111  009D                     	;# 
   112  009E                     	;# 
   113  010C                     	;# 
   114  010E                     	;# 
   115  0111                     	;# 
   116  0112                     	;# 
   117  0113                     	;# 
   118  0114                     	;# 
   119  0115                     	;# 
   120  0116                     	;# 
   121  0117                     	;# 
   122  0118                     	;# 
   123  0119                     	;# 
   124  011A                     	;# 
   125  011B                     	;# 
   126  011D                     	;# 
   127  011D                     	;# 
   128  018C                     	;# 
   129  018E                     	;# 
   130  0191                     	;# 
   131  0191                     	;# 
   132  0192                     	;# 
   133  0193                     	;# 
   134  0193                     	;# 
   135  0193                     	;# 
   136  0194                     	;# 
   137  0195                     	;# 
   138  0196                     	;# 
   139  0199                     	;# 
   140  019A                     	;# 
   141  019B                     	;# 
   142  019B                     	;# 
   143  019B                     	;# 
   144  019B                     	;# 
   145  019C                     	;# 
   146  019C                     	;# 
   147  019D                     	;# 
   148  019E                     	;# 
   149  019F                     	;# 
   150  020C                     	;# 
   151  020E                     	;# 
   152  0211                     	;# 
   153  0211                     	;# 
   154  0212                     	;# 
   155  0212                     	;# 
   156  0213                     	;# 
   157  0213                     	;# 
   158  0214                     	;# 
   159  0214                     	;# 
   160  0215                     	;# 
   161  0215                     	;# 
   162  0215                     	;# 
   163  0216                     	;# 
   164  0216                     	;# 
   165  0217                     	;# 
   166  0217                     	;# 
   167  0291                     	;# 
   168  0291                     	;# 
   169  0292                     	;# 
   170  0293                     	;# 
   171  0294                     	;# 
   172  0295                     	;# 
   173  0295                     	;# 
   174  0296                     	;# 
   175  0391                     	;# 
   176  0392                     	;# 
   177  0393                     	;# 
   178  039A                     	;# 
   179  039C                     	;# 
   180  039D                     	;# 
   181  039E                     	;# 
   182  039F                     	;# 
   183  0FE4                     	;# 
   184  0FE5                     	;# 
   185  0FE6                     	;# 
   186  0FE7                     	;# 
   187  0FE8                     	;# 
   188  0FE9                     	;# 
   189  0FEA                     	;# 
   190  0FEB                     	;# 
   191  0FED                     	;# 
   192  0FEE                     	;# 
   193  0FEF                     	;# 
   194  0000                     	;# 
   195  0001                     	;# 
   196  0002                     	;# 
   197  0003                     	;# 
   198  0004                     	;# 
   199  0005                     	;# 
   200  0006                     	;# 
   201  0007                     	;# 
   202  0008                     	;# 
   203  0009                     	;# 
   204  000A                     	;# 
   205  000B                     	;# 
   206  000C                     	;# 
   207  000E                     	;# 
   208  0011                     	;# 
   209  0012                     	;# 
   210  0015                     	;# 
   211  0016                     	;# 
   212  0016                     	;# 
   213  0017                     	;# 
   214  0018                     	;# 
   215  0019                     	;# 
   216  001A                     	;# 
   217  001B                     	;# 
   218  001C                     	;# 
   219  001E                     	;# 
   220  001F                     	;# 
   221  008C                     	;# 
   222  008E                     	;# 
   223  0091                     	;# 
   224  0092                     	;# 
   225  0095                     	;# 
   226  0096                     	;# 
   227  0097                     	;# 
   228  0098                     	;# 
   229  0099                     	;# 
   230  009A                     	;# 
   231  009B                     	;# 
   232  009B                     	;# 
   233  009C                     	;# 
   234  009D                     	;# 
   235  009E                     	;# 
   236  010C                     	;# 
   237  010E                     	;# 
   238  0111                     	;# 
   239  0112                     	;# 
   240  0113                     	;# 
   241  0114                     	;# 
   242  0115                     	;# 
   243  0116                     	;# 
   244  0117                     	;# 
   245  0118                     	;# 
   246  0119                     	;# 
   247  011A                     	;# 
   248  011B                     	;# 
   249  011D                     	;# 
   250  011D                     	;# 
   251  018C                     	;# 
   252  018E                     	;# 
   253  0191                     	;# 
   254  0191                     	;# 
   255  0192                     	;# 
   256  0193                     	;# 
   257  0193                     	;# 
   258  0193                     	;# 
   259  0194                     	;# 
   260  0195                     	;# 
   261  0196                     	;# 
   262  0199                     	;# 
   263  019A                     	;# 
   264  019B                     	;# 
   265  019B                     	;# 
   266  019B                     	;# 
   267  019B                     	;# 
   268  019C                     	;# 
   269  019C                     	;# 
   270  019D                     	;# 
   271  019E                     	;# 
   272  019F                     	;# 
   273  020C                     	;# 
   274  020E                     	;# 
   275  0211                     	;# 
   276  0211                     	;# 
   277  0212                     	;# 
   278  0212                     	;# 
   279  0213                     	;# 
   280  0213                     	;# 
   281  0214                     	;# 
   282  0214                     	;# 
   283  0215                     	;# 
   284  0215                     	;# 
   285  0215                     	;# 
   286  0216                     	;# 
   287  0216                     	;# 
   288  0217                     	;# 
   289  0217                     	;# 
   290  0291                     	;# 
   291  0291                     	;# 
   292  0292                     	;# 
   293  0293                     	;# 
   294  0294                     	;# 
   295  0295                     	;# 
   296  0295                     	;# 
   297  0296                     	;# 
   298  0391                     	;# 
   299  0392                     	;# 
   300  0393                     	;# 
   301  039A                     	;# 
   302  039C                     	;# 
   303  039D                     	;# 
   304  039E                     	;# 
   305  039F                     	;# 
   306  0FE4                     	;# 
   307  0FE5                     	;# 
   308  0FE6                     	;# 
   309  0FE7                     	;# 
   310  0FE8                     	;# 
   311  0FE9                     	;# 
   312  0FEA                     	;# 
   313  0FEB                     	;# 
   314  0FED                     	;# 
   315  0FEE                     	;# 
   316  0FEF                     	;# 
   317  0000                     	;# 
   318  0001                     	;# 
   319  0002                     	;# 
   320  0003                     	;# 
   321  0004                     	;# 
   322  0005                     	;# 
   323  0006                     	;# 
   324  0007                     	;# 
   325  0008                     	;# 
   326  0009                     	;# 
   327  000A                     	;# 
   328  000B                     	;# 
   329  000C                     	;# 
   330  000E                     	;# 
   331  0011                     	;# 
   332  0012                     	;# 
   333  0015                     	;# 
   334  0016                     	;# 
   335  0016                     	;# 
   336  0017                     	;# 
   337  0018                     	;# 
   338  0019                     	;# 
   339  001A                     	;# 
   340  001B                     	;# 
   341  001C                     	;# 
   342  001E                     	;# 
   343  001F                     	;# 
   344  008C                     	;# 
   345  008E                     	;# 
   346  0091                     	;# 
   347  0092                     	;# 
   348  0095                     	;# 
   349  0096                     	;# 
   350  0097                     	;# 
   351  0098                     	;# 
   352  0099                     	;# 
   353  009A                     	;# 
   354  009B                     	;# 
   355  009B                     	;# 
   356  009C                     	;# 
   357  009D                     	;# 
   358  009E                     	;# 
   359  010C                     	;# 
   360  010E                     	;# 
   361  0111                     	;# 
   362  0112                     	;# 
   363  0113                     	;# 
   364  0114                     	;# 
   365  0115                     	;# 
   366  0116                     	;# 
   367  0117                     	;# 
   368  0118                     	;# 
   369  0119                     	;# 
   370  011A                     	;# 
   371  011B                     	;# 
   372  011D                     	;# 
   373  011D                     	;# 
   374  018C                     	;# 
   375  018E                     	;# 
   376  0191                     	;# 
   377  0191                     	;# 
   378  0192                     	;# 
   379  0193                     	;# 
   380  0193                     	;# 
   381  0193                     	;# 
   382  0194                     	;# 
   383  0195                     	;# 
   384  0196                     	;# 
   385  0199                     	;# 
   386  019A                     	;# 
   387  019B                     	;# 
   388  019B                     	;# 
   389  019B                     	;# 
   390  019B                     	;# 
   391  019C                     	;# 
   392  019C                     	;# 
   393  019D                     	;# 
   394  019E                     	;# 
   395  019F                     	;# 
   396  020C                     	;# 
   397  020E                     	;# 
   398  0211                     	;# 
   399  0211                     	;# 
   400  0212                     	;# 
   401  0212                     	;# 
   402  0213                     	;# 
   403  0213                     	;# 
   404  0214                     	;# 
   405  0214                     	;# 
   406  0215                     	;# 
   407  0215                     	;# 
   408  0215                     	;# 
   409  0216                     	;# 
   410  0216                     	;# 
   411  0217                     	;# 
   412  0217                     	;# 
   413  0291                     	;# 
   414  0291                     	;# 
   415  0292                     	;# 
   416  0293                     	;# 
   417  0294                     	;# 
   418  0295                     	;# 
   419  0295                     	;# 
   420  0296                     	;# 
   421  0391                     	;# 
   422  0392                     	;# 
   423  0393                     	;# 
   424  039A                     	;# 
   425  039C                     	;# 
   426  039D                     	;# 
   427  039E                     	;# 
   428  039F                     	;# 
   429  0FE4                     	;# 
   430  0FE5                     	;# 
   431  0FE6                     	;# 
   432  0FE7                     	;# 
   433  0FE8                     	;# 
   434  0FE9                     	;# 
   435  0FEA                     	;# 
   436  0FEB                     	;# 
   437  0FED                     	;# 
   438  0FEE                     	;# 
   439  0FEF                     	;# 
   440  0000                     	;# 
   441  0001                     	;# 
   442  0002                     	;# 
   443  0003                     	;# 
   444  0004                     	;# 
   445  0005                     	;# 
   446  0006                     	;# 
   447  0007                     	;# 
   448  0008                     	;# 
   449  0009                     	;# 
   450  000A                     	;# 
   451  000B                     	;# 
   452  000C                     	;# 
   453  000E                     	;# 
   454  0011                     	;# 
   455  0012                     	;# 
   456  0015                     	;# 
   457  0016                     	;# 
   458  0016                     	;# 
   459  0017                     	;# 
   460  0018                     	;# 
   461  0019                     	;# 
   462  001A                     	;# 
   463  001B                     	;# 
   464  001C                     	;# 
   465  001E                     	;# 
   466  001F                     	;# 
   467  008C                     	;# 
   468  008E                     	;# 
   469  0091                     	;# 
   470  0092                     	;# 
   471  0095                     	;# 
   472  0096                     	;# 
   473  0097                     	;# 
   474  0098                     	;# 
   475  0099                     	;# 
   476  009A                     	;# 
   477  009B                     	;# 
   478  009B                     	;# 
   479  009C                     	;# 
   480  009D                     	;# 
   481  009E                     	;# 
   482  010C                     	;# 
   483  010E                     	;# 
   484  0111                     	;# 
   485  0112                     	;# 
   486  0113                     	;# 
   487  0114                     	;# 
   488  0115                     	;# 
   489  0116                     	;# 
   490  0117                     	;# 
   491  0118                     	;# 
   492  0119                     	;# 
   493  011A                     	;# 
   494  011B                     	;# 
   495  011D                     	;# 
   496  011D                     	;# 
   497  018C                     	;# 
   498  018E                     	;# 
   499  0191                     	;# 
   500  0191                     	;# 
   501  0192                     	;# 
   502  0193                     	;# 
   503  0193                     	;# 
   504  0193                     	;# 
   505  0194                     	;# 
   506  0195                     	;# 
   507  0196                     	;# 
   508  0199                     	;# 
   509  019A                     	;# 
   510  019B                     	;# 
   511  019B                     	;# 
   512  019B                     	;# 
   513  019B                     	;# 
   514  019C                     	;# 
   515  019C                     	;# 
   516  019D                     	;# 
   517  019E                     	;# 
   518  019F                     	;# 
   519  020C                     	;# 
   520  020E                     	;# 
   521  0211                     	;# 
   522  0211                     	;# 
   523  0212                     	;# 
   524  0212                     	;# 
   525  0213                     	;# 
   526  0213                     	;# 
   527  0214                     	;# 
   528  0214                     	;# 
   529  0215                     	;# 
   530  0215                     	;# 
   531  0215                     	;# 
   532  0216                     	;# 
   533  0216                     	;# 
   534  0217                     	;# 
   535  0217                     	;# 
   536  0291                     	;# 
   537  0291                     	;# 
   538  0292                     	;# 
   539  0293                     	;# 
   540  0294                     	;# 
   541  0295                     	;# 
   542  0295                     	;# 
   543  0296                     	;# 
   544  0391                     	;# 
   545  0392                     	;# 
   546  0393                     	;# 
   547  039A                     	;# 
   548  039C                     	;# 
   549  039D                     	;# 
   550  039E                     	;# 
   551  039F                     	;# 
   552  0FE4                     	;# 
   553  0FE5                     	;# 
   554  0FE6                     	;# 
   555  0FE7                     	;# 
   556  0FE8                     	;# 
   557  0FE9                     	;# 
   558  0FEA                     	;# 
   559  0FEB                     	;# 
   560  0FED                     	;# 
   561  0FEE                     	;# 
   562  0FEF                     	;# 
   563  0000                     	;# 
   564  0001                     	;# 
   565  0002                     	;# 
   566  0003                     	;# 
   567  0004                     	;# 
   568  0005                     	;# 
   569  0006                     	;# 
   570  0007                     	;# 
   571  0008                     	;# 
   572  0009                     	;# 
   573  000A                     	;# 
   574  000B                     	;# 
   575  000C                     	;# 
   576  000E                     	;# 
   577  0011                     	;# 
   578  0012                     	;# 
   579  0015                     	;# 
   580  0016                     	;# 
   581  0016                     	;# 
   582  0017                     	;# 
   583  0018                     	;# 
   584  0019                     	;# 
   585  001A                     	;# 
   586  001B                     	;# 
   587  001C                     	;# 
   588  001E                     	;# 
   589  001F                     	;# 
   590  008C                     	;# 
   591  008E                     	;# 
   592  0091                     	;# 
   593  0092                     	;# 
   594  0095                     	;# 
   595  0096                     	;# 
   596  0097                     	;# 
   597  0098                     	;# 
   598  0099                     	;# 
   599  009A                     	;# 
   600  009B                     	;# 
   601  009B                     	;# 
   602  009C                     	;# 
   603  009D                     	;# 
   604  009E                     	;# 
   605  010C                     	;# 
   606  010E                     	;# 
   607  0111                     	;# 
   608  0112                     	;# 
   609  0113                     	;# 
   610  0114                     	;# 
   611  0115                     	;# 
   612  0116                     	;# 
   613  0117                     	;# 
   614  0118                     	;# 
   615  0119                     	;# 
   616  011A                     	;# 
   617  011B                     	;# 
   618  011D                     	;# 
   619  011D                     	;# 
   620  018C                     	;# 
   621  018E                     	;# 
   622  0191                     	;# 
   623  0191                     	;# 
   624  0192                     	;# 
   625  0193                     	;# 
   626  0193                     	;# 
   627  0193                     	;# 
   628  0194                     	;# 
   629  0195                     	;# 
   630  0196                     	;# 
   631  0199                     	;# 
   632  019A                     	;# 
   633  019B                     	;# 
   634  019B                     	;# 
   635  019B                     	;# 
   636  019B                     	;# 
   637  019C                     	;# 
   638  019C                     	;# 
   639  019D                     	;# 
   640  019E                     	;# 
   641  019F                     	;# 
   642  020C                     	;# 
   643  020E                     	;# 
   644  0211                     	;# 
   645  0211                     	;# 
   646  0212                     	;# 
   647  0212                     	;# 
   648  0213                     	;# 
   649  0213                     	;# 
   650  0214                     	;# 
   651  0214                     	;# 
   652  0215                     	;# 
   653  0215                     	;# 
   654  0215                     	;# 
   655  0216                     	;# 
   656  0216                     	;# 
   657  0217                     	;# 
   658  0217                     	;# 
   659  0291                     	;# 
   660  0291                     	;# 
   661  0292                     	;# 
   662  0293                     	;# 
   663  0294                     	;# 
   664  0295                     	;# 
   665  0295                     	;# 
   666  0296                     	;# 
   667  0391                     	;# 
   668  0392                     	;# 
   669  0393                     	;# 
   670  039A                     	;# 
   671  039C                     	;# 
   672  039D                     	;# 
   673  039E                     	;# 
   674  039F                     	;# 
   675  0FE4                     	;# 
   676  0FE5                     	;# 
   677  0FE6                     	;# 
   678  0FE7                     	;# 
   679  0FE8                     	;# 
   680  0FE9                     	;# 
   681  0FEA                     	;# 
   682  0FEB                     	;# 
   683  0FED                     	;# 
   684  0FEE                     	;# 
   685  0FEF                     	;# 
   686  0000                     	;# 
   687  0001                     	;# 
   688  0002                     	;# 
   689  0003                     	;# 
   690  0004                     	;# 
   691  0005                     	;# 
   692  0006                     	;# 
   693  0007                     	;# 
   694  0008                     	;# 
   695  0009                     	;# 
   696  000A                     	;# 
   697  000B                     	;# 
   698  000C                     	;# 
   699  000E                     	;# 
   700  0011                     	;# 
   701  0012                     	;# 
   702  0015                     	;# 
   703  0016                     	;# 
   704  0016                     	;# 
   705  0017                     	;# 
   706  0018                     	;# 
   707  0019                     	;# 
   708  001A                     	;# 
   709  001B                     	;# 
   710  001C                     	;# 
   711  001E                     	;# 
   712  001F                     	;# 
   713  008C                     	;# 
   714  008E                     	;# 
   715  0091                     	;# 
   716  0092                     	;# 
   717  0095                     	;# 
   718  0096                     	;# 
   719  0097                     	;# 
   720  0098                     	;# 
   721  0099                     	;# 
   722  009A                     	;# 
   723  009B                     	;# 
   724  009B                     	;# 
   725  009C                     	;# 
   726  009D                     	;# 
   727  009E                     	;# 
   728  010C                     	;# 
   729  010E                     	;# 
   730  0111                     	;# 
   731  0112                     	;# 
   732  0113                     	;# 
   733  0114                     	;# 
   734  0115                     	;# 
   735  0116                     	;# 
   736  0117                     	;# 
   737  0118                     	;# 
   738  0119                     	;# 
   739  011A                     	;# 
   740  011B                     	;# 
   741  011D                     	;# 
   742  011D                     	;# 
   743  018C                     	;# 
   744  018E                     	;# 
   745  0191                     	;# 
   746  0191                     	;# 
   747  0192                     	;# 
   748  0193                     	;# 
   749  0193                     	;# 
   750  0193                     	;# 
   751  0194                     	;# 
   752  0195                     	;# 
   753  0196                     	;# 
   754  0199                     	;# 
   755  019A                     	;# 
   756  019B                     	;# 
   757  019B                     	;# 
   758  019B                     	;# 
   759  019B                     	;# 
   760  019C                     	;# 
   761  019C                     	;# 
   762  019D                     	;# 
   763  019E                     	;# 
   764  019F                     	;# 
   765  020C                     	;# 
   766  020E                     	;# 
   767  0211                     	;# 
   768  0211                     	;# 
   769  0212                     	;# 
   770  0212                     	;# 
   771  0213                     	;# 
   772  0213                     	;# 
   773  0214                     	;# 
   774  0214                     	;# 
   775  0215                     	;# 
   776  0215                     	;# 
   777  0215                     	;# 
   778  0216                     	;# 
   779  0216                     	;# 
   780  0217                     	;# 
   781  0217                     	;# 
   782  0291                     	;# 
   783  0291                     	;# 
   784  0292                     	;# 
   785  0293                     	;# 
   786  0294                     	;# 
   787  0295                     	;# 
   788  0295                     	;# 
   789  0296                     	;# 
   790  0391                     	;# 
   791  0392                     	;# 
   792  0393                     	;# 
   793  039A                     	;# 
   794  039C                     	;# 
   795  039D                     	;# 
   796  039E                     	;# 
   797  039F                     	;# 
   798  0FE4                     	;# 
   799  0FE5                     	;# 
   800  0FE6                     	;# 
   801  0FE7                     	;# 
   802  0FE8                     	;# 
   803  0FE9                     	;# 
   804  0FEA                     	;# 
   805  0FEB                     	;# 
   806  0FED                     	;# 
   807  0FEE                     	;# 
   808  0FEF                     	;# 
   809  0000                     	;# 
   810  0001                     	;# 
   811  0002                     	;# 
   812  0003                     	;# 
   813  0004                     	;# 
   814  0005                     	;# 
   815  0006                     	;# 
   816  0007                     	;# 
   817  0008                     	;# 
   818  0009                     	;# 
   819  000A                     	;# 
   820  000B                     	;# 
   821  000C                     	;# 
   822  000E                     	;# 
   823  0011                     	;# 
   824  0012                     	;# 
   825  0015                     	;# 
   826  0016                     	;# 
   827  0016                     	;# 
   828  0017                     	;# 
   829  0018                     	;# 
   830  0019                     	;# 
   831  001A                     	;# 
   832  001B                     	;# 
   833  001C                     	;# 
   834  001E                     	;# 
   835  001F                     	;# 
   836  008C                     	;# 
   837  008E                     	;# 
   838  0091                     	;# 
   839  0092                     	;# 
   840  0095                     	;# 
   841  0096                     	;# 
   842  0097                     	;# 
   843  0098                     	;# 
   844  0099                     	;# 
   845  009A                     	;# 
   846  009B                     	;# 
   847  009B                     	;# 
   848  009C                     	;# 
   849  009D                     	;# 
   850  009E                     	;# 
   851  010C                     	;# 
   852  010E                     	;# 
   853  0111                     	;# 
   854  0112                     	;# 
   855  0113                     	;# 
   856  0114                     	;# 
   857  0115                     	;# 
   858  0116                     	;# 
   859  0117                     	;# 
   860  0118                     	;# 
   861  0119                     	;# 
   862  011A                     	;# 
   863  011B                     	;# 
   864  011D                     	;# 
   865  011D                     	;# 
   866  018C                     	;# 
   867  018E                     	;# 
   868  0191                     	;# 
   869  0191                     	;# 
   870  0192                     	;# 
   871  0193                     	;# 
   872  0193                     	;# 
   873  0193                     	;# 
   874  0194                     	;# 
   875  0195                     	;# 
   876  0196                     	;# 
   877  0199                     	;# 
   878  019A                     	;# 
   879  019B                     	;# 
   880  019B                     	;# 
   881  019B                     	;# 
   882  019B                     	;# 
   883  019C                     	;# 
   884  019C                     	;# 
   885  019D                     	;# 
   886  019E                     	;# 
   887  019F                     	;# 
   888  020C                     	;# 
   889  020E                     	;# 
   890  0211                     	;# 
   891  0211                     	;# 
   892  0212                     	;# 
   893  0212                     	;# 
   894  0213                     	;# 
   895  0213                     	;# 
   896  0214                     	;# 
   897  0214                     	;# 
   898  0215                     	;# 
   899  0215                     	;# 
   900  0215                     	;# 
   901  0216                     	;# 
   902  0216                     	;# 
   903  0217                     	;# 
   904  0217                     	;# 
   905  0291                     	;# 
   906  0291                     	;# 
   907  0292                     	;# 
   908  0293                     	;# 
   909  0294                     	;# 
   910  0295                     	;# 
   911  0295                     	;# 
   912  0296                     	;# 
   913  0391                     	;# 
   914  0392                     	;# 
   915  0393                     	;# 
   916  039A                     	;# 
   917  039C                     	;# 
   918  039D                     	;# 
   919  039E                     	;# 
   920  039F                     	;# 
   921  0FE4                     	;# 
   922  0FE5                     	;# 
   923  0FE6                     	;# 
   924  0FE7                     	;# 
   925  0FE8                     	;# 
   926  0FE9                     	;# 
   927  0FEA                     	;# 
   928  0FEB                     	;# 
   929  0FED                     	;# 
   930  0FEE                     	;# 
   931  0FEF                     	;# 
   932  0000                     	;# 
   933  0001                     	;# 
   934  0002                     	;# 
   935  0003                     	;# 
   936  0004                     	;# 
   937  0005                     	;# 
   938  0006                     	;# 
   939  0007                     	;# 
   940  0008                     	;# 
   941  0009                     	;# 
   942  000A                     	;# 
   943  000B                     	;# 
   944  000C                     	;# 
   945  000E                     	;# 
   946  0011                     	;# 
   947  0012                     	;# 
   948  0015                     	;# 
   949  0016                     	;# 
   950  0016                     	;# 
   951  0017                     	;# 
   952  0018                     	;# 
   953  0019                     	;# 
   954  001A                     	;# 
   955  001B                     	;# 
   956  001C                     	;# 
   957  001E                     	;# 
   958  001F                     	;# 
   959  008C                     	;# 
   960  008E                     	;# 
   961  0091                     	;# 
   962  0092                     	;# 
   963  0095                     	;# 
   964  0096                     	;# 
   965  0097                     	;# 
   966  0098                     	;# 
   967  0099                     	;# 
   968  009A                     	;# 
   969  009B                     	;# 
   970  009B                     	;# 
   971  009C                     	;# 
   972  009D                     	;# 
   973  009E                     	;# 
   974  010C                     	;# 
   975  010E                     	;# 
   976  0111                     	;# 
   977  0112                     	;# 
   978  0113                     	;# 
   979  0114                     	;# 
   980  0115                     	;# 
   981  0116                     	;# 
   982  0117                     	;# 
   983  0118                     	;# 
   984  0119                     	;# 
   985  011A                     	;# 
   986  011B                     	;# 
   987  011D                     	;# 
   988  011D                     	;# 
   989  018C                     	;# 
   990  018E                     	;# 
   991  0191                     	;# 
   992  0191                     	;# 
   993  0192                     	;# 
   994  0193                     	;# 
   995  0193                     	;# 
   996  0193                     	;# 
   997  0194                     	;# 
   998  0195                     	;# 
   999  0196                     	;# 
  1000  0199                     	;# 
  1001  019A                     	;# 
  1002  019B                     	;# 
  1003  019B                     	;# 
  1004  019B                     	;# 
  1005  019B                     	;# 
  1006  019C                     	;# 
  1007  019C                     	;# 
  1008  019D                     	;# 
  1009  019E                     	;# 
  1010  019F                     	;# 
  1011  020C                     	;# 
  1012  020E                     	;# 
  1013  0211                     	;# 
  1014  0211                     	;# 
  1015  0212                     	;# 
  1016  0212                     	;# 
  1017  0213                     	;# 
  1018  0213                     	;# 
  1019  0214                     	;# 
  1020  0214                     	;# 
  1021  0215                     	;# 
  1022  0215                     	;# 
  1023  0215                     	;# 
  1024  0216                     	;# 
  1025  0216                     	;# 
  1026  0217                     	;# 
  1027  0217                     	;# 
  1028  0291                     	;# 
  1029  0291                     	;# 
  1030  0292                     	;# 
  1031  0293                     	;# 
  1032  0294                     	;# 
  1033  0295                     	;# 
  1034  0295                     	;# 
  1035  0296                     	;# 
  1036  0391                     	;# 
  1037  0392                     	;# 
  1038  0393                     	;# 
  1039  039A                     	;# 
  1040  039C                     	;# 
  1041  039D                     	;# 
  1042  039E                     	;# 
  1043  039F                     	;# 
  1044  0FE4                     	;# 
  1045  0FE5                     	;# 
  1046  0FE6                     	;# 
  1047  0FE7                     	;# 
  1048  0FE8                     	;# 
  1049  0FE9                     	;# 
  1050  0FEA                     	;# 
  1051  0FEB                     	;# 
  1052  0FED                     	;# 
  1053  0FEE                     	;# 
  1054  0FEF                     	;# 
  1055  0000                     	;# 
  1056  0001                     	;# 
  1057  0002                     	;# 
  1058  0003                     	;# 
  1059  0004                     	;# 
  1060  0005                     	;# 
  1061  0006                     	;# 
  1062  0007                     	;# 
  1063  0008                     	;# 
  1064  0009                     	;# 
  1065  000A                     	;# 
  1066  000B                     	;# 
  1067  000C                     	;# 
  1068  000E                     	;# 
  1069  0011                     	;# 
  1070  0012                     	;# 
  1071  0015                     	;# 
  1072  0016                     	;# 
  1073  0016                     	;# 
  1074  0017                     	;# 
  1075  0018                     	;# 
  1076  0019                     	;# 
  1077  001A                     	;# 
  1078  001B                     	;# 
  1079  001C                     	;# 
  1080  001E                     	;# 
  1081  001F                     	;# 
  1082  008C                     	;# 
  1083  008E                     	;# 
  1084  0091                     	;# 
  1085  0092                     	;# 
  1086  0095                     	;# 
  1087  0096                     	;# 
  1088  0097                     	;# 
  1089  0098                     	;# 
  1090  0099                     	;# 
  1091  009A                     	;# 
  1092  009B                     	;# 
  1093  009B                     	;# 
  1094  009C                     	;# 
  1095  009D                     	;# 
  1096  009E                     	;# 
  1097  010C                     	;# 
  1098  010E                     	;# 
  1099  0111                     	;# 
  1100  0112                     	;# 
  1101  0113                     	;# 
  1102  0114                     	;# 
  1103  0115                     	;# 
  1104  0116                     	;# 
  1105  0117                     	;# 
  1106  0118                     	;# 
  1107  0119                     	;# 
  1108  011A                     	;# 
  1109  011B                     	;# 
  1110  011D                     	;# 
  1111  011D                     	;# 
  1112  018C                     	;# 
  1113  018E                     	;# 
  1114  0191                     	;# 
  1115  0191                     	;# 
  1116  0192                     	;# 
  1117  0193                     	;# 
  1118  0193                     	;# 
  1119  0193                     	;# 
  1120  0194                     	;# 
  1121  0195                     	;# 
  1122  0196                     	;# 
  1123  0199                     	;# 
  1124  019A                     	;# 
  1125  019B                     	;# 
  1126  019B                     	;# 
  1127  019B                     	;# 
  1128  019B                     	;# 
  1129  019C                     	;# 
  1130  019C                     	;# 
  1131  019D                     	;# 
  1132  019E                     	;# 
  1133  019F                     	;# 
  1134  020C                     	;# 
  1135  020E                     	;# 
  1136  0211                     	;# 
  1137  0211                     	;# 
  1138  0212                     	;# 
  1139  0212                     	;# 
  1140  0213                     	;# 
  1141  0213                     	;# 
  1142  0214                     	;# 
  1143  0214                     	;# 
  1144  0215                     	;# 
  1145  0215                     	;# 
  1146  0215                     	;# 
  1147  0216                     	;# 
  1148  0216                     	;# 
  1149  0217                     	;# 
  1150  0217                     	;# 
  1151  0291                     	;# 
  1152  0291                     	;# 
  1153  0292                     	;# 
  1154  0293                     	;# 
  1155  0294                     	;# 
  1156  0295                     	;# 
  1157  0295                     	;# 
  1158  0296                     	;# 
  1159  0391                     	;# 
  1160  0392                     	;# 
  1161  0393                     	;# 
  1162  039A                     	;# 
  1163  039C                     	;# 
  1164  039D                     	;# 
  1165  039E                     	;# 
  1166  039F                     	;# 
  1167  0FE4                     	;# 
  1168  0FE5                     	;# 
  1169  0FE6                     	;# 
  1170  0FE7                     	;# 
  1171  0FE8                     	;# 
  1172  0FE9                     	;# 
  1173  0FEA                     	;# 
  1174  0FEB                     	;# 
  1175  0FED                     	;# 
  1176  0FEE                     	;# 
  1177  0FEF                     	;# 
  1178                           
  1179                           	psect	stringtext
  1180  0221                     __pstringtext:	
  1181  0221                     _filt:	
  1182  0221  34C7               	retlw	199
  1183  0222  3440               	retlw	64
  1184  0223  3400               	retlw	0
  1185  0224  34CF               	retlw	207
  1186  0225  3440               	retlw	64
  1187  0226  3400               	retlw	0
  1188  0227  346F               	retlw	111
  1189  0228  3440               	retlw	64
  1190  0229  3400               	retlw	0
  1191  022A  343F               	retlw	63
  1192  022B  3440               	retlw	64
  1193  022C  3400               	retlw	0
  1194  022D  340F               	retlw	15
  1195  022E  3489               	retlw	137
  1196  022F  3400               	retlw	0
  1197  0230  340F               	retlw	15
  1198  0231  3488               	retlw	136
  1199  0232  3400               	retlw	0
  1200  0233  340F               	retlw	15
  1201  0234  34A4               	retlw	164
  1202  0235  3400               	retlw	0
  1203  0236  340F               	retlw	15
  1204  0237  3409               	retlw	9
  1205  0238  3401               	retlw	1
  1206  0239  340F               	retlw	15
  1207  023A  3408               	retlw	8
  1208  023B  3401               	retlw	1
  1209  023C  340F               	retlw	15
  1210  023D  3424               	retlw	36
  1211  023E  3401               	retlw	1
  1212  023F  340F               	retlw	15
  1213  0240  3432               	retlw	50
  1214  0241  3401               	retlw	1
  1215  0242                     __end_of_filt:	
  1216  0242                     _freqs:	
  1217  0242  3400               	retlw	0
  1218  0243  3401               	retlw	1
  1219  0244  3402               	retlw	2
  1220  0245  3403               	retlw	3
  1221  0246  3404               	retlw	4
  1222  0247  3405               	retlw	5
  1223  0248  3406               	retlw	6
  1224  0249  3407               	retlw	7
  1225  024A  3408               	retlw	8
  1226  024B  3409               	retlw	9
  1227  024C  340A               	retlw	10
  1228  024D                     __end_of_freqs:	
  1229  024D                     _gains:	
  1230  024D  3404               	retlw	4
  1231  024E  3405               	retlw	5
  1232  024F  3407               	retlw	7
  1233  0250  3403               	retlw	3
  1234  0251  3423               	retlw	35
  1235  0252  3463               	retlw	99
  1236  0253  346B               	retlw	107
  1237  0254  347B               	retlw	123
  1238  0255                     __end_of_gains:	
  1239  000E                     _PORTC	set	14
  1240  0015                     _TMR0	set	21
  1241  005F                     _GIE	set	95
  1242  005E                     _PEIE	set	94
  1243  0065                     _RA5	set	101
  1244  008D                     _RCIF	set	141
  1245  005D                     _TMR0IE	set	93
  1246  005A                     _TMR0IF	set	90
  1247  008C                     _TXIF	set	140
  1248  009D                     _ADCON0	set	157
  1249  009E                     _ADCON1	set	158
  1250  009C                     _ADRESH	set	156
  1251  009B                     _ADRESL	set	155
  1252  0095                     _OPTION_REGbits	set	149
  1253  0099                     _OSCCON	set	153
  1254  009A                     _OSCSTAT	set	154
  1255  0098                     _OSCTUNE	set	152
  1256  008C                     _TRISA	set	140
  1257  008E                     _TRISC	set	142
  1258  04E9                     _ADGO	set	1257
  1259  04A8                     _PS0	set	1192
  1260  04A9                     _PS1	set	1193
  1261  04AA                     _PS2	set	1194
  1262  04AB                     _PSA	set	1195
  1263  048D                     _RCIE	set	1165
  1264  04AD                     _TMR0CS	set	1197
  1265  048C                     _TXIE	set	1164
  1266  011D                     _APFCON	set	285
  1267  010C                     _LATA	set	268
  1268  010E                     _LATC	set	270
  1269  08EF                     _RXDTSEL	set	2287
  1270  08EA                     _TXCKSEL	set	2282
  1271  018C                     _ANSELA	set	396
  1272  018E                     _ANSELC	set	398
  1273  0199                     _RCREG	set	409
  1274  019C                     _SPBRGH	set	412
  1275  019B                     _SPBRGL	set	411
  1276  019A                     _TXREG	set	410
  1277  0CFB                     _BRG16	set	3323
  1278  0CF2                     _BRGH	set	3314
  1279  0CEC                     _CREN	set	3308
  1280  0CE9                     _OERR	set	3305
  1281  0CFC                     _SCKP	set	3324
  1282  0CEF                     _SPEN	set	3311
  1283  0CF4                     _SYNC	set	3316
  1284  0CF5                     _TXEN	set	3317
  1285  020C                     _WPUA	set	524
  1286  020E                     _WPUC	set	526
  1287  039A                     _CLKRCON	set	922
  1288                           
  1289                           ; #config settings
  1290  0000                     
  1291                           	psect	cinit
  1292  0057                     start_initialization:	
  1293  0057                     __initialization:	
  1294                           
  1295                           ; Clear objects allocated to COMMON
  1296  0057  01F0               	clrf	__pbssCOMMON& (0+127)
  1297  0058  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  1298  0059  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  1299  005A  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  1300  005B  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  1301                           
  1302                           ; Clear objects allocated to BANK0
  1303  005C  3020               	movlw	low __pbssBANK0
  1304  005D  0084               	movwf	4
  1305  005E  3000               	movlw	high __pbssBANK0
  1306  005F  0085               	movwf	5
  1307  0060  3027               	movlw	39
  1308  0061  23A6               	fcall	clear_ram0
  1309  0062                     end_of_initialization:	
  1310                           ;End of C runtime variable initialization code
  1311                           
  1312  0062                     __end_of__initialization:	
  1313  0062  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1314  0063  0020               	movlb	0
  1315  0064  2AAF               	ljmp	_main	;jump to C main() function
  1316                           
  1317                           	psect	bssCOMMON
  1318  0070                     __pbssCOMMON:	
  1319  0070                     _TIMER0_timeout:	
  1320  0070                     	ds	2
  1321  0072                     _USART_tx_flag:	
  1322  0072                     	ds	1
  1323  0073                     _USART_tx_index:	
  1324  0073                     	ds	1
  1325  0074                     _USART_tx_length:	
  1326  0074                     	ds	1
  1327                           
  1328                           	psect	bssBANK0
  1329  0020                     __pbssBANK0:	
  1330  0020                     _USART_tx_data:	
  1331  0020                     	ds	15
  1332  002F                     _USART_rx_data:	
  1333  002F                     	ds	10
  1334  0039                     _TIMER0_flag:	
  1335  0039                     	ds	1
  1336  003A                     _USART_rx_flag:	
  1337  003A                     	ds	1
  1338  003B                     _USART_rx_index:	
  1339  003B                     	ds	1
  1340  003C                     _mess_rec_size:	
  1341  003C                     	ds	1
  1342  003D                     _mess_rec:	
  1343  003D                     	ds	10
  1344                           
  1345                           	psect	clrtext
  1346  03A6                     clear_ram0:	
  1347                           ;	Called with FSR0 containing the base address, and
  1348                           ;	WREG with the size to clear
  1349                           
  1350  03A6  0064               	clrwdt	;clear the watchdog before getting into this loop
  1351  03A7                     clrloop0:	
  1352  03A7  0180               	clrf	0	;clear RAM location pointed to by FSR
  1353  03A8  3101               	addfsr 0,1
  1354  03A9  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1355  03AA  2BA7               	goto	clrloop0	;have we reached the end yet?
  1356  03AB  3400               	retlw	0	;all done for this memory range, return
  1357                           
  1358                           	psect	cstackBANK1
  1359  00A0                     __pcstackBANK1:	
  1360  00A0                     sweep@check:	
  1361                           
  1362                           ; 1 bytes @ 0x0
  1363  00A0                     	ds	1
  1364  00A1                     sweep@aux:	
  1365                           
  1366                           ; 7 bytes @ 0x1
  1367  00A1                     	ds	7
  1368  00A8                     sweep@freq_index:	
  1369                           
  1370                           ; 1 bytes @ 0x8
  1371  00A8                     	ds	1
  1372  00A9                     sweep@i:	
  1373                           
  1374                           ; 1 bytes @ 0x9
  1375  00A9                     	ds	1
  1376  00AA                     sweep@count:	
  1377                           
  1378                           ; 1 bytes @ 0xA
  1379  00AA                     	ds	1
  1380  00AB                     sweep@I:	
  1381                           
  1382                           ; 2 bytes @ 0xB
  1383  00AB                     	ds	2
  1384  00AD                     sweep@Q:	
  1385                           
  1386                           ; 2 bytes @ 0xD
  1387  00AD                     	ds	2
  1388  00AF                     sweep@gain_index:	
  1389                           
  1390                           ; 1 bytes @ 0xF
  1391  00AF                     	ds	1
  1392  00B0                     sweep@ret:	
  1393                           
  1394                           ; 1 bytes @ 0x10
  1395  00B0                     	ds	1
  1396  00B1                     sweep@asic:	
  1397                           
  1398                           ; 2 bytes @ 0x11
  1399  00B1                     	ds	2
  1400                           
  1401                           	psect	cstackCOMMON
  1402  0075                     __pcstackCOMMON:	
  1403  0075                     ?_OSCILLATOR_Initialize:	
  1404  0075                     ?_setup_TMR0:	
  1405                           ; 1 bytes @ 0x0
  1406                           
  1407  0075                     ?_start_TX_USART_ISR:	
  1408                           ; 1 bytes @ 0x0
  1409                           
  1410  0075                     ?_start_RX_USART_ISR:	
  1411                           ; 1 bytes @ 0x0
  1412                           
  1413  0075                     ?_start_RCM:	
  1414                           ; 1 bytes @ 0x0
  1415                           
  1416  0075                     ?_setup_ADC:	
  1417                           ; 1 bytes @ 0x0
  1418                           
  1419  0075                     ?_sweep:	
  1420                           ; 1 bytes @ 0x0
  1421                           
  1422  0075                     ?_stop_TMR0_ISR:	
  1423                           ; 1 bytes @ 0x0
  1424                           
  1425  0075                     ??_stop_TMR0_ISR:	
  1426                           ; 1 bytes @ 0x0
  1427                           
  1428  0075                     ?_start_TMR0_ISR:	
  1429                           ; 1 bytes @ 0x0
  1430                           
  1431  0075                     ??_start_TMR0_ISR:	
  1432                           ; 1 bytes @ 0x0
  1433                           
  1434  0075                     ?_PIN_MANAGER_Initialize:	
  1435                           ; 1 bytes @ 0x0
  1436                           
  1437  0075                     ?_SYSTEM_Initialize:	
  1438                           ; 1 bytes @ 0x0
  1439                           
  1440  0075                     ?_USARTX_change_pol:	
  1441                           ; 1 bytes @ 0x0
  1442                           
  1443  0075                     ?_main:	
  1444                           ; 1 bytes @ 0x0
  1445                           
  1446  0075                     ?_isr:	
  1447                           ; 1 bytes @ 0x0
  1448                           
  1449  0075                     ?_close_RX_USART:	
  1450                           ; 1 bytes @ 0x0
  1451                           
  1452  0075                     ?i1_start_RX_USART_ISR:	
  1453                           ; 1 bytes @ 0x0
  1454                           
  1455  0075                     ??i1_start_RX_USART_ISR:	
  1456                           ; 1 bytes @ 0x0
  1457                           
  1458                           
  1459                           ; 1 bytes @ 0x0
  1460  0075                     	ds	2
  1461  0077                     start_TMR0_ISR@val:	
  1462                           
  1463                           ; 1 bytes @ 0x2
  1464  0077                     	ds	1
  1465  0078                     ??_isr:	
  1466                           
  1467                           ; 1 bytes @ 0x3
  1468  0078                     	ds	2
  1469                           
  1470                           	psect	cstackBANK0
  1471  0047                     __pcstackBANK0:	
  1472  0047                     ??_OSCILLATOR_Initialize:	
  1473  0047                     ??_setup_TMR0:	
  1474                           ; 1 bytes @ 0x0
  1475                           
  1476  0047                     ??_start_TX_USART_ISR:	
  1477                           ; 1 bytes @ 0x0
  1478                           
  1479  0047                     ??_start_RX_USART_ISR:	
  1480                           ; 1 bytes @ 0x0
  1481                           
  1482  0047                     ??_start_RCM:	
  1483                           ; 1 bytes @ 0x0
  1484                           
  1485  0047                     ??_setup_ADC:	
  1486                           ; 1 bytes @ 0x0
  1487                           
  1488  0047                     ?_calculate_checksum:	
  1489                           ; 1 bytes @ 0x0
  1490                           
  1491  0047                     ??_PIN_MANAGER_Initialize:	
  1492                           ; 1 bytes @ 0x0
  1493                           
  1494  0047                     ??_SYSTEM_Initialize:	
  1495                           ; 1 bytes @ 0x0
  1496                           
  1497  0047                     ??_USARTX_change_pol:	
  1498                           ; 1 bytes @ 0x0
  1499                           
  1500  0047                     ?_config:	
  1501                           ; 1 bytes @ 0x0
  1502                           
  1503  0047                     ?_setGain:	
  1504                           ; 1 bytes @ 0x0
  1505                           
  1506  0047                     ?_setFreq:	
  1507                           ; 1 bytes @ 0x0
  1508                           
  1509  0047                     ??_close_RX_USART:	
  1510                           ; 1 bytes @ 0x0
  1511                           
  1512  0047                     ?_lputs_ISR:	
  1513                           ; 1 bytes @ 0x0
  1514                           
  1515  0047                     ?_ADC_5:	
  1516                           ; 1 bytes @ 0x0
  1517                           
  1518  0047                     setGain@gain_index:	
  1519                           ; 2 bytes @ 0x0
  1520                           
  1521  0047                     setFreq@freq_index:	
  1522                           ; 1 bytes @ 0x0
  1523                           
  1524  0047                     lputs_ISR@length:	
  1525                           ; 1 bytes @ 0x0
  1526                           
  1527  0047                     calculate_checksum@num:	
  1528                           ; 1 bytes @ 0x0
  1529                           
  1530  0047                     config@conf:	
  1531                           ; 1 bytes @ 0x0
  1532                           
  1533                           
  1534                           ; 2 bytes @ 0x0
  1535  0047                     	ds	1
  1536  0048                     ??_calculate_checksum:	
  1537  0048                     ??_setGain:	
  1538                           ; 1 bytes @ 0x1
  1539                           
  1540  0048                     ??_setFreq:	
  1541                           ; 1 bytes @ 0x1
  1542                           
  1543  0048                     ??_lputs_ISR:	
  1544                           ; 1 bytes @ 0x1
  1545                           
  1546                           
  1547                           ; 1 bytes @ 0x1
  1548  0048                     	ds	1
  1549  0049                     ??_ADC_5:	
  1550  0049                     ??_config:	
  1551                           ; 1 bytes @ 0x2
  1552                           
  1553  0049                     setGain@aux:	
  1554                           ; 1 bytes @ 0x2
  1555                           
  1556  0049                     setFreq@asic:	
  1557                           ; 1 bytes @ 0x2
  1558                           
  1559                           
  1560                           ; 1 bytes @ 0x2
  1561  0049                     	ds	1
  1562  004A                     config@i:	
  1563  004A                     setGain@asic:	
  1564                           ; 1 bytes @ 0x3
  1565                           
  1566  004A                     setFreq@aux:	
  1567                           ; 1 bytes @ 0x3
  1568                           
  1569  004A                     lputs_ISR@i:	
  1570                           ; 1 bytes @ 0x3
  1571                           
  1572  004A                     calculate_checksum@check:	
  1573                           ; 1 bytes @ 0x3
  1574                           
  1575                           
  1576                           ; 1 bytes @ 0x3
  1577  004A                     	ds	1
  1578  004B                     config@out:	
  1579  004B                     lputs_ISR@data:	
  1580                           ; 1 bytes @ 0x4
  1581                           
  1582  004B                     calculate_checksum@data:	
  1583                           ; 1 bytes @ 0x4
  1584                           
  1585  004B                     ADC_5@ADC_value:	
  1586                           ; 1 bytes @ 0x4
  1587                           
  1588                           
  1589                           ; 2 bytes @ 0x4
  1590  004B                     	ds	1
  1591  004C                     calculate_checksum@i:	
  1592                           
  1593                           ; 1 bytes @ 0x5
  1594  004C                     	ds	1
  1595  004D                     ?_measure:	
  1596  004D                     measure@Q:	
  1597                           ; 1 bytes @ 0x6
  1598                           
  1599                           
  1600                           ; 1 bytes @ 0x6
  1601  004D                     	ds	1
  1602  004E                     measure@asic:	
  1603                           
  1604                           ; 2 bytes @ 0x7
  1605  004E                     	ds	2
  1606  0050                     ??_measure:	
  1607                           
  1608                           ; 1 bytes @ 0x9
  1609  0050                     	ds	4
  1610  0054                     measure@offset:	
  1611                           
  1612                           ; 2 bytes @ 0xD
  1613  0054                     	ds	2
  1614  0056                     measure@I:	
  1615                           
  1616                           ; 1 bytes @ 0xF
  1617  0056                     	ds	1
  1618  0057                     measure@value:	
  1619                           
  1620                           ; 2 bytes @ 0x10
  1621  0057                     	ds	2
  1622  0059                     measure@aux2:	
  1623                           
  1624                           ; 2 bytes @ 0x12
  1625  0059                     	ds	2
  1626  005B                     measure@aux1:	
  1627                           
  1628                           ; 2 bytes @ 0x14
  1629  005B                     	ds	2
  1630  005D                     ??_sweep:	
  1631                           
  1632                           ; 1 bytes @ 0x16
  1633  005D                     	ds	2
  1634  005F                     ??_main:	
  1635                           
  1636                           ; 1 bytes @ 0x18
  1637  005F                     	ds	1
  1638                           
  1639                           	psect	maintext
  1640  02AF                     __pmaintext:	
  1641 ;;
  1642 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1643 ;;
  1644 ;; *************** function _main *****************
  1645 ;; Defined at:
  1646 ;;		line 28 in file "main.c"
  1647 ;; Parameters:    Size  Location     Type
  1648 ;;		None
  1649 ;; Auto vars:     Size  Location     Type
  1650 ;;  i               1    0        unsigned char 
  1651 ;; Return value:  Size  Location     Type
  1652 ;;                  1    wreg      void 
  1653 ;; Registers used:
  1654 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1655 ;; Tracked objects:
  1656 ;;		On entry : B1F/0
  1657 ;;		On exit  : 0/0
  1658 ;;		Unchanged: 0/0
  1659 ;; Data sizes:     COMMON   BANK0   BANK1
  1660 ;;      Params:         0       0       0
  1661 ;;      Locals:         0       0       0
  1662 ;;      Temps:          0       1       0
  1663 ;;      Totals:         0       1       0
  1664 ;;Total ram usage:        1 bytes
  1665 ;; Hardware stack levels required when called:    5
  1666 ;; This function calls:
  1667 ;;		_SYSTEM_Initialize
  1668 ;;		_USARTX_change_pol
  1669 ;;		_setup_ADC
  1670 ;;		_setup_TMR0
  1671 ;;		_start_RCM
  1672 ;;		_start_RX_USART_ISR
  1673 ;;		_start_TX_USART_ISR
  1674 ;;		_sweep
  1675 ;; This function is called by:
  1676 ;;		Startup code after reset
  1677 ;; This function uses a non-reentrant model
  1678 ;;
  1679                           
  1680                           
  1681                           ;psect for function _main
  1682  02AF                     _main:	
  1683                           
  1684                           ;main.c: 30: unsigned char i;
  1685                           ;main.c: 32: SYSTEM_Initialize();
  1686                           
  1687                           ;incstack = 0
  1688                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1689  02AF  23BF               	fcall	_SYSTEM_Initialize
  1690                           
  1691                           ;main.c: 34: USARTX_change_pol();
  1692  02B0  23BC               	fcall	_USARTX_change_pol
  1693                           
  1694                           ;main.c: 36: setup_TMR0();
  1695  02B1  239F               	fcall	_setup_TMR0
  1696                           
  1697                           ;main.c: 37: start_TX_USART_ISR();
  1698  02B2  2389               	fcall	_start_TX_USART_ISR
  1699                           
  1700                           ;main.c: 38: start_RX_USART_ISR();
  1701  02B3  2357               	fcall	_start_RX_USART_ISR
  1702                           
  1703                           ;main.c: 39: start_RCM();
  1704  02B4  23B8               	fcall	_start_RCM
  1705                           
  1706                           ;main.c: 40: setup_ADC();
  1707  02B5  23AC               	fcall	_setup_ADC
  1708                           
  1709                           ;main.c: 43: RA5 = 0;
  1710  02B6  0020               	movlb	0	; select bank0
  1711  02B7  128C               	bcf	12,5	;volatile
  1712                           
  1713                           ;main.c: 44: _delay((unsigned long)((150)*(500000/4000.0)));
  1714  02B8  3019               	movlw	25
  1715  02B9  0020               	movlb	0	; select bank0
  1716  02BA  00DF               	movwf	??_main
  1717  02BB  3058               	movlw	88
  1718  02BC                     u1487:	
  1719  02BC  0B89               	decfsz	9,f
  1720  02BD  2ABC               	goto	u1487
  1721  02BE  0BDF               	decfsz	??_main,f
  1722  02BF  2ABC               	goto	u1487
  1723  02C0  0000               	nop
  1724                           
  1725                           ;main.c: 45: RA5 = 1;
  1726  02C1  0020               	movlb	0	; select bank0
  1727  02C2  168C               	bsf	12,5	;volatile
  1728  02C3                     l119:	
  1729                           ;main.c: 117: while(1) {
  1730                           
  1731  02C3  0064               	clrwdt	;# 
  1732                           
  1733                           ;main.c: 120: if (TIMER0_flag) {
  1734  02C4  0020               	movlb	0	; select bank0
  1735  02C5  0839               	movf	_TIMER0_flag,w	;volatile
  1736  02C6  1903               	btfsc	3,2
  1737  02C7  2AC3               	goto	l119
  1738                           
  1739                           ;main.c: 121: TIMER0_flag = 0;
  1740  02C8  01B9               	clrf	_TIMER0_flag	;volatile
  1741                           
  1742                           ;main.c: 123: if (USART_rx_index > 10) {
  1743  02C9  300B               	movlw	11
  1744  02CA  023B               	subwf	_USART_rx_index,w	;volatile
  1745  02CB  1C03               	skipc
  1746  02CC  2ACF               	goto	l2755
  1747                           
  1748                           ;main.c: 124: USART_rx_index = 0;
  1749  02CD  01BB               	clrf	_USART_rx_index	;volatile
  1750                           
  1751                           ;main.c: 125: continue;
  1752  02CE  2AC3               	goto	l119
  1753  02CF                     l2755:	
  1754                           
  1755                           ;main.c: 126: }
  1756                           ;main.c: 128: if(USART_rx_index == 0)
  1757  02CF  083B               	movf	_USART_rx_index,w	;volatile
  1758  02D0  1903               	btfsc	3,2
  1759                           
  1760                           ;main.c: 129: continue;
  1761  02D1  2AC3               	goto	l119
  1762                           
  1763                           ;main.c: 132: mess_rec_size = USART_rx_index;
  1764  02D2  083B               	movf	_USART_rx_index,w	;volatile
  1765  02D3  00DF               	movwf	??_main
  1766  02D4  085F               	movf	??_main,w
  1767  02D5  00BC               	movwf	_mess_rec_size	;volatile
  1768                           
  1769                           ;main.c: 133: USART_rx_index = 0;
  1770  02D6  01BB               	clrf	_USART_rx_index	;volatile
  1771                           
  1772                           ;main.c: 138: sweep();
  1773  02D7  2065               	fcall	_sweep
  1774  02D8  2AC3               	goto	l119
  1775  02D9                     __end_of_main:	
  1776                           
  1777                           	psect	text1
  1778  0065                     __ptext1:	
  1779 ;; *************** function _sweep *****************
  1780 ;; Defined at:
  1781 ;;		line 444 in file "comm.c"
  1782 ;; Parameters:    Size  Location     Type
  1783 ;;		None
  1784 ;; Auto vars:     Size  Location     Type
  1785 ;;  aux             7    1[BANK1 ] unsigned char [7]
  1786 ;;  asic            2   17[BANK1 ] struct .
  1787 ;;  Q               2   13[BANK1 ] short 
  1788 ;;  I               2   11[BANK1 ] short 
  1789 ;;  ret             1   16[BANK1 ] unsigned char 
  1790 ;;  gain_index      1   15[BANK1 ] unsigned char 
  1791 ;;  count           1   10[BANK1 ] unsigned char 
  1792 ;;  i               1    9[BANK1 ] unsigned char 
  1793 ;;  freq_index      1    8[BANK1 ] unsigned char 
  1794 ;;  check           1    0[BANK1 ] unsigned char 
  1795 ;; Return value:  Size  Location     Type
  1796 ;;                  1    wreg      void 
  1797 ;; Registers used:
  1798 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1799 ;; Tracked objects:
  1800 ;;		On entry : 0/0
  1801 ;;		On exit  : 0/0
  1802 ;;		Unchanged: 0/0
  1803 ;; Data sizes:     COMMON   BANK0   BANK1
  1804 ;;      Params:         0       0       0
  1805 ;;      Locals:         0       0      19
  1806 ;;      Temps:          0       2       0
  1807 ;;      Totals:         0       2      19
  1808 ;;Total ram usage:       21 bytes
  1809 ;; Hardware stack levels used:    1
  1810 ;; Hardware stack levels required when called:    4
  1811 ;; This function calls:
  1812 ;;		_calculate_checksum
  1813 ;;		_lputs_ISR
  1814 ;;		_measure
  1815 ;;		_setFreq
  1816 ;;		_setGain
  1817 ;; This function is called by:
  1818 ;;		_main
  1819 ;;		_mess_handler
  1820 ;; This function uses a non-reentrant model
  1821 ;;
  1822                           
  1823                           
  1824                           ;psect for function _sweep
  1825  0065                     _sweep:	
  1826                           
  1827                           ;comm.c: 446: unsigned char gain_index;
  1828                           ;comm.c: 447: unsigned char freq_index;
  1829                           ;comm.c: 448: unsigned char i, ret, count;
  1830                           ;comm.c: 449: short I,Q;
  1831                           ;comm.c: 450: unsigned char aux[7], check;
  1832                           ;comm.c: 453: BIO3 asic;
  1833                           ;comm.c: 454: asic.datashort = 0;
  1834                           
  1835                           ;incstack = 0
  1836                           ; Regs used in _sweep: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1837  0065  0021               	movlb	1	; select bank1
  1838  0066  01B1               	clrf	sweep@asic^(0+128)
  1839  0067  01B2               	clrf	(sweep@asic+1)^(0+128)
  1840                           
  1841                           ;comm.c: 465: freq_index = 10;
  1842  0068  300A               	movlw	10
  1843  0069  0020               	movlb	0	; select bank0
  1844  006A  00DD               	movwf	??_sweep
  1845  006B  085D               	movf	??_sweep,w
  1846  006C  0021               	movlb	1	; select bank1
  1847  006D  00A8               	movwf	sweep@freq_index^(0+128)
  1848                           
  1849                           ;comm.c: 466: gain_index = 0;
  1850  006E  01AF               	clrf	sweep@gain_index^(0+128)
  1851                           
  1852                           ;comm.c: 467: setGain(&asic,gain_index);
  1853  006F  082F               	movf	sweep@gain_index^(0+128),w
  1854  0070  0020               	movlb	0	; select bank0
  1855  0071  00DD               	movwf	??_sweep
  1856  0072  085D               	movf	??_sweep,w
  1857  0073  00C7               	movwf	setGain@gain_index
  1858  0074  30B1               	movlw	(low (sweep@asic| 0))& (0+255)
  1859  0075  21E3               	fcall	_setGain
  1860                           
  1861                           ;comm.c: 470: for (i = 0; i < 11; i++) {
  1862  0076  0021               	movlb	1	; select bank1
  1863  0077  01A9               	clrf	sweep@i^(0+128)
  1864  0078                     L1:	
  1865  0078  300B               	movlw	11
  1866  0079  0229               	subwf	sweep@i^(0+128),w
  1867  007A  1803               	btfsc	3,0
  1868  007B  0008               	return
  1869                           
  1870                           ;comm.c: 473: setFreq(&asic,freq_index);
  1871  007C  0828               	movf	sweep@freq_index^(0+128),w
  1872  007D  0020               	movlb	0	; select bank0
  1873  007E  00DD               	movwf	??_sweep
  1874  007F  085D               	movf	??_sweep,w
  1875  0080  00C7               	movwf	setFreq@freq_index
  1876  0081  30B1               	movlw	(low (sweep@asic| 0))& (0+255)
  1877  0082  22D9               	fcall	_setFreq
  1878                           
  1879                           ;comm.c: 480: count = 0;
  1880  0083  0021               	movlb	1	; select bank1
  1881  0084  01AA               	clrf	sweep@count^(0+128)
  1882                           
  1883                           ;comm.c: 481: ret = 0;
  1884  0085  01B0               	clrf	sweep@ret^(0+128)
  1885  0086                     l2679:	
  1886                           ;comm.c: 483: do {
  1887                           
  1888                           
  1889                           ;comm.c: 485: ret = measure(&I,&Q,asic);
  1890  0086  30AD               	movlw	(low (sweep@Q| 0))& (0+255)
  1891  0087  0020               	movlb	0	; select bank0
  1892  0088  00DD               	movwf	??_sweep
  1893  0089  085D               	movf	??_sweep,w
  1894  008A  00CD               	movwf	measure@Q
  1895  008B  0021               	movlb	1	; select bank1
  1896  008C  0832               	movf	(sweep@asic+1)^(0+128),w
  1897  008D  0020               	movlb	0	; select bank0
  1898  008E  00CF               	movwf	measure@asic+1
  1899  008F  0021               	movlb	1	; select bank1
  1900  0090  0831               	movf	sweep@asic^(0+128),w
  1901  0091  0020               	movlb	0	; select bank0
  1902  0092  00CE               	movwf	measure@asic
  1903  0093  30AB               	movlw	(low (sweep@I| 0))& (0+255)
  1904  0094  212E               	fcall	_measure
  1905  0095  0020               	movlb	0	; select bank0
  1906  0096  00DE               	movwf	??_sweep+1
  1907  0097  085E               	movf	??_sweep+1,w
  1908  0098  0021               	movlb	1	; select bank1
  1909  0099  00B0               	movwf	sweep@ret^(0+128)
  1910                           
  1911                           ;comm.c: 487: if (ret == 1) {
  1912  009A  0330               	decf	sweep@ret^(0+128),w
  1913  009B  1D03               	btfss	3,2
  1914  009C  28B2               	goto	l2695
  1915                           
  1916                           ;comm.c: 489: if (count == 2) break;
  1917  009D  3002               	movlw	2
  1918  009E  062A               	xorwf	sweep@count^(0+128),w
  1919  009F  1903               	btfsc	3,2
  1920  00A0  28D0               	goto	l2711
  1921                           
  1922                           ;comm.c: 490: count = ret;
  1923  00A1  0830               	movf	sweep@ret^(0+128),w
  1924  00A2  0020               	movlb	0	; select bank0
  1925  00A3  00DD               	movwf	??_sweep
  1926  00A4  085D               	movf	??_sweep,w
  1927  00A5  0021               	movlb	1	; select bank1
  1928  00A6  00AA               	movwf	sweep@count^(0+128)
  1929                           
  1930                           ;comm.c: 493: if (gain_index < 7) {
  1931  00A7  3007               	movlw	7
  1932  00A8  022F               	subwf	sweep@gain_index^(0+128),w
  1933  00A9  1803               	skipnc
  1934  00AA  28D0               	goto	l2711
  1935                           
  1936                           ;comm.c: 497: gain_index++;
  1937  00AB  3001               	movlw	1
  1938  00AC  0020               	movlb	0	; select bank0
  1939  00AD  00DD               	movwf	??_sweep
  1940  00AE  085D               	movf	??_sweep,w
  1941  00AF  0021               	movlb	1	; select bank1
  1942  00B0  07AF               	addwf	sweep@gain_index^(0+128),f
  1943  00B1  28C5               	goto	L2
  1944  00B2                     l2695:	
  1945                           ;comm.c: 505: } else if (ret == 2) {
  1946                           
  1947                           ;comm.c: 501: }
  1948                           ;comm.c: 503: continue;
  1949                           
  1950                           ;comm.c: 500: break;
  1951                           
  1952                           ;comm.c: 499: } else {
  1953                           
  1954                           ;comm.c: 498: setGain(&asic,gain_index);
  1955                           
  1956  00B2  3002               	movlw	2
  1957  00B3  0021               	movlb	1	; select bank1
  1958  00B4  0630               	xorwf	sweep@ret^(0+128),w
  1959  00B5  1D03               	btfss	3,2
  1960  00B6  28CC               	goto	l2709
  1961                           
  1962                           ;comm.c: 507: if (count == 1) break;
  1963  00B7  032A               	decf	sweep@count^(0+128),w
  1964  00B8  1903               	btfsc	3,2
  1965  00B9  28D0               	goto	l2711
  1966                           
  1967                           ;comm.c: 508: count = ret;
  1968  00BA  0830               	movf	sweep@ret^(0+128),w
  1969  00BB  0020               	movlb	0	; select bank0
  1970  00BC  00DD               	movwf	??_sweep
  1971  00BD  085D               	movf	??_sweep,w
  1972  00BE  0021               	movlb	1	; select bank1
  1973  00BF  00AA               	movwf	sweep@count^(0+128)
  1974                           
  1975                           ;comm.c: 510: if (gain_index > 0) {
  1976  00C0  082F               	movf	sweep@gain_index^(0+128),w
  1977  00C1  1903               	btfsc	3,2
  1978  00C2  28D0               	goto	l2711
  1979                           
  1980                           ;comm.c: 511: gain_index--;
  1981  00C3  3001               	movlw	1
  1982  00C4  02AF               	subwf	sweep@gain_index^(0+128),f
  1983  00C5                     L2:	
  1984                           
  1985                           ;comm.c: 512: setGain(&asic,gain_index);
  1986  00C5  082F               	movf	sweep@gain_index^(0+128),w
  1987  00C6  0020               	movlb	0	; select bank0
  1988  00C7  00DD               	movwf	??_sweep
  1989  00C8  085D               	movf	??_sweep,w
  1990  00C9  00C7               	movwf	setGain@gain_index
  1991  00CA  30B1               	movlw	(low (sweep@asic| 0))& (0+255)
  1992  00CB  21E3               	fcall	_setGain
  1993  00CC                     l2709:	
  1994                           ;comm.c: 515: }
  1995                           ;comm.c: 517: continue;
  1996                           
  1997                           ;comm.c: 514: break;
  1998                           
  1999                           ;comm.c: 513: } else {
  2000                           
  2001                           
  2002                           ;comm.c: 518: }
  2003                           ;comm.c: 520: } while (ret);
  2004  00CC  0021               	movlb	1	; select bank1
  2005  00CD  0830               	movf	sweep@ret^(0+128),w
  2006  00CE  1D03               	btfss	3,2
  2007  00CF  2886               	goto	l2679
  2008  00D0                     l2711:	
  2009                           
  2010                           ;comm.c: 526: ret = (freq_index << 4) & 0xf0;
  2011  00D0  0021               	movlb	1	; select bank1
  2012  00D1  0828               	movf	sweep@freq_index^(0+128),w
  2013  00D2  0020               	movlb	0	; select bank0
  2014  00D3  00DD               	movwf	??_sweep
  2015  00D4  3003               	movlw	3
  2016  00D5                     u1425:	
  2017  00D5  35DD               	lslf	??_sweep,f
  2018  00D6  3EFF               	addlw	-1
  2019  00D7  1D03               	skipz
  2020  00D8  28D5               	goto	u1425
  2021  00D9  355D               	lslf	??_sweep,w
  2022  00DA  39F0               	andlw	240
  2023  00DB  00DE               	movwf	??_sweep+1
  2024  00DC  085E               	movf	??_sweep+1,w
  2025  00DD  0021               	movlb	1	; select bank1
  2026  00DE  00B0               	movwf	sweep@ret^(0+128)
  2027                           
  2028                           ;comm.c: 527: ret |= (gain_index & 0xff);
  2029  00DF  082F               	movf	sweep@gain_index^(0+128),w
  2030  00E0  0020               	movlb	0	; select bank0
  2031  00E1  00DD               	movwf	??_sweep
  2032  00E2  085D               	movf	??_sweep,w
  2033  00E3  0021               	movlb	1	; select bank1
  2034  00E4  04B0               	iorwf	sweep@ret^(0+128),f
  2035                           
  2036                           ;comm.c: 529: aux[0] = 'f';
  2037  00E5  3066               	movlw	102
  2038  00E6  0020               	movlb	0	; select bank0
  2039  00E7  00DD               	movwf	??_sweep
  2040  00E8  085D               	movf	??_sweep,w
  2041  00E9  0021               	movlb	1	; select bank1
  2042  00EA  00A1               	movwf	sweep@aux^(0+128)
  2043                           
  2044                           ;comm.c: 530: aux[1] = (unsigned char)(I & 0xff);
  2045  00EB  082B               	movf	sweep@I^(0+128),w
  2046  00EC  0020               	movlb	0	; select bank0
  2047  00ED  00DD               	movwf	??_sweep
  2048  00EE  085D               	movf	??_sweep,w
  2049  00EF  0021               	movlb	1	; select bank1
  2050  00F0  00A2               	movwf	(sweep@aux^(0+128)+1)
  2051                           
  2052                           ;comm.c: 531: aux[2] = (unsigned char)((I >> 8) & 0xff);
  2053  00F1  082C               	movf	(sweep@I+1)^(0+128),w
  2054  00F2  0020               	movlb	0	; select bank0
  2055  00F3  00DD               	movwf	??_sweep
  2056  00F4  085D               	movf	??_sweep,w
  2057  00F5  0021               	movlb	1	; select bank1
  2058  00F6  00A3               	movwf	(sweep@aux^(0+128)+2)
  2059                           
  2060                           ;comm.c: 532: aux[3] = (unsigned char)(Q & 0xff);
  2061  00F7  082D               	movf	sweep@Q^(0+128),w
  2062  00F8  0020               	movlb	0	; select bank0
  2063  00F9  00DD               	movwf	??_sweep
  2064  00FA  085D               	movf	??_sweep,w
  2065  00FB  0021               	movlb	1	; select bank1
  2066  00FC  00A4               	movwf	(sweep@aux^(0+128)+3)
  2067                           
  2068                           ;comm.c: 533: aux[4] = (unsigned char)((Q >> 8) & 0xff);
  2069  00FD  082E               	movf	(sweep@Q+1)^(0+128),w
  2070  00FE  0020               	movlb	0	; select bank0
  2071  00FF  00DD               	movwf	??_sweep
  2072  0100  085D               	movf	??_sweep,w
  2073  0101  0021               	movlb	1	; select bank1
  2074  0102  00A5               	movwf	(sweep@aux^(0+128)+4)
  2075                           
  2076                           ;comm.c: 534: aux[5] = ret;
  2077  0103  0830               	movf	sweep@ret^(0+128),w
  2078  0104  0020               	movlb	0	; select bank0
  2079  0105  00DD               	movwf	??_sweep
  2080  0106  085D               	movf	??_sweep,w
  2081  0107  0021               	movlb	1	; select bank1
  2082  0108  00A6               	movwf	(sweep@aux^(0+128)+5)
  2083                           
  2084                           ;comm.c: 536: check = calculate_checksum(aux,6);
  2085  0109  3006               	movlw	6
  2086  010A  0020               	movlb	0	; select bank0
  2087  010B  00DD               	movwf	??_sweep
  2088  010C  085D               	movf	??_sweep,w
  2089  010D  00C7               	movwf	calculate_checksum@num
  2090  010E  30A1               	movlw	(low (sweep@aux| 0))& (0+255)
  2091  010F  2325               	fcall	_calculate_checksum
  2092  0110  0020               	movlb	0	; select bank0
  2093  0111  00DE               	movwf	??_sweep+1
  2094  0112  085E               	movf	??_sweep+1,w
  2095  0113  0021               	movlb	1	; select bank1
  2096  0114  00A0               	movwf	sweep@check^(0+128)
  2097                           
  2098                           ;comm.c: 537: aux[6] = check;
  2099  0115  0820               	movf	sweep@check^(0+128),w
  2100  0116  0020               	movlb	0	; select bank0
  2101  0117  00DD               	movwf	??_sweep
  2102  0118  085D               	movf	??_sweep,w
  2103  0119  0021               	movlb	1	; select bank1
  2104  011A  00A7               	movwf	(sweep@aux^(0+128)+6)
  2105                           
  2106                           ;comm.c: 540: { ADCON0 = 0b00100100;};
  2107  011B  3024               	movlw	36
  2108  011C  009D               	movwf	29	;volatile
  2109                           
  2110                           ;comm.c: 542: lputs_ISR(aux,7);
  2111  011D  3007               	movlw	7
  2112  011E  0020               	movlb	0	; select bank0
  2113  011F  00DD               	movwf	??_sweep
  2114  0120  085D               	movf	??_sweep,w
  2115  0121  00C7               	movwf	lputs_ISR@length
  2116  0122  30A1               	movlw	(low (sweep@aux| 0))& (0+255)
  2117  0123  2284               	fcall	_lputs_ISR
  2118                           
  2119                           ;comm.c: 552: freq_index--;
  2120  0124  3001               	movlw	1
  2121  0125  0021               	movlb	1	; select bank1
  2122  0126  02A8               	subwf	sweep@freq_index^(0+128),f
  2123  0127  3001               	movlw	1
  2124  0128  0020               	movlb	0	; select bank0
  2125  0129  00DD               	movwf	??_sweep
  2126  012A  085D               	movf	??_sweep,w
  2127  012B  0021               	movlb	1	; select bank1
  2128  012C  07A9               	addwf	sweep@i^(0+128),f
  2129  012D  2878               	goto	L1
  2130  012E                     __end_of_sweep:	
  2131                           
  2132                           	psect	text2
  2133  01E3                     __ptext2:	
  2134 ;; *************** function _setGain *****************
  2135 ;; Defined at:
  2136 ;;		line 161 in file "bio3.c"
  2137 ;; Parameters:    Size  Location     Type
  2138 ;;  asic            1    wreg     PTR struct .
  2139 ;;		 -> sweep@asic(2), 
  2140 ;;  gain_index      1    0[BANK0 ] unsigned char 
  2141 ;; Auto vars:     Size  Location     Type
  2142 ;;  asic            1    3[BANK0 ] PTR struct .
  2143 ;;		 -> sweep@asic(2), 
  2144 ;;  aux             1    2[BANK0 ] struct .
  2145 ;; Return value:  Size  Location     Type
  2146 ;;                  1    wreg      void 
  2147 ;; Registers used:
  2148 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, pclath
  2149 ;; Tracked objects:
  2150 ;;		On entry : 0/0
  2151 ;;		On exit  : 0/0
  2152 ;;		Unchanged: 0/0
  2153 ;; Data sizes:     COMMON   BANK0   BANK1
  2154 ;;      Params:         0       1       0
  2155 ;;      Locals:         0       2       0
  2156 ;;      Temps:          0       1       0
  2157 ;;      Totals:         0       4       0
  2158 ;;Total ram usage:        4 bytes
  2159 ;; Hardware stack levels used:    1
  2160 ;; Hardware stack levels required when called:    2
  2161 ;; This function calls:
  2162 ;;		Nothing
  2163 ;; This function is called by:
  2164 ;;		_sweep
  2165 ;; This function uses a non-reentrant model
  2166 ;;
  2167                           
  2168                           
  2169                           ;psect for function _setGain
  2170  01E3                     _setGain:	
  2171                           
  2172                           ;incstack = 0
  2173                           ; Regs used in _setGain: [wreg-fsr1h+pclath]
  2174                           ;setGain@asic stored from wreg
  2175  01E3  0020               	movlb	0	; select bank0
  2176  01E4  00CA               	movwf	setGain@asic
  2177                           
  2178                           ;bio3.c: 163: RADIO_gain aux;
  2179                           ;bio3.c: 164: aux.data = gains[gain_index];
  2180  01E5  0847               	movf	setGain@gain_index,w
  2181  01E6  3E4D               	addlw	low (_gains| (0+32768))
  2182  01E7  0084               	movwf	4
  2183  01E8  3082               	movlw	high (_gains| (0+32768))
  2184  01E9  1803               	skipnc
  2185  01EA  3E01               	addlw	1
  2186  01EB  0085               	movwf	5
  2187  01EC  0800               	movf	0,w	;code access
  2188  01ED  00C8               	movwf	??_setGain
  2189  01EE  0848               	movf	??_setGain,w
  2190  01EF  00C9               	movwf	setGain@aux
  2191                           
  2192                           ;bio3.c: 166: asic->data_bits.GD0 = aux.data_bits.GD0;
  2193  01F0  084A               	movf	setGain@asic,w
  2194  01F1  0086               	movwf	6
  2195  01F2  0187               	clrf	7
  2196  01F3  1101               	bcf	1,2
  2197  01F4  1849               	btfsc	setGain@aux,0
  2198  01F5  1501               	bsf	1,2
  2199                           
  2200                           ;bio3.c: 167: asic->data_bits.GD1 = aux.data_bits.GD1;
  2201  01F6  0020               	movlb	0	; select bank0
  2202  01F7  084A               	movf	setGain@asic,w
  2203  01F8  0086               	movwf	6
  2204  01F9  0187               	clrf	7
  2205  01FA  1181               	bcf	1,3
  2206  01FB  18C9               	btfsc	setGain@aux,1
  2207  01FC  1581               	bsf	1,3
  2208                           
  2209                           ;bio3.c: 168: asic->data_bits.GD2 = aux.data_bits.GD2;
  2210  01FD  0020               	movlb	0	; select bank0
  2211  01FE  084A               	movf	setGain@asic,w
  2212  01FF  0086               	movwf	6
  2213  0200  0187               	clrf	7
  2214  0201  1201               	bcf	1,4
  2215  0202  1949               	btfsc	setGain@aux,2
  2216  0203  1601               	bsf	1,4
  2217                           
  2218                           ;bio3.c: 169: asic->data_bits.GS0 = aux.data_bits.GS0;
  2219  0204  0020               	movlb	0	; select bank0
  2220  0205  084A               	movf	setGain@asic,w
  2221  0206  0086               	movwf	6
  2222  0207  0187               	clrf	7
  2223  0208  1381               	bcf	1,7
  2224  0209  19C9               	btfsc	setGain@aux,3
  2225  020A  1781               	bsf	1,7
  2226                           
  2227                           ;bio3.c: 170: asic->data_bits.GS1 = aux.data_bits.GS1;
  2228  020B  0020               	movlb	0	; select bank0
  2229  020C  0A4A               	incf	setGain@asic,w
  2230  020D  0086               	movwf	6
  2231  020E  0187               	clrf	7
  2232  020F  1001               	bcf	1,0
  2233  0210  1A49               	btfsc	setGain@aux,4
  2234  0211  1401               	bsf	1,0
  2235                           
  2236                           ;bio3.c: 171: asic->data_bits.GS2 = aux.data_bits.GS2;
  2237  0212  0020               	movlb	0	; select bank0
  2238  0213  0A4A               	incf	setGain@asic,w
  2239  0214  0086               	movwf	6
  2240  0215  0187               	clrf	7
  2241  0216  1081               	bcf	1,1
  2242  0217  1AC9               	btfsc	setGain@aux,5
  2243  0218  1481               	bsf	1,1
  2244                           
  2245                           ;bio3.c: 172: asic->data_bits.GS3 = aux.data_bits.GS3;
  2246  0219  0020               	movlb	0	; select bank0
  2247  021A  0A4A               	incf	setGain@asic,w
  2248  021B  0086               	movwf	6
  2249  021C  0187               	clrf	7
  2250  021D  1101               	bcf	1,2
  2251  021E  1B49               	btfsc	setGain@aux,6
  2252  021F  1501               	bsf	1,2
  2253  0220  0008               	return
  2254  0221                     __end_of_setGain:	
  2255                           
  2256                           	psect	text3
  2257  02D9                     __ptext3:	
  2258 ;; *************** function _setFreq *****************
  2259 ;; Defined at:
  2260 ;;		line 175 in file "bio3.c"
  2261 ;; Parameters:    Size  Location     Type
  2262 ;;  asic            1    wreg     PTR struct .
  2263 ;;		 -> sweep@asic(2), 
  2264 ;;  freq_index      1    0[BANK0 ] unsigned char 
  2265 ;; Auto vars:     Size  Location     Type
  2266 ;;  asic            1    2[BANK0 ] PTR struct .
  2267 ;;		 -> sweep@asic(2), 
  2268 ;;  aux             1    3[BANK0 ] struct .
  2269 ;; Return value:  Size  Location     Type
  2270 ;;                  1    wreg      void 
  2271 ;; Registers used:
  2272 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, pclath
  2273 ;; Tracked objects:
  2274 ;;		On entry : 0/0
  2275 ;;		On exit  : 0/0
  2276 ;;		Unchanged: 0/0
  2277 ;; Data sizes:     COMMON   BANK0   BANK1
  2278 ;;      Params:         0       1       0
  2279 ;;      Locals:         0       2       0
  2280 ;;      Temps:          0       1       0
  2281 ;;      Totals:         0       4       0
  2282 ;;Total ram usage:        4 bytes
  2283 ;; Hardware stack levels used:    1
  2284 ;; Hardware stack levels required when called:    2
  2285 ;; This function calls:
  2286 ;;		Nothing
  2287 ;; This function is called by:
  2288 ;;		_sweep
  2289 ;; This function uses a non-reentrant model
  2290 ;;
  2291                           
  2292                           
  2293                           ;psect for function _setFreq
  2294  02D9                     _setFreq:	
  2295                           
  2296                           ;incstack = 0
  2297                           ; Regs used in _setFreq: [wreg-fsr1h+pclath]
  2298                           ;setFreq@asic stored from wreg
  2299  02D9  0020               	movlb	0	; select bank0
  2300  02DA  00C9               	movwf	setFreq@asic
  2301                           
  2302                           ;bio3.c: 177: RADIO_freq aux;
  2303                           ;bio3.c: 178: aux.data = freqs[freq_index];
  2304  02DB  0847               	movf	setFreq@freq_index,w
  2305  02DC  3E42               	addlw	low (_freqs| (0+32768))
  2306  02DD  0084               	movwf	4
  2307  02DE  3082               	movlw	high (_freqs| (0+32768))
  2308  02DF  1803               	skipnc
  2309  02E0  3E01               	addlw	1
  2310  02E1  0085               	movwf	5
  2311  02E2  0800               	movf	0,w	;code access
  2312  02E3  00C8               	movwf	??_setFreq
  2313  02E4  0848               	movf	??_setFreq,w
  2314  02E5  00CA               	movwf	setFreq@aux
  2315                           
  2316                           ;bio3.c: 180: asic->data_bits.F0 = aux.data_bits.F0;
  2317  02E6  0A49               	incf	setFreq@asic,w
  2318  02E7  0086               	movwf	6
  2319  02E8  0187               	clrf	7
  2320  02E9  1201               	bcf	1,4
  2321  02EA  184A               	btfsc	setFreq@aux,0
  2322  02EB  1601               	bsf	1,4
  2323                           
  2324                           ;bio3.c: 181: asic->data_bits.F1 = aux.data_bits.F1;
  2325  02EC  0020               	movlb	0	; select bank0
  2326  02ED  0A49               	incf	setFreq@asic,w
  2327  02EE  0086               	movwf	6
  2328  02EF  0187               	clrf	7
  2329  02F0  1281               	bcf	1,5
  2330  02F1  18CA               	btfsc	setFreq@aux,1
  2331  02F2  1681               	bsf	1,5
  2332                           
  2333                           ;bio3.c: 182: asic->data_bits.F2 = aux.data_bits.F2;
  2334  02F3  0020               	movlb	0	; select bank0
  2335  02F4  0A49               	incf	setFreq@asic,w
  2336  02F5  0086               	movwf	6
  2337  02F6  0187               	clrf	7
  2338  02F7  1301               	bcf	1,6
  2339  02F8  194A               	btfsc	setFreq@aux,2
  2340  02F9  1701               	bsf	1,6
  2341                           
  2342                           ;bio3.c: 183: asic->data_bits.F3 = aux.data_bits.F3;
  2343  02FA  0020               	movlb	0	; select bank0
  2344  02FB  0A49               	incf	setFreq@asic,w
  2345  02FC  0086               	movwf	6
  2346  02FD  0187               	clrf	7
  2347  02FE  1381               	bcf	1,7
  2348  02FF  19CA               	btfsc	setFreq@aux,3
  2349  0300  1781               	bsf	1,7
  2350  0301  0008               	return
  2351  0302                     __end_of_setFreq:	
  2352                           
  2353                           	psect	text4
  2354  012E                     __ptext4:	
  2355 ;; *************** function _measure *****************
  2356 ;; Defined at:
  2357 ;;		line 561 in file "comm.c"
  2358 ;; Parameters:    Size  Location     Type
  2359 ;;  I               1    wreg     PTR short 
  2360 ;;		 -> sweep@I(2), 
  2361 ;;  Q               1    6[BANK0 ] PTR short 
  2362 ;;		 -> sweep@Q(2), 
  2363 ;;  asic            2    7[BANK0 ] struct .
  2364 ;; Auto vars:     Size  Location     Type
  2365 ;;  I               1   15[BANK0 ] PTR short 
  2366 ;;		 -> sweep@I(2), 
  2367 ;;  aux1            2   20[BANK0 ] short 
  2368 ;;  aux2            2   18[BANK0 ] short 
  2369 ;;  value           2   16[BANK0 ] unsigned short 
  2370 ;;  offset          2   13[BANK0 ] unsigned short 
  2371 ;; Return value:  Size  Location     Type
  2372 ;;                  1    wreg      unsigned char 
  2373 ;; Registers used:
  2374 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2375 ;; Tracked objects:
  2376 ;;		On entry : 0/0
  2377 ;;		On exit  : 0/0
  2378 ;;		Unchanged: 0/0
  2379 ;; Data sizes:     COMMON   BANK0   BANK1
  2380 ;;      Params:         0       3       0
  2381 ;;      Locals:         0       9       0
  2382 ;;      Temps:          0       4       0
  2383 ;;      Totals:         0      16       0
  2384 ;;Total ram usage:       16 bytes
  2385 ;; Hardware stack levels used:    1
  2386 ;; Hardware stack levels required when called:    3
  2387 ;; This function calls:
  2388 ;;		_ADC_5
  2389 ;;		_config
  2390 ;; This function is called by:
  2391 ;;		_sweep
  2392 ;; This function uses a non-reentrant model
  2393 ;;
  2394                           
  2395                           
  2396                           ;psect for function _measure
  2397  012E                     _measure:	
  2398                           
  2399                           ;incstack = 0
  2400                           ; Regs used in _measure: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2401                           ;measure@I stored from wreg
  2402  012E  0020               	movlb	0	; select bank0
  2403  012F  00D6               	movwf	measure@I
  2404                           
  2405                           ;comm.c: 566: unsigned short offset, value;
  2406                           ;comm.c: 567: short aux1,aux2;
  2407                           ;comm.c: 571: asic.data_bits.CE = 0;
  2408  0130  134E               	bcf	measure@asic,6
  2409                           
  2410                           ;comm.c: 572: config(asic);
  2411  0131  084F               	movf	measure@asic+1,w
  2412  0132  00C8               	movwf	config@conf+1
  2413  0133  084E               	movf	measure@asic,w
  2414  0134  00C7               	movwf	config@conf
  2415  0135  2255               	fcall	_config
  2416                           
  2417                           ;comm.c: 573: _delay((unsigned long)((20)*(500000/4000.0)));
  2418  0136  3004               	movlw	4
  2419  0137  0020               	movlb	0	; select bank0
  2420  0138  00D0               	movwf	??_measure
  2421  0139  303D               	movlw	61
  2422  013A                     u1497:	
  2423  013A  0B89               	decfsz	9,f
  2424  013B  293A               	goto	u1497
  2425  013C  0BD0               	decfsz	??_measure,f
  2426  013D  293A               	goto	u1497
  2427  013E  3200               	nop2
  2428                           
  2429                           ;comm.c: 575: offset = ADC_5();
  2430  013F  2302               	fcall	_ADC_5
  2431  0140  0020               	movlb	0	; select bank0
  2432  0141  0848               	movf	?_ADC_5+1,w
  2433  0142  00D5               	movwf	measure@offset+1
  2434  0143  0847               	movf	?_ADC_5,w
  2435  0144  00D4               	movwf	measure@offset
  2436                           
  2437                           ;comm.c: 578: asic.data_bits.CE = 1;
  2438  0145  174E               	bsf	measure@asic,6
  2439                           
  2440                           ;comm.c: 579: asic.data_bits.IQ = 0;
  2441  0146  11CF               	bcf	measure@asic+1,3
  2442                           
  2443                           ;comm.c: 581: config(asic);
  2444  0147  084F               	movf	measure@asic+1,w
  2445  0148  00C8               	movwf	config@conf+1
  2446  0149  084E               	movf	measure@asic,w
  2447  014A  00C7               	movwf	config@conf
  2448  014B  2255               	fcall	_config
  2449                           
  2450                           ;comm.c: 582: _delay((unsigned long)((20)*(500000/4000.0)));
  2451  014C  3004               	movlw	4
  2452  014D  0020               	movlb	0	; select bank0
  2453  014E  00D0               	movwf	??_measure
  2454  014F  303D               	movlw	61
  2455  0150                     u1507:	
  2456  0150  0B89               	decfsz	9,f
  2457  0151  2950               	goto	u1507
  2458  0152  0BD0               	decfsz	??_measure,f
  2459  0153  2950               	goto	u1507
  2460  0154  3200               	nop2
  2461                           
  2462                           ;comm.c: 584: value = ADC_5();
  2463  0155  2302               	fcall	_ADC_5
  2464  0156  0020               	movlb	0	; select bank0
  2465  0157  0848               	movf	?_ADC_5+1,w
  2466  0158  00D8               	movwf	measure@value+1
  2467  0159  0847               	movf	?_ADC_5,w
  2468  015A  00D7               	movwf	measure@value
  2469                           
  2470                           ;comm.c: 585: *I = (value - offset);
  2471  015B  0954               	comf	measure@offset,w
  2472  015C  00D0               	movwf	??_measure
  2473  015D  0955               	comf	measure@offset+1,w
  2474  015E  00D1               	movwf	??_measure+1
  2475  015F  0AD0               	incf	??_measure,f
  2476  0160  1903               	skipnz
  2477  0161  0AD1               	incf	??_measure+1,f
  2478  0162  0857               	movf	measure@value,w
  2479  0163  0750               	addwf	??_measure,w
  2480  0164  00D2               	movwf	??_measure+2
  2481  0165  0858               	movf	measure@value+1,w
  2482  0166  3D51               	addwfc	??_measure+1,w
  2483  0167  00D3               	movwf	??_measure+3
  2484  0168  0856               	movf	measure@I,w
  2485  0169  0086               	movwf	6
  2486  016A  0187               	clrf	7
  2487  016B  0852               	movf	??_measure+2,w
  2488  016C  3FC0               	movwi [0]fsr1
  2489  016D  0853               	movf	??_measure+3,w
  2490  016E  3FC1               	movwi [1]fsr1
  2491                           
  2492                           ;comm.c: 586: aux1 = *I;
  2493  016F  0856               	movf	measure@I,w
  2494  0170  0086               	movwf	6
  2495  0171  0187               	clrf	7
  2496  0172  3F40               	moviw [0]fsr1
  2497  0173  00DB               	movwf	measure@aux1
  2498  0174  3F41               	moviw [1]fsr1
  2499  0175  00DC               	movwf	measure@aux1+1
  2500                           
  2501                           ;comm.c: 588: if (aux1 < 0) {
  2502  0176  1FDC               	btfss	measure@aux1+1,7
  2503  0177  297D               	goto	l2569
  2504                           
  2505                           ;comm.c: 589: aux1 = -aux1;
  2506  0178  09DB               	comf	measure@aux1,f
  2507  0179  09DC               	comf	measure@aux1+1,f
  2508  017A  0ADB               	incf	measure@aux1,f
  2509  017B  1903               	skipnz
  2510  017C  0ADC               	incf	measure@aux1+1,f
  2511  017D                     l2569:	
  2512                           
  2513                           ;comm.c: 590: }
  2514                           ;comm.c: 595: asic.data_bits.IQ = 1;
  2515  017D  15CF               	bsf	measure@asic+1,3
  2516                           
  2517                           ;comm.c: 597: config(asic);
  2518  017E  084F               	movf	measure@asic+1,w
  2519  017F  00C8               	movwf	config@conf+1
  2520  0180  084E               	movf	measure@asic,w
  2521  0181  00C7               	movwf	config@conf
  2522  0182  2255               	fcall	_config
  2523                           
  2524                           ;comm.c: 598: _delay((unsigned long)((20)*(500000/4000.0)));
  2525  0183  3004               	movlw	4
  2526  0184  0020               	movlb	0	; select bank0
  2527  0185  00D0               	movwf	??_measure
  2528  0186  303D               	movlw	61
  2529  0187                     u1517:	
  2530  0187  0B89               	decfsz	9,f
  2531  0188  2987               	goto	u1517
  2532  0189  0BD0               	decfsz	??_measure,f
  2533  018A  2987               	goto	u1517
  2534  018B  3200               	nop2
  2535                           
  2536                           ;comm.c: 600: value = ADC_5();
  2537  018C  2302               	fcall	_ADC_5
  2538  018D  0020               	movlb	0	; select bank0
  2539  018E  0848               	movf	?_ADC_5+1,w
  2540  018F  00D8               	movwf	measure@value+1
  2541  0190  0847               	movf	?_ADC_5,w
  2542  0191  00D7               	movwf	measure@value
  2543                           
  2544                           ;comm.c: 601: *Q = (value - offset);
  2545  0192  0954               	comf	measure@offset,w
  2546  0193  00D0               	movwf	??_measure
  2547  0194  0955               	comf	measure@offset+1,w
  2548  0195  00D1               	movwf	??_measure+1
  2549  0196  0AD0               	incf	??_measure,f
  2550  0197  1903               	skipnz
  2551  0198  0AD1               	incf	??_measure+1,f
  2552  0199  0857               	movf	measure@value,w
  2553  019A  0750               	addwf	??_measure,w
  2554  019B  00D2               	movwf	??_measure+2
  2555  019C  0858               	movf	measure@value+1,w
  2556  019D  3D51               	addwfc	??_measure+1,w
  2557  019E  00D3               	movwf	??_measure+3
  2558  019F  084D               	movf	measure@Q,w
  2559  01A0  0086               	movwf	6
  2560  01A1  0187               	clrf	7
  2561  01A2  0852               	movf	??_measure+2,w
  2562  01A3  3FC0               	movwi [0]fsr1
  2563  01A4  0853               	movf	??_measure+3,w
  2564  01A5  3FC1               	movwi [1]fsr1
  2565                           
  2566                           ;comm.c: 602: aux2 = *Q;
  2567  01A6  084D               	movf	measure@Q,w
  2568  01A7  0086               	movwf	6
  2569  01A8  0187               	clrf	7
  2570  01A9  3F40               	moviw [0]fsr1
  2571  01AA  00D9               	movwf	measure@aux2
  2572  01AB  3F41               	moviw [1]fsr1
  2573  01AC  00DA               	movwf	measure@aux2+1
  2574                           
  2575                           ;comm.c: 604: if (aux2 < 0) {
  2576  01AD  1FDA               	btfss	measure@aux2+1,7
  2577  01AE  29B4               	goto	l2585
  2578                           
  2579                           ;comm.c: 605: aux2 = -aux2;
  2580  01AF  09D9               	comf	measure@aux2,f
  2581  01B0  09DA               	comf	measure@aux2+1,f
  2582  01B1  0AD9               	incf	measure@aux2,f
  2583  01B2  1903               	skipnz
  2584  01B3  0ADA               	incf	measure@aux2+1,f
  2585  01B4                     l2585:	
  2586                           
  2587                           ;comm.c: 606: }
  2588                           ;comm.c: 608: if (aux2 > aux1) {
  2589  01B4  085C               	movf	measure@aux1+1,w
  2590  01B5  3A80               	xorlw	128
  2591  01B6  00D0               	movwf	??_measure
  2592  01B7  085A               	movf	measure@aux2+1,w
  2593  01B8  3A80               	xorlw	128
  2594  01B9  0250               	subwf	??_measure,w
  2595  01BA  1D03               	skipz
  2596  01BB  29BE               	goto	u1315
  2597  01BC  0859               	movf	measure@aux2,w
  2598  01BD  025B               	subwf	measure@aux1,w
  2599  01BE                     u1315:	
  2600  01BE  1803               	skipnc
  2601  01BF  29C5               	goto	l412
  2602                           
  2603                           ;comm.c: 609: aux1 = aux2;
  2604  01C0  0020               	movlb	0	; select bank0
  2605  01C1  085A               	movf	measure@aux2+1,w
  2606  01C2  00DC               	movwf	measure@aux1+1
  2607  01C3  0859               	movf	measure@aux2,w
  2608  01C4  00DB               	movwf	measure@aux1
  2609  01C5                     l412:	
  2610                           
  2611                           ;comm.c: 610: }
  2612                           ;comm.c: 612: if (aux1 > 370) {
  2613  01C5  0020               	movlb	0	; select bank0
  2614  01C6  085C               	movf	measure@aux1+1,w
  2615  01C7  3A80               	xorlw	128
  2616  01C8  00D0               	movwf	??_measure
  2617  01C9  3081               	movlw	129
  2618  01CA  0250               	subwf	??_measure,w
  2619  01CB  1D03               	skipz
  2620  01CC  29CF               	goto	u1325
  2621  01CD  3073               	movlw	115
  2622  01CE  025B               	subwf	measure@aux1,w
  2623  01CF                     u1325:	
  2624  01CF  1C03               	skipc
  2625  01D0  29D3               	goto	l2595
  2626                           
  2627                           ;comm.c: 613: return 2;
  2628  01D1  3002               	movlw	2
  2629  01D2  0008               	return
  2630  01D3                     l2595:	
  2631                           ;comm.c: 614: } else if (aux1 < 86) {
  2632                           
  2633  01D3  0020               	movlb	0	; select bank0
  2634  01D4  085C               	movf	measure@aux1+1,w
  2635  01D5  3A80               	xorlw	128
  2636  01D6  00D0               	movwf	??_measure
  2637  01D7  3080               	movlw	128
  2638  01D8  0250               	subwf	??_measure,w
  2639  01D9  1D03               	skipz
  2640  01DA  29DD               	goto	u1335
  2641  01DB  3056               	movlw	86
  2642  01DC  025B               	subwf	measure@aux1,w
  2643  01DD                     u1335:	
  2644  01DD  1803               	skipnc
  2645  01DE  29E1               	goto	l2601
  2646                           
  2647                           ;comm.c: 615: return 1;
  2648  01DF  3001               	movlw	1
  2649  01E0  0008               	return
  2650  01E1                     l2601:	
  2651                           
  2652                           ;comm.c: 616: }
  2653                           ;comm.c: 618: return 0;
  2654  01E1  3000               	movlw	0
  2655  01E2  0008               	return
  2656  01E3                     __end_of_measure:	
  2657                           
  2658                           	psect	text5
  2659  0255                     __ptext5:	
  2660 ;; *************** function _config *****************
  2661 ;; Defined at:
  2662 ;;		line 131 in file "bio3.c"
  2663 ;; Parameters:    Size  Location     Type
  2664 ;;  conf            2    0[BANK0 ] struct .
  2665 ;; Auto vars:     Size  Location     Type
  2666 ;;  out             1    4[BANK0 ] unsigned char 
  2667 ;;  i               1    3[BANK0 ] unsigned char 
  2668 ;; Return value:  Size  Location     Type
  2669 ;;                  1    wreg      void 
  2670 ;; Registers used:
  2671 ;;		wreg, status,2, status,0
  2672 ;; Tracked objects:
  2673 ;;		On entry : 0/0
  2674 ;;		On exit  : 0/0
  2675 ;;		Unchanged: 0/0
  2676 ;; Data sizes:     COMMON   BANK0   BANK1
  2677 ;;      Params:         0       2       0
  2678 ;;      Locals:         0       2       0
  2679 ;;      Temps:          0       1       0
  2680 ;;      Totals:         0       5       0
  2681 ;;Total ram usage:        5 bytes
  2682 ;; Hardware stack levels used:    1
  2683 ;; Hardware stack levels required when called:    2
  2684 ;; This function calls:
  2685 ;;		Nothing
  2686 ;; This function is called by:
  2687 ;;		_measure
  2688 ;;		_config_ASIC
  2689 ;;		_measure_Impedance
  2690 ;;		_measure_Impedance_no_offset
  2691 ;;		_measure_Offset
  2692 ;;		_measure_Impedance_SE
  2693 ;; This function uses a non-reentrant model
  2694 ;;
  2695                           
  2696                           
  2697                           ;psect for function _config
  2698  0255                     _config:	
  2699                           
  2700                           ;bio3.c: 133: unsigned char i, out;
  2701                           ;bio3.c: 135: out &= 0b11110111; PORTC = out;;
  2702                           
  2703                           ;incstack = 0
  2704                           ; Regs used in _config: [wreg+status,2+status,0]
  2705  0255  30F7               	movlw	247
  2706  0256  0020               	movlb	0	; select bank0
  2707  0257  00C9               	movwf	??_config
  2708  0258  0849               	movf	??_config,w
  2709  0259  05CB               	andwf	config@out,f
  2710  025A  084B               	movf	config@out,w
  2711  025B  008E               	movwf	14	;volatile
  2712                           
  2713                           ;bio3.c: 138: RA5 = 0;;
  2714                           
  2715                           ;bio3.c: 136: _delay((unsigned long)((5)*(500000/4000000.0)));
  2716  025C  0020               	movlb	0	; select bank0
  2717  025D  128C               	bcf	12,5	;volatile
  2718                           
  2719                           ;bio3.c: 141: RA5 = 1;;
  2720                           
  2721                           ;bio3.c: 139: _delay((unsigned long)((5)*(500000/4000000.0)));
  2722  025E  0020               	movlb	0	; select bank0
  2723  025F  168C               	bsf	12,5	;volatile
  2724                           
  2725                           ;bio3.c: 143: for(i = 0; i < 16; i++) {
  2726  0260  01CA               	clrf	config@i
  2727  0261                     L3:	
  2728  0261  3010               	movlw	16
  2729  0262  024A               	subwf	config@i,w
  2730  0263  1803               	btfsc	3,0
  2731  0264  0008               	return
  2732                           
  2733                           ;bio3.c: 144: if (conf.datashort & 0x0001) {
  2734  0265  1C47               	btfss	config@conf,0
  2735  0266  2A69               	goto	l2427
  2736                           
  2737                           ;bio3.c: 145: out |= 0b00000100; PORTC = out;;
  2738  0267  154B               	bsf	config@out,2
  2739  0268  2A6D               	goto	l2429
  2740  0269                     l2427:	
  2741                           ;bio3.c: 146: } else {
  2742                           
  2743                           
  2744                           ;bio3.c: 147: out &= 0b11111011; PORTC = out;;
  2745  0269  30FB               	movlw	251
  2746  026A  00C9               	movwf	??_config
  2747  026B  0849               	movf	??_config,w
  2748  026C  05CB               	andwf	config@out,f
  2749  026D                     l2429:	
  2750  026D  084B               	movf	config@out,w
  2751  026E  008E               	movwf	14	;volatile
  2752                           
  2753                           ;bio3.c: 148: }
  2754                           ;bio3.c: 149: conf.datashort >>= 1;
  2755  026F  3001               	movlw	1
  2756  0270                     u1115:	
  2757  0270  36C8               	lsrf	config@conf+1,f
  2758  0271  0CC7               	rrf	config@conf,f
  2759  0272  0B89               	decfsz	9,f
  2760  0273  2A70               	goto	u1115
  2761                           
  2762                           ;bio3.c: 153: out |= 0b00001000; PORTC = out;;
  2763                           
  2764                           ;bio3.c: 151: _delay((unsigned long)((5)*(500000/4000000.0)));
  2765  0274  0020               	movlb	0	; select bank0
  2766  0275  15CB               	bsf	config@out,3
  2767  0276  084B               	movf	config@out,w
  2768  0277  008E               	movwf	14	;volatile
  2769                           
  2770                           ;bio3.c: 155: out &= 0b11110111; PORTC = out;;
  2771                           
  2772                           ;bio3.c: 154: _delay((unsigned long)((5)*(500000/4000000.0)));
  2773  0278  30F7               	movlw	247
  2774  0279  0020               	movlb	0	; select bank0
  2775  027A  00C9               	movwf	??_config
  2776  027B  0849               	movf	??_config,w
  2777  027C  05CB               	andwf	config@out,f
  2778  027D  084B               	movf	config@out,w
  2779  027E  008E               	movwf	14	;volatile
  2780  027F  3001               	movlw	1
  2781  0280  00C9               	movwf	??_config
  2782  0281  0849               	movf	??_config,w
  2783  0282  07CA               	addwf	config@i,f
  2784  0283  2A61               	goto	L3
  2785  0284                     __end_of_config:	
  2786                           
  2787                           	psect	text6
  2788  0302                     __ptext6:	
  2789 ;; *************** function _ADC_5 *****************
  2790 ;; Defined at:
  2791 ;;		line 48 in file "ADC1823.c"
  2792 ;; Parameters:    Size  Location     Type
  2793 ;;		None
  2794 ;; Auto vars:     Size  Location     Type
  2795 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  2796 ;; Return value:  Size  Location     Type
  2797 ;;                  2    0[BANK0 ] unsigned short 
  2798 ;; Registers used:
  2799 ;;		wreg
  2800 ;; Tracked objects:
  2801 ;;		On entry : 0/0
  2802 ;;		On exit  : 0/0
  2803 ;;		Unchanged: 0/0
  2804 ;; Data sizes:     COMMON   BANK0   BANK1
  2805 ;;      Params:         0       2       0
  2806 ;;      Locals:         0       2       0
  2807 ;;      Temps:          0       2       0
  2808 ;;      Totals:         0       6       0
  2809 ;;Total ram usage:        6 bytes
  2810 ;; Hardware stack levels used:    1
  2811 ;; Hardware stack levels required when called:    2
  2812 ;; This function calls:
  2813 ;;		Nothing
  2814 ;; This function is called by:
  2815 ;;		_measure
  2816 ;;		_read_ADC_channels
  2817 ;;		_measure_Impedance_SE
  2818 ;; This function uses a non-reentrant model
  2819 ;;
  2820                           
  2821                           
  2822                           ;psect for function _ADC_5
  2823  0302                     _ADC_5:	
  2824                           
  2825                           ;ADC1823.c: 50: unsigned short ADC_value;
  2826                           ;ADC1823.c: 52: { ADCON0 = 0b00010101;};
  2827                           
  2828                           ;incstack = 0
  2829                           ; Regs used in _ADC_5: [wreg]
  2830  0302  3015               	movlw	21
  2831  0303  0021               	movlb	1	; select bank1
  2832  0304  009D               	movwf	29	;volatile
  2833                           
  2834                           ;ADC1823.c: 53: __nop();
  2835  0305  0000               	nop
  2836                           
  2837                           ;ADC1823.c: 54: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  2838  0306  0021               	movlb	1	; select bank1
  2839  0307  149D               	bsf	29,1	;volatile
  2840  0308                     l446:	
  2841  0308  189D               	btfsc	29,1	;volatile
  2842  0309  2B08               	goto	l446
  2843  030A  081C               	movf	28,w	;volatile
  2844  030B  0020               	movlb	0	; select bank0
  2845  030C  00C9               	movwf	??_ADC_5
  2846  030D  01CA               	clrf	??_ADC_5+1
  2847  030E  0849               	movf	??_ADC_5,w
  2848  030F  00CB               	movwf	ADC_5@ADC_value
  2849  0310  084A               	movf	??_ADC_5+1,w
  2850  0311  00CC               	movwf	ADC_5@ADC_value+1
  2851  0312  3008               	movlw	8
  2852  0313                     u1145:	
  2853  0313  35CB               	lslf	ADC_5@ADC_value,f
  2854  0314  0DCC               	rlf	ADC_5@ADC_value+1,f
  2855  0315  0B89               	decfsz	9,f
  2856  0316  2B13               	goto	u1145
  2857  0317  0021               	movlb	1	; select bank1
  2858  0318  081B               	movf	27,w	;volatile
  2859  0319  0020               	movlb	0	; select bank0
  2860  031A  00C9               	movwf	??_ADC_5
  2861  031B  01CA               	clrf	??_ADC_5+1
  2862  031C  0849               	movf	??_ADC_5,w
  2863  031D  04CB               	iorwf	ADC_5@ADC_value,f
  2864  031E  084A               	movf	??_ADC_5+1,w
  2865  031F  04CC               	iorwf	ADC_5@ADC_value+1,f
  2866                           
  2867                           ;ADC1823.c: 56: return ADC_value;
  2868  0320  084C               	movf	ADC_5@ADC_value+1,w
  2869  0321  00C8               	movwf	?_ADC_5+1
  2870  0322  084B               	movf	ADC_5@ADC_value,w
  2871  0323  00C7               	movwf	?_ADC_5
  2872  0324  0008               	return
  2873  0325                     __end_of_ADC_5:	
  2874                           
  2875                           	psect	text7
  2876  0284                     __ptext7:	
  2877 ;; *************** function _lputs_ISR *****************
  2878 ;; Defined at:
  2879 ;;		line 132 in file "USART1823.c"
  2880 ;; Parameters:    Size  Location     Type
  2881 ;;  data            1    wreg     PTR unsigned char 
  2882 ;;		 -> sweep@aux(7), calibrate_reader@aux(8), measure_Impedance_SE@aux(8), measure_Offset@aux(5), 
  2883 ;;		 -> measure_Impedance_no_offset@aux(13), measure_Impedance@aux(13), read_ADC_channels@aux(7), mess_rec(10), 
  2884 ;;  length          1    0[BANK0 ] unsigned char 
  2885 ;; Auto vars:     Size  Location     Type
  2886 ;;  data            1    4[BANK0 ] PTR unsigned char 
  2887 ;;		 -> sweep@aux(7), calibrate_reader@aux(8), measure_Impedance_SE@aux(8), measure_Offset@aux(5), 
  2888 ;;		 -> measure_Impedance_no_offset@aux(13), measure_Impedance@aux(13), read_ADC_channels@aux(7), mess_rec(10), 
  2889 ;;  i               1    3[BANK0 ] unsigned char 
  2890 ;; Return value:  Size  Location     Type
  2891 ;;                  1    wreg      void 
  2892 ;; Registers used:
  2893 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2894 ;; Tracked objects:
  2895 ;;		On entry : 0/0
  2896 ;;		On exit  : 0/0
  2897 ;;		Unchanged: 0/0
  2898 ;; Data sizes:     COMMON   BANK0   BANK1
  2899 ;;      Params:         0       1       0
  2900 ;;      Locals:         0       2       0
  2901 ;;      Temps:          0       2       0
  2902 ;;      Totals:         0       5       0
  2903 ;;Total ram usage:        5 bytes
  2904 ;; Hardware stack levels used:    1
  2905 ;; Hardware stack levels required when called:    3
  2906 ;; This function calls:
  2907 ;;		_close_RX_USART
  2908 ;; This function is called by:
  2909 ;;		_sweep
  2910 ;;		_mess_handler
  2911 ;;		_config_ASIC
  2912 ;;		_read_ADC_channels
  2913 ;;		_measure_Impedance
  2914 ;;		_measure_Impedance_no_offset
  2915 ;;		_measure_Offset
  2916 ;;		_measure_Impedance_SE
  2917 ;;		_calibrate_reader
  2918 ;; This function uses a non-reentrant model
  2919 ;;
  2920                           
  2921                           
  2922                           ;psect for function _lputs_ISR
  2923  0284                     _lputs_ISR:	
  2924                           
  2925                           ;incstack = 0
  2926                           ; Regs used in _lputs_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2927                           ;lputs_ISR@data stored from wreg
  2928  0284  0020               	movlb	0	; select bank0
  2929  0285  00CB               	movwf	lputs_ISR@data
  2930                           
  2931                           ;USART1823.c: 134: unsigned char i;
  2932                           ;USART1823.c: 136: if (USART_tx_flag == 1)
  2933  0286  0372               	decf	_USART_tx_flag,w	;volatile
  2934  0287  1903               	btfsc	3,2
  2935  0288  0008               	return
  2936                           
  2937                           ;USART1823.c: 139: for (i = 0; i < length; i++)
  2938                           
  2939                           ;USART1823.c: 137: return;
  2940  0289  01CA               	clrf	lputs_ISR@i
  2941  028A                     l2521:	
  2942  028A  0847               	movf	lputs_ISR@length,w
  2943  028B  024A               	subwf	lputs_ISR@i,w
  2944  028C  1803               	btfsc	3,0
  2945  028D  2AA1               	goto	l2523
  2946                           
  2947                           ;USART1823.c: 140: USART_tx_data[i] = data[i];
  2948  028E  084A               	movf	lputs_ISR@i,w
  2949  028F  074B               	addwf	lputs_ISR@data,w
  2950  0290  00C8               	movwf	??_lputs_ISR
  2951  0291  0848               	movf	??_lputs_ISR,w
  2952  0292  0086               	movwf	6
  2953  0293  0187               	clrf	7
  2954  0294  0801               	movf	1,w
  2955  0295  00C9               	movwf	??_lputs_ISR+1
  2956  0296  084A               	movf	lputs_ISR@i,w
  2957  0297  3E20               	addlw	(low (_USART_tx_data| 0))& (0+255)
  2958  0298  0086               	movwf	6
  2959  0299  0187               	clrf	7
  2960  029A  0849               	movf	??_lputs_ISR+1,w
  2961  029B  0081               	movwf	1
  2962  029C  3001               	movlw	1
  2963  029D  00C8               	movwf	??_lputs_ISR
  2964  029E  0848               	movf	??_lputs_ISR,w
  2965  029F  07CA               	addwf	lputs_ISR@i,f
  2966  02A0  2A8A               	goto	l2521
  2967  02A1                     l2523:	
  2968                           
  2969                           ;USART1823.c: 142: close_RX_USART();
  2970  02A1  2398               	fcall	_close_RX_USART
  2971                           
  2972                           ;USART1823.c: 144: USART_tx_index = 0;
  2973  02A2  01F3               	clrf	_USART_tx_index	;volatile
  2974                           
  2975                           ;USART1823.c: 145: USART_tx_length = length;
  2976  02A3  0020               	movlb	0	; select bank0
  2977  02A4  0847               	movf	lputs_ISR@length,w
  2978  02A5  00C8               	movwf	??_lputs_ISR
  2979  02A6  0848               	movf	??_lputs_ISR,w
  2980  02A7  00F4               	movwf	_USART_tx_length	;volatile
  2981                           
  2982                           ;USART1823.c: 147: USART_tx_flag = 1;
  2983  02A8  3001               	movlw	1
  2984  02A9  00C8               	movwf	??_lputs_ISR
  2985  02AA  0848               	movf	??_lputs_ISR,w
  2986  02AB  00F2               	movwf	_USART_tx_flag	;volatile
  2987                           
  2988                           ;USART1823.c: 148: TXIE = 1;
  2989  02AC  0021               	movlb	1	; select bank1
  2990  02AD  1611               	bsf	17,4	;volatile
  2991  02AE  0008               	return
  2992  02AF                     __end_of_lputs_ISR:	
  2993                           
  2994                           	psect	text8
  2995  0398                     __ptext8:	
  2996 ;; *************** function _close_RX_USART *****************
  2997 ;; Defined at:
  2998 ;;		line 35 in file "USART1823.c"
  2999 ;; Parameters:    Size  Location     Type
  3000 ;;		None
  3001 ;; Auto vars:     Size  Location     Type
  3002 ;;		None
  3003 ;; Return value:  Size  Location     Type
  3004 ;;                  1    wreg      void 
  3005 ;; Registers used:
  3006 ;;		status,2
  3007 ;; Tracked objects:
  3008 ;;		On entry : 0/0
  3009 ;;		On exit  : 0/0
  3010 ;;		Unchanged: 0/0
  3011 ;; Data sizes:     COMMON   BANK0   BANK1
  3012 ;;      Params:         0       0       0
  3013 ;;      Locals:         0       0       0
  3014 ;;      Temps:          0       0       0
  3015 ;;      Totals:         0       0       0
  3016 ;;Total ram usage:        0 bytes
  3017 ;; Hardware stack levels used:    1
  3018 ;; Hardware stack levels required when called:    2
  3019 ;; This function calls:
  3020 ;;		Nothing
  3021 ;; This function is called by:
  3022 ;;		_lputs_ISR
  3023 ;; This function uses a non-reentrant model
  3024 ;;
  3025                           
  3026                           
  3027                           ;psect for function _close_RX_USART
  3028  0398                     _close_RX_USART:	
  3029                           
  3030                           ;USART1823.c: 39: RCIE = 0;
  3031                           
  3032                           ;incstack = 0
  3033                           ; Regs used in _close_RX_USART: [status,2]
  3034  0398  0021               	movlb	1	; select bank1
  3035  0399  1291               	bcf	17,5	;volatile
  3036                           
  3037                           ;USART1823.c: 40: CREN = 0;
  3038  039A  0023               	movlb	3	; select bank3
  3039  039B  121D               	bcf	29,4	;volatile
  3040                           
  3041                           ;USART1823.c: 41: USART_rx_index = 0;
  3042  039C  0020               	movlb	0	; select bank0
  3043  039D  01BB               	clrf	_USART_rx_index	;volatile
  3044  039E  0008               	return
  3045  039F                     __end_of_close_RX_USART:	
  3046                           
  3047                           	psect	text9
  3048  0325                     __ptext9:	
  3049 ;; *************** function _calculate_checksum *****************
  3050 ;; Defined at:
  3051 ;;		line 407 in file "comm.c"
  3052 ;; Parameters:    Size  Location     Type
  3053 ;;  data            1    wreg     PTR unsigned char 
  3054 ;;		 -> sweep@aux(7), measure_Impedance_SE@aux(8), mess_rec(10), 
  3055 ;;  num             1    0[BANK0 ] unsigned char 
  3056 ;; Auto vars:     Size  Location     Type
  3057 ;;  data            1    4[BANK0 ] PTR unsigned char 
  3058 ;;		 -> sweep@aux(7), measure_Impedance_SE@aux(8), mess_rec(10), 
  3059 ;;  i               1    5[BANK0 ] unsigned char 
  3060 ;;  check           1    3[BANK0 ] unsigned char 
  3061 ;; Return value:  Size  Location     Type
  3062 ;;                  1    wreg      unsigned char 
  3063 ;; Registers used:
  3064 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3065 ;; Tracked objects:
  3066 ;;		On entry : 0/0
  3067 ;;		On exit  : 0/0
  3068 ;;		Unchanged: 0/0
  3069 ;; Data sizes:     COMMON   BANK0   BANK1
  3070 ;;      Params:         0       1       0
  3071 ;;      Locals:         0       3       0
  3072 ;;      Temps:          0       2       0
  3073 ;;      Totals:         0       6       0
  3074 ;;Total ram usage:        6 bytes
  3075 ;; Hardware stack levels used:    1
  3076 ;; Hardware stack levels required when called:    2
  3077 ;; This function calls:
  3078 ;;		Nothing
  3079 ;; This function is called by:
  3080 ;;		_sweep
  3081 ;;		_measure_Impedance_SE
  3082 ;; This function uses a non-reentrant model
  3083 ;;
  3084                           
  3085                           
  3086                           ;psect for function _calculate_checksum
  3087  0325                     _calculate_checksum:	
  3088                           
  3089                           ;incstack = 0
  3090                           ; Regs used in _calculate_checksum: [wreg+fsr1l+fsr1h+status,2+status,0]
  3091                           ;calculate_checksum@data stored from wreg
  3092  0325  0020               	movlb	0	; select bank0
  3093  0326  00CB               	movwf	calculate_checksum@data
  3094                           
  3095                           ;comm.c: 409: unsigned char check, i;
  3096                           ;comm.c: 411: check = 0;
  3097  0327  01CA               	clrf	calculate_checksum@check
  3098                           
  3099                           ;comm.c: 412: for (i = 0; i < num; i++) {
  3100  0328  01CC               	clrf	calculate_checksum@i
  3101  0329                     l2539:	
  3102  0329  0847               	movf	calculate_checksum@num,w
  3103  032A  024C               	subwf	calculate_checksum@i,w
  3104  032B  1803               	btfsc	3,0
  3105  032C  2B3C               	goto	l2541
  3106                           
  3107                           ;comm.c: 413: check ^= data[i];
  3108  032D  084C               	movf	calculate_checksum@i,w
  3109  032E  074B               	addwf	calculate_checksum@data,w
  3110  032F  00C8               	movwf	??_calculate_checksum
  3111  0330  0848               	movf	??_calculate_checksum,w
  3112  0331  0086               	movwf	6
  3113  0332  0187               	clrf	7
  3114  0333  0801               	movf	1,w
  3115  0334  00C9               	movwf	??_calculate_checksum+1
  3116  0335  0849               	movf	??_calculate_checksum+1,w
  3117  0336  06CA               	xorwf	calculate_checksum@check,f
  3118  0337  3001               	movlw	1
  3119  0338  00C8               	movwf	??_calculate_checksum
  3120  0339  0848               	movf	??_calculate_checksum,w
  3121  033A  07CC               	addwf	calculate_checksum@i,f
  3122  033B  2B29               	goto	l2539
  3123  033C                     l2541:	
  3124                           
  3125                           ;comm.c: 414: }
  3126                           ;comm.c: 416: return check;
  3127  033C  084A               	movf	calculate_checksum@check,w
  3128  033D  0008               	return
  3129  033E                     __end_of_calculate_checksum:	
  3130                           
  3131                           	psect	text10
  3132  0389                     __ptext10:	
  3133 ;; *************** function _start_TX_USART_ISR *****************
  3134 ;; Defined at:
  3135 ;;		line 101 in file "USART1823.c"
  3136 ;; Parameters:    Size  Location     Type
  3137 ;;		None
  3138 ;; Auto vars:     Size  Location     Type
  3139 ;;		None
  3140 ;; Return value:  Size  Location     Type
  3141 ;;                  1    wreg      void 
  3142 ;; Registers used:
  3143 ;;		wreg, status,2
  3144 ;; Tracked objects:
  3145 ;;		On entry : 0/0
  3146 ;;		On exit  : 0/0
  3147 ;;		Unchanged: 0/0
  3148 ;; Data sizes:     COMMON   BANK0   BANK1
  3149 ;;      Params:         0       0       0
  3150 ;;      Locals:         0       0       0
  3151 ;;      Temps:          0       0       0
  3152 ;;      Totals:         0       0       0
  3153 ;;Total ram usage:        0 bytes
  3154 ;; Hardware stack levels used:    1
  3155 ;; Hardware stack levels required when called:    2
  3156 ;; This function calls:
  3157 ;;		Nothing
  3158 ;; This function is called by:
  3159 ;;		_main
  3160 ;; This function uses a non-reentrant model
  3161 ;;
  3162                           
  3163                           
  3164                           ;psect for function _start_TX_USART_ISR
  3165  0389                     _start_TX_USART_ISR:	
  3166                           
  3167                           ;USART1823.c: 103: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  3168                           
  3169                           ;incstack = 0
  3170                           ; Regs used in _start_TX_USART_ISR: [wreg+status,2]
  3171  0389  0023               	movlb	3	; select bank3
  3172  038A  151E               	bsf	30,2	;volatile
  3173  038B  159F               	bsf	31,3	;volatile
  3174  038C  019C               	clrf	28	;volatile
  3175  038D  300C               	movlw	12
  3176  038E  009B               	movwf	27	;volatile
  3177                           
  3178                           ;USART1823.c: 104: SYNC = 0;
  3179  038F  121E               	bcf	30,4	;volatile
  3180                           
  3181                           ;USART1823.c: 105: SPEN = 1;
  3182  0390  179D               	bsf	29,7	;volatile
  3183                           
  3184                           ;USART1823.c: 106: TXEN = 1;
  3185  0391  169E               	bsf	30,5	;volatile
  3186                           
  3187                           ;USART1823.c: 108: USART_tx_flag = 0;
  3188  0392  01F2               	clrf	_USART_tx_flag	;volatile
  3189                           
  3190                           ;USART1823.c: 109: USART_tx_index = 0;
  3191  0393  01F3               	clrf	_USART_tx_index	;volatile
  3192                           
  3193                           ;USART1823.c: 110: USART_tx_length = 0;
  3194  0394  01F4               	clrf	_USART_tx_length	;volatile
  3195                           
  3196                           ;USART1823.c: 113: PEIE = 1;
  3197  0395  170B               	bsf	11,6	;volatile
  3198                           
  3199                           ;USART1823.c: 114: GIE = 1;
  3200  0396  178B               	bsf	11,7	;volatile
  3201  0397  0008               	return
  3202  0398                     __end_of_start_TX_USART_ISR:	
  3203                           
  3204                           	psect	text11
  3205  0357                     __ptext11:	
  3206 ;; *************** function _start_RX_USART_ISR *****************
  3207 ;; Defined at:
  3208 ;;		line 83 in file "USART1823.c"
  3209 ;; Parameters:    Size  Location     Type
  3210 ;;		None
  3211 ;; Auto vars:     Size  Location     Type
  3212 ;;		None
  3213 ;; Return value:  Size  Location     Type
  3214 ;;                  1    wreg      void 
  3215 ;; Registers used:
  3216 ;;		wreg, status,2
  3217 ;; Tracked objects:
  3218 ;;		On entry : 0/0
  3219 ;;		On exit  : 0/0
  3220 ;;		Unchanged: 0/0
  3221 ;; Data sizes:     COMMON   BANK0   BANK1
  3222 ;;      Params:         0       0       0
  3223 ;;      Locals:         0       0       0
  3224 ;;      Temps:          0       0       0
  3225 ;;      Totals:         0       0       0
  3226 ;;Total ram usage:        0 bytes
  3227 ;; Hardware stack levels used:    1
  3228 ;; Hardware stack levels required when called:    2
  3229 ;; This function calls:
  3230 ;;		Nothing
  3231 ;; This function is called by:
  3232 ;;		_main
  3233 ;; This function uses a non-reentrant model
  3234 ;;
  3235                           
  3236                           
  3237                           ;psect for function _start_RX_USART_ISR
  3238  0357                     _start_RX_USART_ISR:	
  3239                           
  3240                           ;USART1823.c: 86: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  3241                           
  3242                           ;incstack = 0
  3243                           ; Regs used in _start_RX_USART_ISR: [wreg+status,2]
  3244  0357  0023               	movlb	3	; select bank3
  3245  0358  151E               	bsf	30,2	;volatile
  3246  0359  159F               	bsf	31,3	;volatile
  3247  035A  019C               	clrf	28	;volatile
  3248  035B  300C               	movlw	12
  3249  035C  009B               	movwf	27	;volatile
  3250                           
  3251                           ;USART1823.c: 88: SYNC = 0;
  3252  035D  121E               	bcf	30,4	;volatile
  3253                           
  3254                           ;USART1823.c: 89: SPEN = 1;
  3255  035E  179D               	bsf	29,7	;volatile
  3256                           
  3257                           ;USART1823.c: 90: CREN = 1;
  3258  035F  161D               	bsf	29,4	;volatile
  3259                           
  3260                           ;USART1823.c: 92: USART_rx_flag = 0;
  3261  0360  0020               	movlb	0	; select bank0
  3262  0361  01BA               	clrf	_USART_rx_flag	;volatile
  3263                           
  3264                           ;USART1823.c: 93: USART_rx_index = 0;
  3265  0362  01BB               	clrf	_USART_rx_index	;volatile
  3266                           
  3267                           ;USART1823.c: 95: RCIE = 1;
  3268  0363  0021               	movlb	1	; select bank1
  3269  0364  1691               	bsf	17,5	;volatile
  3270                           
  3271                           ;USART1823.c: 96: PEIE = 1;
  3272  0365  170B               	bsf	11,6	;volatile
  3273                           
  3274                           ;USART1823.c: 97: GIE = 1;
  3275  0366  178B               	bsf	11,7	;volatile
  3276  0367  0008               	return
  3277  0368                     __end_of_start_RX_USART_ISR:	
  3278                           
  3279                           	psect	text12
  3280  03B8                     __ptext12:	
  3281 ;; *************** function _start_RCM *****************
  3282 ;; Defined at:
  3283 ;;		line 4 in file "RCM1823.c"
  3284 ;; Parameters:    Size  Location     Type
  3285 ;;		None
  3286 ;; Auto vars:     Size  Location     Type
  3287 ;;		None
  3288 ;; Return value:  Size  Location     Type
  3289 ;;                  1    wreg      void 
  3290 ;; Registers used:
  3291 ;;		wreg
  3292 ;; Tracked objects:
  3293 ;;		On entry : 0/0
  3294 ;;		On exit  : 0/0
  3295 ;;		Unchanged: 0/0
  3296 ;; Data sizes:     COMMON   BANK0   BANK1
  3297 ;;      Params:         0       0       0
  3298 ;;      Locals:         0       0       0
  3299 ;;      Temps:          0       0       0
  3300 ;;      Totals:         0       0       0
  3301 ;;Total ram usage:        0 bytes
  3302 ;; Hardware stack levels used:    1
  3303 ;; Hardware stack levels required when called:    2
  3304 ;; This function calls:
  3305 ;;		Nothing
  3306 ;; This function is called by:
  3307 ;;		_main
  3308 ;; This function uses a non-reentrant model
  3309 ;;
  3310                           
  3311                           
  3312                           ;psect for function _start_RCM
  3313  03B8                     _start_RCM:	
  3314                           
  3315                           ;RCM1823.c: 6: CLKRCON = 0b11010000;
  3316                           
  3317                           ;incstack = 0
  3318                           ; Regs used in _start_RCM: [wreg]
  3319  03B8  30D0               	movlw	208
  3320  03B9  0027               	movlb	7	; select bank7
  3321  03BA  009A               	movwf	26	;volatile
  3322  03BB  0008               	return
  3323  03BC                     __end_of_start_RCM:	
  3324                           
  3325                           	psect	text13
  3326  039F                     __ptext13:	
  3327 ;; *************** function _setup_TMR0 *****************
  3328 ;; Defined at:
  3329 ;;		line 10 in file "TMR0.c"
  3330 ;; Parameters:    Size  Location     Type
  3331 ;;		None
  3332 ;; Auto vars:     Size  Location     Type
  3333 ;;		None
  3334 ;; Return value:  Size  Location     Type
  3335 ;;                  1    wreg      void 
  3336 ;; Registers used:
  3337 ;;		None
  3338 ;; Tracked objects:
  3339 ;;		On entry : 0/0
  3340 ;;		On exit  : 0/0
  3341 ;;		Unchanged: 0/0
  3342 ;; Data sizes:     COMMON   BANK0   BANK1
  3343 ;;      Params:         0       0       0
  3344 ;;      Locals:         0       0       0
  3345 ;;      Temps:          0       0       0
  3346 ;;      Totals:         0       0       0
  3347 ;;Total ram usage:        0 bytes
  3348 ;; Hardware stack levels used:    1
  3349 ;; Hardware stack levels required when called:    2
  3350 ;; This function calls:
  3351 ;;		Nothing
  3352 ;; This function is called by:
  3353 ;;		_main
  3354 ;; This function uses a non-reentrant model
  3355 ;;
  3356                           
  3357                           
  3358                           ;psect for function _setup_TMR0
  3359  039F                     _setup_TMR0:	
  3360                           
  3361                           ;TMR0.c: 13: PS2 = 0; PS1 = 1; PS0 = 0;
  3362                           
  3363                           ;incstack = 0
  3364                           ; Regs used in _setup_TMR0: []
  3365  039F  0021               	movlb	1	; select bank1
  3366  03A0  1115               	bcf	21,2	;volatile
  3367  03A1  1495               	bsf	21,1	;volatile
  3368  03A2  1015               	bcf	21,0	;volatile
  3369                           
  3370                           ;TMR0.c: 16: PSA = 0;
  3371  03A3  1195               	bcf	21,3	;volatile
  3372                           
  3373                           ;TMR0.c: 18: TMR0CS = 0;
  3374  03A4  1295               	bcf	21,5	;volatile
  3375  03A5  0008               	return
  3376  03A6                     __end_of_setup_TMR0:	
  3377                           
  3378                           	psect	text14
  3379  03AC                     __ptext14:	
  3380 ;; *************** function _setup_ADC *****************
  3381 ;; Defined at:
  3382 ;;		line 3 in file "ADC1823.c"
  3383 ;; Parameters:    Size  Location     Type
  3384 ;;		None
  3385 ;; Auto vars:     Size  Location     Type
  3386 ;;		None
  3387 ;; Return value:  Size  Location     Type
  3388 ;;                  1    wreg      void 
  3389 ;; Registers used:
  3390 ;;		wreg
  3391 ;; Tracked objects:
  3392 ;;		On entry : 0/0
  3393 ;;		On exit  : 0/0
  3394 ;;		Unchanged: 0/0
  3395 ;; Data sizes:     COMMON   BANK0   BANK1
  3396 ;;      Params:         0       0       0
  3397 ;;      Locals:         0       0       0
  3398 ;;      Temps:          0       0       0
  3399 ;;      Totals:         0       0       0
  3400 ;;Total ram usage:        0 bytes
  3401 ;; Hardware stack levels used:    1
  3402 ;; Hardware stack levels required when called:    2
  3403 ;; This function calls:
  3404 ;;		Nothing
  3405 ;; This function is called by:
  3406 ;;		_main
  3407 ;; This function uses a non-reentrant model
  3408 ;;
  3409                           
  3410                           
  3411                           ;psect for function _setup_ADC
  3412  03AC                     _setup_ADC:	
  3413                           
  3414                           ;ADC1823.c: 20: ADCON1 = 0b11110000;
  3415                           
  3416                           ;incstack = 0
  3417                           ; Regs used in _setup_ADC: [wreg]
  3418  03AC  30F0               	movlw	240
  3419  03AD  0021               	movlb	1	; select bank1
  3420  03AE  009E               	movwf	30	;volatile
  3421                           
  3422                           ;ADC1823.c: 21: { ADCON0 = 0b00100100;};
  3423  03AF  3024               	movlw	36
  3424  03B0  009D               	movwf	29	;volatile
  3425  03B1  0008               	return
  3426  03B2                     __end_of_setup_ADC:	
  3427                           
  3428                           	psect	text15
  3429  03BC                     __ptext15:	
  3430 ;; *************** function _USARTX_change_pol *****************
  3431 ;; Defined at:
  3432 ;;		line 90 in file "mcc_generated_files/mcc.c"
  3433 ;; Parameters:    Size  Location     Type
  3434 ;;		None
  3435 ;; Auto vars:     Size  Location     Type
  3436 ;;		None
  3437 ;; Return value:  Size  Location     Type
  3438 ;;                  1    wreg      void 
  3439 ;; Registers used:
  3440 ;;		None
  3441 ;; Tracked objects:
  3442 ;;		On entry : 0/0
  3443 ;;		On exit  : 0/0
  3444 ;;		Unchanged: 0/0
  3445 ;; Data sizes:     COMMON   BANK0   BANK1
  3446 ;;      Params:         0       0       0
  3447 ;;      Locals:         0       0       0
  3448 ;;      Temps:          0       0       0
  3449 ;;      Totals:         0       0       0
  3450 ;;Total ram usage:        0 bytes
  3451 ;; Hardware stack levels used:    1
  3452 ;; Hardware stack levels required when called:    2
  3453 ;; This function calls:
  3454 ;;		Nothing
  3455 ;; This function is called by:
  3456 ;;		_main
  3457 ;; This function uses a non-reentrant model
  3458 ;;
  3459                           
  3460                           
  3461                           ;psect for function _USARTX_change_pol
  3462  03BC                     _USARTX_change_pol:	
  3463                           
  3464                           ;mcc.c: 92: SCKP = 1;
  3465                           
  3466                           ;incstack = 0
  3467                           ; Regs used in _USARTX_change_pol: []
  3468  03BC  0023               	movlb	3	; select bank3
  3469  03BD  161F               	bsf	31,4	;volatile
  3470  03BE  0008               	return
  3471  03BF                     __end_of_USARTX_change_pol:	
  3472                           
  3473                           	psect	text16
  3474  03BF                     __ptext16:	
  3475 ;; *************** function _SYSTEM_Initialize *****************
  3476 ;; Defined at:
  3477 ;;		line 70 in file "mcc_generated_files/mcc.c"
  3478 ;; Parameters:    Size  Location     Type
  3479 ;;		None
  3480 ;; Auto vars:     Size  Location     Type
  3481 ;;		None
  3482 ;; Return value:  Size  Location     Type
  3483 ;;                  1    wreg      void 
  3484 ;; Registers used:
  3485 ;;		wreg, status,2, status,0, pclath, cstack
  3486 ;; Tracked objects:
  3487 ;;		On entry : 0/0
  3488 ;;		On exit  : 0/0
  3489 ;;		Unchanged: 0/0
  3490 ;; Data sizes:     COMMON   BANK0   BANK1
  3491 ;;      Params:         0       0       0
  3492 ;;      Locals:         0       0       0
  3493 ;;      Temps:          0       0       0
  3494 ;;      Totals:         0       0       0
  3495 ;;Total ram usage:        0 bytes
  3496 ;; Hardware stack levels used:    1
  3497 ;; Hardware stack levels required when called:    3
  3498 ;; This function calls:
  3499 ;;		_OSCILLATOR_Initialize
  3500 ;;		_PIN_MANAGER_Initialize
  3501 ;; This function is called by:
  3502 ;;		_main
  3503 ;; This function uses a non-reentrant model
  3504 ;;
  3505                           
  3506                           
  3507                           ;psect for function _SYSTEM_Initialize
  3508  03BF                     _SYSTEM_Initialize:	
  3509                           
  3510                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  3511                           
  3512                           ;incstack = 0
  3513                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3514  03BF  233E               	fcall	_PIN_MANAGER_Initialize
  3515                           
  3516                           ;mcc.c: 74: OSCILLATOR_Initialize();
  3517  03C0  23B2               	fcall	_OSCILLATOR_Initialize
  3518  03C1  0008               	return
  3519  03C2                     __end_of_SYSTEM_Initialize:	
  3520                           
  3521                           	psect	text17
  3522  033E                     __ptext17:	
  3523 ;; *************** function _PIN_MANAGER_Initialize *****************
  3524 ;; Defined at:
  3525 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  3526 ;; Parameters:    Size  Location     Type
  3527 ;;		None
  3528 ;; Auto vars:     Size  Location     Type
  3529 ;;		None
  3530 ;; Return value:  Size  Location     Type
  3531 ;;                  1    wreg      void 
  3532 ;; Registers used:
  3533 ;;		wreg, status,2
  3534 ;; Tracked objects:
  3535 ;;		On entry : 0/0
  3536 ;;		On exit  : 0/0
  3537 ;;		Unchanged: 0/0
  3538 ;; Data sizes:     COMMON   BANK0   BANK1
  3539 ;;      Params:         0       0       0
  3540 ;;      Locals:         0       0       0
  3541 ;;      Temps:          0       0       0
  3542 ;;      Totals:         0       0       0
  3543 ;;Total ram usage:        0 bytes
  3544 ;; Hardware stack levels used:    1
  3545 ;; Hardware stack levels required when called:    2
  3546 ;; This function calls:
  3547 ;;		Nothing
  3548 ;; This function is called by:
  3549 ;;		_SYSTEM_Initialize
  3550 ;; This function uses a non-reentrant model
  3551 ;;
  3552                           
  3553                           
  3554                           ;psect for function _PIN_MANAGER_Initialize
  3555  033E                     _PIN_MANAGER_Initialize:	
  3556                           
  3557                           ;pin_manager.c: 51: LATA = 0x0;
  3558                           
  3559                           ;incstack = 0
  3560                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3561  033E  0022               	movlb	2	; select bank2
  3562  033F  018C               	clrf	12	;volatile
  3563                           
  3564                           ;pin_manager.c: 52: LATC = 0x0;
  3565  0340  018E               	clrf	14	;volatile
  3566                           
  3567                           ;pin_manager.c: 55: ANSELA = 0b00000100;
  3568  0341  3004               	movlw	4
  3569  0342  0023               	movlb	3	; select bank3
  3570  0343  008C               	movwf	12	;volatile
  3571                           
  3572                           ;pin_manager.c: 56: ANSELC = 0b00000011;
  3573  0344  3003               	movlw	3
  3574  0345  008E               	movwf	14	;volatile
  3575                           
  3576                           ;pin_manager.c: 59: WPUA = 0x3B;
  3577  0346  303B               	movlw	59
  3578  0347  0024               	movlb	4	; select bank4
  3579  0348  008C               	movwf	12	;volatile
  3580                           
  3581                           ;pin_manager.c: 61: WPUC = 0x1C;
  3582  0349  301C               	movlw	28
  3583  034A  008E               	movwf	14	;volatile
  3584                           
  3585                           ;pin_manager.c: 63: RXDTSEL = 0;
  3586  034B  0022               	movlb	2	; select bank2
  3587  034C  139D               	bcf	29,7	;volatile
  3588                           
  3589                           ;pin_manager.c: 64: TXCKSEL = 0;
  3590  034D  111D               	bcf	29,2	;volatile
  3591                           
  3592                           ;pin_manager.c: 67: TRISC = 0b01100011;
  3593  034E  3063               	movlw	99
  3594  034F  0021               	movlb	1	; select bank1
  3595  0350  008E               	movwf	14	;volatile
  3596                           
  3597                           ;pin_manager.c: 68: TRISA = 0b01011111;
  3598  0351  305F               	movlw	95
  3599  0352  008C               	movwf	12	;volatile
  3600                           
  3601                           ;pin_manager.c: 70: OPTION_REGbits.nWPUEN = 0x0;
  3602  0353  1395               	bcf	21,7	;volatile
  3603                           
  3604                           ;pin_manager.c: 71: APFCON = 0x00;
  3605  0354  0022               	movlb	2	; select bank2
  3606  0355  019D               	clrf	29	;volatile
  3607  0356  0008               	return
  3608  0357                     __end_of_PIN_MANAGER_Initialize:	
  3609                           
  3610                           	psect	text18
  3611  03B2                     __ptext18:	
  3612 ;; *************** function _OSCILLATOR_Initialize *****************
  3613 ;; Defined at:
  3614 ;;		line 78 in file "mcc_generated_files/mcc.c"
  3615 ;; Parameters:    Size  Location     Type
  3616 ;;		None
  3617 ;; Auto vars:     Size  Location     Type
  3618 ;;		None
  3619 ;; Return value:  Size  Location     Type
  3620 ;;                  1    wreg      void 
  3621 ;; Registers used:
  3622 ;;		wreg, status,2
  3623 ;; Tracked objects:
  3624 ;;		On entry : 0/0
  3625 ;;		On exit  : 0/0
  3626 ;;		Unchanged: 0/0
  3627 ;; Data sizes:     COMMON   BANK0   BANK1
  3628 ;;      Params:         0       0       0
  3629 ;;      Locals:         0       0       0
  3630 ;;      Temps:          0       0       0
  3631 ;;      Totals:         0       0       0
  3632 ;;Total ram usage:        0 bytes
  3633 ;; Hardware stack levels used:    1
  3634 ;; Hardware stack levels required when called:    2
  3635 ;; This function calls:
  3636 ;;		Nothing
  3637 ;; This function is called by:
  3638 ;;		_SYSTEM_Initialize
  3639 ;; This function uses a non-reentrant model
  3640 ;;
  3641                           
  3642                           
  3643                           ;psect for function _OSCILLATOR_Initialize
  3644  03B2                     _OSCILLATOR_Initialize:	
  3645                           
  3646                           ;mcc.c: 81: OSCCON = 0x3A;
  3647                           
  3648                           ;incstack = 0
  3649                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3650  03B2  303A               	movlw	58
  3651  03B3  0021               	movlb	1	; select bank1
  3652  03B4  0099               	movwf	25	;volatile
  3653                           
  3654                           ;mcc.c: 83: OSCSTAT = 0x00;
  3655  03B5  019A               	clrf	26	;volatile
  3656                           
  3657                           ;mcc.c: 85: OSCTUNE = 0x00;
  3658  03B6  0198               	clrf	24	;volatile
  3659  03B7  0008               	return
  3660  03B8                     __end_of_OSCILLATOR_Initialize:	
  3661                           
  3662                           	psect	intentry
  3663  0004                     __pintentry:	
  3664 ;; *************** function _isr *****************
  3665 ;; Defined at:
  3666 ;;		line 150 in file "main.c"
  3667 ;; Parameters:    Size  Location     Type
  3668 ;;		None
  3669 ;; Auto vars:     Size  Location     Type
  3670 ;;		None
  3671 ;; Return value:  Size  Location     Type
  3672 ;;                  1    wreg      void 
  3673 ;; Registers used:
  3674 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3675 ;; Tracked objects:
  3676 ;;		On entry : 0/0
  3677 ;;		On exit  : 0/0
  3678 ;;		Unchanged: 0/0
  3679 ;; Data sizes:     COMMON   BANK0   BANK1
  3680 ;;      Params:         0       0       0
  3681 ;;      Locals:         0       0       0
  3682 ;;      Temps:          2       0       0
  3683 ;;      Totals:         2       0       0
  3684 ;;Total ram usage:        2 bytes
  3685 ;; Hardware stack levels used:    1
  3686 ;; Hardware stack levels required when called:    1
  3687 ;; This function calls:
  3688 ;;		_start_TMR0_ISR
  3689 ;;		_stop_TMR0_ISR
  3690 ;;		i1_start_RX_USART_ISR
  3691 ;; This function is called by:
  3692 ;;		Interrupt level 1
  3693 ;; This function uses a non-reentrant model
  3694 ;;
  3695                           
  3696  0004                     _isr:	
  3697                           
  3698                           ;incstack = 0
  3699  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  3700                           
  3701                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3702  0005  3180               	pagesel	$
  3703  0006  0020               	movlb	0	; select bank0
  3704  0007  087F               	movf	127,w
  3705  0008  00F9               	movwf	??_isr+1
  3706                           
  3707                           ;main.c: 154: if (TMR0IF && TMR0IE) {
  3708  0009  190B               	btfsc	11,2	;volatile
  3709  000A  1E8B               	btfss	11,5	;volatile
  3710  000B  2815               	goto	i1l128
  3711                           
  3712                           ;main.c: 156: TMR0IF = 0;
  3713  000C  110B               	bcf	11,2	;volatile
  3714                           
  3715                           ;main.c: 157: TMR0 = TIMER0_timeout;
  3716  000D  0870               	movf	_TIMER0_timeout,w	;volatile
  3717  000E  0095               	movwf	21	;volatile
  3718                           
  3719                           ;main.c: 160: TIMER0_flag = 1;
  3720  000F  3001               	movlw	1
  3721  0010  00F8               	movwf	??_isr
  3722  0011  0878               	movf	??_isr,w
  3723  0012  00B9               	movwf	_TIMER0_flag	;volatile
  3724                           
  3725                           ;main.c: 165: stop_TMR0_ISR();
  3726  0013  23C2               	fcall	_stop_TMR0_ISR
  3727                           
  3728                           ;main.c: 167: return;
  3729  0014  2851               	goto	i1l129
  3730  0015                     i1l128:	
  3731                           
  3732                           ;main.c: 168: }
  3733                           ;main.c: 172: if (RCIF) {
  3734  0015  1E91               	btfss	17,5	;volatile
  3735  0016  2836               	goto	i1l130
  3736                           
  3737                           ;main.c: 173: stop_TMR0_ISR();
  3738  0017  23C2               	fcall	_stop_TMR0_ISR
  3739                           
  3740                           ;main.c: 176: if (OERR) {
  3741  0018  0023               	movlb	3	; select bank3
  3742  0019  1C9D               	btfss	29,1	;volatile
  3743  001A  2820               	goto	i1l2115
  3744                           
  3745                           ;main.c: 178: CREN = 0;
  3746  001B  121D               	bcf	29,4	;volatile
  3747                           
  3748                           ;main.c: 179: CREN = 1;
  3749  001C  161D               	bsf	29,4	;volatile
  3750                           
  3751                           ;main.c: 180: USART_rx_index = 0;
  3752  001D  0020               	movlb	0	; select bank0
  3753  001E  01BB               	clrf	_USART_rx_index	;volatile
  3754                           
  3755                           ;main.c: 181: return;
  3756  001F  2851               	goto	i1l129
  3757  0020                     i1l2115:	
  3758                           
  3759                           ;main.c: 182: }
  3760                           ;main.c: 185: if (USART_rx_index >= 10) {
  3761  0020  300A               	movlw	10
  3762  0021  0020               	movlb	0	; select bank0
  3763  0022  023B               	subwf	_USART_rx_index,w	;volatile
  3764  0023  1803               	btfsc	3,0
  3765                           
  3766                           ;main.c: 186: USART_rx_index = 0;
  3767  0024  01BB               	clrf	_USART_rx_index	;volatile
  3768                           
  3769                           ;main.c: 187: }
  3770                           ;main.c: 189: USART_rx_data[USART_rx_index++] = RCREG;
  3771  0025  0023               	movlb	3	; select bank3
  3772  0026  0819               	movf	25,w	;volatile
  3773  0027  00F8               	movwf	??_isr
  3774  0028  0020               	movlb	0	; select bank0
  3775  0029  083B               	movf	_USART_rx_index,w
  3776  002A  3E2F               	addlw	(low (_USART_rx_data| 0))& (0+255)
  3777  002B  0086               	movwf	6
  3778  002C  0187               	clrf	7
  3779  002D  0878               	movf	??_isr,w
  3780  002E  0081               	movwf	1
  3781  002F  3001               	movlw	1
  3782  0030  00F8               	movwf	??_isr
  3783  0031  0878               	movf	??_isr,w
  3784  0032  07BB               	addwf	_USART_rx_index,f	;volatile
  3785                           
  3786                           ;main.c: 191: start_TMR0_ISR(98);
  3787  0033  3062               	movlw	98
  3788  0034  2379               	fcall	_start_TMR0_ISR
  3789                           
  3790                           ;main.c: 193: return;
  3791  0035  2851               	goto	i1l129
  3792  0036                     i1l130:	
  3793                           
  3794                           ;main.c: 194: }
  3795                           ;main.c: 198: if (TXIF && TXIE) {
  3796  0036  1E11               	btfss	17,4	;volatile
  3797  0037  2851               	goto	i1l129
  3798  0038  0021               	movlb	1	; select bank1
  3799  0039  1E11               	btfss	17,4	;volatile
  3800  003A  2851               	goto	i1l129
  3801                           
  3802                           ;main.c: 200: TXREG = USART_tx_data[USART_tx_index++];
  3803  003B  0873               	movf	_USART_tx_index,w
  3804  003C  3E20               	addlw	(low (_USART_tx_data| 0))& (0+255)
  3805  003D  0086               	movwf	6
  3806  003E  0187               	clrf	7
  3807  003F  0801               	movf	1,w
  3808  0040  0023               	movlb	3	; select bank3
  3809  0041  009A               	movwf	26	;volatile
  3810  0042  3001               	movlw	1
  3811  0043  00F8               	movwf	??_isr
  3812  0044  0878               	movf	??_isr,w
  3813  0045  07F3               	addwf	_USART_tx_index,f	;volatile
  3814                           
  3815                           ;main.c: 202: if (USART_tx_index >= USART_tx_length) {
  3816  0046  0874               	movf	_USART_tx_length,w	;volatile
  3817  0047  0273               	subwf	_USART_tx_index,w	;volatile
  3818  0048  1C03               	skipc
  3819  0049  2851               	goto	i1l129
  3820                           
  3821                           ;main.c: 203: TXIE = 0;
  3822  004A  0021               	movlb	1	; select bank1
  3823  004B  1211               	bcf	17,4	;volatile
  3824                           
  3825                           ;main.c: 204: USART_tx_flag = 0;
  3826  004C  01F2               	clrf	_USART_tx_flag	;volatile
  3827                           
  3828                           ;main.c: 208: _delay((unsigned long)((3)*(500000/4000.0)));
  3829  004D  307D               	movlw	125
  3830  004E                     u152_27:	
  3831  004E  0B89               	decfsz	9,f
  3832  004F  284E               	goto	u152_27
  3833                           
  3834                           ;main.c: 210: start_RX_USART_ISR();
  3835  0050  2368               	fcall	i1_start_RX_USART_ISR
  3836  0051                     i1l129:	
  3837                           ;main.c: 211: }
  3838                           ;main.c: 212: return;
  3839                           
  3840  0051  0879               	movf	??_isr+1,w
  3841  0052  0020               	movlb	0	; select bank0
  3842  0053  00FF               	movwf	127
  3843  0054  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  3844  0055  0009               	retfie
  3845  0056                     __end_of_isr:	
  3846                           
  3847                           	psect	text20
  3848  0368                     __ptext20:	
  3849 ;; *************** function i1_start_RX_USART_ISR *****************
  3850 ;; Defined at:
  3851 ;;		line 83 in file "USART1823.c"
  3852 ;; Parameters:    Size  Location     Type
  3853 ;;		None
  3854 ;; Auto vars:     Size  Location     Type
  3855 ;;		None
  3856 ;; Return value:  Size  Location     Type
  3857 ;;                  1    wreg      void 
  3858 ;; Registers used:
  3859 ;;		wreg, status,2
  3860 ;; Tracked objects:
  3861 ;;		On entry : 0/0
  3862 ;;		On exit  : 0/0
  3863 ;;		Unchanged: 0/0
  3864 ;; Data sizes:     COMMON   BANK0   BANK1
  3865 ;;      Params:         0       0       0
  3866 ;;      Locals:         0       0       0
  3867 ;;      Temps:          0       0       0
  3868 ;;      Totals:         0       0       0
  3869 ;;Total ram usage:        0 bytes
  3870 ;; Hardware stack levels used:    1
  3871 ;; This function calls:
  3872 ;;		Nothing
  3873 ;; This function is called by:
  3874 ;;		_isr
  3875 ;; This function uses a non-reentrant model
  3876 ;;
  3877                           
  3878                           
  3879                           ;psect for function i1_start_RX_USART_ISR
  3880  0368                     i1_start_RX_USART_ISR:	
  3881                           
  3882                           ;USART1823.c: 86: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  3883                           
  3884                           ;incstack = 0
  3885                           ; Regs used in i1_start_RX_USART_ISR: [wreg+status,2]
  3886  0368  0023               	movlb	3	; select bank3
  3887  0369  151E               	bsf	30,2	;volatile
  3888  036A  159F               	bsf	31,3	;volatile
  3889  036B  019C               	clrf	28	;volatile
  3890  036C  300C               	movlw	12
  3891  036D  009B               	movwf	27	;volatile
  3892                           
  3893                           ;USART1823.c: 88: SYNC = 0;
  3894  036E  121E               	bcf	30,4	;volatile
  3895                           
  3896                           ;USART1823.c: 89: SPEN = 1;
  3897  036F  179D               	bsf	29,7	;volatile
  3898                           
  3899                           ;USART1823.c: 90: CREN = 1;
  3900  0370  161D               	bsf	29,4	;volatile
  3901                           
  3902                           ;USART1823.c: 92: USART_rx_flag = 0;
  3903  0371  0020               	movlb	0	; select bank0
  3904  0372  01BA               	clrf	_USART_rx_flag	;volatile
  3905                           
  3906                           ;USART1823.c: 93: USART_rx_index = 0;
  3907  0373  01BB               	clrf	_USART_rx_index	;volatile
  3908                           
  3909                           ;USART1823.c: 95: RCIE = 1;
  3910  0374  0021               	movlb	1	; select bank1
  3911  0375  1691               	bsf	17,5	;volatile
  3912                           
  3913                           ;USART1823.c: 96: PEIE = 1;
  3914  0376  170B               	bsf	11,6	;volatile
  3915                           
  3916                           ;USART1823.c: 97: GIE = 1;
  3917  0377  178B               	bsf	11,7	;volatile
  3918  0378  0008               	return
  3919  0379                     __end_ofi1_start_RX_USART_ISR:	
  3920                           
  3921                           	psect	text21
  3922  03C2                     __ptext21:	
  3923 ;; *************** function _stop_TMR0_ISR *****************
  3924 ;; Defined at:
  3925 ;;		line 44 in file "TMR0.c"
  3926 ;; Parameters:    Size  Location     Type
  3927 ;;		None
  3928 ;; Auto vars:     Size  Location     Type
  3929 ;;		None
  3930 ;; Return value:  Size  Location     Type
  3931 ;;                  1    wreg      void 
  3932 ;; Registers used:
  3933 ;;		None
  3934 ;; Tracked objects:
  3935 ;;		On entry : 0/0
  3936 ;;		On exit  : 0/0
  3937 ;;		Unchanged: 0/0
  3938 ;; Data sizes:     COMMON   BANK0   BANK1
  3939 ;;      Params:         0       0       0
  3940 ;;      Locals:         0       0       0
  3941 ;;      Temps:          0       0       0
  3942 ;;      Totals:         0       0       0
  3943 ;;Total ram usage:        0 bytes
  3944 ;; Hardware stack levels used:    1
  3945 ;; This function calls:
  3946 ;;		Nothing
  3947 ;; This function is called by:
  3948 ;;		_isr
  3949 ;; This function uses a non-reentrant model
  3950 ;;
  3951                           
  3952                           
  3953                           ;psect for function _stop_TMR0_ISR
  3954  03C2                     _stop_TMR0_ISR:	
  3955                           
  3956                           ;TMR0.c: 47: TMR0IE = 0;
  3957                           
  3958                           ;incstack = 0
  3959                           ; Regs used in _stop_TMR0_ISR: []
  3960  03C2  128B               	bcf	11,5	;volatile
  3961                           
  3962                           ;TMR0.c: 48: TMR0IF = 0;
  3963  03C3  110B               	bcf	11,2	;volatile
  3964  03C4  0008               	return
  3965  03C5                     __end_of_stop_TMR0_ISR:	
  3966                           
  3967                           	psect	text22
  3968  0379                     __ptext22:	
  3969 ;; *************** function _start_TMR0_ISR *****************
  3970 ;; Defined at:
  3971 ;;		line 30 in file "TMR0.c"
  3972 ;; Parameters:    Size  Location     Type
  3973 ;;  val             1    wreg     unsigned char 
  3974 ;; Auto vars:     Size  Location     Type
  3975 ;;  val             1    2[COMMON] unsigned char 
  3976 ;; Return value:  Size  Location     Type
  3977 ;;                  1    wreg      void 
  3978 ;; Registers used:
  3979 ;;		wreg, status,2
  3980 ;; Tracked objects:
  3981 ;;		On entry : 0/0
  3982 ;;		On exit  : 0/0
  3983 ;;		Unchanged: 0/0
  3984 ;; Data sizes:     COMMON   BANK0   BANK1
  3985 ;;      Params:         0       0       0
  3986 ;;      Locals:         1       0       0
  3987 ;;      Temps:          2       0       0
  3988 ;;      Totals:         3       0       0
  3989 ;;Total ram usage:        3 bytes
  3990 ;; Hardware stack levels used:    1
  3991 ;; This function calls:
  3992 ;;		Nothing
  3993 ;; This function is called by:
  3994 ;;		_isr
  3995 ;; This function uses a non-reentrant model
  3996 ;;
  3997                           
  3998                           
  3999                           ;psect for function _start_TMR0_ISR
  4000  0379                     _start_TMR0_ISR:	
  4001                           
  4002                           ;incstack = 0
  4003                           ; Regs used in _start_TMR0_ISR: [wreg+status,2]
  4004                           ;start_TMR0_ISR@val stored from wreg
  4005  0379  00F7               	movwf	start_TMR0_ISR@val
  4006                           
  4007                           ;TMR0.c: 32: TIMER0_timeout = val;
  4008  037A  0877               	movf	start_TMR0_ISR@val,w
  4009  037B  00F5               	movwf	??_start_TMR0_ISR
  4010  037C  01F6               	clrf	??_start_TMR0_ISR+1
  4011  037D  0875               	movf	??_start_TMR0_ISR,w
  4012  037E  00F0               	movwf	_TIMER0_timeout	;volatile
  4013  037F  0876               	movf	??_start_TMR0_ISR+1,w
  4014  0380  00F1               	movwf	_TIMER0_timeout+1	;volatile
  4015                           
  4016                           ;TMR0.c: 33: TIMER0_flag = 0;
  4017  0381  0020               	movlb	0	; select bank0
  4018  0382  01B9               	clrf	_TIMER0_flag	;volatile
  4019                           
  4020                           ;TMR0.c: 36: TMR0 = TIMER0_timeout;
  4021  0383  0870               	movf	_TIMER0_timeout,w	;volatile
  4022  0384  0095               	movwf	21	;volatile
  4023                           
  4024                           ;TMR0.c: 39: TMR0IF = 0;
  4025  0385  110B               	bcf	11,2	;volatile
  4026                           
  4027                           ;TMR0.c: 40: TMR0IE = 1;
  4028  0386  168B               	bsf	11,5	;volatile
  4029                           
  4030                           ;TMR0.c: 41: GIE = 1;
  4031  0387  178B               	bsf	11,7	;volatile
  4032  0388  0008               	return
  4033  0389                     __end_of_start_TMR0_ISR:	
  4034  007E                     btemp	set	126	;btemp
  4035  007E                     int$flags	set	126
  4036  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    52
    Data        0
    BSS         44
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     25      64
    BANK1            32     19      19

Pointer List with Targets:

    measure@Q	PTR short  size(1) Largest target is 2
		 -> sweep@Q(BANK1[2]), 

    measure@I	PTR short  size(1) Largest target is 2
		 -> sweep@I(BANK1[2]), 

    calculate_checksum@data	PTR unsigned char  size(1) Largest target is 10
		 -> sweep@aux(BANK1[7]), measure_Impedance_SE@aux(COMMON[8]), mess_rec(BANK0[10]), 

    lputs_ISR@data	PTR unsigned char  size(1) Largest target is 13
		 -> sweep@aux(BANK1[7]), calibrate_reader@aux(COMMON[8]), measure_Impedance_SE@aux(COMMON[8]), measure_Offset@aux(COMMON[5]), 
		 -> measure_Impedance_no_offset@aux(COMMON[13]), measure_Impedance@aux(COMMON[13]), read_ADC_channels@aux(COMMON[7]), mess_rec(BANK0[10]), 

    setFreq@asic	PTR struct . size(1) Largest target is 2
		 -> sweep@asic(BANK1[2]), 

    setGain@asic	PTR struct . size(1) Largest target is 2
		 -> sweep@asic(BANK1[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_start_TMR0_ISR

Critical Paths under _main in BANK0

    _main->_sweep
    _sweep->_measure
    _measure->_ADC_5

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sweep

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    6989
                                             24 BANK0      1     1      0
                  _SYSTEM_Initialize
                  _USARTX_change_pol
                          _setup_ADC
                         _setup_TMR0
                          _start_RCM
                 _start_RX_USART_ISR
                 _start_TX_USART_ISR
                              _sweep
 ---------------------------------------------------------------------------------
 (1) _sweep                                               21    21      0    6989
                                             22 BANK0      2     2      0
                                              0 BANK1     19    19      0
                 _calculate_checksum
                          _lputs_ISR
                            _measure
                            _setFreq
                            _setGain
 ---------------------------------------------------------------------------------
 (2) _setGain                                              4     3      1     846
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _setFreq                                              4     3      1     408
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _measure                                             16    13      3    2416
                                              6 BANK0     16    13      3
                              _ADC_5
                             _config
 ---------------------------------------------------------------------------------
 (3) _config                                               5     3      2    1442
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (3) _ADC_5                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _lputs_ISR                                            5     4      1    1452
                                              0 BANK0      5     4      1
                     _close_RX_USART
 ---------------------------------------------------------------------------------
 (3) _close_RX_USART                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _calculate_checksum                                   6     5      1     545
                                              0 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (1) _start_TX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RCM                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_TMR0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_ADC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _USARTX_change_pol                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  2     2      0      22
                                              3 COMMON     2     2      0
                     _start_TMR0_ISR
                      _stop_TMR0_ISR
               i1_start_RX_USART_ISR
 ---------------------------------------------------------------------------------
 (5) i1_start_RX_USART_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _stop_TMR0_ISR                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _start_TMR0_ISR                                       3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _USARTX_change_pol
   _setup_ADC
   _setup_TMR0
   _start_RCM
   _start_RX_USART_ISR
   _start_TX_USART_ISR
   _sweep
     _calculate_checksum
     _lputs_ISR
       _close_RX_USART
     _measure
       _ADC_5
       _config
     _setFreq
     _setGain

 _isr (ROOT)
   _start_TMR0_ISR
   _stop_TMR0_ISR
   i1_start_RX_USART_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      5D       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     19      40       6       80.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20     13      13       8       59.4%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      5D       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Feb 27 16:27:51 2018

                    __CFG_CP$OFF 0000                    _USART_rx_data 002F                    _USART_rx_flag 003A  
                  _USART_tx_data 0020                    _USART_tx_flag 0072                              l119 02C3  
                            l412 01C5                              l446 0308                              _GIE 005F  
                            _RA5 0065                              _PS0 04A8                              _PS1 04A9  
                            _PS2 04AA                     __CFG_CPD$OFF 0000                              _PSA 04AB  
                            _isr 0004                     __CFG_BORV$HI 0000                              wreg 0009  
                   __CFG_IESO$ON 0000                   _USART_rx_index 003B                     __CFG_LVP$OFF 0000  
                 _USART_tx_index 0073                             l2521 028A                             l2601 01E1  
                           l2523 02A1                             l2427 0269                             l2541 033C  
                           l2429 026D                             l2711 00D0                             l2539 0329  
                           l2709 00CC                             l2585 01B4                             l2569 017D  
                           l2595 01D3                             l2755 02CF                             l2695 00B2  
                           l2679 0086                             ?_isr 0075                             _ADGO 04E9  
                   __CFG_WDTE$ON 0000                             _BRGH 0CF2                             _CREN 0CEC  
                           u1115 0270                             u1145 0313                             u1315 01BE  
                           u1325 01CF                             _LATA 010C                             u1335 01DD  
                           _LATC 010E                             u1425 00D5                             u1507 0150  
                           u1517 0187                             u1487 02BC                             u1497 013A  
                           _PEIE 005E                             _RCIE 048D                             _RCIF 008D  
                           _OERR 0CE9                             _SCKP 0CFC                             _TMR0 0015  
                           _SPEN 0CEF                             _TXIE 048C                             _TXEN 0CF5  
                           _TXIF 008C                             _SYNC 0CF4                             _WPUA 020C  
                           _WPUC 020E           __size_of_stop_TMR0_ISR 0003                     __CFG_WRT$OFF 0000  
                           _filt 0221                             _main 02AF                             fsr0h 0005  
                           fsr1h 0007                             indf0 0000                             fsr0l 0004  
                           indf1 0001                             fsr1l 0006                             btemp 007E  
    __size_of_calculate_checksum 0019                             start 0056                    __CFG_MCLRE$ON 0000  
                          ??_isr 0078   __size_of_OSCILLATOR_Initialize 0006                  _USART_tx_length 0074  
  __end_of_OSCILLATOR_Initialize 03B8                            ?_main 0075                            _ADC_5 0302  
                          _BRG16 0CFB                            i1l130 0036                            i1l128 0015  
                          i1l129 0051                            _RCREG 0199                            _PORTC 000E  
                          _TRISA 008C                   _start_TMR0_ISR 0379                            _TRISC 008E  
                          _TXREG 019A                   __CFG_FCMEN$OFF 0000                            _gains 024D  
                __end_of_measure 01E3                            _freqs 0242                  __end_of_setGain 0221  
                          _sweep 0065                  __end_of_setFreq 0302    __size_ofi1_start_RX_USART_ISR 0011  
                 __CFG_BOREN$OFF 0000                            status 0003                            wtemp0 007E  
                __initialization 0057                     __end_of_filt 0242                     __end_of_main 02D9  
                  _stop_TMR0_ISR 03C2                 ??_close_RX_USART 0047           __end_of_start_TMR0_ISR 0389  
                         ??_main 005F                           ?_ADC_5 0047                   _TIMER0_timeout 0070  
                 __CFG_PLLEN$OFF 0000                           _ADCON0 009D                           _ADCON1 009E  
                    measure@aux1 005B                      measure@aux2 0059                      measure@asic 004E  
                         _ADRESH 009C                           _ADRESL 009B                           _APFCON 011D  
                         _ANSELA 018C                           _ANSELC 018E                           ?_sweep 0075  
                         i1l2115 0020                           u152_27 004E                           _OSCCON 0099  
                         _TMR0IE 005D                           _TMR0IF 005A                           _TMR0CS 04AD  
                         _SPBRGH 019C                           _SPBRGL 019B                   __CFG_PWRTE$OFF 0000  
                 __CFG_STVREN$ON 0000                   ?_stop_TMR0_ISR 0075                           _config 0255  
                ?_start_TMR0_ISR 0075                        ??_measure 0050      __size_of_start_RX_USART_ISR 0011  
                      ??_setGain 0048                        ??_setFreq 0048                           sweep@I 00AB  
                         sweep@Q 00AD                           sweep@i 00A9                _SYSTEM_Initialize 03BF  
        __end_of__initialization 0062               ?_SYSTEM_Initialize 0075                    __end_of_ADC_5 0325  
                 __pcstackCOMMON 0075              ??_SYSTEM_Initialize 0047                    __end_of_gains 0255  
                  __end_of_freqs 024D                    __end_of_sweep 012E                          ??_ADC_5 0049  
                 _OPTION_REGbits 0095      __size_of_start_TX_USART_ISR 000F                      setGain@asic 004A  
      __end_of_SYSTEM_Initialize 03C2                          ??_sweep 005D                       __pbssBANK0 0020  
                    setFreq@asic 0049                       __pmaintext 02AF                  ??_stop_TMR0_ISR 0075  
                     __pintentry 0004                          ?_config 0047                     measure@value 0057  
                        _CLKRCON 039A               __size_of_lputs_ISR 002B                  lputs_ISR@length 0047  
              setFreq@freq_index 0047               __size_of_setup_ADC 0006                          _OSCSTAT 009A  
                        _OSCTUNE 0098               __size_of_start_RCM 0004                          _RXDTSEL 08EF  
                        _TXCKSEL 08EA       __end_of_calculate_checksum 033E     __end_ofi1_start_RX_USART_ISR 0379  
                __size_of_config 002F                          __ptext1 0065                          __ptext2 01E3  
                        __ptext3 02D9                          __ptext4 012E                          __ptext5 0255  
                        __ptext6 0302                          __ptext7 0284                          __ptext8 0398  
                        __ptext9 0325                          _measure 012E            _OSCILLATOR_Initialize 03B2  
                   __size_of_isr 0052                          _setGain 01E3                          _setFreq 02D9  
       ??_PIN_MANAGER_Initialize 0047                          config@i 004A                setGain@gain_index 0047  
     __size_of_SYSTEM_Initialize 0003                          clrloop0 03A7                    _mess_rec_size 003C  
           end_of_initialization 0062                __end_of_lputs_ISR 02AF                __end_of_setup_ADC 03B2  
               ??_start_TMR0_ISR 0075                __end_of_start_RCM 03BC                     __pstringtext 0221  
                     _setup_TMR0 039F                 __CFG_FOSC$INTOSC 0000                       config@conf 0047  
                 __end_of_config 0284       __end_of_start_RX_USART_ISR 0368           ?_OSCILLATOR_Initialize 0075  
            start_initialization 0057  __size_of_PIN_MANAGER_Initialize 0019                      __end_of_isr 0056  
        __size_of_close_RX_USART 0007                _USARTX_change_pol 03BC             i1_start_RX_USART_ISR 0368  
             ?_USARTX_change_pol 0075              ??_USARTX_change_pol 0047                   ADC_5@ADC_value 004B  
                       ??_config 0049                      ?_setup_TMR0 0075       __end_of_start_TX_USART_ISR 0398  
                    __pbssCOMMON 0070                        ___latbits 0000                    __pcstackBANK0 0047  
                  __pcstackBANK1 00A0        __end_of_USARTX_change_pol 03BF                  sweep@gain_index 00AF  
          ?i1_start_RX_USART_ISR 0075                       setGain@aux 0049           _PIN_MANAGER_Initialize 033E  
                     setFreq@aux 004A            __end_of_stop_TMR0_ISR 03C5               _calculate_checksum 0325  
                 __size_of_ADC_5 0023              ?_calculate_checksum 0047                         ?_measure 004D  
                       ?_setGain 0047                         ?_setFreq 0047                    measure@offset 0054  
                sweep@freq_index 00A8                   __size_of_sweep 00C9              __size_of_setup_TMR0 0007  
           ??_calculate_checksum 0048                        clear_ram0 03A6                       lputs_ISR@i 004A  
                      _lputs_ISR 0284                        _setup_ADC 03AC                        _start_RCM 03B8  
                      config@out 004B       __size_of_USARTX_change_pol 0003           ??i1_start_RX_USART_ISR 0075  
                 _close_RX_USART 0398                       sweep@check 00A0                       sweep@count 00AA  
                     ?_lputs_ISR 0047          calculate_checksum@check 004A                       ?_setup_ADC 0075  
        ??_OSCILLATOR_Initialize 0047                start_TMR0_ISR@val 0077                       ?_start_RCM 0075  
         __end_of_close_RX_USART 039F                 __size_of_measure 00B5                 __size_of_setGain 003E  
               __size_of_setFreq 0029                         __ptext10 0389                         __ptext11 0357  
                       __ptext20 0368                         __ptext12 03B8                         __ptext21 03C2  
                       __ptext13 039F                         __ptext22 0379                         __ptext14 03AC  
                       __ptext15 03BC                         __ptext16 03BF                         __ptext17 033E  
                       __ptext18 03B2                    lputs_ISR@data 004B               _start_RX_USART_ISR 0357  
                  __size_of_main 002A                         _mess_rec 003D              ?_start_RX_USART_ISR 0075  
                       int$flags 007E                     ??_setup_TMR0 0047                      _TIMER0_flag 0039  
           ??_start_RX_USART_ISR 0047                         measure@I 0056          __size_of_start_TMR0_ISR 0010  
                       measure@Q 004D                  ?_close_RX_USART 0075                        sweep@asic 00B1  
         calculate_checksum@data 004B                         intlevel1 0000               _start_TX_USART_ISR 0389  
        ?_PIN_MANAGER_Initialize 0075                __CFG_CLKOUTEN$OFF 0000               __end_of_setup_TMR0 03A6  
            ?_start_TX_USART_ISR 0075                      ??_lputs_ISR 0048                      ??_setup_ADC 0047  
                       sweep@aux 00A1                         sweep@ret 00B0            calculate_checksum@num 0047  
                    ??_start_RCM 0047             ??_start_TX_USART_ISR 0047   __end_of_PIN_MANAGER_Initialize 0357  
            calculate_checksum@i 004C  
