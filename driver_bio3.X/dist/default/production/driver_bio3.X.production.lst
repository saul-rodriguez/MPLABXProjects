

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Tue Nov  3 16:22:08 2020

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og9 
     1                           	processor	16LF1823
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    36                           	dabs	1,0x7E,2
    37  0000                     
    38                           ; Version 2.10
    39                           ; Generated 11/07/2019 GMT
    40                           ; 
    41                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC16LF1823 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     	;# 
    73  0001                     	;# 
    74  0002                     	;# 
    75  0003                     	;# 
    76  0004                     	;# 
    77  0005                     	;# 
    78  0006                     	;# 
    79  0007                     	;# 
    80  0008                     	;# 
    81  0009                     	;# 
    82  000A                     	;# 
    83  000B                     	;# 
    84  000C                     	;# 
    85  000E                     	;# 
    86  0011                     	;# 
    87  0012                     	;# 
    88  0015                     	;# 
    89  0016                     	;# 
    90  0016                     	;# 
    91  0017                     	;# 
    92  0018                     	;# 
    93  0019                     	;# 
    94  001A                     	;# 
    95  001B                     	;# 
    96  001C                     	;# 
    97  001E                     	;# 
    98  001F                     	;# 
    99  008C                     	;# 
   100  008E                     	;# 
   101  0091                     	;# 
   102  0092                     	;# 
   103  0095                     	;# 
   104  0096                     	;# 
   105  0097                     	;# 
   106  0098                     	;# 
   107  0099                     	;# 
   108  009A                     	;# 
   109  009B                     	;# 
   110  009B                     	;# 
   111  009C                     	;# 
   112  009D                     	;# 
   113  009E                     	;# 
   114  010C                     	;# 
   115  010E                     	;# 
   116  0111                     	;# 
   117  0112                     	;# 
   118  0113                     	;# 
   119  0114                     	;# 
   120  0115                     	;# 
   121  0116                     	;# 
   122  0117                     	;# 
   123  0118                     	;# 
   124  0119                     	;# 
   125  011A                     	;# 
   126  011B                     	;# 
   127  011D                     	;# 
   128  011D                     	;# 
   129  018C                     	;# 
   130  018E                     	;# 
   131  0191                     	;# 
   132  0191                     	;# 
   133  0192                     	;# 
   134  0193                     	;# 
   135  0193                     	;# 
   136  0193                     	;# 
   137  0194                     	;# 
   138  0195                     	;# 
   139  0196                     	;# 
   140  0199                     	;# 
   141  019A                     	;# 
   142  019B                     	;# 
   143  019B                     	;# 
   144  019B                     	;# 
   145  019B                     	;# 
   146  019C                     	;# 
   147  019C                     	;# 
   148  019D                     	;# 
   149  019E                     	;# 
   150  019F                     	;# 
   151  020C                     	;# 
   152  020E                     	;# 
   153  0211                     	;# 
   154  0211                     	;# 
   155  0212                     	;# 
   156  0212                     	;# 
   157  0213                     	;# 
   158  0213                     	;# 
   159  0214                     	;# 
   160  0214                     	;# 
   161  0215                     	;# 
   162  0215                     	;# 
   163  0215                     	;# 
   164  0216                     	;# 
   165  0216                     	;# 
   166  0217                     	;# 
   167  0217                     	;# 
   168  0291                     	;# 
   169  0291                     	;# 
   170  0292                     	;# 
   171  0293                     	;# 
   172  0294                     	;# 
   173  0295                     	;# 
   174  0295                     	;# 
   175  0296                     	;# 
   176  0391                     	;# 
   177  0392                     	;# 
   178  0393                     	;# 
   179  039A                     	;# 
   180  039C                     	;# 
   181  039D                     	;# 
   182  039E                     	;# 
   183  039F                     	;# 
   184  0FE4                     	;# 
   185  0FE5                     	;# 
   186  0FE6                     	;# 
   187  0FE7                     	;# 
   188  0FE8                     	;# 
   189  0FE9                     	;# 
   190  0FEA                     	;# 
   191  0FEB                     	;# 
   192  0FED                     	;# 
   193  0FEE                     	;# 
   194  0FEF                     	;# 
   195  0000                     	;# 
   196  0001                     	;# 
   197  0002                     	;# 
   198  0003                     	;# 
   199  0004                     	;# 
   200  0005                     	;# 
   201  0006                     	;# 
   202  0007                     	;# 
   203  0008                     	;# 
   204  0009                     	;# 
   205  000A                     	;# 
   206  000B                     	;# 
   207  000C                     	;# 
   208  000E                     	;# 
   209  0011                     	;# 
   210  0012                     	;# 
   211  0015                     	;# 
   212  0016                     	;# 
   213  0016                     	;# 
   214  0017                     	;# 
   215  0018                     	;# 
   216  0019                     	;# 
   217  001A                     	;# 
   218  001B                     	;# 
   219  001C                     	;# 
   220  001E                     	;# 
   221  001F                     	;# 
   222  008C                     	;# 
   223  008E                     	;# 
   224  0091                     	;# 
   225  0092                     	;# 
   226  0095                     	;# 
   227  0096                     	;# 
   228  0097                     	;# 
   229  0098                     	;# 
   230  0099                     	;# 
   231  009A                     	;# 
   232  009B                     	;# 
   233  009B                     	;# 
   234  009C                     	;# 
   235  009D                     	;# 
   236  009E                     	;# 
   237  010C                     	;# 
   238  010E                     	;# 
   239  0111                     	;# 
   240  0112                     	;# 
   241  0113                     	;# 
   242  0114                     	;# 
   243  0115                     	;# 
   244  0116                     	;# 
   245  0117                     	;# 
   246  0118                     	;# 
   247  0119                     	;# 
   248  011A                     	;# 
   249  011B                     	;# 
   250  011D                     	;# 
   251  011D                     	;# 
   252  018C                     	;# 
   253  018E                     	;# 
   254  0191                     	;# 
   255  0191                     	;# 
   256  0192                     	;# 
   257  0193                     	;# 
   258  0193                     	;# 
   259  0193                     	;# 
   260  0194                     	;# 
   261  0195                     	;# 
   262  0196                     	;# 
   263  0199                     	;# 
   264  019A                     	;# 
   265  019B                     	;# 
   266  019B                     	;# 
   267  019B                     	;# 
   268  019B                     	;# 
   269  019C                     	;# 
   270  019C                     	;# 
   271  019D                     	;# 
   272  019E                     	;# 
   273  019F                     	;# 
   274  020C                     	;# 
   275  020E                     	;# 
   276  0211                     	;# 
   277  0211                     	;# 
   278  0212                     	;# 
   279  0212                     	;# 
   280  0213                     	;# 
   281  0213                     	;# 
   282  0214                     	;# 
   283  0214                     	;# 
   284  0215                     	;# 
   285  0215                     	;# 
   286  0215                     	;# 
   287  0216                     	;# 
   288  0216                     	;# 
   289  0217                     	;# 
   290  0217                     	;# 
   291  0291                     	;# 
   292  0291                     	;# 
   293  0292                     	;# 
   294  0293                     	;# 
   295  0294                     	;# 
   296  0295                     	;# 
   297  0295                     	;# 
   298  0296                     	;# 
   299  0391                     	;# 
   300  0392                     	;# 
   301  0393                     	;# 
   302  039A                     	;# 
   303  039C                     	;# 
   304  039D                     	;# 
   305  039E                     	;# 
   306  039F                     	;# 
   307  0FE4                     	;# 
   308  0FE5                     	;# 
   309  0FE6                     	;# 
   310  0FE7                     	;# 
   311  0FE8                     	;# 
   312  0FE9                     	;# 
   313  0FEA                     	;# 
   314  0FEB                     	;# 
   315  0FED                     	;# 
   316  0FEE                     	;# 
   317  0FEF                     	;# 
   318  0000                     	;# 
   319  0001                     	;# 
   320  0002                     	;# 
   321  0003                     	;# 
   322  0004                     	;# 
   323  0005                     	;# 
   324  0006                     	;# 
   325  0007                     	;# 
   326  0008                     	;# 
   327  0009                     	;# 
   328  000A                     	;# 
   329  000B                     	;# 
   330  000C                     	;# 
   331  000E                     	;# 
   332  0011                     	;# 
   333  0012                     	;# 
   334  0015                     	;# 
   335  0016                     	;# 
   336  0016                     	;# 
   337  0017                     	;# 
   338  0018                     	;# 
   339  0019                     	;# 
   340  001A                     	;# 
   341  001B                     	;# 
   342  001C                     	;# 
   343  001E                     	;# 
   344  001F                     	;# 
   345  008C                     	;# 
   346  008E                     	;# 
   347  0091                     	;# 
   348  0092                     	;# 
   349  0095                     	;# 
   350  0096                     	;# 
   351  0097                     	;# 
   352  0098                     	;# 
   353  0099                     	;# 
   354  009A                     	;# 
   355  009B                     	;# 
   356  009B                     	;# 
   357  009C                     	;# 
   358  009D                     	;# 
   359  009E                     	;# 
   360  010C                     	;# 
   361  010E                     	;# 
   362  0111                     	;# 
   363  0112                     	;# 
   364  0113                     	;# 
   365  0114                     	;# 
   366  0115                     	;# 
   367  0116                     	;# 
   368  0117                     	;# 
   369  0118                     	;# 
   370  0119                     	;# 
   371  011A                     	;# 
   372  011B                     	;# 
   373  011D                     	;# 
   374  011D                     	;# 
   375  018C                     	;# 
   376  018E                     	;# 
   377  0191                     	;# 
   378  0191                     	;# 
   379  0192                     	;# 
   380  0193                     	;# 
   381  0193                     	;# 
   382  0193                     	;# 
   383  0194                     	;# 
   384  0195                     	;# 
   385  0196                     	;# 
   386  0199                     	;# 
   387  019A                     	;# 
   388  019B                     	;# 
   389  019B                     	;# 
   390  019B                     	;# 
   391  019B                     	;# 
   392  019C                     	;# 
   393  019C                     	;# 
   394  019D                     	;# 
   395  019E                     	;# 
   396  019F                     	;# 
   397  020C                     	;# 
   398  020E                     	;# 
   399  0211                     	;# 
   400  0211                     	;# 
   401  0212                     	;# 
   402  0212                     	;# 
   403  0213                     	;# 
   404  0213                     	;# 
   405  0214                     	;# 
   406  0214                     	;# 
   407  0215                     	;# 
   408  0215                     	;# 
   409  0215                     	;# 
   410  0216                     	;# 
   411  0216                     	;# 
   412  0217                     	;# 
   413  0217                     	;# 
   414  0291                     	;# 
   415  0291                     	;# 
   416  0292                     	;# 
   417  0293                     	;# 
   418  0294                     	;# 
   419  0295                     	;# 
   420  0295                     	;# 
   421  0296                     	;# 
   422  0391                     	;# 
   423  0392                     	;# 
   424  0393                     	;# 
   425  039A                     	;# 
   426  039C                     	;# 
   427  039D                     	;# 
   428  039E                     	;# 
   429  039F                     	;# 
   430  0FE4                     	;# 
   431  0FE5                     	;# 
   432  0FE6                     	;# 
   433  0FE7                     	;# 
   434  0FE8                     	;# 
   435  0FE9                     	;# 
   436  0FEA                     	;# 
   437  0FEB                     	;# 
   438  0FED                     	;# 
   439  0FEE                     	;# 
   440  0FEF                     	;# 
   441  0000                     	;# 
   442  0001                     	;# 
   443  0002                     	;# 
   444  0003                     	;# 
   445  0004                     	;# 
   446  0005                     	;# 
   447  0006                     	;# 
   448  0007                     	;# 
   449  0008                     	;# 
   450  0009                     	;# 
   451  000A                     	;# 
   452  000B                     	;# 
   453  000C                     	;# 
   454  000E                     	;# 
   455  0011                     	;# 
   456  0012                     	;# 
   457  0015                     	;# 
   458  0016                     	;# 
   459  0016                     	;# 
   460  0017                     	;# 
   461  0018                     	;# 
   462  0019                     	;# 
   463  001A                     	;# 
   464  001B                     	;# 
   465  001C                     	;# 
   466  001E                     	;# 
   467  001F                     	;# 
   468  008C                     	;# 
   469  008E                     	;# 
   470  0091                     	;# 
   471  0092                     	;# 
   472  0095                     	;# 
   473  0096                     	;# 
   474  0097                     	;# 
   475  0098                     	;# 
   476  0099                     	;# 
   477  009A                     	;# 
   478  009B                     	;# 
   479  009B                     	;# 
   480  009C                     	;# 
   481  009D                     	;# 
   482  009E                     	;# 
   483  010C                     	;# 
   484  010E                     	;# 
   485  0111                     	;# 
   486  0112                     	;# 
   487  0113                     	;# 
   488  0114                     	;# 
   489  0115                     	;# 
   490  0116                     	;# 
   491  0117                     	;# 
   492  0118                     	;# 
   493  0119                     	;# 
   494  011A                     	;# 
   495  011B                     	;# 
   496  011D                     	;# 
   497  011D                     	;# 
   498  018C                     	;# 
   499  018E                     	;# 
   500  0191                     	;# 
   501  0191                     	;# 
   502  0192                     	;# 
   503  0193                     	;# 
   504  0193                     	;# 
   505  0193                     	;# 
   506  0194                     	;# 
   507  0195                     	;# 
   508  0196                     	;# 
   509  0199                     	;# 
   510  019A                     	;# 
   511  019B                     	;# 
   512  019B                     	;# 
   513  019B                     	;# 
   514  019B                     	;# 
   515  019C                     	;# 
   516  019C                     	;# 
   517  019D                     	;# 
   518  019E                     	;# 
   519  019F                     	;# 
   520  020C                     	;# 
   521  020E                     	;# 
   522  0211                     	;# 
   523  0211                     	;# 
   524  0212                     	;# 
   525  0212                     	;# 
   526  0213                     	;# 
   527  0213                     	;# 
   528  0214                     	;# 
   529  0214                     	;# 
   530  0215                     	;# 
   531  0215                     	;# 
   532  0215                     	;# 
   533  0216                     	;# 
   534  0216                     	;# 
   535  0217                     	;# 
   536  0217                     	;# 
   537  0291                     	;# 
   538  0291                     	;# 
   539  0292                     	;# 
   540  0293                     	;# 
   541  0294                     	;# 
   542  0295                     	;# 
   543  0295                     	;# 
   544  0296                     	;# 
   545  0391                     	;# 
   546  0392                     	;# 
   547  0393                     	;# 
   548  039A                     	;# 
   549  039C                     	;# 
   550  039D                     	;# 
   551  039E                     	;# 
   552  039F                     	;# 
   553  0FE4                     	;# 
   554  0FE5                     	;# 
   555  0FE6                     	;# 
   556  0FE7                     	;# 
   557  0FE8                     	;# 
   558  0FE9                     	;# 
   559  0FEA                     	;# 
   560  0FEB                     	;# 
   561  0FED                     	;# 
   562  0FEE                     	;# 
   563  0FEF                     	;# 
   564  0000                     	;# 
   565  0001                     	;# 
   566  0002                     	;# 
   567  0003                     	;# 
   568  0004                     	;# 
   569  0005                     	;# 
   570  0006                     	;# 
   571  0007                     	;# 
   572  0008                     	;# 
   573  0009                     	;# 
   574  000A                     	;# 
   575  000B                     	;# 
   576  000C                     	;# 
   577  000E                     	;# 
   578  0011                     	;# 
   579  0012                     	;# 
   580  0015                     	;# 
   581  0016                     	;# 
   582  0016                     	;# 
   583  0017                     	;# 
   584  0018                     	;# 
   585  0019                     	;# 
   586  001A                     	;# 
   587  001B                     	;# 
   588  001C                     	;# 
   589  001E                     	;# 
   590  001F                     	;# 
   591  008C                     	;# 
   592  008E                     	;# 
   593  0091                     	;# 
   594  0092                     	;# 
   595  0095                     	;# 
   596  0096                     	;# 
   597  0097                     	;# 
   598  0098                     	;# 
   599  0099                     	;# 
   600  009A                     	;# 
   601  009B                     	;# 
   602  009B                     	;# 
   603  009C                     	;# 
   604  009D                     	;# 
   605  009E                     	;# 
   606  010C                     	;# 
   607  010E                     	;# 
   608  0111                     	;# 
   609  0112                     	;# 
   610  0113                     	;# 
   611  0114                     	;# 
   612  0115                     	;# 
   613  0116                     	;# 
   614  0117                     	;# 
   615  0118                     	;# 
   616  0119                     	;# 
   617  011A                     	;# 
   618  011B                     	;# 
   619  011D                     	;# 
   620  011D                     	;# 
   621  018C                     	;# 
   622  018E                     	;# 
   623  0191                     	;# 
   624  0191                     	;# 
   625  0192                     	;# 
   626  0193                     	;# 
   627  0193                     	;# 
   628  0193                     	;# 
   629  0194                     	;# 
   630  0195                     	;# 
   631  0196                     	;# 
   632  0199                     	;# 
   633  019A                     	;# 
   634  019B                     	;# 
   635  019B                     	;# 
   636  019B                     	;# 
   637  019B                     	;# 
   638  019C                     	;# 
   639  019C                     	;# 
   640  019D                     	;# 
   641  019E                     	;# 
   642  019F                     	;# 
   643  020C                     	;# 
   644  020E                     	;# 
   645  0211                     	;# 
   646  0211                     	;# 
   647  0212                     	;# 
   648  0212                     	;# 
   649  0213                     	;# 
   650  0213                     	;# 
   651  0214                     	;# 
   652  0214                     	;# 
   653  0215                     	;# 
   654  0215                     	;# 
   655  0215                     	;# 
   656  0216                     	;# 
   657  0216                     	;# 
   658  0217                     	;# 
   659  0217                     	;# 
   660  0291                     	;# 
   661  0291                     	;# 
   662  0292                     	;# 
   663  0293                     	;# 
   664  0294                     	;# 
   665  0295                     	;# 
   666  0295                     	;# 
   667  0296                     	;# 
   668  0391                     	;# 
   669  0392                     	;# 
   670  0393                     	;# 
   671  039A                     	;# 
   672  039C                     	;# 
   673  039D                     	;# 
   674  039E                     	;# 
   675  039F                     	;# 
   676  0FE4                     	;# 
   677  0FE5                     	;# 
   678  0FE6                     	;# 
   679  0FE7                     	;# 
   680  0FE8                     	;# 
   681  0FE9                     	;# 
   682  0FEA                     	;# 
   683  0FEB                     	;# 
   684  0FED                     	;# 
   685  0FEE                     	;# 
   686  0FEF                     	;# 
   687  0000                     	;# 
   688  0001                     	;# 
   689  0002                     	;# 
   690  0003                     	;# 
   691  0004                     	;# 
   692  0005                     	;# 
   693  0006                     	;# 
   694  0007                     	;# 
   695  0008                     	;# 
   696  0009                     	;# 
   697  000A                     	;# 
   698  000B                     	;# 
   699  000C                     	;# 
   700  000E                     	;# 
   701  0011                     	;# 
   702  0012                     	;# 
   703  0015                     	;# 
   704  0016                     	;# 
   705  0016                     	;# 
   706  0017                     	;# 
   707  0018                     	;# 
   708  0019                     	;# 
   709  001A                     	;# 
   710  001B                     	;# 
   711  001C                     	;# 
   712  001E                     	;# 
   713  001F                     	;# 
   714  008C                     	;# 
   715  008E                     	;# 
   716  0091                     	;# 
   717  0092                     	;# 
   718  0095                     	;# 
   719  0096                     	;# 
   720  0097                     	;# 
   721  0098                     	;# 
   722  0099                     	;# 
   723  009A                     	;# 
   724  009B                     	;# 
   725  009B                     	;# 
   726  009C                     	;# 
   727  009D                     	;# 
   728  009E                     	;# 
   729  010C                     	;# 
   730  010E                     	;# 
   731  0111                     	;# 
   732  0112                     	;# 
   733  0113                     	;# 
   734  0114                     	;# 
   735  0115                     	;# 
   736  0116                     	;# 
   737  0117                     	;# 
   738  0118                     	;# 
   739  0119                     	;# 
   740  011A                     	;# 
   741  011B                     	;# 
   742  011D                     	;# 
   743  011D                     	;# 
   744  018C                     	;# 
   745  018E                     	;# 
   746  0191                     	;# 
   747  0191                     	;# 
   748  0192                     	;# 
   749  0193                     	;# 
   750  0193                     	;# 
   751  0193                     	;# 
   752  0194                     	;# 
   753  0195                     	;# 
   754  0196                     	;# 
   755  0199                     	;# 
   756  019A                     	;# 
   757  019B                     	;# 
   758  019B                     	;# 
   759  019B                     	;# 
   760  019B                     	;# 
   761  019C                     	;# 
   762  019C                     	;# 
   763  019D                     	;# 
   764  019E                     	;# 
   765  019F                     	;# 
   766  020C                     	;# 
   767  020E                     	;# 
   768  0211                     	;# 
   769  0211                     	;# 
   770  0212                     	;# 
   771  0212                     	;# 
   772  0213                     	;# 
   773  0213                     	;# 
   774  0214                     	;# 
   775  0214                     	;# 
   776  0215                     	;# 
   777  0215                     	;# 
   778  0215                     	;# 
   779  0216                     	;# 
   780  0216                     	;# 
   781  0217                     	;# 
   782  0217                     	;# 
   783  0291                     	;# 
   784  0291                     	;# 
   785  0292                     	;# 
   786  0293                     	;# 
   787  0294                     	;# 
   788  0295                     	;# 
   789  0295                     	;# 
   790  0296                     	;# 
   791  0391                     	;# 
   792  0392                     	;# 
   793  0393                     	;# 
   794  039A                     	;# 
   795  039C                     	;# 
   796  039D                     	;# 
   797  039E                     	;# 
   798  039F                     	;# 
   799  0FE4                     	;# 
   800  0FE5                     	;# 
   801  0FE6                     	;# 
   802  0FE7                     	;# 
   803  0FE8                     	;# 
   804  0FE9                     	;# 
   805  0FEA                     	;# 
   806  0FEB                     	;# 
   807  0FED                     	;# 
   808  0FEE                     	;# 
   809  0FEF                     	;# 
   810  0000                     	;# 
   811  0001                     	;# 
   812  0002                     	;# 
   813  0003                     	;# 
   814  0004                     	;# 
   815  0005                     	;# 
   816  0006                     	;# 
   817  0007                     	;# 
   818  0008                     	;# 
   819  0009                     	;# 
   820  000A                     	;# 
   821  000B                     	;# 
   822  000C                     	;# 
   823  000E                     	;# 
   824  0011                     	;# 
   825  0012                     	;# 
   826  0015                     	;# 
   827  0016                     	;# 
   828  0016                     	;# 
   829  0017                     	;# 
   830  0018                     	;# 
   831  0019                     	;# 
   832  001A                     	;# 
   833  001B                     	;# 
   834  001C                     	;# 
   835  001E                     	;# 
   836  001F                     	;# 
   837  008C                     	;# 
   838  008E                     	;# 
   839  0091                     	;# 
   840  0092                     	;# 
   841  0095                     	;# 
   842  0096                     	;# 
   843  0097                     	;# 
   844  0098                     	;# 
   845  0099                     	;# 
   846  009A                     	;# 
   847  009B                     	;# 
   848  009B                     	;# 
   849  009C                     	;# 
   850  009D                     	;# 
   851  009E                     	;# 
   852  010C                     	;# 
   853  010E                     	;# 
   854  0111                     	;# 
   855  0112                     	;# 
   856  0113                     	;# 
   857  0114                     	;# 
   858  0115                     	;# 
   859  0116                     	;# 
   860  0117                     	;# 
   861  0118                     	;# 
   862  0119                     	;# 
   863  011A                     	;# 
   864  011B                     	;# 
   865  011D                     	;# 
   866  011D                     	;# 
   867  018C                     	;# 
   868  018E                     	;# 
   869  0191                     	;# 
   870  0191                     	;# 
   871  0192                     	;# 
   872  0193                     	;# 
   873  0193                     	;# 
   874  0193                     	;# 
   875  0194                     	;# 
   876  0195                     	;# 
   877  0196                     	;# 
   878  0199                     	;# 
   879  019A                     	;# 
   880  019B                     	;# 
   881  019B                     	;# 
   882  019B                     	;# 
   883  019B                     	;# 
   884  019C                     	;# 
   885  019C                     	;# 
   886  019D                     	;# 
   887  019E                     	;# 
   888  019F                     	;# 
   889  020C                     	;# 
   890  020E                     	;# 
   891  0211                     	;# 
   892  0211                     	;# 
   893  0212                     	;# 
   894  0212                     	;# 
   895  0213                     	;# 
   896  0213                     	;# 
   897  0214                     	;# 
   898  0214                     	;# 
   899  0215                     	;# 
   900  0215                     	;# 
   901  0215                     	;# 
   902  0216                     	;# 
   903  0216                     	;# 
   904  0217                     	;# 
   905  0217                     	;# 
   906  0291                     	;# 
   907  0291                     	;# 
   908  0292                     	;# 
   909  0293                     	;# 
   910  0294                     	;# 
   911  0295                     	;# 
   912  0295                     	;# 
   913  0296                     	;# 
   914  0391                     	;# 
   915  0392                     	;# 
   916  0393                     	;# 
   917  039A                     	;# 
   918  039C                     	;# 
   919  039D                     	;# 
   920  039E                     	;# 
   921  039F                     	;# 
   922  0FE4                     	;# 
   923  0FE5                     	;# 
   924  0FE6                     	;# 
   925  0FE7                     	;# 
   926  0FE8                     	;# 
   927  0FE9                     	;# 
   928  0FEA                     	;# 
   929  0FEB                     	;# 
   930  0FED                     	;# 
   931  0FEE                     	;# 
   932  0FEF                     	;# 
   933  0000                     	;# 
   934  0001                     	;# 
   935  0002                     	;# 
   936  0003                     	;# 
   937  0004                     	;# 
   938  0005                     	;# 
   939  0006                     	;# 
   940  0007                     	;# 
   941  0008                     	;# 
   942  0009                     	;# 
   943  000A                     	;# 
   944  000B                     	;# 
   945  000C                     	;# 
   946  000E                     	;# 
   947  0011                     	;# 
   948  0012                     	;# 
   949  0015                     	;# 
   950  0016                     	;# 
   951  0016                     	;# 
   952  0017                     	;# 
   953  0018                     	;# 
   954  0019                     	;# 
   955  001A                     	;# 
   956  001B                     	;# 
   957  001C                     	;# 
   958  001E                     	;# 
   959  001F                     	;# 
   960  008C                     	;# 
   961  008E                     	;# 
   962  0091                     	;# 
   963  0092                     	;# 
   964  0095                     	;# 
   965  0096                     	;# 
   966  0097                     	;# 
   967  0098                     	;# 
   968  0099                     	;# 
   969  009A                     	;# 
   970  009B                     	;# 
   971  009B                     	;# 
   972  009C                     	;# 
   973  009D                     	;# 
   974  009E                     	;# 
   975  010C                     	;# 
   976  010E                     	;# 
   977  0111                     	;# 
   978  0112                     	;# 
   979  0113                     	;# 
   980  0114                     	;# 
   981  0115                     	;# 
   982  0116                     	;# 
   983  0117                     	;# 
   984  0118                     	;# 
   985  0119                     	;# 
   986  011A                     	;# 
   987  011B                     	;# 
   988  011D                     	;# 
   989  011D                     	;# 
   990  018C                     	;# 
   991  018E                     	;# 
   992  0191                     	;# 
   993  0191                     	;# 
   994  0192                     	;# 
   995  0193                     	;# 
   996  0193                     	;# 
   997  0193                     	;# 
   998  0194                     	;# 
   999  0195                     	;# 
  1000  0196                     	;# 
  1001  0199                     	;# 
  1002  019A                     	;# 
  1003  019B                     	;# 
  1004  019B                     	;# 
  1005  019B                     	;# 
  1006  019B                     	;# 
  1007  019C                     	;# 
  1008  019C                     	;# 
  1009  019D                     	;# 
  1010  019E                     	;# 
  1011  019F                     	;# 
  1012  020C                     	;# 
  1013  020E                     	;# 
  1014  0211                     	;# 
  1015  0211                     	;# 
  1016  0212                     	;# 
  1017  0212                     	;# 
  1018  0213                     	;# 
  1019  0213                     	;# 
  1020  0214                     	;# 
  1021  0214                     	;# 
  1022  0215                     	;# 
  1023  0215                     	;# 
  1024  0215                     	;# 
  1025  0216                     	;# 
  1026  0216                     	;# 
  1027  0217                     	;# 
  1028  0217                     	;# 
  1029  0291                     	;# 
  1030  0291                     	;# 
  1031  0292                     	;# 
  1032  0293                     	;# 
  1033  0294                     	;# 
  1034  0295                     	;# 
  1035  0295                     	;# 
  1036  0296                     	;# 
  1037  0391                     	;# 
  1038  0392                     	;# 
  1039  0393                     	;# 
  1040  039A                     	;# 
  1041  039C                     	;# 
  1042  039D                     	;# 
  1043  039E                     	;# 
  1044  039F                     	;# 
  1045  0FE4                     	;# 
  1046  0FE5                     	;# 
  1047  0FE6                     	;# 
  1048  0FE7                     	;# 
  1049  0FE8                     	;# 
  1050  0FE9                     	;# 
  1051  0FEA                     	;# 
  1052  0FEB                     	;# 
  1053  0FED                     	;# 
  1054  0FEE                     	;# 
  1055  0FEF                     	;# 
  1056  0000                     	;# 
  1057  0001                     	;# 
  1058  0002                     	;# 
  1059  0003                     	;# 
  1060  0004                     	;# 
  1061  0005                     	;# 
  1062  0006                     	;# 
  1063  0007                     	;# 
  1064  0008                     	;# 
  1065  0009                     	;# 
  1066  000A                     	;# 
  1067  000B                     	;# 
  1068  000C                     	;# 
  1069  000E                     	;# 
  1070  0011                     	;# 
  1071  0012                     	;# 
  1072  0015                     	;# 
  1073  0016                     	;# 
  1074  0016                     	;# 
  1075  0017                     	;# 
  1076  0018                     	;# 
  1077  0019                     	;# 
  1078  001A                     	;# 
  1079  001B                     	;# 
  1080  001C                     	;# 
  1081  001E                     	;# 
  1082  001F                     	;# 
  1083  008C                     	;# 
  1084  008E                     	;# 
  1085  0091                     	;# 
  1086  0092                     	;# 
  1087  0095                     	;# 
  1088  0096                     	;# 
  1089  0097                     	;# 
  1090  0098                     	;# 
  1091  0099                     	;# 
  1092  009A                     	;# 
  1093  009B                     	;# 
  1094  009B                     	;# 
  1095  009C                     	;# 
  1096  009D                     	;# 
  1097  009E                     	;# 
  1098  010C                     	;# 
  1099  010E                     	;# 
  1100  0111                     	;# 
  1101  0112                     	;# 
  1102  0113                     	;# 
  1103  0114                     	;# 
  1104  0115                     	;# 
  1105  0116                     	;# 
  1106  0117                     	;# 
  1107  0118                     	;# 
  1108  0119                     	;# 
  1109  011A                     	;# 
  1110  011B                     	;# 
  1111  011D                     	;# 
  1112  011D                     	;# 
  1113  018C                     	;# 
  1114  018E                     	;# 
  1115  0191                     	;# 
  1116  0191                     	;# 
  1117  0192                     	;# 
  1118  0193                     	;# 
  1119  0193                     	;# 
  1120  0193                     	;# 
  1121  0194                     	;# 
  1122  0195                     	;# 
  1123  0196                     	;# 
  1124  0199                     	;# 
  1125  019A                     	;# 
  1126  019B                     	;# 
  1127  019B                     	;# 
  1128  019B                     	;# 
  1129  019B                     	;# 
  1130  019C                     	;# 
  1131  019C                     	;# 
  1132  019D                     	;# 
  1133  019E                     	;# 
  1134  019F                     	;# 
  1135  020C                     	;# 
  1136  020E                     	;# 
  1137  0211                     	;# 
  1138  0211                     	;# 
  1139  0212                     	;# 
  1140  0212                     	;# 
  1141  0213                     	;# 
  1142  0213                     	;# 
  1143  0214                     	;# 
  1144  0214                     	;# 
  1145  0215                     	;# 
  1146  0215                     	;# 
  1147  0215                     	;# 
  1148  0216                     	;# 
  1149  0216                     	;# 
  1150  0217                     	;# 
  1151  0217                     	;# 
  1152  0291                     	;# 
  1153  0291                     	;# 
  1154  0292                     	;# 
  1155  0293                     	;# 
  1156  0294                     	;# 
  1157  0295                     	;# 
  1158  0295                     	;# 
  1159  0296                     	;# 
  1160  0391                     	;# 
  1161  0392                     	;# 
  1162  0393                     	;# 
  1163  039A                     	;# 
  1164  039C                     	;# 
  1165  039D                     	;# 
  1166  039E                     	;# 
  1167  039F                     	;# 
  1168  0FE4                     	;# 
  1169  0FE5                     	;# 
  1170  0FE6                     	;# 
  1171  0FE7                     	;# 
  1172  0FE8                     	;# 
  1173  0FE9                     	;# 
  1174  0FEA                     	;# 
  1175  0FEB                     	;# 
  1176  0FED                     	;# 
  1177  0FEE                     	;# 
  1178  0FEF                     	;# 
  1179  0000                     	;# 
  1180  0001                     	;# 
  1181  0002                     	;# 
  1182  0003                     	;# 
  1183  0004                     	;# 
  1184  0005                     	;# 
  1185  0006                     	;# 
  1186  0007                     	;# 
  1187  0008                     	;# 
  1188  0009                     	;# 
  1189  000A                     	;# 
  1190  000B                     	;# 
  1191  000C                     	;# 
  1192  000E                     	;# 
  1193  0011                     	;# 
  1194  0012                     	;# 
  1195  0015                     	;# 
  1196  0016                     	;# 
  1197  0016                     	;# 
  1198  0017                     	;# 
  1199  0018                     	;# 
  1200  0019                     	;# 
  1201  001A                     	;# 
  1202  001B                     	;# 
  1203  001C                     	;# 
  1204  001E                     	;# 
  1205  001F                     	;# 
  1206  008C                     	;# 
  1207  008E                     	;# 
  1208  0091                     	;# 
  1209  0092                     	;# 
  1210  0095                     	;# 
  1211  0096                     	;# 
  1212  0097                     	;# 
  1213  0098                     	;# 
  1214  0099                     	;# 
  1215  009A                     	;# 
  1216  009B                     	;# 
  1217  009B                     	;# 
  1218  009C                     	;# 
  1219  009D                     	;# 
  1220  009E                     	;# 
  1221  010C                     	;# 
  1222  010E                     	;# 
  1223  0111                     	;# 
  1224  0112                     	;# 
  1225  0113                     	;# 
  1226  0114                     	;# 
  1227  0115                     	;# 
  1228  0116                     	;# 
  1229  0117                     	;# 
  1230  0118                     	;# 
  1231  0119                     	;# 
  1232  011A                     	;# 
  1233  011B                     	;# 
  1234  011D                     	;# 
  1235  011D                     	;# 
  1236  018C                     	;# 
  1237  018E                     	;# 
  1238  0191                     	;# 
  1239  0191                     	;# 
  1240  0192                     	;# 
  1241  0193                     	;# 
  1242  0193                     	;# 
  1243  0193                     	;# 
  1244  0194                     	;# 
  1245  0195                     	;# 
  1246  0196                     	;# 
  1247  0199                     	;# 
  1248  019A                     	;# 
  1249  019B                     	;# 
  1250  019B                     	;# 
  1251  019B                     	;# 
  1252  019B                     	;# 
  1253  019C                     	;# 
  1254  019C                     	;# 
  1255  019D                     	;# 
  1256  019E                     	;# 
  1257  019F                     	;# 
  1258  020C                     	;# 
  1259  020E                     	;# 
  1260  0211                     	;# 
  1261  0211                     	;# 
  1262  0212                     	;# 
  1263  0212                     	;# 
  1264  0213                     	;# 
  1265  0213                     	;# 
  1266  0214                     	;# 
  1267  0214                     	;# 
  1268  0215                     	;# 
  1269  0215                     	;# 
  1270  0215                     	;# 
  1271  0216                     	;# 
  1272  0216                     	;# 
  1273  0217                     	;# 
  1274  0217                     	;# 
  1275  0291                     	;# 
  1276  0291                     	;# 
  1277  0292                     	;# 
  1278  0293                     	;# 
  1279  0294                     	;# 
  1280  0295                     	;# 
  1281  0295                     	;# 
  1282  0296                     	;# 
  1283  0391                     	;# 
  1284  0392                     	;# 
  1285  0393                     	;# 
  1286  039A                     	;# 
  1287  039C                     	;# 
  1288  039D                     	;# 
  1289  039E                     	;# 
  1290  039F                     	;# 
  1291  0FE4                     	;# 
  1292  0FE5                     	;# 
  1293  0FE6                     	;# 
  1294  0FE7                     	;# 
  1295  0FE8                     	;# 
  1296  0FE9                     	;# 
  1297  0FEA                     	;# 
  1298  0FEB                     	;# 
  1299  0FED                     	;# 
  1300  0FEE                     	;# 
  1301  0FEF                     	;# 
  1302                           
  1303                           	psect	stringtext1
  1304  0215                     __pstringtext1:
  1305  0215                     _filt:
  1306  0215  34C7               	retlw	199
  1307  0216  3440               	retlw	64
  1308  0217  3400               	retlw	0
  1309  0218  3400               	retlw	0
  1310  0219  34CF               	retlw	207
  1311  021A  3440               	retlw	64
  1312  021B  3400               	retlw	0
  1313  021C  3400               	retlw	0
  1314  021D  346F               	retlw	111
  1315  021E  3440               	retlw	64
  1316  021F  3400               	retlw	0
  1317  0220  3400               	retlw	0
  1318  0221  343F               	retlw	63
  1319  0222  3440               	retlw	64
  1320  0223  3400               	retlw	0
  1321  0224  3400               	retlw	0
  1322  0225  340F               	retlw	15
  1323  0226  3489               	retlw	137
  1324  0227  3400               	retlw	0
  1325  0228  3400               	retlw	0
  1326  0229  340F               	retlw	15
  1327  022A  3488               	retlw	136
  1328  022B  3400               	retlw	0
  1329  022C  3400               	retlw	0
  1330  022D  340F               	retlw	15
  1331  022E  34A4               	retlw	164
  1332  022F  3400               	retlw	0
  1333  0230  3400               	retlw	0
  1334  0231  340F               	retlw	15
  1335  0232  3409               	retlw	9
  1336  0233  3401               	retlw	1
  1337  0234  3400               	retlw	0
  1338  0235  340F               	retlw	15
  1339  0236  3408               	retlw	8
  1340  0237  3401               	retlw	1
  1341  0238  3400               	retlw	0
  1342  0239  340F               	retlw	15
  1343  023A  3424               	retlw	36
  1344  023B  3401               	retlw	1
  1345  023C  3400               	retlw	0
  1346  023D  340F               	retlw	15
  1347  023E  3432               	retlw	50
  1348  023F  3401               	retlw	1
  1349  0240  3400               	retlw	0
  1350  0241                     __end_of_filt:
  1351                           
  1352                           	psect	stringtext2
  1353  034E                     __pstringtext2:
  1354  034E                     _freqs:
  1355  034E  3400               	retlw	0
  1356  034F  3401               	retlw	1
  1357  0350  3402               	retlw	2
  1358  0351  3403               	retlw	3
  1359  0352  3404               	retlw	4
  1360  0353  3405               	retlw	5
  1361  0354  3406               	retlw	6
  1362  0355  3407               	retlw	7
  1363  0356  3408               	retlw	8
  1364  0357  3409               	retlw	9
  1365  0358  340A               	retlw	10
  1366  0359                     __end_of_freqs:
  1367                           
  1368                           	psect	stringtext3
  1369  0359                     __pstringtext3:
  1370  0359                     _gains:
  1371  0359  3404               	retlw	4
  1372  035A  3405               	retlw	5
  1373  035B  3407               	retlw	7
  1374  035C  3403               	retlw	3
  1375  035D  3423               	retlw	35
  1376  035E  3463               	retlw	99
  1377  035F  346B               	retlw	107
  1378  0360  347B               	retlw	123
  1379  0361                     __end_of_gains:
  1380  000E                     _PORTC	set	14
  1381  0015                     _TMR0	set	21
  1382  005E                     _PEIE	set	94
  1383  005F                     _GIE	set	95
  1384  008C                     _TXIF	set	140
  1385  008D                     _RCIF	set	141
  1386  005D                     _TMR0IE	set	93
  1387  005A                     _TMR0IF	set	90
  1388  0065                     _RA5	set	101
  1389  009B                     _ADRESL	set	155
  1390  009C                     _ADRESH	set	156
  1391  009E                     _ADCON1	set	158
  1392  009D                     _ADCON0	set	157
  1393  0098                     _OSCTUNE	set	152
  1394  009A                     _OSCSTAT	set	154
  1395  0099                     _OSCCON	set	153
  1396  0095                     _OPTION_REGbits	set	149
  1397  008C                     _TRISA	set	140
  1398  008E                     _TRISC	set	142
  1399  04E9                     _ADGO	set	1257
  1400  048D                     _RCIE	set	1165
  1401  04AD                     _TMR0CS	set	1197
  1402  04AB                     _PSA	set	1195
  1403  04A8                     _PS0	set	1192
  1404  04A9                     _PS1	set	1193
  1405  04AA                     _PS2	set	1194
  1406  048C                     _TXIE	set	1164
  1407  011D                     _APFCON	set	285
  1408  010E                     _LATC	set	270
  1409  010C                     _LATA	set	268
  1410  08EA                     _TXCKSEL	set	2282
  1411  08EF                     _RXDTSEL	set	2287
  1412  019B                     _SPBRGL	set	411
  1413  019C                     _SPBRGH	set	412
  1414  019A                     _TXREG	set	410
  1415  0199                     _RCREG	set	409
  1416  018E                     _ANSELC	set	398
  1417  018C                     _ANSELA	set	396
  1418  0CF5                     _TXEN	set	3317
  1419  0CEF                     _SPEN	set	3311
  1420  0CF4                     _SYNC	set	3316
  1421  0CFB                     _BRG16	set	3323
  1422  0CF2                     _BRGH	set	3314
  1423  0CEC                     _CREN	set	3308
  1424  0CE9                     _OERR	set	3305
  1425  020E                     _WPUC	set	526
  1426  020C                     _WPUA	set	524
  1427  039A                     _CLKRCON	set	922
  1428                           
  1429                           	psect	cinit
  1430  0053                     start_initialization:	
  1431                           ; #config settings
  1432                           
  1433  0053                     __initialization:
  1434                           
  1435                           ; Clear objects allocated to COMMON
  1436  0053  01F6               	clrf	__pbssCOMMON& (0+127)
  1437  0054  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1438  0055  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1439  0056  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1440                           
  1441                           ; Clear objects allocated to BANK0
  1442  0057  3020               	movlw	low __pbssBANK0
  1443  0058  0084               	movwf	4
  1444  0059  3000               	movlw	high __pbssBANK0
  1445  005A  0085               	movwf	5
  1446  005B  3028               	movlw	40
  1447  005C  2368               	fcall	clear_ram0
  1448  005D                     end_of_initialization:	
  1449                           ;End of C runtime variable initialization code
  1450                           
  1451  005D                     __end_of__initialization:
  1452  005D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1453  005E  0020               	movlb	0
  1454  005F  2A41               	ljmp	_main	;jump to C main() function
  1455                           
  1456                           	psect	bssCOMMON
  1457  0076                     __pbssCOMMON:
  1458  0076                     _USART_rx_flag:
  1459  0076                     	ds	1
  1460  0077                     _USART_tx_flag:
  1461  0077                     	ds	1
  1462  0078                     _USART_tx_length:
  1463  0078                     	ds	1
  1464  0079                     _USART_tx_index:
  1465  0079                     	ds	1
  1466                           
  1467                           	psect	bssBANK0
  1468  0020                     __pbssBANK0:
  1469  0020                     _USART_tx_data:
  1470  0020                     	ds	15
  1471  002F                     _USART_rx_data:
  1472  002F                     	ds	10
  1473  0039                     _TIMER0_timeout:
  1474  0039                     	ds	2
  1475  003B                     _mess_rec_size:
  1476  003B                     	ds	1
  1477  003C                     _USART_rx_index:
  1478  003C                     	ds	1
  1479  003D                     _TIMER0_flag:
  1480  003D                     	ds	1
  1481  003E                     _mess_rec:
  1482  003E                     	ds	10
  1483                           
  1484                           	psect	clrtext
  1485  0368                     clear_ram0:	
  1486                           ;	Called with FSR0 containing the base address, and
  1487                           ;	WREG with the size to clear
  1488                           
  1489  0368  0064               	clrwdt	;clear the watchdog before getting into this loop
  1490  0369                     clrloop0:
  1491  0369  0180               	clrf	0	;clear RAM location pointed to by FSR
  1492  036A  3101               	addfsr 0,1
  1493  036B  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1494  036C  2B69               	goto	clrloop0	;have we reached the end yet?
  1495  036D  3400               	retlw	0	;all done for this memory range, return
  1496                           
  1497                           	psect	cstackCOMMON
  1498  0070                     __pcstackCOMMON:
  1499  0070                     ?_OSCILLATOR_Initialize:
  1500  0070                     ?_setup_TMR0:	
  1501                           ; 1 bytes @ 0x0
  1502                           
  1503  0070                     ?_start_TX_USART_ISR:	
  1504                           ; 1 bytes @ 0x0
  1505                           
  1506  0070                     ?_start_RX_USART_ISR:	
  1507                           ; 1 bytes @ 0x0
  1508                           
  1509  0070                     ?_start_RCM:	
  1510                           ; 1 bytes @ 0x0
  1511                           
  1512  0070                     ?_setup_ADC:	
  1513                           ; 1 bytes @ 0x0
  1514                           
  1515  0070                     ?_sweep:	
  1516                           ; 1 bytes @ 0x0
  1517                           
  1518  0070                     ?_stop_TMR0_ISR:	
  1519                           ; 1 bytes @ 0x0
  1520                           
  1521  0070                     ??_stop_TMR0_ISR:	
  1522                           ; 1 bytes @ 0x0
  1523                           
  1524  0070                     ?_start_TMR0_ISR:	
  1525                           ; 1 bytes @ 0x0
  1526                           
  1527  0070                     ??_start_TMR0_ISR:	
  1528                           ; 1 bytes @ 0x0
  1529                           
  1530  0070                     ?_PIN_MANAGER_Initialize:	
  1531                           ; 1 bytes @ 0x0
  1532                           
  1533  0070                     ?_SYSTEM_Initialize:	
  1534                           ; 1 bytes @ 0x0
  1535                           
  1536  0070                     ?_main:	
  1537                           ; 1 bytes @ 0x0
  1538                           
  1539  0070                     ?_isr:	
  1540                           ; 1 bytes @ 0x0
  1541                           
  1542  0070                     ?_close_RX_USART:	
  1543                           ; 1 bytes @ 0x0
  1544                           
  1545  0070                     ?i1_start_RX_USART_ISR:	
  1546                           ; 1 bytes @ 0x0
  1547                           
  1548  0070                     ??i1_start_RX_USART_ISR:	
  1549                           ; 1 bytes @ 0x0
  1550                           
  1551                           
  1552                           ; 1 bytes @ 0x0
  1553  0070                     	ds	2
  1554  0072                     start_TMR0_ISR@val:
  1555                           
  1556                           ; 1 bytes @ 0x2
  1557  0072                     	ds	1
  1558  0073                     ??_isr:
  1559                           
  1560                           ; 1 bytes @ 0x3
  1561  0073                     	ds	1
  1562  0074                     ??_OSCILLATOR_Initialize:
  1563  0074                     ??_setup_TMR0:	
  1564                           ; 1 bytes @ 0x4
  1565                           
  1566  0074                     ??_start_TX_USART_ISR:	
  1567                           ; 1 bytes @ 0x4
  1568                           
  1569  0074                     ??_start_RX_USART_ISR:	
  1570                           ; 1 bytes @ 0x4
  1571                           
  1572  0074                     ??_start_RCM:	
  1573                           ; 1 bytes @ 0x4
  1574                           
  1575  0074                     ??_setup_ADC:	
  1576                           ; 1 bytes @ 0x4
  1577                           
  1578  0074                     ??_PIN_MANAGER_Initialize:	
  1579                           ; 1 bytes @ 0x4
  1580                           
  1581  0074                     ??_SYSTEM_Initialize:	
  1582                           ; 1 bytes @ 0x4
  1583                           
  1584  0074                     ?_config:	
  1585                           ; 1 bytes @ 0x4
  1586                           
  1587  0074                     ?_setGain:	
  1588                           ; 1 bytes @ 0x4
  1589                           
  1590  0074                     ?_setFreq:	
  1591                           ; 1 bytes @ 0x4
  1592                           
  1593  0074                     ??_close_RX_USART:	
  1594                           ; 1 bytes @ 0x4
  1595                           
  1596  0074                     ?_lputs_ISR:	
  1597                           ; 1 bytes @ 0x4
  1598                           
  1599  0074                     ?_calculate_checksum:	
  1600                           ; 1 bytes @ 0x4
  1601                           
  1602  0074                     ?_ADC_5:	
  1603                           ; 1 bytes @ 0x4
  1604                           
  1605  0074                     setGain@gain_index:	
  1606                           ; 2 bytes @ 0x4
  1607                           
  1608  0074                     setFreq@freq_index:	
  1609                           ; 1 bytes @ 0x4
  1610                           
  1611  0074                     lputs_ISR@length:	
  1612                           ; 1 bytes @ 0x4
  1613                           
  1614  0074                     calculate_checksum@num:	
  1615                           ; 1 bytes @ 0x4
  1616                           
  1617  0074                     config@conf:	
  1618                           ; 1 bytes @ 0x4
  1619                           
  1620                           
  1621                           ; 2 bytes @ 0x4
  1622  0074                     	ds	1
  1623  0075                     ??_setGain:
  1624  0075                     ??_setFreq:	
  1625                           ; 1 bytes @ 0x5
  1626                           
  1627                           
  1628                           ; 1 bytes @ 0x5
  1629  0075                     	ds	1
  1630                           
  1631                           	psect	cstackBANK0
  1632  0048                     __pcstackBANK0:
  1633  0048                     ??_ADC_5:
  1634  0048                     ??_config:	
  1635                           ; 1 bytes @ 0x0
  1636                           
  1637  0048                     ??_lputs_ISR:	
  1638                           ; 1 bytes @ 0x0
  1639                           
  1640  0048                     ??_calculate_checksum:	
  1641                           ; 1 bytes @ 0x0
  1642                           
  1643  0048                     setGain@aux:	
  1644                           ; 1 bytes @ 0x0
  1645                           
  1646  0048                     setFreq@asic:	
  1647                           ; 1 bytes @ 0x0
  1648                           
  1649                           
  1650                           ; 1 bytes @ 0x0
  1651  0048                     	ds	1
  1652  0049                     config@i:
  1653  0049                     setGain@asic:	
  1654                           ; 1 bytes @ 0x1
  1655                           
  1656  0049                     setFreq@aux:	
  1657                           ; 1 bytes @ 0x1
  1658                           
  1659                           
  1660                           ; 1 bytes @ 0x1
  1661  0049                     	ds	1
  1662  004A                     config@out:
  1663  004A                     lputs_ISR@i:	
  1664                           ; 1 bytes @ 0x2
  1665                           
  1666  004A                     calculate_checksum@data:	
  1667                           ; 1 bytes @ 0x2
  1668                           
  1669  004A                     ADC_5@ADC_value:	
  1670                           ; 1 bytes @ 0x2
  1671                           
  1672                           
  1673                           ; 2 bytes @ 0x2
  1674  004A                     	ds	1
  1675  004B                     lputs_ISR@data:
  1676  004B                     calculate_checksum@check:	
  1677                           ; 1 bytes @ 0x3
  1678                           
  1679                           
  1680                           ; 1 bytes @ 0x3
  1681  004B                     	ds	1
  1682  004C                     ?_measure:
  1683  004C                     calculate_checksum@i:	
  1684                           ; 1 bytes @ 0x4
  1685                           
  1686  004C                     measure@Q:	
  1687                           ; 1 bytes @ 0x4
  1688                           
  1689                           
  1690                           ; 1 bytes @ 0x4
  1691  004C                     	ds	1
  1692  004D                     measure@asic:
  1693                           
  1694                           ; 2 bytes @ 0x5
  1695  004D                     	ds	2
  1696  004F                     ??_measure:
  1697                           
  1698                           ; 1 bytes @ 0x7
  1699  004F                     	ds	2
  1700  0051                     measure@offset:
  1701                           
  1702                           ; 2 bytes @ 0x9
  1703  0051                     	ds	2
  1704  0053                     measure@I:
  1705                           
  1706                           ; 1 bytes @ 0xB
  1707  0053                     	ds	1
  1708  0054                     measure@value:
  1709                           
  1710                           ; 2 bytes @ 0xC
  1711  0054                     	ds	2
  1712  0056                     measure@aux2:
  1713                           
  1714                           ; 2 bytes @ 0xE
  1715  0056                     	ds	2
  1716  0058                     measure@aux1:
  1717                           
  1718                           ; 2 bytes @ 0x10
  1719  0058                     	ds	2
  1720  005A                     ??_sweep:
  1721                           
  1722                           ; 1 bytes @ 0x12
  1723  005A                     	ds	2
  1724  005C                     sweep@check:
  1725                           
  1726                           ; 1 bytes @ 0x14
  1727  005C                     	ds	1
  1728  005D                     sweep@aux:
  1729                           
  1730                           ; 7 bytes @ 0x15
  1731  005D                     	ds	7
  1732  0064                     sweep@freq_index:
  1733                           
  1734                           ; 1 bytes @ 0x1C
  1735  0064                     	ds	1
  1736  0065                     sweep@i:
  1737                           
  1738                           ; 1 bytes @ 0x1D
  1739  0065                     	ds	1
  1740  0066                     sweep@count:
  1741                           
  1742                           ; 1 bytes @ 0x1E
  1743  0066                     	ds	1
  1744  0067                     sweep@I:
  1745                           
  1746                           ; 2 bytes @ 0x1F
  1747  0067                     	ds	2
  1748  0069                     sweep@Q:
  1749                           
  1750                           ; 2 bytes @ 0x21
  1751  0069                     	ds	2
  1752  006B                     sweep@gain_index:
  1753                           
  1754                           ; 1 bytes @ 0x23
  1755  006B                     	ds	1
  1756  006C                     sweep@ret:
  1757                           
  1758                           ; 1 bytes @ 0x24
  1759  006C                     	ds	1
  1760  006D                     sweep@asic:
  1761                           
  1762                           ; 2 bytes @ 0x25
  1763  006D                     	ds	2
  1764  006F                     ??_main:
  1765                           
  1766                           ; 1 bytes @ 0x27
  1767  006F                     	ds	1
  1768                           
  1769                           	psect	maintext
  1770  0241                     __pmaintext:	
  1771 ;;
  1772 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1773 ;;
  1774 ;; *************** function _main *****************
  1775 ;; Defined at:
  1776 ;;		line 30 in file "main.c"
  1777 ;; Parameters:    Size  Location     Type
  1778 ;;		None
  1779 ;; Auto vars:     Size  Location     Type
  1780 ;;  i               1    0        unsigned char 
  1781 ;; Return value:  Size  Location     Type
  1782 ;;                  1    wreg      void 
  1783 ;; Registers used:
  1784 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1785 ;; Tracked objects:
  1786 ;;		On entry : B1F/0
  1787 ;;		On exit  : 1F/0
  1788 ;;		Unchanged: 0/0
  1789 ;; Data sizes:     COMMON   BANK0   BANK1
  1790 ;;      Params:         0       0       0
  1791 ;;      Locals:         0       0       0
  1792 ;;      Temps:          0       1       0
  1793 ;;      Totals:         0       1       0
  1794 ;;Total ram usage:        1 bytes
  1795 ;; Hardware stack levels required when called:    5
  1796 ;; This function calls:
  1797 ;;		_SYSTEM_Initialize
  1798 ;;		_setup_ADC
  1799 ;;		_setup_TMR0
  1800 ;;		_start_RCM
  1801 ;;		_start_RX_USART_ISR
  1802 ;;		_start_TX_USART_ISR
  1803 ;;		_sweep
  1804 ;; This function is called by:
  1805 ;;		Startup code after reset
  1806 ;; This function uses a non-reentrant model
  1807 ;;
  1808                           
  1809                           
  1810                           ;psect for function _main
  1811  0241                     _main:
  1812                           
  1813                           ;main.c: 32:     unsigned char i;;main.c: 34:     SYSTEM_Initialize();
  1814                           
  1815                           ;incstack = 0
  1816                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1817  0241  2384               	fcall	_SYSTEM_Initialize
  1818                           
  1819                           ;main.c: 38:     setup_TMR0();
  1820  0242  236E               	fcall	_setup_TMR0
  1821                           
  1822                           ;main.c: 39:     start_TX_USART_ISR();
  1823  0243  2330               	fcall	_start_TX_USART_ISR
  1824                           
  1825                           ;main.c: 40:     start_RX_USART_ISR();
  1826  0244  2320               	fcall	_start_RX_USART_ISR
  1827                           
  1828                           ;main.c: 41:     start_RCM();
  1829  0245  2380               	fcall	_start_RCM
  1830                           
  1831                           ;main.c: 42:     setup_ADC();
  1832  0246  2374               	fcall	_setup_ADC
  1833                           
  1834                           ;main.c: 45:     RA5 = 0;
  1835  0247  0020               	movlb	0	; select bank0
  1836  0248  128C               	bcf	12,5	;volatile
  1837                           
  1838                           ;main.c: 46:     _delay((unsigned long)((150)*(500000/4000.0)));
  1839  0249  3019               	movlw	25
  1840  024A  0020               	movlb	0	; select bank0
  1841  024B  00EF               	movwf	??_main
  1842  024C  3058               	movlw	88
  1843  024D                     u1197:
  1844  024D  0B89               	decfsz	9,f
  1845  024E  2A4D               	goto	u1197
  1846  024F  0BEF               	decfsz	??_main,f
  1847  0250  2A4D               	goto	u1197
  1848  0251  0000               	nop
  1849                           
  1850                           ;main.c: 47:     RA5 = 1;
  1851  0252  0020               	movlb	0	; select bank0
  1852  0253  168C               	bsf	12,5	;volatile
  1853  0254                     l119:	
  1854                           ;main.c: 119:     while(1) {
  1855                           
  1856  0254  0064               	clrwdt	;# 
  1857                           
  1858                           ;main.c: 122:         if (TIMER0_flag) {
  1859  0255  0020               	movlb	0	; select bank0
  1860  0256  083D               	movf	_TIMER0_flag,w	;volatile
  1861  0257  1903               	btfsc	3,2
  1862  0258  2A54               	goto	l119
  1863                           
  1864                           ;main.c: 123:               TIMER0_flag = 0;
  1865  0259  01BD               	clrf	_TIMER0_flag	;volatile
  1866                           
  1867                           ;main.c: 125:               if (USART_rx_index > 10) {
  1868  025A  300B               	movlw	11
  1869  025B  023C               	subwf	_USART_rx_index,w	;volatile
  1870  025C  1C03               	skipc
  1871  025D  2A60               	goto	l2191
  1872                           
  1873                           ;main.c: 126:                 USART_rx_index = 0;
  1874  025E  01BC               	clrf	_USART_rx_index	;volatile
  1875                           
  1876                           ;main.c: 127:                 continue;
  1877  025F  2A54               	goto	l119
  1878  0260                     l2191:
  1879                           
  1880                           ;main.c: 130:               if(USART_rx_index == 0)
  1881  0260  083C               	movf	_USART_rx_index,w	;volatile
  1882  0261  1903               	btfsc	3,2
  1883  0262  2A54               	goto	l119
  1884                           
  1885                           ;main.c: 134:               mess_rec_size = USART_rx_index;
  1886  0263  083C               	movf	_USART_rx_index,w	;volatile
  1887  0264  00EF               	movwf	??_main
  1888  0265  086F               	movf	??_main,w
  1889  0266  00BB               	movwf	_mess_rec_size	;volatile
  1890                           
  1891                           ;main.c: 135:               USART_rx_index = 0;
  1892  0267  01BC               	clrf	_USART_rx_index	;volatile
  1893                           
  1894                           ;main.c: 140:               sweep();
  1895  0268  2103               	fcall	_sweep
  1896  0269  2A54               	goto	l119
  1897  026A                     __end_of_main:
  1898                           
  1899                           	psect	text1
  1900  0103                     __ptext1:	
  1901 ;; *************** function _sweep *****************
  1902 ;; Defined at:
  1903 ;;		line 444 in file "comm.c"
  1904 ;; Parameters:    Size  Location     Type
  1905 ;;		None
  1906 ;; Auto vars:     Size  Location     Type
  1907 ;;  aux             7   21[BANK0 ] unsigned char [7]
  1908 ;;  asic            2   37[BANK0 ] struct .
  1909 ;;  Q               2   33[BANK0 ] short 
  1910 ;;  I               2   31[BANK0 ] short 
  1911 ;;  ret             1   36[BANK0 ] unsigned char 
  1912 ;;  gain_index      1   35[BANK0 ] unsigned char 
  1913 ;;  count           1   30[BANK0 ] unsigned char 
  1914 ;;  i               1   29[BANK0 ] unsigned char 
  1915 ;;  freq_index      1   28[BANK0 ] unsigned char 
  1916 ;;  check           1   20[BANK0 ] unsigned char 
  1917 ;; Return value:  Size  Location     Type
  1918 ;;                  1    wreg      void 
  1919 ;; Registers used:
  1920 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1921 ;; Tracked objects:
  1922 ;;		On entry : 1F/0
  1923 ;;		On exit  : 1F/0
  1924 ;;		Unchanged: 0/0
  1925 ;; Data sizes:     COMMON   BANK0   BANK1
  1926 ;;      Params:         0       0       0
  1927 ;;      Locals:         0      19       0
  1928 ;;      Temps:          0       2       0
  1929 ;;      Totals:         0      21       0
  1930 ;;Total ram usage:       21 bytes
  1931 ;; Hardware stack levels used:    1
  1932 ;; Hardware stack levels required when called:    4
  1933 ;; This function calls:
  1934 ;;		_calculate_checksum
  1935 ;;		_lputs_ISR
  1936 ;;		_measure
  1937 ;;		_setFreq
  1938 ;;		_setGain
  1939 ;; This function is called by:
  1940 ;;		_main
  1941 ;; This function uses a non-reentrant model
  1942 ;;
  1943                           
  1944                           
  1945                           ;psect for function _sweep
  1946  0103                     _sweep:
  1947                           
  1948                           ;comm.c: 446:     unsigned char gain_index;;comm.c: 447:     unsigned char freq_index;;c
      +                          omm.c: 448:     unsigned char i, ret, count;;comm.c: 449:     short I,Q;;comm.c: 450:   
      +                            unsigned char aux[7], check;;comm.c: 453:     BIO3 asic;;comm.c: 454:     asic.datasho
      +                          rt = 0;
  1949                           
  1950                           ;incstack = 0
  1951                           ; Regs used in _sweep: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1952  0103  01ED               	clrf	sweep@asic
  1953  0104  01EE               	clrf	sweep@asic+1
  1954                           
  1955                           ;comm.c: 465:     freq_index = 10;
  1956  0105  300A               	movlw	10
  1957  0106  00DA               	movwf	??_sweep
  1958  0107  085A               	movf	??_sweep,w
  1959  0108  00E4               	movwf	sweep@freq_index
  1960                           
  1961                           ;comm.c: 466:     gain_index = 0;
  1962  0109  01EB               	clrf	sweep@gain_index
  1963                           
  1964                           ;comm.c: 467:     setGain(&asic,gain_index);
  1965  010A  01F4               	clrf	setGain@gain_index
  1966  010B  306D               	movlw	(low (sweep@asic| 0))& (0+255)
  1967  010C  219E               	fcall	_setGain
  1968                           
  1969                           ;comm.c: 470:     for (i = 0; i < 11; i++) {
  1970  010D  0020               	movlb	0	; select bank0
  1971  010E  01E5               	clrf	sweep@i
  1972  010F                     l2105:
  1973                           
  1974                           ;comm.c: 473:         setFreq(&asic,freq_index);
  1975  010F  0864               	movf	sweep@freq_index,w
  1976  0110  00DA               	movwf	??_sweep
  1977  0111  085A               	movf	??_sweep,w
  1978  0112  00F4               	movwf	setFreq@freq_index
  1979  0113  306D               	movlw	(low (sweep@asic| 0))& (0+255)
  1980  0114  2293               	fcall	_setFreq
  1981                           
  1982                           ;comm.c: 480:         count = 0;
  1983  0115  0020               	movlb	0	; select bank0
  1984  0116  01E6               	clrf	sweep@count
  1985  0117                     l2111:
  1986                           
  1987                           ;comm.c: 485:             ret = measure(&I,&Q,asic);
  1988  0117  3069               	movlw	(low (sweep@Q| 0))& (0+255)
  1989  0118  00DA               	movwf	??_sweep
  1990  0119  085A               	movf	??_sweep,w
  1991  011A  00CC               	movwf	measure@Q
  1992  011B  086E               	movf	sweep@asic+1,w
  1993  011C  00CE               	movwf	measure@asic+1
  1994  011D  086D               	movf	sweep@asic,w
  1995  011E  00CD               	movwf	measure@asic
  1996  011F  3067               	movlw	(low (sweep@I| 0))& (0+255)
  1997  0120  2060               	fcall	_measure
  1998  0121  0020               	movlb	0	; select bank0
  1999  0122  00DB               	movwf	??_sweep+1
  2000  0123  085B               	movf	??_sweep+1,w
  2001  0124  00EC               	movwf	sweep@ret
  2002                           
  2003                           ;comm.c: 487:             if (ret == 1) {
  2004  0125  036C               	decf	sweep@ret,w
  2005  0126  1D03               	btfss	3,2
  2006  0127  2939               	goto	l2127
  2007                           
  2008                           ;comm.c: 489:                 if (count == 2) break;
  2009  0128  3002               	movlw	2
  2010  0129  0666               	xorwf	sweep@count,w
  2011  012A  1903               	btfsc	3,2
  2012  012B  2953               	goto	l2143
  2013                           
  2014                           ;comm.c: 490:                 count = ret;
  2015  012C  086C               	movf	sweep@ret,w
  2016  012D  00DA               	movwf	??_sweep
  2017  012E  085A               	movf	??_sweep,w
  2018  012F  00E6               	movwf	sweep@count
  2019                           
  2020                           ;comm.c: 493:                 if (gain_index < 7) {
  2021  0130  3007               	movlw	7
  2022  0131  026B               	subwf	sweep@gain_index,w
  2023  0132  1803               	skipnc
  2024  0133  2953               	goto	l2143
  2025                           
  2026                           ;comm.c: 497:                     gain_index++;
  2027  0134  3001               	movlw	1
  2028  0135  00DA               	movwf	??_sweep
  2029  0136  085A               	movf	??_sweep,w
  2030  0137  07EB               	addwf	sweep@gain_index,f
  2031  0138  2949               	goto	l2139
  2032  0139                     l2127:	
  2033                           ;comm.c: 499:                 } else {
  2034                           
  2035                           ;comm.c: 498:                     setGain(&asic,gain_index);
  2036                           
  2037  0139  3002               	movlw	2
  2038  013A  066C               	xorwf	sweep@ret,w
  2039  013B  1D03               	btfss	3,2
  2040  013C  294F               	goto	l2141
  2041                           
  2042                           ;comm.c: 507:                 if (count == 1) break;
  2043  013D  0366               	decf	sweep@count,w
  2044  013E  1903               	btfsc	3,2
  2045  013F  2953               	goto	l2143
  2046                           
  2047                           ;comm.c: 508:                 count = ret;
  2048  0140  086C               	movf	sweep@ret,w
  2049  0141  00DA               	movwf	??_sweep
  2050  0142  085A               	movf	??_sweep,w
  2051  0143  00E6               	movwf	sweep@count
  2052                           
  2053                           ;comm.c: 510:                 if (gain_index > 0) {
  2054  0144  086B               	movf	sweep@gain_index,w
  2055  0145  1903               	btfsc	3,2
  2056  0146  2953               	goto	l2143
  2057                           
  2058                           ;comm.c: 511:                     gain_index--;
  2059  0147  3001               	movlw	1
  2060  0148  02EB               	subwf	sweep@gain_index,f
  2061  0149                     l2139:
  2062                           
  2063                           ;comm.c: 512:                     setGain(&asic,gain_index);
  2064  0149  086B               	movf	sweep@gain_index,w
  2065  014A  00DA               	movwf	??_sweep
  2066  014B  085A               	movf	??_sweep,w
  2067  014C  00F4               	movwf	setGain@gain_index
  2068  014D  306D               	movlw	(low (sweep@asic| 0))& (0+255)
  2069  014E  219E               	fcall	_setGain
  2070  014F                     l2141:	
  2071                           ;comm.c: 513:                 } else {
  2072                           
  2073  014F  0020               	movlb	0	; select bank0
  2074  0150  086C               	movf	sweep@ret,w
  2075  0151  1D03               	btfss	3,2
  2076  0152  2917               	goto	l2111
  2077  0153                     l2143:
  2078                           
  2079                           ;comm.c: 526:         ret = (freq_index << 4) & 0xf0;
  2080  0153  0864               	movf	sweep@freq_index,w
  2081  0154  00DA               	movwf	??_sweep
  2082  0155  3003               	movlw	3
  2083  0156                     u1145:
  2084  0156  35DA               	lslf	??_sweep,f
  2085  0157  3EFF               	addlw	-1
  2086  0158  1D03               	skipz
  2087  0159  2956               	goto	u1145
  2088  015A  355A               	lslf	??_sweep,w
  2089  015B  39F0               	andlw	240
  2090  015C  00DB               	movwf	??_sweep+1
  2091  015D  085B               	movf	??_sweep+1,w
  2092  015E  00EC               	movwf	sweep@ret
  2093                           
  2094                           ;comm.c: 527:         ret |= (gain_index & 0xff);
  2095  015F  086B               	movf	sweep@gain_index,w
  2096  0160  00DA               	movwf	??_sweep
  2097  0161  085A               	movf	??_sweep,w
  2098  0162  04EC               	iorwf	sweep@ret,f
  2099                           
  2100                           ;comm.c: 529:         aux[0] = 'f';
  2101  0163  3066               	movlw	102
  2102  0164  00DA               	movwf	??_sweep
  2103  0165  085A               	movf	??_sweep,w
  2104  0166  00DD               	movwf	sweep@aux
  2105                           
  2106                           ;comm.c: 530:         aux[1] = (unsigned char)(I & 0xff);
  2107  0167  0867               	movf	sweep@I,w
  2108  0168  00DA               	movwf	??_sweep
  2109  0169  085A               	movf	??_sweep,w
  2110  016A  00DE               	movwf	sweep@aux+1
  2111                           
  2112                           ;comm.c: 531:         aux[2] = (unsigned char)((I >> 8) & 0xff);
  2113  016B  0868               	movf	sweep@I+1,w
  2114  016C  00DA               	movwf	??_sweep
  2115  016D  085A               	movf	??_sweep,w
  2116  016E  00DF               	movwf	sweep@aux+2
  2117                           
  2118                           ;comm.c: 532:         aux[3] = (unsigned char)(Q & 0xff);
  2119  016F  0869               	movf	sweep@Q,w
  2120  0170  00DA               	movwf	??_sweep
  2121  0171  085A               	movf	??_sweep,w
  2122  0172  00E0               	movwf	sweep@aux+3
  2123                           
  2124                           ;comm.c: 533:         aux[4] = (unsigned char)((Q >> 8) & 0xff);
  2125  0173  086A               	movf	sweep@Q+1,w
  2126  0174  00DA               	movwf	??_sweep
  2127  0175  085A               	movf	??_sweep,w
  2128  0176  00E1               	movwf	sweep@aux+4
  2129                           
  2130                           ;comm.c: 534:         aux[5] = ret;
  2131  0177  086C               	movf	sweep@ret,w
  2132  0178  00DA               	movwf	??_sweep
  2133  0179  085A               	movf	??_sweep,w
  2134  017A  00E2               	movwf	sweep@aux+5
  2135                           
  2136                           ;comm.c: 536:         check = calculate_checksum(aux,6);
  2137  017B  3006               	movlw	6
  2138  017C  00DA               	movwf	??_sweep
  2139  017D  085A               	movf	??_sweep,w
  2140  017E  00F4               	movwf	calculate_checksum@num
  2141  017F  305D               	movlw	(low (sweep@aux| 0))& (0+255)
  2142  0180  22F7               	fcall	_calculate_checksum
  2143  0181  00DB               	movwf	??_sweep+1
  2144  0182  085B               	movf	??_sweep+1,w
  2145  0183  00DC               	movwf	sweep@check
  2146                           
  2147                           ;comm.c: 537:         aux[6] = check;
  2148  0184  085C               	movf	sweep@check,w
  2149  0185  00DA               	movwf	??_sweep
  2150  0186  085A               	movf	??_sweep,w
  2151  0187  00E3               	movwf	sweep@aux+6
  2152                           
  2153                           ;comm.c: 540:         { ADCON0 = 0b00100100;};
  2154  0188  3024               	movlw	36
  2155  0189  0021               	movlb	1	; select bank1
  2156  018A  009D               	movwf	29	;volatile
  2157                           
  2158                           ;comm.c: 542:         lputs_ISR(aux,7);
  2159  018B  3007               	movlw	7
  2160  018C  0020               	movlb	0	; select bank0
  2161  018D  00DA               	movwf	??_sweep
  2162  018E  085A               	movf	??_sweep,w
  2163  018F  00F4               	movwf	lputs_ISR@length
  2164  0190  305D               	movlw	(low (sweep@aux| 0))& (0+255)
  2165  0191  226A               	fcall	_lputs_ISR
  2166                           
  2167                           ;comm.c: 552:         freq_index--;
  2168  0192  3001               	movlw	1
  2169  0193  0020               	movlb	0	; select bank0
  2170  0194  02E4               	subwf	sweep@freq_index,f
  2171                           
  2172                           ;comm.c: 553:     }
  2173  0195  3001               	movlw	1
  2174  0196  00DA               	movwf	??_sweep
  2175  0197  085A               	movf	??_sweep,w
  2176  0198  07E5               	addwf	sweep@i,f
  2177  0199  300B               	movlw	11
  2178  019A  0265               	subwf	sweep@i,w
  2179  019B  1803               	btfsc	3,0
  2180  019C  0008               	return
  2181  019D  290F               	goto	l2105
  2182  019E                     __end_of_sweep:
  2183                           
  2184                           	psect	text2
  2185  019E                     __ptext2:	
  2186 ;; *************** function _setGain *****************
  2187 ;; Defined at:
  2188 ;;		line 162 in file "bio3.c"
  2189 ;; Parameters:    Size  Location     Type
  2190 ;;  asic            1    wreg     PTR struct .
  2191 ;;		 -> sweep@asic(2), 
  2192 ;;  gain_index      1    4[COMMON] unsigned char 
  2193 ;; Auto vars:     Size  Location     Type
  2194 ;;  asic            1    1[BANK0 ] PTR struct .
  2195 ;;		 -> sweep@asic(2), 
  2196 ;;  aux             1    0[BANK0 ] struct .
  2197 ;; Return value:  Size  Location     Type
  2198 ;;                  1    wreg      void 
  2199 ;; Registers used:
  2200 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, pclath
  2201 ;; Tracked objects:
  2202 ;;		On entry : 1F/0
  2203 ;;		On exit  : 0/0
  2204 ;;		Unchanged: 0/0
  2205 ;; Data sizes:     COMMON   BANK0   BANK1
  2206 ;;      Params:         1       0       0
  2207 ;;      Locals:         0       2       0
  2208 ;;      Temps:          1       0       0
  2209 ;;      Totals:         2       2       0
  2210 ;;Total ram usage:        4 bytes
  2211 ;; Hardware stack levels used:    1
  2212 ;; Hardware stack levels required when called:    2
  2213 ;; This function calls:
  2214 ;;		Nothing
  2215 ;; This function is called by:
  2216 ;;		_sweep
  2217 ;; This function uses a non-reentrant model
  2218 ;;
  2219                           
  2220                           
  2221                           ;psect for function _setGain
  2222  019E                     _setGain:
  2223                           
  2224                           ;incstack = 0
  2225                           ; Regs used in _setGain: [wreg-fsr1h+pclath]
  2226                           ;setGain@asic stored from wreg
  2227  019E  00C9               	movwf	setGain@asic
  2228                           
  2229                           ;bio3.c: 162: void setGain(BIO3* asic, unsigned char gain_index);bio3.c: 163: {;bio3.c: 
      +                          164:     RADIO_gain aux;;bio3.c: 165:     aux.data = gains[gain_index];
  2230  019F  0874               	movf	setGain@gain_index,w
  2231  01A0  3E59               	addlw	low (_gains| (0+32768))
  2232  01A1  0084               	movwf	4
  2233  01A2  3083               	movlw	high (_gains| (0+32768))
  2234  01A3  1803               	skipnc
  2235  01A4  3E01               	addlw	1
  2236  01A5  0085               	movwf	5
  2237  01A6  0800               	movf	0,w	;code access
  2238  01A7  00F5               	movwf	??_setGain
  2239  01A8  0875               	movf	??_setGain,w
  2240  01A9  00C8               	movwf	setGain@aux
  2241                           
  2242                           ;bio3.c: 167:     asic->data_bits.GD0 = aux.data_bits.GD0;
  2243  01AA  0849               	movf	setGain@asic,w
  2244  01AB  0086               	movwf	6
  2245  01AC  0187               	clrf	7
  2246  01AD  1101               	bcf	1,2
  2247  01AE  1848               	btfsc	setGain@aux,0
  2248  01AF  1501               	bsf	1,2
  2249                           
  2250                           ;bio3.c: 168:     asic->data_bits.GD1 = aux.data_bits.GD1;
  2251  01B0  0020               	movlb	0	; select bank0
  2252  01B1  0849               	movf	setGain@asic,w
  2253  01B2  0086               	movwf	6
  2254  01B3  0187               	clrf	7
  2255  01B4  1181               	bcf	1,3
  2256  01B5  18C8               	btfsc	setGain@aux,1
  2257  01B6  1581               	bsf	1,3
  2258                           
  2259                           ;bio3.c: 169:     asic->data_bits.GD2 = aux.data_bits.GD2;
  2260  01B7  0020               	movlb	0	; select bank0
  2261  01B8  0849               	movf	setGain@asic,w
  2262  01B9  0086               	movwf	6
  2263  01BA  0187               	clrf	7
  2264  01BB  1201               	bcf	1,4
  2265  01BC  1948               	btfsc	setGain@aux,2
  2266  01BD  1601               	bsf	1,4
  2267                           
  2268                           ;bio3.c: 170:     asic->data_bits.GS0 = aux.data_bits.GS0;
  2269  01BE  0020               	movlb	0	; select bank0
  2270  01BF  0849               	movf	setGain@asic,w
  2271  01C0  0086               	movwf	6
  2272  01C1  0187               	clrf	7
  2273  01C2  1381               	bcf	1,7
  2274  01C3  19C8               	btfsc	setGain@aux,3
  2275  01C4  1781               	bsf	1,7
  2276                           
  2277                           ;bio3.c: 171:     asic->data_bits.GS1 = aux.data_bits.GS1;
  2278  01C5  0020               	movlb	0	; select bank0
  2279  01C6  0A49               	incf	setGain@asic,w
  2280  01C7  0086               	movwf	6
  2281  01C8  0187               	clrf	7
  2282  01C9  1001               	bcf	1,0
  2283  01CA  1A48               	btfsc	setGain@aux,4
  2284  01CB  1401               	bsf	1,0
  2285                           
  2286                           ;bio3.c: 172:     asic->data_bits.GS2 = aux.data_bits.GS2;
  2287  01CC  0020               	movlb	0	; select bank0
  2288  01CD  0A49               	incf	setGain@asic,w
  2289  01CE  0086               	movwf	6
  2290  01CF  0187               	clrf	7
  2291  01D0  1081               	bcf	1,1
  2292  01D1  1AC8               	btfsc	setGain@aux,5
  2293  01D2  1481               	bsf	1,1
  2294                           
  2295                           ;bio3.c: 173:     asic->data_bits.GS3 = aux.data_bits.GS3;
  2296  01D3  0020               	movlb	0	; select bank0
  2297  01D4  0A49               	incf	setGain@asic,w
  2298  01D5  0086               	movwf	6
  2299  01D6  0187               	clrf	7
  2300  01D7  1101               	bcf	1,2
  2301  01D8  1B48               	btfsc	setGain@aux,6
  2302  01D9  1501               	bsf	1,2
  2303  01DA  0008               	return
  2304  01DB                     __end_of_setGain:
  2305                           
  2306                           	psect	text3
  2307  0293                     __ptext3:	
  2308 ;; *************** function _setFreq *****************
  2309 ;; Defined at:
  2310 ;;		line 176 in file "bio3.c"
  2311 ;; Parameters:    Size  Location     Type
  2312 ;;  asic            1    wreg     PTR struct .
  2313 ;;		 -> sweep@asic(2), 
  2314 ;;  freq_index      1    4[COMMON] unsigned char 
  2315 ;; Auto vars:     Size  Location     Type
  2316 ;;  asic            1    0[BANK0 ] PTR struct .
  2317 ;;		 -> sweep@asic(2), 
  2318 ;;  aux             1    1[BANK0 ] struct .
  2319 ;; Return value:  Size  Location     Type
  2320 ;;                  1    wreg      void 
  2321 ;; Registers used:
  2322 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, pclath
  2323 ;; Tracked objects:
  2324 ;;		On entry : 1F/0
  2325 ;;		On exit  : 0/0
  2326 ;;		Unchanged: 0/0
  2327 ;; Data sizes:     COMMON   BANK0   BANK1
  2328 ;;      Params:         1       0       0
  2329 ;;      Locals:         0       2       0
  2330 ;;      Temps:          1       0       0
  2331 ;;      Totals:         2       2       0
  2332 ;;Total ram usage:        4 bytes
  2333 ;; Hardware stack levels used:    1
  2334 ;; Hardware stack levels required when called:    2
  2335 ;; This function calls:
  2336 ;;		Nothing
  2337 ;; This function is called by:
  2338 ;;		_sweep
  2339 ;; This function uses a non-reentrant model
  2340 ;;
  2341                           
  2342                           
  2343                           ;psect for function _setFreq
  2344  0293                     _setFreq:
  2345                           
  2346                           ;incstack = 0
  2347                           ; Regs used in _setFreq: [wreg-fsr1h+pclath]
  2348                           ;setFreq@asic stored from wreg
  2349  0293  00C8               	movwf	setFreq@asic
  2350                           
  2351                           ;bio3.c: 176: void setFreq(BIO3* asic, unsigned char freq_index);bio3.c: 177: {;bio3.c: 
      +                          178:     RADIO_freq aux;;bio3.c: 179:     aux.data = freqs[freq_index];
  2352  0294  0874               	movf	setFreq@freq_index,w
  2353  0295  3E4E               	addlw	low (_freqs| (0+32768))
  2354  0296  0084               	movwf	4
  2355  0297  3083               	movlw	high (_freqs| (0+32768))
  2356  0298  1803               	skipnc
  2357  0299  3E01               	addlw	1
  2358  029A  0085               	movwf	5
  2359  029B  0800               	movf	0,w	;code access
  2360  029C  00F5               	movwf	??_setFreq
  2361  029D  0875               	movf	??_setFreq,w
  2362  029E  00C9               	movwf	setFreq@aux
  2363                           
  2364                           ;bio3.c: 181:     asic->data_bits.F0 = aux.data_bits.F0;
  2365  029F  0A48               	incf	setFreq@asic,w
  2366  02A0  0086               	movwf	6
  2367  02A1  0187               	clrf	7
  2368  02A2  1201               	bcf	1,4
  2369  02A3  1849               	btfsc	setFreq@aux,0
  2370  02A4  1601               	bsf	1,4
  2371                           
  2372                           ;bio3.c: 182:     asic->data_bits.F1 = aux.data_bits.F1;
  2373  02A5  0020               	movlb	0	; select bank0
  2374  02A6  0A48               	incf	setFreq@asic,w
  2375  02A7  0086               	movwf	6
  2376  02A8  0187               	clrf	7
  2377  02A9  1281               	bcf	1,5
  2378  02AA  18C9               	btfsc	setFreq@aux,1
  2379  02AB  1681               	bsf	1,5
  2380                           
  2381                           ;bio3.c: 183:     asic->data_bits.F2 = aux.data_bits.F2;
  2382  02AC  0020               	movlb	0	; select bank0
  2383  02AD  0A48               	incf	setFreq@asic,w
  2384  02AE  0086               	movwf	6
  2385  02AF  0187               	clrf	7
  2386  02B0  1301               	bcf	1,6
  2387  02B1  1949               	btfsc	setFreq@aux,2
  2388  02B2  1701               	bsf	1,6
  2389                           
  2390                           ;bio3.c: 184:     asic->data_bits.F3 = aux.data_bits.F3;
  2391  02B3  0020               	movlb	0	; select bank0
  2392  02B4  0A48               	incf	setFreq@asic,w
  2393  02B5  0086               	movwf	6
  2394  02B6  0187               	clrf	7
  2395  02B7  1381               	bcf	1,7
  2396  02B8  19C9               	btfsc	setFreq@aux,3
  2397  02B9  1781               	bsf	1,7
  2398  02BA  0008               	return
  2399  02BB                     __end_of_setFreq:
  2400                           
  2401                           	psect	text4
  2402  0060                     __ptext4:	
  2403 ;; *************** function _measure *****************
  2404 ;; Defined at:
  2405 ;;		line 561 in file "comm.c"
  2406 ;; Parameters:    Size  Location     Type
  2407 ;;  I               1    wreg     PTR short 
  2408 ;;		 -> sweep@I(2), 
  2409 ;;  Q               1    4[BANK0 ] PTR short 
  2410 ;;		 -> sweep@Q(2), 
  2411 ;;  asic            2    5[BANK0 ] struct .
  2412 ;; Auto vars:     Size  Location     Type
  2413 ;;  I               1   11[BANK0 ] PTR short 
  2414 ;;		 -> sweep@I(2), 
  2415 ;;  aux1            2   16[BANK0 ] short 
  2416 ;;  aux2            2   14[BANK0 ] short 
  2417 ;;  value           2   12[BANK0 ] unsigned short 
  2418 ;;  offset          2    9[BANK0 ] unsigned short 
  2419 ;; Return value:  Size  Location     Type
  2420 ;;                  1    wreg      unsigned char 
  2421 ;; Registers used:
  2422 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2423 ;; Tracked objects:
  2424 ;;		On entry : 1F/0
  2425 ;;		On exit  : 0/0
  2426 ;;		Unchanged: 0/0
  2427 ;; Data sizes:     COMMON   BANK0   BANK1
  2428 ;;      Params:         0       3       0
  2429 ;;      Locals:         0       9       0
  2430 ;;      Temps:          0       2       0
  2431 ;;      Totals:         0      14       0
  2432 ;;Total ram usage:       14 bytes
  2433 ;; Hardware stack levels used:    1
  2434 ;; Hardware stack levels required when called:    3
  2435 ;; This function calls:
  2436 ;;		_ADC_5
  2437 ;;		_config
  2438 ;; This function is called by:
  2439 ;;		_sweep
  2440 ;; This function uses a non-reentrant model
  2441 ;;
  2442                           
  2443                           
  2444                           ;psect for function _measure
  2445  0060                     _measure:
  2446                           
  2447                           ;incstack = 0
  2448                           ; Regs used in _measure: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2449                           ;measure@I stored from wreg
  2450  0060  00D3               	movwf	measure@I
  2451                           
  2452                           ;comm.c: 561: unsigned char measure(short* I, short* Q, BIO3 asic);comm.c: 565: {;comm.c
      +                          : 566:     unsigned short offset, value;;comm.c: 567:     short aux1,aux2;;comm.c: 571: 
      +                              asic.data_bits.CE = 0;
  2453  0061  134D               	bcf	measure@asic,6
  2454                           
  2455                           ;comm.c: 572:     config(asic);
  2456  0062  084E               	movf	measure@asic+1,w
  2457  0063  00F5               	movwf	config@conf+1
  2458  0064  084D               	movf	measure@asic,w
  2459  0065  00F4               	movwf	config@conf
  2460  0066  21DB               	fcall	_config
  2461                           
  2462                           ;comm.c: 573:      _delay((unsigned long)((20)*(500000/4000.0)));
  2463  0067  3004               	movlw	4
  2464  0068  0020               	movlb	0	; select bank0
  2465  0069  00CF               	movwf	??_measure
  2466  006A  303D               	movlw	61
  2467  006B                     u1207:
  2468  006B  0B89               	decfsz	9,f
  2469  006C  286B               	goto	u1207
  2470  006D  0BCF               	decfsz	??_measure,f
  2471  006E  286B               	goto	u1207
  2472  006F  3200               	nop2
  2473                           
  2474                           ;comm.c: 575:     offset = ADC_5();
  2475  0070  22BB               	fcall	_ADC_5
  2476  0071  0875               	movf	?_ADC_5+1,w
  2477  0072  00D2               	movwf	measure@offset+1
  2478  0073  0874               	movf	?_ADC_5,w
  2479  0074  00D1               	movwf	measure@offset
  2480                           
  2481                           ;comm.c: 578:     asic.data_bits.CE = 1;
  2482  0075  174D               	bsf	measure@asic,6
  2483                           
  2484                           ;comm.c: 579:     asic.data_bits.IQ = 0;
  2485  0076  11CE               	bcf	measure@asic+1,3
  2486                           
  2487                           ;comm.c: 581:     config(asic);
  2488  0077  084E               	movf	measure@asic+1,w
  2489  0078  00F5               	movwf	config@conf+1
  2490  0079  084D               	movf	measure@asic,w
  2491  007A  00F4               	movwf	config@conf
  2492  007B  21DB               	fcall	_config
  2493                           
  2494                           ;comm.c: 582:      _delay((unsigned long)((20)*(500000/4000.0)));
  2495  007C  3004               	movlw	4
  2496  007D  0020               	movlb	0	; select bank0
  2497  007E  00CF               	movwf	??_measure
  2498  007F  303D               	movlw	61
  2499  0080                     u1217:
  2500  0080  0B89               	decfsz	9,f
  2501  0081  2880               	goto	u1217
  2502  0082  0BCF               	decfsz	??_measure,f
  2503  0083  2880               	goto	u1217
  2504  0084  3200               	nop2
  2505                           
  2506                           ;comm.c: 584:     value = ADC_5();
  2507  0085  22BB               	fcall	_ADC_5
  2508  0086  0875               	movf	?_ADC_5+1,w
  2509  0087  00D5               	movwf	measure@value+1
  2510  0088  0874               	movf	?_ADC_5,w
  2511  0089  00D4               	movwf	measure@value
  2512                           
  2513                           ;comm.c: 585:     *I = (value - offset);
  2514  008A  0851               	movf	measure@offset,w
  2515  008B  0254               	subwf	measure@value,w
  2516  008C  00CF               	movwf	??_measure
  2517  008D  0852               	movf	measure@offset+1,w
  2518  008E  3B55               	subwfb	measure@value+1,w
  2519  008F  00D0               	movwf	??_measure+1
  2520  0090  0853               	movf	measure@I,w
  2521  0091  0086               	movwf	6
  2522  0092  0187               	clrf	7
  2523  0093  084F               	movf	??_measure,w
  2524  0094  3FC0               	movwi [0]fsr1
  2525  0095  0850               	movf	??_measure+1,w
  2526  0096  3FC1               	movwi [1]fsr1
  2527                           
  2528                           ;comm.c: 586:     aux1 = *I;
  2529  0097  0853               	movf	measure@I,w
  2530  0098  0086               	movwf	6
  2531  0099  0187               	clrf	7
  2532  009A  3F40               	moviw [0]fsr1
  2533  009B  00D8               	movwf	measure@aux1
  2534  009C  3F41               	moviw [1]fsr1
  2535  009D  00D9               	movwf	measure@aux1+1
  2536                           
  2537                           ;comm.c: 588:     if (aux1 < 0) {
  2538  009E  1FD9               	btfss	measure@aux1+1,7
  2539  009F  28A5               	goto	l2055
  2540                           
  2541                           ;comm.c: 589:         aux1 = -aux1;
  2542  00A0  09D8               	comf	measure@aux1,f
  2543  00A1  09D9               	comf	measure@aux1+1,f
  2544  00A2  0AD8               	incf	measure@aux1,f
  2545  00A3  1903               	skipnz
  2546  00A4  0AD9               	incf	measure@aux1+1,f
  2547  00A5                     l2055:
  2548                           
  2549                           ;comm.c: 595:     asic.data_bits.IQ = 1;
  2550  00A5  15CE               	bsf	measure@asic+1,3
  2551                           
  2552                           ;comm.c: 597:     config(asic);
  2553  00A6  084E               	movf	measure@asic+1,w
  2554  00A7  00F5               	movwf	config@conf+1
  2555  00A8  084D               	movf	measure@asic,w
  2556  00A9  00F4               	movwf	config@conf
  2557  00AA  21DB               	fcall	_config
  2558                           
  2559                           ;comm.c: 598:      _delay((unsigned long)((20)*(500000/4000.0)));
  2560  00AB  3004               	movlw	4
  2561  00AC  0020               	movlb	0	; select bank0
  2562  00AD  00CF               	movwf	??_measure
  2563  00AE  303D               	movlw	61
  2564  00AF                     u1227:
  2565  00AF  0B89               	decfsz	9,f
  2566  00B0  28AF               	goto	u1227
  2567  00B1  0BCF               	decfsz	??_measure,f
  2568  00B2  28AF               	goto	u1227
  2569  00B3  3200               	nop2
  2570                           
  2571                           ;comm.c: 600:     value = ADC_5();
  2572  00B4  22BB               	fcall	_ADC_5
  2573  00B5  0875               	movf	?_ADC_5+1,w
  2574  00B6  00D5               	movwf	measure@value+1
  2575  00B7  0874               	movf	?_ADC_5,w
  2576  00B8  00D4               	movwf	measure@value
  2577                           
  2578                           ;comm.c: 601:     *Q = (value - offset);
  2579  00B9  0851               	movf	measure@offset,w
  2580  00BA  0254               	subwf	measure@value,w
  2581  00BB  00CF               	movwf	??_measure
  2582  00BC  0852               	movf	measure@offset+1,w
  2583  00BD  3B55               	subwfb	measure@value+1,w
  2584  00BE  00D0               	movwf	??_measure+1
  2585  00BF  084C               	movf	measure@Q,w
  2586  00C0  0086               	movwf	6
  2587  00C1  0187               	clrf	7
  2588  00C2  084F               	movf	??_measure,w
  2589  00C3  3FC0               	movwi [0]fsr1
  2590  00C4  0850               	movf	??_measure+1,w
  2591  00C5  3FC1               	movwi [1]fsr1
  2592                           
  2593                           ;comm.c: 602:     aux2 = *Q;
  2594  00C6  084C               	movf	measure@Q,w
  2595  00C7  0086               	movwf	6
  2596  00C8  0187               	clrf	7
  2597  00C9  3F40               	moviw [0]fsr1
  2598  00CA  00D6               	movwf	measure@aux2
  2599  00CB  3F41               	moviw [1]fsr1
  2600  00CC  00D7               	movwf	measure@aux2+1
  2601                           
  2602                           ;comm.c: 604:     if (aux2 < 0) {
  2603  00CD  1FD7               	btfss	measure@aux2+1,7
  2604  00CE  28D4               	goto	l2071
  2605                           
  2606                           ;comm.c: 605:         aux2 = -aux2;
  2607  00CF  09D6               	comf	measure@aux2,f
  2608  00D0  09D7               	comf	measure@aux2+1,f
  2609  00D1  0AD6               	incf	measure@aux2,f
  2610  00D2  1903               	skipnz
  2611  00D3  0AD7               	incf	measure@aux2+1,f
  2612  00D4                     l2071:
  2613                           
  2614                           ;comm.c: 608:     if (aux2 > aux1) {
  2615  00D4  0859               	movf	measure@aux1+1,w
  2616  00D5  3A80               	xorlw	128
  2617  00D6  00CF               	movwf	??_measure
  2618  00D7  0857               	movf	measure@aux2+1,w
  2619  00D8  3A80               	xorlw	128
  2620  00D9  024F               	subwf	??_measure,w
  2621  00DA  1D03               	skipz
  2622  00DB  28DE               	goto	u1045
  2623  00DC  0856               	movf	measure@aux2,w
  2624  00DD  0258               	subwf	measure@aux1,w
  2625  00DE                     u1045:
  2626  00DE  1803               	skipnc
  2627  00DF  28E5               	goto	l408
  2628                           
  2629                           ;comm.c: 609:         aux1 = aux2;
  2630  00E0  0020               	movlb	0	; select bank0
  2631  00E1  0857               	movf	measure@aux2+1,w
  2632  00E2  00D9               	movwf	measure@aux1+1
  2633  00E3  0856               	movf	measure@aux2,w
  2634  00E4  00D8               	movwf	measure@aux1
  2635  00E5                     l408:	
  2636                           ;comm.c: 610:     }
  2637                           
  2638                           
  2639                           ;comm.c: 612:     if (aux1 > 370) {
  2640  00E5  0020               	movlb	0	; select bank0
  2641  00E6  0859               	movf	measure@aux1+1,w
  2642  00E7  3A80               	xorlw	128
  2643  00E8  00CF               	movwf	??_measure
  2644  00E9  3081               	movlw	129
  2645  00EA  024F               	subwf	??_measure,w
  2646  00EB  1D03               	skipz
  2647  00EC  28EF               	goto	u1055
  2648  00ED  3073               	movlw	115
  2649  00EE  0258               	subwf	measure@aux1,w
  2650  00EF                     u1055:
  2651  00EF  1C03               	skipc
  2652  00F0  28F3               	goto	l2081
  2653                           
  2654                           ;comm.c: 613:         return 2;
  2655  00F1  3002               	movlw	2
  2656  00F2  0008               	return
  2657  00F3                     l2081:
  2658  00F3  0020               	movlb	0	; select bank0
  2659  00F4  0859               	movf	measure@aux1+1,w
  2660  00F5  3A80               	xorlw	128
  2661  00F6  00CF               	movwf	??_measure
  2662  00F7  3080               	movlw	128
  2663  00F8  024F               	subwf	??_measure,w
  2664  00F9  1D03               	skipz
  2665  00FA  28FD               	goto	u1065
  2666  00FB  3056               	movlw	86
  2667  00FC  0258               	subwf	measure@aux1,w
  2668  00FD                     u1065:
  2669  00FD  1803               	skipnc
  2670  00FE  2901               	goto	l2087
  2671                           
  2672                           ;comm.c: 615:         return 1;
  2673  00FF  3001               	movlw	1
  2674  0100  0008               	return
  2675  0101                     l2087:
  2676                           
  2677                           ;comm.c: 618:     return 0;
  2678  0101  3000               	movlw	0
  2679  0102  0008               	return
  2680  0103                     __end_of_measure:
  2681                           
  2682                           	psect	text5
  2683  01DB                     __ptext5:	
  2684 ;; *************** function _config *****************
  2685 ;; Defined at:
  2686 ;;		line 132 in file "bio3.c"
  2687 ;; Parameters:    Size  Location     Type
  2688 ;;  conf            2    4[COMMON] struct .
  2689 ;; Auto vars:     Size  Location     Type
  2690 ;;  out             1    2[BANK0 ] unsigned char 
  2691 ;;  i               1    1[BANK0 ] unsigned char 
  2692 ;; Return value:  Size  Location     Type
  2693 ;;                  1    wreg      void 
  2694 ;; Registers used:
  2695 ;;		wreg, status,2, status,0
  2696 ;; Tracked objects:
  2697 ;;		On entry : 1F/0
  2698 ;;		On exit  : 1F/0
  2699 ;;		Unchanged: 0/0
  2700 ;; Data sizes:     COMMON   BANK0   BANK1
  2701 ;;      Params:         2       0       0
  2702 ;;      Locals:         0       2       0
  2703 ;;      Temps:          0       1       0
  2704 ;;      Totals:         2       3       0
  2705 ;;Total ram usage:        5 bytes
  2706 ;; Hardware stack levels used:    1
  2707 ;; Hardware stack levels required when called:    2
  2708 ;; This function calls:
  2709 ;;		Nothing
  2710 ;; This function is called by:
  2711 ;;		_measure
  2712 ;; This function uses a non-reentrant model
  2713 ;;
  2714                           
  2715                           
  2716                           ;psect for function _config
  2717  01DB                     _config:
  2718                           
  2719                           ;bio3.c: 132: void config(BIO3 conf);bio3.c: 133: {;bio3.c: 134:     unsigned char i, ou
      +                          t;;bio3.c: 136:     out &= 0b11110111; PORTC = out;;
  2720                           
  2721                           ;incstack = 0
  2722                           ; Regs used in _config: [wreg+status,2+status,0]
  2723  01DB  30F7               	movlw	247
  2724  01DC  00C8               	movwf	??_config
  2725  01DD  0848               	movf	??_config,w
  2726  01DE  05CA               	andwf	config@out,f
  2727  01DF  084A               	movf	config@out,w
  2728  01E0  008E               	movwf	14	;volatile
  2729                           
  2730                           ;bio3.c: 137:     _delay((unsigned long)((50)*(500000/4000000.0)));
  2731  01E1  3200               	nop2	;2 cycle nop
  2732  01E2  3200               	nop2	;2 cycle nop
  2733  01E3  3200               	nop2	;2 cycle nop
  2734                           
  2735                           ;bio3.c: 139:     RA5 = 0;;
  2736  01E4  0020               	movlb	0	; select bank0
  2737  01E5  128C               	bcf	12,5	;volatile
  2738                           
  2739                           ;bio3.c: 140:     _delay((unsigned long)((50)*(500000/4000000.0)));
  2740  01E6  3200               	nop2	;2 cycle nop
  2741  01E7  3200               	nop2	;2 cycle nop
  2742  01E8  3200               	nop2	;2 cycle nop
  2743                           
  2744                           ;bio3.c: 142:     RA5 = 1;;
  2745  01E9  0020               	movlb	0	; select bank0
  2746  01EA  168C               	bsf	12,5	;volatile
  2747                           
  2748                           ;bio3.c: 144:     for(i = 0; i < 16; i++) {
  2749  01EB  01C9               	clrf	config@i
  2750  01EC                     l151:
  2751                           
  2752                           ;bio3.c: 145:         if (conf.datashort & 0x0001) {
  2753  01EC  1C74               	btfss	config@conf,0
  2754  01ED  29F0               	goto	l1943
  2755                           
  2756                           ;bio3.c: 146:             out |= 0b00000100; PORTC = out;;
  2757  01EE  154A               	bsf	config@out,2
  2758                           
  2759                           ;bio3.c: 147:         } else {
  2760  01EF  29F4               	goto	l1941
  2761  01F0                     l1943:
  2762                           
  2763                           ;bio3.c: 148:             out &= 0b11111011; PORTC = out;;
  2764  01F0  30FB               	movlw	251
  2765  01F1  00C8               	movwf	??_config
  2766  01F2  0848               	movf	??_config,w
  2767  01F3  05CA               	andwf	config@out,f
  2768  01F4                     l1941:
  2769  01F4  084A               	movf	config@out,w
  2770  01F5  008E               	movwf	14	;volatile
  2771                           
  2772                           ;bio3.c: 150:         conf.datashort >>= 1;
  2773  01F6  3001               	movlw	1
  2774  01F7                     u845:
  2775  01F7  36F5               	lsrf	config@conf+1,f
  2776  01F8  0CF4               	rrf	config@conf,f
  2777  01F9  0B89               	decfsz	9,f
  2778  01FA  29F7               	goto	u845
  2779                           
  2780                           ;bio3.c: 152:         _delay((unsigned long)((50)*(500000/4000000.0)));
  2781  01FB  3200               	nop2	;2 cycle nop
  2782  01FC  3200               	nop2	;2 cycle nop
  2783  01FD  3200               	nop2	;2 cycle nop
  2784                           
  2785                           ;bio3.c: 154:         out |= 0b00001000; PORTC = out;;
  2786  01FE  0020               	movlb	0	; select bank0
  2787  01FF  15CA               	bsf	config@out,3
  2788  0200  084A               	movf	config@out,w
  2789  0201  008E               	movwf	14	;volatile
  2790                           
  2791                           ;bio3.c: 155:         _delay((unsigned long)((50)*(500000/4000000.0)));
  2792  0202  3200               	nop2	;2 cycle nop
  2793  0203  3200               	nop2	;2 cycle nop
  2794  0204  3200               	nop2	;2 cycle nop
  2795                           
  2796                           ;bio3.c: 156:         out &= 0b11110111; PORTC = out;;
  2797  0205  30F7               	movlw	247
  2798  0206  0020               	movlb	0	; select bank0
  2799  0207  00C8               	movwf	??_config
  2800  0208  0848               	movf	??_config,w
  2801  0209  05CA               	andwf	config@out,f
  2802  020A  084A               	movf	config@out,w
  2803  020B  008E               	movwf	14	;volatile
  2804                           
  2805                           ;bio3.c: 158:     }
  2806  020C  3001               	movlw	1
  2807  020D  00C8               	movwf	??_config
  2808  020E  0848               	movf	??_config,w
  2809  020F  07C9               	addwf	config@i,f
  2810  0210  3010               	movlw	16
  2811  0211  0249               	subwf	config@i,w
  2812  0212  1803               	btfsc	3,0
  2813  0213  0008               	return
  2814  0214  29EC               	goto	l151
  2815  0215                     __end_of_config:
  2816                           
  2817                           	psect	text6
  2818  02BB                     __ptext6:	
  2819 ;; *************** function _ADC_5 *****************
  2820 ;; Defined at:
  2821 ;;		line 48 in file "ADC1823.c"
  2822 ;; Parameters:    Size  Location     Type
  2823 ;;		None
  2824 ;; Auto vars:     Size  Location     Type
  2825 ;;  ADC_value       2    2[BANK0 ] unsigned short 
  2826 ;; Return value:  Size  Location     Type
  2827 ;;                  2    4[COMMON] unsigned short 
  2828 ;; Registers used:
  2829 ;;		wreg
  2830 ;; Tracked objects:
  2831 ;;		On entry : 0/0
  2832 ;;		On exit  : 1F/0
  2833 ;;		Unchanged: 0/0
  2834 ;; Data sizes:     COMMON   BANK0   BANK1
  2835 ;;      Params:         2       0       0
  2836 ;;      Locals:         0       2       0
  2837 ;;      Temps:          0       2       0
  2838 ;;      Totals:         2       4       0
  2839 ;;Total ram usage:        6 bytes
  2840 ;; Hardware stack levels used:    1
  2841 ;; Hardware stack levels required when called:    2
  2842 ;; This function calls:
  2843 ;;		Nothing
  2844 ;; This function is called by:
  2845 ;;		_measure
  2846 ;; This function uses a non-reentrant model
  2847 ;;
  2848                           
  2849                           
  2850                           ;psect for function _ADC_5
  2851  02BB                     _ADC_5:
  2852                           
  2853                           ;ADC1823.c: 50:     unsigned short ADC_value;;ADC1823.c: 52:     { ADCON0 = 0b00010101;}
      +                          ;
  2854                           
  2855                           ;incstack = 0
  2856                           ; Regs used in _ADC_5: [wreg]
  2857  02BB  3015               	movlw	21
  2858  02BC  0021               	movlb	1	; select bank1
  2859  02BD  009D               	movwf	29	;volatile
  2860                           
  2861                           ;ADC1823.c: 53:     __nop();
  2862  02BE  0000               	nop
  2863                           
  2864                           ;ADC1823.c: 54:     { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_v
      +                          alue |= ADRESL;};
  2865  02BF  0021               	movlb	1	; select bank1
  2866  02C0  149D               	bsf	29,1	;volatile
  2867  02C1                     l442:
  2868  02C1  189D               	btfsc	29,1	;volatile
  2869  02C2  2AC1               	goto	l442
  2870  02C3  081C               	movf	28,w	;volatile
  2871  02C4  0020               	movlb	0	; select bank0
  2872  02C5  00C8               	movwf	??_ADC_5
  2873  02C6  01C9               	clrf	??_ADC_5+1
  2874  02C7  0848               	movf	??_ADC_5,w
  2875  02C8  00CA               	movwf	ADC_5@ADC_value
  2876  02C9  0849               	movf	??_ADC_5+1,w
  2877  02CA  00CB               	movwf	ADC_5@ADC_value+1
  2878  02CB  3008               	movlw	8
  2879  02CC                     u875:
  2880  02CC  35CA               	lslf	ADC_5@ADC_value,f
  2881  02CD  0DCB               	rlf	ADC_5@ADC_value+1,f
  2882  02CE  0B89               	decfsz	9,f
  2883  02CF  2ACC               	goto	u875
  2884  02D0  0021               	movlb	1	; select bank1
  2885  02D1  081B               	movf	27,w	;volatile
  2886  02D2  0020               	movlb	0	; select bank0
  2887  02D3  00C8               	movwf	??_ADC_5
  2888  02D4  01C9               	clrf	??_ADC_5+1
  2889  02D5  0848               	movf	??_ADC_5,w
  2890  02D6  04CA               	iorwf	ADC_5@ADC_value,f
  2891  02D7  0849               	movf	??_ADC_5+1,w
  2892  02D8  04CB               	iorwf	ADC_5@ADC_value+1,f
  2893                           
  2894                           ;ADC1823.c: 56:     return ADC_value;
  2895  02D9  084B               	movf	ADC_5@ADC_value+1,w
  2896  02DA  00F5               	movwf	?_ADC_5+1
  2897  02DB  084A               	movf	ADC_5@ADC_value,w
  2898  02DC  00F4               	movwf	?_ADC_5
  2899  02DD  0008               	return
  2900  02DE                     __end_of_ADC_5:
  2901                           
  2902                           	psect	text7
  2903  026A                     __ptext7:	
  2904 ;; *************** function _lputs_ISR *****************
  2905 ;; Defined at:
  2906 ;;		line 132 in file "USART1823.c"
  2907 ;; Parameters:    Size  Location     Type
  2908 ;;  data            1    wreg     PTR unsigned char 
  2909 ;;		 -> sweep@aux(7), calibrate_reader@aux(8), measure_Impedance_SE@aux(8), measure_Offset@aux(5), 
  2910 ;;		 -> measure_Impedance_no_offset@aux(13), measure_Impedance@aux(13), read_ADC_channels@aux(7), mess_rec(10), 
  2911 ;;  length          1    4[COMMON] unsigned char 
  2912 ;; Auto vars:     Size  Location     Type
  2913 ;;  data            1    3[BANK0 ] PTR unsigned char 
  2914 ;;		 -> sweep@aux(7), calibrate_reader@aux(8), measure_Impedance_SE@aux(8), measure_Offset@aux(5), 
  2915 ;;		 -> measure_Impedance_no_offset@aux(13), measure_Impedance@aux(13), read_ADC_channels@aux(7), mess_rec(10), 
  2916 ;;  i               1    2[BANK0 ] unsigned char 
  2917 ;; Return value:  Size  Location     Type
  2918 ;;                  1    wreg      void 
  2919 ;; Registers used:
  2920 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2921 ;; Tracked objects:
  2922 ;;		On entry : 1F/0
  2923 ;;		On exit  : 1E/0
  2924 ;;		Unchanged: 0/0
  2925 ;; Data sizes:     COMMON   BANK0   BANK1
  2926 ;;      Params:         1       0       0
  2927 ;;      Locals:         0       2       0
  2928 ;;      Temps:          0       2       0
  2929 ;;      Totals:         1       4       0
  2930 ;;Total ram usage:        5 bytes
  2931 ;; Hardware stack levels used:    1
  2932 ;; Hardware stack levels required when called:    3
  2933 ;; This function calls:
  2934 ;;		_close_RX_USART
  2935 ;; This function is called by:
  2936 ;;		_sweep
  2937 ;; This function uses a non-reentrant model
  2938 ;;
  2939                           
  2940                           
  2941                           ;psect for function _lputs_ISR
  2942  026A                     _lputs_ISR:
  2943                           
  2944                           ;incstack = 0
  2945                           ; Regs used in _lputs_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2946                           ;lputs_ISR@data stored from wreg
  2947  026A  00CB               	movwf	lputs_ISR@data
  2948                           
  2949                           ;USART1823.c: 132: void lputs_ISR(unsigned char* data, unsigned char length);USART1823.c
      +                          : 133: {;USART1823.c: 134:     unsigned char i;;USART1823.c: 136:     if (USART_tx_flag 
      +                          == 1)
  2950  026B  0377               	decf	_USART_tx_flag,w	;volatile
  2951  026C  1903               	btfsc	3,2
  2952  026D  0008               	return
  2953                           
  2954                           ;USART1823.c: 139:     for (i = 0; i < length; i++)
  2955  026E  01CA               	clrf	lputs_ISR@i
  2956  026F                     l2007:
  2957  026F  0874               	movf	lputs_ISR@length,w
  2958  0270  024A               	subwf	lputs_ISR@i,w
  2959  0271  1803               	btfsc	3,0
  2960  0272  2A86               	goto	l2009
  2961                           
  2962                           ;USART1823.c: 140:         USART_tx_data[i] = data[i];
  2963  0273  084A               	movf	lputs_ISR@i,w
  2964  0274  074B               	addwf	lputs_ISR@data,w
  2965  0275  00C8               	movwf	??_lputs_ISR
  2966  0276  0848               	movf	??_lputs_ISR,w
  2967  0277  0086               	movwf	6
  2968  0278  0187               	clrf	7
  2969  0279  0801               	movf	1,w
  2970  027A  00C9               	movwf	??_lputs_ISR+1
  2971  027B  084A               	movf	lputs_ISR@i,w
  2972  027C  3E20               	addlw	(low (_USART_tx_data| 0))& (0+255)
  2973  027D  0086               	movwf	6
  2974  027E  0187               	clrf	7
  2975  027F  0849               	movf	??_lputs_ISR+1,w
  2976  0280  0081               	movwf	1
  2977  0281  3001               	movlw	1
  2978  0282  00C8               	movwf	??_lputs_ISR
  2979  0283  0848               	movf	??_lputs_ISR,w
  2980  0284  07CA               	addwf	lputs_ISR@i,f
  2981  0285  2A6F               	goto	l2007
  2982  0286                     l2009:
  2983                           
  2984                           ;USART1823.c: 142:     close_RX_USART();
  2985  0286  2361               	fcall	_close_RX_USART
  2986                           
  2987                           ;USART1823.c: 144:     USART_tx_index = 0;
  2988  0287  01F9               	clrf	_USART_tx_index	;volatile
  2989                           
  2990                           ;USART1823.c: 145:     USART_tx_length = length;
  2991  0288  0874               	movf	lputs_ISR@length,w
  2992  0289  00C8               	movwf	??_lputs_ISR
  2993  028A  0848               	movf	??_lputs_ISR,w
  2994  028B  00F8               	movwf	_USART_tx_length	;volatile
  2995                           
  2996                           ;USART1823.c: 147:     USART_tx_flag = 1;
  2997  028C  3001               	movlw	1
  2998  028D  00C8               	movwf	??_lputs_ISR
  2999  028E  0848               	movf	??_lputs_ISR,w
  3000  028F  00F7               	movwf	_USART_tx_flag	;volatile
  3001                           
  3002                           ;USART1823.c: 148:     TXIE = 1;
  3003  0290  0021               	movlb	1	; select bank1
  3004  0291  1611               	bsf	17,4	;volatile
  3005  0292  0008               	return
  3006  0293                     __end_of_lputs_ISR:
  3007                           
  3008                           	psect	text8
  3009  0361                     __ptext8:	
  3010 ;; *************** function _close_RX_USART *****************
  3011 ;; Defined at:
  3012 ;;		line 35 in file "USART1823.c"
  3013 ;; Parameters:    Size  Location     Type
  3014 ;;		None
  3015 ;; Auto vars:     Size  Location     Type
  3016 ;;		None
  3017 ;; Return value:  Size  Location     Type
  3018 ;;                  1    wreg      void 
  3019 ;; Registers used:
  3020 ;;		status,2
  3021 ;; Tracked objects:
  3022 ;;		On entry : 1F/0
  3023 ;;		On exit  : 1F/0
  3024 ;;		Unchanged: 0/0
  3025 ;; Data sizes:     COMMON   BANK0   BANK1
  3026 ;;      Params:         0       0       0
  3027 ;;      Locals:         0       0       0
  3028 ;;      Temps:          0       0       0
  3029 ;;      Totals:         0       0       0
  3030 ;;Total ram usage:        0 bytes
  3031 ;; Hardware stack levels used:    1
  3032 ;; Hardware stack levels required when called:    2
  3033 ;; This function calls:
  3034 ;;		Nothing
  3035 ;; This function is called by:
  3036 ;;		_lputs_ISR
  3037 ;; This function uses a non-reentrant model
  3038 ;;
  3039                           
  3040                           
  3041                           ;psect for function _close_RX_USART
  3042  0361                     _close_RX_USART:
  3043                           
  3044                           ;USART1823.c: 39:     RCIE = 0;
  3045                           
  3046                           ;incstack = 0
  3047                           ; Regs used in _close_RX_USART: [status,2]
  3048  0361  0021               	movlb	1	; select bank1
  3049  0362  1291               	bcf	17,5	;volatile
  3050                           
  3051                           ;USART1823.c: 40:     CREN = 0;
  3052  0363  0023               	movlb	3	; select bank3
  3053  0364  121D               	bcf	29,4	;volatile
  3054                           
  3055                           ;USART1823.c: 41:     USART_rx_index = 0;
  3056  0365  0020               	movlb	0	; select bank0
  3057  0366  01BC               	clrf	_USART_rx_index	;volatile
  3058  0367  0008               	return
  3059  0368                     __end_of_close_RX_USART:
  3060                           
  3061                           	psect	text9
  3062  02F7                     __ptext9:	
  3063 ;; *************** function _calculate_checksum *****************
  3064 ;; Defined at:
  3065 ;;		line 407 in file "comm.c"
  3066 ;; Parameters:    Size  Location     Type
  3067 ;;  data            1    wreg     PTR unsigned char 
  3068 ;;		 -> sweep@aux(7), 
  3069 ;;  num             1    4[COMMON] unsigned char 
  3070 ;; Auto vars:     Size  Location     Type
  3071 ;;  data            1    2[BANK0 ] PTR unsigned char 
  3072 ;;		 -> sweep@aux(7), 
  3073 ;;  i               1    4[BANK0 ] unsigned char 
  3074 ;;  check           1    3[BANK0 ] unsigned char 
  3075 ;; Return value:  Size  Location     Type
  3076 ;;                  1    wreg      unsigned char 
  3077 ;; Registers used:
  3078 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3079 ;; Tracked objects:
  3080 ;;		On entry : 1F/0
  3081 ;;		On exit  : 1F/0
  3082 ;;		Unchanged: 0/0
  3083 ;; Data sizes:     COMMON   BANK0   BANK1
  3084 ;;      Params:         1       0       0
  3085 ;;      Locals:         0       3       0
  3086 ;;      Temps:          0       2       0
  3087 ;;      Totals:         1       5       0
  3088 ;;Total ram usage:        6 bytes
  3089 ;; Hardware stack levels used:    1
  3090 ;; Hardware stack levels required when called:    2
  3091 ;; This function calls:
  3092 ;;		Nothing
  3093 ;; This function is called by:
  3094 ;;		_sweep
  3095 ;; This function uses a non-reentrant model
  3096 ;;
  3097                           
  3098                           
  3099                           ;psect for function _calculate_checksum
  3100  02F7                     _calculate_checksum:
  3101                           
  3102                           ;incstack = 0
  3103                           ; Regs used in _calculate_checksum: [wreg+fsr1l+fsr1h+status,2+status,0]
  3104                           ;calculate_checksum@data stored from wreg
  3105  02F7  00CA               	movwf	calculate_checksum@data
  3106                           
  3107                           ;comm.c: 407: unsigned char calculate_checksum(unsigned char* data, unsigned char num);c
      +                          omm.c: 408: {;comm.c: 409:     unsigned char check, i;;comm.c: 411:     check = 0;
  3108  02F8  01CB               	clrf	calculate_checksum@check
  3109                           
  3110                           ;comm.c: 412:     for (i = 0; i < num; i++) {
  3111  02F9  01CC               	clrf	calculate_checksum@i
  3112  02FA                     l2025:
  3113  02FA  0874               	movf	calculate_checksum@num,w
  3114  02FB  024C               	subwf	calculate_checksum@i,w
  3115  02FC  1803               	btfsc	3,0
  3116  02FD  2B0D               	goto	l2027
  3117                           
  3118                           ;comm.c: 413:         check ^= data[i];
  3119  02FE  084C               	movf	calculate_checksum@i,w
  3120  02FF  074A               	addwf	calculate_checksum@data,w
  3121  0300  00C8               	movwf	??_calculate_checksum
  3122  0301  0848               	movf	??_calculate_checksum,w
  3123  0302  0086               	movwf	6
  3124  0303  0187               	clrf	7
  3125  0304  0801               	movf	1,w
  3126  0305  00C9               	movwf	??_calculate_checksum+1
  3127  0306  0849               	movf	??_calculate_checksum+1,w
  3128  0307  06CB               	xorwf	calculate_checksum@check,f
  3129                           
  3130                           ;comm.c: 414:     }
  3131  0308  3001               	movlw	1
  3132  0309  00C8               	movwf	??_calculate_checksum
  3133  030A  0848               	movf	??_calculate_checksum,w
  3134  030B  07CC               	addwf	calculate_checksum@i,f
  3135  030C  2AFA               	goto	l2025
  3136  030D                     l2027:
  3137                           
  3138                           ;comm.c: 416:     return check;
  3139  030D  084B               	movf	calculate_checksum@check,w
  3140  030E  0008               	return
  3141  030F                     __end_of_calculate_checksum:
  3142                           
  3143                           	psect	text10
  3144  0330                     __ptext10:	
  3145 ;; *************** function _start_TX_USART_ISR *****************
  3146 ;; Defined at:
  3147 ;;		line 101 in file "USART1823.c"
  3148 ;; Parameters:    Size  Location     Type
  3149 ;;		None
  3150 ;; Auto vars:     Size  Location     Type
  3151 ;;		None
  3152 ;; Return value:  Size  Location     Type
  3153 ;;                  1    wreg      void 
  3154 ;; Registers used:
  3155 ;;		wreg, status,2
  3156 ;; Tracked objects:
  3157 ;;		On entry : B1F/1
  3158 ;;		On exit  : B1F/3
  3159 ;;		Unchanged: B00/0
  3160 ;; Data sizes:     COMMON   BANK0   BANK1
  3161 ;;      Params:         0       0       0
  3162 ;;      Locals:         0       0       0
  3163 ;;      Temps:          0       0       0
  3164 ;;      Totals:         0       0       0
  3165 ;;Total ram usage:        0 bytes
  3166 ;; Hardware stack levels used:    1
  3167 ;; Hardware stack levels required when called:    2
  3168 ;; This function calls:
  3169 ;;		Nothing
  3170 ;; This function is called by:
  3171 ;;		_main
  3172 ;; This function uses a non-reentrant model
  3173 ;;
  3174                           
  3175                           
  3176                           ;psect for function _start_TX_USART_ISR
  3177  0330                     _start_TX_USART_ISR:
  3178                           
  3179                           ;USART1823.c: 103:     { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  3180                           
  3181                           ;incstack = 0
  3182                           ; Regs used in _start_TX_USART_ISR: [wreg+status,2]
  3183  0330  0023               	movlb	3	; select bank3
  3184  0331  151E               	bsf	30,2	;volatile
  3185  0332  159F               	bsf	31,3	;volatile
  3186  0333  019C               	clrf	28	;volatile
  3187  0334  300C               	movlw	12
  3188  0335  009B               	movwf	27	;volatile
  3189                           
  3190                           ;USART1823.c: 104:     SYNC = 0;
  3191  0336  121E               	bcf	30,4	;volatile
  3192                           
  3193                           ;USART1823.c: 105:     SPEN = 1;
  3194  0337  179D               	bsf	29,7	;volatile
  3195                           
  3196                           ;USART1823.c: 106:     TXEN = 1;
  3197  0338  169E               	bsf	30,5	;volatile
  3198                           
  3199                           ;USART1823.c: 108:     USART_tx_flag = 0;
  3200  0339  01F7               	clrf	_USART_tx_flag	;volatile
  3201                           
  3202                           ;USART1823.c: 109:     USART_tx_index = 0;
  3203  033A  01F9               	clrf	_USART_tx_index	;volatile
  3204                           
  3205                           ;USART1823.c: 110:     USART_tx_length = 0;
  3206  033B  01F8               	clrf	_USART_tx_length	;volatile
  3207                           
  3208                           ;USART1823.c: 113:     PEIE = 1;
  3209  033C  170B               	bsf	11,6	;volatile
  3210                           
  3211                           ;USART1823.c: 114:     GIE = 1;
  3212  033D  178B               	bsf	11,7	;volatile
  3213  033E  0008               	return
  3214  033F                     __end_of_start_TX_USART_ISR:
  3215                           
  3216                           	psect	text11
  3217  0320                     __ptext11:	
  3218 ;; *************** function _start_RX_USART_ISR *****************
  3219 ;; Defined at:
  3220 ;;		line 83 in file "USART1823.c"
  3221 ;; Parameters:    Size  Location     Type
  3222 ;;		None
  3223 ;; Auto vars:     Size  Location     Type
  3224 ;;		None
  3225 ;; Return value:  Size  Location     Type
  3226 ;;                  1    wreg      void 
  3227 ;; Registers used:
  3228 ;;		wreg, status,2
  3229 ;; Tracked objects:
  3230 ;;		On entry : B1F/3
  3231 ;;		On exit  : B1F/1
  3232 ;;		Unchanged: B00/0
  3233 ;; Data sizes:     COMMON   BANK0   BANK1
  3234 ;;      Params:         0       0       0
  3235 ;;      Locals:         0       0       0
  3236 ;;      Temps:          0       0       0
  3237 ;;      Totals:         0       0       0
  3238 ;;Total ram usage:        0 bytes
  3239 ;; Hardware stack levels used:    1
  3240 ;; Hardware stack levels required when called:    2
  3241 ;; This function calls:
  3242 ;;		Nothing
  3243 ;; This function is called by:
  3244 ;;		_main
  3245 ;; This function uses a non-reentrant model
  3246 ;;
  3247                           
  3248                           
  3249                           ;psect for function _start_RX_USART_ISR
  3250  0320                     _start_RX_USART_ISR:
  3251                           
  3252                           ;USART1823.c: 86:      { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  3253                           
  3254                           ;incstack = 0
  3255                           ; Regs used in _start_RX_USART_ISR: [wreg+status,2]
  3256  0320  151E               	bsf	30,2	;volatile
  3257  0321  159F               	bsf	31,3	;volatile
  3258  0322  019C               	clrf	28	;volatile
  3259  0323  300C               	movlw	12
  3260  0324  009B               	movwf	27	;volatile
  3261                           
  3262                           ;USART1823.c: 88:     SYNC = 0;
  3263  0325  121E               	bcf	30,4	;volatile
  3264                           
  3265                           ;USART1823.c: 89:     SPEN = 1;
  3266  0326  179D               	bsf	29,7	;volatile
  3267                           
  3268                           ;USART1823.c: 90:     CREN = 1;
  3269  0327  161D               	bsf	29,4	;volatile
  3270                           
  3271                           ;USART1823.c: 92:     USART_rx_flag = 0;
  3272  0328  01F6               	clrf	_USART_rx_flag	;volatile
  3273                           
  3274                           ;USART1823.c: 93:     USART_rx_index = 0;
  3275  0329  0020               	movlb	0	; select bank0
  3276  032A  01BC               	clrf	_USART_rx_index	;volatile
  3277                           
  3278                           ;USART1823.c: 95:     RCIE = 1;
  3279  032B  0021               	movlb	1	; select bank1
  3280  032C  1691               	bsf	17,5	;volatile
  3281                           
  3282                           ;USART1823.c: 96:     PEIE = 1;
  3283  032D  170B               	bsf	11,6	;volatile
  3284                           
  3285                           ;USART1823.c: 97:     GIE = 1;
  3286  032E  178B               	bsf	11,7	;volatile
  3287  032F  0008               	return
  3288  0330                     __end_of_start_RX_USART_ISR:
  3289                           
  3290                           	psect	text12
  3291  0380                     __ptext12:	
  3292 ;; *************** function _start_RCM *****************
  3293 ;; Defined at:
  3294 ;;		line 4 in file "RCM1823.c"
  3295 ;; Parameters:    Size  Location     Type
  3296 ;;		None
  3297 ;; Auto vars:     Size  Location     Type
  3298 ;;		None
  3299 ;; Return value:  Size  Location     Type
  3300 ;;                  1    wreg      void 
  3301 ;; Registers used:
  3302 ;;		wreg
  3303 ;; Tracked objects:
  3304 ;;		On entry : B1F/1
  3305 ;;		On exit  : B1F/7
  3306 ;;		Unchanged: B00/0
  3307 ;; Data sizes:     COMMON   BANK0   BANK1
  3308 ;;      Params:         0       0       0
  3309 ;;      Locals:         0       0       0
  3310 ;;      Temps:          0       0       0
  3311 ;;      Totals:         0       0       0
  3312 ;;Total ram usage:        0 bytes
  3313 ;; Hardware stack levels used:    1
  3314 ;; Hardware stack levels required when called:    2
  3315 ;; This function calls:
  3316 ;;		Nothing
  3317 ;; This function is called by:
  3318 ;;		_main
  3319 ;; This function uses a non-reentrant model
  3320 ;;
  3321                           
  3322                           
  3323                           ;psect for function _start_RCM
  3324  0380                     _start_RCM:
  3325                           
  3326                           ;RCM1823.c: 6:     CLKRCON = 0b11010000;
  3327                           
  3328                           ;incstack = 0
  3329                           ; Regs used in _start_RCM: [wreg]
  3330  0380  30D0               	movlw	208
  3331  0381  0027               	movlb	7	; select bank7
  3332  0382  009A               	movwf	26	;volatile
  3333  0383  0008               	return
  3334  0384                     __end_of_start_RCM:
  3335                           
  3336                           	psect	text13
  3337  036E                     __ptext13:	
  3338 ;; *************** function _setup_TMR0 *****************
  3339 ;; Defined at:
  3340 ;;		line 10 in file "TMR0.c"
  3341 ;; Parameters:    Size  Location     Type
  3342 ;;		None
  3343 ;; Auto vars:     Size  Location     Type
  3344 ;;		None
  3345 ;; Return value:  Size  Location     Type
  3346 ;;                  1    wreg      void 
  3347 ;; Registers used:
  3348 ;;		None
  3349 ;; Tracked objects:
  3350 ;;		On entry : B1F/1
  3351 ;;		On exit  : B1F/1
  3352 ;;		Unchanged: B00/0
  3353 ;; Data sizes:     COMMON   BANK0   BANK1
  3354 ;;      Params:         0       0       0
  3355 ;;      Locals:         0       0       0
  3356 ;;      Temps:          0       0       0
  3357 ;;      Totals:         0       0       0
  3358 ;;Total ram usage:        0 bytes
  3359 ;; Hardware stack levels used:    1
  3360 ;; Hardware stack levels required when called:    2
  3361 ;; This function calls:
  3362 ;;		Nothing
  3363 ;; This function is called by:
  3364 ;;		_main
  3365 ;; This function uses a non-reentrant model
  3366 ;;
  3367                           
  3368                           
  3369                           ;psect for function _setup_TMR0
  3370  036E                     _setup_TMR0:
  3371                           
  3372                           ;TMR0.c: 13:     PS2 = 0; PS1 = 1; PS0 = 0;
  3373                           
  3374                           ;incstack = 0
  3375                           ; Regs used in _setup_TMR0: []
  3376  036E  1115               	bcf	21,2	;volatile
  3377  036F  1495               	bsf	21,1	;volatile
  3378  0370  1015               	bcf	21,0	;volatile
  3379                           
  3380                           ;TMR0.c: 16:     PSA = 0;
  3381  0371  1195               	bcf	21,3	;volatile
  3382                           
  3383                           ;TMR0.c: 18:     TMR0CS = 0;
  3384  0372  1295               	bcf	21,5	;volatile
  3385  0373  0008               	return
  3386  0374                     __end_of_setup_TMR0:
  3387                           
  3388                           	psect	text14
  3389  0374                     __ptext14:	
  3390 ;; *************** function _setup_ADC *****************
  3391 ;; Defined at:
  3392 ;;		line 3 in file "ADC1823.c"
  3393 ;; Parameters:    Size  Location     Type
  3394 ;;		None
  3395 ;; Auto vars:     Size  Location     Type
  3396 ;;		None
  3397 ;; Return value:  Size  Location     Type
  3398 ;;                  1    wreg      void 
  3399 ;; Registers used:
  3400 ;;		wreg
  3401 ;; Tracked objects:
  3402 ;;		On entry : B1F/7
  3403 ;;		On exit  : B1F/1
  3404 ;;		Unchanged: B00/0
  3405 ;; Data sizes:     COMMON   BANK0   BANK1
  3406 ;;      Params:         0       0       0
  3407 ;;      Locals:         0       0       0
  3408 ;;      Temps:          0       0       0
  3409 ;;      Totals:         0       0       0
  3410 ;;Total ram usage:        0 bytes
  3411 ;; Hardware stack levels used:    1
  3412 ;; Hardware stack levels required when called:    2
  3413 ;; This function calls:
  3414 ;;		Nothing
  3415 ;; This function is called by:
  3416 ;;		_main
  3417 ;; This function uses a non-reentrant model
  3418 ;;
  3419                           
  3420                           
  3421                           ;psect for function _setup_ADC
  3422  0374                     _setup_ADC:
  3423                           
  3424                           ;ADC1823.c: 20:     ADCON1 = 0b11110000;
  3425                           
  3426                           ;incstack = 0
  3427                           ; Regs used in _setup_ADC: [wreg]
  3428  0374  30F0               	movlw	240
  3429  0375  0021               	movlb	1	; select bank1
  3430  0376  009E               	movwf	30	;volatile
  3431                           
  3432                           ;ADC1823.c: 21:     { ADCON0 = 0b00100100;};
  3433  0377  3024               	movlw	36
  3434  0378  009D               	movwf	29	;volatile
  3435  0379  0008               	return
  3436  037A                     __end_of_setup_ADC:
  3437                           
  3438                           	psect	text15
  3439  0384                     __ptext15:	
  3440 ;; *************** function _SYSTEM_Initialize *****************
  3441 ;; Defined at:
  3442 ;;		line 70 in file "mcc_generated_files/mcc.c"
  3443 ;; Parameters:    Size  Location     Type
  3444 ;;		None
  3445 ;; Auto vars:     Size  Location     Type
  3446 ;;		None
  3447 ;; Return value:  Size  Location     Type
  3448 ;;                  1    wreg      void 
  3449 ;; Registers used:
  3450 ;;		wreg, status,2, status,0, pclath, cstack
  3451 ;; Tracked objects:
  3452 ;;		On entry : B1F/0
  3453 ;;		On exit  : B1F/1
  3454 ;;		Unchanged: B00/0
  3455 ;; Data sizes:     COMMON   BANK0   BANK1
  3456 ;;      Params:         0       0       0
  3457 ;;      Locals:         0       0       0
  3458 ;;      Temps:          0       0       0
  3459 ;;      Totals:         0       0       0
  3460 ;;Total ram usage:        0 bytes
  3461 ;; Hardware stack levels used:    1
  3462 ;; Hardware stack levels required when called:    3
  3463 ;; This function calls:
  3464 ;;		_OSCILLATOR_Initialize
  3465 ;;		_PIN_MANAGER_Initialize
  3466 ;; This function is called by:
  3467 ;;		_main
  3468 ;; This function uses a non-reentrant model
  3469 ;;
  3470                           
  3471                           
  3472                           ;psect for function _SYSTEM_Initialize
  3473  0384                     _SYSTEM_Initialize:
  3474                           
  3475                           ;mcc_generated_files/mcc.c: 73:     PIN_MANAGER_Initialize();
  3476                           
  3477                           ;incstack = 0
  3478                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3479  0384  22DE               	fcall	_PIN_MANAGER_Initialize
  3480                           
  3481                           ;mcc_generated_files/mcc.c: 74:     OSCILLATOR_Initialize();
  3482  0385  237A               	fcall	_OSCILLATOR_Initialize
  3483  0386  0008               	return
  3484  0387                     __end_of_SYSTEM_Initialize:
  3485                           
  3486                           	psect	text16
  3487  02DE                     __ptext16:	
  3488 ;; *************** function _PIN_MANAGER_Initialize *****************
  3489 ;; Defined at:
  3490 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  3491 ;; Parameters:    Size  Location     Type
  3492 ;;		None
  3493 ;; Auto vars:     Size  Location     Type
  3494 ;;		None
  3495 ;; Return value:  Size  Location     Type
  3496 ;;                  1    wreg      void 
  3497 ;; Registers used:
  3498 ;;		wreg, status,2
  3499 ;; Tracked objects:
  3500 ;;		On entry : B1F/0
  3501 ;;		On exit  : B1F/2
  3502 ;;		Unchanged: B00/0
  3503 ;; Data sizes:     COMMON   BANK0   BANK1
  3504 ;;      Params:         0       0       0
  3505 ;;      Locals:         0       0       0
  3506 ;;      Temps:          0       0       0
  3507 ;;      Totals:         0       0       0
  3508 ;;Total ram usage:        0 bytes
  3509 ;; Hardware stack levels used:    1
  3510 ;; Hardware stack levels required when called:    2
  3511 ;; This function calls:
  3512 ;;		Nothing
  3513 ;; This function is called by:
  3514 ;;		_SYSTEM_Initialize
  3515 ;; This function uses a non-reentrant model
  3516 ;;
  3517                           
  3518                           
  3519                           ;psect for function _PIN_MANAGER_Initialize
  3520  02DE                     _PIN_MANAGER_Initialize:
  3521                           
  3522                           ;mcc_generated_files/pin_manager.c: 51:     LATA = 0x0;
  3523                           
  3524                           ;incstack = 0
  3525                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3526  02DE  0022               	movlb	2	; select bank2
  3527  02DF  018C               	clrf	12	;volatile
  3528                           
  3529                           ;mcc_generated_files/pin_manager.c: 52:     LATC = 0x0;
  3530  02E0  018E               	clrf	14	;volatile
  3531                           
  3532                           ;mcc_generated_files/pin_manager.c: 55:     ANSELA = 0b00000100;
  3533  02E1  3004               	movlw	4
  3534  02E2  0023               	movlb	3	; select bank3
  3535  02E3  008C               	movwf	12	;volatile
  3536                           
  3537                           ;mcc_generated_files/pin_manager.c: 56:     ANSELC = 0b00000011;
  3538  02E4  3003               	movlw	3
  3539  02E5  008E               	movwf	14	;volatile
  3540                           
  3541                           ;mcc_generated_files/pin_manager.c: 59:     WPUA = 0x3B;
  3542  02E6  303B               	movlw	59
  3543  02E7  0024               	movlb	4	; select bank4
  3544  02E8  008C               	movwf	12	;volatile
  3545                           
  3546                           ;mcc_generated_files/pin_manager.c: 61:     WPUC = 0x1C;
  3547  02E9  301C               	movlw	28
  3548  02EA  008E               	movwf	14	;volatile
  3549                           
  3550                           ;mcc_generated_files/pin_manager.c: 63:     RXDTSEL = 0;
  3551  02EB  0022               	movlb	2	; select bank2
  3552  02EC  139D               	bcf	29,7	;volatile
  3553                           
  3554                           ;mcc_generated_files/pin_manager.c: 64:     TXCKSEL = 0;
  3555  02ED  111D               	bcf	29,2	;volatile
  3556                           
  3557                           ;mcc_generated_files/pin_manager.c: 67:     TRISC = 0b01100011;
  3558  02EE  3063               	movlw	99
  3559  02EF  0021               	movlb	1	; select bank1
  3560  02F0  008E               	movwf	14	;volatile
  3561                           
  3562                           ;mcc_generated_files/pin_manager.c: 68:     TRISA = 0b01011111;
  3563  02F1  305F               	movlw	95
  3564  02F2  008C               	movwf	12	;volatile
  3565                           
  3566                           ;mcc_generated_files/pin_manager.c: 70:     OPTION_REGbits.nWPUEN = 0x0;
  3567  02F3  1395               	bcf	21,7	;volatile
  3568                           
  3569                           ;mcc_generated_files/pin_manager.c: 71:     APFCON = 0x00;
  3570  02F4  0022               	movlb	2	; select bank2
  3571  02F5  019D               	clrf	29	;volatile
  3572  02F6  0008               	return
  3573  02F7                     __end_of_PIN_MANAGER_Initialize:
  3574                           
  3575                           	psect	text17
  3576  037A                     __ptext17:	
  3577 ;; *************** function _OSCILLATOR_Initialize *****************
  3578 ;; Defined at:
  3579 ;;		line 78 in file "mcc_generated_files/mcc.c"
  3580 ;; Parameters:    Size  Location     Type
  3581 ;;		None
  3582 ;; Auto vars:     Size  Location     Type
  3583 ;;		None
  3584 ;; Return value:  Size  Location     Type
  3585 ;;                  1    wreg      void 
  3586 ;; Registers used:
  3587 ;;		wreg, status,2
  3588 ;; Tracked objects:
  3589 ;;		On entry : B1F/2
  3590 ;;		On exit  : B1F/1
  3591 ;;		Unchanged: B00/0
  3592 ;; Data sizes:     COMMON   BANK0   BANK1
  3593 ;;      Params:         0       0       0
  3594 ;;      Locals:         0       0       0
  3595 ;;      Temps:          0       0       0
  3596 ;;      Totals:         0       0       0
  3597 ;;Total ram usage:        0 bytes
  3598 ;; Hardware stack levels used:    1
  3599 ;; Hardware stack levels required when called:    2
  3600 ;; This function calls:
  3601 ;;		Nothing
  3602 ;; This function is called by:
  3603 ;;		_SYSTEM_Initialize
  3604 ;; This function uses a non-reentrant model
  3605 ;;
  3606                           
  3607                           
  3608                           ;psect for function _OSCILLATOR_Initialize
  3609  037A                     _OSCILLATOR_Initialize:
  3610                           
  3611                           ;mcc_generated_files/mcc.c: 81:     OSCCON = 0x3A;
  3612                           
  3613                           ;incstack = 0
  3614                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3615  037A  303A               	movlw	58
  3616  037B  0021               	movlb	1	; select bank1
  3617  037C  0099               	movwf	25	;volatile
  3618                           
  3619                           ;mcc_generated_files/mcc.c: 83:     OSCSTAT = 0x00;
  3620  037D  019A               	clrf	26	;volatile
  3621                           
  3622                           ;mcc_generated_files/mcc.c: 85:     OSCTUNE = 0x00;
  3623  037E  0198               	clrf	24	;volatile
  3624  037F  0008               	return
  3625  0380                     __end_of_OSCILLATOR_Initialize:
  3626                           
  3627                           	psect	intentry
  3628  0004                     __pintentry:	
  3629 ;; *************** function _isr *****************
  3630 ;; Defined at:
  3631 ;;		line 152 in file "main.c"
  3632 ;; Parameters:    Size  Location     Type
  3633 ;;		None
  3634 ;; Auto vars:     Size  Location     Type
  3635 ;;		None
  3636 ;; Return value:  Size  Location     Type
  3637 ;;                  1    wreg      void 
  3638 ;; Registers used:
  3639 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3640 ;; Tracked objects:
  3641 ;;		On entry : 0/0
  3642 ;;		On exit  : 1C/0
  3643 ;;		Unchanged: 0/0
  3644 ;; Data sizes:     COMMON   BANK0   BANK1
  3645 ;;      Params:         0       0       0
  3646 ;;      Locals:         0       0       0
  3647 ;;      Temps:          1       0       0
  3648 ;;      Totals:         1       0       0
  3649 ;;Total ram usage:        1 bytes
  3650 ;; Hardware stack levels used:    1
  3651 ;; Hardware stack levels required when called:    1
  3652 ;; This function calls:
  3653 ;;		_start_TMR0_ISR
  3654 ;;		_stop_TMR0_ISR
  3655 ;;		i1_start_RX_USART_ISR
  3656 ;; This function is called by:
  3657 ;;		Interrupt level 1
  3658 ;; This function uses a non-reentrant model
  3659 ;;
  3660                           
  3661  0004                     _isr:
  3662                           
  3663                           ;incstack = 0
  3664  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  3665                           
  3666                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3667  0005  3180               	pagesel	$
  3668                           
  3669                           ;main.c: 156:     if (TMR0IF && TMR0IE) {
  3670  0006  190B               	btfsc	11,2	;volatile
  3671  0007  1E8B               	btfss	11,5	;volatile
  3672  0008  2813               	goto	i1l130
  3673                           
  3674                           ;main.c: 158:         TMR0IF = 0;
  3675  0009  110B               	bcf	11,2	;volatile
  3676                           
  3677                           ;main.c: 159:         TMR0 = TIMER0_timeout;
  3678  000A  0020               	movlb	0	; select bank0
  3679  000B  0839               	movf	_TIMER0_timeout,w	;volatile
  3680  000C  0095               	movwf	21	;volatile
  3681                           
  3682                           ;main.c: 162:         TIMER0_flag = 1;
  3683  000D  3001               	movlw	1
  3684  000E  00F3               	movwf	??_isr
  3685  000F  0873               	movf	??_isr,w
  3686  0010  00BD               	movwf	_TIMER0_flag	;volatile
  3687                           
  3688                           ;main.c: 167:         stop_TMR0_ISR();
  3689  0011  2387               	fcall	_stop_TMR0_ISR
  3690  0012  2850               	goto	i1l131
  3691  0013                     i1l130:	
  3692                           ;main.c: 170:     }
  3693                           
  3694                           
  3695                           ;main.c: 174:     if (RCIF) {
  3696  0013  0020               	movlb	0	; select bank0
  3697  0014  1E91               	btfss	17,5	;volatile
  3698  0015  2835               	goto	i1l132
  3699                           
  3700                           ;main.c: 175:         stop_TMR0_ISR();
  3701  0016  2387               	fcall	_stop_TMR0_ISR
  3702                           
  3703                           ;main.c: 178:        if (OERR) {
  3704  0017  0023               	movlb	3	; select bank3
  3705  0018  1C9D               	btfss	29,1	;volatile
  3706  0019  281F               	goto	i1l1891
  3707                           
  3708                           ;main.c: 180:             CREN = 0;
  3709  001A  121D               	bcf	29,4	;volatile
  3710                           
  3711                           ;main.c: 181:             CREN = 1;
  3712  001B  161D               	bsf	29,4	;volatile
  3713                           
  3714                           ;main.c: 182:             USART_rx_index = 0;
  3715  001C  0020               	movlb	0	; select bank0
  3716  001D  01BC               	clrf	_USART_rx_index	;volatile
  3717  001E  2850               	goto	i1l131
  3718  001F                     i1l1891:
  3719                           
  3720                           ;main.c: 187:         if (USART_rx_index >= 10) {
  3721  001F  300A               	movlw	10
  3722  0020  0020               	movlb	0	; select bank0
  3723  0021  023C               	subwf	_USART_rx_index,w	;volatile
  3724  0022  1803               	btfsc	3,0
  3725                           
  3726                           ;main.c: 188:             USART_rx_index = 0;
  3727  0023  01BC               	clrf	_USART_rx_index	;volatile
  3728                           
  3729                           ;main.c: 191:         USART_rx_data[USART_rx_index++] = RCREG;
  3730  0024  0023               	movlb	3	; select bank3
  3731  0025  0819               	movf	25,w	;volatile
  3732  0026  00F3               	movwf	??_isr
  3733  0027  0020               	movlb	0	; select bank0
  3734  0028  083C               	movf	_USART_rx_index,w
  3735  0029  3E2F               	addlw	(low (_USART_rx_data| 0))& (0+255)
  3736  002A  0086               	movwf	6
  3737  002B  0187               	clrf	7
  3738  002C  0873               	movf	??_isr,w
  3739  002D  0081               	movwf	1
  3740  002E  3001               	movlw	1
  3741  002F  00F3               	movwf	??_isr
  3742  0030  0873               	movf	??_isr,w
  3743  0031  07BC               	addwf	_USART_rx_index,f	;volatile
  3744                           
  3745                           ;main.c: 193:         start_TMR0_ISR(98);
  3746  0032  3062               	movlw	98
  3747  0033  233F               	fcall	_start_TMR0_ISR
  3748  0034  2850               	goto	i1l131
  3749  0035                     i1l132:	
  3750                           ;main.c: 196:     }
  3751                           
  3752                           
  3753                           ;main.c: 200:     if (TXIF && TXIE) {
  3754  0035  1E11               	btfss	17,4	;volatile
  3755  0036  2850               	goto	i1l131
  3756  0037  0021               	movlb	1	; select bank1
  3757  0038  1E11               	btfss	17,4	;volatile
  3758  0039  2850               	goto	i1l131
  3759                           
  3760                           ;main.c: 202:         TXREG = USART_tx_data[USART_tx_index++];
  3761  003A  0879               	movf	_USART_tx_index,w
  3762  003B  3E20               	addlw	(low (_USART_tx_data| 0))& (0+255)
  3763  003C  0086               	movwf	6
  3764  003D  0187               	clrf	7
  3765  003E  0801               	movf	1,w
  3766  003F  0023               	movlb	3	; select bank3
  3767  0040  009A               	movwf	26	;volatile
  3768  0041  3001               	movlw	1
  3769  0042  00F3               	movwf	??_isr
  3770  0043  0873               	movf	??_isr,w
  3771  0044  07F9               	addwf	_USART_tx_index,f	;volatile
  3772                           
  3773                           ;main.c: 204:         if (USART_tx_index >= USART_tx_length) {
  3774  0045  0878               	movf	_USART_tx_length,w	;volatile
  3775  0046  0279               	subwf	_USART_tx_index,w	;volatile
  3776  0047  1C03               	skipc
  3777  0048  2850               	goto	i1l131
  3778                           
  3779                           ;main.c: 205:             TXIE = 0;
  3780  0049  0021               	movlb	1	; select bank1
  3781  004A  1211               	bcf	17,4	;volatile
  3782                           
  3783                           ;main.c: 206:             USART_tx_flag = 0;
  3784  004B  01F7               	clrf	_USART_tx_flag	;volatile
  3785                           
  3786                           ;main.c: 210:             _delay((unsigned long)((3)*(500000/4000.0)));
  3787  004C  307D               	movlw	125
  3788  004D                     u123_27:
  3789  004D  0B89               	decfsz	9,f
  3790  004E  284D               	goto	u123_27
  3791                           
  3792                           ;main.c: 212:             start_RX_USART_ISR();
  3793  004F  230F               	fcall	i1_start_RX_USART_ISR
  3794  0050                     i1l131:
  3795  0050  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  3796  0051  0009               	retfie
  3797  0052                     __end_of_isr:
  3798                           
  3799                           	psect	text19
  3800  030F                     __ptext19:	
  3801 ;; *************** function i1_start_RX_USART_ISR *****************
  3802 ;; Defined at:
  3803 ;;		line 83 in file "USART1823.c"
  3804 ;; Parameters:    Size  Location     Type
  3805 ;;		None
  3806 ;; Auto vars:     Size  Location     Type
  3807 ;;		None
  3808 ;; Return value:  Size  Location     Type
  3809 ;;                  1    wreg      void 
  3810 ;; Registers used:
  3811 ;;		wreg, status,2
  3812 ;; Tracked objects:
  3813 ;;		On entry : 0/1
  3814 ;;		On exit  : 1F/1
  3815 ;;		Unchanged: 0/0
  3816 ;; Data sizes:     COMMON   BANK0   BANK1
  3817 ;;      Params:         0       0       0
  3818 ;;      Locals:         0       0       0
  3819 ;;      Temps:          0       0       0
  3820 ;;      Totals:         0       0       0
  3821 ;;Total ram usage:        0 bytes
  3822 ;; Hardware stack levels used:    1
  3823 ;; This function calls:
  3824 ;;		Nothing
  3825 ;; This function is called by:
  3826 ;;		_isr
  3827 ;; This function uses a non-reentrant model
  3828 ;;
  3829                           
  3830                           
  3831                           ;psect for function i1_start_RX_USART_ISR
  3832  030F                     i1_start_RX_USART_ISR:
  3833                           
  3834                           ;USART1823.c: 86:      { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  3835                           
  3836                           ;incstack = 0
  3837                           ; Regs used in i1_start_RX_USART_ISR: [wreg+status,2]
  3838  030F  0023               	movlb	3	; select bank3
  3839  0310  151E               	bsf	30,2	;volatile
  3840  0311  159F               	bsf	31,3	;volatile
  3841  0312  019C               	clrf	28	;volatile
  3842  0313  300C               	movlw	12
  3843  0314  009B               	movwf	27	;volatile
  3844                           
  3845                           ;USART1823.c: 88:     SYNC = 0;
  3846  0315  121E               	bcf	30,4	;volatile
  3847                           
  3848                           ;USART1823.c: 89:     SPEN = 1;
  3849  0316  179D               	bsf	29,7	;volatile
  3850                           
  3851                           ;USART1823.c: 90:     CREN = 1;
  3852  0317  161D               	bsf	29,4	;volatile
  3853                           
  3854                           ;USART1823.c: 92:     USART_rx_flag = 0;
  3855  0318  01F6               	clrf	_USART_rx_flag	;volatile
  3856                           
  3857                           ;USART1823.c: 93:     USART_rx_index = 0;
  3858  0319  0020               	movlb	0	; select bank0
  3859  031A  01BC               	clrf	_USART_rx_index	;volatile
  3860                           
  3861                           ;USART1823.c: 95:     RCIE = 1;
  3862  031B  0021               	movlb	1	; select bank1
  3863  031C  1691               	bsf	17,5	;volatile
  3864                           
  3865                           ;USART1823.c: 96:     PEIE = 1;
  3866  031D  170B               	bsf	11,6	;volatile
  3867                           
  3868                           ;USART1823.c: 97:     GIE = 1;
  3869  031E  178B               	bsf	11,7	;volatile
  3870  031F  0008               	return
  3871  0320                     __end_ofi1_start_RX_USART_ISR:
  3872                           
  3873                           	psect	text20
  3874  0387                     __ptext20:	
  3875 ;; *************** function _stop_TMR0_ISR *****************
  3876 ;; Defined at:
  3877 ;;		line 44 in file "TMR0.c"
  3878 ;; Parameters:    Size  Location     Type
  3879 ;;		None
  3880 ;; Auto vars:     Size  Location     Type
  3881 ;;		None
  3882 ;; Return value:  Size  Location     Type
  3883 ;;                  1    wreg      void 
  3884 ;; Registers used:
  3885 ;;		None
  3886 ;; Tracked objects:
  3887 ;;		On entry : 1F/0
  3888 ;;		On exit  : 1F/0
  3889 ;;		Unchanged: 1F/0
  3890 ;; Data sizes:     COMMON   BANK0   BANK1
  3891 ;;      Params:         0       0       0
  3892 ;;      Locals:         0       0       0
  3893 ;;      Temps:          0       0       0
  3894 ;;      Totals:         0       0       0
  3895 ;;Total ram usage:        0 bytes
  3896 ;; Hardware stack levels used:    1
  3897 ;; This function calls:
  3898 ;;		Nothing
  3899 ;; This function is called by:
  3900 ;;		_isr
  3901 ;; This function uses a non-reentrant model
  3902 ;;
  3903                           
  3904                           
  3905                           ;psect for function _stop_TMR0_ISR
  3906  0387                     _stop_TMR0_ISR:
  3907                           
  3908                           ;TMR0.c: 47:     TMR0IE = 0;
  3909                           
  3910                           ;incstack = 0
  3911                           ; Regs used in _stop_TMR0_ISR: []
  3912  0387  128B               	bcf	11,5	;volatile
  3913                           
  3914                           ;TMR0.c: 48:     TMR0IF = 0;
  3915  0388  110B               	bcf	11,2	;volatile
  3916  0389  0008               	return
  3917  038A                     __end_of_stop_TMR0_ISR:
  3918                           
  3919                           	psect	text21
  3920  033F                     __ptext21:	
  3921 ;; *************** function _start_TMR0_ISR *****************
  3922 ;; Defined at:
  3923 ;;		line 30 in file "TMR0.c"
  3924 ;; Parameters:    Size  Location     Type
  3925 ;;  val             1    wreg     unsigned char 
  3926 ;; Auto vars:     Size  Location     Type
  3927 ;;  val             1    2[COMMON] unsigned char 
  3928 ;; Return value:  Size  Location     Type
  3929 ;;                  1    wreg      void 
  3930 ;; Registers used:
  3931 ;;		wreg, status,2
  3932 ;; Tracked objects:
  3933 ;;		On entry : 1F/0
  3934 ;;		On exit  : 1F/0
  3935 ;;		Unchanged: 0/0
  3936 ;; Data sizes:     COMMON   BANK0   BANK1
  3937 ;;      Params:         0       0       0
  3938 ;;      Locals:         1       0       0
  3939 ;;      Temps:          2       0       0
  3940 ;;      Totals:         3       0       0
  3941 ;;Total ram usage:        3 bytes
  3942 ;; Hardware stack levels used:    1
  3943 ;; This function calls:
  3944 ;;		Nothing
  3945 ;; This function is called by:
  3946 ;;		_isr
  3947 ;; This function uses a non-reentrant model
  3948 ;;
  3949                           
  3950                           
  3951                           ;psect for function _start_TMR0_ISR
  3952  033F                     _start_TMR0_ISR:
  3953                           
  3954                           ;incstack = 0
  3955                           ; Regs used in _start_TMR0_ISR: [wreg+status,2]
  3956                           ;start_TMR0_ISR@val stored from wreg
  3957  033F  00F2               	movwf	start_TMR0_ISR@val
  3958                           
  3959                           ;TMR0.c: 30: void start_TMR0_ISR(unsigned char val);TMR0.c: 31: {;TMR0.c: 32:     TIMER0
      +                          _timeout = val;
  3960  0340  0872               	movf	start_TMR0_ISR@val,w
  3961  0341  00F0               	movwf	??_start_TMR0_ISR
  3962  0342  01F1               	clrf	??_start_TMR0_ISR+1
  3963  0343  0870               	movf	??_start_TMR0_ISR,w
  3964  0344  00B9               	movwf	_TIMER0_timeout	;volatile
  3965  0345  0871               	movf	??_start_TMR0_ISR+1,w
  3966  0346  00BA               	movwf	_TIMER0_timeout+1	;volatile
  3967                           
  3968                           ;TMR0.c: 33:     TIMER0_flag = 0;
  3969  0347  01BD               	clrf	_TIMER0_flag	;volatile
  3970                           
  3971                           ;TMR0.c: 36:     TMR0 = TIMER0_timeout;
  3972  0348  0839               	movf	_TIMER0_timeout,w	;volatile
  3973  0349  0095               	movwf	21	;volatile
  3974                           
  3975                           ;TMR0.c: 39:     TMR0IF = 0;
  3976  034A  110B               	bcf	11,2	;volatile
  3977                           
  3978                           ;TMR0.c: 40:     TMR0IE = 1;
  3979  034B  168B               	bsf	11,5	;volatile
  3980                           
  3981                           ;TMR0.c: 41:     GIE = 1;
  3982  034C  178B               	bsf	11,7	;volatile
  3983  034D  0008               	return
  3984  034E                     __end_of_start_TMR0_ISR:
  3985  007E                     btemp	set	126	;btemp
  3986  007E                     int$flags	set	126
  3987  007E                     wtemp0	set	126
  3988                           
  3989                           	psect	config
  3990                           
  3991                           ;Config register CONFIG1 @ 0x8007
  3992                           ;	Oscillator Selection
  3993                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  3994                           ;	Watchdog Timer Enable
  3995                           ;	WDTE = ON, WDT enabled
  3996                           ;	Power-up Timer Enable
  3997                           ;	PWRTE = OFF, PWRT disabled
  3998                           ;	MCLR Pin Function Select
  3999                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  4000                           ;	Flash Program Memory Code Protection
  4001                           ;	CP = OFF, Program memory code protection is disabled
  4002                           ;	Data Memory Code Protection
  4003                           ;	CPD = OFF, Data memory code protection is disabled
  4004                           ;	Brown-out Reset Enable
  4005                           ;	BOREN = OFF, Brown-out Reset disabled
  4006                           ;	Clock Out Enable
  4007                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  4008                           ;	Internal/External Switchover
  4009                           ;	IESO = ON, Internal/External Switchover mode is enabled
  4010                           ;	Fail-Safe Clock Monitor Enable
  4011                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  4012  8007                     	org	32775
  4013  8007  D9FC               	dw	55804
  4014                           
  4015                           ;Config register CONFIG2 @ 0x8008
  4016                           ;	Flash Memory Self-Write Protection
  4017                           ;	WRT = OFF, Write protection off
  4018                           ;	PLL Enable
  4019                           ;	PLLEN = OFF, 4x PLL disabled
  4020                           ;	Stack Overflow/Underflow Reset Enable
  4021                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  4022                           ;	Brown-out Reset Voltage Selection
  4023                           ;	BORV = HI, Brown-out Reset Voltage (Vbor), high trip point selected.
  4024                           ;	Low-Voltage Programming Enable
  4025                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  4026  8008                     	org	32776
  4027  8008  DAFF               	dw	56063

Data Sizes:
    Strings     0
    Constant    63
    Data        0
    BSS         44
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     40      80
    BANK1            32      0       0

Pointer List with Targets:

    measure@Q	PTR short  size(1) Largest target is 2
		 -> sweep@Q(BANK0[2]), 

    measure@I	PTR short  size(1) Largest target is 2
		 -> sweep@I(BANK0[2]), 

    calculate_checksum@data	PTR unsigned char  size(1) Largest target is 7
		 -> sweep@aux(BANK0[7]), 

    lputs_ISR@data	PTR unsigned char  size(1) Largest target is 13
		 -> sweep@aux(BANK0[7]), calibrate_reader@aux(COMMON[8]), measure_Impedance_SE@aux(COMMON[8]), measure_Offset@aux(COMMON[5]), 
		 -> measure_Impedance_no_offset@aux(COMMON[13]), measure_Impedance@aux(COMMON[13]), read_ADC_channels@aux(COMMON[7]), mess_rec(BANK0[10]), 

    setFreq@asic	PTR struct . size(1) Largest target is 2
		 -> sweep@asic(BANK0[2]), 

    setGain@asic	PTR struct . size(1) Largest target is 2
		 -> sweep@asic(BANK0[2]), 


Critical Paths under _main in COMMON

    _sweep->_setFreq
    _sweep->_setGain
    _measure->_ADC_5
    _measure->_config

Critical Paths under _isr in COMMON

    _isr->_start_TMR0_ISR

Critical Paths under _main in BANK0

    _main->_sweep
    _sweep->_measure
    _measure->_ADC_5

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    6251
                                             39 BANK0      1     1      0
                  _SYSTEM_Initialize
                          _setup_ADC
                         _setup_TMR0
                          _start_RCM
                 _start_RX_USART_ISR
                 _start_TX_USART_ISR
                              _sweep
 ---------------------------------------------------------------------------------
 (1) _sweep                                               21    21      0    6251
                                             18 BANK0     21    21      0
                 _calculate_checksum
                          _lputs_ISR
                            _measure
                            _setFreq
                            _setGain
 ---------------------------------------------------------------------------------
 (2) _setGain                                              4     3      1     846
                                              4 COMMON     2     1      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setFreq                                              4     3      1     408
                                              4 COMMON     2     1      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _measure                                             14    11      3    2216
                                              4 BANK0     14    11      3
                              _ADC_5
                             _config
 ---------------------------------------------------------------------------------
 (3) _config                                               5     3      2    1242
                                              4 COMMON     2     0      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _ADC_5                                                6     4      2      40
                                              4 COMMON     2     0      2
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _lputs_ISR                                            5     4      1    1166
                                              4 COMMON     1     0      1
                                              0 BANK0      4     4      0
                     _close_RX_USART
 ---------------------------------------------------------------------------------
 (3) _close_RX_USART                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _calculate_checksum                                   6     5      1     293
                                              4 COMMON     1     0      1
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _start_TX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RCM                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_TMR0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_ADC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  1     1      0      22
                                              3 COMMON     1     1      0
                     _start_TMR0_ISR
                      _stop_TMR0_ISR
               i1_start_RX_USART_ISR
 ---------------------------------------------------------------------------------
 (5) i1_start_RX_USART_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _stop_TMR0_ISR                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _start_TMR0_ISR                                       3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _setup_ADC
   _setup_TMR0
   _start_RCM
   _start_RX_USART_ISR
   _start_TX_USART_ISR
   _sweep
     _calculate_checksum
     _lputs_ISR
       _close_RX_USART
     _measure
       _ADC_5
       _config
     _setFreq
     _setGain

 _isr (ROOT)
   _start_TMR0_ISR
   _stop_TMR0_ISR
   i1_start_RX_USART_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      5A       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     28      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      5A       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Tue Nov  3 16:22:08 2020

                  _USART_rx_data 002F                    _USART_rx_flag 0076                    _USART_tx_data 0020  
                  _USART_tx_flag 0077                              l151 01EC                              l119 0254  
                            l408 00E5                              l442 02C1                              _GIE 005F  
                            _RA5 0065                              _PS0 04A8                              _PS1 04A9  
                            _PS2 04AA                              _PSA 04AB                              u845 01F7  
                            u875 02CC                              _isr 0004                              wreg 0009  
                 _USART_rx_index 003C                   _USART_tx_index 0079                             l2007 026F  
                           l2111 0117                             l2025 02FA                             l2009 0286  
                           l2105 010F                             l2027 030D                             l2141 014F  
                           l2071 00D4                             l2055 00A5                             l2143 0153  
                           l2127 0139                             l2081 00F3                             l2139 0149  
                           l2087 0101                             l2191 0260                             l1941 01F4  
                           l1943 01F0                             ?_isr 0070                             _ADGO 04E9  
                           _BRGH 0CF2                             _CREN 0CEC                             u1045 00DE  
                           u1055 00EF                             u1207 006B                             u1065 00FD  
                           u1217 0080                             u1145 0156                             u1227 00AF  
                           _LATA 010C                             _LATC 010E                             u1197 024D  
                           _PEIE 005E                             _RCIE 048D                             _RCIF 008D  
                           _OERR 0CE9                             _TMR0 0015                             _SPEN 0CEF  
                           _TXIE 048C                             _TXEN 0CF5                             _TXIF 008C  
                           _SYNC 0CF4                             _WPUA 020C                             _WPUC 020E  
         __size_of_stop_TMR0_ISR 0003                             _filt 0215                             _main 0241  
                           fsr0h 0005                             fsr1h 0007                             indf0 0000  
                           fsr0l 0004                             indf1 0001                             fsr1l 0006  
                           btemp 007E      __size_of_calculate_checksum 0018                             start 0052  
                          ??_isr 0073   __size_of_OSCILLATOR_Initialize 0006                  _USART_tx_length 0078  
  __end_of_OSCILLATOR_Initialize 0380                            ?_main 0070                            _ADC_5 02BB  
                          _BRG16 0CFB                            i1l130 0013                            i1l131 0050  
                          i1l132 0035                            _RCREG 0199                            _PORTC 000E  
                          _TRISA 008C                   _start_TMR0_ISR 033F                            _TRISC 008E  
                          _TXREG 019A                            _gains 0359                  __end_of_measure 0103  
                          _freqs 034E                  __end_of_setGain 01DB                            _sweep 0103  
                __end_of_setFreq 02BB    __size_ofi1_start_RX_USART_ISR 0011                            status 0003  
                          wtemp0 007E                  __initialization 0053                     __end_of_filt 0241  
                   __end_of_main 026A                    _stop_TMR0_ISR 0387                 ??_close_RX_USART 0074  
         __end_of_start_TMR0_ISR 034E                           ??_main 006F                           ?_ADC_5 0074  
                 _TIMER0_timeout 0039                           _ADCON0 009D                           _ADCON1 009E  
                    measure@aux1 0058                      measure@aux2 0056                      measure@asic 004D  
                         _ADRESH 009C                           _ADRESL 009B                           _APFCON 011D  
                         _ANSELA 018C                           _ANSELC 018E                           ?_sweep 0070  
                         i1l1891 001F                           u123_27 004D                           _OSCCON 0099  
                         _TMR0IE 005D                           _TMR0IF 005A                           _TMR0CS 04AD  
                         _SPBRGH 019C                           _SPBRGL 019B                   ?_stop_TMR0_ISR 0070  
                         _config 01DB                  ?_start_TMR0_ISR 0070                        ??_measure 004F  
    __size_of_start_RX_USART_ISR 0010                        ??_setGain 0075                        ??_setFreq 0075  
                         sweep@I 0067                           sweep@Q 0069                           sweep@i 0065  
              _SYSTEM_Initialize 0384          __end_of__initialization 005D               ?_SYSTEM_Initialize 0070  
                  __end_of_ADC_5 02DE                   __pcstackCOMMON 0070              ??_SYSTEM_Initialize 0074  
                  __end_of_gains 0361                    __end_of_freqs 0359                    __end_of_sweep 019E  
                        ??_ADC_5 0048                   _OPTION_REGbits 0095      __size_of_start_TX_USART_ISR 000F  
                    setGain@asic 0049        __end_of_SYSTEM_Initialize 0387                          ??_sweep 005A  
                     __pbssBANK0 0020                      setFreq@asic 0048                       __pmaintext 0241  
                ??_stop_TMR0_ISR 0070                       __pintentry 0004                          ?_config 0074  
                   measure@value 0054                          _CLKRCON 039A               __size_of_lputs_ISR 0029  
                lputs_ISR@length 0074                setFreq@freq_index 0074               __size_of_setup_ADC 0006  
                        _OSCSTAT 009A                          _OSCTUNE 0098               __size_of_start_RCM 0004  
                        _RXDTSEL 08EF                          _TXCKSEL 08EA       __end_of_calculate_checksum 030F  
   __end_ofi1_start_RX_USART_ISR 0320                  __size_of_config 003A                          __ptext1 0103  
                        __ptext2 019E                          __ptext3 0293                          __ptext4 0060  
                        __ptext5 01DB                          __ptext6 02BB                          __ptext7 026A  
                        __ptext8 0361                          __ptext9 02F7                          _measure 0060  
          _OSCILLATOR_Initialize 037A                     __size_of_isr 004E                          _setGain 019E  
                        _setFreq 0293         ??_PIN_MANAGER_Initialize 0074                          config@i 0049  
              setGain@gain_index 0074       __size_of_SYSTEM_Initialize 0003                          clrloop0 0369  
                  _mess_rec_size 003B             end_of_initialization 005D                __end_of_lputs_ISR 0293  
              __end_of_setup_ADC 037A                 ??_start_TMR0_ISR 0070                __end_of_start_RCM 0384  
                     _setup_TMR0 036E                       config@conf 0074                   __end_of_config 0215  
     __end_of_start_RX_USART_ISR 0330           ?_OSCILLATOR_Initialize 0070              start_initialization 0053  
__size_of_PIN_MANAGER_Initialize 0019                      __end_of_isr 0052          __size_of_close_RX_USART 0007  
           i1_start_RX_USART_ISR 030F                   ADC_5@ADC_value 004A                         ??_config 0048  
                    ?_setup_TMR0 0070       __end_of_start_TX_USART_ISR 033F                      __pbssCOMMON 0076  
                      ___latbits 0000                    __pcstackBANK0 0048                  sweep@gain_index 006B  
          ?i1_start_RX_USART_ISR 0070                       setGain@aux 0048           _PIN_MANAGER_Initialize 02DE  
                     setFreq@aux 0049            __end_of_stop_TMR0_ISR 038A               _calculate_checksum 02F7  
                 __size_of_ADC_5 0023              ?_calculate_checksum 0074                         ?_measure 004C  
                       ?_setGain 0074                         ?_setFreq 0074                    measure@offset 0051  
                sweep@freq_index 0064                   __size_of_sweep 009B              __size_of_setup_TMR0 0006  
           ??_calculate_checksum 0048                        clear_ram0 0368                       lputs_ISR@i 004A  
                      _lputs_ISR 026A                        _setup_ADC 0374                        _start_RCM 0380  
                      config@out 004A           ??i1_start_RX_USART_ISR 0070                   _close_RX_USART 0361  
                     sweep@check 005C                       sweep@count 0066                       ?_lputs_ISR 0074  
        calculate_checksum@check 004B                       ?_setup_ADC 0070          ??_OSCILLATOR_Initialize 0074  
              start_TMR0_ISR@val 0072                       ?_start_RCM 0070           __end_of_close_RX_USART 0368  
               __size_of_measure 00A3                 __size_of_setGain 003D                 __size_of_setFreq 0028  
                       __ptext10 0330                         __ptext11 0320                         __ptext20 0387  
                       __ptext12 0380                         __ptext21 033F                         __ptext13 036E  
                       __ptext14 0374                         __ptext15 0384                         __ptext16 02DE  
                       __ptext17 037A                         __ptext19 030F                    lputs_ISR@data 004B  
             _start_RX_USART_ISR 0320                    __size_of_main 0029                         _mess_rec 003E  
            ?_start_RX_USART_ISR 0070                         int$flags 007E                     ??_setup_TMR0 0074  
                    _TIMER0_flag 003D             ??_start_RX_USART_ISR 0074                         measure@I 0053  
        __size_of_start_TMR0_ISR 000F                         measure@Q 004C                  ?_close_RX_USART 0070  
                      sweep@asic 006D           calculate_checksum@data 004A                         intlevel1 0000  
             _start_TX_USART_ISR 0330          ?_PIN_MANAGER_Initialize 0070               __end_of_setup_TMR0 0374  
            ?_start_TX_USART_ISR 0070                      ??_lputs_ISR 0048                      ??_setup_ADC 0074  
                       sweep@aux 005D                         sweep@ret 006C                    __pstringtext1 0215  
                  __pstringtext2 034E                    __pstringtext3 0359            calculate_checksum@num 0074  
                    ??_start_RCM 0074             ??_start_TX_USART_ISR 0074   __end_of_PIN_MANAGER_Initialize 02F7  
            calculate_checksum@i 004C  
