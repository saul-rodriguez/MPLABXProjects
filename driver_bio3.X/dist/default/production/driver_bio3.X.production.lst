

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Feb 15 13:36:12 2019

Microchip MPLAB XC8 C Compiler v2.05 (Pro license) build 20181220022703 Og9f 
     1                           	processor	16LF1823
     2                           	opt	pw 120
     3                           	opt	plic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	dabs	1,0x7E,2
    36  0000                     
    37                           ; Version 2.05
    38                           ; Generated 20/12/2018 GMT
    39                           ; 
    40                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC16LF1823 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     	;# 
    72  0001                     	;# 
    73  0002                     	;# 
    74  0003                     	;# 
    75  0004                     	;# 
    76  0005                     	;# 
    77  0006                     	;# 
    78  0007                     	;# 
    79  0008                     	;# 
    80  0009                     	;# 
    81  000A                     	;# 
    82  000B                     	;# 
    83  000C                     	;# 
    84  000E                     	;# 
    85  0011                     	;# 
    86  0012                     	;# 
    87  0015                     	;# 
    88  0016                     	;# 
    89  0016                     	;# 
    90  0017                     	;# 
    91  0018                     	;# 
    92  0019                     	;# 
    93  001A                     	;# 
    94  001B                     	;# 
    95  001C                     	;# 
    96  001E                     	;# 
    97  001F                     	;# 
    98  008C                     	;# 
    99  008E                     	;# 
   100  0091                     	;# 
   101  0092                     	;# 
   102  0095                     	;# 
   103  0096                     	;# 
   104  0097                     	;# 
   105  0098                     	;# 
   106  0099                     	;# 
   107  009A                     	;# 
   108  009B                     	;# 
   109  009B                     	;# 
   110  009C                     	;# 
   111  009D                     	;# 
   112  009E                     	;# 
   113  010C                     	;# 
   114  010E                     	;# 
   115  0111                     	;# 
   116  0112                     	;# 
   117  0113                     	;# 
   118  0114                     	;# 
   119  0115                     	;# 
   120  0116                     	;# 
   121  0117                     	;# 
   122  0118                     	;# 
   123  0119                     	;# 
   124  011A                     	;# 
   125  011B                     	;# 
   126  011D                     	;# 
   127  011D                     	;# 
   128  018C                     	;# 
   129  018E                     	;# 
   130  0191                     	;# 
   131  0191                     	;# 
   132  0192                     	;# 
   133  0193                     	;# 
   134  0193                     	;# 
   135  0193                     	;# 
   136  0194                     	;# 
   137  0195                     	;# 
   138  0196                     	;# 
   139  0199                     	;# 
   140  019A                     	;# 
   141  019B                     	;# 
   142  019B                     	;# 
   143  019B                     	;# 
   144  019B                     	;# 
   145  019C                     	;# 
   146  019C                     	;# 
   147  019D                     	;# 
   148  019E                     	;# 
   149  019F                     	;# 
   150  020C                     	;# 
   151  020E                     	;# 
   152  0211                     	;# 
   153  0211                     	;# 
   154  0212                     	;# 
   155  0212                     	;# 
   156  0213                     	;# 
   157  0213                     	;# 
   158  0214                     	;# 
   159  0214                     	;# 
   160  0215                     	;# 
   161  0215                     	;# 
   162  0215                     	;# 
   163  0216                     	;# 
   164  0216                     	;# 
   165  0217                     	;# 
   166  0217                     	;# 
   167  0291                     	;# 
   168  0291                     	;# 
   169  0292                     	;# 
   170  0293                     	;# 
   171  0294                     	;# 
   172  0295                     	;# 
   173  0295                     	;# 
   174  0296                     	;# 
   175  0391                     	;# 
   176  0392                     	;# 
   177  0393                     	;# 
   178  039A                     	;# 
   179  039C                     	;# 
   180  039D                     	;# 
   181  039E                     	;# 
   182  039F                     	;# 
   183  0FE4                     	;# 
   184  0FE5                     	;# 
   185  0FE6                     	;# 
   186  0FE7                     	;# 
   187  0FE8                     	;# 
   188  0FE9                     	;# 
   189  0FEA                     	;# 
   190  0FEB                     	;# 
   191  0FED                     	;# 
   192  0FEE                     	;# 
   193  0FEF                     	;# 
   194  0000                     	;# 
   195  0001                     	;# 
   196  0002                     	;# 
   197  0003                     	;# 
   198  0004                     	;# 
   199  0005                     	;# 
   200  0006                     	;# 
   201  0007                     	;# 
   202  0008                     	;# 
   203  0009                     	;# 
   204  000A                     	;# 
   205  000B                     	;# 
   206  000C                     	;# 
   207  000E                     	;# 
   208  0011                     	;# 
   209  0012                     	;# 
   210  0015                     	;# 
   211  0016                     	;# 
   212  0016                     	;# 
   213  0017                     	;# 
   214  0018                     	;# 
   215  0019                     	;# 
   216  001A                     	;# 
   217  001B                     	;# 
   218  001C                     	;# 
   219  001E                     	;# 
   220  001F                     	;# 
   221  008C                     	;# 
   222  008E                     	;# 
   223  0091                     	;# 
   224  0092                     	;# 
   225  0095                     	;# 
   226  0096                     	;# 
   227  0097                     	;# 
   228  0098                     	;# 
   229  0099                     	;# 
   230  009A                     	;# 
   231  009B                     	;# 
   232  009B                     	;# 
   233  009C                     	;# 
   234  009D                     	;# 
   235  009E                     	;# 
   236  010C                     	;# 
   237  010E                     	;# 
   238  0111                     	;# 
   239  0112                     	;# 
   240  0113                     	;# 
   241  0114                     	;# 
   242  0115                     	;# 
   243  0116                     	;# 
   244  0117                     	;# 
   245  0118                     	;# 
   246  0119                     	;# 
   247  011A                     	;# 
   248  011B                     	;# 
   249  011D                     	;# 
   250  011D                     	;# 
   251  018C                     	;# 
   252  018E                     	;# 
   253  0191                     	;# 
   254  0191                     	;# 
   255  0192                     	;# 
   256  0193                     	;# 
   257  0193                     	;# 
   258  0193                     	;# 
   259  0194                     	;# 
   260  0195                     	;# 
   261  0196                     	;# 
   262  0199                     	;# 
   263  019A                     	;# 
   264  019B                     	;# 
   265  019B                     	;# 
   266  019B                     	;# 
   267  019B                     	;# 
   268  019C                     	;# 
   269  019C                     	;# 
   270  019D                     	;# 
   271  019E                     	;# 
   272  019F                     	;# 
   273  020C                     	;# 
   274  020E                     	;# 
   275  0211                     	;# 
   276  0211                     	;# 
   277  0212                     	;# 
   278  0212                     	;# 
   279  0213                     	;# 
   280  0213                     	;# 
   281  0214                     	;# 
   282  0214                     	;# 
   283  0215                     	;# 
   284  0215                     	;# 
   285  0215                     	;# 
   286  0216                     	;# 
   287  0216                     	;# 
   288  0217                     	;# 
   289  0217                     	;# 
   290  0291                     	;# 
   291  0291                     	;# 
   292  0292                     	;# 
   293  0293                     	;# 
   294  0294                     	;# 
   295  0295                     	;# 
   296  0295                     	;# 
   297  0296                     	;# 
   298  0391                     	;# 
   299  0392                     	;# 
   300  0393                     	;# 
   301  039A                     	;# 
   302  039C                     	;# 
   303  039D                     	;# 
   304  039E                     	;# 
   305  039F                     	;# 
   306  0FE4                     	;# 
   307  0FE5                     	;# 
   308  0FE6                     	;# 
   309  0FE7                     	;# 
   310  0FE8                     	;# 
   311  0FE9                     	;# 
   312  0FEA                     	;# 
   313  0FEB                     	;# 
   314  0FED                     	;# 
   315  0FEE                     	;# 
   316  0FEF                     	;# 
   317  0000                     	;# 
   318  0001                     	;# 
   319  0002                     	;# 
   320  0003                     	;# 
   321  0004                     	;# 
   322  0005                     	;# 
   323  0006                     	;# 
   324  0007                     	;# 
   325  0008                     	;# 
   326  0009                     	;# 
   327  000A                     	;# 
   328  000B                     	;# 
   329  000C                     	;# 
   330  000E                     	;# 
   331  0011                     	;# 
   332  0012                     	;# 
   333  0015                     	;# 
   334  0016                     	;# 
   335  0016                     	;# 
   336  0017                     	;# 
   337  0018                     	;# 
   338  0019                     	;# 
   339  001A                     	;# 
   340  001B                     	;# 
   341  001C                     	;# 
   342  001E                     	;# 
   343  001F                     	;# 
   344  008C                     	;# 
   345  008E                     	;# 
   346  0091                     	;# 
   347  0092                     	;# 
   348  0095                     	;# 
   349  0096                     	;# 
   350  0097                     	;# 
   351  0098                     	;# 
   352  0099                     	;# 
   353  009A                     	;# 
   354  009B                     	;# 
   355  009B                     	;# 
   356  009C                     	;# 
   357  009D                     	;# 
   358  009E                     	;# 
   359  010C                     	;# 
   360  010E                     	;# 
   361  0111                     	;# 
   362  0112                     	;# 
   363  0113                     	;# 
   364  0114                     	;# 
   365  0115                     	;# 
   366  0116                     	;# 
   367  0117                     	;# 
   368  0118                     	;# 
   369  0119                     	;# 
   370  011A                     	;# 
   371  011B                     	;# 
   372  011D                     	;# 
   373  011D                     	;# 
   374  018C                     	;# 
   375  018E                     	;# 
   376  0191                     	;# 
   377  0191                     	;# 
   378  0192                     	;# 
   379  0193                     	;# 
   380  0193                     	;# 
   381  0193                     	;# 
   382  0194                     	;# 
   383  0195                     	;# 
   384  0196                     	;# 
   385  0199                     	;# 
   386  019A                     	;# 
   387  019B                     	;# 
   388  019B                     	;# 
   389  019B                     	;# 
   390  019B                     	;# 
   391  019C                     	;# 
   392  019C                     	;# 
   393  019D                     	;# 
   394  019E                     	;# 
   395  019F                     	;# 
   396  020C                     	;# 
   397  020E                     	;# 
   398  0211                     	;# 
   399  0211                     	;# 
   400  0212                     	;# 
   401  0212                     	;# 
   402  0213                     	;# 
   403  0213                     	;# 
   404  0214                     	;# 
   405  0214                     	;# 
   406  0215                     	;# 
   407  0215                     	;# 
   408  0215                     	;# 
   409  0216                     	;# 
   410  0216                     	;# 
   411  0217                     	;# 
   412  0217                     	;# 
   413  0291                     	;# 
   414  0291                     	;# 
   415  0292                     	;# 
   416  0293                     	;# 
   417  0294                     	;# 
   418  0295                     	;# 
   419  0295                     	;# 
   420  0296                     	;# 
   421  0391                     	;# 
   422  0392                     	;# 
   423  0393                     	;# 
   424  039A                     	;# 
   425  039C                     	;# 
   426  039D                     	;# 
   427  039E                     	;# 
   428  039F                     	;# 
   429  0FE4                     	;# 
   430  0FE5                     	;# 
   431  0FE6                     	;# 
   432  0FE7                     	;# 
   433  0FE8                     	;# 
   434  0FE9                     	;# 
   435  0FEA                     	;# 
   436  0FEB                     	;# 
   437  0FED                     	;# 
   438  0FEE                     	;# 
   439  0FEF                     	;# 
   440  0000                     	;# 
   441  0001                     	;# 
   442  0002                     	;# 
   443  0003                     	;# 
   444  0004                     	;# 
   445  0005                     	;# 
   446  0006                     	;# 
   447  0007                     	;# 
   448  0008                     	;# 
   449  0009                     	;# 
   450  000A                     	;# 
   451  000B                     	;# 
   452  000C                     	;# 
   453  000E                     	;# 
   454  0011                     	;# 
   455  0012                     	;# 
   456  0015                     	;# 
   457  0016                     	;# 
   458  0016                     	;# 
   459  0017                     	;# 
   460  0018                     	;# 
   461  0019                     	;# 
   462  001A                     	;# 
   463  001B                     	;# 
   464  001C                     	;# 
   465  001E                     	;# 
   466  001F                     	;# 
   467  008C                     	;# 
   468  008E                     	;# 
   469  0091                     	;# 
   470  0092                     	;# 
   471  0095                     	;# 
   472  0096                     	;# 
   473  0097                     	;# 
   474  0098                     	;# 
   475  0099                     	;# 
   476  009A                     	;# 
   477  009B                     	;# 
   478  009B                     	;# 
   479  009C                     	;# 
   480  009D                     	;# 
   481  009E                     	;# 
   482  010C                     	;# 
   483  010E                     	;# 
   484  0111                     	;# 
   485  0112                     	;# 
   486  0113                     	;# 
   487  0114                     	;# 
   488  0115                     	;# 
   489  0116                     	;# 
   490  0117                     	;# 
   491  0118                     	;# 
   492  0119                     	;# 
   493  011A                     	;# 
   494  011B                     	;# 
   495  011D                     	;# 
   496  011D                     	;# 
   497  018C                     	;# 
   498  018E                     	;# 
   499  0191                     	;# 
   500  0191                     	;# 
   501  0192                     	;# 
   502  0193                     	;# 
   503  0193                     	;# 
   504  0193                     	;# 
   505  0194                     	;# 
   506  0195                     	;# 
   507  0196                     	;# 
   508  0199                     	;# 
   509  019A                     	;# 
   510  019B                     	;# 
   511  019B                     	;# 
   512  019B                     	;# 
   513  019B                     	;# 
   514  019C                     	;# 
   515  019C                     	;# 
   516  019D                     	;# 
   517  019E                     	;# 
   518  019F                     	;# 
   519  020C                     	;# 
   520  020E                     	;# 
   521  0211                     	;# 
   522  0211                     	;# 
   523  0212                     	;# 
   524  0212                     	;# 
   525  0213                     	;# 
   526  0213                     	;# 
   527  0214                     	;# 
   528  0214                     	;# 
   529  0215                     	;# 
   530  0215                     	;# 
   531  0215                     	;# 
   532  0216                     	;# 
   533  0216                     	;# 
   534  0217                     	;# 
   535  0217                     	;# 
   536  0291                     	;# 
   537  0291                     	;# 
   538  0292                     	;# 
   539  0293                     	;# 
   540  0294                     	;# 
   541  0295                     	;# 
   542  0295                     	;# 
   543  0296                     	;# 
   544  0391                     	;# 
   545  0392                     	;# 
   546  0393                     	;# 
   547  039A                     	;# 
   548  039C                     	;# 
   549  039D                     	;# 
   550  039E                     	;# 
   551  039F                     	;# 
   552  0FE4                     	;# 
   553  0FE5                     	;# 
   554  0FE6                     	;# 
   555  0FE7                     	;# 
   556  0FE8                     	;# 
   557  0FE9                     	;# 
   558  0FEA                     	;# 
   559  0FEB                     	;# 
   560  0FED                     	;# 
   561  0FEE                     	;# 
   562  0FEF                     	;# 
   563  0000                     	;# 
   564  0001                     	;# 
   565  0002                     	;# 
   566  0003                     	;# 
   567  0004                     	;# 
   568  0005                     	;# 
   569  0006                     	;# 
   570  0007                     	;# 
   571  0008                     	;# 
   572  0009                     	;# 
   573  000A                     	;# 
   574  000B                     	;# 
   575  000C                     	;# 
   576  000E                     	;# 
   577  0011                     	;# 
   578  0012                     	;# 
   579  0015                     	;# 
   580  0016                     	;# 
   581  0016                     	;# 
   582  0017                     	;# 
   583  0018                     	;# 
   584  0019                     	;# 
   585  001A                     	;# 
   586  001B                     	;# 
   587  001C                     	;# 
   588  001E                     	;# 
   589  001F                     	;# 
   590  008C                     	;# 
   591  008E                     	;# 
   592  0091                     	;# 
   593  0092                     	;# 
   594  0095                     	;# 
   595  0096                     	;# 
   596  0097                     	;# 
   597  0098                     	;# 
   598  0099                     	;# 
   599  009A                     	;# 
   600  009B                     	;# 
   601  009B                     	;# 
   602  009C                     	;# 
   603  009D                     	;# 
   604  009E                     	;# 
   605  010C                     	;# 
   606  010E                     	;# 
   607  0111                     	;# 
   608  0112                     	;# 
   609  0113                     	;# 
   610  0114                     	;# 
   611  0115                     	;# 
   612  0116                     	;# 
   613  0117                     	;# 
   614  0118                     	;# 
   615  0119                     	;# 
   616  011A                     	;# 
   617  011B                     	;# 
   618  011D                     	;# 
   619  011D                     	;# 
   620  018C                     	;# 
   621  018E                     	;# 
   622  0191                     	;# 
   623  0191                     	;# 
   624  0192                     	;# 
   625  0193                     	;# 
   626  0193                     	;# 
   627  0193                     	;# 
   628  0194                     	;# 
   629  0195                     	;# 
   630  0196                     	;# 
   631  0199                     	;# 
   632  019A                     	;# 
   633  019B                     	;# 
   634  019B                     	;# 
   635  019B                     	;# 
   636  019B                     	;# 
   637  019C                     	;# 
   638  019C                     	;# 
   639  019D                     	;# 
   640  019E                     	;# 
   641  019F                     	;# 
   642  020C                     	;# 
   643  020E                     	;# 
   644  0211                     	;# 
   645  0211                     	;# 
   646  0212                     	;# 
   647  0212                     	;# 
   648  0213                     	;# 
   649  0213                     	;# 
   650  0214                     	;# 
   651  0214                     	;# 
   652  0215                     	;# 
   653  0215                     	;# 
   654  0215                     	;# 
   655  0216                     	;# 
   656  0216                     	;# 
   657  0217                     	;# 
   658  0217                     	;# 
   659  0291                     	;# 
   660  0291                     	;# 
   661  0292                     	;# 
   662  0293                     	;# 
   663  0294                     	;# 
   664  0295                     	;# 
   665  0295                     	;# 
   666  0296                     	;# 
   667  0391                     	;# 
   668  0392                     	;# 
   669  0393                     	;# 
   670  039A                     	;# 
   671  039C                     	;# 
   672  039D                     	;# 
   673  039E                     	;# 
   674  039F                     	;# 
   675  0FE4                     	;# 
   676  0FE5                     	;# 
   677  0FE6                     	;# 
   678  0FE7                     	;# 
   679  0FE8                     	;# 
   680  0FE9                     	;# 
   681  0FEA                     	;# 
   682  0FEB                     	;# 
   683  0FED                     	;# 
   684  0FEE                     	;# 
   685  0FEF                     	;# 
   686  0000                     	;# 
   687  0001                     	;# 
   688  0002                     	;# 
   689  0003                     	;# 
   690  0004                     	;# 
   691  0005                     	;# 
   692  0006                     	;# 
   693  0007                     	;# 
   694  0008                     	;# 
   695  0009                     	;# 
   696  000A                     	;# 
   697  000B                     	;# 
   698  000C                     	;# 
   699  000E                     	;# 
   700  0011                     	;# 
   701  0012                     	;# 
   702  0015                     	;# 
   703  0016                     	;# 
   704  0016                     	;# 
   705  0017                     	;# 
   706  0018                     	;# 
   707  0019                     	;# 
   708  001A                     	;# 
   709  001B                     	;# 
   710  001C                     	;# 
   711  001E                     	;# 
   712  001F                     	;# 
   713  008C                     	;# 
   714  008E                     	;# 
   715  0091                     	;# 
   716  0092                     	;# 
   717  0095                     	;# 
   718  0096                     	;# 
   719  0097                     	;# 
   720  0098                     	;# 
   721  0099                     	;# 
   722  009A                     	;# 
   723  009B                     	;# 
   724  009B                     	;# 
   725  009C                     	;# 
   726  009D                     	;# 
   727  009E                     	;# 
   728  010C                     	;# 
   729  010E                     	;# 
   730  0111                     	;# 
   731  0112                     	;# 
   732  0113                     	;# 
   733  0114                     	;# 
   734  0115                     	;# 
   735  0116                     	;# 
   736  0117                     	;# 
   737  0118                     	;# 
   738  0119                     	;# 
   739  011A                     	;# 
   740  011B                     	;# 
   741  011D                     	;# 
   742  011D                     	;# 
   743  018C                     	;# 
   744  018E                     	;# 
   745  0191                     	;# 
   746  0191                     	;# 
   747  0192                     	;# 
   748  0193                     	;# 
   749  0193                     	;# 
   750  0193                     	;# 
   751  0194                     	;# 
   752  0195                     	;# 
   753  0196                     	;# 
   754  0199                     	;# 
   755  019A                     	;# 
   756  019B                     	;# 
   757  019B                     	;# 
   758  019B                     	;# 
   759  019B                     	;# 
   760  019C                     	;# 
   761  019C                     	;# 
   762  019D                     	;# 
   763  019E                     	;# 
   764  019F                     	;# 
   765  020C                     	;# 
   766  020E                     	;# 
   767  0211                     	;# 
   768  0211                     	;# 
   769  0212                     	;# 
   770  0212                     	;# 
   771  0213                     	;# 
   772  0213                     	;# 
   773  0214                     	;# 
   774  0214                     	;# 
   775  0215                     	;# 
   776  0215                     	;# 
   777  0215                     	;# 
   778  0216                     	;# 
   779  0216                     	;# 
   780  0217                     	;# 
   781  0217                     	;# 
   782  0291                     	;# 
   783  0291                     	;# 
   784  0292                     	;# 
   785  0293                     	;# 
   786  0294                     	;# 
   787  0295                     	;# 
   788  0295                     	;# 
   789  0296                     	;# 
   790  0391                     	;# 
   791  0392                     	;# 
   792  0393                     	;# 
   793  039A                     	;# 
   794  039C                     	;# 
   795  039D                     	;# 
   796  039E                     	;# 
   797  039F                     	;# 
   798  0FE4                     	;# 
   799  0FE5                     	;# 
   800  0FE6                     	;# 
   801  0FE7                     	;# 
   802  0FE8                     	;# 
   803  0FE9                     	;# 
   804  0FEA                     	;# 
   805  0FEB                     	;# 
   806  0FED                     	;# 
   807  0FEE                     	;# 
   808  0FEF                     	;# 
   809  0000                     	;# 
   810  0001                     	;# 
   811  0002                     	;# 
   812  0003                     	;# 
   813  0004                     	;# 
   814  0005                     	;# 
   815  0006                     	;# 
   816  0007                     	;# 
   817  0008                     	;# 
   818  0009                     	;# 
   819  000A                     	;# 
   820  000B                     	;# 
   821  000C                     	;# 
   822  000E                     	;# 
   823  0011                     	;# 
   824  0012                     	;# 
   825  0015                     	;# 
   826  0016                     	;# 
   827  0016                     	;# 
   828  0017                     	;# 
   829  0018                     	;# 
   830  0019                     	;# 
   831  001A                     	;# 
   832  001B                     	;# 
   833  001C                     	;# 
   834  001E                     	;# 
   835  001F                     	;# 
   836  008C                     	;# 
   837  008E                     	;# 
   838  0091                     	;# 
   839  0092                     	;# 
   840  0095                     	;# 
   841  0096                     	;# 
   842  0097                     	;# 
   843  0098                     	;# 
   844  0099                     	;# 
   845  009A                     	;# 
   846  009B                     	;# 
   847  009B                     	;# 
   848  009C                     	;# 
   849  009D                     	;# 
   850  009E                     	;# 
   851  010C                     	;# 
   852  010E                     	;# 
   853  0111                     	;# 
   854  0112                     	;# 
   855  0113                     	;# 
   856  0114                     	;# 
   857  0115                     	;# 
   858  0116                     	;# 
   859  0117                     	;# 
   860  0118                     	;# 
   861  0119                     	;# 
   862  011A                     	;# 
   863  011B                     	;# 
   864  011D                     	;# 
   865  011D                     	;# 
   866  018C                     	;# 
   867  018E                     	;# 
   868  0191                     	;# 
   869  0191                     	;# 
   870  0192                     	;# 
   871  0193                     	;# 
   872  0193                     	;# 
   873  0193                     	;# 
   874  0194                     	;# 
   875  0195                     	;# 
   876  0196                     	;# 
   877  0199                     	;# 
   878  019A                     	;# 
   879  019B                     	;# 
   880  019B                     	;# 
   881  019B                     	;# 
   882  019B                     	;# 
   883  019C                     	;# 
   884  019C                     	;# 
   885  019D                     	;# 
   886  019E                     	;# 
   887  019F                     	;# 
   888  020C                     	;# 
   889  020E                     	;# 
   890  0211                     	;# 
   891  0211                     	;# 
   892  0212                     	;# 
   893  0212                     	;# 
   894  0213                     	;# 
   895  0213                     	;# 
   896  0214                     	;# 
   897  0214                     	;# 
   898  0215                     	;# 
   899  0215                     	;# 
   900  0215                     	;# 
   901  0216                     	;# 
   902  0216                     	;# 
   903  0217                     	;# 
   904  0217                     	;# 
   905  0291                     	;# 
   906  0291                     	;# 
   907  0292                     	;# 
   908  0293                     	;# 
   909  0294                     	;# 
   910  0295                     	;# 
   911  0295                     	;# 
   912  0296                     	;# 
   913  0391                     	;# 
   914  0392                     	;# 
   915  0393                     	;# 
   916  039A                     	;# 
   917  039C                     	;# 
   918  039D                     	;# 
   919  039E                     	;# 
   920  039F                     	;# 
   921  0FE4                     	;# 
   922  0FE5                     	;# 
   923  0FE6                     	;# 
   924  0FE7                     	;# 
   925  0FE8                     	;# 
   926  0FE9                     	;# 
   927  0FEA                     	;# 
   928  0FEB                     	;# 
   929  0FED                     	;# 
   930  0FEE                     	;# 
   931  0FEF                     	;# 
   932  0000                     	;# 
   933  0001                     	;# 
   934  0002                     	;# 
   935  0003                     	;# 
   936  0004                     	;# 
   937  0005                     	;# 
   938  0006                     	;# 
   939  0007                     	;# 
   940  0008                     	;# 
   941  0009                     	;# 
   942  000A                     	;# 
   943  000B                     	;# 
   944  000C                     	;# 
   945  000E                     	;# 
   946  0011                     	;# 
   947  0012                     	;# 
   948  0015                     	;# 
   949  0016                     	;# 
   950  0016                     	;# 
   951  0017                     	;# 
   952  0018                     	;# 
   953  0019                     	;# 
   954  001A                     	;# 
   955  001B                     	;# 
   956  001C                     	;# 
   957  001E                     	;# 
   958  001F                     	;# 
   959  008C                     	;# 
   960  008E                     	;# 
   961  0091                     	;# 
   962  0092                     	;# 
   963  0095                     	;# 
   964  0096                     	;# 
   965  0097                     	;# 
   966  0098                     	;# 
   967  0099                     	;# 
   968  009A                     	;# 
   969  009B                     	;# 
   970  009B                     	;# 
   971  009C                     	;# 
   972  009D                     	;# 
   973  009E                     	;# 
   974  010C                     	;# 
   975  010E                     	;# 
   976  0111                     	;# 
   977  0112                     	;# 
   978  0113                     	;# 
   979  0114                     	;# 
   980  0115                     	;# 
   981  0116                     	;# 
   982  0117                     	;# 
   983  0118                     	;# 
   984  0119                     	;# 
   985  011A                     	;# 
   986  011B                     	;# 
   987  011D                     	;# 
   988  011D                     	;# 
   989  018C                     	;# 
   990  018E                     	;# 
   991  0191                     	;# 
   992  0191                     	;# 
   993  0192                     	;# 
   994  0193                     	;# 
   995  0193                     	;# 
   996  0193                     	;# 
   997  0194                     	;# 
   998  0195                     	;# 
   999  0196                     	;# 
  1000  0199                     	;# 
  1001  019A                     	;# 
  1002  019B                     	;# 
  1003  019B                     	;# 
  1004  019B                     	;# 
  1005  019B                     	;# 
  1006  019C                     	;# 
  1007  019C                     	;# 
  1008  019D                     	;# 
  1009  019E                     	;# 
  1010  019F                     	;# 
  1011  020C                     	;# 
  1012  020E                     	;# 
  1013  0211                     	;# 
  1014  0211                     	;# 
  1015  0212                     	;# 
  1016  0212                     	;# 
  1017  0213                     	;# 
  1018  0213                     	;# 
  1019  0214                     	;# 
  1020  0214                     	;# 
  1021  0215                     	;# 
  1022  0215                     	;# 
  1023  0215                     	;# 
  1024  0216                     	;# 
  1025  0216                     	;# 
  1026  0217                     	;# 
  1027  0217                     	;# 
  1028  0291                     	;# 
  1029  0291                     	;# 
  1030  0292                     	;# 
  1031  0293                     	;# 
  1032  0294                     	;# 
  1033  0295                     	;# 
  1034  0295                     	;# 
  1035  0296                     	;# 
  1036  0391                     	;# 
  1037  0392                     	;# 
  1038  0393                     	;# 
  1039  039A                     	;# 
  1040  039C                     	;# 
  1041  039D                     	;# 
  1042  039E                     	;# 
  1043  039F                     	;# 
  1044  0FE4                     	;# 
  1045  0FE5                     	;# 
  1046  0FE6                     	;# 
  1047  0FE7                     	;# 
  1048  0FE8                     	;# 
  1049  0FE9                     	;# 
  1050  0FEA                     	;# 
  1051  0FEB                     	;# 
  1052  0FED                     	;# 
  1053  0FEE                     	;# 
  1054  0FEF                     	;# 
  1055  0000                     	;# 
  1056  0001                     	;# 
  1057  0002                     	;# 
  1058  0003                     	;# 
  1059  0004                     	;# 
  1060  0005                     	;# 
  1061  0006                     	;# 
  1062  0007                     	;# 
  1063  0008                     	;# 
  1064  0009                     	;# 
  1065  000A                     	;# 
  1066  000B                     	;# 
  1067  000C                     	;# 
  1068  000E                     	;# 
  1069  0011                     	;# 
  1070  0012                     	;# 
  1071  0015                     	;# 
  1072  0016                     	;# 
  1073  0016                     	;# 
  1074  0017                     	;# 
  1075  0018                     	;# 
  1076  0019                     	;# 
  1077  001A                     	;# 
  1078  001B                     	;# 
  1079  001C                     	;# 
  1080  001E                     	;# 
  1081  001F                     	;# 
  1082  008C                     	;# 
  1083  008E                     	;# 
  1084  0091                     	;# 
  1085  0092                     	;# 
  1086  0095                     	;# 
  1087  0096                     	;# 
  1088  0097                     	;# 
  1089  0098                     	;# 
  1090  0099                     	;# 
  1091  009A                     	;# 
  1092  009B                     	;# 
  1093  009B                     	;# 
  1094  009C                     	;# 
  1095  009D                     	;# 
  1096  009E                     	;# 
  1097  010C                     	;# 
  1098  010E                     	;# 
  1099  0111                     	;# 
  1100  0112                     	;# 
  1101  0113                     	;# 
  1102  0114                     	;# 
  1103  0115                     	;# 
  1104  0116                     	;# 
  1105  0117                     	;# 
  1106  0118                     	;# 
  1107  0119                     	;# 
  1108  011A                     	;# 
  1109  011B                     	;# 
  1110  011D                     	;# 
  1111  011D                     	;# 
  1112  018C                     	;# 
  1113  018E                     	;# 
  1114  0191                     	;# 
  1115  0191                     	;# 
  1116  0192                     	;# 
  1117  0193                     	;# 
  1118  0193                     	;# 
  1119  0193                     	;# 
  1120  0194                     	;# 
  1121  0195                     	;# 
  1122  0196                     	;# 
  1123  0199                     	;# 
  1124  019A                     	;# 
  1125  019B                     	;# 
  1126  019B                     	;# 
  1127  019B                     	;# 
  1128  019B                     	;# 
  1129  019C                     	;# 
  1130  019C                     	;# 
  1131  019D                     	;# 
  1132  019E                     	;# 
  1133  019F                     	;# 
  1134  020C                     	;# 
  1135  020E                     	;# 
  1136  0211                     	;# 
  1137  0211                     	;# 
  1138  0212                     	;# 
  1139  0212                     	;# 
  1140  0213                     	;# 
  1141  0213                     	;# 
  1142  0214                     	;# 
  1143  0214                     	;# 
  1144  0215                     	;# 
  1145  0215                     	;# 
  1146  0215                     	;# 
  1147  0216                     	;# 
  1148  0216                     	;# 
  1149  0217                     	;# 
  1150  0217                     	;# 
  1151  0291                     	;# 
  1152  0291                     	;# 
  1153  0292                     	;# 
  1154  0293                     	;# 
  1155  0294                     	;# 
  1156  0295                     	;# 
  1157  0295                     	;# 
  1158  0296                     	;# 
  1159  0391                     	;# 
  1160  0392                     	;# 
  1161  0393                     	;# 
  1162  039A                     	;# 
  1163  039C                     	;# 
  1164  039D                     	;# 
  1165  039E                     	;# 
  1166  039F                     	;# 
  1167  0FE4                     	;# 
  1168  0FE5                     	;# 
  1169  0FE6                     	;# 
  1170  0FE7                     	;# 
  1171  0FE8                     	;# 
  1172  0FE9                     	;# 
  1173  0FEA                     	;# 
  1174  0FEB                     	;# 
  1175  0FED                     	;# 
  1176  0FEE                     	;# 
  1177  0FEF                     	;# 
  1178  0000                     	;# 
  1179  0001                     	;# 
  1180  0002                     	;# 
  1181  0003                     	;# 
  1182  0004                     	;# 
  1183  0005                     	;# 
  1184  0006                     	;# 
  1185  0007                     	;# 
  1186  0008                     	;# 
  1187  0009                     	;# 
  1188  000A                     	;# 
  1189  000B                     	;# 
  1190  000C                     	;# 
  1191  000E                     	;# 
  1192  0011                     	;# 
  1193  0012                     	;# 
  1194  0015                     	;# 
  1195  0016                     	;# 
  1196  0016                     	;# 
  1197  0017                     	;# 
  1198  0018                     	;# 
  1199  0019                     	;# 
  1200  001A                     	;# 
  1201  001B                     	;# 
  1202  001C                     	;# 
  1203  001E                     	;# 
  1204  001F                     	;# 
  1205  008C                     	;# 
  1206  008E                     	;# 
  1207  0091                     	;# 
  1208  0092                     	;# 
  1209  0095                     	;# 
  1210  0096                     	;# 
  1211  0097                     	;# 
  1212  0098                     	;# 
  1213  0099                     	;# 
  1214  009A                     	;# 
  1215  009B                     	;# 
  1216  009B                     	;# 
  1217  009C                     	;# 
  1218  009D                     	;# 
  1219  009E                     	;# 
  1220  010C                     	;# 
  1221  010E                     	;# 
  1222  0111                     	;# 
  1223  0112                     	;# 
  1224  0113                     	;# 
  1225  0114                     	;# 
  1226  0115                     	;# 
  1227  0116                     	;# 
  1228  0117                     	;# 
  1229  0118                     	;# 
  1230  0119                     	;# 
  1231  011A                     	;# 
  1232  011B                     	;# 
  1233  011D                     	;# 
  1234  011D                     	;# 
  1235  018C                     	;# 
  1236  018E                     	;# 
  1237  0191                     	;# 
  1238  0191                     	;# 
  1239  0192                     	;# 
  1240  0193                     	;# 
  1241  0193                     	;# 
  1242  0193                     	;# 
  1243  0194                     	;# 
  1244  0195                     	;# 
  1245  0196                     	;# 
  1246  0199                     	;# 
  1247  019A                     	;# 
  1248  019B                     	;# 
  1249  019B                     	;# 
  1250  019B                     	;# 
  1251  019B                     	;# 
  1252  019C                     	;# 
  1253  019C                     	;# 
  1254  019D                     	;# 
  1255  019E                     	;# 
  1256  019F                     	;# 
  1257  020C                     	;# 
  1258  020E                     	;# 
  1259  0211                     	;# 
  1260  0211                     	;# 
  1261  0212                     	;# 
  1262  0212                     	;# 
  1263  0213                     	;# 
  1264  0213                     	;# 
  1265  0214                     	;# 
  1266  0214                     	;# 
  1267  0215                     	;# 
  1268  0215                     	;# 
  1269  0215                     	;# 
  1270  0216                     	;# 
  1271  0216                     	;# 
  1272  0217                     	;# 
  1273  0217                     	;# 
  1274  0291                     	;# 
  1275  0291                     	;# 
  1276  0292                     	;# 
  1277  0293                     	;# 
  1278  0294                     	;# 
  1279  0295                     	;# 
  1280  0295                     	;# 
  1281  0296                     	;# 
  1282  0391                     	;# 
  1283  0392                     	;# 
  1284  0393                     	;# 
  1285  039A                     	;# 
  1286  039C                     	;# 
  1287  039D                     	;# 
  1288  039E                     	;# 
  1289  039F                     	;# 
  1290  0FE4                     	;# 
  1291  0FE5                     	;# 
  1292  0FE6                     	;# 
  1293  0FE7                     	;# 
  1294  0FE8                     	;# 
  1295  0FE9                     	;# 
  1296  0FEA                     	;# 
  1297  0FEB                     	;# 
  1298  0FED                     	;# 
  1299  0FEE                     	;# 
  1300  0FEF                     	;# 
  1301                           
  1302                           	psect	stringtext1
  1303  0277                     __pstringtext1:	
  1304  0277                     _freqs:	
  1305  0277  3400               	retlw	0
  1306  0278  3401               	retlw	1
  1307  0279  3402               	retlw	2
  1308  027A  3403               	retlw	3
  1309  027B  3404               	retlw	4
  1310  027C  3405               	retlw	5
  1311  027D  3406               	retlw	6
  1312  027E  3407               	retlw	7
  1313  027F  3408               	retlw	8
  1314  0280  3409               	retlw	9
  1315  0281  340A               	retlw	10
  1316  0282                     __end_of_freqs:	
  1317                           
  1318                           	psect	stringtext2
  1319  028C                     __pstringtext2:	
  1320  028C                     _gains:	
  1321  028C  3404               	retlw	4
  1322  028D  3405               	retlw	5
  1323  028E  3407               	retlw	7
  1324  028F  3403               	retlw	3
  1325  0290  3423               	retlw	35
  1326  0291  3463               	retlw	99
  1327  0292  346B               	retlw	107
  1328  0293  347B               	retlw	123
  1329  0294                     __end_of_gains:	
  1330  000E                     _PORTC	set	14
  1331  0015                     _TMR0	set	21
  1332  005E                     _PEIE	set	94
  1333  005F                     _GIE	set	95
  1334  008C                     _TXIF	set	140
  1335  008D                     _RCIF	set	141
  1336  005D                     _TMR0IE	set	93
  1337  005A                     _TMR0IF	set	90
  1338  0065                     _RA5	set	101
  1339  009B                     _ADRESL	set	155
  1340  009C                     _ADRESH	set	156
  1341  009E                     _ADCON1	set	158
  1342  009D                     _ADCON0	set	157
  1343  0098                     _OSCTUNE	set	152
  1344  009A                     _OSCSTAT	set	154
  1345  0099                     _OSCCON	set	153
  1346  0095                     _OPTION_REGbits	set	149
  1347  008C                     _TRISA	set	140
  1348  008E                     _TRISC	set	142
  1349  04E9                     _ADGO	set	1257
  1350  048D                     _RCIE	set	1165
  1351  04AD                     _TMR0CS	set	1197
  1352  04AB                     _PSA	set	1195
  1353  04A8                     _PS0	set	1192
  1354  04A9                     _PS1	set	1193
  1355  04AA                     _PS2	set	1194
  1356  048C                     _TXIE	set	1164
  1357  011D                     _APFCON	set	285
  1358  010E                     _LATC	set	270
  1359  010C                     _LATA	set	268
  1360  08EA                     _TXCKSEL	set	2282
  1361  08EF                     _RXDTSEL	set	2287
  1362  019B                     _SPBRGL	set	411
  1363  019C                     _SPBRGH	set	412
  1364  019A                     _TXREG	set	410
  1365  0199                     _RCREG	set	409
  1366  018E                     _ANSELC	set	398
  1367  018C                     _ANSELA	set	396
  1368  0CF5                     _TXEN	set	3317
  1369  0CEF                     _SPEN	set	3311
  1370  0CF4                     _SYNC	set	3316
  1371  0CFB                     _BRG16	set	3323
  1372  0CF2                     _BRGH	set	3314
  1373  0CEC                     _CREN	set	3308
  1374  0CE9                     _OERR	set	3305
  1375  0CFC                     _SCKP	set	3324
  1376  020E                     _WPUC	set	526
  1377  020C                     _WPUA	set	524
  1378  039A                     _CLKRCON	set	922
  1379                           
  1380                           ; #config settings
  1381  0000                     
  1382                           	psect	cinit
  1383  0049                     start_initialization:	
  1384  0049                     __initialization:	
  1385  0049  3020               	movlw	low __pbssBANK0
  1386                           
  1387                           ; Clear objects allocated to COMMON
  1388  004A  01F8               	clrf	__pbssCOMMON& (0+127)
  1389  004B  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  1390  004C  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  1391  004D  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  1392                           
  1393                           ; Clear objects allocated to BANK0
  1394  004E  0084               	movwf	4
  1395  004F  3000               	movlw	high __pbssBANK0
  1396  0050  0085               	movwf	5
  1397  0051  3028               	movlw	40
  1398  0052  229B               	fcall	clear_ram0
  1399  0053                     end_of_initialization:	
  1400                           ;End of C runtime variable initialization code
  1401                           
  1402  0053                     __end_of__initialization:	
  1403  0053  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  1404  0054  0020               	movlb	0
  1405  0055  2983               	ljmp	l2097	;jump to C main() function
  1406                           
  1407                           	psect	bssCOMMON
  1408  0078                     __pbssCOMMON:	
  1409  0078                     _USART_rx_flag:	
  1410  0078                     	ds	1
  1411  0079                     _USART_tx_flag:	
  1412  0079                     	ds	1
  1413  007A                     _USART_tx_length:	
  1414  007A                     	ds	1
  1415  007B                     _USART_tx_index:	
  1416  007B                     	ds	1
  1417                           
  1418                           	psect	bssBANK0
  1419  0020                     __pbssBANK0:	
  1420  0020                     _USART_tx_data:	
  1421  0020                     	ds	15
  1422  002F                     _USART_rx_data:	
  1423  002F                     	ds	10
  1424  0039                     _TIMER0_timeout:	
  1425  0039                     	ds	2
  1426  003B                     _mess_rec_size:	
  1427  003B                     	ds	1
  1428  003C                     _USART_rx_index:	
  1429  003C                     	ds	1
  1430  003D                     _TIMER0_flag:	
  1431  003D                     	ds	1
  1432  003E                     _mess_rec:	
  1433  003E                     	ds	10
  1434                           
  1435                           	psect	clrtext
  1436  029B                     clear_ram0:	
  1437                           ;	Called with FSR0 containing the base address, and
  1438                           ;	WREG with the size to clear
  1439                           
  1440  029B  0064               	clrwdt	;clear the watchdog before getting into this loop
  1441  029C                     clrloop0:	
  1442  029C  0180               	clrf	0	;clear RAM location pointed to by FSR
  1443  029D  3101               	addfsr 0,1
  1444  029E  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1445  029F  2A9C               	goto	clrloop0	;have we reached the end yet?
  1446  02A0  3400               	retlw	0	;all done for this memory range, return
  1447                           
  1448                           	psect	cstackCOMMON
  1449  0070                     __pcstackCOMMON:	
  1450  0070                     ?_OSCILLATOR_Initialize:	
  1451  0070                     ?_setup_TMR0:	
  1452                           ; 1 bytes @ 0x0
  1453                           
  1454  0070                     ?_start_TX_USART_ISR:	
  1455                           ; 1 bytes @ 0x0
  1456                           
  1457  0070                     ?_start_RX_USART_ISR:	
  1458                           ; 1 bytes @ 0x0
  1459                           
  1460  0070                     ?_start_RCM:	
  1461                           ; 1 bytes @ 0x0
  1462                           
  1463  0070                     ?_setup_ADC:	
  1464                           ; 1 bytes @ 0x0
  1465                           
  1466  0070                     ?_sweep:	
  1467                           ; 1 bytes @ 0x0
  1468                           
  1469  0070                     ?_stop_TMR0_ISR:	
  1470                           ; 1 bytes @ 0x0
  1471                           
  1472  0070                     ??_stop_TMR0_ISR:	
  1473                           ; 1 bytes @ 0x0
  1474                           
  1475  0070                     ?_start_TMR0_ISR:	
  1476                           ; 1 bytes @ 0x0
  1477                           
  1478  0070                     ??_start_TMR0_ISR:	
  1479                           ; 1 bytes @ 0x0
  1480                           
  1481  0070                     ?_PIN_MANAGER_Initialize:	
  1482                           ; 1 bytes @ 0x0
  1483                           
  1484  0070                     ?_SYSTEM_Initialize:	
  1485                           ; 1 bytes @ 0x0
  1486                           
  1487  0070                     ?_USARTX_change_pol:	
  1488                           ; 1 bytes @ 0x0
  1489                           
  1490  0070                     ?_main:	
  1491                           ; 1 bytes @ 0x0
  1492                           
  1493  0070                     ?_isr:	
  1494                           ; 1 bytes @ 0x0
  1495                           
  1496  0070                     ?_close_RX_USART:	
  1497                           ; 1 bytes @ 0x0
  1498                           
  1499  0070                     ?i1_start_RX_USART_ISR:	
  1500                           ; 1 bytes @ 0x0
  1501                           
  1502  0070                     ??i1_start_RX_USART_ISR:	
  1503                           ; 1 bytes @ 0x0
  1504                           
  1505  0070                     start_TMR0_ISR@val:	
  1506                           ; 1 bytes @ 0x0
  1507                           
  1508                           
  1509                           ; 1 bytes @ 0x0
  1510  0070                     	ds	1
  1511  0071                     ??_OSCILLATOR_Initialize:	
  1512  0071                     ??_setup_TMR0:	
  1513                           ; 1 bytes @ 0x1
  1514                           
  1515  0071                     ??_start_TX_USART_ISR:	
  1516                           ; 1 bytes @ 0x1
  1517                           
  1518  0071                     ??_start_RX_USART_ISR:	
  1519                           ; 1 bytes @ 0x1
  1520                           
  1521  0071                     ??_start_RCM:	
  1522                           ; 1 bytes @ 0x1
  1523                           
  1524  0071                     ??_setup_ADC:	
  1525                           ; 1 bytes @ 0x1
  1526                           
  1527  0071                     ?_calculate_checksum:	
  1528                           ; 1 bytes @ 0x1
  1529                           
  1530  0071                     ??_PIN_MANAGER_Initialize:	
  1531                           ; 1 bytes @ 0x1
  1532                           
  1533  0071                     ??_SYSTEM_Initialize:	
  1534                           ; 1 bytes @ 0x1
  1535                           
  1536  0071                     ??_USARTX_change_pol:	
  1537                           ; 1 bytes @ 0x1
  1538                           
  1539  0071                     ??_isr:	
  1540                           ; 1 bytes @ 0x1
  1541                           
  1542  0071                     ?_config:	
  1543                           ; 1 bytes @ 0x1
  1544                           
  1545  0071                     ?_setGain:	
  1546                           ; 1 bytes @ 0x1
  1547                           
  1548  0071                     ?_setFreq:	
  1549                           ; 1 bytes @ 0x1
  1550                           
  1551  0071                     ??_close_RX_USART:	
  1552                           ; 1 bytes @ 0x1
  1553                           
  1554  0071                     ?_lputs_ISR:	
  1555                           ; 1 bytes @ 0x1
  1556                           
  1557  0071                     ?_ADC_5:	
  1558                           ; 1 bytes @ 0x1
  1559                           
  1560  0071                     setGain@gain_index:	
  1561                           ; 2 bytes @ 0x1
  1562                           
  1563  0071                     setFreq@freq_index:	
  1564                           ; 1 bytes @ 0x1
  1565                           
  1566  0071                     lputs_ISR@length:	
  1567                           ; 1 bytes @ 0x1
  1568                           
  1569  0071                     calculate_checksum@num:	
  1570                           ; 1 bytes @ 0x1
  1571                           
  1572  0071                     config@conf:	
  1573                           ; 1 bytes @ 0x1
  1574                           
  1575                           
  1576                           ; 2 bytes @ 0x1
  1577  0071                     	ds	1
  1578  0072                     ??_calculate_checksum:	
  1579  0072                     ??_setGain:	
  1580                           ; 1 bytes @ 0x2
  1581                           
  1582  0072                     ??_setFreq:	
  1583                           ; 1 bytes @ 0x2
  1584                           
  1585  0072                     ??_lputs_ISR:	
  1586                           ; 1 bytes @ 0x2
  1587                           
  1588  0072                     setGain@aux:	
  1589                           ; 1 bytes @ 0x2
  1590                           
  1591  0072                     setFreq@aux:	
  1592                           ; 1 bytes @ 0x2
  1593                           
  1594                           
  1595                           ; 1 bytes @ 0x2
  1596  0072                     	ds	1
  1597  0073                     ??_ADC_5:	
  1598  0073                     ??_config:	
  1599                           ; 1 bytes @ 0x3
  1600                           
  1601  0073                     config@i:	
  1602                           ; 1 bytes @ 0x3
  1603                           
  1604  0073                     setGain@asic:	
  1605                           ; 1 bytes @ 0x3
  1606                           
  1607  0073                     setFreq@asic:	
  1608                           ; 1 bytes @ 0x3
  1609                           
  1610  0073                     lputs_ISR@i:	
  1611                           ; 1 bytes @ 0x3
  1612                           
  1613  0073                     calculate_checksum@check:	
  1614                           ; 1 bytes @ 0x3
  1615                           
  1616  0073                     ADC_5@ADC_value:	
  1617                           ; 1 bytes @ 0x3
  1618                           
  1619                           
  1620                           ; 2 bytes @ 0x3
  1621  0073                     	ds	1
  1622  0074                     config@out:	
  1623  0074                     lputs_ISR@data:	
  1624                           ; 1 bytes @ 0x4
  1625                           
  1626  0074                     calculate_checksum@data:	
  1627                           ; 1 bytes @ 0x4
  1628                           
  1629                           
  1630                           ; 1 bytes @ 0x4
  1631  0074                     	ds	1
  1632  0075                     ??_measure:	
  1633  0075                     calculate_checksum@i:	
  1634                           ; 1 bytes @ 0x5
  1635                           
  1636                           
  1637                           ; 1 bytes @ 0x5
  1638  0075                     	ds	2
  1639  0077                     ??_sweep:	
  1640  0077                     ??_main:	
  1641                           ; 1 bytes @ 0x7
  1642                           
  1643                           
  1644                           ; 1 bytes @ 0x7
  1645  0077                     	ds	1
  1646                           
  1647                           	psect	cstackBANK0
  1648  0048                     __pcstackBANK0:	
  1649  0048                     ?_measure:	
  1650  0048                     measure@Q:	
  1651                           ; 1 bytes @ 0x0
  1652                           
  1653                           
  1654                           ; 1 bytes @ 0x0
  1655  0048                     	ds	1
  1656  0049                     measure@asic:	
  1657                           
  1658                           ; 2 bytes @ 0x1
  1659  0049                     	ds	2
  1660  004B                     measure@offset:	
  1661                           
  1662                           ; 2 bytes @ 0x3
  1663  004B                     	ds	2
  1664  004D                     measure@value:	
  1665                           
  1666                           ; 2 bytes @ 0x5
  1667  004D                     	ds	2
  1668  004F                     measure@I:	
  1669                           
  1670                           ; 1 bytes @ 0x7
  1671  004F                     	ds	1
  1672  0050                     measure@aux2:	
  1673                           
  1674                           ; 2 bytes @ 0x8
  1675  0050                     	ds	2
  1676  0052                     measure@aux1:	
  1677                           
  1678                           ; 2 bytes @ 0xA
  1679  0052                     	ds	2
  1680  0054                     sweep@check:	
  1681                           
  1682                           ; 1 bytes @ 0xC
  1683  0054                     	ds	1
  1684  0055                     sweep@aux:	
  1685                           
  1686                           ; 7 bytes @ 0xD
  1687  0055                     	ds	7
  1688  005C                     sweep@freq_index:	
  1689                           
  1690                           ; 1 bytes @ 0x14
  1691  005C                     	ds	1
  1692  005D                     sweep@i:	
  1693                           
  1694                           ; 1 bytes @ 0x15
  1695  005D                     	ds	1
  1696  005E                     sweep@count:	
  1697                           
  1698                           ; 1 bytes @ 0x16
  1699  005E                     	ds	1
  1700  005F                     sweep@I:	
  1701                           
  1702                           ; 2 bytes @ 0x17
  1703  005F                     	ds	2
  1704  0061                     sweep@Q:	
  1705                           
  1706                           ; 2 bytes @ 0x19
  1707  0061                     	ds	2
  1708  0063                     sweep@gain_index:	
  1709                           
  1710                           ; 1 bytes @ 0x1B
  1711  0063                     	ds	1
  1712  0064                     sweep@asic:	
  1713                           
  1714                           ; 2 bytes @ 0x1C
  1715  0064                     	ds	2
  1716  0066                     sweep@ret:	
  1717                           
  1718                           ; 1 bytes @ 0x1E
  1719  0066                     	ds	1
  1720                           
  1721                           	psect	maintext
  1722  0183                     __pmaintext:	
  1723 ;;
  1724 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1725 ;;
  1726 ;; *************** function _main *****************
  1727 ;; Defined at:
  1728 ;;		line 30 in file "main.c"
  1729 ;; Parameters:    Size  Location     Type
  1730 ;;		None
  1731 ;; Auto vars:     Size  Location     Type
  1732 ;;  i               1    0        unsigned char 
  1733 ;; Return value:  Size  Location     Type
  1734 ;;                  1    wreg      void 
  1735 ;; Registers used:
  1736 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1737 ;; Tracked objects:
  1738 ;;		On entry : B1F/0
  1739 ;;		On exit  : 1F/0
  1740 ;;		Unchanged: 0/0
  1741 ;; Data sizes:     COMMON   BANK0   BANK1
  1742 ;;      Params:         0       0       0
  1743 ;;      Locals:         0       0       0
  1744 ;;      Temps:          1       0       0
  1745 ;;      Totals:         1       0       0
  1746 ;;Total ram usage:        1 bytes
  1747 ;; Hardware stack levels required when called:    5
  1748 ;; This function calls:
  1749 ;;		_SYSTEM_Initialize
  1750 ;;		_USARTX_change_pol
  1751 ;;		_setup_ADC
  1752 ;;		_setup_TMR0
  1753 ;;		_start_RCM
  1754 ;;		_start_RX_USART_ISR
  1755 ;;		_start_TX_USART_ISR
  1756 ;;		_sweep
  1757 ;; This function is called by:
  1758 ;;		Startup code after reset
  1759 ;; This function uses a non-reentrant model
  1760 ;;
  1761                           
  1762                           
  1763                           ;psect for function _main
  1764  0183                     _main:	
  1765  0183                     l2097:	
  1766                           ;incstack = 0
  1767                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1768                           
  1769                           
  1770                           ;main.c: 32: unsigned char i;;main.c: 34: SYSTEM_Initialize();
  1771  0183  22BD               	fcall	_SYSTEM_Initialize
  1772                           
  1773                           ;main.c: 36: USARTX_change_pol();
  1774  0184  22B7               	fcall	_USARTX_change_pol
  1775                           
  1776                           ;main.c: 38: setup_TMR0();
  1777  0185  2294               	fcall	_setup_TMR0
  1778                           
  1779                           ;main.c: 39: start_TX_USART_ISR();
  1780  0186  2268               	fcall	_start_TX_USART_ISR
  1781                           
  1782                           ;main.c: 40: start_RX_USART_ISR();
  1783  0187  2258               	fcall	_start_RX_USART_ISR
  1784                           
  1785                           ;main.c: 41: start_RCM();
  1786  0188  22B3               	fcall	_start_RCM
  1787                           
  1788                           ;main.c: 42: setup_ADC();
  1789  0189  22A7               	fcall	_setup_ADC
  1790                           
  1791                           ;main.c: 45: RA5 = 0;
  1792  018A  0020               	movlb	0	; select bank0
  1793  018B  128C               	bcf	12,5	;volatile
  1794                           
  1795                           ;main.c: 46: _delay((unsigned long)((150)*(500000/4000.0)));
  1796  018C  3019               	movlw	25
  1797  018D  00F7               	movwf	??_main
  1798  018E  3058               	movlw	88
  1799  018F                     u907:	
  1800  018F  0B89               	decfsz	9,f
  1801  0190  298F               	goto	u907
  1802  0191  0BF7               	decfsz	??_main,f
  1803  0192  298F               	goto	u907
  1804  0193  3200               	nop2
  1805                           
  1806                           ;main.c: 47: RA5 = 1;
  1807  0194  0020               	movlb	0	; select bank0
  1808  0195  168C               	bsf	12,5	;volatile
  1809  0196                     l121:	
  1810                           ;main.c: 119: while(1) {
  1811                           
  1812  0196  0064               	clrwdt	;# 
  1813                           
  1814                           ;main.c: 122: if (TIMER0_flag) {
  1815  0197  0020               	movlb	0	; select bank0
  1816  0198  083D               	movf	_TIMER0_flag,w	;volatile
  1817  0199  1903               	btfsc	3,2
  1818  019A  2996               	goto	l121
  1819                           
  1820                           ;main.c: 123: TIMER0_flag = 0;
  1821  019B  01BD               	clrf	_TIMER0_flag	;volatile
  1822                           
  1823                           ;main.c: 125: if (USART_rx_index > 10) {
  1824  019C  300B               	movlw	11
  1825  019D  023C               	subwf	_USART_rx_index,w	;volatile
  1826  019E  1C03               	skipc
  1827  019F  29A2               	goto	l2117
  1828                           
  1829                           ;main.c: 126: USART_rx_index = 0;
  1830  01A0  01BC               	clrf	_USART_rx_index	;volatile
  1831                           
  1832                           ;main.c: 127: continue;
  1833  01A1  2996               	goto	l121
  1834  01A2                     l2117:	
  1835                           
  1836                           ;main.c: 128: };main.c: 130: if(USART_rx_index == 0)
  1837  01A2  083C               	movf	_USART_rx_index,w	;volatile
  1838  01A3  1903               	btfsc	3,2
  1839  01A4  2996               	goto	l121
  1840                           
  1841                           ;main.c: 134: mess_rec_size = USART_rx_index;
  1842  01A5  083C               	movf	_USART_rx_index,w	;volatile
  1843  01A6  00BB               	movwf	_mess_rec_size	;volatile
  1844                           
  1845                           ;main.c: 135: USART_rx_index = 0;
  1846  01A7  01BC               	clrf	_USART_rx_index	;volatile
  1847                           
  1848                           ;main.c: 140: sweep();
  1849  01A8  20EF               	fcall	_sweep
  1850  01A9  2996               	goto	l121
  1851  01AA                     __end_of_main:	
  1852                           
  1853                           	psect	text1
  1854  00EF                     __ptext1:	
  1855 ;; *************** function _sweep *****************
  1856 ;; Defined at:
  1857 ;;		line 444 in file "comm.c"
  1858 ;; Parameters:    Size  Location     Type
  1859 ;;		None
  1860 ;; Auto vars:     Size  Location     Type
  1861 ;;  aux             7   13[BANK0 ] unsigned char [7]
  1862 ;;  asic            2   28[BANK0 ] struct .
  1863 ;;  Q               2   25[BANK0 ] short 
  1864 ;;  I               2   23[BANK0 ] short 
  1865 ;;  ret             1   30[BANK0 ] unsigned char 
  1866 ;;  gain_index      1   27[BANK0 ] unsigned char 
  1867 ;;  count           1   22[BANK0 ] unsigned char 
  1868 ;;  i               1   21[BANK0 ] unsigned char 
  1869 ;;  freq_index      1   20[BANK0 ] unsigned char 
  1870 ;;  check           1   12[BANK0 ] unsigned char 
  1871 ;; Return value:  Size  Location     Type
  1872 ;;                  1    wreg      void 
  1873 ;; Registers used:
  1874 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1875 ;; Tracked objects:
  1876 ;;		On entry : 1F/0
  1877 ;;		On exit  : 1F/0
  1878 ;;		Unchanged: 0/0
  1879 ;; Data sizes:     COMMON   BANK0   BANK1
  1880 ;;      Params:         0       0       0
  1881 ;;      Locals:         0      19       0
  1882 ;;      Temps:          0       0       0
  1883 ;;      Totals:         0      19       0
  1884 ;;Total ram usage:       19 bytes
  1885 ;; Hardware stack levels used:    1
  1886 ;; Hardware stack levels required when called:    4
  1887 ;; This function calls:
  1888 ;;		_calculate_checksum
  1889 ;;		_lputs_ISR
  1890 ;;		_measure
  1891 ;;		_setFreq
  1892 ;;		_setGain
  1893 ;; This function is called by:
  1894 ;;		_main
  1895 ;; This function uses a non-reentrant model
  1896 ;;
  1897                           
  1898                           
  1899                           ;psect for function _sweep
  1900  00EF                     _sweep:	
  1901  00EF  300A               	movlw	10
  1902                           
  1903                           ;comm.c: 446: unsigned char gain_index;;comm.c: 447: unsigned char freq_index;;comm.c: 4
      +                          48: unsigned char i, ret, count;;comm.c: 449: short I,Q;;comm.c: 450: unsigned char aux[
      +                          7], check;;comm.c: 453: BIO3 asic;;comm.c: 454: asic.datashort = 0;
  1904                           
  1905                           ;incstack = 0
  1906                           ; Regs used in _sweep: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1907  00F0  01E4               	clrf	sweep@asic
  1908  00F1  01E5               	clrf	sweep@asic+1
  1909                           
  1910                           ;comm.c: 465: freq_index = 10;
  1911  00F2  00DC               	movwf	sweep@freq_index
  1912  00F3  3064               	movlw	(low (sweep@asic| 0))& (0+255)
  1913                           
  1914                           ;comm.c: 466: gain_index = 0;
  1915  00F4  01E3               	clrf	sweep@gain_index
  1916  00F5  01F1               	clrf	setGain@gain_index
  1917  00F6  2154               	fcall	_setGain
  1918                           
  1919                           ;comm.c: 470: for (i = 0; i < 11; i++) {
  1920  00F7  0020               	movlb	0	; select bank0
  1921  00F8  01DD               	clrf	sweep@i
  1922  00F9                     l2031:	
  1923                           
  1924                           ;comm.c: 473: setFreq(&asic,freq_index);
  1925  00F9  085C               	movf	sweep@freq_index,w
  1926  00FA  00F1               	movwf	setFreq@freq_index
  1927  00FB  3064               	movlw	(low (sweep@asic| 0))& (0+255)
  1928  00FC  21AA               	fcall	_setFreq
  1929                           
  1930                           ;comm.c: 480: count = 0;
  1931  00FD  0020               	movlb	0	; select bank0
  1932  00FE  01DE               	clrf	sweep@count
  1933  00FF                     l2037:	
  1934                           
  1935                           ;comm.c: 485: ret = measure(&I,&Q,asic);
  1936  00FF  3061               	movlw	(low (sweep@Q| 0))& (0+255)
  1937  0100  00C8               	movwf	measure@Q
  1938  0101  0865               	movf	sweep@asic+1,w
  1939  0102  00CA               	movwf	measure@asic+1
  1940  0103  0864               	movf	sweep@asic,w
  1941  0104  00C9               	movwf	measure@asic
  1942  0105  305F               	movlw	(low (sweep@I| 0))& (0+255)
  1943  0106  2056               	fcall	_measure
  1944  0107  0020               	movlb	0	; select bank0
  1945  0108  00E6               	movwf	sweep@ret
  1946                           
  1947                           ;comm.c: 487: if (ret == 1) {
  1948  0109  0B66               	decfsz	sweep@ret,w
  1949  010A  2917               	goto	l2053
  1950                           
  1951                           ;comm.c: 489: if (count == 2) break;
  1952  010B  3002               	movlw	2
  1953  010C  065E               	xorwf	sweep@count,w
  1954  010D  1903               	btfsc	3,2
  1955  010E  292C               	goto	l2069
  1956                           
  1957                           ;comm.c: 490: count = ret;
  1958  010F  0866               	movf	sweep@ret,w
  1959  0110  00DE               	movwf	sweep@count
  1960                           
  1961                           ;comm.c: 493: if (gain_index < 7) {
  1962  0111  3007               	movlw	7
  1963  0112  0263               	subwf	sweep@gain_index,w
  1964  0113  1803               	skipnc
  1965  0114  292C               	goto	l2069
  1966                           
  1967                           ;comm.c: 497: gain_index++;
  1968  0115  0AE3               	incf	sweep@gain_index,f
  1969  0116  2924               	goto	l2065
  1970  0117                     l2053:	
  1971                           ;comm.c: 499: } else {
  1972                           
  1973                           ;comm.c: 498: setGain(&asic,gain_index);
  1974                           
  1975  0117  3002               	movlw	2
  1976  0118  0666               	xorwf	sweep@ret,w
  1977  0119  1D03               	btfss	3,2
  1978  011A  2928               	goto	l2067
  1979                           
  1980                           ;comm.c: 507: if (count == 1) break;
  1981  011B  0B5E               	decfsz	sweep@count,w
  1982  011C  291E               	goto	l2059
  1983  011D  292C               	goto	l2069
  1984  011E                     l2059:	
  1985                           
  1986                           ;comm.c: 508: count = ret;
  1987  011E  0866               	movf	sweep@ret,w
  1988  011F  00DE               	movwf	sweep@count
  1989                           
  1990                           ;comm.c: 510: if (gain_index > 0) {
  1991  0120  0863               	movf	sweep@gain_index,w
  1992  0121  1903               	btfsc	3,2
  1993  0122  292C               	goto	l2069
  1994                           
  1995                           ;comm.c: 511: gain_index--;
  1996  0123  03E3               	decf	sweep@gain_index,f
  1997  0124                     l2065:	
  1998                           
  1999                           ;comm.c: 512: setGain(&asic,gain_index);
  2000  0124  0863               	movf	sweep@gain_index,w
  2001  0125  00F1               	movwf	setGain@gain_index
  2002  0126  3064               	movlw	(low (sweep@asic| 0))& (0+255)
  2003  0127  2154               	fcall	_setGain
  2004  0128                     l2067:	
  2005                           ;comm.c: 513: } else {
  2006                           
  2007                           
  2008                           ;comm.c: 518: };comm.c: 520: } while (ret);
  2009  0128  0020               	movlb	0	; select bank0
  2010  0129  0866               	movf	sweep@ret,w
  2011  012A  1D03               	btfss	3,2
  2012  012B  28FF               	goto	l2037
  2013  012C                     l2069:	
  2014                           
  2015                           ;comm.c: 526: ret = (freq_index << 4) & 0xf0;
  2016  012C  0E5C               	swapf	sweep@freq_index,w
  2017  012D  39F0               	andlw	240
  2018  012E  00E6               	movwf	sweep@ret
  2019  012F  30F0               	movlw	240
  2020  0130  05E6               	andwf	sweep@ret,f
  2021                           
  2022                           ;comm.c: 527: ret |= (gain_index & 0xff);
  2023  0131  0863               	movf	sweep@gain_index,w
  2024  0132  04E6               	iorwf	sweep@ret,f
  2025                           
  2026                           ;comm.c: 529: aux[0] = 'f';
  2027  0133  3066               	movlw	102
  2028  0134  00D5               	movwf	sweep@aux
  2029                           
  2030                           ;comm.c: 530: aux[1] = (unsigned char)(I & 0xff);
  2031  0135  085F               	movf	sweep@I,w
  2032  0136  00D6               	movwf	sweep@aux+1
  2033                           
  2034                           ;comm.c: 531: aux[2] = (unsigned char)((I >> 8) & 0xff);
  2035  0137  0860               	movf	sweep@I+1,w
  2036  0138  00D7               	movwf	sweep@aux+2
  2037                           
  2038                           ;comm.c: 532: aux[3] = (unsigned char)(Q & 0xff);
  2039  0139  0861               	movf	sweep@Q,w
  2040  013A  00D8               	movwf	sweep@aux+3
  2041                           
  2042                           ;comm.c: 533: aux[4] = (unsigned char)((Q >> 8) & 0xff);
  2043  013B  0862               	movf	sweep@Q+1,w
  2044  013C  00D9               	movwf	sweep@aux+4
  2045                           
  2046                           ;comm.c: 534: aux[5] = ret;
  2047  013D  0866               	movf	sweep@ret,w
  2048  013E  00DA               	movwf	sweep@aux+5
  2049                           
  2050                           ;comm.c: 536: check = calculate_checksum(aux,6);
  2051  013F  3006               	movlw	6
  2052  0140  00F1               	movwf	calculate_checksum@num
  2053  0141  3055               	movlw	(low (sweep@aux| 0))& (0+255)
  2054  0142  2235               	fcall	_calculate_checksum
  2055  0143  00D4               	movwf	sweep@check
  2056                           
  2057                           ;comm.c: 537: aux[6] = check;
  2058  0144  00DB               	movwf	sweep@aux+6
  2059                           
  2060                           ;comm.c: 540: { ADCON0 = 0b00100100;};
  2061  0145  3024               	movlw	36
  2062  0146  0021               	movlb	1	; select bank1
  2063  0147  009D               	movwf	29	;volatile
  2064                           
  2065                           ;comm.c: 542: lputs_ISR(aux,7);
  2066  0148  3007               	movlw	7
  2067  0149  00F1               	movwf	lputs_ISR@length
  2068  014A  3055               	movlw	(low (sweep@aux| 0))& (0+255)
  2069  014B  21E9               	fcall	_lputs_ISR
  2070                           
  2071                           ;comm.c: 552: freq_index--;
  2072  014C  0020               	movlb	0	; select bank0
  2073  014D  300B               	movlw	11
  2074  014E  03DC               	decf	sweep@freq_index,f
  2075  014F  0ADD               	incf	sweep@i,f
  2076  0150  025D               	subwf	sweep@i,w
  2077  0151  1803               	btfsc	3,0
  2078  0152  0008               	return
  2079  0153  28F9               	goto	l2031
  2080  0154                     __end_of_sweep:	
  2081                           
  2082                           	psect	text2
  2083  0154                     __ptext2:	
  2084 ;; *************** function _setGain *****************
  2085 ;; Defined at:
  2086 ;;		line 161 in file "bio3.c"
  2087 ;; Parameters:    Size  Location     Type
  2088 ;;  asic            1    wreg     PTR struct .
  2089 ;;		 -> sweep@asic(2), 
  2090 ;;  gain_index      1    1[COMMON] unsigned char 
  2091 ;; Auto vars:     Size  Location     Type
  2092 ;;  asic            1    3[COMMON] PTR struct .
  2093 ;;		 -> sweep@asic(2), 
  2094 ;;  aux             1    2[COMMON] struct .
  2095 ;; Return value:  Size  Location     Type
  2096 ;;                  1    wreg      void 
  2097 ;; Registers used:
  2098 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, pclath
  2099 ;; Tracked objects:
  2100 ;;		On entry : 1F/0
  2101 ;;		On exit  : 0/0
  2102 ;;		Unchanged: 0/0
  2103 ;; Data sizes:     COMMON   BANK0   BANK1
  2104 ;;      Params:         1       0       0
  2105 ;;      Locals:         2       0       0
  2106 ;;      Temps:          0       0       0
  2107 ;;      Totals:         3       0       0
  2108 ;;Total ram usage:        3 bytes
  2109 ;; Hardware stack levels used:    1
  2110 ;; Hardware stack levels required when called:    2
  2111 ;; This function calls:
  2112 ;;		Nothing
  2113 ;; This function is called by:
  2114 ;;		_sweep
  2115 ;; This function uses a non-reentrant model
  2116 ;;
  2117                           
  2118                           
  2119                           ;psect for function _setGain
  2120  0154                     _setGain:	
  2121                           
  2122                           ;incstack = 0
  2123                           ; Regs used in _setGain: [wreg-fsr1h+pclath]
  2124                           ;setGain@asic stored from wreg
  2125  0154  00F3               	movwf	setGain@asic
  2126                           
  2127                           ;bio3.c: 163: RADIO_gain aux;;bio3.c: 164: aux.data = gains[gain_index];
  2128  0155  0871               	movf	setGain@gain_index,w
  2129  0156  3E8C               	addlw	low (_gains| (0+32768))
  2130  0157  0084               	movwf	4
  2131  0158  3082               	movlw	high (_gains| (0+32768))
  2132  0159  1803               	skipnc
  2133  015A  3E01               	addlw	1
  2134  015B  0085               	movwf	5
  2135  015C  0800               	movf	0,w	;code access
  2136  015D  00F2               	movwf	setGain@aux
  2137                           
  2138                           ;bio3.c: 166: asic->data_bits.GD0 = aux.data_bits.GD0;
  2139  015E  0873               	movf	setGain@asic,w
  2140  015F  0086               	movwf	6
  2141  0160  0187               	clrf	7
  2142  0161  1101               	bcf	1,2
  2143  0162  1872               	btfsc	setGain@aux,0
  2144  0163  1501               	bsf	1,2
  2145                           
  2146                           ;bio3.c: 167: asic->data_bits.GD1 = aux.data_bits.GD1;
  2147  0164  0873               	movf	setGain@asic,w
  2148  0165  0086               	movwf	6
  2149  0166  1181               	bcf	1,3
  2150  0167  18F2               	btfsc	setGain@aux,1
  2151  0168  1581               	bsf	1,3
  2152                           
  2153                           ;bio3.c: 168: asic->data_bits.GD2 = aux.data_bits.GD2;
  2154  0169  0873               	movf	setGain@asic,w
  2155  016A  0086               	movwf	6
  2156  016B  1201               	bcf	1,4
  2157  016C  1972               	btfsc	setGain@aux,2
  2158  016D  1601               	bsf	1,4
  2159                           
  2160                           ;bio3.c: 169: asic->data_bits.GS0 = aux.data_bits.GS0;
  2161  016E  0873               	movf	setGain@asic,w
  2162  016F  0086               	movwf	6
  2163  0170  1381               	bcf	1,7
  2164  0171  19F2               	btfsc	setGain@aux,3
  2165  0172  1781               	bsf	1,7
  2166                           
  2167                           ;bio3.c: 170: asic->data_bits.GS1 = aux.data_bits.GS1;
  2168  0173  0A73               	incf	setGain@asic,w
  2169  0174  0086               	movwf	6
  2170  0175  1001               	bcf	1,0
  2171  0176  1A72               	btfsc	setGain@aux,4
  2172  0177  1401               	bsf	1,0
  2173                           
  2174                           ;bio3.c: 171: asic->data_bits.GS2 = aux.data_bits.GS2;
  2175  0178  0A73               	incf	setGain@asic,w
  2176  0179  0086               	movwf	6
  2177  017A  1081               	bcf	1,1
  2178  017B  1AF2               	btfsc	setGain@aux,5
  2179  017C  1481               	bsf	1,1
  2180                           
  2181                           ;bio3.c: 172: asic->data_bits.GS3 = aux.data_bits.GS3;
  2182  017D  0A73               	incf	setGain@asic,w
  2183  017E  0086               	movwf	6
  2184  017F  1101               	bcf	1,2
  2185  0180  1B72               	btfsc	setGain@aux,6
  2186  0181  1501               	bsf	1,2
  2187  0182  0008               	return
  2188  0183                     __end_of_setGain:	
  2189                           
  2190                           	psect	text3
  2191  01AA                     __ptext3:	
  2192 ;; *************** function _setFreq *****************
  2193 ;; Defined at:
  2194 ;;		line 175 in file "bio3.c"
  2195 ;; Parameters:    Size  Location     Type
  2196 ;;  asic            1    wreg     PTR struct .
  2197 ;;		 -> sweep@asic(2), 
  2198 ;;  freq_index      1    1[COMMON] unsigned char 
  2199 ;; Auto vars:     Size  Location     Type
  2200 ;;  asic            1    3[COMMON] PTR struct .
  2201 ;;		 -> sweep@asic(2), 
  2202 ;;  aux             1    2[COMMON] struct .
  2203 ;; Return value:  Size  Location     Type
  2204 ;;                  1    wreg      void 
  2205 ;; Registers used:
  2206 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, pclath
  2207 ;; Tracked objects:
  2208 ;;		On entry : 1F/0
  2209 ;;		On exit  : 0/0
  2210 ;;		Unchanged: 0/0
  2211 ;; Data sizes:     COMMON   BANK0   BANK1
  2212 ;;      Params:         1       0       0
  2213 ;;      Locals:         2       0       0
  2214 ;;      Temps:          0       0       0
  2215 ;;      Totals:         3       0       0
  2216 ;;Total ram usage:        3 bytes
  2217 ;; Hardware stack levels used:    1
  2218 ;; Hardware stack levels required when called:    2
  2219 ;; This function calls:
  2220 ;;		Nothing
  2221 ;; This function is called by:
  2222 ;;		_sweep
  2223 ;; This function uses a non-reentrant model
  2224 ;;
  2225                           
  2226                           
  2227                           ;psect for function _setFreq
  2228  01AA                     _setFreq:	
  2229                           
  2230                           ;incstack = 0
  2231                           ; Regs used in _setFreq: [wreg-fsr1h+pclath]
  2232                           ;setFreq@asic stored from wreg
  2233  01AA  00F3               	movwf	setFreq@asic
  2234                           
  2235                           ;bio3.c: 177: RADIO_freq aux;;bio3.c: 178: aux.data = freqs[freq_index];
  2236  01AB  0871               	movf	setFreq@freq_index,w
  2237  01AC  3E77               	addlw	low (_freqs| (0+32768))
  2238  01AD  0084               	movwf	4
  2239  01AE  3082               	movlw	high (_freqs| (0+32768))
  2240  01AF  1803               	skipnc
  2241  01B0  3E01               	addlw	1
  2242  01B1  0085               	movwf	5
  2243  01B2  0800               	movf	0,w	;code access
  2244  01B3  00F2               	movwf	setFreq@aux
  2245                           
  2246                           ;bio3.c: 180: asic->data_bits.F0 = aux.data_bits.F0;
  2247  01B4  0A73               	incf	setFreq@asic,w
  2248  01B5  0086               	movwf	6
  2249  01B6  0187               	clrf	7
  2250  01B7  1201               	bcf	1,4
  2251  01B8  1872               	btfsc	setFreq@aux,0
  2252  01B9  1601               	bsf	1,4
  2253                           
  2254                           ;bio3.c: 181: asic->data_bits.F1 = aux.data_bits.F1;
  2255  01BA  0A73               	incf	setFreq@asic,w
  2256  01BB  0086               	movwf	6
  2257  01BC  1281               	bcf	1,5
  2258  01BD  18F2               	btfsc	setFreq@aux,1
  2259  01BE  1681               	bsf	1,5
  2260                           
  2261                           ;bio3.c: 182: asic->data_bits.F2 = aux.data_bits.F2;
  2262  01BF  0A73               	incf	setFreq@asic,w
  2263  01C0  0086               	movwf	6
  2264  01C1  1301               	bcf	1,6
  2265  01C2  1972               	btfsc	setFreq@aux,2
  2266  01C3  1701               	bsf	1,6
  2267                           
  2268                           ;bio3.c: 183: asic->data_bits.F3 = aux.data_bits.F3;
  2269  01C4  0A73               	incf	setFreq@asic,w
  2270  01C5  0086               	movwf	6
  2271  01C6  1381               	bcf	1,7
  2272  01C7  19F2               	btfsc	setFreq@aux,3
  2273  01C8  1781               	bsf	1,7
  2274  01C9  0008               	return
  2275  01CA                     __end_of_setFreq:	
  2276                           
  2277                           	psect	text4
  2278  0056                     __ptext4:	
  2279 ;; *************** function _measure *****************
  2280 ;; Defined at:
  2281 ;;		line 561 in file "comm.c"
  2282 ;; Parameters:    Size  Location     Type
  2283 ;;  I               1    wreg     PTR short 
  2284 ;;		 -> sweep@I(2), 
  2285 ;;  Q               1    0[BANK0 ] PTR short 
  2286 ;;		 -> sweep@Q(2), 
  2287 ;;  asic            2    1[BANK0 ] struct .
  2288 ;; Auto vars:     Size  Location     Type
  2289 ;;  I               1    7[BANK0 ] PTR short 
  2290 ;;		 -> sweep@I(2), 
  2291 ;;  aux1            2   10[BANK0 ] short 
  2292 ;;  aux2            2    8[BANK0 ] short 
  2293 ;;  value           2    5[BANK0 ] unsigned short 
  2294 ;;  offset          2    3[BANK0 ] unsigned short 
  2295 ;; Return value:  Size  Location     Type
  2296 ;;                  1    wreg      unsigned char 
  2297 ;; Registers used:
  2298 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2299 ;; Tracked objects:
  2300 ;;		On entry : 1F/0
  2301 ;;		On exit  : 0/0
  2302 ;;		Unchanged: 0/0
  2303 ;; Data sizes:     COMMON   BANK0   BANK1
  2304 ;;      Params:         0       3       0
  2305 ;;      Locals:         0       9       0
  2306 ;;      Temps:          2       0       0
  2307 ;;      Totals:         2      12       0
  2308 ;;Total ram usage:       14 bytes
  2309 ;; Hardware stack levels used:    1
  2310 ;; Hardware stack levels required when called:    3
  2311 ;; This function calls:
  2312 ;;		_ADC_5
  2313 ;;		_config
  2314 ;; This function is called by:
  2315 ;;		_sweep
  2316 ;; This function uses a non-reentrant model
  2317 ;;
  2318                           
  2319                           
  2320                           ;psect for function _measure
  2321  0056                     _measure:	
  2322                           
  2323                           ;incstack = 0
  2324                           ; Regs used in _measure: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2325                           ;measure@I stored from wreg
  2326  0056  00CF               	movwf	measure@I
  2327                           
  2328                           ;comm.c: 566: unsigned short offset, value;;comm.c: 567: short aux1,aux2;;comm.c: 571: a
      +                          sic.data_bits.CE = 0;
  2329  0057  1349               	bcf	measure@asic,6
  2330                           
  2331                           ;comm.c: 572: config(asic);
  2332  0058  084A               	movf	measure@asic+1,w
  2333  0059  00F2               	movwf	config@conf+1
  2334  005A  0849               	movf	measure@asic,w
  2335  005B  00F1               	movwf	config@conf
  2336  005C  21CA               	fcall	_config
  2337                           
  2338                           ;comm.c: 573: _delay((unsigned long)((20)*(500000/4000.0)));
  2339  005D  3004               	movlw	4
  2340  005E  00F5               	movwf	??_measure
  2341  005F  303E               	movlw	62
  2342  0060                     u917:	
  2343  0060  0B89               	decfsz	9,f
  2344  0061  2860               	goto	u917
  2345  0062  0BF5               	decfsz	??_measure,f
  2346  0063  2860               	goto	u917
  2347                           
  2348                           ;comm.c: 575: offset = ADC_5();
  2349  0064  2221               	fcall	_ADC_5
  2350  0065  0872               	movf	?_ADC_5+1,w
  2351  0066  0020               	movlb	0	; select bank0
  2352  0067  00CC               	movwf	measure@offset+1
  2353  0068  0871               	movf	?_ADC_5,w
  2354  0069  00CB               	movwf	measure@offset
  2355                           
  2356                           ;comm.c: 578: asic.data_bits.CE = 1;
  2357  006A  1749               	bsf	measure@asic,6
  2358                           
  2359                           ;comm.c: 579: asic.data_bits.IQ = 0;
  2360  006B  11CA               	bcf	measure@asic+1,3
  2361                           
  2362                           ;comm.c: 581: config(asic);
  2363  006C  084A               	movf	measure@asic+1,w
  2364  006D  00F2               	movwf	config@conf+1
  2365  006E  0849               	movf	measure@asic,w
  2366  006F  00F1               	movwf	config@conf
  2367  0070  21CA               	fcall	_config
  2368                           
  2369                           ;comm.c: 582: _delay((unsigned long)((20)*(500000/4000.0)));
  2370  0071  3004               	movlw	4
  2371  0072  00F5               	movwf	??_measure
  2372  0073  303E               	movlw	62
  2373  0074                     u927:	
  2374  0074  0B89               	decfsz	9,f
  2375  0075  2874               	goto	u927
  2376  0076  0BF5               	decfsz	??_measure,f
  2377  0077  2874               	goto	u927
  2378                           
  2379                           ;comm.c: 584: value = ADC_5();
  2380  0078  2221               	fcall	_ADC_5
  2381  0079  0872               	movf	?_ADC_5+1,w
  2382  007A  0020               	movlb	0	; select bank0
  2383  007B  00CE               	movwf	measure@value+1
  2384  007C  0871               	movf	?_ADC_5,w
  2385  007D  00CD               	movwf	measure@value
  2386                           
  2387                           ;comm.c: 585: *I = (value - offset);
  2388  007E  084B               	movf	measure@offset,w
  2389  007F  024D               	subwf	measure@value,w
  2390  0080  00F5               	movwf	??_measure
  2391  0081  084C               	movf	measure@offset+1,w
  2392  0082  3B4E               	subwfb	measure@value+1,w
  2393  0083  00F6               	movwf	??_measure+1
  2394  0084  084F               	movf	measure@I,w
  2395  0085  0086               	movwf	6
  2396  0086  0187               	clrf	7
  2397  0087  0875               	movf	??_measure,w
  2398  0088  3FC0               	movwi [0]fsr1
  2399  0089  0876               	movf	??_measure+1,w
  2400  008A  3FC1               	movwi [1]fsr1
  2401                           
  2402                           ;comm.c: 586: aux1 = *I;
  2403  008B  084F               	movf	measure@I,w
  2404  008C  0086               	movwf	6
  2405  008D  3F40               	moviw [0]fsr1
  2406  008E  00D2               	movwf	measure@aux1
  2407  008F  3F41               	moviw [1]fsr1
  2408  0090  00D3               	movwf	measure@aux1+1
  2409                           
  2410                           ;comm.c: 588: if (aux1 < 0) {
  2411  0091  1FD3               	btfss	measure@aux1+1,7
  2412  0092  2898               	goto	l1703
  2413                           
  2414                           ;comm.c: 589: aux1 = -aux1;
  2415  0093  09D2               	comf	measure@aux1,f
  2416  0094  09D3               	comf	measure@aux1+1,f
  2417  0095  0AD2               	incf	measure@aux1,f
  2418  0096  1903               	skipnz
  2419  0097  0AD3               	incf	measure@aux1+1,f
  2420  0098                     l1703:	
  2421                           
  2422                           ;comm.c: 590: };comm.c: 595: asic.data_bits.IQ = 1;
  2423  0098  15CA               	bsf	measure@asic+1,3
  2424                           
  2425                           ;comm.c: 597: config(asic);
  2426  0099  084A               	movf	measure@asic+1,w
  2427  009A  00F2               	movwf	config@conf+1
  2428  009B  0849               	movf	measure@asic,w
  2429  009C  00F1               	movwf	config@conf
  2430  009D  21CA               	fcall	_config
  2431                           
  2432                           ;comm.c: 598: _delay((unsigned long)((20)*(500000/4000.0)));
  2433  009E  3004               	movlw	4
  2434  009F  00F5               	movwf	??_measure
  2435  00A0  303E               	movlw	62
  2436  00A1                     u937:	
  2437  00A1  0B89               	decfsz	9,f
  2438  00A2  28A1               	goto	u937
  2439  00A3  0BF5               	decfsz	??_measure,f
  2440  00A4  28A1               	goto	u937
  2441                           
  2442                           ;comm.c: 600: value = ADC_5();
  2443  00A5  2221               	fcall	_ADC_5
  2444  00A6  0872               	movf	?_ADC_5+1,w
  2445  00A7  0020               	movlb	0	; select bank0
  2446  00A8  00CE               	movwf	measure@value+1
  2447  00A9  0871               	movf	?_ADC_5,w
  2448  00AA  00CD               	movwf	measure@value
  2449                           
  2450                           ;comm.c: 601: *Q = (value - offset);
  2451  00AB  084B               	movf	measure@offset,w
  2452  00AC  024D               	subwf	measure@value,w
  2453  00AD  00F5               	movwf	??_measure
  2454  00AE  084C               	movf	measure@offset+1,w
  2455  00AF  3B4E               	subwfb	measure@value+1,w
  2456  00B0  00F6               	movwf	??_measure+1
  2457  00B1  0848               	movf	measure@Q,w
  2458  00B2  0086               	movwf	6
  2459  00B3  0187               	clrf	7
  2460  00B4  0875               	movf	??_measure,w
  2461  00B5  3FC0               	movwi [0]fsr1
  2462  00B6  0876               	movf	??_measure+1,w
  2463  00B7  3FC1               	movwi [1]fsr1
  2464                           
  2465                           ;comm.c: 602: aux2 = *Q;
  2466  00B8  0848               	movf	measure@Q,w
  2467  00B9  0086               	movwf	6
  2468  00BA  3F40               	moviw [0]fsr1
  2469  00BB  00D0               	movwf	measure@aux2
  2470  00BC  3F41               	moviw [1]fsr1
  2471  00BD  00D1               	movwf	measure@aux2+1
  2472                           
  2473                           ;comm.c: 604: if (aux2 < 0) {
  2474  00BE  1FD1               	btfss	measure@aux2+1,7
  2475  00BF  28C5               	goto	l1719
  2476                           
  2477                           ;comm.c: 605: aux2 = -aux2;
  2478  00C0  09D0               	comf	measure@aux2,f
  2479  00C1  09D1               	comf	measure@aux2+1,f
  2480  00C2  0AD0               	incf	measure@aux2,f
  2481  00C3  1903               	skipnz
  2482  00C4  0AD1               	incf	measure@aux2+1,f
  2483  00C5                     l1719:	
  2484                           
  2485                           ;comm.c: 606: };comm.c: 608: if (aux2 > aux1) {
  2486  00C5  0853               	movf	measure@aux1+1,w
  2487  00C6  3A80               	xorlw	128
  2488  00C7  00F5               	movwf	??_measure
  2489  00C8  0851               	movf	measure@aux2+1,w
  2490  00C9  3A80               	xorlw	128
  2491  00CA  0275               	subwf	??_measure,w
  2492  00CB  1D03               	skipz
  2493  00CC  28CF               	goto	u555
  2494  00CD  0850               	movf	measure@aux2,w
  2495  00CE  0252               	subwf	measure@aux1,w
  2496  00CF                     u555:	
  2497  00CF  1803               	skipnc
  2498  00D0  28D6               	goto	l416
  2499                           
  2500                           ;comm.c: 609: aux1 = aux2;
  2501  00D1  0020               	movlb	0	; select bank0
  2502  00D2  0851               	movf	measure@aux2+1,w
  2503  00D3  00D3               	movwf	measure@aux1+1
  2504  00D4  0850               	movf	measure@aux2,w
  2505  00D5  00D2               	movwf	measure@aux1
  2506  00D6                     l416:	
  2507                           
  2508                           ;comm.c: 610: };comm.c: 612: if (aux1 > 370) {
  2509  00D6  0020               	movlb	0	; select bank0
  2510  00D7  0853               	movf	measure@aux1+1,w
  2511  00D8  3A80               	xorlw	128
  2512  00D9  00F5               	movwf	??_measure
  2513  00DA  3081               	movlw	129
  2514  00DB  0275               	subwf	??_measure,w
  2515  00DC  1D03               	skipz
  2516  00DD  28E0               	goto	u565
  2517  00DE  3073               	movlw	115
  2518  00DF  0252               	subwf	measure@aux1,w
  2519  00E0                     u565:	
  2520  00E0  1803               	btfsc	3,0
  2521                           
  2522                           ;comm.c: 613: return 2;
  2523  00E1  3402               	retlw	2
  2524  00E2  0020               	movlb	0	; select bank0
  2525  00E3  0853               	movf	measure@aux1+1,w
  2526  00E4  3A80               	xorlw	128
  2527  00E5  00F5               	movwf	??_measure
  2528  00E6  3080               	movlw	128
  2529  00E7  0275               	subwf	??_measure,w
  2530  00E8  1D03               	skipz
  2531  00E9  28EC               	goto	u575
  2532  00EA  3056               	movlw	86
  2533  00EB  0252               	subwf	measure@aux1,w
  2534  00EC                     u575:	
  2535  00EC  1C03               	btfss	3,0
  2536                           
  2537                           ;comm.c: 615: return 1;
  2538  00ED  3401               	retlw	1
  2539                           
  2540                           ;comm.c: 616: };comm.c: 618: return 0;
  2541  00EE  3400               	retlw	0
  2542  00EF                     __end_of_measure:	
  2543                           
  2544                           	psect	text5
  2545  01CA                     __ptext5:	
  2546 ;; *************** function _config *****************
  2547 ;; Defined at:
  2548 ;;		line 131 in file "bio3.c"
  2549 ;; Parameters:    Size  Location     Type
  2550 ;;  conf            2    1[COMMON] struct .
  2551 ;; Auto vars:     Size  Location     Type
  2552 ;;  out             1    4[COMMON] unsigned char 
  2553 ;;  i               1    3[COMMON] unsigned char 
  2554 ;; Return value:  Size  Location     Type
  2555 ;;                  1    wreg      void 
  2556 ;; Registers used:
  2557 ;;		wreg, status,2, status,0
  2558 ;; Tracked objects:
  2559 ;;		On entry : 1F/0
  2560 ;;		On exit  : 1F/0
  2561 ;;		Unchanged: 0/0
  2562 ;; Data sizes:     COMMON   BANK0   BANK1
  2563 ;;      Params:         2       0       0
  2564 ;;      Locals:         2       0       0
  2565 ;;      Temps:          0       0       0
  2566 ;;      Totals:         4       0       0
  2567 ;;Total ram usage:        4 bytes
  2568 ;; Hardware stack levels used:    1
  2569 ;; Hardware stack levels required when called:    2
  2570 ;; This function calls:
  2571 ;;		Nothing
  2572 ;; This function is called by:
  2573 ;;		_measure
  2574 ;; This function uses a non-reentrant model
  2575 ;;
  2576                           
  2577                           
  2578                           ;psect for function _config
  2579  01CA                     _config:	
  2580                           
  2581                           ;bio3.c: 133: unsigned char i, out;;bio3.c: 135: out &= 0b11110111; PORTC = out;;
  2582                           
  2583                           ;incstack = 0
  2584                           ; Regs used in _config: [wreg+status,2+status,0]
  2585  01CA  11F4               	bcf	config@out,3
  2586  01CB  0874               	movf	config@out,w
  2587  01CC  008E               	movwf	14	;volatile
  2588                           
  2589                           ;bio3.c: 138: RA5 = 0;;
  2590                           
  2591                           ;bio3.c: 136: _delay((unsigned long)((5)*(500000/4000000.0)));
  2592  01CD  0020               	movlb	0	; select bank0
  2593  01CE  128C               	bcf	12,5	;volatile
  2594                           
  2595                           ;bio3.c: 141: RA5 = 1;;
  2596                           
  2597                           ;bio3.c: 139: _delay((unsigned long)((5)*(500000/4000000.0)));
  2598  01CF  0020               	movlb	0	; select bank0
  2599  01D0  168C               	bsf	12,5	;volatile
  2600                           
  2601                           ;bio3.c: 143: for(i = 0; i < 16; i++) {
  2602  01D1  01F3               	clrf	config@i
  2603  01D2                     l153:	
  2604                           
  2605                           ;bio3.c: 144: if (conf.datashort & 0x0001) {
  2606  01D2  1C71               	btfss	config@conf,0
  2607  01D3  29D6               	goto	l155
  2608                           
  2609                           ;bio3.c: 145: out |= 0b00000100; PORTC = out;;
  2610  01D4  1574               	bsf	config@out,2
  2611                           
  2612                           ;bio3.c: 146: } else {
  2613  01D5  29D7               	goto	l1559
  2614  01D6                     l155:	
  2615                           
  2616                           ;bio3.c: 147: out &= 0b11111011; PORTC = out;;
  2617  01D6  1174               	bcf	config@out,2
  2618  01D7                     l1559:	
  2619  01D7  0874               	movf	config@out,w
  2620  01D8  008E               	movwf	14	;volatile
  2621                           
  2622                           ;bio3.c: 148: };bio3.c: 149: conf.datashort >>= 1;
  2623  01D9  36F2               	lsrf	config@conf+1,f
  2624  01DA  0CF1               	rrf	config@conf,f
  2625                           
  2626                           ;bio3.c: 153: out |= 0b00001000; PORTC = out;;
  2627                           
  2628                           ;bio3.c: 151: _delay((unsigned long)((5)*(500000/4000000.0)));
  2629  01DB  15F4               	bsf	config@out,3
  2630  01DC  0874               	movf	config@out,w
  2631  01DD  0020               	movlb	0	; select bank0
  2632  01DE  008E               	movwf	14	;volatile
  2633                           
  2634                           ;bio3.c: 155: out &= 0b11110111; PORTC = out;;
  2635                           
  2636                           ;bio3.c: 154: _delay((unsigned long)((5)*(500000/4000000.0)));
  2637  01DF  11F4               	bcf	config@out,3
  2638  01E0  0874               	movf	config@out,w
  2639  01E1  0020               	movlb	0	; select bank0
  2640  01E2  008E               	movwf	14	;volatile
  2641  01E3  3010               	movlw	16
  2642  01E4  0AF3               	incf	config@i,f
  2643  01E5  0273               	subwf	config@i,w
  2644  01E6  1803               	btfsc	3,0
  2645  01E7  0008               	return
  2646  01E8  29D2               	goto	l153
  2647  01E9                     __end_of_config:	
  2648                           
  2649                           	psect	text6
  2650  0221                     __ptext6:	
  2651 ;; *************** function _ADC_5 *****************
  2652 ;; Defined at:
  2653 ;;		line 48 in file "ADC1823.c"
  2654 ;; Parameters:    Size  Location     Type
  2655 ;;		None
  2656 ;; Auto vars:     Size  Location     Type
  2657 ;;  ADC_value       2    3[COMMON] unsigned short 
  2658 ;; Return value:  Size  Location     Type
  2659 ;;                  2    1[COMMON] unsigned short 
  2660 ;; Registers used:
  2661 ;;		wreg
  2662 ;; Tracked objects:
  2663 ;;		On entry : 0/0
  2664 ;;		On exit  : 1F/1
  2665 ;;		Unchanged: 0/0
  2666 ;; Data sizes:     COMMON   BANK0   BANK1
  2667 ;;      Params:         2       0       0
  2668 ;;      Locals:         2       0       0
  2669 ;;      Temps:          0       0       0
  2670 ;;      Totals:         4       0       0
  2671 ;;Total ram usage:        4 bytes
  2672 ;; Hardware stack levels used:    1
  2673 ;; Hardware stack levels required when called:    2
  2674 ;; This function calls:
  2675 ;;		Nothing
  2676 ;; This function is called by:
  2677 ;;		_measure
  2678 ;; This function uses a non-reentrant model
  2679 ;;
  2680                           
  2681                           
  2682                           ;psect for function _ADC_5
  2683  0221                     _ADC_5:	
  2684                           
  2685                           ;ADC1823.c: 50: unsigned short ADC_value;;ADC1823.c: 52: { ADCON0 = 0b00010101;};
  2686                           
  2687                           ;incstack = 0
  2688                           ; Regs used in _ADC_5: [wreg]
  2689  0221  3015               	movlw	21
  2690  0222  0021               	movlb	1	; select bank1
  2691  0223  009D               	movwf	29	;volatile
  2692                           
  2693                           ;ADC1823.c: 53: __nop();
  2694  0224  0000               	nop
  2695                           
  2696                           ;ADC1823.c: 54: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  2697  0225  0021               	movlb	1	; select bank1
  2698  0226  149D               	bsf	29,1	;volatile
  2699  0227                     l450:	
  2700  0227  189D               	btfsc	29,1	;volatile
  2701  0228  2A27               	goto	l450
  2702  0229  081C               	movf	28,w	;volatile
  2703  022A  00F3               	movwf	ADC_5@ADC_value
  2704  022B  01F4               	clrf	ADC_5@ADC_value+1
  2705  022C  00F4               	movwf	ADC_5@ADC_value+1
  2706  022D  01F3               	clrf	ADC_5@ADC_value
  2707  022E  081B               	movf	27,w	;volatile
  2708  022F  04F3               	iorwf	ADC_5@ADC_value,f
  2709                           
  2710                           ;ADC1823.c: 56: return ADC_value;
  2711  0230  0874               	movf	ADC_5@ADC_value+1,w
  2712  0231  00F2               	movwf	?_ADC_5+1
  2713  0232  0873               	movf	ADC_5@ADC_value,w
  2714  0233  00F1               	movwf	?_ADC_5
  2715  0234  0008               	return
  2716  0235                     __end_of_ADC_5:	
  2717                           
  2718                           	psect	text7
  2719  01E9                     __ptext7:	
  2720 ;; *************** function _lputs_ISR *****************
  2721 ;; Defined at:
  2722 ;;		line 132 in file "USART1823.c"
  2723 ;; Parameters:    Size  Location     Type
  2724 ;;  data            1    wreg     PTR unsigned char 
  2725 ;;		 -> sweep@aux(7), calibrate_reader@aux(8), measure_Impedance_SE@aux(8), measure_Offset@aux(5), 
  2726 ;;		 -> measure_Impedance_no_offset@aux(13), measure_Impedance@aux(13), read_ADC_channels@aux(7), mess_rec(10), 
  2727 ;;  length          1    1[COMMON] unsigned char 
  2728 ;; Auto vars:     Size  Location     Type
  2729 ;;  data            1    4[COMMON] PTR unsigned char 
  2730 ;;		 -> sweep@aux(7), calibrate_reader@aux(8), measure_Impedance_SE@aux(8), measure_Offset@aux(5), 
  2731 ;;		 -> measure_Impedance_no_offset@aux(13), measure_Impedance@aux(13), read_ADC_channels@aux(7), mess_rec(10), 
  2732 ;;  i               1    3[COMMON] unsigned char 
  2733 ;; Return value:  Size  Location     Type
  2734 ;;                  1    wreg      void 
  2735 ;; Registers used:
  2736 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2737 ;; Tracked objects:
  2738 ;;		On entry : 1F/1
  2739 ;;		On exit  : 1F/1
  2740 ;;		Unchanged: 0/0
  2741 ;; Data sizes:     COMMON   BANK0   BANK1
  2742 ;;      Params:         1       0       0
  2743 ;;      Locals:         2       0       0
  2744 ;;      Temps:          1       0       0
  2745 ;;      Totals:         4       0       0
  2746 ;;Total ram usage:        4 bytes
  2747 ;; Hardware stack levels used:    1
  2748 ;; Hardware stack levels required when called:    3
  2749 ;; This function calls:
  2750 ;;		_close_RX_USART
  2751 ;; This function is called by:
  2752 ;;		_sweep
  2753 ;; This function uses a non-reentrant model
  2754 ;;
  2755                           
  2756                           
  2757                           ;psect for function _lputs_ISR
  2758  01E9                     _lputs_ISR:	
  2759                           
  2760                           ;incstack = 0
  2761                           ; Regs used in _lputs_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2762                           ;lputs_ISR@data stored from wreg
  2763  01E9  00F4               	movwf	lputs_ISR@data
  2764                           
  2765                           ;USART1823.c: 134: unsigned char i;;USART1823.c: 136: if (USART_tx_flag == 1)
  2766  01EA  0B79               	decfsz	_USART_tx_flag,w	;volatile
  2767  01EB  29ED               	goto	l1999
  2768  01EC  0008               	return
  2769  01ED                     l1999:	
  2770                           
  2771                           ;USART1823.c: 139: for (i = 0; i < length; i++)
  2772  01ED  01F3               	clrf	lputs_ISR@i
  2773  01EE                     l2005:	
  2774  01EE  0871               	movf	lputs_ISR@length,w
  2775  01EF  0273               	subwf	lputs_ISR@i,w
  2776  01F0  1803               	btfsc	3,0
  2777  01F1  29FF               	goto	l2007
  2778                           
  2779                           ;USART1823.c: 140: USART_tx_data[i] = data[i];
  2780  01F2  0873               	movf	lputs_ISR@i,w
  2781  01F3  3E20               	addlw	(low (_USART_tx_data| 0))& (0+255)
  2782  01F4  0086               	movwf	6
  2783  01F5  0187               	clrf	7
  2784  01F6  0873               	movf	lputs_ISR@i,w
  2785  01F7  0774               	addwf	lputs_ISR@data,w
  2786  01F8  00F2               	movwf	??_lputs_ISR
  2787  01F9  0084               	movwf	4
  2788  01FA  0185               	clrf	5
  2789  01FB  0800               	movf	0,w
  2790  01FC  0081               	movwf	1
  2791  01FD  0AF3               	incf	lputs_ISR@i,f
  2792  01FE  29EE               	goto	l2005
  2793  01FF                     l2007:	
  2794                           
  2795                           ;USART1823.c: 142: close_RX_USART();
  2796  01FF  22A1               	fcall	_close_RX_USART
  2797                           
  2798                           ;USART1823.c: 144: USART_tx_index = 0;
  2799  0200  01FB               	clrf	_USART_tx_index	;volatile
  2800                           
  2801                           ;USART1823.c: 145: USART_tx_length = length;
  2802  0201  0871               	movf	lputs_ISR@length,w
  2803  0202  00FA               	movwf	_USART_tx_length	;volatile
  2804                           
  2805                           ;USART1823.c: 147: USART_tx_flag = 1;
  2806  0203  3001               	movlw	1
  2807  0204  00F9               	movwf	_USART_tx_flag	;volatile
  2808                           
  2809                           ;USART1823.c: 148: TXIE = 1;
  2810  0205  0021               	movlb	1	; select bank1
  2811  0206  1611               	bsf	17,4	;volatile
  2812  0207  0008               	return
  2813  0208                     __end_of_lputs_ISR:	
  2814                           
  2815                           	psect	text8
  2816  02A1                     __ptext8:	
  2817 ;; *************** function _close_RX_USART *****************
  2818 ;; Defined at:
  2819 ;;		line 35 in file "USART1823.c"
  2820 ;; Parameters:    Size  Location     Type
  2821 ;;		None
  2822 ;; Auto vars:     Size  Location     Type
  2823 ;;		None
  2824 ;; Return value:  Size  Location     Type
  2825 ;;                  1    wreg      void 
  2826 ;; Registers used:
  2827 ;;		status,2
  2828 ;; Tracked objects:
  2829 ;;		On entry : 1F/1
  2830 ;;		On exit  : 1F/0
  2831 ;;		Unchanged: 0/0
  2832 ;; Data sizes:     COMMON   BANK0   BANK1
  2833 ;;      Params:         0       0       0
  2834 ;;      Locals:         0       0       0
  2835 ;;      Temps:          0       0       0
  2836 ;;      Totals:         0       0       0
  2837 ;;Total ram usage:        0 bytes
  2838 ;; Hardware stack levels used:    1
  2839 ;; Hardware stack levels required when called:    2
  2840 ;; This function calls:
  2841 ;;		Nothing
  2842 ;; This function is called by:
  2843 ;;		_lputs_ISR
  2844 ;; This function uses a non-reentrant model
  2845 ;;
  2846                           
  2847                           
  2848                           ;psect for function _close_RX_USART
  2849  02A1                     _close_RX_USART:	
  2850                           
  2851                           ;USART1823.c: 39: RCIE = 0;
  2852                           
  2853                           ;incstack = 0
  2854                           ; Regs used in _close_RX_USART: [status,2]
  2855  02A1  1291               	bcf	17,5	;volatile
  2856                           
  2857                           ;USART1823.c: 40: CREN = 0;
  2858  02A2  0023               	movlb	3	; select bank3
  2859  02A3  121D               	bcf	29,4	;volatile
  2860                           
  2861                           ;USART1823.c: 41: USART_rx_index = 0;
  2862  02A4  0020               	movlb	0	; select bank0
  2863  02A5  01BC               	clrf	_USART_rx_index	;volatile
  2864  02A6  0008               	return
  2865  02A7                     __end_of_close_RX_USART:	
  2866                           
  2867                           	psect	text9
  2868  0235                     __ptext9:	
  2869 ;; *************** function _calculate_checksum *****************
  2870 ;; Defined at:
  2871 ;;		line 407 in file "comm.c"
  2872 ;; Parameters:    Size  Location     Type
  2873 ;;  data            1    wreg     PTR unsigned char 
  2874 ;;		 -> sweep@aux(7), measure_Impedance_SE@aux(8), mess_rec(10), 
  2875 ;;  num             1    1[COMMON] unsigned char 
  2876 ;; Auto vars:     Size  Location     Type
  2877 ;;  data            1    4[COMMON] PTR unsigned char 
  2878 ;;		 -> sweep@aux(7), measure_Impedance_SE@aux(8), mess_rec(10), 
  2879 ;;  i               1    5[COMMON] unsigned char 
  2880 ;;  check           1    3[COMMON] unsigned char 
  2881 ;; Return value:  Size  Location     Type
  2882 ;;                  1    wreg      unsigned char 
  2883 ;; Registers used:
  2884 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2885 ;; Tracked objects:
  2886 ;;		On entry : 1F/0
  2887 ;;		On exit  : 1F/0
  2888 ;;		Unchanged: 1F/0
  2889 ;; Data sizes:     COMMON   BANK0   BANK1
  2890 ;;      Params:         1       0       0
  2891 ;;      Locals:         3       0       0
  2892 ;;      Temps:          1       0       0
  2893 ;;      Totals:         5       0       0
  2894 ;;Total ram usage:        5 bytes
  2895 ;; Hardware stack levels used:    1
  2896 ;; Hardware stack levels required when called:    2
  2897 ;; This function calls:
  2898 ;;		Nothing
  2899 ;; This function is called by:
  2900 ;;		_sweep
  2901 ;; This function uses a non-reentrant model
  2902 ;;
  2903                           
  2904                           
  2905                           ;psect for function _calculate_checksum
  2906  0235                     _calculate_checksum:	
  2907                           
  2908                           ;incstack = 0
  2909                           ; Regs used in _calculate_checksum: [wreg+fsr1l+fsr1h+status,2+status,0]
  2910                           ;calculate_checksum@data stored from wreg
  2911  0235  00F4               	movwf	calculate_checksum@data
  2912                           
  2913                           ;comm.c: 409: unsigned char check, i;;comm.c: 411: check = 0;
  2914  0236  01F3               	clrf	calculate_checksum@check
  2915                           
  2916                           ;comm.c: 412: for (i = 0; i < num; i++) {
  2917  0237  01F5               	clrf	calculate_checksum@i
  2918  0238                     l1673:	
  2919  0238  0871               	movf	calculate_checksum@num,w
  2920  0239  0275               	subwf	calculate_checksum@i,w
  2921  023A  1803               	btfsc	3,0
  2922  023B  2A45               	goto	l1675
  2923                           
  2924                           ;comm.c: 413: check ^= data[i];
  2925  023C  0875               	movf	calculate_checksum@i,w
  2926  023D  0774               	addwf	calculate_checksum@data,w
  2927  023E  00F2               	movwf	??_calculate_checksum
  2928  023F  0086               	movwf	6
  2929  0240  0187               	clrf	7
  2930  0241  0801               	movf	1,w
  2931  0242  06F3               	xorwf	calculate_checksum@check,f
  2932  0243  0AF5               	incf	calculate_checksum@i,f
  2933  0244  2A38               	goto	l1673
  2934  0245                     l1675:	
  2935                           
  2936                           ;comm.c: 414: };comm.c: 416: return check;
  2937  0245  0873               	movf	calculate_checksum@check,w
  2938  0246  0008               	return
  2939  0247                     __end_of_calculate_checksum:	
  2940                           
  2941                           	psect	text10
  2942  0268                     __ptext10:	
  2943 ;; *************** function _start_TX_USART_ISR *****************
  2944 ;; Defined at:
  2945 ;;		line 101 in file "USART1823.c"
  2946 ;; Parameters:    Size  Location     Type
  2947 ;;		None
  2948 ;; Auto vars:     Size  Location     Type
  2949 ;;		None
  2950 ;; Return value:  Size  Location     Type
  2951 ;;                  1    wreg      void 
  2952 ;; Registers used:
  2953 ;;		wreg, status,2
  2954 ;; Tracked objects:
  2955 ;;		On entry : B1F/1
  2956 ;;		On exit  : B1F/3
  2957 ;;		Unchanged: B00/0
  2958 ;; Data sizes:     COMMON   BANK0   BANK1
  2959 ;;      Params:         0       0       0
  2960 ;;      Locals:         0       0       0
  2961 ;;      Temps:          0       0       0
  2962 ;;      Totals:         0       0       0
  2963 ;;Total ram usage:        0 bytes
  2964 ;; Hardware stack levels used:    1
  2965 ;; Hardware stack levels required when called:    2
  2966 ;; This function calls:
  2967 ;;		Nothing
  2968 ;; This function is called by:
  2969 ;;		_main
  2970 ;; This function uses a non-reentrant model
  2971 ;;
  2972                           
  2973                           
  2974                           ;psect for function _start_TX_USART_ISR
  2975  0268                     _start_TX_USART_ISR:	
  2976                           
  2977                           ;USART1823.c: 103: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  2978                           
  2979                           ;incstack = 0
  2980                           ; Regs used in _start_TX_USART_ISR: [wreg+status,2]
  2981  0268  0023               	movlb	3	; select bank3
  2982  0269  151E               	bsf	30,2	;volatile
  2983  026A  159F               	bsf	31,3	;volatile
  2984  026B  019C               	clrf	28	;volatile
  2985  026C  300C               	movlw	12
  2986  026D  009B               	movwf	27	;volatile
  2987                           
  2988                           ;USART1823.c: 104: SYNC = 0;
  2989  026E  121E               	bcf	30,4	;volatile
  2990                           
  2991                           ;USART1823.c: 105: SPEN = 1;
  2992  026F  179D               	bsf	29,7	;volatile
  2993                           
  2994                           ;USART1823.c: 106: TXEN = 1;
  2995  0270  169E               	bsf	30,5	;volatile
  2996                           
  2997                           ;USART1823.c: 108: USART_tx_flag = 0;
  2998  0271  01F9               	clrf	_USART_tx_flag	;volatile
  2999                           
  3000                           ;USART1823.c: 109: USART_tx_index = 0;
  3001  0272  01FB               	clrf	_USART_tx_index	;volatile
  3002                           
  3003                           ;USART1823.c: 110: USART_tx_length = 0;
  3004  0273  01FA               	clrf	_USART_tx_length	;volatile
  3005                           
  3006                           ;USART1823.c: 113: PEIE = 1;
  3007  0274  170B               	bsf	11,6	;volatile
  3008                           
  3009                           ;USART1823.c: 114: GIE = 1;
  3010  0275  178B               	bsf	11,7	;volatile
  3011  0276  0008               	return
  3012  0277                     __end_of_start_TX_USART_ISR:	
  3013                           
  3014                           	psect	text11
  3015  0258                     __ptext11:	
  3016 ;; *************** function _start_RX_USART_ISR *****************
  3017 ;; Defined at:
  3018 ;;		line 83 in file "USART1823.c"
  3019 ;; Parameters:    Size  Location     Type
  3020 ;;		None
  3021 ;; Auto vars:     Size  Location     Type
  3022 ;;		None
  3023 ;; Return value:  Size  Location     Type
  3024 ;;                  1    wreg      void 
  3025 ;; Registers used:
  3026 ;;		wreg, status,2
  3027 ;; Tracked objects:
  3028 ;;		On entry : B1F/3
  3029 ;;		On exit  : B1F/1
  3030 ;;		Unchanged: B00/0
  3031 ;; Data sizes:     COMMON   BANK0   BANK1
  3032 ;;      Params:         0       0       0
  3033 ;;      Locals:         0       0       0
  3034 ;;      Temps:          0       0       0
  3035 ;;      Totals:         0       0       0
  3036 ;;Total ram usage:        0 bytes
  3037 ;; Hardware stack levels used:    1
  3038 ;; Hardware stack levels required when called:    2
  3039 ;; This function calls:
  3040 ;;		Nothing
  3041 ;; This function is called by:
  3042 ;;		_main
  3043 ;; This function uses a non-reentrant model
  3044 ;;
  3045                           
  3046                           
  3047                           ;psect for function _start_RX_USART_ISR
  3048  0258                     _start_RX_USART_ISR:	
  3049                           
  3050                           ;USART1823.c: 86: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  3051                           
  3052                           ;incstack = 0
  3053                           ; Regs used in _start_RX_USART_ISR: [wreg+status,2]
  3054  0258  151E               	bsf	30,2	;volatile
  3055  0259  159F               	bsf	31,3	;volatile
  3056  025A  019C               	clrf	28	;volatile
  3057  025B  300C               	movlw	12
  3058  025C  009B               	movwf	27	;volatile
  3059                           
  3060                           ;USART1823.c: 88: SYNC = 0;
  3061  025D  121E               	bcf	30,4	;volatile
  3062                           
  3063                           ;USART1823.c: 89: SPEN = 1;
  3064  025E  179D               	bsf	29,7	;volatile
  3065                           
  3066                           ;USART1823.c: 90: CREN = 1;
  3067  025F  161D               	bsf	29,4	;volatile
  3068                           
  3069                           ;USART1823.c: 92: USART_rx_flag = 0;
  3070  0260  01F8               	clrf	_USART_rx_flag	;volatile
  3071                           
  3072                           ;USART1823.c: 93: USART_rx_index = 0;
  3073  0261  0020               	movlb	0	; select bank0
  3074  0262  01BC               	clrf	_USART_rx_index	;volatile
  3075                           
  3076                           ;USART1823.c: 95: RCIE = 1;
  3077  0263  0021               	movlb	1	; select bank1
  3078  0264  1691               	bsf	17,5	;volatile
  3079                           
  3080                           ;USART1823.c: 96: PEIE = 1;
  3081  0265  170B               	bsf	11,6	;volatile
  3082                           
  3083                           ;USART1823.c: 97: GIE = 1;
  3084  0266  178B               	bsf	11,7	;volatile
  3085  0267  0008               	return
  3086  0268                     __end_of_start_RX_USART_ISR:	
  3087                           
  3088                           	psect	text12
  3089  02B3                     __ptext12:	
  3090 ;; *************** function _start_RCM *****************
  3091 ;; Defined at:
  3092 ;;		line 4 in file "RCM1823.c"
  3093 ;; Parameters:    Size  Location     Type
  3094 ;;		None
  3095 ;; Auto vars:     Size  Location     Type
  3096 ;;		None
  3097 ;; Return value:  Size  Location     Type
  3098 ;;                  1    wreg      void 
  3099 ;; Registers used:
  3100 ;;		wreg
  3101 ;; Tracked objects:
  3102 ;;		On entry : B1F/1
  3103 ;;		On exit  : B1F/7
  3104 ;;		Unchanged: B00/0
  3105 ;; Data sizes:     COMMON   BANK0   BANK1
  3106 ;;      Params:         0       0       0
  3107 ;;      Locals:         0       0       0
  3108 ;;      Temps:          0       0       0
  3109 ;;      Totals:         0       0       0
  3110 ;;Total ram usage:        0 bytes
  3111 ;; Hardware stack levels used:    1
  3112 ;; Hardware stack levels required when called:    2
  3113 ;; This function calls:
  3114 ;;		Nothing
  3115 ;; This function is called by:
  3116 ;;		_main
  3117 ;; This function uses a non-reentrant model
  3118 ;;
  3119                           
  3120                           
  3121                           ;psect for function _start_RCM
  3122  02B3                     _start_RCM:	
  3123                           
  3124                           ;RCM1823.c: 6: CLKRCON = 0b11010000;
  3125                           
  3126                           ;incstack = 0
  3127                           ; Regs used in _start_RCM: [wreg]
  3128  02B3  30D0               	movlw	208
  3129  02B4  0027               	movlb	7	; select bank7
  3130  02B5  009A               	movwf	26	;volatile
  3131  02B6  0008               	return
  3132  02B7                     __end_of_start_RCM:	
  3133                           
  3134                           	psect	text13
  3135  0294                     __ptext13:	
  3136 ;; *************** function _setup_TMR0 *****************
  3137 ;; Defined at:
  3138 ;;		line 10 in file "TMR0.c"
  3139 ;; Parameters:    Size  Location     Type
  3140 ;;		None
  3141 ;; Auto vars:     Size  Location     Type
  3142 ;;		None
  3143 ;; Return value:  Size  Location     Type
  3144 ;;                  1    wreg      void 
  3145 ;; Registers used:
  3146 ;;		None
  3147 ;; Tracked objects:
  3148 ;;		On entry : B1F/3
  3149 ;;		On exit  : B1F/1
  3150 ;;		Unchanged: B00/0
  3151 ;; Data sizes:     COMMON   BANK0   BANK1
  3152 ;;      Params:         0       0       0
  3153 ;;      Locals:         0       0       0
  3154 ;;      Temps:          0       0       0
  3155 ;;      Totals:         0       0       0
  3156 ;;Total ram usage:        0 bytes
  3157 ;; Hardware stack levels used:    1
  3158 ;; Hardware stack levels required when called:    2
  3159 ;; This function calls:
  3160 ;;		Nothing
  3161 ;; This function is called by:
  3162 ;;		_main
  3163 ;; This function uses a non-reentrant model
  3164 ;;
  3165                           
  3166                           
  3167                           ;psect for function _setup_TMR0
  3168  0294                     _setup_TMR0:	
  3169                           
  3170                           ;TMR0.c: 13: PS2 = 0; PS1 = 1; PS0 = 0;
  3171                           
  3172                           ;incstack = 0
  3173                           ; Regs used in _setup_TMR0: []
  3174  0294  0021               	movlb	1	; select bank1
  3175  0295  1115               	bcf	21,2	;volatile
  3176  0296  1495               	bsf	21,1	;volatile
  3177  0297  1015               	bcf	21,0	;volatile
  3178                           
  3179                           ;TMR0.c: 16: PSA = 0;
  3180  0298  1195               	bcf	21,3	;volatile
  3181                           
  3182                           ;TMR0.c: 18: TMR0CS = 0;
  3183  0299  1295               	bcf	21,5	;volatile
  3184  029A  0008               	return
  3185  029B                     __end_of_setup_TMR0:	
  3186                           
  3187                           	psect	text14
  3188  02A7                     __ptext14:	
  3189 ;; *************** function _setup_ADC *****************
  3190 ;; Defined at:
  3191 ;;		line 3 in file "ADC1823.c"
  3192 ;; Parameters:    Size  Location     Type
  3193 ;;		None
  3194 ;; Auto vars:     Size  Location     Type
  3195 ;;		None
  3196 ;; Return value:  Size  Location     Type
  3197 ;;                  1    wreg      void 
  3198 ;; Registers used:
  3199 ;;		wreg
  3200 ;; Tracked objects:
  3201 ;;		On entry : B1F/7
  3202 ;;		On exit  : B1F/1
  3203 ;;		Unchanged: B00/0
  3204 ;; Data sizes:     COMMON   BANK0   BANK1
  3205 ;;      Params:         0       0       0
  3206 ;;      Locals:         0       0       0
  3207 ;;      Temps:          0       0       0
  3208 ;;      Totals:         0       0       0
  3209 ;;Total ram usage:        0 bytes
  3210 ;; Hardware stack levels used:    1
  3211 ;; Hardware stack levels required when called:    2
  3212 ;; This function calls:
  3213 ;;		Nothing
  3214 ;; This function is called by:
  3215 ;;		_main
  3216 ;; This function uses a non-reentrant model
  3217 ;;
  3218                           
  3219                           
  3220                           ;psect for function _setup_ADC
  3221  02A7                     _setup_ADC:	
  3222                           
  3223                           ;ADC1823.c: 20: ADCON1 = 0b11110000;
  3224                           
  3225                           ;incstack = 0
  3226                           ; Regs used in _setup_ADC: [wreg]
  3227  02A7  30F0               	movlw	240
  3228  02A8  0021               	movlb	1	; select bank1
  3229  02A9  009E               	movwf	30	;volatile
  3230                           
  3231                           ;ADC1823.c: 21: { ADCON0 = 0b00100100;};
  3232  02AA  3024               	movlw	36
  3233  02AB  009D               	movwf	29	;volatile
  3234  02AC  0008               	return
  3235  02AD                     __end_of_setup_ADC:	
  3236                           
  3237                           	psect	text15
  3238  02B7                     __ptext15:	
  3239 ;; *************** function _USARTX_change_pol *****************
  3240 ;; Defined at:
  3241 ;;		line 90 in file "mcc_generated_files/mcc.c"
  3242 ;; Parameters:    Size  Location     Type
  3243 ;;		None
  3244 ;; Auto vars:     Size  Location     Type
  3245 ;;		None
  3246 ;; Return value:  Size  Location     Type
  3247 ;;                  1    wreg      void 
  3248 ;; Registers used:
  3249 ;;		None
  3250 ;; Tracked objects:
  3251 ;;		On entry : B1F/1
  3252 ;;		On exit  : B1F/3
  3253 ;;		Unchanged: B00/0
  3254 ;; Data sizes:     COMMON   BANK0   BANK1
  3255 ;;      Params:         0       0       0
  3256 ;;      Locals:         0       0       0
  3257 ;;      Temps:          0       0       0
  3258 ;;      Totals:         0       0       0
  3259 ;;Total ram usage:        0 bytes
  3260 ;; Hardware stack levels used:    1
  3261 ;; Hardware stack levels required when called:    2
  3262 ;; This function calls:
  3263 ;;		Nothing
  3264 ;; This function is called by:
  3265 ;;		_main
  3266 ;; This function uses a non-reentrant model
  3267 ;;
  3268                           
  3269                           
  3270                           ;psect for function _USARTX_change_pol
  3271  02B7                     _USARTX_change_pol:	
  3272                           
  3273                           ;mcc.c: 92: SCKP = 1;
  3274                           
  3275                           ;incstack = 0
  3276                           ; Regs used in _USARTX_change_pol: []
  3277  02B7  0023               	movlb	3	; select bank3
  3278  02B8  161F               	bsf	31,4	;volatile
  3279  02B9  0008               	return
  3280  02BA                     __end_of_USARTX_change_pol:	
  3281                           
  3282                           	psect	text16
  3283  02BD                     __ptext16:	
  3284 ;; *************** function _SYSTEM_Initialize *****************
  3285 ;; Defined at:
  3286 ;;		line 70 in file "mcc_generated_files/mcc.c"
  3287 ;; Parameters:    Size  Location     Type
  3288 ;;		None
  3289 ;; Auto vars:     Size  Location     Type
  3290 ;;		None
  3291 ;; Return value:  Size  Location     Type
  3292 ;;                  1    wreg      void 
  3293 ;; Registers used:
  3294 ;;		wreg, status,2, status,0, pclath, cstack
  3295 ;; Tracked objects:
  3296 ;;		On entry : B1F/0
  3297 ;;		On exit  : B1F/1
  3298 ;;		Unchanged: B00/0
  3299 ;; Data sizes:     COMMON   BANK0   BANK1
  3300 ;;      Params:         0       0       0
  3301 ;;      Locals:         0       0       0
  3302 ;;      Temps:          0       0       0
  3303 ;;      Totals:         0       0       0
  3304 ;;Total ram usage:        0 bytes
  3305 ;; Hardware stack levels used:    1
  3306 ;; Hardware stack levels required when called:    3
  3307 ;; This function calls:
  3308 ;;		_OSCILLATOR_Initialize
  3309 ;;		_PIN_MANAGER_Initialize
  3310 ;; This function is called by:
  3311 ;;		_main
  3312 ;; This function uses a non-reentrant model
  3313 ;;
  3314                           
  3315                           
  3316                           ;psect for function _SYSTEM_Initialize
  3317  02BD                     _SYSTEM_Initialize:	
  3318                           
  3319                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  3320                           
  3321                           ;incstack = 0
  3322                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3323  02BD  2208               	fcall	_PIN_MANAGER_Initialize
  3324                           
  3325                           ;mcc.c: 74: OSCILLATOR_Initialize();
  3326  02BE  2AAD               	ljmp	l1613
  3327  02BF                     __end_of_SYSTEM_Initialize:	
  3328                           
  3329                           	psect	text17
  3330  0208                     __ptext17:	
  3331 ;; *************** function _PIN_MANAGER_Initialize *****************
  3332 ;; Defined at:
  3333 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  3334 ;; Parameters:    Size  Location     Type
  3335 ;;		None
  3336 ;; Auto vars:     Size  Location     Type
  3337 ;;		None
  3338 ;; Return value:  Size  Location     Type
  3339 ;;                  1    wreg      void 
  3340 ;; Registers used:
  3341 ;;		wreg, status,2
  3342 ;; Tracked objects:
  3343 ;;		On entry : B1F/0
  3344 ;;		On exit  : B1F/2
  3345 ;;		Unchanged: B00/0
  3346 ;; Data sizes:     COMMON   BANK0   BANK1
  3347 ;;      Params:         0       0       0
  3348 ;;      Locals:         0       0       0
  3349 ;;      Temps:          0       0       0
  3350 ;;      Totals:         0       0       0
  3351 ;;Total ram usage:        0 bytes
  3352 ;; Hardware stack levels used:    1
  3353 ;; Hardware stack levels required when called:    2
  3354 ;; This function calls:
  3355 ;;		Nothing
  3356 ;; This function is called by:
  3357 ;;		_SYSTEM_Initialize
  3358 ;; This function uses a non-reentrant model
  3359 ;;
  3360                           
  3361                           
  3362                           ;psect for function _PIN_MANAGER_Initialize
  3363  0208                     _PIN_MANAGER_Initialize:	
  3364                           
  3365                           ;pin_manager.c: 51: LATA = 0x0;
  3366                           
  3367                           ;incstack = 0
  3368                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3369  0208  0022               	movlb	2	; select bank2
  3370  0209  018C               	clrf	12	;volatile
  3371                           
  3372                           ;pin_manager.c: 52: LATC = 0x0;
  3373  020A  018E               	clrf	14	;volatile
  3374                           
  3375                           ;pin_manager.c: 55: ANSELA = 0b00000100;
  3376  020B  3004               	movlw	4
  3377  020C  0023               	movlb	3	; select bank3
  3378  020D  008C               	movwf	12	;volatile
  3379                           
  3380                           ;pin_manager.c: 56: ANSELC = 0b00000011;
  3381  020E  3003               	movlw	3
  3382  020F  008E               	movwf	14	;volatile
  3383                           
  3384                           ;pin_manager.c: 59: WPUA = 0x3B;
  3385  0210  303B               	movlw	59
  3386  0211  0024               	movlb	4	; select bank4
  3387  0212  008C               	movwf	12	;volatile
  3388                           
  3389                           ;pin_manager.c: 61: WPUC = 0x1C;
  3390  0213  301C               	movlw	28
  3391  0214  008E               	movwf	14	;volatile
  3392                           
  3393                           ;pin_manager.c: 63: RXDTSEL = 0;
  3394  0215  0022               	movlb	2	; select bank2
  3395  0216  139D               	bcf	29,7	;volatile
  3396                           
  3397                           ;pin_manager.c: 64: TXCKSEL = 0;
  3398  0217  111D               	bcf	29,2	;volatile
  3399                           
  3400                           ;pin_manager.c: 67: TRISC = 0b01100011;
  3401  0218  3063               	movlw	99
  3402  0219  0021               	movlb	1	; select bank1
  3403  021A  008E               	movwf	14	;volatile
  3404                           
  3405                           ;pin_manager.c: 68: TRISA = 0b01011111;
  3406  021B  305F               	movlw	95
  3407  021C  008C               	movwf	12	;volatile
  3408                           
  3409                           ;pin_manager.c: 70: OPTION_REGbits.nWPUEN = 0x0;
  3410  021D  1395               	bcf	21,7	;volatile
  3411                           
  3412                           ;pin_manager.c: 71: APFCON = 0x00;
  3413  021E  0022               	movlb	2	; select bank2
  3414  021F  019D               	clrf	29	;volatile
  3415  0220  0008               	return
  3416  0221                     __end_of_PIN_MANAGER_Initialize:	
  3417                           
  3418                           	psect	text18
  3419  02AD                     __ptext18:	
  3420 ;; *************** function _OSCILLATOR_Initialize *****************
  3421 ;; Defined at:
  3422 ;;		line 78 in file "mcc_generated_files/mcc.c"
  3423 ;; Parameters:    Size  Location     Type
  3424 ;;		None
  3425 ;; Auto vars:     Size  Location     Type
  3426 ;;		None
  3427 ;; Return value:  Size  Location     Type
  3428 ;;                  1    wreg      void 
  3429 ;; Registers used:
  3430 ;;		wreg, status,2
  3431 ;; Tracked objects:
  3432 ;;		On entry : B1F/2
  3433 ;;		On exit  : B1F/1
  3434 ;;		Unchanged: B00/0
  3435 ;; Data sizes:     COMMON   BANK0   BANK1
  3436 ;;      Params:         0       0       0
  3437 ;;      Locals:         0       0       0
  3438 ;;      Temps:          0       0       0
  3439 ;;      Totals:         0       0       0
  3440 ;;Total ram usage:        0 bytes
  3441 ;; Hardware stack levels used:    1
  3442 ;; Hardware stack levels required when called:    2
  3443 ;; This function calls:
  3444 ;;		Nothing
  3445 ;; This function is called by:
  3446 ;;		_SYSTEM_Initialize
  3447 ;; This function uses a non-reentrant model
  3448 ;;
  3449                           
  3450                           
  3451                           ;psect for function _OSCILLATOR_Initialize
  3452  02AD                     _OSCILLATOR_Initialize:	
  3453  02AD                     l1613:	
  3454                           ;incstack = 0
  3455                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3456                           
  3457                           
  3458                           ;mcc.c: 81: OSCCON = 0x3A;
  3459  02AD  303A               	movlw	58
  3460  02AE  0021               	movlb	1	; select bank1
  3461  02AF  0099               	movwf	25	;volatile
  3462                           
  3463                           ;mcc.c: 83: OSCSTAT = 0x00;
  3464  02B0  019A               	clrf	26	;volatile
  3465                           
  3466                           ;mcc.c: 85: OSCTUNE = 0x00;
  3467  02B1  0198               	clrf	24	;volatile
  3468  02B2  0008               	return
  3469  02B3                     __end_of_OSCILLATOR_Initialize:	
  3470                           
  3471                           	psect	intentry
  3472  0004                     __pintentry:	
  3473 ;; *************** function _isr *****************
  3474 ;; Defined at:
  3475 ;;		line 152 in file "main.c"
  3476 ;; Parameters:    Size  Location     Type
  3477 ;;		None
  3478 ;; Auto vars:     Size  Location     Type
  3479 ;;		None
  3480 ;; Return value:  Size  Location     Type
  3481 ;;                  1    wreg      void 
  3482 ;; Registers used:
  3483 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3484 ;; Tracked objects:
  3485 ;;		On entry : 0/0
  3486 ;;		On exit  : 1C/0
  3487 ;;		Unchanged: 0/0
  3488 ;; Data sizes:     COMMON   BANK0   BANK1
  3489 ;;      Params:         0       0       0
  3490 ;;      Locals:         0       0       0
  3491 ;;      Temps:          0       0       0
  3492 ;;      Totals:         0       0       0
  3493 ;;Total ram usage:        0 bytes
  3494 ;; Hardware stack levels used:    1
  3495 ;; Hardware stack levels required when called:    1
  3496 ;; This function calls:
  3497 ;;		_start_TMR0_ISR
  3498 ;;		_stop_TMR0_ISR
  3499 ;;		i1_start_RX_USART_ISR
  3500 ;; This function is called by:
  3501 ;;		Interrupt level 1
  3502 ;; This function uses a non-reentrant model
  3503 ;;
  3504                           
  3505  0004                     _isr:	
  3506                           
  3507                           ;incstack = 0
  3508  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  3509                           
  3510                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3511  0005  3180               	pagesel	$
  3512                           
  3513                           ;main.c: 156: if (TMR0IF && TMR0IE) {
  3514  0006  190B               	btfsc	11,2	;volatile
  3515  0007  1E8B               	btfss	11,5	;volatile
  3516  0008  2811               	goto	i1l132
  3517                           
  3518                           ;main.c: 158: TMR0IF = 0;
  3519  0009  110B               	bcf	11,2	;volatile
  3520                           
  3521                           ;main.c: 159: TMR0 = TIMER0_timeout;
  3522  000A  0020               	movlb	0	; select bank0
  3523  000B  0839               	movf	_TIMER0_timeout,w	;volatile
  3524  000C  0095               	movwf	21	;volatile
  3525                           
  3526                           ;main.c: 162: TIMER0_flag = 1;
  3527  000D  3001               	movlw	1
  3528  000E  00BD               	movwf	_TIMER0_flag	;volatile
  3529                           
  3530                           ;main.c: 167: stop_TMR0_ISR();
  3531  000F  22BA               	fcall	_stop_TMR0_ISR
  3532  0010  2846               	goto	i1l133
  3533  0011                     i1l132:	
  3534                           
  3535                           ;main.c: 170: };main.c: 174: if (RCIF) {
  3536  0011  0020               	movlb	0	; select bank0
  3537  0012  1E91               	btfss	17,5	;volatile
  3538  0013  282E               	goto	i1l134
  3539                           
  3540                           ;main.c: 175: stop_TMR0_ISR();
  3541  0014  22BA               	fcall	_stop_TMR0_ISR
  3542                           
  3543                           ;main.c: 178: if (OERR) {
  3544  0015  0023               	movlb	3	; select bank3
  3545  0016  1C9D               	btfss	29,1	;volatile
  3546  0017  281D               	goto	i1l1961
  3547                           
  3548                           ;main.c: 180: CREN = 0;
  3549  0018  121D               	bcf	29,4	;volatile
  3550                           
  3551                           ;main.c: 181: CREN = 1;
  3552  0019  161D               	bsf	29,4	;volatile
  3553                           
  3554                           ;main.c: 182: USART_rx_index = 0;
  3555  001A  0020               	movlb	0	; select bank0
  3556  001B  01BC               	clrf	_USART_rx_index	;volatile
  3557  001C  2846               	goto	i1l133
  3558  001D                     i1l1961:	
  3559                           
  3560                           ;main.c: 184: };main.c: 187: if (USART_rx_index >= 10) {
  3561  001D  300A               	movlw	10
  3562  001E  0020               	movlb	0	; select bank0
  3563  001F  023C               	subwf	_USART_rx_index,w	;volatile
  3564  0020  1803               	btfsc	3,0
  3565                           
  3566                           ;main.c: 188: USART_rx_index = 0;
  3567  0021  01BC               	clrf	_USART_rx_index	;volatile
  3568                           
  3569                           ;main.c: 189: };main.c: 191: USART_rx_data[USART_rx_index++] = RCREG;
  3570  0022  083C               	movf	_USART_rx_index,w
  3571  0023  3E2F               	addlw	(low (_USART_rx_data| 0))& (0+255)
  3572  0024  0086               	movwf	6
  3573  0025  0187               	clrf	7
  3574  0026  0023               	movlb	3	; select bank3
  3575  0027  0819               	movf	25,w	;volatile
  3576  0028  0081               	movwf	1
  3577  0029  0020               	movlb	0	; select bank0
  3578  002A  0ABC               	incf	_USART_rx_index,f	;volatile
  3579                           
  3580                           ;main.c: 193: start_TMR0_ISR(98);
  3581  002B  3062               	movlw	98
  3582  002C  2282               	fcall	_start_TMR0_ISR
  3583  002D  2846               	goto	i1l133
  3584  002E                     i1l134:	
  3585                           
  3586                           ;main.c: 196: };main.c: 200: if (TXIF && TXIE) {
  3587  002E  1E11               	btfss	17,4	;volatile
  3588  002F  2846               	goto	i1l133
  3589  0030  0021               	movlb	1	; select bank1
  3590  0031  1E11               	btfss	17,4	;volatile
  3591  0032  2846               	goto	i1l133
  3592                           
  3593                           ;main.c: 202: TXREG = USART_tx_data[USART_tx_index++];
  3594  0033  087B               	movf	_USART_tx_index,w
  3595  0034  3E20               	addlw	(low (_USART_tx_data| 0))& (0+255)
  3596  0035  0086               	movwf	6
  3597  0036  0187               	clrf	7
  3598  0037  0801               	movf	1,w
  3599  0038  0023               	movlb	3	; select bank3
  3600  0039  009A               	movwf	26	;volatile
  3601  003A  0AFB               	incf	_USART_tx_index,f	;volatile
  3602                           
  3603                           ;main.c: 204: if (USART_tx_index >= USART_tx_length) {
  3604  003B  087A               	movf	_USART_tx_length,w	;volatile
  3605  003C  027B               	subwf	_USART_tx_index,w	;volatile
  3606  003D  1C03               	skipc
  3607  003E  2846               	goto	i1l133
  3608                           
  3609                           ;main.c: 205: TXIE = 0;
  3610  003F  0021               	movlb	1	; select bank1
  3611  0040  1211               	bcf	17,4	;volatile
  3612                           
  3613                           ;main.c: 206: USART_tx_flag = 0;
  3614  0041  01F9               	clrf	_USART_tx_flag	;volatile
  3615                           
  3616                           ;main.c: 210: _delay((unsigned long)((3)*(500000/4000.0)));
  3617  0042  307D               	movlw	125
  3618  0043                     u94_27:	
  3619  0043  0B89               	decfsz	9,f
  3620  0044  2843               	goto	u94_27
  3621                           
  3622                           ;main.c: 212: start_RX_USART_ISR();
  3623  0045  2247               	fcall	i1_start_RX_USART_ISR
  3624  0046                     i1l133:	
  3625  0046  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  3626  0047  0009               	retfie
  3627  0048                     __end_of_isr:	
  3628                           
  3629                           	psect	text20
  3630  0247                     __ptext20:	
  3631 ;; *************** function i1_start_RX_USART_ISR *****************
  3632 ;; Defined at:
  3633 ;;		line 83 in file "USART1823.c"
  3634 ;; Parameters:    Size  Location     Type
  3635 ;;		None
  3636 ;; Auto vars:     Size  Location     Type
  3637 ;;		None
  3638 ;; Return value:  Size  Location     Type
  3639 ;;                  1    wreg      void 
  3640 ;; Registers used:
  3641 ;;		wreg, status,2
  3642 ;; Tracked objects:
  3643 ;;		On entry : 0/1
  3644 ;;		On exit  : 1F/1
  3645 ;;		Unchanged: 0/0
  3646 ;; Data sizes:     COMMON   BANK0   BANK1
  3647 ;;      Params:         0       0       0
  3648 ;;      Locals:         0       0       0
  3649 ;;      Temps:          0       0       0
  3650 ;;      Totals:         0       0       0
  3651 ;;Total ram usage:        0 bytes
  3652 ;; Hardware stack levels used:    1
  3653 ;; This function calls:
  3654 ;;		Nothing
  3655 ;; This function is called by:
  3656 ;;		_isr
  3657 ;; This function uses a non-reentrant model
  3658 ;;
  3659                           
  3660                           
  3661                           ;psect for function i1_start_RX_USART_ISR
  3662  0247                     i1_start_RX_USART_ISR:	
  3663                           
  3664                           ;USART1823.c: 86: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  3665                           
  3666                           ;incstack = 0
  3667                           ; Regs used in i1_start_RX_USART_ISR: [wreg+status,2]
  3668  0247  0023               	movlb	3	; select bank3
  3669  0248  151E               	bsf	30,2	;volatile
  3670  0249  159F               	bsf	31,3	;volatile
  3671  024A  019C               	clrf	28	;volatile
  3672  024B  300C               	movlw	12
  3673  024C  009B               	movwf	27	;volatile
  3674                           
  3675                           ;USART1823.c: 88: SYNC = 0;
  3676  024D  121E               	bcf	30,4	;volatile
  3677                           
  3678                           ;USART1823.c: 89: SPEN = 1;
  3679  024E  179D               	bsf	29,7	;volatile
  3680                           
  3681                           ;USART1823.c: 90: CREN = 1;
  3682  024F  161D               	bsf	29,4	;volatile
  3683                           
  3684                           ;USART1823.c: 92: USART_rx_flag = 0;
  3685  0250  01F8               	clrf	_USART_rx_flag	;volatile
  3686                           
  3687                           ;USART1823.c: 93: USART_rx_index = 0;
  3688  0251  0020               	movlb	0	; select bank0
  3689  0252  01BC               	clrf	_USART_rx_index	;volatile
  3690                           
  3691                           ;USART1823.c: 95: RCIE = 1;
  3692  0253  0021               	movlb	1	; select bank1
  3693  0254  1691               	bsf	17,5	;volatile
  3694                           
  3695                           ;USART1823.c: 96: PEIE = 1;
  3696  0255  170B               	bsf	11,6	;volatile
  3697                           
  3698                           ;USART1823.c: 97: GIE = 1;
  3699  0256  178B               	bsf	11,7	;volatile
  3700  0257  0008               	return
  3701  0258                     __end_ofi1_start_RX_USART_ISR:	
  3702                           
  3703                           	psect	text21
  3704  02BA                     __ptext21:	
  3705 ;; *************** function _stop_TMR0_ISR *****************
  3706 ;; Defined at:
  3707 ;;		line 44 in file "TMR0.c"
  3708 ;; Parameters:    Size  Location     Type
  3709 ;;		None
  3710 ;; Auto vars:     Size  Location     Type
  3711 ;;		None
  3712 ;; Return value:  Size  Location     Type
  3713 ;;                  1    wreg      void 
  3714 ;; Registers used:
  3715 ;;		None
  3716 ;; Tracked objects:
  3717 ;;		On entry : 1F/0
  3718 ;;		On exit  : 1F/0
  3719 ;;		Unchanged: 1F/0
  3720 ;; Data sizes:     COMMON   BANK0   BANK1
  3721 ;;      Params:         0       0       0
  3722 ;;      Locals:         0       0       0
  3723 ;;      Temps:          0       0       0
  3724 ;;      Totals:         0       0       0
  3725 ;;Total ram usage:        0 bytes
  3726 ;; Hardware stack levels used:    1
  3727 ;; This function calls:
  3728 ;;		Nothing
  3729 ;; This function is called by:
  3730 ;;		_isr
  3731 ;; This function uses a non-reentrant model
  3732 ;;
  3733                           
  3734                           
  3735                           ;psect for function _stop_TMR0_ISR
  3736  02BA                     _stop_TMR0_ISR:	
  3737                           
  3738                           ;TMR0.c: 47: TMR0IE = 0;
  3739                           
  3740                           ;incstack = 0
  3741                           ; Regs used in _stop_TMR0_ISR: []
  3742  02BA  128B               	bcf	11,5	;volatile
  3743                           
  3744                           ;TMR0.c: 48: TMR0IF = 0;
  3745  02BB  110B               	bcf	11,2	;volatile
  3746  02BC  0008               	return
  3747  02BD                     __end_of_stop_TMR0_ISR:	
  3748                           
  3749                           	psect	text22
  3750  0282                     __ptext22:	
  3751 ;; *************** function _start_TMR0_ISR *****************
  3752 ;; Defined at:
  3753 ;;		line 30 in file "TMR0.c"
  3754 ;; Parameters:    Size  Location     Type
  3755 ;;  val             1    wreg     unsigned char 
  3756 ;; Auto vars:     Size  Location     Type
  3757 ;;  val             1    0[COMMON] unsigned char 
  3758 ;; Return value:  Size  Location     Type
  3759 ;;                  1    wreg      void 
  3760 ;; Registers used:
  3761 ;;		wreg, status,2
  3762 ;; Tracked objects:
  3763 ;;		On entry : 1F/0
  3764 ;;		On exit  : 1F/0
  3765 ;;		Unchanged: 0/0
  3766 ;; Data sizes:     COMMON   BANK0   BANK1
  3767 ;;      Params:         0       0       0
  3768 ;;      Locals:         1       0       0
  3769 ;;      Temps:          0       0       0
  3770 ;;      Totals:         1       0       0
  3771 ;;Total ram usage:        1 bytes
  3772 ;; Hardware stack levels used:    1
  3773 ;; This function calls:
  3774 ;;		Nothing
  3775 ;; This function is called by:
  3776 ;;		_isr
  3777 ;; This function uses a non-reentrant model
  3778 ;;
  3779                           
  3780                           
  3781                           ;psect for function _start_TMR0_ISR
  3782  0282                     _start_TMR0_ISR:	
  3783                           
  3784                           ;incstack = 0
  3785                           ; Regs used in _start_TMR0_ISR: [wreg+status,2]
  3786                           ;start_TMR0_ISR@val stored from wreg
  3787  0282  00F0               	movwf	start_TMR0_ISR@val
  3788                           
  3789                           ;TMR0.c: 32: TIMER0_timeout = val;
  3790  0283  00B9               	movwf	_TIMER0_timeout	;volatile
  3791  0284  01BA               	clrf	_TIMER0_timeout+1	;volatile
  3792                           
  3793                           ;TMR0.c: 33: TIMER0_flag = 0;
  3794  0285  01BD               	clrf	_TIMER0_flag	;volatile
  3795                           
  3796                           ;TMR0.c: 36: TMR0 = TIMER0_timeout;
  3797  0286  0839               	movf	_TIMER0_timeout,w	;volatile
  3798  0287  0095               	movwf	21	;volatile
  3799                           
  3800                           ;TMR0.c: 39: TMR0IF = 0;
  3801  0288  110B               	bcf	11,2	;volatile
  3802                           
  3803                           ;TMR0.c: 40: TMR0IE = 1;
  3804  0289  168B               	bsf	11,5	;volatile
  3805                           
  3806                           ;TMR0.c: 41: GIE = 1;
  3807  028A  178B               	bsf	11,7	;volatile
  3808  028B  0008               	return
  3809  028C                     __end_of_start_TMR0_ISR:	
  3810  007E                     btemp	set	126	;btemp
  3811  007E                     int$flags	set	126
  3812  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    19
    Data        0
    BSS         44
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      12
    BANK0            80     31      71
    BANK1            32      0       0

Pointer List with Targets:

    measure@Q	PTR short  size(1) Largest target is 2
		 -> sweep@Q(BANK0[2]), 

    measure@I	PTR short  size(1) Largest target is 2
		 -> sweep@I(BANK0[2]), 

    calculate_checksum@data	PTR unsigned char  size(1) Largest target is 10
		 -> sweep@aux(BANK0[7]), measure_Impedance_SE@aux(COMMON[8]), mess_rec(BANK0[10]), 

    lputs_ISR@data	PTR unsigned char  size(1) Largest target is 13
		 -> sweep@aux(BANK0[7]), calibrate_reader@aux(COMMON[8]), measure_Impedance_SE@aux(COMMON[8]), measure_Offset@aux(COMMON[5]), 
		 -> measure_Impedance_no_offset@aux(COMMON[13]), measure_Impedance@aux(COMMON[13]), read_ADC_channels@aux(COMMON[7]), mess_rec(BANK0[10]), 

    setFreq@asic	PTR struct . size(1) Largest target is 2
		 -> sweep@asic(BANK0[2]), 

    setGain@asic	PTR struct . size(1) Largest target is 2
		 -> sweep@asic(BANK0[2]), 


Critical Paths under _main in COMMON

    _sweep->_measure
    _measure->_ADC_5
    _measure->_config

Critical Paths under _isr in COMMON

    _isr->_start_TMR0_ISR

Critical Paths under _main in BANK0

    _main->_sweep
    _sweep->_measure

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    5726
                                              7 COMMON     1     1      0
                  _SYSTEM_Initialize
                  _USARTX_change_pol
                          _setup_ADC
                         _setup_TMR0
                          _start_RCM
                 _start_RX_USART_ISR
                 _start_TX_USART_ISR
                              _sweep
 ---------------------------------------------------------------------------------
 (1) _sweep                                               19    19      0    5726
                                             12 BANK0     19    19      0
                 _calculate_checksum
                          _lputs_ISR
                            _measure
                            _setFreq
                            _setGain
 ---------------------------------------------------------------------------------
 (2) _setGain                                              3     2      1     658
                                              1 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (2) _setFreq                                              3     2      1     308
                                              1 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (2) _measure                                             14    11      3    1748
                                              5 COMMON     2     2      0
                                              0 BANK0     12     9      3
                              _ADC_5
                             _config
 ---------------------------------------------------------------------------------
 (3) _config                                               4     2      2    1042
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (3) _ADC_5                                                4     2      2      25
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _lputs_ISR                                            4     3      1    1272
                                              1 COMMON     4     3      1
                     _close_RX_USART
 ---------------------------------------------------------------------------------
 (3) _close_RX_USART                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _calculate_checksum                                   5     4      1     415
                                              1 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _start_TX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RCM                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_TMR0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_ADC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _USARTX_change_pol                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  0     0      0      22
                     _start_TMR0_ISR
                      _stop_TMR0_ISR
               i1_start_RX_USART_ISR
 ---------------------------------------------------------------------------------
 (5) i1_start_RX_USART_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _stop_TMR0_ISR                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _start_TMR0_ISR                                       1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _USARTX_change_pol
   _setup_ADC
   _setup_TMR0
   _start_RCM
   _start_RX_USART_ISR
   _start_TX_USART_ISR
   _sweep
     _calculate_checksum
     _lputs_ISR
       _close_RX_USART
     _measure
       _ADC_5
       _config
     _setFreq
     _setGain

 _isr (ROOT)
   _start_TMR0_ISR
   _stop_TMR0_ISR
   i1_start_RX_USART_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      53       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     1F      47       6       88.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      53       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Feb 15 13:36:12 2019

                    __CFG_CP$OFF 0000                    _USART_rx_data 002F                    _USART_rx_flag 0078  
                  _USART_tx_data 0020                    _USART_tx_flag 0079                              l121 0196  
                            l153 01D2                              l155 01D6                              l416 00D6  
                            l450 0227                              _GIE 005F                              _RA5 0065  
                            _PS0 04A8                              _PS1 04A9                              _PS2 04AA  
                   __CFG_CPD$OFF 0000                              u555 00CF                              u565 00E0  
                            u575 00EC                              _PSA 04AB                              u907 018F  
                            u917 0060                              u927 0074                              u937 00A1  
                            _isr 0004                     __CFG_BORV$HI 0000                              wreg 0009  
                   __CFG_IESO$ON 0000                   _USART_rx_index 003C                     __CFG_LVP$OFF 0000  
                 _USART_tx_index 007B                             l2005 01EE                             l2007 01FF  
                           l2031 00F9                             l2053 0117                             l2037 00FF  
                           l2117 01A2                             l2065 0124                             l2059 011E  
                           l2067 0128                             l1613 02AD                             l2069 012C  
                           l1703 0098                             l2097 0183                             l1559 01D7  
                           l1719 00C5                             l1673 0238                             l1675 0245  
                           l1999 01ED                             ?_isr 0070                             _ADGO 04E9  
                   __CFG_WDTE$ON 0000                             _BRGH 0CF2                             _CREN 0CEC  
                           _LATA 010C                             _LATC 010E                             _PEIE 005E  
                           _RCIE 048D                             _RCIF 008D                             _OERR 0CE9  
                           _SCKP 0CFC                             _TMR0 0015                             _SPEN 0CEF  
                           _TXIE 048C                             _TXEN 0CF5                             _TXIF 008C  
                           _SYNC 0CF4                             _WPUA 020C                             _WPUC 020E  
         __size_of_stop_TMR0_ISR 0003                     __CFG_WRT$OFF 0000                             _main 0183  
                           fsr0h 0005                             fsr1h 0007                             indf0 0000  
                           fsr0l 0004                             indf1 0001                             fsr1l 0006  
                           btemp 007E      __size_of_calculate_checksum 0012                             start 0048  
                  __CFG_MCLRE$ON 0000                            ??_isr 0071   __size_of_OSCILLATOR_Initialize 0006  
                _USART_tx_length 007A    __end_of_OSCILLATOR_Initialize 02B3                            ?_main 0070  
                          _ADC_5 0221                            _BRG16 0CFB                            i1l132 0011  
                          i1l133 0046                            i1l134 002E                            _RCREG 0199  
                          _PORTC 000E                            _TRISA 008C                   _start_TMR0_ISR 0282  
                          _TRISC 008E                            u94_27 0043                            _TXREG 019A  
                 __CFG_FCMEN$OFF 0000                            _gains 028C                  __end_of_measure 00EF  
                          _freqs 0277                  __end_of_setGain 0183                            _sweep 00EF  
                __end_of_setFreq 01CA    __size_ofi1_start_RX_USART_ISR 0011                   __CFG_BOREN$OFF 0000  
                          status 0003                            wtemp0 007E                  __initialization 0049  
                   __end_of_main 01AA                    _stop_TMR0_ISR 02BA                 ??_close_RX_USART 0071  
         __end_of_start_TMR0_ISR 028C                           ??_main 0077                           ?_ADC_5 0071  
                 _TIMER0_timeout 0039                   __CFG_PLLEN$OFF 0000                           _ADCON0 009D  
                         _ADCON1 009E                      measure@aux1 0052                      measure@aux2 0050  
                    measure@asic 0049                           _ADRESH 009C                           _ADRESL 009B  
                         _APFCON 011D                           _ANSELA 018C                           _ANSELC 018E  
                         ?_sweep 0070                           i1l1961 001D                           _OSCCON 0099  
                         _TMR0IE 005D                           _TMR0IF 005A                           _TMR0CS 04AD  
                         _SPBRGH 019C                           _SPBRGL 019B                   __CFG_PWRTE$OFF 0000  
                 __CFG_STVREN$ON 0000                   ?_stop_TMR0_ISR 0070                           _config 01CA  
                ?_start_TMR0_ISR 0070                        ??_measure 0075      __size_of_start_RX_USART_ISR 0010  
                      ??_setGain 0072                        ??_setFreq 0072                           sweep@I 005F  
                         sweep@Q 0061                           sweep@i 005D                _SYSTEM_Initialize 02BD  
        __end_of__initialization 0053               ?_SYSTEM_Initialize 0070                    __end_of_ADC_5 0235  
                 __pcstackCOMMON 0070              ??_SYSTEM_Initialize 0071                    __end_of_gains 0294  
                  __end_of_freqs 0282                    __end_of_sweep 0154                          ??_ADC_5 0073  
                 _OPTION_REGbits 0095      __size_of_start_TX_USART_ISR 000F                      setGain@asic 0073  
      __end_of_SYSTEM_Initialize 02BF                          ??_sweep 0077                       __pbssBANK0 0020  
                    setFreq@asic 0073                       __pmaintext 0183                  ??_stop_TMR0_ISR 0070  
                     __pintentry 0004                          ?_config 0071                     measure@value 004D  
                        _CLKRCON 039A               __size_of_lputs_ISR 001F                  lputs_ISR@length 0071  
              setFreq@freq_index 0071               __size_of_setup_ADC 0006                          _OSCSTAT 009A  
                        _OSCTUNE 0098               __size_of_start_RCM 0004                          _RXDTSEL 08EF  
                        _TXCKSEL 08EA       __end_of_calculate_checksum 0247     __end_ofi1_start_RX_USART_ISR 0258  
                __size_of_config 001F                          __ptext1 00EF                          __ptext2 0154  
                        __ptext3 01AA                          __ptext4 0056                          __ptext5 01CA  
                        __ptext6 0221                          __ptext7 01E9                          __ptext8 02A1  
                        __ptext9 0235                          _measure 0056            _OSCILLATOR_Initialize 02AD  
                   __size_of_isr 0044                          _setGain 0154                          _setFreq 01AA  
       ??_PIN_MANAGER_Initialize 0071                          config@i 0073                setGain@gain_index 0071  
     __size_of_SYSTEM_Initialize 0002                          clrloop0 029C                    _mess_rec_size 003B  
           end_of_initialization 0053                __end_of_lputs_ISR 0208                __end_of_setup_ADC 02AD  
               ??_start_TMR0_ISR 0070                __end_of_start_RCM 02B7                       _setup_TMR0 0294  
               __CFG_FOSC$INTOSC 0000                       config@conf 0071                   __end_of_config 01E9  
     __end_of_start_RX_USART_ISR 0268           ?_OSCILLATOR_Initialize 0070              start_initialization 0049  
__size_of_PIN_MANAGER_Initialize 0019                      __end_of_isr 0048          __size_of_close_RX_USART 0006  
              _USARTX_change_pol 02B7             i1_start_RX_USART_ISR 0247               ?_USARTX_change_pol 0070  
            ??_USARTX_change_pol 0071                   ADC_5@ADC_value 0073                         ??_config 0073  
                    ?_setup_TMR0 0070       __end_of_start_TX_USART_ISR 0277                      __pbssCOMMON 0078  
                      ___latbits 0000                    __pcstackBANK0 0048        __end_of_USARTX_change_pol 02BA  
                sweep@gain_index 0063            ?i1_start_RX_USART_ISR 0070                       setGain@aux 0072  
         _PIN_MANAGER_Initialize 0208                       setFreq@aux 0072            __end_of_stop_TMR0_ISR 02BD  
             _calculate_checksum 0235                   __size_of_ADC_5 0014              ?_calculate_checksum 0071  
                       ?_measure 0048                         ?_setGain 0071                         ?_setFreq 0071  
                  measure@offset 004B                  sweep@freq_index 005C                   __size_of_sweep 0065  
            __size_of_setup_TMR0 0007             ??_calculate_checksum 0072                        clear_ram0 029B  
                     lputs_ISR@i 0073                        _lputs_ISR 01E9                        _setup_ADC 02A7  
                      _start_RCM 02B3                        config@out 0074       __size_of_USARTX_change_pol 0003  
         ??i1_start_RX_USART_ISR 0070                   _close_RX_USART 02A1                       sweep@check 0054  
                     sweep@count 005E                       ?_lputs_ISR 0071          calculate_checksum@check 0073  
                     ?_setup_ADC 0070          ??_OSCILLATOR_Initialize 0071                start_TMR0_ISR@val 0070  
                     ?_start_RCM 0070           __end_of_close_RX_USART 02A7                 __size_of_measure 0099  
               __size_of_setGain 002F                 __size_of_setFreq 0020                         __ptext10 0268  
                       __ptext11 0258                         __ptext20 0247                         __ptext12 02B3  
                       __ptext21 02BA                         __ptext13 0294                         __ptext22 0282  
                       __ptext14 02A7                         __ptext15 02B7                         __ptext16 02BD  
                       __ptext17 0208                         __ptext18 02AD                    lputs_ISR@data 0074  
             _start_RX_USART_ISR 0258                    __size_of_main 0027                         _mess_rec 003E  
            ?_start_RX_USART_ISR 0070                         int$flags 007E                     ??_setup_TMR0 0071  
                    _TIMER0_flag 003D             ??_start_RX_USART_ISR 0071                         measure@I 004F  
        __size_of_start_TMR0_ISR 000A                         measure@Q 0048                  ?_close_RX_USART 0070  
                      sweep@asic 0064           calculate_checksum@data 0074                         intlevel1 0000  
             _start_TX_USART_ISR 0268          ?_PIN_MANAGER_Initialize 0070                __CFG_CLKOUTEN$OFF 0000  
             __end_of_setup_TMR0 029B              ?_start_TX_USART_ISR 0070                      ??_lputs_ISR 0072  
                    ??_setup_ADC 0071                         sweep@aux 0055                         sweep@ret 0066  
                  __pstringtext1 0277                    __pstringtext2 028C            calculate_checksum@num 0071  
                    ??_start_RCM 0071             ??_start_TX_USART_ISR 0071   __end_of_PIN_MANAGER_Initialize 0221  
            calculate_checksum@i 0075  
