

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon Nov 23 16:23:54 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og9 
     1                           	processor	16LF1823
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	dabs	1,0x7E,2
    36  0000                     
    37                           ; Version 2.10
    38                           ; Generated 31/07/2019 GMT
    39                           ; 
    40                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC16LF1823 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     	;# 
    72  0001                     	;# 
    73  0002                     	;# 
    74  0003                     	;# 
    75  0004                     	;# 
    76  0005                     	;# 
    77  0006                     	;# 
    78  0007                     	;# 
    79  0008                     	;# 
    80  0009                     	;# 
    81  000A                     	;# 
    82  000B                     	;# 
    83  000C                     	;# 
    84  000E                     	;# 
    85  0011                     	;# 
    86  0012                     	;# 
    87  0015                     	;# 
    88  0016                     	;# 
    89  0016                     	;# 
    90  0017                     	;# 
    91  0018                     	;# 
    92  0019                     	;# 
    93  001A                     	;# 
    94  001B                     	;# 
    95  001C                     	;# 
    96  001E                     	;# 
    97  001F                     	;# 
    98  008C                     	;# 
    99  008E                     	;# 
   100  0091                     	;# 
   101  0092                     	;# 
   102  0095                     	;# 
   103  0096                     	;# 
   104  0097                     	;# 
   105  0098                     	;# 
   106  0099                     	;# 
   107  009A                     	;# 
   108  009B                     	;# 
   109  009B                     	;# 
   110  009C                     	;# 
   111  009D                     	;# 
   112  009E                     	;# 
   113  010C                     	;# 
   114  010E                     	;# 
   115  0111                     	;# 
   116  0112                     	;# 
   117  0113                     	;# 
   118  0114                     	;# 
   119  0115                     	;# 
   120  0116                     	;# 
   121  0117                     	;# 
   122  0118                     	;# 
   123  0119                     	;# 
   124  011A                     	;# 
   125  011B                     	;# 
   126  011D                     	;# 
   127  011D                     	;# 
   128  018C                     	;# 
   129  018E                     	;# 
   130  0191                     	;# 
   131  0191                     	;# 
   132  0192                     	;# 
   133  0193                     	;# 
   134  0193                     	;# 
   135  0193                     	;# 
   136  0194                     	;# 
   137  0195                     	;# 
   138  0196                     	;# 
   139  0199                     	;# 
   140  019A                     	;# 
   141  019B                     	;# 
   142  019B                     	;# 
   143  019B                     	;# 
   144  019B                     	;# 
   145  019C                     	;# 
   146  019C                     	;# 
   147  019D                     	;# 
   148  019E                     	;# 
   149  019F                     	;# 
   150  020C                     	;# 
   151  020E                     	;# 
   152  0211                     	;# 
   153  0211                     	;# 
   154  0212                     	;# 
   155  0212                     	;# 
   156  0213                     	;# 
   157  0213                     	;# 
   158  0214                     	;# 
   159  0214                     	;# 
   160  0215                     	;# 
   161  0215                     	;# 
   162  0215                     	;# 
   163  0216                     	;# 
   164  0216                     	;# 
   165  0217                     	;# 
   166  0217                     	;# 
   167  0291                     	;# 
   168  0291                     	;# 
   169  0292                     	;# 
   170  0293                     	;# 
   171  0294                     	;# 
   172  0295                     	;# 
   173  0295                     	;# 
   174  0296                     	;# 
   175  0391                     	;# 
   176  0392                     	;# 
   177  0393                     	;# 
   178  039A                     	;# 
   179  039C                     	;# 
   180  039D                     	;# 
   181  039E                     	;# 
   182  039F                     	;# 
   183  0FE4                     	;# 
   184  0FE5                     	;# 
   185  0FE6                     	;# 
   186  0FE7                     	;# 
   187  0FE8                     	;# 
   188  0FE9                     	;# 
   189  0FEA                     	;# 
   190  0FEB                     	;# 
   191  0FED                     	;# 
   192  0FEE                     	;# 
   193  0FEF                     	;# 
   194  0000                     	;# 
   195  0001                     	;# 
   196  0002                     	;# 
   197  0003                     	;# 
   198  0004                     	;# 
   199  0005                     	;# 
   200  0006                     	;# 
   201  0007                     	;# 
   202  0008                     	;# 
   203  0009                     	;# 
   204  000A                     	;# 
   205  000B                     	;# 
   206  000C                     	;# 
   207  000E                     	;# 
   208  0011                     	;# 
   209  0012                     	;# 
   210  0015                     	;# 
   211  0016                     	;# 
   212  0016                     	;# 
   213  0017                     	;# 
   214  0018                     	;# 
   215  0019                     	;# 
   216  001A                     	;# 
   217  001B                     	;# 
   218  001C                     	;# 
   219  001E                     	;# 
   220  001F                     	;# 
   221  008C                     	;# 
   222  008E                     	;# 
   223  0091                     	;# 
   224  0092                     	;# 
   225  0095                     	;# 
   226  0096                     	;# 
   227  0097                     	;# 
   228  0098                     	;# 
   229  0099                     	;# 
   230  009A                     	;# 
   231  009B                     	;# 
   232  009B                     	;# 
   233  009C                     	;# 
   234  009D                     	;# 
   235  009E                     	;# 
   236  010C                     	;# 
   237  010E                     	;# 
   238  0111                     	;# 
   239  0112                     	;# 
   240  0113                     	;# 
   241  0114                     	;# 
   242  0115                     	;# 
   243  0116                     	;# 
   244  0117                     	;# 
   245  0118                     	;# 
   246  0119                     	;# 
   247  011A                     	;# 
   248  011B                     	;# 
   249  011D                     	;# 
   250  011D                     	;# 
   251  018C                     	;# 
   252  018E                     	;# 
   253  0191                     	;# 
   254  0191                     	;# 
   255  0192                     	;# 
   256  0193                     	;# 
   257  0193                     	;# 
   258  0193                     	;# 
   259  0194                     	;# 
   260  0195                     	;# 
   261  0196                     	;# 
   262  0199                     	;# 
   263  019A                     	;# 
   264  019B                     	;# 
   265  019B                     	;# 
   266  019B                     	;# 
   267  019B                     	;# 
   268  019C                     	;# 
   269  019C                     	;# 
   270  019D                     	;# 
   271  019E                     	;# 
   272  019F                     	;# 
   273  020C                     	;# 
   274  020E                     	;# 
   275  0211                     	;# 
   276  0211                     	;# 
   277  0212                     	;# 
   278  0212                     	;# 
   279  0213                     	;# 
   280  0213                     	;# 
   281  0214                     	;# 
   282  0214                     	;# 
   283  0215                     	;# 
   284  0215                     	;# 
   285  0215                     	;# 
   286  0216                     	;# 
   287  0216                     	;# 
   288  0217                     	;# 
   289  0217                     	;# 
   290  0291                     	;# 
   291  0291                     	;# 
   292  0292                     	;# 
   293  0293                     	;# 
   294  0294                     	;# 
   295  0295                     	;# 
   296  0295                     	;# 
   297  0296                     	;# 
   298  0391                     	;# 
   299  0392                     	;# 
   300  0393                     	;# 
   301  039A                     	;# 
   302  039C                     	;# 
   303  039D                     	;# 
   304  039E                     	;# 
   305  039F                     	;# 
   306  0FE4                     	;# 
   307  0FE5                     	;# 
   308  0FE6                     	;# 
   309  0FE7                     	;# 
   310  0FE8                     	;# 
   311  0FE9                     	;# 
   312  0FEA                     	;# 
   313  0FEB                     	;# 
   314  0FED                     	;# 
   315  0FEE                     	;# 
   316  0FEF                     	;# 
   317  0000                     	;# 
   318  0001                     	;# 
   319  0002                     	;# 
   320  0003                     	;# 
   321  0004                     	;# 
   322  0005                     	;# 
   323  0006                     	;# 
   324  0007                     	;# 
   325  0008                     	;# 
   326  0009                     	;# 
   327  000A                     	;# 
   328  000B                     	;# 
   329  000C                     	;# 
   330  000E                     	;# 
   331  0011                     	;# 
   332  0012                     	;# 
   333  0015                     	;# 
   334  0016                     	;# 
   335  0016                     	;# 
   336  0017                     	;# 
   337  0018                     	;# 
   338  0019                     	;# 
   339  001A                     	;# 
   340  001B                     	;# 
   341  001C                     	;# 
   342  001E                     	;# 
   343  001F                     	;# 
   344  008C                     	;# 
   345  008E                     	;# 
   346  0091                     	;# 
   347  0092                     	;# 
   348  0095                     	;# 
   349  0096                     	;# 
   350  0097                     	;# 
   351  0098                     	;# 
   352  0099                     	;# 
   353  009A                     	;# 
   354  009B                     	;# 
   355  009B                     	;# 
   356  009C                     	;# 
   357  009D                     	;# 
   358  009E                     	;# 
   359  010C                     	;# 
   360  010E                     	;# 
   361  0111                     	;# 
   362  0112                     	;# 
   363  0113                     	;# 
   364  0114                     	;# 
   365  0115                     	;# 
   366  0116                     	;# 
   367  0117                     	;# 
   368  0118                     	;# 
   369  0119                     	;# 
   370  011A                     	;# 
   371  011B                     	;# 
   372  011D                     	;# 
   373  011D                     	;# 
   374  018C                     	;# 
   375  018E                     	;# 
   376  0191                     	;# 
   377  0191                     	;# 
   378  0192                     	;# 
   379  0193                     	;# 
   380  0193                     	;# 
   381  0193                     	;# 
   382  0194                     	;# 
   383  0195                     	;# 
   384  0196                     	;# 
   385  0199                     	;# 
   386  019A                     	;# 
   387  019B                     	;# 
   388  019B                     	;# 
   389  019B                     	;# 
   390  019B                     	;# 
   391  019C                     	;# 
   392  019C                     	;# 
   393  019D                     	;# 
   394  019E                     	;# 
   395  019F                     	;# 
   396  020C                     	;# 
   397  020E                     	;# 
   398  0211                     	;# 
   399  0211                     	;# 
   400  0212                     	;# 
   401  0212                     	;# 
   402  0213                     	;# 
   403  0213                     	;# 
   404  0214                     	;# 
   405  0214                     	;# 
   406  0215                     	;# 
   407  0215                     	;# 
   408  0215                     	;# 
   409  0216                     	;# 
   410  0216                     	;# 
   411  0217                     	;# 
   412  0217                     	;# 
   413  0291                     	;# 
   414  0291                     	;# 
   415  0292                     	;# 
   416  0293                     	;# 
   417  0294                     	;# 
   418  0295                     	;# 
   419  0295                     	;# 
   420  0296                     	;# 
   421  0391                     	;# 
   422  0392                     	;# 
   423  0393                     	;# 
   424  039A                     	;# 
   425  039C                     	;# 
   426  039D                     	;# 
   427  039E                     	;# 
   428  039F                     	;# 
   429  0FE4                     	;# 
   430  0FE5                     	;# 
   431  0FE6                     	;# 
   432  0FE7                     	;# 
   433  0FE8                     	;# 
   434  0FE9                     	;# 
   435  0FEA                     	;# 
   436  0FEB                     	;# 
   437  0FED                     	;# 
   438  0FEE                     	;# 
   439  0FEF                     	;# 
   440  0000                     	;# 
   441  0001                     	;# 
   442  0002                     	;# 
   443  0003                     	;# 
   444  0004                     	;# 
   445  0005                     	;# 
   446  0006                     	;# 
   447  0007                     	;# 
   448  0008                     	;# 
   449  0009                     	;# 
   450  000A                     	;# 
   451  000B                     	;# 
   452  000C                     	;# 
   453  000E                     	;# 
   454  0011                     	;# 
   455  0012                     	;# 
   456  0015                     	;# 
   457  0016                     	;# 
   458  0016                     	;# 
   459  0017                     	;# 
   460  0018                     	;# 
   461  0019                     	;# 
   462  001A                     	;# 
   463  001B                     	;# 
   464  001C                     	;# 
   465  001E                     	;# 
   466  001F                     	;# 
   467  008C                     	;# 
   468  008E                     	;# 
   469  0091                     	;# 
   470  0092                     	;# 
   471  0095                     	;# 
   472  0096                     	;# 
   473  0097                     	;# 
   474  0098                     	;# 
   475  0099                     	;# 
   476  009A                     	;# 
   477  009B                     	;# 
   478  009B                     	;# 
   479  009C                     	;# 
   480  009D                     	;# 
   481  009E                     	;# 
   482  010C                     	;# 
   483  010E                     	;# 
   484  0111                     	;# 
   485  0112                     	;# 
   486  0113                     	;# 
   487  0114                     	;# 
   488  0115                     	;# 
   489  0116                     	;# 
   490  0117                     	;# 
   491  0118                     	;# 
   492  0119                     	;# 
   493  011A                     	;# 
   494  011B                     	;# 
   495  011D                     	;# 
   496  011D                     	;# 
   497  018C                     	;# 
   498  018E                     	;# 
   499  0191                     	;# 
   500  0191                     	;# 
   501  0192                     	;# 
   502  0193                     	;# 
   503  0193                     	;# 
   504  0193                     	;# 
   505  0194                     	;# 
   506  0195                     	;# 
   507  0196                     	;# 
   508  0199                     	;# 
   509  019A                     	;# 
   510  019B                     	;# 
   511  019B                     	;# 
   512  019B                     	;# 
   513  019B                     	;# 
   514  019C                     	;# 
   515  019C                     	;# 
   516  019D                     	;# 
   517  019E                     	;# 
   518  019F                     	;# 
   519  020C                     	;# 
   520  020E                     	;# 
   521  0211                     	;# 
   522  0211                     	;# 
   523  0212                     	;# 
   524  0212                     	;# 
   525  0213                     	;# 
   526  0213                     	;# 
   527  0214                     	;# 
   528  0214                     	;# 
   529  0215                     	;# 
   530  0215                     	;# 
   531  0215                     	;# 
   532  0216                     	;# 
   533  0216                     	;# 
   534  0217                     	;# 
   535  0217                     	;# 
   536  0291                     	;# 
   537  0291                     	;# 
   538  0292                     	;# 
   539  0293                     	;# 
   540  0294                     	;# 
   541  0295                     	;# 
   542  0295                     	;# 
   543  0296                     	;# 
   544  0391                     	;# 
   545  0392                     	;# 
   546  0393                     	;# 
   547  039A                     	;# 
   548  039C                     	;# 
   549  039D                     	;# 
   550  039E                     	;# 
   551  039F                     	;# 
   552  0FE4                     	;# 
   553  0FE5                     	;# 
   554  0FE6                     	;# 
   555  0FE7                     	;# 
   556  0FE8                     	;# 
   557  0FE9                     	;# 
   558  0FEA                     	;# 
   559  0FEB                     	;# 
   560  0FED                     	;# 
   561  0FEE                     	;# 
   562  0FEF                     	;# 
   563  0000                     	;# 
   564  0001                     	;# 
   565  0002                     	;# 
   566  0003                     	;# 
   567  0004                     	;# 
   568  0005                     	;# 
   569  0006                     	;# 
   570  0007                     	;# 
   571  0008                     	;# 
   572  0009                     	;# 
   573  000A                     	;# 
   574  000B                     	;# 
   575  000C                     	;# 
   576  000E                     	;# 
   577  0011                     	;# 
   578  0012                     	;# 
   579  0015                     	;# 
   580  0016                     	;# 
   581  0016                     	;# 
   582  0017                     	;# 
   583  0018                     	;# 
   584  0019                     	;# 
   585  001A                     	;# 
   586  001B                     	;# 
   587  001C                     	;# 
   588  001E                     	;# 
   589  001F                     	;# 
   590  008C                     	;# 
   591  008E                     	;# 
   592  0091                     	;# 
   593  0092                     	;# 
   594  0095                     	;# 
   595  0096                     	;# 
   596  0097                     	;# 
   597  0098                     	;# 
   598  0099                     	;# 
   599  009A                     	;# 
   600  009B                     	;# 
   601  009B                     	;# 
   602  009C                     	;# 
   603  009D                     	;# 
   604  009E                     	;# 
   605  010C                     	;# 
   606  010E                     	;# 
   607  0111                     	;# 
   608  0112                     	;# 
   609  0113                     	;# 
   610  0114                     	;# 
   611  0115                     	;# 
   612  0116                     	;# 
   613  0117                     	;# 
   614  0118                     	;# 
   615  0119                     	;# 
   616  011A                     	;# 
   617  011B                     	;# 
   618  011D                     	;# 
   619  011D                     	;# 
   620  018C                     	;# 
   621  018E                     	;# 
   622  0191                     	;# 
   623  0191                     	;# 
   624  0192                     	;# 
   625  0193                     	;# 
   626  0193                     	;# 
   627  0193                     	;# 
   628  0194                     	;# 
   629  0195                     	;# 
   630  0196                     	;# 
   631  0199                     	;# 
   632  019A                     	;# 
   633  019B                     	;# 
   634  019B                     	;# 
   635  019B                     	;# 
   636  019B                     	;# 
   637  019C                     	;# 
   638  019C                     	;# 
   639  019D                     	;# 
   640  019E                     	;# 
   641  019F                     	;# 
   642  020C                     	;# 
   643  020E                     	;# 
   644  0211                     	;# 
   645  0211                     	;# 
   646  0212                     	;# 
   647  0212                     	;# 
   648  0213                     	;# 
   649  0213                     	;# 
   650  0214                     	;# 
   651  0214                     	;# 
   652  0215                     	;# 
   653  0215                     	;# 
   654  0215                     	;# 
   655  0216                     	;# 
   656  0216                     	;# 
   657  0217                     	;# 
   658  0217                     	;# 
   659  0291                     	;# 
   660  0291                     	;# 
   661  0292                     	;# 
   662  0293                     	;# 
   663  0294                     	;# 
   664  0295                     	;# 
   665  0295                     	;# 
   666  0296                     	;# 
   667  0391                     	;# 
   668  0392                     	;# 
   669  0393                     	;# 
   670  039A                     	;# 
   671  039C                     	;# 
   672  039D                     	;# 
   673  039E                     	;# 
   674  039F                     	;# 
   675  0FE4                     	;# 
   676  0FE5                     	;# 
   677  0FE6                     	;# 
   678  0FE7                     	;# 
   679  0FE8                     	;# 
   680  0FE9                     	;# 
   681  0FEA                     	;# 
   682  0FEB                     	;# 
   683  0FED                     	;# 
   684  0FEE                     	;# 
   685  0FEF                     	;# 
   686  0000                     	;# 
   687  0001                     	;# 
   688  0002                     	;# 
   689  0003                     	;# 
   690  0004                     	;# 
   691  0005                     	;# 
   692  0006                     	;# 
   693  0007                     	;# 
   694  0008                     	;# 
   695  0009                     	;# 
   696  000A                     	;# 
   697  000B                     	;# 
   698  000C                     	;# 
   699  000E                     	;# 
   700  0011                     	;# 
   701  0012                     	;# 
   702  0015                     	;# 
   703  0016                     	;# 
   704  0016                     	;# 
   705  0017                     	;# 
   706  0018                     	;# 
   707  0019                     	;# 
   708  001A                     	;# 
   709  001B                     	;# 
   710  001C                     	;# 
   711  001E                     	;# 
   712  001F                     	;# 
   713  008C                     	;# 
   714  008E                     	;# 
   715  0091                     	;# 
   716  0092                     	;# 
   717  0095                     	;# 
   718  0096                     	;# 
   719  0097                     	;# 
   720  0098                     	;# 
   721  0099                     	;# 
   722  009A                     	;# 
   723  009B                     	;# 
   724  009B                     	;# 
   725  009C                     	;# 
   726  009D                     	;# 
   727  009E                     	;# 
   728  010C                     	;# 
   729  010E                     	;# 
   730  0111                     	;# 
   731  0112                     	;# 
   732  0113                     	;# 
   733  0114                     	;# 
   734  0115                     	;# 
   735  0116                     	;# 
   736  0117                     	;# 
   737  0118                     	;# 
   738  0119                     	;# 
   739  011A                     	;# 
   740  011B                     	;# 
   741  011D                     	;# 
   742  011D                     	;# 
   743  018C                     	;# 
   744  018E                     	;# 
   745  0191                     	;# 
   746  0191                     	;# 
   747  0192                     	;# 
   748  0193                     	;# 
   749  0193                     	;# 
   750  0193                     	;# 
   751  0194                     	;# 
   752  0195                     	;# 
   753  0196                     	;# 
   754  0199                     	;# 
   755  019A                     	;# 
   756  019B                     	;# 
   757  019B                     	;# 
   758  019B                     	;# 
   759  019B                     	;# 
   760  019C                     	;# 
   761  019C                     	;# 
   762  019D                     	;# 
   763  019E                     	;# 
   764  019F                     	;# 
   765  020C                     	;# 
   766  020E                     	;# 
   767  0211                     	;# 
   768  0211                     	;# 
   769  0212                     	;# 
   770  0212                     	;# 
   771  0213                     	;# 
   772  0213                     	;# 
   773  0214                     	;# 
   774  0214                     	;# 
   775  0215                     	;# 
   776  0215                     	;# 
   777  0215                     	;# 
   778  0216                     	;# 
   779  0216                     	;# 
   780  0217                     	;# 
   781  0217                     	;# 
   782  0291                     	;# 
   783  0291                     	;# 
   784  0292                     	;# 
   785  0293                     	;# 
   786  0294                     	;# 
   787  0295                     	;# 
   788  0295                     	;# 
   789  0296                     	;# 
   790  0391                     	;# 
   791  0392                     	;# 
   792  0393                     	;# 
   793  039A                     	;# 
   794  039C                     	;# 
   795  039D                     	;# 
   796  039E                     	;# 
   797  039F                     	;# 
   798  0FE4                     	;# 
   799  0FE5                     	;# 
   800  0FE6                     	;# 
   801  0FE7                     	;# 
   802  0FE8                     	;# 
   803  0FE9                     	;# 
   804  0FEA                     	;# 
   805  0FEB                     	;# 
   806  0FED                     	;# 
   807  0FEE                     	;# 
   808  0FEF                     	;# 
   809  0000                     	;# 
   810  0001                     	;# 
   811  0002                     	;# 
   812  0003                     	;# 
   813  0004                     	;# 
   814  0005                     	;# 
   815  0006                     	;# 
   816  0007                     	;# 
   817  0008                     	;# 
   818  0009                     	;# 
   819  000A                     	;# 
   820  000B                     	;# 
   821  000C                     	;# 
   822  000E                     	;# 
   823  0011                     	;# 
   824  0012                     	;# 
   825  0015                     	;# 
   826  0016                     	;# 
   827  0016                     	;# 
   828  0017                     	;# 
   829  0018                     	;# 
   830  0019                     	;# 
   831  001A                     	;# 
   832  001B                     	;# 
   833  001C                     	;# 
   834  001E                     	;# 
   835  001F                     	;# 
   836  008C                     	;# 
   837  008E                     	;# 
   838  0091                     	;# 
   839  0092                     	;# 
   840  0095                     	;# 
   841  0096                     	;# 
   842  0097                     	;# 
   843  0098                     	;# 
   844  0099                     	;# 
   845  009A                     	;# 
   846  009B                     	;# 
   847  009B                     	;# 
   848  009C                     	;# 
   849  009D                     	;# 
   850  009E                     	;# 
   851  010C                     	;# 
   852  010E                     	;# 
   853  0111                     	;# 
   854  0112                     	;# 
   855  0113                     	;# 
   856  0114                     	;# 
   857  0115                     	;# 
   858  0116                     	;# 
   859  0117                     	;# 
   860  0118                     	;# 
   861  0119                     	;# 
   862  011A                     	;# 
   863  011B                     	;# 
   864  011D                     	;# 
   865  011D                     	;# 
   866  018C                     	;# 
   867  018E                     	;# 
   868  0191                     	;# 
   869  0191                     	;# 
   870  0192                     	;# 
   871  0193                     	;# 
   872  0193                     	;# 
   873  0193                     	;# 
   874  0194                     	;# 
   875  0195                     	;# 
   876  0196                     	;# 
   877  0199                     	;# 
   878  019A                     	;# 
   879  019B                     	;# 
   880  019B                     	;# 
   881  019B                     	;# 
   882  019B                     	;# 
   883  019C                     	;# 
   884  019C                     	;# 
   885  019D                     	;# 
   886  019E                     	;# 
   887  019F                     	;# 
   888  020C                     	;# 
   889  020E                     	;# 
   890  0211                     	;# 
   891  0211                     	;# 
   892  0212                     	;# 
   893  0212                     	;# 
   894  0213                     	;# 
   895  0213                     	;# 
   896  0214                     	;# 
   897  0214                     	;# 
   898  0215                     	;# 
   899  0215                     	;# 
   900  0215                     	;# 
   901  0216                     	;# 
   902  0216                     	;# 
   903  0217                     	;# 
   904  0217                     	;# 
   905  0291                     	;# 
   906  0291                     	;# 
   907  0292                     	;# 
   908  0293                     	;# 
   909  0294                     	;# 
   910  0295                     	;# 
   911  0295                     	;# 
   912  0296                     	;# 
   913  0391                     	;# 
   914  0392                     	;# 
   915  0393                     	;# 
   916  039A                     	;# 
   917  039C                     	;# 
   918  039D                     	;# 
   919  039E                     	;# 
   920  039F                     	;# 
   921  0FE4                     	;# 
   922  0FE5                     	;# 
   923  0FE6                     	;# 
   924  0FE7                     	;# 
   925  0FE8                     	;# 
   926  0FE9                     	;# 
   927  0FEA                     	;# 
   928  0FEB                     	;# 
   929  0FED                     	;# 
   930  0FEE                     	;# 
   931  0FEF                     	;# 
   932  0000                     	;# 
   933  0001                     	;# 
   934  0002                     	;# 
   935  0003                     	;# 
   936  0004                     	;# 
   937  0005                     	;# 
   938  0006                     	;# 
   939  0007                     	;# 
   940  0008                     	;# 
   941  0009                     	;# 
   942  000A                     	;# 
   943  000B                     	;# 
   944  000C                     	;# 
   945  000E                     	;# 
   946  0011                     	;# 
   947  0012                     	;# 
   948  0015                     	;# 
   949  0016                     	;# 
   950  0016                     	;# 
   951  0017                     	;# 
   952  0018                     	;# 
   953  0019                     	;# 
   954  001A                     	;# 
   955  001B                     	;# 
   956  001C                     	;# 
   957  001E                     	;# 
   958  001F                     	;# 
   959  008C                     	;# 
   960  008E                     	;# 
   961  0091                     	;# 
   962  0092                     	;# 
   963  0095                     	;# 
   964  0096                     	;# 
   965  0097                     	;# 
   966  0098                     	;# 
   967  0099                     	;# 
   968  009A                     	;# 
   969  009B                     	;# 
   970  009B                     	;# 
   971  009C                     	;# 
   972  009D                     	;# 
   973  009E                     	;# 
   974  010C                     	;# 
   975  010E                     	;# 
   976  0111                     	;# 
   977  0112                     	;# 
   978  0113                     	;# 
   979  0114                     	;# 
   980  0115                     	;# 
   981  0116                     	;# 
   982  0117                     	;# 
   983  0118                     	;# 
   984  0119                     	;# 
   985  011A                     	;# 
   986  011B                     	;# 
   987  011D                     	;# 
   988  011D                     	;# 
   989  018C                     	;# 
   990  018E                     	;# 
   991  0191                     	;# 
   992  0191                     	;# 
   993  0192                     	;# 
   994  0193                     	;# 
   995  0193                     	;# 
   996  0193                     	;# 
   997  0194                     	;# 
   998  0195                     	;# 
   999  0196                     	;# 
  1000  0199                     	;# 
  1001  019A                     	;# 
  1002  019B                     	;# 
  1003  019B                     	;# 
  1004  019B                     	;# 
  1005  019B                     	;# 
  1006  019C                     	;# 
  1007  019C                     	;# 
  1008  019D                     	;# 
  1009  019E                     	;# 
  1010  019F                     	;# 
  1011  020C                     	;# 
  1012  020E                     	;# 
  1013  0211                     	;# 
  1014  0211                     	;# 
  1015  0212                     	;# 
  1016  0212                     	;# 
  1017  0213                     	;# 
  1018  0213                     	;# 
  1019  0214                     	;# 
  1020  0214                     	;# 
  1021  0215                     	;# 
  1022  0215                     	;# 
  1023  0215                     	;# 
  1024  0216                     	;# 
  1025  0216                     	;# 
  1026  0217                     	;# 
  1027  0217                     	;# 
  1028  0291                     	;# 
  1029  0291                     	;# 
  1030  0292                     	;# 
  1031  0293                     	;# 
  1032  0294                     	;# 
  1033  0295                     	;# 
  1034  0295                     	;# 
  1035  0296                     	;# 
  1036  0391                     	;# 
  1037  0392                     	;# 
  1038  0393                     	;# 
  1039  039A                     	;# 
  1040  039C                     	;# 
  1041  039D                     	;# 
  1042  039E                     	;# 
  1043  039F                     	;# 
  1044  0FE4                     	;# 
  1045  0FE5                     	;# 
  1046  0FE6                     	;# 
  1047  0FE7                     	;# 
  1048  0FE8                     	;# 
  1049  0FE9                     	;# 
  1050  0FEA                     	;# 
  1051  0FEB                     	;# 
  1052  0FED                     	;# 
  1053  0FEE                     	;# 
  1054  0FEF                     	;# 
  1055  0000                     	;# 
  1056  0001                     	;# 
  1057  0002                     	;# 
  1058  0003                     	;# 
  1059  0004                     	;# 
  1060  0005                     	;# 
  1061  0006                     	;# 
  1062  0007                     	;# 
  1063  0008                     	;# 
  1064  0009                     	;# 
  1065  000A                     	;# 
  1066  000B                     	;# 
  1067  000C                     	;# 
  1068  000E                     	;# 
  1069  0011                     	;# 
  1070  0012                     	;# 
  1071  0015                     	;# 
  1072  0016                     	;# 
  1073  0016                     	;# 
  1074  0017                     	;# 
  1075  0018                     	;# 
  1076  0019                     	;# 
  1077  001A                     	;# 
  1078  001B                     	;# 
  1079  001C                     	;# 
  1080  001E                     	;# 
  1081  001F                     	;# 
  1082  008C                     	;# 
  1083  008E                     	;# 
  1084  0091                     	;# 
  1085  0092                     	;# 
  1086  0095                     	;# 
  1087  0096                     	;# 
  1088  0097                     	;# 
  1089  0098                     	;# 
  1090  0099                     	;# 
  1091  009A                     	;# 
  1092  009B                     	;# 
  1093  009B                     	;# 
  1094  009C                     	;# 
  1095  009D                     	;# 
  1096  009E                     	;# 
  1097  010C                     	;# 
  1098  010E                     	;# 
  1099  0111                     	;# 
  1100  0112                     	;# 
  1101  0113                     	;# 
  1102  0114                     	;# 
  1103  0115                     	;# 
  1104  0116                     	;# 
  1105  0117                     	;# 
  1106  0118                     	;# 
  1107  0119                     	;# 
  1108  011A                     	;# 
  1109  011B                     	;# 
  1110  011D                     	;# 
  1111  011D                     	;# 
  1112  018C                     	;# 
  1113  018E                     	;# 
  1114  0191                     	;# 
  1115  0191                     	;# 
  1116  0192                     	;# 
  1117  0193                     	;# 
  1118  0193                     	;# 
  1119  0193                     	;# 
  1120  0194                     	;# 
  1121  0195                     	;# 
  1122  0196                     	;# 
  1123  0199                     	;# 
  1124  019A                     	;# 
  1125  019B                     	;# 
  1126  019B                     	;# 
  1127  019B                     	;# 
  1128  019B                     	;# 
  1129  019C                     	;# 
  1130  019C                     	;# 
  1131  019D                     	;# 
  1132  019E                     	;# 
  1133  019F                     	;# 
  1134  020C                     	;# 
  1135  020E                     	;# 
  1136  0211                     	;# 
  1137  0211                     	;# 
  1138  0212                     	;# 
  1139  0212                     	;# 
  1140  0213                     	;# 
  1141  0213                     	;# 
  1142  0214                     	;# 
  1143  0214                     	;# 
  1144  0215                     	;# 
  1145  0215                     	;# 
  1146  0215                     	;# 
  1147  0216                     	;# 
  1148  0216                     	;# 
  1149  0217                     	;# 
  1150  0217                     	;# 
  1151  0291                     	;# 
  1152  0291                     	;# 
  1153  0292                     	;# 
  1154  0293                     	;# 
  1155  0294                     	;# 
  1156  0295                     	;# 
  1157  0295                     	;# 
  1158  0296                     	;# 
  1159  0391                     	;# 
  1160  0392                     	;# 
  1161  0393                     	;# 
  1162  039A                     	;# 
  1163  039C                     	;# 
  1164  039D                     	;# 
  1165  039E                     	;# 
  1166  039F                     	;# 
  1167  0FE4                     	;# 
  1168  0FE5                     	;# 
  1169  0FE6                     	;# 
  1170  0FE7                     	;# 
  1171  0FE8                     	;# 
  1172  0FE9                     	;# 
  1173  0FEA                     	;# 
  1174  0FEB                     	;# 
  1175  0FED                     	;# 
  1176  0FEE                     	;# 
  1177  0FEF                     	;# 
  1178  0000                     	;# 
  1179  0001                     	;# 
  1180  0002                     	;# 
  1181  0003                     	;# 
  1182  0004                     	;# 
  1183  0005                     	;# 
  1184  0006                     	;# 
  1185  0007                     	;# 
  1186  0008                     	;# 
  1187  0009                     	;# 
  1188  000A                     	;# 
  1189  000B                     	;# 
  1190  000C                     	;# 
  1191  000E                     	;# 
  1192  0011                     	;# 
  1193  0012                     	;# 
  1194  0015                     	;# 
  1195  0016                     	;# 
  1196  0016                     	;# 
  1197  0017                     	;# 
  1198  0018                     	;# 
  1199  0019                     	;# 
  1200  001A                     	;# 
  1201  001B                     	;# 
  1202  001C                     	;# 
  1203  001E                     	;# 
  1204  001F                     	;# 
  1205  008C                     	;# 
  1206  008E                     	;# 
  1207  0091                     	;# 
  1208  0092                     	;# 
  1209  0095                     	;# 
  1210  0096                     	;# 
  1211  0097                     	;# 
  1212  0098                     	;# 
  1213  0099                     	;# 
  1214  009A                     	;# 
  1215  009B                     	;# 
  1216  009B                     	;# 
  1217  009C                     	;# 
  1218  009D                     	;# 
  1219  009E                     	;# 
  1220  010C                     	;# 
  1221  010E                     	;# 
  1222  0111                     	;# 
  1223  0112                     	;# 
  1224  0113                     	;# 
  1225  0114                     	;# 
  1226  0115                     	;# 
  1227  0116                     	;# 
  1228  0117                     	;# 
  1229  0118                     	;# 
  1230  0119                     	;# 
  1231  011A                     	;# 
  1232  011B                     	;# 
  1233  011D                     	;# 
  1234  011D                     	;# 
  1235  018C                     	;# 
  1236  018E                     	;# 
  1237  0191                     	;# 
  1238  0191                     	;# 
  1239  0192                     	;# 
  1240  0193                     	;# 
  1241  0193                     	;# 
  1242  0193                     	;# 
  1243  0194                     	;# 
  1244  0195                     	;# 
  1245  0196                     	;# 
  1246  0199                     	;# 
  1247  019A                     	;# 
  1248  019B                     	;# 
  1249  019B                     	;# 
  1250  019B                     	;# 
  1251  019B                     	;# 
  1252  019C                     	;# 
  1253  019C                     	;# 
  1254  019D                     	;# 
  1255  019E                     	;# 
  1256  019F                     	;# 
  1257  020C                     	;# 
  1258  020E                     	;# 
  1259  0211                     	;# 
  1260  0211                     	;# 
  1261  0212                     	;# 
  1262  0212                     	;# 
  1263  0213                     	;# 
  1264  0213                     	;# 
  1265  0214                     	;# 
  1266  0214                     	;# 
  1267  0215                     	;# 
  1268  0215                     	;# 
  1269  0215                     	;# 
  1270  0216                     	;# 
  1271  0216                     	;# 
  1272  0217                     	;# 
  1273  0217                     	;# 
  1274  0291                     	;# 
  1275  0291                     	;# 
  1276  0292                     	;# 
  1277  0293                     	;# 
  1278  0294                     	;# 
  1279  0295                     	;# 
  1280  0295                     	;# 
  1281  0296                     	;# 
  1282  0391                     	;# 
  1283  0392                     	;# 
  1284  0393                     	;# 
  1285  039A                     	;# 
  1286  039C                     	;# 
  1287  039D                     	;# 
  1288  039E                     	;# 
  1289  039F                     	;# 
  1290  0FE4                     	;# 
  1291  0FE5                     	;# 
  1292  0FE6                     	;# 
  1293  0FE7                     	;# 
  1294  0FE8                     	;# 
  1295  0FE9                     	;# 
  1296  0FEA                     	;# 
  1297  0FEB                     	;# 
  1298  0FED                     	;# 
  1299  0FEE                     	;# 
  1300  0FEF                     	;# 
  1301                           
  1302                           	psect	stringtext1
  1303  0215                     __pstringtext1:	
  1304  0215                     _filt:	
  1305  0215  34C7               	retlw	199
  1306  0216  3440               	retlw	64
  1307  0217  3400               	retlw	0
  1308  0218  3400               	retlw	0
  1309  0219  34CF               	retlw	207
  1310  021A  3440               	retlw	64
  1311  021B  3400               	retlw	0
  1312  021C  3400               	retlw	0
  1313  021D  346F               	retlw	111
  1314  021E  3440               	retlw	64
  1315  021F  3400               	retlw	0
  1316  0220  3400               	retlw	0
  1317  0221  343F               	retlw	63
  1318  0222  3440               	retlw	64
  1319  0223  3400               	retlw	0
  1320  0224  3400               	retlw	0
  1321  0225  340F               	retlw	15
  1322  0226  3489               	retlw	137
  1323  0227  3400               	retlw	0
  1324  0228  3400               	retlw	0
  1325  0229  340F               	retlw	15
  1326  022A  3488               	retlw	136
  1327  022B  3400               	retlw	0
  1328  022C  3400               	retlw	0
  1329  022D  340F               	retlw	15
  1330  022E  34A4               	retlw	164
  1331  022F  3400               	retlw	0
  1332  0230  3400               	retlw	0
  1333  0231  340F               	retlw	15
  1334  0232  3409               	retlw	9
  1335  0233  3401               	retlw	1
  1336  0234  3400               	retlw	0
  1337  0235  340F               	retlw	15
  1338  0236  3408               	retlw	8
  1339  0237  3401               	retlw	1
  1340  0238  3400               	retlw	0
  1341  0239  340F               	retlw	15
  1342  023A  3424               	retlw	36
  1343  023B  3401               	retlw	1
  1344  023C  3400               	retlw	0
  1345  023D  340F               	retlw	15
  1346  023E  3432               	retlw	50
  1347  023F  3401               	retlw	1
  1348  0240  3400               	retlw	0
  1349  0241                     __end_of_filt:	
  1350                           
  1351                           	psect	stringtext2
  1352  034E                     __pstringtext2:	
  1353  034E                     _freqs:	
  1354  034E  3400               	retlw	0
  1355  034F  3401               	retlw	1
  1356  0350  3402               	retlw	2
  1357  0351  3403               	retlw	3
  1358  0352  3404               	retlw	4
  1359  0353  3405               	retlw	5
  1360  0354  3406               	retlw	6
  1361  0355  3407               	retlw	7
  1362  0356  3408               	retlw	8
  1363  0357  3409               	retlw	9
  1364  0358  340A               	retlw	10
  1365  0359                     __end_of_freqs:	
  1366                           
  1367                           	psect	stringtext3
  1368  0359                     __pstringtext3:	
  1369  0359                     _gains:	
  1370  0359  3404               	retlw	4
  1371  035A  3405               	retlw	5
  1372  035B  3407               	retlw	7
  1373  035C  3403               	retlw	3
  1374  035D  3423               	retlw	35
  1375  035E  3463               	retlw	99
  1376  035F  346B               	retlw	107
  1377  0360  347B               	retlw	123
  1378  0361                     __end_of_gains:	
  1379  000E                     _PORTC	set	14
  1380  0015                     _TMR0	set	21
  1381  005E                     _PEIE	set	94
  1382  005F                     _GIE	set	95
  1383  008C                     _TXIF	set	140
  1384  008D                     _RCIF	set	141
  1385  005D                     _TMR0IE	set	93
  1386  005A                     _TMR0IF	set	90
  1387  0065                     _RA5	set	101
  1388  009B                     _ADRESL	set	155
  1389  009C                     _ADRESH	set	156
  1390  009E                     _ADCON1	set	158
  1391  009D                     _ADCON0	set	157
  1392  0098                     _OSCTUNE	set	152
  1393  009A                     _OSCSTAT	set	154
  1394  0099                     _OSCCON	set	153
  1395  0095                     _OPTION_REGbits	set	149
  1396  008C                     _TRISA	set	140
  1397  008E                     _TRISC	set	142
  1398  04E9                     _ADGO	set	1257
  1399  048D                     _RCIE	set	1165
  1400  04AD                     _TMR0CS	set	1197
  1401  04AB                     _PSA	set	1195
  1402  04A8                     _PS0	set	1192
  1403  04A9                     _PS1	set	1193
  1404  04AA                     _PS2	set	1194
  1405  048C                     _TXIE	set	1164
  1406  011D                     _APFCON	set	285
  1407  010E                     _LATC	set	270
  1408  010C                     _LATA	set	268
  1409  08EA                     _TXCKSEL	set	2282
  1410  08EF                     _RXDTSEL	set	2287
  1411  019B                     _SPBRGL	set	411
  1412  019C                     _SPBRGH	set	412
  1413  019A                     _TXREG	set	410
  1414  0199                     _RCREG	set	409
  1415  018E                     _ANSELC	set	398
  1416  018C                     _ANSELA	set	396
  1417  0CF5                     _TXEN	set	3317
  1418  0CEF                     _SPEN	set	3311
  1419  0CF4                     _SYNC	set	3316
  1420  0CFB                     _BRG16	set	3323
  1421  0CF2                     _BRGH	set	3314
  1422  0CEC                     _CREN	set	3308
  1423  0CE9                     _OERR	set	3305
  1424  020E                     _WPUC	set	526
  1425  020C                     _WPUA	set	524
  1426  039A                     _CLKRCON	set	922
  1427                           
  1428                           ; #config settings
  1429  0000                     
  1430                           	psect	cinit
  1431  0053                     start_initialization:	
  1432  0053                     __initialization:	
  1433                           
  1434                           ; Clear objects allocated to COMMON
  1435  0053  01F6               	clrf	__pbssCOMMON& (0+127)
  1436  0054  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1437  0055  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1438  0056  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1439                           
  1440                           ; Clear objects allocated to BANK0
  1441  0057  3020               	movlw	low __pbssBANK0
  1442  0058  0084               	movwf	4
  1443  0059  3000               	movlw	high __pbssBANK0
  1444  005A  0085               	movwf	5
  1445  005B  3028               	movlw	40
  1446  005C  2368               	fcall	clear_ram0
  1447  005D                     end_of_initialization:	
  1448                           ;End of C runtime variable initialization code
  1449                           
  1450  005D                     __end_of__initialization:	
  1451  005D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1452  005E  0020               	movlb	0
  1453  005F  2A41               	ljmp	_main	;jump to C main() function
  1454                           
  1455                           	psect	bssCOMMON
  1456  0076                     __pbssCOMMON:	
  1457  0076                     _USART_rx_flag:	
  1458  0076                     	ds	1
  1459  0077                     _USART_tx_flag:	
  1460  0077                     	ds	1
  1461  0078                     _USART_tx_length:	
  1462  0078                     	ds	1
  1463  0079                     _USART_tx_index:	
  1464  0079                     	ds	1
  1465                           
  1466                           	psect	bssBANK0
  1467  0020                     __pbssBANK0:	
  1468  0020                     _USART_tx_data:	
  1469  0020                     	ds	15
  1470  002F                     _USART_rx_data:	
  1471  002F                     	ds	10
  1472  0039                     _TIMER0_timeout:	
  1473  0039                     	ds	2
  1474  003B                     _mess_rec_size:	
  1475  003B                     	ds	1
  1476  003C                     _USART_rx_index:	
  1477  003C                     	ds	1
  1478  003D                     _TIMER0_flag:	
  1479  003D                     	ds	1
  1480  003E                     _mess_rec:	
  1481  003E                     	ds	10
  1482                           
  1483                           	psect	clrtext
  1484  0368                     clear_ram0:	
  1485                           ;	Called with FSR0 containing the base address, and
  1486                           ;	WREG with the size to clear
  1487                           
  1488  0368  0064               	clrwdt	;clear the watchdog before getting into this loop
  1489  0369                     clrloop0:	
  1490  0369  0180               	clrf	0	;clear RAM location pointed to by FSR
  1491  036A  3101               	addfsr 0,1
  1492  036B  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1493  036C  2B69               	goto	clrloop0	;have we reached the end yet?
  1494  036D  3400               	retlw	0	;all done for this memory range, return
  1495                           
  1496                           	psect	cstackCOMMON
  1497  0070                     __pcstackCOMMON:	
  1498  0070                     ?_OSCILLATOR_Initialize:	
  1499  0070                     ?_setup_TMR0:	
  1500                           ; 1 bytes @ 0x0
  1501                           
  1502  0070                     ?_start_TX_USART_ISR:	
  1503                           ; 1 bytes @ 0x0
  1504                           
  1505  0070                     ?_start_RX_USART_ISR:	
  1506                           ; 1 bytes @ 0x0
  1507                           
  1508  0070                     ?_start_RCM:	
  1509                           ; 1 bytes @ 0x0
  1510                           
  1511  0070                     ?_setup_ADC:	
  1512                           ; 1 bytes @ 0x0
  1513                           
  1514  0070                     ?_sweep:	
  1515                           ; 1 bytes @ 0x0
  1516                           
  1517  0070                     ?_stop_TMR0_ISR:	
  1518                           ; 1 bytes @ 0x0
  1519                           
  1520  0070                     ??_stop_TMR0_ISR:	
  1521                           ; 1 bytes @ 0x0
  1522                           
  1523  0070                     ?_start_TMR0_ISR:	
  1524                           ; 1 bytes @ 0x0
  1525                           
  1526  0070                     ??_start_TMR0_ISR:	
  1527                           ; 1 bytes @ 0x0
  1528                           
  1529  0070                     ?_PIN_MANAGER_Initialize:	
  1530                           ; 1 bytes @ 0x0
  1531                           
  1532  0070                     ?_SYSTEM_Initialize:	
  1533                           ; 1 bytes @ 0x0
  1534                           
  1535  0070                     ?_main:	
  1536                           ; 1 bytes @ 0x0
  1537                           
  1538  0070                     ?_isr:	
  1539                           ; 1 bytes @ 0x0
  1540                           
  1541  0070                     ?_close_RX_USART:	
  1542                           ; 1 bytes @ 0x0
  1543                           
  1544  0070                     ?i1_start_RX_USART_ISR:	
  1545                           ; 1 bytes @ 0x0
  1546                           
  1547  0070                     ??i1_start_RX_USART_ISR:	
  1548                           ; 1 bytes @ 0x0
  1549                           
  1550                           
  1551                           ; 1 bytes @ 0x0
  1552  0070                     	ds	2
  1553  0072                     start_TMR0_ISR@val:	
  1554                           
  1555                           ; 1 bytes @ 0x2
  1556  0072                     	ds	1
  1557  0073                     ??_isr:	
  1558                           
  1559                           ; 1 bytes @ 0x3
  1560  0073                     	ds	1
  1561  0074                     ??_OSCILLATOR_Initialize:	
  1562  0074                     ??_setup_TMR0:	
  1563                           ; 1 bytes @ 0x4
  1564                           
  1565  0074                     ??_start_TX_USART_ISR:	
  1566                           ; 1 bytes @ 0x4
  1567                           
  1568  0074                     ??_start_RX_USART_ISR:	
  1569                           ; 1 bytes @ 0x4
  1570                           
  1571  0074                     ??_start_RCM:	
  1572                           ; 1 bytes @ 0x4
  1573                           
  1574  0074                     ??_setup_ADC:	
  1575                           ; 1 bytes @ 0x4
  1576                           
  1577  0074                     ??_PIN_MANAGER_Initialize:	
  1578                           ; 1 bytes @ 0x4
  1579                           
  1580  0074                     ??_SYSTEM_Initialize:	
  1581                           ; 1 bytes @ 0x4
  1582                           
  1583  0074                     ?_config:	
  1584                           ; 1 bytes @ 0x4
  1585                           
  1586  0074                     ?_setGain:	
  1587                           ; 1 bytes @ 0x4
  1588                           
  1589  0074                     ?_setFreq:	
  1590                           ; 1 bytes @ 0x4
  1591                           
  1592  0074                     ??_close_RX_USART:	
  1593                           ; 1 bytes @ 0x4
  1594                           
  1595  0074                     ?_lputs_ISR:	
  1596                           ; 1 bytes @ 0x4
  1597                           
  1598  0074                     ?_calculate_checksum:	
  1599                           ; 1 bytes @ 0x4
  1600                           
  1601  0074                     ?_ADC_5:	
  1602                           ; 1 bytes @ 0x4
  1603                           
  1604  0074                     setGain@gain_index:	
  1605                           ; 2 bytes @ 0x4
  1606                           
  1607  0074                     setFreq@freq_index:	
  1608                           ; 1 bytes @ 0x4
  1609                           
  1610  0074                     lputs_ISR@length:	
  1611                           ; 1 bytes @ 0x4
  1612                           
  1613  0074                     calculate_checksum@num:	
  1614                           ; 1 bytes @ 0x4
  1615                           
  1616  0074                     config@conf:	
  1617                           ; 1 bytes @ 0x4
  1618                           
  1619                           
  1620                           ; 2 bytes @ 0x4
  1621  0074                     	ds	1
  1622  0075                     ??_setGain:	
  1623  0075                     ??_setFreq:	
  1624                           ; 1 bytes @ 0x5
  1625                           
  1626                           
  1627                           ; 1 bytes @ 0x5
  1628  0075                     	ds	1
  1629                           
  1630                           	psect	cstackBANK0
  1631  0048                     __pcstackBANK0:	
  1632  0048                     ??_ADC_5:	
  1633  0048                     ??_config:	
  1634                           ; 1 bytes @ 0x0
  1635                           
  1636  0048                     ??_lputs_ISR:	
  1637                           ; 1 bytes @ 0x0
  1638                           
  1639  0048                     ??_calculate_checksum:	
  1640                           ; 1 bytes @ 0x0
  1641                           
  1642  0048                     setGain@aux:	
  1643                           ; 1 bytes @ 0x0
  1644                           
  1645  0048                     setFreq@asic:	
  1646                           ; 1 bytes @ 0x0
  1647                           
  1648                           
  1649                           ; 1 bytes @ 0x0
  1650  0048                     	ds	1
  1651  0049                     config@i:	
  1652  0049                     setGain@asic:	
  1653                           ; 1 bytes @ 0x1
  1654                           
  1655  0049                     setFreq@aux:	
  1656                           ; 1 bytes @ 0x1
  1657                           
  1658                           
  1659                           ; 1 bytes @ 0x1
  1660  0049                     	ds	1
  1661  004A                     config@out:	
  1662  004A                     lputs_ISR@i:	
  1663                           ; 1 bytes @ 0x2
  1664                           
  1665  004A                     calculate_checksum@data:	
  1666                           ; 1 bytes @ 0x2
  1667                           
  1668  004A                     ADC_5@ADC_value:	
  1669                           ; 1 bytes @ 0x2
  1670                           
  1671                           
  1672                           ; 2 bytes @ 0x2
  1673  004A                     	ds	1
  1674  004B                     lputs_ISR@data:	
  1675  004B                     calculate_checksum@check:	
  1676                           ; 1 bytes @ 0x3
  1677                           
  1678                           
  1679                           ; 1 bytes @ 0x3
  1680  004B                     	ds	1
  1681  004C                     ?_measure:	
  1682  004C                     calculate_checksum@i:	
  1683                           ; 1 bytes @ 0x4
  1684                           
  1685  004C                     measure@Q:	
  1686                           ; 1 bytes @ 0x4
  1687                           
  1688                           
  1689                           ; 1 bytes @ 0x4
  1690  004C                     	ds	1
  1691  004D                     measure@asic:	
  1692                           
  1693                           ; 2 bytes @ 0x5
  1694  004D                     	ds	2
  1695  004F                     ??_measure:	
  1696                           
  1697                           ; 1 bytes @ 0x7
  1698  004F                     	ds	2
  1699  0051                     measure@offset:	
  1700                           
  1701                           ; 2 bytes @ 0x9
  1702  0051                     	ds	2
  1703  0053                     measure@I:	
  1704                           
  1705                           ; 1 bytes @ 0xB
  1706  0053                     	ds	1
  1707  0054                     measure@value:	
  1708                           
  1709                           ; 2 bytes @ 0xC
  1710  0054                     	ds	2
  1711  0056                     measure@aux2:	
  1712                           
  1713                           ; 2 bytes @ 0xE
  1714  0056                     	ds	2
  1715  0058                     measure@aux1:	
  1716                           
  1717                           ; 2 bytes @ 0x10
  1718  0058                     	ds	2
  1719  005A                     ??_sweep:	
  1720                           
  1721                           ; 1 bytes @ 0x12
  1722  005A                     	ds	2
  1723  005C                     sweep@check:	
  1724                           
  1725                           ; 1 bytes @ 0x14
  1726  005C                     	ds	1
  1727  005D                     sweep@aux:	
  1728                           
  1729                           ; 7 bytes @ 0x15
  1730  005D                     	ds	7
  1731  0064                     sweep@freq_index:	
  1732                           
  1733                           ; 1 bytes @ 0x1C
  1734  0064                     	ds	1
  1735  0065                     sweep@i:	
  1736                           
  1737                           ; 1 bytes @ 0x1D
  1738  0065                     	ds	1
  1739  0066                     sweep@count:	
  1740                           
  1741                           ; 1 bytes @ 0x1E
  1742  0066                     	ds	1
  1743  0067                     sweep@I:	
  1744                           
  1745                           ; 2 bytes @ 0x1F
  1746  0067                     	ds	2
  1747  0069                     sweep@Q:	
  1748                           
  1749                           ; 2 bytes @ 0x21
  1750  0069                     	ds	2
  1751  006B                     sweep@gain_index:	
  1752                           
  1753                           ; 1 bytes @ 0x23
  1754  006B                     	ds	1
  1755  006C                     sweep@ret:	
  1756                           
  1757                           ; 1 bytes @ 0x24
  1758  006C                     	ds	1
  1759  006D                     sweep@asic:	
  1760                           
  1761                           ; 2 bytes @ 0x25
  1762  006D                     	ds	2
  1763  006F                     ??_main:	
  1764                           
  1765                           ; 1 bytes @ 0x27
  1766  006F                     	ds	1
  1767                           
  1768                           	psect	maintext
  1769  0241                     __pmaintext:	
  1770 ;;
  1771 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1772 ;;
  1773 ;; *************** function _main *****************
  1774 ;; Defined at:
  1775 ;;		line 30 in file "main.c"
  1776 ;; Parameters:    Size  Location     Type
  1777 ;;		None
  1778 ;; Auto vars:     Size  Location     Type
  1779 ;;  i               1    0        unsigned char 
  1780 ;; Return value:  Size  Location     Type
  1781 ;;                  1    wreg      void 
  1782 ;; Registers used:
  1783 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1784 ;; Tracked objects:
  1785 ;;		On entry : B1F/0
  1786 ;;		On exit  : 1F/0
  1787 ;;		Unchanged: 0/0
  1788 ;; Data sizes:     COMMON   BANK0   BANK1
  1789 ;;      Params:         0       0       0
  1790 ;;      Locals:         0       0       0
  1791 ;;      Temps:          0       1       0
  1792 ;;      Totals:         0       1       0
  1793 ;;Total ram usage:        1 bytes
  1794 ;; Hardware stack levels required when called:    5
  1795 ;; This function calls:
  1796 ;;		_SYSTEM_Initialize
  1797 ;;		_setup_ADC
  1798 ;;		_setup_TMR0
  1799 ;;		_start_RCM
  1800 ;;		_start_RX_USART_ISR
  1801 ;;		_start_TX_USART_ISR
  1802 ;;		_sweep
  1803 ;; This function is called by:
  1804 ;;		Startup code after reset
  1805 ;; This function uses a non-reentrant model
  1806 ;;
  1807                           
  1808                           
  1809                           ;psect for function _main
  1810  0241                     _main:	
  1811                           
  1812                           ;main.c: 32:     unsigned char i;;main.c: 34:     SYSTEM_Initialize();
  1813                           
  1814                           ;incstack = 0
  1815                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1816  0241  2384               	fcall	_SYSTEM_Initialize
  1817                           
  1818                           ;main.c: 38:     setup_TMR0();
  1819  0242  236E               	fcall	_setup_TMR0
  1820                           
  1821                           ;main.c: 39:     start_TX_USART_ISR();
  1822  0243  2330               	fcall	_start_TX_USART_ISR
  1823                           
  1824                           ;main.c: 40:     start_RX_USART_ISR();
  1825  0244  2320               	fcall	_start_RX_USART_ISR
  1826                           
  1827                           ;main.c: 41:     start_RCM();
  1828  0245  2380               	fcall	_start_RCM
  1829                           
  1830                           ;main.c: 42:     setup_ADC();
  1831  0246  2374               	fcall	_setup_ADC
  1832                           
  1833                           ;main.c: 45:     RA5 = 0;
  1834  0247  0020               	movlb	0	; select bank0
  1835  0248  128C               	bcf	12,5	;volatile
  1836                           
  1837                           ;main.c: 46:     _delay((unsigned long)((150)*(500000/4000.0)));
  1838  0249  3019               	movlw	25
  1839  024A  0020               	movlb	0	; select bank0
  1840  024B  00EF               	movwf	??_main
  1841  024C  3058               	movlw	88
  1842  024D                     u1197:	
  1843  024D  0B89               	decfsz	9,f
  1844  024E  2A4D               	goto	u1197
  1845  024F  0BEF               	decfsz	??_main,f
  1846  0250  2A4D               	goto	u1197
  1847  0251  0000               	nop
  1848                           
  1849                           ;main.c: 47:     RA5 = 1;
  1850  0252  0020               	movlb	0	; select bank0
  1851  0253  168C               	bsf	12,5	;volatile
  1852  0254                     l119:	
  1853                           ;main.c: 119:     while(1) {
  1854                           
  1855  0254  0064               	clrwdt	;# 
  1856                           
  1857                           ;main.c: 122:         if (TIMER0_flag) {
  1858  0255  0020               	movlb	0	; select bank0
  1859  0256  083D               	movf	_TIMER0_flag,w	;volatile
  1860  0257  1903               	btfsc	3,2
  1861  0258  2A54               	goto	l119
  1862                           
  1863                           ;main.c: 123:               TIMER0_flag = 0;
  1864  0259  01BD               	clrf	_TIMER0_flag	;volatile
  1865                           
  1866                           ;main.c: 125:               if (USART_rx_index > 10) {
  1867  025A  300B               	movlw	11
  1868  025B  023C               	subwf	_USART_rx_index,w	;volatile
  1869  025C  1C03               	skipc
  1870  025D  2A60               	goto	l2191
  1871                           
  1872                           ;main.c: 126:                 USART_rx_index = 0;
  1873  025E  01BC               	clrf	_USART_rx_index	;volatile
  1874                           
  1875                           ;main.c: 127:                 continue;
  1876  025F  2A54               	goto	l119
  1877  0260                     l2191:	
  1878                           
  1879                           ;main.c: 130:               if(USART_rx_index == 0)
  1880  0260  083C               	movf	_USART_rx_index,w	;volatile
  1881  0261  1903               	btfsc	3,2
  1882  0262  2A54               	goto	l119
  1883                           
  1884                           ;main.c: 134:               mess_rec_size = USART_rx_index;
  1885  0263  083C               	movf	_USART_rx_index,w	;volatile
  1886  0264  00EF               	movwf	??_main
  1887  0265  086F               	movf	??_main,w
  1888  0266  00BB               	movwf	_mess_rec_size	;volatile
  1889                           
  1890                           ;main.c: 135:               USART_rx_index = 0;
  1891  0267  01BC               	clrf	_USART_rx_index	;volatile
  1892                           
  1893                           ;main.c: 140:               sweep();
  1894  0268  2103               	fcall	_sweep
  1895  0269  2A54               	goto	l119
  1896  026A                     __end_of_main:	
  1897                           
  1898                           	psect	text1
  1899  0103                     __ptext1:	
  1900 ;; *************** function _sweep *****************
  1901 ;; Defined at:
  1902 ;;		line 444 in file "comm.c"
  1903 ;; Parameters:    Size  Location     Type
  1904 ;;		None
  1905 ;; Auto vars:     Size  Location     Type
  1906 ;;  aux             7   21[BANK0 ] unsigned char [7]
  1907 ;;  asic            2   37[BANK0 ] struct .
  1908 ;;  Q               2   33[BANK0 ] short 
  1909 ;;  I               2   31[BANK0 ] short 
  1910 ;;  ret             1   36[BANK0 ] unsigned char 
  1911 ;;  gain_index      1   35[BANK0 ] unsigned char 
  1912 ;;  count           1   30[BANK0 ] unsigned char 
  1913 ;;  i               1   29[BANK0 ] unsigned char 
  1914 ;;  freq_index      1   28[BANK0 ] unsigned char 
  1915 ;;  check           1   20[BANK0 ] unsigned char 
  1916 ;; Return value:  Size  Location     Type
  1917 ;;                  1    wreg      void 
  1918 ;; Registers used:
  1919 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1920 ;; Tracked objects:
  1921 ;;		On entry : 1F/0
  1922 ;;		On exit  : 1F/0
  1923 ;;		Unchanged: 0/0
  1924 ;; Data sizes:     COMMON   BANK0   BANK1
  1925 ;;      Params:         0       0       0
  1926 ;;      Locals:         0      19       0
  1927 ;;      Temps:          0       2       0
  1928 ;;      Totals:         0      21       0
  1929 ;;Total ram usage:       21 bytes
  1930 ;; Hardware stack levels used:    1
  1931 ;; Hardware stack levels required when called:    4
  1932 ;; This function calls:
  1933 ;;		_calculate_checksum
  1934 ;;		_lputs_ISR
  1935 ;;		_measure
  1936 ;;		_setFreq
  1937 ;;		_setGain
  1938 ;; This function is called by:
  1939 ;;		_main
  1940 ;; This function uses a non-reentrant model
  1941 ;;
  1942                           
  1943                           
  1944                           ;psect for function _sweep
  1945  0103                     _sweep:	
  1946                           
  1947                           ;comm.c: 446:     unsigned char gain_index;;comm.c: 447:     unsigned char freq_index;;c
      +                          omm.c: 448:     unsigned char i, ret, count;;comm.c: 449:     short I,Q;;comm.c: 450:   
      +                            unsigned char aux[7], check;;comm.c: 453:     BIO3 asic;;comm.c: 454:     asic.datasho
      +                          rt = 0;
  1948                           
  1949                           ;incstack = 0
  1950                           ; Regs used in _sweep: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1951  0103  01ED               	clrf	sweep@asic
  1952  0104  01EE               	clrf	sweep@asic+1
  1953                           
  1954                           ;comm.c: 465:     freq_index = 10;
  1955  0105  300A               	movlw	10
  1956  0106  00DA               	movwf	??_sweep
  1957  0107  085A               	movf	??_sweep,w
  1958  0108  00E4               	movwf	sweep@freq_index
  1959                           
  1960                           ;comm.c: 466:     gain_index = 0;
  1961  0109  01EB               	clrf	sweep@gain_index
  1962                           
  1963                           ;comm.c: 467:     setGain(&asic,gain_index);
  1964  010A  01F4               	clrf	setGain@gain_index
  1965  010B  306D               	movlw	(low (sweep@asic| 0))& (0+255)
  1966  010C  219E               	fcall	_setGain
  1967                           
  1968                           ;comm.c: 470:     for (i = 0; i < 11; i++) {
  1969  010D  0020               	movlb	0	; select bank0
  1970  010E  01E5               	clrf	sweep@i
  1971  010F                     l2105:	
  1972                           
  1973                           ;comm.c: 473:         setFreq(&asic,freq_index);
  1974  010F  0864               	movf	sweep@freq_index,w
  1975  0110  00DA               	movwf	??_sweep
  1976  0111  085A               	movf	??_sweep,w
  1977  0112  00F4               	movwf	setFreq@freq_index
  1978  0113  306D               	movlw	(low (sweep@asic| 0))& (0+255)
  1979  0114  2293               	fcall	_setFreq
  1980                           
  1981                           ;comm.c: 480:         count = 0;
  1982  0115  0020               	movlb	0	; select bank0
  1983  0116  01E6               	clrf	sweep@count
  1984  0117                     l2111:	
  1985                           
  1986                           ;comm.c: 485:             ret = measure(&I,&Q,asic);
  1987  0117  3069               	movlw	(low (sweep@Q| 0))& (0+255)
  1988  0118  00DA               	movwf	??_sweep
  1989  0119  085A               	movf	??_sweep,w
  1990  011A  00CC               	movwf	measure@Q
  1991  011B  086E               	movf	sweep@asic+1,w
  1992  011C  00CE               	movwf	measure@asic+1
  1993  011D  086D               	movf	sweep@asic,w
  1994  011E  00CD               	movwf	measure@asic
  1995  011F  3067               	movlw	(low (sweep@I| 0))& (0+255)
  1996  0120  2060               	fcall	_measure
  1997  0121  0020               	movlb	0	; select bank0
  1998  0122  00DB               	movwf	??_sweep+1
  1999  0123  085B               	movf	??_sweep+1,w
  2000  0124  00EC               	movwf	sweep@ret
  2001                           
  2002                           ;comm.c: 487:             if (ret == 1) {
  2003  0125  036C               	decf	sweep@ret,w
  2004  0126  1D03               	btfss	3,2
  2005  0127  2939               	goto	l2127
  2006                           
  2007                           ;comm.c: 489:                 if (count == 2) break;
  2008  0128  3002               	movlw	2
  2009  0129  0666               	xorwf	sweep@count,w
  2010  012A  1903               	btfsc	3,2
  2011  012B  2953               	goto	l2143
  2012                           
  2013                           ;comm.c: 490:                 count = ret;
  2014  012C  086C               	movf	sweep@ret,w
  2015  012D  00DA               	movwf	??_sweep
  2016  012E  085A               	movf	??_sweep,w
  2017  012F  00E6               	movwf	sweep@count
  2018                           
  2019                           ;comm.c: 493:                 if (gain_index < 7) {
  2020  0130  3007               	movlw	7
  2021  0131  026B               	subwf	sweep@gain_index,w
  2022  0132  1803               	skipnc
  2023  0133  2953               	goto	l2143
  2024                           
  2025                           ;comm.c: 497:                     gain_index++;
  2026  0134  3001               	movlw	1
  2027  0135  00DA               	movwf	??_sweep
  2028  0136  085A               	movf	??_sweep,w
  2029  0137  07EB               	addwf	sweep@gain_index,f
  2030  0138  2949               	goto	l2139
  2031  0139                     l2127:	
  2032                           ;comm.c: 499:                 } else {
  2033                           
  2034                           ;comm.c: 498:                     setGain(&asic,gain_index);
  2035                           
  2036  0139  3002               	movlw	2
  2037  013A  066C               	xorwf	sweep@ret,w
  2038  013B  1D03               	btfss	3,2
  2039  013C  294F               	goto	l2141
  2040                           
  2041                           ;comm.c: 507:                 if (count == 1) break;
  2042  013D  0366               	decf	sweep@count,w
  2043  013E  1903               	btfsc	3,2
  2044  013F  2953               	goto	l2143
  2045                           
  2046                           ;comm.c: 508:                 count = ret;
  2047  0140  086C               	movf	sweep@ret,w
  2048  0141  00DA               	movwf	??_sweep
  2049  0142  085A               	movf	??_sweep,w
  2050  0143  00E6               	movwf	sweep@count
  2051                           
  2052                           ;comm.c: 510:                 if (gain_index > 0) {
  2053  0144  086B               	movf	sweep@gain_index,w
  2054  0145  1903               	btfsc	3,2
  2055  0146  2953               	goto	l2143
  2056                           
  2057                           ;comm.c: 511:                     gain_index--;
  2058  0147  3001               	movlw	1
  2059  0148  02EB               	subwf	sweep@gain_index,f
  2060  0149                     l2139:	
  2061                           
  2062                           ;comm.c: 512:                     setGain(&asic,gain_index);
  2063  0149  086B               	movf	sweep@gain_index,w
  2064  014A  00DA               	movwf	??_sweep
  2065  014B  085A               	movf	??_sweep,w
  2066  014C  00F4               	movwf	setGain@gain_index
  2067  014D  306D               	movlw	(low (sweep@asic| 0))& (0+255)
  2068  014E  219E               	fcall	_setGain
  2069  014F                     l2141:	
  2070                           ;comm.c: 513:                 } else {
  2071                           
  2072  014F  0020               	movlb	0	; select bank0
  2073  0150  086C               	movf	sweep@ret,w
  2074  0151  1D03               	btfss	3,2
  2075  0152  2917               	goto	l2111
  2076  0153                     l2143:	
  2077                           
  2078                           ;comm.c: 526:         ret = (freq_index << 4) & 0xf0;
  2079  0153  0864               	movf	sweep@freq_index,w
  2080  0154  00DA               	movwf	??_sweep
  2081  0155  3003               	movlw	3
  2082  0156                     u1145:	
  2083  0156  35DA               	lslf	??_sweep,f
  2084  0157  3EFF               	addlw	-1
  2085  0158  1D03               	skipz
  2086  0159  2956               	goto	u1145
  2087  015A  355A               	lslf	??_sweep,w
  2088  015B  39F0               	andlw	240
  2089  015C  00DB               	movwf	??_sweep+1
  2090  015D  085B               	movf	??_sweep+1,w
  2091  015E  00EC               	movwf	sweep@ret
  2092                           
  2093                           ;comm.c: 527:         ret |= (gain_index & 0xff);
  2094  015F  086B               	movf	sweep@gain_index,w
  2095  0160  00DA               	movwf	??_sweep
  2096  0161  085A               	movf	??_sweep,w
  2097  0162  04EC               	iorwf	sweep@ret,f
  2098                           
  2099                           ;comm.c: 529:         aux[0] = 'f';
  2100  0163  3066               	movlw	102
  2101  0164  00DA               	movwf	??_sweep
  2102  0165  085A               	movf	??_sweep,w
  2103  0166  00DD               	movwf	sweep@aux
  2104                           
  2105                           ;comm.c: 530:         aux[1] = (unsigned char)(I & 0xff);
  2106  0167  0867               	movf	sweep@I,w
  2107  0168  00DA               	movwf	??_sweep
  2108  0169  085A               	movf	??_sweep,w
  2109  016A  00DE               	movwf	sweep@aux+1
  2110                           
  2111                           ;comm.c: 531:         aux[2] = (unsigned char)((I >> 8) & 0xff);
  2112  016B  0868               	movf	sweep@I+1,w
  2113  016C  00DA               	movwf	??_sweep
  2114  016D  085A               	movf	??_sweep,w
  2115  016E  00DF               	movwf	sweep@aux+2
  2116                           
  2117                           ;comm.c: 532:         aux[3] = (unsigned char)(Q & 0xff);
  2118  016F  0869               	movf	sweep@Q,w
  2119  0170  00DA               	movwf	??_sweep
  2120  0171  085A               	movf	??_sweep,w
  2121  0172  00E0               	movwf	sweep@aux+3
  2122                           
  2123                           ;comm.c: 533:         aux[4] = (unsigned char)((Q >> 8) & 0xff);
  2124  0173  086A               	movf	sweep@Q+1,w
  2125  0174  00DA               	movwf	??_sweep
  2126  0175  085A               	movf	??_sweep,w
  2127  0176  00E1               	movwf	sweep@aux+4
  2128                           
  2129                           ;comm.c: 534:         aux[5] = ret;
  2130  0177  086C               	movf	sweep@ret,w
  2131  0178  00DA               	movwf	??_sweep
  2132  0179  085A               	movf	??_sweep,w
  2133  017A  00E2               	movwf	sweep@aux+5
  2134                           
  2135                           ;comm.c: 536:         check = calculate_checksum(aux,6);
  2136  017B  3006               	movlw	6
  2137  017C  00DA               	movwf	??_sweep
  2138  017D  085A               	movf	??_sweep,w
  2139  017E  00F4               	movwf	calculate_checksum@num
  2140  017F  305D               	movlw	(low (sweep@aux| 0))& (0+255)
  2141  0180  22F7               	fcall	_calculate_checksum
  2142  0181  00DB               	movwf	??_sweep+1
  2143  0182  085B               	movf	??_sweep+1,w
  2144  0183  00DC               	movwf	sweep@check
  2145                           
  2146                           ;comm.c: 537:         aux[6] = check;
  2147  0184  085C               	movf	sweep@check,w
  2148  0185  00DA               	movwf	??_sweep
  2149  0186  085A               	movf	??_sweep,w
  2150  0187  00E3               	movwf	sweep@aux+6
  2151                           
  2152                           ;comm.c: 540:         { ADCON0 = 0b00100100;};
  2153  0188  3024               	movlw	36
  2154  0189  0021               	movlb	1	; select bank1
  2155  018A  009D               	movwf	29	;volatile
  2156                           
  2157                           ;comm.c: 542:         lputs_ISR(aux,7);
  2158  018B  3007               	movlw	7
  2159  018C  0020               	movlb	0	; select bank0
  2160  018D  00DA               	movwf	??_sweep
  2161  018E  085A               	movf	??_sweep,w
  2162  018F  00F4               	movwf	lputs_ISR@length
  2163  0190  305D               	movlw	(low (sweep@aux| 0))& (0+255)
  2164  0191  226A               	fcall	_lputs_ISR
  2165                           
  2166                           ;comm.c: 552:         freq_index--;
  2167  0192  3001               	movlw	1
  2168  0193  0020               	movlb	0	; select bank0
  2169  0194  02E4               	subwf	sweep@freq_index,f
  2170                           
  2171                           ;comm.c: 553:     }
  2172  0195  3001               	movlw	1
  2173  0196  00DA               	movwf	??_sweep
  2174  0197  085A               	movf	??_sweep,w
  2175  0198  07E5               	addwf	sweep@i,f
  2176  0199  300B               	movlw	11
  2177  019A  0265               	subwf	sweep@i,w
  2178  019B  1803               	btfsc	3,0
  2179  019C  0008               	return
  2180  019D  290F               	goto	l2105
  2181  019E                     __end_of_sweep:	
  2182                           
  2183                           	psect	text2
  2184  019E                     __ptext2:	
  2185 ;; *************** function _setGain *****************
  2186 ;; Defined at:
  2187 ;;		line 162 in file "bio3.c"
  2188 ;; Parameters:    Size  Location     Type
  2189 ;;  asic            1    wreg     PTR struct .
  2190 ;;		 -> sweep@asic(2), 
  2191 ;;  gain_index      1    4[COMMON] unsigned char 
  2192 ;; Auto vars:     Size  Location     Type
  2193 ;;  asic            1    1[BANK0 ] PTR struct .
  2194 ;;		 -> sweep@asic(2), 
  2195 ;;  aux             1    0[BANK0 ] struct .
  2196 ;; Return value:  Size  Location     Type
  2197 ;;                  1    wreg      void 
  2198 ;; Registers used:
  2199 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, pclath
  2200 ;; Tracked objects:
  2201 ;;		On entry : 1F/0
  2202 ;;		On exit  : 0/0
  2203 ;;		Unchanged: 0/0
  2204 ;; Data sizes:     COMMON   BANK0   BANK1
  2205 ;;      Params:         1       0       0
  2206 ;;      Locals:         0       2       0
  2207 ;;      Temps:          1       0       0
  2208 ;;      Totals:         2       2       0
  2209 ;;Total ram usage:        4 bytes
  2210 ;; Hardware stack levels used:    1
  2211 ;; Hardware stack levels required when called:    2
  2212 ;; This function calls:
  2213 ;;		Nothing
  2214 ;; This function is called by:
  2215 ;;		_sweep
  2216 ;; This function uses a non-reentrant model
  2217 ;;
  2218                           
  2219                           
  2220                           ;psect for function _setGain
  2221  019E                     _setGain:	
  2222                           
  2223                           ;incstack = 0
  2224                           ; Regs used in _setGain: [wreg-fsr1h+pclath]
  2225                           ;setGain@asic stored from wreg
  2226  019E  00C9               	movwf	setGain@asic
  2227                           
  2228                           ;bio3.c: 162: void setGain(BIO3* asic, unsigned char gain_index);bio3.c: 163: {;bio3.c: 
      +                          164:     RADIO_gain aux;;bio3.c: 165:     aux.data = gains[gain_index];
  2229  019F  0874               	movf	setGain@gain_index,w
  2230  01A0  3E59               	addlw	low (_gains| (0+32768))
  2231  01A1  0084               	movwf	4
  2232  01A2  3083               	movlw	high (_gains| (0+32768))
  2233  01A3  1803               	skipnc
  2234  01A4  3E01               	addlw	1
  2235  01A5  0085               	movwf	5
  2236  01A6  0800               	movf	0,w	;code access
  2237  01A7  00F5               	movwf	??_setGain
  2238  01A8  0875               	movf	??_setGain,w
  2239  01A9  00C8               	movwf	setGain@aux
  2240                           
  2241                           ;bio3.c: 167:     asic->data_bits.GD0 = aux.data_bits.GD0;
  2242  01AA  0849               	movf	setGain@asic,w
  2243  01AB  0086               	movwf	6
  2244  01AC  0187               	clrf	7
  2245  01AD  1101               	bcf	1,2
  2246  01AE  1848               	btfsc	setGain@aux,0
  2247  01AF  1501               	bsf	1,2
  2248                           
  2249                           ;bio3.c: 168:     asic->data_bits.GD1 = aux.data_bits.GD1;
  2250  01B0  0020               	movlb	0	; select bank0
  2251  01B1  0849               	movf	setGain@asic,w
  2252  01B2  0086               	movwf	6
  2253  01B3  0187               	clrf	7
  2254  01B4  1181               	bcf	1,3
  2255  01B5  18C8               	btfsc	setGain@aux,1
  2256  01B6  1581               	bsf	1,3
  2257                           
  2258                           ;bio3.c: 169:     asic->data_bits.GD2 = aux.data_bits.GD2;
  2259  01B7  0020               	movlb	0	; select bank0
  2260  01B8  0849               	movf	setGain@asic,w
  2261  01B9  0086               	movwf	6
  2262  01BA  0187               	clrf	7
  2263  01BB  1201               	bcf	1,4
  2264  01BC  1948               	btfsc	setGain@aux,2
  2265  01BD  1601               	bsf	1,4
  2266                           
  2267                           ;bio3.c: 170:     asic->data_bits.GS0 = aux.data_bits.GS0;
  2268  01BE  0020               	movlb	0	; select bank0
  2269  01BF  0849               	movf	setGain@asic,w
  2270  01C0  0086               	movwf	6
  2271  01C1  0187               	clrf	7
  2272  01C2  1381               	bcf	1,7
  2273  01C3  19C8               	btfsc	setGain@aux,3
  2274  01C4  1781               	bsf	1,7
  2275                           
  2276                           ;bio3.c: 171:     asic->data_bits.GS1 = aux.data_bits.GS1;
  2277  01C5  0020               	movlb	0	; select bank0
  2278  01C6  0A49               	incf	setGain@asic,w
  2279  01C7  0086               	movwf	6
  2280  01C8  0187               	clrf	7
  2281  01C9  1001               	bcf	1,0
  2282  01CA  1A48               	btfsc	setGain@aux,4
  2283  01CB  1401               	bsf	1,0
  2284                           
  2285                           ;bio3.c: 172:     asic->data_bits.GS2 = aux.data_bits.GS2;
  2286  01CC  0020               	movlb	0	; select bank0
  2287  01CD  0A49               	incf	setGain@asic,w
  2288  01CE  0086               	movwf	6
  2289  01CF  0187               	clrf	7
  2290  01D0  1081               	bcf	1,1
  2291  01D1  1AC8               	btfsc	setGain@aux,5
  2292  01D2  1481               	bsf	1,1
  2293                           
  2294                           ;bio3.c: 173:     asic->data_bits.GS3 = aux.data_bits.GS3;
  2295  01D3  0020               	movlb	0	; select bank0
  2296  01D4  0A49               	incf	setGain@asic,w
  2297  01D5  0086               	movwf	6
  2298  01D6  0187               	clrf	7
  2299  01D7  1101               	bcf	1,2
  2300  01D8  1B48               	btfsc	setGain@aux,6
  2301  01D9  1501               	bsf	1,2
  2302  01DA  0008               	return
  2303  01DB                     __end_of_setGain:	
  2304                           
  2305                           	psect	text3
  2306  0293                     __ptext3:	
  2307 ;; *************** function _setFreq *****************
  2308 ;; Defined at:
  2309 ;;		line 176 in file "bio3.c"
  2310 ;; Parameters:    Size  Location     Type
  2311 ;;  asic            1    wreg     PTR struct .
  2312 ;;		 -> sweep@asic(2), 
  2313 ;;  freq_index      1    4[COMMON] unsigned char 
  2314 ;; Auto vars:     Size  Location     Type
  2315 ;;  asic            1    0[BANK0 ] PTR struct .
  2316 ;;		 -> sweep@asic(2), 
  2317 ;;  aux             1    1[BANK0 ] struct .
  2318 ;; Return value:  Size  Location     Type
  2319 ;;                  1    wreg      void 
  2320 ;; Registers used:
  2321 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, pclath
  2322 ;; Tracked objects:
  2323 ;;		On entry : 1F/0
  2324 ;;		On exit  : 0/0
  2325 ;;		Unchanged: 0/0
  2326 ;; Data sizes:     COMMON   BANK0   BANK1
  2327 ;;      Params:         1       0       0
  2328 ;;      Locals:         0       2       0
  2329 ;;      Temps:          1       0       0
  2330 ;;      Totals:         2       2       0
  2331 ;;Total ram usage:        4 bytes
  2332 ;; Hardware stack levels used:    1
  2333 ;; Hardware stack levels required when called:    2
  2334 ;; This function calls:
  2335 ;;		Nothing
  2336 ;; This function is called by:
  2337 ;;		_sweep
  2338 ;; This function uses a non-reentrant model
  2339 ;;
  2340                           
  2341                           
  2342                           ;psect for function _setFreq
  2343  0293                     _setFreq:	
  2344                           
  2345                           ;incstack = 0
  2346                           ; Regs used in _setFreq: [wreg-fsr1h+pclath]
  2347                           ;setFreq@asic stored from wreg
  2348  0293  00C8               	movwf	setFreq@asic
  2349                           
  2350                           ;bio3.c: 176: void setFreq(BIO3* asic, unsigned char freq_index);bio3.c: 177: {;bio3.c: 
      +                          178:     RADIO_freq aux;;bio3.c: 179:     aux.data = freqs[freq_index];
  2351  0294  0874               	movf	setFreq@freq_index,w
  2352  0295  3E4E               	addlw	low (_freqs| (0+32768))
  2353  0296  0084               	movwf	4
  2354  0297  3083               	movlw	high (_freqs| (0+32768))
  2355  0298  1803               	skipnc
  2356  0299  3E01               	addlw	1
  2357  029A  0085               	movwf	5
  2358  029B  0800               	movf	0,w	;code access
  2359  029C  00F5               	movwf	??_setFreq
  2360  029D  0875               	movf	??_setFreq,w
  2361  029E  00C9               	movwf	setFreq@aux
  2362                           
  2363                           ;bio3.c: 181:     asic->data_bits.F0 = aux.data_bits.F0;
  2364  029F  0A48               	incf	setFreq@asic,w
  2365  02A0  0086               	movwf	6
  2366  02A1  0187               	clrf	7
  2367  02A2  1201               	bcf	1,4
  2368  02A3  1849               	btfsc	setFreq@aux,0
  2369  02A4  1601               	bsf	1,4
  2370                           
  2371                           ;bio3.c: 182:     asic->data_bits.F1 = aux.data_bits.F1;
  2372  02A5  0020               	movlb	0	; select bank0
  2373  02A6  0A48               	incf	setFreq@asic,w
  2374  02A7  0086               	movwf	6
  2375  02A8  0187               	clrf	7
  2376  02A9  1281               	bcf	1,5
  2377  02AA  18C9               	btfsc	setFreq@aux,1
  2378  02AB  1681               	bsf	1,5
  2379                           
  2380                           ;bio3.c: 183:     asic->data_bits.F2 = aux.data_bits.F2;
  2381  02AC  0020               	movlb	0	; select bank0
  2382  02AD  0A48               	incf	setFreq@asic,w
  2383  02AE  0086               	movwf	6
  2384  02AF  0187               	clrf	7
  2385  02B0  1301               	bcf	1,6
  2386  02B1  1949               	btfsc	setFreq@aux,2
  2387  02B2  1701               	bsf	1,6
  2388                           
  2389                           ;bio3.c: 184:     asic->data_bits.F3 = aux.data_bits.F3;
  2390  02B3  0020               	movlb	0	; select bank0
  2391  02B4  0A48               	incf	setFreq@asic,w
  2392  02B5  0086               	movwf	6
  2393  02B6  0187               	clrf	7
  2394  02B7  1381               	bcf	1,7
  2395  02B8  19C9               	btfsc	setFreq@aux,3
  2396  02B9  1781               	bsf	1,7
  2397  02BA  0008               	return
  2398  02BB                     __end_of_setFreq:	
  2399                           
  2400                           	psect	text4
  2401  0060                     __ptext4:	
  2402 ;; *************** function _measure *****************
  2403 ;; Defined at:
  2404 ;;		line 561 in file "comm.c"
  2405 ;; Parameters:    Size  Location     Type
  2406 ;;  I               1    wreg     PTR short 
  2407 ;;		 -> sweep@I(2), 
  2408 ;;  Q               1    4[BANK0 ] PTR short 
  2409 ;;		 -> sweep@Q(2), 
  2410 ;;  asic            2    5[BANK0 ] struct .
  2411 ;; Auto vars:     Size  Location     Type
  2412 ;;  I               1   11[BANK0 ] PTR short 
  2413 ;;		 -> sweep@I(2), 
  2414 ;;  aux1            2   16[BANK0 ] short 
  2415 ;;  aux2            2   14[BANK0 ] short 
  2416 ;;  value           2   12[BANK0 ] unsigned short 
  2417 ;;  offset          2    9[BANK0 ] unsigned short 
  2418 ;; Return value:  Size  Location     Type
  2419 ;;                  1    wreg      unsigned char 
  2420 ;; Registers used:
  2421 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2422 ;; Tracked objects:
  2423 ;;		On entry : 1F/0
  2424 ;;		On exit  : 0/0
  2425 ;;		Unchanged: 0/0
  2426 ;; Data sizes:     COMMON   BANK0   BANK1
  2427 ;;      Params:         0       3       0
  2428 ;;      Locals:         0       9       0
  2429 ;;      Temps:          0       2       0
  2430 ;;      Totals:         0      14       0
  2431 ;;Total ram usage:       14 bytes
  2432 ;; Hardware stack levels used:    1
  2433 ;; Hardware stack levels required when called:    3
  2434 ;; This function calls:
  2435 ;;		_ADC_5
  2436 ;;		_config
  2437 ;; This function is called by:
  2438 ;;		_sweep
  2439 ;; This function uses a non-reentrant model
  2440 ;;
  2441                           
  2442                           
  2443                           ;psect for function _measure
  2444  0060                     _measure:	
  2445                           
  2446                           ;incstack = 0
  2447                           ; Regs used in _measure: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2448                           ;measure@I stored from wreg
  2449  0060  00D3               	movwf	measure@I
  2450                           
  2451                           ;comm.c: 561: unsigned char measure(short* I, short* Q, BIO3 asic);comm.c: 565: {;comm.c
      +                          : 566:     unsigned short offset, value;;comm.c: 567:     short aux1,aux2;;comm.c: 571: 
      +                              asic.data_bits.CE = 0;
  2452  0061  134D               	bcf	measure@asic,6
  2453                           
  2454                           ;comm.c: 572:     config(asic);
  2455  0062  084E               	movf	measure@asic+1,w
  2456  0063  00F5               	movwf	config@conf+1
  2457  0064  084D               	movf	measure@asic,w
  2458  0065  00F4               	movwf	config@conf
  2459  0066  21DB               	fcall	_config
  2460                           
  2461                           ;comm.c: 573:      _delay((unsigned long)((20)*(500000/4000.0)));
  2462  0067  3004               	movlw	4
  2463  0068  0020               	movlb	0	; select bank0
  2464  0069  00CF               	movwf	??_measure
  2465  006A  303D               	movlw	61
  2466  006B                     u1207:	
  2467  006B  0B89               	decfsz	9,f
  2468  006C  286B               	goto	u1207
  2469  006D  0BCF               	decfsz	??_measure,f
  2470  006E  286B               	goto	u1207
  2471  006F  3200               	nop2
  2472                           
  2473                           ;comm.c: 575:     offset = ADC_5();
  2474  0070  22BB               	fcall	_ADC_5
  2475  0071  0875               	movf	?_ADC_5+1,w
  2476  0072  00D2               	movwf	measure@offset+1
  2477  0073  0874               	movf	?_ADC_5,w
  2478  0074  00D1               	movwf	measure@offset
  2479                           
  2480                           ;comm.c: 578:     asic.data_bits.CE = 1;
  2481  0075  174D               	bsf	measure@asic,6
  2482                           
  2483                           ;comm.c: 579:     asic.data_bits.IQ = 0;
  2484  0076  11CE               	bcf	measure@asic+1,3
  2485                           
  2486                           ;comm.c: 581:     config(asic);
  2487  0077  084E               	movf	measure@asic+1,w
  2488  0078  00F5               	movwf	config@conf+1
  2489  0079  084D               	movf	measure@asic,w
  2490  007A  00F4               	movwf	config@conf
  2491  007B  21DB               	fcall	_config
  2492                           
  2493                           ;comm.c: 582:      _delay((unsigned long)((20)*(500000/4000.0)));
  2494  007C  3004               	movlw	4
  2495  007D  0020               	movlb	0	; select bank0
  2496  007E  00CF               	movwf	??_measure
  2497  007F  303D               	movlw	61
  2498  0080                     u1217:	
  2499  0080  0B89               	decfsz	9,f
  2500  0081  2880               	goto	u1217
  2501  0082  0BCF               	decfsz	??_measure,f
  2502  0083  2880               	goto	u1217
  2503  0084  3200               	nop2
  2504                           
  2505                           ;comm.c: 584:     value = ADC_5();
  2506  0085  22BB               	fcall	_ADC_5
  2507  0086  0875               	movf	?_ADC_5+1,w
  2508  0087  00D5               	movwf	measure@value+1
  2509  0088  0874               	movf	?_ADC_5,w
  2510  0089  00D4               	movwf	measure@value
  2511                           
  2512                           ;comm.c: 585:     *I = (value - offset);
  2513  008A  0851               	movf	measure@offset,w
  2514  008B  0254               	subwf	measure@value,w
  2515  008C  00CF               	movwf	??_measure
  2516  008D  0852               	movf	measure@offset+1,w
  2517  008E  3B55               	subwfb	measure@value+1,w
  2518  008F  00D0               	movwf	??_measure+1
  2519  0090  0853               	movf	measure@I,w
  2520  0091  0086               	movwf	6
  2521  0092  0187               	clrf	7
  2522  0093  084F               	movf	??_measure,w
  2523  0094  3FC0               	movwi [0]fsr1
  2524  0095  0850               	movf	??_measure+1,w
  2525  0096  3FC1               	movwi [1]fsr1
  2526                           
  2527                           ;comm.c: 586:     aux1 = *I;
  2528  0097  0853               	movf	measure@I,w
  2529  0098  0086               	movwf	6
  2530  0099  0187               	clrf	7
  2531  009A  3F40               	moviw [0]fsr1
  2532  009B  00D8               	movwf	measure@aux1
  2533  009C  3F41               	moviw [1]fsr1
  2534  009D  00D9               	movwf	measure@aux1+1
  2535                           
  2536                           ;comm.c: 588:     if (aux1 < 0) {
  2537  009E  1FD9               	btfss	measure@aux1+1,7
  2538  009F  28A5               	goto	l2055
  2539                           
  2540                           ;comm.c: 589:         aux1 = -aux1;
  2541  00A0  09D8               	comf	measure@aux1,f
  2542  00A1  09D9               	comf	measure@aux1+1,f
  2543  00A2  0AD8               	incf	measure@aux1,f
  2544  00A3  1903               	skipnz
  2545  00A4  0AD9               	incf	measure@aux1+1,f
  2546  00A5                     l2055:	
  2547                           
  2548                           ;comm.c: 595:     asic.data_bits.IQ = 1;
  2549  00A5  15CE               	bsf	measure@asic+1,3
  2550                           
  2551                           ;comm.c: 597:     config(asic);
  2552  00A6  084E               	movf	measure@asic+1,w
  2553  00A7  00F5               	movwf	config@conf+1
  2554  00A8  084D               	movf	measure@asic,w
  2555  00A9  00F4               	movwf	config@conf
  2556  00AA  21DB               	fcall	_config
  2557                           
  2558                           ;comm.c: 598:      _delay((unsigned long)((20)*(500000/4000.0)));
  2559  00AB  3004               	movlw	4
  2560  00AC  0020               	movlb	0	; select bank0
  2561  00AD  00CF               	movwf	??_measure
  2562  00AE  303D               	movlw	61
  2563  00AF                     u1227:	
  2564  00AF  0B89               	decfsz	9,f
  2565  00B0  28AF               	goto	u1227
  2566  00B1  0BCF               	decfsz	??_measure,f
  2567  00B2  28AF               	goto	u1227
  2568  00B3  3200               	nop2
  2569                           
  2570                           ;comm.c: 600:     value = ADC_5();
  2571  00B4  22BB               	fcall	_ADC_5
  2572  00B5  0875               	movf	?_ADC_5+1,w
  2573  00B6  00D5               	movwf	measure@value+1
  2574  00B7  0874               	movf	?_ADC_5,w
  2575  00B8  00D4               	movwf	measure@value
  2576                           
  2577                           ;comm.c: 601:     *Q = (value - offset);
  2578  00B9  0851               	movf	measure@offset,w
  2579  00BA  0254               	subwf	measure@value,w
  2580  00BB  00CF               	movwf	??_measure
  2581  00BC  0852               	movf	measure@offset+1,w
  2582  00BD  3B55               	subwfb	measure@value+1,w
  2583  00BE  00D0               	movwf	??_measure+1
  2584  00BF  084C               	movf	measure@Q,w
  2585  00C0  0086               	movwf	6
  2586  00C1  0187               	clrf	7
  2587  00C2  084F               	movf	??_measure,w
  2588  00C3  3FC0               	movwi [0]fsr1
  2589  00C4  0850               	movf	??_measure+1,w
  2590  00C5  3FC1               	movwi [1]fsr1
  2591                           
  2592                           ;comm.c: 602:     aux2 = *Q;
  2593  00C6  084C               	movf	measure@Q,w
  2594  00C7  0086               	movwf	6
  2595  00C8  0187               	clrf	7
  2596  00C9  3F40               	moviw [0]fsr1
  2597  00CA  00D6               	movwf	measure@aux2
  2598  00CB  3F41               	moviw [1]fsr1
  2599  00CC  00D7               	movwf	measure@aux2+1
  2600                           
  2601                           ;comm.c: 604:     if (aux2 < 0) {
  2602  00CD  1FD7               	btfss	measure@aux2+1,7
  2603  00CE  28D4               	goto	l2071
  2604                           
  2605                           ;comm.c: 605:         aux2 = -aux2;
  2606  00CF  09D6               	comf	measure@aux2,f
  2607  00D0  09D7               	comf	measure@aux2+1,f
  2608  00D1  0AD6               	incf	measure@aux2,f
  2609  00D2  1903               	skipnz
  2610  00D3  0AD7               	incf	measure@aux2+1,f
  2611  00D4                     l2071:	
  2612                           
  2613                           ;comm.c: 608:     if (aux2 > aux1) {
  2614  00D4  0859               	movf	measure@aux1+1,w
  2615  00D5  3A80               	xorlw	128
  2616  00D6  00CF               	movwf	??_measure
  2617  00D7  0857               	movf	measure@aux2+1,w
  2618  00D8  3A80               	xorlw	128
  2619  00D9  024F               	subwf	??_measure,w
  2620  00DA  1D03               	skipz
  2621  00DB  28DE               	goto	u1045
  2622  00DC  0856               	movf	measure@aux2,w
  2623  00DD  0258               	subwf	measure@aux1,w
  2624  00DE                     u1045:	
  2625  00DE  1803               	skipnc
  2626  00DF  28E5               	goto	l408
  2627                           
  2628                           ;comm.c: 609:         aux1 = aux2;
  2629  00E0  0020               	movlb	0	; select bank0
  2630  00E1  0857               	movf	measure@aux2+1,w
  2631  00E2  00D9               	movwf	measure@aux1+1
  2632  00E3  0856               	movf	measure@aux2,w
  2633  00E4  00D8               	movwf	measure@aux1
  2634  00E5                     l408:	
  2635                           ;comm.c: 610:     }
  2636                           
  2637                           
  2638                           ;comm.c: 612:     if (aux1 > 370) {
  2639  00E5  0020               	movlb	0	; select bank0
  2640  00E6  0859               	movf	measure@aux1+1,w
  2641  00E7  3A80               	xorlw	128
  2642  00E8  00CF               	movwf	??_measure
  2643  00E9  3081               	movlw	129
  2644  00EA  024F               	subwf	??_measure,w
  2645  00EB  1D03               	skipz
  2646  00EC  28EF               	goto	u1055
  2647  00ED  3073               	movlw	115
  2648  00EE  0258               	subwf	measure@aux1,w
  2649  00EF                     u1055:	
  2650  00EF  1C03               	skipc
  2651  00F0  28F3               	goto	l2081
  2652                           
  2653                           ;comm.c: 613:         return 2;
  2654  00F1  3002               	movlw	2
  2655  00F2  0008               	return
  2656  00F3                     l2081:	
  2657  00F3  0020               	movlb	0	; select bank0
  2658  00F4  0859               	movf	measure@aux1+1,w
  2659  00F5  3A80               	xorlw	128
  2660  00F6  00CF               	movwf	??_measure
  2661  00F7  3080               	movlw	128
  2662  00F8  024F               	subwf	??_measure,w
  2663  00F9  1D03               	skipz
  2664  00FA  28FD               	goto	u1065
  2665  00FB  3056               	movlw	86
  2666  00FC  0258               	subwf	measure@aux1,w
  2667  00FD                     u1065:	
  2668  00FD  1803               	skipnc
  2669  00FE  2901               	goto	l2087
  2670                           
  2671                           ;comm.c: 615:         return 1;
  2672  00FF  3001               	movlw	1
  2673  0100  0008               	return
  2674  0101                     l2087:	
  2675                           
  2676                           ;comm.c: 618:     return 0;
  2677  0101  3000               	movlw	0
  2678  0102  0008               	return
  2679  0103                     __end_of_measure:	
  2680                           
  2681                           	psect	text5
  2682  01DB                     __ptext5:	
  2683 ;; *************** function _config *****************
  2684 ;; Defined at:
  2685 ;;		line 132 in file "bio3.c"
  2686 ;; Parameters:    Size  Location     Type
  2687 ;;  conf            2    4[COMMON] struct .
  2688 ;; Auto vars:     Size  Location     Type
  2689 ;;  out             1    2[BANK0 ] unsigned char 
  2690 ;;  i               1    1[BANK0 ] unsigned char 
  2691 ;; Return value:  Size  Location     Type
  2692 ;;                  1    wreg      void 
  2693 ;; Registers used:
  2694 ;;		wreg, status,2, status,0
  2695 ;; Tracked objects:
  2696 ;;		On entry : 1F/0
  2697 ;;		On exit  : 1F/0
  2698 ;;		Unchanged: 0/0
  2699 ;; Data sizes:     COMMON   BANK0   BANK1
  2700 ;;      Params:         2       0       0
  2701 ;;      Locals:         0       2       0
  2702 ;;      Temps:          0       1       0
  2703 ;;      Totals:         2       3       0
  2704 ;;Total ram usage:        5 bytes
  2705 ;; Hardware stack levels used:    1
  2706 ;; Hardware stack levels required when called:    2
  2707 ;; This function calls:
  2708 ;;		Nothing
  2709 ;; This function is called by:
  2710 ;;		_measure
  2711 ;; This function uses a non-reentrant model
  2712 ;;
  2713                           
  2714                           
  2715                           ;psect for function _config
  2716  01DB                     _config:	
  2717                           
  2718                           ;bio3.c: 132: void config(BIO3 conf);bio3.c: 133: {;bio3.c: 134:     unsigned char i, ou
      +                          t;;bio3.c: 136:     out &= 0b11110111; PORTC = out;;
  2719                           
  2720                           ;incstack = 0
  2721                           ; Regs used in _config: [wreg+status,2+status,0]
  2722  01DB  30F7               	movlw	247
  2723  01DC  00C8               	movwf	??_config
  2724  01DD  0848               	movf	??_config,w
  2725  01DE  05CA               	andwf	config@out,f
  2726  01DF  084A               	movf	config@out,w
  2727  01E0  008E               	movwf	14	;volatile
  2728                           
  2729                           ;bio3.c: 137:     _delay((unsigned long)((50)*(500000/4000000.0)));
  2730  01E1  3200               	nop2	;2 cycle nop
  2731  01E2  3200               	nop2	;2 cycle nop
  2732  01E3  3200               	nop2	;2 cycle nop
  2733                           
  2734                           ;bio3.c: 139:     RA5 = 0;;
  2735  01E4  0020               	movlb	0	; select bank0
  2736  01E5  128C               	bcf	12,5	;volatile
  2737                           
  2738                           ;bio3.c: 140:     _delay((unsigned long)((50)*(500000/4000000.0)));
  2739  01E6  3200               	nop2	;2 cycle nop
  2740  01E7  3200               	nop2	;2 cycle nop
  2741  01E8  3200               	nop2	;2 cycle nop
  2742                           
  2743                           ;bio3.c: 142:     RA5 = 1;;
  2744  01E9  0020               	movlb	0	; select bank0
  2745  01EA  168C               	bsf	12,5	;volatile
  2746                           
  2747                           ;bio3.c: 144:     for(i = 0; i < 16; i++) {
  2748  01EB  01C9               	clrf	config@i
  2749  01EC                     l151:	
  2750                           
  2751                           ;bio3.c: 145:         if (conf.datashort & 0x0001) {
  2752  01EC  1C74               	btfss	config@conf,0
  2753  01ED  29F0               	goto	l1943
  2754                           
  2755                           ;bio3.c: 146:             out |= 0b00000100; PORTC = out;;
  2756  01EE  154A               	bsf	config@out,2
  2757                           
  2758                           ;bio3.c: 147:         } else {
  2759  01EF  29F4               	goto	l1941
  2760  01F0                     l1943:	
  2761                           
  2762                           ;bio3.c: 148:             out &= 0b11111011; PORTC = out;;
  2763  01F0  30FB               	movlw	251
  2764  01F1  00C8               	movwf	??_config
  2765  01F2  0848               	movf	??_config,w
  2766  01F3  05CA               	andwf	config@out,f
  2767  01F4                     l1941:	
  2768  01F4  084A               	movf	config@out,w
  2769  01F5  008E               	movwf	14	;volatile
  2770                           
  2771                           ;bio3.c: 150:         conf.datashort >>= 1;
  2772  01F6  3001               	movlw	1
  2773  01F7                     u845:	
  2774  01F7  36F5               	lsrf	config@conf+1,f
  2775  01F8  0CF4               	rrf	config@conf,f
  2776  01F9  0B89               	decfsz	9,f
  2777  01FA  29F7               	goto	u845
  2778                           
  2779                           ;bio3.c: 152:         _delay((unsigned long)((50)*(500000/4000000.0)));
  2780  01FB  3200               	nop2	;2 cycle nop
  2781  01FC  3200               	nop2	;2 cycle nop
  2782  01FD  3200               	nop2	;2 cycle nop
  2783                           
  2784                           ;bio3.c: 154:         out |= 0b00001000; PORTC = out;;
  2785  01FE  0020               	movlb	0	; select bank0
  2786  01FF  15CA               	bsf	config@out,3
  2787  0200  084A               	movf	config@out,w
  2788  0201  008E               	movwf	14	;volatile
  2789                           
  2790                           ;bio3.c: 155:         _delay((unsigned long)((50)*(500000/4000000.0)));
  2791  0202  3200               	nop2	;2 cycle nop
  2792  0203  3200               	nop2	;2 cycle nop
  2793  0204  3200               	nop2	;2 cycle nop
  2794                           
  2795                           ;bio3.c: 156:         out &= 0b11110111; PORTC = out;;
  2796  0205  30F7               	movlw	247
  2797  0206  0020               	movlb	0	; select bank0
  2798  0207  00C8               	movwf	??_config
  2799  0208  0848               	movf	??_config,w
  2800  0209  05CA               	andwf	config@out,f
  2801  020A  084A               	movf	config@out,w
  2802  020B  008E               	movwf	14	;volatile
  2803                           
  2804                           ;bio3.c: 158:     }
  2805  020C  3001               	movlw	1
  2806  020D  00C8               	movwf	??_config
  2807  020E  0848               	movf	??_config,w
  2808  020F  07C9               	addwf	config@i,f
  2809  0210  3010               	movlw	16
  2810  0211  0249               	subwf	config@i,w
  2811  0212  1803               	btfsc	3,0
  2812  0213  0008               	return
  2813  0214  29EC               	goto	l151
  2814  0215                     __end_of_config:	
  2815                           
  2816                           	psect	text6
  2817  02BB                     __ptext6:	
  2818 ;; *************** function _ADC_5 *****************
  2819 ;; Defined at:
  2820 ;;		line 48 in file "ADC1823.c"
  2821 ;; Parameters:    Size  Location     Type
  2822 ;;		None
  2823 ;; Auto vars:     Size  Location     Type
  2824 ;;  ADC_value       2    2[BANK0 ] unsigned short 
  2825 ;; Return value:  Size  Location     Type
  2826 ;;                  2    4[COMMON] unsigned short 
  2827 ;; Registers used:
  2828 ;;		wreg
  2829 ;; Tracked objects:
  2830 ;;		On entry : 0/0
  2831 ;;		On exit  : 1F/0
  2832 ;;		Unchanged: 0/0
  2833 ;; Data sizes:     COMMON   BANK0   BANK1
  2834 ;;      Params:         2       0       0
  2835 ;;      Locals:         0       2       0
  2836 ;;      Temps:          0       2       0
  2837 ;;      Totals:         2       4       0
  2838 ;;Total ram usage:        6 bytes
  2839 ;; Hardware stack levels used:    1
  2840 ;; Hardware stack levels required when called:    2
  2841 ;; This function calls:
  2842 ;;		Nothing
  2843 ;; This function is called by:
  2844 ;;		_measure
  2845 ;; This function uses a non-reentrant model
  2846 ;;
  2847                           
  2848                           
  2849                           ;psect for function _ADC_5
  2850  02BB                     _ADC_5:	
  2851                           
  2852                           ;ADC1823.c: 50:     unsigned short ADC_value;;ADC1823.c: 52:     { ADCON0 = 0b00010101;}
      +                          ;
  2853                           
  2854                           ;incstack = 0
  2855                           ; Regs used in _ADC_5: [wreg]
  2856  02BB  3015               	movlw	21
  2857  02BC  0021               	movlb	1	; select bank1
  2858  02BD  009D               	movwf	29	;volatile
  2859                           
  2860                           ;ADC1823.c: 53:     __nop();
  2861  02BE  0000               	nop
  2862                           
  2863                           ;ADC1823.c: 54:     { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_v
      +                          alue |= ADRESL;};
  2864  02BF  0021               	movlb	1	; select bank1
  2865  02C0  149D               	bsf	29,1	;volatile
  2866  02C1                     l442:	
  2867  02C1  189D               	btfsc	29,1	;volatile
  2868  02C2  2AC1               	goto	l442
  2869  02C3  081C               	movf	28,w	;volatile
  2870  02C4  0020               	movlb	0	; select bank0
  2871  02C5  00C8               	movwf	??_ADC_5
  2872  02C6  01C9               	clrf	??_ADC_5+1
  2873  02C7  0848               	movf	??_ADC_5,w
  2874  02C8  00CA               	movwf	ADC_5@ADC_value
  2875  02C9  0849               	movf	??_ADC_5+1,w
  2876  02CA  00CB               	movwf	ADC_5@ADC_value+1
  2877  02CB  3008               	movlw	8
  2878  02CC                     u875:	
  2879  02CC  35CA               	lslf	ADC_5@ADC_value,f
  2880  02CD  0DCB               	rlf	ADC_5@ADC_value+1,f
  2881  02CE  0B89               	decfsz	9,f
  2882  02CF  2ACC               	goto	u875
  2883  02D0  0021               	movlb	1	; select bank1
  2884  02D1  081B               	movf	27,w	;volatile
  2885  02D2  0020               	movlb	0	; select bank0
  2886  02D3  00C8               	movwf	??_ADC_5
  2887  02D4  01C9               	clrf	??_ADC_5+1
  2888  02D5  0848               	movf	??_ADC_5,w
  2889  02D6  04CA               	iorwf	ADC_5@ADC_value,f
  2890  02D7  0849               	movf	??_ADC_5+1,w
  2891  02D8  04CB               	iorwf	ADC_5@ADC_value+1,f
  2892                           
  2893                           ;ADC1823.c: 56:     return ADC_value;
  2894  02D9  084B               	movf	ADC_5@ADC_value+1,w
  2895  02DA  00F5               	movwf	?_ADC_5+1
  2896  02DB  084A               	movf	ADC_5@ADC_value,w
  2897  02DC  00F4               	movwf	?_ADC_5
  2898  02DD  0008               	return
  2899  02DE                     __end_of_ADC_5:	
  2900                           
  2901                           	psect	text7
  2902  026A                     __ptext7:	
  2903 ;; *************** function _lputs_ISR *****************
  2904 ;; Defined at:
  2905 ;;		line 132 in file "USART1823.c"
  2906 ;; Parameters:    Size  Location     Type
  2907 ;;  data            1    wreg     PTR unsigned char 
  2908 ;;		 -> sweep@aux(7), calibrate_reader@aux(8), measure_Impedance_SE@aux(8), measure_Offset@aux(5), 
  2909 ;;		 -> measure_Impedance_no_offset@aux(13), measure_Impedance@aux(13), read_ADC_channels@aux(7), mess_rec(10), 
  2910 ;;  length          1    4[COMMON] unsigned char 
  2911 ;; Auto vars:     Size  Location     Type
  2912 ;;  data            1    3[BANK0 ] PTR unsigned char 
  2913 ;;		 -> sweep@aux(7), calibrate_reader@aux(8), measure_Impedance_SE@aux(8), measure_Offset@aux(5), 
  2914 ;;		 -> measure_Impedance_no_offset@aux(13), measure_Impedance@aux(13), read_ADC_channels@aux(7), mess_rec(10), 
  2915 ;;  i               1    2[BANK0 ] unsigned char 
  2916 ;; Return value:  Size  Location     Type
  2917 ;;                  1    wreg      void 
  2918 ;; Registers used:
  2919 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2920 ;; Tracked objects:
  2921 ;;		On entry : 1F/0
  2922 ;;		On exit  : 1E/0
  2923 ;;		Unchanged: 0/0
  2924 ;; Data sizes:     COMMON   BANK0   BANK1
  2925 ;;      Params:         1       0       0
  2926 ;;      Locals:         0       2       0
  2927 ;;      Temps:          0       2       0
  2928 ;;      Totals:         1       4       0
  2929 ;;Total ram usage:        5 bytes
  2930 ;; Hardware stack levels used:    1
  2931 ;; Hardware stack levels required when called:    3
  2932 ;; This function calls:
  2933 ;;		_close_RX_USART
  2934 ;; This function is called by:
  2935 ;;		_sweep
  2936 ;; This function uses a non-reentrant model
  2937 ;;
  2938                           
  2939                           
  2940                           ;psect for function _lputs_ISR
  2941  026A                     _lputs_ISR:	
  2942                           
  2943                           ;incstack = 0
  2944                           ; Regs used in _lputs_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2945                           ;lputs_ISR@data stored from wreg
  2946  026A  00CB               	movwf	lputs_ISR@data
  2947                           
  2948                           ;USART1823.c: 132: void lputs_ISR(unsigned char* data, unsigned char length);USART1823.c
      +                          : 133: {;USART1823.c: 134:     unsigned char i;;USART1823.c: 136:     if (USART_tx_flag 
      +                          == 1)
  2949  026B  0377               	decf	_USART_tx_flag,w	;volatile
  2950  026C  1903               	btfsc	3,2
  2951  026D  0008               	return
  2952                           
  2953                           ;USART1823.c: 139:     for (i = 0; i < length; i++)
  2954  026E  01CA               	clrf	lputs_ISR@i
  2955  026F                     l2007:	
  2956  026F  0874               	movf	lputs_ISR@length,w
  2957  0270  024A               	subwf	lputs_ISR@i,w
  2958  0271  1803               	btfsc	3,0
  2959  0272  2A86               	goto	l2009
  2960                           
  2961                           ;USART1823.c: 140:         USART_tx_data[i] = data[i];
  2962  0273  084A               	movf	lputs_ISR@i,w
  2963  0274  074B               	addwf	lputs_ISR@data,w
  2964  0275  00C8               	movwf	??_lputs_ISR
  2965  0276  0848               	movf	??_lputs_ISR,w
  2966  0277  0086               	movwf	6
  2967  0278  0187               	clrf	7
  2968  0279  0801               	movf	1,w
  2969  027A  00C9               	movwf	??_lputs_ISR+1
  2970  027B  084A               	movf	lputs_ISR@i,w
  2971  027C  3E20               	addlw	(low (_USART_tx_data| 0))& (0+255)
  2972  027D  0086               	movwf	6
  2973  027E  0187               	clrf	7
  2974  027F  0849               	movf	??_lputs_ISR+1,w
  2975  0280  0081               	movwf	1
  2976  0281  3001               	movlw	1
  2977  0282  00C8               	movwf	??_lputs_ISR
  2978  0283  0848               	movf	??_lputs_ISR,w
  2979  0284  07CA               	addwf	lputs_ISR@i,f
  2980  0285  2A6F               	goto	l2007
  2981  0286                     l2009:	
  2982                           
  2983                           ;USART1823.c: 142:     close_RX_USART();
  2984  0286  2361               	fcall	_close_RX_USART
  2985                           
  2986                           ;USART1823.c: 144:     USART_tx_index = 0;
  2987  0287  01F9               	clrf	_USART_tx_index	;volatile
  2988                           
  2989                           ;USART1823.c: 145:     USART_tx_length = length;
  2990  0288  0874               	movf	lputs_ISR@length,w
  2991  0289  00C8               	movwf	??_lputs_ISR
  2992  028A  0848               	movf	??_lputs_ISR,w
  2993  028B  00F8               	movwf	_USART_tx_length	;volatile
  2994                           
  2995                           ;USART1823.c: 147:     USART_tx_flag = 1;
  2996  028C  3001               	movlw	1
  2997  028D  00C8               	movwf	??_lputs_ISR
  2998  028E  0848               	movf	??_lputs_ISR,w
  2999  028F  00F7               	movwf	_USART_tx_flag	;volatile
  3000                           
  3001                           ;USART1823.c: 148:     TXIE = 1;
  3002  0290  0021               	movlb	1	; select bank1
  3003  0291  1611               	bsf	17,4	;volatile
  3004  0292  0008               	return
  3005  0293                     __end_of_lputs_ISR:	
  3006                           
  3007                           	psect	text8
  3008  0361                     __ptext8:	
  3009 ;; *************** function _close_RX_USART *****************
  3010 ;; Defined at:
  3011 ;;		line 35 in file "USART1823.c"
  3012 ;; Parameters:    Size  Location     Type
  3013 ;;		None
  3014 ;; Auto vars:     Size  Location     Type
  3015 ;;		None
  3016 ;; Return value:  Size  Location     Type
  3017 ;;                  1    wreg      void 
  3018 ;; Registers used:
  3019 ;;		status,2
  3020 ;; Tracked objects:
  3021 ;;		On entry : 1F/0
  3022 ;;		On exit  : 1F/0
  3023 ;;		Unchanged: 0/0
  3024 ;; Data sizes:     COMMON   BANK0   BANK1
  3025 ;;      Params:         0       0       0
  3026 ;;      Locals:         0       0       0
  3027 ;;      Temps:          0       0       0
  3028 ;;      Totals:         0       0       0
  3029 ;;Total ram usage:        0 bytes
  3030 ;; Hardware stack levels used:    1
  3031 ;; Hardware stack levels required when called:    2
  3032 ;; This function calls:
  3033 ;;		Nothing
  3034 ;; This function is called by:
  3035 ;;		_lputs_ISR
  3036 ;; This function uses a non-reentrant model
  3037 ;;
  3038                           
  3039                           
  3040                           ;psect for function _close_RX_USART
  3041  0361                     _close_RX_USART:	
  3042                           
  3043                           ;USART1823.c: 39:     RCIE = 0;
  3044                           
  3045                           ;incstack = 0
  3046                           ; Regs used in _close_RX_USART: [status,2]
  3047  0361  0021               	movlb	1	; select bank1
  3048  0362  1291               	bcf	17,5	;volatile
  3049                           
  3050                           ;USART1823.c: 40:     CREN = 0;
  3051  0363  0023               	movlb	3	; select bank3
  3052  0364  121D               	bcf	29,4	;volatile
  3053                           
  3054                           ;USART1823.c: 41:     USART_rx_index = 0;
  3055  0365  0020               	movlb	0	; select bank0
  3056  0366  01BC               	clrf	_USART_rx_index	;volatile
  3057  0367  0008               	return
  3058  0368                     __end_of_close_RX_USART:	
  3059                           
  3060                           	psect	text9
  3061  02F7                     __ptext9:	
  3062 ;; *************** function _calculate_checksum *****************
  3063 ;; Defined at:
  3064 ;;		line 407 in file "comm.c"
  3065 ;; Parameters:    Size  Location     Type
  3066 ;;  data            1    wreg     PTR unsigned char 
  3067 ;;		 -> sweep@aux(7), 
  3068 ;;  num             1    4[COMMON] unsigned char 
  3069 ;; Auto vars:     Size  Location     Type
  3070 ;;  data            1    2[BANK0 ] PTR unsigned char 
  3071 ;;		 -> sweep@aux(7), 
  3072 ;;  i               1    4[BANK0 ] unsigned char 
  3073 ;;  check           1    3[BANK0 ] unsigned char 
  3074 ;; Return value:  Size  Location     Type
  3075 ;;                  1    wreg      unsigned char 
  3076 ;; Registers used:
  3077 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3078 ;; Tracked objects:
  3079 ;;		On entry : 1F/0
  3080 ;;		On exit  : 1F/0
  3081 ;;		Unchanged: 0/0
  3082 ;; Data sizes:     COMMON   BANK0   BANK1
  3083 ;;      Params:         1       0       0
  3084 ;;      Locals:         0       3       0
  3085 ;;      Temps:          0       2       0
  3086 ;;      Totals:         1       5       0
  3087 ;;Total ram usage:        6 bytes
  3088 ;; Hardware stack levels used:    1
  3089 ;; Hardware stack levels required when called:    2
  3090 ;; This function calls:
  3091 ;;		Nothing
  3092 ;; This function is called by:
  3093 ;;		_sweep
  3094 ;; This function uses a non-reentrant model
  3095 ;;
  3096                           
  3097                           
  3098                           ;psect for function _calculate_checksum
  3099  02F7                     _calculate_checksum:	
  3100                           
  3101                           ;incstack = 0
  3102                           ; Regs used in _calculate_checksum: [wreg+fsr1l+fsr1h+status,2+status,0]
  3103                           ;calculate_checksum@data stored from wreg
  3104  02F7  00CA               	movwf	calculate_checksum@data
  3105                           
  3106                           ;comm.c: 407: unsigned char calculate_checksum(unsigned char* data, unsigned char num);c
      +                          omm.c: 408: {;comm.c: 409:     unsigned char check, i;;comm.c: 411:     check = 0;
  3107  02F8  01CB               	clrf	calculate_checksum@check
  3108                           
  3109                           ;comm.c: 412:     for (i = 0; i < num; i++) {
  3110  02F9  01CC               	clrf	calculate_checksum@i
  3111  02FA                     l2025:	
  3112  02FA  0874               	movf	calculate_checksum@num,w
  3113  02FB  024C               	subwf	calculate_checksum@i,w
  3114  02FC  1803               	btfsc	3,0
  3115  02FD  2B0D               	goto	l2027
  3116                           
  3117                           ;comm.c: 413:         check ^= data[i];
  3118  02FE  084C               	movf	calculate_checksum@i,w
  3119  02FF  074A               	addwf	calculate_checksum@data,w
  3120  0300  00C8               	movwf	??_calculate_checksum
  3121  0301  0848               	movf	??_calculate_checksum,w
  3122  0302  0086               	movwf	6
  3123  0303  0187               	clrf	7
  3124  0304  0801               	movf	1,w
  3125  0305  00C9               	movwf	??_calculate_checksum+1
  3126  0306  0849               	movf	??_calculate_checksum+1,w
  3127  0307  06CB               	xorwf	calculate_checksum@check,f
  3128                           
  3129                           ;comm.c: 414:     }
  3130  0308  3001               	movlw	1
  3131  0309  00C8               	movwf	??_calculate_checksum
  3132  030A  0848               	movf	??_calculate_checksum,w
  3133  030B  07CC               	addwf	calculate_checksum@i,f
  3134  030C  2AFA               	goto	l2025
  3135  030D                     l2027:	
  3136                           
  3137                           ;comm.c: 416:     return check;
  3138  030D  084B               	movf	calculate_checksum@check,w
  3139  030E  0008               	return
  3140  030F                     __end_of_calculate_checksum:	
  3141                           
  3142                           	psect	text10
  3143  0330                     __ptext10:	
  3144 ;; *************** function _start_TX_USART_ISR *****************
  3145 ;; Defined at:
  3146 ;;		line 101 in file "USART1823.c"
  3147 ;; Parameters:    Size  Location     Type
  3148 ;;		None
  3149 ;; Auto vars:     Size  Location     Type
  3150 ;;		None
  3151 ;; Return value:  Size  Location     Type
  3152 ;;                  1    wreg      void 
  3153 ;; Registers used:
  3154 ;;		wreg, status,2
  3155 ;; Tracked objects:
  3156 ;;		On entry : B1F/1
  3157 ;;		On exit  : B1F/3
  3158 ;;		Unchanged: B00/0
  3159 ;; Data sizes:     COMMON   BANK0   BANK1
  3160 ;;      Params:         0       0       0
  3161 ;;      Locals:         0       0       0
  3162 ;;      Temps:          0       0       0
  3163 ;;      Totals:         0       0       0
  3164 ;;Total ram usage:        0 bytes
  3165 ;; Hardware stack levels used:    1
  3166 ;; Hardware stack levels required when called:    2
  3167 ;; This function calls:
  3168 ;;		Nothing
  3169 ;; This function is called by:
  3170 ;;		_main
  3171 ;; This function uses a non-reentrant model
  3172 ;;
  3173                           
  3174                           
  3175                           ;psect for function _start_TX_USART_ISR
  3176  0330                     _start_TX_USART_ISR:	
  3177                           
  3178                           ;USART1823.c: 103:     { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  3179                           
  3180                           ;incstack = 0
  3181                           ; Regs used in _start_TX_USART_ISR: [wreg+status,2]
  3182  0330  0023               	movlb	3	; select bank3
  3183  0331  151E               	bsf	30,2	;volatile
  3184  0332  159F               	bsf	31,3	;volatile
  3185  0333  019C               	clrf	28	;volatile
  3186  0334  300C               	movlw	12
  3187  0335  009B               	movwf	27	;volatile
  3188                           
  3189                           ;USART1823.c: 104:     SYNC = 0;
  3190  0336  121E               	bcf	30,4	;volatile
  3191                           
  3192                           ;USART1823.c: 105:     SPEN = 1;
  3193  0337  179D               	bsf	29,7	;volatile
  3194                           
  3195                           ;USART1823.c: 106:     TXEN = 1;
  3196  0338  169E               	bsf	30,5	;volatile
  3197                           
  3198                           ;USART1823.c: 108:     USART_tx_flag = 0;
  3199  0339  01F7               	clrf	_USART_tx_flag	;volatile
  3200                           
  3201                           ;USART1823.c: 109:     USART_tx_index = 0;
  3202  033A  01F9               	clrf	_USART_tx_index	;volatile
  3203                           
  3204                           ;USART1823.c: 110:     USART_tx_length = 0;
  3205  033B  01F8               	clrf	_USART_tx_length	;volatile
  3206                           
  3207                           ;USART1823.c: 113:     PEIE = 1;
  3208  033C  170B               	bsf	11,6	;volatile
  3209                           
  3210                           ;USART1823.c: 114:     GIE = 1;
  3211  033D  178B               	bsf	11,7	;volatile
  3212  033E  0008               	return
  3213  033F                     __end_of_start_TX_USART_ISR:	
  3214                           
  3215                           	psect	text11
  3216  0320                     __ptext11:	
  3217 ;; *************** function _start_RX_USART_ISR *****************
  3218 ;; Defined at:
  3219 ;;		line 83 in file "USART1823.c"
  3220 ;; Parameters:    Size  Location     Type
  3221 ;;		None
  3222 ;; Auto vars:     Size  Location     Type
  3223 ;;		None
  3224 ;; Return value:  Size  Location     Type
  3225 ;;                  1    wreg      void 
  3226 ;; Registers used:
  3227 ;;		wreg, status,2
  3228 ;; Tracked objects:
  3229 ;;		On entry : B1F/3
  3230 ;;		On exit  : B1F/1
  3231 ;;		Unchanged: B00/0
  3232 ;; Data sizes:     COMMON   BANK0   BANK1
  3233 ;;      Params:         0       0       0
  3234 ;;      Locals:         0       0       0
  3235 ;;      Temps:          0       0       0
  3236 ;;      Totals:         0       0       0
  3237 ;;Total ram usage:        0 bytes
  3238 ;; Hardware stack levels used:    1
  3239 ;; Hardware stack levels required when called:    2
  3240 ;; This function calls:
  3241 ;;		Nothing
  3242 ;; This function is called by:
  3243 ;;		_main
  3244 ;; This function uses a non-reentrant model
  3245 ;;
  3246                           
  3247                           
  3248                           ;psect for function _start_RX_USART_ISR
  3249  0320                     _start_RX_USART_ISR:	
  3250                           
  3251                           ;USART1823.c: 86:      { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  3252                           
  3253                           ;incstack = 0
  3254                           ; Regs used in _start_RX_USART_ISR: [wreg+status,2]
  3255  0320  151E               	bsf	30,2	;volatile
  3256  0321  159F               	bsf	31,3	;volatile
  3257  0322  019C               	clrf	28	;volatile
  3258  0323  300C               	movlw	12
  3259  0324  009B               	movwf	27	;volatile
  3260                           
  3261                           ;USART1823.c: 88:     SYNC = 0;
  3262  0325  121E               	bcf	30,4	;volatile
  3263                           
  3264                           ;USART1823.c: 89:     SPEN = 1;
  3265  0326  179D               	bsf	29,7	;volatile
  3266                           
  3267                           ;USART1823.c: 90:     CREN = 1;
  3268  0327  161D               	bsf	29,4	;volatile
  3269                           
  3270                           ;USART1823.c: 92:     USART_rx_flag = 0;
  3271  0328  01F6               	clrf	_USART_rx_flag	;volatile
  3272                           
  3273                           ;USART1823.c: 93:     USART_rx_index = 0;
  3274  0329  0020               	movlb	0	; select bank0
  3275  032A  01BC               	clrf	_USART_rx_index	;volatile
  3276                           
  3277                           ;USART1823.c: 95:     RCIE = 1;
  3278  032B  0021               	movlb	1	; select bank1
  3279  032C  1691               	bsf	17,5	;volatile
  3280                           
  3281                           ;USART1823.c: 96:     PEIE = 1;
  3282  032D  170B               	bsf	11,6	;volatile
  3283                           
  3284                           ;USART1823.c: 97:     GIE = 1;
  3285  032E  178B               	bsf	11,7	;volatile
  3286  032F  0008               	return
  3287  0330                     __end_of_start_RX_USART_ISR:	
  3288                           
  3289                           	psect	text12
  3290  0380                     __ptext12:	
  3291 ;; *************** function _start_RCM *****************
  3292 ;; Defined at:
  3293 ;;		line 4 in file "RCM1823.c"
  3294 ;; Parameters:    Size  Location     Type
  3295 ;;		None
  3296 ;; Auto vars:     Size  Location     Type
  3297 ;;		None
  3298 ;; Return value:  Size  Location     Type
  3299 ;;                  1    wreg      void 
  3300 ;; Registers used:
  3301 ;;		wreg
  3302 ;; Tracked objects:
  3303 ;;		On entry : B1F/1
  3304 ;;		On exit  : B1F/7
  3305 ;;		Unchanged: B00/0
  3306 ;; Data sizes:     COMMON   BANK0   BANK1
  3307 ;;      Params:         0       0       0
  3308 ;;      Locals:         0       0       0
  3309 ;;      Temps:          0       0       0
  3310 ;;      Totals:         0       0       0
  3311 ;;Total ram usage:        0 bytes
  3312 ;; Hardware stack levels used:    1
  3313 ;; Hardware stack levels required when called:    2
  3314 ;; This function calls:
  3315 ;;		Nothing
  3316 ;; This function is called by:
  3317 ;;		_main
  3318 ;; This function uses a non-reentrant model
  3319 ;;
  3320                           
  3321                           
  3322                           ;psect for function _start_RCM
  3323  0380                     _start_RCM:	
  3324                           
  3325                           ;RCM1823.c: 6:     CLKRCON = 0b11010000;
  3326                           
  3327                           ;incstack = 0
  3328                           ; Regs used in _start_RCM: [wreg]
  3329  0380  30D0               	movlw	208
  3330  0381  0027               	movlb	7	; select bank7
  3331  0382  009A               	movwf	26	;volatile
  3332  0383  0008               	return
  3333  0384                     __end_of_start_RCM:	
  3334                           
  3335                           	psect	text13
  3336  036E                     __ptext13:	
  3337 ;; *************** function _setup_TMR0 *****************
  3338 ;; Defined at:
  3339 ;;		line 10 in file "TMR0.c"
  3340 ;; Parameters:    Size  Location     Type
  3341 ;;		None
  3342 ;; Auto vars:     Size  Location     Type
  3343 ;;		None
  3344 ;; Return value:  Size  Location     Type
  3345 ;;                  1    wreg      void 
  3346 ;; Registers used:
  3347 ;;		None
  3348 ;; Tracked objects:
  3349 ;;		On entry : B1F/1
  3350 ;;		On exit  : B1F/1
  3351 ;;		Unchanged: B00/0
  3352 ;; Data sizes:     COMMON   BANK0   BANK1
  3353 ;;      Params:         0       0       0
  3354 ;;      Locals:         0       0       0
  3355 ;;      Temps:          0       0       0
  3356 ;;      Totals:         0       0       0
  3357 ;;Total ram usage:        0 bytes
  3358 ;; Hardware stack levels used:    1
  3359 ;; Hardware stack levels required when called:    2
  3360 ;; This function calls:
  3361 ;;		Nothing
  3362 ;; This function is called by:
  3363 ;;		_main
  3364 ;; This function uses a non-reentrant model
  3365 ;;
  3366                           
  3367                           
  3368                           ;psect for function _setup_TMR0
  3369  036E                     _setup_TMR0:	
  3370                           
  3371                           ;TMR0.c: 13:     PS2 = 0; PS1 = 1; PS0 = 0;
  3372                           
  3373                           ;incstack = 0
  3374                           ; Regs used in _setup_TMR0: []
  3375  036E  1115               	bcf	21,2	;volatile
  3376  036F  1495               	bsf	21,1	;volatile
  3377  0370  1015               	bcf	21,0	;volatile
  3378                           
  3379                           ;TMR0.c: 16:     PSA = 0;
  3380  0371  1195               	bcf	21,3	;volatile
  3381                           
  3382                           ;TMR0.c: 18:     TMR0CS = 0;
  3383  0372  1295               	bcf	21,5	;volatile
  3384  0373  0008               	return
  3385  0374                     __end_of_setup_TMR0:	
  3386                           
  3387                           	psect	text14
  3388  0374                     __ptext14:	
  3389 ;; *************** function _setup_ADC *****************
  3390 ;; Defined at:
  3391 ;;		line 3 in file "ADC1823.c"
  3392 ;; Parameters:    Size  Location     Type
  3393 ;;		None
  3394 ;; Auto vars:     Size  Location     Type
  3395 ;;		None
  3396 ;; Return value:  Size  Location     Type
  3397 ;;                  1    wreg      void 
  3398 ;; Registers used:
  3399 ;;		wreg
  3400 ;; Tracked objects:
  3401 ;;		On entry : B1F/7
  3402 ;;		On exit  : B1F/1
  3403 ;;		Unchanged: B00/0
  3404 ;; Data sizes:     COMMON   BANK0   BANK1
  3405 ;;      Params:         0       0       0
  3406 ;;      Locals:         0       0       0
  3407 ;;      Temps:          0       0       0
  3408 ;;      Totals:         0       0       0
  3409 ;;Total ram usage:        0 bytes
  3410 ;; Hardware stack levels used:    1
  3411 ;; Hardware stack levels required when called:    2
  3412 ;; This function calls:
  3413 ;;		Nothing
  3414 ;; This function is called by:
  3415 ;;		_main
  3416 ;; This function uses a non-reentrant model
  3417 ;;
  3418                           
  3419                           
  3420                           ;psect for function _setup_ADC
  3421  0374                     _setup_ADC:	
  3422                           
  3423                           ;ADC1823.c: 20:     ADCON1 = 0b11110000;
  3424                           
  3425                           ;incstack = 0
  3426                           ; Regs used in _setup_ADC: [wreg]
  3427  0374  30F0               	movlw	240
  3428  0375  0021               	movlb	1	; select bank1
  3429  0376  009E               	movwf	30	;volatile
  3430                           
  3431                           ;ADC1823.c: 21:     { ADCON0 = 0b00100100;};
  3432  0377  3024               	movlw	36
  3433  0378  009D               	movwf	29	;volatile
  3434  0379  0008               	return
  3435  037A                     __end_of_setup_ADC:	
  3436                           
  3437                           	psect	text15
  3438  0384                     __ptext15:	
  3439 ;; *************** function _SYSTEM_Initialize *****************
  3440 ;; Defined at:
  3441 ;;		line 70 in file "mcc_generated_files/mcc.c"
  3442 ;; Parameters:    Size  Location     Type
  3443 ;;		None
  3444 ;; Auto vars:     Size  Location     Type
  3445 ;;		None
  3446 ;; Return value:  Size  Location     Type
  3447 ;;                  1    wreg      void 
  3448 ;; Registers used:
  3449 ;;		wreg, status,2, status,0, pclath, cstack
  3450 ;; Tracked objects:
  3451 ;;		On entry : B1F/0
  3452 ;;		On exit  : B1F/1
  3453 ;;		Unchanged: B00/0
  3454 ;; Data sizes:     COMMON   BANK0   BANK1
  3455 ;;      Params:         0       0       0
  3456 ;;      Locals:         0       0       0
  3457 ;;      Temps:          0       0       0
  3458 ;;      Totals:         0       0       0
  3459 ;;Total ram usage:        0 bytes
  3460 ;; Hardware stack levels used:    1
  3461 ;; Hardware stack levels required when called:    3
  3462 ;; This function calls:
  3463 ;;		_OSCILLATOR_Initialize
  3464 ;;		_PIN_MANAGER_Initialize
  3465 ;; This function is called by:
  3466 ;;		_main
  3467 ;; This function uses a non-reentrant model
  3468 ;;
  3469                           
  3470                           
  3471                           ;psect for function _SYSTEM_Initialize
  3472  0384                     _SYSTEM_Initialize:	
  3473                           
  3474                           ;mcc_generated_files/mcc.c: 73:     PIN_MANAGER_Initialize();
  3475                           
  3476                           ;incstack = 0
  3477                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3478  0384  22DE               	fcall	_PIN_MANAGER_Initialize
  3479                           
  3480                           ;mcc_generated_files/mcc.c: 74:     OSCILLATOR_Initialize();
  3481  0385  237A               	fcall	_OSCILLATOR_Initialize
  3482  0386  0008               	return
  3483  0387                     __end_of_SYSTEM_Initialize:	
  3484                           
  3485                           	psect	text16
  3486  02DE                     __ptext16:	
  3487 ;; *************** function _PIN_MANAGER_Initialize *****************
  3488 ;; Defined at:
  3489 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  3490 ;; Parameters:    Size  Location     Type
  3491 ;;		None
  3492 ;; Auto vars:     Size  Location     Type
  3493 ;;		None
  3494 ;; Return value:  Size  Location     Type
  3495 ;;                  1    wreg      void 
  3496 ;; Registers used:
  3497 ;;		wreg, status,2
  3498 ;; Tracked objects:
  3499 ;;		On entry : B1F/0
  3500 ;;		On exit  : B1F/2
  3501 ;;		Unchanged: B00/0
  3502 ;; Data sizes:     COMMON   BANK0   BANK1
  3503 ;;      Params:         0       0       0
  3504 ;;      Locals:         0       0       0
  3505 ;;      Temps:          0       0       0
  3506 ;;      Totals:         0       0       0
  3507 ;;Total ram usage:        0 bytes
  3508 ;; Hardware stack levels used:    1
  3509 ;; Hardware stack levels required when called:    2
  3510 ;; This function calls:
  3511 ;;		Nothing
  3512 ;; This function is called by:
  3513 ;;		_SYSTEM_Initialize
  3514 ;; This function uses a non-reentrant model
  3515 ;;
  3516                           
  3517                           
  3518                           ;psect for function _PIN_MANAGER_Initialize
  3519  02DE                     _PIN_MANAGER_Initialize:	
  3520                           
  3521                           ;mcc_generated_files/pin_manager.c: 51:     LATA = 0x0;
  3522                           
  3523                           ;incstack = 0
  3524                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3525  02DE  0022               	movlb	2	; select bank2
  3526  02DF  018C               	clrf	12	;volatile
  3527                           
  3528                           ;mcc_generated_files/pin_manager.c: 52:     LATC = 0x0;
  3529  02E0  018E               	clrf	14	;volatile
  3530                           
  3531                           ;mcc_generated_files/pin_manager.c: 55:     ANSELA = 0b00000100;
  3532  02E1  3004               	movlw	4
  3533  02E2  0023               	movlb	3	; select bank3
  3534  02E3  008C               	movwf	12	;volatile
  3535                           
  3536                           ;mcc_generated_files/pin_manager.c: 56:     ANSELC = 0b00000011;
  3537  02E4  3003               	movlw	3
  3538  02E5  008E               	movwf	14	;volatile
  3539                           
  3540                           ;mcc_generated_files/pin_manager.c: 59:     WPUA = 0x3B;
  3541  02E6  303B               	movlw	59
  3542  02E7  0024               	movlb	4	; select bank4
  3543  02E8  008C               	movwf	12	;volatile
  3544                           
  3545                           ;mcc_generated_files/pin_manager.c: 61:     WPUC = 0x1C;
  3546  02E9  301C               	movlw	28
  3547  02EA  008E               	movwf	14	;volatile
  3548                           
  3549                           ;mcc_generated_files/pin_manager.c: 63:     RXDTSEL = 0;
  3550  02EB  0022               	movlb	2	; select bank2
  3551  02EC  139D               	bcf	29,7	;volatile
  3552                           
  3553                           ;mcc_generated_files/pin_manager.c: 64:     TXCKSEL = 0;
  3554  02ED  111D               	bcf	29,2	;volatile
  3555                           
  3556                           ;mcc_generated_files/pin_manager.c: 67:     TRISC = 0b01100011;
  3557  02EE  3063               	movlw	99
  3558  02EF  0021               	movlb	1	; select bank1
  3559  02F0  008E               	movwf	14	;volatile
  3560                           
  3561                           ;mcc_generated_files/pin_manager.c: 68:     TRISA = 0b01011111;
  3562  02F1  305F               	movlw	95
  3563  02F2  008C               	movwf	12	;volatile
  3564                           
  3565                           ;mcc_generated_files/pin_manager.c: 70:     OPTION_REGbits.nWPUEN = 0x0;
  3566  02F3  1395               	bcf	21,7	;volatile
  3567                           
  3568                           ;mcc_generated_files/pin_manager.c: 71:     APFCON = 0x00;
  3569  02F4  0022               	movlb	2	; select bank2
  3570  02F5  019D               	clrf	29	;volatile
  3571  02F6  0008               	return
  3572  02F7                     __end_of_PIN_MANAGER_Initialize:	
  3573                           
  3574                           	psect	text17
  3575  037A                     __ptext17:	
  3576 ;; *************** function _OSCILLATOR_Initialize *****************
  3577 ;; Defined at:
  3578 ;;		line 78 in file "mcc_generated_files/mcc.c"
  3579 ;; Parameters:    Size  Location     Type
  3580 ;;		None
  3581 ;; Auto vars:     Size  Location     Type
  3582 ;;		None
  3583 ;; Return value:  Size  Location     Type
  3584 ;;                  1    wreg      void 
  3585 ;; Registers used:
  3586 ;;		wreg, status,2
  3587 ;; Tracked objects:
  3588 ;;		On entry : B1F/2
  3589 ;;		On exit  : B1F/1
  3590 ;;		Unchanged: B00/0
  3591 ;; Data sizes:     COMMON   BANK0   BANK1
  3592 ;;      Params:         0       0       0
  3593 ;;      Locals:         0       0       0
  3594 ;;      Temps:          0       0       0
  3595 ;;      Totals:         0       0       0
  3596 ;;Total ram usage:        0 bytes
  3597 ;; Hardware stack levels used:    1
  3598 ;; Hardware stack levels required when called:    2
  3599 ;; This function calls:
  3600 ;;		Nothing
  3601 ;; This function is called by:
  3602 ;;		_SYSTEM_Initialize
  3603 ;; This function uses a non-reentrant model
  3604 ;;
  3605                           
  3606                           
  3607                           ;psect for function _OSCILLATOR_Initialize
  3608  037A                     _OSCILLATOR_Initialize:	
  3609                           
  3610                           ;mcc_generated_files/mcc.c: 81:     OSCCON = 0x3A;
  3611                           
  3612                           ;incstack = 0
  3613                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3614  037A  303A               	movlw	58
  3615  037B  0021               	movlb	1	; select bank1
  3616  037C  0099               	movwf	25	;volatile
  3617                           
  3618                           ;mcc_generated_files/mcc.c: 83:     OSCSTAT = 0x00;
  3619  037D  019A               	clrf	26	;volatile
  3620                           
  3621                           ;mcc_generated_files/mcc.c: 85:     OSCTUNE = 0x00;
  3622  037E  0198               	clrf	24	;volatile
  3623  037F  0008               	return
  3624  0380                     __end_of_OSCILLATOR_Initialize:	
  3625                           
  3626                           	psect	intentry
  3627  0004                     __pintentry:	
  3628 ;; *************** function _isr *****************
  3629 ;; Defined at:
  3630 ;;		line 152 in file "main.c"
  3631 ;; Parameters:    Size  Location     Type
  3632 ;;		None
  3633 ;; Auto vars:     Size  Location     Type
  3634 ;;		None
  3635 ;; Return value:  Size  Location     Type
  3636 ;;                  1    wreg      void 
  3637 ;; Registers used:
  3638 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3639 ;; Tracked objects:
  3640 ;;		On entry : 0/0
  3641 ;;		On exit  : 1C/0
  3642 ;;		Unchanged: 0/0
  3643 ;; Data sizes:     COMMON   BANK0   BANK1
  3644 ;;      Params:         0       0       0
  3645 ;;      Locals:         0       0       0
  3646 ;;      Temps:          1       0       0
  3647 ;;      Totals:         1       0       0
  3648 ;;Total ram usage:        1 bytes
  3649 ;; Hardware stack levels used:    1
  3650 ;; Hardware stack levels required when called:    1
  3651 ;; This function calls:
  3652 ;;		_start_TMR0_ISR
  3653 ;;		_stop_TMR0_ISR
  3654 ;;		i1_start_RX_USART_ISR
  3655 ;; This function is called by:
  3656 ;;		Interrupt level 1
  3657 ;; This function uses a non-reentrant model
  3658 ;;
  3659                           
  3660  0004                     _isr:	
  3661                           
  3662                           ;incstack = 0
  3663  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  3664                           
  3665                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3666  0005  3180               	pagesel	$
  3667                           
  3668                           ;main.c: 156:     if (TMR0IF && TMR0IE) {
  3669  0006  190B               	btfsc	11,2	;volatile
  3670  0007  1E8B               	btfss	11,5	;volatile
  3671  0008  2813               	goto	i1l130
  3672                           
  3673                           ;main.c: 158:         TMR0IF = 0;
  3674  0009  110B               	bcf	11,2	;volatile
  3675                           
  3676                           ;main.c: 159:         TMR0 = TIMER0_timeout;
  3677  000A  0020               	movlb	0	; select bank0
  3678  000B  0839               	movf	_TIMER0_timeout,w	;volatile
  3679  000C  0095               	movwf	21	;volatile
  3680                           
  3681                           ;main.c: 162:         TIMER0_flag = 1;
  3682  000D  3001               	movlw	1
  3683  000E  00F3               	movwf	??_isr
  3684  000F  0873               	movf	??_isr,w
  3685  0010  00BD               	movwf	_TIMER0_flag	;volatile
  3686                           
  3687                           ;main.c: 167:         stop_TMR0_ISR();
  3688  0011  2387               	fcall	_stop_TMR0_ISR
  3689  0012  2850               	goto	i1l131
  3690  0013                     i1l130:	
  3691                           ;main.c: 170:     }
  3692                           
  3693                           
  3694                           ;main.c: 174:     if (RCIF) {
  3695  0013  0020               	movlb	0	; select bank0
  3696  0014  1E91               	btfss	17,5	;volatile
  3697  0015  2835               	goto	i1l132
  3698                           
  3699                           ;main.c: 175:         stop_TMR0_ISR();
  3700  0016  2387               	fcall	_stop_TMR0_ISR
  3701                           
  3702                           ;main.c: 178:        if (OERR) {
  3703  0017  0023               	movlb	3	; select bank3
  3704  0018  1C9D               	btfss	29,1	;volatile
  3705  0019  281F               	goto	i1l1891
  3706                           
  3707                           ;main.c: 180:             CREN = 0;
  3708  001A  121D               	bcf	29,4	;volatile
  3709                           
  3710                           ;main.c: 181:             CREN = 1;
  3711  001B  161D               	bsf	29,4	;volatile
  3712                           
  3713                           ;main.c: 182:             USART_rx_index = 0;
  3714  001C  0020               	movlb	0	; select bank0
  3715  001D  01BC               	clrf	_USART_rx_index	;volatile
  3716  001E  2850               	goto	i1l131
  3717  001F                     i1l1891:	
  3718                           
  3719                           ;main.c: 187:         if (USART_rx_index >= 10) {
  3720  001F  300A               	movlw	10
  3721  0020  0020               	movlb	0	; select bank0
  3722  0021  023C               	subwf	_USART_rx_index,w	;volatile
  3723  0022  1803               	btfsc	3,0
  3724                           
  3725                           ;main.c: 188:             USART_rx_index = 0;
  3726  0023  01BC               	clrf	_USART_rx_index	;volatile
  3727                           
  3728                           ;main.c: 191:         USART_rx_data[USART_rx_index++] = RCREG;
  3729  0024  0023               	movlb	3	; select bank3
  3730  0025  0819               	movf	25,w	;volatile
  3731  0026  00F3               	movwf	??_isr
  3732  0027  0020               	movlb	0	; select bank0
  3733  0028  083C               	movf	_USART_rx_index,w
  3734  0029  3E2F               	addlw	(low (_USART_rx_data| 0))& (0+255)
  3735  002A  0086               	movwf	6
  3736  002B  0187               	clrf	7
  3737  002C  0873               	movf	??_isr,w
  3738  002D  0081               	movwf	1
  3739  002E  3001               	movlw	1
  3740  002F  00F3               	movwf	??_isr
  3741  0030  0873               	movf	??_isr,w
  3742  0031  07BC               	addwf	_USART_rx_index,f	;volatile
  3743                           
  3744                           ;main.c: 193:         start_TMR0_ISR(98);
  3745  0032  3062               	movlw	98
  3746  0033  233F               	fcall	_start_TMR0_ISR
  3747  0034  2850               	goto	i1l131
  3748  0035                     i1l132:	
  3749                           ;main.c: 196:     }
  3750                           
  3751                           
  3752                           ;main.c: 200:     if (TXIF && TXIE) {
  3753  0035  1E11               	btfss	17,4	;volatile
  3754  0036  2850               	goto	i1l131
  3755  0037  0021               	movlb	1	; select bank1
  3756  0038  1E11               	btfss	17,4	;volatile
  3757  0039  2850               	goto	i1l131
  3758                           
  3759                           ;main.c: 202:         TXREG = USART_tx_data[USART_tx_index++];
  3760  003A  0879               	movf	_USART_tx_index,w
  3761  003B  3E20               	addlw	(low (_USART_tx_data| 0))& (0+255)
  3762  003C  0086               	movwf	6
  3763  003D  0187               	clrf	7
  3764  003E  0801               	movf	1,w
  3765  003F  0023               	movlb	3	; select bank3
  3766  0040  009A               	movwf	26	;volatile
  3767  0041  3001               	movlw	1
  3768  0042  00F3               	movwf	??_isr
  3769  0043  0873               	movf	??_isr,w
  3770  0044  07F9               	addwf	_USART_tx_index,f	;volatile
  3771                           
  3772                           ;main.c: 204:         if (USART_tx_index >= USART_tx_length) {
  3773  0045  0878               	movf	_USART_tx_length,w	;volatile
  3774  0046  0279               	subwf	_USART_tx_index,w	;volatile
  3775  0047  1C03               	skipc
  3776  0048  2850               	goto	i1l131
  3777                           
  3778                           ;main.c: 205:             TXIE = 0;
  3779  0049  0021               	movlb	1	; select bank1
  3780  004A  1211               	bcf	17,4	;volatile
  3781                           
  3782                           ;main.c: 206:             USART_tx_flag = 0;
  3783  004B  01F7               	clrf	_USART_tx_flag	;volatile
  3784                           
  3785                           ;main.c: 210:             _delay((unsigned long)((3)*(500000/4000.0)));
  3786  004C  307D               	movlw	125
  3787  004D                     u123_27:	
  3788  004D  0B89               	decfsz	9,f
  3789  004E  284D               	goto	u123_27
  3790                           
  3791                           ;main.c: 212:             start_RX_USART_ISR();
  3792  004F  230F               	fcall	i1_start_RX_USART_ISR
  3793  0050                     i1l131:	
  3794  0050  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  3795  0051  0009               	retfie
  3796  0052                     __end_of_isr:	
  3797                           
  3798                           	psect	text19
  3799  030F                     __ptext19:	
  3800 ;; *************** function i1_start_RX_USART_ISR *****************
  3801 ;; Defined at:
  3802 ;;		line 83 in file "USART1823.c"
  3803 ;; Parameters:    Size  Location     Type
  3804 ;;		None
  3805 ;; Auto vars:     Size  Location     Type
  3806 ;;		None
  3807 ;; Return value:  Size  Location     Type
  3808 ;;                  1    wreg      void 
  3809 ;; Registers used:
  3810 ;;		wreg, status,2
  3811 ;; Tracked objects:
  3812 ;;		On entry : 0/1
  3813 ;;		On exit  : 1F/1
  3814 ;;		Unchanged: 0/0
  3815 ;; Data sizes:     COMMON   BANK0   BANK1
  3816 ;;      Params:         0       0       0
  3817 ;;      Locals:         0       0       0
  3818 ;;      Temps:          0       0       0
  3819 ;;      Totals:         0       0       0
  3820 ;;Total ram usage:        0 bytes
  3821 ;; Hardware stack levels used:    1
  3822 ;; This function calls:
  3823 ;;		Nothing
  3824 ;; This function is called by:
  3825 ;;		_isr
  3826 ;; This function uses a non-reentrant model
  3827 ;;
  3828                           
  3829                           
  3830                           ;psect for function i1_start_RX_USART_ISR
  3831  030F                     i1_start_RX_USART_ISR:	
  3832                           
  3833                           ;USART1823.c: 86:      { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  3834                           
  3835                           ;incstack = 0
  3836                           ; Regs used in i1_start_RX_USART_ISR: [wreg+status,2]
  3837  030F  0023               	movlb	3	; select bank3
  3838  0310  151E               	bsf	30,2	;volatile
  3839  0311  159F               	bsf	31,3	;volatile
  3840  0312  019C               	clrf	28	;volatile
  3841  0313  300C               	movlw	12
  3842  0314  009B               	movwf	27	;volatile
  3843                           
  3844                           ;USART1823.c: 88:     SYNC = 0;
  3845  0315  121E               	bcf	30,4	;volatile
  3846                           
  3847                           ;USART1823.c: 89:     SPEN = 1;
  3848  0316  179D               	bsf	29,7	;volatile
  3849                           
  3850                           ;USART1823.c: 90:     CREN = 1;
  3851  0317  161D               	bsf	29,4	;volatile
  3852                           
  3853                           ;USART1823.c: 92:     USART_rx_flag = 0;
  3854  0318  01F6               	clrf	_USART_rx_flag	;volatile
  3855                           
  3856                           ;USART1823.c: 93:     USART_rx_index = 0;
  3857  0319  0020               	movlb	0	; select bank0
  3858  031A  01BC               	clrf	_USART_rx_index	;volatile
  3859                           
  3860                           ;USART1823.c: 95:     RCIE = 1;
  3861  031B  0021               	movlb	1	; select bank1
  3862  031C  1691               	bsf	17,5	;volatile
  3863                           
  3864                           ;USART1823.c: 96:     PEIE = 1;
  3865  031D  170B               	bsf	11,6	;volatile
  3866                           
  3867                           ;USART1823.c: 97:     GIE = 1;
  3868  031E  178B               	bsf	11,7	;volatile
  3869  031F  0008               	return
  3870  0320                     __end_ofi1_start_RX_USART_ISR:	
  3871                           
  3872                           	psect	text20
  3873  0387                     __ptext20:	
  3874 ;; *************** function _stop_TMR0_ISR *****************
  3875 ;; Defined at:
  3876 ;;		line 44 in file "TMR0.c"
  3877 ;; Parameters:    Size  Location     Type
  3878 ;;		None
  3879 ;; Auto vars:     Size  Location     Type
  3880 ;;		None
  3881 ;; Return value:  Size  Location     Type
  3882 ;;                  1    wreg      void 
  3883 ;; Registers used:
  3884 ;;		None
  3885 ;; Tracked objects:
  3886 ;;		On entry : 1F/0
  3887 ;;		On exit  : 1F/0
  3888 ;;		Unchanged: 1F/0
  3889 ;; Data sizes:     COMMON   BANK0   BANK1
  3890 ;;      Params:         0       0       0
  3891 ;;      Locals:         0       0       0
  3892 ;;      Temps:          0       0       0
  3893 ;;      Totals:         0       0       0
  3894 ;;Total ram usage:        0 bytes
  3895 ;; Hardware stack levels used:    1
  3896 ;; This function calls:
  3897 ;;		Nothing
  3898 ;; This function is called by:
  3899 ;;		_isr
  3900 ;; This function uses a non-reentrant model
  3901 ;;
  3902                           
  3903                           
  3904                           ;psect for function _stop_TMR0_ISR
  3905  0387                     _stop_TMR0_ISR:	
  3906                           
  3907                           ;TMR0.c: 47:     TMR0IE = 0;
  3908                           
  3909                           ;incstack = 0
  3910                           ; Regs used in _stop_TMR0_ISR: []
  3911  0387  128B               	bcf	11,5	;volatile
  3912                           
  3913                           ;TMR0.c: 48:     TMR0IF = 0;
  3914  0388  110B               	bcf	11,2	;volatile
  3915  0389  0008               	return
  3916  038A                     __end_of_stop_TMR0_ISR:	
  3917                           
  3918                           	psect	text21
  3919  033F                     __ptext21:	
  3920 ;; *************** function _start_TMR0_ISR *****************
  3921 ;; Defined at:
  3922 ;;		line 30 in file "TMR0.c"
  3923 ;; Parameters:    Size  Location     Type
  3924 ;;  val             1    wreg     unsigned char 
  3925 ;; Auto vars:     Size  Location     Type
  3926 ;;  val             1    2[COMMON] unsigned char 
  3927 ;; Return value:  Size  Location     Type
  3928 ;;                  1    wreg      void 
  3929 ;; Registers used:
  3930 ;;		wreg, status,2
  3931 ;; Tracked objects:
  3932 ;;		On entry : 1F/0
  3933 ;;		On exit  : 1F/0
  3934 ;;		Unchanged: 0/0
  3935 ;; Data sizes:     COMMON   BANK0   BANK1
  3936 ;;      Params:         0       0       0
  3937 ;;      Locals:         1       0       0
  3938 ;;      Temps:          2       0       0
  3939 ;;      Totals:         3       0       0
  3940 ;;Total ram usage:        3 bytes
  3941 ;; Hardware stack levels used:    1
  3942 ;; This function calls:
  3943 ;;		Nothing
  3944 ;; This function is called by:
  3945 ;;		_isr
  3946 ;; This function uses a non-reentrant model
  3947 ;;
  3948                           
  3949                           
  3950                           ;psect for function _start_TMR0_ISR
  3951  033F                     _start_TMR0_ISR:	
  3952                           
  3953                           ;incstack = 0
  3954                           ; Regs used in _start_TMR0_ISR: [wreg+status,2]
  3955                           ;start_TMR0_ISR@val stored from wreg
  3956  033F  00F2               	movwf	start_TMR0_ISR@val
  3957                           
  3958                           ;TMR0.c: 30: void start_TMR0_ISR(unsigned char val);TMR0.c: 31: {;TMR0.c: 32:     TIMER0
      +                          _timeout = val;
  3959  0340  0872               	movf	start_TMR0_ISR@val,w
  3960  0341  00F0               	movwf	??_start_TMR0_ISR
  3961  0342  01F1               	clrf	??_start_TMR0_ISR+1
  3962  0343  0870               	movf	??_start_TMR0_ISR,w
  3963  0344  00B9               	movwf	_TIMER0_timeout	;volatile
  3964  0345  0871               	movf	??_start_TMR0_ISR+1,w
  3965  0346  00BA               	movwf	_TIMER0_timeout+1	;volatile
  3966                           
  3967                           ;TMR0.c: 33:     TIMER0_flag = 0;
  3968  0347  01BD               	clrf	_TIMER0_flag	;volatile
  3969                           
  3970                           ;TMR0.c: 36:     TMR0 = TIMER0_timeout;
  3971  0348  0839               	movf	_TIMER0_timeout,w	;volatile
  3972  0349  0095               	movwf	21	;volatile
  3973                           
  3974                           ;TMR0.c: 39:     TMR0IF = 0;
  3975  034A  110B               	bcf	11,2	;volatile
  3976                           
  3977                           ;TMR0.c: 40:     TMR0IE = 1;
  3978  034B  168B               	bsf	11,5	;volatile
  3979                           
  3980                           ;TMR0.c: 41:     GIE = 1;
  3981  034C  178B               	bsf	11,7	;volatile
  3982  034D  0008               	return
  3983  034E                     __end_of_start_TMR0_ISR:	
  3984  007E                     btemp	set	126	;btemp
  3985  007E                     int$flags	set	126
  3986  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    63
    Data        0
    BSS         44
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     40      80
    BANK1            32      0       0

Pointer List with Targets:

    measure@Q	PTR short  size(1) Largest target is 2
		 -> sweep@Q(BANK0[2]), 

    measure@I	PTR short  size(1) Largest target is 2
		 -> sweep@I(BANK0[2]), 

    calculate_checksum@data	PTR unsigned char  size(1) Largest target is 7
		 -> sweep@aux(BANK0[7]), 

    lputs_ISR@data	PTR unsigned char  size(1) Largest target is 13
		 -> sweep@aux(BANK0[7]), calibrate_reader@aux(COMMON[8]), measure_Impedance_SE@aux(COMMON[8]), measure_Offset@aux(COMMON[5]), 
		 -> measure_Impedance_no_offset@aux(COMMON[13]), measure_Impedance@aux(COMMON[13]), read_ADC_channels@aux(COMMON[7]), mess_rec(BANK0[10]), 

    setFreq@asic	PTR struct . size(1) Largest target is 2
		 -> sweep@asic(BANK0[2]), 

    setGain@asic	PTR struct . size(1) Largest target is 2
		 -> sweep@asic(BANK0[2]), 


Critical Paths under _main in COMMON

    _sweep->_setFreq
    _sweep->_setGain
    _measure->_ADC_5
    _measure->_config

Critical Paths under _isr in COMMON

    _isr->_start_TMR0_ISR

Critical Paths under _main in BANK0

    _main->_sweep
    _sweep->_measure
    _measure->_ADC_5

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    6251
                                             39 BANK0      1     1      0
                  _SYSTEM_Initialize
                          _setup_ADC
                         _setup_TMR0
                          _start_RCM
                 _start_RX_USART_ISR
                 _start_TX_USART_ISR
                              _sweep
 ---------------------------------------------------------------------------------
 (1) _sweep                                               21    21      0    6251
                                             18 BANK0     21    21      0
                 _calculate_checksum
                          _lputs_ISR
                            _measure
                            _setFreq
                            _setGain
 ---------------------------------------------------------------------------------
 (2) _setGain                                              4     3      1     846
                                              4 COMMON     2     1      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setFreq                                              4     3      1     408
                                              4 COMMON     2     1      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _measure                                             14    11      3    2216
                                              4 BANK0     14    11      3
                              _ADC_5
                             _config
 ---------------------------------------------------------------------------------
 (3) _config                                               5     3      2    1242
                                              4 COMMON     2     0      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _ADC_5                                                6     4      2      40
                                              4 COMMON     2     0      2
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _lputs_ISR                                            5     4      1    1166
                                              4 COMMON     1     0      1
                                              0 BANK0      4     4      0
                     _close_RX_USART
 ---------------------------------------------------------------------------------
 (3) _close_RX_USART                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _calculate_checksum                                   6     5      1     293
                                              4 COMMON     1     0      1
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _start_TX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RCM                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_TMR0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_ADC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  1     1      0      22
                                              3 COMMON     1     1      0
                     _start_TMR0_ISR
                      _stop_TMR0_ISR
               i1_start_RX_USART_ISR
 ---------------------------------------------------------------------------------
 (5) i1_start_RX_USART_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _stop_TMR0_ISR                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _start_TMR0_ISR                                       3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _setup_ADC
   _setup_TMR0
   _start_RCM
   _start_RX_USART_ISR
   _start_TX_USART_ISR
   _sweep
     _calculate_checksum
     _lputs_ISR
       _close_RX_USART
     _measure
       _ADC_5
       _config
     _setFreq
     _setGain

 _isr (ROOT)
   _start_TMR0_ISR
   _stop_TMR0_ISR
   i1_start_RX_USART_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      5A       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     28      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      5A       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon Nov 23 16:23:54 2020

                    __CFG_CP$OFF 0000                    _USART_rx_data 002F                    _USART_rx_flag 0076  
                  _USART_tx_data 0020                    _USART_tx_flag 0077                              l151 01EC  
                            l119 0254                              l408 00E5                              l442 02C1  
                            _GIE 005F                              _RA5 0065                              _PS0 04A8  
                            _PS1 04A9                              _PS2 04AA                     __CFG_CPD$OFF 0000  
                            _PSA 04AB                              u845 01F7                              u875 02CC  
                            _isr 0004                     __CFG_BORV$HI 0000                              wreg 0009  
                   __CFG_IESO$ON 0000                   _USART_rx_index 003C                     __CFG_LVP$OFF 0000  
                 _USART_tx_index 0079                             l2007 026F                             l2111 0117  
                           l2025 02FA                             l2009 0286                             l2105 010F  
                           l2027 030D                             l2141 014F                             l2071 00D4  
                           l2055 00A5                             l2143 0153                             l2127 0139  
                           l2081 00F3                             l2139 0149                             l2087 0101  
                           l2191 0260                             l1941 01F4                             l1943 01F0  
                           ?_isr 0070                             _ADGO 04E9                     __CFG_WDTE$ON 0000  
                           _BRGH 0CF2                             _CREN 0CEC                             u1045 00DE  
                           u1055 00EF                             u1207 006B                             u1065 00FD  
                           u1217 0080                             u1145 0156                             u1227 00AF  
                           _LATA 010C                             _LATC 010E                             u1197 024D  
                           _PEIE 005E                             _RCIE 048D                             _RCIF 008D  
                           _OERR 0CE9                             _TMR0 0015                             _SPEN 0CEF  
                           _TXIE 048C                             _TXEN 0CF5                             _TXIF 008C  
                           _SYNC 0CF4                             _WPUA 020C                             _WPUC 020E  
         __size_of_stop_TMR0_ISR 0003                     __CFG_WRT$OFF 0000                             _filt 0215  
                           _main 0241                             fsr0h 0005                             fsr1h 0007  
                           indf0 0000                             fsr0l 0004                             indf1 0001  
                           fsr1l 0006                             btemp 007E      __size_of_calculate_checksum 0018  
                           start 0052                    __CFG_MCLRE$ON 0000                            ??_isr 0073  
 __size_of_OSCILLATOR_Initialize 0006                  _USART_tx_length 0078    __end_of_OSCILLATOR_Initialize 0380  
                          ?_main 0070                            _ADC_5 02BB                            _BRG16 0CFB  
                          i1l130 0013                            i1l131 0050                            i1l132 0035  
                          _RCREG 0199                            _PORTC 000E                            _TRISA 008C  
                 _start_TMR0_ISR 033F                            _TRISC 008E                            _TXREG 019A  
                 __CFG_FCMEN$OFF 0000                            _gains 0359                  __end_of_measure 0103  
                          _freqs 034E                  __end_of_setGain 01DB                            _sweep 0103  
                __end_of_setFreq 02BB    __size_ofi1_start_RX_USART_ISR 0011                   __CFG_BOREN$OFF 0000  
                          status 0003                            wtemp0 007E                  __initialization 0053  
                   __end_of_filt 0241                     __end_of_main 026A                    _stop_TMR0_ISR 0387  
               ??_close_RX_USART 0074           __end_of_start_TMR0_ISR 034E                           ??_main 006F  
                         ?_ADC_5 0074                   _TIMER0_timeout 0039                   __CFG_PLLEN$OFF 0000  
                         _ADCON0 009D                           _ADCON1 009E                      measure@aux1 0058  
                    measure@aux2 0056                      measure@asic 004D                           _ADRESH 009C  
                         _ADRESL 009B                           _APFCON 011D                           _ANSELA 018C  
                         _ANSELC 018E                           ?_sweep 0070                           i1l1891 001F  
                         u123_27 004D                           _OSCCON 0099                           _TMR0IE 005D  
                         _TMR0IF 005A                           _TMR0CS 04AD                           _SPBRGH 019C  
                         _SPBRGL 019B                   __CFG_PWRTE$OFF 0000                   __CFG_STVREN$ON 0000  
                 ?_stop_TMR0_ISR 0070                           _config 01DB                  ?_start_TMR0_ISR 0070  
                      ??_measure 004F      __size_of_start_RX_USART_ISR 0010                        ??_setGain 0075  
                      ??_setFreq 0075                           sweep@I 0067                           sweep@Q 0069  
                         sweep@i 0065                _SYSTEM_Initialize 0384          __end_of__initialization 005D  
             ?_SYSTEM_Initialize 0070                    __end_of_ADC_5 02DE                   __pcstackCOMMON 0070  
            ??_SYSTEM_Initialize 0074                    __end_of_gains 0361                    __end_of_freqs 0359  
                  __end_of_sweep 019E                          ??_ADC_5 0048                   _OPTION_REGbits 0095  
    __size_of_start_TX_USART_ISR 000F                      setGain@asic 0049        __end_of_SYSTEM_Initialize 0387  
                        ??_sweep 005A                       __pbssBANK0 0020                      setFreq@asic 0048  
                     __pmaintext 0241                  ??_stop_TMR0_ISR 0070                       __pintentry 0004  
                        ?_config 0074                     measure@value 0054                          _CLKRCON 039A  
             __size_of_lputs_ISR 0029                  lputs_ISR@length 0074                setFreq@freq_index 0074  
             __size_of_setup_ADC 0006                          _OSCSTAT 009A                          _OSCTUNE 0098  
             __size_of_start_RCM 0004                          _RXDTSEL 08EF                          _TXCKSEL 08EA  
     __end_of_calculate_checksum 030F     __end_ofi1_start_RX_USART_ISR 0320                  __size_of_config 003A  
                        __ptext1 0103                          __ptext2 019E                          __ptext3 0293  
                        __ptext4 0060                          __ptext5 01DB                          __ptext6 02BB  
                        __ptext7 026A                          __ptext8 0361                          __ptext9 02F7  
                        _measure 0060            _OSCILLATOR_Initialize 037A                     __size_of_isr 004E  
                        _setGain 019E                          _setFreq 0293         ??_PIN_MANAGER_Initialize 0074  
                        config@i 0049                setGain@gain_index 0074       __size_of_SYSTEM_Initialize 0003  
                        clrloop0 0369                    _mess_rec_size 003B             end_of_initialization 005D  
              __end_of_lputs_ISR 0293                __end_of_setup_ADC 037A                 ??_start_TMR0_ISR 0070  
              __end_of_start_RCM 0384                       _setup_TMR0 036E                 __CFG_FOSC$INTOSC 0000  
                     config@conf 0074                   __end_of_config 0215       __end_of_start_RX_USART_ISR 0330  
         ?_OSCILLATOR_Initialize 0070              start_initialization 0053  __size_of_PIN_MANAGER_Initialize 0019  
                    __end_of_isr 0052          __size_of_close_RX_USART 0007             i1_start_RX_USART_ISR 030F  
                 ADC_5@ADC_value 004A                         ??_config 0048                      ?_setup_TMR0 0070  
     __end_of_start_TX_USART_ISR 033F                      __pbssCOMMON 0076                        ___latbits 0000  
                  __pcstackBANK0 0048                  sweep@gain_index 006B            ?i1_start_RX_USART_ISR 0070  
                     setGain@aux 0048           _PIN_MANAGER_Initialize 02DE                       setFreq@aux 0049  
          __end_of_stop_TMR0_ISR 038A               _calculate_checksum 02F7                   __size_of_ADC_5 0023  
            ?_calculate_checksum 0074                         ?_measure 004C                         ?_setGain 0074  
                       ?_setFreq 0074                    measure@offset 0051                  sweep@freq_index 0064  
                 __size_of_sweep 009B              __size_of_setup_TMR0 0006             ??_calculate_checksum 0048  
                      clear_ram0 0368                       lputs_ISR@i 004A                        _lputs_ISR 026A  
                      _setup_ADC 0374                        _start_RCM 0380                        config@out 004A  
         ??i1_start_RX_USART_ISR 0070                   _close_RX_USART 0361                       sweep@check 005C  
                     sweep@count 0066                       ?_lputs_ISR 0074          calculate_checksum@check 004B  
                     ?_setup_ADC 0070          ??_OSCILLATOR_Initialize 0074                start_TMR0_ISR@val 0072  
                     ?_start_RCM 0070           __end_of_close_RX_USART 0368                 __size_of_measure 00A3  
               __size_of_setGain 003D                 __size_of_setFreq 0028                         __ptext10 0330  
                       __ptext11 0320                         __ptext20 0387                         __ptext12 0380  
                       __ptext21 033F                         __ptext13 036E                         __ptext14 0374  
                       __ptext15 0384                         __ptext16 02DE                         __ptext17 037A  
                       __ptext19 030F                    lputs_ISR@data 004B               _start_RX_USART_ISR 0320  
                  __size_of_main 0029                         _mess_rec 003E              ?_start_RX_USART_ISR 0070  
                       int$flags 007E                     ??_setup_TMR0 0074                      _TIMER0_flag 003D  
           ??_start_RX_USART_ISR 0074                         measure@I 0053          __size_of_start_TMR0_ISR 000F  
                       measure@Q 004C                  ?_close_RX_USART 0070                        sweep@asic 006D  
         calculate_checksum@data 004A                         intlevel1 0000               _start_TX_USART_ISR 0330  
        ?_PIN_MANAGER_Initialize 0070                __CFG_CLKOUTEN$OFF 0000               __end_of_setup_TMR0 0374  
            ?_start_TX_USART_ISR 0070                      ??_lputs_ISR 0048                      ??_setup_ADC 0074  
                       sweep@aux 005D                         sweep@ret 006C                    __pstringtext1 0215  
                  __pstringtext2 034E                    __pstringtext3 0359            calculate_checksum@num 0074  
                    ??_start_RCM 0074             ??_start_TX_USART_ISR 0074   __end_of_PIN_MANAGER_Initialize 02F7  
            calculate_checksum@i 004C  
