

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Mar  6 08:13:10 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16LF1823
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	psect	text17,local,class=CODE,merge=1,delta=2
    28                           	psect	text18,local,class=CODE,merge=1,delta=2
    29                           	psect	text19,local,class=CODE,merge=1,delta=2
    30                           	psect	text20,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	text22,local,class=CODE,merge=1,delta=2
    33                           	psect	text23,local,class=CODE,merge=1,delta=2
    34                           	psect	text24,local,class=CODE,merge=1,delta=2
    35                           	dabs	1,0x7E,2
    36  0000                     
    37                           ; Version 1.40
    38                           ; Generated 01/12/2016 GMT
    39                           ; 
    40                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC16LF1823 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     	;# 
    72  0001                     	;# 
    73  0002                     	;# 
    74  0003                     	;# 
    75  0004                     	;# 
    76  0005                     	;# 
    77  0006                     	;# 
    78  0007                     	;# 
    79  0008                     	;# 
    80  0009                     	;# 
    81  000A                     	;# 
    82  000B                     	;# 
    83  000C                     	;# 
    84  000E                     	;# 
    85  0011                     	;# 
    86  0012                     	;# 
    87  0015                     	;# 
    88  0016                     	;# 
    89  0016                     	;# 
    90  0017                     	;# 
    91  0018                     	;# 
    92  0019                     	;# 
    93  001A                     	;# 
    94  001B                     	;# 
    95  001C                     	;# 
    96  001E                     	;# 
    97  001F                     	;# 
    98  008C                     	;# 
    99  008E                     	;# 
   100  0091                     	;# 
   101  0092                     	;# 
   102  0095                     	;# 
   103  0096                     	;# 
   104  0097                     	;# 
   105  0098                     	;# 
   106  0099                     	;# 
   107  009A                     	;# 
   108  009B                     	;# 
   109  009B                     	;# 
   110  009C                     	;# 
   111  009D                     	;# 
   112  009E                     	;# 
   113  010C                     	;# 
   114  010E                     	;# 
   115  0111                     	;# 
   116  0112                     	;# 
   117  0113                     	;# 
   118  0114                     	;# 
   119  0115                     	;# 
   120  0116                     	;# 
   121  0117                     	;# 
   122  0118                     	;# 
   123  0119                     	;# 
   124  011A                     	;# 
   125  011B                     	;# 
   126  011D                     	;# 
   127  011D                     	;# 
   128  018C                     	;# 
   129  018E                     	;# 
   130  0191                     	;# 
   131  0191                     	;# 
   132  0192                     	;# 
   133  0193                     	;# 
   134  0193                     	;# 
   135  0193                     	;# 
   136  0194                     	;# 
   137  0195                     	;# 
   138  0196                     	;# 
   139  0199                     	;# 
   140  019A                     	;# 
   141  019B                     	;# 
   142  019B                     	;# 
   143  019B                     	;# 
   144  019B                     	;# 
   145  019C                     	;# 
   146  019C                     	;# 
   147  019D                     	;# 
   148  019E                     	;# 
   149  019F                     	;# 
   150  020C                     	;# 
   151  020E                     	;# 
   152  0211                     	;# 
   153  0211                     	;# 
   154  0212                     	;# 
   155  0212                     	;# 
   156  0213                     	;# 
   157  0213                     	;# 
   158  0214                     	;# 
   159  0214                     	;# 
   160  0215                     	;# 
   161  0215                     	;# 
   162  0215                     	;# 
   163  0216                     	;# 
   164  0216                     	;# 
   165  0217                     	;# 
   166  0217                     	;# 
   167  0291                     	;# 
   168  0291                     	;# 
   169  0292                     	;# 
   170  0293                     	;# 
   171  0294                     	;# 
   172  0295                     	;# 
   173  0295                     	;# 
   174  0296                     	;# 
   175  0391                     	;# 
   176  0392                     	;# 
   177  0393                     	;# 
   178  039A                     	;# 
   179  039C                     	;# 
   180  039D                     	;# 
   181  039E                     	;# 
   182  039F                     	;# 
   183  0FE4                     	;# 
   184  0FE5                     	;# 
   185  0FE6                     	;# 
   186  0FE7                     	;# 
   187  0FE8                     	;# 
   188  0FE9                     	;# 
   189  0FEA                     	;# 
   190  0FEB                     	;# 
   191  0FED                     	;# 
   192  0FEE                     	;# 
   193  0FEF                     	;# 
   194  0000                     	;# 
   195  0001                     	;# 
   196  0002                     	;# 
   197  0003                     	;# 
   198  0004                     	;# 
   199  0005                     	;# 
   200  0006                     	;# 
   201  0007                     	;# 
   202  0008                     	;# 
   203  0009                     	;# 
   204  000A                     	;# 
   205  000B                     	;# 
   206  000C                     	;# 
   207  000E                     	;# 
   208  0011                     	;# 
   209  0012                     	;# 
   210  0015                     	;# 
   211  0016                     	;# 
   212  0016                     	;# 
   213  0017                     	;# 
   214  0018                     	;# 
   215  0019                     	;# 
   216  001A                     	;# 
   217  001B                     	;# 
   218  001C                     	;# 
   219  001E                     	;# 
   220  001F                     	;# 
   221  008C                     	;# 
   222  008E                     	;# 
   223  0091                     	;# 
   224  0092                     	;# 
   225  0095                     	;# 
   226  0096                     	;# 
   227  0097                     	;# 
   228  0098                     	;# 
   229  0099                     	;# 
   230  009A                     	;# 
   231  009B                     	;# 
   232  009B                     	;# 
   233  009C                     	;# 
   234  009D                     	;# 
   235  009E                     	;# 
   236  010C                     	;# 
   237  010E                     	;# 
   238  0111                     	;# 
   239  0112                     	;# 
   240  0113                     	;# 
   241  0114                     	;# 
   242  0115                     	;# 
   243  0116                     	;# 
   244  0117                     	;# 
   245  0118                     	;# 
   246  0119                     	;# 
   247  011A                     	;# 
   248  011B                     	;# 
   249  011D                     	;# 
   250  011D                     	;# 
   251  018C                     	;# 
   252  018E                     	;# 
   253  0191                     	;# 
   254  0191                     	;# 
   255  0192                     	;# 
   256  0193                     	;# 
   257  0193                     	;# 
   258  0193                     	;# 
   259  0194                     	;# 
   260  0195                     	;# 
   261  0196                     	;# 
   262  0199                     	;# 
   263  019A                     	;# 
   264  019B                     	;# 
   265  019B                     	;# 
   266  019B                     	;# 
   267  019B                     	;# 
   268  019C                     	;# 
   269  019C                     	;# 
   270  019D                     	;# 
   271  019E                     	;# 
   272  019F                     	;# 
   273  020C                     	;# 
   274  020E                     	;# 
   275  0211                     	;# 
   276  0211                     	;# 
   277  0212                     	;# 
   278  0212                     	;# 
   279  0213                     	;# 
   280  0213                     	;# 
   281  0214                     	;# 
   282  0214                     	;# 
   283  0215                     	;# 
   284  0215                     	;# 
   285  0215                     	;# 
   286  0216                     	;# 
   287  0216                     	;# 
   288  0217                     	;# 
   289  0217                     	;# 
   290  0291                     	;# 
   291  0291                     	;# 
   292  0292                     	;# 
   293  0293                     	;# 
   294  0294                     	;# 
   295  0295                     	;# 
   296  0295                     	;# 
   297  0296                     	;# 
   298  0391                     	;# 
   299  0392                     	;# 
   300  0393                     	;# 
   301  039A                     	;# 
   302  039C                     	;# 
   303  039D                     	;# 
   304  039E                     	;# 
   305  039F                     	;# 
   306  0FE4                     	;# 
   307  0FE5                     	;# 
   308  0FE6                     	;# 
   309  0FE7                     	;# 
   310  0FE8                     	;# 
   311  0FE9                     	;# 
   312  0FEA                     	;# 
   313  0FEB                     	;# 
   314  0FED                     	;# 
   315  0FEE                     	;# 
   316  0FEF                     	;# 
   317  0000                     	;# 
   318  0001                     	;# 
   319  0002                     	;# 
   320  0003                     	;# 
   321  0004                     	;# 
   322  0005                     	;# 
   323  0006                     	;# 
   324  0007                     	;# 
   325  0008                     	;# 
   326  0009                     	;# 
   327  000A                     	;# 
   328  000B                     	;# 
   329  000C                     	;# 
   330  000E                     	;# 
   331  0011                     	;# 
   332  0012                     	;# 
   333  0015                     	;# 
   334  0016                     	;# 
   335  0016                     	;# 
   336  0017                     	;# 
   337  0018                     	;# 
   338  0019                     	;# 
   339  001A                     	;# 
   340  001B                     	;# 
   341  001C                     	;# 
   342  001E                     	;# 
   343  001F                     	;# 
   344  008C                     	;# 
   345  008E                     	;# 
   346  0091                     	;# 
   347  0092                     	;# 
   348  0095                     	;# 
   349  0096                     	;# 
   350  0097                     	;# 
   351  0098                     	;# 
   352  0099                     	;# 
   353  009A                     	;# 
   354  009B                     	;# 
   355  009B                     	;# 
   356  009C                     	;# 
   357  009D                     	;# 
   358  009E                     	;# 
   359  010C                     	;# 
   360  010E                     	;# 
   361  0111                     	;# 
   362  0112                     	;# 
   363  0113                     	;# 
   364  0114                     	;# 
   365  0115                     	;# 
   366  0116                     	;# 
   367  0117                     	;# 
   368  0118                     	;# 
   369  0119                     	;# 
   370  011A                     	;# 
   371  011B                     	;# 
   372  011D                     	;# 
   373  011D                     	;# 
   374  018C                     	;# 
   375  018E                     	;# 
   376  0191                     	;# 
   377  0191                     	;# 
   378  0192                     	;# 
   379  0193                     	;# 
   380  0193                     	;# 
   381  0193                     	;# 
   382  0194                     	;# 
   383  0195                     	;# 
   384  0196                     	;# 
   385  0199                     	;# 
   386  019A                     	;# 
   387  019B                     	;# 
   388  019B                     	;# 
   389  019B                     	;# 
   390  019B                     	;# 
   391  019C                     	;# 
   392  019C                     	;# 
   393  019D                     	;# 
   394  019E                     	;# 
   395  019F                     	;# 
   396  020C                     	;# 
   397  020E                     	;# 
   398  0211                     	;# 
   399  0211                     	;# 
   400  0212                     	;# 
   401  0212                     	;# 
   402  0213                     	;# 
   403  0213                     	;# 
   404  0214                     	;# 
   405  0214                     	;# 
   406  0215                     	;# 
   407  0215                     	;# 
   408  0215                     	;# 
   409  0216                     	;# 
   410  0216                     	;# 
   411  0217                     	;# 
   412  0217                     	;# 
   413  0291                     	;# 
   414  0291                     	;# 
   415  0292                     	;# 
   416  0293                     	;# 
   417  0294                     	;# 
   418  0295                     	;# 
   419  0295                     	;# 
   420  0296                     	;# 
   421  0391                     	;# 
   422  0392                     	;# 
   423  0393                     	;# 
   424  039A                     	;# 
   425  039C                     	;# 
   426  039D                     	;# 
   427  039E                     	;# 
   428  039F                     	;# 
   429  0FE4                     	;# 
   430  0FE5                     	;# 
   431  0FE6                     	;# 
   432  0FE7                     	;# 
   433  0FE8                     	;# 
   434  0FE9                     	;# 
   435  0FEA                     	;# 
   436  0FEB                     	;# 
   437  0FED                     	;# 
   438  0FEE                     	;# 
   439  0FEF                     	;# 
   440  0000                     	;# 
   441  0001                     	;# 
   442  0002                     	;# 
   443  0003                     	;# 
   444  0004                     	;# 
   445  0005                     	;# 
   446  0006                     	;# 
   447  0007                     	;# 
   448  0008                     	;# 
   449  0009                     	;# 
   450  000A                     	;# 
   451  000B                     	;# 
   452  000C                     	;# 
   453  000E                     	;# 
   454  0011                     	;# 
   455  0012                     	;# 
   456  0015                     	;# 
   457  0016                     	;# 
   458  0016                     	;# 
   459  0017                     	;# 
   460  0018                     	;# 
   461  0019                     	;# 
   462  001A                     	;# 
   463  001B                     	;# 
   464  001C                     	;# 
   465  001E                     	;# 
   466  001F                     	;# 
   467  008C                     	;# 
   468  008E                     	;# 
   469  0091                     	;# 
   470  0092                     	;# 
   471  0095                     	;# 
   472  0096                     	;# 
   473  0097                     	;# 
   474  0098                     	;# 
   475  0099                     	;# 
   476  009A                     	;# 
   477  009B                     	;# 
   478  009B                     	;# 
   479  009C                     	;# 
   480  009D                     	;# 
   481  009E                     	;# 
   482  010C                     	;# 
   483  010E                     	;# 
   484  0111                     	;# 
   485  0112                     	;# 
   486  0113                     	;# 
   487  0114                     	;# 
   488  0115                     	;# 
   489  0116                     	;# 
   490  0117                     	;# 
   491  0118                     	;# 
   492  0119                     	;# 
   493  011A                     	;# 
   494  011B                     	;# 
   495  011D                     	;# 
   496  011D                     	;# 
   497  018C                     	;# 
   498  018E                     	;# 
   499  0191                     	;# 
   500  0191                     	;# 
   501  0192                     	;# 
   502  0193                     	;# 
   503  0193                     	;# 
   504  0193                     	;# 
   505  0194                     	;# 
   506  0195                     	;# 
   507  0196                     	;# 
   508  0199                     	;# 
   509  019A                     	;# 
   510  019B                     	;# 
   511  019B                     	;# 
   512  019B                     	;# 
   513  019B                     	;# 
   514  019C                     	;# 
   515  019C                     	;# 
   516  019D                     	;# 
   517  019E                     	;# 
   518  019F                     	;# 
   519  020C                     	;# 
   520  020E                     	;# 
   521  0211                     	;# 
   522  0211                     	;# 
   523  0212                     	;# 
   524  0212                     	;# 
   525  0213                     	;# 
   526  0213                     	;# 
   527  0214                     	;# 
   528  0214                     	;# 
   529  0215                     	;# 
   530  0215                     	;# 
   531  0215                     	;# 
   532  0216                     	;# 
   533  0216                     	;# 
   534  0217                     	;# 
   535  0217                     	;# 
   536  0291                     	;# 
   537  0291                     	;# 
   538  0292                     	;# 
   539  0293                     	;# 
   540  0294                     	;# 
   541  0295                     	;# 
   542  0295                     	;# 
   543  0296                     	;# 
   544  0391                     	;# 
   545  0392                     	;# 
   546  0393                     	;# 
   547  039A                     	;# 
   548  039C                     	;# 
   549  039D                     	;# 
   550  039E                     	;# 
   551  039F                     	;# 
   552  0FE4                     	;# 
   553  0FE5                     	;# 
   554  0FE6                     	;# 
   555  0FE7                     	;# 
   556  0FE8                     	;# 
   557  0FE9                     	;# 
   558  0FEA                     	;# 
   559  0FEB                     	;# 
   560  0FED                     	;# 
   561  0FEE                     	;# 
   562  0FEF                     	;# 
   563  0000                     	;# 
   564  0001                     	;# 
   565  0002                     	;# 
   566  0003                     	;# 
   567  0004                     	;# 
   568  0005                     	;# 
   569  0006                     	;# 
   570  0007                     	;# 
   571  0008                     	;# 
   572  0009                     	;# 
   573  000A                     	;# 
   574  000B                     	;# 
   575  000C                     	;# 
   576  000E                     	;# 
   577  0011                     	;# 
   578  0012                     	;# 
   579  0015                     	;# 
   580  0016                     	;# 
   581  0016                     	;# 
   582  0017                     	;# 
   583  0018                     	;# 
   584  0019                     	;# 
   585  001A                     	;# 
   586  001B                     	;# 
   587  001C                     	;# 
   588  001E                     	;# 
   589  001F                     	;# 
   590  008C                     	;# 
   591  008E                     	;# 
   592  0091                     	;# 
   593  0092                     	;# 
   594  0095                     	;# 
   595  0096                     	;# 
   596  0097                     	;# 
   597  0098                     	;# 
   598  0099                     	;# 
   599  009A                     	;# 
   600  009B                     	;# 
   601  009B                     	;# 
   602  009C                     	;# 
   603  009D                     	;# 
   604  009E                     	;# 
   605  010C                     	;# 
   606  010E                     	;# 
   607  0111                     	;# 
   608  0112                     	;# 
   609  0113                     	;# 
   610  0114                     	;# 
   611  0115                     	;# 
   612  0116                     	;# 
   613  0117                     	;# 
   614  0118                     	;# 
   615  0119                     	;# 
   616  011A                     	;# 
   617  011B                     	;# 
   618  011D                     	;# 
   619  011D                     	;# 
   620  018C                     	;# 
   621  018E                     	;# 
   622  0191                     	;# 
   623  0191                     	;# 
   624  0192                     	;# 
   625  0193                     	;# 
   626  0193                     	;# 
   627  0193                     	;# 
   628  0194                     	;# 
   629  0195                     	;# 
   630  0196                     	;# 
   631  0199                     	;# 
   632  019A                     	;# 
   633  019B                     	;# 
   634  019B                     	;# 
   635  019B                     	;# 
   636  019B                     	;# 
   637  019C                     	;# 
   638  019C                     	;# 
   639  019D                     	;# 
   640  019E                     	;# 
   641  019F                     	;# 
   642  020C                     	;# 
   643  020E                     	;# 
   644  0211                     	;# 
   645  0211                     	;# 
   646  0212                     	;# 
   647  0212                     	;# 
   648  0213                     	;# 
   649  0213                     	;# 
   650  0214                     	;# 
   651  0214                     	;# 
   652  0215                     	;# 
   653  0215                     	;# 
   654  0215                     	;# 
   655  0216                     	;# 
   656  0216                     	;# 
   657  0217                     	;# 
   658  0217                     	;# 
   659  0291                     	;# 
   660  0291                     	;# 
   661  0292                     	;# 
   662  0293                     	;# 
   663  0294                     	;# 
   664  0295                     	;# 
   665  0295                     	;# 
   666  0296                     	;# 
   667  0391                     	;# 
   668  0392                     	;# 
   669  0393                     	;# 
   670  039A                     	;# 
   671  039C                     	;# 
   672  039D                     	;# 
   673  039E                     	;# 
   674  039F                     	;# 
   675  0FE4                     	;# 
   676  0FE5                     	;# 
   677  0FE6                     	;# 
   678  0FE7                     	;# 
   679  0FE8                     	;# 
   680  0FE9                     	;# 
   681  0FEA                     	;# 
   682  0FEB                     	;# 
   683  0FED                     	;# 
   684  0FEE                     	;# 
   685  0FEF                     	;# 
   686  0000                     	;# 
   687  0001                     	;# 
   688  0002                     	;# 
   689  0003                     	;# 
   690  0004                     	;# 
   691  0005                     	;# 
   692  0006                     	;# 
   693  0007                     	;# 
   694  0008                     	;# 
   695  0009                     	;# 
   696  000A                     	;# 
   697  000B                     	;# 
   698  000C                     	;# 
   699  000E                     	;# 
   700  0011                     	;# 
   701  0012                     	;# 
   702  0015                     	;# 
   703  0016                     	;# 
   704  0016                     	;# 
   705  0017                     	;# 
   706  0018                     	;# 
   707  0019                     	;# 
   708  001A                     	;# 
   709  001B                     	;# 
   710  001C                     	;# 
   711  001E                     	;# 
   712  001F                     	;# 
   713  008C                     	;# 
   714  008E                     	;# 
   715  0091                     	;# 
   716  0092                     	;# 
   717  0095                     	;# 
   718  0096                     	;# 
   719  0097                     	;# 
   720  0098                     	;# 
   721  0099                     	;# 
   722  009A                     	;# 
   723  009B                     	;# 
   724  009B                     	;# 
   725  009C                     	;# 
   726  009D                     	;# 
   727  009E                     	;# 
   728  010C                     	;# 
   729  010E                     	;# 
   730  0111                     	;# 
   731  0112                     	;# 
   732  0113                     	;# 
   733  0114                     	;# 
   734  0115                     	;# 
   735  0116                     	;# 
   736  0117                     	;# 
   737  0118                     	;# 
   738  0119                     	;# 
   739  011A                     	;# 
   740  011B                     	;# 
   741  011D                     	;# 
   742  011D                     	;# 
   743  018C                     	;# 
   744  018E                     	;# 
   745  0191                     	;# 
   746  0191                     	;# 
   747  0192                     	;# 
   748  0193                     	;# 
   749  0193                     	;# 
   750  0193                     	;# 
   751  0194                     	;# 
   752  0195                     	;# 
   753  0196                     	;# 
   754  0199                     	;# 
   755  019A                     	;# 
   756  019B                     	;# 
   757  019B                     	;# 
   758  019B                     	;# 
   759  019B                     	;# 
   760  019C                     	;# 
   761  019C                     	;# 
   762  019D                     	;# 
   763  019E                     	;# 
   764  019F                     	;# 
   765  020C                     	;# 
   766  020E                     	;# 
   767  0211                     	;# 
   768  0211                     	;# 
   769  0212                     	;# 
   770  0212                     	;# 
   771  0213                     	;# 
   772  0213                     	;# 
   773  0214                     	;# 
   774  0214                     	;# 
   775  0215                     	;# 
   776  0215                     	;# 
   777  0215                     	;# 
   778  0216                     	;# 
   779  0216                     	;# 
   780  0217                     	;# 
   781  0217                     	;# 
   782  0291                     	;# 
   783  0291                     	;# 
   784  0292                     	;# 
   785  0293                     	;# 
   786  0294                     	;# 
   787  0295                     	;# 
   788  0295                     	;# 
   789  0296                     	;# 
   790  0391                     	;# 
   791  0392                     	;# 
   792  0393                     	;# 
   793  039A                     	;# 
   794  039C                     	;# 
   795  039D                     	;# 
   796  039E                     	;# 
   797  039F                     	;# 
   798  0FE4                     	;# 
   799  0FE5                     	;# 
   800  0FE6                     	;# 
   801  0FE7                     	;# 
   802  0FE8                     	;# 
   803  0FE9                     	;# 
   804  0FEA                     	;# 
   805  0FEB                     	;# 
   806  0FED                     	;# 
   807  0FEE                     	;# 
   808  0FEF                     	;# 
   809  0000                     	;# 
   810  0001                     	;# 
   811  0002                     	;# 
   812  0003                     	;# 
   813  0004                     	;# 
   814  0005                     	;# 
   815  0006                     	;# 
   816  0007                     	;# 
   817  0008                     	;# 
   818  0009                     	;# 
   819  000A                     	;# 
   820  000B                     	;# 
   821  000C                     	;# 
   822  000E                     	;# 
   823  0011                     	;# 
   824  0012                     	;# 
   825  0015                     	;# 
   826  0016                     	;# 
   827  0016                     	;# 
   828  0017                     	;# 
   829  0018                     	;# 
   830  0019                     	;# 
   831  001A                     	;# 
   832  001B                     	;# 
   833  001C                     	;# 
   834  001E                     	;# 
   835  001F                     	;# 
   836  008C                     	;# 
   837  008E                     	;# 
   838  0091                     	;# 
   839  0092                     	;# 
   840  0095                     	;# 
   841  0096                     	;# 
   842  0097                     	;# 
   843  0098                     	;# 
   844  0099                     	;# 
   845  009A                     	;# 
   846  009B                     	;# 
   847  009B                     	;# 
   848  009C                     	;# 
   849  009D                     	;# 
   850  009E                     	;# 
   851  010C                     	;# 
   852  010E                     	;# 
   853  0111                     	;# 
   854  0112                     	;# 
   855  0113                     	;# 
   856  0114                     	;# 
   857  0115                     	;# 
   858  0116                     	;# 
   859  0117                     	;# 
   860  0118                     	;# 
   861  0119                     	;# 
   862  011A                     	;# 
   863  011B                     	;# 
   864  011D                     	;# 
   865  011D                     	;# 
   866  018C                     	;# 
   867  018E                     	;# 
   868  0191                     	;# 
   869  0191                     	;# 
   870  0192                     	;# 
   871  0193                     	;# 
   872  0193                     	;# 
   873  0193                     	;# 
   874  0194                     	;# 
   875  0195                     	;# 
   876  0196                     	;# 
   877  0199                     	;# 
   878  019A                     	;# 
   879  019B                     	;# 
   880  019B                     	;# 
   881  019B                     	;# 
   882  019B                     	;# 
   883  019C                     	;# 
   884  019C                     	;# 
   885  019D                     	;# 
   886  019E                     	;# 
   887  019F                     	;# 
   888  020C                     	;# 
   889  020E                     	;# 
   890  0211                     	;# 
   891  0211                     	;# 
   892  0212                     	;# 
   893  0212                     	;# 
   894  0213                     	;# 
   895  0213                     	;# 
   896  0214                     	;# 
   897  0214                     	;# 
   898  0215                     	;# 
   899  0215                     	;# 
   900  0215                     	;# 
   901  0216                     	;# 
   902  0216                     	;# 
   903  0217                     	;# 
   904  0217                     	;# 
   905  0291                     	;# 
   906  0291                     	;# 
   907  0292                     	;# 
   908  0293                     	;# 
   909  0294                     	;# 
   910  0295                     	;# 
   911  0295                     	;# 
   912  0296                     	;# 
   913  0391                     	;# 
   914  0392                     	;# 
   915  0393                     	;# 
   916  039A                     	;# 
   917  039C                     	;# 
   918  039D                     	;# 
   919  039E                     	;# 
   920  039F                     	;# 
   921  0FE4                     	;# 
   922  0FE5                     	;# 
   923  0FE6                     	;# 
   924  0FE7                     	;# 
   925  0FE8                     	;# 
   926  0FE9                     	;# 
   927  0FEA                     	;# 
   928  0FEB                     	;# 
   929  0FED                     	;# 
   930  0FEE                     	;# 
   931  0FEF                     	;# 
   932  0000                     	;# 
   933  0001                     	;# 
   934  0002                     	;# 
   935  0003                     	;# 
   936  0004                     	;# 
   937  0005                     	;# 
   938  0006                     	;# 
   939  0007                     	;# 
   940  0008                     	;# 
   941  0009                     	;# 
   942  000A                     	;# 
   943  000B                     	;# 
   944  000C                     	;# 
   945  000E                     	;# 
   946  0011                     	;# 
   947  0012                     	;# 
   948  0015                     	;# 
   949  0016                     	;# 
   950  0016                     	;# 
   951  0017                     	;# 
   952  0018                     	;# 
   953  0019                     	;# 
   954  001A                     	;# 
   955  001B                     	;# 
   956  001C                     	;# 
   957  001E                     	;# 
   958  001F                     	;# 
   959  008C                     	;# 
   960  008E                     	;# 
   961  0091                     	;# 
   962  0092                     	;# 
   963  0095                     	;# 
   964  0096                     	;# 
   965  0097                     	;# 
   966  0098                     	;# 
   967  0099                     	;# 
   968  009A                     	;# 
   969  009B                     	;# 
   970  009B                     	;# 
   971  009C                     	;# 
   972  009D                     	;# 
   973  009E                     	;# 
   974  010C                     	;# 
   975  010E                     	;# 
   976  0111                     	;# 
   977  0112                     	;# 
   978  0113                     	;# 
   979  0114                     	;# 
   980  0115                     	;# 
   981  0116                     	;# 
   982  0117                     	;# 
   983  0118                     	;# 
   984  0119                     	;# 
   985  011A                     	;# 
   986  011B                     	;# 
   987  011D                     	;# 
   988  011D                     	;# 
   989  018C                     	;# 
   990  018E                     	;# 
   991  0191                     	;# 
   992  0191                     	;# 
   993  0192                     	;# 
   994  0193                     	;# 
   995  0193                     	;# 
   996  0193                     	;# 
   997  0194                     	;# 
   998  0195                     	;# 
   999  0196                     	;# 
  1000  0199                     	;# 
  1001  019A                     	;# 
  1002  019B                     	;# 
  1003  019B                     	;# 
  1004  019B                     	;# 
  1005  019B                     	;# 
  1006  019C                     	;# 
  1007  019C                     	;# 
  1008  019D                     	;# 
  1009  019E                     	;# 
  1010  019F                     	;# 
  1011  020C                     	;# 
  1012  020E                     	;# 
  1013  0211                     	;# 
  1014  0211                     	;# 
  1015  0212                     	;# 
  1016  0212                     	;# 
  1017  0213                     	;# 
  1018  0213                     	;# 
  1019  0214                     	;# 
  1020  0214                     	;# 
  1021  0215                     	;# 
  1022  0215                     	;# 
  1023  0215                     	;# 
  1024  0216                     	;# 
  1025  0216                     	;# 
  1026  0217                     	;# 
  1027  0217                     	;# 
  1028  0291                     	;# 
  1029  0291                     	;# 
  1030  0292                     	;# 
  1031  0293                     	;# 
  1032  0294                     	;# 
  1033  0295                     	;# 
  1034  0295                     	;# 
  1035  0296                     	;# 
  1036  0391                     	;# 
  1037  0392                     	;# 
  1038  0393                     	;# 
  1039  039A                     	;# 
  1040  039C                     	;# 
  1041  039D                     	;# 
  1042  039E                     	;# 
  1043  039F                     	;# 
  1044  0FE4                     	;# 
  1045  0FE5                     	;# 
  1046  0FE6                     	;# 
  1047  0FE7                     	;# 
  1048  0FE8                     	;# 
  1049  0FE9                     	;# 
  1050  0FEA                     	;# 
  1051  0FEB                     	;# 
  1052  0FED                     	;# 
  1053  0FEE                     	;# 
  1054  0FEF                     	;# 
  1055  0000                     	;# 
  1056  0001                     	;# 
  1057  0002                     	;# 
  1058  0003                     	;# 
  1059  0004                     	;# 
  1060  0005                     	;# 
  1061  0006                     	;# 
  1062  0007                     	;# 
  1063  0008                     	;# 
  1064  0009                     	;# 
  1065  000A                     	;# 
  1066  000B                     	;# 
  1067  000C                     	;# 
  1068  000E                     	;# 
  1069  0011                     	;# 
  1070  0012                     	;# 
  1071  0015                     	;# 
  1072  0016                     	;# 
  1073  0016                     	;# 
  1074  0017                     	;# 
  1075  0018                     	;# 
  1076  0019                     	;# 
  1077  001A                     	;# 
  1078  001B                     	;# 
  1079  001C                     	;# 
  1080  001E                     	;# 
  1081  001F                     	;# 
  1082  008C                     	;# 
  1083  008E                     	;# 
  1084  0091                     	;# 
  1085  0092                     	;# 
  1086  0095                     	;# 
  1087  0096                     	;# 
  1088  0097                     	;# 
  1089  0098                     	;# 
  1090  0099                     	;# 
  1091  009A                     	;# 
  1092  009B                     	;# 
  1093  009B                     	;# 
  1094  009C                     	;# 
  1095  009D                     	;# 
  1096  009E                     	;# 
  1097  010C                     	;# 
  1098  010E                     	;# 
  1099  0111                     	;# 
  1100  0112                     	;# 
  1101  0113                     	;# 
  1102  0114                     	;# 
  1103  0115                     	;# 
  1104  0116                     	;# 
  1105  0117                     	;# 
  1106  0118                     	;# 
  1107  0119                     	;# 
  1108  011A                     	;# 
  1109  011B                     	;# 
  1110  011D                     	;# 
  1111  011D                     	;# 
  1112  018C                     	;# 
  1113  018E                     	;# 
  1114  0191                     	;# 
  1115  0191                     	;# 
  1116  0192                     	;# 
  1117  0193                     	;# 
  1118  0193                     	;# 
  1119  0193                     	;# 
  1120  0194                     	;# 
  1121  0195                     	;# 
  1122  0196                     	;# 
  1123  0199                     	;# 
  1124  019A                     	;# 
  1125  019B                     	;# 
  1126  019B                     	;# 
  1127  019B                     	;# 
  1128  019B                     	;# 
  1129  019C                     	;# 
  1130  019C                     	;# 
  1131  019D                     	;# 
  1132  019E                     	;# 
  1133  019F                     	;# 
  1134  020C                     	;# 
  1135  020E                     	;# 
  1136  0211                     	;# 
  1137  0211                     	;# 
  1138  0212                     	;# 
  1139  0212                     	;# 
  1140  0213                     	;# 
  1141  0213                     	;# 
  1142  0214                     	;# 
  1143  0214                     	;# 
  1144  0215                     	;# 
  1145  0215                     	;# 
  1146  0215                     	;# 
  1147  0216                     	;# 
  1148  0216                     	;# 
  1149  0217                     	;# 
  1150  0217                     	;# 
  1151  0291                     	;# 
  1152  0291                     	;# 
  1153  0292                     	;# 
  1154  0293                     	;# 
  1155  0294                     	;# 
  1156  0295                     	;# 
  1157  0295                     	;# 
  1158  0296                     	;# 
  1159  0391                     	;# 
  1160  0392                     	;# 
  1161  0393                     	;# 
  1162  039A                     	;# 
  1163  039C                     	;# 
  1164  039D                     	;# 
  1165  039E                     	;# 
  1166  039F                     	;# 
  1167  0FE4                     	;# 
  1168  0FE5                     	;# 
  1169  0FE6                     	;# 
  1170  0FE7                     	;# 
  1171  0FE8                     	;# 
  1172  0FE9                     	;# 
  1173  0FEA                     	;# 
  1174  0FEB                     	;# 
  1175  0FED                     	;# 
  1176  0FEE                     	;# 
  1177  0FEF                     	;# 
  1178  000E                     _PORTC	set	14
  1179  0015                     _TMR0	set	21
  1180  005F                     _GIE	set	95
  1181  005E                     _PEIE	set	94
  1182  0065                     _RA5	set	101
  1183  008D                     _RCIF	set	141
  1184  005D                     _TMR0IE	set	93
  1185  005A                     _TMR0IF	set	90
  1186  008C                     _TXIF	set	140
  1187  009D                     _ADCON0	set	157
  1188  009E                     _ADCON1	set	158
  1189  009C                     _ADRESH	set	156
  1190  009B                     _ADRESL	set	155
  1191  0095                     _OPTION_REGbits	set	149
  1192  0099                     _OSCCON	set	153
  1193  009A                     _OSCSTAT	set	154
  1194  0098                     _OSCTUNE	set	152
  1195  008C                     _TRISA	set	140
  1196  008E                     _TRISC	set	142
  1197  04E9                     _ADGO	set	1257
  1198  04A8                     _PS0	set	1192
  1199  04A9                     _PS1	set	1193
  1200  04AA                     _PS2	set	1194
  1201  04AB                     _PSA	set	1195
  1202  048D                     _RCIE	set	1165
  1203  04AD                     _TMR0CS	set	1197
  1204  048C                     _TXIE	set	1164
  1205  011D                     _APFCON	set	285
  1206  010C                     _LATA	set	268
  1207  010E                     _LATC	set	270
  1208  08EF                     _RXDTSEL	set	2287
  1209  08EA                     _TXCKSEL	set	2282
  1210  018C                     _ANSELA	set	396
  1211  018E                     _ANSELC	set	398
  1212  0199                     _RCREG	set	409
  1213  019C                     _SPBRGH	set	412
  1214  019B                     _SPBRGL	set	411
  1215  019A                     _TXREG	set	410
  1216  0CFB                     _BRG16	set	3323
  1217  0CF2                     _BRGH	set	3314
  1218  0CEC                     _CREN	set	3308
  1219  0CE9                     _OERR	set	3305
  1220  0CEF                     _SPEN	set	3311
  1221  0CF4                     _SYNC	set	3316
  1222  0CF5                     _TXEN	set	3317
  1223  020C                     _WPUA	set	524
  1224  020E                     _WPUC	set	526
  1225  039A                     _CLKRCON	set	922
  1226                           
  1227                           ; #config settings
  1228  0000                     
  1229                           	psect	cinit
  1230  0056                     start_initialization:	
  1231  0056                     __initialization:	
  1232                           
  1233                           ; Clear objects allocated to COMMON
  1234  0056  01F0               	clrf	__pbssCOMMON& (0+127)
  1235  0057  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  1236  0058  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  1237  0059  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  1238  005A  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  1239                           
  1240                           ; Clear objects allocated to BANK0
  1241  005B  3020               	movlw	low __pbssBANK0
  1242  005C  0084               	movwf	4
  1243  005D  3000               	movlw	high __pbssBANK0
  1244  005E  0085               	movwf	5
  1245  005F  302C               	movlw	44
  1246  0060  244C               	fcall	clear_ram0
  1247  0061                     end_of_initialization:	
  1248                           ;End of C runtime variable initialization code
  1249                           
  1250  0061                     __end_of__initialization:	
  1251  0061  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1252  0062  0020               	movlb	0
  1253  0063  2A86               	ljmp	_main	;jump to C main() function
  1254                           
  1255                           	psect	bssCOMMON
  1256  0070                     __pbssCOMMON:	
  1257  0070                     _TIMER0_timeout:	
  1258  0070                     	ds	2
  1259  0072                     _USART_tx_flag:	
  1260  0072                     	ds	1
  1261  0073                     _USART_tx_index:	
  1262  0073                     	ds	1
  1263  0074                     _USART_tx_length:	
  1264  0074                     	ds	1
  1265                           
  1266                           	psect	bssBANK0
  1267  0020                     __pbssBANK0:	
  1268  0020                     _USART_rx_data:	
  1269  0020                     	ds	15
  1270  002F                     _USART_tx_data:	
  1271  002F                     	ds	15
  1272  003E                     _TIMER0_flag:	
  1273  003E                     	ds	1
  1274  003F                     _USART_rx_flag:	
  1275  003F                     	ds	1
  1276  0040                     _USART_rx_index:	
  1277  0040                     	ds	1
  1278  0041                     _mess_rec_size:	
  1279  0041                     	ds	1
  1280  0042                     _mess_rec:	
  1281  0042                     	ds	10
  1282                           
  1283                           	psect	clrtext
  1284  044C                     clear_ram0:	
  1285                           ;	Called with FSR0 containing the base address, and
  1286                           ;	WREG with the size to clear
  1287                           
  1288  044C  0064               	clrwdt	;clear the watchdog before getting into this loop
  1289  044D                     clrloop0:	
  1290  044D  0180               	clrf	0	;clear RAM location pointed to by FSR
  1291  044E  3101               	addfsr 0,1
  1292  044F  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1293  0450  2C4D               	goto	clrloop0	;have we reached the end yet?
  1294  0451  3400               	retlw	0	;all done for this memory range, return
  1295                           
  1296                           	psect	cstackCOMMON
  1297  0075                     __pcstackCOMMON:	
  1298  0075                     ?_OSCILLATOR_Initialize:	
  1299  0075                     ?_setup_TMR0:	
  1300                           ; 1 bytes @ 0x0
  1301                           
  1302  0075                     ?_start_TX_USART_ISR:	
  1303                           ; 1 bytes @ 0x0
  1304                           
  1305  0075                     ?_start_RX_USART_ISR:	
  1306                           ; 1 bytes @ 0x0
  1307                           
  1308  0075                     ?_start_RCM:	
  1309                           ; 1 bytes @ 0x0
  1310                           
  1311  0075                     ?_setup_ADC:	
  1312                           ; 1 bytes @ 0x0
  1313                           
  1314  0075                     ?_mess_handler:	
  1315                           ; 1 bytes @ 0x0
  1316                           
  1317  0075                     ?_stop_TMR0_ISR:	
  1318                           ; 1 bytes @ 0x0
  1319                           
  1320  0075                     ??_stop_TMR0_ISR:	
  1321                           ; 1 bytes @ 0x0
  1322                           
  1323  0075                     ?_start_TMR0_ISR:	
  1324                           ; 1 bytes @ 0x0
  1325                           
  1326  0075                     ??_start_TMR0_ISR:	
  1327                           ; 1 bytes @ 0x0
  1328                           
  1329  0075                     ?_config_ASIC:	
  1330                           ; 1 bytes @ 0x0
  1331                           
  1332  0075                     ?_read_ADC_channels:	
  1333                           ; 1 bytes @ 0x0
  1334                           
  1335  0075                     ?_measure_Impedance:	
  1336                           ; 1 bytes @ 0x0
  1337                           
  1338  0075                     ?_measure_Impedance_no_offset:	
  1339                           ; 1 bytes @ 0x0
  1340                           
  1341  0075                     ?_measure_Offset:	
  1342                           ; 1 bytes @ 0x0
  1343                           
  1344  0075                     ?_PIN_MANAGER_Initialize:	
  1345                           ; 1 bytes @ 0x0
  1346                           
  1347  0075                     ?_SYSTEM_Initialize:	
  1348                           ; 1 bytes @ 0x0
  1349                           
  1350  0075                     ?_main:	
  1351                           ; 1 bytes @ 0x0
  1352                           
  1353  0075                     ?_isr:	
  1354                           ; 1 bytes @ 0x0
  1355                           
  1356  0075                     ?_close_RX_USART:	
  1357                           ; 1 bytes @ 0x0
  1358                           
  1359  0075                     ?i1_start_RX_USART_ISR:	
  1360                           ; 1 bytes @ 0x0
  1361                           
  1362  0075                     ??i1_start_RX_USART_ISR:	
  1363                           ; 1 bytes @ 0x0
  1364                           
  1365                           
  1366                           ; 1 bytes @ 0x0
  1367  0075                     	ds	2
  1368  0077                     start_TMR0_ISR@val:	
  1369                           
  1370                           ; 1 bytes @ 0x2
  1371  0077                     	ds	1
  1372  0078                     ??_isr:	
  1373                           
  1374                           ; 1 bytes @ 0x3
  1375  0078                     	ds	2
  1376                           
  1377                           	psect	cstackBANK0
  1378  004C                     __pcstackBANK0:	
  1379  004C                     ??_OSCILLATOR_Initialize:	
  1380  004C                     ??_setup_TMR0:	
  1381                           ; 1 bytes @ 0x0
  1382                           
  1383  004C                     ??_start_TX_USART_ISR:	
  1384                           ; 1 bytes @ 0x0
  1385                           
  1386  004C                     ??_start_RX_USART_ISR:	
  1387                           ; 1 bytes @ 0x0
  1388                           
  1389  004C                     ??_start_RCM:	
  1390                           ; 1 bytes @ 0x0
  1391                           
  1392  004C                     ??_setup_ADC:	
  1393                           ; 1 bytes @ 0x0
  1394                           
  1395  004C                     ??_PIN_MANAGER_Initialize:	
  1396                           ; 1 bytes @ 0x0
  1397                           
  1398  004C                     ??_SYSTEM_Initialize:	
  1399                           ; 1 bytes @ 0x0
  1400                           
  1401  004C                     ?_VIN_config:	
  1402                           ; 1 bytes @ 0x0
  1403                           
  1404  004C                     ??_close_RX_USART:	
  1405                           ; 1 bytes @ 0x0
  1406                           
  1407  004C                     ?_lputs_ISR:	
  1408                           ; 1 bytes @ 0x0
  1409                           
  1410  004C                     ?_ADC_2:	
  1411                           ; 1 bytes @ 0x0
  1412                           
  1413  004C                     ?_ADC_4:	
  1414                           ; 2 bytes @ 0x0
  1415                           
  1416  004C                     ?_ADC_5:	
  1417                           ; 2 bytes @ 0x0
  1418                           
  1419  004C                     lputs_ISR@length:	
  1420                           ; 2 bytes @ 0x0
  1421                           
  1422  004C                     VIN_config@conf:	
  1423                           ; 1 bytes @ 0x0
  1424                           
  1425                           
  1426                           ; 6 bytes @ 0x0
  1427  004C                     	ds	1
  1428  004D                     ??_lputs_ISR:	
  1429                           
  1430                           ; 1 bytes @ 0x1
  1431  004D                     	ds	1
  1432  004E                     ??_ADC_2:	
  1433  004E                     ??_ADC_4:	
  1434                           ; 1 bytes @ 0x2
  1435                           
  1436  004E                     ??_ADC_5:	
  1437                           ; 1 bytes @ 0x2
  1438                           
  1439                           
  1440                           ; 1 bytes @ 0x2
  1441  004E                     	ds	1
  1442  004F                     lputs_ISR@data:	
  1443                           
  1444                           ; 1 bytes @ 0x3
  1445  004F                     	ds	1
  1446  0050                     lputs_ISR@i:	
  1447  0050                     ADC_2@ADC_value:	
  1448                           ; 1 bytes @ 0x4
  1449                           
  1450  0050                     ADC_4@ADC_value:	
  1451                           ; 2 bytes @ 0x4
  1452                           
  1453  0050                     ADC_5@ADC_value:	
  1454                           ; 2 bytes @ 0x4
  1455                           
  1456                           
  1457                           ; 2 bytes @ 0x4
  1458  0050                     	ds	2
  1459  0052                     ??_read_ADC_channels:	
  1460  0052                     ??_VIN_config:	
  1461                           ; 1 bytes @ 0x6
  1462                           
  1463                           
  1464                           ; 1 bytes @ 0x6
  1465  0052                     	ds	1
  1466  0053                     VIN_config@i:	
  1467  0053                     read_ADC_channels@aux:	
  1468                           ; 1 bytes @ 0x7
  1469                           
  1470                           
  1471                           ; 7 bytes @ 0x7
  1472  0053                     	ds	1
  1473  0054                     VIN_config@out:	
  1474                           
  1475                           ; 1 bytes @ 0x8
  1476  0054                     	ds	1
  1477  0055                     ??_config_ASIC:	
  1478  0055                     ??_measure_Impedance:	
  1479                           ; 1 bytes @ 0x9
  1480                           
  1481  0055                     ??_measure_Impedance_no_offset:	
  1482                           ; 1 bytes @ 0x9
  1483                           
  1484  0055                     ??_measure_Offset:	
  1485                           ; 1 bytes @ 0x9
  1486                           
  1487                           
  1488                           ; 1 bytes @ 0x9
  1489  0055                     	ds	1
  1490  0056                     measure_Offset@aux:	
  1491  0056                     config_ASIC@asic:	
  1492                           ; 5 bytes @ 0xA
  1493                           
  1494  0056                     measure_Impedance@aux:	
  1495                           ; 6 bytes @ 0xA
  1496                           
  1497  0056                     measure_Impedance_no_offset@aux:	
  1498                           ; 13 bytes @ 0xA
  1499                           
  1500                           
  1501                           ; 13 bytes @ 0xA
  1502  0056                     	ds	4
  1503  005A                     read_ADC_channels@value1:	
  1504                           
  1505                           ; 2 bytes @ 0xE
  1506  005A                     	ds	1
  1507  005B                     measure_Offset@value1:	
  1508                           
  1509                           ; 2 bytes @ 0xF
  1510  005B                     	ds	1
  1511  005C                     read_ADC_channels@value2:	
  1512                           
  1513                           ; 2 bytes @ 0x10
  1514  005C                     	ds	1
  1515  005D                     measure_Offset@value2:	
  1516                           
  1517                           ; 2 bytes @ 0x11
  1518  005D                     	ds	1
  1519  005E                     read_ADC_channels@value3:	
  1520                           
  1521                           ; 2 bytes @ 0x12
  1522  005E                     	ds	1
  1523  005F                     measure_Offset@asic:	
  1524                           
  1525                           ; 6 bytes @ 0x13
  1526  005F                     	ds	4
  1527  0063                     measure_Impedance@value1:	
  1528  0063                     measure_Impedance_no_offset@value1:	
  1529                           ; 2 bytes @ 0x17
  1530                           
  1531                           
  1532                           ; 2 bytes @ 0x17
  1533  0063                     	ds	2
  1534  0065                     measure_Impedance@value2:	
  1535  0065                     measure_Impedance_no_offset@value2:	
  1536                           ; 2 bytes @ 0x19
  1537                           
  1538                           
  1539                           ; 2 bytes @ 0x19
  1540  0065                     	ds	2
  1541  0067                     measure_Impedance@asic:	
  1542  0067                     measure_Impedance_no_offset@asic:	
  1543                           ; 6 bytes @ 0x1B
  1544                           
  1545                           
  1546                           ; 6 bytes @ 0x1B
  1547  0067                     	ds	6
  1548  006D                     ??_mess_handler:	
  1549                           
  1550                           ; 1 bytes @ 0x21
  1551  006D                     	ds	1
  1552  006E                     ??_main:	
  1553                           
  1554                           ; 1 bytes @ 0x22
  1555  006E                     	ds	1
  1556  006F                     main@i:	
  1557                           
  1558                           ; 1 bytes @ 0x23
  1559  006F                     	ds	1
  1560                           
  1561                           	psect	maintext
  1562  0286                     __pmaintext:	
  1563 ;;
  1564 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1565 ;;
  1566 ;; *************** function _main *****************
  1567 ;; Defined at:
  1568 ;;		line 17 in file "main.c"
  1569 ;; Parameters:    Size  Location     Type
  1570 ;;		None
  1571 ;; Auto vars:     Size  Location     Type
  1572 ;;  i               1   35[BANK0 ] unsigned char 
  1573 ;; Return value:  Size  Location     Type
  1574 ;;                  1    wreg      void 
  1575 ;; Registers used:
  1576 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1577 ;; Tracked objects:
  1578 ;;		On entry : B1F/0
  1579 ;;		On exit  : 0/0
  1580 ;;		Unchanged: 0/0
  1581 ;; Data sizes:     COMMON   BANK0   BANK1
  1582 ;;      Params:         0       0       0
  1583 ;;      Locals:         0       1       0
  1584 ;;      Temps:          0       1       0
  1585 ;;      Totals:         0       2       0
  1586 ;;Total ram usage:        2 bytes
  1587 ;; Hardware stack levels required when called:    6
  1588 ;; This function calls:
  1589 ;;		_SYSTEM_Initialize
  1590 ;;		_mess_handler
  1591 ;;		_setup_ADC
  1592 ;;		_setup_TMR0
  1593 ;;		_start_RCM
  1594 ;;		_start_RX_USART_ISR
  1595 ;;		_start_TX_USART_ISR
  1596 ;; This function is called by:
  1597 ;;		Startup code after reset
  1598 ;; This function uses a non-reentrant model
  1599 ;;
  1600                           
  1601                           
  1602                           ;psect for function _main
  1603  0286                     _main:	
  1604                           
  1605                           ;main.c: 19: unsigned char i;
  1606                           ;main.c: 21: SYSTEM_Initialize();
  1607                           
  1608                           ;incstack = 0
  1609                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1610  0286  2467               	fcall	_SYSTEM_Initialize
  1611                           
  1612                           ;main.c: 22: setup_TMR0();
  1613  0287  2445               	fcall	_setup_TMR0
  1614                           
  1615                           ;main.c: 23: start_TX_USART_ISR();
  1616  0288  2436               	fcall	_start_TX_USART_ISR
  1617                           
  1618                           ;main.c: 24: start_RX_USART_ISR();
  1619  0289  2404               	fcall	_start_RX_USART_ISR
  1620                           
  1621                           ;main.c: 25: start_RCM();
  1622  028A  2463               	fcall	_start_RCM
  1623                           
  1624                           ;main.c: 26: setup_ADC();
  1625  028B  2452               	fcall	_setup_ADC
  1626                           
  1627                           ;main.c: 28: RA5 = 0;
  1628  028C  0020               	movlb	0	; select bank0
  1629  028D  128C               	bcf	12,5	;volatile
  1630                           
  1631                           ;main.c: 29: _delay((unsigned long)((150)*(500000/4000.0)));
  1632  028E  3019               	movlw	25
  1633  028F  0020               	movlb	0	; select bank0
  1634  0290  00EE               	movwf	??_main
  1635  0291  3058               	movlw	88
  1636  0292                     u997:	
  1637  0292  0B89               	decfsz	9,f
  1638  0293  2A92               	goto	u997
  1639  0294  0BEE               	decfsz	??_main,f
  1640  0295  2A92               	goto	u997
  1641  0296  0000               	nop
  1642                           
  1643                           ;main.c: 30: RA5 = 1;
  1644  0297  0020               	movlb	0	; select bank0
  1645  0298  168C               	bsf	12,5	;volatile
  1646  0299                     l108:	
  1647                           ;main.c: 35: while(1) {
  1648                           
  1649  0299  0064               	clrwdt	;# 
  1650                           
  1651                           ;main.c: 39: if (TIMER0_flag) {
  1652  029A  0020               	movlb	0	; select bank0
  1653  029B  083E               	movf	_TIMER0_flag,w	;volatile
  1654  029C  1903               	btfsc	3,2
  1655  029D  2A99               	goto	l108
  1656                           
  1657                           ;main.c: 40: TIMER0_flag = 0;
  1658  029E  01BE               	clrf	_TIMER0_flag	;volatile
  1659                           
  1660                           ;main.c: 42: if (USART_rx_index > 10) {
  1661  029F  300B               	movlw	11
  1662  02A0  0240               	subwf	_USART_rx_index,w	;volatile
  1663  02A1  1C03               	skipc
  1664  02A2  2AA5               	goto	l2377
  1665                           
  1666                           ;main.c: 43: USART_rx_index = 0;
  1667  02A3  01C0               	clrf	_USART_rx_index	;volatile
  1668                           
  1669                           ;main.c: 44: continue;
  1670  02A4  2A99               	goto	l108
  1671  02A5                     l2377:	
  1672                           
  1673                           ;main.c: 45: }
  1674                           ;main.c: 47: if(USART_rx_index == 0)
  1675  02A5  0840               	movf	_USART_rx_index,w	;volatile
  1676  02A6  1903               	btfsc	3,2
  1677                           
  1678                           ;main.c: 48: continue;
  1679  02A7  2A99               	goto	l108
  1680                           
  1681                           ;main.c: 51: mess_rec_size = USART_rx_index;
  1682  02A8  0840               	movf	_USART_rx_index,w	;volatile
  1683  02A9  00EE               	movwf	??_main
  1684  02AA  086E               	movf	??_main,w
  1685  02AB  00C1               	movwf	_mess_rec_size	;volatile
  1686                           
  1687                           ;main.c: 53: for (i = 0; i < mess_rec_size; i++)
  1688  02AC  01EF               	clrf	main@i
  1689  02AD                     l2389:	
  1690  02AD  0841               	movf	_mess_rec_size,w	;volatile
  1691  02AE  026F               	subwf	main@i,w
  1692  02AF  1803               	btfsc	3,0
  1693  02B0  2AC2               	goto	l2391
  1694                           
  1695                           ;main.c: 54: mess_rec[i] = USART_rx_data[i];
  1696  02B1  086F               	movf	main@i,w
  1697  02B2  3E20               	addlw	(low (_USART_rx_data| 0))& (0+255)
  1698  02B3  0086               	movwf	6
  1699  02B4  0187               	clrf	7
  1700  02B5  0801               	movf	1,w
  1701  02B6  00EE               	movwf	??_main
  1702  02B7  086F               	movf	main@i,w
  1703  02B8  3E42               	addlw	(low (_mess_rec| 0))& (0+255)
  1704  02B9  0086               	movwf	6
  1705  02BA  0187               	clrf	7
  1706  02BB  086E               	movf	??_main,w
  1707  02BC  0081               	movwf	1
  1708  02BD  3001               	movlw	1
  1709  02BE  00EE               	movwf	??_main
  1710  02BF  086E               	movf	??_main,w
  1711  02C0  07EF               	addwf	main@i,f
  1712  02C1  2AAD               	goto	l2389
  1713  02C2                     l2391:	
  1714                           
  1715                           ;main.c: 57: mess_handler();
  1716  02C2  2359               	fcall	_mess_handler
  1717  02C3  2A99               	goto	l108
  1718  02C4                     __end_of_main:	
  1719                           
  1720                           	psect	text1
  1721  0436                     __ptext1:	
  1722 ;; *************** function _start_TX_USART_ISR *****************
  1723 ;; Defined at:
  1724 ;;		line 100 in file "USART1823.c"
  1725 ;; Parameters:    Size  Location     Type
  1726 ;;		None
  1727 ;; Auto vars:     Size  Location     Type
  1728 ;;		None
  1729 ;; Return value:  Size  Location     Type
  1730 ;;                  1    wreg      void 
  1731 ;; Registers used:
  1732 ;;		wreg, status,2
  1733 ;; Tracked objects:
  1734 ;;		On entry : 0/0
  1735 ;;		On exit  : 0/0
  1736 ;;		Unchanged: 0/0
  1737 ;; Data sizes:     COMMON   BANK0   BANK1
  1738 ;;      Params:         0       0       0
  1739 ;;      Locals:         0       0       0
  1740 ;;      Temps:          0       0       0
  1741 ;;      Totals:         0       0       0
  1742 ;;Total ram usage:        0 bytes
  1743 ;; Hardware stack levels used:    1
  1744 ;; Hardware stack levels required when called:    2
  1745 ;; This function calls:
  1746 ;;		Nothing
  1747 ;; This function is called by:
  1748 ;;		_main
  1749 ;; This function uses a non-reentrant model
  1750 ;;
  1751                           
  1752                           
  1753                           ;psect for function _start_TX_USART_ISR
  1754  0436                     _start_TX_USART_ISR:	
  1755                           
  1756                           ;USART1823.c: 102: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  1757                           
  1758                           ;incstack = 0
  1759                           ; Regs used in _start_TX_USART_ISR: [wreg+status,2]
  1760  0436  0023               	movlb	3	; select bank3
  1761  0437  151E               	bsf	30,2	;volatile
  1762  0438  159F               	bsf	31,3	;volatile
  1763  0439  019C               	clrf	28	;volatile
  1764  043A  300C               	movlw	12
  1765  043B  009B               	movwf	27	;volatile
  1766                           
  1767                           ;USART1823.c: 103: SYNC = 0;
  1768  043C  121E               	bcf	30,4	;volatile
  1769                           
  1770                           ;USART1823.c: 104: SPEN = 1;
  1771  043D  179D               	bsf	29,7	;volatile
  1772                           
  1773                           ;USART1823.c: 105: TXEN = 1;
  1774  043E  169E               	bsf	30,5	;volatile
  1775                           
  1776                           ;USART1823.c: 107: USART_tx_flag = 0;
  1777  043F  01F2               	clrf	_USART_tx_flag	;volatile
  1778                           
  1779                           ;USART1823.c: 108: USART_tx_index = 0;
  1780  0440  01F3               	clrf	_USART_tx_index	;volatile
  1781                           
  1782                           ;USART1823.c: 109: USART_tx_length = 0;
  1783  0441  01F4               	clrf	_USART_tx_length	;volatile
  1784                           
  1785                           ;USART1823.c: 112: PEIE = 1;
  1786  0442  170B               	bsf	11,6	;volatile
  1787                           
  1788                           ;USART1823.c: 113: GIE = 1;
  1789  0443  178B               	bsf	11,7	;volatile
  1790  0444  0008               	return
  1791  0445                     __end_of_start_TX_USART_ISR:	
  1792                           
  1793                           	psect	text2
  1794  0404                     __ptext2:	
  1795 ;; *************** function _start_RX_USART_ISR *****************
  1796 ;; Defined at:
  1797 ;;		line 82 in file "USART1823.c"
  1798 ;; Parameters:    Size  Location     Type
  1799 ;;		None
  1800 ;; Auto vars:     Size  Location     Type
  1801 ;;		None
  1802 ;; Return value:  Size  Location     Type
  1803 ;;                  1    wreg      void 
  1804 ;; Registers used:
  1805 ;;		wreg, status,2
  1806 ;; Tracked objects:
  1807 ;;		On entry : 0/0
  1808 ;;		On exit  : 0/0
  1809 ;;		Unchanged: 0/0
  1810 ;; Data sizes:     COMMON   BANK0   BANK1
  1811 ;;      Params:         0       0       0
  1812 ;;      Locals:         0       0       0
  1813 ;;      Temps:          0       0       0
  1814 ;;      Totals:         0       0       0
  1815 ;;Total ram usage:        0 bytes
  1816 ;; Hardware stack levels used:    1
  1817 ;; Hardware stack levels required when called:    2
  1818 ;; This function calls:
  1819 ;;		Nothing
  1820 ;; This function is called by:
  1821 ;;		_main
  1822 ;; This function uses a non-reentrant model
  1823 ;;
  1824                           
  1825                           
  1826                           ;psect for function _start_RX_USART_ISR
  1827  0404                     _start_RX_USART_ISR:	
  1828                           
  1829                           ;USART1823.c: 85: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  1830                           
  1831                           ;incstack = 0
  1832                           ; Regs used in _start_RX_USART_ISR: [wreg+status,2]
  1833  0404  0023               	movlb	3	; select bank3
  1834  0405  151E               	bsf	30,2	;volatile
  1835  0406  159F               	bsf	31,3	;volatile
  1836  0407  019C               	clrf	28	;volatile
  1837  0408  300C               	movlw	12
  1838  0409  009B               	movwf	27	;volatile
  1839                           
  1840                           ;USART1823.c: 87: SYNC = 0;
  1841  040A  121E               	bcf	30,4	;volatile
  1842                           
  1843                           ;USART1823.c: 88: SPEN = 1;
  1844  040B  179D               	bsf	29,7	;volatile
  1845                           
  1846                           ;USART1823.c: 89: CREN = 1;
  1847  040C  161D               	bsf	29,4	;volatile
  1848                           
  1849                           ;USART1823.c: 91: USART_rx_flag = 0;
  1850  040D  0020               	movlb	0	; select bank0
  1851  040E  01BF               	clrf	_USART_rx_flag	;volatile
  1852                           
  1853                           ;USART1823.c: 92: USART_rx_index = 0;
  1854  040F  01C0               	clrf	_USART_rx_index	;volatile
  1855                           
  1856                           ;USART1823.c: 94: RCIE = 1;
  1857  0410  0021               	movlb	1	; select bank1
  1858  0411  1691               	bsf	17,5	;volatile
  1859                           
  1860                           ;USART1823.c: 95: PEIE = 1;
  1861  0412  170B               	bsf	11,6	;volatile
  1862                           
  1863                           ;USART1823.c: 96: GIE = 1;
  1864  0413  178B               	bsf	11,7	;volatile
  1865  0414  0008               	return
  1866  0415                     __end_of_start_RX_USART_ISR:	
  1867                           
  1868                           	psect	text3
  1869  0463                     __ptext3:	
  1870 ;; *************** function _start_RCM *****************
  1871 ;; Defined at:
  1872 ;;		line 4 in file "RCM1823.c"
  1873 ;; Parameters:    Size  Location     Type
  1874 ;;		None
  1875 ;; Auto vars:     Size  Location     Type
  1876 ;;		None
  1877 ;; Return value:  Size  Location     Type
  1878 ;;                  1    wreg      void 
  1879 ;; Registers used:
  1880 ;;		wreg
  1881 ;; Tracked objects:
  1882 ;;		On entry : 0/0
  1883 ;;		On exit  : 0/0
  1884 ;;		Unchanged: 0/0
  1885 ;; Data sizes:     COMMON   BANK0   BANK1
  1886 ;;      Params:         0       0       0
  1887 ;;      Locals:         0       0       0
  1888 ;;      Temps:          0       0       0
  1889 ;;      Totals:         0       0       0
  1890 ;;Total ram usage:        0 bytes
  1891 ;; Hardware stack levels used:    1
  1892 ;; Hardware stack levels required when called:    2
  1893 ;; This function calls:
  1894 ;;		Nothing
  1895 ;; This function is called by:
  1896 ;;		_main
  1897 ;; This function uses a non-reentrant model
  1898 ;;
  1899                           
  1900                           
  1901                           ;psect for function _start_RCM
  1902  0463                     _start_RCM:	
  1903                           
  1904                           ;RCM1823.c: 6: CLKRCON = 0b11010000;
  1905                           
  1906                           ;incstack = 0
  1907                           ; Regs used in _start_RCM: [wreg]
  1908  0463  30D0               	movlw	208
  1909  0464  0027               	movlb	7	; select bank7
  1910  0465  009A               	movwf	26	;volatile
  1911  0466  0008               	return
  1912  0467                     __end_of_start_RCM:	
  1913                           
  1914                           	psect	text4
  1915  0445                     __ptext4:	
  1916 ;; *************** function _setup_TMR0 *****************
  1917 ;; Defined at:
  1918 ;;		line 10 in file "TMR0.c"
  1919 ;; Parameters:    Size  Location     Type
  1920 ;;		None
  1921 ;; Auto vars:     Size  Location     Type
  1922 ;;		None
  1923 ;; Return value:  Size  Location     Type
  1924 ;;                  1    wreg      void 
  1925 ;; Registers used:
  1926 ;;		None
  1927 ;; Tracked objects:
  1928 ;;		On entry : 0/0
  1929 ;;		On exit  : 0/0
  1930 ;;		Unchanged: 0/0
  1931 ;; Data sizes:     COMMON   BANK0   BANK1
  1932 ;;      Params:         0       0       0
  1933 ;;      Locals:         0       0       0
  1934 ;;      Temps:          0       0       0
  1935 ;;      Totals:         0       0       0
  1936 ;;Total ram usage:        0 bytes
  1937 ;; Hardware stack levels used:    1
  1938 ;; Hardware stack levels required when called:    2
  1939 ;; This function calls:
  1940 ;;		Nothing
  1941 ;; This function is called by:
  1942 ;;		_main
  1943 ;; This function uses a non-reentrant model
  1944 ;;
  1945                           
  1946                           
  1947                           ;psect for function _setup_TMR0
  1948  0445                     _setup_TMR0:	
  1949                           
  1950                           ;TMR0.c: 13: PS2 = 0; PS1 = 1; PS0 = 0;
  1951                           
  1952                           ;incstack = 0
  1953                           ; Regs used in _setup_TMR0: []
  1954  0445  0021               	movlb	1	; select bank1
  1955  0446  1115               	bcf	21,2	;volatile
  1956  0447  1495               	bsf	21,1	;volatile
  1957  0448  1015               	bcf	21,0	;volatile
  1958                           
  1959                           ;TMR0.c: 16: PSA = 0;
  1960  0449  1195               	bcf	21,3	;volatile
  1961                           
  1962                           ;TMR0.c: 18: TMR0CS = 0;
  1963  044A  1295               	bcf	21,5	;volatile
  1964  044B  0008               	return
  1965  044C                     __end_of_setup_TMR0:	
  1966                           
  1967                           	psect	text5
  1968  0452                     __ptext5:	
  1969 ;; *************** function _setup_ADC *****************
  1970 ;; Defined at:
  1971 ;;		line 3 in file "ADC1823.c"
  1972 ;; Parameters:    Size  Location     Type
  1973 ;;		None
  1974 ;; Auto vars:     Size  Location     Type
  1975 ;;		None
  1976 ;; Return value:  Size  Location     Type
  1977 ;;                  1    wreg      void 
  1978 ;; Registers used:
  1979 ;;		wreg
  1980 ;; Tracked objects:
  1981 ;;		On entry : 0/0
  1982 ;;		On exit  : 0/0
  1983 ;;		Unchanged: 0/0
  1984 ;; Data sizes:     COMMON   BANK0   BANK1
  1985 ;;      Params:         0       0       0
  1986 ;;      Locals:         0       0       0
  1987 ;;      Temps:          0       0       0
  1988 ;;      Totals:         0       0       0
  1989 ;;Total ram usage:        0 bytes
  1990 ;; Hardware stack levels used:    1
  1991 ;; Hardware stack levels required when called:    2
  1992 ;; This function calls:
  1993 ;;		Nothing
  1994 ;; This function is called by:
  1995 ;;		_main
  1996 ;; This function uses a non-reentrant model
  1997 ;;
  1998                           
  1999                           
  2000                           ;psect for function _setup_ADC
  2001  0452                     _setup_ADC:	
  2002                           
  2003                           ;ADC1823.c: 20: ADCON1 = 0b11110000;
  2004                           
  2005                           ;incstack = 0
  2006                           ; Regs used in _setup_ADC: [wreg]
  2007  0452  30F0               	movlw	240
  2008  0453  0021               	movlb	1	; select bank1
  2009  0454  009E               	movwf	30	;volatile
  2010                           
  2011                           ;ADC1823.c: 21: { ADCON0 = 0b00100100;};
  2012  0455  3024               	movlw	36
  2013  0456  009D               	movwf	29	;volatile
  2014  0457  0008               	return
  2015  0458                     __end_of_setup_ADC:	
  2016                           
  2017                           	psect	text6
  2018  0359                     __ptext6:	
  2019 ;; *************** function _mess_handler *****************
  2020 ;; Defined at:
  2021 ;;		line 11 in file "comm.c"
  2022 ;; Parameters:    Size  Location     Type
  2023 ;;		None
  2024 ;; Auto vars:     Size  Location     Type
  2025 ;;		None
  2026 ;; Return value:  Size  Location     Type
  2027 ;;                  1    wreg      void 
  2028 ;; Registers used:
  2029 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2030 ;; Tracked objects:
  2031 ;;		On entry : 0/0
  2032 ;;		On exit  : 0/0
  2033 ;;		Unchanged: 0/0
  2034 ;; Data sizes:     COMMON   BANK0   BANK1
  2035 ;;      Params:         0       0       0
  2036 ;;      Locals:         0       0       0
  2037 ;;      Temps:          0       1       0
  2038 ;;      Totals:         0       1       0
  2039 ;;Total ram usage:        1 bytes
  2040 ;; Hardware stack levels used:    1
  2041 ;; Hardware stack levels required when called:    5
  2042 ;; This function calls:
  2043 ;;		_config_ASIC
  2044 ;;		_lputs_ISR
  2045 ;;		_measure_Impedance
  2046 ;;		_measure_Impedance_no_offset
  2047 ;;		_measure_Offset
  2048 ;;		_read_ADC_channels
  2049 ;; This function is called by:
  2050 ;;		_main
  2051 ;; This function uses a non-reentrant model
  2052 ;;
  2053                           
  2054                           
  2055                           ;psect for function _mess_handler
  2056  0359                     _mess_handler:	
  2057                           
  2058                           ;comm.c: 16: switch (mess_rec[0]) {
  2059                           
  2060                           ;incstack = 0
  2061                           ; Regs used in _mess_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2062  0359  2B6C               	goto	l2351
  2063  035A                     l2337:	
  2064                           ;comm.c: 17: case 't':
  2065                           
  2066                           
  2067                           ;comm.c: 18: lputs_ISR(mess_rec,mess_rec_size);
  2068  035A  0020               	movlb	0	; select bank0
  2069  035B  0841               	movf	_mess_rec_size,w	;volatile
  2070  035C  00ED               	movwf	??_mess_handler
  2071  035D  086D               	movf	??_mess_handler,w
  2072  035E  00CC               	movwf	lputs_ISR@length
  2073  035F  3042               	movlw	(low (_mess_rec| 0))& (0+255)
  2074  0360  232E               	fcall	_lputs_ISR
  2075                           
  2076                           ;comm.c: 19: break;
  2077  0361  0008               	return
  2078  0362                     l2339:	
  2079                           ;comm.c: 21: case 'c':
  2080                           
  2081                           
  2082                           ;comm.c: 22: config_ASIC();
  2083  0362  22FD               	fcall	_config_ASIC
  2084                           
  2085                           ;comm.c: 23: break;
  2086  0363  0008               	return
  2087  0364                     l2341:	
  2088                           ;comm.c: 25: case 'm':
  2089                           
  2090                           
  2091                           ;comm.c: 26: read_ADC_channels();
  2092  0364  22C4               	fcall	_read_ADC_channels
  2093                           
  2094                           ;comm.c: 27: break;
  2095  0365  0008               	return
  2096  0366                     l2343:	
  2097                           ;comm.c: 29: case 'z':
  2098                           
  2099                           
  2100                           ;comm.c: 30: measure_Impedance();
  2101  0366  2064               	fcall	_measure_Impedance
  2102                           
  2103                           ;comm.c: 31: break;
  2104  0367  0008               	return
  2105  0368                     l2345:	
  2106                           ;comm.c: 33: case 'y':
  2107                           
  2108                           
  2109                           ;comm.c: 34: measure_Impedance_no_offset();
  2110  0368  2127               	fcall	_measure_Impedance_no_offset
  2111                           
  2112                           ;comm.c: 35: break;
  2113  0369  0008               	return
  2114  036A                     l2347:	
  2115                           ;comm.c: 37: case 'o':
  2116                           
  2117                           
  2118                           ;comm.c: 38: measure_Offset();
  2119  036A  2230               	fcall	_measure_Offset
  2120                           
  2121                           ;comm.c: 43: }
  2122                           
  2123                           ;comm.c: 42: break;
  2124                           
  2125                           ;comm.c: 41: default:
  2126                           
  2127                           ;comm.c: 39: break;
  2128  036B  0008               	return
  2129  036C                     l2351:	
  2130  036C  0020               	movlb	0	; select bank0
  2131  036D  0842               	movf	_mess_rec,w	;volatile
  2132                           
  2133                           ; Switch size 1, requested type "space"
  2134                           ; Number of cases is 6, Range of values is 99 to 122
  2135                           ; switch strategies available:
  2136                           ; Name         Instructions Cycles
  2137                           ; simple_byte           19    10 (average)
  2138                           ; direct_byte           57     9 (fixed)
  2139                           ; jumptable            263     9 (fixed)
  2140                           ;	Chosen strategy is simple_byte
  2141  036E  3A63               	xorlw	99	; case 99
  2142  036F  1903               	skipnz
  2143  0370  2B62               	goto	l2339
  2144  0371  3A0E               	xorlw	14	; case 109
  2145  0372  1903               	skipnz
  2146  0373  2B64               	goto	l2341
  2147  0374  3A02               	xorlw	2	; case 111
  2148  0375  1903               	skipnz
  2149  0376  2B6A               	goto	l2347
  2150  0377  3A1B               	xorlw	27	; case 116
  2151  0378  1903               	skipnz
  2152  0379  2B5A               	goto	l2337
  2153  037A  3A0D               	xorlw	13	; case 121
  2154  037B  1903               	skipnz
  2155  037C  2B68               	goto	l2345
  2156  037D  3A03               	xorlw	3	; case 122
  2157  037E  1903               	skipnz
  2158  037F  2B66               	goto	l2343
  2159  0380  2B81               	goto	l331
  2160  0381                     l331:	
  2161  0381  0008               	return
  2162  0382                     __end_of_mess_handler:	
  2163                           
  2164                           	psect	text7
  2165  02C4                     __ptext7:	
  2166 ;; *************** function _read_ADC_channels *****************
  2167 ;; Defined at:
  2168 ;;		line 76 in file "comm.c"
  2169 ;; Parameters:    Size  Location     Type
  2170 ;;		None
  2171 ;; Auto vars:     Size  Location     Type
  2172 ;;  aux             7    7[BANK0 ] unsigned char [7]
  2173 ;;  value3          2   18[BANK0 ] unsigned short 
  2174 ;;  value2          2   16[BANK0 ] unsigned short 
  2175 ;;  value1          2   14[BANK0 ] unsigned short 
  2176 ;; Return value:  Size  Location     Type
  2177 ;;                  1    wreg      void 
  2178 ;; Registers used:
  2179 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2180 ;; Tracked objects:
  2181 ;;		On entry : 0/0
  2182 ;;		On exit  : 0/0
  2183 ;;		Unchanged: 0/0
  2184 ;; Data sizes:     COMMON   BANK0   BANK1
  2185 ;;      Params:         0       0       0
  2186 ;;      Locals:         0      13       0
  2187 ;;      Temps:          0       1       0
  2188 ;;      Totals:         0      14       0
  2189 ;;Total ram usage:       14 bytes
  2190 ;; Hardware stack levels used:    1
  2191 ;; Hardware stack levels required when called:    4
  2192 ;; This function calls:
  2193 ;;		_ADC_2
  2194 ;;		_ADC_4
  2195 ;;		_ADC_5
  2196 ;;		_lputs_ISR
  2197 ;; This function is called by:
  2198 ;;		_mess_handler
  2199 ;; This function uses a non-reentrant model
  2200 ;;
  2201                           
  2202                           
  2203                           ;psect for function _read_ADC_channels
  2204  02C4                     _read_ADC_channels:	
  2205                           
  2206                           ;comm.c: 78: unsigned char aux[7];
  2207                           ;comm.c: 79: unsigned short value1,value2,value3;
  2208                           ;comm.c: 82: value1 = ADC_2();
  2209                           
  2210                           ;incstack = 0
  2211                           ; Regs used in _read_ADC_channels: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2212  02C4  23C8               	fcall	_ADC_2
  2213  02C5  0020               	movlb	0	; select bank0
  2214  02C6  084D               	movf	?_ADC_2+1,w
  2215  02C7  00DB               	movwf	read_ADC_channels@value1+1
  2216  02C8  084C               	movf	?_ADC_2,w
  2217  02C9  00DA               	movwf	read_ADC_channels@value1
  2218                           
  2219                           ;comm.c: 84: value2 = ADC_4();
  2220  02CA  23A5               	fcall	_ADC_4
  2221  02CB  0020               	movlb	0	; select bank0
  2222  02CC  084D               	movf	?_ADC_4+1,w
  2223  02CD  00DD               	movwf	read_ADC_channels@value2+1
  2224  02CE  084C               	movf	?_ADC_4,w
  2225  02CF  00DC               	movwf	read_ADC_channels@value2
  2226                           
  2227                           ;comm.c: 86: value3 = ADC_5();
  2228  02D0  2382               	fcall	_ADC_5
  2229  02D1  0020               	movlb	0	; select bank0
  2230  02D2  084D               	movf	?_ADC_5+1,w
  2231  02D3  00DF               	movwf	read_ADC_channels@value3+1
  2232  02D4  084C               	movf	?_ADC_5,w
  2233  02D5  00DE               	movwf	read_ADC_channels@value3
  2234                           
  2235                           ;comm.c: 87: { ADCON0 = 0b00100100;};
  2236  02D6  3024               	movlw	36
  2237  02D7  0021               	movlb	1	; select bank1
  2238  02D8  009D               	movwf	29	;volatile
  2239                           
  2240                           ;comm.c: 89: aux[0] = 'm';
  2241  02D9  306D               	movlw	109
  2242  02DA  0020               	movlb	0	; select bank0
  2243  02DB  00D2               	movwf	??_read_ADC_channels
  2244  02DC  0852               	movf	??_read_ADC_channels,w
  2245  02DD  00D3               	movwf	read_ADC_channels@aux
  2246                           
  2247                           ;comm.c: 90: aux[1] = (unsigned char)(value1 & 0xff);
  2248  02DE  085A               	movf	read_ADC_channels@value1,w
  2249  02DF  00D2               	movwf	??_read_ADC_channels
  2250  02E0  0852               	movf	??_read_ADC_channels,w
  2251  02E1  00D4               	movwf	read_ADC_channels@aux+1
  2252                           
  2253                           ;comm.c: 91: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  2254  02E2  085B               	movf	read_ADC_channels@value1+1,w
  2255  02E3  00D2               	movwf	??_read_ADC_channels
  2256  02E4  0852               	movf	??_read_ADC_channels,w
  2257  02E5  00D5               	movwf	read_ADC_channels@aux+2
  2258                           
  2259                           ;comm.c: 92: aux[3] = (unsigned char)(value2 & 0xff);
  2260  02E6  085C               	movf	read_ADC_channels@value2,w
  2261  02E7  00D2               	movwf	??_read_ADC_channels
  2262  02E8  0852               	movf	??_read_ADC_channels,w
  2263  02E9  00D6               	movwf	read_ADC_channels@aux+3
  2264                           
  2265                           ;comm.c: 93: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  2266  02EA  085D               	movf	read_ADC_channels@value2+1,w
  2267  02EB  00D2               	movwf	??_read_ADC_channels
  2268  02EC  0852               	movf	??_read_ADC_channels,w
  2269  02ED  00D7               	movwf	read_ADC_channels@aux+4
  2270                           
  2271                           ;comm.c: 94: aux[5] = (unsigned char)(value3 & 0xff);
  2272  02EE  085E               	movf	read_ADC_channels@value3,w
  2273  02EF  00D2               	movwf	??_read_ADC_channels
  2274  02F0  0852               	movf	??_read_ADC_channels,w
  2275  02F1  00D8               	movwf	read_ADC_channels@aux+5
  2276                           
  2277                           ;comm.c: 95: aux[6] = (unsigned char)((value3 >> 8) & 0xff);
  2278  02F2  085F               	movf	read_ADC_channels@value3+1,w
  2279  02F3  00D2               	movwf	??_read_ADC_channels
  2280  02F4  0852               	movf	??_read_ADC_channels,w
  2281  02F5  00D9               	movwf	read_ADC_channels@aux+6
  2282                           
  2283                           ;comm.c: 97: lputs_ISR(aux,7);
  2284  02F6  3007               	movlw	7
  2285  02F7  00D2               	movwf	??_read_ADC_channels
  2286  02F8  0852               	movf	??_read_ADC_channels,w
  2287  02F9  00CC               	movwf	lputs_ISR@length
  2288  02FA  3053               	movlw	(low (read_ADC_channels@aux| 0))& (0+255)
  2289  02FB  232E               	fcall	_lputs_ISR
  2290  02FC  0008               	return
  2291  02FD                     __end_of_read_ADC_channels:	
  2292                           
  2293                           	psect	text8
  2294  0382                     __ptext8:	
  2295 ;; *************** function _ADC_5 *****************
  2296 ;; Defined at:
  2297 ;;		line 48 in file "ADC1823.c"
  2298 ;; Parameters:    Size  Location     Type
  2299 ;;		None
  2300 ;; Auto vars:     Size  Location     Type
  2301 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  2302 ;; Return value:  Size  Location     Type
  2303 ;;                  2    0[BANK0 ] unsigned short 
  2304 ;; Registers used:
  2305 ;;		wreg
  2306 ;; Tracked objects:
  2307 ;;		On entry : 0/0
  2308 ;;		On exit  : 0/0
  2309 ;;		Unchanged: 0/0
  2310 ;; Data sizes:     COMMON   BANK0   BANK1
  2311 ;;      Params:         0       2       0
  2312 ;;      Locals:         0       2       0
  2313 ;;      Temps:          0       2       0
  2314 ;;      Totals:         0       6       0
  2315 ;;Total ram usage:        6 bytes
  2316 ;; Hardware stack levels used:    1
  2317 ;; Hardware stack levels required when called:    2
  2318 ;; This function calls:
  2319 ;;		Nothing
  2320 ;; This function is called by:
  2321 ;;		_read_ADC_channels
  2322 ;; This function uses a non-reentrant model
  2323 ;;
  2324                           
  2325                           
  2326                           ;psect for function _ADC_5
  2327  0382                     _ADC_5:	
  2328                           
  2329                           ;ADC1823.c: 50: unsigned short ADC_value;
  2330                           ;ADC1823.c: 52: { ADCON0 = 0b00010101;};
  2331                           
  2332                           ;incstack = 0
  2333                           ; Regs used in _ADC_5: [wreg]
  2334  0382  3015               	movlw	21
  2335  0383  0021               	movlb	1	; select bank1
  2336  0384  009D               	movwf	29	;volatile
  2337                           
  2338                           ;ADC1823.c: 53: __nop();
  2339  0385  0000               	nop
  2340                           
  2341                           ;ADC1823.c: 54: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  2342  0386  0021               	movlb	1	; select bank1
  2343  0387  149D               	bsf	29,1	;volatile
  2344  0388                     l376:	
  2345  0388  189D               	btfsc	29,1	;volatile
  2346  0389  2B88               	goto	l376
  2347  038A  081C               	movf	28,w	;volatile
  2348  038B  0020               	movlb	0	; select bank0
  2349  038C  00CE               	movwf	??_ADC_5
  2350  038D  01CF               	clrf	??_ADC_5+1
  2351  038E  084E               	movf	??_ADC_5,w
  2352  038F  00D0               	movwf	ADC_5@ADC_value
  2353  0390  084F               	movf	??_ADC_5+1,w
  2354  0391  00D1               	movwf	ADC_5@ADC_value+1
  2355  0392  3008               	movlw	8
  2356  0393                     u945:	
  2357  0393  35D0               	lslf	ADC_5@ADC_value,f
  2358  0394  0DD1               	rlf	ADC_5@ADC_value+1,f
  2359  0395  0B89               	decfsz	9,f
  2360  0396  2B93               	goto	u945
  2361  0397  0021               	movlb	1	; select bank1
  2362  0398  081B               	movf	27,w	;volatile
  2363  0399  0020               	movlb	0	; select bank0
  2364  039A  00CE               	movwf	??_ADC_5
  2365  039B  01CF               	clrf	??_ADC_5+1
  2366  039C  084E               	movf	??_ADC_5,w
  2367  039D  04D0               	iorwf	ADC_5@ADC_value,f
  2368  039E  084F               	movf	??_ADC_5+1,w
  2369  039F  04D1               	iorwf	ADC_5@ADC_value+1,f
  2370                           
  2371                           ;ADC1823.c: 55: return ADC_value;
  2372  03A0  0851               	movf	ADC_5@ADC_value+1,w
  2373  03A1  00CD               	movwf	?_ADC_5+1
  2374  03A2  0850               	movf	ADC_5@ADC_value,w
  2375  03A3  00CC               	movwf	?_ADC_5
  2376  03A4  0008               	return
  2377  03A5                     __end_of_ADC_5:	
  2378                           
  2379                           	psect	text9
  2380  0230                     __ptext9:	
  2381 ;; *************** function _measure_Offset *****************
  2382 ;; Defined at:
  2383 ;;		line 250 in file "comm.c"
  2384 ;; Parameters:    Size  Location     Type
  2385 ;;		None
  2386 ;; Auto vars:     Size  Location     Type
  2387 ;;  asic            6   19[BANK0 ] struct .
  2388 ;;  aux             5   10[BANK0 ] unsigned char [5]
  2389 ;;  value2          2   17[BANK0 ] unsigned short 
  2390 ;;  value1          2   15[BANK0 ] unsigned short 
  2391 ;; Return value:  Size  Location     Type
  2392 ;;                  1    wreg      void 
  2393 ;; Registers used:
  2394 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2395 ;; Tracked objects:
  2396 ;;		On entry : 0/0
  2397 ;;		On exit  : 0/0
  2398 ;;		Unchanged: 0/0
  2399 ;; Data sizes:     COMMON   BANK0   BANK1
  2400 ;;      Params:         0       0       0
  2401 ;;      Locals:         0      15       0
  2402 ;;      Temps:          0       1       0
  2403 ;;      Totals:         0      16       0
  2404 ;;Total ram usage:       16 bytes
  2405 ;; Hardware stack levels used:    1
  2406 ;; Hardware stack levels required when called:    4
  2407 ;; This function calls:
  2408 ;;		_ADC_2
  2409 ;;		_ADC_4
  2410 ;;		_VIN_config
  2411 ;;		_lputs_ISR
  2412 ;; This function is called by:
  2413 ;;		_mess_handler
  2414 ;; This function uses a non-reentrant model
  2415 ;;
  2416                           
  2417                           
  2418                           ;psect for function _measure_Offset
  2419  0230                     _measure_Offset:	
  2420                           
  2421                           ;comm.c: 252: unsigned char aux[5];
  2422                           ;comm.c: 253: unsigned short value1,value2;
  2423                           ;comm.c: 258: VIN asic;
  2424                           ;comm.c: 262: aux[0] = 'o';
  2425                           
  2426                           ;incstack = 0
  2427                           ; Regs used in _measure_Offset: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2428  0230  306F               	movlw	111
  2429  0231  0020               	movlb	0	; select bank0
  2430  0232  00D5               	movwf	??_measure_Offset
  2431  0233  0855               	movf	??_measure_Offset,w
  2432  0234  00D6               	movwf	measure_Offset@aux
  2433                           
  2434                           ;comm.c: 273: asic.data[0] = mess_rec[1];
  2435  0235  0843               	movf	_mess_rec+1,w	;volatile
  2436  0236  00D5               	movwf	??_measure_Offset
  2437  0237  0855               	movf	??_measure_Offset,w
  2438  0238  00DF               	movwf	measure_Offset@asic
  2439                           
  2440                           ;comm.c: 274: asic.data[1] = mess_rec[2];
  2441  0239  0844               	movf	_mess_rec+2,w	;volatile
  2442  023A  00D5               	movwf	??_measure_Offset
  2443  023B  0855               	movf	??_measure_Offset,w
  2444  023C  00E0               	movwf	measure_Offset@asic+1
  2445                           
  2446                           ;comm.c: 275: asic.data[2] = mess_rec[3];
  2447  023D  0845               	movf	_mess_rec+3,w	;volatile
  2448  023E  00D5               	movwf	??_measure_Offset
  2449  023F  0855               	movf	??_measure_Offset,w
  2450  0240  00E1               	movwf	measure_Offset@asic+2
  2451                           
  2452                           ;comm.c: 276: asic.data[3] = mess_rec[4];
  2453  0241  0846               	movf	_mess_rec+4,w	;volatile
  2454  0242  00D5               	movwf	??_measure_Offset
  2455  0243  0855               	movf	??_measure_Offset,w
  2456  0244  00E2               	movwf	measure_Offset@asic+3
  2457                           
  2458                           ;comm.c: 277: asic.data[4] = mess_rec[5];
  2459  0245  0847               	movf	_mess_rec+5,w	;volatile
  2460  0246  00D5               	movwf	??_measure_Offset
  2461  0247  0855               	movf	??_measure_Offset,w
  2462  0248  00E3               	movwf	measure_Offset@asic+4
  2463                           
  2464                           ;comm.c: 279: asic.data_bits.CE = 0;
  2465  0249  135F               	bcf	measure_Offset@asic,6
  2466                           
  2467                           ;comm.c: 280: VIN_config(asic);
  2468  024A  305F               	movlw	low measure_Offset@asic
  2469  024B  0086               	movwf	6
  2470  024C  3000               	movlw	high measure_Offset@asic
  2471  024D  0087               	movwf	7
  2472  024E  304C               	movlw	low VIN_config@conf
  2473  024F  0084               	movwf	4
  2474  0250  3000               	movlw	high VIN_config@conf
  2475  0251  0085               	movwf	5
  2476  0252  3F40               	moviw [0]fsr1
  2477  0253  3F80               	movwi [0]fsr0
  2478  0254  3F41               	moviw [1]fsr1
  2479  0255  3F81               	movwi [1]fsr0
  2480  0256  3F42               	moviw [2]fsr1
  2481  0257  3F82               	movwi [2]fsr0
  2482  0258  3F43               	moviw [3]fsr1
  2483  0259  3F83               	movwi [3]fsr0
  2484  025A  3F44               	moviw [4]fsr1
  2485  025B  3F84               	movwi [4]fsr0
  2486  025C  3F45               	moviw [5]fsr1
  2487  025D  3F85               	movwi [5]fsr0
  2488  025E  21B4               	fcall	_VIN_config
  2489                           
  2490                           ;comm.c: 283: _delay((unsigned long)((10)*(500000/4000.0)));
  2491  025F  30FA               	movlw	250
  2492  0260                     u1007:	
  2493  0260  3200               	nop2
  2494  0261  0B89               	decfsz	9,f
  2495  0262  2A60               	goto	u1007
  2496                           
  2497                           ;comm.c: 285: value1 = ADC_2();
  2498  0263  23C8               	fcall	_ADC_2
  2499  0264  0020               	movlb	0	; select bank0
  2500  0265  084D               	movf	?_ADC_2+1,w
  2501  0266  00DC               	movwf	measure_Offset@value1+1
  2502  0267  084C               	movf	?_ADC_2,w
  2503  0268  00DB               	movwf	measure_Offset@value1
  2504                           
  2505                           ;comm.c: 286: value2 = ADC_4();
  2506  0269  23A5               	fcall	_ADC_4
  2507  026A  0020               	movlb	0	; select bank0
  2508  026B  084D               	movf	?_ADC_4+1,w
  2509  026C  00DE               	movwf	measure_Offset@value2+1
  2510  026D  084C               	movf	?_ADC_4,w
  2511  026E  00DD               	movwf	measure_Offset@value2
  2512                           
  2513                           ;comm.c: 288: aux[1] = (unsigned char)(value1 & 0xff);
  2514  026F  085B               	movf	measure_Offset@value1,w
  2515  0270  00D5               	movwf	??_measure_Offset
  2516  0271  0855               	movf	??_measure_Offset,w
  2517  0272  00D7               	movwf	measure_Offset@aux+1
  2518                           
  2519                           ;comm.c: 289: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  2520  0273  085C               	movf	measure_Offset@value1+1,w
  2521  0274  00D5               	movwf	??_measure_Offset
  2522  0275  0855               	movf	??_measure_Offset,w
  2523  0276  00D8               	movwf	measure_Offset@aux+2
  2524                           
  2525                           ;comm.c: 290: aux[3] = (unsigned char)(value2 & 0xff);
  2526  0277  085D               	movf	measure_Offset@value2,w
  2527  0278  00D5               	movwf	??_measure_Offset
  2528  0279  0855               	movf	??_measure_Offset,w
  2529  027A  00D9               	movwf	measure_Offset@aux+3
  2530                           
  2531                           ;comm.c: 291: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  2532  027B  085E               	movf	measure_Offset@value2+1,w
  2533  027C  00D5               	movwf	??_measure_Offset
  2534  027D  0855               	movf	??_measure_Offset,w
  2535  027E  00DA               	movwf	measure_Offset@aux+4
  2536                           
  2537                           ;comm.c: 294: lputs_ISR(aux,5);
  2538  027F  3005               	movlw	5
  2539  0280  00D5               	movwf	??_measure_Offset
  2540  0281  0855               	movf	??_measure_Offset,w
  2541  0282  00CC               	movwf	lputs_ISR@length
  2542  0283  3056               	movlw	(low (measure_Offset@aux| 0))& (0+255)
  2543  0284  232E               	fcall	_lputs_ISR
  2544  0285  0008               	return
  2545  0286                     __end_of_measure_Offset:	
  2546                           
  2547                           	psect	text10
  2548  0127                     __ptext10:	
  2549 ;; *************** function _measure_Impedance_no_offset *****************
  2550 ;; Defined at:
  2551 ;;		line 185 in file "comm.c"
  2552 ;; Parameters:    Size  Location     Type
  2553 ;;		None
  2554 ;; Auto vars:     Size  Location     Type
  2555 ;;  aux            13   10[BANK0 ] unsigned char [13]
  2556 ;;  asic            6   27[BANK0 ] struct .
  2557 ;;  value2          2   25[BANK0 ] unsigned short 
  2558 ;;  value1          2   23[BANK0 ] unsigned short 
  2559 ;;  value3          2    0        unsigned short 
  2560 ;; Return value:  Size  Location     Type
  2561 ;;                  1    wreg      void 
  2562 ;; Registers used:
  2563 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2564 ;; Tracked objects:
  2565 ;;		On entry : 0/0
  2566 ;;		On exit  : 0/0
  2567 ;;		Unchanged: 0/0
  2568 ;; Data sizes:     COMMON   BANK0   BANK1
  2569 ;;      Params:         0       0       0
  2570 ;;      Locals:         0      23       0
  2571 ;;      Temps:          0       1       0
  2572 ;;      Totals:         0      24       0
  2573 ;;Total ram usage:       24 bytes
  2574 ;; Hardware stack levels used:    1
  2575 ;; Hardware stack levels required when called:    4
  2576 ;; This function calls:
  2577 ;;		_ADC_2
  2578 ;;		_ADC_4
  2579 ;;		_VIN_config
  2580 ;;		_lputs_ISR
  2581 ;; This function is called by:
  2582 ;;		_mess_handler
  2583 ;; This function uses a non-reentrant model
  2584 ;;
  2585                           
  2586                           
  2587                           ;psect for function _measure_Impedance_no_offset
  2588  0127                     _measure_Impedance_no_offset:	
  2589                           
  2590                           ;comm.c: 187: unsigned char aux[13];
  2591                           ;comm.c: 188: unsigned short value1,value2,value3;
  2592                           ;comm.c: 193: VIN asic;
  2593                           ;comm.c: 196: aux[0] = 'y';
  2594                           
  2595                           ;incstack = 0
  2596                           ; Regs used in _measure_Impedance_no_offset: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  2597  0127  3079               	movlw	121
  2598  0128  0020               	movlb	0	; select bank0
  2599  0129  00D5               	movwf	??_measure_Impedance_no_offset
  2600  012A  0855               	movf	??_measure_Impedance_no_offset,w
  2601  012B  00D6               	movwf	measure_Impedance_no_offset@aux
  2602                           
  2603                           ;comm.c: 202: asic.data[0] = mess_rec[1];
  2604  012C  0843               	movf	_mess_rec+1,w	;volatile
  2605  012D  00D5               	movwf	??_measure_Impedance_no_offset
  2606  012E  0855               	movf	??_measure_Impedance_no_offset,w
  2607  012F  00E7               	movwf	measure_Impedance_no_offset@asic
  2608                           
  2609                           ;comm.c: 203: asic.data[1] = mess_rec[2];
  2610  0130  0844               	movf	_mess_rec+2,w	;volatile
  2611  0131  00D5               	movwf	??_measure_Impedance_no_offset
  2612  0132  0855               	movf	??_measure_Impedance_no_offset,w
  2613  0133  00E8               	movwf	measure_Impedance_no_offset@asic+1
  2614                           
  2615                           ;comm.c: 204: asic.data[2] = mess_rec[3];
  2616  0134  0845               	movf	_mess_rec+3,w	;volatile
  2617  0135  00D5               	movwf	??_measure_Impedance_no_offset
  2618  0136  0855               	movf	??_measure_Impedance_no_offset,w
  2619  0137  00E9               	movwf	measure_Impedance_no_offset@asic+2
  2620                           
  2621                           ;comm.c: 205: asic.data[3] = mess_rec[4];
  2622  0138  0846               	movf	_mess_rec+4,w	;volatile
  2623  0139  00D5               	movwf	??_measure_Impedance_no_offset
  2624  013A  0855               	movf	??_measure_Impedance_no_offset,w
  2625  013B  00EA               	movwf	measure_Impedance_no_offset@asic+3
  2626                           
  2627                           ;comm.c: 206: asic.data[4] = mess_rec[5];
  2628  013C  0847               	movf	_mess_rec+5,w	;volatile
  2629  013D  00D5               	movwf	??_measure_Impedance_no_offset
  2630  013E  0855               	movf	??_measure_Impedance_no_offset,w
  2631  013F  00EB               	movwf	measure_Impedance_no_offset@asic+4
  2632                           
  2633                           ;comm.c: 210: asic.data_bits.CE = 1;
  2634  0140  1767               	bsf	measure_Impedance_no_offset@asic,6
  2635                           
  2636                           ;comm.c: 211: asic.data_bits.IQ = 0;
  2637  0141  11E8               	bcf	measure_Impedance_no_offset@asic+1,3
  2638                           
  2639                           ;comm.c: 216: VIN_config(asic);
  2640  0142  3067               	movlw	low measure_Impedance_no_offset@asic
  2641  0143  0086               	movwf	6
  2642  0144  3000               	movlw	high measure_Impedance_no_offset@asic
  2643  0145  0087               	movwf	7
  2644  0146  304C               	movlw	low VIN_config@conf
  2645  0147  0084               	movwf	4
  2646  0148  3000               	movlw	high VIN_config@conf
  2647  0149  0085               	movwf	5
  2648  014A  3F40               	moviw [0]fsr1
  2649  014B  3F80               	movwi [0]fsr0
  2650  014C  3F41               	moviw [1]fsr1
  2651  014D  3F81               	movwi [1]fsr0
  2652  014E  3F42               	moviw [2]fsr1
  2653  014F  3F82               	movwi [2]fsr0
  2654  0150  3F43               	moviw [3]fsr1
  2655  0151  3F83               	movwi [3]fsr0
  2656  0152  3F44               	moviw [4]fsr1
  2657  0153  3F84               	movwi [4]fsr0
  2658  0154  3F45               	moviw [5]fsr1
  2659  0155  3F85               	movwi [5]fsr0
  2660  0156  21B4               	fcall	_VIN_config
  2661                           
  2662                           ;comm.c: 218: _delay((unsigned long)((10)*(500000/4000.0)));
  2663  0157  30FA               	movlw	250
  2664  0158                     u1017:	
  2665  0158  3200               	nop2
  2666  0159  0B89               	decfsz	9,f
  2667  015A  2958               	goto	u1017
  2668                           
  2669                           ;comm.c: 220: value1 = ADC_2();
  2670  015B  23C8               	fcall	_ADC_2
  2671  015C  0020               	movlb	0	; select bank0
  2672  015D  084D               	movf	?_ADC_2+1,w
  2673  015E  00E4               	movwf	measure_Impedance_no_offset@value1+1
  2674  015F  084C               	movf	?_ADC_2,w
  2675  0160  00E3               	movwf	measure_Impedance_no_offset@value1
  2676                           
  2677                           ;comm.c: 221: value2 = ADC_4();
  2678  0161  23A5               	fcall	_ADC_4
  2679  0162  0020               	movlb	0	; select bank0
  2680  0163  084D               	movf	?_ADC_4+1,w
  2681  0164  00E6               	movwf	measure_Impedance_no_offset@value2+1
  2682  0165  084C               	movf	?_ADC_4,w
  2683  0166  00E5               	movwf	measure_Impedance_no_offset@value2
  2684                           
  2685                           ;comm.c: 223: aux[1] = (unsigned char)(value1 & 0xff);
  2686  0167  0863               	movf	measure_Impedance_no_offset@value1,w
  2687  0168  00D5               	movwf	??_measure_Impedance_no_offset
  2688  0169  0855               	movf	??_measure_Impedance_no_offset,w
  2689  016A  00D7               	movwf	measure_Impedance_no_offset@aux+1
  2690                           
  2691                           ;comm.c: 224: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  2692  016B  0864               	movf	measure_Impedance_no_offset@value1+1,w
  2693  016C  00D5               	movwf	??_measure_Impedance_no_offset
  2694  016D  0855               	movf	??_measure_Impedance_no_offset,w
  2695  016E  00D8               	movwf	measure_Impedance_no_offset@aux+2
  2696                           
  2697                           ;comm.c: 225: aux[3] = (unsigned char)(value2 & 0xff);
  2698  016F  0865               	movf	measure_Impedance_no_offset@value2,w
  2699  0170  00D5               	movwf	??_measure_Impedance_no_offset
  2700  0171  0855               	movf	??_measure_Impedance_no_offset,w
  2701  0172  00D9               	movwf	measure_Impedance_no_offset@aux+3
  2702                           
  2703                           ;comm.c: 226: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  2704  0173  0866               	movf	measure_Impedance_no_offset@value2+1,w
  2705  0174  00D5               	movwf	??_measure_Impedance_no_offset
  2706  0175  0855               	movf	??_measure_Impedance_no_offset,w
  2707  0176  00DA               	movwf	measure_Impedance_no_offset@aux+4
  2708                           
  2709                           ;comm.c: 229: asic.data_bits.IQ = 1;
  2710  0177  15E8               	bsf	measure_Impedance_no_offset@asic+1,3
  2711                           
  2712                           ;comm.c: 234: VIN_config(asic);
  2713  0178  3067               	movlw	low measure_Impedance_no_offset@asic
  2714  0179  0086               	movwf	6
  2715  017A  3000               	movlw	high measure_Impedance_no_offset@asic
  2716  017B  0087               	movwf	7
  2717  017C  304C               	movlw	low VIN_config@conf
  2718  017D  0084               	movwf	4
  2719  017E  3000               	movlw	high VIN_config@conf
  2720  017F  0085               	movwf	5
  2721  0180  3F40               	moviw [0]fsr1
  2722  0181  3F80               	movwi [0]fsr0
  2723  0182  3F41               	moviw [1]fsr1
  2724  0183  3F81               	movwi [1]fsr0
  2725  0184  3F42               	moviw [2]fsr1
  2726  0185  3F82               	movwi [2]fsr0
  2727  0186  3F43               	moviw [3]fsr1
  2728  0187  3F83               	movwi [3]fsr0
  2729  0188  3F44               	moviw [4]fsr1
  2730  0189  3F84               	movwi [4]fsr0
  2731  018A  3F45               	moviw [5]fsr1
  2732  018B  3F85               	movwi [5]fsr0
  2733  018C  21B4               	fcall	_VIN_config
  2734                           
  2735                           ;comm.c: 236: _delay((unsigned long)((10)*(500000/4000.0)));
  2736  018D  30FA               	movlw	250
  2737  018E                     u1027:	
  2738  018E  3200               	nop2
  2739  018F  0B89               	decfsz	9,f
  2740  0190  298E               	goto	u1027
  2741                           
  2742                           ;comm.c: 238: value1 = ADC_2();
  2743  0191  23C8               	fcall	_ADC_2
  2744  0192  0020               	movlb	0	; select bank0
  2745  0193  084D               	movf	?_ADC_2+1,w
  2746  0194  00E4               	movwf	measure_Impedance_no_offset@value1+1
  2747  0195  084C               	movf	?_ADC_2,w
  2748  0196  00E3               	movwf	measure_Impedance_no_offset@value1
  2749                           
  2750                           ;comm.c: 239: value2 = ADC_4();
  2751  0197  23A5               	fcall	_ADC_4
  2752  0198  0020               	movlb	0	; select bank0
  2753  0199  084D               	movf	?_ADC_4+1,w
  2754  019A  00E6               	movwf	measure_Impedance_no_offset@value2+1
  2755  019B  084C               	movf	?_ADC_4,w
  2756  019C  00E5               	movwf	measure_Impedance_no_offset@value2
  2757                           
  2758                           ;comm.c: 241: aux[5] = (unsigned char)(value1 & 0xff);
  2759  019D  0863               	movf	measure_Impedance_no_offset@value1,w
  2760  019E  00D5               	movwf	??_measure_Impedance_no_offset
  2761  019F  0855               	movf	??_measure_Impedance_no_offset,w
  2762  01A0  00DB               	movwf	measure_Impedance_no_offset@aux+5
  2763                           
  2764                           ;comm.c: 242: aux[6] = (unsigned char)((value1 >> 8) & 0xff);
  2765  01A1  0864               	movf	measure_Impedance_no_offset@value1+1,w
  2766  01A2  00D5               	movwf	??_measure_Impedance_no_offset
  2767  01A3  0855               	movf	??_measure_Impedance_no_offset,w
  2768  01A4  00DC               	movwf	measure_Impedance_no_offset@aux+6
  2769                           
  2770                           ;comm.c: 243: aux[7] = (unsigned char)(value2 & 0xff);
  2771  01A5  0865               	movf	measure_Impedance_no_offset@value2,w
  2772  01A6  00D5               	movwf	??_measure_Impedance_no_offset
  2773  01A7  0855               	movf	??_measure_Impedance_no_offset,w
  2774  01A8  00DD               	movwf	measure_Impedance_no_offset@aux+7
  2775                           
  2776                           ;comm.c: 244: aux[8] = (unsigned char)((value2 >> 8) & 0xff);
  2777  01A9  0866               	movf	measure_Impedance_no_offset@value2+1,w
  2778  01AA  00D5               	movwf	??_measure_Impedance_no_offset
  2779  01AB  0855               	movf	??_measure_Impedance_no_offset,w
  2780  01AC  00DE               	movwf	measure_Impedance_no_offset@aux+8
  2781                           
  2782                           ;comm.c: 247: lputs_ISR(aux,9);
  2783  01AD  3009               	movlw	9
  2784  01AE  00D5               	movwf	??_measure_Impedance_no_offset
  2785  01AF  0855               	movf	??_measure_Impedance_no_offset,w
  2786  01B0  00CC               	movwf	lputs_ISR@length
  2787  01B1  3056               	movlw	(low (measure_Impedance_no_offset@aux| 0))& (0+255)
  2788  01B2  232E               	fcall	_lputs_ISR
  2789  01B3  0008               	return
  2790  01B4                     __end_of_measure_Impedance_no_offset:	
  2791                           
  2792                           	psect	text11
  2793  0064                     __ptext11:	
  2794 ;; *************** function _measure_Impedance *****************
  2795 ;; Defined at:
  2796 ;;		line 100 in file "comm.c"
  2797 ;; Parameters:    Size  Location     Type
  2798 ;;		None
  2799 ;; Auto vars:     Size  Location     Type
  2800 ;;  aux            13   10[BANK0 ] unsigned char [13]
  2801 ;;  asic            6   27[BANK0 ] struct .
  2802 ;;  value2          2   25[BANK0 ] unsigned short 
  2803 ;;  value1          2   23[BANK0 ] unsigned short 
  2804 ;;  value3          2    0        unsigned short 
  2805 ;; Return value:  Size  Location     Type
  2806 ;;                  1    wreg      void 
  2807 ;; Registers used:
  2808 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2809 ;; Tracked objects:
  2810 ;;		On entry : 0/0
  2811 ;;		On exit  : 0/0
  2812 ;;		Unchanged: 0/0
  2813 ;; Data sizes:     COMMON   BANK0   BANK1
  2814 ;;      Params:         0       0       0
  2815 ;;      Locals:         0      23       0
  2816 ;;      Temps:          0       1       0
  2817 ;;      Totals:         0      24       0
  2818 ;;Total ram usage:       24 bytes
  2819 ;; Hardware stack levels used:    1
  2820 ;; Hardware stack levels required when called:    4
  2821 ;; This function calls:
  2822 ;;		_ADC_2
  2823 ;;		_ADC_4
  2824 ;;		_VIN_config
  2825 ;;		_lputs_ISR
  2826 ;; This function is called by:
  2827 ;;		_mess_handler
  2828 ;; This function uses a non-reentrant model
  2829 ;;
  2830                           
  2831                           
  2832                           ;psect for function _measure_Impedance
  2833  0064                     _measure_Impedance:	
  2834                           
  2835                           ;comm.c: 102: unsigned char aux[13];
  2836                           ;comm.c: 103: unsigned short value1,value2,value3;
  2837                           ;comm.c: 108: VIN asic;
  2838                           ;comm.c: 112: aux[0] = 'z';
  2839                           
  2840                           ;incstack = 0
  2841                           ; Regs used in _measure_Impedance: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2842  0064  307A               	movlw	122
  2843  0065  0020               	movlb	0	; select bank0
  2844  0066  00D5               	movwf	??_measure_Impedance
  2845  0067  0855               	movf	??_measure_Impedance,w
  2846  0068  00D6               	movwf	measure_Impedance@aux
  2847                           
  2848                           ;comm.c: 124: asic.data[0] = mess_rec[1];
  2849  0069  0843               	movf	_mess_rec+1,w	;volatile
  2850  006A  00D5               	movwf	??_measure_Impedance
  2851  006B  0855               	movf	??_measure_Impedance,w
  2852  006C  00E7               	movwf	measure_Impedance@asic
  2853                           
  2854                           ;comm.c: 125: asic.data[1] = mess_rec[2];
  2855  006D  0844               	movf	_mess_rec+2,w	;volatile
  2856  006E  00D5               	movwf	??_measure_Impedance
  2857  006F  0855               	movf	??_measure_Impedance,w
  2858  0070  00E8               	movwf	measure_Impedance@asic+1
  2859                           
  2860                           ;comm.c: 126: asic.data[2] = mess_rec[3];
  2861  0071  0845               	movf	_mess_rec+3,w	;volatile
  2862  0072  00D5               	movwf	??_measure_Impedance
  2863  0073  0855               	movf	??_measure_Impedance,w
  2864  0074  00E9               	movwf	measure_Impedance@asic+2
  2865                           
  2866                           ;comm.c: 127: asic.data[3] = mess_rec[4];
  2867  0075  0846               	movf	_mess_rec+4,w	;volatile
  2868  0076  00D5               	movwf	??_measure_Impedance
  2869  0077  0855               	movf	??_measure_Impedance,w
  2870  0078  00EA               	movwf	measure_Impedance@asic+3
  2871                           
  2872                           ;comm.c: 128: asic.data[4] = mess_rec[5];
  2873  0079  0847               	movf	_mess_rec+5,w	;volatile
  2874  007A  00D5               	movwf	??_measure_Impedance
  2875  007B  0855               	movf	??_measure_Impedance,w
  2876  007C  00EB               	movwf	measure_Impedance@asic+4
  2877                           
  2878                           ;comm.c: 130: asic.data_bits.CE = 0;
  2879  007D  1367               	bcf	measure_Impedance@asic,6
  2880                           
  2881                           ;comm.c: 131: VIN_config(asic);
  2882  007E  3067               	movlw	low measure_Impedance@asic
  2883  007F  0086               	movwf	6
  2884  0080  3000               	movlw	high measure_Impedance@asic
  2885  0081  0087               	movwf	7
  2886  0082  304C               	movlw	low VIN_config@conf
  2887  0083  0084               	movwf	4
  2888  0084  3000               	movlw	high VIN_config@conf
  2889  0085  0085               	movwf	5
  2890  0086  3F40               	moviw [0]fsr1
  2891  0087  3F80               	movwi [0]fsr0
  2892  0088  3F41               	moviw [1]fsr1
  2893  0089  3F81               	movwi [1]fsr0
  2894  008A  3F42               	moviw [2]fsr1
  2895  008B  3F82               	movwi [2]fsr0
  2896  008C  3F43               	moviw [3]fsr1
  2897  008D  3F83               	movwi [3]fsr0
  2898  008E  3F44               	moviw [4]fsr1
  2899  008F  3F84               	movwi [4]fsr0
  2900  0090  3F45               	moviw [5]fsr1
  2901  0091  3F85               	movwi [5]fsr0
  2902  0092  21B4               	fcall	_VIN_config
  2903                           
  2904                           ;comm.c: 134: _delay((unsigned long)((10)*(500000/4000.0)));
  2905  0093  30FA               	movlw	250
  2906  0094                     u1037:	
  2907  0094  3200               	nop2
  2908  0095  0B89               	decfsz	9,f
  2909  0096  2894               	goto	u1037
  2910                           
  2911                           ;comm.c: 136: value1 = ADC_2();
  2912  0097  23C8               	fcall	_ADC_2
  2913  0098  0020               	movlb	0	; select bank0
  2914  0099  084D               	movf	?_ADC_2+1,w
  2915  009A  00E4               	movwf	measure_Impedance@value1+1
  2916  009B  084C               	movf	?_ADC_2,w
  2917  009C  00E3               	movwf	measure_Impedance@value1
  2918                           
  2919                           ;comm.c: 137: value2 = ADC_4();
  2920  009D  23A5               	fcall	_ADC_4
  2921  009E  0020               	movlb	0	; select bank0
  2922  009F  084D               	movf	?_ADC_4+1,w
  2923  00A0  00E6               	movwf	measure_Impedance@value2+1
  2924  00A1  084C               	movf	?_ADC_4,w
  2925  00A2  00E5               	movwf	measure_Impedance@value2
  2926                           
  2927                           ;comm.c: 139: aux[1] = (unsigned char)(value1 & 0xff);
  2928  00A3  0863               	movf	measure_Impedance@value1,w
  2929  00A4  00D5               	movwf	??_measure_Impedance
  2930  00A5  0855               	movf	??_measure_Impedance,w
  2931  00A6  00D7               	movwf	measure_Impedance@aux+1
  2932                           
  2933                           ;comm.c: 140: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  2934  00A7  0864               	movf	measure_Impedance@value1+1,w
  2935  00A8  00D5               	movwf	??_measure_Impedance
  2936  00A9  0855               	movf	??_measure_Impedance,w
  2937  00AA  00D8               	movwf	measure_Impedance@aux+2
  2938                           
  2939                           ;comm.c: 141: aux[3] = (unsigned char)(value2 & 0xff);
  2940  00AB  0865               	movf	measure_Impedance@value2,w
  2941  00AC  00D5               	movwf	??_measure_Impedance
  2942  00AD  0855               	movf	??_measure_Impedance,w
  2943  00AE  00D9               	movwf	measure_Impedance@aux+3
  2944                           
  2945                           ;comm.c: 142: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  2946  00AF  0866               	movf	measure_Impedance@value2+1,w
  2947  00B0  00D5               	movwf	??_measure_Impedance
  2948  00B1  0855               	movf	??_measure_Impedance,w
  2949  00B2  00DA               	movwf	measure_Impedance@aux+4
  2950                           
  2951                           ;comm.c: 145: asic.data_bits.CE = 1;
  2952  00B3  1767               	bsf	measure_Impedance@asic,6
  2953                           
  2954                           ;comm.c: 146: asic.data_bits.IQ = 0;
  2955  00B4  11E8               	bcf	measure_Impedance@asic+1,3
  2956                           
  2957                           ;comm.c: 151: VIN_config(asic);
  2958  00B5  3067               	movlw	low measure_Impedance@asic
  2959  00B6  0086               	movwf	6
  2960  00B7  3000               	movlw	high measure_Impedance@asic
  2961  00B8  0087               	movwf	7
  2962  00B9  304C               	movlw	low VIN_config@conf
  2963  00BA  0084               	movwf	4
  2964  00BB  3000               	movlw	high VIN_config@conf
  2965  00BC  0085               	movwf	5
  2966  00BD  3F40               	moviw [0]fsr1
  2967  00BE  3F80               	movwi [0]fsr0
  2968  00BF  3F41               	moviw [1]fsr1
  2969  00C0  3F81               	movwi [1]fsr0
  2970  00C1  3F42               	moviw [2]fsr1
  2971  00C2  3F82               	movwi [2]fsr0
  2972  00C3  3F43               	moviw [3]fsr1
  2973  00C4  3F83               	movwi [3]fsr0
  2974  00C5  3F44               	moviw [4]fsr1
  2975  00C6  3F84               	movwi [4]fsr0
  2976  00C7  3F45               	moviw [5]fsr1
  2977  00C8  3F85               	movwi [5]fsr0
  2978  00C9  21B4               	fcall	_VIN_config
  2979                           
  2980                           ;comm.c: 153: _delay((unsigned long)((10)*(500000/4000.0)));
  2981  00CA  30FA               	movlw	250
  2982  00CB                     u1047:	
  2983  00CB  3200               	nop2
  2984  00CC  0B89               	decfsz	9,f
  2985  00CD  28CB               	goto	u1047
  2986                           
  2987                           ;comm.c: 155: value1 = ADC_2();
  2988  00CE  23C8               	fcall	_ADC_2
  2989  00CF  0020               	movlb	0	; select bank0
  2990  00D0  084D               	movf	?_ADC_2+1,w
  2991  00D1  00E4               	movwf	measure_Impedance@value1+1
  2992  00D2  084C               	movf	?_ADC_2,w
  2993  00D3  00E3               	movwf	measure_Impedance@value1
  2994                           
  2995                           ;comm.c: 156: value2 = ADC_4();
  2996  00D4  23A5               	fcall	_ADC_4
  2997  00D5  0020               	movlb	0	; select bank0
  2998  00D6  084D               	movf	?_ADC_4+1,w
  2999  00D7  00E6               	movwf	measure_Impedance@value2+1
  3000  00D8  084C               	movf	?_ADC_4,w
  3001  00D9  00E5               	movwf	measure_Impedance@value2
  3002                           
  3003                           ;comm.c: 158: aux[5] = (unsigned char)(value1 & 0xff);
  3004  00DA  0863               	movf	measure_Impedance@value1,w
  3005  00DB  00D5               	movwf	??_measure_Impedance
  3006  00DC  0855               	movf	??_measure_Impedance,w
  3007  00DD  00DB               	movwf	measure_Impedance@aux+5
  3008                           
  3009                           ;comm.c: 159: aux[6] = (unsigned char)((value1 >> 8) & 0xff);
  3010  00DE  0864               	movf	measure_Impedance@value1+1,w
  3011  00DF  00D5               	movwf	??_measure_Impedance
  3012  00E0  0855               	movf	??_measure_Impedance,w
  3013  00E1  00DC               	movwf	measure_Impedance@aux+6
  3014                           
  3015                           ;comm.c: 160: aux[7] = (unsigned char)(value2 & 0xff);
  3016  00E2  0865               	movf	measure_Impedance@value2,w
  3017  00E3  00D5               	movwf	??_measure_Impedance
  3018  00E4  0855               	movf	??_measure_Impedance,w
  3019  00E5  00DD               	movwf	measure_Impedance@aux+7
  3020                           
  3021                           ;comm.c: 161: aux[8] = (unsigned char)((value2 >> 8) & 0xff);
  3022  00E6  0866               	movf	measure_Impedance@value2+1,w
  3023  00E7  00D5               	movwf	??_measure_Impedance
  3024  00E8  0855               	movf	??_measure_Impedance,w
  3025  00E9  00DE               	movwf	measure_Impedance@aux+8
  3026                           
  3027                           ;comm.c: 164: asic.data_bits.IQ = 1;
  3028  00EA  15E8               	bsf	measure_Impedance@asic+1,3
  3029                           
  3030                           ;comm.c: 169: VIN_config(asic);
  3031  00EB  3067               	movlw	low measure_Impedance@asic
  3032  00EC  0086               	movwf	6
  3033  00ED  3000               	movlw	high measure_Impedance@asic
  3034  00EE  0087               	movwf	7
  3035  00EF  304C               	movlw	low VIN_config@conf
  3036  00F0  0084               	movwf	4
  3037  00F1  3000               	movlw	high VIN_config@conf
  3038  00F2  0085               	movwf	5
  3039  00F3  3F40               	moviw [0]fsr1
  3040  00F4  3F80               	movwi [0]fsr0
  3041  00F5  3F41               	moviw [1]fsr1
  3042  00F6  3F81               	movwi [1]fsr0
  3043  00F7  3F42               	moviw [2]fsr1
  3044  00F8  3F82               	movwi [2]fsr0
  3045  00F9  3F43               	moviw [3]fsr1
  3046  00FA  3F83               	movwi [3]fsr0
  3047  00FB  3F44               	moviw [4]fsr1
  3048  00FC  3F84               	movwi [4]fsr0
  3049  00FD  3F45               	moviw [5]fsr1
  3050  00FE  3F85               	movwi [5]fsr0
  3051  00FF  21B4               	fcall	_VIN_config
  3052                           
  3053                           ;comm.c: 171: _delay((unsigned long)((10)*(500000/4000.0)));
  3054  0100  30FA               	movlw	250
  3055  0101                     u1057:	
  3056  0101  3200               	nop2
  3057  0102  0B89               	decfsz	9,f
  3058  0103  2901               	goto	u1057
  3059                           
  3060                           ;comm.c: 173: value1 = ADC_2();
  3061  0104  23C8               	fcall	_ADC_2
  3062  0105  0020               	movlb	0	; select bank0
  3063  0106  084D               	movf	?_ADC_2+1,w
  3064  0107  00E4               	movwf	measure_Impedance@value1+1
  3065  0108  084C               	movf	?_ADC_2,w
  3066  0109  00E3               	movwf	measure_Impedance@value1
  3067                           
  3068                           ;comm.c: 174: value2 = ADC_4();
  3069  010A  23A5               	fcall	_ADC_4
  3070  010B  0020               	movlb	0	; select bank0
  3071  010C  084D               	movf	?_ADC_4+1,w
  3072  010D  00E6               	movwf	measure_Impedance@value2+1
  3073  010E  084C               	movf	?_ADC_4,w
  3074  010F  00E5               	movwf	measure_Impedance@value2
  3075                           
  3076                           ;comm.c: 176: aux[9] = (unsigned char)(value1 & 0xff);
  3077  0110  0863               	movf	measure_Impedance@value1,w
  3078  0111  00D5               	movwf	??_measure_Impedance
  3079  0112  0855               	movf	??_measure_Impedance,w
  3080  0113  00DF               	movwf	measure_Impedance@aux+9
  3081                           
  3082                           ;comm.c: 177: aux[10] = (unsigned char)((value1 >> 8) & 0xff);
  3083  0114  0864               	movf	measure_Impedance@value1+1,w
  3084  0115  00D5               	movwf	??_measure_Impedance
  3085  0116  0855               	movf	??_measure_Impedance,w
  3086  0117  00E0               	movwf	measure_Impedance@aux+10
  3087                           
  3088                           ;comm.c: 178: aux[11] = (unsigned char)(value2 & 0xff);
  3089  0118  0865               	movf	measure_Impedance@value2,w
  3090  0119  00D5               	movwf	??_measure_Impedance
  3091  011A  0855               	movf	??_measure_Impedance,w
  3092  011B  00E1               	movwf	measure_Impedance@aux+11
  3093                           
  3094                           ;comm.c: 179: aux[12] = (unsigned char)((value2 >> 8) & 0xff);
  3095  011C  0866               	movf	measure_Impedance@value2+1,w
  3096  011D  00D5               	movwf	??_measure_Impedance
  3097  011E  0855               	movf	??_measure_Impedance,w
  3098  011F  00E2               	movwf	measure_Impedance@aux+12
  3099                           
  3100                           ;comm.c: 182: lputs_ISR(aux,13);
  3101  0120  300D               	movlw	13
  3102  0121  00D5               	movwf	??_measure_Impedance
  3103  0122  0855               	movf	??_measure_Impedance,w
  3104  0123  00CC               	movwf	lputs_ISR@length
  3105  0124  3056               	movlw	(low (measure_Impedance@aux| 0))& (0+255)
  3106  0125  232E               	fcall	_lputs_ISR
  3107  0126  0008               	return
  3108  0127                     __end_of_measure_Impedance:	
  3109                           
  3110                           	psect	text12
  3111  03A5                     __ptext12:	
  3112 ;; *************** function _ADC_4 *****************
  3113 ;; Defined at:
  3114 ;;		line 38 in file "ADC1823.c"
  3115 ;; Parameters:    Size  Location     Type
  3116 ;;		None
  3117 ;; Auto vars:     Size  Location     Type
  3118 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  3119 ;; Return value:  Size  Location     Type
  3120 ;;                  2    0[BANK0 ] unsigned short 
  3121 ;; Registers used:
  3122 ;;		wreg
  3123 ;; Tracked objects:
  3124 ;;		On entry : 0/0
  3125 ;;		On exit  : 0/0
  3126 ;;		Unchanged: 0/0
  3127 ;; Data sizes:     COMMON   BANK0   BANK1
  3128 ;;      Params:         0       2       0
  3129 ;;      Locals:         0       2       0
  3130 ;;      Temps:          0       2       0
  3131 ;;      Totals:         0       6       0
  3132 ;;Total ram usage:        6 bytes
  3133 ;; Hardware stack levels used:    1
  3134 ;; Hardware stack levels required when called:    2
  3135 ;; This function calls:
  3136 ;;		Nothing
  3137 ;; This function is called by:
  3138 ;;		_read_ADC_channels
  3139 ;;		_measure_Impedance
  3140 ;;		_measure_Impedance_no_offset
  3141 ;;		_measure_Offset
  3142 ;; This function uses a non-reentrant model
  3143 ;;
  3144                           
  3145                           
  3146                           ;psect for function _ADC_4
  3147  03A5                     _ADC_4:	
  3148                           
  3149                           ;ADC1823.c: 40: unsigned short ADC_value;
  3150                           ;ADC1823.c: 42: { ADCON0 = 0b00010001;};
  3151                           
  3152                           ;incstack = 0
  3153                           ; Regs used in _ADC_4: [wreg]
  3154  03A5  3011               	movlw	17
  3155  03A6  0021               	movlb	1	; select bank1
  3156  03A7  009D               	movwf	29	;volatile
  3157                           
  3158                           ;ADC1823.c: 43: __nop();
  3159  03A8  0000               	nop
  3160                           
  3161                           ;ADC1823.c: 44: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  3162  03A9  0021               	movlb	1	; select bank1
  3163  03AA  149D               	bsf	29,1	;volatile
  3164  03AB                     l370:	
  3165  03AB  189D               	btfsc	29,1	;volatile
  3166  03AC  2BAB               	goto	l370
  3167  03AD  081C               	movf	28,w	;volatile
  3168  03AE  0020               	movlb	0	; select bank0
  3169  03AF  00CE               	movwf	??_ADC_4
  3170  03B0  01CF               	clrf	??_ADC_4+1
  3171  03B1  084E               	movf	??_ADC_4,w
  3172  03B2  00D0               	movwf	ADC_4@ADC_value
  3173  03B3  084F               	movf	??_ADC_4+1,w
  3174  03B4  00D1               	movwf	ADC_4@ADC_value+1
  3175  03B5  3008               	movlw	8
  3176  03B6                     u925:	
  3177  03B6  35D0               	lslf	ADC_4@ADC_value,f
  3178  03B7  0DD1               	rlf	ADC_4@ADC_value+1,f
  3179  03B8  0B89               	decfsz	9,f
  3180  03B9  2BB6               	goto	u925
  3181  03BA  0021               	movlb	1	; select bank1
  3182  03BB  081B               	movf	27,w	;volatile
  3183  03BC  0020               	movlb	0	; select bank0
  3184  03BD  00CE               	movwf	??_ADC_4
  3185  03BE  01CF               	clrf	??_ADC_4+1
  3186  03BF  084E               	movf	??_ADC_4,w
  3187  03C0  04D0               	iorwf	ADC_4@ADC_value,f
  3188  03C1  084F               	movf	??_ADC_4+1,w
  3189  03C2  04D1               	iorwf	ADC_4@ADC_value+1,f
  3190                           
  3191                           ;ADC1823.c: 45: return ADC_value;
  3192  03C3  0851               	movf	ADC_4@ADC_value+1,w
  3193  03C4  00CD               	movwf	?_ADC_4+1
  3194  03C5  0850               	movf	ADC_4@ADC_value,w
  3195  03C6  00CC               	movwf	?_ADC_4
  3196  03C7  0008               	return
  3197  03C8                     __end_of_ADC_4:	
  3198                           
  3199                           	psect	text13
  3200  03C8                     __ptext13:	
  3201 ;; *************** function _ADC_2 *****************
  3202 ;; Defined at:
  3203 ;;		line 25 in file "ADC1823.c"
  3204 ;; Parameters:    Size  Location     Type
  3205 ;;		None
  3206 ;; Auto vars:     Size  Location     Type
  3207 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  3208 ;; Return value:  Size  Location     Type
  3209 ;;                  2    0[BANK0 ] unsigned short 
  3210 ;; Registers used:
  3211 ;;		wreg
  3212 ;; Tracked objects:
  3213 ;;		On entry : 0/0
  3214 ;;		On exit  : 0/0
  3215 ;;		Unchanged: 0/0
  3216 ;; Data sizes:     COMMON   BANK0   BANK1
  3217 ;;      Params:         0       2       0
  3218 ;;      Locals:         0       2       0
  3219 ;;      Temps:          0       2       0
  3220 ;;      Totals:         0       6       0
  3221 ;;Total ram usage:        6 bytes
  3222 ;; Hardware stack levels used:    1
  3223 ;; Hardware stack levels required when called:    2
  3224 ;; This function calls:
  3225 ;;		Nothing
  3226 ;; This function is called by:
  3227 ;;		_read_ADC_channels
  3228 ;;		_measure_Impedance
  3229 ;;		_measure_Impedance_no_offset
  3230 ;;		_measure_Offset
  3231 ;; This function uses a non-reentrant model
  3232 ;;
  3233                           
  3234                           
  3235                           ;psect for function _ADC_2
  3236  03C8                     _ADC_2:	
  3237                           
  3238                           ;ADC1823.c: 27: unsigned short ADC_value;
  3239                           ;ADC1823.c: 29: { ADCON0 = 0b00001001;};
  3240                           
  3241                           ;incstack = 0
  3242                           ; Regs used in _ADC_2: [wreg]
  3243  03C8  3009               	movlw	9
  3244  03C9  0021               	movlb	1	; select bank1
  3245  03CA  009D               	movwf	29	;volatile
  3246                           
  3247                           ;ADC1823.c: 30: __nop();
  3248  03CB  0000               	nop
  3249                           
  3250                           ;ADC1823.c: 34: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  3251  03CC  0021               	movlb	1	; select bank1
  3252  03CD  149D               	bsf	29,1	;volatile
  3253  03CE                     l364:	
  3254  03CE  189D               	btfsc	29,1	;volatile
  3255  03CF  2BCE               	goto	l364
  3256  03D0  081C               	movf	28,w	;volatile
  3257  03D1  0020               	movlb	0	; select bank0
  3258  03D2  00CE               	movwf	??_ADC_2
  3259  03D3  01CF               	clrf	??_ADC_2+1
  3260  03D4  084E               	movf	??_ADC_2,w
  3261  03D5  00D0               	movwf	ADC_2@ADC_value
  3262  03D6  084F               	movf	??_ADC_2+1,w
  3263  03D7  00D1               	movwf	ADC_2@ADC_value+1
  3264  03D8  3008               	movlw	8
  3265  03D9                     u905:	
  3266  03D9  35D0               	lslf	ADC_2@ADC_value,f
  3267  03DA  0DD1               	rlf	ADC_2@ADC_value+1,f
  3268  03DB  0B89               	decfsz	9,f
  3269  03DC  2BD9               	goto	u905
  3270  03DD  0021               	movlb	1	; select bank1
  3271  03DE  081B               	movf	27,w	;volatile
  3272  03DF  0020               	movlb	0	; select bank0
  3273  03E0  00CE               	movwf	??_ADC_2
  3274  03E1  01CF               	clrf	??_ADC_2+1
  3275  03E2  084E               	movf	??_ADC_2,w
  3276  03E3  04D0               	iorwf	ADC_2@ADC_value,f
  3277  03E4  084F               	movf	??_ADC_2+1,w
  3278  03E5  04D1               	iorwf	ADC_2@ADC_value+1,f
  3279                           
  3280                           ;ADC1823.c: 35: return ADC_value;
  3281  03E6  0851               	movf	ADC_2@ADC_value+1,w
  3282  03E7  00CD               	movwf	?_ADC_2+1
  3283  03E8  0850               	movf	ADC_2@ADC_value,w
  3284  03E9  00CC               	movwf	?_ADC_2
  3285  03EA  0008               	return
  3286  03EB                     __end_of_ADC_2:	
  3287                           
  3288                           	psect	text14
  3289  02FD                     __ptext14:	
  3290 ;; *************** function _config_ASIC *****************
  3291 ;; Defined at:
  3292 ;;		line 46 in file "comm.c"
  3293 ;; Parameters:    Size  Location     Type
  3294 ;;		None
  3295 ;; Auto vars:     Size  Location     Type
  3296 ;;  asic            6   10[BANK0 ] struct .
  3297 ;; Return value:  Size  Location     Type
  3298 ;;                  1    wreg      void 
  3299 ;; Registers used:
  3300 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3301 ;; Tracked objects:
  3302 ;;		On entry : 0/0
  3303 ;;		On exit  : 0/0
  3304 ;;		Unchanged: 0/0
  3305 ;; Data sizes:     COMMON   BANK0   BANK1
  3306 ;;      Params:         0       0       0
  3307 ;;      Locals:         0       6       0
  3308 ;;      Temps:          0       1       0
  3309 ;;      Totals:         0       7       0
  3310 ;;Total ram usage:        7 bytes
  3311 ;; Hardware stack levels used:    1
  3312 ;; Hardware stack levels required when called:    4
  3313 ;; This function calls:
  3314 ;;		_VIN_config
  3315 ;;		_lputs_ISR
  3316 ;; This function is called by:
  3317 ;;		_mess_handler
  3318 ;; This function uses a non-reentrant model
  3319 ;;
  3320                           
  3321                           
  3322                           ;psect for function _config_ASIC
  3323  02FD                     _config_ASIC:	
  3324                           
  3325                           ;comm.c: 62: VIN asic;
  3326                           ;comm.c: 64: asic.data[0] = mess_rec[1];
  3327                           
  3328                           ;incstack = 0
  3329                           ; Regs used in _config_ASIC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3330  02FD  0020               	movlb	0	; select bank0
  3331  02FE  0843               	movf	_mess_rec+1,w	;volatile
  3332  02FF  00D5               	movwf	??_config_ASIC
  3333  0300  0855               	movf	??_config_ASIC,w
  3334  0301  00D6               	movwf	config_ASIC@asic
  3335                           
  3336                           ;comm.c: 65: asic.data[1] = mess_rec[2];
  3337  0302  0844               	movf	_mess_rec+2,w	;volatile
  3338  0303  00D5               	movwf	??_config_ASIC
  3339  0304  0855               	movf	??_config_ASIC,w
  3340  0305  00D7               	movwf	config_ASIC@asic+1
  3341                           
  3342                           ;comm.c: 66: asic.data[2] = mess_rec[3];
  3343  0306  0845               	movf	_mess_rec+3,w	;volatile
  3344  0307  00D5               	movwf	??_config_ASIC
  3345  0308  0855               	movf	??_config_ASIC,w
  3346  0309  00D8               	movwf	config_ASIC@asic+2
  3347                           
  3348                           ;comm.c: 67: asic.data[3] = mess_rec[4];
  3349  030A  0846               	movf	_mess_rec+4,w	;volatile
  3350  030B  00D5               	movwf	??_config_ASIC
  3351  030C  0855               	movf	??_config_ASIC,w
  3352  030D  00D9               	movwf	config_ASIC@asic+3
  3353                           
  3354                           ;comm.c: 68: asic.data[4] = mess_rec[5];
  3355  030E  0847               	movf	_mess_rec+5,w	;volatile
  3356  030F  00D5               	movwf	??_config_ASIC
  3357  0310  0855               	movf	??_config_ASIC,w
  3358  0311  00DA               	movwf	config_ASIC@asic+4
  3359                           
  3360                           ;comm.c: 70: lputs_ISR(mess_rec,mess_rec_size);
  3361  0312  0841               	movf	_mess_rec_size,w	;volatile
  3362  0313  00D5               	movwf	??_config_ASIC
  3363  0314  0855               	movf	??_config_ASIC,w
  3364  0315  00CC               	movwf	lputs_ISR@length
  3365  0316  3042               	movlw	(low (_mess_rec| 0))& (0+255)
  3366  0317  232E               	fcall	_lputs_ISR
  3367                           
  3368                           ;comm.c: 72: VIN_config(asic);
  3369  0318  3056               	movlw	low config_ASIC@asic
  3370  0319  0086               	movwf	6
  3371  031A  3000               	movlw	high config_ASIC@asic
  3372  031B  0087               	movwf	7
  3373  031C  304C               	movlw	low VIN_config@conf
  3374  031D  0084               	movwf	4
  3375  031E  3000               	movlw	high VIN_config@conf
  3376  031F  0085               	movwf	5
  3377  0320  3F40               	moviw [0]fsr1
  3378  0321  3F80               	movwi [0]fsr0
  3379  0322  3F41               	moviw [1]fsr1
  3380  0323  3F81               	movwi [1]fsr0
  3381  0324  3F42               	moviw [2]fsr1
  3382  0325  3F82               	movwi [2]fsr0
  3383  0326  3F43               	moviw [3]fsr1
  3384  0327  3F83               	movwi [3]fsr0
  3385  0328  3F44               	moviw [4]fsr1
  3386  0329  3F84               	movwi [4]fsr0
  3387  032A  3F45               	moviw [5]fsr1
  3388  032B  3F85               	movwi [5]fsr0
  3389  032C  21B4               	fcall	_VIN_config
  3390  032D  0008               	return
  3391  032E                     __end_of_config_ASIC:	
  3392                           
  3393                           	psect	text15
  3394  032E                     __ptext15:	
  3395 ;; *************** function _lputs_ISR *****************
  3396 ;; Defined at:
  3397 ;;		line 131 in file "USART1823.c"
  3398 ;; Parameters:    Size  Location     Type
  3399 ;;  data            1    wreg     PTR unsigned char 
  3400 ;;		 -> measure_Offset@aux(5), measure_Impedance_no_offset@aux(13), measure_Impedance@aux(13), read_ADC_channels@aux(7),
      + 
  3401 ;;		 -> mess_rec(10), 
  3402 ;;  length          1    0[BANK0 ] unsigned char 
  3403 ;; Auto vars:     Size  Location     Type
  3404 ;;  data            1    3[BANK0 ] PTR unsigned char 
  3405 ;;		 -> measure_Offset@aux(5), measure_Impedance_no_offset@aux(13), measure_Impedance@aux(13), read_ADC_channels@aux(7),
      + 
  3406 ;;		 -> mess_rec(10), 
  3407 ;;  i               1    4[BANK0 ] unsigned char 
  3408 ;; Return value:  Size  Location     Type
  3409 ;;                  1    wreg      void 
  3410 ;; Registers used:
  3411 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3412 ;; Tracked objects:
  3413 ;;		On entry : 0/0
  3414 ;;		On exit  : 0/0
  3415 ;;		Unchanged: 0/0
  3416 ;; Data sizes:     COMMON   BANK0   BANK1
  3417 ;;      Params:         0       1       0
  3418 ;;      Locals:         0       2       0
  3419 ;;      Temps:          0       2       0
  3420 ;;      Totals:         0       5       0
  3421 ;;Total ram usage:        5 bytes
  3422 ;; Hardware stack levels used:    1
  3423 ;; Hardware stack levels required when called:    3
  3424 ;; This function calls:
  3425 ;;		_close_RX_USART
  3426 ;; This function is called by:
  3427 ;;		_mess_handler
  3428 ;;		_config_ASIC
  3429 ;;		_read_ADC_channels
  3430 ;;		_measure_Impedance
  3431 ;;		_measure_Impedance_no_offset
  3432 ;;		_measure_Offset
  3433 ;; This function uses a non-reentrant model
  3434 ;;
  3435                           
  3436                           
  3437                           ;psect for function _lputs_ISR
  3438  032E                     _lputs_ISR:	
  3439                           
  3440                           ;incstack = 0
  3441                           ; Regs used in _lputs_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3442                           ;lputs_ISR@data stored from wreg
  3443  032E  0020               	movlb	0	; select bank0
  3444  032F  00CF               	movwf	lputs_ISR@data
  3445                           
  3446                           ;USART1823.c: 133: unsigned char i;
  3447                           ;USART1823.c: 135: if (USART_tx_flag == 1)
  3448  0330  0372               	decf	_USART_tx_flag,w	;volatile
  3449  0331  1903               	btfsc	3,2
  3450  0332  0008               	return
  3451                           
  3452                           ;USART1823.c: 138: for (i = 0; i < length; i++)
  3453                           
  3454                           ;USART1823.c: 136: return;
  3455  0333  01D0               	clrf	lputs_ISR@i
  3456  0334                     l2075:	
  3457  0334  084C               	movf	lputs_ISR@length,w
  3458  0335  0250               	subwf	lputs_ISR@i,w
  3459  0336  1803               	btfsc	3,0
  3460  0337  2B4B               	goto	l2077
  3461                           
  3462                           ;USART1823.c: 139: USART_tx_data[i] = data[i];
  3463  0338  0850               	movf	lputs_ISR@i,w
  3464  0339  074F               	addwf	lputs_ISR@data,w
  3465  033A  00CD               	movwf	??_lputs_ISR
  3466  033B  084D               	movf	??_lputs_ISR,w
  3467  033C  0086               	movwf	6
  3468  033D  0187               	clrf	7
  3469  033E  0801               	movf	1,w
  3470  033F  00CE               	movwf	??_lputs_ISR+1
  3471  0340  0850               	movf	lputs_ISR@i,w
  3472  0341  3E2F               	addlw	(low (_USART_tx_data| 0))& (0+255)
  3473  0342  0086               	movwf	6
  3474  0343  0187               	clrf	7
  3475  0344  084E               	movf	??_lputs_ISR+1,w
  3476  0345  0081               	movwf	1
  3477  0346  3001               	movlw	1
  3478  0347  00CD               	movwf	??_lputs_ISR
  3479  0348  084D               	movf	??_lputs_ISR,w
  3480  0349  07D0               	addwf	lputs_ISR@i,f
  3481  034A  2B34               	goto	l2075
  3482  034B                     l2077:	
  3483                           
  3484                           ;USART1823.c: 141: close_RX_USART();
  3485  034B  245E               	fcall	_close_RX_USART
  3486                           
  3487                           ;USART1823.c: 143: USART_tx_index = 0;
  3488  034C  01F3               	clrf	_USART_tx_index	;volatile
  3489                           
  3490                           ;USART1823.c: 144: USART_tx_length = length;
  3491  034D  0020               	movlb	0	; select bank0
  3492  034E  084C               	movf	lputs_ISR@length,w
  3493  034F  00CD               	movwf	??_lputs_ISR
  3494  0350  084D               	movf	??_lputs_ISR,w
  3495  0351  00F4               	movwf	_USART_tx_length	;volatile
  3496                           
  3497                           ;USART1823.c: 146: USART_tx_flag = 1;
  3498  0352  3001               	movlw	1
  3499  0353  00CD               	movwf	??_lputs_ISR
  3500  0354  084D               	movf	??_lputs_ISR,w
  3501  0355  00F2               	movwf	_USART_tx_flag	;volatile
  3502                           
  3503                           ;USART1823.c: 147: TXIE = 1;
  3504  0356  0021               	movlb	1	; select bank1
  3505  0357  1611               	bsf	17,4	;volatile
  3506  0358  0008               	return
  3507  0359                     __end_of_lputs_ISR:	
  3508                           
  3509                           	psect	text16
  3510  045E                     __ptext16:	
  3511 ;; *************** function _close_RX_USART *****************
  3512 ;; Defined at:
  3513 ;;		line 35 in file "USART1823.c"
  3514 ;; Parameters:    Size  Location     Type
  3515 ;;		None
  3516 ;; Auto vars:     Size  Location     Type
  3517 ;;		None
  3518 ;; Return value:  Size  Location     Type
  3519 ;;                  1    wreg      void 
  3520 ;; Registers used:
  3521 ;;		None
  3522 ;; Tracked objects:
  3523 ;;		On entry : 0/0
  3524 ;;		On exit  : 0/0
  3525 ;;		Unchanged: 0/0
  3526 ;; Data sizes:     COMMON   BANK0   BANK1
  3527 ;;      Params:         0       0       0
  3528 ;;      Locals:         0       0       0
  3529 ;;      Temps:          0       0       0
  3530 ;;      Totals:         0       0       0
  3531 ;;Total ram usage:        0 bytes
  3532 ;; Hardware stack levels used:    1
  3533 ;; Hardware stack levels required when called:    2
  3534 ;; This function calls:
  3535 ;;		Nothing
  3536 ;; This function is called by:
  3537 ;;		_lputs_ISR
  3538 ;; This function uses a non-reentrant model
  3539 ;;
  3540                           
  3541                           
  3542                           ;psect for function _close_RX_USART
  3543  045E                     _close_RX_USART:	
  3544                           
  3545                           ;USART1823.c: 39: RCIE = 0;
  3546                           
  3547                           ;incstack = 0
  3548                           ; Regs used in _close_RX_USART: []
  3549  045E  0021               	movlb	1	; select bank1
  3550  045F  1291               	bcf	17,5	;volatile
  3551                           
  3552                           ;USART1823.c: 40: CREN = 0;
  3553  0460  0023               	movlb	3	; select bank3
  3554  0461  121D               	bcf	29,4	;volatile
  3555  0462  0008               	return
  3556  0463                     __end_of_close_RX_USART:	
  3557                           
  3558                           	psect	text17
  3559  01B4                     __ptext17:	
  3560 ;; *************** function _VIN_config *****************
  3561 ;; Defined at:
  3562 ;;		line 68 in file "bio3.c"
  3563 ;; Parameters:    Size  Location     Type
  3564 ;;  conf            6    0[BANK0 ] struct .
  3565 ;; Auto vars:     Size  Location     Type
  3566 ;;  out             1    8[BANK0 ] unsigned char 
  3567 ;;  i               1    7[BANK0 ] unsigned char 
  3568 ;;  j               1    0        unsigned char 
  3569 ;; Return value:  Size  Location     Type
  3570 ;;                  1    wreg      void 
  3571 ;; Registers used:
  3572 ;;		wreg, status,2, status,0
  3573 ;; Tracked objects:
  3574 ;;		On entry : 0/0
  3575 ;;		On exit  : 0/0
  3576 ;;		Unchanged: 0/0
  3577 ;; Data sizes:     COMMON   BANK0   BANK1
  3578 ;;      Params:         0       6       0
  3579 ;;      Locals:         0       2       0
  3580 ;;      Temps:          0       1       0
  3581 ;;      Totals:         0       9       0
  3582 ;;Total ram usage:        9 bytes
  3583 ;; Hardware stack levels used:    1
  3584 ;; Hardware stack levels required when called:    2
  3585 ;; This function calls:
  3586 ;;		Nothing
  3587 ;; This function is called by:
  3588 ;;		_config_ASIC
  3589 ;;		_measure_Impedance
  3590 ;;		_measure_Impedance_no_offset
  3591 ;;		_measure_Offset
  3592 ;; This function uses a non-reentrant model
  3593 ;;
  3594                           
  3595                           
  3596                           ;psect for function _VIN_config
  3597  01B4                     _VIN_config:	
  3598                           
  3599                           ;bio3.c: 71: unsigned char i,j,out;
  3600                           ;bio3.c: 73: out &= 0b11110111; PORTC = out;;
  3601                           
  3602                           ;incstack = 0
  3603                           ; Regs used in _VIN_config: [wreg+status,2+status,0]
  3604  01B4  30F7               	movlw	247
  3605  01B5  0020               	movlb	0	; select bank0
  3606  01B6  00D2               	movwf	??_VIN_config
  3607  01B7  0852               	movf	??_VIN_config,w
  3608  01B8  05D4               	andwf	VIN_config@out,f
  3609  01B9  0854               	movf	VIN_config@out,w
  3610  01BA  008E               	movwf	14	;volatile
  3611                           
  3612                           ;bio3.c: 76: RA5 = 0;;
  3613                           
  3614                           ;bio3.c: 74: _delay((unsigned long)((5)*(500000/4000000.0)));
  3615  01BB  0020               	movlb	0	; select bank0
  3616  01BC  128C               	bcf	12,5	;volatile
  3617                           
  3618                           ;bio3.c: 79: RA5 = 1;;
  3619                           
  3620                           ;bio3.c: 77: _delay((unsigned long)((5)*(500000/4000000.0)));
  3621  01BD  0020               	movlb	0	; select bank0
  3622  01BE  168C               	bsf	12,5	;volatile
  3623                           
  3624                           ;bio3.c: 81: for(i = 0; i < 16; i++) {
  3625  01BF  01D3               	clrf	VIN_config@i
  3626  01C0  3010               	movlw	16
  3627  01C1  0253               	subwf	VIN_config@i,w
  3628  01C2  1803               	btfsc	3,0
  3629  01C3  29E6               	goto	l2011
  3630  01C4                     l142:	
  3631                           
  3632                           ;bio3.c: 82: if (conf.datas[0] & 0x0001) {
  3633  01C4  1C4C               	btfss	VIN_config@conf,0
  3634  01C5  29C8               	goto	l1993
  3635                           
  3636                           ;bio3.c: 83: out |= 0b00000100; PORTC = out;;
  3637  01C6  1554               	bsf	VIN_config@out,2
  3638  01C7  29CC               	goto	l1995
  3639  01C8                     l1993:	
  3640                           ;bio3.c: 84: } else {
  3641                           
  3642                           
  3643                           ;bio3.c: 85: out &= 0b11111011; PORTC = out;;
  3644  01C8  30FB               	movlw	251
  3645  01C9  00D2               	movwf	??_VIN_config
  3646  01CA  0852               	movf	??_VIN_config,w
  3647  01CB  05D4               	andwf	VIN_config@out,f
  3648  01CC                     l1995:	
  3649  01CC  0854               	movf	VIN_config@out,w
  3650  01CD  008E               	movwf	14	;volatile
  3651                           
  3652                           ;bio3.c: 86: }
  3653                           ;bio3.c: 87: conf.datas[0] >>= 1;
  3654  01CE  3001               	movlw	1
  3655  01CF                     u775:	
  3656  01CF  36CD               	lsrf	VIN_config@conf+1,f
  3657  01D0  0CCC               	rrf	VIN_config@conf,f
  3658  01D1  0B89               	decfsz	9,f
  3659  01D2  29CF               	goto	u775
  3660                           
  3661                           ;bio3.c: 91: out |= 0b00001000; PORTC = out;;
  3662                           
  3663                           ;bio3.c: 89: _delay((unsigned long)((5)*(500000/4000000.0)));
  3664  01D3  0020               	movlb	0	; select bank0
  3665  01D4  15D4               	bsf	VIN_config@out,3
  3666  01D5  0854               	movf	VIN_config@out,w
  3667  01D6  008E               	movwf	14	;volatile
  3668                           
  3669                           ;bio3.c: 93: out &= 0b11110111; PORTC = out;;
  3670                           
  3671                           ;bio3.c: 92: _delay((unsigned long)((5)*(500000/4000000.0)));
  3672  01D7  30F7               	movlw	247
  3673  01D8  0020               	movlb	0	; select bank0
  3674  01D9  00D2               	movwf	??_VIN_config
  3675  01DA  0852               	movf	??_VIN_config,w
  3676  01DB  05D4               	andwf	VIN_config@out,f
  3677  01DC  0854               	movf	VIN_config@out,w
  3678  01DD  008E               	movwf	14	;volatile
  3679  01DE  3001               	movlw	1
  3680  01DF  00D2               	movwf	??_VIN_config
  3681  01E0  0852               	movf	??_VIN_config,w
  3682  01E1  07D3               	addwf	VIN_config@i,f
  3683  01E2  3010               	movlw	16
  3684  01E3  0253               	subwf	VIN_config@i,w
  3685  01E4  1C03               	skipc
  3686  01E5  29C4               	goto	l142
  3687  01E6                     l2011:	
  3688                           
  3689                           ;bio3.c: 94: }
  3690                           ;bio3.c: 96: for(i = 0; i < 16; i++) {
  3691  01E6  01D3               	clrf	VIN_config@i
  3692  01E7  3010               	movlw	16
  3693  01E8  0253               	subwf	VIN_config@i,w
  3694  01E9  1803               	btfsc	3,0
  3695  01EA  2A0D               	goto	l2039
  3696  01EB                     l146:	
  3697                           
  3698                           ;bio3.c: 97: if (conf.datas[1] & 0x0001) {
  3699  01EB  1C4E               	btfss	VIN_config@conf+2,0
  3700  01EC  29EF               	goto	l2021
  3701                           
  3702                           ;bio3.c: 98: out |= 0b00000100; PORTC = out;;
  3703  01ED  1554               	bsf	VIN_config@out,2
  3704  01EE  29F3               	goto	l2023
  3705  01EF                     l2021:	
  3706                           ;bio3.c: 99: } else {
  3707                           
  3708                           
  3709                           ;bio3.c: 100: out &= 0b11111011; PORTC = out;;
  3710  01EF  30FB               	movlw	251
  3711  01F0  00D2               	movwf	??_VIN_config
  3712  01F1  0852               	movf	??_VIN_config,w
  3713  01F2  05D4               	andwf	VIN_config@out,f
  3714  01F3                     l2023:	
  3715  01F3  0854               	movf	VIN_config@out,w
  3716  01F4  008E               	movwf	14	;volatile
  3717                           
  3718                           ;bio3.c: 101: }
  3719                           ;bio3.c: 102: conf.datas[1] >>= 1;
  3720  01F5  3001               	movlw	1
  3721  01F6                     u815:	
  3722  01F6  36CF               	lsrf	VIN_config@conf+3,f
  3723  01F7  0CCE               	rrf	VIN_config@conf+2,f
  3724  01F8  0B89               	decfsz	9,f
  3725  01F9  29F6               	goto	u815
  3726                           
  3727                           ;bio3.c: 106: out |= 0b00001000; PORTC = out;;
  3728                           
  3729                           ;bio3.c: 104: _delay((unsigned long)((5)*(500000/4000000.0)));
  3730  01FA  0020               	movlb	0	; select bank0
  3731  01FB  15D4               	bsf	VIN_config@out,3
  3732  01FC  0854               	movf	VIN_config@out,w
  3733  01FD  008E               	movwf	14	;volatile
  3734                           
  3735                           ;bio3.c: 108: out &= 0b11110111; PORTC = out;;
  3736                           
  3737                           ;bio3.c: 107: _delay((unsigned long)((5)*(500000/4000000.0)));
  3738  01FE  30F7               	movlw	247
  3739  01FF  0020               	movlb	0	; select bank0
  3740  0200  00D2               	movwf	??_VIN_config
  3741  0201  0852               	movf	??_VIN_config,w
  3742  0202  05D4               	andwf	VIN_config@out,f
  3743  0203  0854               	movf	VIN_config@out,w
  3744  0204  008E               	movwf	14	;volatile
  3745  0205  3001               	movlw	1
  3746  0206  00D2               	movwf	??_VIN_config
  3747  0207  0852               	movf	??_VIN_config,w
  3748  0208  07D3               	addwf	VIN_config@i,f
  3749  0209  3010               	movlw	16
  3750  020A  0253               	subwf	VIN_config@i,w
  3751  020B  1C03               	skipc
  3752  020C  29EB               	goto	l146
  3753  020D                     l2039:	
  3754                           
  3755                           ;bio3.c: 109: }
  3756                           ;bio3.c: 111: for(i = 0; i < 1; i++) {
  3757  020D  01D3               	clrf	VIN_config@i
  3758  020E                     L1:	
  3759  020E  0853               	movf	VIN_config@i,w
  3760  020F  1D03               	btfss	3,2
  3761  0210  0008               	return
  3762                           
  3763                           ;bio3.c: 112: if (conf.datas[2] & 0x0001) {
  3764  0211  1C50               	btfss	VIN_config@conf+4,0
  3765  0212  2A15               	goto	l2049
  3766                           
  3767                           ;bio3.c: 113: out |= 0b00000100; PORTC = out;;
  3768  0213  1554               	bsf	VIN_config@out,2
  3769  0214  2A19               	goto	l2051
  3770  0215                     l2049:	
  3771                           ;bio3.c: 114: } else {
  3772                           
  3773                           
  3774                           ;bio3.c: 115: out &= 0b11111011; PORTC = out;;
  3775  0215  30FB               	movlw	251
  3776  0216  00D2               	movwf	??_VIN_config
  3777  0217  0852               	movf	??_VIN_config,w
  3778  0218  05D4               	andwf	VIN_config@out,f
  3779  0219                     l2051:	
  3780  0219  0854               	movf	VIN_config@out,w
  3781  021A  008E               	movwf	14	;volatile
  3782                           
  3783                           ;bio3.c: 116: }
  3784                           ;bio3.c: 117: conf.datas[2] >>= 1;
  3785  021B  3001               	movlw	1
  3786  021C                     u855:	
  3787  021C  36D1               	lsrf	VIN_config@conf+5,f
  3788  021D  0CD0               	rrf	VIN_config@conf+4,f
  3789  021E  0B89               	decfsz	9,f
  3790  021F  2A1C               	goto	u855
  3791                           
  3792                           ;bio3.c: 121: out |= 0b00001000; PORTC = out;;
  3793                           
  3794                           ;bio3.c: 119: _delay((unsigned long)((5)*(500000/4000000.0)));
  3795  0220  0020               	movlb	0	; select bank0
  3796  0221  15D4               	bsf	VIN_config@out,3
  3797  0222  0854               	movf	VIN_config@out,w
  3798  0223  008E               	movwf	14	;volatile
  3799                           
  3800                           ;bio3.c: 123: out &= 0b11110111; PORTC = out;;
  3801                           
  3802                           ;bio3.c: 122: _delay((unsigned long)((5)*(500000/4000000.0)));
  3803  0224  30F7               	movlw	247
  3804  0225  0020               	movlb	0	; select bank0
  3805  0226  00D2               	movwf	??_VIN_config
  3806  0227  0852               	movf	??_VIN_config,w
  3807  0228  05D4               	andwf	VIN_config@out,f
  3808  0229  0854               	movf	VIN_config@out,w
  3809  022A  008E               	movwf	14	;volatile
  3810  022B  3001               	movlw	1
  3811  022C  00D2               	movwf	??_VIN_config
  3812  022D  0852               	movf	??_VIN_config,w
  3813  022E  07D3               	addwf	VIN_config@i,f
  3814  022F  2A0E               	goto	L1
  3815  0230                     __end_of_VIN_config:	
  3816                           
  3817                           	psect	text18
  3818  0467                     __ptext18:	
  3819 ;; *************** function _SYSTEM_Initialize *****************
  3820 ;; Defined at:
  3821 ;;		line 70 in file "mcc_generated_files/mcc.c"
  3822 ;; Parameters:    Size  Location     Type
  3823 ;;		None
  3824 ;; Auto vars:     Size  Location     Type
  3825 ;;		None
  3826 ;; Return value:  Size  Location     Type
  3827 ;;                  1    wreg      void 
  3828 ;; Registers used:
  3829 ;;		wreg, status,2, status,0, pclath, cstack
  3830 ;; Tracked objects:
  3831 ;;		On entry : 0/0
  3832 ;;		On exit  : 0/0
  3833 ;;		Unchanged: 0/0
  3834 ;; Data sizes:     COMMON   BANK0   BANK1
  3835 ;;      Params:         0       0       0
  3836 ;;      Locals:         0       0       0
  3837 ;;      Temps:          0       0       0
  3838 ;;      Totals:         0       0       0
  3839 ;;Total ram usage:        0 bytes
  3840 ;; Hardware stack levels used:    1
  3841 ;; Hardware stack levels required when called:    3
  3842 ;; This function calls:
  3843 ;;		_OSCILLATOR_Initialize
  3844 ;;		_PIN_MANAGER_Initialize
  3845 ;; This function is called by:
  3846 ;;		_main
  3847 ;; This function uses a non-reentrant model
  3848 ;;
  3849                           
  3850                           
  3851                           ;psect for function _SYSTEM_Initialize
  3852  0467                     _SYSTEM_Initialize:	
  3853                           
  3854                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  3855                           
  3856                           ;incstack = 0
  3857                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3858  0467  23EB               	fcall	_PIN_MANAGER_Initialize
  3859                           
  3860                           ;mcc.c: 74: OSCILLATOR_Initialize();
  3861  0468  2458               	fcall	_OSCILLATOR_Initialize
  3862  0469  0008               	return
  3863  046A                     __end_of_SYSTEM_Initialize:	
  3864                           
  3865                           	psect	text19
  3866  03EB                     __ptext19:	
  3867 ;; *************** function _PIN_MANAGER_Initialize *****************
  3868 ;; Defined at:
  3869 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  3870 ;; Parameters:    Size  Location     Type
  3871 ;;		None
  3872 ;; Auto vars:     Size  Location     Type
  3873 ;;		None
  3874 ;; Return value:  Size  Location     Type
  3875 ;;                  1    wreg      void 
  3876 ;; Registers used:
  3877 ;;		wreg, status,2
  3878 ;; Tracked objects:
  3879 ;;		On entry : 0/0
  3880 ;;		On exit  : 0/0
  3881 ;;		Unchanged: 0/0
  3882 ;; Data sizes:     COMMON   BANK0   BANK1
  3883 ;;      Params:         0       0       0
  3884 ;;      Locals:         0       0       0
  3885 ;;      Temps:          0       0       0
  3886 ;;      Totals:         0       0       0
  3887 ;;Total ram usage:        0 bytes
  3888 ;; Hardware stack levels used:    1
  3889 ;; Hardware stack levels required when called:    2
  3890 ;; This function calls:
  3891 ;;		Nothing
  3892 ;; This function is called by:
  3893 ;;		_SYSTEM_Initialize
  3894 ;; This function uses a non-reentrant model
  3895 ;;
  3896                           
  3897                           
  3898                           ;psect for function _PIN_MANAGER_Initialize
  3899  03EB                     _PIN_MANAGER_Initialize:	
  3900                           
  3901                           ;pin_manager.c: 51: LATA = 0x0;
  3902                           
  3903                           ;incstack = 0
  3904                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3905  03EB  0022               	movlb	2	; select bank2
  3906  03EC  018C               	clrf	12	;volatile
  3907                           
  3908                           ;pin_manager.c: 52: LATC = 0x0;
  3909  03ED  018E               	clrf	14	;volatile
  3910                           
  3911                           ;pin_manager.c: 55: ANSELA = 0b00000100;
  3912  03EE  3004               	movlw	4
  3913  03EF  0023               	movlb	3	; select bank3
  3914  03F0  008C               	movwf	12	;volatile
  3915                           
  3916                           ;pin_manager.c: 56: ANSELC = 0b00000011;
  3917  03F1  3003               	movlw	3
  3918  03F2  008E               	movwf	14	;volatile
  3919                           
  3920                           ;pin_manager.c: 59: WPUA = 0x3B;
  3921  03F3  303B               	movlw	59
  3922  03F4  0024               	movlb	4	; select bank4
  3923  03F5  008C               	movwf	12	;volatile
  3924                           
  3925                           ;pin_manager.c: 60: WPUC = 0x3C;
  3926  03F6  303C               	movlw	60
  3927  03F7  008E               	movwf	14	;volatile
  3928                           
  3929                           ;pin_manager.c: 62: RXDTSEL = 0;
  3930  03F8  0022               	movlb	2	; select bank2
  3931  03F9  139D               	bcf	29,7	;volatile
  3932                           
  3933                           ;pin_manager.c: 63: TXCKSEL = 0;
  3934  03FA  111D               	bcf	29,2	;volatile
  3935                           
  3936                           ;pin_manager.c: 66: TRISC = 0b01100011;
  3937  03FB  3063               	movlw	99
  3938  03FC  0021               	movlb	1	; select bank1
  3939  03FD  008E               	movwf	14	;volatile
  3940                           
  3941                           ;pin_manager.c: 67: TRISA = 0b01011111;
  3942  03FE  305F               	movlw	95
  3943  03FF  008C               	movwf	12	;volatile
  3944                           
  3945                           ;pin_manager.c: 69: OPTION_REGbits.nWPUEN = 0x0;
  3946  0400  1395               	bcf	21,7	;volatile
  3947                           
  3948                           ;pin_manager.c: 70: APFCON = 0x00;
  3949  0401  0022               	movlb	2	; select bank2
  3950  0402  019D               	clrf	29	;volatile
  3951  0403  0008               	return
  3952  0404                     __end_of_PIN_MANAGER_Initialize:	
  3953                           
  3954                           	psect	text20
  3955  0458                     __ptext20:	
  3956 ;; *************** function _OSCILLATOR_Initialize *****************
  3957 ;; Defined at:
  3958 ;;		line 78 in file "mcc_generated_files/mcc.c"
  3959 ;; Parameters:    Size  Location     Type
  3960 ;;		None
  3961 ;; Auto vars:     Size  Location     Type
  3962 ;;		None
  3963 ;; Return value:  Size  Location     Type
  3964 ;;                  1    wreg      void 
  3965 ;; Registers used:
  3966 ;;		wreg, status,2
  3967 ;; Tracked objects:
  3968 ;;		On entry : 0/0
  3969 ;;		On exit  : 0/0
  3970 ;;		Unchanged: 0/0
  3971 ;; Data sizes:     COMMON   BANK0   BANK1
  3972 ;;      Params:         0       0       0
  3973 ;;      Locals:         0       0       0
  3974 ;;      Temps:          0       0       0
  3975 ;;      Totals:         0       0       0
  3976 ;;Total ram usage:        0 bytes
  3977 ;; Hardware stack levels used:    1
  3978 ;; Hardware stack levels required when called:    2
  3979 ;; This function calls:
  3980 ;;		Nothing
  3981 ;; This function is called by:
  3982 ;;		_SYSTEM_Initialize
  3983 ;; This function uses a non-reentrant model
  3984 ;;
  3985                           
  3986                           
  3987                           ;psect for function _OSCILLATOR_Initialize
  3988  0458                     _OSCILLATOR_Initialize:	
  3989                           
  3990                           ;mcc.c: 81: OSCCON = 0x3A;
  3991                           
  3992                           ;incstack = 0
  3993                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3994  0458  303A               	movlw	58
  3995  0459  0021               	movlb	1	; select bank1
  3996  045A  0099               	movwf	25	;volatile
  3997                           
  3998                           ;mcc.c: 83: OSCSTAT = 0x00;
  3999  045B  019A               	clrf	26	;volatile
  4000                           
  4001                           ;mcc.c: 85: OSCTUNE = 0x00;
  4002  045C  0198               	clrf	24	;volatile
  4003  045D  0008               	return
  4004  045E                     __end_of_OSCILLATOR_Initialize:	
  4005                           
  4006                           	psect	intentry
  4007  0004                     __pintentry:	
  4008 ;; *************** function _isr *****************
  4009 ;; Defined at:
  4010 ;;		line 65 in file "main.c"
  4011 ;; Parameters:    Size  Location     Type
  4012 ;;		None
  4013 ;; Auto vars:     Size  Location     Type
  4014 ;;		None
  4015 ;; Return value:  Size  Location     Type
  4016 ;;                  1    wreg      void 
  4017 ;; Registers used:
  4018 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4019 ;; Tracked objects:
  4020 ;;		On entry : 0/0
  4021 ;;		On exit  : 0/0
  4022 ;;		Unchanged: 0/0
  4023 ;; Data sizes:     COMMON   BANK0   BANK1
  4024 ;;      Params:         0       0       0
  4025 ;;      Locals:         0       0       0
  4026 ;;      Temps:          2       0       0
  4027 ;;      Totals:         2       0       0
  4028 ;;Total ram usage:        2 bytes
  4029 ;; Hardware stack levels used:    1
  4030 ;; Hardware stack levels required when called:    1
  4031 ;; This function calls:
  4032 ;;		_start_TMR0_ISR
  4033 ;;		_stop_TMR0_ISR
  4034 ;;		i1_start_RX_USART_ISR
  4035 ;; This function is called by:
  4036 ;;		Interrupt level 1
  4037 ;; This function uses a non-reentrant model
  4038 ;;
  4039                           
  4040  0004                     _isr:	
  4041                           
  4042                           ;incstack = 0
  4043  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4044                           
  4045                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4046  0005  3180               	pagesel	$
  4047  0006  0020               	movlb	0	; select bank0
  4048  0007  087F               	movf	127,w
  4049  0008  00F9               	movwf	??_isr+1
  4050                           
  4051                           ;main.c: 69: if (TMR0IF && TMR0IE) {
  4052  0009  190B               	btfsc	11,2	;volatile
  4053  000A  1E8B               	btfss	11,5	;volatile
  4054  000B  2815               	goto	i1l120
  4055                           
  4056                           ;main.c: 71: TMR0IF = 0;
  4057  000C  110B               	bcf	11,2	;volatile
  4058                           
  4059                           ;main.c: 72: TMR0 = TIMER0_timeout;
  4060  000D  0870               	movf	_TIMER0_timeout,w	;volatile
  4061  000E  0095               	movwf	21	;volatile
  4062                           
  4063                           ;main.c: 75: TIMER0_flag = 1;
  4064  000F  3001               	movlw	1
  4065  0010  00F8               	movwf	??_isr
  4066  0011  0878               	movf	??_isr,w
  4067  0012  00BE               	movwf	_TIMER0_flag	;volatile
  4068                           
  4069                           ;main.c: 80: stop_TMR0_ISR();
  4070  0013  246A               	fcall	_stop_TMR0_ISR
  4071                           
  4072                           ;main.c: 82: return;
  4073  0014  2850               	goto	i1l121
  4074  0015                     i1l120:	
  4075                           
  4076                           ;main.c: 83: }
  4077                           ;main.c: 87: if (RCIF) {
  4078  0015  1E91               	btfss	17,5	;volatile
  4079  0016  2834               	goto	i1l122
  4080                           
  4081                           ;main.c: 88: stop_TMR0_ISR();
  4082  0017  246A               	fcall	_stop_TMR0_ISR
  4083                           
  4084                           ;main.c: 91: if (OERR) {
  4085  0018  0023               	movlb	3	; select bank3
  4086  0019  1C9D               	btfss	29,1	;volatile
  4087  001A  281E               	goto	i1l1939
  4088                           
  4089                           ;main.c: 93: CREN = 0;
  4090  001B  121D               	bcf	29,4	;volatile
  4091                           
  4092                           ;main.c: 94: CREN = 1;
  4093  001C  161D               	bsf	29,4	;volatile
  4094                           
  4095                           ;main.c: 95: return;
  4096  001D  2850               	goto	i1l121
  4097  001E                     i1l1939:	
  4098                           
  4099                           ;main.c: 96: }
  4100                           ;main.c: 99: if (USART_rx_index >= 15) {
  4101  001E  300F               	movlw	15
  4102  001F  0020               	movlb	0	; select bank0
  4103  0020  0240               	subwf	_USART_rx_index,w	;volatile
  4104  0021  1803               	btfsc	3,0
  4105                           
  4106                           ;main.c: 100: USART_rx_index = 0;
  4107  0022  01C0               	clrf	_USART_rx_index	;volatile
  4108                           
  4109                           ;main.c: 101: }
  4110                           ;main.c: 103: USART_rx_data[USART_rx_index++] = RCREG;
  4111  0023  0023               	movlb	3	; select bank3
  4112  0024  0819               	movf	25,w	;volatile
  4113  0025  00F8               	movwf	??_isr
  4114  0026  0020               	movlb	0	; select bank0
  4115  0027  0840               	movf	_USART_rx_index,w
  4116  0028  3E20               	addlw	(low (_USART_rx_data| 0))& (0+255)
  4117  0029  0086               	movwf	6
  4118  002A  0187               	clrf	7
  4119  002B  0878               	movf	??_isr,w
  4120  002C  0081               	movwf	1
  4121  002D  3001               	movlw	1
  4122  002E  00F8               	movwf	??_isr
  4123  002F  0878               	movf	??_isr,w
  4124  0030  07C0               	addwf	_USART_rx_index,f	;volatile
  4125                           
  4126                           ;main.c: 105: start_TMR0_ISR(98);
  4127  0031  3062               	movlw	98
  4128  0032  2426               	fcall	_start_TMR0_ISR
  4129                           
  4130                           ;main.c: 107: return;
  4131  0033  2850               	goto	i1l121
  4132  0034                     i1l122:	
  4133                           
  4134                           ;main.c: 108: }
  4135                           ;main.c: 112: if (TXIF && TXIE) {
  4136  0034  1E11               	btfss	17,4	;volatile
  4137  0035  2850               	goto	i1l121
  4138  0036  0021               	movlb	1	; select bank1
  4139  0037  1E11               	btfss	17,4	;volatile
  4140  0038  2850               	goto	i1l121
  4141                           
  4142                           ;main.c: 114: TXREG = USART_tx_data[USART_tx_index++];
  4143  0039  0873               	movf	_USART_tx_index,w
  4144  003A  3E2F               	addlw	(low (_USART_tx_data| 0))& (0+255)
  4145  003B  0086               	movwf	6
  4146  003C  0187               	clrf	7
  4147  003D  0801               	movf	1,w
  4148  003E  0023               	movlb	3	; select bank3
  4149  003F  009A               	movwf	26	;volatile
  4150  0040  3001               	movlw	1
  4151  0041  00F8               	movwf	??_isr
  4152  0042  0878               	movf	??_isr,w
  4153  0043  07F3               	addwf	_USART_tx_index,f	;volatile
  4154                           
  4155                           ;main.c: 116: if (USART_tx_index >= USART_tx_length) {
  4156  0044  0874               	movf	_USART_tx_length,w	;volatile
  4157  0045  0273               	subwf	_USART_tx_index,w	;volatile
  4158  0046  1C03               	skipc
  4159  0047  2850               	goto	i1l121
  4160                           
  4161                           ;main.c: 117: TXIE = 0;
  4162  0048  0021               	movlb	1	; select bank1
  4163  0049  1211               	bcf	17,4	;volatile
  4164                           
  4165                           ;main.c: 118: USART_tx_flag = 0;
  4166  004A  01F2               	clrf	_USART_tx_flag	;volatile
  4167                           
  4168                           ;main.c: 121: _delay((unsigned long)((2)*(500000/4000.0)));
  4169  004B  3053               	movlw	83
  4170  004C                     u106_27:	
  4171  004C  0B89               	decfsz	9,f
  4172  004D  284C               	goto	u106_27
  4173  004E  0000               	nop
  4174                           
  4175                           ;main.c: 122: start_RX_USART_ISR();
  4176  004F  2415               	fcall	i1_start_RX_USART_ISR
  4177  0050                     i1l121:	
  4178                           ;main.c: 123: }
  4179                           ;main.c: 124: return;
  4180                           
  4181  0050  0879               	movf	??_isr+1,w
  4182  0051  0020               	movlb	0	; select bank0
  4183  0052  00FF               	movwf	127
  4184  0053  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4185  0054  0009               	retfie
  4186  0055                     __end_of_isr:	
  4187                           
  4188                           	psect	text22
  4189  0415                     __ptext22:	
  4190 ;; *************** function i1_start_RX_USART_ISR *****************
  4191 ;; Defined at:
  4192 ;;		line 82 in file "USART1823.c"
  4193 ;; Parameters:    Size  Location     Type
  4194 ;;		None
  4195 ;; Auto vars:     Size  Location     Type
  4196 ;;		None
  4197 ;; Return value:  Size  Location     Type
  4198 ;;                  1    wreg      void 
  4199 ;; Registers used:
  4200 ;;		wreg, status,2
  4201 ;; Tracked objects:
  4202 ;;		On entry : 0/0
  4203 ;;		On exit  : 0/0
  4204 ;;		Unchanged: 0/0
  4205 ;; Data sizes:     COMMON   BANK0   BANK1
  4206 ;;      Params:         0       0       0
  4207 ;;      Locals:         0       0       0
  4208 ;;      Temps:          0       0       0
  4209 ;;      Totals:         0       0       0
  4210 ;;Total ram usage:        0 bytes
  4211 ;; Hardware stack levels used:    1
  4212 ;; This function calls:
  4213 ;;		Nothing
  4214 ;; This function is called by:
  4215 ;;		_isr
  4216 ;; This function uses a non-reentrant model
  4217 ;;
  4218                           
  4219                           
  4220                           ;psect for function i1_start_RX_USART_ISR
  4221  0415                     i1_start_RX_USART_ISR:	
  4222                           
  4223                           ;USART1823.c: 85: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  4224                           
  4225                           ;incstack = 0
  4226                           ; Regs used in i1_start_RX_USART_ISR: [wreg+status,2]
  4227  0415  0023               	movlb	3	; select bank3
  4228  0416  151E               	bsf	30,2	;volatile
  4229  0417  159F               	bsf	31,3	;volatile
  4230  0418  019C               	clrf	28	;volatile
  4231  0419  300C               	movlw	12
  4232  041A  009B               	movwf	27	;volatile
  4233                           
  4234                           ;USART1823.c: 87: SYNC = 0;
  4235  041B  121E               	bcf	30,4	;volatile
  4236                           
  4237                           ;USART1823.c: 88: SPEN = 1;
  4238  041C  179D               	bsf	29,7	;volatile
  4239                           
  4240                           ;USART1823.c: 89: CREN = 1;
  4241  041D  161D               	bsf	29,4	;volatile
  4242                           
  4243                           ;USART1823.c: 91: USART_rx_flag = 0;
  4244  041E  0020               	movlb	0	; select bank0
  4245  041F  01BF               	clrf	_USART_rx_flag	;volatile
  4246                           
  4247                           ;USART1823.c: 92: USART_rx_index = 0;
  4248  0420  01C0               	clrf	_USART_rx_index	;volatile
  4249                           
  4250                           ;USART1823.c: 94: RCIE = 1;
  4251  0421  0021               	movlb	1	; select bank1
  4252  0422  1691               	bsf	17,5	;volatile
  4253                           
  4254                           ;USART1823.c: 95: PEIE = 1;
  4255  0423  170B               	bsf	11,6	;volatile
  4256                           
  4257                           ;USART1823.c: 96: GIE = 1;
  4258  0424  178B               	bsf	11,7	;volatile
  4259  0425  0008               	return
  4260  0426                     __end_ofi1_start_RX_USART_ISR:	
  4261                           
  4262                           	psect	text23
  4263  046A                     __ptext23:	
  4264 ;; *************** function _stop_TMR0_ISR *****************
  4265 ;; Defined at:
  4266 ;;		line 44 in file "TMR0.c"
  4267 ;; Parameters:    Size  Location     Type
  4268 ;;		None
  4269 ;; Auto vars:     Size  Location     Type
  4270 ;;		None
  4271 ;; Return value:  Size  Location     Type
  4272 ;;                  1    wreg      void 
  4273 ;; Registers used:
  4274 ;;		None
  4275 ;; Tracked objects:
  4276 ;;		On entry : 0/0
  4277 ;;		On exit  : 0/0
  4278 ;;		Unchanged: 0/0
  4279 ;; Data sizes:     COMMON   BANK0   BANK1
  4280 ;;      Params:         0       0       0
  4281 ;;      Locals:         0       0       0
  4282 ;;      Temps:          0       0       0
  4283 ;;      Totals:         0       0       0
  4284 ;;Total ram usage:        0 bytes
  4285 ;; Hardware stack levels used:    1
  4286 ;; This function calls:
  4287 ;;		Nothing
  4288 ;; This function is called by:
  4289 ;;		_isr
  4290 ;; This function uses a non-reentrant model
  4291 ;;
  4292                           
  4293                           
  4294                           ;psect for function _stop_TMR0_ISR
  4295  046A                     _stop_TMR0_ISR:	
  4296                           
  4297                           ;TMR0.c: 47: TMR0IE = 0;
  4298                           
  4299                           ;incstack = 0
  4300                           ; Regs used in _stop_TMR0_ISR: []
  4301  046A  128B               	bcf	11,5	;volatile
  4302                           
  4303                           ;TMR0.c: 48: TMR0IF = 0;
  4304  046B  110B               	bcf	11,2	;volatile
  4305  046C  0008               	return
  4306  046D                     __end_of_stop_TMR0_ISR:	
  4307                           
  4308                           	psect	text24
  4309  0426                     __ptext24:	
  4310 ;; *************** function _start_TMR0_ISR *****************
  4311 ;; Defined at:
  4312 ;;		line 30 in file "TMR0.c"
  4313 ;; Parameters:    Size  Location     Type
  4314 ;;  val             1    wreg     unsigned char 
  4315 ;; Auto vars:     Size  Location     Type
  4316 ;;  val             1    2[COMMON] unsigned char 
  4317 ;; Return value:  Size  Location     Type
  4318 ;;                  1    wreg      void 
  4319 ;; Registers used:
  4320 ;;		wreg, status,2
  4321 ;; Tracked objects:
  4322 ;;		On entry : 0/0
  4323 ;;		On exit  : 0/0
  4324 ;;		Unchanged: 0/0
  4325 ;; Data sizes:     COMMON   BANK0   BANK1
  4326 ;;      Params:         0       0       0
  4327 ;;      Locals:         1       0       0
  4328 ;;      Temps:          2       0       0
  4329 ;;      Totals:         3       0       0
  4330 ;;Total ram usage:        3 bytes
  4331 ;; Hardware stack levels used:    1
  4332 ;; This function calls:
  4333 ;;		Nothing
  4334 ;; This function is called by:
  4335 ;;		_isr
  4336 ;; This function uses a non-reentrant model
  4337 ;;
  4338                           
  4339                           
  4340                           ;psect for function _start_TMR0_ISR
  4341  0426                     _start_TMR0_ISR:	
  4342                           
  4343                           ;incstack = 0
  4344                           ; Regs used in _start_TMR0_ISR: [wreg+status,2]
  4345                           ;start_TMR0_ISR@val stored from wreg
  4346  0426  00F7               	movwf	start_TMR0_ISR@val
  4347                           
  4348                           ;TMR0.c: 32: TIMER0_timeout = val;
  4349  0427  0877               	movf	start_TMR0_ISR@val,w
  4350  0428  00F5               	movwf	??_start_TMR0_ISR
  4351  0429  01F6               	clrf	??_start_TMR0_ISR+1
  4352  042A  0875               	movf	??_start_TMR0_ISR,w
  4353  042B  00F0               	movwf	_TIMER0_timeout	;volatile
  4354  042C  0876               	movf	??_start_TMR0_ISR+1,w
  4355  042D  00F1               	movwf	_TIMER0_timeout+1	;volatile
  4356                           
  4357                           ;TMR0.c: 33: TIMER0_flag = 0;
  4358  042E  0020               	movlb	0	; select bank0
  4359  042F  01BE               	clrf	_TIMER0_flag	;volatile
  4360                           
  4361                           ;TMR0.c: 36: TMR0 = TIMER0_timeout;
  4362  0430  0870               	movf	_TIMER0_timeout,w	;volatile
  4363  0431  0095               	movwf	21	;volatile
  4364                           
  4365                           ;TMR0.c: 39: TMR0IF = 0;
  4366  0432  110B               	bcf	11,2	;volatile
  4367                           
  4368                           ;TMR0.c: 40: TMR0IE = 1;
  4369  0433  168B               	bsf	11,5	;volatile
  4370                           
  4371                           ;TMR0.c: 41: GIE = 1;
  4372  0434  178B               	bsf	11,7	;volatile
  4373  0435  0008               	return
  4374  0436                     __end_of_start_TMR0_ISR:	
  4375  007E                     btemp	set	126	;btemp
  4376  007E                     int$flags	set	126
  4377  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         49
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     36      80
    BANK1            32      0       0

Pointer List with Targets:

    lputs_ISR@data	PTR unsigned char  size(1) Largest target is 13
		 -> measure_Offset@aux(BANK0[5]), measure_Impedance_no_offset@aux(BANK0[13]), measure_Impedance@aux(BANK0[13]), read_ADC_channels@aux(BANK0[7]), 
		 -> mess_rec(BANK0[10]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_start_TMR0_ISR

Critical Paths under _main in BANK0

    _main->_mess_handler
    _mess_handler->_measure_Impedance
    _mess_handler->_measure_Impedance_no_offset
    _read_ADC_channels->_ADC_2
    _read_ADC_channels->_ADC_4
    _read_ADC_channels->_ADC_5
    _measure_Offset->_VIN_config
    _measure_Impedance_no_offset->_VIN_config
    _measure_Impedance->_VIN_config
    _config_ASIC->_VIN_config

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   14217
                                             34 BANK0      2     2      0
                  _SYSTEM_Initialize
                       _mess_handler
                          _setup_ADC
                         _setup_TMR0
                          _start_RCM
                 _start_RX_USART_ISR
                 _start_TX_USART_ISR
 ---------------------------------------------------------------------------------
 (1) _start_TX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RCM                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_TMR0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_ADC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _mess_handler                                         1     1      0   14118
                                             33 BANK0      1     1      0
                        _config_ASIC
                          _lputs_ISR
                  _measure_Impedance
        _measure_Impedance_no_offset
                     _measure_Offset
                  _read_ADC_channels
 ---------------------------------------------------------------------------------
 (2) _read_ADC_channels                                   14    14      0    1426
                                              6 BANK0     14    14      0
                              _ADC_2
                              _ADC_4
                              _ADC_5
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (3) _ADC_5                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _measure_Offset                                      16    16      0    2793
                                              9 BANK0     16    16      0
                              _ADC_2
                              _ADC_4
                         _VIN_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (2) _measure_Impedance_no_offset                         26    26      0    3170
                                              9 BANK0     24    24      0
                              _ADC_2
                              _ADC_4
                         _VIN_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (2) _measure_Impedance                                   26    26      0    3482
                                              9 BANK0     24    24      0
                              _ADC_2
                              _ADC_4
                         _VIN_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (3) _ADC_4                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _ADC_2                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _config_ASIC                                          7     7      0    2395
                                              9 BANK0      7     7      0
                         _VIN_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (3) _lputs_ISR                                            5     4      1     852
                                              0 BANK0      5     4      1
                     _close_RX_USART
 ---------------------------------------------------------------------------------
 (4) _close_RX_USART                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _VIN_config                                          10     4      6    1361
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  2     2      0      22
                                              3 COMMON     2     2      0
                     _start_TMR0_ISR
                      _stop_TMR0_ISR
               i1_start_RX_USART_ISR
 ---------------------------------------------------------------------------------
 (6) i1_start_RX_USART_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _stop_TMR0_ISR                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _start_TMR0_ISR                                       3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _mess_handler
     _config_ASIC
       _VIN_config
       _lputs_ISR
         _close_RX_USART
     _lputs_ISR
       _close_RX_USART
     _measure_Impedance
       _ADC_2
       _ADC_4
       _VIN_config
       _lputs_ISR
         _close_RX_USART
     _measure_Impedance_no_offset
       _ADC_2
       _ADC_4
       _VIN_config
       _lputs_ISR
         _close_RX_USART
     _measure_Offset
       _ADC_2
       _ADC_4
       _VIN_config
       _lputs_ISR
         _close_RX_USART
     _read_ADC_channels
       _ADC_2
       _ADC_4
       _ADC_5
       _lputs_ISR
         _close_RX_USART
   _setup_ADC
   _setup_TMR0
   _start_RCM
   _start_RX_USART_ISR
   _start_TX_USART_ISR

 _isr (ROOT)
   _start_TMR0_ISR
   _stop_TMR0_ISR
   i1_start_RX_USART_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      5A       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     24      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      5A       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Mar  6 08:13:10 2017

                         __CFG_CP$OFF 0000                         _USART_rx_data 0020  
                       _USART_rx_flag 003F                         _USART_tx_data 002F  
                       _USART_tx_flag 0072                            _VIN_config 01B4  
                                 l108 0299                                   l142 01C4  
                                 l146 01EB                                   l331 0381  
                                 l370 03AB                                   l364 03CE  
                                 l376 0388                                   _GIE 005F  
                                 _RA5 0065                                   _PS0 04A8  
                                 _PS1 04A9                                   _PS2 04AA  
                        __CFG_CPD$OFF 0000                                   u815 01F6  
                                 _PSA 04AB                                   u905 03D9  
                                 u925 03B6                                   u855 021C  
                                 u775 01CF                                   u945 0393  
                                 u997 0292                                   _isr 0004  
                        __CFG_BORV$HI 0000                                   wreg 0009  
                        __CFG_IESO$ON 0000                        _USART_rx_index 0040  
                        __CFG_LVP$OFF 0000                        _USART_tx_index 0073  
                                l2011 01E6                                  l2021 01EF  
                                l2023 01F3                                  l2051 0219  
                                l2039 020D                                  l2049 0215  
                                l2075 0334                                  l2077 034B  
                                l2341 0364                                  l2343 0366  
                                l2351 036C                                  l2345 0368  
                                l2337 035A                                  l2347 036A  
                                l2339 0362                                  l2391 02C2  
                                l2377 02A5                                  l2389 02AD  
                                l1993 01C8                                  l1995 01CC  
                                ?_isr 0075                                  _ADGO 04E9  
                        __CFG_WDTE$ON 0000                                  _BRGH 0CF2  
                                _CREN 0CEC                                  u1007 0260  
                                u1017 0158                                  u1027 018E  
                                u1037 0094                                  u1047 00CB  
                                u1057 0101                                  _LATA 010C  
                                _LATC 010E                                  _PEIE 005E  
                                _RCIE 048D                                  _RCIF 008D  
                                _OERR 0CE9                                  _TMR0 0015  
                                _SPEN 0CEF                                  _TXIE 048C  
                                _TXEN 0CF5                                  _TXIF 008C  
                                _SYNC 0CF4                                  _WPUA 020C  
                                _WPUC 020E                __size_of_stop_TMR0_ISR 0003  
                   _read_ADC_channels 02C4                          __CFG_WRT$OFF 0000  
                                _main 0286                                  fsr0h 0005  
                                fsr1h 0007                                  indf0 0000  
                                fsr0l 0004                                  indf1 0001  
                                fsr1l 0006                                  btemp 007E  
                  ?_read_ADC_channels 0075                                  start 0055  
                       __CFG_MCLRE$ON 0000                   ??_read_ADC_channels 0052  
                               ??_isr 0078        __size_of_OSCILLATOR_Initialize 0006  
                     _USART_tx_length 0074         __end_of_OSCILLATOR_Initialize 045E  
                               ?_main 0075                                 _ADC_2 03C8  
                               _ADC_4 03A5                                 _ADC_5 0382  
                               _BRG16 0CFB                                 i1l120 0015  
                               i1l121 0050                                 i1l122 0034  
                               _RCREG 0199                                 _PORTC 000E  
                               _TRISA 008C                        _start_TMR0_ISR 0426  
                               _TRISC 008E                                 _TXREG 019A  
                      __CFG_FCMEN$OFF 0000             __end_of_read_ADC_channels 02FD  
        ?_measure_Impedance_no_offset 0075                                 main@i 006F  
       __size_ofi1_start_RX_USART_ISR 0011                        __CFG_BOREN$OFF 0000  
                               status 0003                                 wtemp0 007E  
                     __initialization 0056                          __end_of_main 02C4  
                       _stop_TMR0_ISR 046A                      ??_close_RX_USART 004C  
              __end_of_start_TMR0_ISR 0436                                ??_main 006E  
                              ?_ADC_2 004C                                ?_ADC_4 004C  
                              ?_ADC_5 004C                           ?_VIN_config 004C  
                      _TIMER0_timeout 0070                        __CFG_PLLEN$OFF 0000  
                              _ADCON0 009D                                _ADCON1 009E  
                              _ADRESH 009C                                _ADRESL 009B  
                              _APFCON 011D                                _ANSELA 018C  
                              _ANSELC 018E                                u106_27 004C  
                              i1l1939 001E                        VIN_config@conf 004C  
                              _OSCCON 0099         ??_measure_Impedance_no_offset 0055  
                              _TMR0IE 005D                                _TMR0IF 005A  
                              _TMR0CS 04AD                                _SPBRGH 019C  
                              _SPBRGL 019B                        __CFG_PWRTE$OFF 0000  
                __size_of_config_ASIC 0031                       config_ASIC@asic 0056  
                      __CFG_STVREN$ON 0000                        ?_stop_TMR0_ISR 0075  
                     ?_start_TMR0_ISR 0075                  measure_Impedance@aux 0056  
         __size_of_start_RX_USART_ISR 0011            __size_of_read_ADC_channels 0039  
                       ?_mess_handler 0075               __size_of_measure_Offset 0056  
                   _SYSTEM_Initialize 0467               __end_of__initialization 0061  
                       __end_of_ADC_2 03EB                         __end_of_ADC_4 03C8  
                  ?_SYSTEM_Initialize 0075                         __end_of_ADC_5 03A5  
                 __size_of_VIN_config 007C                        __pcstackCOMMON 0075  
                 ??_SYSTEM_Initialize 004C  __size_of_measure_Impedance_no_offset 008D  
                             ??_ADC_2 004E                               ??_ADC_4 004E  
                             ??_ADC_5 004E                        _OPTION_REGbits 0095  
         __size_of_start_TX_USART_ISR 000F                        ??_mess_handler 006D  
           __end_of_SYSTEM_Initialize 046A                            __pbssBANK0 0020  
                          __pmaintext 0286                       ??_stop_TMR0_ISR 0075  
                read_ADC_channels@aux 0053                            __pintentry 0004  
                measure_Offset@value1 005B                  measure_Offset@value2 005D  
                             _CLKRCON 039A                    __size_of_lputs_ISR 002B  
                     lputs_ISR@length 004C                    __size_of_setup_ADC 0006  
                             _OSCSTAT 009A                               _OSCTUNE 0098  
                  __size_of_start_RCM 0004                               _RXDTSEL 08EF  
                             _TXCKSEL 08EA          __end_ofi1_start_RX_USART_ISR 0426  
                   measure_Offset@aux 0056                          ??_VIN_config 0052  
                             __ptext1 0436                               __ptext2 0404  
                             __ptext3 0463                               __ptext4 0445  
                             __ptext5 0452                               __ptext6 0359  
                             __ptext7 02C4                               __ptext8 0382  
                             __ptext9 0230                 _OSCILLATOR_Initialize 0458  
                        __size_of_isr 0051              ??_PIN_MANAGER_Initialize 004C  
          __size_of_SYSTEM_Initialize 0003                               clrloop0 044D  
                       _mess_rec_size 0041                  end_of_initialization 0061  
                      _measure_Offset 0230                 measure_Impedance@asic 0067  
                   __end_of_lputs_ISR 0359                     __end_of_setup_ADC 0458  
                  __end_of_VIN_config 0230                      ??_start_TMR0_ISR 0075  
                   __end_of_start_RCM 0467                  __end_of_mess_handler 0382  
                          _setup_TMR0 0445                      __CFG_FOSC$INTOSC 0000  
              __end_of_measure_Offset 0286                         ??_config_ASIC 0055  
                   _measure_Impedance 0064                    ?_measure_Impedance 0075  
                      ADC_2@ADC_value 0050            __end_of_start_RX_USART_ISR 0415  
              ?_OSCILLATOR_Initialize 0075     measure_Impedance_no_offset@value1 0063  
   measure_Impedance_no_offset@value2 0065                   start_initialization 0056  
                 ??_measure_Impedance 0055       __size_of_PIN_MANAGER_Initialize 0019  
                         __end_of_isr 0055                       ?_measure_Offset 0075  
 __end_of_measure_Impedance_no_offset 01B4           _measure_Impedance_no_offset 0127  
             __size_of_close_RX_USART 0005                  i1_start_RX_USART_ISR 0415  
                      ADC_4@ADC_value 0050                         VIN_config@out 0054  
           __end_of_measure_Impedance 0127                        ADC_5@ADC_value 0050  
                 __end_of_config_ASIC 032E                           ?_setup_TMR0 0075  
          __end_of_start_TX_USART_ISR 0445                           __pbssCOMMON 0070  
                           ___latbits 0000                         __pcstackBANK0 004C  
     measure_Impedance_no_offset@asic 0067                 ?i1_start_RX_USART_ISR 0075  
                         VIN_config@i 0053                 __size_of_mess_handler 0029  
              _PIN_MANAGER_Initialize 03EB                 __end_of_stop_TMR0_ISR 046D  
                      __size_of_ADC_2 0023                        __size_of_ADC_4 0023  
                      __size_of_ADC_5 0023               read_ADC_channels@value1 005A  
             read_ADC_channels@value2 005C               read_ADC_channels@value3 005E  
                        _mess_handler 0359                   __size_of_setup_TMR0 0007  
                         _config_ASIC 02FD                             clear_ram0 044C  
                          lputs_ISR@i 0050            __size_of_measure_Impedance 00C3  
                           _lputs_ISR 032E                             _setup_ADC 0452  
                           _start_RCM 0463                ??i1_start_RX_USART_ISR 0075  
                      _close_RX_USART 045E               measure_Impedance@value1 0063  
             measure_Impedance@value2 0065                            ?_lputs_ISR 004C  
                          ?_setup_ADC 0075               ??_OSCILLATOR_Initialize 004C  
                   start_TMR0_ISR@val 0077                            ?_start_RCM 0075  
      measure_Impedance_no_offset@aux 0056                      ??_measure_Offset 0055  
              __end_of_close_RX_USART 0463                    measure_Offset@asic 005F  
                            __ptext10 0127                              __ptext11 0064  
                            __ptext20 0458                              __ptext12 03A5  
                            __ptext13 03C8                              __ptext22 0415  
                            __ptext14 02FD                              __ptext23 046A  
                            __ptext15 032E                              __ptext24 0426  
                            __ptext16 045E                              __ptext17 01B4  
                            __ptext18 0467                              __ptext19 03EB  
                       lputs_ISR@data 004F                    _start_RX_USART_ISR 0404  
                       __size_of_main 003E                              _mess_rec 0042  
                 ?_start_RX_USART_ISR 0075                              int$flags 007E  
                        ??_setup_TMR0 004C                           _TIMER0_flag 003E  
                ??_start_RX_USART_ISR 004C               __size_of_start_TMR0_ISR 0010  
                     ?_close_RX_USART 0075                              intlevel1 0000  
                  _start_TX_USART_ISR 0436               ?_PIN_MANAGER_Initialize 0075  
                   __CFG_CLKOUTEN$OFF 0000                    __end_of_setup_TMR0 044C  
                 ?_start_TX_USART_ISR 0075                           ??_lputs_ISR 004D  
                         ??_setup_ADC 004C                           ??_start_RCM 004C  
                ??_start_TX_USART_ISR 004C        __end_of_PIN_MANAGER_Initialize 0404  
                        ?_config_ASIC 0075  
