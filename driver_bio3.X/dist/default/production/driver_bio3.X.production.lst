

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Apr  3 09:40:26 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16LF1823
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	intentry,global,class=CODE,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2
    45                           	dabs	1,0x7E,2
    46  0000                     
    47                           ; Version 1.40
    48                           ; Generated 01/12/2016 GMT
    49                           ; 
    50                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC16LF1823 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     	;# 
    82  0001                     	;# 
    83  0002                     	;# 
    84  0003                     	;# 
    85  0004                     	;# 
    86  0005                     	;# 
    87  0006                     	;# 
    88  0007                     	;# 
    89  0008                     	;# 
    90  0009                     	;# 
    91  000A                     	;# 
    92  000B                     	;# 
    93  000C                     	;# 
    94  000E                     	;# 
    95  0011                     	;# 
    96  0012                     	;# 
    97  0015                     	;# 
    98  0016                     	;# 
    99  0016                     	;# 
   100  0017                     	;# 
   101  0018                     	;# 
   102  0019                     	;# 
   103  001A                     	;# 
   104  001B                     	;# 
   105  001C                     	;# 
   106  001E                     	;# 
   107  001F                     	;# 
   108  008C                     	;# 
   109  008E                     	;# 
   110  0091                     	;# 
   111  0092                     	;# 
   112  0095                     	;# 
   113  0096                     	;# 
   114  0097                     	;# 
   115  0098                     	;# 
   116  0099                     	;# 
   117  009A                     	;# 
   118  009B                     	;# 
   119  009B                     	;# 
   120  009C                     	;# 
   121  009D                     	;# 
   122  009E                     	;# 
   123  010C                     	;# 
   124  010E                     	;# 
   125  0111                     	;# 
   126  0112                     	;# 
   127  0113                     	;# 
   128  0114                     	;# 
   129  0115                     	;# 
   130  0116                     	;# 
   131  0117                     	;# 
   132  0118                     	;# 
   133  0119                     	;# 
   134  011A                     	;# 
   135  011B                     	;# 
   136  011D                     	;# 
   137  011D                     	;# 
   138  018C                     	;# 
   139  018E                     	;# 
   140  0191                     	;# 
   141  0191                     	;# 
   142  0192                     	;# 
   143  0193                     	;# 
   144  0193                     	;# 
   145  0193                     	;# 
   146  0194                     	;# 
   147  0195                     	;# 
   148  0196                     	;# 
   149  0199                     	;# 
   150  019A                     	;# 
   151  019B                     	;# 
   152  019B                     	;# 
   153  019B                     	;# 
   154  019B                     	;# 
   155  019C                     	;# 
   156  019C                     	;# 
   157  019D                     	;# 
   158  019E                     	;# 
   159  019F                     	;# 
   160  020C                     	;# 
   161  020E                     	;# 
   162  0211                     	;# 
   163  0211                     	;# 
   164  0212                     	;# 
   165  0212                     	;# 
   166  0213                     	;# 
   167  0213                     	;# 
   168  0214                     	;# 
   169  0214                     	;# 
   170  0215                     	;# 
   171  0215                     	;# 
   172  0215                     	;# 
   173  0216                     	;# 
   174  0216                     	;# 
   175  0217                     	;# 
   176  0217                     	;# 
   177  0291                     	;# 
   178  0291                     	;# 
   179  0292                     	;# 
   180  0293                     	;# 
   181  0294                     	;# 
   182  0295                     	;# 
   183  0295                     	;# 
   184  0296                     	;# 
   185  0391                     	;# 
   186  0392                     	;# 
   187  0393                     	;# 
   188  039A                     	;# 
   189  039C                     	;# 
   190  039D                     	;# 
   191  039E                     	;# 
   192  039F                     	;# 
   193  0FE4                     	;# 
   194  0FE5                     	;# 
   195  0FE6                     	;# 
   196  0FE7                     	;# 
   197  0FE8                     	;# 
   198  0FE9                     	;# 
   199  0FEA                     	;# 
   200  0FEB                     	;# 
   201  0FED                     	;# 
   202  0FEE                     	;# 
   203  0FEF                     	;# 
   204  0000                     	;# 
   205  0001                     	;# 
   206  0002                     	;# 
   207  0003                     	;# 
   208  0004                     	;# 
   209  0005                     	;# 
   210  0006                     	;# 
   211  0007                     	;# 
   212  0008                     	;# 
   213  0009                     	;# 
   214  000A                     	;# 
   215  000B                     	;# 
   216  000C                     	;# 
   217  000E                     	;# 
   218  0011                     	;# 
   219  0012                     	;# 
   220  0015                     	;# 
   221  0016                     	;# 
   222  0016                     	;# 
   223  0017                     	;# 
   224  0018                     	;# 
   225  0019                     	;# 
   226  001A                     	;# 
   227  001B                     	;# 
   228  001C                     	;# 
   229  001E                     	;# 
   230  001F                     	;# 
   231  008C                     	;# 
   232  008E                     	;# 
   233  0091                     	;# 
   234  0092                     	;# 
   235  0095                     	;# 
   236  0096                     	;# 
   237  0097                     	;# 
   238  0098                     	;# 
   239  0099                     	;# 
   240  009A                     	;# 
   241  009B                     	;# 
   242  009B                     	;# 
   243  009C                     	;# 
   244  009D                     	;# 
   245  009E                     	;# 
   246  010C                     	;# 
   247  010E                     	;# 
   248  0111                     	;# 
   249  0112                     	;# 
   250  0113                     	;# 
   251  0114                     	;# 
   252  0115                     	;# 
   253  0116                     	;# 
   254  0117                     	;# 
   255  0118                     	;# 
   256  0119                     	;# 
   257  011A                     	;# 
   258  011B                     	;# 
   259  011D                     	;# 
   260  011D                     	;# 
   261  018C                     	;# 
   262  018E                     	;# 
   263  0191                     	;# 
   264  0191                     	;# 
   265  0192                     	;# 
   266  0193                     	;# 
   267  0193                     	;# 
   268  0193                     	;# 
   269  0194                     	;# 
   270  0195                     	;# 
   271  0196                     	;# 
   272  0199                     	;# 
   273  019A                     	;# 
   274  019B                     	;# 
   275  019B                     	;# 
   276  019B                     	;# 
   277  019B                     	;# 
   278  019C                     	;# 
   279  019C                     	;# 
   280  019D                     	;# 
   281  019E                     	;# 
   282  019F                     	;# 
   283  020C                     	;# 
   284  020E                     	;# 
   285  0211                     	;# 
   286  0211                     	;# 
   287  0212                     	;# 
   288  0212                     	;# 
   289  0213                     	;# 
   290  0213                     	;# 
   291  0214                     	;# 
   292  0214                     	;# 
   293  0215                     	;# 
   294  0215                     	;# 
   295  0215                     	;# 
   296  0216                     	;# 
   297  0216                     	;# 
   298  0217                     	;# 
   299  0217                     	;# 
   300  0291                     	;# 
   301  0291                     	;# 
   302  0292                     	;# 
   303  0293                     	;# 
   304  0294                     	;# 
   305  0295                     	;# 
   306  0295                     	;# 
   307  0296                     	;# 
   308  0391                     	;# 
   309  0392                     	;# 
   310  0393                     	;# 
   311  039A                     	;# 
   312  039C                     	;# 
   313  039D                     	;# 
   314  039E                     	;# 
   315  039F                     	;# 
   316  0FE4                     	;# 
   317  0FE5                     	;# 
   318  0FE6                     	;# 
   319  0FE7                     	;# 
   320  0FE8                     	;# 
   321  0FE9                     	;# 
   322  0FEA                     	;# 
   323  0FEB                     	;# 
   324  0FED                     	;# 
   325  0FEE                     	;# 
   326  0FEF                     	;# 
   327  0000                     	;# 
   328  0001                     	;# 
   329  0002                     	;# 
   330  0003                     	;# 
   331  0004                     	;# 
   332  0005                     	;# 
   333  0006                     	;# 
   334  0007                     	;# 
   335  0008                     	;# 
   336  0009                     	;# 
   337  000A                     	;# 
   338  000B                     	;# 
   339  000C                     	;# 
   340  000E                     	;# 
   341  0011                     	;# 
   342  0012                     	;# 
   343  0015                     	;# 
   344  0016                     	;# 
   345  0016                     	;# 
   346  0017                     	;# 
   347  0018                     	;# 
   348  0019                     	;# 
   349  001A                     	;# 
   350  001B                     	;# 
   351  001C                     	;# 
   352  001E                     	;# 
   353  001F                     	;# 
   354  008C                     	;# 
   355  008E                     	;# 
   356  0091                     	;# 
   357  0092                     	;# 
   358  0095                     	;# 
   359  0096                     	;# 
   360  0097                     	;# 
   361  0098                     	;# 
   362  0099                     	;# 
   363  009A                     	;# 
   364  009B                     	;# 
   365  009B                     	;# 
   366  009C                     	;# 
   367  009D                     	;# 
   368  009E                     	;# 
   369  010C                     	;# 
   370  010E                     	;# 
   371  0111                     	;# 
   372  0112                     	;# 
   373  0113                     	;# 
   374  0114                     	;# 
   375  0115                     	;# 
   376  0116                     	;# 
   377  0117                     	;# 
   378  0118                     	;# 
   379  0119                     	;# 
   380  011A                     	;# 
   381  011B                     	;# 
   382  011D                     	;# 
   383  011D                     	;# 
   384  018C                     	;# 
   385  018E                     	;# 
   386  0191                     	;# 
   387  0191                     	;# 
   388  0192                     	;# 
   389  0193                     	;# 
   390  0193                     	;# 
   391  0193                     	;# 
   392  0194                     	;# 
   393  0195                     	;# 
   394  0196                     	;# 
   395  0199                     	;# 
   396  019A                     	;# 
   397  019B                     	;# 
   398  019B                     	;# 
   399  019B                     	;# 
   400  019B                     	;# 
   401  019C                     	;# 
   402  019C                     	;# 
   403  019D                     	;# 
   404  019E                     	;# 
   405  019F                     	;# 
   406  020C                     	;# 
   407  020E                     	;# 
   408  0211                     	;# 
   409  0211                     	;# 
   410  0212                     	;# 
   411  0212                     	;# 
   412  0213                     	;# 
   413  0213                     	;# 
   414  0214                     	;# 
   415  0214                     	;# 
   416  0215                     	;# 
   417  0215                     	;# 
   418  0215                     	;# 
   419  0216                     	;# 
   420  0216                     	;# 
   421  0217                     	;# 
   422  0217                     	;# 
   423  0291                     	;# 
   424  0291                     	;# 
   425  0292                     	;# 
   426  0293                     	;# 
   427  0294                     	;# 
   428  0295                     	;# 
   429  0295                     	;# 
   430  0296                     	;# 
   431  0391                     	;# 
   432  0392                     	;# 
   433  0393                     	;# 
   434  039A                     	;# 
   435  039C                     	;# 
   436  039D                     	;# 
   437  039E                     	;# 
   438  039F                     	;# 
   439  0FE4                     	;# 
   440  0FE5                     	;# 
   441  0FE6                     	;# 
   442  0FE7                     	;# 
   443  0FE8                     	;# 
   444  0FE9                     	;# 
   445  0FEA                     	;# 
   446  0FEB                     	;# 
   447  0FED                     	;# 
   448  0FEE                     	;# 
   449  0FEF                     	;# 
   450  0000                     	;# 
   451  0001                     	;# 
   452  0002                     	;# 
   453  0003                     	;# 
   454  0004                     	;# 
   455  0005                     	;# 
   456  0006                     	;# 
   457  0007                     	;# 
   458  0008                     	;# 
   459  0009                     	;# 
   460  000A                     	;# 
   461  000B                     	;# 
   462  000C                     	;# 
   463  000E                     	;# 
   464  0011                     	;# 
   465  0012                     	;# 
   466  0015                     	;# 
   467  0016                     	;# 
   468  0016                     	;# 
   469  0017                     	;# 
   470  0018                     	;# 
   471  0019                     	;# 
   472  001A                     	;# 
   473  001B                     	;# 
   474  001C                     	;# 
   475  001E                     	;# 
   476  001F                     	;# 
   477  008C                     	;# 
   478  008E                     	;# 
   479  0091                     	;# 
   480  0092                     	;# 
   481  0095                     	;# 
   482  0096                     	;# 
   483  0097                     	;# 
   484  0098                     	;# 
   485  0099                     	;# 
   486  009A                     	;# 
   487  009B                     	;# 
   488  009B                     	;# 
   489  009C                     	;# 
   490  009D                     	;# 
   491  009E                     	;# 
   492  010C                     	;# 
   493  010E                     	;# 
   494  0111                     	;# 
   495  0112                     	;# 
   496  0113                     	;# 
   497  0114                     	;# 
   498  0115                     	;# 
   499  0116                     	;# 
   500  0117                     	;# 
   501  0118                     	;# 
   502  0119                     	;# 
   503  011A                     	;# 
   504  011B                     	;# 
   505  011D                     	;# 
   506  011D                     	;# 
   507  018C                     	;# 
   508  018E                     	;# 
   509  0191                     	;# 
   510  0191                     	;# 
   511  0192                     	;# 
   512  0193                     	;# 
   513  0193                     	;# 
   514  0193                     	;# 
   515  0194                     	;# 
   516  0195                     	;# 
   517  0196                     	;# 
   518  0199                     	;# 
   519  019A                     	;# 
   520  019B                     	;# 
   521  019B                     	;# 
   522  019B                     	;# 
   523  019B                     	;# 
   524  019C                     	;# 
   525  019C                     	;# 
   526  019D                     	;# 
   527  019E                     	;# 
   528  019F                     	;# 
   529  020C                     	;# 
   530  020E                     	;# 
   531  0211                     	;# 
   532  0211                     	;# 
   533  0212                     	;# 
   534  0212                     	;# 
   535  0213                     	;# 
   536  0213                     	;# 
   537  0214                     	;# 
   538  0214                     	;# 
   539  0215                     	;# 
   540  0215                     	;# 
   541  0215                     	;# 
   542  0216                     	;# 
   543  0216                     	;# 
   544  0217                     	;# 
   545  0217                     	;# 
   546  0291                     	;# 
   547  0291                     	;# 
   548  0292                     	;# 
   549  0293                     	;# 
   550  0294                     	;# 
   551  0295                     	;# 
   552  0295                     	;# 
   553  0296                     	;# 
   554  0391                     	;# 
   555  0392                     	;# 
   556  0393                     	;# 
   557  039A                     	;# 
   558  039C                     	;# 
   559  039D                     	;# 
   560  039E                     	;# 
   561  039F                     	;# 
   562  0FE4                     	;# 
   563  0FE5                     	;# 
   564  0FE6                     	;# 
   565  0FE7                     	;# 
   566  0FE8                     	;# 
   567  0FE9                     	;# 
   568  0FEA                     	;# 
   569  0FEB                     	;# 
   570  0FED                     	;# 
   571  0FEE                     	;# 
   572  0FEF                     	;# 
   573  0000                     	;# 
   574  0001                     	;# 
   575  0002                     	;# 
   576  0003                     	;# 
   577  0004                     	;# 
   578  0005                     	;# 
   579  0006                     	;# 
   580  0007                     	;# 
   581  0008                     	;# 
   582  0009                     	;# 
   583  000A                     	;# 
   584  000B                     	;# 
   585  000C                     	;# 
   586  000E                     	;# 
   587  0011                     	;# 
   588  0012                     	;# 
   589  0015                     	;# 
   590  0016                     	;# 
   591  0016                     	;# 
   592  0017                     	;# 
   593  0018                     	;# 
   594  0019                     	;# 
   595  001A                     	;# 
   596  001B                     	;# 
   597  001C                     	;# 
   598  001E                     	;# 
   599  001F                     	;# 
   600  008C                     	;# 
   601  008E                     	;# 
   602  0091                     	;# 
   603  0092                     	;# 
   604  0095                     	;# 
   605  0096                     	;# 
   606  0097                     	;# 
   607  0098                     	;# 
   608  0099                     	;# 
   609  009A                     	;# 
   610  009B                     	;# 
   611  009B                     	;# 
   612  009C                     	;# 
   613  009D                     	;# 
   614  009E                     	;# 
   615  010C                     	;# 
   616  010E                     	;# 
   617  0111                     	;# 
   618  0112                     	;# 
   619  0113                     	;# 
   620  0114                     	;# 
   621  0115                     	;# 
   622  0116                     	;# 
   623  0117                     	;# 
   624  0118                     	;# 
   625  0119                     	;# 
   626  011A                     	;# 
   627  011B                     	;# 
   628  011D                     	;# 
   629  011D                     	;# 
   630  018C                     	;# 
   631  018E                     	;# 
   632  0191                     	;# 
   633  0191                     	;# 
   634  0192                     	;# 
   635  0193                     	;# 
   636  0193                     	;# 
   637  0193                     	;# 
   638  0194                     	;# 
   639  0195                     	;# 
   640  0196                     	;# 
   641  0199                     	;# 
   642  019A                     	;# 
   643  019B                     	;# 
   644  019B                     	;# 
   645  019B                     	;# 
   646  019B                     	;# 
   647  019C                     	;# 
   648  019C                     	;# 
   649  019D                     	;# 
   650  019E                     	;# 
   651  019F                     	;# 
   652  020C                     	;# 
   653  020E                     	;# 
   654  0211                     	;# 
   655  0211                     	;# 
   656  0212                     	;# 
   657  0212                     	;# 
   658  0213                     	;# 
   659  0213                     	;# 
   660  0214                     	;# 
   661  0214                     	;# 
   662  0215                     	;# 
   663  0215                     	;# 
   664  0215                     	;# 
   665  0216                     	;# 
   666  0216                     	;# 
   667  0217                     	;# 
   668  0217                     	;# 
   669  0291                     	;# 
   670  0291                     	;# 
   671  0292                     	;# 
   672  0293                     	;# 
   673  0294                     	;# 
   674  0295                     	;# 
   675  0295                     	;# 
   676  0296                     	;# 
   677  0391                     	;# 
   678  0392                     	;# 
   679  0393                     	;# 
   680  039A                     	;# 
   681  039C                     	;# 
   682  039D                     	;# 
   683  039E                     	;# 
   684  039F                     	;# 
   685  0FE4                     	;# 
   686  0FE5                     	;# 
   687  0FE6                     	;# 
   688  0FE7                     	;# 
   689  0FE8                     	;# 
   690  0FE9                     	;# 
   691  0FEA                     	;# 
   692  0FEB                     	;# 
   693  0FED                     	;# 
   694  0FEE                     	;# 
   695  0FEF                     	;# 
   696  0000                     	;# 
   697  0001                     	;# 
   698  0002                     	;# 
   699  0003                     	;# 
   700  0004                     	;# 
   701  0005                     	;# 
   702  0006                     	;# 
   703  0007                     	;# 
   704  0008                     	;# 
   705  0009                     	;# 
   706  000A                     	;# 
   707  000B                     	;# 
   708  000C                     	;# 
   709  000E                     	;# 
   710  0011                     	;# 
   711  0012                     	;# 
   712  0015                     	;# 
   713  0016                     	;# 
   714  0016                     	;# 
   715  0017                     	;# 
   716  0018                     	;# 
   717  0019                     	;# 
   718  001A                     	;# 
   719  001B                     	;# 
   720  001C                     	;# 
   721  001E                     	;# 
   722  001F                     	;# 
   723  008C                     	;# 
   724  008E                     	;# 
   725  0091                     	;# 
   726  0092                     	;# 
   727  0095                     	;# 
   728  0096                     	;# 
   729  0097                     	;# 
   730  0098                     	;# 
   731  0099                     	;# 
   732  009A                     	;# 
   733  009B                     	;# 
   734  009B                     	;# 
   735  009C                     	;# 
   736  009D                     	;# 
   737  009E                     	;# 
   738  010C                     	;# 
   739  010E                     	;# 
   740  0111                     	;# 
   741  0112                     	;# 
   742  0113                     	;# 
   743  0114                     	;# 
   744  0115                     	;# 
   745  0116                     	;# 
   746  0117                     	;# 
   747  0118                     	;# 
   748  0119                     	;# 
   749  011A                     	;# 
   750  011B                     	;# 
   751  011D                     	;# 
   752  011D                     	;# 
   753  018C                     	;# 
   754  018E                     	;# 
   755  0191                     	;# 
   756  0191                     	;# 
   757  0192                     	;# 
   758  0193                     	;# 
   759  0193                     	;# 
   760  0193                     	;# 
   761  0194                     	;# 
   762  0195                     	;# 
   763  0196                     	;# 
   764  0199                     	;# 
   765  019A                     	;# 
   766  019B                     	;# 
   767  019B                     	;# 
   768  019B                     	;# 
   769  019B                     	;# 
   770  019C                     	;# 
   771  019C                     	;# 
   772  019D                     	;# 
   773  019E                     	;# 
   774  019F                     	;# 
   775  020C                     	;# 
   776  020E                     	;# 
   777  0211                     	;# 
   778  0211                     	;# 
   779  0212                     	;# 
   780  0212                     	;# 
   781  0213                     	;# 
   782  0213                     	;# 
   783  0214                     	;# 
   784  0214                     	;# 
   785  0215                     	;# 
   786  0215                     	;# 
   787  0215                     	;# 
   788  0216                     	;# 
   789  0216                     	;# 
   790  0217                     	;# 
   791  0217                     	;# 
   792  0291                     	;# 
   793  0291                     	;# 
   794  0292                     	;# 
   795  0293                     	;# 
   796  0294                     	;# 
   797  0295                     	;# 
   798  0295                     	;# 
   799  0296                     	;# 
   800  0391                     	;# 
   801  0392                     	;# 
   802  0393                     	;# 
   803  039A                     	;# 
   804  039C                     	;# 
   805  039D                     	;# 
   806  039E                     	;# 
   807  039F                     	;# 
   808  0FE4                     	;# 
   809  0FE5                     	;# 
   810  0FE6                     	;# 
   811  0FE7                     	;# 
   812  0FE8                     	;# 
   813  0FE9                     	;# 
   814  0FEA                     	;# 
   815  0FEB                     	;# 
   816  0FED                     	;# 
   817  0FEE                     	;# 
   818  0FEF                     	;# 
   819  0000                     	;# 
   820  0001                     	;# 
   821  0002                     	;# 
   822  0003                     	;# 
   823  0004                     	;# 
   824  0005                     	;# 
   825  0006                     	;# 
   826  0007                     	;# 
   827  0008                     	;# 
   828  0009                     	;# 
   829  000A                     	;# 
   830  000B                     	;# 
   831  000C                     	;# 
   832  000E                     	;# 
   833  0011                     	;# 
   834  0012                     	;# 
   835  0015                     	;# 
   836  0016                     	;# 
   837  0016                     	;# 
   838  0017                     	;# 
   839  0018                     	;# 
   840  0019                     	;# 
   841  001A                     	;# 
   842  001B                     	;# 
   843  001C                     	;# 
   844  001E                     	;# 
   845  001F                     	;# 
   846  008C                     	;# 
   847  008E                     	;# 
   848  0091                     	;# 
   849  0092                     	;# 
   850  0095                     	;# 
   851  0096                     	;# 
   852  0097                     	;# 
   853  0098                     	;# 
   854  0099                     	;# 
   855  009A                     	;# 
   856  009B                     	;# 
   857  009B                     	;# 
   858  009C                     	;# 
   859  009D                     	;# 
   860  009E                     	;# 
   861  010C                     	;# 
   862  010E                     	;# 
   863  0111                     	;# 
   864  0112                     	;# 
   865  0113                     	;# 
   866  0114                     	;# 
   867  0115                     	;# 
   868  0116                     	;# 
   869  0117                     	;# 
   870  0118                     	;# 
   871  0119                     	;# 
   872  011A                     	;# 
   873  011B                     	;# 
   874  011D                     	;# 
   875  011D                     	;# 
   876  018C                     	;# 
   877  018E                     	;# 
   878  0191                     	;# 
   879  0191                     	;# 
   880  0192                     	;# 
   881  0193                     	;# 
   882  0193                     	;# 
   883  0193                     	;# 
   884  0194                     	;# 
   885  0195                     	;# 
   886  0196                     	;# 
   887  0199                     	;# 
   888  019A                     	;# 
   889  019B                     	;# 
   890  019B                     	;# 
   891  019B                     	;# 
   892  019B                     	;# 
   893  019C                     	;# 
   894  019C                     	;# 
   895  019D                     	;# 
   896  019E                     	;# 
   897  019F                     	;# 
   898  020C                     	;# 
   899  020E                     	;# 
   900  0211                     	;# 
   901  0211                     	;# 
   902  0212                     	;# 
   903  0212                     	;# 
   904  0213                     	;# 
   905  0213                     	;# 
   906  0214                     	;# 
   907  0214                     	;# 
   908  0215                     	;# 
   909  0215                     	;# 
   910  0215                     	;# 
   911  0216                     	;# 
   912  0216                     	;# 
   913  0217                     	;# 
   914  0217                     	;# 
   915  0291                     	;# 
   916  0291                     	;# 
   917  0292                     	;# 
   918  0293                     	;# 
   919  0294                     	;# 
   920  0295                     	;# 
   921  0295                     	;# 
   922  0296                     	;# 
   923  0391                     	;# 
   924  0392                     	;# 
   925  0393                     	;# 
   926  039A                     	;# 
   927  039C                     	;# 
   928  039D                     	;# 
   929  039E                     	;# 
   930  039F                     	;# 
   931  0FE4                     	;# 
   932  0FE5                     	;# 
   933  0FE6                     	;# 
   934  0FE7                     	;# 
   935  0FE8                     	;# 
   936  0FE9                     	;# 
   937  0FEA                     	;# 
   938  0FEB                     	;# 
   939  0FED                     	;# 
   940  0FEE                     	;# 
   941  0FEF                     	;# 
   942  0000                     	;# 
   943  0001                     	;# 
   944  0002                     	;# 
   945  0003                     	;# 
   946  0004                     	;# 
   947  0005                     	;# 
   948  0006                     	;# 
   949  0007                     	;# 
   950  0008                     	;# 
   951  0009                     	;# 
   952  000A                     	;# 
   953  000B                     	;# 
   954  000C                     	;# 
   955  000E                     	;# 
   956  0011                     	;# 
   957  0012                     	;# 
   958  0015                     	;# 
   959  0016                     	;# 
   960  0016                     	;# 
   961  0017                     	;# 
   962  0018                     	;# 
   963  0019                     	;# 
   964  001A                     	;# 
   965  001B                     	;# 
   966  001C                     	;# 
   967  001E                     	;# 
   968  001F                     	;# 
   969  008C                     	;# 
   970  008E                     	;# 
   971  0091                     	;# 
   972  0092                     	;# 
   973  0095                     	;# 
   974  0096                     	;# 
   975  0097                     	;# 
   976  0098                     	;# 
   977  0099                     	;# 
   978  009A                     	;# 
   979  009B                     	;# 
   980  009B                     	;# 
   981  009C                     	;# 
   982  009D                     	;# 
   983  009E                     	;# 
   984  010C                     	;# 
   985  010E                     	;# 
   986  0111                     	;# 
   987  0112                     	;# 
   988  0113                     	;# 
   989  0114                     	;# 
   990  0115                     	;# 
   991  0116                     	;# 
   992  0117                     	;# 
   993  0118                     	;# 
   994  0119                     	;# 
   995  011A                     	;# 
   996  011B                     	;# 
   997  011D                     	;# 
   998  011D                     	;# 
   999  018C                     	;# 
  1000  018E                     	;# 
  1001  0191                     	;# 
  1002  0191                     	;# 
  1003  0192                     	;# 
  1004  0193                     	;# 
  1005  0193                     	;# 
  1006  0193                     	;# 
  1007  0194                     	;# 
  1008  0195                     	;# 
  1009  0196                     	;# 
  1010  0199                     	;# 
  1011  019A                     	;# 
  1012  019B                     	;# 
  1013  019B                     	;# 
  1014  019B                     	;# 
  1015  019B                     	;# 
  1016  019C                     	;# 
  1017  019C                     	;# 
  1018  019D                     	;# 
  1019  019E                     	;# 
  1020  019F                     	;# 
  1021  020C                     	;# 
  1022  020E                     	;# 
  1023  0211                     	;# 
  1024  0211                     	;# 
  1025  0212                     	;# 
  1026  0212                     	;# 
  1027  0213                     	;# 
  1028  0213                     	;# 
  1029  0214                     	;# 
  1030  0214                     	;# 
  1031  0215                     	;# 
  1032  0215                     	;# 
  1033  0215                     	;# 
  1034  0216                     	;# 
  1035  0216                     	;# 
  1036  0217                     	;# 
  1037  0217                     	;# 
  1038  0291                     	;# 
  1039  0291                     	;# 
  1040  0292                     	;# 
  1041  0293                     	;# 
  1042  0294                     	;# 
  1043  0295                     	;# 
  1044  0295                     	;# 
  1045  0296                     	;# 
  1046  0391                     	;# 
  1047  0392                     	;# 
  1048  0393                     	;# 
  1049  039A                     	;# 
  1050  039C                     	;# 
  1051  039D                     	;# 
  1052  039E                     	;# 
  1053  039F                     	;# 
  1054  0FE4                     	;# 
  1055  0FE5                     	;# 
  1056  0FE6                     	;# 
  1057  0FE7                     	;# 
  1058  0FE8                     	;# 
  1059  0FE9                     	;# 
  1060  0FEA                     	;# 
  1061  0FEB                     	;# 
  1062  0FED                     	;# 
  1063  0FEE                     	;# 
  1064  0FEF                     	;# 
  1065  0000                     	;# 
  1066  0001                     	;# 
  1067  0002                     	;# 
  1068  0003                     	;# 
  1069  0004                     	;# 
  1070  0005                     	;# 
  1071  0006                     	;# 
  1072  0007                     	;# 
  1073  0008                     	;# 
  1074  0009                     	;# 
  1075  000A                     	;# 
  1076  000B                     	;# 
  1077  000C                     	;# 
  1078  000E                     	;# 
  1079  0011                     	;# 
  1080  0012                     	;# 
  1081  0015                     	;# 
  1082  0016                     	;# 
  1083  0016                     	;# 
  1084  0017                     	;# 
  1085  0018                     	;# 
  1086  0019                     	;# 
  1087  001A                     	;# 
  1088  001B                     	;# 
  1089  001C                     	;# 
  1090  001E                     	;# 
  1091  001F                     	;# 
  1092  008C                     	;# 
  1093  008E                     	;# 
  1094  0091                     	;# 
  1095  0092                     	;# 
  1096  0095                     	;# 
  1097  0096                     	;# 
  1098  0097                     	;# 
  1099  0098                     	;# 
  1100  0099                     	;# 
  1101  009A                     	;# 
  1102  009B                     	;# 
  1103  009B                     	;# 
  1104  009C                     	;# 
  1105  009D                     	;# 
  1106  009E                     	;# 
  1107  010C                     	;# 
  1108  010E                     	;# 
  1109  0111                     	;# 
  1110  0112                     	;# 
  1111  0113                     	;# 
  1112  0114                     	;# 
  1113  0115                     	;# 
  1114  0116                     	;# 
  1115  0117                     	;# 
  1116  0118                     	;# 
  1117  0119                     	;# 
  1118  011A                     	;# 
  1119  011B                     	;# 
  1120  011D                     	;# 
  1121  011D                     	;# 
  1122  018C                     	;# 
  1123  018E                     	;# 
  1124  0191                     	;# 
  1125  0191                     	;# 
  1126  0192                     	;# 
  1127  0193                     	;# 
  1128  0193                     	;# 
  1129  0193                     	;# 
  1130  0194                     	;# 
  1131  0195                     	;# 
  1132  0196                     	;# 
  1133  0199                     	;# 
  1134  019A                     	;# 
  1135  019B                     	;# 
  1136  019B                     	;# 
  1137  019B                     	;# 
  1138  019B                     	;# 
  1139  019C                     	;# 
  1140  019C                     	;# 
  1141  019D                     	;# 
  1142  019E                     	;# 
  1143  019F                     	;# 
  1144  020C                     	;# 
  1145  020E                     	;# 
  1146  0211                     	;# 
  1147  0211                     	;# 
  1148  0212                     	;# 
  1149  0212                     	;# 
  1150  0213                     	;# 
  1151  0213                     	;# 
  1152  0214                     	;# 
  1153  0214                     	;# 
  1154  0215                     	;# 
  1155  0215                     	;# 
  1156  0215                     	;# 
  1157  0216                     	;# 
  1158  0216                     	;# 
  1159  0217                     	;# 
  1160  0217                     	;# 
  1161  0291                     	;# 
  1162  0291                     	;# 
  1163  0292                     	;# 
  1164  0293                     	;# 
  1165  0294                     	;# 
  1166  0295                     	;# 
  1167  0295                     	;# 
  1168  0296                     	;# 
  1169  0391                     	;# 
  1170  0392                     	;# 
  1171  0393                     	;# 
  1172  039A                     	;# 
  1173  039C                     	;# 
  1174  039D                     	;# 
  1175  039E                     	;# 
  1176  039F                     	;# 
  1177  0FE4                     	;# 
  1178  0FE5                     	;# 
  1179  0FE6                     	;# 
  1180  0FE7                     	;# 
  1181  0FE8                     	;# 
  1182  0FE9                     	;# 
  1183  0FEA                     	;# 
  1184  0FEB                     	;# 
  1185  0FED                     	;# 
  1186  0FEE                     	;# 
  1187  0FEF                     	;# 
  1188                           
  1189                           	psect	stringtext
  1190  05DF                     __pstringtext:	
  1191  05DF                     _freqs:	
  1192  05DF  3400               	retlw	0
  1193  05E0  3401               	retlw	1
  1194  05E1  3402               	retlw	2
  1195  05E2  3403               	retlw	3
  1196  05E3  3404               	retlw	4
  1197  05E4  3405               	retlw	5
  1198  05E5  3406               	retlw	6
  1199  05E6  3407               	retlw	7
  1200  05E7  3408               	retlw	8
  1201  05E8  3409               	retlw	9
  1202  05E9  340A               	retlw	10
  1203  05EA                     __end_of_freqs:	
  1204  05EA                     _gains:	
  1205  05EA  3404               	retlw	4
  1206  05EB  3405               	retlw	5
  1207  05EC  3407               	retlw	7
  1208  05ED  3403               	retlw	3
  1209  05EE  3423               	retlw	35
  1210  05EF  3463               	retlw	99
  1211  05F0  346B               	retlw	107
  1212  05F1  347B               	retlw	123
  1213  05F2                     __end_of_gains:	
  1214  000E                     _PORTC	set	14
  1215  0015                     _TMR0	set	21
  1216  005F                     _GIE	set	95
  1217  005E                     _PEIE	set	94
  1218  0065                     _RA5	set	101
  1219  008D                     _RCIF	set	141
  1220  005D                     _TMR0IE	set	93
  1221  005A                     _TMR0IF	set	90
  1222  008C                     _TXIF	set	140
  1223  009D                     _ADCON0	set	157
  1224  009E                     _ADCON1	set	158
  1225  009C                     _ADRESH	set	156
  1226  009B                     _ADRESL	set	155
  1227  0095                     _OPTION_REGbits	set	149
  1228  0099                     _OSCCON	set	153
  1229  009A                     _OSCSTAT	set	154
  1230  0098                     _OSCTUNE	set	152
  1231  008C                     _TRISA	set	140
  1232  008E                     _TRISC	set	142
  1233  04E9                     _ADGO	set	1257
  1234  04A8                     _PS0	set	1192
  1235  04A9                     _PS1	set	1193
  1236  04AA                     _PS2	set	1194
  1237  04AB                     _PSA	set	1195
  1238  048D                     _RCIE	set	1165
  1239  04AD                     _TMR0CS	set	1197
  1240  048C                     _TXIE	set	1164
  1241  011D                     _APFCON	set	285
  1242  010C                     _LATA	set	268
  1243  010E                     _LATC	set	270
  1244  08EF                     _RXDTSEL	set	2287
  1245  08EA                     _TXCKSEL	set	2282
  1246  018C                     _ANSELA	set	396
  1247  018E                     _ANSELC	set	398
  1248  0199                     _RCREG	set	409
  1249  019C                     _SPBRGH	set	412
  1250  019B                     _SPBRGL	set	411
  1251  019A                     _TXREG	set	410
  1252  0CFB                     _BRG16	set	3323
  1253  0CF2                     _BRGH	set	3314
  1254  0CEC                     _CREN	set	3308
  1255  0CE9                     _OERR	set	3305
  1256  0CFC                     _SCKP	set	3324
  1257  0CEF                     _SPEN	set	3311
  1258  0CF4                     _SYNC	set	3316
  1259  0CF5                     _TXEN	set	3317
  1260  020C                     _WPUA	set	524
  1261  020E                     _WPUC	set	526
  1262  039A                     _CLKRCON	set	922
  1263                           
  1264                           ; #config settings
  1265  0000                     
  1266                           	psect	cinit
  1267  0057                     start_initialization:	
  1268  0057                     __initialization:	
  1269                           
  1270                           ; Clear objects allocated to COMMON
  1271  0057  01F0               	clrf	__pbssCOMMON& (0+127)
  1272  0058  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  1273  0059  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  1274  005A  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  1275  005B  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  1276                           
  1277                           ; Clear objects allocated to BANK0
  1278  005C  304E               	movlw	low __pbssBANK0
  1279  005D  0084               	movwf	4
  1280  005E  3000               	movlw	high __pbssBANK0
  1281  005F  0085               	movwf	5
  1282  0060  301D               	movlw	29
  1283  0061  2641               	fcall	clear_ram0
  1284                           
  1285                           ; Clear objects allocated to BANK1
  1286  0062  30A0               	movlw	low __pbssBANK1
  1287  0063  0084               	movwf	4
  1288  0064  3000               	movlw	high __pbssBANK1
  1289  0065  0085               	movwf	5
  1290  0066  300F               	movlw	15
  1291  0067  2641               	fcall	clear_ram0
  1292  0068                     end_of_initialization:	
  1293                           ;End of C runtime variable initialization code
  1294                           
  1295  0068                     __end_of__initialization:	
  1296  0068  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1297  0069  0020               	movlb	0
  1298  006A  2B51               	ljmp	_main	;jump to C main() function
  1299                           
  1300                           	psect	bssCOMMON
  1301  0070                     __pbssCOMMON:	
  1302  0070                     _TIMER0_timeout:	
  1303  0070                     	ds	2
  1304  0072                     _USART_tx_flag:	
  1305  0072                     	ds	1
  1306  0073                     _USART_tx_index:	
  1307  0073                     	ds	1
  1308  0074                     _USART_tx_length:	
  1309  0074                     	ds	1
  1310                           
  1311                           	psect	bssBANK0
  1312  004E                     __pbssBANK0:	
  1313  004E                     _USART_rx_data:	
  1314  004E                     	ds	15
  1315  005D                     _TIMER0_flag:	
  1316  005D                     	ds	1
  1317  005E                     _USART_rx_flag:	
  1318  005E                     	ds	1
  1319  005F                     _USART_rx_index:	
  1320  005F                     	ds	1
  1321  0060                     _mess_rec_size:	
  1322  0060                     	ds	1
  1323  0061                     _mess_rec:	
  1324  0061                     	ds	10
  1325                           
  1326                           	psect	bssBANK1
  1327  00A0                     __pbssBANK1:	
  1328  00A0                     _USART_tx_data:	
  1329  00A0                     	ds	15
  1330                           
  1331                           	psect	clrtext
  1332  0641                     clear_ram0:	
  1333                           ;	Called with FSR0 containing the base address, and
  1334                           ;	WREG with the size to clear
  1335                           
  1336  0641  0064               	clrwdt	;clear the watchdog before getting into this loop
  1337  0642                     clrloop0:	
  1338  0642  0180               	clrf	0	;clear RAM location pointed to by FSR
  1339  0643  3101               	addfsr 0,1
  1340  0644  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1341  0645  2E42               	goto	clrloop0	;have we reached the end yet?
  1342  0646  3400               	retlw	0	;all done for this memory range, return
  1343                           
  1344                           	psect	cstackCOMMON
  1345  0075                     __pcstackCOMMON:	
  1346  0075                     ?_OSCILLATOR_Initialize:	
  1347  0075                     ?_setup_TMR0:	
  1348                           ; 1 bytes @ 0x0
  1349                           
  1350  0075                     ?_start_TX_USART_ISR:	
  1351                           ; 1 bytes @ 0x0
  1352                           
  1353  0075                     ?_start_RX_USART_ISR:	
  1354                           ; 1 bytes @ 0x0
  1355                           
  1356  0075                     ?_start_RCM:	
  1357                           ; 1 bytes @ 0x0
  1358                           
  1359  0075                     ?_setup_ADC:	
  1360                           ; 1 bytes @ 0x0
  1361                           
  1362  0075                     ?_mess_handler:	
  1363                           ; 1 bytes @ 0x0
  1364                           
  1365  0075                     ?_stop_TMR0_ISR:	
  1366                           ; 1 bytes @ 0x0
  1367                           
  1368  0075                     ??_stop_TMR0_ISR:	
  1369                           ; 1 bytes @ 0x0
  1370                           
  1371  0075                     ?_start_TMR0_ISR:	
  1372                           ; 1 bytes @ 0x0
  1373                           
  1374  0075                     ??_start_TMR0_ISR:	
  1375                           ; 1 bytes @ 0x0
  1376                           
  1377  0075                     ?_sweep:	
  1378                           ; 1 bytes @ 0x0
  1379                           
  1380  0075                     ?_config_ASIC:	
  1381                           ; 1 bytes @ 0x0
  1382                           
  1383  0075                     ?_read_ADC_channels:	
  1384                           ; 1 bytes @ 0x0
  1385                           
  1386  0075                     ?_measure_Impedance:	
  1387                           ; 1 bytes @ 0x0
  1388                           
  1389  0075                     ?_measure_Impedance_no_offset:	
  1390                           ; 1 bytes @ 0x0
  1391                           
  1392  0075                     ?_measure_Offset:	
  1393                           ; 1 bytes @ 0x0
  1394                           
  1395  0075                     ?_measure_Impedance_SE:	
  1396                           ; 1 bytes @ 0x0
  1397                           
  1398  0075                     ?_calibrate_reader:	
  1399                           ; 1 bytes @ 0x0
  1400                           
  1401  0075                     ?_PIN_MANAGER_Initialize:	
  1402                           ; 1 bytes @ 0x0
  1403                           
  1404  0075                     ?_SYSTEM_Initialize:	
  1405                           ; 1 bytes @ 0x0
  1406                           
  1407  0075                     ?_USARTX_change_pol:	
  1408                           ; 1 bytes @ 0x0
  1409                           
  1410  0075                     ?_main:	
  1411                           ; 1 bytes @ 0x0
  1412                           
  1413  0075                     ?_isr:	
  1414                           ; 1 bytes @ 0x0
  1415                           
  1416  0075                     ?_close_RX_USART:	
  1417                           ; 1 bytes @ 0x0
  1418                           
  1419  0075                     ?i1_start_RX_USART_ISR:	
  1420                           ; 1 bytes @ 0x0
  1421                           
  1422  0075                     ??i1_start_RX_USART_ISR:	
  1423                           ; 1 bytes @ 0x0
  1424                           
  1425                           
  1426                           ; 1 bytes @ 0x0
  1427  0075                     	ds	2
  1428  0077                     start_TMR0_ISR@val:	
  1429                           
  1430                           ; 1 bytes @ 0x2
  1431  0077                     	ds	1
  1432  0078                     ??_isr:	
  1433                           
  1434                           ; 1 bytes @ 0x3
  1435  0078                     	ds	2
  1436                           
  1437                           	psect	cstackBANK0
  1438  0020                     __pcstackBANK0:	
  1439  0020                     ??_OSCILLATOR_Initialize:	
  1440  0020                     ??_setup_TMR0:	
  1441                           ; 1 bytes @ 0x0
  1442                           
  1443  0020                     ??_start_TX_USART_ISR:	
  1444                           ; 1 bytes @ 0x0
  1445                           
  1446  0020                     ??_start_RX_USART_ISR:	
  1447                           ; 1 bytes @ 0x0
  1448                           
  1449  0020                     ??_start_RCM:	
  1450                           ; 1 bytes @ 0x0
  1451                           
  1452  0020                     ??_setup_ADC:	
  1453                           ; 1 bytes @ 0x0
  1454                           
  1455  0020                     ?_calculate_checksum:	
  1456                           ; 1 bytes @ 0x0
  1457                           
  1458  0020                     ??_PIN_MANAGER_Initialize:	
  1459                           ; 1 bytes @ 0x0
  1460                           
  1461  0020                     ??_SYSTEM_Initialize:	
  1462                           ; 1 bytes @ 0x0
  1463                           
  1464  0020                     ??_USARTX_change_pol:	
  1465                           ; 1 bytes @ 0x0
  1466                           
  1467  0020                     ?_BIO_config:	
  1468                           ; 1 bytes @ 0x0
  1469                           
  1470  0020                     ?_setGain:	
  1471                           ; 1 bytes @ 0x0
  1472                           
  1473  0020                     ?_setFreq:	
  1474                           ; 1 bytes @ 0x0
  1475                           
  1476  0020                     ??_close_RX_USART:	
  1477                           ; 1 bytes @ 0x0
  1478                           
  1479  0020                     ?_lputs_ISR:	
  1480                           ; 1 bytes @ 0x0
  1481                           
  1482  0020                     ?_ADC_2:	
  1483                           ; 1 bytes @ 0x0
  1484                           
  1485  0020                     ?_ADC_4:	
  1486                           ; 2 bytes @ 0x0
  1487                           
  1488  0020                     ?_ADC_5:	
  1489                           ; 2 bytes @ 0x0
  1490                           
  1491  0020                     setGain@gain_index:	
  1492                           ; 2 bytes @ 0x0
  1493                           
  1494  0020                     setFreq@freq_index:	
  1495                           ; 1 bytes @ 0x0
  1496                           
  1497  0020                     lputs_ISR@length:	
  1498                           ; 1 bytes @ 0x0
  1499                           
  1500  0020                     calculate_checksum@num:	
  1501                           ; 1 bytes @ 0x0
  1502                           
  1503  0020                     BIO_config@conf:	
  1504                           ; 1 bytes @ 0x0
  1505                           
  1506                           
  1507                           ; 2 bytes @ 0x0
  1508  0020                     	ds	1
  1509  0021                     ??_calculate_checksum:	
  1510  0021                     ??_setGain:	
  1511                           ; 1 bytes @ 0x1
  1512                           
  1513  0021                     ??_setFreq:	
  1514                           ; 1 bytes @ 0x1
  1515                           
  1516  0021                     ??_lputs_ISR:	
  1517                           ; 1 bytes @ 0x1
  1518                           
  1519                           
  1520                           ; 1 bytes @ 0x1
  1521  0021                     	ds	1
  1522  0022                     ??_ADC_2:	
  1523  0022                     ??_ADC_4:	
  1524                           ; 1 bytes @ 0x2
  1525                           
  1526  0022                     ??_ADC_5:	
  1527                           ; 1 bytes @ 0x2
  1528                           
  1529  0022                     ??_BIO_config:	
  1530                           ; 1 bytes @ 0x2
  1531                           
  1532  0022                     setGain@aux:	
  1533                           ; 1 bytes @ 0x2
  1534                           
  1535  0022                     setFreq@asic:	
  1536                           ; 1 bytes @ 0x2
  1537                           
  1538                           
  1539                           ; 1 bytes @ 0x2
  1540  0022                     	ds	1
  1541  0023                     BIO_config@i:	
  1542  0023                     setGain@asic:	
  1543                           ; 1 bytes @ 0x3
  1544                           
  1545  0023                     setFreq@aux:	
  1546                           ; 1 bytes @ 0x3
  1547                           
  1548  0023                     lputs_ISR@i:	
  1549                           ; 1 bytes @ 0x3
  1550                           
  1551  0023                     calculate_checksum@check:	
  1552                           ; 1 bytes @ 0x3
  1553                           
  1554                           
  1555                           ; 1 bytes @ 0x3
  1556  0023                     	ds	1
  1557  0024                     BIO_config@out:	
  1558  0024                     lputs_ISR@data:	
  1559                           ; 1 bytes @ 0x4
  1560                           
  1561  0024                     calculate_checksum@data:	
  1562                           ; 1 bytes @ 0x4
  1563                           
  1564  0024                     ADC_2@ADC_value:	
  1565                           ; 1 bytes @ 0x4
  1566                           
  1567  0024                     ADC_4@ADC_value:	
  1568                           ; 2 bytes @ 0x4
  1569                           
  1570  0024                     ADC_5@ADC_value:	
  1571                           ; 2 bytes @ 0x4
  1572                           
  1573                           
  1574                           ; 2 bytes @ 0x4
  1575  0024                     	ds	1
  1576  0025                     ??_config_ASIC:	
  1577  0025                     ??_calibrate_reader:	
  1578                           ; 1 bytes @ 0x5
  1579                           
  1580  0025                     calculate_checksum@i:	
  1581                           ; 1 bytes @ 0x5
  1582                           
  1583                           
  1584                           ; 1 bytes @ 0x5
  1585  0025                     	ds	1
  1586  0026                     ??_read_ADC_channels:	
  1587  0026                     ??_measure_Impedance:	
  1588                           ; 1 bytes @ 0x6
  1589                           
  1590  0026                     ??_measure_Impedance_no_offset:	
  1591                           ; 1 bytes @ 0x6
  1592                           
  1593  0026                     ??_measure_Offset:	
  1594                           ; 1 bytes @ 0x6
  1595                           
  1596  0026                     ??_measure_Impedance_SE:	
  1597                           ; 1 bytes @ 0x6
  1598                           
  1599  0026                     ?_measure:	
  1600                           ; 1 bytes @ 0x6
  1601                           
  1602  0026                     measure@Q:	
  1603                           ; 1 bytes @ 0x6
  1604                           
  1605  0026                     config_ASIC@asic:	
  1606                           ; 1 bytes @ 0x6
  1607                           
  1608  0026                     calibrate_reader@aux:	
  1609                           ; 2 bytes @ 0x6
  1610                           
  1611                           
  1612                           ; 8 bytes @ 0x6
  1613  0026                     	ds	1
  1614  0027                     measure@asic:	
  1615  0027                     measure_Offset@aux:	
  1616                           ; 2 bytes @ 0x7
  1617                           
  1618  0027                     read_ADC_channels@aux:	
  1619                           ; 5 bytes @ 0x7
  1620                           
  1621  0027                     measure_Impedance@aux:	
  1622                           ; 7 bytes @ 0x7
  1623                           
  1624  0027                     measure_Impedance_no_offset@aux:	
  1625                           ; 13 bytes @ 0x7
  1626                           
  1627                           
  1628                           ; 13 bytes @ 0x7
  1629  0027                     	ds	1
  1630  0028                     measure_Impedance_SE@aux:	
  1631                           
  1632                           ; 8 bytes @ 0x8
  1633  0028                     	ds	1
  1634  0029                     ??_measure:	
  1635                           
  1636                           ; 1 bytes @ 0x9
  1637  0029                     	ds	3
  1638  002C                     measure_Offset@value1:	
  1639                           
  1640                           ; 2 bytes @ 0xC
  1641  002C                     	ds	1
  1642  002D                     measure@offset:	
  1643                           
  1644                           ; 2 bytes @ 0xD
  1645  002D                     	ds	1
  1646  002E                     read_ADC_channels@value1:	
  1647  002E                     measure_Offset@value2:	
  1648                           ; 2 bytes @ 0xE
  1649                           
  1650                           
  1651                           ; 2 bytes @ 0xE
  1652  002E                     	ds	1
  1653  002F                     measure@I:	
  1654                           
  1655                           ; 1 bytes @ 0xF
  1656  002F                     	ds	1
  1657  0030                     measure_Impedance_SE@check:	
  1658  0030                     read_ADC_channels@value2:	
  1659                           ; 1 bytes @ 0x10
  1660                           
  1661  0030                     measure_Offset@asic:	
  1662                           ; 2 bytes @ 0x10
  1663                           
  1664  0030                     measure@value:	
  1665                           ; 2 bytes @ 0x10
  1666                           
  1667                           
  1668                           ; 2 bytes @ 0x10
  1669  0030                     	ds	1
  1670  0031                     measure_Impedance_SE@value1:	
  1671                           
  1672                           ; 2 bytes @ 0x11
  1673  0031                     	ds	1
  1674  0032                     read_ADC_channels@value3:	
  1675  0032                     measure@aux2:	
  1676                           ; 2 bytes @ 0x12
  1677                           
  1678                           
  1679                           ; 2 bytes @ 0x12
  1680  0032                     	ds	1
  1681  0033                     measure_Impedance_SE@asic:	
  1682                           
  1683                           ; 2 bytes @ 0x13
  1684  0033                     	ds	1
  1685  0034                     measure_Impedance@value1:	
  1686  0034                     measure_Impedance_no_offset@value1:	
  1687                           ; 2 bytes @ 0x14
  1688                           
  1689  0034                     measure@aux1:	
  1690                           ; 2 bytes @ 0x14
  1691                           
  1692                           
  1693                           ; 2 bytes @ 0x14
  1694  0034                     	ds	2
  1695  0036                     ??_sweep:	
  1696  0036                     measure_Impedance@value2:	
  1697                           ; 1 bytes @ 0x16
  1698                           
  1699  0036                     measure_Impedance_no_offset@value2:	
  1700                           ; 2 bytes @ 0x16
  1701                           
  1702                           
  1703                           ; 2 bytes @ 0x16
  1704  0036                     	ds	2
  1705  0038                     sweep@check:	
  1706  0038                     measure_Impedance@asic:	
  1707                           ; 1 bytes @ 0x18
  1708                           
  1709  0038                     measure_Impedance_no_offset@asic:	
  1710                           ; 2 bytes @ 0x18
  1711                           
  1712                           
  1713                           ; 2 bytes @ 0x18
  1714  0038                     	ds	1
  1715  0039                     sweep@aux:	
  1716                           
  1717                           ; 7 bytes @ 0x19
  1718  0039                     	ds	7
  1719  0040                     sweep@freq_index:	
  1720                           
  1721                           ; 1 bytes @ 0x20
  1722  0040                     	ds	1
  1723  0041                     sweep@i:	
  1724                           
  1725                           ; 1 bytes @ 0x21
  1726  0041                     	ds	1
  1727  0042                     sweep@count:	
  1728                           
  1729                           ; 1 bytes @ 0x22
  1730  0042                     	ds	1
  1731  0043                     sweep@I:	
  1732                           
  1733                           ; 2 bytes @ 0x23
  1734  0043                     	ds	2
  1735  0045                     sweep@Q:	
  1736                           
  1737                           ; 2 bytes @ 0x25
  1738  0045                     	ds	2
  1739  0047                     sweep@gain_index:	
  1740                           
  1741                           ; 1 bytes @ 0x27
  1742  0047                     	ds	1
  1743  0048                     sweep@ret:	
  1744                           
  1745                           ; 1 bytes @ 0x28
  1746  0048                     	ds	1
  1747  0049                     sweep@asic:	
  1748                           
  1749                           ; 2 bytes @ 0x29
  1750  0049                     	ds	2
  1751  004B                     ??_mess_handler:	
  1752                           
  1753                           ; 1 bytes @ 0x2B
  1754  004B                     	ds	1
  1755  004C                     ??_main:	
  1756                           
  1757                           ; 1 bytes @ 0x2C
  1758  004C                     	ds	1
  1759  004D                     main@i:	
  1760                           
  1761                           ; 1 bytes @ 0x2D
  1762  004D                     	ds	1
  1763                           
  1764                           	psect	maintext
  1765  0351                     __pmaintext:	
  1766 ;;
  1767 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1768 ;;
  1769 ;; *************** function _main *****************
  1770 ;; Defined at:
  1771 ;;		line 20 in file "main.c"
  1772 ;; Parameters:    Size  Location     Type
  1773 ;;		None
  1774 ;; Auto vars:     Size  Location     Type
  1775 ;;  i               1   45[BANK0 ] unsigned char 
  1776 ;; Return value:  Size  Location     Type
  1777 ;;                  1    wreg      void 
  1778 ;; Registers used:
  1779 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1780 ;; Tracked objects:
  1781 ;;		On entry : B1F/0
  1782 ;;		On exit  : 0/0
  1783 ;;		Unchanged: 0/0
  1784 ;; Data sizes:     COMMON   BANK0   BANK1
  1785 ;;      Params:         0       0       0
  1786 ;;      Locals:         0       1       0
  1787 ;;      Temps:          0       1       0
  1788 ;;      Totals:         0       2       0
  1789 ;;Total ram usage:        2 bytes
  1790 ;; Hardware stack levels required when called:    6
  1791 ;; This function calls:
  1792 ;;		_SYSTEM_Initialize
  1793 ;;		_USARTX_change_pol
  1794 ;;		_mess_handler
  1795 ;;		_setup_ADC
  1796 ;;		_setup_TMR0
  1797 ;;		_start_RCM
  1798 ;;		_start_RX_USART_ISR
  1799 ;;		_start_TX_USART_ISR
  1800 ;; This function is called by:
  1801 ;;		Startup code after reset
  1802 ;; This function uses a non-reentrant model
  1803 ;;
  1804                           
  1805                           
  1806                           ;psect for function _main
  1807  0351                     _main:	
  1808                           
  1809                           ;main.c: 22: unsigned char i;
  1810                           ;main.c: 24: SYSTEM_Initialize();
  1811                           
  1812                           ;incstack = 0
  1813                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1814  0351  265A               	fcall	_SYSTEM_Initialize
  1815                           
  1816                           ;main.c: 26: USARTX_change_pol();
  1817  0352  2657               	fcall	_USARTX_change_pol
  1818                           
  1819                           ;main.c: 28: setup_TMR0();
  1820  0353  2633               	fcall	_setup_TMR0
  1821                           
  1822                           ;main.c: 29: start_TX_USART_ISR();
  1823  0354  2624               	fcall	_start_TX_USART_ISR
  1824                           
  1825                           ;main.c: 30: start_RX_USART_ISR();
  1826  0355  25F2               	fcall	_start_RX_USART_ISR
  1827                           
  1828                           ;main.c: 31: start_RCM();
  1829  0356  2653               	fcall	_start_RCM
  1830                           
  1831                           ;main.c: 32: setup_ADC();
  1832  0357  2647               	fcall	_setup_ADC
  1833                           
  1834                           ;main.c: 35: RA5 = 0;
  1835  0358  0020               	movlb	0	; select bank0
  1836  0359  128C               	bcf	12,5	;volatile
  1837                           
  1838                           ;main.c: 36: _delay((unsigned long)((150)*(500000/4000.0)));
  1839  035A  3019               	movlw	25
  1840  035B  0020               	movlb	0	; select bank0
  1841  035C  00CC               	movwf	??_main
  1842  035D  3058               	movlw	88
  1843  035E                     u1677:	
  1844  035E  0B89               	decfsz	9,f
  1845  035F  2B5E               	goto	u1677
  1846  0360  0BCC               	decfsz	??_main,f
  1847  0361  2B5E               	goto	u1677
  1848  0362  0000               	nop
  1849                           
  1850                           ;main.c: 37: RA5 = 1;
  1851  0363  0020               	movlb	0	; select bank0
  1852  0364  168C               	bsf	12,5	;volatile
  1853  0365                     l119:	
  1854                           ;main.c: 109: while(1) {
  1855                           
  1856  0365  0064               	clrwdt	;# 
  1857                           
  1858                           ;main.c: 113: if (TIMER0_flag) {
  1859  0366  0020               	movlb	0	; select bank0
  1860  0367  085D               	movf	_TIMER0_flag,w	;volatile
  1861  0368  1903               	btfsc	3,2
  1862  0369  2B65               	goto	l119
  1863                           
  1864                           ;main.c: 114: TIMER0_flag = 0;
  1865  036A  01DD               	clrf	_TIMER0_flag	;volatile
  1866                           
  1867                           ;main.c: 116: if (USART_rx_index > 10) {
  1868  036B  300B               	movlw	11
  1869  036C  025F               	subwf	_USART_rx_index,w	;volatile
  1870  036D  1C03               	skipc
  1871  036E  2B71               	goto	l3083
  1872                           
  1873                           ;main.c: 117: USART_rx_index = 0;
  1874  036F  01DF               	clrf	_USART_rx_index	;volatile
  1875                           
  1876                           ;main.c: 118: continue;
  1877  0370  2B65               	goto	l119
  1878  0371                     l3083:	
  1879                           
  1880                           ;main.c: 119: }
  1881                           ;main.c: 121: if(USART_rx_index == 0)
  1882  0371  085F               	movf	_USART_rx_index,w	;volatile
  1883  0372  1903               	btfsc	3,2
  1884                           
  1885                           ;main.c: 122: continue;
  1886  0373  2B65               	goto	l119
  1887                           
  1888                           ;main.c: 125: mess_rec_size = USART_rx_index;
  1889  0374  085F               	movf	_USART_rx_index,w	;volatile
  1890  0375  00CC               	movwf	??_main
  1891  0376  084C               	movf	??_main,w
  1892  0377  00E0               	movwf	_mess_rec_size	;volatile
  1893                           
  1894                           ;main.c: 126: USART_rx_index = 0;
  1895  0378  01DF               	clrf	_USART_rx_index	;volatile
  1896                           
  1897                           ;main.c: 128: for (i = 0; i < mess_rec_size; i++)
  1898  0379  01CD               	clrf	main@i
  1899  037A                     l3097:	
  1900  037A  0860               	movf	_mess_rec_size,w	;volatile
  1901  037B  024D               	subwf	main@i,w
  1902  037C  1803               	btfsc	3,0
  1903  037D  2B8F               	goto	l3099
  1904                           
  1905                           ;main.c: 129: mess_rec[i] = USART_rx_data[i];
  1906  037E  084D               	movf	main@i,w
  1907  037F  3E4E               	addlw	(low (_USART_rx_data| 0))& (0+255)
  1908  0380  0086               	movwf	6
  1909  0381  0187               	clrf	7
  1910  0382  0801               	movf	1,w
  1911  0383  00CC               	movwf	??_main
  1912  0384  084D               	movf	main@i,w
  1913  0385  3E61               	addlw	(low (_mess_rec| 0))& (0+255)
  1914  0386  0086               	movwf	6
  1915  0387  0187               	clrf	7
  1916  0388  084C               	movf	??_main,w
  1917  0389  0081               	movwf	1
  1918  038A  3001               	movlw	1
  1919  038B  00CC               	movwf	??_main
  1920  038C  084C               	movf	??_main,w
  1921  038D  07CD               	addwf	main@i,f
  1922  038E  2B7A               	goto	l3097
  1923  038F                     l3099:	
  1924                           
  1925                           ;main.c: 132: mess_handler();
  1926  038F  2447               	fcall	_mess_handler
  1927  0390  2B65               	goto	l119
  1928  0391                     __end_of_main:	
  1929                           
  1930                           	psect	text1
  1931  0624                     __ptext1:	
  1932 ;; *************** function _start_TX_USART_ISR *****************
  1933 ;; Defined at:
  1934 ;;		line 101 in file "USART1823.c"
  1935 ;; Parameters:    Size  Location     Type
  1936 ;;		None
  1937 ;; Auto vars:     Size  Location     Type
  1938 ;;		None
  1939 ;; Return value:  Size  Location     Type
  1940 ;;                  1    wreg      void 
  1941 ;; Registers used:
  1942 ;;		wreg, status,2
  1943 ;; Tracked objects:
  1944 ;;		On entry : 0/0
  1945 ;;		On exit  : 0/0
  1946 ;;		Unchanged: 0/0
  1947 ;; Data sizes:     COMMON   BANK0   BANK1
  1948 ;;      Params:         0       0       0
  1949 ;;      Locals:         0       0       0
  1950 ;;      Temps:          0       0       0
  1951 ;;      Totals:         0       0       0
  1952 ;;Total ram usage:        0 bytes
  1953 ;; Hardware stack levels used:    1
  1954 ;; Hardware stack levels required when called:    2
  1955 ;; This function calls:
  1956 ;;		Nothing
  1957 ;; This function is called by:
  1958 ;;		_main
  1959 ;; This function uses a non-reentrant model
  1960 ;;
  1961                           
  1962                           
  1963                           ;psect for function _start_TX_USART_ISR
  1964  0624                     _start_TX_USART_ISR:	
  1965                           
  1966                           ;USART1823.c: 103: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  1967                           
  1968                           ;incstack = 0
  1969                           ; Regs used in _start_TX_USART_ISR: [wreg+status,2]
  1970  0624  0023               	movlb	3	; select bank3
  1971  0625  151E               	bsf	30,2	;volatile
  1972  0626  159F               	bsf	31,3	;volatile
  1973  0627  019C               	clrf	28	;volatile
  1974  0628  300C               	movlw	12
  1975  0629  009B               	movwf	27	;volatile
  1976                           
  1977                           ;USART1823.c: 104: SYNC = 0;
  1978  062A  121E               	bcf	30,4	;volatile
  1979                           
  1980                           ;USART1823.c: 105: SPEN = 1;
  1981  062B  179D               	bsf	29,7	;volatile
  1982                           
  1983                           ;USART1823.c: 106: TXEN = 1;
  1984  062C  169E               	bsf	30,5	;volatile
  1985                           
  1986                           ;USART1823.c: 108: USART_tx_flag = 0;
  1987  062D  01F2               	clrf	_USART_tx_flag	;volatile
  1988                           
  1989                           ;USART1823.c: 109: USART_tx_index = 0;
  1990  062E  01F3               	clrf	_USART_tx_index	;volatile
  1991                           
  1992                           ;USART1823.c: 110: USART_tx_length = 0;
  1993  062F  01F4               	clrf	_USART_tx_length	;volatile
  1994                           
  1995                           ;USART1823.c: 113: PEIE = 1;
  1996  0630  170B               	bsf	11,6	;volatile
  1997                           
  1998                           ;USART1823.c: 114: GIE = 1;
  1999  0631  178B               	bsf	11,7	;volatile
  2000  0632  0008               	return
  2001  0633                     __end_of_start_TX_USART_ISR:	
  2002                           
  2003                           	psect	text2
  2004  05F2                     __ptext2:	
  2005 ;; *************** function _start_RX_USART_ISR *****************
  2006 ;; Defined at:
  2007 ;;		line 83 in file "USART1823.c"
  2008 ;; Parameters:    Size  Location     Type
  2009 ;;		None
  2010 ;; Auto vars:     Size  Location     Type
  2011 ;;		None
  2012 ;; Return value:  Size  Location     Type
  2013 ;;                  1    wreg      void 
  2014 ;; Registers used:
  2015 ;;		wreg, status,2
  2016 ;; Tracked objects:
  2017 ;;		On entry : 0/0
  2018 ;;		On exit  : 0/0
  2019 ;;		Unchanged: 0/0
  2020 ;; Data sizes:     COMMON   BANK0   BANK1
  2021 ;;      Params:         0       0       0
  2022 ;;      Locals:         0       0       0
  2023 ;;      Temps:          0       0       0
  2024 ;;      Totals:         0       0       0
  2025 ;;Total ram usage:        0 bytes
  2026 ;; Hardware stack levels used:    1
  2027 ;; Hardware stack levels required when called:    2
  2028 ;; This function calls:
  2029 ;;		Nothing
  2030 ;; This function is called by:
  2031 ;;		_main
  2032 ;; This function uses a non-reentrant model
  2033 ;;
  2034                           
  2035                           
  2036                           ;psect for function _start_RX_USART_ISR
  2037  05F2                     _start_RX_USART_ISR:	
  2038                           
  2039                           ;USART1823.c: 86: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  2040                           
  2041                           ;incstack = 0
  2042                           ; Regs used in _start_RX_USART_ISR: [wreg+status,2]
  2043  05F2  0023               	movlb	3	; select bank3
  2044  05F3  151E               	bsf	30,2	;volatile
  2045  05F4  159F               	bsf	31,3	;volatile
  2046  05F5  019C               	clrf	28	;volatile
  2047  05F6  300C               	movlw	12
  2048  05F7  009B               	movwf	27	;volatile
  2049                           
  2050                           ;USART1823.c: 88: SYNC = 0;
  2051  05F8  121E               	bcf	30,4	;volatile
  2052                           
  2053                           ;USART1823.c: 89: SPEN = 1;
  2054  05F9  179D               	bsf	29,7	;volatile
  2055                           
  2056                           ;USART1823.c: 90: CREN = 1;
  2057  05FA  161D               	bsf	29,4	;volatile
  2058                           
  2059                           ;USART1823.c: 92: USART_rx_flag = 0;
  2060  05FB  0020               	movlb	0	; select bank0
  2061  05FC  01DE               	clrf	_USART_rx_flag	;volatile
  2062                           
  2063                           ;USART1823.c: 93: USART_rx_index = 0;
  2064  05FD  01DF               	clrf	_USART_rx_index	;volatile
  2065                           
  2066                           ;USART1823.c: 95: RCIE = 1;
  2067  05FE  0021               	movlb	1	; select bank1
  2068  05FF  1691               	bsf	17,5	;volatile
  2069                           
  2070                           ;USART1823.c: 96: PEIE = 1;
  2071  0600  170B               	bsf	11,6	;volatile
  2072                           
  2073                           ;USART1823.c: 97: GIE = 1;
  2074  0601  178B               	bsf	11,7	;volatile
  2075  0602  0008               	return
  2076  0603                     __end_of_start_RX_USART_ISR:	
  2077                           
  2078                           	psect	text3
  2079  0653                     __ptext3:	
  2080 ;; *************** function _start_RCM *****************
  2081 ;; Defined at:
  2082 ;;		line 4 in file "RCM1823.c"
  2083 ;; Parameters:    Size  Location     Type
  2084 ;;		None
  2085 ;; Auto vars:     Size  Location     Type
  2086 ;;		None
  2087 ;; Return value:  Size  Location     Type
  2088 ;;                  1    wreg      void 
  2089 ;; Registers used:
  2090 ;;		wreg
  2091 ;; Tracked objects:
  2092 ;;		On entry : 0/0
  2093 ;;		On exit  : 0/0
  2094 ;;		Unchanged: 0/0
  2095 ;; Data sizes:     COMMON   BANK0   BANK1
  2096 ;;      Params:         0       0       0
  2097 ;;      Locals:         0       0       0
  2098 ;;      Temps:          0       0       0
  2099 ;;      Totals:         0       0       0
  2100 ;;Total ram usage:        0 bytes
  2101 ;; Hardware stack levels used:    1
  2102 ;; Hardware stack levels required when called:    2
  2103 ;; This function calls:
  2104 ;;		Nothing
  2105 ;; This function is called by:
  2106 ;;		_main
  2107 ;; This function uses a non-reentrant model
  2108 ;;
  2109                           
  2110                           
  2111                           ;psect for function _start_RCM
  2112  0653                     _start_RCM:	
  2113                           
  2114                           ;RCM1823.c: 6: CLKRCON = 0b11010000;
  2115                           
  2116                           ;incstack = 0
  2117                           ; Regs used in _start_RCM: [wreg]
  2118  0653  30D0               	movlw	208
  2119  0654  0027               	movlb	7	; select bank7
  2120  0655  009A               	movwf	26	;volatile
  2121  0656  0008               	return
  2122  0657                     __end_of_start_RCM:	
  2123                           
  2124                           	psect	text4
  2125  0633                     __ptext4:	
  2126 ;; *************** function _setup_TMR0 *****************
  2127 ;; Defined at:
  2128 ;;		line 10 in file "TMR0.c"
  2129 ;; Parameters:    Size  Location     Type
  2130 ;;		None
  2131 ;; Auto vars:     Size  Location     Type
  2132 ;;		None
  2133 ;; Return value:  Size  Location     Type
  2134 ;;                  1    wreg      void 
  2135 ;; Registers used:
  2136 ;;		None
  2137 ;; Tracked objects:
  2138 ;;		On entry : 0/0
  2139 ;;		On exit  : 0/0
  2140 ;;		Unchanged: 0/0
  2141 ;; Data sizes:     COMMON   BANK0   BANK1
  2142 ;;      Params:         0       0       0
  2143 ;;      Locals:         0       0       0
  2144 ;;      Temps:          0       0       0
  2145 ;;      Totals:         0       0       0
  2146 ;;Total ram usage:        0 bytes
  2147 ;; Hardware stack levels used:    1
  2148 ;; Hardware stack levels required when called:    2
  2149 ;; This function calls:
  2150 ;;		Nothing
  2151 ;; This function is called by:
  2152 ;;		_main
  2153 ;; This function uses a non-reentrant model
  2154 ;;
  2155                           
  2156                           
  2157                           ;psect for function _setup_TMR0
  2158  0633                     _setup_TMR0:	
  2159                           
  2160                           ;TMR0.c: 13: PS2 = 0; PS1 = 1; PS0 = 0;
  2161                           
  2162                           ;incstack = 0
  2163                           ; Regs used in _setup_TMR0: []
  2164  0633  0021               	movlb	1	; select bank1
  2165  0634  1115               	bcf	21,2	;volatile
  2166  0635  1495               	bsf	21,1	;volatile
  2167  0636  1015               	bcf	21,0	;volatile
  2168                           
  2169                           ;TMR0.c: 16: PSA = 0;
  2170  0637  1195               	bcf	21,3	;volatile
  2171                           
  2172                           ;TMR0.c: 18: TMR0CS = 0;
  2173  0638  1295               	bcf	21,5	;volatile
  2174  0639  0008               	return
  2175  063A                     __end_of_setup_TMR0:	
  2176                           
  2177                           	psect	text5
  2178  0647                     __ptext5:	
  2179 ;; *************** function _setup_ADC *****************
  2180 ;; Defined at:
  2181 ;;		line 3 in file "ADC1823.c"
  2182 ;; Parameters:    Size  Location     Type
  2183 ;;		None
  2184 ;; Auto vars:     Size  Location     Type
  2185 ;;		None
  2186 ;; Return value:  Size  Location     Type
  2187 ;;                  1    wreg      void 
  2188 ;; Registers used:
  2189 ;;		wreg
  2190 ;; Tracked objects:
  2191 ;;		On entry : 0/0
  2192 ;;		On exit  : 0/0
  2193 ;;		Unchanged: 0/0
  2194 ;; Data sizes:     COMMON   BANK0   BANK1
  2195 ;;      Params:         0       0       0
  2196 ;;      Locals:         0       0       0
  2197 ;;      Temps:          0       0       0
  2198 ;;      Totals:         0       0       0
  2199 ;;Total ram usage:        0 bytes
  2200 ;; Hardware stack levels used:    1
  2201 ;; Hardware stack levels required when called:    2
  2202 ;; This function calls:
  2203 ;;		Nothing
  2204 ;; This function is called by:
  2205 ;;		_main
  2206 ;; This function uses a non-reentrant model
  2207 ;;
  2208                           
  2209                           
  2210                           ;psect for function _setup_ADC
  2211  0647                     _setup_ADC:	
  2212                           
  2213                           ;ADC1823.c: 20: ADCON1 = 0b11110000;
  2214                           
  2215                           ;incstack = 0
  2216                           ; Regs used in _setup_ADC: [wreg]
  2217  0647  30F0               	movlw	240
  2218  0648  0021               	movlb	1	; select bank1
  2219  0649  009E               	movwf	30	;volatile
  2220                           
  2221                           ;ADC1823.c: 21: { ADCON0 = 0b00100100;};
  2222  064A  3024               	movlw	36
  2223  064B  009D               	movwf	29	;volatile
  2224  064C  0008               	return
  2225  064D                     __end_of_setup_ADC:	
  2226                           
  2227                           	psect	text6
  2228  0447                     __ptext6:	
  2229 ;; *************** function _mess_handler *****************
  2230 ;; Defined at:
  2231 ;;		line 11 in file "comm.c"
  2232 ;; Parameters:    Size  Location     Type
  2233 ;;		None
  2234 ;; Auto vars:     Size  Location     Type
  2235 ;;		None
  2236 ;; Return value:  Size  Location     Type
  2237 ;;                  1    wreg      void 
  2238 ;; Registers used:
  2239 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2240 ;; Tracked objects:
  2241 ;;		On entry : 0/0
  2242 ;;		On exit  : 0/0
  2243 ;;		Unchanged: 0/0
  2244 ;; Data sizes:     COMMON   BANK0   BANK1
  2245 ;;      Params:         0       0       0
  2246 ;;      Locals:         0       0       0
  2247 ;;      Temps:          0       1       0
  2248 ;;      Totals:         0       1       0
  2249 ;;Total ram usage:        1 bytes
  2250 ;; Hardware stack levels used:    1
  2251 ;; Hardware stack levels required when called:    5
  2252 ;; This function calls:
  2253 ;;		_calibrate_reader
  2254 ;;		_config_ASIC
  2255 ;;		_lputs_ISR
  2256 ;;		_measure_Impedance
  2257 ;;		_measure_Impedance_SE
  2258 ;;		_measure_Impedance_no_offset
  2259 ;;		_measure_Offset
  2260 ;;		_read_ADC_channels
  2261 ;;		_sweep
  2262 ;; This function is called by:
  2263 ;;		_main
  2264 ;; This function uses a non-reentrant model
  2265 ;;
  2266                           
  2267                           
  2268                           ;psect for function _mess_handler
  2269  0447                     _mess_handler:	
  2270                           
  2271                           ;comm.c: 16: switch (mess_rec[0]) {
  2272                           
  2273                           ;incstack = 0
  2274                           ; Regs used in _mess_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2275  0447  2C60               	goto	l3061
  2276  0448                     l3041:	
  2277                           ;comm.c: 17: case 't':
  2278                           
  2279                           
  2280                           ;comm.c: 18: lputs_ISR(mess_rec,mess_rec_size);
  2281  0448  0020               	movlb	0	; select bank0
  2282  0449  0860               	movf	_mess_rec_size,w	;volatile
  2283  044A  00CB               	movwf	??_mess_handler
  2284  044B  084B               	movf	??_mess_handler,w
  2285  044C  00A0               	movwf	lputs_ISR@length
  2286  044D  3061               	movlw	(low (_mess_rec| 0))& (0+255)
  2287  044E  24DA               	fcall	_lputs_ISR
  2288                           
  2289                           ;comm.c: 19: break;
  2290  044F  0008               	return
  2291  0450                     l3043:	
  2292                           ;comm.c: 21: case 'f':
  2293                           
  2294                           
  2295                           ;comm.c: 22: sweep();
  2296  0450  2120               	fcall	_sweep
  2297                           
  2298                           ;comm.c: 23: break;
  2299  0451  0008               	return
  2300  0452                     l3045:	
  2301                           ;comm.c: 25: case 'c':
  2302                           
  2303                           
  2304                           ;comm.c: 26: config_ASIC();
  2305  0452  25C9               	fcall	_config_ASIC
  2306                           
  2307                           ;comm.c: 27: break;
  2308  0453  0008               	return
  2309  0454                     l3047:	
  2310                           ;comm.c: 29: case 'm':
  2311                           
  2312                           
  2313                           ;comm.c: 30: read_ADC_channels();
  2314  0454  240E               	fcall	_read_ADC_channels
  2315                           
  2316                           ;comm.c: 31: break;
  2317  0455  0008               	return
  2318  0456                     l3049:	
  2319                           ;comm.c: 33: case 'z':
  2320                           
  2321                           
  2322                           ;comm.c: 34: measure_Impedance();
  2323  0456  21BF               	fcall	_measure_Impedance
  2324                           
  2325                           ;comm.c: 35: break;
  2326  0457  0008               	return
  2327  0458                     l3051:	
  2328                           ;comm.c: 37: case 'y':
  2329                           
  2330                           
  2331                           ;comm.c: 38: measure_Impedance_no_offset();
  2332  0458  22E6               	fcall	_measure_Impedance_no_offset
  2333                           
  2334                           ;comm.c: 39: break;
  2335  0459  0008               	return
  2336  045A                     l3053:	
  2337                           ;comm.c: 41: case 'o':
  2338                           
  2339                           
  2340                           ;comm.c: 42: measure_Offset();
  2341  045A  2391               	fcall	_measure_Offset
  2342                           
  2343                           ;comm.c: 43: break;
  2344  045B  0008               	return
  2345  045C                     l3055:	
  2346                           ;comm.c: 45: case 's':
  2347                           
  2348                           
  2349                           ;comm.c: 46: measure_Impedance_SE();
  2350  045C  2255               	fcall	_measure_Impedance_SE
  2351                           
  2352                           ;comm.c: 47: break;
  2353  045D  0008               	return
  2354  045E                     l3057:	
  2355                           ;comm.c: 50: case '&':
  2356                           
  2357                           
  2358                           ;comm.c: 51: calibrate_reader();
  2359  045E  247F               	fcall	_calibrate_reader
  2360                           
  2361                           ;comm.c: 58: }
  2362                           
  2363                           ;comm.c: 57: break;
  2364                           
  2365                           ;comm.c: 56: default:
  2366                           
  2367                           ;comm.c: 52: break;
  2368  045F  0008               	return
  2369  0460                     l3061:	
  2370  0460  0020               	movlb	0	; select bank0
  2371  0461  0861               	movf	_mess_rec,w	;volatile
  2372                           
  2373                           ; Switch size 1, requested type "space"
  2374                           ; Number of cases is 9, Range of values is 38 to 122
  2375                           ; switch strategies available:
  2376                           ; Name         Instructions Cycles
  2377                           ; simple_byte           28    15 (average)
  2378                           ; direct_byte          179     9 (fixed)
  2379                           ; jumptable            263     9 (fixed)
  2380                           ;	Chosen strategy is simple_byte
  2381  0462  3A26               	xorlw	38	; case 38
  2382  0463  1903               	skipnz
  2383  0464  2C5E               	goto	l3057
  2384  0465  3A45               	xorlw	69	; case 99
  2385  0466  1903               	skipnz
  2386  0467  2C52               	goto	l3045
  2387  0468  3A05               	xorlw	5	; case 102
  2388  0469  1903               	skipnz
  2389  046A  2C50               	goto	l3043
  2390  046B  3A0B               	xorlw	11	; case 109
  2391  046C  1903               	skipnz
  2392  046D  2C54               	goto	l3047
  2393  046E  3A02               	xorlw	2	; case 111
  2394  046F  1903               	skipnz
  2395  0470  2C5A               	goto	l3053
  2396  0471  3A1C               	xorlw	28	; case 115
  2397  0472  1903               	skipnz
  2398  0473  2C5C               	goto	l3055
  2399  0474  3A07               	xorlw	7	; case 116
  2400  0475  1903               	skipnz
  2401  0476  2C48               	goto	l3041
  2402  0477  3A0D               	xorlw	13	; case 121
  2403  0478  1903               	skipnz
  2404  0479  2C58               	goto	l3051
  2405  047A  3A03               	xorlw	3	; case 122
  2406  047B  1903               	skipnz
  2407  047C  2C56               	goto	l3049
  2408  047D  2C7E               	goto	l371
  2409  047E                     l371:	
  2410  047E  0008               	return
  2411  047F                     __end_of_mess_handler:	
  2412                           
  2413                           	psect	text7
  2414  0120                     __ptext7:	
  2415 ;; *************** function _sweep *****************
  2416 ;; Defined at:
  2417 ;;		line 441 in file "comm.c"
  2418 ;; Parameters:    Size  Location     Type
  2419 ;;		None
  2420 ;; Auto vars:     Size  Location     Type
  2421 ;;  aux             7   25[BANK0 ] unsigned char [7]
  2422 ;;  asic            2   41[BANK0 ] struct .
  2423 ;;  Q               2   37[BANK0 ] short 
  2424 ;;  I               2   35[BANK0 ] short 
  2425 ;;  ret             1   40[BANK0 ] unsigned char 
  2426 ;;  gain_index      1   39[BANK0 ] unsigned char 
  2427 ;;  count           1   34[BANK0 ] unsigned char 
  2428 ;;  i               1   33[BANK0 ] unsigned char 
  2429 ;;  freq_index      1   32[BANK0 ] unsigned char 
  2430 ;;  check           1   24[BANK0 ] unsigned char 
  2431 ;; Return value:  Size  Location     Type
  2432 ;;                  1    wreg      void 
  2433 ;; Registers used:
  2434 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2435 ;; Tracked objects:
  2436 ;;		On entry : 0/0
  2437 ;;		On exit  : 0/0
  2438 ;;		Unchanged: 0/0
  2439 ;; Data sizes:     COMMON   BANK0   BANK1
  2440 ;;      Params:         0       0       0
  2441 ;;      Locals:         0      19       0
  2442 ;;      Temps:          0       2       0
  2443 ;;      Totals:         0      21       0
  2444 ;;Total ram usage:       21 bytes
  2445 ;; Hardware stack levels used:    1
  2446 ;; Hardware stack levels required when called:    4
  2447 ;; This function calls:
  2448 ;;		_calculate_checksum
  2449 ;;		_lputs_ISR
  2450 ;;		_measure
  2451 ;;		_setFreq
  2452 ;;		_setGain
  2453 ;; This function is called by:
  2454 ;;		_mess_handler
  2455 ;; This function uses a non-reentrant model
  2456 ;;
  2457                           
  2458                           
  2459                           ;psect for function _sweep
  2460  0120                     _sweep:	
  2461                           
  2462                           ;comm.c: 443: unsigned char gain_index;
  2463                           ;comm.c: 444: unsigned char freq_index;
  2464                           ;comm.c: 445: unsigned char i, ret, count;
  2465                           ;comm.c: 446: short I,Q;
  2466                           ;comm.c: 447: unsigned char aux[7], check;
  2467                           ;comm.c: 449: BIO3 asic;
  2468                           ;comm.c: 450: asic.datashort = 0;
  2469                           
  2470                           ;incstack = 0
  2471                           ; Regs used in _sweep: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2472  0120  0020               	movlb	0	; select bank0
  2473  0121  01C9               	clrf	sweep@asic
  2474  0122  01CA               	clrf	sweep@asic+1
  2475                           
  2476                           ;comm.c: 453: freq_index = 10;
  2477  0123  300A               	movlw	10
  2478  0124  00B6               	movwf	??_sweep
  2479  0125  0836               	movf	??_sweep,w
  2480  0126  00C0               	movwf	sweep@freq_index
  2481                           
  2482                           ;comm.c: 454: gain_index = 0;
  2483  0127  01C7               	clrf	sweep@gain_index
  2484                           
  2485                           ;comm.c: 455: setGain(&asic,gain_index);
  2486  0128  0847               	movf	sweep@gain_index,w
  2487  0129  00B6               	movwf	??_sweep
  2488  012A  0836               	movf	??_sweep,w
  2489  012B  00A0               	movwf	setGain@gain_index
  2490  012C  3049               	movlw	(low (sweep@asic| 0))& (0+255)
  2491  012D  23D0               	fcall	_setGain
  2492                           
  2493                           ;comm.c: 458: for (i = 0; i < 11; i++) {
  2494  012E  0020               	movlb	0	; select bank0
  2495  012F  01C1               	clrf	sweep@i
  2496  0130                     L1:	
  2497  0130  300B               	movlw	11
  2498  0131  0241               	subwf	sweep@i,w
  2499  0132  1803               	btfsc	3,0
  2500  0133  0008               	return
  2501                           
  2502                           ;comm.c: 459: setFreq(&asic,freq_index);
  2503  0134  0840               	movf	sweep@freq_index,w
  2504  0135  00B6               	movwf	??_sweep
  2505  0136  0836               	movf	??_sweep,w
  2506  0137  00A0               	movwf	setFreq@freq_index
  2507  0138  3049               	movlw	(low (sweep@asic| 0))& (0+255)
  2508  0139  2505               	fcall	_setFreq
  2509                           
  2510                           ;comm.c: 462: count = 0;
  2511  013A  0020               	movlb	0	; select bank0
  2512  013B  01C2               	clrf	sweep@count
  2513                           
  2514                           ;comm.c: 463: ret = 0;
  2515  013C  01C8               	clrf	sweep@ret
  2516  013D                     l2717:	
  2517                           ;comm.c: 465: do {
  2518                           
  2519                           
  2520                           ;comm.c: 467: ret = measure(&I,&Q,asic);
  2521  013D  3045               	movlw	(low (sweep@Q| 0))& (0+255)
  2522  013E  00B6               	movwf	??_sweep
  2523  013F  0836               	movf	??_sweep,w
  2524  0140  00A6               	movwf	measure@Q
  2525  0141  084A               	movf	sweep@asic+1,w
  2526  0142  00A8               	movwf	measure@asic+1
  2527  0143  0849               	movf	sweep@asic,w
  2528  0144  00A7               	movwf	measure@asic
  2529  0145  3043               	movlw	(low (sweep@I| 0))& (0+255)
  2530  0146  206B               	fcall	_measure
  2531  0147  0020               	movlb	0	; select bank0
  2532  0148  00B7               	movwf	??_sweep+1
  2533  0149  0837               	movf	??_sweep+1,w
  2534  014A  00C8               	movwf	sweep@ret
  2535                           
  2536                           ;comm.c: 469: if (ret == 1) {
  2537  014B  0348               	decf	sweep@ret,w
  2538  014C  1D03               	btfss	3,2
  2539  014D  295F               	goto	l2733
  2540                           
  2541                           ;comm.c: 471: if (count == 2) break;
  2542  014E  3002               	movlw	2
  2543  014F  0642               	xorwf	sweep@count,w
  2544  0150  1903               	btfsc	3,2
  2545  0151  297A               	goto	l2749
  2546                           
  2547                           ;comm.c: 472: count = ret;
  2548  0152  0848               	movf	sweep@ret,w
  2549  0153  00B6               	movwf	??_sweep
  2550  0154  0836               	movf	??_sweep,w
  2551  0155  00C2               	movwf	sweep@count
  2552                           
  2553                           ;comm.c: 474: if (gain_index < 7) {
  2554  0156  3007               	movlw	7
  2555  0157  0247               	subwf	sweep@gain_index,w
  2556  0158  1803               	skipnc
  2557  0159  297A               	goto	l2749
  2558                           
  2559                           ;comm.c: 475: gain_index++;
  2560  015A  3001               	movlw	1
  2561  015B  00B6               	movwf	??_sweep
  2562  015C  0836               	movf	??_sweep,w
  2563  015D  07C7               	addwf	sweep@gain_index,f
  2564  015E  2970               	goto	L2
  2565  015F                     l2733:	
  2566                           ;comm.c: 483: } else if (ret == 2) {
  2567                           
  2568                           ;comm.c: 479: }
  2569                           ;comm.c: 481: continue;
  2570                           
  2571                           ;comm.c: 478: break;
  2572                           
  2573                           ;comm.c: 477: } else {
  2574                           
  2575                           ;comm.c: 476: setGain(&asic,gain_index);
  2576                           
  2577  015F  3002               	movlw	2
  2578  0160  0020               	movlb	0	; select bank0
  2579  0161  0648               	xorwf	sweep@ret,w
  2580  0162  1D03               	btfss	3,2
  2581  0163  2976               	goto	l2747
  2582                           
  2583                           ;comm.c: 485: if (count == 1) break;
  2584  0164  0342               	decf	sweep@count,w
  2585  0165  1903               	btfsc	3,2
  2586  0166  297A               	goto	l2749
  2587                           
  2588                           ;comm.c: 486: count = ret;
  2589  0167  0848               	movf	sweep@ret,w
  2590  0168  00B6               	movwf	??_sweep
  2591  0169  0836               	movf	??_sweep,w
  2592  016A  00C2               	movwf	sweep@count
  2593                           
  2594                           ;comm.c: 488: if (gain_index > 0) {
  2595  016B  0847               	movf	sweep@gain_index,w
  2596  016C  1903               	btfsc	3,2
  2597  016D  297A               	goto	l2749
  2598                           
  2599                           ;comm.c: 489: gain_index--;
  2600  016E  3001               	movlw	1
  2601  016F  02C7               	subwf	sweep@gain_index,f
  2602  0170                     L2:	
  2603                           
  2604                           ;comm.c: 490: setGain(&asic,gain_index);
  2605  0170  0847               	movf	sweep@gain_index,w
  2606  0171  00B6               	movwf	??_sweep
  2607  0172  0836               	movf	??_sweep,w
  2608  0173  00A0               	movwf	setGain@gain_index
  2609  0174  3049               	movlw	(low (sweep@asic| 0))& (0+255)
  2610  0175  23D0               	fcall	_setGain
  2611  0176                     l2747:	
  2612                           ;comm.c: 493: }
  2613                           ;comm.c: 495: continue;
  2614                           
  2615                           ;comm.c: 492: break;
  2616                           
  2617                           ;comm.c: 491: } else {
  2618                           
  2619                           
  2620                           ;comm.c: 496: }
  2621                           ;comm.c: 498: } while (ret);
  2622  0176  0020               	movlb	0	; select bank0
  2623  0177  0848               	movf	sweep@ret,w
  2624  0178  1D03               	btfss	3,2
  2625  0179  293D               	goto	l2717
  2626  017A                     l2749:	
  2627                           
  2628                           ;comm.c: 504: ret = (freq_index << 4) & 0xf0;
  2629  017A  0020               	movlb	0	; select bank0
  2630  017B  0840               	movf	sweep@freq_index,w
  2631  017C  00B6               	movwf	??_sweep
  2632  017D  3003               	movlw	3
  2633  017E                     u1605:	
  2634  017E  35B6               	lslf	??_sweep,f
  2635  017F  3EFF               	addlw	-1
  2636  0180  1D03               	skipz
  2637  0181  297E               	goto	u1605
  2638  0182  3536               	lslf	??_sweep,w
  2639  0183  39F0               	andlw	240
  2640  0184  00B7               	movwf	??_sweep+1
  2641  0185  0837               	movf	??_sweep+1,w
  2642  0186  00C8               	movwf	sweep@ret
  2643                           
  2644                           ;comm.c: 505: ret |= (gain_index & 0xff);
  2645  0187  0847               	movf	sweep@gain_index,w
  2646  0188  00B6               	movwf	??_sweep
  2647  0189  0836               	movf	??_sweep,w
  2648  018A  04C8               	iorwf	sweep@ret,f
  2649                           
  2650                           ;comm.c: 507: aux[0] = 'f';
  2651  018B  3066               	movlw	102
  2652  018C  00B6               	movwf	??_sweep
  2653  018D  0836               	movf	??_sweep,w
  2654  018E  00B9               	movwf	sweep@aux
  2655                           
  2656                           ;comm.c: 508: aux[1] = (unsigned char)(I & 0xff);
  2657  018F  0843               	movf	sweep@I,w
  2658  0190  00B6               	movwf	??_sweep
  2659  0191  0836               	movf	??_sweep,w
  2660  0192  00BA               	movwf	sweep@aux+1
  2661                           
  2662                           ;comm.c: 509: aux[2] = (unsigned char)((I >> 8) & 0xff);
  2663  0193  0844               	movf	sweep@I+1,w
  2664  0194  00B6               	movwf	??_sweep
  2665  0195  0836               	movf	??_sweep,w
  2666  0196  00BB               	movwf	sweep@aux+2
  2667                           
  2668                           ;comm.c: 510: aux[3] = (unsigned char)(Q & 0xff);
  2669  0197  0845               	movf	sweep@Q,w
  2670  0198  00B6               	movwf	??_sweep
  2671  0199  0836               	movf	??_sweep,w
  2672  019A  00BC               	movwf	sweep@aux+3
  2673                           
  2674                           ;comm.c: 511: aux[4] = (unsigned char)((Q >> 8) & 0xff);
  2675  019B  0846               	movf	sweep@Q+1,w
  2676  019C  00B6               	movwf	??_sweep
  2677  019D  0836               	movf	??_sweep,w
  2678  019E  00BD               	movwf	sweep@aux+4
  2679                           
  2680                           ;comm.c: 512: aux[5] = ret;
  2681  019F  0848               	movf	sweep@ret,w
  2682  01A0  00B6               	movwf	??_sweep
  2683  01A1  0836               	movf	??_sweep,w
  2684  01A2  00BE               	movwf	sweep@aux+5
  2685                           
  2686                           ;comm.c: 514: check = calculate_checksum(aux,6);
  2687  01A3  3006               	movlw	6
  2688  01A4  00B6               	movwf	??_sweep
  2689  01A5  0836               	movf	??_sweep,w
  2690  01A6  00A0               	movwf	calculate_checksum@num
  2691  01A7  3039               	movlw	(low (sweep@aux| 0))& (0+255)
  2692  01A8  2597               	fcall	_calculate_checksum
  2693  01A9  0020               	movlb	0	; select bank0
  2694  01AA  00B7               	movwf	??_sweep+1
  2695  01AB  0837               	movf	??_sweep+1,w
  2696  01AC  00B8               	movwf	sweep@check
  2697                           
  2698                           ;comm.c: 515: aux[6] = check;
  2699  01AD  0838               	movf	sweep@check,w
  2700  01AE  00B6               	movwf	??_sweep
  2701  01AF  0836               	movf	??_sweep,w
  2702  01B0  00BF               	movwf	sweep@aux+6
  2703                           
  2704                           ;comm.c: 518: lputs_ISR(aux,7);
  2705  01B1  3007               	movlw	7
  2706  01B2  00B6               	movwf	??_sweep
  2707  01B3  0836               	movf	??_sweep,w
  2708  01B4  00A0               	movwf	lputs_ISR@length
  2709  01B5  3039               	movlw	(low (sweep@aux| 0))& (0+255)
  2710  01B6  24DA               	fcall	_lputs_ISR
  2711                           
  2712                           ;comm.c: 520: freq_index--;
  2713  01B7  3001               	movlw	1
  2714  01B8  0020               	movlb	0	; select bank0
  2715  01B9  02C0               	subwf	sweep@freq_index,f
  2716  01BA  3001               	movlw	1
  2717  01BB  00B6               	movwf	??_sweep
  2718  01BC  0836               	movf	??_sweep,w
  2719  01BD  07C1               	addwf	sweep@i,f
  2720  01BE  2930               	goto	L1
  2721  01BF                     __end_of_sweep:	
  2722                           
  2723                           	psect	text8
  2724  03D0                     __ptext8:	
  2725 ;; *************** function _setGain *****************
  2726 ;; Defined at:
  2727 ;;		line 218 in file "bio3.c"
  2728 ;; Parameters:    Size  Location     Type
  2729 ;;  asic            1    wreg     PTR struct .
  2730 ;;		 -> sweep@asic(2), 
  2731 ;;  gain_index      1    0[BANK0 ] unsigned char 
  2732 ;; Auto vars:     Size  Location     Type
  2733 ;;  asic            1    3[BANK0 ] PTR struct .
  2734 ;;		 -> sweep@asic(2), 
  2735 ;;  aux             1    2[BANK0 ] struct .
  2736 ;; Return value:  Size  Location     Type
  2737 ;;                  1    wreg      void 
  2738 ;; Registers used:
  2739 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, pclath
  2740 ;; Tracked objects:
  2741 ;;		On entry : 0/0
  2742 ;;		On exit  : 0/0
  2743 ;;		Unchanged: 0/0
  2744 ;; Data sizes:     COMMON   BANK0   BANK1
  2745 ;;      Params:         0       1       0
  2746 ;;      Locals:         0       2       0
  2747 ;;      Temps:          0       1       0
  2748 ;;      Totals:         0       4       0
  2749 ;;Total ram usage:        4 bytes
  2750 ;; Hardware stack levels used:    1
  2751 ;; Hardware stack levels required when called:    2
  2752 ;; This function calls:
  2753 ;;		Nothing
  2754 ;; This function is called by:
  2755 ;;		_sweep
  2756 ;; This function uses a non-reentrant model
  2757 ;;
  2758                           
  2759                           
  2760                           ;psect for function _setGain
  2761  03D0                     _setGain:	
  2762                           
  2763                           ;incstack = 0
  2764                           ; Regs used in _setGain: [wreg-fsr1h+pclath]
  2765                           ;setGain@asic stored from wreg
  2766  03D0  0020               	movlb	0	; select bank0
  2767  03D1  00A3               	movwf	setGain@asic
  2768                           
  2769                           ;bio3.c: 220: RADIO_gain aux;
  2770                           ;bio3.c: 221: aux.data = gains[gain_index];
  2771  03D2  0820               	movf	setGain@gain_index,w
  2772  03D3  3EEA               	addlw	low (_gains| (0+32768))
  2773  03D4  0084               	movwf	4
  2774  03D5  3085               	movlw	high (_gains| (0+32768))
  2775  03D6  1803               	skipnc
  2776  03D7  3E01               	addlw	1
  2777  03D8  0085               	movwf	5
  2778  03D9  0800               	movf	0,w	;code access
  2779  03DA  00A1               	movwf	??_setGain
  2780  03DB  0821               	movf	??_setGain,w
  2781  03DC  00A2               	movwf	setGain@aux
  2782                           
  2783                           ;bio3.c: 223: asic->data_bits.GD0 = aux.data_bits.GD0;
  2784  03DD  0823               	movf	setGain@asic,w
  2785  03DE  0086               	movwf	6
  2786  03DF  0187               	clrf	7
  2787  03E0  1101               	bcf	1,2
  2788  03E1  1822               	btfsc	setGain@aux,0
  2789  03E2  1501               	bsf	1,2
  2790                           
  2791                           ;bio3.c: 224: asic->data_bits.GD1 = aux.data_bits.GD1;
  2792  03E3  0020               	movlb	0	; select bank0
  2793  03E4  0823               	movf	setGain@asic,w
  2794  03E5  0086               	movwf	6
  2795  03E6  0187               	clrf	7
  2796  03E7  1181               	bcf	1,3
  2797  03E8  18A2               	btfsc	setGain@aux,1
  2798  03E9  1581               	bsf	1,3
  2799                           
  2800                           ;bio3.c: 225: asic->data_bits.GD2 = aux.data_bits.GD2;
  2801  03EA  0020               	movlb	0	; select bank0
  2802  03EB  0823               	movf	setGain@asic,w
  2803  03EC  0086               	movwf	6
  2804  03ED  0187               	clrf	7
  2805  03EE  1201               	bcf	1,4
  2806  03EF  1922               	btfsc	setGain@aux,2
  2807  03F0  1601               	bsf	1,4
  2808                           
  2809                           ;bio3.c: 226: asic->data_bits.GS0 = aux.data_bits.GS0;
  2810  03F1  0020               	movlb	0	; select bank0
  2811  03F2  0823               	movf	setGain@asic,w
  2812  03F3  0086               	movwf	6
  2813  03F4  0187               	clrf	7
  2814  03F5  1381               	bcf	1,7
  2815  03F6  19A2               	btfsc	setGain@aux,3
  2816  03F7  1781               	bsf	1,7
  2817                           
  2818                           ;bio3.c: 227: asic->data_bits.GS1 = aux.data_bits.GS1;
  2819  03F8  0020               	movlb	0	; select bank0
  2820  03F9  0A23               	incf	setGain@asic,w
  2821  03FA  0086               	movwf	6
  2822  03FB  0187               	clrf	7
  2823  03FC  1001               	bcf	1,0
  2824  03FD  1A22               	btfsc	setGain@aux,4
  2825  03FE  1401               	bsf	1,0
  2826                           
  2827                           ;bio3.c: 228: asic->data_bits.GS2 = aux.data_bits.GS2;
  2828  03FF  0020               	movlb	0	; select bank0
  2829  0400  0A23               	incf	setGain@asic,w
  2830  0401  0086               	movwf	6
  2831  0402  0187               	clrf	7
  2832  0403  1081               	bcf	1,1
  2833  0404  1AA2               	btfsc	setGain@aux,5
  2834  0405  1481               	bsf	1,1
  2835                           
  2836                           ;bio3.c: 229: asic->data_bits.GS3 = aux.data_bits.GS3;
  2837  0406  0020               	movlb	0	; select bank0
  2838  0407  0A23               	incf	setGain@asic,w
  2839  0408  0086               	movwf	6
  2840  0409  0187               	clrf	7
  2841  040A  1101               	bcf	1,2
  2842  040B  1B22               	btfsc	setGain@aux,6
  2843  040C  1501               	bsf	1,2
  2844  040D  0008               	return
  2845  040E                     __end_of_setGain:	
  2846                           
  2847                           	psect	text9
  2848  0505                     __ptext9:	
  2849 ;; *************** function _setFreq *****************
  2850 ;; Defined at:
  2851 ;;		line 232 in file "bio3.c"
  2852 ;; Parameters:    Size  Location     Type
  2853 ;;  asic            1    wreg     PTR struct .
  2854 ;;		 -> sweep@asic(2), 
  2855 ;;  freq_index      1    0[BANK0 ] unsigned char 
  2856 ;; Auto vars:     Size  Location     Type
  2857 ;;  asic            1    2[BANK0 ] PTR struct .
  2858 ;;		 -> sweep@asic(2), 
  2859 ;;  aux             1    3[BANK0 ] struct .
  2860 ;; Return value:  Size  Location     Type
  2861 ;;                  1    wreg      void 
  2862 ;; Registers used:
  2863 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, pclath
  2864 ;; Tracked objects:
  2865 ;;		On entry : 0/0
  2866 ;;		On exit  : 0/0
  2867 ;;		Unchanged: 0/0
  2868 ;; Data sizes:     COMMON   BANK0   BANK1
  2869 ;;      Params:         0       1       0
  2870 ;;      Locals:         0       2       0
  2871 ;;      Temps:          0       1       0
  2872 ;;      Totals:         0       4       0
  2873 ;;Total ram usage:        4 bytes
  2874 ;; Hardware stack levels used:    1
  2875 ;; Hardware stack levels required when called:    2
  2876 ;; This function calls:
  2877 ;;		Nothing
  2878 ;; This function is called by:
  2879 ;;		_sweep
  2880 ;; This function uses a non-reentrant model
  2881 ;;
  2882                           
  2883                           
  2884                           ;psect for function _setFreq
  2885  0505                     _setFreq:	
  2886                           
  2887                           ;incstack = 0
  2888                           ; Regs used in _setFreq: [wreg-fsr1h+pclath]
  2889                           ;setFreq@asic stored from wreg
  2890  0505  0020               	movlb	0	; select bank0
  2891  0506  00A2               	movwf	setFreq@asic
  2892                           
  2893                           ;bio3.c: 234: RADIO_freq aux;
  2894                           ;bio3.c: 235: aux.data = freqs[freq_index];
  2895  0507  0820               	movf	setFreq@freq_index,w
  2896  0508  3EDF               	addlw	low (_freqs| (0+32768))
  2897  0509  0084               	movwf	4
  2898  050A  3085               	movlw	high (_freqs| (0+32768))
  2899  050B  1803               	skipnc
  2900  050C  3E01               	addlw	1
  2901  050D  0085               	movwf	5
  2902  050E  0800               	movf	0,w	;code access
  2903  050F  00A1               	movwf	??_setFreq
  2904  0510  0821               	movf	??_setFreq,w
  2905  0511  00A3               	movwf	setFreq@aux
  2906                           
  2907                           ;bio3.c: 237: asic->data_bits.F0 = aux.data_bits.F0;
  2908  0512  0A22               	incf	setFreq@asic,w
  2909  0513  0086               	movwf	6
  2910  0514  0187               	clrf	7
  2911  0515  1201               	bcf	1,4
  2912  0516  1823               	btfsc	setFreq@aux,0
  2913  0517  1601               	bsf	1,4
  2914                           
  2915                           ;bio3.c: 238: asic->data_bits.F1 = aux.data_bits.F1;
  2916  0518  0020               	movlb	0	; select bank0
  2917  0519  0A22               	incf	setFreq@asic,w
  2918  051A  0086               	movwf	6
  2919  051B  0187               	clrf	7
  2920  051C  1281               	bcf	1,5
  2921  051D  18A3               	btfsc	setFreq@aux,1
  2922  051E  1681               	bsf	1,5
  2923                           
  2924                           ;bio3.c: 239: asic->data_bits.F2 = aux.data_bits.F2;
  2925  051F  0020               	movlb	0	; select bank0
  2926  0520  0A22               	incf	setFreq@asic,w
  2927  0521  0086               	movwf	6
  2928  0522  0187               	clrf	7
  2929  0523  1301               	bcf	1,6
  2930  0524  1923               	btfsc	setFreq@aux,2
  2931  0525  1701               	bsf	1,6
  2932                           
  2933                           ;bio3.c: 240: asic->data_bits.F3 = aux.data_bits.F3;
  2934  0526  0020               	movlb	0	; select bank0
  2935  0527  0A22               	incf	setFreq@asic,w
  2936  0528  0086               	movwf	6
  2937  0529  0187               	clrf	7
  2938  052A  1381               	bcf	1,7
  2939  052B  19A3               	btfsc	setFreq@aux,3
  2940  052C  1781               	bsf	1,7
  2941  052D  0008               	return
  2942  052E                     __end_of_setFreq:	
  2943                           
  2944                           	psect	text10
  2945  006B                     __ptext10:	
  2946 ;; *************** function _measure *****************
  2947 ;; Defined at:
  2948 ;;		line 528 in file "comm.c"
  2949 ;; Parameters:    Size  Location     Type
  2950 ;;  I               1    wreg     PTR short 
  2951 ;;		 -> sweep@I(2), 
  2952 ;;  Q               1    6[BANK0 ] PTR short 
  2953 ;;		 -> sweep@Q(2), 
  2954 ;;  asic            2    7[BANK0 ] struct .
  2955 ;; Auto vars:     Size  Location     Type
  2956 ;;  I               1   15[BANK0 ] PTR short 
  2957 ;;		 -> sweep@I(2), 
  2958 ;;  aux1            2   20[BANK0 ] short 
  2959 ;;  aux2            2   18[BANK0 ] short 
  2960 ;;  value           2   16[BANK0 ] unsigned short 
  2961 ;;  offset          2   13[BANK0 ] unsigned short 
  2962 ;; Return value:  Size  Location     Type
  2963 ;;                  1    wreg      unsigned char 
  2964 ;; Registers used:
  2965 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2966 ;; Tracked objects:
  2967 ;;		On entry : 0/0
  2968 ;;		On exit  : 0/0
  2969 ;;		Unchanged: 0/0
  2970 ;; Data sizes:     COMMON   BANK0   BANK1
  2971 ;;      Params:         0       3       0
  2972 ;;      Locals:         0       9       0
  2973 ;;      Temps:          0       4       0
  2974 ;;      Totals:         0      16       0
  2975 ;;Total ram usage:       16 bytes
  2976 ;; Hardware stack levels used:    1
  2977 ;; Hardware stack levels required when called:    3
  2978 ;; This function calls:
  2979 ;;		_ADC_5
  2980 ;;		_BIO_config
  2981 ;; This function is called by:
  2982 ;;		_sweep
  2983 ;; This function uses a non-reentrant model
  2984 ;;
  2985                           
  2986                           
  2987                           ;psect for function _measure
  2988  006B                     _measure:	
  2989                           
  2990                           ;incstack = 0
  2991                           ; Regs used in _measure: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2992                           ;measure@I stored from wreg
  2993  006B  0020               	movlb	0	; select bank0
  2994  006C  00AF               	movwf	measure@I
  2995                           
  2996                           ;comm.c: 530: unsigned short offset, value;
  2997                           ;comm.c: 531: short aux1,aux2;
  2998                           ;comm.c: 535: asic.data_bits.CE = 0;
  2999  006D  1327               	bcf	measure@asic,6
  3000                           
  3001                           ;comm.c: 536: BIO_config(asic);
  3002  006E  0828               	movf	measure@asic+1,w
  3003  006F  00A1               	movwf	BIO_config@conf+1
  3004  0070  0827               	movf	measure@asic,w
  3005  0071  00A0               	movwf	BIO_config@conf
  3006  0072  24AF               	fcall	_BIO_config
  3007                           
  3008                           ;comm.c: 537: _delay((unsigned long)((20)*(500000/4000.0)));
  3009  0073  3004               	movlw	4
  3010  0074  0020               	movlb	0	; select bank0
  3011  0075  00A9               	movwf	??_measure
  3012  0076  303D               	movlw	61
  3013  0077                     u1687:	
  3014  0077  0B89               	decfsz	9,f
  3015  0078  2877               	goto	u1687
  3016  0079  0BA9               	decfsz	??_measure,f
  3017  007A  2877               	goto	u1687
  3018  007B  3200               	nop2
  3019                           
  3020                           ;comm.c: 539: offset = ADC_5();
  3021  007C  252E               	fcall	_ADC_5
  3022  007D  0020               	movlb	0	; select bank0
  3023  007E  0821               	movf	?_ADC_5+1,w
  3024  007F  00AE               	movwf	measure@offset+1
  3025  0080  0820               	movf	?_ADC_5,w
  3026  0081  00AD               	movwf	measure@offset
  3027                           
  3028                           ;comm.c: 542: asic.data_bits.CE = 1;
  3029  0082  1727               	bsf	measure@asic,6
  3030                           
  3031                           ;comm.c: 543: asic.data_bits.IQ = 0;
  3032  0083  11A8               	bcf	measure@asic+1,3
  3033                           
  3034                           ;comm.c: 545: BIO_config(asic);
  3035  0084  0828               	movf	measure@asic+1,w
  3036  0085  00A1               	movwf	BIO_config@conf+1
  3037  0086  0827               	movf	measure@asic,w
  3038  0087  00A0               	movwf	BIO_config@conf
  3039  0088  24AF               	fcall	_BIO_config
  3040                           
  3041                           ;comm.c: 546: _delay((unsigned long)((20)*(500000/4000.0)));
  3042  0089  3004               	movlw	4
  3043  008A  0020               	movlb	0	; select bank0
  3044  008B  00A9               	movwf	??_measure
  3045  008C  303D               	movlw	61
  3046  008D                     u1697:	
  3047  008D  0B89               	decfsz	9,f
  3048  008E  288D               	goto	u1697
  3049  008F  0BA9               	decfsz	??_measure,f
  3050  0090  288D               	goto	u1697
  3051  0091  3200               	nop2
  3052                           
  3053                           ;comm.c: 548: value = ADC_5();
  3054  0092  252E               	fcall	_ADC_5
  3055  0093  0020               	movlb	0	; select bank0
  3056  0094  0821               	movf	?_ADC_5+1,w
  3057  0095  00B1               	movwf	measure@value+1
  3058  0096  0820               	movf	?_ADC_5,w
  3059  0097  00B0               	movwf	measure@value
  3060                           
  3061                           ;comm.c: 549: *I = (value - offset);
  3062  0098  092D               	comf	measure@offset,w
  3063  0099  00A9               	movwf	??_measure
  3064  009A  092E               	comf	measure@offset+1,w
  3065  009B  00AA               	movwf	??_measure+1
  3066  009C  0AA9               	incf	??_measure,f
  3067  009D  1903               	skipnz
  3068  009E  0AAA               	incf	??_measure+1,f
  3069  009F  0830               	movf	measure@value,w
  3070  00A0  0729               	addwf	??_measure,w
  3071  00A1  00AB               	movwf	??_measure+2
  3072  00A2  0831               	movf	measure@value+1,w
  3073  00A3  3D2A               	addwfc	??_measure+1,w
  3074  00A4  00AC               	movwf	??_measure+3
  3075  00A5  082F               	movf	measure@I,w
  3076  00A6  0086               	movwf	6
  3077  00A7  0187               	clrf	7
  3078  00A8  082B               	movf	??_measure+2,w
  3079  00A9  3FC0               	movwi [0]fsr1
  3080  00AA  082C               	movf	??_measure+3,w
  3081  00AB  3FC1               	movwi [1]fsr1
  3082                           
  3083                           ;comm.c: 550: aux1 = *I;
  3084  00AC  082F               	movf	measure@I,w
  3085  00AD  0086               	movwf	6
  3086  00AE  0187               	clrf	7
  3087  00AF  3F40               	moviw [0]fsr1
  3088  00B0  00B4               	movwf	measure@aux1
  3089  00B1  3F41               	moviw [1]fsr1
  3090  00B2  00B5               	movwf	measure@aux1+1
  3091                           
  3092                           ;comm.c: 552: if (aux1 < 0) {
  3093  00B3  1FB5               	btfss	measure@aux1+1,7
  3094  00B4  28BA               	goto	l2635
  3095                           
  3096                           ;comm.c: 553: aux1 = -aux1;
  3097  00B5  09B4               	comf	measure@aux1,f
  3098  00B6  09B5               	comf	measure@aux1+1,f
  3099  00B7  0AB4               	incf	measure@aux1,f
  3100  00B8  1903               	skipnz
  3101  00B9  0AB5               	incf	measure@aux1+1,f
  3102  00BA                     l2635:	
  3103                           
  3104                           ;comm.c: 554: }
  3105                           ;comm.c: 559: asic.data_bits.IQ = 1;
  3106  00BA  15A8               	bsf	measure@asic+1,3
  3107                           
  3108                           ;comm.c: 561: BIO_config(asic);
  3109  00BB  0828               	movf	measure@asic+1,w
  3110  00BC  00A1               	movwf	BIO_config@conf+1
  3111  00BD  0827               	movf	measure@asic,w
  3112  00BE  00A0               	movwf	BIO_config@conf
  3113  00BF  24AF               	fcall	_BIO_config
  3114                           
  3115                           ;comm.c: 562: _delay((unsigned long)((20)*(500000/4000.0)));
  3116  00C0  3004               	movlw	4
  3117  00C1  0020               	movlb	0	; select bank0
  3118  00C2  00A9               	movwf	??_measure
  3119  00C3  303D               	movlw	61
  3120  00C4                     u1707:	
  3121  00C4  0B89               	decfsz	9,f
  3122  00C5  28C4               	goto	u1707
  3123  00C6  0BA9               	decfsz	??_measure,f
  3124  00C7  28C4               	goto	u1707
  3125  00C8  3200               	nop2
  3126                           
  3127                           ;comm.c: 564: value = ADC_5();
  3128  00C9  252E               	fcall	_ADC_5
  3129  00CA  0020               	movlb	0	; select bank0
  3130  00CB  0821               	movf	?_ADC_5+1,w
  3131  00CC  00B1               	movwf	measure@value+1
  3132  00CD  0820               	movf	?_ADC_5,w
  3133  00CE  00B0               	movwf	measure@value
  3134                           
  3135                           ;comm.c: 565: *Q = (value - offset);
  3136  00CF  092D               	comf	measure@offset,w
  3137  00D0  00A9               	movwf	??_measure
  3138  00D1  092E               	comf	measure@offset+1,w
  3139  00D2  00AA               	movwf	??_measure+1
  3140  00D3  0AA9               	incf	??_measure,f
  3141  00D4  1903               	skipnz
  3142  00D5  0AAA               	incf	??_measure+1,f
  3143  00D6  0830               	movf	measure@value,w
  3144  00D7  0729               	addwf	??_measure,w
  3145  00D8  00AB               	movwf	??_measure+2
  3146  00D9  0831               	movf	measure@value+1,w
  3147  00DA  3D2A               	addwfc	??_measure+1,w
  3148  00DB  00AC               	movwf	??_measure+3
  3149  00DC  0826               	movf	measure@Q,w
  3150  00DD  0086               	movwf	6
  3151  00DE  0187               	clrf	7
  3152  00DF  082B               	movf	??_measure+2,w
  3153  00E0  3FC0               	movwi [0]fsr1
  3154  00E1  082C               	movf	??_measure+3,w
  3155  00E2  3FC1               	movwi [1]fsr1
  3156                           
  3157                           ;comm.c: 566: aux2 = *Q;
  3158  00E3  0826               	movf	measure@Q,w
  3159  00E4  0086               	movwf	6
  3160  00E5  0187               	clrf	7
  3161  00E6  3F40               	moviw [0]fsr1
  3162  00E7  00B2               	movwf	measure@aux2
  3163  00E8  3F41               	moviw [1]fsr1
  3164  00E9  00B3               	movwf	measure@aux2+1
  3165                           
  3166                           ;comm.c: 568: if (aux2 < 0) {
  3167  00EA  1FB3               	btfss	measure@aux2+1,7
  3168  00EB  28F1               	goto	l2651
  3169                           
  3170                           ;comm.c: 569: aux2 = -aux2;
  3171  00EC  09B2               	comf	measure@aux2,f
  3172  00ED  09B3               	comf	measure@aux2+1,f
  3173  00EE  0AB2               	incf	measure@aux2,f
  3174  00EF  1903               	skipnz
  3175  00F0  0AB3               	incf	measure@aux2+1,f
  3176  00F1                     l2651:	
  3177                           
  3178                           ;comm.c: 570: }
  3179                           ;comm.c: 572: if (aux2 > aux1) {
  3180  00F1  0835               	movf	measure@aux1+1,w
  3181  00F2  3A80               	xorlw	128
  3182  00F3  00A9               	movwf	??_measure
  3183  00F4  0833               	movf	measure@aux2+1,w
  3184  00F5  3A80               	xorlw	128
  3185  00F6  0229               	subwf	??_measure,w
  3186  00F7  1D03               	skipz
  3187  00F8  28FB               	goto	u1495
  3188  00F9  0832               	movf	measure@aux2,w
  3189  00FA  0234               	subwf	measure@aux1,w
  3190  00FB                     u1495:	
  3191  00FB  1803               	skipnc
  3192  00FC  2902               	goto	l424
  3193                           
  3194                           ;comm.c: 573: aux1 = aux2;
  3195  00FD  0020               	movlb	0	; select bank0
  3196  00FE  0833               	movf	measure@aux2+1,w
  3197  00FF  00B5               	movwf	measure@aux1+1
  3198  0100  0832               	movf	measure@aux2,w
  3199  0101  00B4               	movwf	measure@aux1
  3200  0102                     l424:	
  3201                           
  3202                           ;comm.c: 574: }
  3203                           ;comm.c: 576: if (aux1 > 370) {
  3204  0102  0020               	movlb	0	; select bank0
  3205  0103  0835               	movf	measure@aux1+1,w
  3206  0104  3A80               	xorlw	128
  3207  0105  00A9               	movwf	??_measure
  3208  0106  3081               	movlw	129
  3209  0107  0229               	subwf	??_measure,w
  3210  0108  1D03               	skipz
  3211  0109  290C               	goto	u1505
  3212  010A  3073               	movlw	115
  3213  010B  0234               	subwf	measure@aux1,w
  3214  010C                     u1505:	
  3215  010C  1C03               	skipc
  3216  010D  2910               	goto	l2661
  3217                           
  3218                           ;comm.c: 577: return 2;
  3219  010E  3002               	movlw	2
  3220  010F  0008               	return
  3221  0110                     l2661:	
  3222                           ;comm.c: 578: } else if (aux1 < 86) {
  3223                           
  3224  0110  0020               	movlb	0	; select bank0
  3225  0111  0835               	movf	measure@aux1+1,w
  3226  0112  3A80               	xorlw	128
  3227  0113  00A9               	movwf	??_measure
  3228  0114  3080               	movlw	128
  3229  0115  0229               	subwf	??_measure,w
  3230  0116  1D03               	skipz
  3231  0117  291A               	goto	u1515
  3232  0118  3056               	movlw	86
  3233  0119  0234               	subwf	measure@aux1,w
  3234  011A                     u1515:	
  3235  011A  1803               	skipnc
  3236  011B  291E               	goto	l2667
  3237                           
  3238                           ;comm.c: 579: return 1;
  3239  011C  3001               	movlw	1
  3240  011D  0008               	return
  3241  011E                     l2667:	
  3242                           
  3243                           ;comm.c: 580: }
  3244                           ;comm.c: 582: return 0;
  3245  011E  3000               	movlw	0
  3246  011F  0008               	return
  3247  0120                     __end_of_measure:	
  3248                           
  3249                           	psect	text11
  3250  040E                     __ptext11:	
  3251 ;; *************** function _read_ADC_channels *****************
  3252 ;; Defined at:
  3253 ;;		line 91 in file "comm.c"
  3254 ;; Parameters:    Size  Location     Type
  3255 ;;		None
  3256 ;; Auto vars:     Size  Location     Type
  3257 ;;  aux             7    7[BANK0 ] unsigned char [7]
  3258 ;;  value3          2   18[BANK0 ] unsigned short 
  3259 ;;  value2          2   16[BANK0 ] unsigned short 
  3260 ;;  value1          2   14[BANK0 ] unsigned short 
  3261 ;; Return value:  Size  Location     Type
  3262 ;;                  1    wreg      void 
  3263 ;; Registers used:
  3264 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3265 ;; Tracked objects:
  3266 ;;		On entry : 0/0
  3267 ;;		On exit  : 0/0
  3268 ;;		Unchanged: 0/0
  3269 ;; Data sizes:     COMMON   BANK0   BANK1
  3270 ;;      Params:         0       0       0
  3271 ;;      Locals:         0      13       0
  3272 ;;      Temps:          0       1       0
  3273 ;;      Totals:         0      14       0
  3274 ;;Total ram usage:       14 bytes
  3275 ;; Hardware stack levels used:    1
  3276 ;; Hardware stack levels required when called:    4
  3277 ;; This function calls:
  3278 ;;		_ADC_2
  3279 ;;		_ADC_4
  3280 ;;		_ADC_5
  3281 ;;		_lputs_ISR
  3282 ;; This function is called by:
  3283 ;;		_mess_handler
  3284 ;; This function uses a non-reentrant model
  3285 ;;
  3286                           
  3287                           
  3288                           ;psect for function _read_ADC_channels
  3289  040E                     _read_ADC_channels:	
  3290                           
  3291                           ;comm.c: 93: unsigned char aux[7];
  3292                           ;comm.c: 94: unsigned short value1,value2,value3;
  3293                           ;comm.c: 97: value1 = ADC_2();
  3294                           
  3295                           ;incstack = 0
  3296                           ; Regs used in _read_ADC_channels: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3297  040E  2574               	fcall	_ADC_2
  3298  040F  0020               	movlb	0	; select bank0
  3299  0410  0821               	movf	?_ADC_2+1,w
  3300  0411  00AF               	movwf	read_ADC_channels@value1+1
  3301  0412  0820               	movf	?_ADC_2,w
  3302  0413  00AE               	movwf	read_ADC_channels@value1
  3303                           
  3304                           ;comm.c: 99: value2 = ADC_4();
  3305  0414  2551               	fcall	_ADC_4
  3306  0415  0020               	movlb	0	; select bank0
  3307  0416  0821               	movf	?_ADC_4+1,w
  3308  0417  00B1               	movwf	read_ADC_channels@value2+1
  3309  0418  0820               	movf	?_ADC_4,w
  3310  0419  00B0               	movwf	read_ADC_channels@value2
  3311                           
  3312                           ;comm.c: 101: value3 = ADC_5();
  3313  041A  252E               	fcall	_ADC_5
  3314  041B  0020               	movlb	0	; select bank0
  3315  041C  0821               	movf	?_ADC_5+1,w
  3316  041D  00B3               	movwf	read_ADC_channels@value3+1
  3317  041E  0820               	movf	?_ADC_5,w
  3318  041F  00B2               	movwf	read_ADC_channels@value3
  3319                           
  3320                           ;comm.c: 102: { ADCON0 = 0b00100100;};
  3321  0420  3024               	movlw	36
  3322  0421  0021               	movlb	1	; select bank1
  3323  0422  009D               	movwf	29	;volatile
  3324                           
  3325                           ;comm.c: 104: aux[0] = 'm';
  3326  0423  306D               	movlw	109
  3327  0424  0020               	movlb	0	; select bank0
  3328  0425  00A6               	movwf	??_read_ADC_channels
  3329  0426  0826               	movf	??_read_ADC_channels,w
  3330  0427  00A7               	movwf	read_ADC_channels@aux
  3331                           
  3332                           ;comm.c: 105: aux[1] = (unsigned char)(value1 & 0xff);
  3333  0428  082E               	movf	read_ADC_channels@value1,w
  3334  0429  00A6               	movwf	??_read_ADC_channels
  3335  042A  0826               	movf	??_read_ADC_channels,w
  3336  042B  00A8               	movwf	read_ADC_channels@aux+1
  3337                           
  3338                           ;comm.c: 106: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  3339  042C  082F               	movf	read_ADC_channels@value1+1,w
  3340  042D  00A6               	movwf	??_read_ADC_channels
  3341  042E  0826               	movf	??_read_ADC_channels,w
  3342  042F  00A9               	movwf	read_ADC_channels@aux+2
  3343                           
  3344                           ;comm.c: 107: aux[3] = (unsigned char)(value2 & 0xff);
  3345  0430  0830               	movf	read_ADC_channels@value2,w
  3346  0431  00A6               	movwf	??_read_ADC_channels
  3347  0432  0826               	movf	??_read_ADC_channels,w
  3348  0433  00AA               	movwf	read_ADC_channels@aux+3
  3349                           
  3350                           ;comm.c: 108: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  3351  0434  0831               	movf	read_ADC_channels@value2+1,w
  3352  0435  00A6               	movwf	??_read_ADC_channels
  3353  0436  0826               	movf	??_read_ADC_channels,w
  3354  0437  00AB               	movwf	read_ADC_channels@aux+4
  3355                           
  3356                           ;comm.c: 109: aux[5] = (unsigned char)(value3 & 0xff);
  3357  0438  0832               	movf	read_ADC_channels@value3,w
  3358  0439  00A6               	movwf	??_read_ADC_channels
  3359  043A  0826               	movf	??_read_ADC_channels,w
  3360  043B  00AC               	movwf	read_ADC_channels@aux+5
  3361                           
  3362                           ;comm.c: 110: aux[6] = (unsigned char)((value3 >> 8) & 0xff);
  3363  043C  0833               	movf	read_ADC_channels@value3+1,w
  3364  043D  00A6               	movwf	??_read_ADC_channels
  3365  043E  0826               	movf	??_read_ADC_channels,w
  3366  043F  00AD               	movwf	read_ADC_channels@aux+6
  3367                           
  3368                           ;comm.c: 112: lputs_ISR(aux,7);
  3369  0440  3007               	movlw	7
  3370  0441  00A6               	movwf	??_read_ADC_channels
  3371  0442  0826               	movf	??_read_ADC_channels,w
  3372  0443  00A0               	movwf	lputs_ISR@length
  3373  0444  3027               	movlw	(low (read_ADC_channels@aux| 0))& (0+255)
  3374  0445  24DA               	fcall	_lputs_ISR
  3375  0446  0008               	return
  3376  0447                     __end_of_read_ADC_channels:	
  3377                           
  3378                           	psect	text12
  3379  0391                     __ptext12:	
  3380 ;; *************** function _measure_Offset *****************
  3381 ;; Defined at:
  3382 ;;		line 265 in file "comm.c"
  3383 ;; Parameters:    Size  Location     Type
  3384 ;;		None
  3385 ;; Auto vars:     Size  Location     Type
  3386 ;;  aux             5    7[BANK0 ] unsigned char [5]
  3387 ;;  asic            2   16[BANK0 ] struct .
  3388 ;;  value2          2   14[BANK0 ] unsigned short 
  3389 ;;  value1          2   12[BANK0 ] unsigned short 
  3390 ;; Return value:  Size  Location     Type
  3391 ;;                  1    wreg      void 
  3392 ;; Registers used:
  3393 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3394 ;; Tracked objects:
  3395 ;;		On entry : 0/0
  3396 ;;		On exit  : 0/0
  3397 ;;		Unchanged: 0/0
  3398 ;; Data sizes:     COMMON   BANK0   BANK1
  3399 ;;      Params:         0       0       0
  3400 ;;      Locals:         0      11       0
  3401 ;;      Temps:          0       1       0
  3402 ;;      Totals:         0      12       0
  3403 ;;Total ram usage:       12 bytes
  3404 ;; Hardware stack levels used:    1
  3405 ;; Hardware stack levels required when called:    4
  3406 ;; This function calls:
  3407 ;;		_ADC_2
  3408 ;;		_ADC_4
  3409 ;;		_BIO_config
  3410 ;;		_lputs_ISR
  3411 ;; This function is called by:
  3412 ;;		_mess_handler
  3413 ;; This function uses a non-reentrant model
  3414 ;;
  3415                           
  3416                           
  3417                           ;psect for function _measure_Offset
  3418  0391                     _measure_Offset:	
  3419                           
  3420                           ;comm.c: 267: unsigned char aux[5];
  3421                           ;comm.c: 268: unsigned short value1,value2;
  3422                           ;comm.c: 271: BIO3 asic;
  3423                           ;comm.c: 277: aux[0] = 'o';
  3424                           
  3425                           ;incstack = 0
  3426                           ; Regs used in _measure_Offset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3427  0391  306F               	movlw	111
  3428  0392  0020               	movlb	0	; select bank0
  3429  0393  00A6               	movwf	??_measure_Offset
  3430  0394  0826               	movf	??_measure_Offset,w
  3431  0395  00A7               	movwf	measure_Offset@aux
  3432                           
  3433                           ;comm.c: 280: asic.data[0] = (unsigned short)(mess_rec[1]);
  3434  0396  0862               	movf	_mess_rec+1,w	;volatile
  3435  0397  00A6               	movwf	??_measure_Offset
  3436  0398  0826               	movf	??_measure_Offset,w
  3437  0399  00B0               	movwf	measure_Offset@asic
  3438                           
  3439                           ;comm.c: 281: asic.data[1] = (unsigned short)(mess_rec[2]);
  3440  039A  0863               	movf	_mess_rec+2,w	;volatile
  3441  039B  00A6               	movwf	??_measure_Offset
  3442  039C  0826               	movf	??_measure_Offset,w
  3443  039D  00B1               	movwf	measure_Offset@asic+1
  3444                           
  3445                           ;comm.c: 284: asic.data_bits.CE = 0;
  3446  039E  1330               	bcf	measure_Offset@asic,6
  3447                           
  3448                           ;comm.c: 285: BIO_config(asic);
  3449  039F  0831               	movf	measure_Offset@asic+1,w
  3450  03A0  00A1               	movwf	BIO_config@conf+1
  3451  03A1  0830               	movf	measure_Offset@asic,w
  3452  03A2  00A0               	movwf	BIO_config@conf
  3453  03A3  24AF               	fcall	_BIO_config
  3454                           
  3455                           ;comm.c: 298: _delay((unsigned long)((20)*(500000/4000.0)));
  3456  03A4  3004               	movlw	4
  3457  03A5  0020               	movlb	0	; select bank0
  3458  03A6  00A6               	movwf	??_measure_Offset
  3459  03A7  303D               	movlw	61
  3460  03A8                     u1717:	
  3461  03A8  0B89               	decfsz	9,f
  3462  03A9  2BA8               	goto	u1717
  3463  03AA  0BA6               	decfsz	??_measure_Offset,f
  3464  03AB  2BA8               	goto	u1717
  3465  03AC  3200               	nop2
  3466                           
  3467                           ;comm.c: 300: value1 = ADC_2();
  3468  03AD  2574               	fcall	_ADC_2
  3469  03AE  0020               	movlb	0	; select bank0
  3470  03AF  0821               	movf	?_ADC_2+1,w
  3471  03B0  00AD               	movwf	measure_Offset@value1+1
  3472  03B1  0820               	movf	?_ADC_2,w
  3473  03B2  00AC               	movwf	measure_Offset@value1
  3474                           
  3475                           ;comm.c: 301: value2 = ADC_4();
  3476  03B3  2551               	fcall	_ADC_4
  3477  03B4  0020               	movlb	0	; select bank0
  3478  03B5  0821               	movf	?_ADC_4+1,w
  3479  03B6  00AF               	movwf	measure_Offset@value2+1
  3480  03B7  0820               	movf	?_ADC_4,w
  3481  03B8  00AE               	movwf	measure_Offset@value2
  3482                           
  3483                           ;comm.c: 303: aux[1] = (unsigned char)(value1 & 0xff);
  3484  03B9  082C               	movf	measure_Offset@value1,w
  3485  03BA  00A6               	movwf	??_measure_Offset
  3486  03BB  0826               	movf	??_measure_Offset,w
  3487  03BC  00A8               	movwf	measure_Offset@aux+1
  3488                           
  3489                           ;comm.c: 304: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  3490  03BD  082D               	movf	measure_Offset@value1+1,w
  3491  03BE  00A6               	movwf	??_measure_Offset
  3492  03BF  0826               	movf	??_measure_Offset,w
  3493  03C0  00A9               	movwf	measure_Offset@aux+2
  3494                           
  3495                           ;comm.c: 305: aux[3] = (unsigned char)(value2 & 0xff);
  3496  03C1  082E               	movf	measure_Offset@value2,w
  3497  03C2  00A6               	movwf	??_measure_Offset
  3498  03C3  0826               	movf	??_measure_Offset,w
  3499  03C4  00AA               	movwf	measure_Offset@aux+3
  3500                           
  3501                           ;comm.c: 306: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  3502  03C5  082F               	movf	measure_Offset@value2+1,w
  3503  03C6  00A6               	movwf	??_measure_Offset
  3504  03C7  0826               	movf	??_measure_Offset,w
  3505  03C8  00AB               	movwf	measure_Offset@aux+4
  3506                           
  3507                           ;comm.c: 309: lputs_ISR(aux,5);
  3508  03C9  3005               	movlw	5
  3509  03CA  00A6               	movwf	??_measure_Offset
  3510  03CB  0826               	movf	??_measure_Offset,w
  3511  03CC  00A0               	movwf	lputs_ISR@length
  3512  03CD  3027               	movlw	(low (measure_Offset@aux| 0))& (0+255)
  3513  03CE  24DA               	fcall	_lputs_ISR
  3514  03CF  0008               	return
  3515  03D0                     __end_of_measure_Offset:	
  3516                           
  3517                           	psect	text13
  3518  02E6                     __ptext13:	
  3519 ;; *************** function _measure_Impedance_no_offset *****************
  3520 ;; Defined at:
  3521 ;;		line 200 in file "comm.c"
  3522 ;; Parameters:    Size  Location     Type
  3523 ;;		None
  3524 ;; Auto vars:     Size  Location     Type
  3525 ;;  aux            13    7[BANK0 ] unsigned char [13]
  3526 ;;  asic            2   24[BANK0 ] struct .
  3527 ;;  value2          2   22[BANK0 ] unsigned short 
  3528 ;;  value1          2   20[BANK0 ] unsigned short 
  3529 ;;  value3          2    0        unsigned short 
  3530 ;; Return value:  Size  Location     Type
  3531 ;;                  1    wreg      void 
  3532 ;; Registers used:
  3533 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3534 ;; Tracked objects:
  3535 ;;		On entry : 0/0
  3536 ;;		On exit  : 0/0
  3537 ;;		Unchanged: 0/0
  3538 ;; Data sizes:     COMMON   BANK0   BANK1
  3539 ;;      Params:         0       0       0
  3540 ;;      Locals:         0      19       0
  3541 ;;      Temps:          0       1       0
  3542 ;;      Totals:         0      20       0
  3543 ;;Total ram usage:       20 bytes
  3544 ;; Hardware stack levels used:    1
  3545 ;; Hardware stack levels required when called:    4
  3546 ;; This function calls:
  3547 ;;		_ADC_2
  3548 ;;		_ADC_4
  3549 ;;		_BIO_config
  3550 ;;		_lputs_ISR
  3551 ;; This function is called by:
  3552 ;;		_mess_handler
  3553 ;; This function uses a non-reentrant model
  3554 ;;
  3555                           
  3556                           
  3557                           ;psect for function _measure_Impedance_no_offset
  3558  02E6                     _measure_Impedance_no_offset:	
  3559                           
  3560                           ;comm.c: 202: unsigned char aux[13];
  3561                           ;comm.c: 203: unsigned short value1,value2,value3;
  3562                           ;comm.c: 206: BIO3 asic;
  3563                           ;comm.c: 211: aux[0] = 'y';
  3564                           
  3565                           ;incstack = 0
  3566                           ; Regs used in _measure_Impedance_no_offset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  3567  02E6  3079               	movlw	121
  3568  02E7  0020               	movlb	0	; select bank0
  3569  02E8  00A6               	movwf	??_measure_Impedance_no_offset
  3570  02E9  0826               	movf	??_measure_Impedance_no_offset,w
  3571  02EA  00A7               	movwf	measure_Impedance_no_offset@aux
  3572                           
  3573                           ;comm.c: 214: asic.data[0] = (unsigned short)(mess_rec[1]);
  3574  02EB  0862               	movf	_mess_rec+1,w	;volatile
  3575  02EC  00A6               	movwf	??_measure_Impedance_no_offset
  3576  02ED  0826               	movf	??_measure_Impedance_no_offset,w
  3577  02EE  00B8               	movwf	measure_Impedance_no_offset@asic
  3578                           
  3579                           ;comm.c: 215: asic.data[1] = (unsigned short)(mess_rec[2]);
  3580  02EF  0863               	movf	_mess_rec+2,w	;volatile
  3581  02F0  00A6               	movwf	??_measure_Impedance_no_offset
  3582  02F1  0826               	movf	??_measure_Impedance_no_offset,w
  3583  02F2  00B9               	movwf	measure_Impedance_no_offset@asic+1
  3584                           
  3585                           ;comm.c: 225: asic.data_bits.CE = 1;
  3586  02F3  1738               	bsf	measure_Impedance_no_offset@asic,6
  3587                           
  3588                           ;comm.c: 226: asic.data_bits.IQ = 0;
  3589  02F4  11B9               	bcf	measure_Impedance_no_offset@asic+1,3
  3590                           
  3591                           ;comm.c: 229: BIO_config(asic);
  3592  02F5  0839               	movf	measure_Impedance_no_offset@asic+1,w
  3593  02F6  00A1               	movwf	BIO_config@conf+1
  3594  02F7  0838               	movf	measure_Impedance_no_offset@asic,w
  3595  02F8  00A0               	movwf	BIO_config@conf
  3596  02F9  24AF               	fcall	_BIO_config
  3597                           
  3598                           ;comm.c: 233: _delay((unsigned long)((20)*(500000/4000.0)));
  3599  02FA  3004               	movlw	4
  3600  02FB  0020               	movlb	0	; select bank0
  3601  02FC  00A6               	movwf	??_measure_Impedance_no_offset
  3602  02FD  303D               	movlw	61
  3603  02FE                     u1727:	
  3604  02FE  0B89               	decfsz	9,f
  3605  02FF  2AFE               	goto	u1727
  3606  0300  0BA6               	decfsz	??_measure_Impedance_no_offset,f
  3607  0301  2AFE               	goto	u1727
  3608  0302  3200               	nop2
  3609                           
  3610                           ;comm.c: 235: value1 = ADC_2();
  3611  0303  2574               	fcall	_ADC_2
  3612  0304  0020               	movlb	0	; select bank0
  3613  0305  0821               	movf	?_ADC_2+1,w
  3614  0306  00B5               	movwf	measure_Impedance_no_offset@value1+1
  3615  0307  0820               	movf	?_ADC_2,w
  3616  0308  00B4               	movwf	measure_Impedance_no_offset@value1
  3617                           
  3618                           ;comm.c: 236: value2 = ADC_4();
  3619  0309  2551               	fcall	_ADC_4
  3620  030A  0020               	movlb	0	; select bank0
  3621  030B  0821               	movf	?_ADC_4+1,w
  3622  030C  00B7               	movwf	measure_Impedance_no_offset@value2+1
  3623  030D  0820               	movf	?_ADC_4,w
  3624  030E  00B6               	movwf	measure_Impedance_no_offset@value2
  3625                           
  3626                           ;comm.c: 238: aux[1] = (unsigned char)(value1 & 0xff);
  3627  030F  0834               	movf	measure_Impedance_no_offset@value1,w
  3628  0310  00A6               	movwf	??_measure_Impedance_no_offset
  3629  0311  0826               	movf	??_measure_Impedance_no_offset,w
  3630  0312  00A8               	movwf	measure_Impedance_no_offset@aux+1
  3631                           
  3632                           ;comm.c: 239: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  3633  0313  0835               	movf	measure_Impedance_no_offset@value1+1,w
  3634  0314  00A6               	movwf	??_measure_Impedance_no_offset
  3635  0315  0826               	movf	??_measure_Impedance_no_offset,w
  3636  0316  00A9               	movwf	measure_Impedance_no_offset@aux+2
  3637                           
  3638                           ;comm.c: 240: aux[3] = (unsigned char)(value2 & 0xff);
  3639  0317  0836               	movf	measure_Impedance_no_offset@value2,w
  3640  0318  00A6               	movwf	??_measure_Impedance_no_offset
  3641  0319  0826               	movf	??_measure_Impedance_no_offset,w
  3642  031A  00AA               	movwf	measure_Impedance_no_offset@aux+3
  3643                           
  3644                           ;comm.c: 241: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  3645  031B  0837               	movf	measure_Impedance_no_offset@value2+1,w
  3646  031C  00A6               	movwf	??_measure_Impedance_no_offset
  3647  031D  0826               	movf	??_measure_Impedance_no_offset,w
  3648  031E  00AB               	movwf	measure_Impedance_no_offset@aux+4
  3649                           
  3650                           ;comm.c: 244: asic.data_bits.IQ = 1;
  3651  031F  15B9               	bsf	measure_Impedance_no_offset@asic+1,3
  3652                           
  3653                           ;comm.c: 247: BIO_config(asic);
  3654  0320  0839               	movf	measure_Impedance_no_offset@asic+1,w
  3655  0321  00A1               	movwf	BIO_config@conf+1
  3656  0322  0838               	movf	measure_Impedance_no_offset@asic,w
  3657  0323  00A0               	movwf	BIO_config@conf
  3658  0324  24AF               	fcall	_BIO_config
  3659                           
  3660                           ;comm.c: 251: _delay((unsigned long)((20)*(500000/4000.0)));
  3661  0325  3004               	movlw	4
  3662  0326  0020               	movlb	0	; select bank0
  3663  0327  00A6               	movwf	??_measure_Impedance_no_offset
  3664  0328  303D               	movlw	61
  3665  0329                     u1737:	
  3666  0329  0B89               	decfsz	9,f
  3667  032A  2B29               	goto	u1737
  3668  032B  0BA6               	decfsz	??_measure_Impedance_no_offset,f
  3669  032C  2B29               	goto	u1737
  3670  032D  3200               	nop2
  3671                           
  3672                           ;comm.c: 253: value1 = ADC_2();
  3673  032E  2574               	fcall	_ADC_2
  3674  032F  0020               	movlb	0	; select bank0
  3675  0330  0821               	movf	?_ADC_2+1,w
  3676  0331  00B5               	movwf	measure_Impedance_no_offset@value1+1
  3677  0332  0820               	movf	?_ADC_2,w
  3678  0333  00B4               	movwf	measure_Impedance_no_offset@value1
  3679                           
  3680                           ;comm.c: 254: value2 = ADC_4();
  3681  0334  2551               	fcall	_ADC_4
  3682  0335  0020               	movlb	0	; select bank0
  3683  0336  0821               	movf	?_ADC_4+1,w
  3684  0337  00B7               	movwf	measure_Impedance_no_offset@value2+1
  3685  0338  0820               	movf	?_ADC_4,w
  3686  0339  00B6               	movwf	measure_Impedance_no_offset@value2
  3687                           
  3688                           ;comm.c: 256: aux[5] = (unsigned char)(value1 & 0xff);
  3689  033A  0834               	movf	measure_Impedance_no_offset@value1,w
  3690  033B  00A6               	movwf	??_measure_Impedance_no_offset
  3691  033C  0826               	movf	??_measure_Impedance_no_offset,w
  3692  033D  00AC               	movwf	measure_Impedance_no_offset@aux+5
  3693                           
  3694                           ;comm.c: 257: aux[6] = (unsigned char)((value1 >> 8) & 0xff);
  3695  033E  0835               	movf	measure_Impedance_no_offset@value1+1,w
  3696  033F  00A6               	movwf	??_measure_Impedance_no_offset
  3697  0340  0826               	movf	??_measure_Impedance_no_offset,w
  3698  0341  00AD               	movwf	measure_Impedance_no_offset@aux+6
  3699                           
  3700                           ;comm.c: 258: aux[7] = (unsigned char)(value2 & 0xff);
  3701  0342  0836               	movf	measure_Impedance_no_offset@value2,w
  3702  0343  00A6               	movwf	??_measure_Impedance_no_offset
  3703  0344  0826               	movf	??_measure_Impedance_no_offset,w
  3704  0345  00AE               	movwf	measure_Impedance_no_offset@aux+7
  3705                           
  3706                           ;comm.c: 259: aux[8] = (unsigned char)((value2 >> 8) & 0xff);
  3707  0346  0837               	movf	measure_Impedance_no_offset@value2+1,w
  3708  0347  00A6               	movwf	??_measure_Impedance_no_offset
  3709  0348  0826               	movf	??_measure_Impedance_no_offset,w
  3710  0349  00AF               	movwf	measure_Impedance_no_offset@aux+8
  3711                           
  3712                           ;comm.c: 262: lputs_ISR(aux,9);
  3713  034A  3009               	movlw	9
  3714  034B  00A6               	movwf	??_measure_Impedance_no_offset
  3715  034C  0826               	movf	??_measure_Impedance_no_offset,w
  3716  034D  00A0               	movwf	lputs_ISR@length
  3717  034E  3027               	movlw	(low (measure_Impedance_no_offset@aux| 0))& (0+255)
  3718  034F  24DA               	fcall	_lputs_ISR
  3719  0350  0008               	return
  3720  0351                     __end_of_measure_Impedance_no_offset:	
  3721                           
  3722                           	psect	text14
  3723  0255                     __ptext14:	
  3724 ;; *************** function _measure_Impedance_SE *****************
  3725 ;; Defined at:
  3726 ;;		line 314 in file "comm.c"
  3727 ;; Parameters:    Size  Location     Type
  3728 ;;		None
  3729 ;; Auto vars:     Size  Location     Type
  3730 ;;  aux             8    8[BANK0 ] unsigned char [8]
  3731 ;;  asic            2   19[BANK0 ] struct .
  3732 ;;  value1          2   17[BANK0 ] unsigned short 
  3733 ;;  check           1   16[BANK0 ] unsigned char 
  3734 ;; Return value:  Size  Location     Type
  3735 ;;                  1    wreg      void 
  3736 ;; Registers used:
  3737 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3738 ;; Tracked objects:
  3739 ;;		On entry : 0/0
  3740 ;;		On exit  : 0/0
  3741 ;;		Unchanged: 0/0
  3742 ;; Data sizes:     COMMON   BANK0   BANK1
  3743 ;;      Params:         0       0       0
  3744 ;;      Locals:         0      13       0
  3745 ;;      Temps:          0       2       0
  3746 ;;      Totals:         0      15       0
  3747 ;;Total ram usage:       15 bytes
  3748 ;; Hardware stack levels used:    1
  3749 ;; Hardware stack levels required when called:    4
  3750 ;; This function calls:
  3751 ;;		_ADC_5
  3752 ;;		_BIO_config
  3753 ;;		_calculate_checksum
  3754 ;;		_lputs_ISR
  3755 ;; This function is called by:
  3756 ;;		_mess_handler
  3757 ;; This function uses a non-reentrant model
  3758 ;;
  3759                           
  3760                           
  3761                           ;psect for function _measure_Impedance_SE
  3762  0255                     _measure_Impedance_SE:	
  3763                           
  3764                           ;comm.c: 316: unsigned char aux[8], check;
  3765                           ;comm.c: 318: unsigned short value1;
  3766                           ;comm.c: 321: BIO3 asic;
  3767                           ;comm.c: 328: check = calculate_checksum(mess_rec,4);
  3768                           
  3769                           ;incstack = 0
  3770                           ; Regs used in _measure_Impedance_SE: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3771  0255  3004               	movlw	4
  3772  0256  0020               	movlb	0	; select bank0
  3773  0257  00A6               	movwf	??_measure_Impedance_SE
  3774  0258  0826               	movf	??_measure_Impedance_SE,w
  3775  0259  00A0               	movwf	calculate_checksum@num
  3776  025A  3061               	movlw	(low (_mess_rec| 0))& (0+255)
  3777  025B  2597               	fcall	_calculate_checksum
  3778  025C  0020               	movlb	0	; select bank0
  3779  025D  00A7               	movwf	??_measure_Impedance_SE+1
  3780  025E  0827               	movf	??_measure_Impedance_SE+1,w
  3781  025F  00B0               	movwf	measure_Impedance_SE@check
  3782                           
  3783                           ;comm.c: 329: if (check) {
  3784  0260  0830               	movf	measure_Impedance_SE@check,w
  3785  0261  1903               	btfsc	3,2
  3786  0262  2A6C               	goto	l2925
  3787                           
  3788                           ;comm.c: 330: aux[0] = 'e';
  3789  0263  3065               	movlw	101
  3790  0264  00A6               	movwf	??_measure_Impedance_SE
  3791  0265  0826               	movf	??_measure_Impedance_SE,w
  3792  0266  00A8               	movwf	measure_Impedance_SE@aux
  3793                           
  3794                           ;comm.c: 331: lputs_ISR(aux,1);
  3795  0267  01A0               	clrf	lputs_ISR@length
  3796  0268  0AA0               	incf	lputs_ISR@length,f
  3797  0269  3028               	movlw	(low (measure_Impedance_SE@aux| 0))& (0+255)
  3798  026A  24DA               	fcall	_lputs_ISR
  3799                           
  3800                           ;comm.c: 332: return;
  3801  026B  0008               	return
  3802  026C                     l2925:	
  3803                           
  3804                           ;comm.c: 333: }
  3805                           ;comm.c: 336: aux[0] = 's';
  3806  026C  3073               	movlw	115
  3807  026D  0020               	movlb	0	; select bank0
  3808  026E  00A6               	movwf	??_measure_Impedance_SE
  3809  026F  0826               	movf	??_measure_Impedance_SE,w
  3810  0270  00A8               	movwf	measure_Impedance_SE@aux
  3811                           
  3812                           ;comm.c: 339: asic.data[0] = (unsigned short)(mess_rec[1]);
  3813  0271  0862               	movf	_mess_rec+1,w	;volatile
  3814  0272  00A6               	movwf	??_measure_Impedance_SE
  3815  0273  0826               	movf	??_measure_Impedance_SE,w
  3816  0274  00B3               	movwf	measure_Impedance_SE@asic
  3817                           
  3818                           ;comm.c: 340: asic.data[1] = (unsigned short)(mess_rec[2]);
  3819  0275  0863               	movf	_mess_rec+2,w	;volatile
  3820  0276  00A6               	movwf	??_measure_Impedance_SE
  3821  0277  0826               	movf	??_measure_Impedance_SE,w
  3822  0278  00B4               	movwf	measure_Impedance_SE@asic+1
  3823                           
  3824                           ;comm.c: 343: asic.data_bits.CE = 0;
  3825  0279  1333               	bcf	measure_Impedance_SE@asic,6
  3826                           
  3827                           ;comm.c: 344: BIO_config(asic);
  3828  027A  0834               	movf	measure_Impedance_SE@asic+1,w
  3829  027B  00A1               	movwf	BIO_config@conf+1
  3830  027C  0833               	movf	measure_Impedance_SE@asic,w
  3831  027D  00A0               	movwf	BIO_config@conf
  3832  027E  24AF               	fcall	_BIO_config
  3833                           
  3834                           ;comm.c: 357: _delay((unsigned long)((20)*(500000/4000.0)));
  3835  027F  3004               	movlw	4
  3836  0280  0020               	movlb	0	; select bank0
  3837  0281  00A6               	movwf	??_measure_Impedance_SE
  3838  0282  303D               	movlw	61
  3839  0283                     u1747:	
  3840  0283  0B89               	decfsz	9,f
  3841  0284  2A83               	goto	u1747
  3842  0285  0BA6               	decfsz	??_measure_Impedance_SE,f
  3843  0286  2A83               	goto	u1747
  3844  0287  3200               	nop2
  3845                           
  3846                           ;comm.c: 359: value1 = ADC_5();
  3847  0288  252E               	fcall	_ADC_5
  3848  0289  0020               	movlb	0	; select bank0
  3849  028A  0821               	movf	?_ADC_5+1,w
  3850  028B  00B2               	movwf	measure_Impedance_SE@value1+1
  3851  028C  0820               	movf	?_ADC_5,w
  3852  028D  00B1               	movwf	measure_Impedance_SE@value1
  3853                           
  3854                           ;comm.c: 361: aux[1] = (unsigned char)(value1 & 0xff);
  3855  028E  0831               	movf	measure_Impedance_SE@value1,w
  3856  028F  00A6               	movwf	??_measure_Impedance_SE
  3857  0290  0826               	movf	??_measure_Impedance_SE,w
  3858  0291  00A9               	movwf	measure_Impedance_SE@aux+1
  3859                           
  3860                           ;comm.c: 362: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  3861  0292  0832               	movf	measure_Impedance_SE@value1+1,w
  3862  0293  00A6               	movwf	??_measure_Impedance_SE
  3863  0294  0826               	movf	??_measure_Impedance_SE,w
  3864  0295  00AA               	movwf	measure_Impedance_SE@aux+2
  3865                           
  3866                           ;comm.c: 365: asic.data_bits.CE = 1;
  3867  0296  1733               	bsf	measure_Impedance_SE@asic,6
  3868                           
  3869                           ;comm.c: 366: asic.data_bits.IQ = 0;
  3870  0297  11B4               	bcf	measure_Impedance_SE@asic+1,3
  3871                           
  3872                           ;comm.c: 369: BIO_config(asic);
  3873  0298  0834               	movf	measure_Impedance_SE@asic+1,w
  3874  0299  00A1               	movwf	BIO_config@conf+1
  3875  029A  0833               	movf	measure_Impedance_SE@asic,w
  3876  029B  00A0               	movwf	BIO_config@conf
  3877  029C  24AF               	fcall	_BIO_config
  3878                           
  3879                           ;comm.c: 373: _delay((unsigned long)((20)*(500000/4000.0)));
  3880  029D  3004               	movlw	4
  3881  029E  0020               	movlb	0	; select bank0
  3882  029F  00A6               	movwf	??_measure_Impedance_SE
  3883  02A0  303D               	movlw	61
  3884  02A1                     u1757:	
  3885  02A1  0B89               	decfsz	9,f
  3886  02A2  2AA1               	goto	u1757
  3887  02A3  0BA6               	decfsz	??_measure_Impedance_SE,f
  3888  02A4  2AA1               	goto	u1757
  3889  02A5  3200               	nop2
  3890                           
  3891                           ;comm.c: 375: value1 = ADC_5();
  3892  02A6  252E               	fcall	_ADC_5
  3893  02A7  0020               	movlb	0	; select bank0
  3894  02A8  0821               	movf	?_ADC_5+1,w
  3895  02A9  00B2               	movwf	measure_Impedance_SE@value1+1
  3896  02AA  0820               	movf	?_ADC_5,w
  3897  02AB  00B1               	movwf	measure_Impedance_SE@value1
  3898                           
  3899                           ;comm.c: 377: aux[3] = (unsigned char)(value1 & 0xff);
  3900  02AC  0831               	movf	measure_Impedance_SE@value1,w
  3901  02AD  00A6               	movwf	??_measure_Impedance_SE
  3902  02AE  0826               	movf	??_measure_Impedance_SE,w
  3903  02AF  00AB               	movwf	measure_Impedance_SE@aux+3
  3904                           
  3905                           ;comm.c: 378: aux[4] = (unsigned char)((value1 >> 8) & 0xff);
  3906  02B0  0832               	movf	measure_Impedance_SE@value1+1,w
  3907  02B1  00A6               	movwf	??_measure_Impedance_SE
  3908  02B2  0826               	movf	??_measure_Impedance_SE,w
  3909  02B3  00AC               	movwf	measure_Impedance_SE@aux+4
  3910                           
  3911                           ;comm.c: 381: asic.data_bits.IQ = 1;
  3912  02B4  15B4               	bsf	measure_Impedance_SE@asic+1,3
  3913                           
  3914                           ;comm.c: 384: BIO_config(asic);
  3915  02B5  0834               	movf	measure_Impedance_SE@asic+1,w
  3916  02B6  00A1               	movwf	BIO_config@conf+1
  3917  02B7  0833               	movf	measure_Impedance_SE@asic,w
  3918  02B8  00A0               	movwf	BIO_config@conf
  3919  02B9  24AF               	fcall	_BIO_config
  3920                           
  3921                           ;comm.c: 388: _delay((unsigned long)((20)*(500000/4000.0)));
  3922  02BA  3004               	movlw	4
  3923  02BB  0020               	movlb	0	; select bank0
  3924  02BC  00A6               	movwf	??_measure_Impedance_SE
  3925  02BD  303D               	movlw	61
  3926  02BE                     u1767:	
  3927  02BE  0B89               	decfsz	9,f
  3928  02BF  2ABE               	goto	u1767
  3929  02C0  0BA6               	decfsz	??_measure_Impedance_SE,f
  3930  02C1  2ABE               	goto	u1767
  3931  02C2  3200               	nop2
  3932                           
  3933                           ;comm.c: 390: value1 = ADC_5();
  3934  02C3  252E               	fcall	_ADC_5
  3935  02C4  0020               	movlb	0	; select bank0
  3936  02C5  0821               	movf	?_ADC_5+1,w
  3937  02C6  00B2               	movwf	measure_Impedance_SE@value1+1
  3938  02C7  0820               	movf	?_ADC_5,w
  3939  02C8  00B1               	movwf	measure_Impedance_SE@value1
  3940                           
  3941                           ;comm.c: 392: aux[5] = (unsigned char)(value1 & 0xff);
  3942  02C9  0831               	movf	measure_Impedance_SE@value1,w
  3943  02CA  00A6               	movwf	??_measure_Impedance_SE
  3944  02CB  0826               	movf	??_measure_Impedance_SE,w
  3945  02CC  00AD               	movwf	measure_Impedance_SE@aux+5
  3946                           
  3947                           ;comm.c: 393: aux[6] = (unsigned char)((value1 >> 8) & 0xff);
  3948  02CD  0832               	movf	measure_Impedance_SE@value1+1,w
  3949  02CE  00A6               	movwf	??_measure_Impedance_SE
  3950  02CF  0826               	movf	??_measure_Impedance_SE,w
  3951  02D0  00AE               	movwf	measure_Impedance_SE@aux+6
  3952                           
  3953                           ;comm.c: 397: check = calculate_checksum(aux,7);
  3954  02D1  3007               	movlw	7
  3955  02D2  00A6               	movwf	??_measure_Impedance_SE
  3956  02D3  0826               	movf	??_measure_Impedance_SE,w
  3957  02D4  00A0               	movwf	calculate_checksum@num
  3958  02D5  3028               	movlw	(low (measure_Impedance_SE@aux| 0))& (0+255)
  3959  02D6  2597               	fcall	_calculate_checksum
  3960  02D7  0020               	movlb	0	; select bank0
  3961  02D8  00A7               	movwf	??_measure_Impedance_SE+1
  3962  02D9  0827               	movf	??_measure_Impedance_SE+1,w
  3963  02DA  00B0               	movwf	measure_Impedance_SE@check
  3964                           
  3965                           ;comm.c: 398: aux[7] = check;
  3966  02DB  0830               	movf	measure_Impedance_SE@check,w
  3967  02DC  00A6               	movwf	??_measure_Impedance_SE
  3968  02DD  0826               	movf	??_measure_Impedance_SE,w
  3969  02DE  00AF               	movwf	measure_Impedance_SE@aux+7
  3970                           
  3971                           ;comm.c: 399: lputs_ISR(aux,8);
  3972  02DF  3008               	movlw	8
  3973  02E0  00A6               	movwf	??_measure_Impedance_SE
  3974  02E1  0826               	movf	??_measure_Impedance_SE,w
  3975  02E2  00A0               	movwf	lputs_ISR@length
  3976  02E3  3028               	movlw	(low (measure_Impedance_SE@aux| 0))& (0+255)
  3977  02E4  24DA               	fcall	_lputs_ISR
  3978  02E5  0008               	return
  3979  02E6                     __end_of_measure_Impedance_SE:	
  3980                           
  3981                           	psect	text15
  3982  0597                     __ptext15:	
  3983 ;; *************** function _calculate_checksum *****************
  3984 ;; Defined at:
  3985 ;;		line 407 in file "comm.c"
  3986 ;; Parameters:    Size  Location     Type
  3987 ;;  data            1    wreg     PTR unsigned char 
  3988 ;;		 -> sweep@aux(7), measure_Impedance_SE@aux(8), mess_rec(10), 
  3989 ;;  num             1    0[BANK0 ] unsigned char 
  3990 ;; Auto vars:     Size  Location     Type
  3991 ;;  data            1    4[BANK0 ] PTR unsigned char 
  3992 ;;		 -> sweep@aux(7), measure_Impedance_SE@aux(8), mess_rec(10), 
  3993 ;;  i               1    5[BANK0 ] unsigned char 
  3994 ;;  check           1    3[BANK0 ] unsigned char 
  3995 ;; Return value:  Size  Location     Type
  3996 ;;                  1    wreg      unsigned char 
  3997 ;; Registers used:
  3998 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3999 ;; Tracked objects:
  4000 ;;		On entry : 0/0
  4001 ;;		On exit  : 0/0
  4002 ;;		Unchanged: 0/0
  4003 ;; Data sizes:     COMMON   BANK0   BANK1
  4004 ;;      Params:         0       1       0
  4005 ;;      Locals:         0       3       0
  4006 ;;      Temps:          0       2       0
  4007 ;;      Totals:         0       6       0
  4008 ;;Total ram usage:        6 bytes
  4009 ;; Hardware stack levels used:    1
  4010 ;; Hardware stack levels required when called:    2
  4011 ;; This function calls:
  4012 ;;		Nothing
  4013 ;; This function is called by:
  4014 ;;		_measure_Impedance_SE
  4015 ;;		_sweep
  4016 ;; This function uses a non-reentrant model
  4017 ;;
  4018                           
  4019                           
  4020                           ;psect for function _calculate_checksum
  4021  0597                     _calculate_checksum:	
  4022                           
  4023                           ;incstack = 0
  4024                           ; Regs used in _calculate_checksum: [wreg+fsr1l+fsr1h+status,2+status,0]
  4025                           ;calculate_checksum@data stored from wreg
  4026  0597  0020               	movlb	0	; select bank0
  4027  0598  00A4               	movwf	calculate_checksum@data
  4028                           
  4029                           ;comm.c: 409: unsigned char check, i;
  4030                           ;comm.c: 411: check = 0;
  4031  0599  01A3               	clrf	calculate_checksum@check
  4032                           
  4033                           ;comm.c: 412: for (i = 0; i < num; i++) {
  4034  059A  01A5               	clrf	calculate_checksum@i
  4035  059B                     l2605:	
  4036  059B  0820               	movf	calculate_checksum@num,w
  4037  059C  0225               	subwf	calculate_checksum@i,w
  4038  059D  1803               	btfsc	3,0
  4039  059E  2DAE               	goto	l2607
  4040                           
  4041                           ;comm.c: 413: check ^= data[i];
  4042  059F  0825               	movf	calculate_checksum@i,w
  4043  05A0  0724               	addwf	calculate_checksum@data,w
  4044  05A1  00A1               	movwf	??_calculate_checksum
  4045  05A2  0821               	movf	??_calculate_checksum,w
  4046  05A3  0086               	movwf	6
  4047  05A4  0187               	clrf	7
  4048  05A5  0801               	movf	1,w
  4049  05A6  00A2               	movwf	??_calculate_checksum+1
  4050  05A7  0822               	movf	??_calculate_checksum+1,w
  4051  05A8  06A3               	xorwf	calculate_checksum@check,f
  4052  05A9  3001               	movlw	1
  4053  05AA  00A1               	movwf	??_calculate_checksum
  4054  05AB  0821               	movf	??_calculate_checksum,w
  4055  05AC  07A5               	addwf	calculate_checksum@i,f
  4056  05AD  2D9B               	goto	l2605
  4057  05AE                     l2607:	
  4058                           
  4059                           ;comm.c: 414: }
  4060                           ;comm.c: 416: return check;
  4061  05AE  0823               	movf	calculate_checksum@check,w
  4062  05AF  0008               	return
  4063  05B0                     __end_of_calculate_checksum:	
  4064                           
  4065                           	psect	text16
  4066  052E                     __ptext16:	
  4067 ;; *************** function _ADC_5 *****************
  4068 ;; Defined at:
  4069 ;;		line 48 in file "ADC1823.c"
  4070 ;; Parameters:    Size  Location     Type
  4071 ;;		None
  4072 ;; Auto vars:     Size  Location     Type
  4073 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  4074 ;; Return value:  Size  Location     Type
  4075 ;;                  2    0[BANK0 ] unsigned short 
  4076 ;; Registers used:
  4077 ;;		wreg
  4078 ;; Tracked objects:
  4079 ;;		On entry : 0/0
  4080 ;;		On exit  : 0/0
  4081 ;;		Unchanged: 0/0
  4082 ;; Data sizes:     COMMON   BANK0   BANK1
  4083 ;;      Params:         0       2       0
  4084 ;;      Locals:         0       2       0
  4085 ;;      Temps:          0       2       0
  4086 ;;      Totals:         0       6       0
  4087 ;;Total ram usage:        6 bytes
  4088 ;; Hardware stack levels used:    1
  4089 ;; Hardware stack levels required when called:    2
  4090 ;; This function calls:
  4091 ;;		Nothing
  4092 ;; This function is called by:
  4093 ;;		_read_ADC_channels
  4094 ;;		_measure_Impedance_SE
  4095 ;;		_measure
  4096 ;; This function uses a non-reentrant model
  4097 ;;
  4098                           
  4099                           
  4100                           ;psect for function _ADC_5
  4101  052E                     _ADC_5:	
  4102                           
  4103                           ;ADC1823.c: 50: unsigned short ADC_value;
  4104                           ;ADC1823.c: 52: { ADCON0 = 0b00010101;};
  4105                           
  4106                           ;incstack = 0
  4107                           ; Regs used in _ADC_5: [wreg]
  4108  052E  3015               	movlw	21
  4109  052F  0021               	movlb	1	; select bank1
  4110  0530  009D               	movwf	29	;volatile
  4111                           
  4112                           ;ADC1823.c: 53: __nop();
  4113  0531  0000               	nop
  4114                           
  4115                           ;ADC1823.c: 54: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  4116  0532  0021               	movlb	1	; select bank1
  4117  0533  149D               	bsf	29,1	;volatile
  4118  0534                     l458:	
  4119  0534  189D               	btfsc	29,1	;volatile
  4120  0535  2D34               	goto	l458
  4121  0536  081C               	movf	28,w	;volatile
  4122  0537  0020               	movlb	0	; select bank0
  4123  0538  00A2               	movwf	??_ADC_5
  4124  0539  01A3               	clrf	??_ADC_5+1
  4125  053A  0822               	movf	??_ADC_5,w
  4126  053B  00A4               	movwf	ADC_5@ADC_value
  4127  053C  0823               	movf	??_ADC_5+1,w
  4128  053D  00A5               	movwf	ADC_5@ADC_value+1
  4129  053E  3008               	movlw	8
  4130  053F                     u1285:	
  4131  053F  35A4               	lslf	ADC_5@ADC_value,f
  4132  0540  0DA5               	rlf	ADC_5@ADC_value+1,f
  4133  0541  0B89               	decfsz	9,f
  4134  0542  2D3F               	goto	u1285
  4135  0543  0021               	movlb	1	; select bank1
  4136  0544  081B               	movf	27,w	;volatile
  4137  0545  0020               	movlb	0	; select bank0
  4138  0546  00A2               	movwf	??_ADC_5
  4139  0547  01A3               	clrf	??_ADC_5+1
  4140  0548  0822               	movf	??_ADC_5,w
  4141  0549  04A4               	iorwf	ADC_5@ADC_value,f
  4142  054A  0823               	movf	??_ADC_5+1,w
  4143  054B  04A5               	iorwf	ADC_5@ADC_value+1,f
  4144                           
  4145                           ;ADC1823.c: 55: return ADC_value;
  4146  054C  0825               	movf	ADC_5@ADC_value+1,w
  4147  054D  00A1               	movwf	?_ADC_5+1
  4148  054E  0824               	movf	ADC_5@ADC_value,w
  4149  054F  00A0               	movwf	?_ADC_5
  4150  0550  0008               	return
  4151  0551                     __end_of_ADC_5:	
  4152                           
  4153                           	psect	text17
  4154  01BF                     __ptext17:	
  4155 ;; *************** function _measure_Impedance *****************
  4156 ;; Defined at:
  4157 ;;		line 115 in file "comm.c"
  4158 ;; Parameters:    Size  Location     Type
  4159 ;;		None
  4160 ;; Auto vars:     Size  Location     Type
  4161 ;;  aux            13    7[BANK0 ] unsigned char [13]
  4162 ;;  asic            2   24[BANK0 ] struct .
  4163 ;;  value2          2   22[BANK0 ] unsigned short 
  4164 ;;  value1          2   20[BANK0 ] unsigned short 
  4165 ;;  value3          2    0        unsigned short 
  4166 ;; Return value:  Size  Location     Type
  4167 ;;                  1    wreg      void 
  4168 ;; Registers used:
  4169 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4170 ;; Tracked objects:
  4171 ;;		On entry : 0/0
  4172 ;;		On exit  : 0/0
  4173 ;;		Unchanged: 0/0
  4174 ;; Data sizes:     COMMON   BANK0   BANK1
  4175 ;;      Params:         0       0       0
  4176 ;;      Locals:         0      19       0
  4177 ;;      Temps:          0       1       0
  4178 ;;      Totals:         0      20       0
  4179 ;;Total ram usage:       20 bytes
  4180 ;; Hardware stack levels used:    1
  4181 ;; Hardware stack levels required when called:    4
  4182 ;; This function calls:
  4183 ;;		_ADC_2
  4184 ;;		_ADC_4
  4185 ;;		_BIO_config
  4186 ;;		_lputs_ISR
  4187 ;; This function is called by:
  4188 ;;		_mess_handler
  4189 ;; This function uses a non-reentrant model
  4190 ;;
  4191                           
  4192                           
  4193                           ;psect for function _measure_Impedance
  4194  01BF                     _measure_Impedance:	
  4195                           
  4196                           ;comm.c: 117: unsigned char aux[13];
  4197                           ;comm.c: 118: unsigned short value1,value2,value3;
  4198                           ;comm.c: 121: BIO3 asic;
  4199                           ;comm.c: 127: aux[0] = 'z';
  4200                           
  4201                           ;incstack = 0
  4202                           ; Regs used in _measure_Impedance: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4203  01BF  307A               	movlw	122
  4204  01C0  0020               	movlb	0	; select bank0
  4205  01C1  00A6               	movwf	??_measure_Impedance
  4206  01C2  0826               	movf	??_measure_Impedance,w
  4207  01C3  00A7               	movwf	measure_Impedance@aux
  4208                           
  4209                           ;comm.c: 131: asic.data[0] = (unsigned short)(mess_rec[1]);
  4210  01C4  0862               	movf	_mess_rec+1,w	;volatile
  4211  01C5  00A6               	movwf	??_measure_Impedance
  4212  01C6  0826               	movf	??_measure_Impedance,w
  4213  01C7  00B8               	movwf	measure_Impedance@asic
  4214                           
  4215                           ;comm.c: 132: asic.data[1] = (unsigned short)(mess_rec[2]);
  4216  01C8  0863               	movf	_mess_rec+2,w	;volatile
  4217  01C9  00A6               	movwf	??_measure_Impedance
  4218  01CA  0826               	movf	??_measure_Impedance,w
  4219  01CB  00B9               	movwf	measure_Impedance@asic+1
  4220                           
  4221                           ;comm.c: 135: asic.data_bits.CE = 0;
  4222  01CC  1338               	bcf	measure_Impedance@asic,6
  4223                           
  4224                           ;comm.c: 136: BIO_config(asic);
  4225  01CD  0839               	movf	measure_Impedance@asic+1,w
  4226  01CE  00A1               	movwf	BIO_config@conf+1
  4227  01CF  0838               	movf	measure_Impedance@asic,w
  4228  01D0  00A0               	movwf	BIO_config@conf
  4229  01D1  24AF               	fcall	_BIO_config
  4230                           
  4231                           ;comm.c: 149: _delay((unsigned long)((20)*(500000/4000.0)));
  4232  01D2  3004               	movlw	4
  4233  01D3  0020               	movlb	0	; select bank0
  4234  01D4  00A6               	movwf	??_measure_Impedance
  4235  01D5  303D               	movlw	61
  4236  01D6                     u1777:	
  4237  01D6  0B89               	decfsz	9,f
  4238  01D7  29D6               	goto	u1777
  4239  01D8  0BA6               	decfsz	??_measure_Impedance,f
  4240  01D9  29D6               	goto	u1777
  4241  01DA  3200               	nop2
  4242                           
  4243                           ;comm.c: 151: value1 = ADC_2();
  4244  01DB  2574               	fcall	_ADC_2
  4245  01DC  0020               	movlb	0	; select bank0
  4246  01DD  0821               	movf	?_ADC_2+1,w
  4247  01DE  00B5               	movwf	measure_Impedance@value1+1
  4248  01DF  0820               	movf	?_ADC_2,w
  4249  01E0  00B4               	movwf	measure_Impedance@value1
  4250                           
  4251                           ;comm.c: 152: value2 = ADC_4();
  4252  01E1  2551               	fcall	_ADC_4
  4253  01E2  0020               	movlb	0	; select bank0
  4254  01E3  0821               	movf	?_ADC_4+1,w
  4255  01E4  00B7               	movwf	measure_Impedance@value2+1
  4256  01E5  0820               	movf	?_ADC_4,w
  4257  01E6  00B6               	movwf	measure_Impedance@value2
  4258                           
  4259                           ;comm.c: 154: aux[1] = (unsigned char)(value1 & 0xff);
  4260  01E7  0834               	movf	measure_Impedance@value1,w
  4261  01E8  00A6               	movwf	??_measure_Impedance
  4262  01E9  0826               	movf	??_measure_Impedance,w
  4263  01EA  00A8               	movwf	measure_Impedance@aux+1
  4264                           
  4265                           ;comm.c: 155: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  4266  01EB  0835               	movf	measure_Impedance@value1+1,w
  4267  01EC  00A6               	movwf	??_measure_Impedance
  4268  01ED  0826               	movf	??_measure_Impedance,w
  4269  01EE  00A9               	movwf	measure_Impedance@aux+2
  4270                           
  4271                           ;comm.c: 156: aux[3] = (unsigned char)(value2 & 0xff);
  4272  01EF  0836               	movf	measure_Impedance@value2,w
  4273  01F0  00A6               	movwf	??_measure_Impedance
  4274  01F1  0826               	movf	??_measure_Impedance,w
  4275  01F2  00AA               	movwf	measure_Impedance@aux+3
  4276                           
  4277                           ;comm.c: 157: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  4278  01F3  0837               	movf	measure_Impedance@value2+1,w
  4279  01F4  00A6               	movwf	??_measure_Impedance
  4280  01F5  0826               	movf	??_measure_Impedance,w
  4281  01F6  00AB               	movwf	measure_Impedance@aux+4
  4282                           
  4283                           ;comm.c: 160: asic.data_bits.CE = 1;
  4284  01F7  1738               	bsf	measure_Impedance@asic,6
  4285                           
  4286                           ;comm.c: 161: asic.data_bits.IQ = 0;
  4287  01F8  11B9               	bcf	measure_Impedance@asic+1,3
  4288                           
  4289                           ;comm.c: 164: BIO_config(asic);
  4290  01F9  0839               	movf	measure_Impedance@asic+1,w
  4291  01FA  00A1               	movwf	BIO_config@conf+1
  4292  01FB  0838               	movf	measure_Impedance@asic,w
  4293  01FC  00A0               	movwf	BIO_config@conf
  4294  01FD  24AF               	fcall	_BIO_config
  4295                           
  4296                           ;comm.c: 168: _delay((unsigned long)((20)*(500000/4000.0)));
  4297  01FE  3004               	movlw	4
  4298  01FF  0020               	movlb	0	; select bank0
  4299  0200  00A6               	movwf	??_measure_Impedance
  4300  0201  303D               	movlw	61
  4301  0202                     u1787:	
  4302  0202  0B89               	decfsz	9,f
  4303  0203  2A02               	goto	u1787
  4304  0204  0BA6               	decfsz	??_measure_Impedance,f
  4305  0205  2A02               	goto	u1787
  4306  0206  3200               	nop2
  4307                           
  4308                           ;comm.c: 170: value1 = ADC_2();
  4309  0207  2574               	fcall	_ADC_2
  4310  0208  0020               	movlb	0	; select bank0
  4311  0209  0821               	movf	?_ADC_2+1,w
  4312  020A  00B5               	movwf	measure_Impedance@value1+1
  4313  020B  0820               	movf	?_ADC_2,w
  4314  020C  00B4               	movwf	measure_Impedance@value1
  4315                           
  4316                           ;comm.c: 171: value2 = ADC_4();
  4317  020D  2551               	fcall	_ADC_4
  4318  020E  0020               	movlb	0	; select bank0
  4319  020F  0821               	movf	?_ADC_4+1,w
  4320  0210  00B7               	movwf	measure_Impedance@value2+1
  4321  0211  0820               	movf	?_ADC_4,w
  4322  0212  00B6               	movwf	measure_Impedance@value2
  4323                           
  4324                           ;comm.c: 173: aux[5] = (unsigned char)(value1 & 0xff);
  4325  0213  0834               	movf	measure_Impedance@value1,w
  4326  0214  00A6               	movwf	??_measure_Impedance
  4327  0215  0826               	movf	??_measure_Impedance,w
  4328  0216  00AC               	movwf	measure_Impedance@aux+5
  4329                           
  4330                           ;comm.c: 174: aux[6] = (unsigned char)((value1 >> 8) & 0xff);
  4331  0217  0835               	movf	measure_Impedance@value1+1,w
  4332  0218  00A6               	movwf	??_measure_Impedance
  4333  0219  0826               	movf	??_measure_Impedance,w
  4334  021A  00AD               	movwf	measure_Impedance@aux+6
  4335                           
  4336                           ;comm.c: 175: aux[7] = (unsigned char)(value2 & 0xff);
  4337  021B  0836               	movf	measure_Impedance@value2,w
  4338  021C  00A6               	movwf	??_measure_Impedance
  4339  021D  0826               	movf	??_measure_Impedance,w
  4340  021E  00AE               	movwf	measure_Impedance@aux+7
  4341                           
  4342                           ;comm.c: 176: aux[8] = (unsigned char)((value2 >> 8) & 0xff);
  4343  021F  0837               	movf	measure_Impedance@value2+1,w
  4344  0220  00A6               	movwf	??_measure_Impedance
  4345  0221  0826               	movf	??_measure_Impedance,w
  4346  0222  00AF               	movwf	measure_Impedance@aux+8
  4347                           
  4348                           ;comm.c: 179: asic.data_bits.IQ = 1;
  4349  0223  15B9               	bsf	measure_Impedance@asic+1,3
  4350                           
  4351                           ;comm.c: 182: BIO_config(asic);
  4352  0224  0839               	movf	measure_Impedance@asic+1,w
  4353  0225  00A1               	movwf	BIO_config@conf+1
  4354  0226  0838               	movf	measure_Impedance@asic,w
  4355  0227  00A0               	movwf	BIO_config@conf
  4356  0228  24AF               	fcall	_BIO_config
  4357                           
  4358                           ;comm.c: 186: _delay((unsigned long)((20)*(500000/4000.0)));
  4359  0229  3004               	movlw	4
  4360  022A  0020               	movlb	0	; select bank0
  4361  022B  00A6               	movwf	??_measure_Impedance
  4362  022C  303D               	movlw	61
  4363  022D                     u1797:	
  4364  022D  0B89               	decfsz	9,f
  4365  022E  2A2D               	goto	u1797
  4366  022F  0BA6               	decfsz	??_measure_Impedance,f
  4367  0230  2A2D               	goto	u1797
  4368  0231  3200               	nop2
  4369                           
  4370                           ;comm.c: 188: value1 = ADC_2();
  4371  0232  2574               	fcall	_ADC_2
  4372  0233  0020               	movlb	0	; select bank0
  4373  0234  0821               	movf	?_ADC_2+1,w
  4374  0235  00B5               	movwf	measure_Impedance@value1+1
  4375  0236  0820               	movf	?_ADC_2,w
  4376  0237  00B4               	movwf	measure_Impedance@value1
  4377                           
  4378                           ;comm.c: 189: value2 = ADC_4();
  4379  0238  2551               	fcall	_ADC_4
  4380  0239  0020               	movlb	0	; select bank0
  4381  023A  0821               	movf	?_ADC_4+1,w
  4382  023B  00B7               	movwf	measure_Impedance@value2+1
  4383  023C  0820               	movf	?_ADC_4,w
  4384  023D  00B6               	movwf	measure_Impedance@value2
  4385                           
  4386                           ;comm.c: 191: aux[9] = (unsigned char)(value1 & 0xff);
  4387  023E  0834               	movf	measure_Impedance@value1,w
  4388  023F  00A6               	movwf	??_measure_Impedance
  4389  0240  0826               	movf	??_measure_Impedance,w
  4390  0241  00B0               	movwf	measure_Impedance@aux+9
  4391                           
  4392                           ;comm.c: 192: aux[10] = (unsigned char)((value1 >> 8) & 0xff);
  4393  0242  0835               	movf	measure_Impedance@value1+1,w
  4394  0243  00A6               	movwf	??_measure_Impedance
  4395  0244  0826               	movf	??_measure_Impedance,w
  4396  0245  00B1               	movwf	measure_Impedance@aux+10
  4397                           
  4398                           ;comm.c: 193: aux[11] = (unsigned char)(value2 & 0xff);
  4399  0246  0836               	movf	measure_Impedance@value2,w
  4400  0247  00A6               	movwf	??_measure_Impedance
  4401  0248  0826               	movf	??_measure_Impedance,w
  4402  0249  00B2               	movwf	measure_Impedance@aux+11
  4403                           
  4404                           ;comm.c: 194: aux[12] = (unsigned char)((value2 >> 8) & 0xff);
  4405  024A  0837               	movf	measure_Impedance@value2+1,w
  4406  024B  00A6               	movwf	??_measure_Impedance
  4407  024C  0826               	movf	??_measure_Impedance,w
  4408  024D  00B3               	movwf	measure_Impedance@aux+12
  4409                           
  4410                           ;comm.c: 197: lputs_ISR(aux,13);
  4411  024E  300D               	movlw	13
  4412  024F  00A6               	movwf	??_measure_Impedance
  4413  0250  0826               	movf	??_measure_Impedance,w
  4414  0251  00A0               	movwf	lputs_ISR@length
  4415  0252  3027               	movlw	(low (measure_Impedance@aux| 0))& (0+255)
  4416  0253  24DA               	fcall	_lputs_ISR
  4417  0254  0008               	return
  4418  0255                     __end_of_measure_Impedance:	
  4419                           
  4420                           	psect	text18
  4421  0551                     __ptext18:	
  4422 ;; *************** function _ADC_4 *****************
  4423 ;; Defined at:
  4424 ;;		line 38 in file "ADC1823.c"
  4425 ;; Parameters:    Size  Location     Type
  4426 ;;		None
  4427 ;; Auto vars:     Size  Location     Type
  4428 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  4429 ;; Return value:  Size  Location     Type
  4430 ;;                  2    0[BANK0 ] unsigned short 
  4431 ;; Registers used:
  4432 ;;		wreg
  4433 ;; Tracked objects:
  4434 ;;		On entry : 0/0
  4435 ;;		On exit  : 0/0
  4436 ;;		Unchanged: 0/0
  4437 ;; Data sizes:     COMMON   BANK0   BANK1
  4438 ;;      Params:         0       2       0
  4439 ;;      Locals:         0       2       0
  4440 ;;      Temps:          0       2       0
  4441 ;;      Totals:         0       6       0
  4442 ;;Total ram usage:        6 bytes
  4443 ;; Hardware stack levels used:    1
  4444 ;; Hardware stack levels required when called:    2
  4445 ;; This function calls:
  4446 ;;		Nothing
  4447 ;; This function is called by:
  4448 ;;		_read_ADC_channels
  4449 ;;		_measure_Impedance
  4450 ;;		_measure_Impedance_no_offset
  4451 ;;		_measure_Offset
  4452 ;; This function uses a non-reentrant model
  4453 ;;
  4454                           
  4455                           
  4456                           ;psect for function _ADC_4
  4457  0551                     _ADC_4:	
  4458                           
  4459                           ;ADC1823.c: 40: unsigned short ADC_value;
  4460                           ;ADC1823.c: 42: { ADCON0 = 0b00010001;};
  4461                           
  4462                           ;incstack = 0
  4463                           ; Regs used in _ADC_4: [wreg]
  4464  0551  3011               	movlw	17
  4465  0552  0021               	movlb	1	; select bank1
  4466  0553  009D               	movwf	29	;volatile
  4467                           
  4468                           ;ADC1823.c: 43: __nop();
  4469  0554  0000               	nop
  4470                           
  4471                           ;ADC1823.c: 44: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  4472  0555  0021               	movlb	1	; select bank1
  4473  0556  149D               	bsf	29,1	;volatile
  4474  0557                     l452:	
  4475  0557  189D               	btfsc	29,1	;volatile
  4476  0558  2D57               	goto	l452
  4477  0559  081C               	movf	28,w	;volatile
  4478  055A  0020               	movlb	0	; select bank0
  4479  055B  00A2               	movwf	??_ADC_4
  4480  055C  01A3               	clrf	??_ADC_4+1
  4481  055D  0822               	movf	??_ADC_4,w
  4482  055E  00A4               	movwf	ADC_4@ADC_value
  4483  055F  0823               	movf	??_ADC_4+1,w
  4484  0560  00A5               	movwf	ADC_4@ADC_value+1
  4485  0561  3008               	movlw	8
  4486  0562                     u1455:	
  4487  0562  35A4               	lslf	ADC_4@ADC_value,f
  4488  0563  0DA5               	rlf	ADC_4@ADC_value+1,f
  4489  0564  0B89               	decfsz	9,f
  4490  0565  2D62               	goto	u1455
  4491  0566  0021               	movlb	1	; select bank1
  4492  0567  081B               	movf	27,w	;volatile
  4493  0568  0020               	movlb	0	; select bank0
  4494  0569  00A2               	movwf	??_ADC_4
  4495  056A  01A3               	clrf	??_ADC_4+1
  4496  056B  0822               	movf	??_ADC_4,w
  4497  056C  04A4               	iorwf	ADC_4@ADC_value,f
  4498  056D  0823               	movf	??_ADC_4+1,w
  4499  056E  04A5               	iorwf	ADC_4@ADC_value+1,f
  4500                           
  4501                           ;ADC1823.c: 45: return ADC_value;
  4502  056F  0825               	movf	ADC_4@ADC_value+1,w
  4503  0570  00A1               	movwf	?_ADC_4+1
  4504  0571  0824               	movf	ADC_4@ADC_value,w
  4505  0572  00A0               	movwf	?_ADC_4
  4506  0573  0008               	return
  4507  0574                     __end_of_ADC_4:	
  4508                           
  4509                           	psect	text19
  4510  0574                     __ptext19:	
  4511 ;; *************** function _ADC_2 *****************
  4512 ;; Defined at:
  4513 ;;		line 25 in file "ADC1823.c"
  4514 ;; Parameters:    Size  Location     Type
  4515 ;;		None
  4516 ;; Auto vars:     Size  Location     Type
  4517 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  4518 ;; Return value:  Size  Location     Type
  4519 ;;                  2    0[BANK0 ] unsigned short 
  4520 ;; Registers used:
  4521 ;;		wreg
  4522 ;; Tracked objects:
  4523 ;;		On entry : 0/0
  4524 ;;		On exit  : 0/0
  4525 ;;		Unchanged: 0/0
  4526 ;; Data sizes:     COMMON   BANK0   BANK1
  4527 ;;      Params:         0       2       0
  4528 ;;      Locals:         0       2       0
  4529 ;;      Temps:          0       2       0
  4530 ;;      Totals:         0       6       0
  4531 ;;Total ram usage:        6 bytes
  4532 ;; Hardware stack levels used:    1
  4533 ;; Hardware stack levels required when called:    2
  4534 ;; This function calls:
  4535 ;;		Nothing
  4536 ;; This function is called by:
  4537 ;;		_read_ADC_channels
  4538 ;;		_measure_Impedance
  4539 ;;		_measure_Impedance_no_offset
  4540 ;;		_measure_Offset
  4541 ;; This function uses a non-reentrant model
  4542 ;;
  4543                           
  4544                           
  4545                           ;psect for function _ADC_2
  4546  0574                     _ADC_2:	
  4547                           
  4548                           ;ADC1823.c: 27: unsigned short ADC_value;
  4549                           ;ADC1823.c: 29: { ADCON0 = 0b00001001;};
  4550                           
  4551                           ;incstack = 0
  4552                           ; Regs used in _ADC_2: [wreg]
  4553  0574  3009               	movlw	9
  4554  0575  0021               	movlb	1	; select bank1
  4555  0576  009D               	movwf	29	;volatile
  4556                           
  4557                           ;ADC1823.c: 30: __nop();
  4558  0577  0000               	nop
  4559                           
  4560                           ;ADC1823.c: 34: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  4561  0578  0021               	movlb	1	; select bank1
  4562  0579  149D               	bsf	29,1	;volatile
  4563  057A                     l446:	
  4564  057A  189D               	btfsc	29,1	;volatile
  4565  057B  2D7A               	goto	l446
  4566  057C  081C               	movf	28,w	;volatile
  4567  057D  0020               	movlb	0	; select bank0
  4568  057E  00A2               	movwf	??_ADC_2
  4569  057F  01A3               	clrf	??_ADC_2+1
  4570  0580  0822               	movf	??_ADC_2,w
  4571  0581  00A4               	movwf	ADC_2@ADC_value
  4572  0582  0823               	movf	??_ADC_2+1,w
  4573  0583  00A5               	movwf	ADC_2@ADC_value+1
  4574  0584  3008               	movlw	8
  4575  0585                     u1435:	
  4576  0585  35A4               	lslf	ADC_2@ADC_value,f
  4577  0586  0DA5               	rlf	ADC_2@ADC_value+1,f
  4578  0587  0B89               	decfsz	9,f
  4579  0588  2D85               	goto	u1435
  4580  0589  0021               	movlb	1	; select bank1
  4581  058A  081B               	movf	27,w	;volatile
  4582  058B  0020               	movlb	0	; select bank0
  4583  058C  00A2               	movwf	??_ADC_2
  4584  058D  01A3               	clrf	??_ADC_2+1
  4585  058E  0822               	movf	??_ADC_2,w
  4586  058F  04A4               	iorwf	ADC_2@ADC_value,f
  4587  0590  0823               	movf	??_ADC_2+1,w
  4588  0591  04A5               	iorwf	ADC_2@ADC_value+1,f
  4589                           
  4590                           ;ADC1823.c: 35: return ADC_value;
  4591  0592  0825               	movf	ADC_2@ADC_value+1,w
  4592  0593  00A1               	movwf	?_ADC_2+1
  4593  0594  0824               	movf	ADC_2@ADC_value,w
  4594  0595  00A0               	movwf	?_ADC_2
  4595  0596  0008               	return
  4596  0597                     __end_of_ADC_2:	
  4597                           
  4598                           	psect	text20
  4599  05C9                     __ptext20:	
  4600 ;; *************** function _config_ASIC *****************
  4601 ;; Defined at:
  4602 ;;		line 61 in file "comm.c"
  4603 ;; Parameters:    Size  Location     Type
  4604 ;;		None
  4605 ;; Auto vars:     Size  Location     Type
  4606 ;;  asic            2    6[BANK0 ] struct .
  4607 ;; Return value:  Size  Location     Type
  4608 ;;                  1    wreg      void 
  4609 ;; Registers used:
  4610 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4611 ;; Tracked objects:
  4612 ;;		On entry : 0/0
  4613 ;;		On exit  : 0/0
  4614 ;;		Unchanged: 0/0
  4615 ;; Data sizes:     COMMON   BANK0   BANK1
  4616 ;;      Params:         0       0       0
  4617 ;;      Locals:         0       2       0
  4618 ;;      Temps:          0       1       0
  4619 ;;      Totals:         0       3       0
  4620 ;;Total ram usage:        3 bytes
  4621 ;; Hardware stack levels used:    1
  4622 ;; Hardware stack levels required when called:    4
  4623 ;; This function calls:
  4624 ;;		_BIO_config
  4625 ;;		_lputs_ISR
  4626 ;; This function is called by:
  4627 ;;		_mess_handler
  4628 ;; This function uses a non-reentrant model
  4629 ;;
  4630                           
  4631                           
  4632                           ;psect for function _config_ASIC
  4633  05C9                     _config_ASIC:	
  4634                           
  4635                           ;comm.c: 64: BIO3 asic;
  4636                           ;comm.c: 70: asic.data[0] = mess_rec[1];
  4637                           
  4638                           ;incstack = 0
  4639                           ; Regs used in _config_ASIC: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4640  05C9  0020               	movlb	0	; select bank0
  4641  05CA  0862               	movf	_mess_rec+1,w	;volatile
  4642  05CB  00A5               	movwf	??_config_ASIC
  4643  05CC  0825               	movf	??_config_ASIC,w
  4644  05CD  00A6               	movwf	config_ASIC@asic
  4645                           
  4646                           ;comm.c: 71: asic.data[1] = mess_rec[2];
  4647  05CE  0863               	movf	_mess_rec+2,w	;volatile
  4648  05CF  00A5               	movwf	??_config_ASIC
  4649  05D0  0825               	movf	??_config_ASIC,w
  4650  05D1  00A7               	movwf	config_ASIC@asic+1
  4651                           
  4652                           ;comm.c: 73: lputs_ISR(mess_rec,mess_rec_size);
  4653  05D2  0860               	movf	_mess_rec_size,w	;volatile
  4654  05D3  00A5               	movwf	??_config_ASIC
  4655  05D4  0825               	movf	??_config_ASIC,w
  4656  05D5  00A0               	movwf	lputs_ISR@length
  4657  05D6  3061               	movlw	(low (_mess_rec| 0))& (0+255)
  4658  05D7  24DA               	fcall	_lputs_ISR
  4659                           
  4660                           ;comm.c: 75: BIO_config(asic);
  4661  05D8  0020               	movlb	0	; select bank0
  4662  05D9  0827               	movf	config_ASIC@asic+1,w
  4663  05DA  00A1               	movwf	BIO_config@conf+1
  4664  05DB  0826               	movf	config_ASIC@asic,w
  4665  05DC  00A0               	movwf	BIO_config@conf
  4666  05DD  24AF               	fcall	_BIO_config
  4667  05DE  0008               	return
  4668  05DF                     __end_of_config_ASIC:	
  4669                           
  4670                           	psect	text21
  4671  04AF                     __ptext21:	
  4672 ;; *************** function _BIO_config *****************
  4673 ;; Defined at:
  4674 ;;		line 41 in file "bio3.c"
  4675 ;; Parameters:    Size  Location     Type
  4676 ;;  conf            2    0[BANK0 ] struct .
  4677 ;; Auto vars:     Size  Location     Type
  4678 ;;  out             1    4[BANK0 ] unsigned char 
  4679 ;;  i               1    3[BANK0 ] unsigned char 
  4680 ;; Return value:  Size  Location     Type
  4681 ;;                  1    wreg      void 
  4682 ;; Registers used:
  4683 ;;		wreg, status,2, status,0
  4684 ;; Tracked objects:
  4685 ;;		On entry : 0/0
  4686 ;;		On exit  : 0/0
  4687 ;;		Unchanged: 0/0
  4688 ;; Data sizes:     COMMON   BANK0   BANK1
  4689 ;;      Params:         0       2       0
  4690 ;;      Locals:         0       2       0
  4691 ;;      Temps:          0       1       0
  4692 ;;      Totals:         0       5       0
  4693 ;;Total ram usage:        5 bytes
  4694 ;; Hardware stack levels used:    1
  4695 ;; Hardware stack levels required when called:    2
  4696 ;; This function calls:
  4697 ;;		Nothing
  4698 ;; This function is called by:
  4699 ;;		_config_ASIC
  4700 ;;		_measure_Impedance
  4701 ;;		_measure_Impedance_no_offset
  4702 ;;		_measure_Offset
  4703 ;;		_measure_Impedance_SE
  4704 ;;		_measure
  4705 ;; This function uses a non-reentrant model
  4706 ;;
  4707                           
  4708                           
  4709                           ;psect for function _BIO_config
  4710  04AF                     _BIO_config:	
  4711                           
  4712                           ;bio3.c: 43: unsigned char i, out;
  4713                           ;bio3.c: 45: out &= 0b11110111; PORTC = out;;
  4714                           
  4715                           ;incstack = 0
  4716                           ; Regs used in _BIO_config: [wreg+status,2+status,0]
  4717  04AF  30F7               	movlw	247
  4718  04B0  0020               	movlb	0	; select bank0
  4719  04B1  00A2               	movwf	??_BIO_config
  4720  04B2  0822               	movf	??_BIO_config,w
  4721  04B3  05A4               	andwf	BIO_config@out,f
  4722  04B4  0824               	movf	BIO_config@out,w
  4723  04B5  008E               	movwf	14	;volatile
  4724                           
  4725                           ;bio3.c: 46: ;;
  4726                           ;bio3.c: 48: RA5 = 0;;
  4727  04B6  128C               	bcf	12,5	;volatile
  4728                           
  4729                           ;bio3.c: 49: ;;
  4730                           ;bio3.c: 51: RA5 = 1;;
  4731  04B7  168C               	bsf	12,5	;volatile
  4732                           
  4733                           ;bio3.c: 53: for(i = 0; i < 16; i++) {
  4734  04B8  01A3               	clrf	BIO_config@i
  4735  04B9                     L3:	
  4736  04B9  3010               	movlw	16
  4737  04BA  0223               	subwf	BIO_config@i,w
  4738  04BB  1803               	btfsc	3,0
  4739  04BC  0008               	return
  4740                           
  4741                           ;bio3.c: 54: if (conf.datashort & 0x0001) {
  4742  04BD  1C20               	btfss	BIO_config@conf,0
  4743  04BE  2CC1               	goto	l2503
  4744                           
  4745                           ;bio3.c: 55: out |= 0b00000100; PORTC = out;;
  4746  04BF  1524               	bsf	BIO_config@out,2
  4747  04C0  2CC5               	goto	l2505
  4748  04C1                     l2503:	
  4749                           ;bio3.c: 56: } else {
  4750                           
  4751                           
  4752                           ;bio3.c: 57: out &= 0b11111011; PORTC = out;;
  4753  04C1  30FB               	movlw	251
  4754  04C2  00A2               	movwf	??_BIO_config
  4755  04C3  0822               	movf	??_BIO_config,w
  4756  04C4  05A4               	andwf	BIO_config@out,f
  4757  04C5                     l2505:	
  4758  04C5  0824               	movf	BIO_config@out,w
  4759  04C6  008E               	movwf	14	;volatile
  4760                           
  4761                           ;bio3.c: 58: }
  4762                           ;bio3.c: 59: conf.datashort >>= 1;
  4763  04C7  3001               	movlw	1
  4764  04C8                     u1255:	
  4765  04C8  36A1               	lsrf	BIO_config@conf+1,f
  4766  04C9  0CA0               	rrf	BIO_config@conf,f
  4767  04CA  0B89               	decfsz	9,f
  4768  04CB  2CC8               	goto	u1255
  4769                           
  4770                           ;bio3.c: 61: ;;
  4771                           ;bio3.c: 63: out |= 0b00001000; PORTC = out;;
  4772  04CC  15A4               	bsf	BIO_config@out,3
  4773  04CD  0824               	movf	BIO_config@out,w
  4774  04CE  008E               	movwf	14	;volatile
  4775                           
  4776                           ;bio3.c: 64: ;;
  4777                           ;bio3.c: 65: out &= 0b11110111; PORTC = out;;
  4778  04CF  30F7               	movlw	247
  4779  04D0  00A2               	movwf	??_BIO_config
  4780  04D1  0822               	movf	??_BIO_config,w
  4781  04D2  05A4               	andwf	BIO_config@out,f
  4782  04D3  0824               	movf	BIO_config@out,w
  4783  04D4  008E               	movwf	14	;volatile
  4784  04D5  3001               	movlw	1
  4785  04D6  00A2               	movwf	??_BIO_config
  4786  04D7  0822               	movf	??_BIO_config,w
  4787  04D8  07A3               	addwf	BIO_config@i,f
  4788  04D9  2CB9               	goto	L3
  4789  04DA                     __end_of_BIO_config:	
  4790                           
  4791                           	psect	text22
  4792  047F                     __ptext22:	
  4793 ;; *************** function _calibrate_reader *****************
  4794 ;; Defined at:
  4795 ;;		line 419 in file "comm.c"
  4796 ;; Parameters:    Size  Location     Type
  4797 ;;		None
  4798 ;; Auto vars:     Size  Location     Type
  4799 ;;  aux             8    6[BANK0 ] unsigned char [8]
  4800 ;; Return value:  Size  Location     Type
  4801 ;;                  1    wreg      void 
  4802 ;; Registers used:
  4803 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4804 ;; Tracked objects:
  4805 ;;		On entry : 0/0
  4806 ;;		On exit  : 0/0
  4807 ;;		Unchanged: 0/0
  4808 ;; Data sizes:     COMMON   BANK0   BANK1
  4809 ;;      Params:         0       0       0
  4810 ;;      Locals:         0       8       0
  4811 ;;      Temps:          0       1       0
  4812 ;;      Totals:         0       9       0
  4813 ;;Total ram usage:        9 bytes
  4814 ;; Hardware stack levels used:    1
  4815 ;; Hardware stack levels required when called:    4
  4816 ;; This function calls:
  4817 ;;		_lputs_ISR
  4818 ;; This function is called by:
  4819 ;;		_mess_handler
  4820 ;; This function uses a non-reentrant model
  4821 ;;
  4822                           
  4823                           
  4824                           ;psect for function _calibrate_reader
  4825  047F                     _calibrate_reader:	
  4826                           
  4827                           ;comm.c: 421: unsigned char aux[8];
  4828                           ;comm.c: 423: aux[0] = 'h';
  4829                           
  4830                           ;incstack = 0
  4831                           ; Regs used in _calibrate_reader: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4832  047F  3068               	movlw	104
  4833  0480  0020               	movlb	0	; select bank0
  4834  0481  00A5               	movwf	??_calibrate_reader
  4835  0482  0825               	movf	??_calibrate_reader,w
  4836  0483  00A6               	movwf	calibrate_reader@aux
  4837                           
  4838                           ;comm.c: 424: aux[1] = 'o';
  4839  0484  306F               	movlw	111
  4840  0485  00A5               	movwf	??_calibrate_reader
  4841  0486  0825               	movf	??_calibrate_reader,w
  4842  0487  00A7               	movwf	calibrate_reader@aux+1
  4843                           
  4844                           ;comm.c: 425: aux[2] = 'l';
  4845  0488  306C               	movlw	108
  4846  0489  00A5               	movwf	??_calibrate_reader
  4847  048A  0825               	movf	??_calibrate_reader,w
  4848  048B  00A8               	movwf	calibrate_reader@aux+2
  4849                           
  4850                           ;comm.c: 426: aux[3] = 'a';
  4851  048C  3061               	movlw	97
  4852  048D  00A5               	movwf	??_calibrate_reader
  4853  048E  0825               	movf	??_calibrate_reader,w
  4854  048F  00A9               	movwf	calibrate_reader@aux+3
  4855                           
  4856                           ;comm.c: 427: aux[4] = 0x00;
  4857  0490  01AA               	clrf	calibrate_reader@aux+4
  4858                           
  4859                           ;comm.c: 428: aux[5] = 0xaa;
  4860  0491  30AA               	movlw	170
  4861  0492  00A5               	movwf	??_calibrate_reader
  4862  0493  0825               	movf	??_calibrate_reader,w
  4863  0494  00AB               	movwf	calibrate_reader@aux+5
  4864                           
  4865                           ;comm.c: 429: aux[6] = 0xfe;
  4866  0495  30FE               	movlw	254
  4867  0496  00A5               	movwf	??_calibrate_reader
  4868  0497  0825               	movf	??_calibrate_reader,w
  4869  0498  00AC               	movwf	calibrate_reader@aux+6
  4870                           
  4871                           ;comm.c: 430: aux[7] = '@';
  4872  0499  3040               	movlw	64
  4873  049A  00A5               	movwf	??_calibrate_reader
  4874  049B  0825               	movf	??_calibrate_reader,w
  4875  049C  00AD               	movwf	calibrate_reader@aux+7
  4876  049D                     l399:	
  4877                           ;comm.c: 432: while (1) {
  4878                           
  4879  049D  0064               	clrwdt	;# 
  4880                           
  4881                           ;comm.c: 434: _delay((unsigned long)((250)*(500000/4000.0)));
  4882  049E  3029               	movlw	41
  4883  049F  0020               	movlb	0	; select bank0
  4884  04A0  00A5               	movwf	??_calibrate_reader
  4885  04A1  3094               	movlw	148
  4886  04A2                     u1807:	
  4887  04A2  0B89               	decfsz	9,f
  4888  04A3  2CA2               	goto	u1807
  4889  04A4  0BA5               	decfsz	??_calibrate_reader,f
  4890  04A5  2CA2               	goto	u1807
  4891  04A6  0000               	nop
  4892                           
  4893                           ;comm.c: 435: lputs_ISR(aux,8);
  4894  04A7  3008               	movlw	8
  4895  04A8  0020               	movlb	0	; select bank0
  4896  04A9  00A5               	movwf	??_calibrate_reader
  4897  04AA  0825               	movf	??_calibrate_reader,w
  4898  04AB  00A0               	movwf	lputs_ISR@length
  4899  04AC  3026               	movlw	(low (calibrate_reader@aux| 0))& (0+255)
  4900  04AD  24DA               	fcall	_lputs_ISR
  4901  04AE  2C9D               	goto	l399
  4902  04AF                     __end_of_calibrate_reader:	
  4903                           
  4904                           	psect	text23
  4905  04DA                     __ptext23:	
  4906 ;; *************** function _lputs_ISR *****************
  4907 ;; Defined at:
  4908 ;;		line 132 in file "USART1823.c"
  4909 ;; Parameters:    Size  Location     Type
  4910 ;;  data            1    wreg     PTR unsigned char 
  4911 ;;		 -> sweep@aux(7), calibrate_reader@aux(8), measure_Impedance_SE@aux(8), measure_Offset@aux(5), 
  4912 ;;		 -> measure_Impedance_no_offset@aux(13), measure_Impedance@aux(13), read_ADC_channels@aux(7), mess_rec(10), 
  4913 ;;  length          1    0[BANK0 ] unsigned char 
  4914 ;; Auto vars:     Size  Location     Type
  4915 ;;  data            1    4[BANK0 ] PTR unsigned char 
  4916 ;;		 -> sweep@aux(7), calibrate_reader@aux(8), measure_Impedance_SE@aux(8), measure_Offset@aux(5), 
  4917 ;;		 -> measure_Impedance_no_offset@aux(13), measure_Impedance@aux(13), read_ADC_channels@aux(7), mess_rec(10), 
  4918 ;;  i               1    3[BANK0 ] unsigned char 
  4919 ;; Return value:  Size  Location     Type
  4920 ;;                  1    wreg      void 
  4921 ;; Registers used:
  4922 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4923 ;; Tracked objects:
  4924 ;;		On entry : 0/0
  4925 ;;		On exit  : 0/0
  4926 ;;		Unchanged: 0/0
  4927 ;; Data sizes:     COMMON   BANK0   BANK1
  4928 ;;      Params:         0       1       0
  4929 ;;      Locals:         0       2       0
  4930 ;;      Temps:          0       2       0
  4931 ;;      Totals:         0       5       0
  4932 ;;Total ram usage:        5 bytes
  4933 ;; Hardware stack levels used:    1
  4934 ;; Hardware stack levels required when called:    3
  4935 ;; This function calls:
  4936 ;;		_close_RX_USART
  4937 ;; This function is called by:
  4938 ;;		_mess_handler
  4939 ;;		_config_ASIC
  4940 ;;		_read_ADC_channels
  4941 ;;		_measure_Impedance
  4942 ;;		_measure_Impedance_no_offset
  4943 ;;		_measure_Offset
  4944 ;;		_measure_Impedance_SE
  4945 ;;		_calibrate_reader
  4946 ;;		_sweep
  4947 ;; This function uses a non-reentrant model
  4948 ;;
  4949                           
  4950                           
  4951                           ;psect for function _lputs_ISR
  4952  04DA                     _lputs_ISR:	
  4953                           
  4954                           ;incstack = 0
  4955                           ; Regs used in _lputs_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4956                           ;lputs_ISR@data stored from wreg
  4957  04DA  0020               	movlb	0	; select bank0
  4958  04DB  00A4               	movwf	lputs_ISR@data
  4959                           
  4960                           ;USART1823.c: 134: unsigned char i;
  4961                           ;USART1823.c: 136: if (USART_tx_flag == 1)
  4962  04DC  0372               	decf	_USART_tx_flag,w	;volatile
  4963  04DD  1903               	btfsc	3,2
  4964  04DE  0008               	return
  4965                           
  4966                           ;USART1823.c: 139: for (i = 0; i < length; i++)
  4967                           
  4968                           ;USART1823.c: 137: return;
  4969  04DF  01A3               	clrf	lputs_ISR@i
  4970  04E0                     l2567:	
  4971  04E0  0820               	movf	lputs_ISR@length,w
  4972  04E1  0223               	subwf	lputs_ISR@i,w
  4973  04E2  1803               	btfsc	3,0
  4974  04E3  2CF7               	goto	l2569
  4975                           
  4976                           ;USART1823.c: 140: USART_tx_data[i] = data[i];
  4977  04E4  0823               	movf	lputs_ISR@i,w
  4978  04E5  0724               	addwf	lputs_ISR@data,w
  4979  04E6  00A1               	movwf	??_lputs_ISR
  4980  04E7  0821               	movf	??_lputs_ISR,w
  4981  04E8  0086               	movwf	6
  4982  04E9  0187               	clrf	7
  4983  04EA  0801               	movf	1,w
  4984  04EB  00A2               	movwf	??_lputs_ISR+1
  4985  04EC  0823               	movf	lputs_ISR@i,w
  4986  04ED  3EA0               	addlw	(low (_USART_tx_data| 0))& (0+255)
  4987  04EE  0086               	movwf	6
  4988  04EF  0187               	clrf	7
  4989  04F0  0822               	movf	??_lputs_ISR+1,w
  4990  04F1  0081               	movwf	1
  4991  04F2  3001               	movlw	1
  4992  04F3  00A1               	movwf	??_lputs_ISR
  4993  04F4  0821               	movf	??_lputs_ISR,w
  4994  04F5  07A3               	addwf	lputs_ISR@i,f
  4995  04F6  2CE0               	goto	l2567
  4996  04F7                     l2569:	
  4997                           
  4998                           ;USART1823.c: 142: close_RX_USART();
  4999  04F7  263A               	fcall	_close_RX_USART
  5000                           
  5001                           ;USART1823.c: 144: USART_tx_index = 0;
  5002  04F8  01F3               	clrf	_USART_tx_index	;volatile
  5003                           
  5004                           ;USART1823.c: 145: USART_tx_length = length;
  5005  04F9  0020               	movlb	0	; select bank0
  5006  04FA  0820               	movf	lputs_ISR@length,w
  5007  04FB  00A1               	movwf	??_lputs_ISR
  5008  04FC  0821               	movf	??_lputs_ISR,w
  5009  04FD  00F4               	movwf	_USART_tx_length	;volatile
  5010                           
  5011                           ;USART1823.c: 147: USART_tx_flag = 1;
  5012  04FE  3001               	movlw	1
  5013  04FF  00A1               	movwf	??_lputs_ISR
  5014  0500  0821               	movf	??_lputs_ISR,w
  5015  0501  00F2               	movwf	_USART_tx_flag	;volatile
  5016                           
  5017                           ;USART1823.c: 148: TXIE = 1;
  5018  0502  0021               	movlb	1	; select bank1
  5019  0503  1611               	bsf	17,4	;volatile
  5020  0504  0008               	return
  5021  0505                     __end_of_lputs_ISR:	
  5022                           
  5023                           	psect	text24
  5024  063A                     __ptext24:	
  5025 ;; *************** function _close_RX_USART *****************
  5026 ;; Defined at:
  5027 ;;		line 35 in file "USART1823.c"
  5028 ;; Parameters:    Size  Location     Type
  5029 ;;		None
  5030 ;; Auto vars:     Size  Location     Type
  5031 ;;		None
  5032 ;; Return value:  Size  Location     Type
  5033 ;;                  1    wreg      void 
  5034 ;; Registers used:
  5035 ;;		status,2
  5036 ;; Tracked objects:
  5037 ;;		On entry : 0/0
  5038 ;;		On exit  : 0/0
  5039 ;;		Unchanged: 0/0
  5040 ;; Data sizes:     COMMON   BANK0   BANK1
  5041 ;;      Params:         0       0       0
  5042 ;;      Locals:         0       0       0
  5043 ;;      Temps:          0       0       0
  5044 ;;      Totals:         0       0       0
  5045 ;;Total ram usage:        0 bytes
  5046 ;; Hardware stack levels used:    1
  5047 ;; Hardware stack levels required when called:    2
  5048 ;; This function calls:
  5049 ;;		Nothing
  5050 ;; This function is called by:
  5051 ;;		_lputs_ISR
  5052 ;; This function uses a non-reentrant model
  5053 ;;
  5054                           
  5055                           
  5056                           ;psect for function _close_RX_USART
  5057  063A                     _close_RX_USART:	
  5058                           
  5059                           ;USART1823.c: 39: RCIE = 0;
  5060                           
  5061                           ;incstack = 0
  5062                           ; Regs used in _close_RX_USART: [status,2]
  5063  063A  0021               	movlb	1	; select bank1
  5064  063B  1291               	bcf	17,5	;volatile
  5065                           
  5066                           ;USART1823.c: 40: CREN = 0;
  5067  063C  0023               	movlb	3	; select bank3
  5068  063D  121D               	bcf	29,4	;volatile
  5069                           
  5070                           ;USART1823.c: 41: USART_rx_index = 0;
  5071  063E  0020               	movlb	0	; select bank0
  5072  063F  01DF               	clrf	_USART_rx_index	;volatile
  5073  0640  0008               	return
  5074  0641                     __end_of_close_RX_USART:	
  5075                           
  5076                           	psect	text25
  5077  0657                     __ptext25:	
  5078 ;; *************** function _USARTX_change_pol *****************
  5079 ;; Defined at:
  5080 ;;		line 90 in file "mcc_generated_files/mcc.c"
  5081 ;; Parameters:    Size  Location     Type
  5082 ;;		None
  5083 ;; Auto vars:     Size  Location     Type
  5084 ;;		None
  5085 ;; Return value:  Size  Location     Type
  5086 ;;                  1    wreg      void 
  5087 ;; Registers used:
  5088 ;;		None
  5089 ;; Tracked objects:
  5090 ;;		On entry : 0/0
  5091 ;;		On exit  : 0/0
  5092 ;;		Unchanged: 0/0
  5093 ;; Data sizes:     COMMON   BANK0   BANK1
  5094 ;;      Params:         0       0       0
  5095 ;;      Locals:         0       0       0
  5096 ;;      Temps:          0       0       0
  5097 ;;      Totals:         0       0       0
  5098 ;;Total ram usage:        0 bytes
  5099 ;; Hardware stack levels used:    1
  5100 ;; Hardware stack levels required when called:    2
  5101 ;; This function calls:
  5102 ;;		Nothing
  5103 ;; This function is called by:
  5104 ;;		_main
  5105 ;; This function uses a non-reentrant model
  5106 ;;
  5107                           
  5108                           
  5109                           ;psect for function _USARTX_change_pol
  5110  0657                     _USARTX_change_pol:	
  5111                           
  5112                           ;mcc.c: 92: SCKP = 1;
  5113                           
  5114                           ;incstack = 0
  5115                           ; Regs used in _USARTX_change_pol: []
  5116  0657  0023               	movlb	3	; select bank3
  5117  0658  161F               	bsf	31,4	;volatile
  5118  0659  0008               	return
  5119  065A                     __end_of_USARTX_change_pol:	
  5120                           
  5121                           	psect	text26
  5122  065A                     __ptext26:	
  5123 ;; *************** function _SYSTEM_Initialize *****************
  5124 ;; Defined at:
  5125 ;;		line 70 in file "mcc_generated_files/mcc.c"
  5126 ;; Parameters:    Size  Location     Type
  5127 ;;		None
  5128 ;; Auto vars:     Size  Location     Type
  5129 ;;		None
  5130 ;; Return value:  Size  Location     Type
  5131 ;;                  1    wreg      void 
  5132 ;; Registers used:
  5133 ;;		wreg, status,2, status,0, pclath, cstack
  5134 ;; Tracked objects:
  5135 ;;		On entry : 0/0
  5136 ;;		On exit  : 0/0
  5137 ;;		Unchanged: 0/0
  5138 ;; Data sizes:     COMMON   BANK0   BANK1
  5139 ;;      Params:         0       0       0
  5140 ;;      Locals:         0       0       0
  5141 ;;      Temps:          0       0       0
  5142 ;;      Totals:         0       0       0
  5143 ;;Total ram usage:        0 bytes
  5144 ;; Hardware stack levels used:    1
  5145 ;; Hardware stack levels required when called:    3
  5146 ;; This function calls:
  5147 ;;		_OSCILLATOR_Initialize
  5148 ;;		_PIN_MANAGER_Initialize
  5149 ;; This function is called by:
  5150 ;;		_main
  5151 ;; This function uses a non-reentrant model
  5152 ;;
  5153                           
  5154                           
  5155                           ;psect for function _SYSTEM_Initialize
  5156  065A                     _SYSTEM_Initialize:	
  5157                           
  5158                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  5159                           
  5160                           ;incstack = 0
  5161                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5162  065A  25B0               	fcall	_PIN_MANAGER_Initialize
  5163                           
  5164                           ;mcc.c: 74: OSCILLATOR_Initialize();
  5165  065B  264D               	fcall	_OSCILLATOR_Initialize
  5166  065C  0008               	return
  5167  065D                     __end_of_SYSTEM_Initialize:	
  5168                           
  5169                           	psect	text27
  5170  05B0                     __ptext27:	
  5171 ;; *************** function _PIN_MANAGER_Initialize *****************
  5172 ;; Defined at:
  5173 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  5174 ;; Parameters:    Size  Location     Type
  5175 ;;		None
  5176 ;; Auto vars:     Size  Location     Type
  5177 ;;		None
  5178 ;; Return value:  Size  Location     Type
  5179 ;;                  1    wreg      void 
  5180 ;; Registers used:
  5181 ;;		wreg, status,2
  5182 ;; Tracked objects:
  5183 ;;		On entry : 0/0
  5184 ;;		On exit  : 0/0
  5185 ;;		Unchanged: 0/0
  5186 ;; Data sizes:     COMMON   BANK0   BANK1
  5187 ;;      Params:         0       0       0
  5188 ;;      Locals:         0       0       0
  5189 ;;      Temps:          0       0       0
  5190 ;;      Totals:         0       0       0
  5191 ;;Total ram usage:        0 bytes
  5192 ;; Hardware stack levels used:    1
  5193 ;; Hardware stack levels required when called:    2
  5194 ;; This function calls:
  5195 ;;		Nothing
  5196 ;; This function is called by:
  5197 ;;		_SYSTEM_Initialize
  5198 ;; This function uses a non-reentrant model
  5199 ;;
  5200                           
  5201                           
  5202                           ;psect for function _PIN_MANAGER_Initialize
  5203  05B0                     _PIN_MANAGER_Initialize:	
  5204                           
  5205                           ;pin_manager.c: 51: LATA = 0x0;
  5206                           
  5207                           ;incstack = 0
  5208                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  5209  05B0  0022               	movlb	2	; select bank2
  5210  05B1  018C               	clrf	12	;volatile
  5211                           
  5212                           ;pin_manager.c: 52: LATC = 0x0;
  5213  05B2  018E               	clrf	14	;volatile
  5214                           
  5215                           ;pin_manager.c: 55: ANSELA = 0b00000100;
  5216  05B3  3004               	movlw	4
  5217  05B4  0023               	movlb	3	; select bank3
  5218  05B5  008C               	movwf	12	;volatile
  5219                           
  5220                           ;pin_manager.c: 56: ANSELC = 0b00000011;
  5221  05B6  3003               	movlw	3
  5222  05B7  008E               	movwf	14	;volatile
  5223                           
  5224                           ;pin_manager.c: 59: WPUA = 0x3B;
  5225  05B8  303B               	movlw	59
  5226  05B9  0024               	movlb	4	; select bank4
  5227  05BA  008C               	movwf	12	;volatile
  5228                           
  5229                           ;pin_manager.c: 61: WPUC = 0x1C;
  5230  05BB  301C               	movlw	28
  5231  05BC  008E               	movwf	14	;volatile
  5232                           
  5233                           ;pin_manager.c: 63: RXDTSEL = 0;
  5234  05BD  0022               	movlb	2	; select bank2
  5235  05BE  139D               	bcf	29,7	;volatile
  5236                           
  5237                           ;pin_manager.c: 64: TXCKSEL = 0;
  5238  05BF  111D               	bcf	29,2	;volatile
  5239                           
  5240                           ;pin_manager.c: 67: TRISC = 0b01100011;
  5241  05C0  3063               	movlw	99
  5242  05C1  0021               	movlb	1	; select bank1
  5243  05C2  008E               	movwf	14	;volatile
  5244                           
  5245                           ;pin_manager.c: 68: TRISA = 0b01011111;
  5246  05C3  305F               	movlw	95
  5247  05C4  008C               	movwf	12	;volatile
  5248                           
  5249                           ;pin_manager.c: 70: OPTION_REGbits.nWPUEN = 0x0;
  5250  05C5  1395               	bcf	21,7	;volatile
  5251                           
  5252                           ;pin_manager.c: 71: APFCON = 0x00;
  5253  05C6  0022               	movlb	2	; select bank2
  5254  05C7  019D               	clrf	29	;volatile
  5255  05C8  0008               	return
  5256  05C9                     __end_of_PIN_MANAGER_Initialize:	
  5257                           
  5258                           	psect	text28
  5259  064D                     __ptext28:	
  5260 ;; *************** function _OSCILLATOR_Initialize *****************
  5261 ;; Defined at:
  5262 ;;		line 78 in file "mcc_generated_files/mcc.c"
  5263 ;; Parameters:    Size  Location     Type
  5264 ;;		None
  5265 ;; Auto vars:     Size  Location     Type
  5266 ;;		None
  5267 ;; Return value:  Size  Location     Type
  5268 ;;                  1    wreg      void 
  5269 ;; Registers used:
  5270 ;;		wreg, status,2
  5271 ;; Tracked objects:
  5272 ;;		On entry : 0/0
  5273 ;;		On exit  : 0/0
  5274 ;;		Unchanged: 0/0
  5275 ;; Data sizes:     COMMON   BANK0   BANK1
  5276 ;;      Params:         0       0       0
  5277 ;;      Locals:         0       0       0
  5278 ;;      Temps:          0       0       0
  5279 ;;      Totals:         0       0       0
  5280 ;;Total ram usage:        0 bytes
  5281 ;; Hardware stack levels used:    1
  5282 ;; Hardware stack levels required when called:    2
  5283 ;; This function calls:
  5284 ;;		Nothing
  5285 ;; This function is called by:
  5286 ;;		_SYSTEM_Initialize
  5287 ;; This function uses a non-reentrant model
  5288 ;;
  5289                           
  5290                           
  5291                           ;psect for function _OSCILLATOR_Initialize
  5292  064D                     _OSCILLATOR_Initialize:	
  5293                           
  5294                           ;mcc.c: 81: OSCCON = 0x3A;
  5295                           
  5296                           ;incstack = 0
  5297                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  5298  064D  303A               	movlw	58
  5299  064E  0021               	movlb	1	; select bank1
  5300  064F  0099               	movwf	25	;volatile
  5301                           
  5302                           ;mcc.c: 83: OSCSTAT = 0x00;
  5303  0650  019A               	clrf	26	;volatile
  5304                           
  5305                           ;mcc.c: 85: OSCTUNE = 0x00;
  5306  0651  0198               	clrf	24	;volatile
  5307  0652  0008               	return
  5308  0653                     __end_of_OSCILLATOR_Initialize:	
  5309                           
  5310                           	psect	intentry
  5311  0004                     __pintentry:	
  5312 ;; *************** function _isr *****************
  5313 ;; Defined at:
  5314 ;;		line 142 in file "main.c"
  5315 ;; Parameters:    Size  Location     Type
  5316 ;;		None
  5317 ;; Auto vars:     Size  Location     Type
  5318 ;;		None
  5319 ;; Return value:  Size  Location     Type
  5320 ;;                  1    wreg      void 
  5321 ;; Registers used:
  5322 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5323 ;; Tracked objects:
  5324 ;;		On entry : 0/0
  5325 ;;		On exit  : 0/0
  5326 ;;		Unchanged: 0/0
  5327 ;; Data sizes:     COMMON   BANK0   BANK1
  5328 ;;      Params:         0       0       0
  5329 ;;      Locals:         0       0       0
  5330 ;;      Temps:          2       0       0
  5331 ;;      Totals:         2       0       0
  5332 ;;Total ram usage:        2 bytes
  5333 ;; Hardware stack levels used:    1
  5334 ;; Hardware stack levels required when called:    1
  5335 ;; This function calls:
  5336 ;;		_start_TMR0_ISR
  5337 ;;		_stop_TMR0_ISR
  5338 ;;		i1_start_RX_USART_ISR
  5339 ;; This function is called by:
  5340 ;;		Interrupt level 1
  5341 ;; This function uses a non-reentrant model
  5342 ;;
  5343                           
  5344  0004                     _isr:	
  5345                           
  5346                           ;incstack = 0
  5347  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  5348                           
  5349                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5350  0005  3180               	pagesel	$
  5351  0006  0020               	movlb	0	; select bank0
  5352  0007  087F               	movf	127,w
  5353  0008  00F9               	movwf	??_isr+1
  5354                           
  5355                           ;main.c: 146: if (TMR0IF && TMR0IE) {
  5356  0009  190B               	btfsc	11,2	;volatile
  5357  000A  1E8B               	btfss	11,5	;volatile
  5358  000B  2815               	goto	i1l131
  5359                           
  5360                           ;main.c: 148: TMR0IF = 0;
  5361  000C  110B               	bcf	11,2	;volatile
  5362                           
  5363                           ;main.c: 149: TMR0 = TIMER0_timeout;
  5364  000D  0870               	movf	_TIMER0_timeout,w	;volatile
  5365  000E  0095               	movwf	21	;volatile
  5366                           
  5367                           ;main.c: 152: TIMER0_flag = 1;
  5368  000F  3001               	movlw	1
  5369  0010  00F8               	movwf	??_isr
  5370  0011  0878               	movf	??_isr,w
  5371  0012  00DD               	movwf	_TIMER0_flag	;volatile
  5372                           
  5373                           ;main.c: 157: stop_TMR0_ISR();
  5374  0013  265D               	fcall	_stop_TMR0_ISR
  5375                           
  5376                           ;main.c: 159: return;
  5377  0014  2851               	goto	i1l132
  5378  0015                     i1l131:	
  5379                           
  5380                           ;main.c: 160: }
  5381                           ;main.c: 164: if (RCIF) {
  5382  0015  1E91               	btfss	17,5	;volatile
  5383  0016  2836               	goto	i1l133
  5384                           
  5385                           ;main.c: 165: stop_TMR0_ISR();
  5386  0017  265D               	fcall	_stop_TMR0_ISR
  5387                           
  5388                           ;main.c: 168: if (OERR) {
  5389  0018  0023               	movlb	3	; select bank3
  5390  0019  1C9D               	btfss	29,1	;volatile
  5391  001A  2820               	goto	i1l2455
  5392                           
  5393                           ;main.c: 170: CREN = 0;
  5394  001B  121D               	bcf	29,4	;volatile
  5395                           
  5396                           ;main.c: 171: CREN = 1;
  5397  001C  161D               	bsf	29,4	;volatile
  5398                           
  5399                           ;main.c: 172: USART_rx_index = 0;
  5400  001D  0020               	movlb	0	; select bank0
  5401  001E  01DF               	clrf	_USART_rx_index	;volatile
  5402                           
  5403                           ;main.c: 173: return;
  5404  001F  2851               	goto	i1l132
  5405  0020                     i1l2455:	
  5406                           
  5407                           ;main.c: 174: }
  5408                           ;main.c: 177: if (USART_rx_index >= 15) {
  5409  0020  300F               	movlw	15
  5410  0021  0020               	movlb	0	; select bank0
  5411  0022  025F               	subwf	_USART_rx_index,w	;volatile
  5412  0023  1803               	btfsc	3,0
  5413                           
  5414                           ;main.c: 178: USART_rx_index = 0;
  5415  0024  01DF               	clrf	_USART_rx_index	;volatile
  5416                           
  5417                           ;main.c: 179: }
  5418                           ;main.c: 181: USART_rx_data[USART_rx_index++] = RCREG;
  5419  0025  0023               	movlb	3	; select bank3
  5420  0026  0819               	movf	25,w	;volatile
  5421  0027  00F8               	movwf	??_isr
  5422  0028  0020               	movlb	0	; select bank0
  5423  0029  085F               	movf	_USART_rx_index,w
  5424  002A  3E4E               	addlw	(low (_USART_rx_data| 0))& (0+255)
  5425  002B  0086               	movwf	6
  5426  002C  0187               	clrf	7
  5427  002D  0878               	movf	??_isr,w
  5428  002E  0081               	movwf	1
  5429  002F  3001               	movlw	1
  5430  0030  00F8               	movwf	??_isr
  5431  0031  0878               	movf	??_isr,w
  5432  0032  07DF               	addwf	_USART_rx_index,f	;volatile
  5433                           
  5434                           ;main.c: 183: start_TMR0_ISR(98);
  5435  0033  3062               	movlw	98
  5436  0034  2614               	fcall	_start_TMR0_ISR
  5437                           
  5438                           ;main.c: 185: return;
  5439  0035  2851               	goto	i1l132
  5440  0036                     i1l133:	
  5441                           
  5442                           ;main.c: 186: }
  5443                           ;main.c: 190: if (TXIF && TXIE) {
  5444  0036  1E11               	btfss	17,4	;volatile
  5445  0037  2851               	goto	i1l132
  5446  0038  0021               	movlb	1	; select bank1
  5447  0039  1E11               	btfss	17,4	;volatile
  5448  003A  2851               	goto	i1l132
  5449                           
  5450                           ;main.c: 192: TXREG = USART_tx_data[USART_tx_index++];
  5451  003B  0873               	movf	_USART_tx_index,w
  5452  003C  3EA0               	addlw	(low (_USART_tx_data| 0))& (0+255)
  5453  003D  0086               	movwf	6
  5454  003E  0187               	clrf	7
  5455  003F  0801               	movf	1,w
  5456  0040  0023               	movlb	3	; select bank3
  5457  0041  009A               	movwf	26	;volatile
  5458  0042  3001               	movlw	1
  5459  0043  00F8               	movwf	??_isr
  5460  0044  0878               	movf	??_isr,w
  5461  0045  07F3               	addwf	_USART_tx_index,f	;volatile
  5462                           
  5463                           ;main.c: 194: if (USART_tx_index >= USART_tx_length) {
  5464  0046  0874               	movf	_USART_tx_length,w	;volatile
  5465  0047  0273               	subwf	_USART_tx_index,w	;volatile
  5466  0048  1C03               	skipc
  5467  0049  2851               	goto	i1l132
  5468                           
  5469                           ;main.c: 195: TXIE = 0;
  5470  004A  0021               	movlb	1	; select bank1
  5471  004B  1211               	bcf	17,4	;volatile
  5472                           
  5473                           ;main.c: 196: USART_tx_flag = 0;
  5474  004C  01F2               	clrf	_USART_tx_flag	;volatile
  5475                           
  5476                           ;main.c: 200: _delay((unsigned long)((3)*(500000/4000.0)));
  5477  004D  307D               	movlw	125
  5478  004E                     u181_27:	
  5479  004E  0B89               	decfsz	9,f
  5480  004F  284E               	goto	u181_27
  5481                           
  5482                           ;main.c: 202: start_RX_USART_ISR();
  5483  0050  2603               	fcall	i1_start_RX_USART_ISR
  5484  0051                     i1l132:	
  5485                           ;main.c: 203: }
  5486                           ;main.c: 204: return;
  5487                           
  5488  0051  0879               	movf	??_isr+1,w
  5489  0052  0020               	movlb	0	; select bank0
  5490  0053  00FF               	movwf	127
  5491  0054  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  5492  0055  0009               	retfie
  5493  0056                     __end_of_isr:	
  5494                           
  5495                           	psect	text30
  5496  0603                     __ptext30:	
  5497 ;; *************** function i1_start_RX_USART_ISR *****************
  5498 ;; Defined at:
  5499 ;;		line 83 in file "USART1823.c"
  5500 ;; Parameters:    Size  Location     Type
  5501 ;;		None
  5502 ;; Auto vars:     Size  Location     Type
  5503 ;;		None
  5504 ;; Return value:  Size  Location     Type
  5505 ;;                  1    wreg      void 
  5506 ;; Registers used:
  5507 ;;		wreg, status,2
  5508 ;; Tracked objects:
  5509 ;;		On entry : 0/0
  5510 ;;		On exit  : 0/0
  5511 ;;		Unchanged: 0/0
  5512 ;; Data sizes:     COMMON   BANK0   BANK1
  5513 ;;      Params:         0       0       0
  5514 ;;      Locals:         0       0       0
  5515 ;;      Temps:          0       0       0
  5516 ;;      Totals:         0       0       0
  5517 ;;Total ram usage:        0 bytes
  5518 ;; Hardware stack levels used:    1
  5519 ;; This function calls:
  5520 ;;		Nothing
  5521 ;; This function is called by:
  5522 ;;		_isr
  5523 ;; This function uses a non-reentrant model
  5524 ;;
  5525                           
  5526                           
  5527                           ;psect for function i1_start_RX_USART_ISR
  5528  0603                     i1_start_RX_USART_ISR:	
  5529                           
  5530                           ;USART1823.c: 86: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  5531                           
  5532                           ;incstack = 0
  5533                           ; Regs used in i1_start_RX_USART_ISR: [wreg+status,2]
  5534  0603  0023               	movlb	3	; select bank3
  5535  0604  151E               	bsf	30,2	;volatile
  5536  0605  159F               	bsf	31,3	;volatile
  5537  0606  019C               	clrf	28	;volatile
  5538  0607  300C               	movlw	12
  5539  0608  009B               	movwf	27	;volatile
  5540                           
  5541                           ;USART1823.c: 88: SYNC = 0;
  5542  0609  121E               	bcf	30,4	;volatile
  5543                           
  5544                           ;USART1823.c: 89: SPEN = 1;
  5545  060A  179D               	bsf	29,7	;volatile
  5546                           
  5547                           ;USART1823.c: 90: CREN = 1;
  5548  060B  161D               	bsf	29,4	;volatile
  5549                           
  5550                           ;USART1823.c: 92: USART_rx_flag = 0;
  5551  060C  0020               	movlb	0	; select bank0
  5552  060D  01DE               	clrf	_USART_rx_flag	;volatile
  5553                           
  5554                           ;USART1823.c: 93: USART_rx_index = 0;
  5555  060E  01DF               	clrf	_USART_rx_index	;volatile
  5556                           
  5557                           ;USART1823.c: 95: RCIE = 1;
  5558  060F  0021               	movlb	1	; select bank1
  5559  0610  1691               	bsf	17,5	;volatile
  5560                           
  5561                           ;USART1823.c: 96: PEIE = 1;
  5562  0611  170B               	bsf	11,6	;volatile
  5563                           
  5564                           ;USART1823.c: 97: GIE = 1;
  5565  0612  178B               	bsf	11,7	;volatile
  5566  0613  0008               	return
  5567  0614                     __end_ofi1_start_RX_USART_ISR:	
  5568                           
  5569                           	psect	text31
  5570  065D                     __ptext31:	
  5571 ;; *************** function _stop_TMR0_ISR *****************
  5572 ;; Defined at:
  5573 ;;		line 44 in file "TMR0.c"
  5574 ;; Parameters:    Size  Location     Type
  5575 ;;		None
  5576 ;; Auto vars:     Size  Location     Type
  5577 ;;		None
  5578 ;; Return value:  Size  Location     Type
  5579 ;;                  1    wreg      void 
  5580 ;; Registers used:
  5581 ;;		None
  5582 ;; Tracked objects:
  5583 ;;		On entry : 0/0
  5584 ;;		On exit  : 0/0
  5585 ;;		Unchanged: 0/0
  5586 ;; Data sizes:     COMMON   BANK0   BANK1
  5587 ;;      Params:         0       0       0
  5588 ;;      Locals:         0       0       0
  5589 ;;      Temps:          0       0       0
  5590 ;;      Totals:         0       0       0
  5591 ;;Total ram usage:        0 bytes
  5592 ;; Hardware stack levels used:    1
  5593 ;; This function calls:
  5594 ;;		Nothing
  5595 ;; This function is called by:
  5596 ;;		_isr
  5597 ;; This function uses a non-reentrant model
  5598 ;;
  5599                           
  5600                           
  5601                           ;psect for function _stop_TMR0_ISR
  5602  065D                     _stop_TMR0_ISR:	
  5603                           
  5604                           ;TMR0.c: 47: TMR0IE = 0;
  5605                           
  5606                           ;incstack = 0
  5607                           ; Regs used in _stop_TMR0_ISR: []
  5608  065D  128B               	bcf	11,5	;volatile
  5609                           
  5610                           ;TMR0.c: 48: TMR0IF = 0;
  5611  065E  110B               	bcf	11,2	;volatile
  5612  065F  0008               	return
  5613  0660                     __end_of_stop_TMR0_ISR:	
  5614                           
  5615                           	psect	text32
  5616  0614                     __ptext32:	
  5617 ;; *************** function _start_TMR0_ISR *****************
  5618 ;; Defined at:
  5619 ;;		line 30 in file "TMR0.c"
  5620 ;; Parameters:    Size  Location     Type
  5621 ;;  val             1    wreg     unsigned char 
  5622 ;; Auto vars:     Size  Location     Type
  5623 ;;  val             1    2[COMMON] unsigned char 
  5624 ;; Return value:  Size  Location     Type
  5625 ;;                  1    wreg      void 
  5626 ;; Registers used:
  5627 ;;		wreg, status,2
  5628 ;; Tracked objects:
  5629 ;;		On entry : 0/0
  5630 ;;		On exit  : 0/0
  5631 ;;		Unchanged: 0/0
  5632 ;; Data sizes:     COMMON   BANK0   BANK1
  5633 ;;      Params:         0       0       0
  5634 ;;      Locals:         1       0       0
  5635 ;;      Temps:          2       0       0
  5636 ;;      Totals:         3       0       0
  5637 ;;Total ram usage:        3 bytes
  5638 ;; Hardware stack levels used:    1
  5639 ;; This function calls:
  5640 ;;		Nothing
  5641 ;; This function is called by:
  5642 ;;		_isr
  5643 ;; This function uses a non-reentrant model
  5644 ;;
  5645                           
  5646                           
  5647                           ;psect for function _start_TMR0_ISR
  5648  0614                     _start_TMR0_ISR:	
  5649                           
  5650                           ;incstack = 0
  5651                           ; Regs used in _start_TMR0_ISR: [wreg+status,2]
  5652                           ;start_TMR0_ISR@val stored from wreg
  5653  0614  00F7               	movwf	start_TMR0_ISR@val
  5654                           
  5655                           ;TMR0.c: 32: TIMER0_timeout = val;
  5656  0615  0877               	movf	start_TMR0_ISR@val,w
  5657  0616  00F5               	movwf	??_start_TMR0_ISR
  5658  0617  01F6               	clrf	??_start_TMR0_ISR+1
  5659  0618  0875               	movf	??_start_TMR0_ISR,w
  5660  0619  00F0               	movwf	_TIMER0_timeout	;volatile
  5661  061A  0876               	movf	??_start_TMR0_ISR+1,w
  5662  061B  00F1               	movwf	_TIMER0_timeout+1	;volatile
  5663                           
  5664                           ;TMR0.c: 33: TIMER0_flag = 0;
  5665  061C  0020               	movlb	0	; select bank0
  5666  061D  01DD               	clrf	_TIMER0_flag	;volatile
  5667                           
  5668                           ;TMR0.c: 36: TMR0 = TIMER0_timeout;
  5669  061E  0870               	movf	_TIMER0_timeout,w	;volatile
  5670  061F  0095               	movwf	21	;volatile
  5671                           
  5672                           ;TMR0.c: 39: TMR0IF = 0;
  5673  0620  110B               	bcf	11,2	;volatile
  5674                           
  5675                           ;TMR0.c: 40: TMR0IE = 1;
  5676  0621  168B               	bsf	11,5	;volatile
  5677                           
  5678                           ;TMR0.c: 41: GIE = 1;
  5679  0622  178B               	bsf	11,7	;volatile
  5680  0623  0008               	return
  5681  0624                     __end_of_start_TMR0_ISR:	
  5682  007E                     btemp	set	126	;btemp
  5683  007E                     int$flags	set	126
  5684  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    19
    Data        0
    BSS         49
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     46      75
    BANK1            32      0      15

Pointer List with Targets:

    measure@Q	PTR short  size(1) Largest target is 2
		 -> sweep@Q(BANK0[2]), 

    measure@I	PTR short  size(1) Largest target is 2
		 -> sweep@I(BANK0[2]), 

    calculate_checksum@data	PTR unsigned char  size(1) Largest target is 10
		 -> sweep@aux(BANK0[7]), measure_Impedance_SE@aux(BANK0[8]), mess_rec(BANK0[10]), 

    lputs_ISR@data	PTR unsigned char  size(1) Largest target is 13
		 -> sweep@aux(BANK0[7]), calibrate_reader@aux(BANK0[8]), measure_Impedance_SE@aux(BANK0[8]), measure_Offset@aux(BANK0[5]), 
		 -> measure_Impedance_no_offset@aux(BANK0[13]), measure_Impedance@aux(BANK0[13]), read_ADC_channels@aux(BANK0[7]), mess_rec(BANK0[10]), 

    setFreq@asic	PTR struct . size(1) Largest target is 2
		 -> sweep@asic(BANK0[2]), 

    setGain@asic	PTR struct . size(1) Largest target is 2
		 -> sweep@asic(BANK0[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_start_TMR0_ISR

Critical Paths under _main in BANK0

    _main->_mess_handler
    _mess_handler->_sweep
    _sweep->_measure
    _measure->_ADC_5
    _read_ADC_channels->_ADC_2
    _read_ADC_channels->_ADC_4
    _read_ADC_channels->_ADC_5
    _measure_Offset->_ADC_2
    _measure_Offset->_ADC_4
    _measure_Impedance_no_offset->_ADC_2
    _measure_Impedance_no_offset->_ADC_4
    _measure_Impedance_SE->_ADC_5
    _measure_Impedance_SE->_calculate_checksum
    _measure_Impedance->_ADC_2
    _measure_Impedance->_ADC_4
    _config_ASIC->_BIO_config
    _config_ASIC->_lputs_ISR
    _calibrate_reader->_lputs_ISR

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   30747
                                             44 BANK0      2     2      0
                  _SYSTEM_Initialize
                  _USARTX_change_pol
                       _mess_handler
                          _setup_ADC
                         _setup_TMR0
                          _start_RCM
                 _start_RX_USART_ISR
                 _start_TX_USART_ISR
 ---------------------------------------------------------------------------------
 (1) _start_TX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RCM                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_TMR0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_ADC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _mess_handler                                         1     1      0   30648
                                             43 BANK0      1     1      0
                   _calibrate_reader
                        _config_ASIC
                          _lputs_ISR
                  _measure_Impedance
               _measure_Impedance_SE
        _measure_Impedance_no_offset
                     _measure_Offset
                  _read_ADC_channels
                              _sweep
 ---------------------------------------------------------------------------------
 (2) _sweep                                               21    21      0    6989
                                             22 BANK0     21    21      0
                 _calculate_checksum
                          _lputs_ISR
                            _measure
                            _setFreq
                            _setGain
 ---------------------------------------------------------------------------------
 (3) _setGain                                              4     3      1     846
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) _setFreq                                              4     3      1     408
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) _measure                                             16    13      3    2416
                                              6 BANK0     16    13      3
                              _ADC_5
                         _BIO_config
 ---------------------------------------------------------------------------------
 (2) _read_ADC_channels                                   14    14      0    2026
                                              6 BANK0     14    14      0
                              _ADC_2
                              _ADC_4
                              _ADC_5
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (2) _measure_Offset                                      12    12      0    3363
                                              6 BANK0     12    12      0
                              _ADC_2
                              _ADC_4
                         _BIO_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (2) _measure_Impedance_no_offset                         22    22      0    3740
                                              6 BANK0     20    20      0
                              _ADC_2
                              _ADC_4
                         _BIO_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (2) _measure_Impedance_SE                                15    15      0    4313
                                              6 BANK0     15    15      0
                              _ADC_5
                         _BIO_config
                 _calculate_checksum
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (3) _calculate_checksum                                   6     5      1     545
                                              0 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (4) _ADC_5                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _measure_Impedance                                   22    22      0    4052
                                              6 BANK0     20    20      0
                              _ADC_2
                              _ADC_4
                         _BIO_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (3) _ADC_4                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _ADC_2                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _config_ASIC                                          3     3      0    2965
                                              5 BANK0      3     3      0
                         _BIO_config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (4) _BIO_config                                           5     3      2    1442
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _calibrate_reader                                     9     9      0    1748
                                              5 BANK0      9     9      0
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (3) _lputs_ISR                                            5     4      1    1452
                                              0 BANK0      5     4      1
                     _close_RX_USART
 ---------------------------------------------------------------------------------
 (4) _close_RX_USART                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _USARTX_change_pol                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  2     2      0      22
                                              3 COMMON     2     2      0
                     _start_TMR0_ISR
                      _stop_TMR0_ISR
               i1_start_RX_USART_ISR
 ---------------------------------------------------------------------------------
 (6) i1_start_RX_USART_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _stop_TMR0_ISR                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _start_TMR0_ISR                                       3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _USARTX_change_pol
   _mess_handler
     _calibrate_reader
       _lputs_ISR
         _close_RX_USART
     _config_ASIC
       _BIO_config
       _lputs_ISR
         _close_RX_USART
     _lputs_ISR
       _close_RX_USART
     _measure_Impedance
       _ADC_2
       _ADC_4
       _BIO_config
       _lputs_ISR
         _close_RX_USART
     _measure_Impedance_SE
       _ADC_5
       _BIO_config
       _calculate_checksum
       _lputs_ISR
         _close_RX_USART
     _measure_Impedance_no_offset
       _ADC_2
       _ADC_4
       _BIO_config
       _lputs_ISR
         _close_RX_USART
     _measure_Offset
       _ADC_2
       _ADC_4
       _BIO_config
       _lputs_ISR
         _close_RX_USART
     _read_ADC_channels
       _ADC_2
       _ADC_4
       _ADC_5
       _lputs_ISR
         _close_RX_USART
     _sweep
       _calculate_checksum
       _lputs_ISR
         _close_RX_USART
       _measure
         _ADC_5
         _BIO_config
       _setFreq
       _setGain
   _setup_ADC
   _setup_TMR0
   _start_RCM
   _start_RX_USART_ISR
   _start_TX_USART_ISR

 _isr (ROOT)
   _start_TMR0_ISR
   _stop_TMR0_ISR
   i1_start_RX_USART_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      64       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2E      4B       6       93.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       F       8       46.9%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      64       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Apr  3 09:40:26 2017

                         __CFG_CP$OFF 0000                         _USART_rx_data 004E  
                       _USART_rx_flag 005E                         _USART_tx_data 00A0  
                       _USART_tx_flag 0072                                   l119 0365  
                                 l424 0102                                   l371 047E  
                                 l452 0557                                   l446 057A  
                                 l458 0534                                   l399 049D  
                                 _GIE 005F                                   _RA5 0065  
                                 _PS0 04A8                                   _PS1 04A9  
                                 _PS2 04AA                          __CFG_CPD$OFF 0000  
                                 _PSA 04AB                                   _isr 0004  
                        __CFG_BORV$HI 0000                                   wreg 0009  
                        __CFG_IESO$ON 0000                        _USART_rx_index 005F  
                        __CFG_LVP$OFF 0000                        _USART_tx_index 0073  
                                l3041 0448                                  l3051 0458  
                                l3043 0450                                  l3053 045A  
                                l3045 0452                                  l3061 0460  
                                l2503 04C1                                  l3055 045C  
                                l3047 0454                                  l2505 04C5  
                                l3057 045E                                  l3049 0456  
                                l3083 0371                                  l2605 059B  
                                l2607 05AE                                  l3097 037A  
                                l2651 00F1                                  l2635 00BA  
                                l3099 038F                                  l2661 0110  
                                l2733 015F                                  l2717 013D  
                                l2567 04E0                                  l2569 04F7  
                                l2667 011E                                  l2747 0176  
                                l2925 026C                                  l2749 017A  
                                ?_isr 0075                                  _ADGO 04E9  
                   ?_calibrate_reader 0075                          __CFG_WDTE$ON 0000  
                                _BRGH 0CF2                                  _CREN 0CEC  
                                _LATA 010C                                  u1255 04C8  
                                _LATC 010E                                  u1505 010C  
                                u1435 0585                                  u1515 011A  
                                u1285 053F                                  u1605 017E  
                                u1455 0562                                  u1707 00C4  
                                u1717 03A8                                  u1807 04A2  
                                u1727 02FE                                  u1495 00FB  
                                u1737 0329                                  u1747 0283  
                                u1757 02A1                                  u1677 035E  
                                u1767 02BE                                  u1687 0077  
                                u1777 01D6                                  u1697 008D  
                                u1787 0202                                  _PEIE 005E  
                                u1797 022D                                  _RCIE 048D  
                                _RCIF 008D                                  _OERR 0CE9  
                                _SCKP 0CFC                                  _TMR0 0015  
                                _SPEN 0CEF                                  _TXIE 048C  
                                _TXEN 0CF5                                  _TXIF 008C  
                                _SYNC 0CF4                                  _WPUA 020C  
                                _WPUC 020E                __size_of_stop_TMR0_ISR 0003  
                   _read_ADC_channels 040E                          __CFG_WRT$OFF 0000  
                  ??_calibrate_reader 0025                                  _main 0351  
                                fsr0h 0005                                  fsr1h 0007  
                                indf0 0000                                  fsr0l 0004  
                                indf1 0001                                  fsr1l 0006  
                                btemp 007E                    ?_read_ADC_channels 0075  
         __size_of_calculate_checksum 0019                                  start 0056  
                       __CFG_MCLRE$ON 0000            measure_Impedance_SE@value1 0031  
                 ??_read_ADC_channels 0026                                 ??_isr 0078  
      __size_of_OSCILLATOR_Initialize 0006                       _USART_tx_length 0074  
       __end_of_OSCILLATOR_Initialize 0653                                 ?_main 0075  
                               _ADC_2 0574                                 _ADC_4 0551  
                               _ADC_5 052E                                 _BRG16 0CFB  
                               i1l131 0015                                 i1l132 0051  
                               i1l133 0036                   __size_of_BIO_config 002B  
                               _RCREG 0199                                 _PORTC 000E  
                               _TRISA 008C                        _start_TMR0_ISR 0614  
                               _TRISC 008E                                 _TXREG 019A  
                      __CFG_FCMEN$OFF 0000                                 _gains 05EA  
                     __end_of_measure 0120                                 _freqs 05DF  
           __end_of_read_ADC_channels 0447                       __end_of_setGain 040E  
        ?_measure_Impedance_no_offset 0075                                 _sweep 0120  
                               main@i 004D                       __end_of_setFreq 052E  
       __size_ofi1_start_RX_USART_ISR 0011                        __CFG_BOREN$OFF 0000  
                               status 0003                                 wtemp0 007E  
                     __initialization 0057                          __end_of_main 0391  
                       _stop_TMR0_ISR 065D                      ??_close_RX_USART 0020  
              __end_of_start_TMR0_ISR 0624                                ??_main 004C  
                              ?_ADC_2 0020                                ?_ADC_4 0020  
                              ?_ADC_5 0020          __end_of_measure_Impedance_SE 02E6  
                      _TIMER0_timeout 0070                        __CFG_PLLEN$OFF 0000  
                              _ADCON0 009D                                _ADCON1 009E  
                         measure@aux1 0034                           measure@aux2 0032  
                         measure@asic 0027                                _ADRESH 009C  
                              _ADRESL 009B                                _APFCON 011D  
                              _ANSELA 018C                                _ANSELC 018E  
                              ?_sweep 0075                                i1l2455 0020  
                              u181_27 004E                                _OSCCON 0099  
       ??_measure_Impedance_no_offset 0026                                _TMR0IE 005D  
                              _TMR0IF 005A                                _TMR0CS 04AD  
                              _SPBRGH 019C                                _SPBRGL 019B  
                      __CFG_PWRTE$OFF 0000                  __size_of_config_ASIC 0016  
                     config_ASIC@asic 0026                        __CFG_STVREN$ON 0000  
                      ?_stop_TMR0_ISR 0075                       ?_start_TMR0_ISR 0075  
                measure_Impedance@aux 0027                             ??_measure 0029  
         __size_of_start_RX_USART_ISR 0011                             ??_setGain 0021  
                           ??_setFreq 0021                                sweep@I 0043  
                              sweep@Q 0045                                sweep@i 0041  
          __size_of_read_ADC_channels 0039                         ?_mess_handler 0075  
             __size_of_measure_Offset 003F                     _SYSTEM_Initialize 065A  
             __end_of__initialization 0068                          ??_BIO_config 0022  
                       __end_of_ADC_2 0597                         __end_of_ADC_4 0574  
                  ?_SYSTEM_Initialize 0075                         __end_of_ADC_5 0551  
                      __pcstackCOMMON 0075                   ??_SYSTEM_Initialize 0020  
                       __end_of_gains 05F2                         __end_of_freqs 05EA  
__size_of_measure_Impedance_no_offset 006B                         __end_of_sweep 01BF  
                             ??_ADC_2 0022                               ??_ADC_4 0022  
                             ??_ADC_5 0022                        _OPTION_REGbits 0095  
                  __end_of_BIO_config 04DA           __size_of_start_TX_USART_ISR 000F  
                         setGain@asic 0023                        ??_mess_handler 004B  
           __end_of_SYSTEM_Initialize 065D                               ??_sweep 0036  
                          __pbssBANK0 004E                            __pbssBANK1 00A0  
                _measure_Impedance_SE 0255                           setFreq@asic 0022  
                          __pmaintext 0351                       ??_stop_TMR0_ISR 0075  
                read_ADC_channels@aux 0027             __size_of_calibrate_reader 0030  
                          __pintentry 0004                          measure@value 0030  
                measure_Offset@value1 002C                  measure_Offset@value2 002E  
                             _CLKRCON 039A                    __size_of_lputs_ISR 002B  
                     lputs_ISR@length 0020                     setFreq@freq_index 0020  
                  __size_of_setup_ADC 0006                               _OSCSTAT 009A  
                             _OSCTUNE 0098                    __size_of_start_RCM 0004  
                             _RXDTSEL 08EF                               _TXCKSEL 08EA  
          __end_of_calculate_checksum 05B0                 ?_measure_Impedance_SE 0075  
        __end_ofi1_start_RX_USART_ISR 0614                     measure_Offset@aux 0027  
                             __ptext1 0624                               __ptext2 05F2  
                             __ptext3 0653                               __ptext4 0633  
                             __ptext5 0647                               __ptext6 0447  
                             __ptext7 0120                               __ptext8 03D0  
                             __ptext9 0505                               _measure 006B  
               _OSCILLATOR_Initialize 064D                          __size_of_isr 0052  
                             _setGain 03D0                               _setFreq 0505  
            ??_PIN_MANAGER_Initialize 0020                     setGain@gain_index 0020  
          __size_of_SYSTEM_Initialize 0003                               clrloop0 0642  
                       _mess_rec_size 0060                  end_of_initialization 0068  
                      _measure_Offset 0391                 measure_Impedance@asic 0038  
                   __end_of_lputs_ISR 0505                     __end_of_setup_ADC 064D  
                    ??_start_TMR0_ISR 0075                     __end_of_start_RCM 0657  
                __end_of_mess_handler 047F                          __pstringtext 05DF  
                          _setup_TMR0 0633                      __CFG_FOSC$INTOSC 0000  
              __end_of_measure_Offset 03D0                ??_measure_Impedance_SE 0026  
                       ??_config_ASIC 0025                      _calibrate_reader 047F  
                   _measure_Impedance 01BF                    ?_measure_Impedance 0075  
                      ADC_2@ADC_value 0024            __end_of_start_RX_USART_ISR 0603  
              ?_OSCILLATOR_Initialize 0075     measure_Impedance_no_offset@value1 0034  
   measure_Impedance_no_offset@value2 0036                   start_initialization 0057  
                 ??_measure_Impedance 0026       __size_of_PIN_MANAGER_Initialize 0019  
                         __end_of_isr 0056                       ?_measure_Offset 0075  
 __end_of_measure_Impedance_no_offset 0351           _measure_Impedance_no_offset 02E6  
            measure_Impedance_SE@asic 0033               __size_of_close_RX_USART 0007  
                   _USARTX_change_pol 0657                  i1_start_RX_USART_ISR 0603  
                  ?_USARTX_change_pol 0075                        ADC_4@ADC_value 0024  
           __end_of_measure_Impedance 0255                   ??_USARTX_change_pol 0020  
                      ADC_5@ADC_value 0024                   __end_of_config_ASIC 05DF  
                         ?_setup_TMR0 0075            __end_of_start_TX_USART_ISR 0633  
                         __pbssCOMMON 0070                             ___latbits 0000  
                       __pcstackBANK0 0020             __end_of_USARTX_change_pol 065A  
     measure_Impedance_no_offset@asic 0038                       sweep@gain_index 0047  
               ?i1_start_RX_USART_ISR 0075                            setGain@aux 0022  
               __size_of_mess_handler 0038                _PIN_MANAGER_Initialize 05B0  
                          setFreq@aux 0023                 __end_of_stop_TMR0_ISR 0660  
                  _calculate_checksum 0597                        __size_of_ADC_2 0023  
                      __size_of_ADC_4 0023                        __size_of_ADC_5 0023  
             read_ADC_channels@value1 002E               read_ADC_channels@value2 0030  
             read_ADC_channels@value3 0032                   ?_calculate_checksum 0020  
                            ?_measure 0026                              ?_setGain 0020  
                            ?_setFreq 0020                         measure@offset 002D  
                     sweep@freq_index 0040                          _mess_handler 0447  
                      __size_of_sweep 009F                   __size_of_setup_TMR0 0007  
                         _config_ASIC 05C9                  ??_calculate_checksum 0021  
                           clear_ram0 0641                            lputs_ISR@i 0023  
          __size_of_measure_Impedance 0096             measure_Impedance_SE@check 0030  
                           _lputs_ISR 04DA                             _setup_ADC 0647  
                           _start_RCM 0653            __size_of_USARTX_change_pol 0003  
              ??i1_start_RX_USART_ISR 0075                        _close_RX_USART 063A  
            __end_of_calibrate_reader 04AF               measure_Impedance@value1 0034  
             measure_Impedance@value2 0036               measure_Impedance_SE@aux 0028  
                          sweep@check 0038                            sweep@count 0042  
                          ?_lputs_ISR 0020               calculate_checksum@check 0023  
                          ?_setup_ADC 0075               ??_OSCILLATOR_Initialize 0020  
                   start_TMR0_ISR@val 0077                            ?_start_RCM 0075  
      measure_Impedance_no_offset@aux 0027                      ??_measure_Offset 0026  
              __end_of_close_RX_USART 0641                      __size_of_measure 00B5  
                      BIO_config@conf 0020                      __size_of_setGain 003E  
                    __size_of_setFreq 0029                    measure_Offset@asic 0030  
                            __ptext10 006B                              __ptext11 040E  
                            __ptext20 05C9                              __ptext12 0391  
                            __ptext21 04AF                              __ptext13 02E6  
                            __ptext30 0603                              __ptext22 047F  
                            __ptext14 0255                              __ptext31 065D  
                            __ptext23 04DA                              __ptext15 0597  
                            __ptext32 0614                              __ptext24 063A  
                            __ptext16 052E                              __ptext25 0657  
                            __ptext17 01BF                              __ptext26 065A  
                            __ptext18 0551                              __ptext27 05B0  
                            __ptext19 0574                              __ptext28 064D  
                       lputs_ISR@data 0024                    _start_RX_USART_ISR 05F2  
                          _BIO_config 04AF                         __size_of_main 0040  
                            _mess_rec 0061         __size_of_measure_Impedance_SE 0091  
                 ?_start_RX_USART_ISR 0075                              int$flags 007E  
                        ??_setup_TMR0 0020                           _TIMER0_flag 005D  
                ??_start_RX_USART_ISR 0020                              measure@I 002F  
             __size_of_start_TMR0_ISR 0010                              measure@Q 0026  
                     ?_close_RX_USART 0075                             sweep@asic 0049  
              calculate_checksum@data 0024                              intlevel1 0000  
                  _start_TX_USART_ISR 0624                         BIO_config@out 0024  
                 calibrate_reader@aux 0026               ?_PIN_MANAGER_Initialize 0075  
                   __CFG_CLKOUTEN$OFF 0000                    __end_of_setup_TMR0 063A  
                 ?_start_TX_USART_ISR 0075                           ??_lputs_ISR 0021  
                         ??_setup_ADC 0020                              sweep@aux 0039  
                            sweep@ret 0048                 calculate_checksum@num 0020  
                         ??_start_RCM 0020                  ??_start_TX_USART_ISR 0020  
                         BIO_config@i 0023        __end_of_PIN_MANAGER_Initialize 05C9  
                         ?_BIO_config 0020                   calculate_checksum@i 0025  
                        ?_config_ASIC 0075  
