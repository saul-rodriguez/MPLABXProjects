

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Apr 24 12:09:10 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16LF1823
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	intentry,global,class=CODE,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2
    45                           	dabs	1,0x7E,2
    46  0000                     
    47                           ; Version 1.40
    48                           ; Generated 01/12/2016 GMT
    49                           ; 
    50                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC16LF1823 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     	;# 
    82  0001                     	;# 
    83  0002                     	;# 
    84  0003                     	;# 
    85  0004                     	;# 
    86  0005                     	;# 
    87  0006                     	;# 
    88  0007                     	;# 
    89  0008                     	;# 
    90  0009                     	;# 
    91  000A                     	;# 
    92  000B                     	;# 
    93  000C                     	;# 
    94  000E                     	;# 
    95  0011                     	;# 
    96  0012                     	;# 
    97  0015                     	;# 
    98  0016                     	;# 
    99  0016                     	;# 
   100  0017                     	;# 
   101  0018                     	;# 
   102  0019                     	;# 
   103  001A                     	;# 
   104  001B                     	;# 
   105  001C                     	;# 
   106  001E                     	;# 
   107  001F                     	;# 
   108  008C                     	;# 
   109  008E                     	;# 
   110  0091                     	;# 
   111  0092                     	;# 
   112  0095                     	;# 
   113  0096                     	;# 
   114  0097                     	;# 
   115  0098                     	;# 
   116  0099                     	;# 
   117  009A                     	;# 
   118  009B                     	;# 
   119  009B                     	;# 
   120  009C                     	;# 
   121  009D                     	;# 
   122  009E                     	;# 
   123  010C                     	;# 
   124  010E                     	;# 
   125  0111                     	;# 
   126  0112                     	;# 
   127  0113                     	;# 
   128  0114                     	;# 
   129  0115                     	;# 
   130  0116                     	;# 
   131  0117                     	;# 
   132  0118                     	;# 
   133  0119                     	;# 
   134  011A                     	;# 
   135  011B                     	;# 
   136  011D                     	;# 
   137  011D                     	;# 
   138  018C                     	;# 
   139  018E                     	;# 
   140  0191                     	;# 
   141  0191                     	;# 
   142  0192                     	;# 
   143  0193                     	;# 
   144  0193                     	;# 
   145  0193                     	;# 
   146  0194                     	;# 
   147  0195                     	;# 
   148  0196                     	;# 
   149  0199                     	;# 
   150  019A                     	;# 
   151  019B                     	;# 
   152  019B                     	;# 
   153  019B                     	;# 
   154  019B                     	;# 
   155  019C                     	;# 
   156  019C                     	;# 
   157  019D                     	;# 
   158  019E                     	;# 
   159  019F                     	;# 
   160  020C                     	;# 
   161  020E                     	;# 
   162  0211                     	;# 
   163  0211                     	;# 
   164  0212                     	;# 
   165  0212                     	;# 
   166  0213                     	;# 
   167  0213                     	;# 
   168  0214                     	;# 
   169  0214                     	;# 
   170  0215                     	;# 
   171  0215                     	;# 
   172  0215                     	;# 
   173  0216                     	;# 
   174  0216                     	;# 
   175  0217                     	;# 
   176  0217                     	;# 
   177  0291                     	;# 
   178  0291                     	;# 
   179  0292                     	;# 
   180  0293                     	;# 
   181  0294                     	;# 
   182  0295                     	;# 
   183  0295                     	;# 
   184  0296                     	;# 
   185  0391                     	;# 
   186  0392                     	;# 
   187  0393                     	;# 
   188  039A                     	;# 
   189  039C                     	;# 
   190  039D                     	;# 
   191  039E                     	;# 
   192  039F                     	;# 
   193  0FE4                     	;# 
   194  0FE5                     	;# 
   195  0FE6                     	;# 
   196  0FE7                     	;# 
   197  0FE8                     	;# 
   198  0FE9                     	;# 
   199  0FEA                     	;# 
   200  0FEB                     	;# 
   201  0FED                     	;# 
   202  0FEE                     	;# 
   203  0FEF                     	;# 
   204  0000                     	;# 
   205  0001                     	;# 
   206  0002                     	;# 
   207  0003                     	;# 
   208  0004                     	;# 
   209  0005                     	;# 
   210  0006                     	;# 
   211  0007                     	;# 
   212  0008                     	;# 
   213  0009                     	;# 
   214  000A                     	;# 
   215  000B                     	;# 
   216  000C                     	;# 
   217  000E                     	;# 
   218  0011                     	;# 
   219  0012                     	;# 
   220  0015                     	;# 
   221  0016                     	;# 
   222  0016                     	;# 
   223  0017                     	;# 
   224  0018                     	;# 
   225  0019                     	;# 
   226  001A                     	;# 
   227  001B                     	;# 
   228  001C                     	;# 
   229  001E                     	;# 
   230  001F                     	;# 
   231  008C                     	;# 
   232  008E                     	;# 
   233  0091                     	;# 
   234  0092                     	;# 
   235  0095                     	;# 
   236  0096                     	;# 
   237  0097                     	;# 
   238  0098                     	;# 
   239  0099                     	;# 
   240  009A                     	;# 
   241  009B                     	;# 
   242  009B                     	;# 
   243  009C                     	;# 
   244  009D                     	;# 
   245  009E                     	;# 
   246  010C                     	;# 
   247  010E                     	;# 
   248  0111                     	;# 
   249  0112                     	;# 
   250  0113                     	;# 
   251  0114                     	;# 
   252  0115                     	;# 
   253  0116                     	;# 
   254  0117                     	;# 
   255  0118                     	;# 
   256  0119                     	;# 
   257  011A                     	;# 
   258  011B                     	;# 
   259  011D                     	;# 
   260  011D                     	;# 
   261  018C                     	;# 
   262  018E                     	;# 
   263  0191                     	;# 
   264  0191                     	;# 
   265  0192                     	;# 
   266  0193                     	;# 
   267  0193                     	;# 
   268  0193                     	;# 
   269  0194                     	;# 
   270  0195                     	;# 
   271  0196                     	;# 
   272  0199                     	;# 
   273  019A                     	;# 
   274  019B                     	;# 
   275  019B                     	;# 
   276  019B                     	;# 
   277  019B                     	;# 
   278  019C                     	;# 
   279  019C                     	;# 
   280  019D                     	;# 
   281  019E                     	;# 
   282  019F                     	;# 
   283  020C                     	;# 
   284  020E                     	;# 
   285  0211                     	;# 
   286  0211                     	;# 
   287  0212                     	;# 
   288  0212                     	;# 
   289  0213                     	;# 
   290  0213                     	;# 
   291  0214                     	;# 
   292  0214                     	;# 
   293  0215                     	;# 
   294  0215                     	;# 
   295  0215                     	;# 
   296  0216                     	;# 
   297  0216                     	;# 
   298  0217                     	;# 
   299  0217                     	;# 
   300  0291                     	;# 
   301  0291                     	;# 
   302  0292                     	;# 
   303  0293                     	;# 
   304  0294                     	;# 
   305  0295                     	;# 
   306  0295                     	;# 
   307  0296                     	;# 
   308  0391                     	;# 
   309  0392                     	;# 
   310  0393                     	;# 
   311  039A                     	;# 
   312  039C                     	;# 
   313  039D                     	;# 
   314  039E                     	;# 
   315  039F                     	;# 
   316  0FE4                     	;# 
   317  0FE5                     	;# 
   318  0FE6                     	;# 
   319  0FE7                     	;# 
   320  0FE8                     	;# 
   321  0FE9                     	;# 
   322  0FEA                     	;# 
   323  0FEB                     	;# 
   324  0FED                     	;# 
   325  0FEE                     	;# 
   326  0FEF                     	;# 
   327  0000                     	;# 
   328  0001                     	;# 
   329  0002                     	;# 
   330  0003                     	;# 
   331  0004                     	;# 
   332  0005                     	;# 
   333  0006                     	;# 
   334  0007                     	;# 
   335  0008                     	;# 
   336  0009                     	;# 
   337  000A                     	;# 
   338  000B                     	;# 
   339  000C                     	;# 
   340  000E                     	;# 
   341  0011                     	;# 
   342  0012                     	;# 
   343  0015                     	;# 
   344  0016                     	;# 
   345  0016                     	;# 
   346  0017                     	;# 
   347  0018                     	;# 
   348  0019                     	;# 
   349  001A                     	;# 
   350  001B                     	;# 
   351  001C                     	;# 
   352  001E                     	;# 
   353  001F                     	;# 
   354  008C                     	;# 
   355  008E                     	;# 
   356  0091                     	;# 
   357  0092                     	;# 
   358  0095                     	;# 
   359  0096                     	;# 
   360  0097                     	;# 
   361  0098                     	;# 
   362  0099                     	;# 
   363  009A                     	;# 
   364  009B                     	;# 
   365  009B                     	;# 
   366  009C                     	;# 
   367  009D                     	;# 
   368  009E                     	;# 
   369  010C                     	;# 
   370  010E                     	;# 
   371  0111                     	;# 
   372  0112                     	;# 
   373  0113                     	;# 
   374  0114                     	;# 
   375  0115                     	;# 
   376  0116                     	;# 
   377  0117                     	;# 
   378  0118                     	;# 
   379  0119                     	;# 
   380  011A                     	;# 
   381  011B                     	;# 
   382  011D                     	;# 
   383  011D                     	;# 
   384  018C                     	;# 
   385  018E                     	;# 
   386  0191                     	;# 
   387  0191                     	;# 
   388  0192                     	;# 
   389  0193                     	;# 
   390  0193                     	;# 
   391  0193                     	;# 
   392  0194                     	;# 
   393  0195                     	;# 
   394  0196                     	;# 
   395  0199                     	;# 
   396  019A                     	;# 
   397  019B                     	;# 
   398  019B                     	;# 
   399  019B                     	;# 
   400  019B                     	;# 
   401  019C                     	;# 
   402  019C                     	;# 
   403  019D                     	;# 
   404  019E                     	;# 
   405  019F                     	;# 
   406  020C                     	;# 
   407  020E                     	;# 
   408  0211                     	;# 
   409  0211                     	;# 
   410  0212                     	;# 
   411  0212                     	;# 
   412  0213                     	;# 
   413  0213                     	;# 
   414  0214                     	;# 
   415  0214                     	;# 
   416  0215                     	;# 
   417  0215                     	;# 
   418  0215                     	;# 
   419  0216                     	;# 
   420  0216                     	;# 
   421  0217                     	;# 
   422  0217                     	;# 
   423  0291                     	;# 
   424  0291                     	;# 
   425  0292                     	;# 
   426  0293                     	;# 
   427  0294                     	;# 
   428  0295                     	;# 
   429  0295                     	;# 
   430  0296                     	;# 
   431  0391                     	;# 
   432  0392                     	;# 
   433  0393                     	;# 
   434  039A                     	;# 
   435  039C                     	;# 
   436  039D                     	;# 
   437  039E                     	;# 
   438  039F                     	;# 
   439  0FE4                     	;# 
   440  0FE5                     	;# 
   441  0FE6                     	;# 
   442  0FE7                     	;# 
   443  0FE8                     	;# 
   444  0FE9                     	;# 
   445  0FEA                     	;# 
   446  0FEB                     	;# 
   447  0FED                     	;# 
   448  0FEE                     	;# 
   449  0FEF                     	;# 
   450  0000                     	;# 
   451  0001                     	;# 
   452  0002                     	;# 
   453  0003                     	;# 
   454  0004                     	;# 
   455  0005                     	;# 
   456  0006                     	;# 
   457  0007                     	;# 
   458  0008                     	;# 
   459  0009                     	;# 
   460  000A                     	;# 
   461  000B                     	;# 
   462  000C                     	;# 
   463  000E                     	;# 
   464  0011                     	;# 
   465  0012                     	;# 
   466  0015                     	;# 
   467  0016                     	;# 
   468  0016                     	;# 
   469  0017                     	;# 
   470  0018                     	;# 
   471  0019                     	;# 
   472  001A                     	;# 
   473  001B                     	;# 
   474  001C                     	;# 
   475  001E                     	;# 
   476  001F                     	;# 
   477  008C                     	;# 
   478  008E                     	;# 
   479  0091                     	;# 
   480  0092                     	;# 
   481  0095                     	;# 
   482  0096                     	;# 
   483  0097                     	;# 
   484  0098                     	;# 
   485  0099                     	;# 
   486  009A                     	;# 
   487  009B                     	;# 
   488  009B                     	;# 
   489  009C                     	;# 
   490  009D                     	;# 
   491  009E                     	;# 
   492  010C                     	;# 
   493  010E                     	;# 
   494  0111                     	;# 
   495  0112                     	;# 
   496  0113                     	;# 
   497  0114                     	;# 
   498  0115                     	;# 
   499  0116                     	;# 
   500  0117                     	;# 
   501  0118                     	;# 
   502  0119                     	;# 
   503  011A                     	;# 
   504  011B                     	;# 
   505  011D                     	;# 
   506  011D                     	;# 
   507  018C                     	;# 
   508  018E                     	;# 
   509  0191                     	;# 
   510  0191                     	;# 
   511  0192                     	;# 
   512  0193                     	;# 
   513  0193                     	;# 
   514  0193                     	;# 
   515  0194                     	;# 
   516  0195                     	;# 
   517  0196                     	;# 
   518  0199                     	;# 
   519  019A                     	;# 
   520  019B                     	;# 
   521  019B                     	;# 
   522  019B                     	;# 
   523  019B                     	;# 
   524  019C                     	;# 
   525  019C                     	;# 
   526  019D                     	;# 
   527  019E                     	;# 
   528  019F                     	;# 
   529  020C                     	;# 
   530  020E                     	;# 
   531  0211                     	;# 
   532  0211                     	;# 
   533  0212                     	;# 
   534  0212                     	;# 
   535  0213                     	;# 
   536  0213                     	;# 
   537  0214                     	;# 
   538  0214                     	;# 
   539  0215                     	;# 
   540  0215                     	;# 
   541  0215                     	;# 
   542  0216                     	;# 
   543  0216                     	;# 
   544  0217                     	;# 
   545  0217                     	;# 
   546  0291                     	;# 
   547  0291                     	;# 
   548  0292                     	;# 
   549  0293                     	;# 
   550  0294                     	;# 
   551  0295                     	;# 
   552  0295                     	;# 
   553  0296                     	;# 
   554  0391                     	;# 
   555  0392                     	;# 
   556  0393                     	;# 
   557  039A                     	;# 
   558  039C                     	;# 
   559  039D                     	;# 
   560  039E                     	;# 
   561  039F                     	;# 
   562  0FE4                     	;# 
   563  0FE5                     	;# 
   564  0FE6                     	;# 
   565  0FE7                     	;# 
   566  0FE8                     	;# 
   567  0FE9                     	;# 
   568  0FEA                     	;# 
   569  0FEB                     	;# 
   570  0FED                     	;# 
   571  0FEE                     	;# 
   572  0FEF                     	;# 
   573  0000                     	;# 
   574  0001                     	;# 
   575  0002                     	;# 
   576  0003                     	;# 
   577  0004                     	;# 
   578  0005                     	;# 
   579  0006                     	;# 
   580  0007                     	;# 
   581  0008                     	;# 
   582  0009                     	;# 
   583  000A                     	;# 
   584  000B                     	;# 
   585  000C                     	;# 
   586  000E                     	;# 
   587  0011                     	;# 
   588  0012                     	;# 
   589  0015                     	;# 
   590  0016                     	;# 
   591  0016                     	;# 
   592  0017                     	;# 
   593  0018                     	;# 
   594  0019                     	;# 
   595  001A                     	;# 
   596  001B                     	;# 
   597  001C                     	;# 
   598  001E                     	;# 
   599  001F                     	;# 
   600  008C                     	;# 
   601  008E                     	;# 
   602  0091                     	;# 
   603  0092                     	;# 
   604  0095                     	;# 
   605  0096                     	;# 
   606  0097                     	;# 
   607  0098                     	;# 
   608  0099                     	;# 
   609  009A                     	;# 
   610  009B                     	;# 
   611  009B                     	;# 
   612  009C                     	;# 
   613  009D                     	;# 
   614  009E                     	;# 
   615  010C                     	;# 
   616  010E                     	;# 
   617  0111                     	;# 
   618  0112                     	;# 
   619  0113                     	;# 
   620  0114                     	;# 
   621  0115                     	;# 
   622  0116                     	;# 
   623  0117                     	;# 
   624  0118                     	;# 
   625  0119                     	;# 
   626  011A                     	;# 
   627  011B                     	;# 
   628  011D                     	;# 
   629  011D                     	;# 
   630  018C                     	;# 
   631  018E                     	;# 
   632  0191                     	;# 
   633  0191                     	;# 
   634  0192                     	;# 
   635  0193                     	;# 
   636  0193                     	;# 
   637  0193                     	;# 
   638  0194                     	;# 
   639  0195                     	;# 
   640  0196                     	;# 
   641  0199                     	;# 
   642  019A                     	;# 
   643  019B                     	;# 
   644  019B                     	;# 
   645  019B                     	;# 
   646  019B                     	;# 
   647  019C                     	;# 
   648  019C                     	;# 
   649  019D                     	;# 
   650  019E                     	;# 
   651  019F                     	;# 
   652  020C                     	;# 
   653  020E                     	;# 
   654  0211                     	;# 
   655  0211                     	;# 
   656  0212                     	;# 
   657  0212                     	;# 
   658  0213                     	;# 
   659  0213                     	;# 
   660  0214                     	;# 
   661  0214                     	;# 
   662  0215                     	;# 
   663  0215                     	;# 
   664  0215                     	;# 
   665  0216                     	;# 
   666  0216                     	;# 
   667  0217                     	;# 
   668  0217                     	;# 
   669  0291                     	;# 
   670  0291                     	;# 
   671  0292                     	;# 
   672  0293                     	;# 
   673  0294                     	;# 
   674  0295                     	;# 
   675  0295                     	;# 
   676  0296                     	;# 
   677  0391                     	;# 
   678  0392                     	;# 
   679  0393                     	;# 
   680  039A                     	;# 
   681  039C                     	;# 
   682  039D                     	;# 
   683  039E                     	;# 
   684  039F                     	;# 
   685  0FE4                     	;# 
   686  0FE5                     	;# 
   687  0FE6                     	;# 
   688  0FE7                     	;# 
   689  0FE8                     	;# 
   690  0FE9                     	;# 
   691  0FEA                     	;# 
   692  0FEB                     	;# 
   693  0FED                     	;# 
   694  0FEE                     	;# 
   695  0FEF                     	;# 
   696  0000                     	;# 
   697  0001                     	;# 
   698  0002                     	;# 
   699  0003                     	;# 
   700  0004                     	;# 
   701  0005                     	;# 
   702  0006                     	;# 
   703  0007                     	;# 
   704  0008                     	;# 
   705  0009                     	;# 
   706  000A                     	;# 
   707  000B                     	;# 
   708  000C                     	;# 
   709  000E                     	;# 
   710  0011                     	;# 
   711  0012                     	;# 
   712  0015                     	;# 
   713  0016                     	;# 
   714  0016                     	;# 
   715  0017                     	;# 
   716  0018                     	;# 
   717  0019                     	;# 
   718  001A                     	;# 
   719  001B                     	;# 
   720  001C                     	;# 
   721  001E                     	;# 
   722  001F                     	;# 
   723  008C                     	;# 
   724  008E                     	;# 
   725  0091                     	;# 
   726  0092                     	;# 
   727  0095                     	;# 
   728  0096                     	;# 
   729  0097                     	;# 
   730  0098                     	;# 
   731  0099                     	;# 
   732  009A                     	;# 
   733  009B                     	;# 
   734  009B                     	;# 
   735  009C                     	;# 
   736  009D                     	;# 
   737  009E                     	;# 
   738  010C                     	;# 
   739  010E                     	;# 
   740  0111                     	;# 
   741  0112                     	;# 
   742  0113                     	;# 
   743  0114                     	;# 
   744  0115                     	;# 
   745  0116                     	;# 
   746  0117                     	;# 
   747  0118                     	;# 
   748  0119                     	;# 
   749  011A                     	;# 
   750  011B                     	;# 
   751  011D                     	;# 
   752  011D                     	;# 
   753  018C                     	;# 
   754  018E                     	;# 
   755  0191                     	;# 
   756  0191                     	;# 
   757  0192                     	;# 
   758  0193                     	;# 
   759  0193                     	;# 
   760  0193                     	;# 
   761  0194                     	;# 
   762  0195                     	;# 
   763  0196                     	;# 
   764  0199                     	;# 
   765  019A                     	;# 
   766  019B                     	;# 
   767  019B                     	;# 
   768  019B                     	;# 
   769  019B                     	;# 
   770  019C                     	;# 
   771  019C                     	;# 
   772  019D                     	;# 
   773  019E                     	;# 
   774  019F                     	;# 
   775  020C                     	;# 
   776  020E                     	;# 
   777  0211                     	;# 
   778  0211                     	;# 
   779  0212                     	;# 
   780  0212                     	;# 
   781  0213                     	;# 
   782  0213                     	;# 
   783  0214                     	;# 
   784  0214                     	;# 
   785  0215                     	;# 
   786  0215                     	;# 
   787  0215                     	;# 
   788  0216                     	;# 
   789  0216                     	;# 
   790  0217                     	;# 
   791  0217                     	;# 
   792  0291                     	;# 
   793  0291                     	;# 
   794  0292                     	;# 
   795  0293                     	;# 
   796  0294                     	;# 
   797  0295                     	;# 
   798  0295                     	;# 
   799  0296                     	;# 
   800  0391                     	;# 
   801  0392                     	;# 
   802  0393                     	;# 
   803  039A                     	;# 
   804  039C                     	;# 
   805  039D                     	;# 
   806  039E                     	;# 
   807  039F                     	;# 
   808  0FE4                     	;# 
   809  0FE5                     	;# 
   810  0FE6                     	;# 
   811  0FE7                     	;# 
   812  0FE8                     	;# 
   813  0FE9                     	;# 
   814  0FEA                     	;# 
   815  0FEB                     	;# 
   816  0FED                     	;# 
   817  0FEE                     	;# 
   818  0FEF                     	;# 
   819  0000                     	;# 
   820  0001                     	;# 
   821  0002                     	;# 
   822  0003                     	;# 
   823  0004                     	;# 
   824  0005                     	;# 
   825  0006                     	;# 
   826  0007                     	;# 
   827  0008                     	;# 
   828  0009                     	;# 
   829  000A                     	;# 
   830  000B                     	;# 
   831  000C                     	;# 
   832  000E                     	;# 
   833  0011                     	;# 
   834  0012                     	;# 
   835  0015                     	;# 
   836  0016                     	;# 
   837  0016                     	;# 
   838  0017                     	;# 
   839  0018                     	;# 
   840  0019                     	;# 
   841  001A                     	;# 
   842  001B                     	;# 
   843  001C                     	;# 
   844  001E                     	;# 
   845  001F                     	;# 
   846  008C                     	;# 
   847  008E                     	;# 
   848  0091                     	;# 
   849  0092                     	;# 
   850  0095                     	;# 
   851  0096                     	;# 
   852  0097                     	;# 
   853  0098                     	;# 
   854  0099                     	;# 
   855  009A                     	;# 
   856  009B                     	;# 
   857  009B                     	;# 
   858  009C                     	;# 
   859  009D                     	;# 
   860  009E                     	;# 
   861  010C                     	;# 
   862  010E                     	;# 
   863  0111                     	;# 
   864  0112                     	;# 
   865  0113                     	;# 
   866  0114                     	;# 
   867  0115                     	;# 
   868  0116                     	;# 
   869  0117                     	;# 
   870  0118                     	;# 
   871  0119                     	;# 
   872  011A                     	;# 
   873  011B                     	;# 
   874  011D                     	;# 
   875  011D                     	;# 
   876  018C                     	;# 
   877  018E                     	;# 
   878  0191                     	;# 
   879  0191                     	;# 
   880  0192                     	;# 
   881  0193                     	;# 
   882  0193                     	;# 
   883  0193                     	;# 
   884  0194                     	;# 
   885  0195                     	;# 
   886  0196                     	;# 
   887  0199                     	;# 
   888  019A                     	;# 
   889  019B                     	;# 
   890  019B                     	;# 
   891  019B                     	;# 
   892  019B                     	;# 
   893  019C                     	;# 
   894  019C                     	;# 
   895  019D                     	;# 
   896  019E                     	;# 
   897  019F                     	;# 
   898  020C                     	;# 
   899  020E                     	;# 
   900  0211                     	;# 
   901  0211                     	;# 
   902  0212                     	;# 
   903  0212                     	;# 
   904  0213                     	;# 
   905  0213                     	;# 
   906  0214                     	;# 
   907  0214                     	;# 
   908  0215                     	;# 
   909  0215                     	;# 
   910  0215                     	;# 
   911  0216                     	;# 
   912  0216                     	;# 
   913  0217                     	;# 
   914  0217                     	;# 
   915  0291                     	;# 
   916  0291                     	;# 
   917  0292                     	;# 
   918  0293                     	;# 
   919  0294                     	;# 
   920  0295                     	;# 
   921  0295                     	;# 
   922  0296                     	;# 
   923  0391                     	;# 
   924  0392                     	;# 
   925  0393                     	;# 
   926  039A                     	;# 
   927  039C                     	;# 
   928  039D                     	;# 
   929  039E                     	;# 
   930  039F                     	;# 
   931  0FE4                     	;# 
   932  0FE5                     	;# 
   933  0FE6                     	;# 
   934  0FE7                     	;# 
   935  0FE8                     	;# 
   936  0FE9                     	;# 
   937  0FEA                     	;# 
   938  0FEB                     	;# 
   939  0FED                     	;# 
   940  0FEE                     	;# 
   941  0FEF                     	;# 
   942  0000                     	;# 
   943  0001                     	;# 
   944  0002                     	;# 
   945  0003                     	;# 
   946  0004                     	;# 
   947  0005                     	;# 
   948  0006                     	;# 
   949  0007                     	;# 
   950  0008                     	;# 
   951  0009                     	;# 
   952  000A                     	;# 
   953  000B                     	;# 
   954  000C                     	;# 
   955  000E                     	;# 
   956  0011                     	;# 
   957  0012                     	;# 
   958  0015                     	;# 
   959  0016                     	;# 
   960  0016                     	;# 
   961  0017                     	;# 
   962  0018                     	;# 
   963  0019                     	;# 
   964  001A                     	;# 
   965  001B                     	;# 
   966  001C                     	;# 
   967  001E                     	;# 
   968  001F                     	;# 
   969  008C                     	;# 
   970  008E                     	;# 
   971  0091                     	;# 
   972  0092                     	;# 
   973  0095                     	;# 
   974  0096                     	;# 
   975  0097                     	;# 
   976  0098                     	;# 
   977  0099                     	;# 
   978  009A                     	;# 
   979  009B                     	;# 
   980  009B                     	;# 
   981  009C                     	;# 
   982  009D                     	;# 
   983  009E                     	;# 
   984  010C                     	;# 
   985  010E                     	;# 
   986  0111                     	;# 
   987  0112                     	;# 
   988  0113                     	;# 
   989  0114                     	;# 
   990  0115                     	;# 
   991  0116                     	;# 
   992  0117                     	;# 
   993  0118                     	;# 
   994  0119                     	;# 
   995  011A                     	;# 
   996  011B                     	;# 
   997  011D                     	;# 
   998  011D                     	;# 
   999  018C                     	;# 
  1000  018E                     	;# 
  1001  0191                     	;# 
  1002  0191                     	;# 
  1003  0192                     	;# 
  1004  0193                     	;# 
  1005  0193                     	;# 
  1006  0193                     	;# 
  1007  0194                     	;# 
  1008  0195                     	;# 
  1009  0196                     	;# 
  1010  0199                     	;# 
  1011  019A                     	;# 
  1012  019B                     	;# 
  1013  019B                     	;# 
  1014  019B                     	;# 
  1015  019B                     	;# 
  1016  019C                     	;# 
  1017  019C                     	;# 
  1018  019D                     	;# 
  1019  019E                     	;# 
  1020  019F                     	;# 
  1021  020C                     	;# 
  1022  020E                     	;# 
  1023  0211                     	;# 
  1024  0211                     	;# 
  1025  0212                     	;# 
  1026  0212                     	;# 
  1027  0213                     	;# 
  1028  0213                     	;# 
  1029  0214                     	;# 
  1030  0214                     	;# 
  1031  0215                     	;# 
  1032  0215                     	;# 
  1033  0215                     	;# 
  1034  0216                     	;# 
  1035  0216                     	;# 
  1036  0217                     	;# 
  1037  0217                     	;# 
  1038  0291                     	;# 
  1039  0291                     	;# 
  1040  0292                     	;# 
  1041  0293                     	;# 
  1042  0294                     	;# 
  1043  0295                     	;# 
  1044  0295                     	;# 
  1045  0296                     	;# 
  1046  0391                     	;# 
  1047  0392                     	;# 
  1048  0393                     	;# 
  1049  039A                     	;# 
  1050  039C                     	;# 
  1051  039D                     	;# 
  1052  039E                     	;# 
  1053  039F                     	;# 
  1054  0FE4                     	;# 
  1055  0FE5                     	;# 
  1056  0FE6                     	;# 
  1057  0FE7                     	;# 
  1058  0FE8                     	;# 
  1059  0FE9                     	;# 
  1060  0FEA                     	;# 
  1061  0FEB                     	;# 
  1062  0FED                     	;# 
  1063  0FEE                     	;# 
  1064  0FEF                     	;# 
  1065  0000                     	;# 
  1066  0001                     	;# 
  1067  0002                     	;# 
  1068  0003                     	;# 
  1069  0004                     	;# 
  1070  0005                     	;# 
  1071  0006                     	;# 
  1072  0007                     	;# 
  1073  0008                     	;# 
  1074  0009                     	;# 
  1075  000A                     	;# 
  1076  000B                     	;# 
  1077  000C                     	;# 
  1078  000E                     	;# 
  1079  0011                     	;# 
  1080  0012                     	;# 
  1081  0015                     	;# 
  1082  0016                     	;# 
  1083  0016                     	;# 
  1084  0017                     	;# 
  1085  0018                     	;# 
  1086  0019                     	;# 
  1087  001A                     	;# 
  1088  001B                     	;# 
  1089  001C                     	;# 
  1090  001E                     	;# 
  1091  001F                     	;# 
  1092  008C                     	;# 
  1093  008E                     	;# 
  1094  0091                     	;# 
  1095  0092                     	;# 
  1096  0095                     	;# 
  1097  0096                     	;# 
  1098  0097                     	;# 
  1099  0098                     	;# 
  1100  0099                     	;# 
  1101  009A                     	;# 
  1102  009B                     	;# 
  1103  009B                     	;# 
  1104  009C                     	;# 
  1105  009D                     	;# 
  1106  009E                     	;# 
  1107  010C                     	;# 
  1108  010E                     	;# 
  1109  0111                     	;# 
  1110  0112                     	;# 
  1111  0113                     	;# 
  1112  0114                     	;# 
  1113  0115                     	;# 
  1114  0116                     	;# 
  1115  0117                     	;# 
  1116  0118                     	;# 
  1117  0119                     	;# 
  1118  011A                     	;# 
  1119  011B                     	;# 
  1120  011D                     	;# 
  1121  011D                     	;# 
  1122  018C                     	;# 
  1123  018E                     	;# 
  1124  0191                     	;# 
  1125  0191                     	;# 
  1126  0192                     	;# 
  1127  0193                     	;# 
  1128  0193                     	;# 
  1129  0193                     	;# 
  1130  0194                     	;# 
  1131  0195                     	;# 
  1132  0196                     	;# 
  1133  0199                     	;# 
  1134  019A                     	;# 
  1135  019B                     	;# 
  1136  019B                     	;# 
  1137  019B                     	;# 
  1138  019B                     	;# 
  1139  019C                     	;# 
  1140  019C                     	;# 
  1141  019D                     	;# 
  1142  019E                     	;# 
  1143  019F                     	;# 
  1144  020C                     	;# 
  1145  020E                     	;# 
  1146  0211                     	;# 
  1147  0211                     	;# 
  1148  0212                     	;# 
  1149  0212                     	;# 
  1150  0213                     	;# 
  1151  0213                     	;# 
  1152  0214                     	;# 
  1153  0214                     	;# 
  1154  0215                     	;# 
  1155  0215                     	;# 
  1156  0215                     	;# 
  1157  0216                     	;# 
  1158  0216                     	;# 
  1159  0217                     	;# 
  1160  0217                     	;# 
  1161  0291                     	;# 
  1162  0291                     	;# 
  1163  0292                     	;# 
  1164  0293                     	;# 
  1165  0294                     	;# 
  1166  0295                     	;# 
  1167  0295                     	;# 
  1168  0296                     	;# 
  1169  0391                     	;# 
  1170  0392                     	;# 
  1171  0393                     	;# 
  1172  039A                     	;# 
  1173  039C                     	;# 
  1174  039D                     	;# 
  1175  039E                     	;# 
  1176  039F                     	;# 
  1177  0FE4                     	;# 
  1178  0FE5                     	;# 
  1179  0FE6                     	;# 
  1180  0FE7                     	;# 
  1181  0FE8                     	;# 
  1182  0FE9                     	;# 
  1183  0FEA                     	;# 
  1184  0FEB                     	;# 
  1185  0FED                     	;# 
  1186  0FEE                     	;# 
  1187  0FEF                     	;# 
  1188                           
  1189                           	psect	stringtext
  1190  047F                     __pstringtext:	
  1191  047F                     _filt:	
  1192  047F  34C7               	retlw	199
  1193  0480  3440               	retlw	64
  1194  0481  3400               	retlw	0
  1195  0482  34CF               	retlw	207
  1196  0483  3440               	retlw	64
  1197  0484  3400               	retlw	0
  1198  0485  346F               	retlw	111
  1199  0486  3440               	retlw	64
  1200  0487  3400               	retlw	0
  1201  0488  343F               	retlw	63
  1202  0489  3440               	retlw	64
  1203  048A  3400               	retlw	0
  1204  048B  340F               	retlw	15
  1205  048C  3489               	retlw	137
  1206  048D  3400               	retlw	0
  1207  048E  340F               	retlw	15
  1208  048F  3488               	retlw	136
  1209  0490  3400               	retlw	0
  1210  0491  340F               	retlw	15
  1211  0492  34A4               	retlw	164
  1212  0493  3400               	retlw	0
  1213  0494  340F               	retlw	15
  1214  0495  3409               	retlw	9
  1215  0496  3401               	retlw	1
  1216  0497  340F               	retlw	15
  1217  0498  3408               	retlw	8
  1218  0499  3401               	retlw	1
  1219  049A  340F               	retlw	15
  1220  049B  3424               	retlw	36
  1221  049C  3401               	retlw	1
  1222  049D  340F               	retlw	15
  1223  049E  3432               	retlw	50
  1224  049F  3401               	retlw	1
  1225  04A0                     __end_of_filt:	
  1226  04A0                     _freqs:	
  1227  04A0  3400               	retlw	0
  1228  04A1  3401               	retlw	1
  1229  04A2  3402               	retlw	2
  1230  04A3  3403               	retlw	3
  1231  04A4  3404               	retlw	4
  1232  04A5  3405               	retlw	5
  1233  04A6  3406               	retlw	6
  1234  04A7  3407               	retlw	7
  1235  04A8  3408               	retlw	8
  1236  04A9  3409               	retlw	9
  1237  04AA  340A               	retlw	10
  1238  04AB                     __end_of_freqs:	
  1239  04AB                     _gains:	
  1240  04AB  3404               	retlw	4
  1241  04AC  3405               	retlw	5
  1242  04AD  3407               	retlw	7
  1243  04AE  3403               	retlw	3
  1244  04AF  3423               	retlw	35
  1245  04B0  3463               	retlw	99
  1246  04B1  346B               	retlw	107
  1247  04B2  347B               	retlw	123
  1248  04B3                     __end_of_gains:	
  1249  000E                     _PORTC	set	14
  1250  0015                     _TMR0	set	21
  1251  005F                     _GIE	set	95
  1252  005E                     _PEIE	set	94
  1253  0065                     _RA5	set	101
  1254  008D                     _RCIF	set	141
  1255  005D                     _TMR0IE	set	93
  1256  005A                     _TMR0IF	set	90
  1257  008C                     _TXIF	set	140
  1258  009D                     _ADCON0	set	157
  1259  009E                     _ADCON1	set	158
  1260  009C                     _ADRESH	set	156
  1261  009B                     _ADRESL	set	155
  1262  0095                     _OPTION_REGbits	set	149
  1263  0099                     _OSCCON	set	153
  1264  009A                     _OSCSTAT	set	154
  1265  0098                     _OSCTUNE	set	152
  1266  008C                     _TRISA	set	140
  1267  008E                     _TRISC	set	142
  1268  04E9                     _ADGO	set	1257
  1269  04A8                     _PS0	set	1192
  1270  04A9                     _PS1	set	1193
  1271  04AA                     _PS2	set	1194
  1272  04AB                     _PSA	set	1195
  1273  048D                     _RCIE	set	1165
  1274  04AD                     _TMR0CS	set	1197
  1275  048C                     _TXIE	set	1164
  1276  011D                     _APFCON	set	285
  1277  010C                     _LATA	set	268
  1278  010E                     _LATC	set	270
  1279  08EF                     _RXDTSEL	set	2287
  1280  08EA                     _TXCKSEL	set	2282
  1281  018C                     _ANSELA	set	396
  1282  018E                     _ANSELC	set	398
  1283  0199                     _RCREG	set	409
  1284  019C                     _SPBRGH	set	412
  1285  019B                     _SPBRGL	set	411
  1286  019A                     _TXREG	set	410
  1287  0CFB                     _BRG16	set	3323
  1288  0CF2                     _BRGH	set	3314
  1289  0CEC                     _CREN	set	3308
  1290  0CE9                     _OERR	set	3305
  1291  0CFC                     _SCKP	set	3324
  1292  0CEF                     _SPEN	set	3311
  1293  0CF4                     _SYNC	set	3316
  1294  0CF5                     _TXEN	set	3317
  1295  020C                     _WPUA	set	524
  1296  020E                     _WPUC	set	526
  1297  039A                     _CLKRCON	set	922
  1298                           
  1299                           ; #config settings
  1300  0000                     
  1301                           	psect	cinit
  1302  0057                     start_initialization:	
  1303  0057                     __initialization:	
  1304                           
  1305                           ; Clear objects allocated to COMMON
  1306  0057  01F0               	clrf	__pbssCOMMON& (0+127)
  1307  0058  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  1308  0059  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  1309  005A  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  1310  005B  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  1311                           
  1312                           ; Clear objects allocated to BANK0
  1313  005C  304E               	movlw	low __pbssBANK0
  1314  005D  0084               	movwf	4
  1315  005E  3000               	movlw	high __pbssBANK0
  1316  005F  0085               	movwf	5
  1317  0060  3018               	movlw	24
  1318  0061  2666               	fcall	clear_ram0
  1319                           
  1320                           ; Clear objects allocated to BANK1
  1321  0062  30A0               	movlw	low __pbssBANK1
  1322  0063  0084               	movwf	4
  1323  0064  3000               	movlw	high __pbssBANK1
  1324  0065  0085               	movwf	5
  1325  0066  300F               	movlw	15
  1326  0067  2666               	fcall	clear_ram0
  1327  0068                     end_of_initialization:	
  1328                           ;End of C runtime variable initialization code
  1329                           
  1330  0068                     __end_of__initialization:	
  1331  0068  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1332  0069  0020               	movlb	0
  1333  006A  2B51               	ljmp	_main	;jump to C main() function
  1334                           
  1335                           	psect	bssCOMMON
  1336  0070                     __pbssCOMMON:	
  1337  0070                     _TIMER0_timeout:	
  1338  0070                     	ds	2
  1339  0072                     _USART_tx_flag:	
  1340  0072                     	ds	1
  1341  0073                     _USART_tx_index:	
  1342  0073                     	ds	1
  1343  0074                     _USART_tx_length:	
  1344  0074                     	ds	1
  1345                           
  1346                           	psect	bssBANK0
  1347  004E                     __pbssBANK0:	
  1348  004E                     _USART_rx_data:	
  1349  004E                     	ds	10
  1350  0058                     _TIMER0_flag:	
  1351  0058                     	ds	1
  1352  0059                     _USART_rx_flag:	
  1353  0059                     	ds	1
  1354  005A                     _USART_rx_index:	
  1355  005A                     	ds	1
  1356  005B                     _mess_rec_size:	
  1357  005B                     	ds	1
  1358  005C                     _mess_rec:	
  1359  005C                     	ds	10
  1360                           
  1361                           	psect	bssBANK1
  1362  00A0                     __pbssBANK1:	
  1363  00A0                     _USART_tx_data:	
  1364  00A0                     	ds	15
  1365                           
  1366                           	psect	clrtext
  1367  0666                     clear_ram0:	
  1368                           ;	Called with FSR0 containing the base address, and
  1369                           ;	WREG with the size to clear
  1370                           
  1371  0666  0064               	clrwdt	;clear the watchdog before getting into this loop
  1372  0667                     clrloop0:	
  1373  0667  0180               	clrf	0	;clear RAM location pointed to by FSR
  1374  0668  3101               	addfsr 0,1
  1375  0669  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1376  066A  2E67               	goto	clrloop0	;have we reached the end yet?
  1377  066B  3400               	retlw	0	;all done for this memory range, return
  1378                           
  1379                           	psect	cstackCOMMON
  1380  0075                     __pcstackCOMMON:	
  1381  0075                     ?_OSCILLATOR_Initialize:	
  1382  0075                     ?_setup_TMR0:	
  1383                           ; 1 bytes @ 0x0
  1384                           
  1385  0075                     ?_start_TX_USART_ISR:	
  1386                           ; 1 bytes @ 0x0
  1387                           
  1388  0075                     ?_start_RX_USART_ISR:	
  1389                           ; 1 bytes @ 0x0
  1390                           
  1391  0075                     ?_start_RCM:	
  1392                           ; 1 bytes @ 0x0
  1393                           
  1394  0075                     ?_setup_ADC:	
  1395                           ; 1 bytes @ 0x0
  1396                           
  1397  0075                     ?_mess_handler:	
  1398                           ; 1 bytes @ 0x0
  1399                           
  1400  0075                     ?_stop_TMR0_ISR:	
  1401                           ; 1 bytes @ 0x0
  1402                           
  1403  0075                     ??_stop_TMR0_ISR:	
  1404                           ; 1 bytes @ 0x0
  1405                           
  1406  0075                     ?_start_TMR0_ISR:	
  1407                           ; 1 bytes @ 0x0
  1408                           
  1409  0075                     ??_start_TMR0_ISR:	
  1410                           ; 1 bytes @ 0x0
  1411                           
  1412  0075                     ?_sweep:	
  1413                           ; 1 bytes @ 0x0
  1414                           
  1415  0075                     ?_config_ASIC:	
  1416                           ; 1 bytes @ 0x0
  1417                           
  1418  0075                     ?_read_ADC_channels:	
  1419                           ; 1 bytes @ 0x0
  1420                           
  1421  0075                     ?_measure_Impedance:	
  1422                           ; 1 bytes @ 0x0
  1423                           
  1424  0075                     ?_measure_Impedance_no_offset:	
  1425                           ; 1 bytes @ 0x0
  1426                           
  1427  0075                     ?_measure_Offset:	
  1428                           ; 1 bytes @ 0x0
  1429                           
  1430  0075                     ?_measure_Impedance_SE:	
  1431                           ; 1 bytes @ 0x0
  1432                           
  1433  0075                     ?_calibrate_reader:	
  1434                           ; 1 bytes @ 0x0
  1435                           
  1436  0075                     ?_PIN_MANAGER_Initialize:	
  1437                           ; 1 bytes @ 0x0
  1438                           
  1439  0075                     ?_SYSTEM_Initialize:	
  1440                           ; 1 bytes @ 0x0
  1441                           
  1442  0075                     ?_USARTX_change_pol:	
  1443                           ; 1 bytes @ 0x0
  1444                           
  1445  0075                     ?_main:	
  1446                           ; 1 bytes @ 0x0
  1447                           
  1448  0075                     ?_isr:	
  1449                           ; 1 bytes @ 0x0
  1450                           
  1451  0075                     ?_close_RX_USART:	
  1452                           ; 1 bytes @ 0x0
  1453                           
  1454  0075                     ?i1_start_RX_USART_ISR:	
  1455                           ; 1 bytes @ 0x0
  1456                           
  1457  0075                     ??i1_start_RX_USART_ISR:	
  1458                           ; 1 bytes @ 0x0
  1459                           
  1460                           
  1461                           ; 1 bytes @ 0x0
  1462  0075                     	ds	2
  1463  0077                     start_TMR0_ISR@val:	
  1464                           
  1465                           ; 1 bytes @ 0x2
  1466  0077                     	ds	1
  1467  0078                     ??_isr:	
  1468                           
  1469                           ; 1 bytes @ 0x3
  1470  0078                     	ds	2
  1471                           
  1472                           	psect	cstackBANK0
  1473  0020                     __pcstackBANK0:	
  1474  0020                     ??_OSCILLATOR_Initialize:	
  1475  0020                     ??_setup_TMR0:	
  1476                           ; 1 bytes @ 0x0
  1477                           
  1478  0020                     ??_start_TX_USART_ISR:	
  1479                           ; 1 bytes @ 0x0
  1480                           
  1481  0020                     ??_start_RX_USART_ISR:	
  1482                           ; 1 bytes @ 0x0
  1483                           
  1484  0020                     ??_start_RCM:	
  1485                           ; 1 bytes @ 0x0
  1486                           
  1487  0020                     ??_setup_ADC:	
  1488                           ; 1 bytes @ 0x0
  1489                           
  1490  0020                     ?_calculate_checksum:	
  1491                           ; 1 bytes @ 0x0
  1492                           
  1493  0020                     ??_PIN_MANAGER_Initialize:	
  1494                           ; 1 bytes @ 0x0
  1495                           
  1496  0020                     ??_SYSTEM_Initialize:	
  1497                           ; 1 bytes @ 0x0
  1498                           
  1499  0020                     ??_USARTX_change_pol:	
  1500                           ; 1 bytes @ 0x0
  1501                           
  1502  0020                     ?_config:	
  1503                           ; 1 bytes @ 0x0
  1504                           
  1505  0020                     ?_setGain:	
  1506                           ; 1 bytes @ 0x0
  1507                           
  1508  0020                     ?_setFreq:	
  1509                           ; 1 bytes @ 0x0
  1510                           
  1511  0020                     ??_close_RX_USART:	
  1512                           ; 1 bytes @ 0x0
  1513                           
  1514  0020                     ?_lputs_ISR:	
  1515                           ; 1 bytes @ 0x0
  1516                           
  1517  0020                     ?_ADC_2:	
  1518                           ; 1 bytes @ 0x0
  1519                           
  1520  0020                     ?_ADC_4:	
  1521                           ; 2 bytes @ 0x0
  1522                           
  1523  0020                     ?_ADC_5:	
  1524                           ; 2 bytes @ 0x0
  1525                           
  1526  0020                     setGain@gain_index:	
  1527                           ; 2 bytes @ 0x0
  1528                           
  1529  0020                     setFreq@freq_index:	
  1530                           ; 1 bytes @ 0x0
  1531                           
  1532  0020                     lputs_ISR@length:	
  1533                           ; 1 bytes @ 0x0
  1534                           
  1535  0020                     calculate_checksum@num:	
  1536                           ; 1 bytes @ 0x0
  1537                           
  1538  0020                     config@conf:	
  1539                           ; 1 bytes @ 0x0
  1540                           
  1541                           
  1542                           ; 2 bytes @ 0x0
  1543  0020                     	ds	1
  1544  0021                     ??_calculate_checksum:	
  1545  0021                     ??_setGain:	
  1546                           ; 1 bytes @ 0x1
  1547                           
  1548  0021                     ??_setFreq:	
  1549                           ; 1 bytes @ 0x1
  1550                           
  1551  0021                     ??_lputs_ISR:	
  1552                           ; 1 bytes @ 0x1
  1553                           
  1554                           
  1555                           ; 1 bytes @ 0x1
  1556  0021                     	ds	1
  1557  0022                     ??_ADC_2:	
  1558  0022                     ??_ADC_4:	
  1559                           ; 1 bytes @ 0x2
  1560                           
  1561  0022                     ??_ADC_5:	
  1562                           ; 1 bytes @ 0x2
  1563                           
  1564  0022                     ??_config:	
  1565                           ; 1 bytes @ 0x2
  1566                           
  1567  0022                     setGain@aux:	
  1568                           ; 1 bytes @ 0x2
  1569                           
  1570  0022                     setFreq@asic:	
  1571                           ; 1 bytes @ 0x2
  1572                           
  1573                           
  1574                           ; 1 bytes @ 0x2
  1575  0022                     	ds	1
  1576  0023                     config@i:	
  1577  0023                     setGain@asic:	
  1578                           ; 1 bytes @ 0x3
  1579                           
  1580  0023                     setFreq@aux:	
  1581                           ; 1 bytes @ 0x3
  1582                           
  1583  0023                     lputs_ISR@i:	
  1584                           ; 1 bytes @ 0x3
  1585                           
  1586  0023                     calculate_checksum@check:	
  1587                           ; 1 bytes @ 0x3
  1588                           
  1589                           
  1590                           ; 1 bytes @ 0x3
  1591  0023                     	ds	1
  1592  0024                     config@out:	
  1593  0024                     lputs_ISR@data:	
  1594                           ; 1 bytes @ 0x4
  1595                           
  1596  0024                     calculate_checksum@data:	
  1597                           ; 1 bytes @ 0x4
  1598                           
  1599  0024                     ADC_2@ADC_value:	
  1600                           ; 1 bytes @ 0x4
  1601                           
  1602  0024                     ADC_4@ADC_value:	
  1603                           ; 2 bytes @ 0x4
  1604                           
  1605  0024                     ADC_5@ADC_value:	
  1606                           ; 2 bytes @ 0x4
  1607                           
  1608                           
  1609                           ; 2 bytes @ 0x4
  1610  0024                     	ds	1
  1611  0025                     ??_config_ASIC:	
  1612  0025                     ??_calibrate_reader:	
  1613                           ; 1 bytes @ 0x5
  1614                           
  1615  0025                     calculate_checksum@i:	
  1616                           ; 1 bytes @ 0x5
  1617                           
  1618                           
  1619                           ; 1 bytes @ 0x5
  1620  0025                     	ds	1
  1621  0026                     ??_read_ADC_channels:	
  1622  0026                     ??_measure_Impedance:	
  1623                           ; 1 bytes @ 0x6
  1624                           
  1625  0026                     ??_measure_Impedance_no_offset:	
  1626                           ; 1 bytes @ 0x6
  1627                           
  1628  0026                     ??_measure_Offset:	
  1629                           ; 1 bytes @ 0x6
  1630                           
  1631  0026                     ??_measure_Impedance_SE:	
  1632                           ; 1 bytes @ 0x6
  1633                           
  1634  0026                     ?_measure:	
  1635                           ; 1 bytes @ 0x6
  1636                           
  1637  0026                     measure@Q:	
  1638                           ; 1 bytes @ 0x6
  1639                           
  1640  0026                     config_ASIC@asic:	
  1641                           ; 1 bytes @ 0x6
  1642                           
  1643  0026                     calibrate_reader@aux:	
  1644                           ; 2 bytes @ 0x6
  1645                           
  1646                           
  1647                           ; 8 bytes @ 0x6
  1648  0026                     	ds	1
  1649  0027                     measure@asic:	
  1650  0027                     measure_Offset@aux:	
  1651                           ; 2 bytes @ 0x7
  1652                           
  1653  0027                     read_ADC_channels@aux:	
  1654                           ; 5 bytes @ 0x7
  1655                           
  1656  0027                     measure_Impedance@aux:	
  1657                           ; 7 bytes @ 0x7
  1658                           
  1659  0027                     measure_Impedance_no_offset@aux:	
  1660                           ; 13 bytes @ 0x7
  1661                           
  1662                           
  1663                           ; 13 bytes @ 0x7
  1664  0027                     	ds	1
  1665  0028                     measure_Impedance_SE@aux:	
  1666                           
  1667                           ; 8 bytes @ 0x8
  1668  0028                     	ds	1
  1669  0029                     ??_measure:	
  1670                           
  1671                           ; 1 bytes @ 0x9
  1672  0029                     	ds	3
  1673  002C                     measure_Offset@value1:	
  1674                           
  1675                           ; 2 bytes @ 0xC
  1676  002C                     	ds	1
  1677  002D                     measure@offset:	
  1678                           
  1679                           ; 2 bytes @ 0xD
  1680  002D                     	ds	1
  1681  002E                     read_ADC_channels@value1:	
  1682  002E                     measure_Offset@value2:	
  1683                           ; 2 bytes @ 0xE
  1684                           
  1685                           
  1686                           ; 2 bytes @ 0xE
  1687  002E                     	ds	1
  1688  002F                     measure@I:	
  1689                           
  1690                           ; 1 bytes @ 0xF
  1691  002F                     	ds	1
  1692  0030                     measure_Impedance_SE@check:	
  1693  0030                     read_ADC_channels@value2:	
  1694                           ; 1 bytes @ 0x10
  1695                           
  1696  0030                     measure_Offset@asic:	
  1697                           ; 2 bytes @ 0x10
  1698                           
  1699  0030                     measure@value:	
  1700                           ; 2 bytes @ 0x10
  1701                           
  1702                           
  1703                           ; 2 bytes @ 0x10
  1704  0030                     	ds	1
  1705  0031                     measure_Impedance_SE@value1:	
  1706                           
  1707                           ; 2 bytes @ 0x11
  1708  0031                     	ds	1
  1709  0032                     read_ADC_channels@value3:	
  1710  0032                     measure@aux2:	
  1711                           ; 2 bytes @ 0x12
  1712                           
  1713                           
  1714                           ; 2 bytes @ 0x12
  1715  0032                     	ds	1
  1716  0033                     measure_Impedance_SE@asic:	
  1717                           
  1718                           ; 2 bytes @ 0x13
  1719  0033                     	ds	1
  1720  0034                     measure_Impedance@value1:	
  1721  0034                     measure_Impedance_no_offset@value1:	
  1722                           ; 2 bytes @ 0x14
  1723                           
  1724  0034                     measure@aux1:	
  1725                           ; 2 bytes @ 0x14
  1726                           
  1727                           
  1728                           ; 2 bytes @ 0x14
  1729  0034                     	ds	2
  1730  0036                     ??_sweep:	
  1731  0036                     measure_Impedance@value2:	
  1732                           ; 1 bytes @ 0x16
  1733                           
  1734  0036                     measure_Impedance_no_offset@value2:	
  1735                           ; 2 bytes @ 0x16
  1736                           
  1737                           
  1738                           ; 2 bytes @ 0x16
  1739  0036                     	ds	2
  1740  0038                     sweep@check:	
  1741  0038                     measure_Impedance@asic:	
  1742                           ; 1 bytes @ 0x18
  1743                           
  1744  0038                     measure_Impedance_no_offset@asic:	
  1745                           ; 2 bytes @ 0x18
  1746                           
  1747                           
  1748                           ; 2 bytes @ 0x18
  1749  0038                     	ds	1
  1750  0039                     sweep@aux:	
  1751                           
  1752                           ; 7 bytes @ 0x19
  1753  0039                     	ds	7
  1754  0040                     sweep@freq_index:	
  1755                           
  1756                           ; 1 bytes @ 0x20
  1757  0040                     	ds	1
  1758  0041                     sweep@i:	
  1759                           
  1760                           ; 1 bytes @ 0x21
  1761  0041                     	ds	1
  1762  0042                     sweep@count:	
  1763                           
  1764                           ; 1 bytes @ 0x22
  1765  0042                     	ds	1
  1766  0043                     sweep@I:	
  1767                           
  1768                           ; 2 bytes @ 0x23
  1769  0043                     	ds	2
  1770  0045                     sweep@Q:	
  1771                           
  1772                           ; 2 bytes @ 0x25
  1773  0045                     	ds	2
  1774  0047                     sweep@gain_index:	
  1775                           
  1776                           ; 1 bytes @ 0x27
  1777  0047                     	ds	1
  1778  0048                     sweep@ret:	
  1779                           
  1780                           ; 1 bytes @ 0x28
  1781  0048                     	ds	1
  1782  0049                     sweep@asic:	
  1783                           
  1784                           ; 2 bytes @ 0x29
  1785  0049                     	ds	2
  1786  004B                     ??_mess_handler:	
  1787                           
  1788                           ; 1 bytes @ 0x2B
  1789  004B                     	ds	1
  1790  004C                     ??_main:	
  1791                           
  1792                           ; 1 bytes @ 0x2C
  1793  004C                     	ds	1
  1794  004D                     main@i:	
  1795                           
  1796                           ; 1 bytes @ 0x2D
  1797  004D                     	ds	1
  1798                           
  1799                           	psect	maintext
  1800  0351                     __pmaintext:	
  1801 ;;
  1802 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1803 ;;
  1804 ;; *************** function _main *****************
  1805 ;; Defined at:
  1806 ;;		line 20 in file "main.c"
  1807 ;; Parameters:    Size  Location     Type
  1808 ;;		None
  1809 ;; Auto vars:     Size  Location     Type
  1810 ;;  i               1   45[BANK0 ] unsigned char 
  1811 ;; Return value:  Size  Location     Type
  1812 ;;                  1    wreg      void 
  1813 ;; Registers used:
  1814 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1815 ;; Tracked objects:
  1816 ;;		On entry : B1F/0
  1817 ;;		On exit  : 0/0
  1818 ;;		Unchanged: 0/0
  1819 ;; Data sizes:     COMMON   BANK0   BANK1
  1820 ;;      Params:         0       0       0
  1821 ;;      Locals:         0       1       0
  1822 ;;      Temps:          0       1       0
  1823 ;;      Totals:         0       2       0
  1824 ;;Total ram usage:        2 bytes
  1825 ;; Hardware stack levels required when called:    6
  1826 ;; This function calls:
  1827 ;;		_SYSTEM_Initialize
  1828 ;;		_USARTX_change_pol
  1829 ;;		_mess_handler
  1830 ;;		_setup_ADC
  1831 ;;		_setup_TMR0
  1832 ;;		_start_RCM
  1833 ;;		_start_RX_USART_ISR
  1834 ;;		_start_TX_USART_ISR
  1835 ;; This function is called by:
  1836 ;;		Startup code after reset
  1837 ;; This function uses a non-reentrant model
  1838 ;;
  1839                           
  1840                           
  1841                           ;psect for function _main
  1842  0351                     _main:	
  1843                           
  1844                           ;main.c: 22: unsigned char i;
  1845                           ;main.c: 24: SYSTEM_Initialize();
  1846                           
  1847                           ;incstack = 0
  1848                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1849  0351  267F               	fcall	_SYSTEM_Initialize
  1850                           
  1851                           ;main.c: 26: USARTX_change_pol();
  1852  0352  267C               	fcall	_USARTX_change_pol
  1853                           
  1854                           ;main.c: 28: setup_TMR0();
  1855  0353  2658               	fcall	_setup_TMR0
  1856                           
  1857                           ;main.c: 29: start_TX_USART_ISR();
  1858  0354  2649               	fcall	_start_TX_USART_ISR
  1859                           
  1860                           ;main.c: 30: start_RX_USART_ISR();
  1861  0355  2617               	fcall	_start_RX_USART_ISR
  1862                           
  1863                           ;main.c: 31: start_RCM();
  1864  0356  2678               	fcall	_start_RCM
  1865                           
  1866                           ;main.c: 32: setup_ADC();
  1867  0357  266C               	fcall	_setup_ADC
  1868                           
  1869                           ;main.c: 35: RA5 = 0;
  1870  0358  0020               	movlb	0	; select bank0
  1871  0359  128C               	bcf	12,5	;volatile
  1872                           
  1873                           ;main.c: 36: _delay((unsigned long)((150)*(500000/4000.0)));
  1874  035A  3019               	movlw	25
  1875  035B  0020               	movlb	0	; select bank0
  1876  035C  00CC               	movwf	??_main
  1877  035D  3058               	movlw	88
  1878  035E                     u1557:	
  1879  035E  0B89               	decfsz	9,f
  1880  035F  2B5E               	goto	u1557
  1881  0360  0BCC               	decfsz	??_main,f
  1882  0361  2B5E               	goto	u1557
  1883  0362  0000               	nop
  1884                           
  1885                           ;main.c: 37: RA5 = 1;
  1886  0363  0020               	movlb	0	; select bank0
  1887  0364  168C               	bsf	12,5	;volatile
  1888  0365                     l121:	
  1889                           ;main.c: 109: while(1) {
  1890                           
  1891  0365  0064               	clrwdt	;# 
  1892                           
  1893                           ;main.c: 113: if (TIMER0_flag) {
  1894  0366  0020               	movlb	0	; select bank0
  1895  0367  0858               	movf	_TIMER0_flag,w	;volatile
  1896  0368  1903               	btfsc	3,2
  1897  0369  2B65               	goto	l121
  1898                           
  1899                           ;main.c: 114: TIMER0_flag = 0;
  1900  036A  01D8               	clrf	_TIMER0_flag	;volatile
  1901                           
  1902                           ;main.c: 116: if (USART_rx_index > 10) {
  1903  036B  300B               	movlw	11
  1904  036C  025A               	subwf	_USART_rx_index,w	;volatile
  1905  036D  1C03               	skipc
  1906  036E  2B71               	goto	l3022
  1907                           
  1908                           ;main.c: 117: USART_rx_index = 0;
  1909  036F  01DA               	clrf	_USART_rx_index	;volatile
  1910                           
  1911                           ;main.c: 118: continue;
  1912  0370  2B65               	goto	l121
  1913  0371                     l3022:	
  1914                           
  1915                           ;main.c: 119: }
  1916                           ;main.c: 121: if(USART_rx_index == 0)
  1917  0371  085A               	movf	_USART_rx_index,w	;volatile
  1918  0372  1903               	btfsc	3,2
  1919                           
  1920                           ;main.c: 122: continue;
  1921  0373  2B65               	goto	l121
  1922                           
  1923                           ;main.c: 125: mess_rec_size = USART_rx_index;
  1924  0374  085A               	movf	_USART_rx_index,w	;volatile
  1925  0375  00CC               	movwf	??_main
  1926  0376  084C               	movf	??_main,w
  1927  0377  00DB               	movwf	_mess_rec_size	;volatile
  1928                           
  1929                           ;main.c: 126: USART_rx_index = 0;
  1930  0378  01DA               	clrf	_USART_rx_index	;volatile
  1931                           
  1932                           ;main.c: 128: for (i = 0; i < mess_rec_size; i++)
  1933  0379  01CD               	clrf	main@i
  1934  037A                     l3036:	
  1935  037A  085B               	movf	_mess_rec_size,w	;volatile
  1936  037B  024D               	subwf	main@i,w
  1937  037C  1803               	btfsc	3,0
  1938  037D  2B8F               	goto	l3038
  1939                           
  1940                           ;main.c: 129: mess_rec[i] = USART_rx_data[i];
  1941  037E  084D               	movf	main@i,w
  1942  037F  3E4E               	addlw	(low (_USART_rx_data| 0))& (0+255)
  1943  0380  0086               	movwf	6
  1944  0381  0187               	clrf	7
  1945  0382  0801               	movf	1,w
  1946  0383  00CC               	movwf	??_main
  1947  0384  084D               	movf	main@i,w
  1948  0385  3E5C               	addlw	(low (_mess_rec| 0))& (0+255)
  1949  0386  0086               	movwf	6
  1950  0387  0187               	clrf	7
  1951  0388  084C               	movf	??_main,w
  1952  0389  0081               	movwf	1
  1953  038A  3001               	movlw	1
  1954  038B  00CC               	movwf	??_main
  1955  038C  084C               	movf	??_main,w
  1956  038D  07CD               	addwf	main@i,f
  1957  038E  2B7A               	goto	l3036
  1958  038F                     l3038:	
  1959                           
  1960                           ;main.c: 132: mess_handler();
  1961  038F  2447               	fcall	_mess_handler
  1962  0390  2B65               	goto	l121
  1963  0391                     __end_of_main:	
  1964                           
  1965                           	psect	text1
  1966  0649                     __ptext1:	
  1967 ;; *************** function _start_TX_USART_ISR *****************
  1968 ;; Defined at:
  1969 ;;		line 101 in file "USART1823.c"
  1970 ;; Parameters:    Size  Location     Type
  1971 ;;		None
  1972 ;; Auto vars:     Size  Location     Type
  1973 ;;		None
  1974 ;; Return value:  Size  Location     Type
  1975 ;;                  1    wreg      void 
  1976 ;; Registers used:
  1977 ;;		wreg, status,2
  1978 ;; Tracked objects:
  1979 ;;		On entry : 0/0
  1980 ;;		On exit  : 0/0
  1981 ;;		Unchanged: 0/0
  1982 ;; Data sizes:     COMMON   BANK0   BANK1
  1983 ;;      Params:         0       0       0
  1984 ;;      Locals:         0       0       0
  1985 ;;      Temps:          0       0       0
  1986 ;;      Totals:         0       0       0
  1987 ;;Total ram usage:        0 bytes
  1988 ;; Hardware stack levels used:    1
  1989 ;; Hardware stack levels required when called:    2
  1990 ;; This function calls:
  1991 ;;		Nothing
  1992 ;; This function is called by:
  1993 ;;		_main
  1994 ;; This function uses a non-reentrant model
  1995 ;;
  1996                           
  1997                           
  1998                           ;psect for function _start_TX_USART_ISR
  1999  0649                     _start_TX_USART_ISR:	
  2000                           
  2001                           ;USART1823.c: 103: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  2002                           
  2003                           ;incstack = 0
  2004                           ; Regs used in _start_TX_USART_ISR: [wreg+status,2]
  2005  0649  0023               	movlb	3	; select bank3
  2006  064A  151E               	bsf	30,2	;volatile
  2007  064B  159F               	bsf	31,3	;volatile
  2008  064C  019C               	clrf	28	;volatile
  2009  064D  300C               	movlw	12
  2010  064E  009B               	movwf	27	;volatile
  2011                           
  2012                           ;USART1823.c: 104: SYNC = 0;
  2013  064F  121E               	bcf	30,4	;volatile
  2014                           
  2015                           ;USART1823.c: 105: SPEN = 1;
  2016  0650  179D               	bsf	29,7	;volatile
  2017                           
  2018                           ;USART1823.c: 106: TXEN = 1;
  2019  0651  169E               	bsf	30,5	;volatile
  2020                           
  2021                           ;USART1823.c: 108: USART_tx_flag = 0;
  2022  0652  01F2               	clrf	_USART_tx_flag	;volatile
  2023                           
  2024                           ;USART1823.c: 109: USART_tx_index = 0;
  2025  0653  01F3               	clrf	_USART_tx_index	;volatile
  2026                           
  2027                           ;USART1823.c: 110: USART_tx_length = 0;
  2028  0654  01F4               	clrf	_USART_tx_length	;volatile
  2029                           
  2030                           ;USART1823.c: 113: PEIE = 1;
  2031  0655  170B               	bsf	11,6	;volatile
  2032                           
  2033                           ;USART1823.c: 114: GIE = 1;
  2034  0656  178B               	bsf	11,7	;volatile
  2035  0657  0008               	return
  2036  0658                     __end_of_start_TX_USART_ISR:	
  2037                           
  2038                           	psect	text2
  2039  0617                     __ptext2:	
  2040 ;; *************** function _start_RX_USART_ISR *****************
  2041 ;; Defined at:
  2042 ;;		line 83 in file "USART1823.c"
  2043 ;; Parameters:    Size  Location     Type
  2044 ;;		None
  2045 ;; Auto vars:     Size  Location     Type
  2046 ;;		None
  2047 ;; Return value:  Size  Location     Type
  2048 ;;                  1    wreg      void 
  2049 ;; Registers used:
  2050 ;;		wreg, status,2
  2051 ;; Tracked objects:
  2052 ;;		On entry : 0/0
  2053 ;;		On exit  : 0/0
  2054 ;;		Unchanged: 0/0
  2055 ;; Data sizes:     COMMON   BANK0   BANK1
  2056 ;;      Params:         0       0       0
  2057 ;;      Locals:         0       0       0
  2058 ;;      Temps:          0       0       0
  2059 ;;      Totals:         0       0       0
  2060 ;;Total ram usage:        0 bytes
  2061 ;; Hardware stack levels used:    1
  2062 ;; Hardware stack levels required when called:    2
  2063 ;; This function calls:
  2064 ;;		Nothing
  2065 ;; This function is called by:
  2066 ;;		_main
  2067 ;; This function uses a non-reentrant model
  2068 ;;
  2069                           
  2070                           
  2071                           ;psect for function _start_RX_USART_ISR
  2072  0617                     _start_RX_USART_ISR:	
  2073                           
  2074                           ;USART1823.c: 86: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  2075                           
  2076                           ;incstack = 0
  2077                           ; Regs used in _start_RX_USART_ISR: [wreg+status,2]
  2078  0617  0023               	movlb	3	; select bank3
  2079  0618  151E               	bsf	30,2	;volatile
  2080  0619  159F               	bsf	31,3	;volatile
  2081  061A  019C               	clrf	28	;volatile
  2082  061B  300C               	movlw	12
  2083  061C  009B               	movwf	27	;volatile
  2084                           
  2085                           ;USART1823.c: 88: SYNC = 0;
  2086  061D  121E               	bcf	30,4	;volatile
  2087                           
  2088                           ;USART1823.c: 89: SPEN = 1;
  2089  061E  179D               	bsf	29,7	;volatile
  2090                           
  2091                           ;USART1823.c: 90: CREN = 1;
  2092  061F  161D               	bsf	29,4	;volatile
  2093                           
  2094                           ;USART1823.c: 92: USART_rx_flag = 0;
  2095  0620  0020               	movlb	0	; select bank0
  2096  0621  01D9               	clrf	_USART_rx_flag	;volatile
  2097                           
  2098                           ;USART1823.c: 93: USART_rx_index = 0;
  2099  0622  01DA               	clrf	_USART_rx_index	;volatile
  2100                           
  2101                           ;USART1823.c: 95: RCIE = 1;
  2102  0623  0021               	movlb	1	; select bank1
  2103  0624  1691               	bsf	17,5	;volatile
  2104                           
  2105                           ;USART1823.c: 96: PEIE = 1;
  2106  0625  170B               	bsf	11,6	;volatile
  2107                           
  2108                           ;USART1823.c: 97: GIE = 1;
  2109  0626  178B               	bsf	11,7	;volatile
  2110  0627  0008               	return
  2111  0628                     __end_of_start_RX_USART_ISR:	
  2112                           
  2113                           	psect	text3
  2114  0678                     __ptext3:	
  2115 ;; *************** function _start_RCM *****************
  2116 ;; Defined at:
  2117 ;;		line 4 in file "RCM1823.c"
  2118 ;; Parameters:    Size  Location     Type
  2119 ;;		None
  2120 ;; Auto vars:     Size  Location     Type
  2121 ;;		None
  2122 ;; Return value:  Size  Location     Type
  2123 ;;                  1    wreg      void 
  2124 ;; Registers used:
  2125 ;;		wreg
  2126 ;; Tracked objects:
  2127 ;;		On entry : 0/0
  2128 ;;		On exit  : 0/0
  2129 ;;		Unchanged: 0/0
  2130 ;; Data sizes:     COMMON   BANK0   BANK1
  2131 ;;      Params:         0       0       0
  2132 ;;      Locals:         0       0       0
  2133 ;;      Temps:          0       0       0
  2134 ;;      Totals:         0       0       0
  2135 ;;Total ram usage:        0 bytes
  2136 ;; Hardware stack levels used:    1
  2137 ;; Hardware stack levels required when called:    2
  2138 ;; This function calls:
  2139 ;;		Nothing
  2140 ;; This function is called by:
  2141 ;;		_main
  2142 ;; This function uses a non-reentrant model
  2143 ;;
  2144                           
  2145                           
  2146                           ;psect for function _start_RCM
  2147  0678                     _start_RCM:	
  2148                           
  2149                           ;RCM1823.c: 6: CLKRCON = 0b11010000;
  2150                           
  2151                           ;incstack = 0
  2152                           ; Regs used in _start_RCM: [wreg]
  2153  0678  30D0               	movlw	208
  2154  0679  0027               	movlb	7	; select bank7
  2155  067A  009A               	movwf	26	;volatile
  2156  067B  0008               	return
  2157  067C                     __end_of_start_RCM:	
  2158                           
  2159                           	psect	text4
  2160  0658                     __ptext4:	
  2161 ;; *************** function _setup_TMR0 *****************
  2162 ;; Defined at:
  2163 ;;		line 10 in file "TMR0.c"
  2164 ;; Parameters:    Size  Location     Type
  2165 ;;		None
  2166 ;; Auto vars:     Size  Location     Type
  2167 ;;		None
  2168 ;; Return value:  Size  Location     Type
  2169 ;;                  1    wreg      void 
  2170 ;; Registers used:
  2171 ;;		None
  2172 ;; Tracked objects:
  2173 ;;		On entry : 0/0
  2174 ;;		On exit  : 0/0
  2175 ;;		Unchanged: 0/0
  2176 ;; Data sizes:     COMMON   BANK0   BANK1
  2177 ;;      Params:         0       0       0
  2178 ;;      Locals:         0       0       0
  2179 ;;      Temps:          0       0       0
  2180 ;;      Totals:         0       0       0
  2181 ;;Total ram usage:        0 bytes
  2182 ;; Hardware stack levels used:    1
  2183 ;; Hardware stack levels required when called:    2
  2184 ;; This function calls:
  2185 ;;		Nothing
  2186 ;; This function is called by:
  2187 ;;		_main
  2188 ;; This function uses a non-reentrant model
  2189 ;;
  2190                           
  2191                           
  2192                           ;psect for function _setup_TMR0
  2193  0658                     _setup_TMR0:	
  2194                           
  2195                           ;TMR0.c: 13: PS2 = 0; PS1 = 1; PS0 = 0;
  2196                           
  2197                           ;incstack = 0
  2198                           ; Regs used in _setup_TMR0: []
  2199  0658  0021               	movlb	1	; select bank1
  2200  0659  1115               	bcf	21,2	;volatile
  2201  065A  1495               	bsf	21,1	;volatile
  2202  065B  1015               	bcf	21,0	;volatile
  2203                           
  2204                           ;TMR0.c: 16: PSA = 0;
  2205  065C  1195               	bcf	21,3	;volatile
  2206                           
  2207                           ;TMR0.c: 18: TMR0CS = 0;
  2208  065D  1295               	bcf	21,5	;volatile
  2209  065E  0008               	return
  2210  065F                     __end_of_setup_TMR0:	
  2211                           
  2212                           	psect	text5
  2213  066C                     __ptext5:	
  2214 ;; *************** function _setup_ADC *****************
  2215 ;; Defined at:
  2216 ;;		line 3 in file "ADC1823.c"
  2217 ;; Parameters:    Size  Location     Type
  2218 ;;		None
  2219 ;; Auto vars:     Size  Location     Type
  2220 ;;		None
  2221 ;; Return value:  Size  Location     Type
  2222 ;;                  1    wreg      void 
  2223 ;; Registers used:
  2224 ;;		wreg
  2225 ;; Tracked objects:
  2226 ;;		On entry : 0/0
  2227 ;;		On exit  : 0/0
  2228 ;;		Unchanged: 0/0
  2229 ;; Data sizes:     COMMON   BANK0   BANK1
  2230 ;;      Params:         0       0       0
  2231 ;;      Locals:         0       0       0
  2232 ;;      Temps:          0       0       0
  2233 ;;      Totals:         0       0       0
  2234 ;;Total ram usage:        0 bytes
  2235 ;; Hardware stack levels used:    1
  2236 ;; Hardware stack levels required when called:    2
  2237 ;; This function calls:
  2238 ;;		Nothing
  2239 ;; This function is called by:
  2240 ;;		_main
  2241 ;; This function uses a non-reentrant model
  2242 ;;
  2243                           
  2244                           
  2245                           ;psect for function _setup_ADC
  2246  066C                     _setup_ADC:	
  2247                           
  2248                           ;ADC1823.c: 20: ADCON1 = 0b11110000;
  2249                           
  2250                           ;incstack = 0
  2251                           ; Regs used in _setup_ADC: [wreg]
  2252  066C  30F0               	movlw	240
  2253  066D  0021               	movlb	1	; select bank1
  2254  066E  009E               	movwf	30	;volatile
  2255                           
  2256                           ;ADC1823.c: 21: { ADCON0 = 0b00100100;};
  2257  066F  3024               	movlw	36
  2258  0670  009D               	movwf	29	;volatile
  2259  0671  0008               	return
  2260  0672                     __end_of_setup_ADC:	
  2261                           
  2262                           	psect	text6
  2263  0447                     __ptext6:	
  2264 ;; *************** function _mess_handler *****************
  2265 ;; Defined at:
  2266 ;;		line 11 in file "comm.c"
  2267 ;; Parameters:    Size  Location     Type
  2268 ;;		None
  2269 ;; Auto vars:     Size  Location     Type
  2270 ;;		None
  2271 ;; Return value:  Size  Location     Type
  2272 ;;                  1    wreg      void 
  2273 ;; Registers used:
  2274 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2275 ;; Tracked objects:
  2276 ;;		On entry : 0/0
  2277 ;;		On exit  : 0/0
  2278 ;;		Unchanged: 0/0
  2279 ;; Data sizes:     COMMON   BANK0   BANK1
  2280 ;;      Params:         0       0       0
  2281 ;;      Locals:         0       0       0
  2282 ;;      Temps:          0       1       0
  2283 ;;      Totals:         0       1       0
  2284 ;;Total ram usage:        1 bytes
  2285 ;; Hardware stack levels used:    1
  2286 ;; Hardware stack levels required when called:    5
  2287 ;; This function calls:
  2288 ;;		_calibrate_reader
  2289 ;;		_config_ASIC
  2290 ;;		_lputs_ISR
  2291 ;;		_measure_Impedance
  2292 ;;		_measure_Impedance_SE
  2293 ;;		_measure_Impedance_no_offset
  2294 ;;		_measure_Offset
  2295 ;;		_read_ADC_channels
  2296 ;;		_sweep
  2297 ;; This function is called by:
  2298 ;;		_main
  2299 ;; This function uses a non-reentrant model
  2300 ;;
  2301                           
  2302                           
  2303                           ;psect for function _mess_handler
  2304  0447                     _mess_handler:	
  2305                           
  2306                           ;comm.c: 16: switch (mess_rec[0]) {
  2307                           
  2308                           ;incstack = 0
  2309                           ; Regs used in _mess_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2310  0447  2C60               	goto	l3000
  2311  0448                     l2980:	
  2312                           ;comm.c: 17: case 't':
  2313                           
  2314                           
  2315                           ;comm.c: 18: lputs_ISR(mess_rec,mess_rec_size);
  2316  0448  0020               	movlb	0	; select bank0
  2317  0449  085B               	movf	_mess_rec_size,w	;volatile
  2318  044A  00CB               	movwf	??_mess_handler
  2319  044B  084B               	movf	??_mess_handler,w
  2320  044C  00A0               	movwf	lputs_ISR@length
  2321  044D  305C               	movlw	(low (_mess_rec| 0))& (0+255)
  2322  044E  2512               	fcall	_lputs_ISR
  2323                           
  2324                           ;comm.c: 19: break;
  2325  044F  0008               	return
  2326  0450                     l2982:	
  2327                           ;comm.c: 21: case 'f':
  2328                           
  2329                           
  2330                           ;comm.c: 22: sweep();
  2331  0450  2120               	fcall	_sweep
  2332                           
  2333                           ;comm.c: 23: break;
  2334  0451  0008               	return
  2335  0452                     l2984:	
  2336                           ;comm.c: 25: case 'c':
  2337                           
  2338                           
  2339                           ;comm.c: 26: config_ASIC();
  2340  0452  2601               	fcall	_config_ASIC
  2341                           
  2342                           ;comm.c: 27: break;
  2343  0453  0008               	return
  2344  0454                     l2986:	
  2345                           ;comm.c: 29: case 'm':
  2346                           
  2347                           
  2348                           ;comm.c: 30: read_ADC_channels();
  2349  0454  240E               	fcall	_read_ADC_channels
  2350                           
  2351                           ;comm.c: 31: break;
  2352  0455  0008               	return
  2353  0456                     l2988:	
  2354                           ;comm.c: 33: case 'z':
  2355                           
  2356                           
  2357                           ;comm.c: 34: measure_Impedance();
  2358  0456  21BF               	fcall	_measure_Impedance
  2359                           
  2360                           ;comm.c: 35: break;
  2361  0457  0008               	return
  2362  0458                     l2990:	
  2363                           ;comm.c: 37: case 'y':
  2364                           
  2365                           
  2366                           ;comm.c: 38: measure_Impedance_no_offset();
  2367  0458  22E6               	fcall	_measure_Impedance_no_offset
  2368                           
  2369                           ;comm.c: 39: break;
  2370  0459  0008               	return
  2371  045A                     l2992:	
  2372                           ;comm.c: 41: case 'o':
  2373                           
  2374                           
  2375                           ;comm.c: 42: measure_Offset();
  2376  045A  2391               	fcall	_measure_Offset
  2377                           
  2378                           ;comm.c: 43: break;
  2379  045B  0008               	return
  2380  045C                     l2994:	
  2381                           ;comm.c: 45: case 's':
  2382                           
  2383                           
  2384                           ;comm.c: 46: measure_Impedance_SE();
  2385  045C  2255               	fcall	_measure_Impedance_SE
  2386                           
  2387                           ;comm.c: 47: break;
  2388  045D  0008               	return
  2389  045E                     l2996:	
  2390                           ;comm.c: 50: case '&':
  2391                           
  2392                           
  2393                           ;comm.c: 51: calibrate_reader();
  2394  045E  24B3               	fcall	_calibrate_reader
  2395                           
  2396                           ;comm.c: 58: }
  2397                           
  2398                           ;comm.c: 57: break;
  2399                           
  2400                           ;comm.c: 56: default:
  2401                           
  2402                           ;comm.c: 52: break;
  2403  045F  0008               	return
  2404  0460                     l3000:	
  2405  0460  0020               	movlb	0	; select bank0
  2406  0461  085C               	movf	_mess_rec,w	;volatile
  2407                           
  2408                           ; Switch size 1, requested type "space"
  2409                           ; Number of cases is 9, Range of values is 38 to 122
  2410                           ; switch strategies available:
  2411                           ; Name         Instructions Cycles
  2412                           ; simple_byte           28    15 (average)
  2413                           ; direct_byte          179     9 (fixed)
  2414                           ; jumptable            263     9 (fixed)
  2415                           ;	Chosen strategy is simple_byte
  2416  0462  3A26               	xorlw	38	; case 38
  2417  0463  1903               	skipnz
  2418  0464  2C5E               	goto	l2996
  2419  0465  3A45               	xorlw	69	; case 99
  2420  0466  1903               	skipnz
  2421  0467  2C52               	goto	l2984
  2422  0468  3A05               	xorlw	5	; case 102
  2423  0469  1903               	skipnz
  2424  046A  2C50               	goto	l2982
  2425  046B  3A0B               	xorlw	11	; case 109
  2426  046C  1903               	skipnz
  2427  046D  2C54               	goto	l2986
  2428  046E  3A02               	xorlw	2	; case 111
  2429  046F  1903               	skipnz
  2430  0470  2C5A               	goto	l2992
  2431  0471  3A1C               	xorlw	28	; case 115
  2432  0472  1903               	skipnz
  2433  0473  2C5C               	goto	l2994
  2434  0474  3A07               	xorlw	7	; case 116
  2435  0475  1903               	skipnz
  2436  0476  2C48               	goto	l2980
  2437  0477  3A0D               	xorlw	13	; case 121
  2438  0478  1903               	skipnz
  2439  0479  2C58               	goto	l2990
  2440  047A  3A03               	xorlw	3	; case 122
  2441  047B  1903               	skipnz
  2442  047C  2C56               	goto	l2988
  2443  047D  2C7E               	goto	l364
  2444  047E                     l364:	
  2445  047E  0008               	return
  2446  047F                     __end_of_mess_handler:	
  2447                           
  2448                           	psect	text7
  2449  0120                     __ptext7:	
  2450 ;; *************** function _sweep *****************
  2451 ;; Defined at:
  2452 ;;		line 441 in file "comm.c"
  2453 ;; Parameters:    Size  Location     Type
  2454 ;;		None
  2455 ;; Auto vars:     Size  Location     Type
  2456 ;;  aux             7   25[BANK0 ] unsigned char [7]
  2457 ;;  asic            2   41[BANK0 ] struct .
  2458 ;;  Q               2   37[BANK0 ] short 
  2459 ;;  I               2   35[BANK0 ] short 
  2460 ;;  ret             1   40[BANK0 ] unsigned char 
  2461 ;;  gain_index      1   39[BANK0 ] unsigned char 
  2462 ;;  count           1   34[BANK0 ] unsigned char 
  2463 ;;  i               1   33[BANK0 ] unsigned char 
  2464 ;;  freq_index      1   32[BANK0 ] unsigned char 
  2465 ;;  check           1   24[BANK0 ] unsigned char 
  2466 ;; Return value:  Size  Location     Type
  2467 ;;                  1    wreg      void 
  2468 ;; Registers used:
  2469 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2470 ;; Tracked objects:
  2471 ;;		On entry : 0/0
  2472 ;;		On exit  : 0/0
  2473 ;;		Unchanged: 0/0
  2474 ;; Data sizes:     COMMON   BANK0   BANK1
  2475 ;;      Params:         0       0       0
  2476 ;;      Locals:         0      19       0
  2477 ;;      Temps:          0       2       0
  2478 ;;      Totals:         0      21       0
  2479 ;;Total ram usage:       21 bytes
  2480 ;; Hardware stack levels used:    1
  2481 ;; Hardware stack levels required when called:    4
  2482 ;; This function calls:
  2483 ;;		_calculate_checksum
  2484 ;;		_lputs_ISR
  2485 ;;		_measure
  2486 ;;		_setFreq
  2487 ;;		_setGain
  2488 ;; This function is called by:
  2489 ;;		_mess_handler
  2490 ;; This function uses a non-reentrant model
  2491 ;;
  2492                           
  2493                           
  2494                           ;psect for function _sweep
  2495  0120                     _sweep:	
  2496                           
  2497                           ;comm.c: 443: unsigned char gain_index;
  2498                           ;comm.c: 444: unsigned char freq_index;
  2499                           ;comm.c: 445: unsigned char i, ret, count;
  2500                           ;comm.c: 446: short I,Q;
  2501                           ;comm.c: 447: unsigned char aux[7], check;
  2502                           ;comm.c: 450: BIO3 asic;
  2503                           ;comm.c: 451: asic.datashort = 0;
  2504                           
  2505                           ;incstack = 0
  2506                           ; Regs used in _sweep: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2507  0120  0020               	movlb	0	; select bank0
  2508  0121  01C9               	clrf	sweep@asic
  2509  0122  01CA               	clrf	sweep@asic+1
  2510                           
  2511                           ;comm.c: 462: freq_index = 10;
  2512  0123  300A               	movlw	10
  2513  0124  00B6               	movwf	??_sweep
  2514  0125  0836               	movf	??_sweep,w
  2515  0126  00C0               	movwf	sweep@freq_index
  2516                           
  2517                           ;comm.c: 463: gain_index = 0;
  2518  0127  01C7               	clrf	sweep@gain_index
  2519                           
  2520                           ;comm.c: 464: setGain(&asic,gain_index);
  2521  0128  0847               	movf	sweep@gain_index,w
  2522  0129  00B6               	movwf	??_sweep
  2523  012A  0836               	movf	??_sweep,w
  2524  012B  00A0               	movwf	setGain@gain_index
  2525  012C  3049               	movlw	(low (sweep@asic| 0))& (0+255)
  2526  012D  23D0               	fcall	_setGain
  2527                           
  2528                           ;comm.c: 467: for (i = 0; i < 11; i++) {
  2529  012E  0020               	movlb	0	; select bank0
  2530  012F  01C1               	clrf	sweep@i
  2531  0130                     L1:	
  2532  0130  300B               	movlw	11
  2533  0131  0241               	subwf	sweep@i,w
  2534  0132  1803               	btfsc	3,0
  2535  0133  0008               	return
  2536                           
  2537                           ;comm.c: 470: setFreq(&asic,freq_index);
  2538  0134  0840               	movf	sweep@freq_index,w
  2539  0135  00B6               	movwf	??_sweep
  2540  0136  0836               	movf	??_sweep,w
  2541  0137  00A0               	movwf	setFreq@freq_index
  2542  0138  3049               	movlw	(low (sweep@asic| 0))& (0+255)
  2543  0139  253D               	fcall	_setFreq
  2544                           
  2545                           ;comm.c: 477: count = 0;
  2546  013A  0020               	movlb	0	; select bank0
  2547  013B  01C2               	clrf	sweep@count
  2548                           
  2549                           ;comm.c: 478: ret = 0;
  2550  013C  01C8               	clrf	sweep@ret
  2551  013D                     l2656:	
  2552                           ;comm.c: 480: do {
  2553                           
  2554                           
  2555                           ;comm.c: 482: ret = measure(&I,&Q,asic);
  2556  013D  3045               	movlw	(low (sweep@Q| 0))& (0+255)
  2557  013E  00B6               	movwf	??_sweep
  2558  013F  0836               	movf	??_sweep,w
  2559  0140  00A6               	movwf	measure@Q
  2560  0141  084A               	movf	sweep@asic+1,w
  2561  0142  00A8               	movwf	measure@asic+1
  2562  0143  0849               	movf	sweep@asic,w
  2563  0144  00A7               	movwf	measure@asic
  2564  0145  3043               	movlw	(low (sweep@I| 0))& (0+255)
  2565  0146  206B               	fcall	_measure
  2566  0147  0020               	movlb	0	; select bank0
  2567  0148  00B7               	movwf	??_sweep+1
  2568  0149  0837               	movf	??_sweep+1,w
  2569  014A  00C8               	movwf	sweep@ret
  2570                           
  2571                           ;comm.c: 484: if (ret == 1) {
  2572  014B  0348               	decf	sweep@ret,w
  2573  014C  1D03               	btfss	3,2
  2574  014D  295F               	goto	l2672
  2575                           
  2576                           ;comm.c: 486: if (count == 2) break;
  2577  014E  3002               	movlw	2
  2578  014F  0642               	xorwf	sweep@count,w
  2579  0150  1903               	btfsc	3,2
  2580  0151  297A               	goto	l2688
  2581                           
  2582                           ;comm.c: 487: count = ret;
  2583  0152  0848               	movf	sweep@ret,w
  2584  0153  00B6               	movwf	??_sweep
  2585  0154  0836               	movf	??_sweep,w
  2586  0155  00C2               	movwf	sweep@count
  2587                           
  2588                           ;comm.c: 490: if (gain_index < 7) {
  2589  0156  3007               	movlw	7
  2590  0157  0247               	subwf	sweep@gain_index,w
  2591  0158  1803               	skipnc
  2592  0159  297A               	goto	l2688
  2593                           
  2594                           ;comm.c: 494: gain_index++;
  2595  015A  3001               	movlw	1
  2596  015B  00B6               	movwf	??_sweep
  2597  015C  0836               	movf	??_sweep,w
  2598  015D  07C7               	addwf	sweep@gain_index,f
  2599  015E  2970               	goto	L2
  2600  015F                     l2672:	
  2601                           ;comm.c: 502: } else if (ret == 2) {
  2602                           
  2603                           ;comm.c: 498: }
  2604                           ;comm.c: 500: continue;
  2605                           
  2606                           ;comm.c: 497: break;
  2607                           
  2608                           ;comm.c: 496: } else {
  2609                           
  2610                           ;comm.c: 495: setGain(&asic,gain_index);
  2611                           
  2612  015F  3002               	movlw	2
  2613  0160  0020               	movlb	0	; select bank0
  2614  0161  0648               	xorwf	sweep@ret,w
  2615  0162  1D03               	btfss	3,2
  2616  0163  2976               	goto	l2686
  2617                           
  2618                           ;comm.c: 504: if (count == 1) break;
  2619  0164  0342               	decf	sweep@count,w
  2620  0165  1903               	btfsc	3,2
  2621  0166  297A               	goto	l2688
  2622                           
  2623                           ;comm.c: 505: count = ret;
  2624  0167  0848               	movf	sweep@ret,w
  2625  0168  00B6               	movwf	??_sweep
  2626  0169  0836               	movf	??_sweep,w
  2627  016A  00C2               	movwf	sweep@count
  2628                           
  2629                           ;comm.c: 507: if (gain_index > 0) {
  2630  016B  0847               	movf	sweep@gain_index,w
  2631  016C  1903               	btfsc	3,2
  2632  016D  297A               	goto	l2688
  2633                           
  2634                           ;comm.c: 508: gain_index--;
  2635  016E  3001               	movlw	1
  2636  016F  02C7               	subwf	sweep@gain_index,f
  2637  0170                     L2:	
  2638                           
  2639                           ;comm.c: 509: setGain(&asic,gain_index);
  2640  0170  0847               	movf	sweep@gain_index,w
  2641  0171  00B6               	movwf	??_sweep
  2642  0172  0836               	movf	??_sweep,w
  2643  0173  00A0               	movwf	setGain@gain_index
  2644  0174  3049               	movlw	(low (sweep@asic| 0))& (0+255)
  2645  0175  23D0               	fcall	_setGain
  2646  0176                     l2686:	
  2647                           ;comm.c: 512: }
  2648                           ;comm.c: 514: continue;
  2649                           
  2650                           ;comm.c: 511: break;
  2651                           
  2652                           ;comm.c: 510: } else {
  2653                           
  2654                           
  2655                           ;comm.c: 515: }
  2656                           ;comm.c: 517: } while (ret);
  2657  0176  0020               	movlb	0	; select bank0
  2658  0177  0848               	movf	sweep@ret,w
  2659  0178  1D03               	btfss	3,2
  2660  0179  293D               	goto	l2656
  2661  017A                     l2688:	
  2662                           
  2663                           ;comm.c: 523: ret = (freq_index << 4) & 0xf0;
  2664  017A  0020               	movlb	0	; select bank0
  2665  017B  0840               	movf	sweep@freq_index,w
  2666  017C  00B6               	movwf	??_sweep
  2667  017D  3003               	movlw	3
  2668  017E                     u1485:	
  2669  017E  35B6               	lslf	??_sweep,f
  2670  017F  3EFF               	addlw	-1
  2671  0180  1D03               	skipz
  2672  0181  297E               	goto	u1485
  2673  0182  3536               	lslf	??_sweep,w
  2674  0183  39F0               	andlw	240
  2675  0184  00B7               	movwf	??_sweep+1
  2676  0185  0837               	movf	??_sweep+1,w
  2677  0186  00C8               	movwf	sweep@ret
  2678                           
  2679                           ;comm.c: 524: ret |= (gain_index & 0xff);
  2680  0187  0847               	movf	sweep@gain_index,w
  2681  0188  00B6               	movwf	??_sweep
  2682  0189  0836               	movf	??_sweep,w
  2683  018A  04C8               	iorwf	sweep@ret,f
  2684                           
  2685                           ;comm.c: 526: aux[0] = 'f';
  2686  018B  3066               	movlw	102
  2687  018C  00B6               	movwf	??_sweep
  2688  018D  0836               	movf	??_sweep,w
  2689  018E  00B9               	movwf	sweep@aux
  2690                           
  2691                           ;comm.c: 527: aux[1] = (unsigned char)(I & 0xff);
  2692  018F  0843               	movf	sweep@I,w
  2693  0190  00B6               	movwf	??_sweep
  2694  0191  0836               	movf	??_sweep,w
  2695  0192  00BA               	movwf	sweep@aux+1
  2696                           
  2697                           ;comm.c: 528: aux[2] = (unsigned char)((I >> 8) & 0xff);
  2698  0193  0844               	movf	sweep@I+1,w
  2699  0194  00B6               	movwf	??_sweep
  2700  0195  0836               	movf	??_sweep,w
  2701  0196  00BB               	movwf	sweep@aux+2
  2702                           
  2703                           ;comm.c: 529: aux[3] = (unsigned char)(Q & 0xff);
  2704  0197  0845               	movf	sweep@Q,w
  2705  0198  00B6               	movwf	??_sweep
  2706  0199  0836               	movf	??_sweep,w
  2707  019A  00BC               	movwf	sweep@aux+3
  2708                           
  2709                           ;comm.c: 530: aux[4] = (unsigned char)((Q >> 8) & 0xff);
  2710  019B  0846               	movf	sweep@Q+1,w
  2711  019C  00B6               	movwf	??_sweep
  2712  019D  0836               	movf	??_sweep,w
  2713  019E  00BD               	movwf	sweep@aux+4
  2714                           
  2715                           ;comm.c: 531: aux[5] = ret;
  2716  019F  0848               	movf	sweep@ret,w
  2717  01A0  00B6               	movwf	??_sweep
  2718  01A1  0836               	movf	??_sweep,w
  2719  01A2  00BE               	movwf	sweep@aux+5
  2720                           
  2721                           ;comm.c: 533: check = calculate_checksum(aux,6);
  2722  01A3  3006               	movlw	6
  2723  01A4  00B6               	movwf	??_sweep
  2724  01A5  0836               	movf	??_sweep,w
  2725  01A6  00A0               	movwf	calculate_checksum@num
  2726  01A7  3039               	movlw	(low (sweep@aux| 0))& (0+255)
  2727  01A8  25CF               	fcall	_calculate_checksum
  2728  01A9  0020               	movlb	0	; select bank0
  2729  01AA  00B7               	movwf	??_sweep+1
  2730  01AB  0837               	movf	??_sweep+1,w
  2731  01AC  00B8               	movwf	sweep@check
  2732                           
  2733                           ;comm.c: 534: aux[6] = check;
  2734  01AD  0838               	movf	sweep@check,w
  2735  01AE  00B6               	movwf	??_sweep
  2736  01AF  0836               	movf	??_sweep,w
  2737  01B0  00BF               	movwf	sweep@aux+6
  2738                           
  2739                           ;comm.c: 537: lputs_ISR(aux,7);
  2740  01B1  3007               	movlw	7
  2741  01B2  00B6               	movwf	??_sweep
  2742  01B3  0836               	movf	??_sweep,w
  2743  01B4  00A0               	movwf	lputs_ISR@length
  2744  01B5  3039               	movlw	(low (sweep@aux| 0))& (0+255)
  2745  01B6  2512               	fcall	_lputs_ISR
  2746                           
  2747                           ;comm.c: 545: freq_index--;
  2748  01B7  3001               	movlw	1
  2749  01B8  0020               	movlb	0	; select bank0
  2750  01B9  02C0               	subwf	sweep@freq_index,f
  2751  01BA  3001               	movlw	1
  2752  01BB  00B6               	movwf	??_sweep
  2753  01BC  0836               	movf	??_sweep,w
  2754  01BD  07C1               	addwf	sweep@i,f
  2755  01BE  2930               	goto	L1
  2756  01BF                     __end_of_sweep:	
  2757                           
  2758                           	psect	text8
  2759  03D0                     __ptext8:	
  2760 ;; *************** function _setGain *****************
  2761 ;; Defined at:
  2762 ;;		line 161 in file "bio3.c"
  2763 ;; Parameters:    Size  Location     Type
  2764 ;;  asic            1    wreg     PTR struct .
  2765 ;;		 -> sweep@asic(2), 
  2766 ;;  gain_index      1    0[BANK0 ] unsigned char 
  2767 ;; Auto vars:     Size  Location     Type
  2768 ;;  asic            1    3[BANK0 ] PTR struct .
  2769 ;;		 -> sweep@asic(2), 
  2770 ;;  aux             1    2[BANK0 ] struct .
  2771 ;; Return value:  Size  Location     Type
  2772 ;;                  1    wreg      void 
  2773 ;; Registers used:
  2774 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, pclath
  2775 ;; Tracked objects:
  2776 ;;		On entry : 0/0
  2777 ;;		On exit  : 0/0
  2778 ;;		Unchanged: 0/0
  2779 ;; Data sizes:     COMMON   BANK0   BANK1
  2780 ;;      Params:         0       1       0
  2781 ;;      Locals:         0       2       0
  2782 ;;      Temps:          0       1       0
  2783 ;;      Totals:         0       4       0
  2784 ;;Total ram usage:        4 bytes
  2785 ;; Hardware stack levels used:    1
  2786 ;; Hardware stack levels required when called:    2
  2787 ;; This function calls:
  2788 ;;		Nothing
  2789 ;; This function is called by:
  2790 ;;		_sweep
  2791 ;; This function uses a non-reentrant model
  2792 ;;
  2793                           
  2794                           
  2795                           ;psect for function _setGain
  2796  03D0                     _setGain:	
  2797                           
  2798                           ;incstack = 0
  2799                           ; Regs used in _setGain: [wreg-fsr1h+pclath]
  2800                           ;setGain@asic stored from wreg
  2801  03D0  0020               	movlb	0	; select bank0
  2802  03D1  00A3               	movwf	setGain@asic
  2803                           
  2804                           ;bio3.c: 163: RADIO_gain aux;
  2805                           ;bio3.c: 164: aux.data = gains[gain_index];
  2806  03D2  0820               	movf	setGain@gain_index,w
  2807  03D3  3EAB               	addlw	low (_gains| (0+32768))
  2808  03D4  0084               	movwf	4
  2809  03D5  3084               	movlw	high (_gains| (0+32768))
  2810  03D6  1803               	skipnc
  2811  03D7  3E01               	addlw	1
  2812  03D8  0085               	movwf	5
  2813  03D9  0800               	movf	0,w	;code access
  2814  03DA  00A1               	movwf	??_setGain
  2815  03DB  0821               	movf	??_setGain,w
  2816  03DC  00A2               	movwf	setGain@aux
  2817                           
  2818                           ;bio3.c: 166: asic->data_bits.GD0 = aux.data_bits.GD0;
  2819  03DD  0823               	movf	setGain@asic,w
  2820  03DE  0086               	movwf	6
  2821  03DF  0187               	clrf	7
  2822  03E0  1101               	bcf	1,2
  2823  03E1  1822               	btfsc	setGain@aux,0
  2824  03E2  1501               	bsf	1,2
  2825                           
  2826                           ;bio3.c: 167: asic->data_bits.GD1 = aux.data_bits.GD1;
  2827  03E3  0020               	movlb	0	; select bank0
  2828  03E4  0823               	movf	setGain@asic,w
  2829  03E5  0086               	movwf	6
  2830  03E6  0187               	clrf	7
  2831  03E7  1181               	bcf	1,3
  2832  03E8  18A2               	btfsc	setGain@aux,1
  2833  03E9  1581               	bsf	1,3
  2834                           
  2835                           ;bio3.c: 168: asic->data_bits.GD2 = aux.data_bits.GD2;
  2836  03EA  0020               	movlb	0	; select bank0
  2837  03EB  0823               	movf	setGain@asic,w
  2838  03EC  0086               	movwf	6
  2839  03ED  0187               	clrf	7
  2840  03EE  1201               	bcf	1,4
  2841  03EF  1922               	btfsc	setGain@aux,2
  2842  03F0  1601               	bsf	1,4
  2843                           
  2844                           ;bio3.c: 169: asic->data_bits.GS0 = aux.data_bits.GS0;
  2845  03F1  0020               	movlb	0	; select bank0
  2846  03F2  0823               	movf	setGain@asic,w
  2847  03F3  0086               	movwf	6
  2848  03F4  0187               	clrf	7
  2849  03F5  1381               	bcf	1,7
  2850  03F6  19A2               	btfsc	setGain@aux,3
  2851  03F7  1781               	bsf	1,7
  2852                           
  2853                           ;bio3.c: 170: asic->data_bits.GS1 = aux.data_bits.GS1;
  2854  03F8  0020               	movlb	0	; select bank0
  2855  03F9  0A23               	incf	setGain@asic,w
  2856  03FA  0086               	movwf	6
  2857  03FB  0187               	clrf	7
  2858  03FC  1001               	bcf	1,0
  2859  03FD  1A22               	btfsc	setGain@aux,4
  2860  03FE  1401               	bsf	1,0
  2861                           
  2862                           ;bio3.c: 171: asic->data_bits.GS2 = aux.data_bits.GS2;
  2863  03FF  0020               	movlb	0	; select bank0
  2864  0400  0A23               	incf	setGain@asic,w
  2865  0401  0086               	movwf	6
  2866  0402  0187               	clrf	7
  2867  0403  1081               	bcf	1,1
  2868  0404  1AA2               	btfsc	setGain@aux,5
  2869  0405  1481               	bsf	1,1
  2870                           
  2871                           ;bio3.c: 172: asic->data_bits.GS3 = aux.data_bits.GS3;
  2872  0406  0020               	movlb	0	; select bank0
  2873  0407  0A23               	incf	setGain@asic,w
  2874  0408  0086               	movwf	6
  2875  0409  0187               	clrf	7
  2876  040A  1101               	bcf	1,2
  2877  040B  1B22               	btfsc	setGain@aux,6
  2878  040C  1501               	bsf	1,2
  2879  040D  0008               	return
  2880  040E                     __end_of_setGain:	
  2881                           
  2882                           	psect	text9
  2883  053D                     __ptext9:	
  2884 ;; *************** function _setFreq *****************
  2885 ;; Defined at:
  2886 ;;		line 175 in file "bio3.c"
  2887 ;; Parameters:    Size  Location     Type
  2888 ;;  asic            1    wreg     PTR struct .
  2889 ;;		 -> sweep@asic(2), 
  2890 ;;  freq_index      1    0[BANK0 ] unsigned char 
  2891 ;; Auto vars:     Size  Location     Type
  2892 ;;  asic            1    2[BANK0 ] PTR struct .
  2893 ;;		 -> sweep@asic(2), 
  2894 ;;  aux             1    3[BANK0 ] struct .
  2895 ;; Return value:  Size  Location     Type
  2896 ;;                  1    wreg      void 
  2897 ;; Registers used:
  2898 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, pclath
  2899 ;; Tracked objects:
  2900 ;;		On entry : 0/0
  2901 ;;		On exit  : 0/0
  2902 ;;		Unchanged: 0/0
  2903 ;; Data sizes:     COMMON   BANK0   BANK1
  2904 ;;      Params:         0       1       0
  2905 ;;      Locals:         0       2       0
  2906 ;;      Temps:          0       1       0
  2907 ;;      Totals:         0       4       0
  2908 ;;Total ram usage:        4 bytes
  2909 ;; Hardware stack levels used:    1
  2910 ;; Hardware stack levels required when called:    2
  2911 ;; This function calls:
  2912 ;;		Nothing
  2913 ;; This function is called by:
  2914 ;;		_sweep
  2915 ;; This function uses a non-reentrant model
  2916 ;;
  2917                           
  2918                           
  2919                           ;psect for function _setFreq
  2920  053D                     _setFreq:	
  2921                           
  2922                           ;incstack = 0
  2923                           ; Regs used in _setFreq: [wreg-fsr1h+pclath]
  2924                           ;setFreq@asic stored from wreg
  2925  053D  0020               	movlb	0	; select bank0
  2926  053E  00A2               	movwf	setFreq@asic
  2927                           
  2928                           ;bio3.c: 177: RADIO_freq aux;
  2929                           ;bio3.c: 178: aux.data = freqs[freq_index];
  2930  053F  0820               	movf	setFreq@freq_index,w
  2931  0540  3EA0               	addlw	low (_freqs| (0+32768))
  2932  0541  0084               	movwf	4
  2933  0542  3084               	movlw	high (_freqs| (0+32768))
  2934  0543  1803               	skipnc
  2935  0544  3E01               	addlw	1
  2936  0545  0085               	movwf	5
  2937  0546  0800               	movf	0,w	;code access
  2938  0547  00A1               	movwf	??_setFreq
  2939  0548  0821               	movf	??_setFreq,w
  2940  0549  00A3               	movwf	setFreq@aux
  2941                           
  2942                           ;bio3.c: 180: asic->data_bits.F0 = aux.data_bits.F0;
  2943  054A  0A22               	incf	setFreq@asic,w
  2944  054B  0086               	movwf	6
  2945  054C  0187               	clrf	7
  2946  054D  1201               	bcf	1,4
  2947  054E  1823               	btfsc	setFreq@aux,0
  2948  054F  1601               	bsf	1,4
  2949                           
  2950                           ;bio3.c: 181: asic->data_bits.F1 = aux.data_bits.F1;
  2951  0550  0020               	movlb	0	; select bank0
  2952  0551  0A22               	incf	setFreq@asic,w
  2953  0552  0086               	movwf	6
  2954  0553  0187               	clrf	7
  2955  0554  1281               	bcf	1,5
  2956  0555  18A3               	btfsc	setFreq@aux,1
  2957  0556  1681               	bsf	1,5
  2958                           
  2959                           ;bio3.c: 182: asic->data_bits.F2 = aux.data_bits.F2;
  2960  0557  0020               	movlb	0	; select bank0
  2961  0558  0A22               	incf	setFreq@asic,w
  2962  0559  0086               	movwf	6
  2963  055A  0187               	clrf	7
  2964  055B  1301               	bcf	1,6
  2965  055C  1923               	btfsc	setFreq@aux,2
  2966  055D  1701               	bsf	1,6
  2967                           
  2968                           ;bio3.c: 183: asic->data_bits.F3 = aux.data_bits.F3;
  2969  055E  0020               	movlb	0	; select bank0
  2970  055F  0A22               	incf	setFreq@asic,w
  2971  0560  0086               	movwf	6
  2972  0561  0187               	clrf	7
  2973  0562  1381               	bcf	1,7
  2974  0563  19A3               	btfsc	setFreq@aux,3
  2975  0564  1781               	bsf	1,7
  2976  0565  0008               	return
  2977  0566                     __end_of_setFreq:	
  2978                           
  2979                           	psect	text10
  2980  006B                     __ptext10:	
  2981 ;; *************** function _measure *****************
  2982 ;; Defined at:
  2983 ;;		line 554 in file "comm.c"
  2984 ;; Parameters:    Size  Location     Type
  2985 ;;  I               1    wreg     PTR short 
  2986 ;;		 -> sweep@I(2), 
  2987 ;;  Q               1    6[BANK0 ] PTR short 
  2988 ;;		 -> sweep@Q(2), 
  2989 ;;  asic            2    7[BANK0 ] struct .
  2990 ;; Auto vars:     Size  Location     Type
  2991 ;;  I               1   15[BANK0 ] PTR short 
  2992 ;;		 -> sweep@I(2), 
  2993 ;;  aux1            2   20[BANK0 ] short 
  2994 ;;  aux2            2   18[BANK0 ] short 
  2995 ;;  value           2   16[BANK0 ] unsigned short 
  2996 ;;  offset          2   13[BANK0 ] unsigned short 
  2997 ;; Return value:  Size  Location     Type
  2998 ;;                  1    wreg      unsigned char 
  2999 ;; Registers used:
  3000 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3001 ;; Tracked objects:
  3002 ;;		On entry : 0/0
  3003 ;;		On exit  : 0/0
  3004 ;;		Unchanged: 0/0
  3005 ;; Data sizes:     COMMON   BANK0   BANK1
  3006 ;;      Params:         0       3       0
  3007 ;;      Locals:         0       9       0
  3008 ;;      Temps:          0       4       0
  3009 ;;      Totals:         0      16       0
  3010 ;;Total ram usage:       16 bytes
  3011 ;; Hardware stack levels used:    1
  3012 ;; Hardware stack levels required when called:    3
  3013 ;; This function calls:
  3014 ;;		_ADC_5
  3015 ;;		_config
  3016 ;; This function is called by:
  3017 ;;		_sweep
  3018 ;; This function uses a non-reentrant model
  3019 ;;
  3020                           
  3021                           
  3022                           ;psect for function _measure
  3023  006B                     _measure:	
  3024                           
  3025                           ;incstack = 0
  3026                           ; Regs used in _measure: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3027                           ;measure@I stored from wreg
  3028  006B  0020               	movlb	0	; select bank0
  3029  006C  00AF               	movwf	measure@I
  3030                           
  3031                           ;comm.c: 559: unsigned short offset, value;
  3032                           ;comm.c: 560: short aux1,aux2;
  3033                           ;comm.c: 564: asic.data_bits.CE = 0;
  3034  006D  1327               	bcf	measure@asic,6
  3035                           
  3036                           ;comm.c: 565: config(asic);
  3037  006E  0828               	movf	measure@asic+1,w
  3038  006F  00A1               	movwf	config@conf+1
  3039  0070  0827               	movf	measure@asic,w
  3040  0071  00A0               	movwf	config@conf
  3041  0072  24E3               	fcall	_config
  3042                           
  3043                           ;comm.c: 566: _delay((unsigned long)((20)*(500000/4000.0)));
  3044  0073  3004               	movlw	4
  3045  0074  0020               	movlb	0	; select bank0
  3046  0075  00A9               	movwf	??_measure
  3047  0076  303D               	movlw	61
  3048  0077                     u1567:	
  3049  0077  0B89               	decfsz	9,f
  3050  0078  2877               	goto	u1567
  3051  0079  0BA9               	decfsz	??_measure,f
  3052  007A  2877               	goto	u1567
  3053  007B  3200               	nop2
  3054                           
  3055                           ;comm.c: 568: offset = ADC_5();
  3056  007C  2566               	fcall	_ADC_5
  3057  007D  0020               	movlb	0	; select bank0
  3058  007E  0821               	movf	?_ADC_5+1,w
  3059  007F  00AE               	movwf	measure@offset+1
  3060  0080  0820               	movf	?_ADC_5,w
  3061  0081  00AD               	movwf	measure@offset
  3062                           
  3063                           ;comm.c: 571: asic.data_bits.CE = 1;
  3064  0082  1727               	bsf	measure@asic,6
  3065                           
  3066                           ;comm.c: 572: asic.data_bits.IQ = 0;
  3067  0083  11A8               	bcf	measure@asic+1,3
  3068                           
  3069                           ;comm.c: 574: config(asic);
  3070  0084  0828               	movf	measure@asic+1,w
  3071  0085  00A1               	movwf	config@conf+1
  3072  0086  0827               	movf	measure@asic,w
  3073  0087  00A0               	movwf	config@conf
  3074  0088  24E3               	fcall	_config
  3075                           
  3076                           ;comm.c: 575: _delay((unsigned long)((20)*(500000/4000.0)));
  3077  0089  3004               	movlw	4
  3078  008A  0020               	movlb	0	; select bank0
  3079  008B  00A9               	movwf	??_measure
  3080  008C  303D               	movlw	61
  3081  008D                     u1577:	
  3082  008D  0B89               	decfsz	9,f
  3083  008E  288D               	goto	u1577
  3084  008F  0BA9               	decfsz	??_measure,f
  3085  0090  288D               	goto	u1577
  3086  0091  3200               	nop2
  3087                           
  3088                           ;comm.c: 577: value = ADC_5();
  3089  0092  2566               	fcall	_ADC_5
  3090  0093  0020               	movlb	0	; select bank0
  3091  0094  0821               	movf	?_ADC_5+1,w
  3092  0095  00B1               	movwf	measure@value+1
  3093  0096  0820               	movf	?_ADC_5,w
  3094  0097  00B0               	movwf	measure@value
  3095                           
  3096                           ;comm.c: 578: *I = (value - offset);
  3097  0098  092D               	comf	measure@offset,w
  3098  0099  00A9               	movwf	??_measure
  3099  009A  092E               	comf	measure@offset+1,w
  3100  009B  00AA               	movwf	??_measure+1
  3101  009C  0AA9               	incf	??_measure,f
  3102  009D  1903               	skipnz
  3103  009E  0AAA               	incf	??_measure+1,f
  3104  009F  0830               	movf	measure@value,w
  3105  00A0  0729               	addwf	??_measure,w
  3106  00A1  00AB               	movwf	??_measure+2
  3107  00A2  0831               	movf	measure@value+1,w
  3108  00A3  3D2A               	addwfc	??_measure+1,w
  3109  00A4  00AC               	movwf	??_measure+3
  3110  00A5  082F               	movf	measure@I,w
  3111  00A6  0086               	movwf	6
  3112  00A7  0187               	clrf	7
  3113  00A8  082B               	movf	??_measure+2,w
  3114  00A9  3FC0               	movwi [0]fsr1
  3115  00AA  082C               	movf	??_measure+3,w
  3116  00AB  3FC1               	movwi [1]fsr1
  3117                           
  3118                           ;comm.c: 579: aux1 = *I;
  3119  00AC  082F               	movf	measure@I,w
  3120  00AD  0086               	movwf	6
  3121  00AE  0187               	clrf	7
  3122  00AF  3F40               	moviw [0]fsr1
  3123  00B0  00B4               	movwf	measure@aux1
  3124  00B1  3F41               	moviw [1]fsr1
  3125  00B2  00B5               	movwf	measure@aux1+1
  3126                           
  3127                           ;comm.c: 581: if (aux1 < 0) {
  3128  00B3  1FB5               	btfss	measure@aux1+1,7
  3129  00B4  28BA               	goto	l2574
  3130                           
  3131                           ;comm.c: 582: aux1 = -aux1;
  3132  00B5  09B4               	comf	measure@aux1,f
  3133  00B6  09B5               	comf	measure@aux1+1,f
  3134  00B7  0AB4               	incf	measure@aux1,f
  3135  00B8  1903               	skipnz
  3136  00B9  0AB5               	incf	measure@aux1+1,f
  3137  00BA                     l2574:	
  3138                           
  3139                           ;comm.c: 583: }
  3140                           ;comm.c: 588: asic.data_bits.IQ = 1;
  3141  00BA  15A8               	bsf	measure@asic+1,3
  3142                           
  3143                           ;comm.c: 590: config(asic);
  3144  00BB  0828               	movf	measure@asic+1,w
  3145  00BC  00A1               	movwf	config@conf+1
  3146  00BD  0827               	movf	measure@asic,w
  3147  00BE  00A0               	movwf	config@conf
  3148  00BF  24E3               	fcall	_config
  3149                           
  3150                           ;comm.c: 591: _delay((unsigned long)((20)*(500000/4000.0)));
  3151  00C0  3004               	movlw	4
  3152  00C1  0020               	movlb	0	; select bank0
  3153  00C2  00A9               	movwf	??_measure
  3154  00C3  303D               	movlw	61
  3155  00C4                     u1587:	
  3156  00C4  0B89               	decfsz	9,f
  3157  00C5  28C4               	goto	u1587
  3158  00C6  0BA9               	decfsz	??_measure,f
  3159  00C7  28C4               	goto	u1587
  3160  00C8  3200               	nop2
  3161                           
  3162                           ;comm.c: 593: value = ADC_5();
  3163  00C9  2566               	fcall	_ADC_5
  3164  00CA  0020               	movlb	0	; select bank0
  3165  00CB  0821               	movf	?_ADC_5+1,w
  3166  00CC  00B1               	movwf	measure@value+1
  3167  00CD  0820               	movf	?_ADC_5,w
  3168  00CE  00B0               	movwf	measure@value
  3169                           
  3170                           ;comm.c: 594: *Q = (value - offset);
  3171  00CF  092D               	comf	measure@offset,w
  3172  00D0  00A9               	movwf	??_measure
  3173  00D1  092E               	comf	measure@offset+1,w
  3174  00D2  00AA               	movwf	??_measure+1
  3175  00D3  0AA9               	incf	??_measure,f
  3176  00D4  1903               	skipnz
  3177  00D5  0AAA               	incf	??_measure+1,f
  3178  00D6  0830               	movf	measure@value,w
  3179  00D7  0729               	addwf	??_measure,w
  3180  00D8  00AB               	movwf	??_measure+2
  3181  00D9  0831               	movf	measure@value+1,w
  3182  00DA  3D2A               	addwfc	??_measure+1,w
  3183  00DB  00AC               	movwf	??_measure+3
  3184  00DC  0826               	movf	measure@Q,w
  3185  00DD  0086               	movwf	6
  3186  00DE  0187               	clrf	7
  3187  00DF  082B               	movf	??_measure+2,w
  3188  00E0  3FC0               	movwi [0]fsr1
  3189  00E1  082C               	movf	??_measure+3,w
  3190  00E2  3FC1               	movwi [1]fsr1
  3191                           
  3192                           ;comm.c: 595: aux2 = *Q;
  3193  00E3  0826               	movf	measure@Q,w
  3194  00E4  0086               	movwf	6
  3195  00E5  0187               	clrf	7
  3196  00E6  3F40               	moviw [0]fsr1
  3197  00E7  00B2               	movwf	measure@aux2
  3198  00E8  3F41               	moviw [1]fsr1
  3199  00E9  00B3               	movwf	measure@aux2+1
  3200                           
  3201                           ;comm.c: 597: if (aux2 < 0) {
  3202  00EA  1FB3               	btfss	measure@aux2+1,7
  3203  00EB  28F1               	goto	l2590
  3204                           
  3205                           ;comm.c: 598: aux2 = -aux2;
  3206  00EC  09B2               	comf	measure@aux2,f
  3207  00ED  09B3               	comf	measure@aux2+1,f
  3208  00EE  0AB2               	incf	measure@aux2,f
  3209  00EF  1903               	skipnz
  3210  00F0  0AB3               	incf	measure@aux2+1,f
  3211  00F1                     l2590:	
  3212                           
  3213                           ;comm.c: 599: }
  3214                           ;comm.c: 601: if (aux2 > aux1) {
  3215  00F1  0835               	movf	measure@aux1+1,w
  3216  00F2  3A80               	xorlw	128
  3217  00F3  00A9               	movwf	??_measure
  3218  00F4  0833               	movf	measure@aux2+1,w
  3219  00F5  3A80               	xorlw	128
  3220  00F6  0229               	subwf	??_measure,w
  3221  00F7  1D03               	skipz
  3222  00F8  28FB               	goto	u1375
  3223  00F9  0832               	movf	measure@aux2,w
  3224  00FA  0234               	subwf	measure@aux1,w
  3225  00FB                     u1375:	
  3226  00FB  1803               	skipnc
  3227  00FC  2902               	goto	l417
  3228                           
  3229                           ;comm.c: 602: aux1 = aux2;
  3230  00FD  0020               	movlb	0	; select bank0
  3231  00FE  0833               	movf	measure@aux2+1,w
  3232  00FF  00B5               	movwf	measure@aux1+1
  3233  0100  0832               	movf	measure@aux2,w
  3234  0101  00B4               	movwf	measure@aux1
  3235  0102                     l417:	
  3236                           
  3237                           ;comm.c: 603: }
  3238                           ;comm.c: 605: if (aux1 > 370) {
  3239  0102  0020               	movlb	0	; select bank0
  3240  0103  0835               	movf	measure@aux1+1,w
  3241  0104  3A80               	xorlw	128
  3242  0105  00A9               	movwf	??_measure
  3243  0106  3081               	movlw	129
  3244  0107  0229               	subwf	??_measure,w
  3245  0108  1D03               	skipz
  3246  0109  290C               	goto	u1385
  3247  010A  3073               	movlw	115
  3248  010B  0234               	subwf	measure@aux1,w
  3249  010C                     u1385:	
  3250  010C  1C03               	skipc
  3251  010D  2910               	goto	l2600
  3252                           
  3253                           ;comm.c: 606: return 2;
  3254  010E  3002               	movlw	2
  3255  010F  0008               	return
  3256  0110                     l2600:	
  3257                           ;comm.c: 607: } else if (aux1 < 86) {
  3258                           
  3259  0110  0020               	movlb	0	; select bank0
  3260  0111  0835               	movf	measure@aux1+1,w
  3261  0112  3A80               	xorlw	128
  3262  0113  00A9               	movwf	??_measure
  3263  0114  3080               	movlw	128
  3264  0115  0229               	subwf	??_measure,w
  3265  0116  1D03               	skipz
  3266  0117  291A               	goto	u1395
  3267  0118  3056               	movlw	86
  3268  0119  0234               	subwf	measure@aux1,w
  3269  011A                     u1395:	
  3270  011A  1803               	skipnc
  3271  011B  291E               	goto	l2606
  3272                           
  3273                           ;comm.c: 608: return 1;
  3274  011C  3001               	movlw	1
  3275  011D  0008               	return
  3276  011E                     l2606:	
  3277                           
  3278                           ;comm.c: 609: }
  3279                           ;comm.c: 611: return 0;
  3280  011E  3000               	movlw	0
  3281  011F  0008               	return
  3282  0120                     __end_of_measure:	
  3283                           
  3284                           	psect	text11
  3285  040E                     __ptext11:	
  3286 ;; *************** function _read_ADC_channels *****************
  3287 ;; Defined at:
  3288 ;;		line 91 in file "comm.c"
  3289 ;; Parameters:    Size  Location     Type
  3290 ;;		None
  3291 ;; Auto vars:     Size  Location     Type
  3292 ;;  aux             7    7[BANK0 ] unsigned char [7]
  3293 ;;  value3          2   18[BANK0 ] unsigned short 
  3294 ;;  value2          2   16[BANK0 ] unsigned short 
  3295 ;;  value1          2   14[BANK0 ] unsigned short 
  3296 ;; Return value:  Size  Location     Type
  3297 ;;                  1    wreg      void 
  3298 ;; Registers used:
  3299 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3300 ;; Tracked objects:
  3301 ;;		On entry : 0/0
  3302 ;;		On exit  : 0/0
  3303 ;;		Unchanged: 0/0
  3304 ;; Data sizes:     COMMON   BANK0   BANK1
  3305 ;;      Params:         0       0       0
  3306 ;;      Locals:         0      13       0
  3307 ;;      Temps:          0       1       0
  3308 ;;      Totals:         0      14       0
  3309 ;;Total ram usage:       14 bytes
  3310 ;; Hardware stack levels used:    1
  3311 ;; Hardware stack levels required when called:    4
  3312 ;; This function calls:
  3313 ;;		_ADC_2
  3314 ;;		_ADC_4
  3315 ;;		_ADC_5
  3316 ;;		_lputs_ISR
  3317 ;; This function is called by:
  3318 ;;		_mess_handler
  3319 ;; This function uses a non-reentrant model
  3320 ;;
  3321                           
  3322                           
  3323                           ;psect for function _read_ADC_channels
  3324  040E                     _read_ADC_channels:	
  3325                           
  3326                           ;comm.c: 93: unsigned char aux[7];
  3327                           ;comm.c: 94: unsigned short value1,value2,value3;
  3328                           ;comm.c: 97: value1 = ADC_2();
  3329                           
  3330                           ;incstack = 0
  3331                           ; Regs used in _read_ADC_channels: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3332  040E  25AC               	fcall	_ADC_2
  3333  040F  0020               	movlb	0	; select bank0
  3334  0410  0821               	movf	?_ADC_2+1,w
  3335  0411  00AF               	movwf	read_ADC_channels@value1+1
  3336  0412  0820               	movf	?_ADC_2,w
  3337  0413  00AE               	movwf	read_ADC_channels@value1
  3338                           
  3339                           ;comm.c: 99: value2 = ADC_4();
  3340  0414  2589               	fcall	_ADC_4
  3341  0415  0020               	movlb	0	; select bank0
  3342  0416  0821               	movf	?_ADC_4+1,w
  3343  0417  00B1               	movwf	read_ADC_channels@value2+1
  3344  0418  0820               	movf	?_ADC_4,w
  3345  0419  00B0               	movwf	read_ADC_channels@value2
  3346                           
  3347                           ;comm.c: 101: value3 = ADC_5();
  3348  041A  2566               	fcall	_ADC_5
  3349  041B  0020               	movlb	0	; select bank0
  3350  041C  0821               	movf	?_ADC_5+1,w
  3351  041D  00B3               	movwf	read_ADC_channels@value3+1
  3352  041E  0820               	movf	?_ADC_5,w
  3353  041F  00B2               	movwf	read_ADC_channels@value3
  3354                           
  3355                           ;comm.c: 102: { ADCON0 = 0b00100100;};
  3356  0420  3024               	movlw	36
  3357  0421  0021               	movlb	1	; select bank1
  3358  0422  009D               	movwf	29	;volatile
  3359                           
  3360                           ;comm.c: 104: aux[0] = 'm';
  3361  0423  306D               	movlw	109
  3362  0424  0020               	movlb	0	; select bank0
  3363  0425  00A6               	movwf	??_read_ADC_channels
  3364  0426  0826               	movf	??_read_ADC_channels,w
  3365  0427  00A7               	movwf	read_ADC_channels@aux
  3366                           
  3367                           ;comm.c: 105: aux[1] = (unsigned char)(value1 & 0xff);
  3368  0428  082E               	movf	read_ADC_channels@value1,w
  3369  0429  00A6               	movwf	??_read_ADC_channels
  3370  042A  0826               	movf	??_read_ADC_channels,w
  3371  042B  00A8               	movwf	read_ADC_channels@aux+1
  3372                           
  3373                           ;comm.c: 106: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  3374  042C  082F               	movf	read_ADC_channels@value1+1,w
  3375  042D  00A6               	movwf	??_read_ADC_channels
  3376  042E  0826               	movf	??_read_ADC_channels,w
  3377  042F  00A9               	movwf	read_ADC_channels@aux+2
  3378                           
  3379                           ;comm.c: 107: aux[3] = (unsigned char)(value2 & 0xff);
  3380  0430  0830               	movf	read_ADC_channels@value2,w
  3381  0431  00A6               	movwf	??_read_ADC_channels
  3382  0432  0826               	movf	??_read_ADC_channels,w
  3383  0433  00AA               	movwf	read_ADC_channels@aux+3
  3384                           
  3385                           ;comm.c: 108: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  3386  0434  0831               	movf	read_ADC_channels@value2+1,w
  3387  0435  00A6               	movwf	??_read_ADC_channels
  3388  0436  0826               	movf	??_read_ADC_channels,w
  3389  0437  00AB               	movwf	read_ADC_channels@aux+4
  3390                           
  3391                           ;comm.c: 109: aux[5] = (unsigned char)(value3 & 0xff);
  3392  0438  0832               	movf	read_ADC_channels@value3,w
  3393  0439  00A6               	movwf	??_read_ADC_channels
  3394  043A  0826               	movf	??_read_ADC_channels,w
  3395  043B  00AC               	movwf	read_ADC_channels@aux+5
  3396                           
  3397                           ;comm.c: 110: aux[6] = (unsigned char)((value3 >> 8) & 0xff);
  3398  043C  0833               	movf	read_ADC_channels@value3+1,w
  3399  043D  00A6               	movwf	??_read_ADC_channels
  3400  043E  0826               	movf	??_read_ADC_channels,w
  3401  043F  00AD               	movwf	read_ADC_channels@aux+6
  3402                           
  3403                           ;comm.c: 112: lputs_ISR(aux,7);
  3404  0440  3007               	movlw	7
  3405  0441  00A6               	movwf	??_read_ADC_channels
  3406  0442  0826               	movf	??_read_ADC_channels,w
  3407  0443  00A0               	movwf	lputs_ISR@length
  3408  0444  3027               	movlw	(low (read_ADC_channels@aux| 0))& (0+255)
  3409  0445  2512               	fcall	_lputs_ISR
  3410  0446  0008               	return
  3411  0447                     __end_of_read_ADC_channels:	
  3412                           
  3413                           	psect	text12
  3414  0391                     __ptext12:	
  3415 ;; *************** function _measure_Offset *****************
  3416 ;; Defined at:
  3417 ;;		line 265 in file "comm.c"
  3418 ;; Parameters:    Size  Location     Type
  3419 ;;		None
  3420 ;; Auto vars:     Size  Location     Type
  3421 ;;  aux             5    7[BANK0 ] unsigned char [5]
  3422 ;;  asic            2   16[BANK0 ] struct .
  3423 ;;  value2          2   14[BANK0 ] unsigned short 
  3424 ;;  value1          2   12[BANK0 ] unsigned short 
  3425 ;; Return value:  Size  Location     Type
  3426 ;;                  1    wreg      void 
  3427 ;; Registers used:
  3428 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3429 ;; Tracked objects:
  3430 ;;		On entry : 0/0
  3431 ;;		On exit  : 0/0
  3432 ;;		Unchanged: 0/0
  3433 ;; Data sizes:     COMMON   BANK0   BANK1
  3434 ;;      Params:         0       0       0
  3435 ;;      Locals:         0      11       0
  3436 ;;      Temps:          0       1       0
  3437 ;;      Totals:         0      12       0
  3438 ;;Total ram usage:       12 bytes
  3439 ;; Hardware stack levels used:    1
  3440 ;; Hardware stack levels required when called:    4
  3441 ;; This function calls:
  3442 ;;		_ADC_2
  3443 ;;		_ADC_4
  3444 ;;		_config
  3445 ;;		_lputs_ISR
  3446 ;; This function is called by:
  3447 ;;		_mess_handler
  3448 ;; This function uses a non-reentrant model
  3449 ;;
  3450                           
  3451                           
  3452                           ;psect for function _measure_Offset
  3453  0391                     _measure_Offset:	
  3454                           
  3455                           ;comm.c: 267: unsigned char aux[5];
  3456                           ;comm.c: 268: unsigned short value1,value2;
  3457                           ;comm.c: 271: BIO3 asic;
  3458                           ;comm.c: 277: aux[0] = 'o';
  3459                           
  3460                           ;incstack = 0
  3461                           ; Regs used in _measure_Offset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3462  0391  306F               	movlw	111
  3463  0392  0020               	movlb	0	; select bank0
  3464  0393  00A6               	movwf	??_measure_Offset
  3465  0394  0826               	movf	??_measure_Offset,w
  3466  0395  00A7               	movwf	measure_Offset@aux
  3467                           
  3468                           ;comm.c: 280: asic.data[0] = (unsigned short)(mess_rec[1]);
  3469  0396  085D               	movf	_mess_rec+1,w	;volatile
  3470  0397  00A6               	movwf	??_measure_Offset
  3471  0398  0826               	movf	??_measure_Offset,w
  3472  0399  00B0               	movwf	measure_Offset@asic
  3473                           
  3474                           ;comm.c: 281: asic.data[1] = (unsigned short)(mess_rec[2]);
  3475  039A  085E               	movf	_mess_rec+2,w	;volatile
  3476  039B  00A6               	movwf	??_measure_Offset
  3477  039C  0826               	movf	??_measure_Offset,w
  3478  039D  00B1               	movwf	measure_Offset@asic+1
  3479                           
  3480                           ;comm.c: 284: asic.data_bits.CE = 0;
  3481  039E  1330               	bcf	measure_Offset@asic,6
  3482                           
  3483                           ;comm.c: 285: config(asic);
  3484  039F  0831               	movf	measure_Offset@asic+1,w
  3485  03A0  00A1               	movwf	config@conf+1
  3486  03A1  0830               	movf	measure_Offset@asic,w
  3487  03A2  00A0               	movwf	config@conf
  3488  03A3  24E3               	fcall	_config
  3489                           
  3490                           ;comm.c: 298: _delay((unsigned long)((20)*(500000/4000.0)));
  3491  03A4  3004               	movlw	4
  3492  03A5  0020               	movlb	0	; select bank0
  3493  03A6  00A6               	movwf	??_measure_Offset
  3494  03A7  303D               	movlw	61
  3495  03A8                     u1597:	
  3496  03A8  0B89               	decfsz	9,f
  3497  03A9  2BA8               	goto	u1597
  3498  03AA  0BA6               	decfsz	??_measure_Offset,f
  3499  03AB  2BA8               	goto	u1597
  3500  03AC  3200               	nop2
  3501                           
  3502                           ;comm.c: 300: value1 = ADC_2();
  3503  03AD  25AC               	fcall	_ADC_2
  3504  03AE  0020               	movlb	0	; select bank0
  3505  03AF  0821               	movf	?_ADC_2+1,w
  3506  03B0  00AD               	movwf	measure_Offset@value1+1
  3507  03B1  0820               	movf	?_ADC_2,w
  3508  03B2  00AC               	movwf	measure_Offset@value1
  3509                           
  3510                           ;comm.c: 301: value2 = ADC_4();
  3511  03B3  2589               	fcall	_ADC_4
  3512  03B4  0020               	movlb	0	; select bank0
  3513  03B5  0821               	movf	?_ADC_4+1,w
  3514  03B6  00AF               	movwf	measure_Offset@value2+1
  3515  03B7  0820               	movf	?_ADC_4,w
  3516  03B8  00AE               	movwf	measure_Offset@value2
  3517                           
  3518                           ;comm.c: 303: aux[1] = (unsigned char)(value1 & 0xff);
  3519  03B9  082C               	movf	measure_Offset@value1,w
  3520  03BA  00A6               	movwf	??_measure_Offset
  3521  03BB  0826               	movf	??_measure_Offset,w
  3522  03BC  00A8               	movwf	measure_Offset@aux+1
  3523                           
  3524                           ;comm.c: 304: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  3525  03BD  082D               	movf	measure_Offset@value1+1,w
  3526  03BE  00A6               	movwf	??_measure_Offset
  3527  03BF  0826               	movf	??_measure_Offset,w
  3528  03C0  00A9               	movwf	measure_Offset@aux+2
  3529                           
  3530                           ;comm.c: 305: aux[3] = (unsigned char)(value2 & 0xff);
  3531  03C1  082E               	movf	measure_Offset@value2,w
  3532  03C2  00A6               	movwf	??_measure_Offset
  3533  03C3  0826               	movf	??_measure_Offset,w
  3534  03C4  00AA               	movwf	measure_Offset@aux+3
  3535                           
  3536                           ;comm.c: 306: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  3537  03C5  082F               	movf	measure_Offset@value2+1,w
  3538  03C6  00A6               	movwf	??_measure_Offset
  3539  03C7  0826               	movf	??_measure_Offset,w
  3540  03C8  00AB               	movwf	measure_Offset@aux+4
  3541                           
  3542                           ;comm.c: 309: lputs_ISR(aux,5);
  3543  03C9  3005               	movlw	5
  3544  03CA  00A6               	movwf	??_measure_Offset
  3545  03CB  0826               	movf	??_measure_Offset,w
  3546  03CC  00A0               	movwf	lputs_ISR@length
  3547  03CD  3027               	movlw	(low (measure_Offset@aux| 0))& (0+255)
  3548  03CE  2512               	fcall	_lputs_ISR
  3549  03CF  0008               	return
  3550  03D0                     __end_of_measure_Offset:	
  3551                           
  3552                           	psect	text13
  3553  02E6                     __ptext13:	
  3554 ;; *************** function _measure_Impedance_no_offset *****************
  3555 ;; Defined at:
  3556 ;;		line 200 in file "comm.c"
  3557 ;; Parameters:    Size  Location     Type
  3558 ;;		None
  3559 ;; Auto vars:     Size  Location     Type
  3560 ;;  aux            13    7[BANK0 ] unsigned char [13]
  3561 ;;  asic            2   24[BANK0 ] struct .
  3562 ;;  value2          2   22[BANK0 ] unsigned short 
  3563 ;;  value1          2   20[BANK0 ] unsigned short 
  3564 ;;  value3          2    0        unsigned short 
  3565 ;; Return value:  Size  Location     Type
  3566 ;;                  1    wreg      void 
  3567 ;; Registers used:
  3568 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3569 ;; Tracked objects:
  3570 ;;		On entry : 0/0
  3571 ;;		On exit  : 0/0
  3572 ;;		Unchanged: 0/0
  3573 ;; Data sizes:     COMMON   BANK0   BANK1
  3574 ;;      Params:         0       0       0
  3575 ;;      Locals:         0      19       0
  3576 ;;      Temps:          0       1       0
  3577 ;;      Totals:         0      20       0
  3578 ;;Total ram usage:       20 bytes
  3579 ;; Hardware stack levels used:    1
  3580 ;; Hardware stack levels required when called:    4
  3581 ;; This function calls:
  3582 ;;		_ADC_2
  3583 ;;		_ADC_4
  3584 ;;		_config
  3585 ;;		_lputs_ISR
  3586 ;; This function is called by:
  3587 ;;		_mess_handler
  3588 ;; This function uses a non-reentrant model
  3589 ;;
  3590                           
  3591                           
  3592                           ;psect for function _measure_Impedance_no_offset
  3593  02E6                     _measure_Impedance_no_offset:	
  3594                           
  3595                           ;comm.c: 202: unsigned char aux[13];
  3596                           ;comm.c: 203: unsigned short value1,value2,value3;
  3597                           ;comm.c: 206: BIO3 asic;
  3598                           ;comm.c: 211: aux[0] = 'y';
  3599                           
  3600                           ;incstack = 0
  3601                           ; Regs used in _measure_Impedance_no_offset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  3602  02E6  3079               	movlw	121
  3603  02E7  0020               	movlb	0	; select bank0
  3604  02E8  00A6               	movwf	??_measure_Impedance_no_offset
  3605  02E9  0826               	movf	??_measure_Impedance_no_offset,w
  3606  02EA  00A7               	movwf	measure_Impedance_no_offset@aux
  3607                           
  3608                           ;comm.c: 214: asic.data[0] = (unsigned short)(mess_rec[1]);
  3609  02EB  085D               	movf	_mess_rec+1,w	;volatile
  3610  02EC  00A6               	movwf	??_measure_Impedance_no_offset
  3611  02ED  0826               	movf	??_measure_Impedance_no_offset,w
  3612  02EE  00B8               	movwf	measure_Impedance_no_offset@asic
  3613                           
  3614                           ;comm.c: 215: asic.data[1] = (unsigned short)(mess_rec[2]);
  3615  02EF  085E               	movf	_mess_rec+2,w	;volatile
  3616  02F0  00A6               	movwf	??_measure_Impedance_no_offset
  3617  02F1  0826               	movf	??_measure_Impedance_no_offset,w
  3618  02F2  00B9               	movwf	measure_Impedance_no_offset@asic+1
  3619                           
  3620                           ;comm.c: 225: asic.data_bits.CE = 1;
  3621  02F3  1738               	bsf	measure_Impedance_no_offset@asic,6
  3622                           
  3623                           ;comm.c: 226: asic.data_bits.IQ = 0;
  3624  02F4  11B9               	bcf	measure_Impedance_no_offset@asic+1,3
  3625                           
  3626                           ;comm.c: 229: config(asic);
  3627  02F5  0839               	movf	measure_Impedance_no_offset@asic+1,w
  3628  02F6  00A1               	movwf	config@conf+1
  3629  02F7  0838               	movf	measure_Impedance_no_offset@asic,w
  3630  02F8  00A0               	movwf	config@conf
  3631  02F9  24E3               	fcall	_config
  3632                           
  3633                           ;comm.c: 233: _delay((unsigned long)((20)*(500000/4000.0)));
  3634  02FA  3004               	movlw	4
  3635  02FB  0020               	movlb	0	; select bank0
  3636  02FC  00A6               	movwf	??_measure_Impedance_no_offset
  3637  02FD  303D               	movlw	61
  3638  02FE                     u1607:	
  3639  02FE  0B89               	decfsz	9,f
  3640  02FF  2AFE               	goto	u1607
  3641  0300  0BA6               	decfsz	??_measure_Impedance_no_offset,f
  3642  0301  2AFE               	goto	u1607
  3643  0302  3200               	nop2
  3644                           
  3645                           ;comm.c: 235: value1 = ADC_2();
  3646  0303  25AC               	fcall	_ADC_2
  3647  0304  0020               	movlb	0	; select bank0
  3648  0305  0821               	movf	?_ADC_2+1,w
  3649  0306  00B5               	movwf	measure_Impedance_no_offset@value1+1
  3650  0307  0820               	movf	?_ADC_2,w
  3651  0308  00B4               	movwf	measure_Impedance_no_offset@value1
  3652                           
  3653                           ;comm.c: 236: value2 = ADC_4();
  3654  0309  2589               	fcall	_ADC_4
  3655  030A  0020               	movlb	0	; select bank0
  3656  030B  0821               	movf	?_ADC_4+1,w
  3657  030C  00B7               	movwf	measure_Impedance_no_offset@value2+1
  3658  030D  0820               	movf	?_ADC_4,w
  3659  030E  00B6               	movwf	measure_Impedance_no_offset@value2
  3660                           
  3661                           ;comm.c: 238: aux[1] = (unsigned char)(value1 & 0xff);
  3662  030F  0834               	movf	measure_Impedance_no_offset@value1,w
  3663  0310  00A6               	movwf	??_measure_Impedance_no_offset
  3664  0311  0826               	movf	??_measure_Impedance_no_offset,w
  3665  0312  00A8               	movwf	measure_Impedance_no_offset@aux+1
  3666                           
  3667                           ;comm.c: 239: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  3668  0313  0835               	movf	measure_Impedance_no_offset@value1+1,w
  3669  0314  00A6               	movwf	??_measure_Impedance_no_offset
  3670  0315  0826               	movf	??_measure_Impedance_no_offset,w
  3671  0316  00A9               	movwf	measure_Impedance_no_offset@aux+2
  3672                           
  3673                           ;comm.c: 240: aux[3] = (unsigned char)(value2 & 0xff);
  3674  0317  0836               	movf	measure_Impedance_no_offset@value2,w
  3675  0318  00A6               	movwf	??_measure_Impedance_no_offset
  3676  0319  0826               	movf	??_measure_Impedance_no_offset,w
  3677  031A  00AA               	movwf	measure_Impedance_no_offset@aux+3
  3678                           
  3679                           ;comm.c: 241: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  3680  031B  0837               	movf	measure_Impedance_no_offset@value2+1,w
  3681  031C  00A6               	movwf	??_measure_Impedance_no_offset
  3682  031D  0826               	movf	??_measure_Impedance_no_offset,w
  3683  031E  00AB               	movwf	measure_Impedance_no_offset@aux+4
  3684                           
  3685                           ;comm.c: 244: asic.data_bits.IQ = 1;
  3686  031F  15B9               	bsf	measure_Impedance_no_offset@asic+1,3
  3687                           
  3688                           ;comm.c: 247: config(asic);
  3689  0320  0839               	movf	measure_Impedance_no_offset@asic+1,w
  3690  0321  00A1               	movwf	config@conf+1
  3691  0322  0838               	movf	measure_Impedance_no_offset@asic,w
  3692  0323  00A0               	movwf	config@conf
  3693  0324  24E3               	fcall	_config
  3694                           
  3695                           ;comm.c: 251: _delay((unsigned long)((20)*(500000/4000.0)));
  3696  0325  3004               	movlw	4
  3697  0326  0020               	movlb	0	; select bank0
  3698  0327  00A6               	movwf	??_measure_Impedance_no_offset
  3699  0328  303D               	movlw	61
  3700  0329                     u1617:	
  3701  0329  0B89               	decfsz	9,f
  3702  032A  2B29               	goto	u1617
  3703  032B  0BA6               	decfsz	??_measure_Impedance_no_offset,f
  3704  032C  2B29               	goto	u1617
  3705  032D  3200               	nop2
  3706                           
  3707                           ;comm.c: 253: value1 = ADC_2();
  3708  032E  25AC               	fcall	_ADC_2
  3709  032F  0020               	movlb	0	; select bank0
  3710  0330  0821               	movf	?_ADC_2+1,w
  3711  0331  00B5               	movwf	measure_Impedance_no_offset@value1+1
  3712  0332  0820               	movf	?_ADC_2,w
  3713  0333  00B4               	movwf	measure_Impedance_no_offset@value1
  3714                           
  3715                           ;comm.c: 254: value2 = ADC_4();
  3716  0334  2589               	fcall	_ADC_4
  3717  0335  0020               	movlb	0	; select bank0
  3718  0336  0821               	movf	?_ADC_4+1,w
  3719  0337  00B7               	movwf	measure_Impedance_no_offset@value2+1
  3720  0338  0820               	movf	?_ADC_4,w
  3721  0339  00B6               	movwf	measure_Impedance_no_offset@value2
  3722                           
  3723                           ;comm.c: 256: aux[5] = (unsigned char)(value1 & 0xff);
  3724  033A  0834               	movf	measure_Impedance_no_offset@value1,w
  3725  033B  00A6               	movwf	??_measure_Impedance_no_offset
  3726  033C  0826               	movf	??_measure_Impedance_no_offset,w
  3727  033D  00AC               	movwf	measure_Impedance_no_offset@aux+5
  3728                           
  3729                           ;comm.c: 257: aux[6] = (unsigned char)((value1 >> 8) & 0xff);
  3730  033E  0835               	movf	measure_Impedance_no_offset@value1+1,w
  3731  033F  00A6               	movwf	??_measure_Impedance_no_offset
  3732  0340  0826               	movf	??_measure_Impedance_no_offset,w
  3733  0341  00AD               	movwf	measure_Impedance_no_offset@aux+6
  3734                           
  3735                           ;comm.c: 258: aux[7] = (unsigned char)(value2 & 0xff);
  3736  0342  0836               	movf	measure_Impedance_no_offset@value2,w
  3737  0343  00A6               	movwf	??_measure_Impedance_no_offset
  3738  0344  0826               	movf	??_measure_Impedance_no_offset,w
  3739  0345  00AE               	movwf	measure_Impedance_no_offset@aux+7
  3740                           
  3741                           ;comm.c: 259: aux[8] = (unsigned char)((value2 >> 8) & 0xff);
  3742  0346  0837               	movf	measure_Impedance_no_offset@value2+1,w
  3743  0347  00A6               	movwf	??_measure_Impedance_no_offset
  3744  0348  0826               	movf	??_measure_Impedance_no_offset,w
  3745  0349  00AF               	movwf	measure_Impedance_no_offset@aux+8
  3746                           
  3747                           ;comm.c: 262: lputs_ISR(aux,9);
  3748  034A  3009               	movlw	9
  3749  034B  00A6               	movwf	??_measure_Impedance_no_offset
  3750  034C  0826               	movf	??_measure_Impedance_no_offset,w
  3751  034D  00A0               	movwf	lputs_ISR@length
  3752  034E  3027               	movlw	(low (measure_Impedance_no_offset@aux| 0))& (0+255)
  3753  034F  2512               	fcall	_lputs_ISR
  3754  0350  0008               	return
  3755  0351                     __end_of_measure_Impedance_no_offset:	
  3756                           
  3757                           	psect	text14
  3758  0255                     __ptext14:	
  3759 ;; *************** function _measure_Impedance_SE *****************
  3760 ;; Defined at:
  3761 ;;		line 314 in file "comm.c"
  3762 ;; Parameters:    Size  Location     Type
  3763 ;;		None
  3764 ;; Auto vars:     Size  Location     Type
  3765 ;;  aux             8    8[BANK0 ] unsigned char [8]
  3766 ;;  asic            2   19[BANK0 ] struct .
  3767 ;;  value1          2   17[BANK0 ] unsigned short 
  3768 ;;  check           1   16[BANK0 ] unsigned char 
  3769 ;; Return value:  Size  Location     Type
  3770 ;;                  1    wreg      void 
  3771 ;; Registers used:
  3772 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3773 ;; Tracked objects:
  3774 ;;		On entry : 0/0
  3775 ;;		On exit  : 0/0
  3776 ;;		Unchanged: 0/0
  3777 ;; Data sizes:     COMMON   BANK0   BANK1
  3778 ;;      Params:         0       0       0
  3779 ;;      Locals:         0      13       0
  3780 ;;      Temps:          0       2       0
  3781 ;;      Totals:         0      15       0
  3782 ;;Total ram usage:       15 bytes
  3783 ;; Hardware stack levels used:    1
  3784 ;; Hardware stack levels required when called:    4
  3785 ;; This function calls:
  3786 ;;		_ADC_5
  3787 ;;		_calculate_checksum
  3788 ;;		_config
  3789 ;;		_lputs_ISR
  3790 ;; This function is called by:
  3791 ;;		_mess_handler
  3792 ;; This function uses a non-reentrant model
  3793 ;;
  3794                           
  3795                           
  3796                           ;psect for function _measure_Impedance_SE
  3797  0255                     _measure_Impedance_SE:	
  3798                           
  3799                           ;comm.c: 316: unsigned char aux[8], check;
  3800                           ;comm.c: 318: unsigned short value1;
  3801                           ;comm.c: 321: BIO3 asic;
  3802                           ;comm.c: 328: check = calculate_checksum(mess_rec,4);
  3803                           
  3804                           ;incstack = 0
  3805                           ; Regs used in _measure_Impedance_SE: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3806  0255  3004               	movlw	4
  3807  0256  0020               	movlb	0	; select bank0
  3808  0257  00A6               	movwf	??_measure_Impedance_SE
  3809  0258  0826               	movf	??_measure_Impedance_SE,w
  3810  0259  00A0               	movwf	calculate_checksum@num
  3811  025A  305C               	movlw	(low (_mess_rec| 0))& (0+255)
  3812  025B  25CF               	fcall	_calculate_checksum
  3813  025C  0020               	movlb	0	; select bank0
  3814  025D  00A7               	movwf	??_measure_Impedance_SE+1
  3815  025E  0827               	movf	??_measure_Impedance_SE+1,w
  3816  025F  00B0               	movwf	measure_Impedance_SE@check
  3817                           
  3818                           ;comm.c: 329: if (check) {
  3819  0260  0830               	movf	measure_Impedance_SE@check,w
  3820  0261  1903               	btfsc	3,2
  3821  0262  2A6C               	goto	l2864
  3822                           
  3823                           ;comm.c: 330: aux[0] = 'e';
  3824  0263  3065               	movlw	101
  3825  0264  00A6               	movwf	??_measure_Impedance_SE
  3826  0265  0826               	movf	??_measure_Impedance_SE,w
  3827  0266  00A8               	movwf	measure_Impedance_SE@aux
  3828                           
  3829                           ;comm.c: 331: lputs_ISR(aux,1);
  3830  0267  01A0               	clrf	lputs_ISR@length
  3831  0268  0AA0               	incf	lputs_ISR@length,f
  3832  0269  3028               	movlw	(low (measure_Impedance_SE@aux| 0))& (0+255)
  3833  026A  2512               	fcall	_lputs_ISR
  3834                           
  3835                           ;comm.c: 332: return;
  3836  026B  0008               	return
  3837  026C                     l2864:	
  3838                           
  3839                           ;comm.c: 333: }
  3840                           ;comm.c: 336: aux[0] = 's';
  3841  026C  3073               	movlw	115
  3842  026D  0020               	movlb	0	; select bank0
  3843  026E  00A6               	movwf	??_measure_Impedance_SE
  3844  026F  0826               	movf	??_measure_Impedance_SE,w
  3845  0270  00A8               	movwf	measure_Impedance_SE@aux
  3846                           
  3847                           ;comm.c: 339: asic.data[0] = (unsigned short)(mess_rec[1]);
  3848  0271  085D               	movf	_mess_rec+1,w	;volatile
  3849  0272  00A6               	movwf	??_measure_Impedance_SE
  3850  0273  0826               	movf	??_measure_Impedance_SE,w
  3851  0274  00B3               	movwf	measure_Impedance_SE@asic
  3852                           
  3853                           ;comm.c: 340: asic.data[1] = (unsigned short)(mess_rec[2]);
  3854  0275  085E               	movf	_mess_rec+2,w	;volatile
  3855  0276  00A6               	movwf	??_measure_Impedance_SE
  3856  0277  0826               	movf	??_measure_Impedance_SE,w
  3857  0278  00B4               	movwf	measure_Impedance_SE@asic+1
  3858                           
  3859                           ;comm.c: 343: asic.data_bits.CE = 0;
  3860  0279  1333               	bcf	measure_Impedance_SE@asic,6
  3861                           
  3862                           ;comm.c: 344: config(asic);
  3863  027A  0834               	movf	measure_Impedance_SE@asic+1,w
  3864  027B  00A1               	movwf	config@conf+1
  3865  027C  0833               	movf	measure_Impedance_SE@asic,w
  3866  027D  00A0               	movwf	config@conf
  3867  027E  24E3               	fcall	_config
  3868                           
  3869                           ;comm.c: 357: _delay((unsigned long)((20)*(500000/4000.0)));
  3870  027F  3004               	movlw	4
  3871  0280  0020               	movlb	0	; select bank0
  3872  0281  00A6               	movwf	??_measure_Impedance_SE
  3873  0282  303D               	movlw	61
  3874  0283                     u1627:	
  3875  0283  0B89               	decfsz	9,f
  3876  0284  2A83               	goto	u1627
  3877  0285  0BA6               	decfsz	??_measure_Impedance_SE,f
  3878  0286  2A83               	goto	u1627
  3879  0287  3200               	nop2
  3880                           
  3881                           ;comm.c: 359: value1 = ADC_5();
  3882  0288  2566               	fcall	_ADC_5
  3883  0289  0020               	movlb	0	; select bank0
  3884  028A  0821               	movf	?_ADC_5+1,w
  3885  028B  00B2               	movwf	measure_Impedance_SE@value1+1
  3886  028C  0820               	movf	?_ADC_5,w
  3887  028D  00B1               	movwf	measure_Impedance_SE@value1
  3888                           
  3889                           ;comm.c: 361: aux[1] = (unsigned char)(value1 & 0xff);
  3890  028E  0831               	movf	measure_Impedance_SE@value1,w
  3891  028F  00A6               	movwf	??_measure_Impedance_SE
  3892  0290  0826               	movf	??_measure_Impedance_SE,w
  3893  0291  00A9               	movwf	measure_Impedance_SE@aux+1
  3894                           
  3895                           ;comm.c: 362: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  3896  0292  0832               	movf	measure_Impedance_SE@value1+1,w
  3897  0293  00A6               	movwf	??_measure_Impedance_SE
  3898  0294  0826               	movf	??_measure_Impedance_SE,w
  3899  0295  00AA               	movwf	measure_Impedance_SE@aux+2
  3900                           
  3901                           ;comm.c: 365: asic.data_bits.CE = 1;
  3902  0296  1733               	bsf	measure_Impedance_SE@asic,6
  3903                           
  3904                           ;comm.c: 366: asic.data_bits.IQ = 0;
  3905  0297  11B4               	bcf	measure_Impedance_SE@asic+1,3
  3906                           
  3907                           ;comm.c: 369: config(asic);
  3908  0298  0834               	movf	measure_Impedance_SE@asic+1,w
  3909  0299  00A1               	movwf	config@conf+1
  3910  029A  0833               	movf	measure_Impedance_SE@asic,w
  3911  029B  00A0               	movwf	config@conf
  3912  029C  24E3               	fcall	_config
  3913                           
  3914                           ;comm.c: 373: _delay((unsigned long)((20)*(500000/4000.0)));
  3915  029D  3004               	movlw	4
  3916  029E  0020               	movlb	0	; select bank0
  3917  029F  00A6               	movwf	??_measure_Impedance_SE
  3918  02A0  303D               	movlw	61
  3919  02A1                     u1637:	
  3920  02A1  0B89               	decfsz	9,f
  3921  02A2  2AA1               	goto	u1637
  3922  02A3  0BA6               	decfsz	??_measure_Impedance_SE,f
  3923  02A4  2AA1               	goto	u1637
  3924  02A5  3200               	nop2
  3925                           
  3926                           ;comm.c: 375: value1 = ADC_5();
  3927  02A6  2566               	fcall	_ADC_5
  3928  02A7  0020               	movlb	0	; select bank0
  3929  02A8  0821               	movf	?_ADC_5+1,w
  3930  02A9  00B2               	movwf	measure_Impedance_SE@value1+1
  3931  02AA  0820               	movf	?_ADC_5,w
  3932  02AB  00B1               	movwf	measure_Impedance_SE@value1
  3933                           
  3934                           ;comm.c: 377: aux[3] = (unsigned char)(value1 & 0xff);
  3935  02AC  0831               	movf	measure_Impedance_SE@value1,w
  3936  02AD  00A6               	movwf	??_measure_Impedance_SE
  3937  02AE  0826               	movf	??_measure_Impedance_SE,w
  3938  02AF  00AB               	movwf	measure_Impedance_SE@aux+3
  3939                           
  3940                           ;comm.c: 378: aux[4] = (unsigned char)((value1 >> 8) & 0xff);
  3941  02B0  0832               	movf	measure_Impedance_SE@value1+1,w
  3942  02B1  00A6               	movwf	??_measure_Impedance_SE
  3943  02B2  0826               	movf	??_measure_Impedance_SE,w
  3944  02B3  00AC               	movwf	measure_Impedance_SE@aux+4
  3945                           
  3946                           ;comm.c: 381: asic.data_bits.IQ = 1;
  3947  02B4  15B4               	bsf	measure_Impedance_SE@asic+1,3
  3948                           
  3949                           ;comm.c: 384: config(asic);
  3950  02B5  0834               	movf	measure_Impedance_SE@asic+1,w
  3951  02B6  00A1               	movwf	config@conf+1
  3952  02B7  0833               	movf	measure_Impedance_SE@asic,w
  3953  02B8  00A0               	movwf	config@conf
  3954  02B9  24E3               	fcall	_config
  3955                           
  3956                           ;comm.c: 388: _delay((unsigned long)((20)*(500000/4000.0)));
  3957  02BA  3004               	movlw	4
  3958  02BB  0020               	movlb	0	; select bank0
  3959  02BC  00A6               	movwf	??_measure_Impedance_SE
  3960  02BD  303D               	movlw	61
  3961  02BE                     u1647:	
  3962  02BE  0B89               	decfsz	9,f
  3963  02BF  2ABE               	goto	u1647
  3964  02C0  0BA6               	decfsz	??_measure_Impedance_SE,f
  3965  02C1  2ABE               	goto	u1647
  3966  02C2  3200               	nop2
  3967                           
  3968                           ;comm.c: 390: value1 = ADC_5();
  3969  02C3  2566               	fcall	_ADC_5
  3970  02C4  0020               	movlb	0	; select bank0
  3971  02C5  0821               	movf	?_ADC_5+1,w
  3972  02C6  00B2               	movwf	measure_Impedance_SE@value1+1
  3973  02C7  0820               	movf	?_ADC_5,w
  3974  02C8  00B1               	movwf	measure_Impedance_SE@value1
  3975                           
  3976                           ;comm.c: 392: aux[5] = (unsigned char)(value1 & 0xff);
  3977  02C9  0831               	movf	measure_Impedance_SE@value1,w
  3978  02CA  00A6               	movwf	??_measure_Impedance_SE
  3979  02CB  0826               	movf	??_measure_Impedance_SE,w
  3980  02CC  00AD               	movwf	measure_Impedance_SE@aux+5
  3981                           
  3982                           ;comm.c: 393: aux[6] = (unsigned char)((value1 >> 8) & 0xff);
  3983  02CD  0832               	movf	measure_Impedance_SE@value1+1,w
  3984  02CE  00A6               	movwf	??_measure_Impedance_SE
  3985  02CF  0826               	movf	??_measure_Impedance_SE,w
  3986  02D0  00AE               	movwf	measure_Impedance_SE@aux+6
  3987                           
  3988                           ;comm.c: 397: check = calculate_checksum(aux,7);
  3989  02D1  3007               	movlw	7
  3990  02D2  00A6               	movwf	??_measure_Impedance_SE
  3991  02D3  0826               	movf	??_measure_Impedance_SE,w
  3992  02D4  00A0               	movwf	calculate_checksum@num
  3993  02D5  3028               	movlw	(low (measure_Impedance_SE@aux| 0))& (0+255)
  3994  02D6  25CF               	fcall	_calculate_checksum
  3995  02D7  0020               	movlb	0	; select bank0
  3996  02D8  00A7               	movwf	??_measure_Impedance_SE+1
  3997  02D9  0827               	movf	??_measure_Impedance_SE+1,w
  3998  02DA  00B0               	movwf	measure_Impedance_SE@check
  3999                           
  4000                           ;comm.c: 398: aux[7] = check;
  4001  02DB  0830               	movf	measure_Impedance_SE@check,w
  4002  02DC  00A6               	movwf	??_measure_Impedance_SE
  4003  02DD  0826               	movf	??_measure_Impedance_SE,w
  4004  02DE  00AF               	movwf	measure_Impedance_SE@aux+7
  4005                           
  4006                           ;comm.c: 399: lputs_ISR(aux,8);
  4007  02DF  3008               	movlw	8
  4008  02E0  00A6               	movwf	??_measure_Impedance_SE
  4009  02E1  0826               	movf	??_measure_Impedance_SE,w
  4010  02E2  00A0               	movwf	lputs_ISR@length
  4011  02E3  3028               	movlw	(low (measure_Impedance_SE@aux| 0))& (0+255)
  4012  02E4  2512               	fcall	_lputs_ISR
  4013  02E5  0008               	return
  4014  02E6                     __end_of_measure_Impedance_SE:	
  4015                           
  4016                           	psect	text15
  4017  05CF                     __ptext15:	
  4018 ;; *************** function _calculate_checksum *****************
  4019 ;; Defined at:
  4020 ;;		line 407 in file "comm.c"
  4021 ;; Parameters:    Size  Location     Type
  4022 ;;  data            1    wreg     PTR unsigned char 
  4023 ;;		 -> sweep@aux(7), measure_Impedance_SE@aux(8), mess_rec(10), 
  4024 ;;  num             1    0[BANK0 ] unsigned char 
  4025 ;; Auto vars:     Size  Location     Type
  4026 ;;  data            1    4[BANK0 ] PTR unsigned char 
  4027 ;;		 -> sweep@aux(7), measure_Impedance_SE@aux(8), mess_rec(10), 
  4028 ;;  i               1    5[BANK0 ] unsigned char 
  4029 ;;  check           1    3[BANK0 ] unsigned char 
  4030 ;; Return value:  Size  Location     Type
  4031 ;;                  1    wreg      unsigned char 
  4032 ;; Registers used:
  4033 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4034 ;; Tracked objects:
  4035 ;;		On entry : 0/0
  4036 ;;		On exit  : 0/0
  4037 ;;		Unchanged: 0/0
  4038 ;; Data sizes:     COMMON   BANK0   BANK1
  4039 ;;      Params:         0       1       0
  4040 ;;      Locals:         0       3       0
  4041 ;;      Temps:          0       2       0
  4042 ;;      Totals:         0       6       0
  4043 ;;Total ram usage:        6 bytes
  4044 ;; Hardware stack levels used:    1
  4045 ;; Hardware stack levels required when called:    2
  4046 ;; This function calls:
  4047 ;;		Nothing
  4048 ;; This function is called by:
  4049 ;;		_measure_Impedance_SE
  4050 ;;		_sweep
  4051 ;; This function uses a non-reentrant model
  4052 ;;
  4053                           
  4054                           
  4055                           ;psect for function _calculate_checksum
  4056  05CF                     _calculate_checksum:	
  4057                           
  4058                           ;incstack = 0
  4059                           ; Regs used in _calculate_checksum: [wreg+fsr1l+fsr1h+status,2+status,0]
  4060                           ;calculate_checksum@data stored from wreg
  4061  05CF  0020               	movlb	0	; select bank0
  4062  05D0  00A4               	movwf	calculate_checksum@data
  4063                           
  4064                           ;comm.c: 409: unsigned char check, i;
  4065                           ;comm.c: 411: check = 0;
  4066  05D1  01A3               	clrf	calculate_checksum@check
  4067                           
  4068                           ;comm.c: 412: for (i = 0; i < num; i++) {
  4069  05D2  01A5               	clrf	calculate_checksum@i
  4070  05D3                     l2544:	
  4071  05D3  0820               	movf	calculate_checksum@num,w
  4072  05D4  0225               	subwf	calculate_checksum@i,w
  4073  05D5  1803               	btfsc	3,0
  4074  05D6  2DE6               	goto	l2546
  4075                           
  4076                           ;comm.c: 413: check ^= data[i];
  4077  05D7  0825               	movf	calculate_checksum@i,w
  4078  05D8  0724               	addwf	calculate_checksum@data,w
  4079  05D9  00A1               	movwf	??_calculate_checksum
  4080  05DA  0821               	movf	??_calculate_checksum,w
  4081  05DB  0086               	movwf	6
  4082  05DC  0187               	clrf	7
  4083  05DD  0801               	movf	1,w
  4084  05DE  00A2               	movwf	??_calculate_checksum+1
  4085  05DF  0822               	movf	??_calculate_checksum+1,w
  4086  05E0  06A3               	xorwf	calculate_checksum@check,f
  4087  05E1  3001               	movlw	1
  4088  05E2  00A1               	movwf	??_calculate_checksum
  4089  05E3  0821               	movf	??_calculate_checksum,w
  4090  05E4  07A5               	addwf	calculate_checksum@i,f
  4091  05E5  2DD3               	goto	l2544
  4092  05E6                     l2546:	
  4093                           
  4094                           ;comm.c: 414: }
  4095                           ;comm.c: 416: return check;
  4096  05E6  0823               	movf	calculate_checksum@check,w
  4097  05E7  0008               	return
  4098  05E8                     __end_of_calculate_checksum:	
  4099                           
  4100                           	psect	text16
  4101  0566                     __ptext16:	
  4102 ;; *************** function _ADC_5 *****************
  4103 ;; Defined at:
  4104 ;;		line 48 in file "ADC1823.c"
  4105 ;; Parameters:    Size  Location     Type
  4106 ;;		None
  4107 ;; Auto vars:     Size  Location     Type
  4108 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  4109 ;; Return value:  Size  Location     Type
  4110 ;;                  2    0[BANK0 ] unsigned short 
  4111 ;; Registers used:
  4112 ;;		wreg
  4113 ;; Tracked objects:
  4114 ;;		On entry : 0/0
  4115 ;;		On exit  : 0/0
  4116 ;;		Unchanged: 0/0
  4117 ;; Data sizes:     COMMON   BANK0   BANK1
  4118 ;;      Params:         0       2       0
  4119 ;;      Locals:         0       2       0
  4120 ;;      Temps:          0       2       0
  4121 ;;      Totals:         0       6       0
  4122 ;;Total ram usage:        6 bytes
  4123 ;; Hardware stack levels used:    1
  4124 ;; Hardware stack levels required when called:    2
  4125 ;; This function calls:
  4126 ;;		Nothing
  4127 ;; This function is called by:
  4128 ;;		_read_ADC_channels
  4129 ;;		_measure_Impedance_SE
  4130 ;;		_measure
  4131 ;; This function uses a non-reentrant model
  4132 ;;
  4133                           
  4134                           
  4135                           ;psect for function _ADC_5
  4136  0566                     _ADC_5:	
  4137                           
  4138                           ;ADC1823.c: 50: unsigned short ADC_value;
  4139                           ;ADC1823.c: 52: { ADCON0 = 0b00010101;};
  4140                           
  4141                           ;incstack = 0
  4142                           ; Regs used in _ADC_5: [wreg]
  4143  0566  3015               	movlw	21
  4144  0567  0021               	movlb	1	; select bank1
  4145  0568  009D               	movwf	29	;volatile
  4146                           
  4147                           ;ADC1823.c: 53: __nop();
  4148  0569  0000               	nop
  4149                           
  4150                           ;ADC1823.c: 54: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  4151  056A  0021               	movlb	1	; select bank1
  4152  056B  149D               	bsf	29,1	;volatile
  4153  056C                     l451:	
  4154  056C  189D               	btfsc	29,1	;volatile
  4155  056D  2D6C               	goto	l451
  4156  056E  081C               	movf	28,w	;volatile
  4157  056F  0020               	movlb	0	; select bank0
  4158  0570  00A2               	movwf	??_ADC_5
  4159  0571  01A3               	clrf	??_ADC_5+1
  4160  0572  0822               	movf	??_ADC_5,w
  4161  0573  00A4               	movwf	ADC_5@ADC_value
  4162  0574  0823               	movf	??_ADC_5+1,w
  4163  0575  00A5               	movwf	ADC_5@ADC_value+1
  4164  0576  3008               	movlw	8
  4165  0577                     u1165:	
  4166  0577  35A4               	lslf	ADC_5@ADC_value,f
  4167  0578  0DA5               	rlf	ADC_5@ADC_value+1,f
  4168  0579  0B89               	decfsz	9,f
  4169  057A  2D77               	goto	u1165
  4170  057B  0021               	movlb	1	; select bank1
  4171  057C  081B               	movf	27,w	;volatile
  4172  057D  0020               	movlb	0	; select bank0
  4173  057E  00A2               	movwf	??_ADC_5
  4174  057F  01A3               	clrf	??_ADC_5+1
  4175  0580  0822               	movf	??_ADC_5,w
  4176  0581  04A4               	iorwf	ADC_5@ADC_value,f
  4177  0582  0823               	movf	??_ADC_5+1,w
  4178  0583  04A5               	iorwf	ADC_5@ADC_value+1,f
  4179                           
  4180                           ;ADC1823.c: 55: return ADC_value;
  4181  0584  0825               	movf	ADC_5@ADC_value+1,w
  4182  0585  00A1               	movwf	?_ADC_5+1
  4183  0586  0824               	movf	ADC_5@ADC_value,w
  4184  0587  00A0               	movwf	?_ADC_5
  4185  0588  0008               	return
  4186  0589                     __end_of_ADC_5:	
  4187                           
  4188                           	psect	text17
  4189  01BF                     __ptext17:	
  4190 ;; *************** function _measure_Impedance *****************
  4191 ;; Defined at:
  4192 ;;		line 115 in file "comm.c"
  4193 ;; Parameters:    Size  Location     Type
  4194 ;;		None
  4195 ;; Auto vars:     Size  Location     Type
  4196 ;;  aux            13    7[BANK0 ] unsigned char [13]
  4197 ;;  asic            2   24[BANK0 ] struct .
  4198 ;;  value2          2   22[BANK0 ] unsigned short 
  4199 ;;  value1          2   20[BANK0 ] unsigned short 
  4200 ;;  value3          2    0        unsigned short 
  4201 ;; Return value:  Size  Location     Type
  4202 ;;                  1    wreg      void 
  4203 ;; Registers used:
  4204 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4205 ;; Tracked objects:
  4206 ;;		On entry : 0/0
  4207 ;;		On exit  : 0/0
  4208 ;;		Unchanged: 0/0
  4209 ;; Data sizes:     COMMON   BANK0   BANK1
  4210 ;;      Params:         0       0       0
  4211 ;;      Locals:         0      19       0
  4212 ;;      Temps:          0       1       0
  4213 ;;      Totals:         0      20       0
  4214 ;;Total ram usage:       20 bytes
  4215 ;; Hardware stack levels used:    1
  4216 ;; Hardware stack levels required when called:    4
  4217 ;; This function calls:
  4218 ;;		_ADC_2
  4219 ;;		_ADC_4
  4220 ;;		_config
  4221 ;;		_lputs_ISR
  4222 ;; This function is called by:
  4223 ;;		_mess_handler
  4224 ;; This function uses a non-reentrant model
  4225 ;;
  4226                           
  4227                           
  4228                           ;psect for function _measure_Impedance
  4229  01BF                     _measure_Impedance:	
  4230                           
  4231                           ;comm.c: 117: unsigned char aux[13];
  4232                           ;comm.c: 118: unsigned short value1,value2,value3;
  4233                           ;comm.c: 121: BIO3 asic;
  4234                           ;comm.c: 127: aux[0] = 'z';
  4235                           
  4236                           ;incstack = 0
  4237                           ; Regs used in _measure_Impedance: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4238  01BF  307A               	movlw	122
  4239  01C0  0020               	movlb	0	; select bank0
  4240  01C1  00A6               	movwf	??_measure_Impedance
  4241  01C2  0826               	movf	??_measure_Impedance,w
  4242  01C3  00A7               	movwf	measure_Impedance@aux
  4243                           
  4244                           ;comm.c: 131: asic.data[0] = (unsigned short)(mess_rec[1]);
  4245  01C4  085D               	movf	_mess_rec+1,w	;volatile
  4246  01C5  00A6               	movwf	??_measure_Impedance
  4247  01C6  0826               	movf	??_measure_Impedance,w
  4248  01C7  00B8               	movwf	measure_Impedance@asic
  4249                           
  4250                           ;comm.c: 132: asic.data[1] = (unsigned short)(mess_rec[2]);
  4251  01C8  085E               	movf	_mess_rec+2,w	;volatile
  4252  01C9  00A6               	movwf	??_measure_Impedance
  4253  01CA  0826               	movf	??_measure_Impedance,w
  4254  01CB  00B9               	movwf	measure_Impedance@asic+1
  4255                           
  4256                           ;comm.c: 135: asic.data_bits.CE = 0;
  4257  01CC  1338               	bcf	measure_Impedance@asic,6
  4258                           
  4259                           ;comm.c: 136: config(asic);
  4260  01CD  0839               	movf	measure_Impedance@asic+1,w
  4261  01CE  00A1               	movwf	config@conf+1
  4262  01CF  0838               	movf	measure_Impedance@asic,w
  4263  01D0  00A0               	movwf	config@conf
  4264  01D1  24E3               	fcall	_config
  4265                           
  4266                           ;comm.c: 149: _delay((unsigned long)((20)*(500000/4000.0)));
  4267  01D2  3004               	movlw	4
  4268  01D3  0020               	movlb	0	; select bank0
  4269  01D4  00A6               	movwf	??_measure_Impedance
  4270  01D5  303D               	movlw	61
  4271  01D6                     u1657:	
  4272  01D6  0B89               	decfsz	9,f
  4273  01D7  29D6               	goto	u1657
  4274  01D8  0BA6               	decfsz	??_measure_Impedance,f
  4275  01D9  29D6               	goto	u1657
  4276  01DA  3200               	nop2
  4277                           
  4278                           ;comm.c: 151: value1 = ADC_2();
  4279  01DB  25AC               	fcall	_ADC_2
  4280  01DC  0020               	movlb	0	; select bank0
  4281  01DD  0821               	movf	?_ADC_2+1,w
  4282  01DE  00B5               	movwf	measure_Impedance@value1+1
  4283  01DF  0820               	movf	?_ADC_2,w
  4284  01E0  00B4               	movwf	measure_Impedance@value1
  4285                           
  4286                           ;comm.c: 152: value2 = ADC_4();
  4287  01E1  2589               	fcall	_ADC_4
  4288  01E2  0020               	movlb	0	; select bank0
  4289  01E3  0821               	movf	?_ADC_4+1,w
  4290  01E4  00B7               	movwf	measure_Impedance@value2+1
  4291  01E5  0820               	movf	?_ADC_4,w
  4292  01E6  00B6               	movwf	measure_Impedance@value2
  4293                           
  4294                           ;comm.c: 154: aux[1] = (unsigned char)(value1 & 0xff);
  4295  01E7  0834               	movf	measure_Impedance@value1,w
  4296  01E8  00A6               	movwf	??_measure_Impedance
  4297  01E9  0826               	movf	??_measure_Impedance,w
  4298  01EA  00A8               	movwf	measure_Impedance@aux+1
  4299                           
  4300                           ;comm.c: 155: aux[2] = (unsigned char)((value1 >> 8) & 0xff);
  4301  01EB  0835               	movf	measure_Impedance@value1+1,w
  4302  01EC  00A6               	movwf	??_measure_Impedance
  4303  01ED  0826               	movf	??_measure_Impedance,w
  4304  01EE  00A9               	movwf	measure_Impedance@aux+2
  4305                           
  4306                           ;comm.c: 156: aux[3] = (unsigned char)(value2 & 0xff);
  4307  01EF  0836               	movf	measure_Impedance@value2,w
  4308  01F0  00A6               	movwf	??_measure_Impedance
  4309  01F1  0826               	movf	??_measure_Impedance,w
  4310  01F2  00AA               	movwf	measure_Impedance@aux+3
  4311                           
  4312                           ;comm.c: 157: aux[4] = (unsigned char)((value2 >> 8) & 0xff);
  4313  01F3  0837               	movf	measure_Impedance@value2+1,w
  4314  01F4  00A6               	movwf	??_measure_Impedance
  4315  01F5  0826               	movf	??_measure_Impedance,w
  4316  01F6  00AB               	movwf	measure_Impedance@aux+4
  4317                           
  4318                           ;comm.c: 160: asic.data_bits.CE = 1;
  4319  01F7  1738               	bsf	measure_Impedance@asic,6
  4320                           
  4321                           ;comm.c: 161: asic.data_bits.IQ = 0;
  4322  01F8  11B9               	bcf	measure_Impedance@asic+1,3
  4323                           
  4324                           ;comm.c: 164: config(asic);
  4325  01F9  0839               	movf	measure_Impedance@asic+1,w
  4326  01FA  00A1               	movwf	config@conf+1
  4327  01FB  0838               	movf	measure_Impedance@asic,w
  4328  01FC  00A0               	movwf	config@conf
  4329  01FD  24E3               	fcall	_config
  4330                           
  4331                           ;comm.c: 168: _delay((unsigned long)((20)*(500000/4000.0)));
  4332  01FE  3004               	movlw	4
  4333  01FF  0020               	movlb	0	; select bank0
  4334  0200  00A6               	movwf	??_measure_Impedance
  4335  0201  303D               	movlw	61
  4336  0202                     u1667:	
  4337  0202  0B89               	decfsz	9,f
  4338  0203  2A02               	goto	u1667
  4339  0204  0BA6               	decfsz	??_measure_Impedance,f
  4340  0205  2A02               	goto	u1667
  4341  0206  3200               	nop2
  4342                           
  4343                           ;comm.c: 170: value1 = ADC_2();
  4344  0207  25AC               	fcall	_ADC_2
  4345  0208  0020               	movlb	0	; select bank0
  4346  0209  0821               	movf	?_ADC_2+1,w
  4347  020A  00B5               	movwf	measure_Impedance@value1+1
  4348  020B  0820               	movf	?_ADC_2,w
  4349  020C  00B4               	movwf	measure_Impedance@value1
  4350                           
  4351                           ;comm.c: 171: value2 = ADC_4();
  4352  020D  2589               	fcall	_ADC_4
  4353  020E  0020               	movlb	0	; select bank0
  4354  020F  0821               	movf	?_ADC_4+1,w
  4355  0210  00B7               	movwf	measure_Impedance@value2+1
  4356  0211  0820               	movf	?_ADC_4,w
  4357  0212  00B6               	movwf	measure_Impedance@value2
  4358                           
  4359                           ;comm.c: 173: aux[5] = (unsigned char)(value1 & 0xff);
  4360  0213  0834               	movf	measure_Impedance@value1,w
  4361  0214  00A6               	movwf	??_measure_Impedance
  4362  0215  0826               	movf	??_measure_Impedance,w
  4363  0216  00AC               	movwf	measure_Impedance@aux+5
  4364                           
  4365                           ;comm.c: 174: aux[6] = (unsigned char)((value1 >> 8) & 0xff);
  4366  0217  0835               	movf	measure_Impedance@value1+1,w
  4367  0218  00A6               	movwf	??_measure_Impedance
  4368  0219  0826               	movf	??_measure_Impedance,w
  4369  021A  00AD               	movwf	measure_Impedance@aux+6
  4370                           
  4371                           ;comm.c: 175: aux[7] = (unsigned char)(value2 & 0xff);
  4372  021B  0836               	movf	measure_Impedance@value2,w
  4373  021C  00A6               	movwf	??_measure_Impedance
  4374  021D  0826               	movf	??_measure_Impedance,w
  4375  021E  00AE               	movwf	measure_Impedance@aux+7
  4376                           
  4377                           ;comm.c: 176: aux[8] = (unsigned char)((value2 >> 8) & 0xff);
  4378  021F  0837               	movf	measure_Impedance@value2+1,w
  4379  0220  00A6               	movwf	??_measure_Impedance
  4380  0221  0826               	movf	??_measure_Impedance,w
  4381  0222  00AF               	movwf	measure_Impedance@aux+8
  4382                           
  4383                           ;comm.c: 179: asic.data_bits.IQ = 1;
  4384  0223  15B9               	bsf	measure_Impedance@asic+1,3
  4385                           
  4386                           ;comm.c: 182: config(asic);
  4387  0224  0839               	movf	measure_Impedance@asic+1,w
  4388  0225  00A1               	movwf	config@conf+1
  4389  0226  0838               	movf	measure_Impedance@asic,w
  4390  0227  00A0               	movwf	config@conf
  4391  0228  24E3               	fcall	_config
  4392                           
  4393                           ;comm.c: 186: _delay((unsigned long)((20)*(500000/4000.0)));
  4394  0229  3004               	movlw	4
  4395  022A  0020               	movlb	0	; select bank0
  4396  022B  00A6               	movwf	??_measure_Impedance
  4397  022C  303D               	movlw	61
  4398  022D                     u1677:	
  4399  022D  0B89               	decfsz	9,f
  4400  022E  2A2D               	goto	u1677
  4401  022F  0BA6               	decfsz	??_measure_Impedance,f
  4402  0230  2A2D               	goto	u1677
  4403  0231  3200               	nop2
  4404                           
  4405                           ;comm.c: 188: value1 = ADC_2();
  4406  0232  25AC               	fcall	_ADC_2
  4407  0233  0020               	movlb	0	; select bank0
  4408  0234  0821               	movf	?_ADC_2+1,w
  4409  0235  00B5               	movwf	measure_Impedance@value1+1
  4410  0236  0820               	movf	?_ADC_2,w
  4411  0237  00B4               	movwf	measure_Impedance@value1
  4412                           
  4413                           ;comm.c: 189: value2 = ADC_4();
  4414  0238  2589               	fcall	_ADC_4
  4415  0239  0020               	movlb	0	; select bank0
  4416  023A  0821               	movf	?_ADC_4+1,w
  4417  023B  00B7               	movwf	measure_Impedance@value2+1
  4418  023C  0820               	movf	?_ADC_4,w
  4419  023D  00B6               	movwf	measure_Impedance@value2
  4420                           
  4421                           ;comm.c: 191: aux[9] = (unsigned char)(value1 & 0xff);
  4422  023E  0834               	movf	measure_Impedance@value1,w
  4423  023F  00A6               	movwf	??_measure_Impedance
  4424  0240  0826               	movf	??_measure_Impedance,w
  4425  0241  00B0               	movwf	measure_Impedance@aux+9
  4426                           
  4427                           ;comm.c: 192: aux[10] = (unsigned char)((value1 >> 8) & 0xff);
  4428  0242  0835               	movf	measure_Impedance@value1+1,w
  4429  0243  00A6               	movwf	??_measure_Impedance
  4430  0244  0826               	movf	??_measure_Impedance,w
  4431  0245  00B1               	movwf	measure_Impedance@aux+10
  4432                           
  4433                           ;comm.c: 193: aux[11] = (unsigned char)(value2 & 0xff);
  4434  0246  0836               	movf	measure_Impedance@value2,w
  4435  0247  00A6               	movwf	??_measure_Impedance
  4436  0248  0826               	movf	??_measure_Impedance,w
  4437  0249  00B2               	movwf	measure_Impedance@aux+11
  4438                           
  4439                           ;comm.c: 194: aux[12] = (unsigned char)((value2 >> 8) & 0xff);
  4440  024A  0837               	movf	measure_Impedance@value2+1,w
  4441  024B  00A6               	movwf	??_measure_Impedance
  4442  024C  0826               	movf	??_measure_Impedance,w
  4443  024D  00B3               	movwf	measure_Impedance@aux+12
  4444                           
  4445                           ;comm.c: 197: lputs_ISR(aux,13);
  4446  024E  300D               	movlw	13
  4447  024F  00A6               	movwf	??_measure_Impedance
  4448  0250  0826               	movf	??_measure_Impedance,w
  4449  0251  00A0               	movwf	lputs_ISR@length
  4450  0252  3027               	movlw	(low (measure_Impedance@aux| 0))& (0+255)
  4451  0253  2512               	fcall	_lputs_ISR
  4452  0254  0008               	return
  4453  0255                     __end_of_measure_Impedance:	
  4454                           
  4455                           	psect	text18
  4456  0589                     __ptext18:	
  4457 ;; *************** function _ADC_4 *****************
  4458 ;; Defined at:
  4459 ;;		line 38 in file "ADC1823.c"
  4460 ;; Parameters:    Size  Location     Type
  4461 ;;		None
  4462 ;; Auto vars:     Size  Location     Type
  4463 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  4464 ;; Return value:  Size  Location     Type
  4465 ;;                  2    0[BANK0 ] unsigned short 
  4466 ;; Registers used:
  4467 ;;		wreg
  4468 ;; Tracked objects:
  4469 ;;		On entry : 0/0
  4470 ;;		On exit  : 0/0
  4471 ;;		Unchanged: 0/0
  4472 ;; Data sizes:     COMMON   BANK0   BANK1
  4473 ;;      Params:         0       2       0
  4474 ;;      Locals:         0       2       0
  4475 ;;      Temps:          0       2       0
  4476 ;;      Totals:         0       6       0
  4477 ;;Total ram usage:        6 bytes
  4478 ;; Hardware stack levels used:    1
  4479 ;; Hardware stack levels required when called:    2
  4480 ;; This function calls:
  4481 ;;		Nothing
  4482 ;; This function is called by:
  4483 ;;		_read_ADC_channels
  4484 ;;		_measure_Impedance
  4485 ;;		_measure_Impedance_no_offset
  4486 ;;		_measure_Offset
  4487 ;; This function uses a non-reentrant model
  4488 ;;
  4489                           
  4490                           
  4491                           ;psect for function _ADC_4
  4492  0589                     _ADC_4:	
  4493                           
  4494                           ;ADC1823.c: 40: unsigned short ADC_value;
  4495                           ;ADC1823.c: 42: { ADCON0 = 0b00010001;};
  4496                           
  4497                           ;incstack = 0
  4498                           ; Regs used in _ADC_4: [wreg]
  4499  0589  3011               	movlw	17
  4500  058A  0021               	movlb	1	; select bank1
  4501  058B  009D               	movwf	29	;volatile
  4502                           
  4503                           ;ADC1823.c: 43: __nop();
  4504  058C  0000               	nop
  4505                           
  4506                           ;ADC1823.c: 44: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  4507  058D  0021               	movlb	1	; select bank1
  4508  058E  149D               	bsf	29,1	;volatile
  4509  058F                     l445:	
  4510  058F  189D               	btfsc	29,1	;volatile
  4511  0590  2D8F               	goto	l445
  4512  0591  081C               	movf	28,w	;volatile
  4513  0592  0020               	movlb	0	; select bank0
  4514  0593  00A2               	movwf	??_ADC_4
  4515  0594  01A3               	clrf	??_ADC_4+1
  4516  0595  0822               	movf	??_ADC_4,w
  4517  0596  00A4               	movwf	ADC_4@ADC_value
  4518  0597  0823               	movf	??_ADC_4+1,w
  4519  0598  00A5               	movwf	ADC_4@ADC_value+1
  4520  0599  3008               	movlw	8
  4521  059A                     u1335:	
  4522  059A  35A4               	lslf	ADC_4@ADC_value,f
  4523  059B  0DA5               	rlf	ADC_4@ADC_value+1,f
  4524  059C  0B89               	decfsz	9,f
  4525  059D  2D9A               	goto	u1335
  4526  059E  0021               	movlb	1	; select bank1
  4527  059F  081B               	movf	27,w	;volatile
  4528  05A0  0020               	movlb	0	; select bank0
  4529  05A1  00A2               	movwf	??_ADC_4
  4530  05A2  01A3               	clrf	??_ADC_4+1
  4531  05A3  0822               	movf	??_ADC_4,w
  4532  05A4  04A4               	iorwf	ADC_4@ADC_value,f
  4533  05A5  0823               	movf	??_ADC_4+1,w
  4534  05A6  04A5               	iorwf	ADC_4@ADC_value+1,f
  4535                           
  4536                           ;ADC1823.c: 45: return ADC_value;
  4537  05A7  0825               	movf	ADC_4@ADC_value+1,w
  4538  05A8  00A1               	movwf	?_ADC_4+1
  4539  05A9  0824               	movf	ADC_4@ADC_value,w
  4540  05AA  00A0               	movwf	?_ADC_4
  4541  05AB  0008               	return
  4542  05AC                     __end_of_ADC_4:	
  4543                           
  4544                           	psect	text19
  4545  05AC                     __ptext19:	
  4546 ;; *************** function _ADC_2 *****************
  4547 ;; Defined at:
  4548 ;;		line 25 in file "ADC1823.c"
  4549 ;; Parameters:    Size  Location     Type
  4550 ;;		None
  4551 ;; Auto vars:     Size  Location     Type
  4552 ;;  ADC_value       2    4[BANK0 ] unsigned short 
  4553 ;; Return value:  Size  Location     Type
  4554 ;;                  2    0[BANK0 ] unsigned short 
  4555 ;; Registers used:
  4556 ;;		wreg
  4557 ;; Tracked objects:
  4558 ;;		On entry : 0/0
  4559 ;;		On exit  : 0/0
  4560 ;;		Unchanged: 0/0
  4561 ;; Data sizes:     COMMON   BANK0   BANK1
  4562 ;;      Params:         0       2       0
  4563 ;;      Locals:         0       2       0
  4564 ;;      Temps:          0       2       0
  4565 ;;      Totals:         0       6       0
  4566 ;;Total ram usage:        6 bytes
  4567 ;; Hardware stack levels used:    1
  4568 ;; Hardware stack levels required when called:    2
  4569 ;; This function calls:
  4570 ;;		Nothing
  4571 ;; This function is called by:
  4572 ;;		_read_ADC_channels
  4573 ;;		_measure_Impedance
  4574 ;;		_measure_Impedance_no_offset
  4575 ;;		_measure_Offset
  4576 ;; This function uses a non-reentrant model
  4577 ;;
  4578                           
  4579                           
  4580                           ;psect for function _ADC_2
  4581  05AC                     _ADC_2:	
  4582                           
  4583                           ;ADC1823.c: 27: unsigned short ADC_value;
  4584                           ;ADC1823.c: 29: { ADCON0 = 0b00001001;};
  4585                           
  4586                           ;incstack = 0
  4587                           ; Regs used in _ADC_2: [wreg]
  4588  05AC  3009               	movlw	9
  4589  05AD  0021               	movlb	1	; select bank1
  4590  05AE  009D               	movwf	29	;volatile
  4591                           
  4592                           ;ADC1823.c: 30: __nop();
  4593  05AF  0000               	nop
  4594                           
  4595                           ;ADC1823.c: 34: { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_value
      +                           |= ADRESL;};
  4596  05B0  0021               	movlb	1	; select bank1
  4597  05B1  149D               	bsf	29,1	;volatile
  4598  05B2                     l439:	
  4599  05B2  189D               	btfsc	29,1	;volatile
  4600  05B3  2DB2               	goto	l439
  4601  05B4  081C               	movf	28,w	;volatile
  4602  05B5  0020               	movlb	0	; select bank0
  4603  05B6  00A2               	movwf	??_ADC_2
  4604  05B7  01A3               	clrf	??_ADC_2+1
  4605  05B8  0822               	movf	??_ADC_2,w
  4606  05B9  00A4               	movwf	ADC_2@ADC_value
  4607  05BA  0823               	movf	??_ADC_2+1,w
  4608  05BB  00A5               	movwf	ADC_2@ADC_value+1
  4609  05BC  3008               	movlw	8
  4610  05BD                     u1315:	
  4611  05BD  35A4               	lslf	ADC_2@ADC_value,f
  4612  05BE  0DA5               	rlf	ADC_2@ADC_value+1,f
  4613  05BF  0B89               	decfsz	9,f
  4614  05C0  2DBD               	goto	u1315
  4615  05C1  0021               	movlb	1	; select bank1
  4616  05C2  081B               	movf	27,w	;volatile
  4617  05C3  0020               	movlb	0	; select bank0
  4618  05C4  00A2               	movwf	??_ADC_2
  4619  05C5  01A3               	clrf	??_ADC_2+1
  4620  05C6  0822               	movf	??_ADC_2,w
  4621  05C7  04A4               	iorwf	ADC_2@ADC_value,f
  4622  05C8  0823               	movf	??_ADC_2+1,w
  4623  05C9  04A5               	iorwf	ADC_2@ADC_value+1,f
  4624                           
  4625                           ;ADC1823.c: 35: return ADC_value;
  4626  05CA  0825               	movf	ADC_2@ADC_value+1,w
  4627  05CB  00A1               	movwf	?_ADC_2+1
  4628  05CC  0824               	movf	ADC_2@ADC_value,w
  4629  05CD  00A0               	movwf	?_ADC_2
  4630  05CE  0008               	return
  4631  05CF                     __end_of_ADC_2:	
  4632                           
  4633                           	psect	text20
  4634  0601                     __ptext20:	
  4635 ;; *************** function _config_ASIC *****************
  4636 ;; Defined at:
  4637 ;;		line 61 in file "comm.c"
  4638 ;; Parameters:    Size  Location     Type
  4639 ;;		None
  4640 ;; Auto vars:     Size  Location     Type
  4641 ;;  asic            2    6[BANK0 ] struct .
  4642 ;; Return value:  Size  Location     Type
  4643 ;;                  1    wreg      void 
  4644 ;; Registers used:
  4645 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4646 ;; Tracked objects:
  4647 ;;		On entry : 0/0
  4648 ;;		On exit  : 0/0
  4649 ;;		Unchanged: 0/0
  4650 ;; Data sizes:     COMMON   BANK0   BANK1
  4651 ;;      Params:         0       0       0
  4652 ;;      Locals:         0       2       0
  4653 ;;      Temps:          0       1       0
  4654 ;;      Totals:         0       3       0
  4655 ;;Total ram usage:        3 bytes
  4656 ;; Hardware stack levels used:    1
  4657 ;; Hardware stack levels required when called:    4
  4658 ;; This function calls:
  4659 ;;		_config
  4660 ;;		_lputs_ISR
  4661 ;; This function is called by:
  4662 ;;		_mess_handler
  4663 ;; This function uses a non-reentrant model
  4664 ;;
  4665                           
  4666                           
  4667                           ;psect for function _config_ASIC
  4668  0601                     _config_ASIC:	
  4669                           
  4670                           ;comm.c: 64: BIO3 asic;
  4671                           ;comm.c: 70: asic.data[0] = mess_rec[1];
  4672                           
  4673                           ;incstack = 0
  4674                           ; Regs used in _config_ASIC: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4675  0601  0020               	movlb	0	; select bank0
  4676  0602  085D               	movf	_mess_rec+1,w	;volatile
  4677  0603  00A5               	movwf	??_config_ASIC
  4678  0604  0825               	movf	??_config_ASIC,w
  4679  0605  00A6               	movwf	config_ASIC@asic
  4680                           
  4681                           ;comm.c: 71: asic.data[1] = mess_rec[2];
  4682  0606  085E               	movf	_mess_rec+2,w	;volatile
  4683  0607  00A5               	movwf	??_config_ASIC
  4684  0608  0825               	movf	??_config_ASIC,w
  4685  0609  00A7               	movwf	config_ASIC@asic+1
  4686                           
  4687                           ;comm.c: 73: lputs_ISR(mess_rec,mess_rec_size);
  4688  060A  085B               	movf	_mess_rec_size,w	;volatile
  4689  060B  00A5               	movwf	??_config_ASIC
  4690  060C  0825               	movf	??_config_ASIC,w
  4691  060D  00A0               	movwf	lputs_ISR@length
  4692  060E  305C               	movlw	(low (_mess_rec| 0))& (0+255)
  4693  060F  2512               	fcall	_lputs_ISR
  4694                           
  4695                           ;comm.c: 75: config(asic);
  4696  0610  0020               	movlb	0	; select bank0
  4697  0611  0827               	movf	config_ASIC@asic+1,w
  4698  0612  00A1               	movwf	config@conf+1
  4699  0613  0826               	movf	config_ASIC@asic,w
  4700  0614  00A0               	movwf	config@conf
  4701  0615  24E3               	fcall	_config
  4702  0616  0008               	return
  4703  0617                     __end_of_config_ASIC:	
  4704                           
  4705                           	psect	text21
  4706  04E3                     __ptext21:	
  4707 ;; *************** function _config *****************
  4708 ;; Defined at:
  4709 ;;		line 131 in file "bio3.c"
  4710 ;; Parameters:    Size  Location     Type
  4711 ;;  conf            2    0[BANK0 ] struct .
  4712 ;; Auto vars:     Size  Location     Type
  4713 ;;  out             1    4[BANK0 ] unsigned char 
  4714 ;;  i               1    3[BANK0 ] unsigned char 
  4715 ;; Return value:  Size  Location     Type
  4716 ;;                  1    wreg      void 
  4717 ;; Registers used:
  4718 ;;		wreg, status,2, status,0
  4719 ;; Tracked objects:
  4720 ;;		On entry : 0/0
  4721 ;;		On exit  : 0/0
  4722 ;;		Unchanged: 0/0
  4723 ;; Data sizes:     COMMON   BANK0   BANK1
  4724 ;;      Params:         0       2       0
  4725 ;;      Locals:         0       2       0
  4726 ;;      Temps:          0       1       0
  4727 ;;      Totals:         0       5       0
  4728 ;;Total ram usage:        5 bytes
  4729 ;; Hardware stack levels used:    1
  4730 ;; Hardware stack levels required when called:    2
  4731 ;; This function calls:
  4732 ;;		Nothing
  4733 ;; This function is called by:
  4734 ;;		_config_ASIC
  4735 ;;		_measure_Impedance
  4736 ;;		_measure_Impedance_no_offset
  4737 ;;		_measure_Offset
  4738 ;;		_measure_Impedance_SE
  4739 ;;		_measure
  4740 ;; This function uses a non-reentrant model
  4741 ;;
  4742                           
  4743                           
  4744                           ;psect for function _config
  4745  04E3                     _config:	
  4746                           
  4747                           ;bio3.c: 133: unsigned char i, out;
  4748                           ;bio3.c: 135: out &= 0b11110111; PORTC = out;;
  4749                           
  4750                           ;incstack = 0
  4751                           ; Regs used in _config: [wreg+status,2+status,0]
  4752  04E3  30F7               	movlw	247
  4753  04E4  0020               	movlb	0	; select bank0
  4754  04E5  00A2               	movwf	??_config
  4755  04E6  0822               	movf	??_config,w
  4756  04E7  05A4               	andwf	config@out,f
  4757  04E8  0824               	movf	config@out,w
  4758  04E9  008E               	movwf	14	;volatile
  4759                           
  4760                           ;bio3.c: 138: RA5 = 0;;
  4761                           
  4762                           ;bio3.c: 136: _delay((unsigned long)((5)*(500000/4000000.0)));
  4763  04EA  0020               	movlb	0	; select bank0
  4764  04EB  128C               	bcf	12,5	;volatile
  4765                           
  4766                           ;bio3.c: 141: RA5 = 1;;
  4767                           
  4768                           ;bio3.c: 139: _delay((unsigned long)((5)*(500000/4000000.0)));
  4769  04EC  0020               	movlb	0	; select bank0
  4770  04ED  168C               	bsf	12,5	;volatile
  4771                           
  4772                           ;bio3.c: 143: for(i = 0; i < 16; i++) {
  4773  04EE  01A3               	clrf	config@i
  4774  04EF                     L3:	
  4775  04EF  3010               	movlw	16
  4776  04F0  0223               	subwf	config@i,w
  4777  04F1  1803               	btfsc	3,0
  4778  04F2  0008               	return
  4779                           
  4780                           ;bio3.c: 144: if (conf.datashort & 0x0001) {
  4781  04F3  1C20               	btfss	config@conf,0
  4782  04F4  2CF7               	goto	l2438
  4783                           
  4784                           ;bio3.c: 145: out |= 0b00000100; PORTC = out;;
  4785  04F5  1524               	bsf	config@out,2
  4786  04F6  2CFB               	goto	l2440
  4787  04F7                     l2438:	
  4788                           ;bio3.c: 146: } else {
  4789                           
  4790                           
  4791                           ;bio3.c: 147: out &= 0b11111011; PORTC = out;;
  4792  04F7  30FB               	movlw	251
  4793  04F8  00A2               	movwf	??_config
  4794  04F9  0822               	movf	??_config,w
  4795  04FA  05A4               	andwf	config@out,f
  4796  04FB                     l2440:	
  4797  04FB  0824               	movf	config@out,w
  4798  04FC  008E               	movwf	14	;volatile
  4799                           
  4800                           ;bio3.c: 148: }
  4801                           ;bio3.c: 149: conf.datashort >>= 1;
  4802  04FD  3001               	movlw	1
  4803  04FE                     u1135:	
  4804  04FE  36A1               	lsrf	config@conf+1,f
  4805  04FF  0CA0               	rrf	config@conf,f
  4806  0500  0B89               	decfsz	9,f
  4807  0501  2CFE               	goto	u1135
  4808                           
  4809                           ;bio3.c: 153: out |= 0b00001000; PORTC = out;;
  4810                           
  4811                           ;bio3.c: 151: _delay((unsigned long)((5)*(500000/4000000.0)));
  4812  0502  0020               	movlb	0	; select bank0
  4813  0503  15A4               	bsf	config@out,3
  4814  0504  0824               	movf	config@out,w
  4815  0505  008E               	movwf	14	;volatile
  4816                           
  4817                           ;bio3.c: 155: out &= 0b11110111; PORTC = out;;
  4818                           
  4819                           ;bio3.c: 154: _delay((unsigned long)((5)*(500000/4000000.0)));
  4820  0506  30F7               	movlw	247
  4821  0507  0020               	movlb	0	; select bank0
  4822  0508  00A2               	movwf	??_config
  4823  0509  0822               	movf	??_config,w
  4824  050A  05A4               	andwf	config@out,f
  4825  050B  0824               	movf	config@out,w
  4826  050C  008E               	movwf	14	;volatile
  4827  050D  3001               	movlw	1
  4828  050E  00A2               	movwf	??_config
  4829  050F  0822               	movf	??_config,w
  4830  0510  07A3               	addwf	config@i,f
  4831  0511  2CEF               	goto	L3
  4832  0512                     __end_of_config:	
  4833                           
  4834                           	psect	text22
  4835  04B3                     __ptext22:	
  4836 ;; *************** function _calibrate_reader *****************
  4837 ;; Defined at:
  4838 ;;		line 419 in file "comm.c"
  4839 ;; Parameters:    Size  Location     Type
  4840 ;;		None
  4841 ;; Auto vars:     Size  Location     Type
  4842 ;;  aux             8    6[BANK0 ] unsigned char [8]
  4843 ;; Return value:  Size  Location     Type
  4844 ;;                  1    wreg      void 
  4845 ;; Registers used:
  4846 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4847 ;; Tracked objects:
  4848 ;;		On entry : 0/0
  4849 ;;		On exit  : 0/0
  4850 ;;		Unchanged: 0/0
  4851 ;; Data sizes:     COMMON   BANK0   BANK1
  4852 ;;      Params:         0       0       0
  4853 ;;      Locals:         0       8       0
  4854 ;;      Temps:          0       1       0
  4855 ;;      Totals:         0       9       0
  4856 ;;Total ram usage:        9 bytes
  4857 ;; Hardware stack levels used:    1
  4858 ;; Hardware stack levels required when called:    4
  4859 ;; This function calls:
  4860 ;;		_lputs_ISR
  4861 ;; This function is called by:
  4862 ;;		_mess_handler
  4863 ;; This function uses a non-reentrant model
  4864 ;;
  4865                           
  4866                           
  4867                           ;psect for function _calibrate_reader
  4868  04B3                     _calibrate_reader:	
  4869                           
  4870                           ;comm.c: 421: unsigned char aux[8];
  4871                           ;comm.c: 423: aux[0] = 'h';
  4872                           
  4873                           ;incstack = 0
  4874                           ; Regs used in _calibrate_reader: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4875  04B3  3068               	movlw	104
  4876  04B4  0020               	movlb	0	; select bank0
  4877  04B5  00A5               	movwf	??_calibrate_reader
  4878  04B6  0825               	movf	??_calibrate_reader,w
  4879  04B7  00A6               	movwf	calibrate_reader@aux
  4880                           
  4881                           ;comm.c: 424: aux[1] = 'o';
  4882  04B8  306F               	movlw	111
  4883  04B9  00A5               	movwf	??_calibrate_reader
  4884  04BA  0825               	movf	??_calibrate_reader,w
  4885  04BB  00A7               	movwf	calibrate_reader@aux+1
  4886                           
  4887                           ;comm.c: 425: aux[2] = 'l';
  4888  04BC  306C               	movlw	108
  4889  04BD  00A5               	movwf	??_calibrate_reader
  4890  04BE  0825               	movf	??_calibrate_reader,w
  4891  04BF  00A8               	movwf	calibrate_reader@aux+2
  4892                           
  4893                           ;comm.c: 426: aux[3] = 'a';
  4894  04C0  3061               	movlw	97
  4895  04C1  00A5               	movwf	??_calibrate_reader
  4896  04C2  0825               	movf	??_calibrate_reader,w
  4897  04C3  00A9               	movwf	calibrate_reader@aux+3
  4898                           
  4899                           ;comm.c: 427: aux[4] = 0x00;
  4900  04C4  01AA               	clrf	calibrate_reader@aux+4
  4901                           
  4902                           ;comm.c: 428: aux[5] = 0xaa;
  4903  04C5  30AA               	movlw	170
  4904  04C6  00A5               	movwf	??_calibrate_reader
  4905  04C7  0825               	movf	??_calibrate_reader,w
  4906  04C8  00AB               	movwf	calibrate_reader@aux+5
  4907                           
  4908                           ;comm.c: 429: aux[6] = 0xfe;
  4909  04C9  30FE               	movlw	254
  4910  04CA  00A5               	movwf	??_calibrate_reader
  4911  04CB  0825               	movf	??_calibrate_reader,w
  4912  04CC  00AC               	movwf	calibrate_reader@aux+6
  4913                           
  4914                           ;comm.c: 430: aux[7] = '@';
  4915  04CD  3040               	movlw	64
  4916  04CE  00A5               	movwf	??_calibrate_reader
  4917  04CF  0825               	movf	??_calibrate_reader,w
  4918  04D0  00AD               	movwf	calibrate_reader@aux+7
  4919  04D1                     l392:	
  4920                           ;comm.c: 432: while (1) {
  4921                           
  4922  04D1  0064               	clrwdt	;# 
  4923                           
  4924                           ;comm.c: 434: _delay((unsigned long)((250)*(500000/4000.0)));
  4925  04D2  3029               	movlw	41
  4926  04D3  0020               	movlb	0	; select bank0
  4927  04D4  00A5               	movwf	??_calibrate_reader
  4928  04D5  3094               	movlw	148
  4929  04D6                     u1687:	
  4930  04D6  0B89               	decfsz	9,f
  4931  04D7  2CD6               	goto	u1687
  4932  04D8  0BA5               	decfsz	??_calibrate_reader,f
  4933  04D9  2CD6               	goto	u1687
  4934  04DA  0000               	nop
  4935                           
  4936                           ;comm.c: 435: lputs_ISR(aux,8);
  4937  04DB  3008               	movlw	8
  4938  04DC  0020               	movlb	0	; select bank0
  4939  04DD  00A5               	movwf	??_calibrate_reader
  4940  04DE  0825               	movf	??_calibrate_reader,w
  4941  04DF  00A0               	movwf	lputs_ISR@length
  4942  04E0  3026               	movlw	(low (calibrate_reader@aux| 0))& (0+255)
  4943  04E1  2512               	fcall	_lputs_ISR
  4944  04E2  2CD1               	goto	l392
  4945  04E3                     __end_of_calibrate_reader:	
  4946                           
  4947                           	psect	text23
  4948  0512                     __ptext23:	
  4949 ;; *************** function _lputs_ISR *****************
  4950 ;; Defined at:
  4951 ;;		line 132 in file "USART1823.c"
  4952 ;; Parameters:    Size  Location     Type
  4953 ;;  data            1    wreg     PTR unsigned char 
  4954 ;;		 -> sweep@aux(7), calibrate_reader@aux(8), measure_Impedance_SE@aux(8), measure_Offset@aux(5), 
  4955 ;;		 -> measure_Impedance_no_offset@aux(13), measure_Impedance@aux(13), read_ADC_channels@aux(7), mess_rec(10), 
  4956 ;;  length          1    0[BANK0 ] unsigned char 
  4957 ;; Auto vars:     Size  Location     Type
  4958 ;;  data            1    4[BANK0 ] PTR unsigned char 
  4959 ;;		 -> sweep@aux(7), calibrate_reader@aux(8), measure_Impedance_SE@aux(8), measure_Offset@aux(5), 
  4960 ;;		 -> measure_Impedance_no_offset@aux(13), measure_Impedance@aux(13), read_ADC_channels@aux(7), mess_rec(10), 
  4961 ;;  i               1    3[BANK0 ] unsigned char 
  4962 ;; Return value:  Size  Location     Type
  4963 ;;                  1    wreg      void 
  4964 ;; Registers used:
  4965 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4966 ;; Tracked objects:
  4967 ;;		On entry : 0/0
  4968 ;;		On exit  : 0/0
  4969 ;;		Unchanged: 0/0
  4970 ;; Data sizes:     COMMON   BANK0   BANK1
  4971 ;;      Params:         0       1       0
  4972 ;;      Locals:         0       2       0
  4973 ;;      Temps:          0       2       0
  4974 ;;      Totals:         0       5       0
  4975 ;;Total ram usage:        5 bytes
  4976 ;; Hardware stack levels used:    1
  4977 ;; Hardware stack levels required when called:    3
  4978 ;; This function calls:
  4979 ;;		_close_RX_USART
  4980 ;; This function is called by:
  4981 ;;		_mess_handler
  4982 ;;		_config_ASIC
  4983 ;;		_read_ADC_channels
  4984 ;;		_measure_Impedance
  4985 ;;		_measure_Impedance_no_offset
  4986 ;;		_measure_Offset
  4987 ;;		_measure_Impedance_SE
  4988 ;;		_calibrate_reader
  4989 ;;		_sweep
  4990 ;; This function uses a non-reentrant model
  4991 ;;
  4992                           
  4993                           
  4994                           ;psect for function _lputs_ISR
  4995  0512                     _lputs_ISR:	
  4996                           
  4997                           ;incstack = 0
  4998                           ; Regs used in _lputs_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4999                           ;lputs_ISR@data stored from wreg
  5000  0512  0020               	movlb	0	; select bank0
  5001  0513  00A4               	movwf	lputs_ISR@data
  5002                           
  5003                           ;USART1823.c: 134: unsigned char i;
  5004                           ;USART1823.c: 136: if (USART_tx_flag == 1)
  5005  0514  0372               	decf	_USART_tx_flag,w	;volatile
  5006  0515  1903               	btfsc	3,2
  5007  0516  0008               	return
  5008                           
  5009                           ;USART1823.c: 139: for (i = 0; i < length; i++)
  5010                           
  5011                           ;USART1823.c: 137: return;
  5012  0517  01A3               	clrf	lputs_ISR@i
  5013  0518                     l2506:	
  5014  0518  0820               	movf	lputs_ISR@length,w
  5015  0519  0223               	subwf	lputs_ISR@i,w
  5016  051A  1803               	btfsc	3,0
  5017  051B  2D2F               	goto	l2508
  5018                           
  5019                           ;USART1823.c: 140: USART_tx_data[i] = data[i];
  5020  051C  0823               	movf	lputs_ISR@i,w
  5021  051D  0724               	addwf	lputs_ISR@data,w
  5022  051E  00A1               	movwf	??_lputs_ISR
  5023  051F  0821               	movf	??_lputs_ISR,w
  5024  0520  0086               	movwf	6
  5025  0521  0187               	clrf	7
  5026  0522  0801               	movf	1,w
  5027  0523  00A2               	movwf	??_lputs_ISR+1
  5028  0524  0823               	movf	lputs_ISR@i,w
  5029  0525  3EA0               	addlw	(low (_USART_tx_data| 0))& (0+255)
  5030  0526  0086               	movwf	6
  5031  0527  0187               	clrf	7
  5032  0528  0822               	movf	??_lputs_ISR+1,w
  5033  0529  0081               	movwf	1
  5034  052A  3001               	movlw	1
  5035  052B  00A1               	movwf	??_lputs_ISR
  5036  052C  0821               	movf	??_lputs_ISR,w
  5037  052D  07A3               	addwf	lputs_ISR@i,f
  5038  052E  2D18               	goto	l2506
  5039  052F                     l2508:	
  5040                           
  5041                           ;USART1823.c: 142: close_RX_USART();
  5042  052F  265F               	fcall	_close_RX_USART
  5043                           
  5044                           ;USART1823.c: 144: USART_tx_index = 0;
  5045  0530  01F3               	clrf	_USART_tx_index	;volatile
  5046                           
  5047                           ;USART1823.c: 145: USART_tx_length = length;
  5048  0531  0020               	movlb	0	; select bank0
  5049  0532  0820               	movf	lputs_ISR@length,w
  5050  0533  00A1               	movwf	??_lputs_ISR
  5051  0534  0821               	movf	??_lputs_ISR,w
  5052  0535  00F4               	movwf	_USART_tx_length	;volatile
  5053                           
  5054                           ;USART1823.c: 147: USART_tx_flag = 1;
  5055  0536  3001               	movlw	1
  5056  0537  00A1               	movwf	??_lputs_ISR
  5057  0538  0821               	movf	??_lputs_ISR,w
  5058  0539  00F2               	movwf	_USART_tx_flag	;volatile
  5059                           
  5060                           ;USART1823.c: 148: TXIE = 1;
  5061  053A  0021               	movlb	1	; select bank1
  5062  053B  1611               	bsf	17,4	;volatile
  5063  053C  0008               	return
  5064  053D                     __end_of_lputs_ISR:	
  5065                           
  5066                           	psect	text24
  5067  065F                     __ptext24:	
  5068 ;; *************** function _close_RX_USART *****************
  5069 ;; Defined at:
  5070 ;;		line 35 in file "USART1823.c"
  5071 ;; Parameters:    Size  Location     Type
  5072 ;;		None
  5073 ;; Auto vars:     Size  Location     Type
  5074 ;;		None
  5075 ;; Return value:  Size  Location     Type
  5076 ;;                  1    wreg      void 
  5077 ;; Registers used:
  5078 ;;		status,2
  5079 ;; Tracked objects:
  5080 ;;		On entry : 0/0
  5081 ;;		On exit  : 0/0
  5082 ;;		Unchanged: 0/0
  5083 ;; Data sizes:     COMMON   BANK0   BANK1
  5084 ;;      Params:         0       0       0
  5085 ;;      Locals:         0       0       0
  5086 ;;      Temps:          0       0       0
  5087 ;;      Totals:         0       0       0
  5088 ;;Total ram usage:        0 bytes
  5089 ;; Hardware stack levels used:    1
  5090 ;; Hardware stack levels required when called:    2
  5091 ;; This function calls:
  5092 ;;		Nothing
  5093 ;; This function is called by:
  5094 ;;		_lputs_ISR
  5095 ;; This function uses a non-reentrant model
  5096 ;;
  5097                           
  5098                           
  5099                           ;psect for function _close_RX_USART
  5100  065F                     _close_RX_USART:	
  5101                           
  5102                           ;USART1823.c: 39: RCIE = 0;
  5103                           
  5104                           ;incstack = 0
  5105                           ; Regs used in _close_RX_USART: [status,2]
  5106  065F  0021               	movlb	1	; select bank1
  5107  0660  1291               	bcf	17,5	;volatile
  5108                           
  5109                           ;USART1823.c: 40: CREN = 0;
  5110  0661  0023               	movlb	3	; select bank3
  5111  0662  121D               	bcf	29,4	;volatile
  5112                           
  5113                           ;USART1823.c: 41: USART_rx_index = 0;
  5114  0663  0020               	movlb	0	; select bank0
  5115  0664  01DA               	clrf	_USART_rx_index	;volatile
  5116  0665  0008               	return
  5117  0666                     __end_of_close_RX_USART:	
  5118                           
  5119                           	psect	text25
  5120  067C                     __ptext25:	
  5121 ;; *************** function _USARTX_change_pol *****************
  5122 ;; Defined at:
  5123 ;;		line 90 in file "mcc_generated_files/mcc.c"
  5124 ;; Parameters:    Size  Location     Type
  5125 ;;		None
  5126 ;; Auto vars:     Size  Location     Type
  5127 ;;		None
  5128 ;; Return value:  Size  Location     Type
  5129 ;;                  1    wreg      void 
  5130 ;; Registers used:
  5131 ;;		None
  5132 ;; Tracked objects:
  5133 ;;		On entry : 0/0
  5134 ;;		On exit  : 0/0
  5135 ;;		Unchanged: 0/0
  5136 ;; Data sizes:     COMMON   BANK0   BANK1
  5137 ;;      Params:         0       0       0
  5138 ;;      Locals:         0       0       0
  5139 ;;      Temps:          0       0       0
  5140 ;;      Totals:         0       0       0
  5141 ;;Total ram usage:        0 bytes
  5142 ;; Hardware stack levels used:    1
  5143 ;; Hardware stack levels required when called:    2
  5144 ;; This function calls:
  5145 ;;		Nothing
  5146 ;; This function is called by:
  5147 ;;		_main
  5148 ;; This function uses a non-reentrant model
  5149 ;;
  5150                           
  5151                           
  5152                           ;psect for function _USARTX_change_pol
  5153  067C                     _USARTX_change_pol:	
  5154                           
  5155                           ;mcc.c: 92: SCKP = 1;
  5156                           
  5157                           ;incstack = 0
  5158                           ; Regs used in _USARTX_change_pol: []
  5159  067C  0023               	movlb	3	; select bank3
  5160  067D  161F               	bsf	31,4	;volatile
  5161  067E  0008               	return
  5162  067F                     __end_of_USARTX_change_pol:	
  5163                           
  5164                           	psect	text26
  5165  067F                     __ptext26:	
  5166 ;; *************** function _SYSTEM_Initialize *****************
  5167 ;; Defined at:
  5168 ;;		line 70 in file "mcc_generated_files/mcc.c"
  5169 ;; Parameters:    Size  Location     Type
  5170 ;;		None
  5171 ;; Auto vars:     Size  Location     Type
  5172 ;;		None
  5173 ;; Return value:  Size  Location     Type
  5174 ;;                  1    wreg      void 
  5175 ;; Registers used:
  5176 ;;		wreg, status,2, status,0, pclath, cstack
  5177 ;; Tracked objects:
  5178 ;;		On entry : 0/0
  5179 ;;		On exit  : 0/0
  5180 ;;		Unchanged: 0/0
  5181 ;; Data sizes:     COMMON   BANK0   BANK1
  5182 ;;      Params:         0       0       0
  5183 ;;      Locals:         0       0       0
  5184 ;;      Temps:          0       0       0
  5185 ;;      Totals:         0       0       0
  5186 ;;Total ram usage:        0 bytes
  5187 ;; Hardware stack levels used:    1
  5188 ;; Hardware stack levels required when called:    3
  5189 ;; This function calls:
  5190 ;;		_OSCILLATOR_Initialize
  5191 ;;		_PIN_MANAGER_Initialize
  5192 ;; This function is called by:
  5193 ;;		_main
  5194 ;; This function uses a non-reentrant model
  5195 ;;
  5196                           
  5197                           
  5198                           ;psect for function _SYSTEM_Initialize
  5199  067F                     _SYSTEM_Initialize:	
  5200                           
  5201                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  5202                           
  5203                           ;incstack = 0
  5204                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5205  067F  25E8               	fcall	_PIN_MANAGER_Initialize
  5206                           
  5207                           ;mcc.c: 74: OSCILLATOR_Initialize();
  5208  0680  2672               	fcall	_OSCILLATOR_Initialize
  5209  0681  0008               	return
  5210  0682                     __end_of_SYSTEM_Initialize:	
  5211                           
  5212                           	psect	text27
  5213  05E8                     __ptext27:	
  5214 ;; *************** function _PIN_MANAGER_Initialize *****************
  5215 ;; Defined at:
  5216 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  5217 ;; Parameters:    Size  Location     Type
  5218 ;;		None
  5219 ;; Auto vars:     Size  Location     Type
  5220 ;;		None
  5221 ;; Return value:  Size  Location     Type
  5222 ;;                  1    wreg      void 
  5223 ;; Registers used:
  5224 ;;		wreg, status,2
  5225 ;; Tracked objects:
  5226 ;;		On entry : 0/0
  5227 ;;		On exit  : 0/0
  5228 ;;		Unchanged: 0/0
  5229 ;; Data sizes:     COMMON   BANK0   BANK1
  5230 ;;      Params:         0       0       0
  5231 ;;      Locals:         0       0       0
  5232 ;;      Temps:          0       0       0
  5233 ;;      Totals:         0       0       0
  5234 ;;Total ram usage:        0 bytes
  5235 ;; Hardware stack levels used:    1
  5236 ;; Hardware stack levels required when called:    2
  5237 ;; This function calls:
  5238 ;;		Nothing
  5239 ;; This function is called by:
  5240 ;;		_SYSTEM_Initialize
  5241 ;; This function uses a non-reentrant model
  5242 ;;
  5243                           
  5244                           
  5245                           ;psect for function _PIN_MANAGER_Initialize
  5246  05E8                     _PIN_MANAGER_Initialize:	
  5247                           
  5248                           ;pin_manager.c: 51: LATA = 0x0;
  5249                           
  5250                           ;incstack = 0
  5251                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  5252  05E8  0022               	movlb	2	; select bank2
  5253  05E9  018C               	clrf	12	;volatile
  5254                           
  5255                           ;pin_manager.c: 52: LATC = 0x0;
  5256  05EA  018E               	clrf	14	;volatile
  5257                           
  5258                           ;pin_manager.c: 55: ANSELA = 0b00000100;
  5259  05EB  3004               	movlw	4
  5260  05EC  0023               	movlb	3	; select bank3
  5261  05ED  008C               	movwf	12	;volatile
  5262                           
  5263                           ;pin_manager.c: 56: ANSELC = 0b00000011;
  5264  05EE  3003               	movlw	3
  5265  05EF  008E               	movwf	14	;volatile
  5266                           
  5267                           ;pin_manager.c: 59: WPUA = 0x3B;
  5268  05F0  303B               	movlw	59
  5269  05F1  0024               	movlb	4	; select bank4
  5270  05F2  008C               	movwf	12	;volatile
  5271                           
  5272                           ;pin_manager.c: 61: WPUC = 0x1C;
  5273  05F3  301C               	movlw	28
  5274  05F4  008E               	movwf	14	;volatile
  5275                           
  5276                           ;pin_manager.c: 63: RXDTSEL = 0;
  5277  05F5  0022               	movlb	2	; select bank2
  5278  05F6  139D               	bcf	29,7	;volatile
  5279                           
  5280                           ;pin_manager.c: 64: TXCKSEL = 0;
  5281  05F7  111D               	bcf	29,2	;volatile
  5282                           
  5283                           ;pin_manager.c: 67: TRISC = 0b01100011;
  5284  05F8  3063               	movlw	99
  5285  05F9  0021               	movlb	1	; select bank1
  5286  05FA  008E               	movwf	14	;volatile
  5287                           
  5288                           ;pin_manager.c: 68: TRISA = 0b01011111;
  5289  05FB  305F               	movlw	95
  5290  05FC  008C               	movwf	12	;volatile
  5291                           
  5292                           ;pin_manager.c: 70: OPTION_REGbits.nWPUEN = 0x0;
  5293  05FD  1395               	bcf	21,7	;volatile
  5294                           
  5295                           ;pin_manager.c: 71: APFCON = 0x00;
  5296  05FE  0022               	movlb	2	; select bank2
  5297  05FF  019D               	clrf	29	;volatile
  5298  0600  0008               	return
  5299  0601                     __end_of_PIN_MANAGER_Initialize:	
  5300                           
  5301                           	psect	text28
  5302  0672                     __ptext28:	
  5303 ;; *************** function _OSCILLATOR_Initialize *****************
  5304 ;; Defined at:
  5305 ;;		line 78 in file "mcc_generated_files/mcc.c"
  5306 ;; Parameters:    Size  Location     Type
  5307 ;;		None
  5308 ;; Auto vars:     Size  Location     Type
  5309 ;;		None
  5310 ;; Return value:  Size  Location     Type
  5311 ;;                  1    wreg      void 
  5312 ;; Registers used:
  5313 ;;		wreg, status,2
  5314 ;; Tracked objects:
  5315 ;;		On entry : 0/0
  5316 ;;		On exit  : 0/0
  5317 ;;		Unchanged: 0/0
  5318 ;; Data sizes:     COMMON   BANK0   BANK1
  5319 ;;      Params:         0       0       0
  5320 ;;      Locals:         0       0       0
  5321 ;;      Temps:          0       0       0
  5322 ;;      Totals:         0       0       0
  5323 ;;Total ram usage:        0 bytes
  5324 ;; Hardware stack levels used:    1
  5325 ;; Hardware stack levels required when called:    2
  5326 ;; This function calls:
  5327 ;;		Nothing
  5328 ;; This function is called by:
  5329 ;;		_SYSTEM_Initialize
  5330 ;; This function uses a non-reentrant model
  5331 ;;
  5332                           
  5333                           
  5334                           ;psect for function _OSCILLATOR_Initialize
  5335  0672                     _OSCILLATOR_Initialize:	
  5336                           
  5337                           ;mcc.c: 81: OSCCON = 0x3A;
  5338                           
  5339                           ;incstack = 0
  5340                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  5341  0672  303A               	movlw	58
  5342  0673  0021               	movlb	1	; select bank1
  5343  0674  0099               	movwf	25	;volatile
  5344                           
  5345                           ;mcc.c: 83: OSCSTAT = 0x00;
  5346  0675  019A               	clrf	26	;volatile
  5347                           
  5348                           ;mcc.c: 85: OSCTUNE = 0x00;
  5349  0676  0198               	clrf	24	;volatile
  5350  0677  0008               	return
  5351  0678                     __end_of_OSCILLATOR_Initialize:	
  5352                           
  5353                           	psect	intentry
  5354  0004                     __pintentry:	
  5355 ;; *************** function _isr *****************
  5356 ;; Defined at:
  5357 ;;		line 142 in file "main.c"
  5358 ;; Parameters:    Size  Location     Type
  5359 ;;		None
  5360 ;; Auto vars:     Size  Location     Type
  5361 ;;		None
  5362 ;; Return value:  Size  Location     Type
  5363 ;;                  1    wreg      void 
  5364 ;; Registers used:
  5365 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5366 ;; Tracked objects:
  5367 ;;		On entry : 0/0
  5368 ;;		On exit  : 0/0
  5369 ;;		Unchanged: 0/0
  5370 ;; Data sizes:     COMMON   BANK0   BANK1
  5371 ;;      Params:         0       0       0
  5372 ;;      Locals:         0       0       0
  5373 ;;      Temps:          2       0       0
  5374 ;;      Totals:         2       0       0
  5375 ;;Total ram usage:        2 bytes
  5376 ;; Hardware stack levels used:    1
  5377 ;; Hardware stack levels required when called:    1
  5378 ;; This function calls:
  5379 ;;		_start_TMR0_ISR
  5380 ;;		_stop_TMR0_ISR
  5381 ;;		i1_start_RX_USART_ISR
  5382 ;; This function is called by:
  5383 ;;		Interrupt level 1
  5384 ;; This function uses a non-reentrant model
  5385 ;;
  5386                           
  5387  0004                     _isr:	
  5388                           
  5389                           ;incstack = 0
  5390  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  5391                           
  5392                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5393  0005  3180               	pagesel	$
  5394  0006  0020               	movlb	0	; select bank0
  5395  0007  087F               	movf	127,w
  5396  0008  00F9               	movwf	??_isr+1
  5397                           
  5398                           ;main.c: 146: if (TMR0IF && TMR0IE) {
  5399  0009  190B               	btfsc	11,2	;volatile
  5400  000A  1E8B               	btfss	11,5	;volatile
  5401  000B  2815               	goto	i1l133
  5402                           
  5403                           ;main.c: 148: TMR0IF = 0;
  5404  000C  110B               	bcf	11,2	;volatile
  5405                           
  5406                           ;main.c: 149: TMR0 = TIMER0_timeout;
  5407  000D  0870               	movf	_TIMER0_timeout,w	;volatile
  5408  000E  0095               	movwf	21	;volatile
  5409                           
  5410                           ;main.c: 152: TIMER0_flag = 1;
  5411  000F  3001               	movlw	1
  5412  0010  00F8               	movwf	??_isr
  5413  0011  0878               	movf	??_isr,w
  5414  0012  00D8               	movwf	_TIMER0_flag	;volatile
  5415                           
  5416                           ;main.c: 157: stop_TMR0_ISR();
  5417  0013  2682               	fcall	_stop_TMR0_ISR
  5418                           
  5419                           ;main.c: 159: return;
  5420  0014  2851               	goto	i1l134
  5421  0015                     i1l133:	
  5422                           
  5423                           ;main.c: 160: }
  5424                           ;main.c: 164: if (RCIF) {
  5425  0015  1E91               	btfss	17,5	;volatile
  5426  0016  2836               	goto	i1l135
  5427                           
  5428                           ;main.c: 165: stop_TMR0_ISR();
  5429  0017  2682               	fcall	_stop_TMR0_ISR
  5430                           
  5431                           ;main.c: 168: if (OERR) {
  5432  0018  0023               	movlb	3	; select bank3
  5433  0019  1C9D               	btfss	29,1	;volatile
  5434  001A  2820               	goto	i1l2386
  5435                           
  5436                           ;main.c: 170: CREN = 0;
  5437  001B  121D               	bcf	29,4	;volatile
  5438                           
  5439                           ;main.c: 171: CREN = 1;
  5440  001C  161D               	bsf	29,4	;volatile
  5441                           
  5442                           ;main.c: 172: USART_rx_index = 0;
  5443  001D  0020               	movlb	0	; select bank0
  5444  001E  01DA               	clrf	_USART_rx_index	;volatile
  5445                           
  5446                           ;main.c: 173: return;
  5447  001F  2851               	goto	i1l134
  5448  0020                     i1l2386:	
  5449                           
  5450                           ;main.c: 174: }
  5451                           ;main.c: 177: if (USART_rx_index >= 10) {
  5452  0020  300A               	movlw	10
  5453  0021  0020               	movlb	0	; select bank0
  5454  0022  025A               	subwf	_USART_rx_index,w	;volatile
  5455  0023  1803               	btfsc	3,0
  5456                           
  5457                           ;main.c: 178: USART_rx_index = 0;
  5458  0024  01DA               	clrf	_USART_rx_index	;volatile
  5459                           
  5460                           ;main.c: 179: }
  5461                           ;main.c: 181: USART_rx_data[USART_rx_index++] = RCREG;
  5462  0025  0023               	movlb	3	; select bank3
  5463  0026  0819               	movf	25,w	;volatile
  5464  0027  00F8               	movwf	??_isr
  5465  0028  0020               	movlb	0	; select bank0
  5466  0029  085A               	movf	_USART_rx_index,w
  5467  002A  3E4E               	addlw	(low (_USART_rx_data| 0))& (0+255)
  5468  002B  0086               	movwf	6
  5469  002C  0187               	clrf	7
  5470  002D  0878               	movf	??_isr,w
  5471  002E  0081               	movwf	1
  5472  002F  3001               	movlw	1
  5473  0030  00F8               	movwf	??_isr
  5474  0031  0878               	movf	??_isr,w
  5475  0032  07DA               	addwf	_USART_rx_index,f	;volatile
  5476                           
  5477                           ;main.c: 183: start_TMR0_ISR(98);
  5478  0033  3062               	movlw	98
  5479  0034  2639               	fcall	_start_TMR0_ISR
  5480                           
  5481                           ;main.c: 185: return;
  5482  0035  2851               	goto	i1l134
  5483  0036                     i1l135:	
  5484                           
  5485                           ;main.c: 186: }
  5486                           ;main.c: 190: if (TXIF && TXIE) {
  5487  0036  1E11               	btfss	17,4	;volatile
  5488  0037  2851               	goto	i1l134
  5489  0038  0021               	movlb	1	; select bank1
  5490  0039  1E11               	btfss	17,4	;volatile
  5491  003A  2851               	goto	i1l134
  5492                           
  5493                           ;main.c: 192: TXREG = USART_tx_data[USART_tx_index++];
  5494  003B  0873               	movf	_USART_tx_index,w
  5495  003C  3EA0               	addlw	(low (_USART_tx_data| 0))& (0+255)
  5496  003D  0086               	movwf	6
  5497  003E  0187               	clrf	7
  5498  003F  0801               	movf	1,w
  5499  0040  0023               	movlb	3	; select bank3
  5500  0041  009A               	movwf	26	;volatile
  5501  0042  3001               	movlw	1
  5502  0043  00F8               	movwf	??_isr
  5503  0044  0878               	movf	??_isr,w
  5504  0045  07F3               	addwf	_USART_tx_index,f	;volatile
  5505                           
  5506                           ;main.c: 194: if (USART_tx_index >= USART_tx_length) {
  5507  0046  0874               	movf	_USART_tx_length,w	;volatile
  5508  0047  0273               	subwf	_USART_tx_index,w	;volatile
  5509  0048  1C03               	skipc
  5510  0049  2851               	goto	i1l134
  5511                           
  5512                           ;main.c: 195: TXIE = 0;
  5513  004A  0021               	movlb	1	; select bank1
  5514  004B  1211               	bcf	17,4	;volatile
  5515                           
  5516                           ;main.c: 196: USART_tx_flag = 0;
  5517  004C  01F2               	clrf	_USART_tx_flag	;volatile
  5518                           
  5519                           ;main.c: 200: _delay((unsigned long)((3)*(500000/4000.0)));
  5520  004D  307D               	movlw	125
  5521  004E                     u169_27:	
  5522  004E  0B89               	decfsz	9,f
  5523  004F  284E               	goto	u169_27
  5524                           
  5525                           ;main.c: 202: start_RX_USART_ISR();
  5526  0050  2628               	fcall	i1_start_RX_USART_ISR
  5527  0051                     i1l134:	
  5528                           ;main.c: 203: }
  5529                           ;main.c: 204: return;
  5530                           
  5531  0051  0879               	movf	??_isr+1,w
  5532  0052  0020               	movlb	0	; select bank0
  5533  0053  00FF               	movwf	127
  5534  0054  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  5535  0055  0009               	retfie
  5536  0056                     __end_of_isr:	
  5537                           
  5538                           	psect	text30
  5539  0628                     __ptext30:	
  5540 ;; *************** function i1_start_RX_USART_ISR *****************
  5541 ;; Defined at:
  5542 ;;		line 83 in file "USART1823.c"
  5543 ;; Parameters:    Size  Location     Type
  5544 ;;		None
  5545 ;; Auto vars:     Size  Location     Type
  5546 ;;		None
  5547 ;; Return value:  Size  Location     Type
  5548 ;;                  1    wreg      void 
  5549 ;; Registers used:
  5550 ;;		wreg, status,2
  5551 ;; Tracked objects:
  5552 ;;		On entry : 0/0
  5553 ;;		On exit  : 0/0
  5554 ;;		Unchanged: 0/0
  5555 ;; Data sizes:     COMMON   BANK0   BANK1
  5556 ;;      Params:         0       0       0
  5557 ;;      Locals:         0       0       0
  5558 ;;      Temps:          0       0       0
  5559 ;;      Totals:         0       0       0
  5560 ;;Total ram usage:        0 bytes
  5561 ;; Hardware stack levels used:    1
  5562 ;; This function calls:
  5563 ;;		Nothing
  5564 ;; This function is called by:
  5565 ;;		_isr
  5566 ;; This function uses a non-reentrant model
  5567 ;;
  5568                           
  5569                           
  5570                           ;psect for function i1_start_RX_USART_ISR
  5571  0628                     i1_start_RX_USART_ISR:	
  5572                           
  5573                           ;USART1823.c: 86: { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  5574                           
  5575                           ;incstack = 0
  5576                           ; Regs used in i1_start_RX_USART_ISR: [wreg+status,2]
  5577  0628  0023               	movlb	3	; select bank3
  5578  0629  151E               	bsf	30,2	;volatile
  5579  062A  159F               	bsf	31,3	;volatile
  5580  062B  019C               	clrf	28	;volatile
  5581  062C  300C               	movlw	12
  5582  062D  009B               	movwf	27	;volatile
  5583                           
  5584                           ;USART1823.c: 88: SYNC = 0;
  5585  062E  121E               	bcf	30,4	;volatile
  5586                           
  5587                           ;USART1823.c: 89: SPEN = 1;
  5588  062F  179D               	bsf	29,7	;volatile
  5589                           
  5590                           ;USART1823.c: 90: CREN = 1;
  5591  0630  161D               	bsf	29,4	;volatile
  5592                           
  5593                           ;USART1823.c: 92: USART_rx_flag = 0;
  5594  0631  0020               	movlb	0	; select bank0
  5595  0632  01D9               	clrf	_USART_rx_flag	;volatile
  5596                           
  5597                           ;USART1823.c: 93: USART_rx_index = 0;
  5598  0633  01DA               	clrf	_USART_rx_index	;volatile
  5599                           
  5600                           ;USART1823.c: 95: RCIE = 1;
  5601  0634  0021               	movlb	1	; select bank1
  5602  0635  1691               	bsf	17,5	;volatile
  5603                           
  5604                           ;USART1823.c: 96: PEIE = 1;
  5605  0636  170B               	bsf	11,6	;volatile
  5606                           
  5607                           ;USART1823.c: 97: GIE = 1;
  5608  0637  178B               	bsf	11,7	;volatile
  5609  0638  0008               	return
  5610  0639                     __end_ofi1_start_RX_USART_ISR:	
  5611                           
  5612                           	psect	text31
  5613  0682                     __ptext31:	
  5614 ;; *************** function _stop_TMR0_ISR *****************
  5615 ;; Defined at:
  5616 ;;		line 44 in file "TMR0.c"
  5617 ;; Parameters:    Size  Location     Type
  5618 ;;		None
  5619 ;; Auto vars:     Size  Location     Type
  5620 ;;		None
  5621 ;; Return value:  Size  Location     Type
  5622 ;;                  1    wreg      void 
  5623 ;; Registers used:
  5624 ;;		None
  5625 ;; Tracked objects:
  5626 ;;		On entry : 0/0
  5627 ;;		On exit  : 0/0
  5628 ;;		Unchanged: 0/0
  5629 ;; Data sizes:     COMMON   BANK0   BANK1
  5630 ;;      Params:         0       0       0
  5631 ;;      Locals:         0       0       0
  5632 ;;      Temps:          0       0       0
  5633 ;;      Totals:         0       0       0
  5634 ;;Total ram usage:        0 bytes
  5635 ;; Hardware stack levels used:    1
  5636 ;; This function calls:
  5637 ;;		Nothing
  5638 ;; This function is called by:
  5639 ;;		_isr
  5640 ;; This function uses a non-reentrant model
  5641 ;;
  5642                           
  5643                           
  5644                           ;psect for function _stop_TMR0_ISR
  5645  0682                     _stop_TMR0_ISR:	
  5646                           
  5647                           ;TMR0.c: 47: TMR0IE = 0;
  5648                           
  5649                           ;incstack = 0
  5650                           ; Regs used in _stop_TMR0_ISR: []
  5651  0682  128B               	bcf	11,5	;volatile
  5652                           
  5653                           ;TMR0.c: 48: TMR0IF = 0;
  5654  0683  110B               	bcf	11,2	;volatile
  5655  0684  0008               	return
  5656  0685                     __end_of_stop_TMR0_ISR:	
  5657                           
  5658                           	psect	text32
  5659  0639                     __ptext32:	
  5660 ;; *************** function _start_TMR0_ISR *****************
  5661 ;; Defined at:
  5662 ;;		line 30 in file "TMR0.c"
  5663 ;; Parameters:    Size  Location     Type
  5664 ;;  val             1    wreg     unsigned char 
  5665 ;; Auto vars:     Size  Location     Type
  5666 ;;  val             1    2[COMMON] unsigned char 
  5667 ;; Return value:  Size  Location     Type
  5668 ;;                  1    wreg      void 
  5669 ;; Registers used:
  5670 ;;		wreg, status,2
  5671 ;; Tracked objects:
  5672 ;;		On entry : 0/0
  5673 ;;		On exit  : 0/0
  5674 ;;		Unchanged: 0/0
  5675 ;; Data sizes:     COMMON   BANK0   BANK1
  5676 ;;      Params:         0       0       0
  5677 ;;      Locals:         1       0       0
  5678 ;;      Temps:          2       0       0
  5679 ;;      Totals:         3       0       0
  5680 ;;Total ram usage:        3 bytes
  5681 ;; Hardware stack levels used:    1
  5682 ;; This function calls:
  5683 ;;		Nothing
  5684 ;; This function is called by:
  5685 ;;		_isr
  5686 ;; This function uses a non-reentrant model
  5687 ;;
  5688                           
  5689                           
  5690                           ;psect for function _start_TMR0_ISR
  5691  0639                     _start_TMR0_ISR:	
  5692                           
  5693                           ;incstack = 0
  5694                           ; Regs used in _start_TMR0_ISR: [wreg+status,2]
  5695                           ;start_TMR0_ISR@val stored from wreg
  5696  0639  00F7               	movwf	start_TMR0_ISR@val
  5697                           
  5698                           ;TMR0.c: 32: TIMER0_timeout = val;
  5699  063A  0877               	movf	start_TMR0_ISR@val,w
  5700  063B  00F5               	movwf	??_start_TMR0_ISR
  5701  063C  01F6               	clrf	??_start_TMR0_ISR+1
  5702  063D  0875               	movf	??_start_TMR0_ISR,w
  5703  063E  00F0               	movwf	_TIMER0_timeout	;volatile
  5704  063F  0876               	movf	??_start_TMR0_ISR+1,w
  5705  0640  00F1               	movwf	_TIMER0_timeout+1	;volatile
  5706                           
  5707                           ;TMR0.c: 33: TIMER0_flag = 0;
  5708  0641  0020               	movlb	0	; select bank0
  5709  0642  01D8               	clrf	_TIMER0_flag	;volatile
  5710                           
  5711                           ;TMR0.c: 36: TMR0 = TIMER0_timeout;
  5712  0643  0870               	movf	_TIMER0_timeout,w	;volatile
  5713  0644  0095               	movwf	21	;volatile
  5714                           
  5715                           ;TMR0.c: 39: TMR0IF = 0;
  5716  0645  110B               	bcf	11,2	;volatile
  5717                           
  5718                           ;TMR0.c: 40: TMR0IE = 1;
  5719  0646  168B               	bsf	11,5	;volatile
  5720                           
  5721                           ;TMR0.c: 41: GIE = 1;
  5722  0647  178B               	bsf	11,7	;volatile
  5723  0648  0008               	return
  5724  0649                     __end_of_start_TMR0_ISR:	
  5725  007E                     btemp	set	126	;btemp
  5726  007E                     int$flags	set	126
  5727  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    52
    Data        0
    BSS         44
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     46      70
    BANK1            32      0      15

Pointer List with Targets:

    measure@Q	PTR short  size(1) Largest target is 2
		 -> sweep@Q(BANK0[2]), 

    measure@I	PTR short  size(1) Largest target is 2
		 -> sweep@I(BANK0[2]), 

    calculate_checksum@data	PTR unsigned char  size(1) Largest target is 10
		 -> sweep@aux(BANK0[7]), measure_Impedance_SE@aux(BANK0[8]), mess_rec(BANK0[10]), 

    lputs_ISR@data	PTR unsigned char  size(1) Largest target is 13
		 -> sweep@aux(BANK0[7]), calibrate_reader@aux(BANK0[8]), measure_Impedance_SE@aux(BANK0[8]), measure_Offset@aux(BANK0[5]), 
		 -> measure_Impedance_no_offset@aux(BANK0[13]), measure_Impedance@aux(BANK0[13]), read_ADC_channels@aux(BANK0[7]), mess_rec(BANK0[10]), 

    setFreq@asic	PTR struct . size(1) Largest target is 2
		 -> sweep@asic(BANK0[2]), 

    setGain@asic	PTR struct . size(1) Largest target is 2
		 -> sweep@asic(BANK0[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_start_TMR0_ISR

Critical Paths under _main in BANK0

    _main->_mess_handler
    _mess_handler->_sweep
    _sweep->_measure
    _measure->_ADC_5
    _read_ADC_channels->_ADC_2
    _read_ADC_channels->_ADC_4
    _read_ADC_channels->_ADC_5
    _measure_Offset->_ADC_2
    _measure_Offset->_ADC_4
    _measure_Impedance_no_offset->_ADC_2
    _measure_Impedance_no_offset->_ADC_4
    _measure_Impedance_SE->_ADC_5
    _measure_Impedance_SE->_calculate_checksum
    _measure_Impedance->_ADC_2
    _measure_Impedance->_ADC_4
    _config_ASIC->_config
    _config_ASIC->_lputs_ISR
    _calibrate_reader->_lputs_ISR

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   30747
                                             44 BANK0      2     2      0
                  _SYSTEM_Initialize
                  _USARTX_change_pol
                       _mess_handler
                          _setup_ADC
                         _setup_TMR0
                          _start_RCM
                 _start_RX_USART_ISR
                 _start_TX_USART_ISR
 ---------------------------------------------------------------------------------
 (1) _start_TX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RCM                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_TMR0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_ADC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _mess_handler                                         1     1      0   30648
                                             43 BANK0      1     1      0
                   _calibrate_reader
                        _config_ASIC
                          _lputs_ISR
                  _measure_Impedance
               _measure_Impedance_SE
        _measure_Impedance_no_offset
                     _measure_Offset
                  _read_ADC_channels
                              _sweep
 ---------------------------------------------------------------------------------
 (2) _sweep                                               21    21      0    6989
                                             22 BANK0     21    21      0
                 _calculate_checksum
                          _lputs_ISR
                            _measure
                            _setFreq
                            _setGain
 ---------------------------------------------------------------------------------
 (3) _setGain                                              4     3      1     846
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) _setFreq                                              4     3      1     408
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) _measure                                             16    13      3    2416
                                              6 BANK0     16    13      3
                              _ADC_5
                             _config
 ---------------------------------------------------------------------------------
 (2) _read_ADC_channels                                   14    14      0    2026
                                              6 BANK0     14    14      0
                              _ADC_2
                              _ADC_4
                              _ADC_5
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (2) _measure_Offset                                      12    12      0    3363
                                              6 BANK0     12    12      0
                              _ADC_2
                              _ADC_4
                             _config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (2) _measure_Impedance_no_offset                         22    22      0    3740
                                              6 BANK0     20    20      0
                              _ADC_2
                              _ADC_4
                             _config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (2) _measure_Impedance_SE                                15    15      0    4313
                                              6 BANK0     15    15      0
                              _ADC_5
                 _calculate_checksum
                             _config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (3) _calculate_checksum                                   6     5      1     545
                                              0 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (4) _ADC_5                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _measure_Impedance                                   22    22      0    4052
                                              6 BANK0     20    20      0
                              _ADC_2
                              _ADC_4
                             _config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (3) _ADC_4                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _ADC_2                                                6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _config_ASIC                                          3     3      0    2965
                                              5 BANK0      3     3      0
                             _config
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (4) _config                                               5     3      2    1442
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _calibrate_reader                                     9     9      0    1748
                                              5 BANK0      9     9      0
                          _lputs_ISR
 ---------------------------------------------------------------------------------
 (3) _lputs_ISR                                            5     4      1    1452
                                              0 BANK0      5     4      1
                     _close_RX_USART
 ---------------------------------------------------------------------------------
 (4) _close_RX_USART                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _USARTX_change_pol                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  2     2      0      22
                                              3 COMMON     2     2      0
                     _start_TMR0_ISR
                      _stop_TMR0_ISR
               i1_start_RX_USART_ISR
 ---------------------------------------------------------------------------------
 (6) i1_start_RX_USART_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _stop_TMR0_ISR                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _start_TMR0_ISR                                       3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _USARTX_change_pol
   _mess_handler
     _calibrate_reader
       _lputs_ISR
         _close_RX_USART
     _config_ASIC
       _config
       _lputs_ISR
         _close_RX_USART
     _lputs_ISR
       _close_RX_USART
     _measure_Impedance
       _ADC_2
       _ADC_4
       _config
       _lputs_ISR
         _close_RX_USART
     _measure_Impedance_SE
       _ADC_5
       _calculate_checksum
       _config
       _lputs_ISR
         _close_RX_USART
     _measure_Impedance_no_offset
       _ADC_2
       _ADC_4
       _config
       _lputs_ISR
         _close_RX_USART
     _measure_Offset
       _ADC_2
       _ADC_4
       _config
       _lputs_ISR
         _close_RX_USART
     _read_ADC_channels
       _ADC_2
       _ADC_4
       _ADC_5
       _lputs_ISR
         _close_RX_USART
     _sweep
       _calculate_checksum
       _lputs_ISR
         _close_RX_USART
       _measure
         _ADC_5
         _config
       _setFreq
       _setGain
   _setup_ADC
   _setup_TMR0
   _start_RCM
   _start_RX_USART_ISR
   _start_TX_USART_ISR

 _isr (ROOT)
   _start_TMR0_ISR
   _stop_TMR0_ISR
   i1_start_RX_USART_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      5F       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2E      46       6       87.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       F       8       46.9%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      5F       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Apr 24 12:09:10 2017

                         __CFG_CP$OFF 0000                         _USART_rx_data 004E  
                       _USART_rx_flag 0059                         _USART_tx_data 00A0  
                       _USART_tx_flag 0072                                   l121 0365  
                                 l417 0102                                   l451 056C  
                                 l364 047E                                   l445 058F  
                                 l439 05B2                                   l392 04D1  
                                 _GIE 005F                                   _RA5 0065  
                                 _PS0 04A8                                   _PS1 04A9  
                                 _PS2 04AA                          __CFG_CPD$OFF 0000  
                                 _PSA 04AB                                   _isr 0004  
                        __CFG_BORV$HI 0000                                   wreg 0009  
                        __CFG_IESO$ON 0000                        _USART_rx_index 005A  
                        __CFG_LVP$OFF 0000                        _USART_tx_index 0073  
                                l3000 0460                                  l3022 0371  
                                l3036 037A                                  l3038 038F  
                                l2440 04FB                                  l2600 0110  
                                l2506 0518                                  l2508 052F  
                                l2438 04F7                                  l2606 011E  
                                l2544 05D3                                  l2546 05E6  
                                l2590 00F1                                  l2574 00BA  
                                l2672 015F                                  l2656 013D  
                                l2686 0176                                  l2864 026C  
                                l2688 017A                                  l2980 0448  
                                l2990 0458                                  l2982 0450  
                                l2992 045A                                  l2984 0452  
                                l2994 045C                                  l2986 0454  
                                l2996 045E                                  l2988 0456  
                                ?_isr 0075                                  _ADGO 04E9  
                   ?_calibrate_reader 0075                          __CFG_WDTE$ON 0000  
                                _BRGH 0CF2                                  _CREN 0CEC  
                                u1135 04FE                                  u1315 05BD  
                                u1165 0577                                  _LATA 010C  
                                u1335 059A                                  _LATC 010E  
                                u1607 02FE                                  u1375 00FB  
                                u1617 0329                                  u1385 010C  
                                u1627 0283                                  u1395 011A  
                                u1637 02A1                                  u1485 017E  
                                u1557 035E                                  u1647 02BE  
                                u1567 0077                                  u1657 01D6  
                                u1577 008D                                  u1667 0202  
                                u1587 00C4                                  u1677 022D  
                                u1597 03A8                                  u1687 04D6  
                                _PEIE 005E                                  _RCIE 048D  
                                _RCIF 008D                                  _OERR 0CE9  
                                _SCKP 0CFC                                  _TMR0 0015  
                                _SPEN 0CEF                                  _TXIE 048C  
                                _TXEN 0CF5                                  _TXIF 008C  
                                _SYNC 0CF4                                  _WPUA 020C  
                                _WPUC 020E                __size_of_stop_TMR0_ISR 0003  
                   _read_ADC_channels 040E                          __CFG_WRT$OFF 0000  
                  ??_calibrate_reader 0025                                  _filt 047F  
                                _main 0351                                  fsr0h 0005  
                                fsr1h 0007                                  indf0 0000  
                                fsr0l 0004                                  indf1 0001  
                                fsr1l 0006                                  btemp 007E  
                  ?_read_ADC_channels 0075           __size_of_calculate_checksum 0019  
                                start 0056                         __CFG_MCLRE$ON 0000  
          measure_Impedance_SE@value1 0031                   ??_read_ADC_channels 0026  
                               ??_isr 0078        __size_of_OSCILLATOR_Initialize 0006  
                     _USART_tx_length 0074         __end_of_OSCILLATOR_Initialize 0678  
                               ?_main 0075                                 _ADC_2 05AC  
                               _ADC_4 0589                                 _ADC_5 0566  
                               _BRG16 0CFB                                 i1l133 0015  
                               i1l134 0051                                 i1l135 0036  
                               _RCREG 0199                                 _PORTC 000E  
                               _TRISA 008C                        _start_TMR0_ISR 0639  
                               _TRISC 008E                                 _TXREG 019A  
                      __CFG_FCMEN$OFF 0000                                 _gains 04AB  
                     __end_of_measure 0120                                 _freqs 04A0  
           __end_of_read_ADC_channels 0447                       __end_of_setGain 040E  
        ?_measure_Impedance_no_offset 0075                                 _sweep 0120  
                               main@i 004D                       __end_of_setFreq 0566  
       __size_ofi1_start_RX_USART_ISR 0011                        __CFG_BOREN$OFF 0000  
                               status 0003                                 wtemp0 007E  
                     __initialization 0057                          __end_of_filt 04A0  
                        __end_of_main 0391                         _stop_TMR0_ISR 0682  
                    ??_close_RX_USART 0020                __end_of_start_TMR0_ISR 0649  
                              ??_main 004C                                ?_ADC_2 0020  
                              ?_ADC_4 0020                                ?_ADC_5 0020  
        __end_of_measure_Impedance_SE 02E6                        _TIMER0_timeout 0070  
                      __CFG_PLLEN$OFF 0000                                _ADCON0 009D  
                              _ADCON1 009E                           measure@aux1 0034  
                         measure@aux2 0032                           measure@asic 0027  
                              _ADRESH 009C                                _ADRESL 009B  
                              _APFCON 011D                                _ANSELA 018C  
                              _ANSELC 018E                                ?_sweep 0075  
                              i1l2386 0020                                u169_27 004E  
                              _OSCCON 0099         ??_measure_Impedance_no_offset 0026  
                              _TMR0IE 005D                                _TMR0IF 005A  
                              _TMR0CS 04AD                                _SPBRGH 019C  
                              _SPBRGL 019B                        __CFG_PWRTE$OFF 0000  
                __size_of_config_ASIC 0016                       config_ASIC@asic 0026  
                      __CFG_STVREN$ON 0000                        ?_stop_TMR0_ISR 0075  
                              _config 04E3                       ?_start_TMR0_ISR 0075  
                measure_Impedance@aux 0027                             ??_measure 0029  
         __size_of_start_RX_USART_ISR 0011                             ??_setGain 0021  
                           ??_setFreq 0021                                sweep@I 0043  
                              sweep@Q 0045                                sweep@i 0041  
          __size_of_read_ADC_channels 0039                         ?_mess_handler 0075  
             __size_of_measure_Offset 003F                     _SYSTEM_Initialize 067F  
             __end_of__initialization 0068                         __end_of_ADC_2 05CF  
                       __end_of_ADC_4 05AC                    ?_SYSTEM_Initialize 0075  
                       __end_of_ADC_5 0589                        __pcstackCOMMON 0075  
                 ??_SYSTEM_Initialize 0020                         __end_of_gains 04B3  
                       __end_of_freqs 04AB  __size_of_measure_Impedance_no_offset 006B  
                       __end_of_sweep 01BF                               ??_ADC_2 0022  
                             ??_ADC_4 0022                               ??_ADC_5 0022  
                      _OPTION_REGbits 0095           __size_of_start_TX_USART_ISR 000F  
                         setGain@asic 0023                        ??_mess_handler 004B  
           __end_of_SYSTEM_Initialize 0682                               ??_sweep 0036  
                          __pbssBANK0 004E                            __pbssBANK1 00A0  
                _measure_Impedance_SE 0255                           setFreq@asic 0022  
                          __pmaintext 0351                       ??_stop_TMR0_ISR 0075  
                read_ADC_channels@aux 0027             __size_of_calibrate_reader 0030  
                          __pintentry 0004                               ?_config 0020  
                        measure@value 0030                  measure_Offset@value1 002C  
                measure_Offset@value2 002E                               _CLKRCON 039A  
                  __size_of_lputs_ISR 002B                       lputs_ISR@length 0020  
                   setFreq@freq_index 0020                    __size_of_setup_ADC 0006  
                             _OSCSTAT 009A                               _OSCTUNE 0098  
                  __size_of_start_RCM 0004                               _RXDTSEL 08EF  
                             _TXCKSEL 08EA            __end_of_calculate_checksum 05E8  
               ?_measure_Impedance_SE 0075          __end_ofi1_start_RX_USART_ISR 0639  
                     __size_of_config 002F                     measure_Offset@aux 0027  
                             __ptext1 0649                               __ptext2 0617  
                             __ptext3 0678                               __ptext4 0658  
                             __ptext5 066C                               __ptext6 0447  
                             __ptext7 0120                               __ptext8 03D0  
                             __ptext9 053D                               _measure 006B  
               _OSCILLATOR_Initialize 0672                          __size_of_isr 0052  
                             _setGain 03D0                               _setFreq 053D  
            ??_PIN_MANAGER_Initialize 0020                               config@i 0023  
                   setGain@gain_index 0020            __size_of_SYSTEM_Initialize 0003  
                             clrloop0 0667                         _mess_rec_size 005B  
                end_of_initialization 0068                        _measure_Offset 0391  
               measure_Impedance@asic 0038                     __end_of_lputs_ISR 053D  
                   __end_of_setup_ADC 0672                      ??_start_TMR0_ISR 0075  
                   __end_of_start_RCM 067C                  __end_of_mess_handler 047F  
                        __pstringtext 047F                            _setup_TMR0 0658  
                    __CFG_FOSC$INTOSC 0000                __end_of_measure_Offset 03D0  
                          config@conf 0020                ??_measure_Impedance_SE 0026  
                       ??_config_ASIC 0025                      _calibrate_reader 04B3  
                   _measure_Impedance 01BF                    ?_measure_Impedance 0075  
                      __end_of_config 0512                        ADC_2@ADC_value 0024  
          __end_of_start_RX_USART_ISR 0628                ?_OSCILLATOR_Initialize 0075  
   measure_Impedance_no_offset@value1 0034     measure_Impedance_no_offset@value2 0036  
                 start_initialization 0057                   ??_measure_Impedance 0026  
     __size_of_PIN_MANAGER_Initialize 0019                           __end_of_isr 0056  
                     ?_measure_Offset 0075   __end_of_measure_Impedance_no_offset 0351  
         _measure_Impedance_no_offset 02E6              measure_Impedance_SE@asic 0033  
             __size_of_close_RX_USART 0007                     _USARTX_change_pol 067C  
                i1_start_RX_USART_ISR 0628                    ?_USARTX_change_pol 0075  
                      ADC_4@ADC_value 0024             __end_of_measure_Impedance 0255  
                 ??_USARTX_change_pol 0020                        ADC_5@ADC_value 0024  
                 __end_of_config_ASIC 0617                              ??_config 0022  
                         ?_setup_TMR0 0075            __end_of_start_TX_USART_ISR 0658  
                         __pbssCOMMON 0070                             ___latbits 0000  
                       __pcstackBANK0 0020             __end_of_USARTX_change_pol 067F  
     measure_Impedance_no_offset@asic 0038                       sweep@gain_index 0047  
               ?i1_start_RX_USART_ISR 0075                            setGain@aux 0022  
               __size_of_mess_handler 0038                _PIN_MANAGER_Initialize 05E8  
                          setFreq@aux 0023                 __end_of_stop_TMR0_ISR 0685  
                  _calculate_checksum 05CF                        __size_of_ADC_2 0023  
                      __size_of_ADC_4 0023                        __size_of_ADC_5 0023  
             read_ADC_channels@value1 002E               read_ADC_channels@value2 0030  
             read_ADC_channels@value3 0032                   ?_calculate_checksum 0020  
                            ?_measure 0026                              ?_setGain 0020  
                            ?_setFreq 0020                         measure@offset 002D  
                     sweep@freq_index 0040                          _mess_handler 0447  
                      __size_of_sweep 009F                   __size_of_setup_TMR0 0007  
                         _config_ASIC 0601                  ??_calculate_checksum 0021  
                           clear_ram0 0666                            lputs_ISR@i 0023  
          __size_of_measure_Impedance 0096             measure_Impedance_SE@check 0030  
                           _lputs_ISR 0512                             _setup_ADC 066C  
                           _start_RCM 0678                             config@out 0024  
          __size_of_USARTX_change_pol 0003                ??i1_start_RX_USART_ISR 0075  
                      _close_RX_USART 065F              __end_of_calibrate_reader 04E3  
             measure_Impedance@value1 0034               measure_Impedance@value2 0036  
             measure_Impedance_SE@aux 0028                            sweep@check 0038  
                          sweep@count 0042                            ?_lputs_ISR 0020  
             calculate_checksum@check 0023                            ?_setup_ADC 0075  
             ??_OSCILLATOR_Initialize 0020                     start_TMR0_ISR@val 0077  
                          ?_start_RCM 0075        measure_Impedance_no_offset@aux 0027  
                    ??_measure_Offset 0026                __end_of_close_RX_USART 0666  
                    __size_of_measure 00B5                      __size_of_setGain 003E  
                    __size_of_setFreq 0029                    measure_Offset@asic 0030  
                            __ptext10 006B                              __ptext11 040E  
                            __ptext20 0601                              __ptext12 0391  
                            __ptext21 04E3                              __ptext13 02E6  
                            __ptext30 0628                              __ptext22 04B3  
                            __ptext14 0255                              __ptext31 0682  
                            __ptext23 0512                              __ptext15 05CF  
                            __ptext32 0639                              __ptext24 065F  
                            __ptext16 0566                              __ptext25 067C  
                            __ptext17 01BF                              __ptext26 067F  
                            __ptext18 0589                              __ptext27 05E8  
                            __ptext19 05AC                              __ptext28 0672  
                       lputs_ISR@data 0024                    _start_RX_USART_ISR 0617  
                       __size_of_main 0040                              _mess_rec 005C  
       __size_of_measure_Impedance_SE 0091                   ?_start_RX_USART_ISR 0075  
                            int$flags 007E                          ??_setup_TMR0 0020  
                         _TIMER0_flag 0058                  ??_start_RX_USART_ISR 0020  
                            measure@I 002F               __size_of_start_TMR0_ISR 0010  
                            measure@Q 0026                       ?_close_RX_USART 0075  
                           sweep@asic 0049                calculate_checksum@data 0024  
                            intlevel1 0000                    _start_TX_USART_ISR 0649  
                 calibrate_reader@aux 0026               ?_PIN_MANAGER_Initialize 0075  
                   __CFG_CLKOUTEN$OFF 0000                    __end_of_setup_TMR0 065F  
                 ?_start_TX_USART_ISR 0075                           ??_lputs_ISR 0021  
                         ??_setup_ADC 0020                              sweep@aux 0039  
                            sweep@ret 0048                 calculate_checksum@num 0020  
                         ??_start_RCM 0020                  ??_start_TX_USART_ISR 0020  
      __end_of_PIN_MANAGER_Initialize 0601                   calculate_checksum@i 0025  
                        ?_config_ASIC 0075  
