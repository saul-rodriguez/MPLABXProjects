

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Sat Feb 20 20:46:41 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og9 
     1                           	processor	16LF1823
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    37                           	dabs	1,0x7E,2
    38  0000                     
    39                           ; Version 2.10
    40                           ; Generated 11/07/2019 GMT
    41                           ; 
    42                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC16LF1823 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     	;# 
    74  0001                     	;# 
    75  0002                     	;# 
    76  0003                     	;# 
    77  0004                     	;# 
    78  0005                     	;# 
    79  0006                     	;# 
    80  0007                     	;# 
    81  0008                     	;# 
    82  0009                     	;# 
    83  000A                     	;# 
    84  000B                     	;# 
    85  000C                     	;# 
    86  000E                     	;# 
    87  0011                     	;# 
    88  0012                     	;# 
    89  0015                     	;# 
    90  0016                     	;# 
    91  0016                     	;# 
    92  0017                     	;# 
    93  0018                     	;# 
    94  0019                     	;# 
    95  001A                     	;# 
    96  001B                     	;# 
    97  001C                     	;# 
    98  001E                     	;# 
    99  001F                     	;# 
   100  008C                     	;# 
   101  008E                     	;# 
   102  0091                     	;# 
   103  0092                     	;# 
   104  0095                     	;# 
   105  0096                     	;# 
   106  0097                     	;# 
   107  0098                     	;# 
   108  0099                     	;# 
   109  009A                     	;# 
   110  009B                     	;# 
   111  009B                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  010C                     	;# 
   116  010E                     	;# 
   117  0111                     	;# 
   118  0112                     	;# 
   119  0113                     	;# 
   120  0114                     	;# 
   121  0115                     	;# 
   122  0116                     	;# 
   123  0117                     	;# 
   124  0118                     	;# 
   125  0119                     	;# 
   126  011A                     	;# 
   127  011B                     	;# 
   128  011D                     	;# 
   129  011D                     	;# 
   130  018C                     	;# 
   131  018E                     	;# 
   132  0191                     	;# 
   133  0191                     	;# 
   134  0192                     	;# 
   135  0193                     	;# 
   136  0193                     	;# 
   137  0193                     	;# 
   138  0194                     	;# 
   139  0195                     	;# 
   140  0196                     	;# 
   141  0199                     	;# 
   142  019A                     	;# 
   143  019B                     	;# 
   144  019B                     	;# 
   145  019B                     	;# 
   146  019B                     	;# 
   147  019C                     	;# 
   148  019C                     	;# 
   149  019D                     	;# 
   150  019E                     	;# 
   151  019F                     	;# 
   152  020C                     	;# 
   153  020E                     	;# 
   154  0211                     	;# 
   155  0211                     	;# 
   156  0212                     	;# 
   157  0212                     	;# 
   158  0213                     	;# 
   159  0213                     	;# 
   160  0214                     	;# 
   161  0214                     	;# 
   162  0215                     	;# 
   163  0215                     	;# 
   164  0215                     	;# 
   165  0216                     	;# 
   166  0216                     	;# 
   167  0217                     	;# 
   168  0217                     	;# 
   169  0291                     	;# 
   170  0291                     	;# 
   171  0292                     	;# 
   172  0293                     	;# 
   173  0294                     	;# 
   174  0295                     	;# 
   175  0295                     	;# 
   176  0296                     	;# 
   177  0391                     	;# 
   178  0392                     	;# 
   179  0393                     	;# 
   180  039A                     	;# 
   181  039C                     	;# 
   182  039D                     	;# 
   183  039E                     	;# 
   184  039F                     	;# 
   185  0FE4                     	;# 
   186  0FE5                     	;# 
   187  0FE6                     	;# 
   188  0FE7                     	;# 
   189  0FE8                     	;# 
   190  0FE9                     	;# 
   191  0FEA                     	;# 
   192  0FEB                     	;# 
   193  0FED                     	;# 
   194  0FEE                     	;# 
   195  0FEF                     	;# 
   196  0000                     	;# 
   197  0001                     	;# 
   198  0002                     	;# 
   199  0003                     	;# 
   200  0004                     	;# 
   201  0005                     	;# 
   202  0006                     	;# 
   203  0007                     	;# 
   204  0008                     	;# 
   205  0009                     	;# 
   206  000A                     	;# 
   207  000B                     	;# 
   208  000C                     	;# 
   209  000E                     	;# 
   210  0011                     	;# 
   211  0012                     	;# 
   212  0015                     	;# 
   213  0016                     	;# 
   214  0016                     	;# 
   215  0017                     	;# 
   216  0018                     	;# 
   217  0019                     	;# 
   218  001A                     	;# 
   219  001B                     	;# 
   220  001C                     	;# 
   221  001E                     	;# 
   222  001F                     	;# 
   223  008C                     	;# 
   224  008E                     	;# 
   225  0091                     	;# 
   226  0092                     	;# 
   227  0095                     	;# 
   228  0096                     	;# 
   229  0097                     	;# 
   230  0098                     	;# 
   231  0099                     	;# 
   232  009A                     	;# 
   233  009B                     	;# 
   234  009B                     	;# 
   235  009C                     	;# 
   236  009D                     	;# 
   237  009E                     	;# 
   238  010C                     	;# 
   239  010E                     	;# 
   240  0111                     	;# 
   241  0112                     	;# 
   242  0113                     	;# 
   243  0114                     	;# 
   244  0115                     	;# 
   245  0116                     	;# 
   246  0117                     	;# 
   247  0118                     	;# 
   248  0119                     	;# 
   249  011A                     	;# 
   250  011B                     	;# 
   251  011D                     	;# 
   252  011D                     	;# 
   253  018C                     	;# 
   254  018E                     	;# 
   255  0191                     	;# 
   256  0191                     	;# 
   257  0192                     	;# 
   258  0193                     	;# 
   259  0193                     	;# 
   260  0193                     	;# 
   261  0194                     	;# 
   262  0195                     	;# 
   263  0196                     	;# 
   264  0199                     	;# 
   265  019A                     	;# 
   266  019B                     	;# 
   267  019B                     	;# 
   268  019B                     	;# 
   269  019B                     	;# 
   270  019C                     	;# 
   271  019C                     	;# 
   272  019D                     	;# 
   273  019E                     	;# 
   274  019F                     	;# 
   275  020C                     	;# 
   276  020E                     	;# 
   277  0211                     	;# 
   278  0211                     	;# 
   279  0212                     	;# 
   280  0212                     	;# 
   281  0213                     	;# 
   282  0213                     	;# 
   283  0214                     	;# 
   284  0214                     	;# 
   285  0215                     	;# 
   286  0215                     	;# 
   287  0215                     	;# 
   288  0216                     	;# 
   289  0216                     	;# 
   290  0217                     	;# 
   291  0217                     	;# 
   292  0291                     	;# 
   293  0291                     	;# 
   294  0292                     	;# 
   295  0293                     	;# 
   296  0294                     	;# 
   297  0295                     	;# 
   298  0295                     	;# 
   299  0296                     	;# 
   300  0391                     	;# 
   301  0392                     	;# 
   302  0393                     	;# 
   303  039A                     	;# 
   304  039C                     	;# 
   305  039D                     	;# 
   306  039E                     	;# 
   307  039F                     	;# 
   308  0FE4                     	;# 
   309  0FE5                     	;# 
   310  0FE6                     	;# 
   311  0FE7                     	;# 
   312  0FE8                     	;# 
   313  0FE9                     	;# 
   314  0FEA                     	;# 
   315  0FEB                     	;# 
   316  0FED                     	;# 
   317  0FEE                     	;# 
   318  0FEF                     	;# 
   319  0000                     	;# 
   320  0001                     	;# 
   321  0002                     	;# 
   322  0003                     	;# 
   323  0004                     	;# 
   324  0005                     	;# 
   325  0006                     	;# 
   326  0007                     	;# 
   327  0008                     	;# 
   328  0009                     	;# 
   329  000A                     	;# 
   330  000B                     	;# 
   331  000C                     	;# 
   332  000E                     	;# 
   333  0011                     	;# 
   334  0012                     	;# 
   335  0015                     	;# 
   336  0016                     	;# 
   337  0016                     	;# 
   338  0017                     	;# 
   339  0018                     	;# 
   340  0019                     	;# 
   341  001A                     	;# 
   342  001B                     	;# 
   343  001C                     	;# 
   344  001E                     	;# 
   345  001F                     	;# 
   346  008C                     	;# 
   347  008E                     	;# 
   348  0091                     	;# 
   349  0092                     	;# 
   350  0095                     	;# 
   351  0096                     	;# 
   352  0097                     	;# 
   353  0098                     	;# 
   354  0099                     	;# 
   355  009A                     	;# 
   356  009B                     	;# 
   357  009B                     	;# 
   358  009C                     	;# 
   359  009D                     	;# 
   360  009E                     	;# 
   361  010C                     	;# 
   362  010E                     	;# 
   363  0111                     	;# 
   364  0112                     	;# 
   365  0113                     	;# 
   366  0114                     	;# 
   367  0115                     	;# 
   368  0116                     	;# 
   369  0117                     	;# 
   370  0118                     	;# 
   371  0119                     	;# 
   372  011A                     	;# 
   373  011B                     	;# 
   374  011D                     	;# 
   375  011D                     	;# 
   376  018C                     	;# 
   377  018E                     	;# 
   378  0191                     	;# 
   379  0191                     	;# 
   380  0192                     	;# 
   381  0193                     	;# 
   382  0193                     	;# 
   383  0193                     	;# 
   384  0194                     	;# 
   385  0195                     	;# 
   386  0196                     	;# 
   387  0199                     	;# 
   388  019A                     	;# 
   389  019B                     	;# 
   390  019B                     	;# 
   391  019B                     	;# 
   392  019B                     	;# 
   393  019C                     	;# 
   394  019C                     	;# 
   395  019D                     	;# 
   396  019E                     	;# 
   397  019F                     	;# 
   398  020C                     	;# 
   399  020E                     	;# 
   400  0211                     	;# 
   401  0211                     	;# 
   402  0212                     	;# 
   403  0212                     	;# 
   404  0213                     	;# 
   405  0213                     	;# 
   406  0214                     	;# 
   407  0214                     	;# 
   408  0215                     	;# 
   409  0215                     	;# 
   410  0215                     	;# 
   411  0216                     	;# 
   412  0216                     	;# 
   413  0217                     	;# 
   414  0217                     	;# 
   415  0291                     	;# 
   416  0291                     	;# 
   417  0292                     	;# 
   418  0293                     	;# 
   419  0294                     	;# 
   420  0295                     	;# 
   421  0295                     	;# 
   422  0296                     	;# 
   423  0391                     	;# 
   424  0392                     	;# 
   425  0393                     	;# 
   426  039A                     	;# 
   427  039C                     	;# 
   428  039D                     	;# 
   429  039E                     	;# 
   430  039F                     	;# 
   431  0FE4                     	;# 
   432  0FE5                     	;# 
   433  0FE6                     	;# 
   434  0FE7                     	;# 
   435  0FE8                     	;# 
   436  0FE9                     	;# 
   437  0FEA                     	;# 
   438  0FEB                     	;# 
   439  0FED                     	;# 
   440  0FEE                     	;# 
   441  0FEF                     	;# 
   442  0000                     	;# 
   443  0001                     	;# 
   444  0002                     	;# 
   445  0003                     	;# 
   446  0004                     	;# 
   447  0005                     	;# 
   448  0006                     	;# 
   449  0007                     	;# 
   450  0008                     	;# 
   451  0009                     	;# 
   452  000A                     	;# 
   453  000B                     	;# 
   454  000C                     	;# 
   455  000E                     	;# 
   456  0011                     	;# 
   457  0012                     	;# 
   458  0015                     	;# 
   459  0016                     	;# 
   460  0016                     	;# 
   461  0017                     	;# 
   462  0018                     	;# 
   463  0019                     	;# 
   464  001A                     	;# 
   465  001B                     	;# 
   466  001C                     	;# 
   467  001E                     	;# 
   468  001F                     	;# 
   469  008C                     	;# 
   470  008E                     	;# 
   471  0091                     	;# 
   472  0092                     	;# 
   473  0095                     	;# 
   474  0096                     	;# 
   475  0097                     	;# 
   476  0098                     	;# 
   477  0099                     	;# 
   478  009A                     	;# 
   479  009B                     	;# 
   480  009B                     	;# 
   481  009C                     	;# 
   482  009D                     	;# 
   483  009E                     	;# 
   484  010C                     	;# 
   485  010E                     	;# 
   486  0111                     	;# 
   487  0112                     	;# 
   488  0113                     	;# 
   489  0114                     	;# 
   490  0115                     	;# 
   491  0116                     	;# 
   492  0117                     	;# 
   493  0118                     	;# 
   494  0119                     	;# 
   495  011A                     	;# 
   496  011B                     	;# 
   497  011D                     	;# 
   498  011D                     	;# 
   499  018C                     	;# 
   500  018E                     	;# 
   501  0191                     	;# 
   502  0191                     	;# 
   503  0192                     	;# 
   504  0193                     	;# 
   505  0193                     	;# 
   506  0193                     	;# 
   507  0194                     	;# 
   508  0195                     	;# 
   509  0196                     	;# 
   510  0199                     	;# 
   511  019A                     	;# 
   512  019B                     	;# 
   513  019B                     	;# 
   514  019B                     	;# 
   515  019B                     	;# 
   516  019C                     	;# 
   517  019C                     	;# 
   518  019D                     	;# 
   519  019E                     	;# 
   520  019F                     	;# 
   521  020C                     	;# 
   522  020E                     	;# 
   523  0211                     	;# 
   524  0211                     	;# 
   525  0212                     	;# 
   526  0212                     	;# 
   527  0213                     	;# 
   528  0213                     	;# 
   529  0214                     	;# 
   530  0214                     	;# 
   531  0215                     	;# 
   532  0215                     	;# 
   533  0215                     	;# 
   534  0216                     	;# 
   535  0216                     	;# 
   536  0217                     	;# 
   537  0217                     	;# 
   538  0291                     	;# 
   539  0291                     	;# 
   540  0292                     	;# 
   541  0293                     	;# 
   542  0294                     	;# 
   543  0295                     	;# 
   544  0295                     	;# 
   545  0296                     	;# 
   546  0391                     	;# 
   547  0392                     	;# 
   548  0393                     	;# 
   549  039A                     	;# 
   550  039C                     	;# 
   551  039D                     	;# 
   552  039E                     	;# 
   553  039F                     	;# 
   554  0FE4                     	;# 
   555  0FE5                     	;# 
   556  0FE6                     	;# 
   557  0FE7                     	;# 
   558  0FE8                     	;# 
   559  0FE9                     	;# 
   560  0FEA                     	;# 
   561  0FEB                     	;# 
   562  0FED                     	;# 
   563  0FEE                     	;# 
   564  0FEF                     	;# 
   565  0000                     	;# 
   566  0001                     	;# 
   567  0002                     	;# 
   568  0003                     	;# 
   569  0004                     	;# 
   570  0005                     	;# 
   571  0006                     	;# 
   572  0007                     	;# 
   573  0008                     	;# 
   574  0009                     	;# 
   575  000A                     	;# 
   576  000B                     	;# 
   577  000C                     	;# 
   578  000E                     	;# 
   579  0011                     	;# 
   580  0012                     	;# 
   581  0015                     	;# 
   582  0016                     	;# 
   583  0016                     	;# 
   584  0017                     	;# 
   585  0018                     	;# 
   586  0019                     	;# 
   587  001A                     	;# 
   588  001B                     	;# 
   589  001C                     	;# 
   590  001E                     	;# 
   591  001F                     	;# 
   592  008C                     	;# 
   593  008E                     	;# 
   594  0091                     	;# 
   595  0092                     	;# 
   596  0095                     	;# 
   597  0096                     	;# 
   598  0097                     	;# 
   599  0098                     	;# 
   600  0099                     	;# 
   601  009A                     	;# 
   602  009B                     	;# 
   603  009B                     	;# 
   604  009C                     	;# 
   605  009D                     	;# 
   606  009E                     	;# 
   607  010C                     	;# 
   608  010E                     	;# 
   609  0111                     	;# 
   610  0112                     	;# 
   611  0113                     	;# 
   612  0114                     	;# 
   613  0115                     	;# 
   614  0116                     	;# 
   615  0117                     	;# 
   616  0118                     	;# 
   617  0119                     	;# 
   618  011A                     	;# 
   619  011B                     	;# 
   620  011D                     	;# 
   621  011D                     	;# 
   622  018C                     	;# 
   623  018E                     	;# 
   624  0191                     	;# 
   625  0191                     	;# 
   626  0192                     	;# 
   627  0193                     	;# 
   628  0193                     	;# 
   629  0193                     	;# 
   630  0194                     	;# 
   631  0195                     	;# 
   632  0196                     	;# 
   633  0199                     	;# 
   634  019A                     	;# 
   635  019B                     	;# 
   636  019B                     	;# 
   637  019B                     	;# 
   638  019B                     	;# 
   639  019C                     	;# 
   640  019C                     	;# 
   641  019D                     	;# 
   642  019E                     	;# 
   643  019F                     	;# 
   644  020C                     	;# 
   645  020E                     	;# 
   646  0211                     	;# 
   647  0211                     	;# 
   648  0212                     	;# 
   649  0212                     	;# 
   650  0213                     	;# 
   651  0213                     	;# 
   652  0214                     	;# 
   653  0214                     	;# 
   654  0215                     	;# 
   655  0215                     	;# 
   656  0215                     	;# 
   657  0216                     	;# 
   658  0216                     	;# 
   659  0217                     	;# 
   660  0217                     	;# 
   661  0291                     	;# 
   662  0291                     	;# 
   663  0292                     	;# 
   664  0293                     	;# 
   665  0294                     	;# 
   666  0295                     	;# 
   667  0295                     	;# 
   668  0296                     	;# 
   669  0391                     	;# 
   670  0392                     	;# 
   671  0393                     	;# 
   672  039A                     	;# 
   673  039C                     	;# 
   674  039D                     	;# 
   675  039E                     	;# 
   676  039F                     	;# 
   677  0FE4                     	;# 
   678  0FE5                     	;# 
   679  0FE6                     	;# 
   680  0FE7                     	;# 
   681  0FE8                     	;# 
   682  0FE9                     	;# 
   683  0FEA                     	;# 
   684  0FEB                     	;# 
   685  0FED                     	;# 
   686  0FEE                     	;# 
   687  0FEF                     	;# 
   688  0000                     	;# 
   689  0001                     	;# 
   690  0002                     	;# 
   691  0003                     	;# 
   692  0004                     	;# 
   693  0005                     	;# 
   694  0006                     	;# 
   695  0007                     	;# 
   696  0008                     	;# 
   697  0009                     	;# 
   698  000A                     	;# 
   699  000B                     	;# 
   700  000C                     	;# 
   701  000E                     	;# 
   702  0011                     	;# 
   703  0012                     	;# 
   704  0015                     	;# 
   705  0016                     	;# 
   706  0016                     	;# 
   707  0017                     	;# 
   708  0018                     	;# 
   709  0019                     	;# 
   710  001A                     	;# 
   711  001B                     	;# 
   712  001C                     	;# 
   713  001E                     	;# 
   714  001F                     	;# 
   715  008C                     	;# 
   716  008E                     	;# 
   717  0091                     	;# 
   718  0092                     	;# 
   719  0095                     	;# 
   720  0096                     	;# 
   721  0097                     	;# 
   722  0098                     	;# 
   723  0099                     	;# 
   724  009A                     	;# 
   725  009B                     	;# 
   726  009B                     	;# 
   727  009C                     	;# 
   728  009D                     	;# 
   729  009E                     	;# 
   730  010C                     	;# 
   731  010E                     	;# 
   732  0111                     	;# 
   733  0112                     	;# 
   734  0113                     	;# 
   735  0114                     	;# 
   736  0115                     	;# 
   737  0116                     	;# 
   738  0117                     	;# 
   739  0118                     	;# 
   740  0119                     	;# 
   741  011A                     	;# 
   742  011B                     	;# 
   743  011D                     	;# 
   744  011D                     	;# 
   745  018C                     	;# 
   746  018E                     	;# 
   747  0191                     	;# 
   748  0191                     	;# 
   749  0192                     	;# 
   750  0193                     	;# 
   751  0193                     	;# 
   752  0193                     	;# 
   753  0194                     	;# 
   754  0195                     	;# 
   755  0196                     	;# 
   756  0199                     	;# 
   757  019A                     	;# 
   758  019B                     	;# 
   759  019B                     	;# 
   760  019B                     	;# 
   761  019B                     	;# 
   762  019C                     	;# 
   763  019C                     	;# 
   764  019D                     	;# 
   765  019E                     	;# 
   766  019F                     	;# 
   767  020C                     	;# 
   768  020E                     	;# 
   769  0211                     	;# 
   770  0211                     	;# 
   771  0212                     	;# 
   772  0212                     	;# 
   773  0213                     	;# 
   774  0213                     	;# 
   775  0214                     	;# 
   776  0214                     	;# 
   777  0215                     	;# 
   778  0215                     	;# 
   779  0215                     	;# 
   780  0216                     	;# 
   781  0216                     	;# 
   782  0217                     	;# 
   783  0217                     	;# 
   784  0291                     	;# 
   785  0291                     	;# 
   786  0292                     	;# 
   787  0293                     	;# 
   788  0294                     	;# 
   789  0295                     	;# 
   790  0295                     	;# 
   791  0296                     	;# 
   792  0391                     	;# 
   793  0392                     	;# 
   794  0393                     	;# 
   795  039A                     	;# 
   796  039C                     	;# 
   797  039D                     	;# 
   798  039E                     	;# 
   799  039F                     	;# 
   800  0FE4                     	;# 
   801  0FE5                     	;# 
   802  0FE6                     	;# 
   803  0FE7                     	;# 
   804  0FE8                     	;# 
   805  0FE9                     	;# 
   806  0FEA                     	;# 
   807  0FEB                     	;# 
   808  0FED                     	;# 
   809  0FEE                     	;# 
   810  0FEF                     	;# 
   811  0000                     	;# 
   812  0001                     	;# 
   813  0002                     	;# 
   814  0003                     	;# 
   815  0004                     	;# 
   816  0005                     	;# 
   817  0006                     	;# 
   818  0007                     	;# 
   819  0008                     	;# 
   820  0009                     	;# 
   821  000A                     	;# 
   822  000B                     	;# 
   823  000C                     	;# 
   824  000E                     	;# 
   825  0011                     	;# 
   826  0012                     	;# 
   827  0015                     	;# 
   828  0016                     	;# 
   829  0016                     	;# 
   830  0017                     	;# 
   831  0018                     	;# 
   832  0019                     	;# 
   833  001A                     	;# 
   834  001B                     	;# 
   835  001C                     	;# 
   836  001E                     	;# 
   837  001F                     	;# 
   838  008C                     	;# 
   839  008E                     	;# 
   840  0091                     	;# 
   841  0092                     	;# 
   842  0095                     	;# 
   843  0096                     	;# 
   844  0097                     	;# 
   845  0098                     	;# 
   846  0099                     	;# 
   847  009A                     	;# 
   848  009B                     	;# 
   849  009B                     	;# 
   850  009C                     	;# 
   851  009D                     	;# 
   852  009E                     	;# 
   853  010C                     	;# 
   854  010E                     	;# 
   855  0111                     	;# 
   856  0112                     	;# 
   857  0113                     	;# 
   858  0114                     	;# 
   859  0115                     	;# 
   860  0116                     	;# 
   861  0117                     	;# 
   862  0118                     	;# 
   863  0119                     	;# 
   864  011A                     	;# 
   865  011B                     	;# 
   866  011D                     	;# 
   867  011D                     	;# 
   868  018C                     	;# 
   869  018E                     	;# 
   870  0191                     	;# 
   871  0191                     	;# 
   872  0192                     	;# 
   873  0193                     	;# 
   874  0193                     	;# 
   875  0193                     	;# 
   876  0194                     	;# 
   877  0195                     	;# 
   878  0196                     	;# 
   879  0199                     	;# 
   880  019A                     	;# 
   881  019B                     	;# 
   882  019B                     	;# 
   883  019B                     	;# 
   884  019B                     	;# 
   885  019C                     	;# 
   886  019C                     	;# 
   887  019D                     	;# 
   888  019E                     	;# 
   889  019F                     	;# 
   890  020C                     	;# 
   891  020E                     	;# 
   892  0211                     	;# 
   893  0211                     	;# 
   894  0212                     	;# 
   895  0212                     	;# 
   896  0213                     	;# 
   897  0213                     	;# 
   898  0214                     	;# 
   899  0214                     	;# 
   900  0215                     	;# 
   901  0215                     	;# 
   902  0215                     	;# 
   903  0216                     	;# 
   904  0216                     	;# 
   905  0217                     	;# 
   906  0217                     	;# 
   907  0291                     	;# 
   908  0291                     	;# 
   909  0292                     	;# 
   910  0293                     	;# 
   911  0294                     	;# 
   912  0295                     	;# 
   913  0295                     	;# 
   914  0296                     	;# 
   915  0391                     	;# 
   916  0392                     	;# 
   917  0393                     	;# 
   918  039A                     	;# 
   919  039C                     	;# 
   920  039D                     	;# 
   921  039E                     	;# 
   922  039F                     	;# 
   923  0FE4                     	;# 
   924  0FE5                     	;# 
   925  0FE6                     	;# 
   926  0FE7                     	;# 
   927  0FE8                     	;# 
   928  0FE9                     	;# 
   929  0FEA                     	;# 
   930  0FEB                     	;# 
   931  0FED                     	;# 
   932  0FEE                     	;# 
   933  0FEF                     	;# 
   934  0000                     	;# 
   935  0001                     	;# 
   936  0002                     	;# 
   937  0003                     	;# 
   938  0004                     	;# 
   939  0005                     	;# 
   940  0006                     	;# 
   941  0007                     	;# 
   942  0008                     	;# 
   943  0009                     	;# 
   944  000A                     	;# 
   945  000B                     	;# 
   946  000C                     	;# 
   947  000E                     	;# 
   948  0011                     	;# 
   949  0012                     	;# 
   950  0015                     	;# 
   951  0016                     	;# 
   952  0016                     	;# 
   953  0017                     	;# 
   954  0018                     	;# 
   955  0019                     	;# 
   956  001A                     	;# 
   957  001B                     	;# 
   958  001C                     	;# 
   959  001E                     	;# 
   960  001F                     	;# 
   961  008C                     	;# 
   962  008E                     	;# 
   963  0091                     	;# 
   964  0092                     	;# 
   965  0095                     	;# 
   966  0096                     	;# 
   967  0097                     	;# 
   968  0098                     	;# 
   969  0099                     	;# 
   970  009A                     	;# 
   971  009B                     	;# 
   972  009B                     	;# 
   973  009C                     	;# 
   974  009D                     	;# 
   975  009E                     	;# 
   976  010C                     	;# 
   977  010E                     	;# 
   978  0111                     	;# 
   979  0112                     	;# 
   980  0113                     	;# 
   981  0114                     	;# 
   982  0115                     	;# 
   983  0116                     	;# 
   984  0117                     	;# 
   985  0118                     	;# 
   986  0119                     	;# 
   987  011A                     	;# 
   988  011B                     	;# 
   989  011D                     	;# 
   990  011D                     	;# 
   991  018C                     	;# 
   992  018E                     	;# 
   993  0191                     	;# 
   994  0191                     	;# 
   995  0192                     	;# 
   996  0193                     	;# 
   997  0193                     	;# 
   998  0193                     	;# 
   999  0194                     	;# 
  1000  0195                     	;# 
  1001  0196                     	;# 
  1002  0199                     	;# 
  1003  019A                     	;# 
  1004  019B                     	;# 
  1005  019B                     	;# 
  1006  019B                     	;# 
  1007  019B                     	;# 
  1008  019C                     	;# 
  1009  019C                     	;# 
  1010  019D                     	;# 
  1011  019E                     	;# 
  1012  019F                     	;# 
  1013  020C                     	;# 
  1014  020E                     	;# 
  1015  0211                     	;# 
  1016  0211                     	;# 
  1017  0212                     	;# 
  1018  0212                     	;# 
  1019  0213                     	;# 
  1020  0213                     	;# 
  1021  0214                     	;# 
  1022  0214                     	;# 
  1023  0215                     	;# 
  1024  0215                     	;# 
  1025  0215                     	;# 
  1026  0216                     	;# 
  1027  0216                     	;# 
  1028  0217                     	;# 
  1029  0217                     	;# 
  1030  0291                     	;# 
  1031  0291                     	;# 
  1032  0292                     	;# 
  1033  0293                     	;# 
  1034  0294                     	;# 
  1035  0295                     	;# 
  1036  0295                     	;# 
  1037  0296                     	;# 
  1038  0391                     	;# 
  1039  0392                     	;# 
  1040  0393                     	;# 
  1041  039A                     	;# 
  1042  039C                     	;# 
  1043  039D                     	;# 
  1044  039E                     	;# 
  1045  039F                     	;# 
  1046  0FE4                     	;# 
  1047  0FE5                     	;# 
  1048  0FE6                     	;# 
  1049  0FE7                     	;# 
  1050  0FE8                     	;# 
  1051  0FE9                     	;# 
  1052  0FEA                     	;# 
  1053  0FEB                     	;# 
  1054  0FED                     	;# 
  1055  0FEE                     	;# 
  1056  0FEF                     	;# 
  1057  0000                     	;# 
  1058  0001                     	;# 
  1059  0002                     	;# 
  1060  0003                     	;# 
  1061  0004                     	;# 
  1062  0005                     	;# 
  1063  0006                     	;# 
  1064  0007                     	;# 
  1065  0008                     	;# 
  1066  0009                     	;# 
  1067  000A                     	;# 
  1068  000B                     	;# 
  1069  000C                     	;# 
  1070  000E                     	;# 
  1071  0011                     	;# 
  1072  0012                     	;# 
  1073  0015                     	;# 
  1074  0016                     	;# 
  1075  0016                     	;# 
  1076  0017                     	;# 
  1077  0018                     	;# 
  1078  0019                     	;# 
  1079  001A                     	;# 
  1080  001B                     	;# 
  1081  001C                     	;# 
  1082  001E                     	;# 
  1083  001F                     	;# 
  1084  008C                     	;# 
  1085  008E                     	;# 
  1086  0091                     	;# 
  1087  0092                     	;# 
  1088  0095                     	;# 
  1089  0096                     	;# 
  1090  0097                     	;# 
  1091  0098                     	;# 
  1092  0099                     	;# 
  1093  009A                     	;# 
  1094  009B                     	;# 
  1095  009B                     	;# 
  1096  009C                     	;# 
  1097  009D                     	;# 
  1098  009E                     	;# 
  1099  010C                     	;# 
  1100  010E                     	;# 
  1101  0111                     	;# 
  1102  0112                     	;# 
  1103  0113                     	;# 
  1104  0114                     	;# 
  1105  0115                     	;# 
  1106  0116                     	;# 
  1107  0117                     	;# 
  1108  0118                     	;# 
  1109  0119                     	;# 
  1110  011A                     	;# 
  1111  011B                     	;# 
  1112  011D                     	;# 
  1113  011D                     	;# 
  1114  018C                     	;# 
  1115  018E                     	;# 
  1116  0191                     	;# 
  1117  0191                     	;# 
  1118  0192                     	;# 
  1119  0193                     	;# 
  1120  0193                     	;# 
  1121  0193                     	;# 
  1122  0194                     	;# 
  1123  0195                     	;# 
  1124  0196                     	;# 
  1125  0199                     	;# 
  1126  019A                     	;# 
  1127  019B                     	;# 
  1128  019B                     	;# 
  1129  019B                     	;# 
  1130  019B                     	;# 
  1131  019C                     	;# 
  1132  019C                     	;# 
  1133  019D                     	;# 
  1134  019E                     	;# 
  1135  019F                     	;# 
  1136  020C                     	;# 
  1137  020E                     	;# 
  1138  0211                     	;# 
  1139  0211                     	;# 
  1140  0212                     	;# 
  1141  0212                     	;# 
  1142  0213                     	;# 
  1143  0213                     	;# 
  1144  0214                     	;# 
  1145  0214                     	;# 
  1146  0215                     	;# 
  1147  0215                     	;# 
  1148  0215                     	;# 
  1149  0216                     	;# 
  1150  0216                     	;# 
  1151  0217                     	;# 
  1152  0217                     	;# 
  1153  0291                     	;# 
  1154  0291                     	;# 
  1155  0292                     	;# 
  1156  0293                     	;# 
  1157  0294                     	;# 
  1158  0295                     	;# 
  1159  0295                     	;# 
  1160  0296                     	;# 
  1161  0391                     	;# 
  1162  0392                     	;# 
  1163  0393                     	;# 
  1164  039A                     	;# 
  1165  039C                     	;# 
  1166  039D                     	;# 
  1167  039E                     	;# 
  1168  039F                     	;# 
  1169  0FE4                     	;# 
  1170  0FE5                     	;# 
  1171  0FE6                     	;# 
  1172  0FE7                     	;# 
  1173  0FE8                     	;# 
  1174  0FE9                     	;# 
  1175  0FEA                     	;# 
  1176  0FEB                     	;# 
  1177  0FED                     	;# 
  1178  0FEE                     	;# 
  1179  0FEF                     	;# 
  1180  0000                     	;# 
  1181  0001                     	;# 
  1182  0002                     	;# 
  1183  0003                     	;# 
  1184  0004                     	;# 
  1185  0005                     	;# 
  1186  0006                     	;# 
  1187  0007                     	;# 
  1188  0008                     	;# 
  1189  0009                     	;# 
  1190  000A                     	;# 
  1191  000B                     	;# 
  1192  000C                     	;# 
  1193  000E                     	;# 
  1194  0011                     	;# 
  1195  0012                     	;# 
  1196  0015                     	;# 
  1197  0016                     	;# 
  1198  0016                     	;# 
  1199  0017                     	;# 
  1200  0018                     	;# 
  1201  0019                     	;# 
  1202  001A                     	;# 
  1203  001B                     	;# 
  1204  001C                     	;# 
  1205  001E                     	;# 
  1206  001F                     	;# 
  1207  008C                     	;# 
  1208  008E                     	;# 
  1209  0091                     	;# 
  1210  0092                     	;# 
  1211  0095                     	;# 
  1212  0096                     	;# 
  1213  0097                     	;# 
  1214  0098                     	;# 
  1215  0099                     	;# 
  1216  009A                     	;# 
  1217  009B                     	;# 
  1218  009B                     	;# 
  1219  009C                     	;# 
  1220  009D                     	;# 
  1221  009E                     	;# 
  1222  010C                     	;# 
  1223  010E                     	;# 
  1224  0111                     	;# 
  1225  0112                     	;# 
  1226  0113                     	;# 
  1227  0114                     	;# 
  1228  0115                     	;# 
  1229  0116                     	;# 
  1230  0117                     	;# 
  1231  0118                     	;# 
  1232  0119                     	;# 
  1233  011A                     	;# 
  1234  011B                     	;# 
  1235  011D                     	;# 
  1236  011D                     	;# 
  1237  018C                     	;# 
  1238  018E                     	;# 
  1239  0191                     	;# 
  1240  0191                     	;# 
  1241  0192                     	;# 
  1242  0193                     	;# 
  1243  0193                     	;# 
  1244  0193                     	;# 
  1245  0194                     	;# 
  1246  0195                     	;# 
  1247  0196                     	;# 
  1248  0199                     	;# 
  1249  019A                     	;# 
  1250  019B                     	;# 
  1251  019B                     	;# 
  1252  019B                     	;# 
  1253  019B                     	;# 
  1254  019C                     	;# 
  1255  019C                     	;# 
  1256  019D                     	;# 
  1257  019E                     	;# 
  1258  019F                     	;# 
  1259  020C                     	;# 
  1260  020E                     	;# 
  1261  0211                     	;# 
  1262  0211                     	;# 
  1263  0212                     	;# 
  1264  0212                     	;# 
  1265  0213                     	;# 
  1266  0213                     	;# 
  1267  0214                     	;# 
  1268  0214                     	;# 
  1269  0215                     	;# 
  1270  0215                     	;# 
  1271  0215                     	;# 
  1272  0216                     	;# 
  1273  0216                     	;# 
  1274  0217                     	;# 
  1275  0217                     	;# 
  1276  0291                     	;# 
  1277  0291                     	;# 
  1278  0292                     	;# 
  1279  0293                     	;# 
  1280  0294                     	;# 
  1281  0295                     	;# 
  1282  0295                     	;# 
  1283  0296                     	;# 
  1284  0391                     	;# 
  1285  0392                     	;# 
  1286  0393                     	;# 
  1287  039A                     	;# 
  1288  039C                     	;# 
  1289  039D                     	;# 
  1290  039E                     	;# 
  1291  039F                     	;# 
  1292  0FE4                     	;# 
  1293  0FE5                     	;# 
  1294  0FE6                     	;# 
  1295  0FE7                     	;# 
  1296  0FE8                     	;# 
  1297  0FE9                     	;# 
  1298  0FEA                     	;# 
  1299  0FEB                     	;# 
  1300  0FED                     	;# 
  1301  0FEE                     	;# 
  1302  0FEF                     	;# 
  1303                           
  1304                           	psect	stringtext1
  1305  0215                     __pstringtext1:
  1306  0215                     _filt:
  1307  0215  34C7               	retlw	199
  1308  0216  3440               	retlw	64
  1309  0217  3400               	retlw	0
  1310  0218  3400               	retlw	0
  1311  0219  34CF               	retlw	207
  1312  021A  3440               	retlw	64
  1313  021B  3400               	retlw	0
  1314  021C  3400               	retlw	0
  1315  021D  346F               	retlw	111
  1316  021E  3440               	retlw	64
  1317  021F  3400               	retlw	0
  1318  0220  3400               	retlw	0
  1319  0221  343F               	retlw	63
  1320  0222  3440               	retlw	64
  1321  0223  3400               	retlw	0
  1322  0224  3400               	retlw	0
  1323  0225  340F               	retlw	15
  1324  0226  3489               	retlw	137
  1325  0227  3400               	retlw	0
  1326  0228  3400               	retlw	0
  1327  0229  340F               	retlw	15
  1328  022A  3488               	retlw	136
  1329  022B  3400               	retlw	0
  1330  022C  3400               	retlw	0
  1331  022D  340F               	retlw	15
  1332  022E  34A4               	retlw	164
  1333  022F  3400               	retlw	0
  1334  0230  3400               	retlw	0
  1335  0231  340F               	retlw	15
  1336  0232  3409               	retlw	9
  1337  0233  3401               	retlw	1
  1338  0234  3400               	retlw	0
  1339  0235  340F               	retlw	15
  1340  0236  3408               	retlw	8
  1341  0237  3401               	retlw	1
  1342  0238  3400               	retlw	0
  1343  0239  340F               	retlw	15
  1344  023A  3424               	retlw	36
  1345  023B  3401               	retlw	1
  1346  023C  3400               	retlw	0
  1347  023D  340F               	retlw	15
  1348  023E  3432               	retlw	50
  1349  023F  3401               	retlw	1
  1350  0240  3400               	retlw	0
  1351  0241                     __end_of_filt:
  1352                           
  1353                           	psect	stringtext2
  1354  034F                     __pstringtext2:
  1355  034F                     _freqs:
  1356  034F  3400               	retlw	0
  1357  0350  3401               	retlw	1
  1358  0351  3402               	retlw	2
  1359  0352  3403               	retlw	3
  1360  0353  3404               	retlw	4
  1361  0354  3405               	retlw	5
  1362  0355  3406               	retlw	6
  1363  0356  3407               	retlw	7
  1364  0357  3408               	retlw	8
  1365  0358  3409               	retlw	9
  1366  0359  340A               	retlw	10
  1367  035A                     __end_of_freqs:
  1368                           
  1369                           	psect	stringtext3
  1370  035A                     __pstringtext3:
  1371  035A                     _gains:
  1372  035A  3404               	retlw	4
  1373  035B  3405               	retlw	5
  1374  035C  3407               	retlw	7
  1375  035D  3403               	retlw	3
  1376  035E  3423               	retlw	35
  1377  035F  3463               	retlw	99
  1378  0360  346B               	retlw	107
  1379  0361  347B               	retlw	123
  1380  0362                     __end_of_gains:
  1381  000E                     _PORTC	set	14
  1382  0015                     _TMR0	set	21
  1383  005E                     _PEIE	set	94
  1384  005F                     _GIE	set	95
  1385  008C                     _TXIF	set	140
  1386  008D                     _RCIF	set	141
  1387  005D                     _TMR0IE	set	93
  1388  005A                     _TMR0IF	set	90
  1389  0065                     _RA5	set	101
  1390  009B                     _ADRESL	set	155
  1391  009C                     _ADRESH	set	156
  1392  009E                     _ADCON1	set	158
  1393  009D                     _ADCON0	set	157
  1394  0098                     _OSCTUNE	set	152
  1395  009A                     _OSCSTAT	set	154
  1396  0099                     _OSCCON	set	153
  1397  0095                     _OPTION_REGbits	set	149
  1398  008C                     _TRISA	set	140
  1399  008E                     _TRISC	set	142
  1400  04E9                     _ADGO	set	1257
  1401  048D                     _RCIE	set	1165
  1402  04AD                     _TMR0CS	set	1197
  1403  04AB                     _PSA	set	1195
  1404  04A8                     _PS0	set	1192
  1405  04A9                     _PS1	set	1193
  1406  04AA                     _PS2	set	1194
  1407  048C                     _TXIE	set	1164
  1408  011D                     _APFCON	set	285
  1409  010E                     _LATC	set	270
  1410  010C                     _LATA	set	268
  1411  08EA                     _TXCKSEL	set	2282
  1412  08EF                     _RXDTSEL	set	2287
  1413  019B                     _SPBRGL	set	411
  1414  019C                     _SPBRGH	set	412
  1415  019A                     _TXREG	set	410
  1416  0199                     _RCREG	set	409
  1417  018E                     _ANSELC	set	398
  1418  018C                     _ANSELA	set	396
  1419  0CF5                     _TXEN	set	3317
  1420  0CEF                     _SPEN	set	3311
  1421  0CF4                     _SYNC	set	3316
  1422  0CFB                     _BRG16	set	3323
  1423  0CF2                     _BRGH	set	3314
  1424  0CEC                     _CREN	set	3308
  1425  0CE9                     _OERR	set	3305
  1426  0CFC                     _SCKP	set	3324
  1427  020E                     _WPUC	set	526
  1428  020C                     _WPUA	set	524
  1429  039A                     _CLKRCON	set	922
  1430                           
  1431                           	psect	cinit
  1432  0053                     start_initialization:	
  1433                           ; #config settings
  1434                           
  1435  0053                     __initialization:
  1436                           
  1437                           ; Clear objects allocated to COMMON
  1438  0053  01F6               	clrf	__pbssCOMMON& (0+127)
  1439  0054  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1440  0055  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1441  0056  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1442                           
  1443                           ; Clear objects allocated to BANK0
  1444  0057  3020               	movlw	low __pbssBANK0
  1445  0058  0084               	movwf	4
  1446  0059  3000               	movlw	high __pbssBANK0
  1447  005A  0085               	movwf	5
  1448  005B  3028               	movlw	40
  1449  005C  2369               	fcall	clear_ram0
  1450  005D                     end_of_initialization:	
  1451                           ;End of C runtime variable initialization code
  1452                           
  1453  005D                     __end_of__initialization:
  1454  005D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1455  005E  0020               	movlb	0
  1456  005F  2A41               	ljmp	_main	;jump to C main() function
  1457                           
  1458                           	psect	bssCOMMON
  1459  0076                     __pbssCOMMON:
  1460  0076                     _USART_rx_flag:
  1461  0076                     	ds	1
  1462  0077                     _USART_tx_flag:
  1463  0077                     	ds	1
  1464  0078                     _USART_tx_length:
  1465  0078                     	ds	1
  1466  0079                     _USART_tx_index:
  1467  0079                     	ds	1
  1468                           
  1469                           	psect	bssBANK0
  1470  0020                     __pbssBANK0:
  1471  0020                     _USART_tx_data:
  1472  0020                     	ds	15
  1473  002F                     _USART_rx_data:
  1474  002F                     	ds	10
  1475  0039                     _TIMER0_timeout:
  1476  0039                     	ds	2
  1477  003B                     _mess_rec_size:
  1478  003B                     	ds	1
  1479  003C                     _USART_rx_index:
  1480  003C                     	ds	1
  1481  003D                     _TIMER0_flag:
  1482  003D                     	ds	1
  1483  003E                     _mess_rec:
  1484  003E                     	ds	10
  1485                           
  1486                           	psect	clrtext
  1487  0369                     clear_ram0:	
  1488                           ;	Called with FSR0 containing the base address, and
  1489                           ;	WREG with the size to clear
  1490                           
  1491  0369  0064               	clrwdt	;clear the watchdog before getting into this loop
  1492  036A                     clrloop0:
  1493  036A  0180               	clrf	0	;clear RAM location pointed to by FSR
  1494  036B  3101               	addfsr 0,1
  1495  036C  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1496  036D  2B6A               	goto	clrloop0	;have we reached the end yet?
  1497  036E  3400               	retlw	0	;all done for this memory range, return
  1498                           
  1499                           	psect	cstackCOMMON
  1500  0070                     __pcstackCOMMON:
  1501  0070                     ?_OSCILLATOR_Initialize:
  1502  0070                     ?_setup_TMR0:	
  1503                           ; 1 bytes @ 0x0
  1504                           
  1505  0070                     ?_start_TX_USART_ISR:	
  1506                           ; 1 bytes @ 0x0
  1507                           
  1508  0070                     ?_start_RX_USART_ISR:	
  1509                           ; 1 bytes @ 0x0
  1510                           
  1511  0070                     ?_start_RCM:	
  1512                           ; 1 bytes @ 0x0
  1513                           
  1514  0070                     ?_setup_ADC:	
  1515                           ; 1 bytes @ 0x0
  1516                           
  1517  0070                     ?_sweep:	
  1518                           ; 1 bytes @ 0x0
  1519                           
  1520  0070                     ?_stop_TMR0_ISR:	
  1521                           ; 1 bytes @ 0x0
  1522                           
  1523  0070                     ??_stop_TMR0_ISR:	
  1524                           ; 1 bytes @ 0x0
  1525                           
  1526  0070                     ?_start_TMR0_ISR:	
  1527                           ; 1 bytes @ 0x0
  1528                           
  1529  0070                     ??_start_TMR0_ISR:	
  1530                           ; 1 bytes @ 0x0
  1531                           
  1532  0070                     ?_PIN_MANAGER_Initialize:	
  1533                           ; 1 bytes @ 0x0
  1534                           
  1535  0070                     ?_SYSTEM_Initialize:	
  1536                           ; 1 bytes @ 0x0
  1537                           
  1538  0070                     ?_USARTX_change_pol:	
  1539                           ; 1 bytes @ 0x0
  1540                           
  1541  0070                     ?_main:	
  1542                           ; 1 bytes @ 0x0
  1543                           
  1544  0070                     ?_isr:	
  1545                           ; 1 bytes @ 0x0
  1546                           
  1547  0070                     ?_close_RX_USART:	
  1548                           ; 1 bytes @ 0x0
  1549                           
  1550  0070                     ?i1_start_RX_USART_ISR:	
  1551                           ; 1 bytes @ 0x0
  1552                           
  1553  0070                     ??i1_start_RX_USART_ISR:	
  1554                           ; 1 bytes @ 0x0
  1555                           
  1556                           
  1557                           ; 1 bytes @ 0x0
  1558  0070                     	ds	2
  1559  0072                     start_TMR0_ISR@val:
  1560                           
  1561                           ; 1 bytes @ 0x2
  1562  0072                     	ds	1
  1563  0073                     ??_isr:
  1564                           
  1565                           ; 1 bytes @ 0x3
  1566  0073                     	ds	1
  1567  0074                     ??_OSCILLATOR_Initialize:
  1568  0074                     ??_setup_TMR0:	
  1569                           ; 1 bytes @ 0x4
  1570                           
  1571  0074                     ??_start_TX_USART_ISR:	
  1572                           ; 1 bytes @ 0x4
  1573                           
  1574  0074                     ??_start_RX_USART_ISR:	
  1575                           ; 1 bytes @ 0x4
  1576                           
  1577  0074                     ??_start_RCM:	
  1578                           ; 1 bytes @ 0x4
  1579                           
  1580  0074                     ??_setup_ADC:	
  1581                           ; 1 bytes @ 0x4
  1582                           
  1583  0074                     ?_calculate_checksum:	
  1584                           ; 1 bytes @ 0x4
  1585                           
  1586  0074                     ??_PIN_MANAGER_Initialize:	
  1587                           ; 1 bytes @ 0x4
  1588                           
  1589  0074                     ??_SYSTEM_Initialize:	
  1590                           ; 1 bytes @ 0x4
  1591                           
  1592  0074                     ??_USARTX_change_pol:	
  1593                           ; 1 bytes @ 0x4
  1594                           
  1595  0074                     ?_config:	
  1596                           ; 1 bytes @ 0x4
  1597                           
  1598  0074                     ?_setGain:	
  1599                           ; 1 bytes @ 0x4
  1600                           
  1601  0074                     ?_setFreq:	
  1602                           ; 1 bytes @ 0x4
  1603                           
  1604  0074                     ??_close_RX_USART:	
  1605                           ; 1 bytes @ 0x4
  1606                           
  1607  0074                     ?_lputs_ISR:	
  1608                           ; 1 bytes @ 0x4
  1609                           
  1610  0074                     ?_ADC_5:	
  1611                           ; 1 bytes @ 0x4
  1612                           
  1613  0074                     setGain@gain_index:	
  1614                           ; 2 bytes @ 0x4
  1615                           
  1616  0074                     setFreq@freq_index:	
  1617                           ; 1 bytes @ 0x4
  1618                           
  1619  0074                     lputs_ISR@length:	
  1620                           ; 1 bytes @ 0x4
  1621                           
  1622  0074                     calculate_checksum@num:	
  1623                           ; 1 bytes @ 0x4
  1624                           
  1625  0074                     config@conf:	
  1626                           ; 1 bytes @ 0x4
  1627                           
  1628                           
  1629                           ; 2 bytes @ 0x4
  1630  0074                     	ds	1
  1631  0075                     ??_setGain:
  1632  0075                     ??_setFreq:	
  1633                           ; 1 bytes @ 0x5
  1634                           
  1635                           
  1636                           ; 1 bytes @ 0x5
  1637  0075                     	ds	1
  1638                           
  1639                           	psect	cstackBANK0
  1640  0048                     __pcstackBANK0:
  1641  0048                     ??_ADC_5:
  1642  0048                     ??_calculate_checksum:	
  1643                           ; 1 bytes @ 0x0
  1644                           
  1645  0048                     ??_config:	
  1646                           ; 1 bytes @ 0x0
  1647                           
  1648  0048                     ??_lputs_ISR:	
  1649                           ; 1 bytes @ 0x0
  1650                           
  1651  0048                     setGain@aux:	
  1652                           ; 1 bytes @ 0x0
  1653                           
  1654  0048                     setFreq@asic:	
  1655                           ; 1 bytes @ 0x0
  1656                           
  1657                           
  1658                           ; 1 bytes @ 0x0
  1659  0048                     	ds	1
  1660  0049                     config@i:
  1661  0049                     setGain@asic:	
  1662                           ; 1 bytes @ 0x1
  1663                           
  1664  0049                     setFreq@aux:	
  1665                           ; 1 bytes @ 0x1
  1666                           
  1667                           
  1668                           ; 1 bytes @ 0x1
  1669  0049                     	ds	1
  1670  004A                     config@out:
  1671  004A                     lputs_ISR@i:	
  1672                           ; 1 bytes @ 0x2
  1673                           
  1674  004A                     calculate_checksum@check:	
  1675                           ; 1 bytes @ 0x2
  1676                           
  1677  004A                     ADC_5@ADC_value:	
  1678                           ; 1 bytes @ 0x2
  1679                           
  1680                           
  1681                           ; 2 bytes @ 0x2
  1682  004A                     	ds	1
  1683  004B                     lputs_ISR@data:
  1684  004B                     calculate_checksum@data:	
  1685                           ; 1 bytes @ 0x3
  1686                           
  1687                           
  1688                           ; 1 bytes @ 0x3
  1689  004B                     	ds	1
  1690  004C                     ?_measure:
  1691  004C                     calculate_checksum@i:	
  1692                           ; 1 bytes @ 0x4
  1693                           
  1694  004C                     measure@Q:	
  1695                           ; 1 bytes @ 0x4
  1696                           
  1697                           
  1698                           ; 1 bytes @ 0x4
  1699  004C                     	ds	1
  1700  004D                     measure@asic:
  1701                           
  1702                           ; 2 bytes @ 0x5
  1703  004D                     	ds	2
  1704  004F                     ??_measure:
  1705                           
  1706                           ; 1 bytes @ 0x7
  1707  004F                     	ds	2
  1708  0051                     measure@offset:
  1709                           
  1710                           ; 2 bytes @ 0x9
  1711  0051                     	ds	2
  1712  0053                     measure@I:
  1713                           
  1714                           ; 1 bytes @ 0xB
  1715  0053                     	ds	1
  1716  0054                     measure@value:
  1717                           
  1718                           ; 2 bytes @ 0xC
  1719  0054                     	ds	2
  1720  0056                     measure@aux2:
  1721                           
  1722                           ; 2 bytes @ 0xE
  1723  0056                     	ds	2
  1724  0058                     measure@aux1:
  1725                           
  1726                           ; 2 bytes @ 0x10
  1727  0058                     	ds	2
  1728  005A                     ??_sweep:
  1729                           
  1730                           ; 1 bytes @ 0x12
  1731  005A                     	ds	2
  1732  005C                     sweep@check:
  1733                           
  1734                           ; 1 bytes @ 0x14
  1735  005C                     	ds	1
  1736  005D                     sweep@aux:
  1737                           
  1738                           ; 7 bytes @ 0x15
  1739  005D                     	ds	7
  1740  0064                     sweep@freq_index:
  1741                           
  1742                           ; 1 bytes @ 0x1C
  1743  0064                     	ds	1
  1744  0065                     sweep@i:
  1745                           
  1746                           ; 1 bytes @ 0x1D
  1747  0065                     	ds	1
  1748  0066                     sweep@count:
  1749                           
  1750                           ; 1 bytes @ 0x1E
  1751  0066                     	ds	1
  1752  0067                     sweep@I:
  1753                           
  1754                           ; 2 bytes @ 0x1F
  1755  0067                     	ds	2
  1756  0069                     sweep@Q:
  1757                           
  1758                           ; 2 bytes @ 0x21
  1759  0069                     	ds	2
  1760  006B                     sweep@gain_index:
  1761                           
  1762                           ; 1 bytes @ 0x23
  1763  006B                     	ds	1
  1764  006C                     sweep@ret:
  1765                           
  1766                           ; 1 bytes @ 0x24
  1767  006C                     	ds	1
  1768  006D                     sweep@asic:
  1769                           
  1770                           ; 2 bytes @ 0x25
  1771  006D                     	ds	2
  1772  006F                     ??_main:
  1773                           
  1774                           ; 1 bytes @ 0x27
  1775  006F                     	ds	1
  1776                           
  1777                           	psect	maintext
  1778  0241                     __pmaintext:	
  1779 ;;
  1780 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1781 ;;
  1782 ;; *************** function _main *****************
  1783 ;; Defined at:
  1784 ;;		line 30 in file "main.c"
  1785 ;; Parameters:    Size  Location     Type
  1786 ;;		None
  1787 ;; Auto vars:     Size  Location     Type
  1788 ;;  i               1    0        unsigned char 
  1789 ;; Return value:  Size  Location     Type
  1790 ;;                  1    wreg      void 
  1791 ;; Registers used:
  1792 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1793 ;; Tracked objects:
  1794 ;;		On entry : B1F/0
  1795 ;;		On exit  : 1F/0
  1796 ;;		Unchanged: 0/0
  1797 ;; Data sizes:     COMMON   BANK0   BANK1
  1798 ;;      Params:         0       0       0
  1799 ;;      Locals:         0       0       0
  1800 ;;      Temps:          0       1       0
  1801 ;;      Totals:         0       1       0
  1802 ;;Total ram usage:        1 bytes
  1803 ;; Hardware stack levels required when called:    5
  1804 ;; This function calls:
  1805 ;;		_SYSTEM_Initialize
  1806 ;;		_USARTX_change_pol
  1807 ;;		_setup_ADC
  1808 ;;		_setup_TMR0
  1809 ;;		_start_RCM
  1810 ;;		_start_RX_USART_ISR
  1811 ;;		_start_TX_USART_ISR
  1812 ;;		_sweep
  1813 ;; This function is called by:
  1814 ;;		Startup code after reset
  1815 ;; This function uses a non-reentrant model
  1816 ;;
  1817                           
  1818                           
  1819                           ;psect for function _main
  1820  0241                     _main:
  1821                           
  1822                           ;main.c: 32:     unsigned char i;;main.c: 35:         USARTX_change_pol();
  1823                           
  1824                           ;incstack = 0
  1825                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1826  0241  2385               	fcall	_USARTX_change_pol
  1827                           
  1828                           ;main.c: 37:     SYSTEM_Initialize();
  1829  0242  2388               	fcall	_SYSTEM_Initialize
  1830                           
  1831                           ;main.c: 39:     setup_TMR0();
  1832  0243  236F               	fcall	_setup_TMR0
  1833                           
  1834                           ;main.c: 40:     start_TX_USART_ISR();
  1835  0244  2331               	fcall	_start_TX_USART_ISR
  1836                           
  1837                           ;main.c: 41:     start_RX_USART_ISR();
  1838  0245  2321               	fcall	_start_RX_USART_ISR
  1839                           
  1840                           ;main.c: 42:     start_RCM();
  1841  0246  2381               	fcall	_start_RCM
  1842                           
  1843                           ;main.c: 43:     setup_ADC();
  1844  0247  2375               	fcall	_setup_ADC
  1845                           
  1846                           ;main.c: 46:     RA5 = 0;
  1847  0248  0020               	movlb	0	; select bank0
  1848  0249  128C               	bcf	12,5	;volatile
  1849                           
  1850                           ;main.c: 47:     _delay((unsigned long)((150)*(500000/4000.0)));
  1851  024A  3019               	movlw	25
  1852  024B  0020               	movlb	0	; select bank0
  1853  024C  00EF               	movwf	??_main
  1854  024D  3058               	movlw	88
  1855  024E                     u1197:
  1856  024E  0B89               	decfsz	9,f
  1857  024F  2A4E               	goto	u1197
  1858  0250  0BEF               	decfsz	??_main,f
  1859  0251  2A4E               	goto	u1197
  1860  0252  0000               	nop
  1861                           
  1862                           ;main.c: 48:     RA5 = 1;
  1863  0253  0020               	movlb	0	; select bank0
  1864  0254  168C               	bsf	12,5	;volatile
  1865  0255                     l121:	
  1866                           ;main.c: 120:     while(1) {
  1867                           
  1868  0255  0064               	clrwdt	;# 
  1869                           
  1870                           ;main.c: 123:         if (TIMER0_flag) {
  1871  0256  0020               	movlb	0	; select bank0
  1872  0257  083D               	movf	_TIMER0_flag,w	;volatile
  1873  0258  1903               	btfsc	3,2
  1874  0259  2A55               	goto	l121
  1875                           
  1876                           ;main.c: 124:               TIMER0_flag = 0;
  1877  025A  01BD               	clrf	_TIMER0_flag	;volatile
  1878                           
  1879                           ;main.c: 126:               if (USART_rx_index > 10) {
  1880  025B  300B               	movlw	11
  1881  025C  023C               	subwf	_USART_rx_index,w	;volatile
  1882  025D  1C03               	skipc
  1883  025E  2A61               	goto	l2191
  1884                           
  1885                           ;main.c: 127:                 USART_rx_index = 0;
  1886  025F  01BC               	clrf	_USART_rx_index	;volatile
  1887                           
  1888                           ;main.c: 128:                 continue;
  1889  0260  2A55               	goto	l121
  1890  0261                     l2191:
  1891                           
  1892                           ;main.c: 131:               if(USART_rx_index == 0)
  1893  0261  083C               	movf	_USART_rx_index,w	;volatile
  1894  0262  1903               	btfsc	3,2
  1895  0263  2A55               	goto	l121
  1896                           
  1897                           ;main.c: 135:               mess_rec_size = USART_rx_index;
  1898  0264  083C               	movf	_USART_rx_index,w	;volatile
  1899  0265  00EF               	movwf	??_main
  1900  0266  086F               	movf	??_main,w
  1901  0267  00BB               	movwf	_mess_rec_size	;volatile
  1902                           
  1903                           ;main.c: 136:               USART_rx_index = 0;
  1904  0268  01BC               	clrf	_USART_rx_index	;volatile
  1905                           
  1906                           ;main.c: 141:               sweep();
  1907  0269  2103               	fcall	_sweep
  1908  026A  2A55               	goto	l121
  1909  026B                     __end_of_main:
  1910                           
  1911                           	psect	text1
  1912  0103                     __ptext1:	
  1913 ;; *************** function _sweep *****************
  1914 ;; Defined at:
  1915 ;;		line 444 in file "comm.c"
  1916 ;; Parameters:    Size  Location     Type
  1917 ;;		None
  1918 ;; Auto vars:     Size  Location     Type
  1919 ;;  aux             7   21[BANK0 ] unsigned char [7]
  1920 ;;  asic            2   37[BANK0 ] struct .
  1921 ;;  Q               2   33[BANK0 ] short 
  1922 ;;  I               2   31[BANK0 ] short 
  1923 ;;  ret             1   36[BANK0 ] unsigned char 
  1924 ;;  gain_index      1   35[BANK0 ] unsigned char 
  1925 ;;  count           1   30[BANK0 ] unsigned char 
  1926 ;;  i               1   29[BANK0 ] unsigned char 
  1927 ;;  freq_index      1   28[BANK0 ] unsigned char 
  1928 ;;  check           1   20[BANK0 ] unsigned char 
  1929 ;; Return value:  Size  Location     Type
  1930 ;;                  1    wreg      void 
  1931 ;; Registers used:
  1932 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1933 ;; Tracked objects:
  1934 ;;		On entry : 1F/0
  1935 ;;		On exit  : 1F/0
  1936 ;;		Unchanged: 0/0
  1937 ;; Data sizes:     COMMON   BANK0   BANK1
  1938 ;;      Params:         0       0       0
  1939 ;;      Locals:         0      19       0
  1940 ;;      Temps:          0       2       0
  1941 ;;      Totals:         0      21       0
  1942 ;;Total ram usage:       21 bytes
  1943 ;; Hardware stack levels used:    1
  1944 ;; Hardware stack levels required when called:    4
  1945 ;; This function calls:
  1946 ;;		_calculate_checksum
  1947 ;;		_lputs_ISR
  1948 ;;		_measure
  1949 ;;		_setFreq
  1950 ;;		_setGain
  1951 ;; This function is called by:
  1952 ;;		_main
  1953 ;; This function uses a non-reentrant model
  1954 ;;
  1955                           
  1956                           
  1957                           ;psect for function _sweep
  1958  0103                     _sweep:
  1959                           
  1960                           ;comm.c: 446:     unsigned char gain_index;;comm.c: 447:     unsigned char freq_index;;c
      +                          omm.c: 448:     unsigned char i, ret, count;;comm.c: 449:     short I,Q;;comm.c: 450:   
      +                            unsigned char aux[7], check;;comm.c: 453:     BIO3 asic;;comm.c: 454:     asic.datasho
      +                          rt = 0;
  1961                           
  1962                           ;incstack = 0
  1963                           ; Regs used in _sweep: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1964  0103  01ED               	clrf	sweep@asic
  1965  0104  01EE               	clrf	sweep@asic+1
  1966                           
  1967                           ;comm.c: 465:     freq_index = 10;
  1968  0105  300A               	movlw	10
  1969  0106  00DA               	movwf	??_sweep
  1970  0107  085A               	movf	??_sweep,w
  1971  0108  00E4               	movwf	sweep@freq_index
  1972                           
  1973                           ;comm.c: 466:     gain_index = 0;
  1974  0109  01EB               	clrf	sweep@gain_index
  1975                           
  1976                           ;comm.c: 467:     setGain(&asic,gain_index);
  1977  010A  01F4               	clrf	setGain@gain_index
  1978  010B  306D               	movlw	(low (sweep@asic| 0))& (0+255)
  1979  010C  219E               	fcall	_setGain
  1980                           
  1981                           ;comm.c: 470:     for (i = 0; i < 11; i++) {
  1982  010D  0020               	movlb	0	; select bank0
  1983  010E  01E5               	clrf	sweep@i
  1984  010F                     l2109:
  1985                           
  1986                           ;comm.c: 473:         setFreq(&asic,freq_index);
  1987  010F  0864               	movf	sweep@freq_index,w
  1988  0110  00DA               	movwf	??_sweep
  1989  0111  085A               	movf	??_sweep,w
  1990  0112  00F4               	movwf	setFreq@freq_index
  1991  0113  306D               	movlw	(low (sweep@asic| 0))& (0+255)
  1992  0114  2294               	fcall	_setFreq
  1993                           
  1994                           ;comm.c: 480:         count = 0;
  1995  0115  0020               	movlb	0	; select bank0
  1996  0116  01E6               	clrf	sweep@count
  1997  0117                     l2115:
  1998                           
  1999                           ;comm.c: 485:             ret = measure(&I,&Q,asic);
  2000  0117  3069               	movlw	(low (sweep@Q| 0))& (0+255)
  2001  0118  00DA               	movwf	??_sweep
  2002  0119  085A               	movf	??_sweep,w
  2003  011A  00CC               	movwf	measure@Q
  2004  011B  086E               	movf	sweep@asic+1,w
  2005  011C  00CE               	movwf	measure@asic+1
  2006  011D  086D               	movf	sweep@asic,w
  2007  011E  00CD               	movwf	measure@asic
  2008  011F  3067               	movlw	(low (sweep@I| 0))& (0+255)
  2009  0120  2060               	fcall	_measure
  2010  0121  0020               	movlb	0	; select bank0
  2011  0122  00DB               	movwf	??_sweep+1
  2012  0123  085B               	movf	??_sweep+1,w
  2013  0124  00EC               	movwf	sweep@ret
  2014                           
  2015                           ;comm.c: 487:             if (ret == 1) {
  2016  0125  036C               	decf	sweep@ret,w
  2017  0126  1D03               	btfss	3,2
  2018  0127  2939               	goto	l2131
  2019                           
  2020                           ;comm.c: 489:                 if (count == 2) break;
  2021  0128  3002               	movlw	2
  2022  0129  0666               	xorwf	sweep@count,w
  2023  012A  1903               	btfsc	3,2
  2024  012B  2953               	goto	l2147
  2025                           
  2026                           ;comm.c: 490:                 count = ret;
  2027  012C  086C               	movf	sweep@ret,w
  2028  012D  00DA               	movwf	??_sweep
  2029  012E  085A               	movf	??_sweep,w
  2030  012F  00E6               	movwf	sweep@count
  2031                           
  2032                           ;comm.c: 493:                 if (gain_index < 7) {
  2033  0130  3007               	movlw	7
  2034  0131  026B               	subwf	sweep@gain_index,w
  2035  0132  1803               	skipnc
  2036  0133  2953               	goto	l2147
  2037                           
  2038                           ;comm.c: 497:                     gain_index++;
  2039  0134  3001               	movlw	1
  2040  0135  00DA               	movwf	??_sweep
  2041  0136  085A               	movf	??_sweep,w
  2042  0137  07EB               	addwf	sweep@gain_index,f
  2043  0138  2949               	goto	l2143
  2044  0139                     l2131:	
  2045                           ;comm.c: 499:                 } else {
  2046                           
  2047                           ;comm.c: 498:                     setGain(&asic,gain_index);
  2048                           
  2049  0139  3002               	movlw	2
  2050  013A  066C               	xorwf	sweep@ret,w
  2051  013B  1D03               	btfss	3,2
  2052  013C  294F               	goto	l2145
  2053                           
  2054                           ;comm.c: 507:                 if (count == 1) break;
  2055  013D  0366               	decf	sweep@count,w
  2056  013E  1903               	btfsc	3,2
  2057  013F  2953               	goto	l2147
  2058                           
  2059                           ;comm.c: 508:                 count = ret;
  2060  0140  086C               	movf	sweep@ret,w
  2061  0141  00DA               	movwf	??_sweep
  2062  0142  085A               	movf	??_sweep,w
  2063  0143  00E6               	movwf	sweep@count
  2064                           
  2065                           ;comm.c: 510:                 if (gain_index > 0) {
  2066  0144  086B               	movf	sweep@gain_index,w
  2067  0145  1903               	btfsc	3,2
  2068  0146  2953               	goto	l2147
  2069                           
  2070                           ;comm.c: 511:                     gain_index--;
  2071  0147  3001               	movlw	1
  2072  0148  02EB               	subwf	sweep@gain_index,f
  2073  0149                     l2143:
  2074                           
  2075                           ;comm.c: 512:                     setGain(&asic,gain_index);
  2076  0149  086B               	movf	sweep@gain_index,w
  2077  014A  00DA               	movwf	??_sweep
  2078  014B  085A               	movf	??_sweep,w
  2079  014C  00F4               	movwf	setGain@gain_index
  2080  014D  306D               	movlw	(low (sweep@asic| 0))& (0+255)
  2081  014E  219E               	fcall	_setGain
  2082  014F                     l2145:	
  2083                           ;comm.c: 513:                 } else {
  2084                           
  2085  014F  0020               	movlb	0	; select bank0
  2086  0150  086C               	movf	sweep@ret,w
  2087  0151  1D03               	btfss	3,2
  2088  0152  2917               	goto	l2115
  2089  0153                     l2147:
  2090                           
  2091                           ;comm.c: 526:         ret = (freq_index << 4) & 0xf0;
  2092  0153  0864               	movf	sweep@freq_index,w
  2093  0154  00DA               	movwf	??_sweep
  2094  0155  3003               	movlw	3
  2095  0156                     u1145:
  2096  0156  35DA               	lslf	??_sweep,f
  2097  0157  3EFF               	addlw	-1
  2098  0158  1D03               	skipz
  2099  0159  2956               	goto	u1145
  2100  015A  355A               	lslf	??_sweep,w
  2101  015B  39F0               	andlw	240
  2102  015C  00DB               	movwf	??_sweep+1
  2103  015D  085B               	movf	??_sweep+1,w
  2104  015E  00EC               	movwf	sweep@ret
  2105                           
  2106                           ;comm.c: 527:         ret |= (gain_index & 0xff);
  2107  015F  086B               	movf	sweep@gain_index,w
  2108  0160  00DA               	movwf	??_sweep
  2109  0161  085A               	movf	??_sweep,w
  2110  0162  04EC               	iorwf	sweep@ret,f
  2111                           
  2112                           ;comm.c: 529:         aux[0] = 'f';
  2113  0163  3066               	movlw	102
  2114  0164  00DA               	movwf	??_sweep
  2115  0165  085A               	movf	??_sweep,w
  2116  0166  00DD               	movwf	sweep@aux
  2117                           
  2118                           ;comm.c: 530:         aux[1] = (unsigned char)(I & 0xff);
  2119  0167  0867               	movf	sweep@I,w
  2120  0168  00DA               	movwf	??_sweep
  2121  0169  085A               	movf	??_sweep,w
  2122  016A  00DE               	movwf	sweep@aux+1
  2123                           
  2124                           ;comm.c: 531:         aux[2] = (unsigned char)((I >> 8) & 0xff);
  2125  016B  0868               	movf	sweep@I+1,w
  2126  016C  00DA               	movwf	??_sweep
  2127  016D  085A               	movf	??_sweep,w
  2128  016E  00DF               	movwf	sweep@aux+2
  2129                           
  2130                           ;comm.c: 532:         aux[3] = (unsigned char)(Q & 0xff);
  2131  016F  0869               	movf	sweep@Q,w
  2132  0170  00DA               	movwf	??_sweep
  2133  0171  085A               	movf	??_sweep,w
  2134  0172  00E0               	movwf	sweep@aux+3
  2135                           
  2136                           ;comm.c: 533:         aux[4] = (unsigned char)((Q >> 8) & 0xff);
  2137  0173  086A               	movf	sweep@Q+1,w
  2138  0174  00DA               	movwf	??_sweep
  2139  0175  085A               	movf	??_sweep,w
  2140  0176  00E1               	movwf	sweep@aux+4
  2141                           
  2142                           ;comm.c: 534:         aux[5] = ret;
  2143  0177  086C               	movf	sweep@ret,w
  2144  0178  00DA               	movwf	??_sweep
  2145  0179  085A               	movf	??_sweep,w
  2146  017A  00E2               	movwf	sweep@aux+5
  2147                           
  2148                           ;comm.c: 536:         check = calculate_checksum(aux,6);
  2149  017B  3006               	movlw	6
  2150  017C  00DA               	movwf	??_sweep
  2151  017D  085A               	movf	??_sweep,w
  2152  017E  00F4               	movwf	calculate_checksum@num
  2153  017F  305D               	movlw	(low (sweep@aux| 0))& (0+255)
  2154  0180  22F8               	fcall	_calculate_checksum
  2155  0181  00DB               	movwf	??_sweep+1
  2156  0182  085B               	movf	??_sweep+1,w
  2157  0183  00DC               	movwf	sweep@check
  2158                           
  2159                           ;comm.c: 537:         aux[6] = check;
  2160  0184  085C               	movf	sweep@check,w
  2161  0185  00DA               	movwf	??_sweep
  2162  0186  085A               	movf	??_sweep,w
  2163  0187  00E3               	movwf	sweep@aux+6
  2164                           
  2165                           ;comm.c: 540:         { ADCON0 = 0b00100100;};
  2166  0188  3024               	movlw	36
  2167  0189  0021               	movlb	1	; select bank1
  2168  018A  009D               	movwf	29	;volatile
  2169                           
  2170                           ;comm.c: 542:         lputs_ISR(aux,7);
  2171  018B  3007               	movlw	7
  2172  018C  0020               	movlb	0	; select bank0
  2173  018D  00DA               	movwf	??_sweep
  2174  018E  085A               	movf	??_sweep,w
  2175  018F  00F4               	movwf	lputs_ISR@length
  2176  0190  305D               	movlw	(low (sweep@aux| 0))& (0+255)
  2177  0191  226B               	fcall	_lputs_ISR
  2178                           
  2179                           ;comm.c: 552:         freq_index--;
  2180  0192  3001               	movlw	1
  2181  0193  0020               	movlb	0	; select bank0
  2182  0194  02E4               	subwf	sweep@freq_index,f
  2183                           
  2184                           ;comm.c: 553:     }
  2185  0195  3001               	movlw	1
  2186  0196  00DA               	movwf	??_sweep
  2187  0197  085A               	movf	??_sweep,w
  2188  0198  07E5               	addwf	sweep@i,f
  2189  0199  300B               	movlw	11
  2190  019A  0265               	subwf	sweep@i,w
  2191  019B  1803               	btfsc	3,0
  2192  019C  0008               	return
  2193  019D  290F               	goto	l2109
  2194  019E                     __end_of_sweep:
  2195                           
  2196                           	psect	text2
  2197  019E                     __ptext2:	
  2198 ;; *************** function _setGain *****************
  2199 ;; Defined at:
  2200 ;;		line 162 in file "bio3.c"
  2201 ;; Parameters:    Size  Location     Type
  2202 ;;  asic            1    wreg     PTR struct .
  2203 ;;		 -> sweep@asic(2), 
  2204 ;;  gain_index      1    4[COMMON] unsigned char 
  2205 ;; Auto vars:     Size  Location     Type
  2206 ;;  asic            1    1[BANK0 ] PTR struct .
  2207 ;;		 -> sweep@asic(2), 
  2208 ;;  aux             1    0[BANK0 ] struct .
  2209 ;; Return value:  Size  Location     Type
  2210 ;;                  1    wreg      void 
  2211 ;; Registers used:
  2212 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, pclath
  2213 ;; Tracked objects:
  2214 ;;		On entry : 1F/0
  2215 ;;		On exit  : 0/0
  2216 ;;		Unchanged: 0/0
  2217 ;; Data sizes:     COMMON   BANK0   BANK1
  2218 ;;      Params:         1       0       0
  2219 ;;      Locals:         0       2       0
  2220 ;;      Temps:          1       0       0
  2221 ;;      Totals:         2       2       0
  2222 ;;Total ram usage:        4 bytes
  2223 ;; Hardware stack levels used:    1
  2224 ;; Hardware stack levels required when called:    2
  2225 ;; This function calls:
  2226 ;;		Nothing
  2227 ;; This function is called by:
  2228 ;;		_sweep
  2229 ;; This function uses a non-reentrant model
  2230 ;;
  2231                           
  2232                           
  2233                           ;psect for function _setGain
  2234  019E                     _setGain:
  2235                           
  2236                           ;incstack = 0
  2237                           ; Regs used in _setGain: [wreg-fsr1h+pclath]
  2238                           ;setGain@asic stored from wreg
  2239  019E  00C9               	movwf	setGain@asic
  2240                           
  2241                           ;bio3.c: 162: void setGain(BIO3* asic, unsigned char gain_index);bio3.c: 163: {;bio3.c: 
      +                          164:     RADIO_gain aux;;bio3.c: 165:     aux.data = gains[gain_index];
  2242  019F  0874               	movf	setGain@gain_index,w
  2243  01A0  3E5A               	addlw	low (_gains| (0+32768))
  2244  01A1  0084               	movwf	4
  2245  01A2  3083               	movlw	high (_gains| (0+32768))
  2246  01A3  1803               	skipnc
  2247  01A4  3E01               	addlw	1
  2248  01A5  0085               	movwf	5
  2249  01A6  0800               	movf	0,w	;code access
  2250  01A7  00F5               	movwf	??_setGain
  2251  01A8  0875               	movf	??_setGain,w
  2252  01A9  00C8               	movwf	setGain@aux
  2253                           
  2254                           ;bio3.c: 167:     asic->data_bits.GD0 = aux.data_bits.GD0;
  2255  01AA  0849               	movf	setGain@asic,w
  2256  01AB  0086               	movwf	6
  2257  01AC  0187               	clrf	7
  2258  01AD  1101               	bcf	1,2
  2259  01AE  1848               	btfsc	setGain@aux,0
  2260  01AF  1501               	bsf	1,2
  2261                           
  2262                           ;bio3.c: 168:     asic->data_bits.GD1 = aux.data_bits.GD1;
  2263  01B0  0020               	movlb	0	; select bank0
  2264  01B1  0849               	movf	setGain@asic,w
  2265  01B2  0086               	movwf	6
  2266  01B3  0187               	clrf	7
  2267  01B4  1181               	bcf	1,3
  2268  01B5  18C8               	btfsc	setGain@aux,1
  2269  01B6  1581               	bsf	1,3
  2270                           
  2271                           ;bio3.c: 169:     asic->data_bits.GD2 = aux.data_bits.GD2;
  2272  01B7  0020               	movlb	0	; select bank0
  2273  01B8  0849               	movf	setGain@asic,w
  2274  01B9  0086               	movwf	6
  2275  01BA  0187               	clrf	7
  2276  01BB  1201               	bcf	1,4
  2277  01BC  1948               	btfsc	setGain@aux,2
  2278  01BD  1601               	bsf	1,4
  2279                           
  2280                           ;bio3.c: 170:     asic->data_bits.GS0 = aux.data_bits.GS0;
  2281  01BE  0020               	movlb	0	; select bank0
  2282  01BF  0849               	movf	setGain@asic,w
  2283  01C0  0086               	movwf	6
  2284  01C1  0187               	clrf	7
  2285  01C2  1381               	bcf	1,7
  2286  01C3  19C8               	btfsc	setGain@aux,3
  2287  01C4  1781               	bsf	1,7
  2288                           
  2289                           ;bio3.c: 171:     asic->data_bits.GS1 = aux.data_bits.GS1;
  2290  01C5  0020               	movlb	0	; select bank0
  2291  01C6  0A49               	incf	setGain@asic,w
  2292  01C7  0086               	movwf	6
  2293  01C8  0187               	clrf	7
  2294  01C9  1001               	bcf	1,0
  2295  01CA  1A48               	btfsc	setGain@aux,4
  2296  01CB  1401               	bsf	1,0
  2297                           
  2298                           ;bio3.c: 172:     asic->data_bits.GS2 = aux.data_bits.GS2;
  2299  01CC  0020               	movlb	0	; select bank0
  2300  01CD  0A49               	incf	setGain@asic,w
  2301  01CE  0086               	movwf	6
  2302  01CF  0187               	clrf	7
  2303  01D0  1081               	bcf	1,1
  2304  01D1  1AC8               	btfsc	setGain@aux,5
  2305  01D2  1481               	bsf	1,1
  2306                           
  2307                           ;bio3.c: 173:     asic->data_bits.GS3 = aux.data_bits.GS3;
  2308  01D3  0020               	movlb	0	; select bank0
  2309  01D4  0A49               	incf	setGain@asic,w
  2310  01D5  0086               	movwf	6
  2311  01D6  0187               	clrf	7
  2312  01D7  1101               	bcf	1,2
  2313  01D8  1B48               	btfsc	setGain@aux,6
  2314  01D9  1501               	bsf	1,2
  2315  01DA  0008               	return
  2316  01DB                     __end_of_setGain:
  2317                           
  2318                           	psect	text3
  2319  0294                     __ptext3:	
  2320 ;; *************** function _setFreq *****************
  2321 ;; Defined at:
  2322 ;;		line 176 in file "bio3.c"
  2323 ;; Parameters:    Size  Location     Type
  2324 ;;  asic            1    wreg     PTR struct .
  2325 ;;		 -> sweep@asic(2), 
  2326 ;;  freq_index      1    4[COMMON] unsigned char 
  2327 ;; Auto vars:     Size  Location     Type
  2328 ;;  asic            1    0[BANK0 ] PTR struct .
  2329 ;;		 -> sweep@asic(2), 
  2330 ;;  aux             1    1[BANK0 ] struct .
  2331 ;; Return value:  Size  Location     Type
  2332 ;;                  1    wreg      void 
  2333 ;; Registers used:
  2334 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, pclath
  2335 ;; Tracked objects:
  2336 ;;		On entry : 1F/0
  2337 ;;		On exit  : 0/0
  2338 ;;		Unchanged: 0/0
  2339 ;; Data sizes:     COMMON   BANK0   BANK1
  2340 ;;      Params:         1       0       0
  2341 ;;      Locals:         0       2       0
  2342 ;;      Temps:          1       0       0
  2343 ;;      Totals:         2       2       0
  2344 ;;Total ram usage:        4 bytes
  2345 ;; Hardware stack levels used:    1
  2346 ;; Hardware stack levels required when called:    2
  2347 ;; This function calls:
  2348 ;;		Nothing
  2349 ;; This function is called by:
  2350 ;;		_sweep
  2351 ;; This function uses a non-reentrant model
  2352 ;;
  2353                           
  2354                           
  2355                           ;psect for function _setFreq
  2356  0294                     _setFreq:
  2357                           
  2358                           ;incstack = 0
  2359                           ; Regs used in _setFreq: [wreg-fsr1h+pclath]
  2360                           ;setFreq@asic stored from wreg
  2361  0294  00C8               	movwf	setFreq@asic
  2362                           
  2363                           ;bio3.c: 176: void setFreq(BIO3* asic, unsigned char freq_index);bio3.c: 177: {;bio3.c: 
      +                          178:     RADIO_freq aux;;bio3.c: 179:     aux.data = freqs[freq_index];
  2364  0295  0874               	movf	setFreq@freq_index,w
  2365  0296  3E4F               	addlw	low (_freqs| (0+32768))
  2366  0297  0084               	movwf	4
  2367  0298  3083               	movlw	high (_freqs| (0+32768))
  2368  0299  1803               	skipnc
  2369  029A  3E01               	addlw	1
  2370  029B  0085               	movwf	5
  2371  029C  0800               	movf	0,w	;code access
  2372  029D  00F5               	movwf	??_setFreq
  2373  029E  0875               	movf	??_setFreq,w
  2374  029F  00C9               	movwf	setFreq@aux
  2375                           
  2376                           ;bio3.c: 181:     asic->data_bits.F0 = aux.data_bits.F0;
  2377  02A0  0A48               	incf	setFreq@asic,w
  2378  02A1  0086               	movwf	6
  2379  02A2  0187               	clrf	7
  2380  02A3  1201               	bcf	1,4
  2381  02A4  1849               	btfsc	setFreq@aux,0
  2382  02A5  1601               	bsf	1,4
  2383                           
  2384                           ;bio3.c: 182:     asic->data_bits.F1 = aux.data_bits.F1;
  2385  02A6  0020               	movlb	0	; select bank0
  2386  02A7  0A48               	incf	setFreq@asic,w
  2387  02A8  0086               	movwf	6
  2388  02A9  0187               	clrf	7
  2389  02AA  1281               	bcf	1,5
  2390  02AB  18C9               	btfsc	setFreq@aux,1
  2391  02AC  1681               	bsf	1,5
  2392                           
  2393                           ;bio3.c: 183:     asic->data_bits.F2 = aux.data_bits.F2;
  2394  02AD  0020               	movlb	0	; select bank0
  2395  02AE  0A48               	incf	setFreq@asic,w
  2396  02AF  0086               	movwf	6
  2397  02B0  0187               	clrf	7
  2398  02B1  1301               	bcf	1,6
  2399  02B2  1949               	btfsc	setFreq@aux,2
  2400  02B3  1701               	bsf	1,6
  2401                           
  2402                           ;bio3.c: 184:     asic->data_bits.F3 = aux.data_bits.F3;
  2403  02B4  0020               	movlb	0	; select bank0
  2404  02B5  0A48               	incf	setFreq@asic,w
  2405  02B6  0086               	movwf	6
  2406  02B7  0187               	clrf	7
  2407  02B8  1381               	bcf	1,7
  2408  02B9  19C9               	btfsc	setFreq@aux,3
  2409  02BA  1781               	bsf	1,7
  2410  02BB  0008               	return
  2411  02BC                     __end_of_setFreq:
  2412                           
  2413                           	psect	text4
  2414  0060                     __ptext4:	
  2415 ;; *************** function _measure *****************
  2416 ;; Defined at:
  2417 ;;		line 561 in file "comm.c"
  2418 ;; Parameters:    Size  Location     Type
  2419 ;;  I               1    wreg     PTR short 
  2420 ;;		 -> sweep@I(2), 
  2421 ;;  Q               1    4[BANK0 ] PTR short 
  2422 ;;		 -> sweep@Q(2), 
  2423 ;;  asic            2    5[BANK0 ] struct .
  2424 ;; Auto vars:     Size  Location     Type
  2425 ;;  I               1   11[BANK0 ] PTR short 
  2426 ;;		 -> sweep@I(2), 
  2427 ;;  aux1            2   16[BANK0 ] short 
  2428 ;;  aux2            2   14[BANK0 ] short 
  2429 ;;  value           2   12[BANK0 ] unsigned short 
  2430 ;;  offset          2    9[BANK0 ] unsigned short 
  2431 ;; Return value:  Size  Location     Type
  2432 ;;                  1    wreg      unsigned char 
  2433 ;; Registers used:
  2434 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2435 ;; Tracked objects:
  2436 ;;		On entry : 1F/0
  2437 ;;		On exit  : 0/0
  2438 ;;		Unchanged: 0/0
  2439 ;; Data sizes:     COMMON   BANK0   BANK1
  2440 ;;      Params:         0       3       0
  2441 ;;      Locals:         0       9       0
  2442 ;;      Temps:          0       2       0
  2443 ;;      Totals:         0      14       0
  2444 ;;Total ram usage:       14 bytes
  2445 ;; Hardware stack levels used:    1
  2446 ;; Hardware stack levels required when called:    3
  2447 ;; This function calls:
  2448 ;;		_ADC_5
  2449 ;;		_config
  2450 ;; This function is called by:
  2451 ;;		_sweep
  2452 ;; This function uses a non-reentrant model
  2453 ;;
  2454                           
  2455                           
  2456                           ;psect for function _measure
  2457  0060                     _measure:
  2458                           
  2459                           ;incstack = 0
  2460                           ; Regs used in _measure: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2461                           ;measure@I stored from wreg
  2462  0060  00D3               	movwf	measure@I
  2463                           
  2464                           ;comm.c: 561: unsigned char measure(short* I, short* Q, BIO3 asic);comm.c: 565: {;comm.c
      +                          : 566:     unsigned short offset, value;;comm.c: 567:     short aux1,aux2;;comm.c: 571: 
      +                              asic.data_bits.CE = 0;
  2465  0061  134D               	bcf	measure@asic,6
  2466                           
  2467                           ;comm.c: 572:     config(asic);
  2468  0062  084E               	movf	measure@asic+1,w
  2469  0063  00F5               	movwf	config@conf+1
  2470  0064  084D               	movf	measure@asic,w
  2471  0065  00F4               	movwf	config@conf
  2472  0066  21DB               	fcall	_config
  2473                           
  2474                           ;comm.c: 573:      _delay((unsigned long)((20)*(500000/4000.0)));
  2475  0067  3004               	movlw	4
  2476  0068  0020               	movlb	0	; select bank0
  2477  0069  00CF               	movwf	??_measure
  2478  006A  303D               	movlw	61
  2479  006B                     u1207:
  2480  006B  0B89               	decfsz	9,f
  2481  006C  286B               	goto	u1207
  2482  006D  0BCF               	decfsz	??_measure,f
  2483  006E  286B               	goto	u1207
  2484  006F  3200               	nop2
  2485                           
  2486                           ;comm.c: 575:     offset = ADC_5();
  2487  0070  22BC               	fcall	_ADC_5
  2488  0071  0875               	movf	?_ADC_5+1,w
  2489  0072  00D2               	movwf	measure@offset+1
  2490  0073  0874               	movf	?_ADC_5,w
  2491  0074  00D1               	movwf	measure@offset
  2492                           
  2493                           ;comm.c: 578:     asic.data_bits.CE = 1;
  2494  0075  174D               	bsf	measure@asic,6
  2495                           
  2496                           ;comm.c: 579:     asic.data_bits.IQ = 0;
  2497  0076  11CE               	bcf	measure@asic+1,3
  2498                           
  2499                           ;comm.c: 581:     config(asic);
  2500  0077  084E               	movf	measure@asic+1,w
  2501  0078  00F5               	movwf	config@conf+1
  2502  0079  084D               	movf	measure@asic,w
  2503  007A  00F4               	movwf	config@conf
  2504  007B  21DB               	fcall	_config
  2505                           
  2506                           ;comm.c: 582:      _delay((unsigned long)((20)*(500000/4000.0)));
  2507  007C  3004               	movlw	4
  2508  007D  0020               	movlb	0	; select bank0
  2509  007E  00CF               	movwf	??_measure
  2510  007F  303D               	movlw	61
  2511  0080                     u1217:
  2512  0080  0B89               	decfsz	9,f
  2513  0081  2880               	goto	u1217
  2514  0082  0BCF               	decfsz	??_measure,f
  2515  0083  2880               	goto	u1217
  2516  0084  3200               	nop2
  2517                           
  2518                           ;comm.c: 584:     value = ADC_5();
  2519  0085  22BC               	fcall	_ADC_5
  2520  0086  0875               	movf	?_ADC_5+1,w
  2521  0087  00D5               	movwf	measure@value+1
  2522  0088  0874               	movf	?_ADC_5,w
  2523  0089  00D4               	movwf	measure@value
  2524                           
  2525                           ;comm.c: 585:     *I = (value - offset);
  2526  008A  0851               	movf	measure@offset,w
  2527  008B  0254               	subwf	measure@value,w
  2528  008C  00CF               	movwf	??_measure
  2529  008D  0852               	movf	measure@offset+1,w
  2530  008E  3B55               	subwfb	measure@value+1,w
  2531  008F  00D0               	movwf	??_measure+1
  2532  0090  0853               	movf	measure@I,w
  2533  0091  0086               	movwf	6
  2534  0092  0187               	clrf	7
  2535  0093  084F               	movf	??_measure,w
  2536  0094  3FC0               	movwi [0]fsr1
  2537  0095  0850               	movf	??_measure+1,w
  2538  0096  3FC1               	movwi [1]fsr1
  2539                           
  2540                           ;comm.c: 586:     aux1 = *I;
  2541  0097  0853               	movf	measure@I,w
  2542  0098  0086               	movwf	6
  2543  0099  0187               	clrf	7
  2544  009A  3F40               	moviw [0]fsr1
  2545  009B  00D8               	movwf	measure@aux1
  2546  009C  3F41               	moviw [1]fsr1
  2547  009D  00D9               	movwf	measure@aux1+1
  2548                           
  2549                           ;comm.c: 588:     if (aux1 < 0) {
  2550  009E  1FD9               	btfss	measure@aux1+1,7
  2551  009F  28A5               	goto	l2059
  2552                           
  2553                           ;comm.c: 589:         aux1 = -aux1;
  2554  00A0  09D8               	comf	measure@aux1,f
  2555  00A1  09D9               	comf	measure@aux1+1,f
  2556  00A2  0AD8               	incf	measure@aux1,f
  2557  00A3  1903               	skipnz
  2558  00A4  0AD9               	incf	measure@aux1+1,f
  2559  00A5                     l2059:
  2560                           
  2561                           ;comm.c: 595:     asic.data_bits.IQ = 1;
  2562  00A5  15CE               	bsf	measure@asic+1,3
  2563                           
  2564                           ;comm.c: 597:     config(asic);
  2565  00A6  084E               	movf	measure@asic+1,w
  2566  00A7  00F5               	movwf	config@conf+1
  2567  00A8  084D               	movf	measure@asic,w
  2568  00A9  00F4               	movwf	config@conf
  2569  00AA  21DB               	fcall	_config
  2570                           
  2571                           ;comm.c: 598:      _delay((unsigned long)((20)*(500000/4000.0)));
  2572  00AB  3004               	movlw	4
  2573  00AC  0020               	movlb	0	; select bank0
  2574  00AD  00CF               	movwf	??_measure
  2575  00AE  303D               	movlw	61
  2576  00AF                     u1227:
  2577  00AF  0B89               	decfsz	9,f
  2578  00B0  28AF               	goto	u1227
  2579  00B1  0BCF               	decfsz	??_measure,f
  2580  00B2  28AF               	goto	u1227
  2581  00B3  3200               	nop2
  2582                           
  2583                           ;comm.c: 600:     value = ADC_5();
  2584  00B4  22BC               	fcall	_ADC_5
  2585  00B5  0875               	movf	?_ADC_5+1,w
  2586  00B6  00D5               	movwf	measure@value+1
  2587  00B7  0874               	movf	?_ADC_5,w
  2588  00B8  00D4               	movwf	measure@value
  2589                           
  2590                           ;comm.c: 601:     *Q = (value - offset);
  2591  00B9  0851               	movf	measure@offset,w
  2592  00BA  0254               	subwf	measure@value,w
  2593  00BB  00CF               	movwf	??_measure
  2594  00BC  0852               	movf	measure@offset+1,w
  2595  00BD  3B55               	subwfb	measure@value+1,w
  2596  00BE  00D0               	movwf	??_measure+1
  2597  00BF  084C               	movf	measure@Q,w
  2598  00C0  0086               	movwf	6
  2599  00C1  0187               	clrf	7
  2600  00C2  084F               	movf	??_measure,w
  2601  00C3  3FC0               	movwi [0]fsr1
  2602  00C4  0850               	movf	??_measure+1,w
  2603  00C5  3FC1               	movwi [1]fsr1
  2604                           
  2605                           ;comm.c: 602:     aux2 = *Q;
  2606  00C6  084C               	movf	measure@Q,w
  2607  00C7  0086               	movwf	6
  2608  00C8  0187               	clrf	7
  2609  00C9  3F40               	moviw [0]fsr1
  2610  00CA  00D6               	movwf	measure@aux2
  2611  00CB  3F41               	moviw [1]fsr1
  2612  00CC  00D7               	movwf	measure@aux2+1
  2613                           
  2614                           ;comm.c: 604:     if (aux2 < 0) {
  2615  00CD  1FD7               	btfss	measure@aux2+1,7
  2616  00CE  28D4               	goto	l2075
  2617                           
  2618                           ;comm.c: 605:         aux2 = -aux2;
  2619  00CF  09D6               	comf	measure@aux2,f
  2620  00D0  09D7               	comf	measure@aux2+1,f
  2621  00D1  0AD6               	incf	measure@aux2,f
  2622  00D2  1903               	skipnz
  2623  00D3  0AD7               	incf	measure@aux2+1,f
  2624  00D4                     l2075:
  2625                           
  2626                           ;comm.c: 608:     if (aux2 > aux1) {
  2627  00D4  0859               	movf	measure@aux1+1,w
  2628  00D5  3A80               	xorlw	128
  2629  00D6  00CF               	movwf	??_measure
  2630  00D7  0857               	movf	measure@aux2+1,w
  2631  00D8  3A80               	xorlw	128
  2632  00D9  024F               	subwf	??_measure,w
  2633  00DA  1D03               	skipz
  2634  00DB  28DE               	goto	u1045
  2635  00DC  0856               	movf	measure@aux2,w
  2636  00DD  0258               	subwf	measure@aux1,w
  2637  00DE                     u1045:
  2638  00DE  1803               	skipnc
  2639  00DF  28E5               	goto	l416
  2640                           
  2641                           ;comm.c: 609:         aux1 = aux2;
  2642  00E0  0020               	movlb	0	; select bank0
  2643  00E1  0857               	movf	measure@aux2+1,w
  2644  00E2  00D9               	movwf	measure@aux1+1
  2645  00E3  0856               	movf	measure@aux2,w
  2646  00E4  00D8               	movwf	measure@aux1
  2647  00E5                     l416:	
  2648                           ;comm.c: 610:     }
  2649                           
  2650                           
  2651                           ;comm.c: 612:     if (aux1 > 370) {
  2652  00E5  0020               	movlb	0	; select bank0
  2653  00E6  0859               	movf	measure@aux1+1,w
  2654  00E7  3A80               	xorlw	128
  2655  00E8  00CF               	movwf	??_measure
  2656  00E9  3081               	movlw	129
  2657  00EA  024F               	subwf	??_measure,w
  2658  00EB  1D03               	skipz
  2659  00EC  28EF               	goto	u1055
  2660  00ED  3073               	movlw	115
  2661  00EE  0258               	subwf	measure@aux1,w
  2662  00EF                     u1055:
  2663  00EF  1C03               	skipc
  2664  00F0  28F3               	goto	l2085
  2665                           
  2666                           ;comm.c: 613:         return 2;
  2667  00F1  3002               	movlw	2
  2668  00F2  0008               	return
  2669  00F3                     l2085:
  2670  00F3  0020               	movlb	0	; select bank0
  2671  00F4  0859               	movf	measure@aux1+1,w
  2672  00F5  3A80               	xorlw	128
  2673  00F6  00CF               	movwf	??_measure
  2674  00F7  3080               	movlw	128
  2675  00F8  024F               	subwf	??_measure,w
  2676  00F9  1D03               	skipz
  2677  00FA  28FD               	goto	u1065
  2678  00FB  3056               	movlw	86
  2679  00FC  0258               	subwf	measure@aux1,w
  2680  00FD                     u1065:
  2681  00FD  1803               	skipnc
  2682  00FE  2901               	goto	l2091
  2683                           
  2684                           ;comm.c: 615:         return 1;
  2685  00FF  3001               	movlw	1
  2686  0100  0008               	return
  2687  0101                     l2091:
  2688                           
  2689                           ;comm.c: 618:     return 0;
  2690  0101  3000               	movlw	0
  2691  0102  0008               	return
  2692  0103                     __end_of_measure:
  2693                           
  2694                           	psect	text5
  2695  01DB                     __ptext5:	
  2696 ;; *************** function _config *****************
  2697 ;; Defined at:
  2698 ;;		line 132 in file "bio3.c"
  2699 ;; Parameters:    Size  Location     Type
  2700 ;;  conf            2    4[COMMON] struct .
  2701 ;; Auto vars:     Size  Location     Type
  2702 ;;  out             1    2[BANK0 ] unsigned char 
  2703 ;;  i               1    1[BANK0 ] unsigned char 
  2704 ;; Return value:  Size  Location     Type
  2705 ;;                  1    wreg      void 
  2706 ;; Registers used:
  2707 ;;		wreg, status,2, status,0
  2708 ;; Tracked objects:
  2709 ;;		On entry : 1F/0
  2710 ;;		On exit  : 1F/0
  2711 ;;		Unchanged: 0/0
  2712 ;; Data sizes:     COMMON   BANK0   BANK1
  2713 ;;      Params:         2       0       0
  2714 ;;      Locals:         0       2       0
  2715 ;;      Temps:          0       1       0
  2716 ;;      Totals:         2       3       0
  2717 ;;Total ram usage:        5 bytes
  2718 ;; Hardware stack levels used:    1
  2719 ;; Hardware stack levels required when called:    2
  2720 ;; This function calls:
  2721 ;;		Nothing
  2722 ;; This function is called by:
  2723 ;;		_measure
  2724 ;; This function uses a non-reentrant model
  2725 ;;
  2726                           
  2727                           
  2728                           ;psect for function _config
  2729  01DB                     _config:
  2730                           
  2731                           ;bio3.c: 132: void config(BIO3 conf);bio3.c: 133: {;bio3.c: 134:     unsigned char i, ou
      +                          t;;bio3.c: 136:     out &= 0b11110111; PORTC = out;;
  2732                           
  2733                           ;incstack = 0
  2734                           ; Regs used in _config: [wreg+status,2+status,0]
  2735  01DB  30F7               	movlw	247
  2736  01DC  00C8               	movwf	??_config
  2737  01DD  0848               	movf	??_config,w
  2738  01DE  05CA               	andwf	config@out,f
  2739  01DF  084A               	movf	config@out,w
  2740  01E0  008E               	movwf	14	;volatile
  2741                           
  2742                           ;bio3.c: 137:     _delay((unsigned long)((50)*(500000/4000000.0)));
  2743  01E1  3200               	nop2	;2 cycle nop
  2744  01E2  3200               	nop2	;2 cycle nop
  2745  01E3  3200               	nop2	;2 cycle nop
  2746                           
  2747                           ;bio3.c: 139:     RA5 = 0;;
  2748  01E4  0020               	movlb	0	; select bank0
  2749  01E5  128C               	bcf	12,5	;volatile
  2750                           
  2751                           ;bio3.c: 140:     _delay((unsigned long)((50)*(500000/4000000.0)));
  2752  01E6  3200               	nop2	;2 cycle nop
  2753  01E7  3200               	nop2	;2 cycle nop
  2754  01E8  3200               	nop2	;2 cycle nop
  2755                           
  2756                           ;bio3.c: 142:     RA5 = 1;;
  2757  01E9  0020               	movlb	0	; select bank0
  2758  01EA  168C               	bsf	12,5	;volatile
  2759                           
  2760                           ;bio3.c: 144:     for(i = 0; i < 16; i++) {
  2761  01EB  01C9               	clrf	config@i
  2762  01EC                     l153:
  2763                           
  2764                           ;bio3.c: 145:         if (conf.datashort & 0x0001) {
  2765  01EC  1C74               	btfss	config@conf,0
  2766  01ED  29F0               	goto	l1947
  2767                           
  2768                           ;bio3.c: 146:             out |= 0b00000100; PORTC = out;;
  2769  01EE  154A               	bsf	config@out,2
  2770                           
  2771                           ;bio3.c: 147:         } else {
  2772  01EF  29F4               	goto	l1945
  2773  01F0                     l1947:
  2774                           
  2775                           ;bio3.c: 148:             out &= 0b11111011; PORTC = out;;
  2776  01F0  30FB               	movlw	251
  2777  01F1  00C8               	movwf	??_config
  2778  01F2  0848               	movf	??_config,w
  2779  01F3  05CA               	andwf	config@out,f
  2780  01F4                     l1945:
  2781  01F4  084A               	movf	config@out,w
  2782  01F5  008E               	movwf	14	;volatile
  2783                           
  2784                           ;bio3.c: 150:         conf.datashort >>= 1;
  2785  01F6  3001               	movlw	1
  2786  01F7                     u845:
  2787  01F7  36F5               	lsrf	config@conf+1,f
  2788  01F8  0CF4               	rrf	config@conf,f
  2789  01F9  0B89               	decfsz	9,f
  2790  01FA  29F7               	goto	u845
  2791                           
  2792                           ;bio3.c: 152:         _delay((unsigned long)((50)*(500000/4000000.0)));
  2793  01FB  3200               	nop2	;2 cycle nop
  2794  01FC  3200               	nop2	;2 cycle nop
  2795  01FD  3200               	nop2	;2 cycle nop
  2796                           
  2797                           ;bio3.c: 154:         out |= 0b00001000; PORTC = out;;
  2798  01FE  0020               	movlb	0	; select bank0
  2799  01FF  15CA               	bsf	config@out,3
  2800  0200  084A               	movf	config@out,w
  2801  0201  008E               	movwf	14	;volatile
  2802                           
  2803                           ;bio3.c: 155:         _delay((unsigned long)((50)*(500000/4000000.0)));
  2804  0202  3200               	nop2	;2 cycle nop
  2805  0203  3200               	nop2	;2 cycle nop
  2806  0204  3200               	nop2	;2 cycle nop
  2807                           
  2808                           ;bio3.c: 156:         out &= 0b11110111; PORTC = out;;
  2809  0205  30F7               	movlw	247
  2810  0206  0020               	movlb	0	; select bank0
  2811  0207  00C8               	movwf	??_config
  2812  0208  0848               	movf	??_config,w
  2813  0209  05CA               	andwf	config@out,f
  2814  020A  084A               	movf	config@out,w
  2815  020B  008E               	movwf	14	;volatile
  2816                           
  2817                           ;bio3.c: 158:     }
  2818  020C  3001               	movlw	1
  2819  020D  00C8               	movwf	??_config
  2820  020E  0848               	movf	??_config,w
  2821  020F  07C9               	addwf	config@i,f
  2822  0210  3010               	movlw	16
  2823  0211  0249               	subwf	config@i,w
  2824  0212  1803               	btfsc	3,0
  2825  0213  0008               	return
  2826  0214  29EC               	goto	l153
  2827  0215                     __end_of_config:
  2828                           
  2829                           	psect	text6
  2830  02BC                     __ptext6:	
  2831 ;; *************** function _ADC_5 *****************
  2832 ;; Defined at:
  2833 ;;		line 48 in file "ADC1823.c"
  2834 ;; Parameters:    Size  Location     Type
  2835 ;;		None
  2836 ;; Auto vars:     Size  Location     Type
  2837 ;;  ADC_value       2    2[BANK0 ] unsigned short 
  2838 ;; Return value:  Size  Location     Type
  2839 ;;                  2    4[COMMON] unsigned short 
  2840 ;; Registers used:
  2841 ;;		wreg
  2842 ;; Tracked objects:
  2843 ;;		On entry : 0/0
  2844 ;;		On exit  : 1F/0
  2845 ;;		Unchanged: 0/0
  2846 ;; Data sizes:     COMMON   BANK0   BANK1
  2847 ;;      Params:         2       0       0
  2848 ;;      Locals:         0       2       0
  2849 ;;      Temps:          0       2       0
  2850 ;;      Totals:         2       4       0
  2851 ;;Total ram usage:        6 bytes
  2852 ;; Hardware stack levels used:    1
  2853 ;; Hardware stack levels required when called:    2
  2854 ;; This function calls:
  2855 ;;		Nothing
  2856 ;; This function is called by:
  2857 ;;		_measure
  2858 ;; This function uses a non-reentrant model
  2859 ;;
  2860                           
  2861                           
  2862                           ;psect for function _ADC_5
  2863  02BC                     _ADC_5:
  2864                           
  2865                           ;ADC1823.c: 50:     unsigned short ADC_value;;ADC1823.c: 52:     { ADCON0 = 0b00010101;}
      +                          ;
  2866                           
  2867                           ;incstack = 0
  2868                           ; Regs used in _ADC_5: [wreg]
  2869  02BC  3015               	movlw	21
  2870  02BD  0021               	movlb	1	; select bank1
  2871  02BE  009D               	movwf	29	;volatile
  2872                           
  2873                           ;ADC1823.c: 53:     __nop();
  2874  02BF  0000               	nop
  2875                           
  2876                           ;ADC1823.c: 54:     { ADGO = 1; while (ADGO); ADC_value = ADRESH; ADC_value <<= 8; ADC_v
      +                          alue |= ADRESL;};
  2877  02C0  0021               	movlb	1	; select bank1
  2878  02C1  149D               	bsf	29,1	;volatile
  2879  02C2                     l450:
  2880  02C2  189D               	btfsc	29,1	;volatile
  2881  02C3  2AC2               	goto	l450
  2882  02C4  081C               	movf	28,w	;volatile
  2883  02C5  0020               	movlb	0	; select bank0
  2884  02C6  00C8               	movwf	??_ADC_5
  2885  02C7  01C9               	clrf	??_ADC_5+1
  2886  02C8  0848               	movf	??_ADC_5,w
  2887  02C9  00CA               	movwf	ADC_5@ADC_value
  2888  02CA  0849               	movf	??_ADC_5+1,w
  2889  02CB  00CB               	movwf	ADC_5@ADC_value+1
  2890  02CC  3008               	movlw	8
  2891  02CD                     u875:
  2892  02CD  35CA               	lslf	ADC_5@ADC_value,f
  2893  02CE  0DCB               	rlf	ADC_5@ADC_value+1,f
  2894  02CF  0B89               	decfsz	9,f
  2895  02D0  2ACD               	goto	u875
  2896  02D1  0021               	movlb	1	; select bank1
  2897  02D2  081B               	movf	27,w	;volatile
  2898  02D3  0020               	movlb	0	; select bank0
  2899  02D4  00C8               	movwf	??_ADC_5
  2900  02D5  01C9               	clrf	??_ADC_5+1
  2901  02D6  0848               	movf	??_ADC_5,w
  2902  02D7  04CA               	iorwf	ADC_5@ADC_value,f
  2903  02D8  0849               	movf	??_ADC_5+1,w
  2904  02D9  04CB               	iorwf	ADC_5@ADC_value+1,f
  2905                           
  2906                           ;ADC1823.c: 56:     return ADC_value;
  2907  02DA  084B               	movf	ADC_5@ADC_value+1,w
  2908  02DB  00F5               	movwf	?_ADC_5+1
  2909  02DC  084A               	movf	ADC_5@ADC_value,w
  2910  02DD  00F4               	movwf	?_ADC_5
  2911  02DE  0008               	return
  2912  02DF                     __end_of_ADC_5:
  2913                           
  2914                           	psect	text7
  2915  026B                     __ptext7:	
  2916 ;; *************** function _lputs_ISR *****************
  2917 ;; Defined at:
  2918 ;;		line 132 in file "USART1823.c"
  2919 ;; Parameters:    Size  Location     Type
  2920 ;;  data            1    wreg     PTR unsigned char 
  2921 ;;		 -> sweep@aux(7), calibrate_reader@aux(8), measure_Impedance_SE@aux(8), measure_Offset@aux(5), 
  2922 ;;		 -> measure_Impedance_no_offset@aux(13), measure_Impedance@aux(13), read_ADC_channels@aux(7), mess_rec(10), 
  2923 ;;  length          1    4[COMMON] unsigned char 
  2924 ;; Auto vars:     Size  Location     Type
  2925 ;;  data            1    3[BANK0 ] PTR unsigned char 
  2926 ;;		 -> sweep@aux(7), calibrate_reader@aux(8), measure_Impedance_SE@aux(8), measure_Offset@aux(5), 
  2927 ;;		 -> measure_Impedance_no_offset@aux(13), measure_Impedance@aux(13), read_ADC_channels@aux(7), mess_rec(10), 
  2928 ;;  i               1    2[BANK0 ] unsigned char 
  2929 ;; Return value:  Size  Location     Type
  2930 ;;                  1    wreg      void 
  2931 ;; Registers used:
  2932 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2933 ;; Tracked objects:
  2934 ;;		On entry : 1F/0
  2935 ;;		On exit  : 1E/0
  2936 ;;		Unchanged: 0/0
  2937 ;; Data sizes:     COMMON   BANK0   BANK1
  2938 ;;      Params:         1       0       0
  2939 ;;      Locals:         0       2       0
  2940 ;;      Temps:          0       2       0
  2941 ;;      Totals:         1       4       0
  2942 ;;Total ram usage:        5 bytes
  2943 ;; Hardware stack levels used:    1
  2944 ;; Hardware stack levels required when called:    3
  2945 ;; This function calls:
  2946 ;;		_close_RX_USART
  2947 ;; This function is called by:
  2948 ;;		_sweep
  2949 ;; This function uses a non-reentrant model
  2950 ;;
  2951                           
  2952                           
  2953                           ;psect for function _lputs_ISR
  2954  026B                     _lputs_ISR:
  2955                           
  2956                           ;incstack = 0
  2957                           ; Regs used in _lputs_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2958                           ;lputs_ISR@data stored from wreg
  2959  026B  00CB               	movwf	lputs_ISR@data
  2960                           
  2961                           ;USART1823.c: 132: void lputs_ISR(unsigned char* data, unsigned char length);USART1823.c
      +                          : 133: {;USART1823.c: 134:     unsigned char i;;USART1823.c: 136:     if (USART_tx_flag 
      +                          == 1)
  2962  026C  0377               	decf	_USART_tx_flag,w	;volatile
  2963  026D  1903               	btfsc	3,2
  2964  026E  0008               	return
  2965                           
  2966                           ;USART1823.c: 139:     for (i = 0; i < length; i++)
  2967  026F  01CA               	clrf	lputs_ISR@i
  2968  0270                     l2011:
  2969  0270  0874               	movf	lputs_ISR@length,w
  2970  0271  024A               	subwf	lputs_ISR@i,w
  2971  0272  1803               	btfsc	3,0
  2972  0273  2A87               	goto	l2013
  2973                           
  2974                           ;USART1823.c: 140:         USART_tx_data[i] = data[i];
  2975  0274  084A               	movf	lputs_ISR@i,w
  2976  0275  074B               	addwf	lputs_ISR@data,w
  2977  0276  00C8               	movwf	??_lputs_ISR
  2978  0277  0848               	movf	??_lputs_ISR,w
  2979  0278  0086               	movwf	6
  2980  0279  0187               	clrf	7
  2981  027A  0801               	movf	1,w
  2982  027B  00C9               	movwf	??_lputs_ISR+1
  2983  027C  084A               	movf	lputs_ISR@i,w
  2984  027D  3E20               	addlw	(low (_USART_tx_data| 0))& (0+255)
  2985  027E  0086               	movwf	6
  2986  027F  0187               	clrf	7
  2987  0280  0849               	movf	??_lputs_ISR+1,w
  2988  0281  0081               	movwf	1
  2989  0282  3001               	movlw	1
  2990  0283  00C8               	movwf	??_lputs_ISR
  2991  0284  0848               	movf	??_lputs_ISR,w
  2992  0285  07CA               	addwf	lputs_ISR@i,f
  2993  0286  2A70               	goto	l2011
  2994  0287                     l2013:
  2995                           
  2996                           ;USART1823.c: 142:     close_RX_USART();
  2997  0287  2362               	fcall	_close_RX_USART
  2998                           
  2999                           ;USART1823.c: 144:     USART_tx_index = 0;
  3000  0288  01F9               	clrf	_USART_tx_index	;volatile
  3001                           
  3002                           ;USART1823.c: 145:     USART_tx_length = length;
  3003  0289  0874               	movf	lputs_ISR@length,w
  3004  028A  00C8               	movwf	??_lputs_ISR
  3005  028B  0848               	movf	??_lputs_ISR,w
  3006  028C  00F8               	movwf	_USART_tx_length	;volatile
  3007                           
  3008                           ;USART1823.c: 147:     USART_tx_flag = 1;
  3009  028D  3001               	movlw	1
  3010  028E  00C8               	movwf	??_lputs_ISR
  3011  028F  0848               	movf	??_lputs_ISR,w
  3012  0290  00F7               	movwf	_USART_tx_flag	;volatile
  3013                           
  3014                           ;USART1823.c: 148:     TXIE = 1;
  3015  0291  0021               	movlb	1	; select bank1
  3016  0292  1611               	bsf	17,4	;volatile
  3017  0293  0008               	return
  3018  0294                     __end_of_lputs_ISR:
  3019                           
  3020                           	psect	text8
  3021  0362                     __ptext8:	
  3022 ;; *************** function _close_RX_USART *****************
  3023 ;; Defined at:
  3024 ;;		line 35 in file "USART1823.c"
  3025 ;; Parameters:    Size  Location     Type
  3026 ;;		None
  3027 ;; Auto vars:     Size  Location     Type
  3028 ;;		None
  3029 ;; Return value:  Size  Location     Type
  3030 ;;                  1    wreg      void 
  3031 ;; Registers used:
  3032 ;;		status,2
  3033 ;; Tracked objects:
  3034 ;;		On entry : 1F/0
  3035 ;;		On exit  : 1F/0
  3036 ;;		Unchanged: 0/0
  3037 ;; Data sizes:     COMMON   BANK0   BANK1
  3038 ;;      Params:         0       0       0
  3039 ;;      Locals:         0       0       0
  3040 ;;      Temps:          0       0       0
  3041 ;;      Totals:         0       0       0
  3042 ;;Total ram usage:        0 bytes
  3043 ;; Hardware stack levels used:    1
  3044 ;; Hardware stack levels required when called:    2
  3045 ;; This function calls:
  3046 ;;		Nothing
  3047 ;; This function is called by:
  3048 ;;		_lputs_ISR
  3049 ;; This function uses a non-reentrant model
  3050 ;;
  3051                           
  3052                           
  3053                           ;psect for function _close_RX_USART
  3054  0362                     _close_RX_USART:
  3055                           
  3056                           ;USART1823.c: 39:     RCIE = 0;
  3057                           
  3058                           ;incstack = 0
  3059                           ; Regs used in _close_RX_USART: [status,2]
  3060  0362  0021               	movlb	1	; select bank1
  3061  0363  1291               	bcf	17,5	;volatile
  3062                           
  3063                           ;USART1823.c: 40:     CREN = 0;
  3064  0364  0023               	movlb	3	; select bank3
  3065  0365  121D               	bcf	29,4	;volatile
  3066                           
  3067                           ;USART1823.c: 41:     USART_rx_index = 0;
  3068  0366  0020               	movlb	0	; select bank0
  3069  0367  01BC               	clrf	_USART_rx_index	;volatile
  3070  0368  0008               	return
  3071  0369                     __end_of_close_RX_USART:
  3072                           
  3073                           	psect	text9
  3074  02F8                     __ptext9:	
  3075 ;; *************** function _calculate_checksum *****************
  3076 ;; Defined at:
  3077 ;;		line 407 in file "comm.c"
  3078 ;; Parameters:    Size  Location     Type
  3079 ;;  data            1    wreg     PTR unsigned char 
  3080 ;;		 -> sweep@aux(7), measure_Impedance_SE@aux(8), mess_rec(10), 
  3081 ;;  num             1    4[COMMON] unsigned char 
  3082 ;; Auto vars:     Size  Location     Type
  3083 ;;  data            1    3[BANK0 ] PTR unsigned char 
  3084 ;;		 -> sweep@aux(7), measure_Impedance_SE@aux(8), mess_rec(10), 
  3085 ;;  i               1    4[BANK0 ] unsigned char 
  3086 ;;  check           1    2[BANK0 ] unsigned char 
  3087 ;; Return value:  Size  Location     Type
  3088 ;;                  1    wreg      unsigned char 
  3089 ;; Registers used:
  3090 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3091 ;; Tracked objects:
  3092 ;;		On entry : 1F/0
  3093 ;;		On exit  : 1F/0
  3094 ;;		Unchanged: 0/0
  3095 ;; Data sizes:     COMMON   BANK0   BANK1
  3096 ;;      Params:         1       0       0
  3097 ;;      Locals:         0       3       0
  3098 ;;      Temps:          0       2       0
  3099 ;;      Totals:         1       5       0
  3100 ;;Total ram usage:        6 bytes
  3101 ;; Hardware stack levels used:    1
  3102 ;; Hardware stack levels required when called:    2
  3103 ;; This function calls:
  3104 ;;		Nothing
  3105 ;; This function is called by:
  3106 ;;		_sweep
  3107 ;; This function uses a non-reentrant model
  3108 ;;
  3109                           
  3110                           
  3111                           ;psect for function _calculate_checksum
  3112  02F8                     _calculate_checksum:
  3113                           
  3114                           ;incstack = 0
  3115                           ; Regs used in _calculate_checksum: [wreg+fsr1l+fsr1h+status,2+status,0]
  3116                           ;calculate_checksum@data stored from wreg
  3117  02F8  00CB               	movwf	calculate_checksum@data
  3118                           
  3119                           ;comm.c: 407: unsigned char calculate_checksum(unsigned char* data, unsigned char num);c
      +                          omm.c: 408: {;comm.c: 409:     unsigned char check, i;;comm.c: 411:     check = 0;
  3120  02F9  01CA               	clrf	calculate_checksum@check
  3121                           
  3122                           ;comm.c: 412:     for (i = 0; i < num; i++) {
  3123  02FA  01CC               	clrf	calculate_checksum@i
  3124  02FB                     l2029:
  3125  02FB  0874               	movf	calculate_checksum@num,w
  3126  02FC  024C               	subwf	calculate_checksum@i,w
  3127  02FD  1803               	btfsc	3,0
  3128  02FE  2B0E               	goto	l2031
  3129                           
  3130                           ;comm.c: 413:         check ^= data[i];
  3131  02FF  084C               	movf	calculate_checksum@i,w
  3132  0300  074B               	addwf	calculate_checksum@data,w
  3133  0301  00C8               	movwf	??_calculate_checksum
  3134  0302  0848               	movf	??_calculate_checksum,w
  3135  0303  0086               	movwf	6
  3136  0304  0187               	clrf	7
  3137  0305  0801               	movf	1,w
  3138  0306  00C9               	movwf	??_calculate_checksum+1
  3139  0307  0849               	movf	??_calculate_checksum+1,w
  3140  0308  06CA               	xorwf	calculate_checksum@check,f
  3141                           
  3142                           ;comm.c: 414:     }
  3143  0309  3001               	movlw	1
  3144  030A  00C8               	movwf	??_calculate_checksum
  3145  030B  0848               	movf	??_calculate_checksum,w
  3146  030C  07CC               	addwf	calculate_checksum@i,f
  3147  030D  2AFB               	goto	l2029
  3148  030E                     l2031:
  3149                           
  3150                           ;comm.c: 416:     return check;
  3151  030E  084A               	movf	calculate_checksum@check,w
  3152  030F  0008               	return
  3153  0310                     __end_of_calculate_checksum:
  3154                           
  3155                           	psect	text10
  3156  0331                     __ptext10:	
  3157 ;; *************** function _start_TX_USART_ISR *****************
  3158 ;; Defined at:
  3159 ;;		line 101 in file "USART1823.c"
  3160 ;; Parameters:    Size  Location     Type
  3161 ;;		None
  3162 ;; Auto vars:     Size  Location     Type
  3163 ;;		None
  3164 ;; Return value:  Size  Location     Type
  3165 ;;                  1    wreg      void 
  3166 ;; Registers used:
  3167 ;;		wreg, status,2
  3168 ;; Tracked objects:
  3169 ;;		On entry : B1F/1
  3170 ;;		On exit  : B1F/3
  3171 ;;		Unchanged: B00/0
  3172 ;; Data sizes:     COMMON   BANK0   BANK1
  3173 ;;      Params:         0       0       0
  3174 ;;      Locals:         0       0       0
  3175 ;;      Temps:          0       0       0
  3176 ;;      Totals:         0       0       0
  3177 ;;Total ram usage:        0 bytes
  3178 ;; Hardware stack levels used:    1
  3179 ;; Hardware stack levels required when called:    2
  3180 ;; This function calls:
  3181 ;;		Nothing
  3182 ;; This function is called by:
  3183 ;;		_main
  3184 ;; This function uses a non-reentrant model
  3185 ;;
  3186                           
  3187                           
  3188                           ;psect for function _start_TX_USART_ISR
  3189  0331                     _start_TX_USART_ISR:
  3190                           
  3191                           ;USART1823.c: 103:     { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  3192                           
  3193                           ;incstack = 0
  3194                           ; Regs used in _start_TX_USART_ISR: [wreg+status,2]
  3195  0331  0023               	movlb	3	; select bank3
  3196  0332  151E               	bsf	30,2	;volatile
  3197  0333  159F               	bsf	31,3	;volatile
  3198  0334  019C               	clrf	28	;volatile
  3199  0335  300C               	movlw	12
  3200  0336  009B               	movwf	27	;volatile
  3201                           
  3202                           ;USART1823.c: 104:     SYNC = 0;
  3203  0337  121E               	bcf	30,4	;volatile
  3204                           
  3205                           ;USART1823.c: 105:     SPEN = 1;
  3206  0338  179D               	bsf	29,7	;volatile
  3207                           
  3208                           ;USART1823.c: 106:     TXEN = 1;
  3209  0339  169E               	bsf	30,5	;volatile
  3210                           
  3211                           ;USART1823.c: 108:     USART_tx_flag = 0;
  3212  033A  01F7               	clrf	_USART_tx_flag	;volatile
  3213                           
  3214                           ;USART1823.c: 109:     USART_tx_index = 0;
  3215  033B  01F9               	clrf	_USART_tx_index	;volatile
  3216                           
  3217                           ;USART1823.c: 110:     USART_tx_length = 0;
  3218  033C  01F8               	clrf	_USART_tx_length	;volatile
  3219                           
  3220                           ;USART1823.c: 113:     PEIE = 1;
  3221  033D  170B               	bsf	11,6	;volatile
  3222                           
  3223                           ;USART1823.c: 114:     GIE = 1;
  3224  033E  178B               	bsf	11,7	;volatile
  3225  033F  0008               	return
  3226  0340                     __end_of_start_TX_USART_ISR:
  3227                           
  3228                           	psect	text11
  3229  0321                     __ptext11:	
  3230 ;; *************** function _start_RX_USART_ISR *****************
  3231 ;; Defined at:
  3232 ;;		line 83 in file "USART1823.c"
  3233 ;; Parameters:    Size  Location     Type
  3234 ;;		None
  3235 ;; Auto vars:     Size  Location     Type
  3236 ;;		None
  3237 ;; Return value:  Size  Location     Type
  3238 ;;                  1    wreg      void 
  3239 ;; Registers used:
  3240 ;;		wreg, status,2
  3241 ;; Tracked objects:
  3242 ;;		On entry : B1F/3
  3243 ;;		On exit  : B1F/1
  3244 ;;		Unchanged: B00/0
  3245 ;; Data sizes:     COMMON   BANK0   BANK1
  3246 ;;      Params:         0       0       0
  3247 ;;      Locals:         0       0       0
  3248 ;;      Temps:          0       0       0
  3249 ;;      Totals:         0       0       0
  3250 ;;Total ram usage:        0 bytes
  3251 ;; Hardware stack levels used:    1
  3252 ;; Hardware stack levels required when called:    2
  3253 ;; This function calls:
  3254 ;;		Nothing
  3255 ;; This function is called by:
  3256 ;;		_main
  3257 ;; This function uses a non-reentrant model
  3258 ;;
  3259                           
  3260                           
  3261                           ;psect for function _start_RX_USART_ISR
  3262  0321                     _start_RX_USART_ISR:
  3263                           
  3264                           ;USART1823.c: 86:      { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  3265                           
  3266                           ;incstack = 0
  3267                           ; Regs used in _start_RX_USART_ISR: [wreg+status,2]
  3268  0321  151E               	bsf	30,2	;volatile
  3269  0322  159F               	bsf	31,3	;volatile
  3270  0323  019C               	clrf	28	;volatile
  3271  0324  300C               	movlw	12
  3272  0325  009B               	movwf	27	;volatile
  3273                           
  3274                           ;USART1823.c: 88:     SYNC = 0;
  3275  0326  121E               	bcf	30,4	;volatile
  3276                           
  3277                           ;USART1823.c: 89:     SPEN = 1;
  3278  0327  179D               	bsf	29,7	;volatile
  3279                           
  3280                           ;USART1823.c: 90:     CREN = 1;
  3281  0328  161D               	bsf	29,4	;volatile
  3282                           
  3283                           ;USART1823.c: 92:     USART_rx_flag = 0;
  3284  0329  01F6               	clrf	_USART_rx_flag	;volatile
  3285                           
  3286                           ;USART1823.c: 93:     USART_rx_index = 0;
  3287  032A  0020               	movlb	0	; select bank0
  3288  032B  01BC               	clrf	_USART_rx_index	;volatile
  3289                           
  3290                           ;USART1823.c: 95:     RCIE = 1;
  3291  032C  0021               	movlb	1	; select bank1
  3292  032D  1691               	bsf	17,5	;volatile
  3293                           
  3294                           ;USART1823.c: 96:     PEIE = 1;
  3295  032E  170B               	bsf	11,6	;volatile
  3296                           
  3297                           ;USART1823.c: 97:     GIE = 1;
  3298  032F  178B               	bsf	11,7	;volatile
  3299  0330  0008               	return
  3300  0331                     __end_of_start_RX_USART_ISR:
  3301                           
  3302                           	psect	text12
  3303  0381                     __ptext12:	
  3304 ;; *************** function _start_RCM *****************
  3305 ;; Defined at:
  3306 ;;		line 4 in file "RCM1823.c"
  3307 ;; Parameters:    Size  Location     Type
  3308 ;;		None
  3309 ;; Auto vars:     Size  Location     Type
  3310 ;;		None
  3311 ;; Return value:  Size  Location     Type
  3312 ;;                  1    wreg      void 
  3313 ;; Registers used:
  3314 ;;		wreg
  3315 ;; Tracked objects:
  3316 ;;		On entry : B1F/1
  3317 ;;		On exit  : B1F/7
  3318 ;;		Unchanged: B00/0
  3319 ;; Data sizes:     COMMON   BANK0   BANK1
  3320 ;;      Params:         0       0       0
  3321 ;;      Locals:         0       0       0
  3322 ;;      Temps:          0       0       0
  3323 ;;      Totals:         0       0       0
  3324 ;;Total ram usage:        0 bytes
  3325 ;; Hardware stack levels used:    1
  3326 ;; Hardware stack levels required when called:    2
  3327 ;; This function calls:
  3328 ;;		Nothing
  3329 ;; This function is called by:
  3330 ;;		_main
  3331 ;; This function uses a non-reentrant model
  3332 ;;
  3333                           
  3334                           
  3335                           ;psect for function _start_RCM
  3336  0381                     _start_RCM:
  3337                           
  3338                           ;RCM1823.c: 6:     CLKRCON = 0b11010000;
  3339                           
  3340                           ;incstack = 0
  3341                           ; Regs used in _start_RCM: [wreg]
  3342  0381  30D0               	movlw	208
  3343  0382  0027               	movlb	7	; select bank7
  3344  0383  009A               	movwf	26	;volatile
  3345  0384  0008               	return
  3346  0385                     __end_of_start_RCM:
  3347                           
  3348                           	psect	text13
  3349  036F                     __ptext13:	
  3350 ;; *************** function _setup_TMR0 *****************
  3351 ;; Defined at:
  3352 ;;		line 10 in file "TMR0.c"
  3353 ;; Parameters:    Size  Location     Type
  3354 ;;		None
  3355 ;; Auto vars:     Size  Location     Type
  3356 ;;		None
  3357 ;; Return value:  Size  Location     Type
  3358 ;;                  1    wreg      void 
  3359 ;; Registers used:
  3360 ;;		None
  3361 ;; Tracked objects:
  3362 ;;		On entry : B1F/1
  3363 ;;		On exit  : B1F/1
  3364 ;;		Unchanged: B00/0
  3365 ;; Data sizes:     COMMON   BANK0   BANK1
  3366 ;;      Params:         0       0       0
  3367 ;;      Locals:         0       0       0
  3368 ;;      Temps:          0       0       0
  3369 ;;      Totals:         0       0       0
  3370 ;;Total ram usage:        0 bytes
  3371 ;; Hardware stack levels used:    1
  3372 ;; Hardware stack levels required when called:    2
  3373 ;; This function calls:
  3374 ;;		Nothing
  3375 ;; This function is called by:
  3376 ;;		_main
  3377 ;; This function uses a non-reentrant model
  3378 ;;
  3379                           
  3380                           
  3381                           ;psect for function _setup_TMR0
  3382  036F                     _setup_TMR0:
  3383                           
  3384                           ;TMR0.c: 13:     PS2 = 0; PS1 = 1; PS0 = 0;
  3385                           
  3386                           ;incstack = 0
  3387                           ; Regs used in _setup_TMR0: []
  3388  036F  1115               	bcf	21,2	;volatile
  3389  0370  1495               	bsf	21,1	;volatile
  3390  0371  1015               	bcf	21,0	;volatile
  3391                           
  3392                           ;TMR0.c: 16:     PSA = 0;
  3393  0372  1195               	bcf	21,3	;volatile
  3394                           
  3395                           ;TMR0.c: 18:     TMR0CS = 0;
  3396  0373  1295               	bcf	21,5	;volatile
  3397  0374  0008               	return
  3398  0375                     __end_of_setup_TMR0:
  3399                           
  3400                           	psect	text14
  3401  0375                     __ptext14:	
  3402 ;; *************** function _setup_ADC *****************
  3403 ;; Defined at:
  3404 ;;		line 3 in file "ADC1823.c"
  3405 ;; Parameters:    Size  Location     Type
  3406 ;;		None
  3407 ;; Auto vars:     Size  Location     Type
  3408 ;;		None
  3409 ;; Return value:  Size  Location     Type
  3410 ;;                  1    wreg      void 
  3411 ;; Registers used:
  3412 ;;		wreg
  3413 ;; Tracked objects:
  3414 ;;		On entry : B1F/7
  3415 ;;		On exit  : B1F/1
  3416 ;;		Unchanged: B00/0
  3417 ;; Data sizes:     COMMON   BANK0   BANK1
  3418 ;;      Params:         0       0       0
  3419 ;;      Locals:         0       0       0
  3420 ;;      Temps:          0       0       0
  3421 ;;      Totals:         0       0       0
  3422 ;;Total ram usage:        0 bytes
  3423 ;; Hardware stack levels used:    1
  3424 ;; Hardware stack levels required when called:    2
  3425 ;; This function calls:
  3426 ;;		Nothing
  3427 ;; This function is called by:
  3428 ;;		_main
  3429 ;; This function uses a non-reentrant model
  3430 ;;
  3431                           
  3432                           
  3433                           ;psect for function _setup_ADC
  3434  0375                     _setup_ADC:
  3435                           
  3436                           ;ADC1823.c: 20:     ADCON1 = 0b11110000;
  3437                           
  3438                           ;incstack = 0
  3439                           ; Regs used in _setup_ADC: [wreg]
  3440  0375  30F0               	movlw	240
  3441  0376  0021               	movlb	1	; select bank1
  3442  0377  009E               	movwf	30	;volatile
  3443                           
  3444                           ;ADC1823.c: 21:     { ADCON0 = 0b00100100;};
  3445  0378  3024               	movlw	36
  3446  0379  009D               	movwf	29	;volatile
  3447  037A  0008               	return
  3448  037B                     __end_of_setup_ADC:
  3449                           
  3450                           	psect	text15
  3451  0385                     __ptext15:	
  3452 ;; *************** function _USARTX_change_pol *****************
  3453 ;; Defined at:
  3454 ;;		line 90 in file "mcc_generated_files/mcc.c"
  3455 ;; Parameters:    Size  Location     Type
  3456 ;;		None
  3457 ;; Auto vars:     Size  Location     Type
  3458 ;;		None
  3459 ;; Return value:  Size  Location     Type
  3460 ;;                  1    wreg      void 
  3461 ;; Registers used:
  3462 ;;		None
  3463 ;; Tracked objects:
  3464 ;;		On entry : B1F/0
  3465 ;;		On exit  : B1F/3
  3466 ;;		Unchanged: B00/0
  3467 ;; Data sizes:     COMMON   BANK0   BANK1
  3468 ;;      Params:         0       0       0
  3469 ;;      Locals:         0       0       0
  3470 ;;      Temps:          0       0       0
  3471 ;;      Totals:         0       0       0
  3472 ;;Total ram usage:        0 bytes
  3473 ;; Hardware stack levels used:    1
  3474 ;; Hardware stack levels required when called:    2
  3475 ;; This function calls:
  3476 ;;		Nothing
  3477 ;; This function is called by:
  3478 ;;		_main
  3479 ;; This function uses a non-reentrant model
  3480 ;;
  3481                           
  3482                           
  3483                           ;psect for function _USARTX_change_pol
  3484  0385                     _USARTX_change_pol:
  3485                           
  3486                           ;mcc_generated_files/mcc.c: 92:     SCKP = 1;
  3487                           
  3488                           ;incstack = 0
  3489                           ; Regs used in _USARTX_change_pol: []
  3490  0385  0023               	movlb	3	; select bank3
  3491  0386  161F               	bsf	31,4	;volatile
  3492  0387  0008               	return
  3493  0388                     __end_of_USARTX_change_pol:
  3494                           
  3495                           	psect	text16
  3496  0388                     __ptext16:	
  3497 ;; *************** function _SYSTEM_Initialize *****************
  3498 ;; Defined at:
  3499 ;;		line 70 in file "mcc_generated_files/mcc.c"
  3500 ;; Parameters:    Size  Location     Type
  3501 ;;		None
  3502 ;; Auto vars:     Size  Location     Type
  3503 ;;		None
  3504 ;; Return value:  Size  Location     Type
  3505 ;;                  1    wreg      void 
  3506 ;; Registers used:
  3507 ;;		wreg, status,2, status,0, pclath, cstack
  3508 ;; Tracked objects:
  3509 ;;		On entry : B1F/3
  3510 ;;		On exit  : B1F/1
  3511 ;;		Unchanged: B00/0
  3512 ;; Data sizes:     COMMON   BANK0   BANK1
  3513 ;;      Params:         0       0       0
  3514 ;;      Locals:         0       0       0
  3515 ;;      Temps:          0       0       0
  3516 ;;      Totals:         0       0       0
  3517 ;;Total ram usage:        0 bytes
  3518 ;; Hardware stack levels used:    1
  3519 ;; Hardware stack levels required when called:    3
  3520 ;; This function calls:
  3521 ;;		_OSCILLATOR_Initialize
  3522 ;;		_PIN_MANAGER_Initialize
  3523 ;; This function is called by:
  3524 ;;		_main
  3525 ;; This function uses a non-reentrant model
  3526 ;;
  3527                           
  3528                           
  3529                           ;psect for function _SYSTEM_Initialize
  3530  0388                     _SYSTEM_Initialize:
  3531                           
  3532                           ;mcc_generated_files/mcc.c: 73:     PIN_MANAGER_Initialize();
  3533                           
  3534                           ;incstack = 0
  3535                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3536  0388  22DF               	fcall	_PIN_MANAGER_Initialize
  3537                           
  3538                           ;mcc_generated_files/mcc.c: 74:     OSCILLATOR_Initialize();
  3539  0389  237B               	fcall	_OSCILLATOR_Initialize
  3540  038A  0008               	return
  3541  038B                     __end_of_SYSTEM_Initialize:
  3542                           
  3543                           	psect	text17
  3544  02DF                     __ptext17:	
  3545 ;; *************** function _PIN_MANAGER_Initialize *****************
  3546 ;; Defined at:
  3547 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  3548 ;; Parameters:    Size  Location     Type
  3549 ;;		None
  3550 ;; Auto vars:     Size  Location     Type
  3551 ;;		None
  3552 ;; Return value:  Size  Location     Type
  3553 ;;                  1    wreg      void 
  3554 ;; Registers used:
  3555 ;;		wreg, status,2
  3556 ;; Tracked objects:
  3557 ;;		On entry : B1F/3
  3558 ;;		On exit  : B1F/2
  3559 ;;		Unchanged: B00/0
  3560 ;; Data sizes:     COMMON   BANK0   BANK1
  3561 ;;      Params:         0       0       0
  3562 ;;      Locals:         0       0       0
  3563 ;;      Temps:          0       0       0
  3564 ;;      Totals:         0       0       0
  3565 ;;Total ram usage:        0 bytes
  3566 ;; Hardware stack levels used:    1
  3567 ;; Hardware stack levels required when called:    2
  3568 ;; This function calls:
  3569 ;;		Nothing
  3570 ;; This function is called by:
  3571 ;;		_SYSTEM_Initialize
  3572 ;; This function uses a non-reentrant model
  3573 ;;
  3574                           
  3575                           
  3576                           ;psect for function _PIN_MANAGER_Initialize
  3577  02DF                     _PIN_MANAGER_Initialize:
  3578                           
  3579                           ;mcc_generated_files/pin_manager.c: 51:     LATA = 0x0;
  3580                           
  3581                           ;incstack = 0
  3582                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3583  02DF  0022               	movlb	2	; select bank2
  3584  02E0  018C               	clrf	12	;volatile
  3585                           
  3586                           ;mcc_generated_files/pin_manager.c: 52:     LATC = 0x0;
  3587  02E1  018E               	clrf	14	;volatile
  3588                           
  3589                           ;mcc_generated_files/pin_manager.c: 55:     ANSELA = 0b00000100;
  3590  02E2  3004               	movlw	4
  3591  02E3  0023               	movlb	3	; select bank3
  3592  02E4  008C               	movwf	12	;volatile
  3593                           
  3594                           ;mcc_generated_files/pin_manager.c: 56:     ANSELC = 0b00000011;
  3595  02E5  3003               	movlw	3
  3596  02E6  008E               	movwf	14	;volatile
  3597                           
  3598                           ;mcc_generated_files/pin_manager.c: 59:     WPUA = 0x3B;
  3599  02E7  303B               	movlw	59
  3600  02E8  0024               	movlb	4	; select bank4
  3601  02E9  008C               	movwf	12	;volatile
  3602                           
  3603                           ;mcc_generated_files/pin_manager.c: 61:     WPUC = 0x1C;
  3604  02EA  301C               	movlw	28
  3605  02EB  008E               	movwf	14	;volatile
  3606                           
  3607                           ;mcc_generated_files/pin_manager.c: 63:     RXDTSEL = 0;
  3608  02EC  0022               	movlb	2	; select bank2
  3609  02ED  139D               	bcf	29,7	;volatile
  3610                           
  3611                           ;mcc_generated_files/pin_manager.c: 64:     TXCKSEL = 0;
  3612  02EE  111D               	bcf	29,2	;volatile
  3613                           
  3614                           ;mcc_generated_files/pin_manager.c: 67:     TRISC = 0b01100011;
  3615  02EF  3063               	movlw	99
  3616  02F0  0021               	movlb	1	; select bank1
  3617  02F1  008E               	movwf	14	;volatile
  3618                           
  3619                           ;mcc_generated_files/pin_manager.c: 68:     TRISA = 0b01011111;
  3620  02F2  305F               	movlw	95
  3621  02F3  008C               	movwf	12	;volatile
  3622                           
  3623                           ;mcc_generated_files/pin_manager.c: 70:     OPTION_REGbits.nWPUEN = 0x0;
  3624  02F4  1395               	bcf	21,7	;volatile
  3625                           
  3626                           ;mcc_generated_files/pin_manager.c: 71:     APFCON = 0x00;
  3627  02F5  0022               	movlb	2	; select bank2
  3628  02F6  019D               	clrf	29	;volatile
  3629  02F7  0008               	return
  3630  02F8                     __end_of_PIN_MANAGER_Initialize:
  3631                           
  3632                           	psect	text18
  3633  037B                     __ptext18:	
  3634 ;; *************** function _OSCILLATOR_Initialize *****************
  3635 ;; Defined at:
  3636 ;;		line 78 in file "mcc_generated_files/mcc.c"
  3637 ;; Parameters:    Size  Location     Type
  3638 ;;		None
  3639 ;; Auto vars:     Size  Location     Type
  3640 ;;		None
  3641 ;; Return value:  Size  Location     Type
  3642 ;;                  1    wreg      void 
  3643 ;; Registers used:
  3644 ;;		wreg, status,2
  3645 ;; Tracked objects:
  3646 ;;		On entry : B1F/2
  3647 ;;		On exit  : B1F/1
  3648 ;;		Unchanged: B00/0
  3649 ;; Data sizes:     COMMON   BANK0   BANK1
  3650 ;;      Params:         0       0       0
  3651 ;;      Locals:         0       0       0
  3652 ;;      Temps:          0       0       0
  3653 ;;      Totals:         0       0       0
  3654 ;;Total ram usage:        0 bytes
  3655 ;; Hardware stack levels used:    1
  3656 ;; Hardware stack levels required when called:    2
  3657 ;; This function calls:
  3658 ;;		Nothing
  3659 ;; This function is called by:
  3660 ;;		_SYSTEM_Initialize
  3661 ;; This function uses a non-reentrant model
  3662 ;;
  3663                           
  3664                           
  3665                           ;psect for function _OSCILLATOR_Initialize
  3666  037B                     _OSCILLATOR_Initialize:
  3667                           
  3668                           ;mcc_generated_files/mcc.c: 81:     OSCCON = 0x3A;
  3669                           
  3670                           ;incstack = 0
  3671                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3672  037B  303A               	movlw	58
  3673  037C  0021               	movlb	1	; select bank1
  3674  037D  0099               	movwf	25	;volatile
  3675                           
  3676                           ;mcc_generated_files/mcc.c: 83:     OSCSTAT = 0x00;
  3677  037E  019A               	clrf	26	;volatile
  3678                           
  3679                           ;mcc_generated_files/mcc.c: 85:     OSCTUNE = 0x00;
  3680  037F  0198               	clrf	24	;volatile
  3681  0380  0008               	return
  3682  0381                     __end_of_OSCILLATOR_Initialize:
  3683                           
  3684                           	psect	intentry
  3685  0004                     __pintentry:	
  3686 ;; *************** function _isr *****************
  3687 ;; Defined at:
  3688 ;;		line 153 in file "main.c"
  3689 ;; Parameters:    Size  Location     Type
  3690 ;;		None
  3691 ;; Auto vars:     Size  Location     Type
  3692 ;;		None
  3693 ;; Return value:  Size  Location     Type
  3694 ;;                  1    wreg      void 
  3695 ;; Registers used:
  3696 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3697 ;; Tracked objects:
  3698 ;;		On entry : 0/0
  3699 ;;		On exit  : 1C/0
  3700 ;;		Unchanged: 0/0
  3701 ;; Data sizes:     COMMON   BANK0   BANK1
  3702 ;;      Params:         0       0       0
  3703 ;;      Locals:         0       0       0
  3704 ;;      Temps:          1       0       0
  3705 ;;      Totals:         1       0       0
  3706 ;;Total ram usage:        1 bytes
  3707 ;; Hardware stack levels used:    1
  3708 ;; Hardware stack levels required when called:    1
  3709 ;; This function calls:
  3710 ;;		_start_TMR0_ISR
  3711 ;;		_stop_TMR0_ISR
  3712 ;;		i1_start_RX_USART_ISR
  3713 ;; This function is called by:
  3714 ;;		Interrupt level 1
  3715 ;; This function uses a non-reentrant model
  3716 ;;
  3717                           
  3718  0004                     _isr:
  3719                           
  3720                           ;incstack = 0
  3721  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  3722                           
  3723                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3724  0005  3180               	pagesel	$
  3725                           
  3726                           ;main.c: 157:     if (TMR0IF && TMR0IE) {
  3727  0006  190B               	btfsc	11,2	;volatile
  3728  0007  1E8B               	btfss	11,5	;volatile
  3729  0008  2813               	goto	i1l132
  3730                           
  3731                           ;main.c: 159:         TMR0IF = 0;
  3732  0009  110B               	bcf	11,2	;volatile
  3733                           
  3734                           ;main.c: 160:         TMR0 = TIMER0_timeout;
  3735  000A  0020               	movlb	0	; select bank0
  3736  000B  0839               	movf	_TIMER0_timeout,w	;volatile
  3737  000C  0095               	movwf	21	;volatile
  3738                           
  3739                           ;main.c: 163:         TIMER0_flag = 1;
  3740  000D  3001               	movlw	1
  3741  000E  00F3               	movwf	??_isr
  3742  000F  0873               	movf	??_isr,w
  3743  0010  00BD               	movwf	_TIMER0_flag	;volatile
  3744                           
  3745                           ;main.c: 168:         stop_TMR0_ISR();
  3746  0011  238B               	fcall	_stop_TMR0_ISR
  3747  0012  2850               	goto	i1l133
  3748  0013                     i1l132:	
  3749                           ;main.c: 171:     }
  3750                           
  3751                           
  3752                           ;main.c: 175:     if (RCIF) {
  3753  0013  0020               	movlb	0	; select bank0
  3754  0014  1E91               	btfss	17,5	;volatile
  3755  0015  2835               	goto	i1l134
  3756                           
  3757                           ;main.c: 176:         stop_TMR0_ISR();
  3758  0016  238B               	fcall	_stop_TMR0_ISR
  3759                           
  3760                           ;main.c: 179:        if (OERR) {
  3761  0017  0023               	movlb	3	; select bank3
  3762  0018  1C9D               	btfss	29,1	;volatile
  3763  0019  281F               	goto	i1l1895
  3764                           
  3765                           ;main.c: 181:             CREN = 0;
  3766  001A  121D               	bcf	29,4	;volatile
  3767                           
  3768                           ;main.c: 182:             CREN = 1;
  3769  001B  161D               	bsf	29,4	;volatile
  3770                           
  3771                           ;main.c: 183:             USART_rx_index = 0;
  3772  001C  0020               	movlb	0	; select bank0
  3773  001D  01BC               	clrf	_USART_rx_index	;volatile
  3774  001E  2850               	goto	i1l133
  3775  001F                     i1l1895:
  3776                           
  3777                           ;main.c: 188:         if (USART_rx_index >= 10) {
  3778  001F  300A               	movlw	10
  3779  0020  0020               	movlb	0	; select bank0
  3780  0021  023C               	subwf	_USART_rx_index,w	;volatile
  3781  0022  1803               	btfsc	3,0
  3782                           
  3783                           ;main.c: 189:             USART_rx_index = 0;
  3784  0023  01BC               	clrf	_USART_rx_index	;volatile
  3785                           
  3786                           ;main.c: 192:         USART_rx_data[USART_rx_index++] = RCREG;
  3787  0024  0023               	movlb	3	; select bank3
  3788  0025  0819               	movf	25,w	;volatile
  3789  0026  00F3               	movwf	??_isr
  3790  0027  0020               	movlb	0	; select bank0
  3791  0028  083C               	movf	_USART_rx_index,w
  3792  0029  3E2F               	addlw	(low (_USART_rx_data| 0))& (0+255)
  3793  002A  0086               	movwf	6
  3794  002B  0187               	clrf	7
  3795  002C  0873               	movf	??_isr,w
  3796  002D  0081               	movwf	1
  3797  002E  3001               	movlw	1
  3798  002F  00F3               	movwf	??_isr
  3799  0030  0873               	movf	??_isr,w
  3800  0031  07BC               	addwf	_USART_rx_index,f	;volatile
  3801                           
  3802                           ;main.c: 194:         start_TMR0_ISR(98);
  3803  0032  3062               	movlw	98
  3804  0033  2340               	fcall	_start_TMR0_ISR
  3805  0034  2850               	goto	i1l133
  3806  0035                     i1l134:	
  3807                           ;main.c: 197:     }
  3808                           
  3809                           
  3810                           ;main.c: 201:     if (TXIF && TXIE) {
  3811  0035  1E11               	btfss	17,4	;volatile
  3812  0036  2850               	goto	i1l133
  3813  0037  0021               	movlb	1	; select bank1
  3814  0038  1E11               	btfss	17,4	;volatile
  3815  0039  2850               	goto	i1l133
  3816                           
  3817                           ;main.c: 203:         TXREG = USART_tx_data[USART_tx_index++];
  3818  003A  0879               	movf	_USART_tx_index,w
  3819  003B  3E20               	addlw	(low (_USART_tx_data| 0))& (0+255)
  3820  003C  0086               	movwf	6
  3821  003D  0187               	clrf	7
  3822  003E  0801               	movf	1,w
  3823  003F  0023               	movlb	3	; select bank3
  3824  0040  009A               	movwf	26	;volatile
  3825  0041  3001               	movlw	1
  3826  0042  00F3               	movwf	??_isr
  3827  0043  0873               	movf	??_isr,w
  3828  0044  07F9               	addwf	_USART_tx_index,f	;volatile
  3829                           
  3830                           ;main.c: 205:         if (USART_tx_index >= USART_tx_length) {
  3831  0045  0878               	movf	_USART_tx_length,w	;volatile
  3832  0046  0279               	subwf	_USART_tx_index,w	;volatile
  3833  0047  1C03               	skipc
  3834  0048  2850               	goto	i1l133
  3835                           
  3836                           ;main.c: 206:             TXIE = 0;
  3837  0049  0021               	movlb	1	; select bank1
  3838  004A  1211               	bcf	17,4	;volatile
  3839                           
  3840                           ;main.c: 207:             USART_tx_flag = 0;
  3841  004B  01F7               	clrf	_USART_tx_flag	;volatile
  3842                           
  3843                           ;main.c: 211:             _delay((unsigned long)((3)*(500000/4000.0)));
  3844  004C  307D               	movlw	125
  3845  004D                     u123_27:
  3846  004D  0B89               	decfsz	9,f
  3847  004E  284D               	goto	u123_27
  3848                           
  3849                           ;main.c: 213:             start_RX_USART_ISR();
  3850  004F  2310               	fcall	i1_start_RX_USART_ISR
  3851  0050                     i1l133:
  3852  0050  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  3853  0051  0009               	retfie
  3854  0052                     __end_of_isr:
  3855                           
  3856                           	psect	text20
  3857  0310                     __ptext20:	
  3858 ;; *************** function i1_start_RX_USART_ISR *****************
  3859 ;; Defined at:
  3860 ;;		line 83 in file "USART1823.c"
  3861 ;; Parameters:    Size  Location     Type
  3862 ;;		None
  3863 ;; Auto vars:     Size  Location     Type
  3864 ;;		None
  3865 ;; Return value:  Size  Location     Type
  3866 ;;                  1    wreg      void 
  3867 ;; Registers used:
  3868 ;;		wreg, status,2
  3869 ;; Tracked objects:
  3870 ;;		On entry : 0/1
  3871 ;;		On exit  : 1F/1
  3872 ;;		Unchanged: 0/0
  3873 ;; Data sizes:     COMMON   BANK0   BANK1
  3874 ;;      Params:         0       0       0
  3875 ;;      Locals:         0       0       0
  3876 ;;      Temps:          0       0       0
  3877 ;;      Totals:         0       0       0
  3878 ;;Total ram usage:        0 bytes
  3879 ;; Hardware stack levels used:    1
  3880 ;; This function calls:
  3881 ;;		Nothing
  3882 ;; This function is called by:
  3883 ;;		_isr
  3884 ;; This function uses a non-reentrant model
  3885 ;;
  3886                           
  3887                           
  3888                           ;psect for function i1_start_RX_USART_ISR
  3889  0310                     i1_start_RX_USART_ISR:
  3890                           
  3891                           ;USART1823.c: 86:      { BRGH = 1; BRG16 = 1; SPBRGH = 0; SPBRGL = 12; };
  3892                           
  3893                           ;incstack = 0
  3894                           ; Regs used in i1_start_RX_USART_ISR: [wreg+status,2]
  3895  0310  0023               	movlb	3	; select bank3
  3896  0311  151E               	bsf	30,2	;volatile
  3897  0312  159F               	bsf	31,3	;volatile
  3898  0313  019C               	clrf	28	;volatile
  3899  0314  300C               	movlw	12
  3900  0315  009B               	movwf	27	;volatile
  3901                           
  3902                           ;USART1823.c: 88:     SYNC = 0;
  3903  0316  121E               	bcf	30,4	;volatile
  3904                           
  3905                           ;USART1823.c: 89:     SPEN = 1;
  3906  0317  179D               	bsf	29,7	;volatile
  3907                           
  3908                           ;USART1823.c: 90:     CREN = 1;
  3909  0318  161D               	bsf	29,4	;volatile
  3910                           
  3911                           ;USART1823.c: 92:     USART_rx_flag = 0;
  3912  0319  01F6               	clrf	_USART_rx_flag	;volatile
  3913                           
  3914                           ;USART1823.c: 93:     USART_rx_index = 0;
  3915  031A  0020               	movlb	0	; select bank0
  3916  031B  01BC               	clrf	_USART_rx_index	;volatile
  3917                           
  3918                           ;USART1823.c: 95:     RCIE = 1;
  3919  031C  0021               	movlb	1	; select bank1
  3920  031D  1691               	bsf	17,5	;volatile
  3921                           
  3922                           ;USART1823.c: 96:     PEIE = 1;
  3923  031E  170B               	bsf	11,6	;volatile
  3924                           
  3925                           ;USART1823.c: 97:     GIE = 1;
  3926  031F  178B               	bsf	11,7	;volatile
  3927  0320  0008               	return
  3928  0321                     __end_ofi1_start_RX_USART_ISR:
  3929                           
  3930                           	psect	text21
  3931  038B                     __ptext21:	
  3932 ;; *************** function _stop_TMR0_ISR *****************
  3933 ;; Defined at:
  3934 ;;		line 44 in file "TMR0.c"
  3935 ;; Parameters:    Size  Location     Type
  3936 ;;		None
  3937 ;; Auto vars:     Size  Location     Type
  3938 ;;		None
  3939 ;; Return value:  Size  Location     Type
  3940 ;;                  1    wreg      void 
  3941 ;; Registers used:
  3942 ;;		None
  3943 ;; Tracked objects:
  3944 ;;		On entry : 1F/0
  3945 ;;		On exit  : 1F/0
  3946 ;;		Unchanged: 1F/0
  3947 ;; Data sizes:     COMMON   BANK0   BANK1
  3948 ;;      Params:         0       0       0
  3949 ;;      Locals:         0       0       0
  3950 ;;      Temps:          0       0       0
  3951 ;;      Totals:         0       0       0
  3952 ;;Total ram usage:        0 bytes
  3953 ;; Hardware stack levels used:    1
  3954 ;; This function calls:
  3955 ;;		Nothing
  3956 ;; This function is called by:
  3957 ;;		_isr
  3958 ;; This function uses a non-reentrant model
  3959 ;;
  3960                           
  3961                           
  3962                           ;psect for function _stop_TMR0_ISR
  3963  038B                     _stop_TMR0_ISR:
  3964                           
  3965                           ;TMR0.c: 47:     TMR0IE = 0;
  3966                           
  3967                           ;incstack = 0
  3968                           ; Regs used in _stop_TMR0_ISR: []
  3969  038B  128B               	bcf	11,5	;volatile
  3970                           
  3971                           ;TMR0.c: 48:     TMR0IF = 0;
  3972  038C  110B               	bcf	11,2	;volatile
  3973  038D  0008               	return
  3974  038E                     __end_of_stop_TMR0_ISR:
  3975                           
  3976                           	psect	text22
  3977  0340                     __ptext22:	
  3978 ;; *************** function _start_TMR0_ISR *****************
  3979 ;; Defined at:
  3980 ;;		line 30 in file "TMR0.c"
  3981 ;; Parameters:    Size  Location     Type
  3982 ;;  val             1    wreg     unsigned char 
  3983 ;; Auto vars:     Size  Location     Type
  3984 ;;  val             1    2[COMMON] unsigned char 
  3985 ;; Return value:  Size  Location     Type
  3986 ;;                  1    wreg      void 
  3987 ;; Registers used:
  3988 ;;		wreg, status,2
  3989 ;; Tracked objects:
  3990 ;;		On entry : 1F/0
  3991 ;;		On exit  : 1F/0
  3992 ;;		Unchanged: 0/0
  3993 ;; Data sizes:     COMMON   BANK0   BANK1
  3994 ;;      Params:         0       0       0
  3995 ;;      Locals:         1       0       0
  3996 ;;      Temps:          2       0       0
  3997 ;;      Totals:         3       0       0
  3998 ;;Total ram usage:        3 bytes
  3999 ;; Hardware stack levels used:    1
  4000 ;; This function calls:
  4001 ;;		Nothing
  4002 ;; This function is called by:
  4003 ;;		_isr
  4004 ;; This function uses a non-reentrant model
  4005 ;;
  4006                           
  4007                           
  4008                           ;psect for function _start_TMR0_ISR
  4009  0340                     _start_TMR0_ISR:
  4010                           
  4011                           ;incstack = 0
  4012                           ; Regs used in _start_TMR0_ISR: [wreg+status,2]
  4013                           ;start_TMR0_ISR@val stored from wreg
  4014  0340  00F2               	movwf	start_TMR0_ISR@val
  4015                           
  4016                           ;TMR0.c: 30: void start_TMR0_ISR(unsigned char val);TMR0.c: 31: {;TMR0.c: 32:     TIMER0
      +                          _timeout = val;
  4017  0341  0872               	movf	start_TMR0_ISR@val,w
  4018  0342  00F0               	movwf	??_start_TMR0_ISR
  4019  0343  01F1               	clrf	??_start_TMR0_ISR+1
  4020  0344  0870               	movf	??_start_TMR0_ISR,w
  4021  0345  00B9               	movwf	_TIMER0_timeout	;volatile
  4022  0346  0871               	movf	??_start_TMR0_ISR+1,w
  4023  0347  00BA               	movwf	_TIMER0_timeout+1	;volatile
  4024                           
  4025                           ;TMR0.c: 33:     TIMER0_flag = 0;
  4026  0348  01BD               	clrf	_TIMER0_flag	;volatile
  4027                           
  4028                           ;TMR0.c: 36:     TMR0 = TIMER0_timeout;
  4029  0349  0839               	movf	_TIMER0_timeout,w	;volatile
  4030  034A  0095               	movwf	21	;volatile
  4031                           
  4032                           ;TMR0.c: 39:     TMR0IF = 0;
  4033  034B  110B               	bcf	11,2	;volatile
  4034                           
  4035                           ;TMR0.c: 40:     TMR0IE = 1;
  4036  034C  168B               	bsf	11,5	;volatile
  4037                           
  4038                           ;TMR0.c: 41:     GIE = 1;
  4039  034D  178B               	bsf	11,7	;volatile
  4040  034E  0008               	return
  4041  034F                     __end_of_start_TMR0_ISR:
  4042  007E                     btemp	set	126	;btemp
  4043  007E                     int$flags	set	126
  4044  007E                     wtemp0	set	126
  4045                           
  4046                           	psect	config
  4047                           
  4048                           ;Config register CONFIG1 @ 0x8007
  4049                           ;	Oscillator Selection
  4050                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  4051                           ;	Watchdog Timer Enable
  4052                           ;	WDTE = ON, WDT enabled
  4053                           ;	Power-up Timer Enable
  4054                           ;	PWRTE = OFF, PWRT disabled
  4055                           ;	MCLR Pin Function Select
  4056                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  4057                           ;	Flash Program Memory Code Protection
  4058                           ;	CP = OFF, Program memory code protection is disabled
  4059                           ;	Data Memory Code Protection
  4060                           ;	CPD = OFF, Data memory code protection is disabled
  4061                           ;	Brown-out Reset Enable
  4062                           ;	BOREN = OFF, Brown-out Reset disabled
  4063                           ;	Clock Out Enable
  4064                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  4065                           ;	Internal/External Switchover
  4066                           ;	IESO = ON, Internal/External Switchover mode is enabled
  4067                           ;	Fail-Safe Clock Monitor Enable
  4068                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  4069  8007                     	org	32775
  4070  8007  D9FC               	dw	55804
  4071                           
  4072                           ;Config register CONFIG2 @ 0x8008
  4073                           ;	Flash Memory Self-Write Protection
  4074                           ;	WRT = OFF, Write protection off
  4075                           ;	PLL Enable
  4076                           ;	PLLEN = OFF, 4x PLL disabled
  4077                           ;	Stack Overflow/Underflow Reset Enable
  4078                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  4079                           ;	Brown-out Reset Voltage Selection
  4080                           ;	BORV = HI, Brown-out Reset Voltage (Vbor), high trip point selected.
  4081                           ;	Low-Voltage Programming Enable
  4082                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  4083  8008                     	org	32776
  4084  8008  DAFF               	dw	56063

Data Sizes:
    Strings     0
    Constant    63
    Data        0
    BSS         44
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     40      80
    BANK1            32      0       0

Pointer List with Targets:

    measure@Q	PTR short  size(1) Largest target is 2
		 -> sweep@Q(BANK0[2]), 

    measure@I	PTR short  size(1) Largest target is 2
		 -> sweep@I(BANK0[2]), 

    calculate_checksum@data	PTR unsigned char  size(1) Largest target is 10
		 -> sweep@aux(BANK0[7]), measure_Impedance_SE@aux(COMMON[8]), mess_rec(BANK0[10]), 

    lputs_ISR@data	PTR unsigned char  size(1) Largest target is 13
		 -> sweep@aux(BANK0[7]), calibrate_reader@aux(COMMON[8]), measure_Impedance_SE@aux(COMMON[8]), measure_Offset@aux(COMMON[5]), 
		 -> measure_Impedance_no_offset@aux(COMMON[13]), measure_Impedance@aux(COMMON[13]), read_ADC_channels@aux(COMMON[7]), mess_rec(BANK0[10]), 

    setFreq@asic	PTR struct . size(1) Largest target is 2
		 -> sweep@asic(BANK0[2]), 

    setGain@asic	PTR struct . size(1) Largest target is 2
		 -> sweep@asic(BANK0[2]), 


Critical Paths under _main in COMMON

    _sweep->_setFreq
    _sweep->_setGain
    _measure->_ADC_5
    _measure->_config

Critical Paths under _isr in COMMON

    _isr->_start_TMR0_ISR

Critical Paths under _main in BANK0

    _main->_sweep
    _sweep->_measure
    _measure->_ADC_5

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    6569
                                             39 BANK0      1     1      0
                  _SYSTEM_Initialize
                  _USARTX_change_pol
                          _setup_ADC
                         _setup_TMR0
                          _start_RCM
                 _start_RX_USART_ISR
                 _start_TX_USART_ISR
                              _sweep
 ---------------------------------------------------------------------------------
 (1) _sweep                                               21    21      0    6569
                                             18 BANK0     21    21      0
                 _calculate_checksum
                          _lputs_ISR
                            _measure
                            _setFreq
                            _setGain
 ---------------------------------------------------------------------------------
 (2) _setGain                                              4     3      1     846
                                              4 COMMON     2     1      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setFreq                                              4     3      1     408
                                              4 COMMON     2     1      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _measure                                             14    11      3    2216
                                              4 BANK0     14    11      3
                              _ADC_5
                             _config
 ---------------------------------------------------------------------------------
 (3) _config                                               5     3      2    1242
                                              4 COMMON     2     0      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _ADC_5                                                6     4      2      40
                                              4 COMMON     2     0      2
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _lputs_ISR                                            5     4      1    1272
                                              4 COMMON     1     0      1
                                              0 BANK0      4     4      0
                     _close_RX_USART
 ---------------------------------------------------------------------------------
 (3) _close_RX_USART                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _calculate_checksum                                   6     5      1     505
                                              4 COMMON     1     0      1
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _start_TX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RX_USART_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_RCM                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_TMR0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_ADC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _USARTX_change_pol                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  1     1      0      22
                                              3 COMMON     1     1      0
                     _start_TMR0_ISR
                      _stop_TMR0_ISR
               i1_start_RX_USART_ISR
 ---------------------------------------------------------------------------------
 (5) i1_start_RX_USART_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _stop_TMR0_ISR                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _start_TMR0_ISR                                       3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _USARTX_change_pol
   _setup_ADC
   _setup_TMR0
   _start_RCM
   _start_RX_USART_ISR
   _start_TX_USART_ISR
   _sweep
     _calculate_checksum
     _lputs_ISR
       _close_RX_USART
     _measure
       _ADC_5
       _config
     _setFreq
     _setGain

 _isr (ROOT)
   _start_TMR0_ISR
   _stop_TMR0_ISR
   i1_start_RX_USART_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      5A       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     28      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      5A       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Sat Feb 20 20:46:41 2021

                  _USART_rx_data 002F                    _USART_rx_flag 0076                    _USART_tx_data 0020  
                  _USART_tx_flag 0077                              l121 0255                              l153 01EC  
                            l416 00E5                              l450 02C2                              _GIE 005F  
                            _RA5 0065                              _PS0 04A8                              _PS1 04A9  
                            _PS2 04AA                              _PSA 04AB                              u845 01F7  
                            u875 02CD                              _isr 0004                              wreg 0009  
                 _USART_rx_index 003C                   _USART_tx_index 0079                             l2011 0270  
                           l2013 0287                             l2031 030E                             l2131 0139  
                           l2115 0117                             l2029 02FB                             l2109 010F  
                           l2143 0149                             l2145 014F                             l2091 0101  
                           l2075 00D4                             l2059 00A5                             l2147 0153  
                           l2085 00F3                             l2191 0261                             l1945 01F4  
                           l1947 01F0                             ?_isr 0070                             _ADGO 04E9  
                           _BRGH 0CF2                             _CREN 0CEC                             u1045 00DE  
                           u1055 00EF                             u1207 006B                             u1065 00FD  
                           u1217 0080                             u1145 0156                             u1227 00AF  
                           _LATA 010C                             _LATC 010E                             u1197 024E  
                           _PEIE 005E                             _RCIE 048D                             _RCIF 008D  
                           _OERR 0CE9                             _SCKP 0CFC                             _TMR0 0015  
                           _SPEN 0CEF                             _TXIE 048C                             _TXEN 0CF5  
                           _TXIF 008C                             _SYNC 0CF4                             _WPUA 020C  
                           _WPUC 020E           __size_of_stop_TMR0_ISR 0003                             _filt 0215  
                           _main 0241                             fsr0h 0005                             fsr1h 0007  
                           indf0 0000                             fsr0l 0004                             indf1 0001  
                           fsr1l 0006                             btemp 007E      __size_of_calculate_checksum 0018  
                           start 0052                            ??_isr 0073   __size_of_OSCILLATOR_Initialize 0006  
                _USART_tx_length 0078    __end_of_OSCILLATOR_Initialize 0381                            ?_main 0070  
                          _ADC_5 02BC                            _BRG16 0CFB                            i1l132 0013  
                          i1l133 0050                            i1l134 0035                            _RCREG 0199  
                          _PORTC 000E                            _TRISA 008C                   _start_TMR0_ISR 0340  
                          _TRISC 008E                            _TXREG 019A                            _gains 035A  
                __end_of_measure 0103                            _freqs 034F                  __end_of_setGain 01DB  
                          _sweep 0103                  __end_of_setFreq 02BC    __size_ofi1_start_RX_USART_ISR 0011  
                          status 0003                            wtemp0 007E                  __initialization 0053  
                   __end_of_filt 0241                     __end_of_main 026B                    _stop_TMR0_ISR 038B  
               ??_close_RX_USART 0074           __end_of_start_TMR0_ISR 034F                           ??_main 006F  
                         ?_ADC_5 0074                   _TIMER0_timeout 0039                           _ADCON0 009D  
                         _ADCON1 009E                      measure@aux1 0058                      measure@aux2 0056  
                    measure@asic 004D                           _ADRESH 009C                           _ADRESL 009B  
                         _APFCON 011D                           _ANSELA 018C                           _ANSELC 018E  
                         ?_sweep 0070                           u123_27 004D                           i1l1895 001F  
                         _OSCCON 0099                           _TMR0IE 005D                           _TMR0IF 005A  
                         _TMR0CS 04AD                           _SPBRGH 019C                           _SPBRGL 019B  
                 ?_stop_TMR0_ISR 0070                           _config 01DB                  ?_start_TMR0_ISR 0070  
                      ??_measure 004F      __size_of_start_RX_USART_ISR 0010                        ??_setGain 0075  
                      ??_setFreq 0075                           sweep@I 0067                           sweep@Q 0069  
                         sweep@i 0065                _SYSTEM_Initialize 0388          __end_of__initialization 005D  
             ?_SYSTEM_Initialize 0070                    __end_of_ADC_5 02DF                   __pcstackCOMMON 0070  
            ??_SYSTEM_Initialize 0074                    __end_of_gains 0362                    __end_of_freqs 035A  
                  __end_of_sweep 019E                          ??_ADC_5 0048                   _OPTION_REGbits 0095  
    __size_of_start_TX_USART_ISR 000F                      setGain@asic 0049        __end_of_SYSTEM_Initialize 038B  
                        ??_sweep 005A                       __pbssBANK0 0020                      setFreq@asic 0048  
                     __pmaintext 0241                  ??_stop_TMR0_ISR 0070                       __pintentry 0004  
                        ?_config 0074                     measure@value 0054                          _CLKRCON 039A  
             __size_of_lputs_ISR 0029                  lputs_ISR@length 0074                setFreq@freq_index 0074  
             __size_of_setup_ADC 0006                          _OSCSTAT 009A                          _OSCTUNE 0098  
             __size_of_start_RCM 0004                          _RXDTSEL 08EF                          _TXCKSEL 08EA  
     __end_of_calculate_checksum 0310     __end_ofi1_start_RX_USART_ISR 0321                  __size_of_config 003A  
                        __ptext1 0103                          __ptext2 019E                          __ptext3 0294  
                        __ptext4 0060                          __ptext5 01DB                          __ptext6 02BC  
                        __ptext7 026B                          __ptext8 0362                          __ptext9 02F8  
                        _measure 0060            _OSCILLATOR_Initialize 037B                     __size_of_isr 004E  
                        _setGain 019E                          _setFreq 0294         ??_PIN_MANAGER_Initialize 0074  
                        config@i 0049                setGain@gain_index 0074       __size_of_SYSTEM_Initialize 0003  
                        clrloop0 036A                    _mess_rec_size 003B             end_of_initialization 005D  
              __end_of_lputs_ISR 0294                __end_of_setup_ADC 037B                 ??_start_TMR0_ISR 0070  
              __end_of_start_RCM 0385                       _setup_TMR0 036F                       config@conf 0074  
                 __end_of_config 0215       __end_of_start_RX_USART_ISR 0331           ?_OSCILLATOR_Initialize 0070  
            start_initialization 0053  __size_of_PIN_MANAGER_Initialize 0019                      __end_of_isr 0052  
        __size_of_close_RX_USART 0007                _USARTX_change_pol 0385             i1_start_RX_USART_ISR 0310  
             ?_USARTX_change_pol 0070              ??_USARTX_change_pol 0074                   ADC_5@ADC_value 004A  
                       ??_config 0048                      ?_setup_TMR0 0070       __end_of_start_TX_USART_ISR 0340  
                    __pbssCOMMON 0076                        ___latbits 0000                    __pcstackBANK0 0048  
      __end_of_USARTX_change_pol 0388                  sweep@gain_index 006B            ?i1_start_RX_USART_ISR 0070  
                     setGain@aux 0048           _PIN_MANAGER_Initialize 02DF                       setFreq@aux 0049  
          __end_of_stop_TMR0_ISR 038E               _calculate_checksum 02F8                   __size_of_ADC_5 0023  
            ?_calculate_checksum 0074                         ?_measure 004C                         ?_setGain 0074  
                       ?_setFreq 0074                    measure@offset 0051                  sweep@freq_index 0064  
                 __size_of_sweep 009B              __size_of_setup_TMR0 0006             ??_calculate_checksum 0048  
                      clear_ram0 0369                       lputs_ISR@i 004A                        _lputs_ISR 026B  
                      _setup_ADC 0375                        _start_RCM 0381                        config@out 004A  
     __size_of_USARTX_change_pol 0003           ??i1_start_RX_USART_ISR 0070                   _close_RX_USART 0362  
                     sweep@check 005C                       sweep@count 0066                       ?_lputs_ISR 0074  
        calculate_checksum@check 004A                       ?_setup_ADC 0070          ??_OSCILLATOR_Initialize 0074  
              start_TMR0_ISR@val 0072                       ?_start_RCM 0070           __end_of_close_RX_USART 0369  
               __size_of_measure 00A3                 __size_of_setGain 003D                 __size_of_setFreq 0028  
                       __ptext10 0331                         __ptext11 0321                         __ptext20 0310  
                       __ptext12 0381                         __ptext21 038B                         __ptext13 036F  
                       __ptext22 0340                         __ptext14 0375                         __ptext15 0385  
                       __ptext16 0388                         __ptext17 02DF                         __ptext18 037B  
                  lputs_ISR@data 004B               _start_RX_USART_ISR 0321                    __size_of_main 002A  
                       _mess_rec 003E              ?_start_RX_USART_ISR 0070                         int$flags 007E  
                   ??_setup_TMR0 0074                      _TIMER0_flag 003D             ??_start_RX_USART_ISR 0074  
                       measure@I 0053          __size_of_start_TMR0_ISR 000F                         measure@Q 004C  
                ?_close_RX_USART 0070                        sweep@asic 006D           calculate_checksum@data 004B  
                       intlevel1 0000               _start_TX_USART_ISR 0331          ?_PIN_MANAGER_Initialize 0070  
             __end_of_setup_TMR0 0375              ?_start_TX_USART_ISR 0070                      ??_lputs_ISR 0048  
                    ??_setup_ADC 0074                         sweep@aux 005D                         sweep@ret 006C  
                  __pstringtext1 0215                    __pstringtext2 034F                    __pstringtext3 035A  
          calculate_checksum@num 0074                      ??_start_RCM 0074             ??_start_TX_USART_ISR 0074  
 __end_of_PIN_MANAGER_Initialize 02F8              calculate_checksum@i 004C  
