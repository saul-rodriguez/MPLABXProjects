

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Mon Aug  6 19:49:07 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16F1823
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	stringtext13,global,class=STRCODE,delta=2
    18                           	psect	stringtext14,global,class=STRCODE,delta=2
    19                           	psect	stringtext15,global,class=STRCODE,delta=2
    20                           	psect	stringtext16,global,class=STRCODE,delta=2
    21                           	psect	stringtext17,global,class=STRCODE,delta=2
    22                           	psect	stringtext18,global,class=STRCODE,delta=2
    23                           	psect	stringtext19,global,class=STRCODE,delta=2
    24                           	psect	stringtext20,global,class=STRCODE,delta=2
    25                           	psect	cinit,global,class=CODE,merge=1,delta=2
    26                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    27                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    28                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    29                           	psect	clrtext,global,class=CODE,delta=2
    30                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    31                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    32                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    33                           	psect	text1,local,class=CODE,merge=1,delta=2
    34                           	psect	text2,local,class=CODE,merge=1,delta=2
    35                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text6,local,class=CODE,merge=1,delta=2
    39                           	psect	text7,local,class=CODE,merge=1,delta=2
    40                           	psect	text8,local,class=CODE,merge=1,delta=2
    41                           	psect	text9,local,class=CODE,merge=1,delta=2
    42                           	psect	text10,local,class=CODE,merge=1,delta=2
    43                           	psect	text11,local,class=CODE,merge=1,delta=2
    44                           	psect	text12,local,class=CODE,merge=1,delta=2
    45                           	psect	text13,local,class=CODE,merge=1,delta=2
    46                           	psect	text14,local,class=CODE,merge=1,delta=2
    47                           	psect	text15,local,class=CODE,merge=1,delta=2
    48                           	psect	text16,local,class=CODE,merge=1,delta=2
    49                           	psect	text17,local,class=CODE,merge=1,delta=2
    50                           	psect	text18,local,class=CODE,merge=1,delta=2
    51                           	psect	text19,local,class=CODE,merge=1,delta=2
    52                           	psect	text20,local,class=CODE,merge=1,delta=2
    53                           	psect	text21,local,class=CODE,merge=1,delta=2
    54                           	psect	text22,local,class=CODE,merge=1,delta=2
    55                           	psect	text23,local,class=CODE,merge=1,delta=2
    56                           	psect	text24,local,class=CODE,merge=1,delta=2
    57                           	psect	text25,local,class=CODE,merge=1,delta=2
    58                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text28,local,class=CODE,merge=1,delta=2
    61                           	psect	text29,local,class=CODE,merge=1,delta=2
    62                           	psect	text30,local,class=CODE,merge=1,delta=2
    63                           	psect	text31,local,class=CODE,merge=1,delta=2
    64                           	psect	text32,local,class=CODE,merge=1,delta=2
    65                           	psect	text33,local,class=CODE,merge=1,delta=2
    66                           	psect	text34,local,class=CODE,merge=1,delta=2
    67                           	psect	text35,local,class=CODE,merge=1,delta=2
    68                           	psect	text36,local,class=CODE,merge=1,delta=2
    69                           	psect	text37,local,class=CODE,merge=1,delta=2
    70                           	psect	text38,local,class=CODE,merge=1,delta=2
    71                           	psect	text39,local,class=CODE,merge=1,delta=2
    72                           	psect	text40,local,class=CODE,merge=1,delta=2
    73                           	psect	text41,local,class=CODE,merge=1,delta=2
    74                           	psect	text42,local,class=CODE,merge=1,delta=2,group=2
    75                           	psect	text43,local,class=CODE,merge=1,delta=2,group=2
    76                           	psect	text44,local,class=CODE,merge=1,delta=2,group=2
    77                           	psect	text45,local,class=CODE,merge=1,delta=2,group=2
    78                           	psect	intentry,global,class=CODE,delta=2
    79                           	psect	text47,local,class=CODE,merge=1,delta=2
    80                           	psect	text48,local,class=CODE,merge=1,delta=2
    81                           	psect	text49,local,class=CODE,merge=1,delta=2
    82                           	psect	text50,local,class=CODE,merge=1,delta=2
    83                           	psect	text51,local,class=CODE,merge=1,delta=2
    84                           	psect	text52,local,class=CODE,merge=1,delta=2
    85                           	psect	text53,local,class=CODE,merge=1,delta=2
    86                           	psect	text54,local,class=CODE,merge=1,delta=2
    87                           	psect	text55,local,class=CODE,merge=1,delta=2
    88                           	psect	text56,local,class=CODE,merge=1,delta=2
    89                           	psect	text57,local,class=CODE,merge=1,delta=2
    90                           	psect	text58,local,class=CODE,merge=1,delta=2
    91                           	psect	text59,local,class=CODE,merge=1,delta=2
    92                           	dabs	1,0x7E,2
    93  0000                     
    94                           ; Version 2.00
    95                           ; Generated 27/05/2018 GMT
    96                           ; 
    97                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    98                           ; All rights reserved.
    99                           ; 
   100                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   101                           ; 
   102                           ; Redistribution and use in source and binary forms, with or without modification, are
   103                           ; permitted provided that the following conditions are met:
   104                           ; 
   105                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   106                           ;        conditions and the following disclaimer.
   107                           ; 
   108                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   109                           ;        of conditions and the following disclaimer in the documentation and/or other
   110                           ;        materials provided with the distribution.
   111                           ; 
   112                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   113                           ;        software without specific prior written permission.
   114                           ; 
   115                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   116                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   117                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   118                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   119                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   120                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   121                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   122                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   123                           ; 
   124                           ; 
   125                           ; Code-generator required, PIC16F1823 Definitions
   126                           ; 
   127                           ; SFR Addresses
   128  0000                     	;# 
   129  0001                     	;# 
   130  0002                     	;# 
   131  0003                     	;# 
   132  0004                     	;# 
   133  0005                     	;# 
   134  0006                     	;# 
   135  0007                     	;# 
   136  0008                     	;# 
   137  0009                     	;# 
   138  000A                     	;# 
   139  000B                     	;# 
   140  000C                     	;# 
   141  000E                     	;# 
   142  0011                     	;# 
   143  0012                     	;# 
   144  0015                     	;# 
   145  0016                     	;# 
   146  0016                     	;# 
   147  0017                     	;# 
   148  0018                     	;# 
   149  0019                     	;# 
   150  001A                     	;# 
   151  001B                     	;# 
   152  001C                     	;# 
   153  001E                     	;# 
   154  001F                     	;# 
   155  008C                     	;# 
   156  008E                     	;# 
   157  0091                     	;# 
   158  0092                     	;# 
   159  0095                     	;# 
   160  0096                     	;# 
   161  0097                     	;# 
   162  0098                     	;# 
   163  0099                     	;# 
   164  009A                     	;# 
   165  009B                     	;# 
   166  009B                     	;# 
   167  009C                     	;# 
   168  009D                     	;# 
   169  009E                     	;# 
   170  010C                     	;# 
   171  010E                     	;# 
   172  0111                     	;# 
   173  0112                     	;# 
   174  0113                     	;# 
   175  0114                     	;# 
   176  0115                     	;# 
   177  0116                     	;# 
   178  0117                     	;# 
   179  0118                     	;# 
   180  0119                     	;# 
   181  011A                     	;# 
   182  011B                     	;# 
   183  011D                     	;# 
   184  011D                     	;# 
   185  018C                     	;# 
   186  018E                     	;# 
   187  0191                     	;# 
   188  0191                     	;# 
   189  0192                     	;# 
   190  0193                     	;# 
   191  0193                     	;# 
   192  0193                     	;# 
   193  0194                     	;# 
   194  0195                     	;# 
   195  0196                     	;# 
   196  0199                     	;# 
   197  019A                     	;# 
   198  019B                     	;# 
   199  019B                     	;# 
   200  019B                     	;# 
   201  019B                     	;# 
   202  019C                     	;# 
   203  019C                     	;# 
   204  019D                     	;# 
   205  019E                     	;# 
   206  019F                     	;# 
   207  020C                     	;# 
   208  020E                     	;# 
   209  0211                     	;# 
   210  0211                     	;# 
   211  0212                     	;# 
   212  0212                     	;# 
   213  0213                     	;# 
   214  0213                     	;# 
   215  0214                     	;# 
   216  0214                     	;# 
   217  0215                     	;# 
   218  0215                     	;# 
   219  0215                     	;# 
   220  0216                     	;# 
   221  0216                     	;# 
   222  0217                     	;# 
   223  0217                     	;# 
   224  0291                     	;# 
   225  0291                     	;# 
   226  0292                     	;# 
   227  0293                     	;# 
   228  0294                     	;# 
   229  0295                     	;# 
   230  0295                     	;# 
   231  0296                     	;# 
   232  0391                     	;# 
   233  0392                     	;# 
   234  0393                     	;# 
   235  039A                     	;# 
   236  039C                     	;# 
   237  039D                     	;# 
   238  039E                     	;# 
   239  039F                     	;# 
   240  0FE4                     	;# 
   241  0FE5                     	;# 
   242  0FE6                     	;# 
   243  0FE7                     	;# 
   244  0FE8                     	;# 
   245  0FE9                     	;# 
   246  0FEA                     	;# 
   247  0FEB                     	;# 
   248  0FED                     	;# 
   249  0FEE                     	;# 
   250  0FEF                     	;# 
   251  0000                     	;# 
   252  0001                     	;# 
   253  0002                     	;# 
   254  0003                     	;# 
   255  0004                     	;# 
   256  0005                     	;# 
   257  0006                     	;# 
   258  0007                     	;# 
   259  0008                     	;# 
   260  0009                     	;# 
   261  000A                     	;# 
   262  000B                     	;# 
   263  000C                     	;# 
   264  000E                     	;# 
   265  0011                     	;# 
   266  0012                     	;# 
   267  0015                     	;# 
   268  0016                     	;# 
   269  0016                     	;# 
   270  0017                     	;# 
   271  0018                     	;# 
   272  0019                     	;# 
   273  001A                     	;# 
   274  001B                     	;# 
   275  001C                     	;# 
   276  001E                     	;# 
   277  001F                     	;# 
   278  008C                     	;# 
   279  008E                     	;# 
   280  0091                     	;# 
   281  0092                     	;# 
   282  0095                     	;# 
   283  0096                     	;# 
   284  0097                     	;# 
   285  0098                     	;# 
   286  0099                     	;# 
   287  009A                     	;# 
   288  009B                     	;# 
   289  009B                     	;# 
   290  009C                     	;# 
   291  009D                     	;# 
   292  009E                     	;# 
   293  010C                     	;# 
   294  010E                     	;# 
   295  0111                     	;# 
   296  0112                     	;# 
   297  0113                     	;# 
   298  0114                     	;# 
   299  0115                     	;# 
   300  0116                     	;# 
   301  0117                     	;# 
   302  0118                     	;# 
   303  0119                     	;# 
   304  011A                     	;# 
   305  011B                     	;# 
   306  011D                     	;# 
   307  011D                     	;# 
   308  018C                     	;# 
   309  018E                     	;# 
   310  0191                     	;# 
   311  0191                     	;# 
   312  0192                     	;# 
   313  0193                     	;# 
   314  0193                     	;# 
   315  0193                     	;# 
   316  0194                     	;# 
   317  0195                     	;# 
   318  0196                     	;# 
   319  0199                     	;# 
   320  019A                     	;# 
   321  019B                     	;# 
   322  019B                     	;# 
   323  019B                     	;# 
   324  019B                     	;# 
   325  019C                     	;# 
   326  019C                     	;# 
   327  019D                     	;# 
   328  019E                     	;# 
   329  019F                     	;# 
   330  020C                     	;# 
   331  020E                     	;# 
   332  0211                     	;# 
   333  0211                     	;# 
   334  0212                     	;# 
   335  0212                     	;# 
   336  0213                     	;# 
   337  0213                     	;# 
   338  0214                     	;# 
   339  0214                     	;# 
   340  0215                     	;# 
   341  0215                     	;# 
   342  0215                     	;# 
   343  0216                     	;# 
   344  0216                     	;# 
   345  0217                     	;# 
   346  0217                     	;# 
   347  0291                     	;# 
   348  0291                     	;# 
   349  0292                     	;# 
   350  0293                     	;# 
   351  0294                     	;# 
   352  0295                     	;# 
   353  0295                     	;# 
   354  0296                     	;# 
   355  0391                     	;# 
   356  0392                     	;# 
   357  0393                     	;# 
   358  039A                     	;# 
   359  039C                     	;# 
   360  039D                     	;# 
   361  039E                     	;# 
   362  039F                     	;# 
   363  0FE4                     	;# 
   364  0FE5                     	;# 
   365  0FE6                     	;# 
   366  0FE7                     	;# 
   367  0FE8                     	;# 
   368  0FE9                     	;# 
   369  0FEA                     	;# 
   370  0FEB                     	;# 
   371  0FED                     	;# 
   372  0FEE                     	;# 
   373  0FEF                     	;# 
   374  0000                     	;# 
   375  0001                     	;# 
   376  0002                     	;# 
   377  0003                     	;# 
   378  0004                     	;# 
   379  0005                     	;# 
   380  0006                     	;# 
   381  0007                     	;# 
   382  0008                     	;# 
   383  0009                     	;# 
   384  000A                     	;# 
   385  000B                     	;# 
   386  000C                     	;# 
   387  000E                     	;# 
   388  0011                     	;# 
   389  0012                     	;# 
   390  0015                     	;# 
   391  0016                     	;# 
   392  0016                     	;# 
   393  0017                     	;# 
   394  0018                     	;# 
   395  0019                     	;# 
   396  001A                     	;# 
   397  001B                     	;# 
   398  001C                     	;# 
   399  001E                     	;# 
   400  001F                     	;# 
   401  008C                     	;# 
   402  008E                     	;# 
   403  0091                     	;# 
   404  0092                     	;# 
   405  0095                     	;# 
   406  0096                     	;# 
   407  0097                     	;# 
   408  0098                     	;# 
   409  0099                     	;# 
   410  009A                     	;# 
   411  009B                     	;# 
   412  009B                     	;# 
   413  009C                     	;# 
   414  009D                     	;# 
   415  009E                     	;# 
   416  010C                     	;# 
   417  010E                     	;# 
   418  0111                     	;# 
   419  0112                     	;# 
   420  0113                     	;# 
   421  0114                     	;# 
   422  0115                     	;# 
   423  0116                     	;# 
   424  0117                     	;# 
   425  0118                     	;# 
   426  0119                     	;# 
   427  011A                     	;# 
   428  011B                     	;# 
   429  011D                     	;# 
   430  011D                     	;# 
   431  018C                     	;# 
   432  018E                     	;# 
   433  0191                     	;# 
   434  0191                     	;# 
   435  0192                     	;# 
   436  0193                     	;# 
   437  0193                     	;# 
   438  0193                     	;# 
   439  0194                     	;# 
   440  0195                     	;# 
   441  0196                     	;# 
   442  0199                     	;# 
   443  019A                     	;# 
   444  019B                     	;# 
   445  019B                     	;# 
   446  019B                     	;# 
   447  019B                     	;# 
   448  019C                     	;# 
   449  019C                     	;# 
   450  019D                     	;# 
   451  019E                     	;# 
   452  019F                     	;# 
   453  020C                     	;# 
   454  020E                     	;# 
   455  0211                     	;# 
   456  0211                     	;# 
   457  0212                     	;# 
   458  0212                     	;# 
   459  0213                     	;# 
   460  0213                     	;# 
   461  0214                     	;# 
   462  0214                     	;# 
   463  0215                     	;# 
   464  0215                     	;# 
   465  0215                     	;# 
   466  0216                     	;# 
   467  0216                     	;# 
   468  0217                     	;# 
   469  0217                     	;# 
   470  0291                     	;# 
   471  0291                     	;# 
   472  0292                     	;# 
   473  0293                     	;# 
   474  0294                     	;# 
   475  0295                     	;# 
   476  0295                     	;# 
   477  0296                     	;# 
   478  0391                     	;# 
   479  0392                     	;# 
   480  0393                     	;# 
   481  039A                     	;# 
   482  039C                     	;# 
   483  039D                     	;# 
   484  039E                     	;# 
   485  039F                     	;# 
   486  0FE4                     	;# 
   487  0FE5                     	;# 
   488  0FE6                     	;# 
   489  0FE7                     	;# 
   490  0FE8                     	;# 
   491  0FE9                     	;# 
   492  0FEA                     	;# 
   493  0FEB                     	;# 
   494  0FED                     	;# 
   495  0FEE                     	;# 
   496  0FEF                     	;# 
   497  0000                     	;# 
   498  0001                     	;# 
   499  0002                     	;# 
   500  0003                     	;# 
   501  0004                     	;# 
   502  0005                     	;# 
   503  0006                     	;# 
   504  0007                     	;# 
   505  0008                     	;# 
   506  0009                     	;# 
   507  000A                     	;# 
   508  000B                     	;# 
   509  000C                     	;# 
   510  000E                     	;# 
   511  0011                     	;# 
   512  0012                     	;# 
   513  0015                     	;# 
   514  0016                     	;# 
   515  0016                     	;# 
   516  0017                     	;# 
   517  0018                     	;# 
   518  0019                     	;# 
   519  001A                     	;# 
   520  001B                     	;# 
   521  001C                     	;# 
   522  001E                     	;# 
   523  001F                     	;# 
   524  008C                     	;# 
   525  008E                     	;# 
   526  0091                     	;# 
   527  0092                     	;# 
   528  0095                     	;# 
   529  0096                     	;# 
   530  0097                     	;# 
   531  0098                     	;# 
   532  0099                     	;# 
   533  009A                     	;# 
   534  009B                     	;# 
   535  009B                     	;# 
   536  009C                     	;# 
   537  009D                     	;# 
   538  009E                     	;# 
   539  010C                     	;# 
   540  010E                     	;# 
   541  0111                     	;# 
   542  0112                     	;# 
   543  0113                     	;# 
   544  0114                     	;# 
   545  0115                     	;# 
   546  0116                     	;# 
   547  0117                     	;# 
   548  0118                     	;# 
   549  0119                     	;# 
   550  011A                     	;# 
   551  011B                     	;# 
   552  011D                     	;# 
   553  011D                     	;# 
   554  018C                     	;# 
   555  018E                     	;# 
   556  0191                     	;# 
   557  0191                     	;# 
   558  0192                     	;# 
   559  0193                     	;# 
   560  0193                     	;# 
   561  0193                     	;# 
   562  0194                     	;# 
   563  0195                     	;# 
   564  0196                     	;# 
   565  0199                     	;# 
   566  019A                     	;# 
   567  019B                     	;# 
   568  019B                     	;# 
   569  019B                     	;# 
   570  019B                     	;# 
   571  019C                     	;# 
   572  019C                     	;# 
   573  019D                     	;# 
   574  019E                     	;# 
   575  019F                     	;# 
   576  020C                     	;# 
   577  020E                     	;# 
   578  0211                     	;# 
   579  0211                     	;# 
   580  0212                     	;# 
   581  0212                     	;# 
   582  0213                     	;# 
   583  0213                     	;# 
   584  0214                     	;# 
   585  0214                     	;# 
   586  0215                     	;# 
   587  0215                     	;# 
   588  0215                     	;# 
   589  0216                     	;# 
   590  0216                     	;# 
   591  0217                     	;# 
   592  0217                     	;# 
   593  0291                     	;# 
   594  0291                     	;# 
   595  0292                     	;# 
   596  0293                     	;# 
   597  0294                     	;# 
   598  0295                     	;# 
   599  0295                     	;# 
   600  0296                     	;# 
   601  0391                     	;# 
   602  0392                     	;# 
   603  0393                     	;# 
   604  039A                     	;# 
   605  039C                     	;# 
   606  039D                     	;# 
   607  039E                     	;# 
   608  039F                     	;# 
   609  0FE4                     	;# 
   610  0FE5                     	;# 
   611  0FE6                     	;# 
   612  0FE7                     	;# 
   613  0FE8                     	;# 
   614  0FE9                     	;# 
   615  0FEA                     	;# 
   616  0FEB                     	;# 
   617  0FED                     	;# 
   618  0FEE                     	;# 
   619  0FEF                     	;# 
   620  0000                     	;# 
   621  0001                     	;# 
   622  0002                     	;# 
   623  0003                     	;# 
   624  0004                     	;# 
   625  0005                     	;# 
   626  0006                     	;# 
   627  0007                     	;# 
   628  0008                     	;# 
   629  0009                     	;# 
   630  000A                     	;# 
   631  000B                     	;# 
   632  000C                     	;# 
   633  000E                     	;# 
   634  0011                     	;# 
   635  0012                     	;# 
   636  0015                     	;# 
   637  0016                     	;# 
   638  0016                     	;# 
   639  0017                     	;# 
   640  0018                     	;# 
   641  0019                     	;# 
   642  001A                     	;# 
   643  001B                     	;# 
   644  001C                     	;# 
   645  001E                     	;# 
   646  001F                     	;# 
   647  008C                     	;# 
   648  008E                     	;# 
   649  0091                     	;# 
   650  0092                     	;# 
   651  0095                     	;# 
   652  0096                     	;# 
   653  0097                     	;# 
   654  0098                     	;# 
   655  0099                     	;# 
   656  009A                     	;# 
   657  009B                     	;# 
   658  009B                     	;# 
   659  009C                     	;# 
   660  009D                     	;# 
   661  009E                     	;# 
   662  010C                     	;# 
   663  010E                     	;# 
   664  0111                     	;# 
   665  0112                     	;# 
   666  0113                     	;# 
   667  0114                     	;# 
   668  0115                     	;# 
   669  0116                     	;# 
   670  0117                     	;# 
   671  0118                     	;# 
   672  0119                     	;# 
   673  011A                     	;# 
   674  011B                     	;# 
   675  011D                     	;# 
   676  011D                     	;# 
   677  018C                     	;# 
   678  018E                     	;# 
   679  0191                     	;# 
   680  0191                     	;# 
   681  0192                     	;# 
   682  0193                     	;# 
   683  0193                     	;# 
   684  0193                     	;# 
   685  0194                     	;# 
   686  0195                     	;# 
   687  0196                     	;# 
   688  0199                     	;# 
   689  019A                     	;# 
   690  019B                     	;# 
   691  019B                     	;# 
   692  019B                     	;# 
   693  019B                     	;# 
   694  019C                     	;# 
   695  019C                     	;# 
   696  019D                     	;# 
   697  019E                     	;# 
   698  019F                     	;# 
   699  020C                     	;# 
   700  020E                     	;# 
   701  0211                     	;# 
   702  0211                     	;# 
   703  0212                     	;# 
   704  0212                     	;# 
   705  0213                     	;# 
   706  0213                     	;# 
   707  0214                     	;# 
   708  0214                     	;# 
   709  0215                     	;# 
   710  0215                     	;# 
   711  0215                     	;# 
   712  0216                     	;# 
   713  0216                     	;# 
   714  0217                     	;# 
   715  0217                     	;# 
   716  0291                     	;# 
   717  0291                     	;# 
   718  0292                     	;# 
   719  0293                     	;# 
   720  0294                     	;# 
   721  0295                     	;# 
   722  0295                     	;# 
   723  0296                     	;# 
   724  0391                     	;# 
   725  0392                     	;# 
   726  0393                     	;# 
   727  039A                     	;# 
   728  039C                     	;# 
   729  039D                     	;# 
   730  039E                     	;# 
   731  039F                     	;# 
   732  0FE4                     	;# 
   733  0FE5                     	;# 
   734  0FE6                     	;# 
   735  0FE7                     	;# 
   736  0FE8                     	;# 
   737  0FE9                     	;# 
   738  0FEA                     	;# 
   739  0FEB                     	;# 
   740  0FED                     	;# 
   741  0FEE                     	;# 
   742  0FEF                     	;# 
   743  0000                     	;# 
   744  0001                     	;# 
   745  0002                     	;# 
   746  0003                     	;# 
   747  0004                     	;# 
   748  0005                     	;# 
   749  0006                     	;# 
   750  0007                     	;# 
   751  0008                     	;# 
   752  0009                     	;# 
   753  000A                     	;# 
   754  000B                     	;# 
   755  000C                     	;# 
   756  000E                     	;# 
   757  0011                     	;# 
   758  0012                     	;# 
   759  0015                     	;# 
   760  0016                     	;# 
   761  0016                     	;# 
   762  0017                     	;# 
   763  0018                     	;# 
   764  0019                     	;# 
   765  001A                     	;# 
   766  001B                     	;# 
   767  001C                     	;# 
   768  001E                     	;# 
   769  001F                     	;# 
   770  008C                     	;# 
   771  008E                     	;# 
   772  0091                     	;# 
   773  0092                     	;# 
   774  0095                     	;# 
   775  0096                     	;# 
   776  0097                     	;# 
   777  0098                     	;# 
   778  0099                     	;# 
   779  009A                     	;# 
   780  009B                     	;# 
   781  009B                     	;# 
   782  009C                     	;# 
   783  009D                     	;# 
   784  009E                     	;# 
   785  010C                     	;# 
   786  010E                     	;# 
   787  0111                     	;# 
   788  0112                     	;# 
   789  0113                     	;# 
   790  0114                     	;# 
   791  0115                     	;# 
   792  0116                     	;# 
   793  0117                     	;# 
   794  0118                     	;# 
   795  0119                     	;# 
   796  011A                     	;# 
   797  011B                     	;# 
   798  011D                     	;# 
   799  011D                     	;# 
   800  018C                     	;# 
   801  018E                     	;# 
   802  0191                     	;# 
   803  0191                     	;# 
   804  0192                     	;# 
   805  0193                     	;# 
   806  0193                     	;# 
   807  0193                     	;# 
   808  0194                     	;# 
   809  0195                     	;# 
   810  0196                     	;# 
   811  0199                     	;# 
   812  019A                     	;# 
   813  019B                     	;# 
   814  019B                     	;# 
   815  019B                     	;# 
   816  019B                     	;# 
   817  019C                     	;# 
   818  019C                     	;# 
   819  019D                     	;# 
   820  019E                     	;# 
   821  019F                     	;# 
   822  020C                     	;# 
   823  020E                     	;# 
   824  0211                     	;# 
   825  0211                     	;# 
   826  0212                     	;# 
   827  0212                     	;# 
   828  0213                     	;# 
   829  0213                     	;# 
   830  0214                     	;# 
   831  0214                     	;# 
   832  0215                     	;# 
   833  0215                     	;# 
   834  0215                     	;# 
   835  0216                     	;# 
   836  0216                     	;# 
   837  0217                     	;# 
   838  0217                     	;# 
   839  0291                     	;# 
   840  0291                     	;# 
   841  0292                     	;# 
   842  0293                     	;# 
   843  0294                     	;# 
   844  0295                     	;# 
   845  0295                     	;# 
   846  0296                     	;# 
   847  0391                     	;# 
   848  0392                     	;# 
   849  0393                     	;# 
   850  039A                     	;# 
   851  039C                     	;# 
   852  039D                     	;# 
   853  039E                     	;# 
   854  039F                     	;# 
   855  0FE4                     	;# 
   856  0FE5                     	;# 
   857  0FE6                     	;# 
   858  0FE7                     	;# 
   859  0FE8                     	;# 
   860  0FE9                     	;# 
   861  0FEA                     	;# 
   862  0FEB                     	;# 
   863  0FED                     	;# 
   864  0FEE                     	;# 
   865  0FEF                     	;# 
   866  0000                     	;# 
   867  0001                     	;# 
   868  0002                     	;# 
   869  0003                     	;# 
   870  0004                     	;# 
   871  0005                     	;# 
   872  0006                     	;# 
   873  0007                     	;# 
   874  0008                     	;# 
   875  0009                     	;# 
   876  000A                     	;# 
   877  000B                     	;# 
   878  000C                     	;# 
   879  000E                     	;# 
   880  0011                     	;# 
   881  0012                     	;# 
   882  0015                     	;# 
   883  0016                     	;# 
   884  0016                     	;# 
   885  0017                     	;# 
   886  0018                     	;# 
   887  0019                     	;# 
   888  001A                     	;# 
   889  001B                     	;# 
   890  001C                     	;# 
   891  001E                     	;# 
   892  001F                     	;# 
   893  008C                     	;# 
   894  008E                     	;# 
   895  0091                     	;# 
   896  0092                     	;# 
   897  0095                     	;# 
   898  0096                     	;# 
   899  0097                     	;# 
   900  0098                     	;# 
   901  0099                     	;# 
   902  009A                     	;# 
   903  009B                     	;# 
   904  009B                     	;# 
   905  009C                     	;# 
   906  009D                     	;# 
   907  009E                     	;# 
   908  010C                     	;# 
   909  010E                     	;# 
   910  0111                     	;# 
   911  0112                     	;# 
   912  0113                     	;# 
   913  0114                     	;# 
   914  0115                     	;# 
   915  0116                     	;# 
   916  0117                     	;# 
   917  0118                     	;# 
   918  0119                     	;# 
   919  011A                     	;# 
   920  011B                     	;# 
   921  011D                     	;# 
   922  011D                     	;# 
   923  018C                     	;# 
   924  018E                     	;# 
   925  0191                     	;# 
   926  0191                     	;# 
   927  0192                     	;# 
   928  0193                     	;# 
   929  0193                     	;# 
   930  0193                     	;# 
   931  0194                     	;# 
   932  0195                     	;# 
   933  0196                     	;# 
   934  0199                     	;# 
   935  019A                     	;# 
   936  019B                     	;# 
   937  019B                     	;# 
   938  019B                     	;# 
   939  019B                     	;# 
   940  019C                     	;# 
   941  019C                     	;# 
   942  019D                     	;# 
   943  019E                     	;# 
   944  019F                     	;# 
   945  020C                     	;# 
   946  020E                     	;# 
   947  0211                     	;# 
   948  0211                     	;# 
   949  0212                     	;# 
   950  0212                     	;# 
   951  0213                     	;# 
   952  0213                     	;# 
   953  0214                     	;# 
   954  0214                     	;# 
   955  0215                     	;# 
   956  0215                     	;# 
   957  0215                     	;# 
   958  0216                     	;# 
   959  0216                     	;# 
   960  0217                     	;# 
   961  0217                     	;# 
   962  0291                     	;# 
   963  0291                     	;# 
   964  0292                     	;# 
   965  0293                     	;# 
   966  0294                     	;# 
   967  0295                     	;# 
   968  0295                     	;# 
   969  0296                     	;# 
   970  0391                     	;# 
   971  0392                     	;# 
   972  0393                     	;# 
   973  039A                     	;# 
   974  039C                     	;# 
   975  039D                     	;# 
   976  039E                     	;# 
   977  039F                     	;# 
   978  0FE4                     	;# 
   979  0FE5                     	;# 
   980  0FE6                     	;# 
   981  0FE7                     	;# 
   982  0FE8                     	;# 
   983  0FE9                     	;# 
   984  0FEA                     	;# 
   985  0FEB                     	;# 
   986  0FED                     	;# 
   987  0FEE                     	;# 
   988  0FEF                     	;# 
   989  0000                     	;# 
   990  0001                     	;# 
   991  0002                     	;# 
   992  0003                     	;# 
   993  0004                     	;# 
   994  0005                     	;# 
   995  0006                     	;# 
   996  0007                     	;# 
   997  0008                     	;# 
   998  0009                     	;# 
   999  000A                     	;# 
  1000  000B                     	;# 
  1001  000C                     	;# 
  1002  000E                     	;# 
  1003  0011                     	;# 
  1004  0012                     	;# 
  1005  0015                     	;# 
  1006  0016                     	;# 
  1007  0016                     	;# 
  1008  0017                     	;# 
  1009  0018                     	;# 
  1010  0019                     	;# 
  1011  001A                     	;# 
  1012  001B                     	;# 
  1013  001C                     	;# 
  1014  001E                     	;# 
  1015  001F                     	;# 
  1016  008C                     	;# 
  1017  008E                     	;# 
  1018  0091                     	;# 
  1019  0092                     	;# 
  1020  0095                     	;# 
  1021  0096                     	;# 
  1022  0097                     	;# 
  1023  0098                     	;# 
  1024  0099                     	;# 
  1025  009A                     	;# 
  1026  009B                     	;# 
  1027  009B                     	;# 
  1028  009C                     	;# 
  1029  009D                     	;# 
  1030  009E                     	;# 
  1031  010C                     	;# 
  1032  010E                     	;# 
  1033  0111                     	;# 
  1034  0112                     	;# 
  1035  0113                     	;# 
  1036  0114                     	;# 
  1037  0115                     	;# 
  1038  0116                     	;# 
  1039  0117                     	;# 
  1040  0118                     	;# 
  1041  0119                     	;# 
  1042  011A                     	;# 
  1043  011B                     	;# 
  1044  011D                     	;# 
  1045  011D                     	;# 
  1046  018C                     	;# 
  1047  018E                     	;# 
  1048  0191                     	;# 
  1049  0191                     	;# 
  1050  0192                     	;# 
  1051  0193                     	;# 
  1052  0193                     	;# 
  1053  0193                     	;# 
  1054  0194                     	;# 
  1055  0195                     	;# 
  1056  0196                     	;# 
  1057  0199                     	;# 
  1058  019A                     	;# 
  1059  019B                     	;# 
  1060  019B                     	;# 
  1061  019B                     	;# 
  1062  019B                     	;# 
  1063  019C                     	;# 
  1064  019C                     	;# 
  1065  019D                     	;# 
  1066  019E                     	;# 
  1067  019F                     	;# 
  1068  020C                     	;# 
  1069  020E                     	;# 
  1070  0211                     	;# 
  1071  0211                     	;# 
  1072  0212                     	;# 
  1073  0212                     	;# 
  1074  0213                     	;# 
  1075  0213                     	;# 
  1076  0214                     	;# 
  1077  0214                     	;# 
  1078  0215                     	;# 
  1079  0215                     	;# 
  1080  0215                     	;# 
  1081  0216                     	;# 
  1082  0216                     	;# 
  1083  0217                     	;# 
  1084  0217                     	;# 
  1085  0291                     	;# 
  1086  0291                     	;# 
  1087  0292                     	;# 
  1088  0293                     	;# 
  1089  0294                     	;# 
  1090  0295                     	;# 
  1091  0295                     	;# 
  1092  0296                     	;# 
  1093  0391                     	;# 
  1094  0392                     	;# 
  1095  0393                     	;# 
  1096  039A                     	;# 
  1097  039C                     	;# 
  1098  039D                     	;# 
  1099  039E                     	;# 
  1100  039F                     	;# 
  1101  0FE4                     	;# 
  1102  0FE5                     	;# 
  1103  0FE6                     	;# 
  1104  0FE7                     	;# 
  1105  0FE8                     	;# 
  1106  0FE9                     	;# 
  1107  0FEA                     	;# 
  1108  0FEB                     	;# 
  1109  0FED                     	;# 
  1110  0FEE                     	;# 
  1111  0FEF                     	;# 
  1112  0000                     	;# 
  1113  0001                     	;# 
  1114  0002                     	;# 
  1115  0003                     	;# 
  1116  0004                     	;# 
  1117  0005                     	;# 
  1118  0006                     	;# 
  1119  0007                     	;# 
  1120  0008                     	;# 
  1121  0009                     	;# 
  1122  000A                     	;# 
  1123  000B                     	;# 
  1124  000C                     	;# 
  1125  000E                     	;# 
  1126  0011                     	;# 
  1127  0012                     	;# 
  1128  0015                     	;# 
  1129  0016                     	;# 
  1130  0016                     	;# 
  1131  0017                     	;# 
  1132  0018                     	;# 
  1133  0019                     	;# 
  1134  001A                     	;# 
  1135  001B                     	;# 
  1136  001C                     	;# 
  1137  001E                     	;# 
  1138  001F                     	;# 
  1139  008C                     	;# 
  1140  008E                     	;# 
  1141  0091                     	;# 
  1142  0092                     	;# 
  1143  0095                     	;# 
  1144  0096                     	;# 
  1145  0097                     	;# 
  1146  0098                     	;# 
  1147  0099                     	;# 
  1148  009A                     	;# 
  1149  009B                     	;# 
  1150  009B                     	;# 
  1151  009C                     	;# 
  1152  009D                     	;# 
  1153  009E                     	;# 
  1154  010C                     	;# 
  1155  010E                     	;# 
  1156  0111                     	;# 
  1157  0112                     	;# 
  1158  0113                     	;# 
  1159  0114                     	;# 
  1160  0115                     	;# 
  1161  0116                     	;# 
  1162  0117                     	;# 
  1163  0118                     	;# 
  1164  0119                     	;# 
  1165  011A                     	;# 
  1166  011B                     	;# 
  1167  011D                     	;# 
  1168  011D                     	;# 
  1169  018C                     	;# 
  1170  018E                     	;# 
  1171  0191                     	;# 
  1172  0191                     	;# 
  1173  0192                     	;# 
  1174  0193                     	;# 
  1175  0193                     	;# 
  1176  0193                     	;# 
  1177  0194                     	;# 
  1178  0195                     	;# 
  1179  0196                     	;# 
  1180  0199                     	;# 
  1181  019A                     	;# 
  1182  019B                     	;# 
  1183  019B                     	;# 
  1184  019B                     	;# 
  1185  019B                     	;# 
  1186  019C                     	;# 
  1187  019C                     	;# 
  1188  019D                     	;# 
  1189  019E                     	;# 
  1190  019F                     	;# 
  1191  020C                     	;# 
  1192  020E                     	;# 
  1193  0211                     	;# 
  1194  0211                     	;# 
  1195  0212                     	;# 
  1196  0212                     	;# 
  1197  0213                     	;# 
  1198  0213                     	;# 
  1199  0214                     	;# 
  1200  0214                     	;# 
  1201  0215                     	;# 
  1202  0215                     	;# 
  1203  0215                     	;# 
  1204  0216                     	;# 
  1205  0216                     	;# 
  1206  0217                     	;# 
  1207  0217                     	;# 
  1208  0291                     	;# 
  1209  0291                     	;# 
  1210  0292                     	;# 
  1211  0293                     	;# 
  1212  0294                     	;# 
  1213  0295                     	;# 
  1214  0295                     	;# 
  1215  0296                     	;# 
  1216  0391                     	;# 
  1217  0392                     	;# 
  1218  0393                     	;# 
  1219  039A                     	;# 
  1220  039C                     	;# 
  1221  039D                     	;# 
  1222  039E                     	;# 
  1223  039F                     	;# 
  1224  0FE4                     	;# 
  1225  0FE5                     	;# 
  1226  0FE6                     	;# 
  1227  0FE7                     	;# 
  1228  0FE8                     	;# 
  1229  0FE9                     	;# 
  1230  0FEA                     	;# 
  1231  0FEB                     	;# 
  1232  0FED                     	;# 
  1233  0FEE                     	;# 
  1234  0FEF                     	;# 
  1235  0000                     	;# 
  1236  0001                     	;# 
  1237  0002                     	;# 
  1238  0003                     	;# 
  1239  0004                     	;# 
  1240  0005                     	;# 
  1241  0006                     	;# 
  1242  0007                     	;# 
  1243  0008                     	;# 
  1244  0009                     	;# 
  1245  000A                     	;# 
  1246  000B                     	;# 
  1247  000C                     	;# 
  1248  000E                     	;# 
  1249  0011                     	;# 
  1250  0012                     	;# 
  1251  0015                     	;# 
  1252  0016                     	;# 
  1253  0016                     	;# 
  1254  0017                     	;# 
  1255  0018                     	;# 
  1256  0019                     	;# 
  1257  001A                     	;# 
  1258  001B                     	;# 
  1259  001C                     	;# 
  1260  001E                     	;# 
  1261  001F                     	;# 
  1262  008C                     	;# 
  1263  008E                     	;# 
  1264  0091                     	;# 
  1265  0092                     	;# 
  1266  0095                     	;# 
  1267  0096                     	;# 
  1268  0097                     	;# 
  1269  0098                     	;# 
  1270  0099                     	;# 
  1271  009A                     	;# 
  1272  009B                     	;# 
  1273  009B                     	;# 
  1274  009C                     	;# 
  1275  009D                     	;# 
  1276  009E                     	;# 
  1277  010C                     	;# 
  1278  010E                     	;# 
  1279  0111                     	;# 
  1280  0112                     	;# 
  1281  0113                     	;# 
  1282  0114                     	;# 
  1283  0115                     	;# 
  1284  0116                     	;# 
  1285  0117                     	;# 
  1286  0118                     	;# 
  1287  0119                     	;# 
  1288  011A                     	;# 
  1289  011B                     	;# 
  1290  011D                     	;# 
  1291  011D                     	;# 
  1292  018C                     	;# 
  1293  018E                     	;# 
  1294  0191                     	;# 
  1295  0191                     	;# 
  1296  0192                     	;# 
  1297  0193                     	;# 
  1298  0193                     	;# 
  1299  0193                     	;# 
  1300  0194                     	;# 
  1301  0195                     	;# 
  1302  0196                     	;# 
  1303  0199                     	;# 
  1304  019A                     	;# 
  1305  019B                     	;# 
  1306  019B                     	;# 
  1307  019B                     	;# 
  1308  019B                     	;# 
  1309  019C                     	;# 
  1310  019C                     	;# 
  1311  019D                     	;# 
  1312  019E                     	;# 
  1313  019F                     	;# 
  1314  020C                     	;# 
  1315  020E                     	;# 
  1316  0211                     	;# 
  1317  0211                     	;# 
  1318  0212                     	;# 
  1319  0212                     	;# 
  1320  0213                     	;# 
  1321  0213                     	;# 
  1322  0214                     	;# 
  1323  0214                     	;# 
  1324  0215                     	;# 
  1325  0215                     	;# 
  1326  0215                     	;# 
  1327  0216                     	;# 
  1328  0216                     	;# 
  1329  0217                     	;# 
  1330  0217                     	;# 
  1331  0291                     	;# 
  1332  0291                     	;# 
  1333  0292                     	;# 
  1334  0293                     	;# 
  1335  0294                     	;# 
  1336  0295                     	;# 
  1337  0295                     	;# 
  1338  0296                     	;# 
  1339  0391                     	;# 
  1340  0392                     	;# 
  1341  0393                     	;# 
  1342  039A                     	;# 
  1343  039C                     	;# 
  1344  039D                     	;# 
  1345  039E                     	;# 
  1346  039F                     	;# 
  1347  0FE4                     	;# 
  1348  0FE5                     	;# 
  1349  0FE6                     	;# 
  1350  0FE7                     	;# 
  1351  0FE8                     	;# 
  1352  0FE9                     	;# 
  1353  0FEA                     	;# 
  1354  0FEB                     	;# 
  1355  0FED                     	;# 
  1356  0FEE                     	;# 
  1357  0FEF                     	;# 
  1358  0000                     	;# 
  1359  0001                     	;# 
  1360  0002                     	;# 
  1361  0003                     	;# 
  1362  0004                     	;# 
  1363  0005                     	;# 
  1364  0006                     	;# 
  1365  0007                     	;# 
  1366  0008                     	;# 
  1367  0009                     	;# 
  1368  000A                     	;# 
  1369  000B                     	;# 
  1370  000C                     	;# 
  1371  000E                     	;# 
  1372  0011                     	;# 
  1373  0012                     	;# 
  1374  0015                     	;# 
  1375  0016                     	;# 
  1376  0016                     	;# 
  1377  0017                     	;# 
  1378  0018                     	;# 
  1379  0019                     	;# 
  1380  001A                     	;# 
  1381  001B                     	;# 
  1382  001C                     	;# 
  1383  001E                     	;# 
  1384  001F                     	;# 
  1385  008C                     	;# 
  1386  008E                     	;# 
  1387  0091                     	;# 
  1388  0092                     	;# 
  1389  0095                     	;# 
  1390  0096                     	;# 
  1391  0097                     	;# 
  1392  0098                     	;# 
  1393  0099                     	;# 
  1394  009A                     	;# 
  1395  009B                     	;# 
  1396  009B                     	;# 
  1397  009C                     	;# 
  1398  009D                     	;# 
  1399  009E                     	;# 
  1400  010C                     	;# 
  1401  010E                     	;# 
  1402  0111                     	;# 
  1403  0112                     	;# 
  1404  0113                     	;# 
  1405  0114                     	;# 
  1406  0115                     	;# 
  1407  0116                     	;# 
  1408  0117                     	;# 
  1409  0118                     	;# 
  1410  0119                     	;# 
  1411  011A                     	;# 
  1412  011B                     	;# 
  1413  011D                     	;# 
  1414  011D                     	;# 
  1415  018C                     	;# 
  1416  018E                     	;# 
  1417  0191                     	;# 
  1418  0191                     	;# 
  1419  0192                     	;# 
  1420  0193                     	;# 
  1421  0193                     	;# 
  1422  0193                     	;# 
  1423  0194                     	;# 
  1424  0195                     	;# 
  1425  0196                     	;# 
  1426  0199                     	;# 
  1427  019A                     	;# 
  1428  019B                     	;# 
  1429  019B                     	;# 
  1430  019B                     	;# 
  1431  019B                     	;# 
  1432  019C                     	;# 
  1433  019C                     	;# 
  1434  019D                     	;# 
  1435  019E                     	;# 
  1436  019F                     	;# 
  1437  020C                     	;# 
  1438  020E                     	;# 
  1439  0211                     	;# 
  1440  0211                     	;# 
  1441  0212                     	;# 
  1442  0212                     	;# 
  1443  0213                     	;# 
  1444  0213                     	;# 
  1445  0214                     	;# 
  1446  0214                     	;# 
  1447  0215                     	;# 
  1448  0215                     	;# 
  1449  0215                     	;# 
  1450  0216                     	;# 
  1451  0216                     	;# 
  1452  0217                     	;# 
  1453  0217                     	;# 
  1454  0291                     	;# 
  1455  0291                     	;# 
  1456  0292                     	;# 
  1457  0293                     	;# 
  1458  0294                     	;# 
  1459  0295                     	;# 
  1460  0295                     	;# 
  1461  0296                     	;# 
  1462  0391                     	;# 
  1463  0392                     	;# 
  1464  0393                     	;# 
  1465  039A                     	;# 
  1466  039C                     	;# 
  1467  039D                     	;# 
  1468  039E                     	;# 
  1469  039F                     	;# 
  1470  0FE4                     	;# 
  1471  0FE5                     	;# 
  1472  0FE6                     	;# 
  1473  0FE7                     	;# 
  1474  0FE8                     	;# 
  1475  0FE9                     	;# 
  1476  0FEA                     	;# 
  1477  0FEB                     	;# 
  1478  0FED                     	;# 
  1479  0FEE                     	;# 
  1480  0FEF                     	;# 
  1481                           
  1482                           	psect	nvBANK0
  1483  006E                     __pnvBANK0:	
  1484  006E                     _IOCAF4_InterruptHandler:	
  1485  006E                     	ds	2
  1486  000C                     _PORTAbits	set	12
  1487  0019                     _T1GCONbits	set	25
  1488  0018                     _T1CONbits	set	24
  1489  0018                     _T1CON	set	24
  1490  0016                     _TMR1L	set	22
  1491  0017                     _TMR1H	set	23
  1492  0019                     _T1GCON	set	25
  1493  000B                     _INTCONbits	set	11
  1494  0011                     _PIR1bits	set	17
  1495  0095                     _OPTION_REGbits	set	149
  1496  008E                     _TRISC	set	142
  1497  008C                     _TRISA	set	140
  1498  0097                     _WDTCON	set	151
  1499  0098                     _OSCTUNE	set	152
  1500  0099                     _OSCCON	set	153
  1501  009D                     _ADCON0bits	set	157
  1502  0091                     _PIE1bits	set	145
  1503  009C                     _ADRESH	set	156
  1504  009B                     _ADRESL	set	155
  1505  009E                     _ADCON1	set	158
  1506  009D                     _ADCON0	set	157
  1507  04D6                     _PLLR	set	1238
  1508  010C                     _LATAbits	set	268
  1509  011D                     _APFCON	set	285
  1510  010E                     _LATC	set	270
  1511  010C                     _LATA	set	268
  1512  0116                     _BORCON	set	278
  1513  018C                     _ANSELA	set	396
  1514  018E                     _ANSELC	set	398
  1515  0199                     _RCREG	set	409
  1516  019D                     _RCSTAbits	set	413
  1517  019A                     _TXREG	set	410
  1518  019E                     _TXSTAbits	set	414
  1519  019C                     _SPBRGH	set	412
  1520  019B                     _SPBRGL	set	411
  1521  019E                     _TXSTA	set	414
  1522  019D                     _RCSTA	set	413
  1523  019F                     _BAUDCON	set	415
  1524  020E                     _WPUC	set	526
  1525  020C                     _WPUA	set	524
  1526  0391                     _IOCAPbits	set	913
  1527  0392                     _IOCANbits	set	914
  1528  0393                     _IOCAFbits	set	915
  1529                           
  1530                           	psect	stringtext1
  1531  054A                     __pstringtext1:	
  1532  054A                     STR_10:	
  1533  054A  3441               	retlw	65	;'A'
  1534  054B  3454               	retlw	84	;'T'
  1535  054C  342B               	retlw	43	;'+'
  1536  054D  3443               	retlw	67	;'C'
  1537  054E  3457               	retlw	87	;'W'
  1538  054F  344A               	retlw	74	;'J'
  1539  0550  3441               	retlw	65	;'A'
  1540  0551  3450               	retlw	80	;'P'
  1541  0552  343D               	retlw	61	;'='
  1542  0553  3422               	retlw	34	;'"'
  1543  0554  3473               	retlw	115	;'s'
  1544  0555  3461               	retlw	97	;'a'
  1545  0556  3475               	retlw	117	;'u'
  1546  0557  346C               	retlw	108	;'l'
  1547  0558  3432               	retlw	50	;'2'
  1548  0559  3422               	retlw	34	;'"'
  1549  055A  342C               	retlw	44	;','
  1550  055B  3422               	retlw	34	;'"'
  1551  055C  3472               	retlw	114	;'r'
  1552  055D  3469               	retlw	105	;'i'
  1553  055E  3463               	retlw	99	;'c'
  1554  055F  346B               	retlw	107	;'k'
  1555  0560  3468               	retlw	104	;'h'
  1556  0561  3475               	retlw	117	;'u'
  1557  0562  346E               	retlw	110	;'n'
  1558  0563  3474               	retlw	116	;'t'
  1559  0564  3465               	retlw	101	;'e'
  1560  0565  3472               	retlw	114	;'r'
  1561  0566  3430               	retlw	48	;'0'
  1562  0567  3432               	retlw	50	;'2'
  1563  0568  3422               	retlw	34	;'"'
  1564  0569  340D               	retlw	13
  1565  056A  340A               	retlw	10
  1566  056B  3400               	retlw	0
  1567                           
  1568                           	psect	stringtext2
  1569  06AC                     __pstringtext2:	
  1570  06AC                     STR_12:	
  1571  06AC  3441               	retlw	65	;'A'
  1572  06AD  3454               	retlw	84	;'T'
  1573  06AE  342B               	retlw	43	;'+'
  1574  06AF  3443               	retlw	67	;'C'
  1575  06B0  3449               	retlw	73	;'I'
  1576  06B1  3450               	retlw	80	;'P'
  1577  06B2  3453               	retlw	83	;'S'
  1578  06B3  3445               	retlw	69	;'E'
  1579  06B4  3452               	retlw	82	;'R'
  1580  06B5  3456               	retlw	86	;'V'
  1581  06B6  3445               	retlw	69	;'E'
  1582  06B7  3452               	retlw	82	;'R'
  1583  06B8  343D               	retlw	61	;'='
  1584  06B9  3431               	retlw	49	;'1'
  1585  06BA  342C               	retlw	44	;','
  1586  06BB  3438               	retlw	56	;'8'
  1587  06BC  3430               	retlw	48	;'0'
  1588  06BD  340D               	retlw	13
  1589  06BE  340A               	retlw	10
  1590  06BF  3400               	retlw	0
  1591                           
  1592                           	psect	stringtext3
  1593  06F4                     __pstringtext3:	
  1594  06F4                     STR_9:	
  1595  06F4  3441               	retlw	65	;'A'
  1596  06F5  3454               	retlw	84	;'T'
  1597  06F6  342B               	retlw	43	;'+'
  1598  06F7  3443               	retlw	67	;'C'
  1599  06F8  3457               	retlw	87	;'W'
  1600  06F9  344D               	retlw	77	;'M'
  1601  06FA  344F               	retlw	79	;'O'
  1602  06FB  3444               	retlw	68	;'D'
  1603  06FC  3445               	retlw	69	;'E'
  1604  06FD  343D               	retlw	61	;'='
  1605  06FE  3431               	retlw	49	;'1'
  1606  06FF  340D               	retlw	13
  1607  0700  340A               	retlw	10
  1608  0701  3400               	retlw	0
  1609                           
  1610                           	psect	stringtext4
  1611  0702                     __pstringtext4:	
  1612  0702                     STR_11:	
  1613  0702  3441               	retlw	65	;'A'
  1614  0703  3454               	retlw	84	;'T'
  1615  0704  342B               	retlw	43	;'+'
  1616  0705  3443               	retlw	67	;'C'
  1617  0706  3449               	retlw	73	;'I'
  1618  0707  3450               	retlw	80	;'P'
  1619  0708  344D               	retlw	77	;'M'
  1620  0709  3455               	retlw	85	;'U'
  1621  070A  3458               	retlw	88	;'X'
  1622  070B  343D               	retlw	61	;'='
  1623  070C  3431               	retlw	49	;'1'
  1624  070D  340D               	retlw	13
  1625  070E  340A               	retlw	10
  1626  070F  3400               	retlw	0
  1627                           
  1628                           	psect	stringtext5
  1629  072A                     __pstringtext5:	
  1630  072A                     STR_14:	
  1631  072A  3441               	retlw	65	;'A'
  1632  072B  3454               	retlw	84	;'T'
  1633  072C  342B               	retlw	43	;'+'
  1634  072D  3443               	retlw	67	;'C'
  1635  072E  3449               	retlw	73	;'I'
  1636  072F  3450               	retlw	80	;'P'
  1637  0730  3453               	retlw	83	;'S'
  1638  0731  3445               	retlw	69	;'E'
  1639  0732  344E               	retlw	78	;'N'
  1640  0733  3444               	retlw	68	;'D'
  1641  0734  343D               	retlw	61	;'='
  1642  0735  3400               	retlw	0
  1643                           
  1644                           	psect	stringtext6
  1645  0736                     __pstringtext6:	
  1646  0736                     STR_3:	
  1647  0736  3453               	retlw	83	;'S'
  1648  0737  3445               	retlw	69	;'E'
  1649  0738  344E               	retlw	78	;'N'
  1650  0739  3444               	retlw	68	;'D'
  1651  073A  3420               	retlw	32	;' '
  1652  073B  3446               	retlw	70	;'F'
  1653  073C  3441               	retlw	65	;'A'
  1654  073D  3449               	retlw	73	;'I'
  1655  073E  344C               	retlw	76	;'L'
  1656  073F  3400               	retlw	0
  1657                           
  1658                           	psect	stringtext7
  1659  0766                     __pstringtext7:	
  1660  0766                     STR_1:	
  1661  0766  3453               	retlw	83	;'S'
  1662  0767  3445               	retlw	69	;'E'
  1663  0768  344E               	retlw	78	;'N'
  1664  0769  3444               	retlw	68	;'D'
  1665  076A  3420               	retlw	32	;' '
  1666  076B  344F               	retlw	79	;'O'
  1667  076C  344B               	retlw	75	;'K'
  1668  076D  3400               	retlw	0
  1669                           
  1670                           	psect	stringtext8
  1671  076E                     __pstringtext8:	
  1672  076E                     STR_6:	
  1673  076E  3443               	retlw	67	;'C'
  1674  076F  344F               	retlw	79	;'O'
  1675  0770  344E               	retlw	78	;'N'
  1676  0771  344E               	retlw	78	;'N'
  1677  0772  3445               	retlw	69	;'E'
  1678  0773  3443               	retlw	67	;'C'
  1679  0774  3454               	retlw	84	;'T'
  1680  0775  3400               	retlw	0
  1681                           
  1682                           	psect	stringtext9
  1683  0776                     __pstringtext9:	
  1684  0776                     STR_20:	
  1685  0776  3462               	retlw	98	;'b'
  1686  0777  346D               	retlw	109	;'m'
  1687  0778  346F               	retlw	111	;'o'
  1688  0779  3464               	retlw	100	;'d'
  1689  077A  3465               	retlw	101	;'e'
  1690  077B  340A               	retlw	10
  1691  077C  3400               	retlw	0
  1692                           
  1693                           	psect	stringtext10
  1694  077D                     __pstringtext10:	
  1695  077D                     STR_19:	
  1696  077D  3474               	retlw	116	;'t'
  1697  077E  346D               	retlw	109	;'m'
  1698  077F  346F               	retlw	111	;'o'
  1699  0780  3464               	retlw	100	;'d'
  1700  0781  3465               	retlw	101	;'e'
  1701  0782  340A               	retlw	10
  1702  0783  3400               	retlw	0
  1703                           
  1704                           	psect	stringtext11
  1705  0784                     __pstringtext11:	
  1706  0784                     STR_7:	
  1707  0784  3443               	retlw	67	;'C'
  1708  0785  344C               	retlw	76	;'L'
  1709  0786  344F               	retlw	79	;'O'
  1710  0787  3453               	retlw	83	;'S'
  1711  0788  3445               	retlw	69	;'E'
  1712  0789  3444               	retlw	68	;'D'
  1713  078A  3400               	retlw	0
  1714                           
  1715                           	psect	stringtext12
  1716  0792                     __pstringtext12:	
  1717  0792                     STR_4:	
  1718  0792  3445               	retlw	69	;'E'
  1719  0793  3452               	retlw	82	;'R'
  1720  0794  3452               	retlw	82	;'R'
  1721  0795  344F               	retlw	79	;'O'
  1722  0796  3452               	retlw	82	;'R'
  1723  0797  3400               	retlw	0
  1724                           
  1725                           	psect	stringtext13
  1726  07C8                     __pstringtext13:	
  1727  07C8                     STR_8:	
  1728  07C8  3441               	retlw	65	;'A'
  1729  07C9  3454               	retlw	84	;'T'
  1730  07CA  340D               	retlw	13
  1731  07CB  340A               	retlw	10
  1732  07CC  3400               	retlw	0
  1733                           
  1734                           	psect	stringtext14
  1735  07CD                     __pstringtext14:	
  1736  07CD                     STR_5:	
  1737  07CD  342B               	retlw	43	;'+'
  1738  07CE  3449               	retlw	73	;'I'
  1739  07CF  3450               	retlw	80	;'P'
  1740  07D0  3444               	retlw	68	;'D'
  1741  07D1  3400               	retlw	0
  1742                           
  1743                           	psect	stringtext15
  1744  07D7                     __pstringtext15:	
  1745  07D7                     STR_18:	
  1746  07D7  344F               	retlw	79	;'O'
  1747  07D8  346B               	retlw	107	;'k'
  1748  07D9  340A               	retlw	10
  1749  07DA  3400               	retlw	0
  1750                           
  1751                           	psect	stringtext16
  1752  07DF                     __pstringtext16:	
  1753  07DF                     STR_21:	
  1754  07DF  3443               	retlw	67	;'C'
  1755  07E0  3448               	retlw	72	;'H'
  1756  07E1  3400               	retlw	0
  1757                           
  1758                           	psect	stringtext17
  1759  07E2                     __pstringtext17:	
  1760  07E2                     STR_22:	
  1761  07E2  3443               	retlw	67	;'C'
  1762  07E3  344C               	retlw	76	;'L'
  1763  07E4  3400               	retlw	0
  1764                           
  1765                           	psect	stringtext18
  1766  07F7                     __pstringtext18:	
  1767  07F7                     STR_15:	
  1768  07F7  342C               	retlw	44	;','
  1769  07F8  3400               	retlw	0
  1770                           
  1771                           	psect	stringtext19
  1772  07F9                     __pstringtext19:	
  1773  07F9                     STR_13:	
  1774  07F9  343A               	retlw	58	;':'
  1775  07FA  3400               	retlw	0
  1776                           
  1777                           	psect	stringtext20
  1778  0000                     __pstringtext20:	
  1779  0569                     
  1780                           ; #config settings
  1781  0000                     
  1782                           	psect	cinit
  1783  0041                     start_initialization:	
  1784  0041                     __initialization:	
  1785                           
  1786                           ; Clear objects allocated to COMMON
  1787  0041  01F9               	clrf	__pbssCOMMON& (0+127)
  1788  0042  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
  1789                           
  1790                           ; Clear objects allocated to BANK0
  1791  0043  304C               	movlw	low __pbssBANK0
  1792  0044  0084               	movwf	4
  1793  0045  3000               	movlw	high __pbssBANK0
  1794  0046  0085               	movwf	5
  1795  0047  3022               	movlw	34
  1796  0048  2798               	fcall	clear_ram0
  1797                           
  1798                           ; Clear objects allocated to BANK1
  1799  0049  30A0               	movlw	low __pbssBANK1
  1800  004A  0084               	movwf	4
  1801  004B  3000               	movlw	high __pbssBANK1
  1802  004C  0085               	movwf	5
  1803  004D  3020               	movlw	32
  1804  004E  2798               	fcall	clear_ram0
  1805  004F                     end_of_initialization:	
  1806                           ;End of C runtime variable initialization code
  1807                           
  1808  004F                     __end_of__initialization:	
  1809  004F  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1810  0050  0020               	movlb	0
  1811  0051  2E60               	ljmp	_main	;jump to C main() function
  1812                           
  1813                           	psect	bssCOMMON
  1814  0079                     __pbssCOMMON:	
  1815  0079                     _eusartTxBufferRemaining:	
  1816  0079                     	ds	1
  1817  007A                     _eusartTxHead:	
  1818  007A                     	ds	1
  1819                           
  1820                           	psect	bssBANK0
  1821  004C                     __pbssBANK0:	
  1822  004C                     _eusartTxBuffer:	
  1823  004C                     	ds	10
  1824  0056                     _ESP_external_message_handler:	
  1825  0056                     	ds	2
  1826  0058                     _TMR1_InterruptHandler:	
  1827  0058                     	ds	2
  1828  005A                     _timer1ReloadVal:	
  1829  005A                     	ds	2
  1830  005C                     _ADC_value:	
  1831  005C                     	ds	2
  1832  005E                     _EUSART_RxDefaultInterruptHandler:	
  1833  005E                     	ds	2
  1834  0060                     _EUSART_TxDefaultInterruptHandler:	
  1835  0060                     	ds	2
  1836  0062                     _IOC_value:	
  1837  0062                     	ds	1
  1838  0063                     _IOC_state:	
  1839  0063                     	ds	1
  1840  0064                     _TMR1_state:	
  1841  0064                     	ds	1
  1842  0065                     _message_format:	
  1843  0065                     	ds	1
  1844  0066                     _esp_channel:	
  1845  0066                     	ds	1
  1846  0067                     _esp_read_data_index:	
  1847  0067                     	ds	1
  1848  0068                     _ESP_wait_exception:	
  1849  0068                     	ds	1
  1850  0069                     _eusartRxCount:	
  1851  0069                     	ds	1
  1852  006A                     _eusartRxTail:	
  1853  006A                     	ds	1
  1854  006B                     _eusartRxHead:	
  1855  006B                     	ds	1
  1856  006C                     _eusartTxTail:	
  1857  006C                     	ds	1
  1858  006D                     _ADC_state:	
  1859  006D                     	ds	1
  1860                           
  1861                           	psect	bssBANK1
  1862  00A0                     __pbssBANK1:	
  1863  00A0                     _eusartRxBuffer:	
  1864  00A0                     	ds	12
  1865  00AC                     _esp_read_data:	
  1866  00AC                     	ds	20
  1867                           
  1868                           	psect	clrtext
  1869  0798                     clear_ram0:	
  1870                           ;	Called with FSR0 containing the base address, and
  1871                           ;	WREG with the size to clear
  1872                           
  1873  0798  0064               	clrwdt	;clear the watchdog before getting into this loop
  1874  0799                     clrloop0:	
  1875  0799  0180               	clrf	0	;clear RAM location pointed to by FSR
  1876  079A  3101               	addfsr 0,1
  1877  079B  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1878  079C  2F99               	goto	clrloop0	;have we reached the end yet?
  1879  079D  3400               	retlw	0	;all done for this memory range, return
  1880                           
  1881                           	psect	cstackCOMMON
  1882  0070                     __pcstackCOMMON:	
  1883  0070                     ?_PIN_MANAGER_IOC:	
  1884  0070                     ?_TMR1_ISR:	
  1885                           ; 1 bytes @ 0x0
  1886                           
  1887  0070                     ?_EUSART_Receive_ISR:	
  1888                           ; 1 bytes @ 0x0
  1889                           
  1890  0070                     ??_EUSART_Receive_ISR:	
  1891                           ; 1 bytes @ 0x0
  1892                           
  1893  0070                     ?_EUSART_Transmit_ISR:	
  1894                           ; 1 bytes @ 0x0
  1895                           
  1896  0070                     ??_EUSART_Transmit_ISR:	
  1897                           ; 1 bytes @ 0x0
  1898                           
  1899  0070                     ?_PIN_MANAGER_Initialize:	
  1900                           ; 1 bytes @ 0x0
  1901                           
  1902  0070                     ?_OSCILLATOR_Initialize:	
  1903                           ; 1 bytes @ 0x0
  1904                           
  1905  0070                     ?_WDT_Initialize:	
  1906                           ; 1 bytes @ 0x0
  1907                           
  1908  0070                     ?_TMR1_Initialize:	
  1909                           ; 1 bytes @ 0x0
  1910                           
  1911  0070                     ?_TMR1_DefaultInterruptHandler:	
  1912                           ; 1 bytes @ 0x0
  1913                           
  1914  0070                     ??_TMR1_DefaultInterruptHandler:	
  1915                           ; 1 bytes @ 0x0
  1916                           
  1917  0070                     ?_IOCAF4_DefaultInterruptHandler:	
  1918                           ; 1 bytes @ 0x0
  1919                           
  1920  0070                     ??_IOCAF4_DefaultInterruptHandler:	
  1921                           ; 1 bytes @ 0x0
  1922                           
  1923  0070                     ?_IOCAF4_ISR:	
  1924                           ; 1 bytes @ 0x0
  1925                           
  1926  0070                     ?_ESP_initialize:	
  1927                           ; 1 bytes @ 0x0
  1928                           
  1929  0070                     ?_logger_initialize:	
  1930                           ; 1 bytes @ 0x0
  1931                           
  1932  0070                     ?_ESP_config:	
  1933                           ; 1 bytes @ 0x0
  1934                           
  1935  0070                     ?_ESP_message_handler:	
  1936                           ; 1 bytes @ 0x0
  1937                           
  1938  0070                     ?_read_analog:	
  1939                           ; 1 bytes @ 0x0
  1940                           
  1941  0070                     ?_ESP_process_message:	
  1942                           ; 1 bytes @ 0x0
  1943                           
  1944  0070                     ?_ESP_wait_for:	
  1945                           ; 1 bytes @ 0x0
  1946                           
  1947  0070                     ?__TMR1_Ready:	
  1948                           ; 1 bytes @ 0x0
  1949                           
  1950  0070                     ??__TMR1_Ready:	
  1951                           ; 1 bytes @ 0x0
  1952                           
  1953  0070                     ?__IOC_Ready:	
  1954                           ; 1 bytes @ 0x0
  1955                           
  1956  0070                     ??__IOC_Ready:	
  1957                           ; 1 bytes @ 0x0
  1958                           
  1959  0070                     ?_toggle_format:	
  1960                           ; 1 bytes @ 0x0
  1961                           
  1962  0070                     ?_ADC_Initialize:	
  1963                           ; 1 bytes @ 0x0
  1964                           
  1965  0070                     ?_ADC_SelectChannel:	
  1966                           ; 1 bytes @ 0x0
  1967                           
  1968  0070                     ?_ADC_StartConversion:	
  1969                           ; 1 bytes @ 0x0
  1970                           
  1971  0070                     ?_ADC_ISR:	
  1972                           ; 1 bytes @ 0x0
  1973                           
  1974  0070                     ??_ADC_ISR:	
  1975                           ; 1 bytes @ 0x0
  1976                           
  1977  0070                     ?_INTERRUPT_InterruptManager:	
  1978                           ; 1 bytes @ 0x0
  1979                           
  1980  0070                     ?_EUSART_Initialize:	
  1981                           ; 1 bytes @ 0x0
  1982                           
  1983  0070                     ?_EUSART_is_tx_ready:	
  1984                           ; 1 bytes @ 0x0
  1985                           
  1986  0070                     ?_EUSART_is_rx_ready:	
  1987                           ; 1 bytes @ 0x0
  1988                           
  1989  0070                     ?_EUSART_Read:	
  1990                           ; 1 bytes @ 0x0
  1991                           
  1992  0070                     ?_EUSART_Write:	
  1993                           ; 1 bytes @ 0x0
  1994                           
  1995  0070                     ?_SYSTEM_Initialize:	
  1996                           ; 1 bytes @ 0x0
  1997                           
  1998  0070                     ?_TMR1_StartTimer:	
  1999                           ; 1 bytes @ 0x0
  2000                           
  2001  0070                     ?_TMR1_StopTimer:	
  2002                           ; 1 bytes @ 0x0
  2003                           
  2004  0070                     ?_TMR1_WriteTimer:	
  2005                           ; 1 bytes @ 0x0
  2006                           
  2007  0070                     ?_main:	
  2008                           ; 1 bytes @ 0x0
  2009                           
  2010  0070                     ?_ESP_read:	
  2011                           ; 1 bytes @ 0x0
  2012                           
  2013  0070                     ?_ESP_process_rx_data:	
  2014                           ; 1 bytes @ 0x0
  2015                           
  2016  0070                     ?i1_ADC_StartConversion:	
  2017                           ; 1 bytes @ 0x0
  2018                           
  2019  0070                     ??i1_ADC_StartConversion:	
  2020                           ; 1 bytes @ 0x0
  2021                           
  2022  0070                     ?_ADC_GetConversionResult:	
  2023                           ; 1 bytes @ 0x0
  2024                           
  2025  0070                     TMR1_WriteTimer@timerVal:	
  2026                           ; 2 bytes @ 0x0
  2027                           
  2028                           
  2029                           ; 2 bytes @ 0x0
  2030  0070                     	ds	1
  2031  0071                     ??_PIN_MANAGER_IOC:	
  2032  0071                     ??_IOCAF4_ISR:	
  2033                           ; 1 bytes @ 0x1
  2034                           
  2035                           
  2036                           ; 1 bytes @ 0x1
  2037  0071                     	ds	1
  2038  0072                     ??_TMR1_ISR:	
  2039  0072                     ??_ADC_GetConversionResult:	
  2040                           ; 1 bytes @ 0x2
  2041                           
  2042  0072                     ??_INTERRUPT_InterruptManager:	
  2043                           ; 1 bytes @ 0x2
  2044                           
  2045  0072                     ??_TMR1_WriteTimer:	
  2046                           ; 1 bytes @ 0x2
  2047                           
  2048                           
  2049                           ; 1 bytes @ 0x2
  2050  0072                     	ds	1
  2051  0073                     ?_EUSART_SetRxInterruptHandler:	
  2052  0073                     ?_EUSART_SetTxInterruptHandler:	
  2053                           ; 1 bytes @ 0x3
  2054                           
  2055  0073                     ??_OSCILLATOR_Initialize:	
  2056                           ; 1 bytes @ 0x3
  2057                           
  2058  0073                     ??_WDT_Initialize:	
  2059                           ; 1 bytes @ 0x3
  2060                           
  2061  0073                     ?_TMR1_SetInterruptHandler:	
  2062                           ; 1 bytes @ 0x3
  2063                           
  2064  0073                     ?_IOCAF4_SetInterruptHandler:	
  2065                           ; 1 bytes @ 0x3
  2066                           
  2067  0073                     ?_ESP_Set_application_handler:	
  2068                           ; 1 bytes @ 0x3
  2069                           
  2070  0073                     ?_strchr:	
  2071                           ; 1 bytes @ 0x3
  2072                           
  2073  0073                     ??_ADC_Initialize:	
  2074                           ; 1 bytes @ 0x3
  2075                           
  2076  0073                     ??_ADC_SelectChannel:	
  2077                           ; 1 bytes @ 0x3
  2078                           
  2079  0073                     ??_ADC_StartConversion:	
  2080                           ; 1 bytes @ 0x3
  2081                           
  2082  0073                     ??_EUSART_is_tx_ready:	
  2083                           ; 1 bytes @ 0x3
  2084                           
  2085  0073                     ??_EUSART_is_rx_ready:	
  2086                           ; 1 bytes @ 0x3
  2087                           
  2088  0073                     ??_EUSART_Read:	
  2089                           ; 1 bytes @ 0x3
  2090                           
  2091  0073                     ??_EUSART_Write:	
  2092                           ; 1 bytes @ 0x3
  2093                           
  2094  0073                     ??_TMR1_StartTimer:	
  2095                           ; 1 bytes @ 0x3
  2096                           
  2097  0073                     ??_TMR1_StopTimer:	
  2098                           ; 1 bytes @ 0x3
  2099                           
  2100  0073                     ??___lmul:	
  2101                           ; 1 bytes @ 0x3
  2102                           
  2103  0073                     ?_strlen:	
  2104                           ; 1 bytes @ 0x3
  2105                           
  2106  0073                     ?_strncmp:	
  2107                           ; 2 bytes @ 0x3
  2108                           
  2109  0073                     ?___awdiv:	
  2110                           ; 2 bytes @ 0x3
  2111                           
  2112  0073                     ?___awmod:	
  2113                           ; 2 bytes @ 0x3
  2114                           
  2115  0073                     ?___lwdiv:	
  2116                           ; 2 bytes @ 0x3
  2117                           
  2118  0073                     ?___lwmod:	
  2119                           ; 2 bytes @ 0x3
  2120                           
  2121  0073                     EUSART_SetTxInterruptHandler@interruptHandler:	
  2122                           ; 2 bytes @ 0x3
  2123                           
  2124  0073                     EUSART_SetRxInterruptHandler@interruptHandler:	
  2125                           ; 2 bytes @ 0x3
  2126                           
  2127  0073                     TMR1_SetInterruptHandler@InterruptHandler:	
  2128                           ; 2 bytes @ 0x3
  2129                           
  2130  0073                     IOCAF4_SetInterruptHandler@InterruptHandler:	
  2131                           ; 2 bytes @ 0x3
  2132                           
  2133  0073                     ESP_Set_application_handler@applicationHandler:	
  2134                           ; 2 bytes @ 0x3
  2135                           
  2136  0073                     ___awdiv@divisor:	
  2137                           ; 2 bytes @ 0x3
  2138                           
  2139  0073                     ___awmod@divisor:	
  2140                           ; 2 bytes @ 0x3
  2141                           
  2142  0073                     ___lwdiv@divisor:	
  2143                           ; 2 bytes @ 0x3
  2144                           
  2145  0073                     ___lwmod@divisor:	
  2146                           ; 2 bytes @ 0x3
  2147                           
  2148  0073                     strchr@c:	
  2149                           ; 2 bytes @ 0x3
  2150                           
  2151  0073                     strlen@s:	
  2152                           ; 2 bytes @ 0x3
  2153                           
  2154  0073                     strncmp@_r:	
  2155                           ; 2 bytes @ 0x3
  2156                           
  2157  0073                     ___lmul@product:	
  2158                           ; 2 bytes @ 0x3
  2159                           
  2160                           
  2161                           ; 4 bytes @ 0x3
  2162  0073                     	ds	1
  2163  0074                     ADC_SelectChannel@channel:	
  2164  0074                     EUSART_Read@readValue:	
  2165                           ; 1 bytes @ 0x4
  2166                           
  2167  0074                     EUSART_Write@txData:	
  2168                           ; 1 bytes @ 0x4
  2169                           
  2170                           
  2171                           ; 1 bytes @ 0x4
  2172  0074                     	ds	1
  2173  0075                     ??_EUSART_SetRxInterruptHandler:	
  2174  0075                     ??_EUSART_SetTxInterruptHandler:	
  2175                           ; 1 bytes @ 0x5
  2176                           
  2177  0075                     ??_PIN_MANAGER_Initialize:	
  2178                           ; 1 bytes @ 0x5
  2179                           
  2180  0075                     ??_TMR1_Initialize:	
  2181                           ; 1 bytes @ 0x5
  2182                           
  2183  0075                     ??_TMR1_SetInterruptHandler:	
  2184                           ; 1 bytes @ 0x5
  2185                           
  2186  0075                     ??_IOCAF4_SetInterruptHandler:	
  2187                           ; 1 bytes @ 0x5
  2188                           
  2189  0075                     ??_ESP_initialize:	
  2190                           ; 1 bytes @ 0x5
  2191                           
  2192  0075                     ??_logger_initialize:	
  2193                           ; 1 bytes @ 0x5
  2194                           
  2195  0075                     ??_ESP_Set_application_handler:	
  2196                           ; 1 bytes @ 0x5
  2197                           
  2198  0075                     ??_strlen:	
  2199                           ; 1 bytes @ 0x5
  2200                           
  2201  0075                     ??_strchr:	
  2202                           ; 1 bytes @ 0x5
  2203                           
  2204  0075                     ??_EUSART_Initialize:	
  2205                           ; 1 bytes @ 0x5
  2206                           
  2207  0075                     ?__puts:	
  2208                           ; 1 bytes @ 0x5
  2209                           
  2210  0075                     ?_write:	
  2211                           ; 1 bytes @ 0x5
  2212                           
  2213  0075                     strchr@s:	
  2214                           ; 1 bytes @ 0x5
  2215                           
  2216  0075                     __puts@pt:	
  2217                           ; 1 bytes @ 0x5
  2218                           
  2219  0075                     write@pt:	
  2220                           ; 2 bytes @ 0x5
  2221                           
  2222  0075                     ___awdiv@dividend:	
  2223                           ; 2 bytes @ 0x5
  2224                           
  2225  0075                     ___awmod@dividend:	
  2226                           ; 2 bytes @ 0x5
  2227                           
  2228  0075                     ___lwdiv@dividend:	
  2229                           ; 2 bytes @ 0x5
  2230                           
  2231  0075                     ___lwmod@dividend:	
  2232                           ; 2 bytes @ 0x5
  2233                           
  2234  0075                     strncmp@n:	
  2235                           ; 2 bytes @ 0x5
  2236                           
  2237                           
  2238                           ; 2 bytes @ 0x5
  2239  0075                     	ds	1
  2240  0076                     ??_SYSTEM_Initialize:	
  2241                           
  2242                           ; 1 bytes @ 0x6
  2243  0076                     	ds	1
  2244  0077                     ??_strncmp:	
  2245  0077                     ??___awdiv:	
  2246                           ; 1 bytes @ 0x7
  2247                           
  2248  0077                     ??___awmod:	
  2249                           ; 1 bytes @ 0x7
  2250                           
  2251  0077                     ??___lwdiv:	
  2252                           ; 1 bytes @ 0x7
  2253                           
  2254  0077                     ??___lwmod:	
  2255                           ; 1 bytes @ 0x7
  2256                           
  2257  0077                     __puts@index:	
  2258                           ; 1 bytes @ 0x7
  2259                           
  2260  0077                     write@lenght:	
  2261                           ; 1 bytes @ 0x7
  2262                           
  2263  0077                     strlen@a:	
  2264                           ; 1 bytes @ 0x7
  2265                           
  2266                           
  2267                           ; 2 bytes @ 0x7
  2268  0077                     	ds	1
  2269  0078                     write@i:	
  2270  0078                     ___lwmod@counter:	
  2271                           ; 1 bytes @ 0x8
  2272                           
  2273                           
  2274                           ; 1 bytes @ 0x8
  2275  0078                     	ds	1
  2276  0079                     ??_ESP_default_application_handler:	
  2277                           
  2278                           	psect	cstackBANK0
  2279  0020                     __pcstackBANK0:	
  2280                           ; 1 bytes @ 0x9
  2281                           
  2282  0020                     ??__puts:	
  2283  0020                     ??_write:	
  2284                           ; 1 bytes @ 0x0
  2285                           
  2286  0020                     ?___lmul:	
  2287                           ; 1 bytes @ 0x0
  2288                           
  2289  0020                     ___awdiv@counter:	
  2290                           ; 4 bytes @ 0x0
  2291                           
  2292  0020                     ___awmod@counter:	
  2293                           ; 1 bytes @ 0x0
  2294                           
  2295  0020                     ___lwdiv@counter:	
  2296                           ; 1 bytes @ 0x0
  2297                           
  2298  0020                     strncmp@_l:	
  2299                           ; 1 bytes @ 0x0
  2300                           
  2301  0020                     ___lmul@multiplier:	
  2302                           ; 1 bytes @ 0x0
  2303                           
  2304                           
  2305                           ; 4 bytes @ 0x0
  2306  0020                     	ds	1
  2307  0021                     ___awdiv@sign:	
  2308  0021                     ___awmod@sign:	
  2309                           ; 1 bytes @ 0x1
  2310                           
  2311  0021                     ___lwdiv@quotient:	
  2312                           ; 1 bytes @ 0x1
  2313                           
  2314  0021                     strncmp@r:	
  2315                           ; 2 bytes @ 0x1
  2316                           
  2317                           
  2318                           ; 2 bytes @ 0x1
  2319  0021                     	ds	1
  2320  0022                     ___awdiv@quotient:	
  2321                           
  2322                           ; 2 bytes @ 0x2
  2323  0022                     	ds	1
  2324  0023                     ?__sprintf:	
  2325  0023                     strncmp@l:	
  2326                           ; 1 bytes @ 0x3
  2327                           
  2328  0023                     __sprintf@val:	
  2329                           ; 1 bytes @ 0x3
  2330                           
  2331                           
  2332                           ; 2 bytes @ 0x3
  2333  0023                     	ds	1
  2334  0024                     ?_strstr:	
  2335  0024                     strstr@n:	
  2336                           ; 1 bytes @ 0x4
  2337                           
  2338  0024                     ___lmul@multiplicand:	
  2339                           ; 2 bytes @ 0x4
  2340                           
  2341                           
  2342                           ; 4 bytes @ 0x4
  2343  0024                     	ds	1
  2344  0025                     ??__sprintf:	
  2345                           
  2346                           ; 1 bytes @ 0x5
  2347  0025                     	ds	1
  2348  0026                     ??_strstr:	
  2349  0026                     __sprintf@aux:	
  2350                           ; 1 bytes @ 0x6
  2351                           
  2352                           
  2353                           ; 2 bytes @ 0x6
  2354  0026                     	ds	2
  2355  0028                     __sprintf@mess:	
  2356                           
  2357                           ; 1 bytes @ 0x8
  2358  0028                     	ds	1
  2359  0029                     strstr@nl:	
  2360                           
  2361                           ; 2 bytes @ 0x9
  2362  0029                     	ds	2
  2363  002B                     strstr@h:	
  2364                           
  2365                           ; 1 bytes @ 0xB
  2366  002B                     	ds	1
  2367  002C                     ??_ESP_process_message:	
  2368                           
  2369                           ; 1 bytes @ 0xC
  2370  002C                     	ds	1
  2371  002D                     ESP_process_message@aux:	
  2372                           
  2373                           ; 1 bytes @ 0xD
  2374  002D                     	ds	1
  2375  002E                     ??_ESP_read:	
  2376                           
  2377                           ; 1 bytes @ 0xE
  2378  002E                     	ds	1
  2379  002F                     ESP_read@ret:	
  2380                           
  2381                           ; 1 bytes @ 0xF
  2382  002F                     	ds	1
  2383  0030                     ??_ESP_wait_for:	
  2384                           
  2385                           ; 1 bytes @ 0x10
  2386  0030                     	ds	1
  2387  0031                     ESP_wait_for@esp_mess:	
  2388                           
  2389                           ; 1 bytes @ 0x11
  2390  0031                     	ds	1
  2391  0032                     ESP_wait_for@ret:	
  2392                           
  2393                           ; 1 bytes @ 0x12
  2394  0032                     	ds	1
  2395  0033                     ??_ESP_config:	
  2396  0033                     ?_ESP_write:	
  2397                           ; 1 bytes @ 0x13
  2398                           
  2399  0033                     ESP_write@pt:	
  2400                           ; 1 bytes @ 0x13
  2401                           
  2402                           
  2403                           ; 2 bytes @ 0x13
  2404  0033                     	ds	2
  2405  0035                     ESP_write@length:	
  2406                           
  2407                           ; 1 bytes @ 0x15
  2408  0035                     	ds	1
  2409  0036                     ??_ESP_write:	
  2410                           
  2411                           ; 1 bytes @ 0x16
  2412  0036                     	ds	3
  2413  0039                     ESP_write@res:	
  2414                           
  2415                           ; 1 bytes @ 0x19
  2416  0039                     	ds	1
  2417  003A                     ESP_write@aux:	
  2418                           
  2419                           ; 1 bytes @ 0x1A
  2420  003A                     	ds	1
  2421  003B                     ??_read_analog:	
  2422  003B                     ??_toggle_format:	
  2423                           ; 1 bytes @ 0x1B
  2424                           
  2425                           
  2426                           ; 1 bytes @ 0x1B
  2427  003B                     	ds	1
  2428  003C                     ?_process_message:	
  2429  003C                     ?_ESP_default_application_handler:	
  2430                           ; 1 bytes @ 0x1C
  2431                           
  2432  003C                     ESP_default_application_handler@data:	
  2433                           ; 1 bytes @ 0x1C
  2434                           
  2435  003C                     process_message@message:	
  2436                           ; 1 bytes @ 0x1C
  2437                           
  2438                           
  2439                           ; 1 bytes @ 0x1C
  2440  003C                     	ds	1
  2441  003D                     ??_process_message:	
  2442                           
  2443                           ; 1 bytes @ 0x1D
  2444  003D                     	ds	2
  2445  003F                     ??_ESP_process_rx_data:	
  2446  003F                     read_analog@aux1:	
  2447                           ; 1 bytes @ 0x1F
  2448                           
  2449                           
  2450                           ; 4 bytes @ 0x1F
  2451  003F                     	ds	2
  2452  0041                     ESP_process_rx_data@index:	
  2453                           
  2454                           ; 1 bytes @ 0x21
  2455  0041                     	ds	1
  2456  0042                     ESP_process_rx_data@aux:	
  2457                           
  2458                           ; 1 bytes @ 0x22
  2459  0042                     	ds	1
  2460  0043                     ??_ESP_message_handler:	
  2461  0043                     read_analog@mess:	
  2462                           ; 1 bytes @ 0x23
  2463                           
  2464                           
  2465                           ; 6 bytes @ 0x23
  2466  0043                     	ds	2
  2467  0045                     ESP_message_handler@ret:	
  2468                           
  2469                           ; 1 bytes @ 0x25
  2470  0045                     	ds	4
  2471  0049                     read_analog@adc_val:	
  2472                           
  2473                           ; 2 bytes @ 0x29
  2474  0049                     	ds	2
  2475  004B                     ??_main:	
  2476                           
  2477                           ; 1 bytes @ 0x2B
  2478  004B                     	ds	1
  2479                           
  2480                           	psect	maintext
  2481  0660                     __pmaintext:	
  2482 ;;
  2483 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2484 ;;
  2485 ;; *************** function _main *****************
  2486 ;; Defined at:
  2487 ;;		line 52 in file "main.c"
  2488 ;; Parameters:    Size  Location     Type
  2489 ;;		None
  2490 ;; Auto vars:     Size  Location     Type
  2491 ;;		None
  2492 ;; Return value:  Size  Location     Type
  2493 ;;                  1    wreg      void 
  2494 ;; Registers used:
  2495 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2496 ;; Tracked objects:
  2497 ;;		On entry : B1F/0
  2498 ;;		On exit  : 0/0
  2499 ;;		Unchanged: 0/0
  2500 ;; Data sizes:     COMMON   BANK0   BANK1
  2501 ;;      Params:         0       0       0
  2502 ;;      Locals:         0       0       0
  2503 ;;      Temps:          0       1       0
  2504 ;;      Totals:         0       1       0
  2505 ;;Total ram usage:        1 bytes
  2506 ;; Hardware stack levels required when called:   14
  2507 ;; This function calls:
  2508 ;;		_ESP_config
  2509 ;;		_ESP_initialize
  2510 ;;		_ESP_message_handler
  2511 ;;		_EUSART_is_rx_ready
  2512 ;;		_SYSTEM_Initialize
  2513 ;;		_logger_initialize
  2514 ;;		_process_message
  2515 ;;		_read_analog
  2516 ;; This function is called by:
  2517 ;;		Startup code after reset
  2518 ;; This function uses a non-reentrant model
  2519 ;;
  2520                           
  2521                           
  2522                           ;psect for function _main
  2523  0660                     _main:	
  2524                           
  2525                           ;main.c: 55:     SYSTEM_Initialize();
  2526                           
  2527                           ;incstack = 0
  2528                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2529  0660  278B               	fcall	_SYSTEM_Initialize
  2530                           
  2531                           ;main.c: 58:     ESP_initialize();
  2532  0661  275D               	fcall	_ESP_initialize
  2533                           
  2534                           ;main.c: 61:     logger_initialize();
  2535  0662  25AD               	fcall	_logger_initialize
  2536                           
  2537                           ;main.c: 66:     (INTCONbits.GIE = 1);
  2538  0663  178B               	bsf	11,7	;volatile
  2539                           
  2540                           ;main.c: 69:     (INTCONbits.PEIE = 1);
  2541  0664  170B               	bsf	11,6	;volatile
  2542                           
  2543                           ;main.c: 77:     ESP_config();
  2544  0665  2392               	fcall	_ESP_config
  2545  0666                     l3376:	
  2546                           ;main.c: 80:     while (1)
  2547                           
  2548                           
  2549                           ;main.c: 81:     {;main.c: 84:          if (EUSART_is_rx_ready()) {
  2550  0666  27EE               	fcall	_EUSART_is_rx_ready
  2551  0667  3A00               	xorlw	0
  2552  0668  1903               	skipnz
  2553  0669  2E6B               	goto	l3380
  2554                           
  2555                           ;main.c: 88:                 ESP_message_handler();
  2556  066A  2489               	fcall	_ESP_message_handler
  2557  066B                     l3380:	
  2558                           ;main.c: 90:         }
  2559                           
  2560                           
  2561                           ;main.c: 92:           if (ADC_state == ADC_READY) {
  2562  066B  0020               	movlb	0	; select bank0
  2563  066C  036D               	decf	_ADC_state,w	;volatile
  2564  066D  1D03               	btfss	3,2
  2565  066E  2E70               	goto	l3384
  2566                           
  2567                           ;main.c: 93:             read_analog();
  2568  066F  21BC               	fcall	_read_analog
  2569  0670                     l3384:	
  2570                           ;main.c: 94:         }
  2571                           
  2572                           
  2573                           ;main.c: 96:         if (ESP_wait_exception) {
  2574  0670  0020               	movlb	0	; select bank0
  2575  0671  0868               	movf	_ESP_wait_exception,w	;volatile
  2576  0672  1903               	btfsc	3,2
  2577  0673  2E66               	goto	l3376
  2578                           
  2579                           ;main.c: 97:             ESP_wait_exception = 0;
  2580  0674  01E8               	clrf	_ESP_wait_exception	;volatile
  2581                           
  2582                           ;main.c: 98:             process_message('S');
  2583  0675  3053               	movlw	83
  2584  0676  00CB               	movwf	??_main
  2585  0677  084B               	movf	??_main,w
  2586  0678  00BC               	movwf	process_message@message
  2587  0679  22C6               	fcall	_process_message
  2588                           
  2589                           ;main.c: 102:     }
  2590                           
  2591                           ;main.c: 99:         }
  2592  067A  2E66               	goto	l3376
  2593  067B                     __end_of_main:	
  2594                           
  2595                           	psect	text1
  2596  01BC                     __ptext1:	
  2597 ;; *************** function _read_analog *****************
  2598 ;; Defined at:
  2599 ;;		line 97 in file "logger.c"
  2600 ;; Parameters:    Size  Location     Type
  2601 ;;		None
  2602 ;; Auto vars:     Size  Location     Type
  2603 ;;  mess            6   35[BANK0 ] unsigned char [6]
  2604 ;;  aux1            4   31[BANK0 ] unsigned long 
  2605 ;;  adc_val         2   41[BANK0 ] unsigned short 
  2606 ;; Return value:  Size  Location     Type
  2607 ;;                  1    wreg      void 
  2608 ;; Registers used:
  2609 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2610 ;; Tracked objects:
  2611 ;;		On entry : 0/0
  2612 ;;		On exit  : 0/0
  2613 ;;		Unchanged: 0/0
  2614 ;; Data sizes:     COMMON   BANK0   BANK1
  2615 ;;      Params:         0       0       0
  2616 ;;      Locals:         0      12       0
  2617 ;;      Temps:          0       4       0
  2618 ;;      Totals:         0      16       0
  2619 ;;Total ram usage:       16 bytes
  2620 ;; Hardware stack levels used:    1
  2621 ;; Hardware stack levels required when called:   10
  2622 ;; This function calls:
  2623 ;;		_ESP_wait_for
  2624 ;;		_ESP_write
  2625 ;;		___lmul
  2626 ;;		__sprintf
  2627 ;; This function is called by:
  2628 ;;		_main
  2629 ;; This function uses a non-reentrant model
  2630 ;;
  2631                           
  2632                           
  2633                           ;psect for function _read_analog
  2634  01BC                     _read_analog:	
  2635                           
  2636                           ;logger.c: 99:     unsigned short adc_val;;logger.c: 101:     unsigned long aux1;;logger
      +                          .c: 102:     unsigned char mess[6];;logger.c: 104:     adc_val = ADC_value;
  2637                           
  2638                           ;incstack = 0
  2639                           ; Regs used in _read_analog: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2640  01BC  0020               	movlb	0	; select bank0
  2641  01BD  085D               	movf	_ADC_value+1,w	;volatile
  2642  01BE  00CA               	movwf	read_analog@adc_val+1
  2643  01BF  085C               	movf	_ADC_value,w	;volatile
  2644  01C0  00C9               	movwf	read_analog@adc_val
  2645                           
  2646                           ;logger.c: 105:     ADC_state = ADC_IDLE;
  2647  01C1  01ED               	clrf	_ADC_state	;volatile
  2648                           
  2649                           ;logger.c: 107:     if (message_format == MESSAGE_BINARY) {
  2650  01C2  0865               	movf	_message_format,w	;volatile
  2651  01C3  1D03               	btfss	3,2
  2652  01C4  29D9               	goto	l3356
  2653                           
  2654                           ;logger.c: 108:         mess[0] = (unsigned char)(adc_val & 0xff);
  2655  01C5  0849               	movf	read_analog@adc_val,w
  2656  01C6  00BB               	movwf	??_read_analog
  2657  01C7  083B               	movf	??_read_analog,w
  2658  01C8  00C3               	movwf	read_analog@mess
  2659                           
  2660                           ;logger.c: 109:         mess[1] = (unsigned char)((adc_val >> 8) & 0xff);
  2661  01C9  084A               	movf	read_analog@adc_val+1,w
  2662  01CA  00BB               	movwf	??_read_analog
  2663  01CB  083B               	movf	??_read_analog,w
  2664  01CC  00C4               	movwf	read_analog@mess+1
  2665                           
  2666                           ;logger.c: 125:         ESP_write(mess,2);
  2667  01CD  3043               	movlw	low read_analog@mess
  2668  01CE  00B3               	movwf	ESP_write@pt
  2669  01CF  3000               	movlw	high read_analog@mess
  2670  01D0  00B4               	movwf	ESP_write@pt+1
  2671  01D1  3002               	movlw	2
  2672  01D2  00BB               	movwf	??_read_analog
  2673  01D3  083B               	movf	??_read_analog,w
  2674  01D4  00B5               	movwf	ESP_write@length
  2675  01D5  20D8               	fcall	_ESP_write
  2676                           
  2677                           ;logger.c: 126:         ESP_wait_for(ESP_SEND_OK);
  2678  01D6  3001               	movlw	1
  2679  01D7  24D9               	fcall	_ESP_wait_for
  2680                           
  2681                           ;logger.c: 129:     } else {
  2682  01D8  0008               	return
  2683  01D9                     l3356:	
  2684                           
  2685                           ;logger.c: 132:             aux1 = (unsigned long)adc_val*3300UL;
  2686  01D9  0020               	movlb	0	; select bank0
  2687  01DA  0849               	movf	read_analog@adc_val,w
  2688  01DB  00A0               	movwf	___lmul@multiplier
  2689  01DC  084A               	movf	read_analog@adc_val+1,w
  2690  01DD  00A1               	movwf	___lmul@multiplier+1
  2691  01DE  01A2               	clrf	___lmul@multiplier+2
  2692  01DF  01A3               	clrf	___lmul@multiplier+3
  2693  01E0  3000               	movlw	0
  2694  01E1  00A7               	movwf	___lmul@multiplicand+3
  2695  01E2  3000               	movlw	0
  2696  01E3  00A6               	movwf	___lmul@multiplicand+2
  2697  01E4  300C               	movlw	12
  2698  01E5  00A5               	movwf	___lmul@multiplicand+1
  2699  01E6  30E4               	movlw	228
  2700  01E7  00A4               	movwf	___lmul@multiplicand
  2701  01E8  23FE               	fcall	___lmul
  2702  01E9  0020               	movlb	0	; select bank0
  2703  01EA  0823               	movf	?___lmul+3,w
  2704  01EB  00C2               	movwf	read_analog@aux1+3
  2705  01EC  0822               	movf	?___lmul+2,w
  2706  01ED  00C1               	movwf	read_analog@aux1+2
  2707  01EE  0821               	movf	?___lmul+1,w
  2708  01EF  00C0               	movwf	read_analog@aux1+1
  2709  01F0  0820               	movf	?___lmul,w
  2710  01F1  00BF               	movwf	read_analog@aux1
  2711                           
  2712                           ;logger.c: 133:             adc_val = (unsigned short)(aux1 >> 10);
  2713  01F2  083F               	movf	read_analog@aux1,w
  2714  01F3  00BB               	movwf	??_read_analog
  2715  01F4  0840               	movf	read_analog@aux1+1,w
  2716  01F5  00BC               	movwf	??_read_analog+1
  2717  01F6  0841               	movf	read_analog@aux1+2,w
  2718  01F7  00BD               	movwf	??_read_analog+2
  2719  01F8  0842               	movf	read_analog@aux1+3,w
  2720  01F9  00BE               	movwf	??_read_analog+3
  2721  01FA  300A               	movlw	10
  2722  01FB                     u2725:	
  2723  01FB  36BE               	lsrf	??_read_analog+3,f
  2724  01FC  0CBD               	rrf	??_read_analog+2,f
  2725  01FD  0CBC               	rrf	??_read_analog+1,f
  2726  01FE  0CBB               	rrf	??_read_analog,f
  2727  01FF  0B89               	decfsz	9,f
  2728  0200  29FB               	goto	u2725
  2729  0201  083C               	movf	??_read_analog+1,w
  2730  0202  00CA               	movwf	read_analog@adc_val+1
  2731  0203  083B               	movf	??_read_analog,w
  2732  0204  00C9               	movwf	read_analog@adc_val
  2733                           
  2734                           ;logger.c: 135:             _sprintf(mess,adc_val);
  2735  0205  084A               	movf	read_analog@adc_val+1,w
  2736  0206  00A4               	movwf	__sprintf@val+1
  2737  0207  0849               	movf	read_analog@adc_val,w
  2738  0208  00A3               	movwf	__sprintf@val
  2739  0209  3043               	movlw	(low (read_analog@mess| 0))& (0+255)
  2740  020A  2052               	fcall	__sprintf
  2741                           
  2742                           ;logger.c: 136:             mess[5] = '\n';
  2743  020B  300A               	movlw	10
  2744  020C  0020               	movlb	0	; select bank0
  2745  020D  00BB               	movwf	??_read_analog
  2746  020E  083B               	movf	??_read_analog,w
  2747  020F  00C8               	movwf	read_analog@mess+5
  2748                           
  2749                           ;logger.c: 140:             ESP_write(mess,6);
  2750  0210  3043               	movlw	low read_analog@mess
  2751  0211  00B3               	movwf	ESP_write@pt
  2752  0212  3000               	movlw	high read_analog@mess
  2753  0213  00B4               	movwf	ESP_write@pt+1
  2754  0214  3006               	movlw	6
  2755  0215  00BB               	movwf	??_read_analog
  2756  0216  083B               	movf	??_read_analog,w
  2757  0217  00B5               	movwf	ESP_write@length
  2758  0218  20D8               	fcall	_ESP_write
  2759                           
  2760                           ;logger.c: 141:             ESP_wait_for(ESP_SEND_OK);
  2761  0219  3001               	movlw	1
  2762  021A  24D9               	fcall	_ESP_wait_for
  2763  021B  0008               	return
  2764  021C                     __end_of_read_analog:	
  2765                           ;logger.c: 145:     }
  2766                           
  2767                           
  2768                           	psect	text2
  2769  0052                     __ptext2:	
  2770 ;; *************** function __sprintf *****************
  2771 ;; Defined at:
  2772 ;;		line 25 in file "comm.c"
  2773 ;; Parameters:    Size  Location     Type
  2774 ;;  mess            1    wreg     PTR unsigned char 
  2775 ;;		 -> read_analog@mess(6), 
  2776 ;;  val             2    3[BANK0 ] unsigned short 
  2777 ;; Auto vars:     Size  Location     Type
  2778 ;;  mess            1    8[BANK0 ] PTR unsigned char 
  2779 ;;		 -> read_analog@mess(6), 
  2780 ;;  aux             2    6[BANK0 ] unsigned short 
  2781 ;; Return value:  Size  Location     Type
  2782 ;;                  1    wreg      void 
  2783 ;; Registers used:
  2784 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2785 ;; Tracked objects:
  2786 ;;		On entry : 0/0
  2787 ;;		On exit  : 0/0
  2788 ;;		Unchanged: 0/0
  2789 ;; Data sizes:     COMMON   BANK0   BANK1
  2790 ;;      Params:         0       2       0
  2791 ;;      Locals:         0       3       0
  2792 ;;      Temps:          0       1       0
  2793 ;;      Totals:         0       6       0
  2794 ;;Total ram usage:        6 bytes
  2795 ;; Hardware stack levels used:    1
  2796 ;; Hardware stack levels required when called:    5
  2797 ;; This function calls:
  2798 ;;		___lwdiv
  2799 ;;		___lwmod
  2800 ;; This function is called by:
  2801 ;;		_read_analog
  2802 ;; This function uses a non-reentrant model
  2803 ;;
  2804                           
  2805                           
  2806                           ;psect for function __sprintf
  2807  0052                     __sprintf:	
  2808                           
  2809                           ;incstack = 0
  2810                           ; Regs used in __sprintf: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2811                           ;__sprintf@mess stored from wreg
  2812  0052  0020               	movlb	0	; select bank0
  2813  0053  00A8               	movwf	__sprintf@mess
  2814                           
  2815                           ;comm.c: 25: void _sprintf(char *mess, unsigned short val);comm.c: 26: {;comm.c: 27:   u
      +                          nsigned short aux;;comm.c: 31:   aux = val%10;
  2816  0054  300A               	movlw	10
  2817  0055  00F3               	movwf	___lwmod@divisor
  2818  0056  3000               	movlw	0
  2819  0057  00F4               	movwf	___lwmod@divisor+1
  2820  0058  0824               	movf	__sprintf@val+1,w
  2821  0059  00F6               	movwf	___lwmod@dividend+1
  2822  005A  0823               	movf	__sprintf@val,w
  2823  005B  00F5               	movwf	___lwmod@dividend
  2824  005C  245D               	fcall	___lwmod
  2825  005D  0874               	movf	?___lwmod+1,w
  2826  005E  0020               	movlb	0	; select bank0
  2827  005F  00A7               	movwf	__sprintf@aux+1
  2828  0060  0873               	movf	?___lwmod,w
  2829  0061  00A6               	movwf	__sprintf@aux
  2830                           
  2831                           ;comm.c: 32:   val /= 10;
  2832  0062  300A               	movlw	10
  2833  0063  00F3               	movwf	___lwdiv@divisor
  2834  0064  3000               	movlw	0
  2835  0065  00F4               	movwf	___lwdiv@divisor+1
  2836  0066  0824               	movf	__sprintf@val+1,w
  2837  0067  00F6               	movwf	___lwdiv@dividend+1
  2838  0068  0823               	movf	__sprintf@val,w
  2839  0069  00F5               	movwf	___lwdiv@dividend
  2840  006A  23C9               	fcall	___lwdiv
  2841  006B  0874               	movf	?___lwdiv+1,w
  2842  006C  0020               	movlb	0	; select bank0
  2843  006D  00A4               	movwf	__sprintf@val+1
  2844  006E  0873               	movf	?___lwdiv,w
  2845  006F  00A3               	movwf	__sprintf@val
  2846                           
  2847                           ;comm.c: 34:   mess[5] = 0x00;
  2848  0070  0828               	movf	__sprintf@mess,w
  2849  0071  3E05               	addlw	5
  2850  0072  0086               	movwf	6
  2851  0073  0187               	clrf	7
  2852  0074  0181               	clrf	1
  2853                           
  2854                           ;comm.c: 36:   mess[4] = (unsigned char)aux+'0';
  2855  0075  0826               	movf	__sprintf@aux,w
  2856  0076  3E30               	addlw	48
  2857  0077  00A5               	movwf	??__sprintf
  2858  0078  0828               	movf	__sprintf@mess,w
  2859  0079  3E04               	addlw	4
  2860  007A  0086               	movwf	6
  2861  007B  0187               	clrf	7
  2862  007C  0825               	movf	??__sprintf,w
  2863  007D  0081               	movwf	1
  2864                           
  2865                           ;comm.c: 38:   aux = val%10;
  2866  007E  300A               	movlw	10
  2867  007F  00F3               	movwf	___lwmod@divisor
  2868  0080  3000               	movlw	0
  2869  0081  00F4               	movwf	___lwmod@divisor+1
  2870  0082  0824               	movf	__sprintf@val+1,w
  2871  0083  00F6               	movwf	___lwmod@dividend+1
  2872  0084  0823               	movf	__sprintf@val,w
  2873  0085  00F5               	movwf	___lwmod@dividend
  2874  0086  245D               	fcall	___lwmod
  2875  0087  0874               	movf	?___lwmod+1,w
  2876  0088  0020               	movlb	0	; select bank0
  2877  0089  00A7               	movwf	__sprintf@aux+1
  2878  008A  0873               	movf	?___lwmod,w
  2879  008B  00A6               	movwf	__sprintf@aux
  2880                           
  2881                           ;comm.c: 39:   val /= 10;
  2882  008C  300A               	movlw	10
  2883  008D  00F3               	movwf	___lwdiv@divisor
  2884  008E  3000               	movlw	0
  2885  008F  00F4               	movwf	___lwdiv@divisor+1
  2886  0090  0824               	movf	__sprintf@val+1,w
  2887  0091  00F6               	movwf	___lwdiv@dividend+1
  2888  0092  0823               	movf	__sprintf@val,w
  2889  0093  00F5               	movwf	___lwdiv@dividend
  2890  0094  23C9               	fcall	___lwdiv
  2891  0095  0874               	movf	?___lwdiv+1,w
  2892  0096  0020               	movlb	0	; select bank0
  2893  0097  00A4               	movwf	__sprintf@val+1
  2894  0098  0873               	movf	?___lwdiv,w
  2895  0099  00A3               	movwf	__sprintf@val
  2896                           
  2897                           ;comm.c: 41:   mess[3] = (unsigned char)aux+'0';
  2898  009A  0826               	movf	__sprintf@aux,w
  2899  009B  3E30               	addlw	48
  2900  009C  00A5               	movwf	??__sprintf
  2901  009D  0828               	movf	__sprintf@mess,w
  2902  009E  3E03               	addlw	3
  2903  009F  0086               	movwf	6
  2904  00A0  0187               	clrf	7
  2905  00A1  0825               	movf	??__sprintf,w
  2906  00A2  0081               	movwf	1
  2907                           
  2908                           ;comm.c: 43:   aux = val%10;
  2909  00A3  300A               	movlw	10
  2910  00A4  00F3               	movwf	___lwmod@divisor
  2911  00A5  3000               	movlw	0
  2912  00A6  00F4               	movwf	___lwmod@divisor+1
  2913  00A7  0824               	movf	__sprintf@val+1,w
  2914  00A8  00F6               	movwf	___lwmod@dividend+1
  2915  00A9  0823               	movf	__sprintf@val,w
  2916  00AA  00F5               	movwf	___lwmod@dividend
  2917  00AB  245D               	fcall	___lwmod
  2918  00AC  0874               	movf	?___lwmod+1,w
  2919  00AD  0020               	movlb	0	; select bank0
  2920  00AE  00A7               	movwf	__sprintf@aux+1
  2921  00AF  0873               	movf	?___lwmod,w
  2922  00B0  00A6               	movwf	__sprintf@aux
  2923                           
  2924                           ;comm.c: 44:   val /= 10;
  2925  00B1  300A               	movlw	10
  2926  00B2  00F3               	movwf	___lwdiv@divisor
  2927  00B3  3000               	movlw	0
  2928  00B4  00F4               	movwf	___lwdiv@divisor+1
  2929  00B5  0824               	movf	__sprintf@val+1,w
  2930  00B6  00F6               	movwf	___lwdiv@dividend+1
  2931  00B7  0823               	movf	__sprintf@val,w
  2932  00B8  00F5               	movwf	___lwdiv@dividend
  2933  00B9  23C9               	fcall	___lwdiv
  2934  00BA  0874               	movf	?___lwdiv+1,w
  2935  00BB  0020               	movlb	0	; select bank0
  2936  00BC  00A4               	movwf	__sprintf@val+1
  2937  00BD  0873               	movf	?___lwdiv,w
  2938  00BE  00A3               	movwf	__sprintf@val
  2939                           
  2940                           ;comm.c: 46:   mess[2] = (unsigned char)aux+'0';
  2941  00BF  0826               	movf	__sprintf@aux,w
  2942  00C0  3E30               	addlw	48
  2943  00C1  00A5               	movwf	??__sprintf
  2944  00C2  0828               	movf	__sprintf@mess,w
  2945  00C3  3E02               	addlw	2
  2946  00C4  0086               	movwf	6
  2947  00C5  0187               	clrf	7
  2948  00C6  0825               	movf	??__sprintf,w
  2949  00C7  0081               	movwf	1
  2950                           
  2951                           ;comm.c: 47:   mess[1] = '.';
  2952  00C8  302E               	movlw	46
  2953  00C9  00A5               	movwf	??__sprintf
  2954  00CA  0A28               	incf	__sprintf@mess,w
  2955  00CB  0086               	movwf	6
  2956  00CC  0187               	clrf	7
  2957  00CD  0825               	movf	??__sprintf,w
  2958  00CE  0081               	movwf	1
  2959                           
  2960                           ;comm.c: 48:   mess[0] = (unsigned char)val+'0';
  2961  00CF  0823               	movf	__sprintf@val,w
  2962  00D0  3E30               	addlw	48
  2963  00D1  00A5               	movwf	??__sprintf
  2964  00D2  0828               	movf	__sprintf@mess,w
  2965  00D3  0086               	movwf	6
  2966  00D4  0187               	clrf	7
  2967  00D5  0825               	movf	??__sprintf,w
  2968  00D6  0081               	movwf	1
  2969  00D7  0008               	return
  2970  00D8                     __end_of__sprintf:	
  2971                           
  2972                           	psect	text3
  2973  045D                     __ptext3:	
  2974 ;; *************** function ___lwmod *****************
  2975 ;; Defined at:
  2976 ;;		line 5 in file "/pkg/microchip/xc8/v2.00/pic/sources/c99/common/lwmod.c"
  2977 ;; Parameters:    Size  Location     Type
  2978 ;;  divisor         2    3[COMMON] unsigned int 
  2979 ;;  dividend        2    5[COMMON] unsigned int 
  2980 ;; Auto vars:     Size  Location     Type
  2981 ;;  counter         1    8[COMMON] unsigned char 
  2982 ;; Return value:  Size  Location     Type
  2983 ;;                  2    3[COMMON] unsigned int 
  2984 ;; Registers used:
  2985 ;;		wreg, status,2, status,0
  2986 ;; Tracked objects:
  2987 ;;		On entry : 0/0
  2988 ;;		On exit  : 0/0
  2989 ;;		Unchanged: 0/0
  2990 ;; Data sizes:     COMMON   BANK0   BANK1
  2991 ;;      Params:         4       0       0
  2992 ;;      Locals:         1       0       0
  2993 ;;      Temps:          1       0       0
  2994 ;;      Totals:         6       0       0
  2995 ;;Total ram usage:        6 bytes
  2996 ;; Hardware stack levels used:    1
  2997 ;; Hardware stack levels required when called:    4
  2998 ;; This function calls:
  2999 ;;		Nothing
  3000 ;; This function is called by:
  3001 ;;		__sprintf
  3002 ;; This function uses a non-reentrant model
  3003 ;;
  3004                           
  3005                           
  3006                           ;psect for function ___lwmod
  3007  045D                     ___lwmod:	
  3008                           
  3009                           ;incstack = 0
  3010                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3011  045D  0873               	movf	___lwmod@divisor,w
  3012  045E  0474               	iorwf	___lwmod@divisor+1,w
  3013  045F  1903               	btfsc	3,2
  3014  0460  2C84               	goto	l2508
  3015  0461  01F8               	clrf	___lwmod@counter
  3016  0462  0AF8               	incf	___lwmod@counter,f
  3017  0463                     l2498:	
  3018  0463  1BF4               	btfsc	___lwmod@divisor+1,7
  3019  0464  2C6F               	goto	l2500
  3020  0465  3001               	movlw	1
  3021  0466                     u1715:	
  3022  0466  35F3               	lslf	___lwmod@divisor,f
  3023  0467  0DF4               	rlf	___lwmod@divisor+1,f
  3024  0468  0B89               	decfsz	9,f
  3025  0469  2C66               	goto	u1715
  3026  046A  3001               	movlw	1
  3027  046B  00F7               	movwf	??___lwmod
  3028  046C  0877               	movf	??___lwmod,w
  3029  046D  07F8               	addwf	___lwmod@counter,f
  3030  046E  2C63               	goto	l2498
  3031  046F                     l2500:	
  3032  046F  0874               	movf	___lwmod@divisor+1,w
  3033  0470  0276               	subwf	___lwmod@dividend+1,w
  3034  0471  1D03               	skipz
  3035  0472  2C75               	goto	u1735
  3036  0473  0873               	movf	___lwmod@divisor,w
  3037  0474  0275               	subwf	___lwmod@dividend,w
  3038  0475                     u1735:	
  3039  0475  1C03               	skipc
  3040  0476  2C7B               	goto	l2504
  3041  0477  0873               	movf	___lwmod@divisor,w
  3042  0478  02F5               	subwf	___lwmod@dividend,f
  3043  0479  0874               	movf	___lwmod@divisor+1,w
  3044  047A  3BF6               	subwfb	___lwmod@dividend+1,f
  3045  047B                     l2504:	
  3046  047B  3001               	movlw	1
  3047  047C                     u1745:	
  3048  047C  36F4               	lsrf	___lwmod@divisor+1,f
  3049  047D  0CF3               	rrf	___lwmod@divisor,f
  3050  047E  0B89               	decfsz	9,f
  3051  047F  2C7C               	goto	u1745
  3052  0480  3001               	movlw	1
  3053  0481  02F8               	subwf	___lwmod@counter,f
  3054  0482  1D03               	btfss	3,2
  3055  0483  2C6F               	goto	l2500
  3056  0484                     l2508:	
  3057  0484  0876               	movf	___lwmod@dividend+1,w
  3058  0485  00F4               	movwf	?___lwmod+1
  3059  0486  0875               	movf	___lwmod@dividend,w
  3060  0487  00F3               	movwf	?___lwmod
  3061  0488  0008               	return
  3062  0489                     __end_of___lwmod:	
  3063                           
  3064                           	psect	text4
  3065  03C9                     __ptext4:	
  3066 ;; *************** function ___lwdiv *****************
  3067 ;; Defined at:
  3068 ;;		line 5 in file "/pkg/microchip/xc8/v2.00/pic/sources/c99/common/lwdiv.c"
  3069 ;; Parameters:    Size  Location     Type
  3070 ;;  divisor         2    3[COMMON] unsigned int 
  3071 ;;  dividend        2    5[COMMON] unsigned int 
  3072 ;; Auto vars:     Size  Location     Type
  3073 ;;  quotient        2    1[BANK0 ] unsigned int 
  3074 ;;  counter         1    0[BANK0 ] unsigned char 
  3075 ;; Return value:  Size  Location     Type
  3076 ;;                  2    3[COMMON] unsigned int 
  3077 ;; Registers used:
  3078 ;;		wreg, status,2, status,0
  3079 ;; Tracked objects:
  3080 ;;		On entry : 0/0
  3081 ;;		On exit  : 0/0
  3082 ;;		Unchanged: 0/0
  3083 ;; Data sizes:     COMMON   BANK0   BANK1
  3084 ;;      Params:         4       0       0
  3085 ;;      Locals:         0       3       0
  3086 ;;      Temps:          1       0       0
  3087 ;;      Totals:         5       3       0
  3088 ;;Total ram usage:        8 bytes
  3089 ;; Hardware stack levels used:    1
  3090 ;; Hardware stack levels required when called:    4
  3091 ;; This function calls:
  3092 ;;		Nothing
  3093 ;; This function is called by:
  3094 ;;		__sprintf
  3095 ;; This function uses a non-reentrant model
  3096 ;;
  3097                           
  3098                           
  3099                           ;psect for function ___lwdiv
  3100  03C9                     ___lwdiv:	
  3101                           
  3102                           ;incstack = 0
  3103                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3104  03C9  0020               	movlb	0	; select bank0
  3105  03CA  01A1               	clrf	___lwdiv@quotient
  3106  03CB  01A2               	clrf	___lwdiv@quotient+1
  3107  03CC  0873               	movf	___lwdiv@divisor,w
  3108  03CD  0474               	iorwf	___lwdiv@divisor+1,w
  3109  03CE  1903               	btfsc	3,2
  3110  03CF  2BF9               	goto	l3256
  3111  03D0  01A0               	clrf	___lwdiv@counter
  3112  03D1  0AA0               	incf	___lwdiv@counter,f
  3113  03D2                     l3244:	
  3114  03D2  1BF4               	btfsc	___lwdiv@divisor+1,7
  3115  03D3  2BDE               	goto	l3246
  3116  03D4  3001               	movlw	1
  3117  03D5                     u2605:	
  3118  03D5  35F3               	lslf	___lwdiv@divisor,f
  3119  03D6  0DF4               	rlf	___lwdiv@divisor+1,f
  3120  03D7  0B89               	decfsz	9,f
  3121  03D8  2BD5               	goto	u2605
  3122  03D9  3001               	movlw	1
  3123  03DA  00F7               	movwf	??___lwdiv
  3124  03DB  0877               	movf	??___lwdiv,w
  3125  03DC  07A0               	addwf	___lwdiv@counter,f
  3126  03DD  2BD2               	goto	l3244
  3127  03DE                     l3246:	
  3128  03DE  3001               	movlw	1
  3129  03DF                     u2625:	
  3130  03DF  35A1               	lslf	___lwdiv@quotient,f
  3131  03E0  0DA2               	rlf	___lwdiv@quotient+1,f
  3132  03E1  0B89               	decfsz	9,f
  3133  03E2  2BDF               	goto	u2625
  3134  03E3  0874               	movf	___lwdiv@divisor+1,w
  3135  03E4  0276               	subwf	___lwdiv@dividend+1,w
  3136  03E5  1D03               	skipz
  3137  03E6  2BE9               	goto	u2635
  3138  03E7  0873               	movf	___lwdiv@divisor,w
  3139  03E8  0275               	subwf	___lwdiv@dividend,w
  3140  03E9                     u2635:	
  3141  03E9  1C03               	skipc
  3142  03EA  2BF0               	goto	l3252
  3143  03EB  0873               	movf	___lwdiv@divisor,w
  3144  03EC  02F5               	subwf	___lwdiv@dividend,f
  3145  03ED  0874               	movf	___lwdiv@divisor+1,w
  3146  03EE  3BF6               	subwfb	___lwdiv@dividend+1,f
  3147  03EF  1421               	bsf	___lwdiv@quotient,0
  3148  03F0                     l3252:	
  3149  03F0  3001               	movlw	1
  3150  03F1                     u2645:	
  3151  03F1  36F4               	lsrf	___lwdiv@divisor+1,f
  3152  03F2  0CF3               	rrf	___lwdiv@divisor,f
  3153  03F3  0B89               	decfsz	9,f
  3154  03F4  2BF1               	goto	u2645
  3155  03F5  3001               	movlw	1
  3156  03F6  02A0               	subwf	___lwdiv@counter,f
  3157  03F7  1D03               	btfss	3,2
  3158  03F8  2BDE               	goto	l3246
  3159  03F9                     l3256:	
  3160  03F9  0822               	movf	___lwdiv@quotient+1,w
  3161  03FA  00F4               	movwf	?___lwdiv+1
  3162  03FB  0821               	movf	___lwdiv@quotient,w
  3163  03FC  00F3               	movwf	?___lwdiv
  3164  03FD  0008               	return
  3165  03FE                     __end_of___lwdiv:	
  3166                           
  3167                           	psect	text5
  3168  03FE                     __ptext5:	
  3169 ;; *************** function ___lmul *****************
  3170 ;; Defined at:
  3171 ;;		line 15 in file "/pkg/microchip/xc8/v2.00/pic/sources/c99/common/Umul32.c"
  3172 ;; Parameters:    Size  Location     Type
  3173 ;;  multiplier      4    0[BANK0 ] unsigned long 
  3174 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  3175 ;; Auto vars:     Size  Location     Type
  3176 ;;  product         4    3[COMMON] unsigned long 
  3177 ;; Return value:  Size  Location     Type
  3178 ;;                  4    0[BANK0 ] unsigned long 
  3179 ;; Registers used:
  3180 ;;		wreg, status,2, status,0
  3181 ;; Tracked objects:
  3182 ;;		On entry : 0/0
  3183 ;;		On exit  : 0/0
  3184 ;;		Unchanged: 0/0
  3185 ;; Data sizes:     COMMON   BANK0   BANK1
  3186 ;;      Params:         0       8       0
  3187 ;;      Locals:         4       0       0
  3188 ;;      Temps:          0       0       0
  3189 ;;      Totals:         4       8       0
  3190 ;;Total ram usage:       12 bytes
  3191 ;; Hardware stack levels used:    1
  3192 ;; Hardware stack levels required when called:    4
  3193 ;; This function calls:
  3194 ;;		Nothing
  3195 ;; This function is called by:
  3196 ;;		_read_analog
  3197 ;; This function uses a non-reentrant model
  3198 ;;
  3199                           
  3200                           
  3201                           ;psect for function ___lmul
  3202  03FE                     ___lmul:	
  3203                           
  3204                           ;incstack = 0
  3205                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3206  03FE  3000               	movlw	0
  3207  03FF  00F6               	movwf	___lmul@product+3
  3208  0400  3000               	movlw	0
  3209  0401  00F5               	movwf	___lmul@product+2
  3210  0402  3000               	movlw	0
  3211  0403  00F4               	movwf	___lmul@product+1
  3212  0404  3000               	movlw	0
  3213  0405  00F3               	movwf	___lmul@product
  3214  0406                     l3288:	
  3215  0406  0020               	movlb	0	; select bank0
  3216  0407  1C20               	btfss	___lmul@multiplier,0
  3217  0408  2C11               	goto	l3292
  3218  0409  0824               	movf	___lmul@multiplicand,w
  3219  040A  07F3               	addwf	___lmul@product,f
  3220  040B  0825               	movf	___lmul@multiplicand+1,w
  3221  040C  3DF4               	addwfc	___lmul@product+1,f
  3222  040D  0826               	movf	___lmul@multiplicand+2,w
  3223  040E  3DF5               	addwfc	___lmul@product+2,f
  3224  040F  0827               	movf	___lmul@multiplicand+3,w
  3225  0410  3DF6               	addwfc	___lmul@product+3,f
  3226  0411                     l3292:	
  3227  0411  3001               	movlw	1
  3228  0412                     u2675:	
  3229  0412  35A4               	lslf	___lmul@multiplicand,f
  3230  0413  0DA5               	rlf	___lmul@multiplicand+1,f
  3231  0414  0DA6               	rlf	___lmul@multiplicand+2,f
  3232  0415  0DA7               	rlf	___lmul@multiplicand+3,f
  3233  0416  0B89               	decfsz	9,f
  3234  0417  2C12               	goto	u2675
  3235  0418  3001               	movlw	1
  3236  0419                     u2685:	
  3237  0419  36A3               	lsrf	___lmul@multiplier+3,f
  3238  041A  0CA2               	rrf	___lmul@multiplier+2,f
  3239  041B  0CA1               	rrf	___lmul@multiplier+1,f
  3240  041C  0CA0               	rrf	___lmul@multiplier,f
  3241  041D  0B89               	decfsz	9,f
  3242  041E  2C19               	goto	u2685
  3243  041F  0823               	movf	___lmul@multiplier+3,w
  3244  0420  0422               	iorwf	___lmul@multiplier+2,w
  3245  0421  0421               	iorwf	___lmul@multiplier+1,w
  3246  0422  0420               	iorwf	___lmul@multiplier,w
  3247  0423  1D03               	skipz
  3248  0424  2C06               	goto	l3288
  3249  0425  0876               	movf	___lmul@product+3,w
  3250  0426  00A3               	movwf	?___lmul+3
  3251  0427  0875               	movf	___lmul@product+2,w
  3252  0428  00A2               	movwf	?___lmul+2
  3253  0429  0874               	movf	___lmul@product+1,w
  3254  042A  00A1               	movwf	?___lmul+1
  3255  042B  0873               	movf	___lmul@product,w
  3256  042C  00A0               	movwf	?___lmul
  3257  042D  0008               	return
  3258  042E                     __end_of___lmul:	
  3259                           
  3260                           	psect	text6
  3261  05AD                     __ptext6:	
  3262 ;; *************** function _logger_initialize *****************
  3263 ;; Defined at:
  3264 ;;		line 17 in file "logger.c"
  3265 ;; Parameters:    Size  Location     Type
  3266 ;;		None
  3267 ;; Auto vars:     Size  Location     Type
  3268 ;;		None
  3269 ;; Return value:  Size  Location     Type
  3270 ;;                  1    wreg      void 
  3271 ;; Registers used:
  3272 ;;		wreg, status,2, status,0, pclath, cstack
  3273 ;; Tracked objects:
  3274 ;;		On entry : 0/0
  3275 ;;		On exit  : 0/0
  3276 ;;		Unchanged: 0/0
  3277 ;; Data sizes:     COMMON   BANK0   BANK1
  3278 ;;      Params:         0       0       0
  3279 ;;      Locals:         0       0       0
  3280 ;;      Temps:          1       0       0
  3281 ;;      Totals:         1       0       0
  3282 ;;Total ram usage:        1 bytes
  3283 ;; Hardware stack levels used:    1
  3284 ;; Hardware stack levels required when called:    5
  3285 ;; This function calls:
  3286 ;;		_ADC_SelectChannel
  3287 ;;		_ESP_Set_application_handler
  3288 ;;		_IOCAF4_SetInterruptHandler
  3289 ;;		_TMR1_SetInterruptHandler
  3290 ;;		_TMR1_StopTimer
  3291 ;; This function is called by:
  3292 ;;		_main
  3293 ;; This function uses a non-reentrant model
  3294 ;;
  3295                           
  3296                           
  3297                           ;psect for function _logger_initialize
  3298  05AD                     _logger_initialize:	
  3299                           
  3300                           ;logger.c: 19:     message_format = MESSAGE_BINARY;
  3301                           
  3302                           ;incstack = 0
  3303                           ; Regs used in _logger_initialize: [wreg+status,2+status,0+pclath+cstack]
  3304  05AD  0020               	movlb	0	; select bank0
  3305  05AE  01E5               	clrf	_message_format	;volatile
  3306                           
  3307                           ;logger.c: 21:     ADC_SelectChannel(channel_AN2);
  3308  05AF  3002               	movlw	2
  3309  05B0  2710               	fcall	_ADC_SelectChannel
  3310                           
  3311                           ;logger.c: 22:     ADC_state = ADC_IDLE;
  3312  05B1  0020               	movlb	0	; select bank0
  3313  05B2  01ED               	clrf	_ADC_state	;volatile
  3314                           
  3315                           ;logger.c: 26:     TMR1_StopTimer();
  3316  05B3  27E5               	fcall	_TMR1_StopTimer
  3317                           
  3318                           ;logger.c: 27:     TMR1_state = TMR1_STOP;
  3319  05B4  0020               	movlb	0	; select bank0
  3320  05B5  01E4               	clrf	_TMR1_state	;volatile
  3321                           
  3322                           ;logger.c: 28:     TMR1_SetInterruptHandler(_TMR1_Ready);
  3323  05B6  30BC               	movlw	low __TMR1_Ready
  3324  05B7  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  3325  05B8  3007               	movlw	high __TMR1_Ready
  3326  05B9  00F4               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  3327  05BA  279E               	fcall	_TMR1_SetInterruptHandler
  3328                           
  3329                           ;logger.c: 31:     IOCAF4_SetInterruptHandler(_IOC_Ready);
  3330  05BB  304A               	movlw	low __IOC_Ready
  3331  05BC  00F3               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler
  3332  05BD  3007               	movlw	high __IOC_Ready
  3333  05BE  00F4               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler+1
  3334  05BF  27A4               	fcall	_IOCAF4_SetInterruptHandler
  3335                           
  3336                           ;logger.c: 32:     IOC_state = IOC_IDLE;
  3337  05C0  0020               	movlb	0	; select bank0
  3338  05C1  01E3               	clrf	_IOC_state	;volatile
  3339                           
  3340                           ;logger.c: 33:     IOC_value = 1;
  3341  05C2  3001               	movlw	1
  3342  05C3  00F5               	movwf	??_logger_initialize
  3343  05C4  0875               	movf	??_logger_initialize,w
  3344  05C5  00E2               	movwf	_IOC_value	;volatile
  3345                           
  3346                           ;logger.c: 35:     ESP_Set_application_handler(process_message);
  3347  05C6  30C6               	movlw	low _process_message
  3348  05C7  00F3               	movwf	ESP_Set_application_handler@applicationHandler
  3349  05C8  3002               	movlw	high _process_message
  3350  05C9  00F4               	movwf	ESP_Set_application_handler@applicationHandler+1
  3351  05CA  27B6               	fcall	_ESP_Set_application_handler
  3352  05CB  0008               	return
  3353  05CC                     __end_of_logger_initialize:	
  3354                           
  3355                           	psect	text7
  3356  0710                     __ptext7:	
  3357 ;; *************** function _ADC_SelectChannel *****************
  3358 ;; Defined at:
  3359 ;;		line 85 in file "mcc_generated_files/adc.c"
  3360 ;; Parameters:    Size  Location     Type
  3361 ;;  channel         1    wreg     enum E2157
  3362 ;; Auto vars:     Size  Location     Type
  3363 ;;  channel         1    4[COMMON] enum E2157
  3364 ;; Return value:  Size  Location     Type
  3365 ;;                  1    wreg      void 
  3366 ;; Registers used:
  3367 ;;		wreg, status,2, status,0
  3368 ;; Tracked objects:
  3369 ;;		On entry : 0/0
  3370 ;;		On exit  : 0/0
  3371 ;;		Unchanged: 0/0
  3372 ;; Data sizes:     COMMON   BANK0   BANK1
  3373 ;;      Params:         0       0       0
  3374 ;;      Locals:         1       0       0
  3375 ;;      Temps:          1       0       0
  3376 ;;      Totals:         2       0       0
  3377 ;;Total ram usage:        2 bytes
  3378 ;; Hardware stack levels used:    1
  3379 ;; Hardware stack levels required when called:    4
  3380 ;; This function calls:
  3381 ;;		Nothing
  3382 ;; This function is called by:
  3383 ;;		_logger_initialize
  3384 ;; This function uses a non-reentrant model
  3385 ;;
  3386                           
  3387                           
  3388                           ;psect for function _ADC_SelectChannel
  3389  0710                     _ADC_SelectChannel:	
  3390                           
  3391                           ;incstack = 0
  3392                           ; Regs used in _ADC_SelectChannel: [wreg+status,2+status,0]
  3393                           ;ADC_SelectChannel@channel stored from wreg
  3394  0710  00F4               	movwf	ADC_SelectChannel@channel
  3395                           
  3396                           ;mcc_generated_files/adc.c: 85: void ADC_SelectChannel(adc_channel_t channel);mcc_genera
      +                          ted_files/adc.c: 86: {;mcc_generated_files/adc.c: 88:     ADCON0bits.CHS = channel;
  3397  0711  0874               	movf	ADC_SelectChannel@channel,w
  3398  0712  00F3               	movwf	??_ADC_SelectChannel
  3399  0713  0DF3               	rlf	??_ADC_SelectChannel,f
  3400  0714  0DF3               	rlf	??_ADC_SelectChannel,f
  3401  0715  0021               	movlb	1	; select bank1
  3402  0716  081D               	movf	29,w	;volatile
  3403  0717  0673               	xorwf	??_ADC_SelectChannel,w
  3404  0718  3983               	andlw	-125
  3405  0719  0673               	xorwf	??_ADC_SelectChannel,w
  3406  071A  009D               	movwf	29	;volatile
  3407                           
  3408                           ;mcc_generated_files/adc.c: 90:     ADCON0bits.ADON = 1;
  3409  071B  141D               	bsf	29,0	;volatile
  3410  071C  0008               	return
  3411  071D                     __end_of_ADC_SelectChannel:	
  3412                           
  3413                           	psect	text8
  3414  078B                     __ptext8:	
  3415 ;; *************** function _SYSTEM_Initialize *****************
  3416 ;; Defined at:
  3417 ;;		line 50 in file "mcc_generated_files/mcc.c"
  3418 ;; Parameters:    Size  Location     Type
  3419 ;;		None
  3420 ;; Auto vars:     Size  Location     Type
  3421 ;;		None
  3422 ;; Return value:  Size  Location     Type
  3423 ;;                  1    wreg      void 
  3424 ;; Registers used:
  3425 ;;		wreg, status,2, status,0, pclath, cstack
  3426 ;; Tracked objects:
  3427 ;;		On entry : 0/0
  3428 ;;		On exit  : 0/0
  3429 ;;		Unchanged: 0/0
  3430 ;; Data sizes:     COMMON   BANK0   BANK1
  3431 ;;      Params:         0       0       0
  3432 ;;      Locals:         0       0       0
  3433 ;;      Temps:          0       0       0
  3434 ;;      Totals:         0       0       0
  3435 ;;Total ram usage:        0 bytes
  3436 ;; Hardware stack levels used:    1
  3437 ;; Hardware stack levels required when called:    6
  3438 ;; This function calls:
  3439 ;;		_ADC_Initialize
  3440 ;;		_EUSART_Initialize
  3441 ;;		_OSCILLATOR_Initialize
  3442 ;;		_PIN_MANAGER_Initialize
  3443 ;;		_TMR1_Initialize
  3444 ;;		_WDT_Initialize
  3445 ;; This function is called by:
  3446 ;;		_main
  3447 ;; This function uses a non-reentrant model
  3448 ;;
  3449                           
  3450                           
  3451                           ;psect for function _SYSTEM_Initialize
  3452  078B                     _SYSTEM_Initialize:	
  3453                           
  3454                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  3455                           
  3456                           ;incstack = 0
  3457                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3458  078B  258D               	fcall	_PIN_MANAGER_Initialize
  3459                           
  3460                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  3461  078C  2740               	fcall	_OSCILLATOR_Initialize
  3462                           
  3463                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  3464  078D  27DB               	fcall	_WDT_Initialize
  3465                           
  3466                           ;mcc_generated_files/mcc.c: 56:     TMR1_Initialize();
  3467  078E  2696               	fcall	_TMR1_Initialize
  3468                           
  3469                           ;mcc_generated_files/mcc.c: 57:     ADC_Initialize();
  3470  078F  2754               	fcall	_ADC_Initialize
  3471                           
  3472                           ;mcc_generated_files/mcc.c: 58:     EUSART_Initialize();
  3473  0790  2500               	fcall	_EUSART_Initialize
  3474  0791  0008               	return
  3475  0792                     __end_of_SYSTEM_Initialize:	
  3476                           
  3477                           	psect	text9
  3478  07DB                     __ptext9:	
  3479 ;; *************** function _WDT_Initialize *****************
  3480 ;; Defined at:
  3481 ;;		line 75 in file "mcc_generated_files/mcc.c"
  3482 ;; Parameters:    Size  Location     Type
  3483 ;;		None
  3484 ;; Auto vars:     Size  Location     Type
  3485 ;;		None
  3486 ;; Return value:  Size  Location     Type
  3487 ;;                  1    wreg      void 
  3488 ;; Registers used:
  3489 ;;		wreg
  3490 ;; Tracked objects:
  3491 ;;		On entry : 0/0
  3492 ;;		On exit  : 0/0
  3493 ;;		Unchanged: 0/0
  3494 ;; Data sizes:     COMMON   BANK0   BANK1
  3495 ;;      Params:         0       0       0
  3496 ;;      Locals:         0       0       0
  3497 ;;      Temps:          0       0       0
  3498 ;;      Totals:         0       0       0
  3499 ;;Total ram usage:        0 bytes
  3500 ;; Hardware stack levels used:    1
  3501 ;; Hardware stack levels required when called:    4
  3502 ;; This function calls:
  3503 ;;		Nothing
  3504 ;; This function is called by:
  3505 ;;		_SYSTEM_Initialize
  3506 ;; This function uses a non-reentrant model
  3507 ;;
  3508                           
  3509                           
  3510                           ;psect for function _WDT_Initialize
  3511  07DB                     _WDT_Initialize:	
  3512                           
  3513                           ;mcc_generated_files/mcc.c: 78:     WDTCON = 0x16;
  3514                           
  3515                           ;incstack = 0
  3516                           ; Regs used in _WDT_Initialize: [wreg]
  3517  07DB  3016               	movlw	22
  3518  07DC  0021               	movlb	1	; select bank1
  3519  07DD  0097               	movwf	23	;volatile
  3520  07DE  0008               	return
  3521  07DF                     __end_of_WDT_Initialize:	
  3522                           
  3523                           	psect	text10
  3524  0696                     __ptext10:	
  3525 ;; *************** function _TMR1_Initialize *****************
  3526 ;; Defined at:
  3527 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  3528 ;; Parameters:    Size  Location     Type
  3529 ;;		None
  3530 ;; Auto vars:     Size  Location     Type
  3531 ;;		None
  3532 ;; Return value:  Size  Location     Type
  3533 ;;                  1    wreg      void 
  3534 ;; Registers used:
  3535 ;;		wreg, status,2, status,0, pclath, cstack
  3536 ;; Tracked objects:
  3537 ;;		On entry : 0/0
  3538 ;;		On exit  : 0/0
  3539 ;;		Unchanged: 0/0
  3540 ;; Data sizes:     COMMON   BANK0   BANK1
  3541 ;;      Params:         0       0       0
  3542 ;;      Locals:         0       0       0
  3543 ;;      Temps:          0       0       0
  3544 ;;      Totals:         0       0       0
  3545 ;;Total ram usage:        0 bytes
  3546 ;; Hardware stack levels used:    1
  3547 ;; Hardware stack levels required when called:    5
  3548 ;; This function calls:
  3549 ;;		_TMR1_SetInterruptHandler
  3550 ;; This function is called by:
  3551 ;;		_SYSTEM_Initialize
  3552 ;; This function uses a non-reentrant model
  3553 ;;
  3554                           
  3555                           
  3556                           ;psect for function _TMR1_Initialize
  3557  0696                     _TMR1_Initialize:	
  3558                           
  3559                           ;mcc_generated_files/tmr1.c: 69:     T1GCON = 0x00;
  3560                           
  3561                           ;incstack = 0
  3562                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3563  0696  0020               	movlb	0	; select bank0
  3564  0697  0199               	clrf	25	;volatile
  3565                           
  3566                           ;mcc_generated_files/tmr1.c: 72:     TMR1H = 0x63;
  3567  0698  3063               	movlw	99
  3568  0699  0097               	movwf	23	;volatile
  3569                           
  3570                           ;mcc_generated_files/tmr1.c: 75:     TMR1L = 0xC0;
  3571  069A  30C0               	movlw	192
  3572  069B  0096               	movwf	22	;volatile
  3573                           
  3574                           ;mcc_generated_files/tmr1.c: 78:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  3575  069C  0817               	movf	23,w	;volatile
  3576  069D  00DB               	movwf	_timer1ReloadVal+1	;volatile
  3577  069E  0816               	movf	22,w	;volatile
  3578  069F  00DA               	movwf	_timer1ReloadVal	;volatile
  3579                           
  3580                           ;mcc_generated_files/tmr1.c: 81:     PIR1bits.TMR1IF = 0;
  3581  06A0  1011               	bcf	17,0	;volatile
  3582                           
  3583                           ;mcc_generated_files/tmr1.c: 84:     PIE1bits.TMR1IE = 1;
  3584  06A1  0021               	movlb	1	; select bank1
  3585  06A2  1411               	bsf	17,0	;volatile
  3586                           
  3587                           ;mcc_generated_files/tmr1.c: 87:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
  3588  06A3  30FE               	movlw	low _TMR1_DefaultInterruptHandler
  3589  06A4  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  3590  06A5  3007               	movlw	high _TMR1_DefaultInterruptHandler
  3591  06A6  00F4               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  3592  06A7  279E               	fcall	_TMR1_SetInterruptHandler
  3593                           
  3594                           ;mcc_generated_files/tmr1.c: 90:     T1CON = 0x11;
  3595  06A8  3011               	movlw	17
  3596  06A9  0020               	movlb	0	; select bank0
  3597  06AA  0098               	movwf	24	;volatile
  3598  06AB  0008               	return
  3599  06AC                     __end_of_TMR1_Initialize:	
  3600                           
  3601                           	psect	text11
  3602  079E                     __ptext11:	
  3603 ;; *************** function _TMR1_SetInterruptHandler *****************
  3604 ;; Defined at:
  3605 ;;		line 171 in file "mcc_generated_files/tmr1.c"
  3606 ;; Parameters:    Size  Location     Type
  3607 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  3608 ;;		 -> _TMR1_Ready(1), TMR1_DefaultInterruptHandler(1), 
  3609 ;; Auto vars:     Size  Location     Type
  3610 ;;		None
  3611 ;; Return value:  Size  Location     Type
  3612 ;;                  1    wreg      void 
  3613 ;; Registers used:
  3614 ;;		wreg
  3615 ;; Tracked objects:
  3616 ;;		On entry : 0/0
  3617 ;;		On exit  : 0/0
  3618 ;;		Unchanged: 0/0
  3619 ;; Data sizes:     COMMON   BANK0   BANK1
  3620 ;;      Params:         2       0       0
  3621 ;;      Locals:         0       0       0
  3622 ;;      Temps:          0       0       0
  3623 ;;      Totals:         2       0       0
  3624 ;;Total ram usage:        2 bytes
  3625 ;; Hardware stack levels used:    1
  3626 ;; Hardware stack levels required when called:    4
  3627 ;; This function calls:
  3628 ;;		Nothing
  3629 ;; This function is called by:
  3630 ;;		_TMR1_Initialize
  3631 ;;		_logger_initialize
  3632 ;; This function uses a non-reentrant model
  3633 ;;
  3634                           
  3635                           
  3636                           ;psect for function _TMR1_SetInterruptHandler
  3637  079E                     _TMR1_SetInterruptHandler:	
  3638                           
  3639                           ;mcc_generated_files/tmr1.c: 172:     TMR1_InterruptHandler = InterruptHandler;
  3640                           
  3641                           ;incstack = 0
  3642                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  3643  079E  0874               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  3644  079F  0020               	movlb	0	; select bank0
  3645  07A0  00D9               	movwf	_TMR1_InterruptHandler+1
  3646  07A1  0873               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  3647  07A2  00D8               	movwf	_TMR1_InterruptHandler
  3648  07A3  0008               	return
  3649  07A4                     __end_of_TMR1_SetInterruptHandler:	
  3650                           
  3651                           	psect	text12
  3652  058D                     __ptext12:	
  3653 ;; *************** function _PIN_MANAGER_Initialize *****************
  3654 ;; Defined at:
  3655 ;;		line 59 in file "mcc_generated_files/pin_manager.c"
  3656 ;; Parameters:    Size  Location     Type
  3657 ;;		None
  3658 ;; Auto vars:     Size  Location     Type
  3659 ;;		None
  3660 ;; Return value:  Size  Location     Type
  3661 ;;                  1    wreg      void 
  3662 ;; Registers used:
  3663 ;;		wreg, status,2, status,0, pclath, cstack
  3664 ;; Tracked objects:
  3665 ;;		On entry : 0/0
  3666 ;;		On exit  : 0/0
  3667 ;;		Unchanged: 0/0
  3668 ;; Data sizes:     COMMON   BANK0   BANK1
  3669 ;;      Params:         0       0       0
  3670 ;;      Locals:         0       0       0
  3671 ;;      Temps:          0       0       0
  3672 ;;      Totals:         0       0       0
  3673 ;;Total ram usage:        0 bytes
  3674 ;; Hardware stack levels used:    1
  3675 ;; Hardware stack levels required when called:    5
  3676 ;; This function calls:
  3677 ;;		_IOCAF4_SetInterruptHandler
  3678 ;; This function is called by:
  3679 ;;		_SYSTEM_Initialize
  3680 ;; This function uses a non-reentrant model
  3681 ;;
  3682                           
  3683                           
  3684                           ;psect for function _PIN_MANAGER_Initialize
  3685  058D                     _PIN_MANAGER_Initialize:	
  3686                           
  3687                           ;mcc_generated_files/pin_manager.c: 64:     LATA = 0x00;
  3688                           
  3689                           ;incstack = 0
  3690                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3691  058D  0022               	movlb	2	; select bank2
  3692  058E  018C               	clrf	12	;volatile
  3693                           
  3694                           ;mcc_generated_files/pin_manager.c: 65:     LATC = 0x00;
  3695  058F  018E               	clrf	14	;volatile
  3696                           
  3697                           ;mcc_generated_files/pin_manager.c: 70:     TRISA = 0x1F;
  3698  0590  301F               	movlw	31
  3699  0591  0021               	movlb	1	; select bank1
  3700  0592  008C               	movwf	12	;volatile
  3701                           
  3702                           ;mcc_generated_files/pin_manager.c: 71:     TRISC = 0x2F;
  3703  0593  302F               	movlw	47
  3704  0594  008E               	movwf	14	;volatile
  3705                           
  3706                           ;mcc_generated_files/pin_manager.c: 76:     ANSELC = 0x0F;
  3707  0595  300F               	movlw	15
  3708  0596  0023               	movlb	3	; select bank3
  3709  0597  008E               	movwf	14	;volatile
  3710                           
  3711                           ;mcc_generated_files/pin_manager.c: 77:     ANSELA = 0x07;
  3712  0598  3007               	movlw	7
  3713  0599  008C               	movwf	12	;volatile
  3714                           
  3715                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x10;
  3716  059A  3010               	movlw	16
  3717  059B  0024               	movlb	4	; select bank4
  3718  059C  008C               	movwf	12	;volatile
  3719                           
  3720                           ;mcc_generated_files/pin_manager.c: 83:     WPUC = 0x00;
  3721  059D  018E               	clrf	14	;volatile
  3722                           
  3723                           ;mcc_generated_files/pin_manager.c: 84:     OPTION_REGbits.nWPUEN = 0;
  3724  059E  0021               	movlb	1	; select bank1
  3725  059F  1395               	bcf	21,7	;volatile
  3726                           
  3727                           ;mcc_generated_files/pin_manager.c: 93:     APFCON = 0x00;
  3728  05A0  0022               	movlb	2	; select bank2
  3729  05A1  019D               	clrf	29	;volatile
  3730                           
  3731                           ;mcc_generated_files/pin_manager.c: 99:     IOCAFbits.IOCAF4 = 0;
  3732  05A2  0027               	movlb	7	; select bank7
  3733  05A3  1213               	bcf	19,4	;volatile
  3734                           
  3735                           ;mcc_generated_files/pin_manager.c: 101:     IOCANbits.IOCAN4 = 1;
  3736  05A4  1612               	bsf	18,4	;volatile
  3737                           
  3738                           ;mcc_generated_files/pin_manager.c: 103:     IOCAPbits.IOCAP4 = 1;
  3739  05A5  1611               	bsf	17,4	;volatile
  3740                           
  3741                           ;mcc_generated_files/pin_manager.c: 108:     IOCAF4_SetInterruptHandler(IOCAF4_DefaultIn
      +                          terruptHandler);
  3742  05A6  30FF               	movlw	low _IOCAF4_DefaultInterruptHandler
  3743  05A7  00F3               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler
  3744  05A8  3007               	movlw	high _IOCAF4_DefaultInterruptHandler
  3745  05A9  00F4               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler+1
  3746  05AA  27A4               	fcall	_IOCAF4_SetInterruptHandler
  3747                           
  3748                           ;mcc_generated_files/pin_manager.c: 111:     INTCONbits.IOCIE = 1;
  3749  05AB  158B               	bsf	11,3	;volatile
  3750  05AC  0008               	return
  3751  05AD                     __end_of_PIN_MANAGER_Initialize:	
  3752                           
  3753                           	psect	text13
  3754  07A4                     __ptext13:	
  3755 ;; *************** function _IOCAF4_SetInterruptHandler *****************
  3756 ;; Defined at:
  3757 ;;		line 142 in file "mcc_generated_files/pin_manager.c"
  3758 ;; Parameters:    Size  Location     Type
  3759 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  3760 ;;		 -> _IOC_Ready(1), IOCAF4_DefaultInterruptHandler(1), 
  3761 ;; Auto vars:     Size  Location     Type
  3762 ;;		None
  3763 ;; Return value:  Size  Location     Type
  3764 ;;                  1    wreg      void 
  3765 ;; Registers used:
  3766 ;;		wreg
  3767 ;; Tracked objects:
  3768 ;;		On entry : 0/0
  3769 ;;		On exit  : 0/0
  3770 ;;		Unchanged: 0/0
  3771 ;; Data sizes:     COMMON   BANK0   BANK1
  3772 ;;      Params:         2       0       0
  3773 ;;      Locals:         0       0       0
  3774 ;;      Temps:          0       0       0
  3775 ;;      Totals:         2       0       0
  3776 ;;Total ram usage:        2 bytes
  3777 ;; Hardware stack levels used:    1
  3778 ;; Hardware stack levels required when called:    4
  3779 ;; This function calls:
  3780 ;;		Nothing
  3781 ;; This function is called by:
  3782 ;;		_PIN_MANAGER_Initialize
  3783 ;;		_logger_initialize
  3784 ;; This function uses a non-reentrant model
  3785 ;;
  3786                           
  3787                           
  3788                           ;psect for function _IOCAF4_SetInterruptHandler
  3789  07A4                     _IOCAF4_SetInterruptHandler:	
  3790                           
  3791                           ;mcc_generated_files/pin_manager.c: 143:     IOCAF4_InterruptHandler = InterruptHandler;
  3792                           
  3793                           ;incstack = 0
  3794                           ; Regs used in _IOCAF4_SetInterruptHandler: [wreg]
  3795  07A4  0874               	movf	IOCAF4_SetInterruptHandler@InterruptHandler+1,w
  3796  07A5  0020               	movlb	0	; select bank0
  3797  07A6  00EF               	movwf	_IOCAF4_InterruptHandler+1
  3798  07A7  0873               	movf	IOCAF4_SetInterruptHandler@InterruptHandler,w
  3799  07A8  00EE               	movwf	_IOCAF4_InterruptHandler
  3800  07A9  0008               	return
  3801  07AA                     __end_of_IOCAF4_SetInterruptHandler:	
  3802                           
  3803                           	psect	text14
  3804  0740                     __ptext14:	
  3805 ;; *************** function _OSCILLATOR_Initialize *****************
  3806 ;; Defined at:
  3807 ;;		line 61 in file "mcc_generated_files/mcc.c"
  3808 ;; Parameters:    Size  Location     Type
  3809 ;;		None
  3810 ;; Auto vars:     Size  Location     Type
  3811 ;;		None
  3812 ;; Return value:  Size  Location     Type
  3813 ;;                  1    wreg      void 
  3814 ;; Registers used:
  3815 ;;		wreg, status,2
  3816 ;; Tracked objects:
  3817 ;;		On entry : 0/0
  3818 ;;		On exit  : 0/0
  3819 ;;		Unchanged: 0/0
  3820 ;; Data sizes:     COMMON   BANK0   BANK1
  3821 ;;      Params:         0       0       0
  3822 ;;      Locals:         0       0       0
  3823 ;;      Temps:          0       0       0
  3824 ;;      Totals:         0       0       0
  3825 ;;Total ram usage:        0 bytes
  3826 ;; Hardware stack levels used:    1
  3827 ;; Hardware stack levels required when called:    4
  3828 ;; This function calls:
  3829 ;;		Nothing
  3830 ;; This function is called by:
  3831 ;;		_SYSTEM_Initialize
  3832 ;; This function uses a non-reentrant model
  3833 ;;
  3834                           
  3835                           
  3836                           ;psect for function _OSCILLATOR_Initialize
  3837  0740                     _OSCILLATOR_Initialize:	
  3838                           
  3839                           ;mcc_generated_files/mcc.c: 64:     OSCCON = 0x70;
  3840                           
  3841                           ;incstack = 0
  3842                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3843  0740  3070               	movlw	112
  3844  0741  0021               	movlb	1	; select bank1
  3845  0742  0099               	movwf	25	;volatile
  3846                           
  3847                           ;mcc_generated_files/mcc.c: 66:     OSCTUNE = 0x00;
  3848  0743  0198               	clrf	24	;volatile
  3849                           
  3850                           ;mcc_generated_files/mcc.c: 68:     BORCON = 0x00;
  3851  0744  0022               	movlb	2	; select bank2
  3852  0745  0196               	clrf	22	;volatile
  3853  0746                     l211:	
  3854                           ;mcc_generated_files/mcc.c: 71:     {;mcc_generated_files/mcc.c: 72:     }
  3855                           
  3856                           ;mcc_generated_files/mcc.c: 70:     while(PLLR == 0)
  3857                           
  3858                           
  3859                           ;mcc_generated_files/mcc.c: 70:     while(PLLR == 0)
  3860  0746  0021               	movlb	1	; select bank1
  3861  0747  1B1A               	btfsc	26,6	;volatile
  3862  0748  0008               	return
  3863  0749  2F46               	goto	l211
  3864  074A                     __end_of_OSCILLATOR_Initialize:	
  3865                           
  3866                           	psect	text15
  3867  0500                     __ptext15:	
  3868 ;; *************** function _EUSART_Initialize *****************
  3869 ;; Defined at:
  3870 ;;		line 75 in file "mcc_generated_files/eusart.c"
  3871 ;; Parameters:    Size  Location     Type
  3872 ;;		None
  3873 ;; Auto vars:     Size  Location     Type
  3874 ;;		None
  3875 ;; Return value:  Size  Location     Type
  3876 ;;                  1    wreg      void 
  3877 ;; Registers used:
  3878 ;;		wreg, status,2, status,0, pclath, cstack
  3879 ;; Tracked objects:
  3880 ;;		On entry : 0/0
  3881 ;;		On exit  : 0/0
  3882 ;;		Unchanged: 0/0
  3883 ;; Data sizes:     COMMON   BANK0   BANK1
  3884 ;;      Params:         0       0       0
  3885 ;;      Locals:         0       0       0
  3886 ;;      Temps:          1       0       0
  3887 ;;      Totals:         1       0       0
  3888 ;;Total ram usage:        1 bytes
  3889 ;; Hardware stack levels used:    1
  3890 ;; Hardware stack levels required when called:    5
  3891 ;; This function calls:
  3892 ;;		_EUSART_SetRxInterruptHandler
  3893 ;;		_EUSART_SetTxInterruptHandler
  3894 ;; This function is called by:
  3895 ;;		_SYSTEM_Initialize
  3896 ;; This function uses a non-reentrant model
  3897 ;;
  3898                           
  3899                           
  3900                           ;psect for function _EUSART_Initialize
  3901  0500                     _EUSART_Initialize:	
  3902                           
  3903                           ;mcc_generated_files/eusart.c: 78:     PIE1bits.RCIE = 0;
  3904                           
  3905                           ;incstack = 0
  3906                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3907  0500  0021               	movlb	1	; select bank1
  3908  0501  1291               	bcf	17,5	;volatile
  3909                           
  3910                           ;mcc_generated_files/eusart.c: 79:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  3911  0502  307B               	movlw	low _EUSART_Receive_ISR
  3912  0503  00F3               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  3913  0504  3006               	movlw	high _EUSART_Receive_ISR
  3914  0505  00F4               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  3915  0506  27B0               	fcall	_EUSART_SetRxInterruptHandler
  3916                           
  3917                           ;mcc_generated_files/eusart.c: 80:     PIE1bits.TXIE = 0;
  3918  0507  0021               	movlb	1	; select bank1
  3919  0508  1211               	bcf	17,4	;volatile
  3920                           
  3921                           ;mcc_generated_files/eusart.c: 81:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  3922  0509  3043               	movlw	low _EUSART_Transmit_ISR
  3923  050A  00F3               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
  3924  050B  3006               	movlw	high _EUSART_Transmit_ISR
  3925  050C  00F4               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
  3926  050D  27AA               	fcall	_EUSART_SetTxInterruptHandler
  3927                           
  3928                           ;mcc_generated_files/eusart.c: 85:     BAUDCON = 0x08;
  3929  050E  3008               	movlw	8
  3930  050F  0023               	movlb	3	; select bank3
  3931  0510  009F               	movwf	31	;volatile
  3932                           
  3933                           ;mcc_generated_files/eusart.c: 88:     RCSTA = 0x90;
  3934  0511  3090               	movlw	144
  3935  0512  009D               	movwf	29	;volatile
  3936                           
  3937                           ;mcc_generated_files/eusart.c: 91:     TXSTA = 0x24;
  3938  0513  3024               	movlw	36
  3939  0514  009E               	movwf	30	;volatile
  3940                           
  3941                           ;mcc_generated_files/eusart.c: 94:     SPBRGL = 0x44;
  3942  0515  3044               	movlw	68
  3943  0516  009B               	movwf	27	;volatile
  3944                           
  3945                           ;mcc_generated_files/eusart.c: 97:     SPBRGH = 0x00;
  3946  0517  019C               	clrf	28	;volatile
  3947                           
  3948                           ;mcc_generated_files/eusart.c: 101:     eusartTxHead = 0;
  3949  0518  01FA               	clrf	_eusartTxHead	;volatile
  3950                           
  3951                           ;mcc_generated_files/eusart.c: 102:     eusartTxTail = 0;
  3952  0519  0020               	movlb	0	; select bank0
  3953  051A  01EC               	clrf	_eusartTxTail	;volatile
  3954                           
  3955                           ;mcc_generated_files/eusart.c: 103:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  3956  051B  300A               	movlw	10
  3957  051C  00F5               	movwf	??_EUSART_Initialize
  3958  051D  0875               	movf	??_EUSART_Initialize,w
  3959  051E  00F9               	movwf	_eusartTxBufferRemaining	;volatile
  3960                           
  3961                           ;mcc_generated_files/eusart.c: 105:     eusartRxHead = 0;
  3962  051F  01EB               	clrf	_eusartRxHead	;volatile
  3963                           
  3964                           ;mcc_generated_files/eusart.c: 106:     eusartRxTail = 0;
  3965  0520  01EA               	clrf	_eusartRxTail	;volatile
  3966                           
  3967                           ;mcc_generated_files/eusart.c: 107:     eusartRxCount = 0;
  3968  0521  01E9               	clrf	_eusartRxCount	;volatile
  3969                           
  3970                           ;mcc_generated_files/eusart.c: 110:     PIE1bits.RCIE = 1;
  3971  0522  0021               	movlb	1	; select bank1
  3972  0523  1691               	bsf	17,5	;volatile
  3973  0524  0008               	return
  3974  0525                     __end_of_EUSART_Initialize:	
  3975                           
  3976                           	psect	text16
  3977  07AA                     __ptext16:	
  3978 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  3979 ;; Defined at:
  3980 ;;		line 211 in file "mcc_generated_files/eusart.c"
  3981 ;; Parameters:    Size  Location     Type
  3982 ;;  interruptHan    2    3[COMMON] PTR FTN()void 
  3983 ;;		 -> EUSART_Transmit_ISR(1), 
  3984 ;; Auto vars:     Size  Location     Type
  3985 ;;		None
  3986 ;; Return value:  Size  Location     Type
  3987 ;;                  1    wreg      void 
  3988 ;; Registers used:
  3989 ;;		wreg
  3990 ;; Tracked objects:
  3991 ;;		On entry : 0/0
  3992 ;;		On exit  : 0/0
  3993 ;;		Unchanged: 0/0
  3994 ;; Data sizes:     COMMON   BANK0   BANK1
  3995 ;;      Params:         2       0       0
  3996 ;;      Locals:         0       0       0
  3997 ;;      Temps:          0       0       0
  3998 ;;      Totals:         2       0       0
  3999 ;;Total ram usage:        2 bytes
  4000 ;; Hardware stack levels used:    1
  4001 ;; Hardware stack levels required when called:    4
  4002 ;; This function calls:
  4003 ;;		Nothing
  4004 ;; This function is called by:
  4005 ;;		_EUSART_Initialize
  4006 ;; This function uses a non-reentrant model
  4007 ;;
  4008                           
  4009                           
  4010                           ;psect for function _EUSART_SetTxInterruptHandler
  4011  07AA                     _EUSART_SetTxInterruptHandler:	
  4012                           
  4013                           ;mcc_generated_files/eusart.c: 212:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  4014                           
  4015                           ;incstack = 0
  4016                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  4017  07AA  0874               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
  4018  07AB  0020               	movlb	0	; select bank0
  4019  07AC  00E1               	movwf	_EUSART_TxDefaultInterruptHandler+1
  4020  07AD  0873               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
  4021  07AE  00E0               	movwf	_EUSART_TxDefaultInterruptHandler
  4022  07AF  0008               	return
  4023  07B0                     __end_of_EUSART_SetTxInterruptHandler:	
  4024                           
  4025                           	psect	text17
  4026  07B0                     __ptext17:	
  4027 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  4028 ;; Defined at:
  4029 ;;		line 215 in file "mcc_generated_files/eusart.c"
  4030 ;; Parameters:    Size  Location     Type
  4031 ;;  interruptHan    2    3[COMMON] PTR FTN()void 
  4032 ;;		 -> EUSART_Receive_ISR(1), 
  4033 ;; Auto vars:     Size  Location     Type
  4034 ;;		None
  4035 ;; Return value:  Size  Location     Type
  4036 ;;                  1    wreg      void 
  4037 ;; Registers used:
  4038 ;;		wreg
  4039 ;; Tracked objects:
  4040 ;;		On entry : 0/0
  4041 ;;		On exit  : 0/0
  4042 ;;		Unchanged: 0/0
  4043 ;; Data sizes:     COMMON   BANK0   BANK1
  4044 ;;      Params:         2       0       0
  4045 ;;      Locals:         0       0       0
  4046 ;;      Temps:          0       0       0
  4047 ;;      Totals:         2       0       0
  4048 ;;Total ram usage:        2 bytes
  4049 ;; Hardware stack levels used:    1
  4050 ;; Hardware stack levels required when called:    4
  4051 ;; This function calls:
  4052 ;;		Nothing
  4053 ;; This function is called by:
  4054 ;;		_EUSART_Initialize
  4055 ;; This function uses a non-reentrant model
  4056 ;;
  4057                           
  4058                           
  4059                           ;psect for function _EUSART_SetRxInterruptHandler
  4060  07B0                     _EUSART_SetRxInterruptHandler:	
  4061                           
  4062                           ;mcc_generated_files/eusart.c: 216:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  4063                           
  4064                           ;incstack = 0
  4065                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  4066  07B0  0874               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  4067  07B1  0020               	movlb	0	; select bank0
  4068  07B2  00DF               	movwf	_EUSART_RxDefaultInterruptHandler+1
  4069  07B3  0873               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  4070  07B4  00DE               	movwf	_EUSART_RxDefaultInterruptHandler
  4071  07B5  0008               	return
  4072  07B6                     __end_of_EUSART_SetRxInterruptHandler:	
  4073                           
  4074                           	psect	text18
  4075  0754                     __ptext18:	
  4076 ;; *************** function _ADC_Initialize *****************
  4077 ;; Defined at:
  4078 ;;		line 65 in file "mcc_generated_files/adc.c"
  4079 ;; Parameters:    Size  Location     Type
  4080 ;;		None
  4081 ;; Auto vars:     Size  Location     Type
  4082 ;;		None
  4083 ;; Return value:  Size  Location     Type
  4084 ;;                  1    wreg      void 
  4085 ;; Registers used:
  4086 ;;		wreg, status,2
  4087 ;; Tracked objects:
  4088 ;;		On entry : 0/0
  4089 ;;		On exit  : 0/0
  4090 ;;		Unchanged: 0/0
  4091 ;; Data sizes:     COMMON   BANK0   BANK1
  4092 ;;      Params:         0       0       0
  4093 ;;      Locals:         0       0       0
  4094 ;;      Temps:          0       0       0
  4095 ;;      Totals:         0       0       0
  4096 ;;Total ram usage:        0 bytes
  4097 ;; Hardware stack levels used:    1
  4098 ;; Hardware stack levels required when called:    4
  4099 ;; This function calls:
  4100 ;;		Nothing
  4101 ;; This function is called by:
  4102 ;;		_SYSTEM_Initialize
  4103 ;; This function uses a non-reentrant model
  4104 ;;
  4105                           
  4106                           
  4107                           ;psect for function _ADC_Initialize
  4108  0754                     _ADC_Initialize:	
  4109                           
  4110                           ;mcc_generated_files/adc.c: 70:     ADCON0 = 0x01;
  4111                           
  4112                           ;incstack = 0
  4113                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  4114  0754  3001               	movlw	1
  4115  0755  0021               	movlb	1	; select bank1
  4116  0756  009D               	movwf	29	;volatile
  4117                           
  4118                           ;mcc_generated_files/adc.c: 73:     ADCON1 = 0xF0;
  4119  0757  30F0               	movlw	240
  4120  0758  009E               	movwf	30	;volatile
  4121                           
  4122                           ;mcc_generated_files/adc.c: 76:     ADRESL = 0x00;
  4123  0759  019B               	clrf	27	;volatile
  4124                           
  4125                           ;mcc_generated_files/adc.c: 79:     ADRESH = 0x00;
  4126  075A  019C               	clrf	28	;volatile
  4127                           
  4128                           ;mcc_generated_files/adc.c: 82:     PIE1bits.ADIE = 1;
  4129  075B  1711               	bsf	17,6	;volatile
  4130  075C  0008               	return
  4131  075D                     __end_of_ADC_Initialize:	
  4132                           
  4133                           	psect	text19
  4134  0489                     __ptext19:	
  4135 ;; *************** function _ESP_message_handler *****************
  4136 ;; Defined at:
  4137 ;;		line 152 in file "esp1.c"
  4138 ;; Parameters:    Size  Location     Type
  4139 ;;		None
  4140 ;; Auto vars:     Size  Location     Type
  4141 ;;  index           2    0        PTR unsigned char 
  4142 ;;  ret             1   37[BANK0 ] unsigned char 
  4143 ;;  aux             1    0        unsigned char 
  4144 ;; Return value:  Size  Location     Type
  4145 ;;                  1    wreg      void 
  4146 ;; Registers used:
  4147 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4148 ;; Tracked objects:
  4149 ;;		On entry : 0/0
  4150 ;;		On exit  : 0/0
  4151 ;;		Unchanged: 0/0
  4152 ;; Data sizes:     COMMON   BANK0   BANK1
  4153 ;;      Params:         0       0       0
  4154 ;;      Locals:         0       1       0
  4155 ;;      Temps:          0       2       0
  4156 ;;      Totals:         0       3       0
  4157 ;;Total ram usage:        3 bytes
  4158 ;; Hardware stack levels used:    1
  4159 ;; Hardware stack levels required when called:   13
  4160 ;; This function calls:
  4161 ;;		_ESP_process_rx_data
  4162 ;;		_ESP_read
  4163 ;; This function is called by:
  4164 ;;		_main
  4165 ;; This function uses a non-reentrant model
  4166 ;;
  4167                           
  4168                           
  4169                           ;psect for function _ESP_message_handler
  4170  0489                     _ESP_message_handler:	
  4171                           
  4172                           ;esp1.c: 154:     unsigned char ret,aux;;esp1.c: 155:     char *index;;esp1.c: 157:     
      +                          ret = ESP_read();
  4173                           
  4174                           ;incstack = 0
  4175                           ; Regs used in _ESP_message_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4176  0489  242E               	fcall	_ESP_read
  4177  048A  0020               	movlb	0	; select bank0
  4178  048B  00C3               	movwf	??_ESP_message_handler
  4179  048C  0843               	movf	??_ESP_message_handler,w
  4180  048D  00C5               	movwf	ESP_message_handler@ret
  4181                           
  4182                           ;esp1.c: 159:     switch (ret) {
  4183  048E  2C9A               	goto	l3336
  4184  048F                     l3328:	
  4185                           ;esp1.c: 163:         case ESP_RX:
  4186                           
  4187                           ;esp1.c: 161:             break;
  4188                           
  4189                           ;esp1.c: 160:         case ESP_OTHER:
  4190                           
  4191                           
  4192                           ;esp1.c: 164:             ESP_process_rx_data();
  4193  048F  2525               	fcall	_ESP_process_rx_data
  4194                           
  4195                           ;esp1.c: 165:             break;
  4196  0490  0008               	return
  4197  0491                     l3330:	
  4198                           ;esp1.c: 167:         case ESP_CONNECT:
  4199                           
  4200                           
  4201                           ;esp1.c: 168:             esp_channel = esp_read_data[0];
  4202  0491  0021               	movlb	1	; select bank1
  4203  0492  082C               	movf	_esp_read_data^(0+128),w	;volatile
  4204  0493  0020               	movlb	0	; select bank0
  4205  0494  00C3               	movwf	??_ESP_message_handler
  4206  0495  0843               	movf	??_ESP_message_handler,w
  4207  0496  00E6               	movwf	_esp_channel	;volatile
  4208                           
  4209                           ;esp1.c: 169:             break;
  4210  0497  0008               	return
  4211  0498                     l3332:	
  4212                           ;esp1.c: 171:         case ESP_CLOSED:
  4213                           
  4214                           
  4215                           ;esp1.c: 172:             esp_channel = 0;
  4216  0498  01E6               	clrf	_esp_channel	;volatile
  4217                           
  4218                           ;esp1.c: 177:     }
  4219                           
  4220                           ;esp1.c: 176:             break;
  4221                           
  4222                           ;esp1.c: 175:         default:
  4223                           
  4224                           ;esp1.c: 173:             break;
  4225  0499  0008               	return
  4226  049A                     l3336:	
  4227  049A  0845               	movf	ESP_message_handler@ret,w
  4228  049B  00C3               	movwf	??_ESP_message_handler
  4229  049C  01C4               	clrf	??_ESP_message_handler+1
  4230                           
  4231                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4232                           ; Switch size 1, requested type "space"
  4233                           ; Number of cases is 1, Range of values is 0 to 0
  4234                           ; switch strategies available:
  4235                           ; Name         Instructions Cycles
  4236                           ; simple_byte            4     3 (average)
  4237                           ; direct_byte            8     6 (fixed)
  4238                           ; jumptable            260     6 (fixed)
  4239                           ;	Chosen strategy is simple_byte
  4240  049D  0844               	movf	??_ESP_message_handler+1,w
  4241  049E  3A00               	xorlw	0	; case 0
  4242  049F  1903               	skipnz
  4243  04A0  2CA2               	goto	l3442
  4244  04A1  2CB0               	goto	l479
  4245  04A2                     l3442:	
  4246                           
  4247                           ; Switch size 1, requested type "space"
  4248                           ; Number of cases is 4, Range of values is 0 to 8
  4249                           ; switch strategies available:
  4250                           ; Name         Instructions Cycles
  4251                           ; simple_byte           13     7 (average)
  4252                           ; direct_byte           24     6 (fixed)
  4253                           ; jumptable            260     6 (fixed)
  4254                           ;	Chosen strategy is simple_byte
  4255  04A2  0843               	movf	??_ESP_message_handler,w
  4256  04A3  3A00               	xorlw	0	; case 0
  4257  04A4  1903               	skipnz
  4258  04A5  2CB0               	goto	l479
  4259  04A6  3A04               	xorlw	4	; case 4
  4260  04A7  1903               	skipnz
  4261  04A8  2C8F               	goto	l3328
  4262  04A9  3A02               	xorlw	2	; case 6
  4263  04AA  1903               	skipnz
  4264  04AB  2C91               	goto	l3330
  4265  04AC  3A0E               	xorlw	14	; case 8
  4266  04AD  1903               	skipnz
  4267  04AE  2C98               	goto	l3332
  4268  04AF  2CB0               	goto	l479
  4269  04B0                     l479:	
  4270  04B0  0008               	return
  4271  04B1                     __end_of_ESP_message_handler:	
  4272                           
  4273                           	psect	text20
  4274  0525                     __ptext20:	
  4275 ;; *************** function _ESP_process_rx_data *****************
  4276 ;; Defined at:
  4277 ;;		line 137 in file "esp1.c"
  4278 ;; Parameters:    Size  Location     Type
  4279 ;;		None
  4280 ;; Auto vars:     Size  Location     Type
  4281 ;;  aux             1   34[BANK0 ] unsigned char 
  4282 ;;  index           1   33[BANK0 ] PTR unsigned char 
  4283 ;;		 -> NULL(0), esp_read_data(20), 
  4284 ;; Return value:  Size  Location     Type
  4285 ;;                  1    wreg      void 
  4286 ;; Registers used:
  4287 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4288 ;; Tracked objects:
  4289 ;;		On entry : 0/0
  4290 ;;		On exit  : 0/0
  4291 ;;		Unchanged: 0/0
  4292 ;; Data sizes:     COMMON   BANK0   BANK1
  4293 ;;      Params:         0       0       0
  4294 ;;      Locals:         0       2       0
  4295 ;;      Temps:          0       2       0
  4296 ;;      Totals:         0       4       0
  4297 ;;Total ram usage:        4 bytes
  4298 ;; Hardware stack levels used:    1
  4299 ;; Hardware stack levels required when called:   12
  4300 ;; This function calls:
  4301 ;;		Absolute function
  4302 ;;		_ESP_default_application_handler
  4303 ;;		_process_message
  4304 ;;		_strstr
  4305 ;; This function is called by:
  4306 ;;		_ESP_message_handler
  4307 ;; This function uses a non-reentrant model
  4308 ;;
  4309                           
  4310                           
  4311                           ;psect for function _ESP_process_rx_data
  4312  0525                     _ESP_process_rx_data:	
  4313                           
  4314                           ;esp1.c: 139:     char *index;;esp1.c: 140:     unsigned char aux;;esp1.c: 142:     esp_
      +                          channel = esp_read_data[5];
  4315                           
  4316                           ;incstack = 0
  4317                           ; Regs used in _ESP_process_rx_data: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4318  0525  0021               	movlb	1	; select bank1
  4319  0526  0831               	movf	(_esp_read_data^(0+128)+5),w	;volatile
  4320  0527  0020               	movlb	0	; select bank0
  4321  0528  00BF               	movwf	??_ESP_process_rx_data
  4322  0529  083F               	movf	??_ESP_process_rx_data,w
  4323  052A  00E6               	movwf	_esp_channel	;volatile
  4324                           
  4325                           ;esp1.c: 143:     index = strstr(esp_read_data,":");
  4326  052B  30F9               	movlw	low (STR_13| (0+32768))
  4327  052C  00A4               	movwf	strstr@n
  4328  052D  3087               	movlw	high (STR_13| (0+32768))
  4329  052E  00A5               	movwf	strstr@n+1
  4330  052F  30AC               	movlw	(low (_esp_read_data| 0))& (0+255)
  4331  0530  2352               	fcall	_strstr
  4332  0531  0020               	movlb	0	; select bank0
  4333  0532  00BF               	movwf	??_ESP_process_rx_data
  4334  0533  083F               	movf	??_ESP_process_rx_data,w
  4335  0534  00C1               	movwf	ESP_process_rx_data@index
  4336                           
  4337                           ;esp1.c: 144:     aux = *(++index);
  4338  0535  3001               	movlw	1
  4339  0536  00BF               	movwf	??_ESP_process_rx_data
  4340  0537  083F               	movf	??_ESP_process_rx_data,w
  4341  0538  07C1               	addwf	ESP_process_rx_data@index,f
  4342  0539  0841               	movf	ESP_process_rx_data@index,w
  4343  053A  0086               	movwf	6
  4344  053B  0187               	clrf	7
  4345  053C  0801               	movf	1,w
  4346  053D  00C0               	movwf	??_ESP_process_rx_data+1
  4347  053E  0840               	movf	??_ESP_process_rx_data+1,w
  4348  053F  00C2               	movwf	ESP_process_rx_data@aux
  4349                           
  4350                           ;esp1.c: 149:     ESP_external_message_handler(aux);
  4351  0540  0842               	movf	ESP_process_rx_data@aux,w
  4352  0541  00BF               	movwf	??_ESP_process_rx_data
  4353  0542  083F               	movf	??_ESP_process_rx_data,w
  4354  0543  00BC               	movwf	ESP_default_application_handler@data
  4355  0544  0857               	movf	_ESP_external_message_handler+1,w
  4356  0545  008A               	movwf	10
  4357  0546  0856               	movf	_ESP_external_message_handler,w
  4358  0547  000A               	callw
  4359  0548  3185               	pagesel	$
  4360  0549  0008               	return
  4361  054A                     __end_of_ESP_process_rx_data:	
  4362                           
  4363                           	psect	text21
  4364  07FD                     __ptext21:	
  4365 ;; *************** function _ESP_default_application_handler *****************
  4366 ;; Defined at:
  4367 ;;		line 212 in file "esp1.c"
  4368 ;; Parameters:    Size  Location     Type
  4369 ;;  data            1   28[BANK0 ] unsigned char 
  4370 ;; Auto vars:     Size  Location     Type
  4371 ;;		None
  4372 ;; Return value:  Size  Location     Type
  4373 ;;                  1    wreg      void 
  4374 ;; Registers used:
  4375 ;;		None
  4376 ;; Tracked objects:
  4377 ;;		On entry : 0/0
  4378 ;;		On exit  : 0/0
  4379 ;;		Unchanged: 0/0
  4380 ;; Data sizes:     COMMON   BANK0   BANK1
  4381 ;;      Params:         0       1       0
  4382 ;;      Locals:         0       0       0
  4383 ;;      Temps:          0       0       0
  4384 ;;      Totals:         0       1       0
  4385 ;;Total ram usage:        1 bytes
  4386 ;; Hardware stack levels used:    1
  4387 ;; Hardware stack levels required when called:    4
  4388 ;; This function calls:
  4389 ;;		Nothing
  4390 ;; This function is called by:
  4391 ;;		_ESP_initialize
  4392 ;;		_ESP_process_rx_data
  4393 ;; This function uses a non-reentrant model
  4394 ;;
  4395                           
  4396                           
  4397                           ;psect for function _ESP_default_application_handler
  4398  07FD                     _ESP_default_application_handler:	
  4399                           
  4400                           ;incstack = 0
  4401                           ; Regs used in _ESP_default_application_handler: []
  4402  07FD  0008               	return
  4403  07FE                     __end_of_ESP_default_application_handler:	
  4404                           
  4405                           	psect	text22
  4406  02C6                     __ptext22:	
  4407 ;; *************** function _process_message *****************
  4408 ;; Defined at:
  4409 ;;		line 45 in file "logger.c"
  4410 ;; Parameters:    Size  Location     Type
  4411 ;;  message         1   28[BANK0 ] unsigned char 
  4412 ;; Auto vars:     Size  Location     Type
  4413 ;;		None
  4414 ;; Return value:  Size  Location     Type
  4415 ;;                  1    wreg      void 
  4416 ;; Registers used:
  4417 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4418 ;; Tracked objects:
  4419 ;;		On entry : 0/0
  4420 ;;		On exit  : 0/0
  4421 ;;		Unchanged: 0/0
  4422 ;; Data sizes:     COMMON   BANK0   BANK1
  4423 ;;      Params:         0       1       0
  4424 ;;      Locals:         0       0       0
  4425 ;;      Temps:          0       2       0
  4426 ;;      Totals:         0       3       0
  4427 ;;Total ram usage:        3 bytes
  4428 ;; Hardware stack levels used:    1
  4429 ;; Hardware stack levels required when called:   11
  4430 ;; This function calls:
  4431 ;;		_ADC_StartConversion
  4432 ;;		_ESP_write
  4433 ;;		_TMR1_StartTimer
  4434 ;;		_TMR1_StopTimer
  4435 ;;		_toggle_format
  4436 ;; This function is called by:
  4437 ;;		_main
  4438 ;;		_logger_initialize
  4439 ;;		_bt_message_handler
  4440 ;;		_ESP_process_rx_data
  4441 ;; This function uses a non-reentrant model
  4442 ;;
  4443                           
  4444                           
  4445                           ;psect for function _process_message
  4446  02C6                     _process_message:	
  4447                           
  4448                           ;logger.c: 45: void process_message(unsigned char message);logger.c: 46: {;logger.c: 49:
      +                               switch (message) {
  4449                           
  4450                           ;incstack = 0
  4451                           ; Regs used in _process_message: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4452  02C6  2AEB               	goto	l3228
  4453  02C7                     l3208:	
  4454                           ;logger.c: 50:         case 't':
  4455                           
  4456                           
  4457                           ;logger.c: 54:             ESP_write("Ok\n",3);
  4458  02C7  30D7               	movlw	low (STR_18| (0+32768))
  4459  02C8  0020               	movlb	0	; select bank0
  4460  02C9  00B3               	movwf	ESP_write@pt
  4461  02CA  3087               	movlw	high (STR_18| (0+32768))
  4462  02CB  00B4               	movwf	ESP_write@pt+1
  4463  02CC  3003               	movlw	3
  4464  02CD  00BD               	movwf	??_process_message
  4465  02CE  083D               	movf	??_process_message,w
  4466  02CF  00B5               	movwf	ESP_write@length
  4467  02D0  20D8               	fcall	_ESP_write
  4468                           
  4469                           ;logger.c: 56:             break;
  4470  02D1  0008               	return
  4471  02D2                     l3210:	
  4472                           ;logger.c: 58:         case 'a':
  4473                           
  4474                           
  4475                           ;logger.c: 60:             ADC_StartConversion();
  4476  02D2  27EB               	fcall	_ADC_StartConversion
  4477                           
  4478                           ;logger.c: 62:             break;
  4479  02D3  0008               	return
  4480  02D4                     l3212:	
  4481                           ;logger.c: 64:         case 'T':
  4482                           
  4483                           
  4484                           ;logger.c: 65:             toggle_format();
  4485  02D4  25CC               	fcall	_toggle_format
  4486                           
  4487                           ;logger.c: 66:             break;
  4488  02D5  0008               	return
  4489  02D6                     l3214:	
  4490                           ;logger.c: 68:         case 's':
  4491                           
  4492                           
  4493                           ;logger.c: 69:             if (TMR1_state == TMR1_RUNNING)
  4494  02D6  0020               	movlb	0	; select bank0
  4495  02D7  0364               	decf	_TMR1_state,w	;volatile
  4496  02D8  1903               	btfsc	3,2
  4497  02D9  0008               	return
  4498                           
  4499                           ;logger.c: 71:             TMR1_StartTimer();
  4500                           
  4501                           ;logger.c: 70:                 return;
  4502  02DA  27E8               	fcall	_TMR1_StartTimer
  4503                           
  4504                           ;logger.c: 72:             TMR1_state = TMR1_RUNNING;
  4505  02DB  3001               	movlw	1
  4506  02DC  0020               	movlb	0	; select bank0
  4507  02DD  00BD               	movwf	??_process_message
  4508  02DE  083D               	movf	??_process_message,w
  4509  02DF  00E4               	movwf	_TMR1_state	;volatile
  4510                           
  4511                           ;logger.c: 74:             break;
  4512  02E0  0008               	return
  4513  02E1                     l3222:	
  4514                           ;logger.c: 76:         case 'S':
  4515                           
  4516                           
  4517                           ;logger.c: 78:             TMR1_StopTimer();
  4518  02E1  27E5               	fcall	_TMR1_StopTimer
  4519                           
  4520                           ;logger.c: 79:             TMR1_state = TMR1_STOP;
  4521  02E2  0020               	movlb	0	; select bank0
  4522  02E3  01E4               	clrf	_TMR1_state	;volatile
  4523                           
  4524                           ;logger.c: 80:             break;
  4525  02E4  0008               	return
  4526  02E5                     l561:	
  4527                           ;logger.c: 84:             do { LATAbits.LATA5 = 0; } while(0);
  4528                           
  4529                           ;logger.c: 82:         case 'o':
  4530                           
  4531  02E5  0022               	movlb	2	; select bank2
  4532  02E6  128C               	bcf	12,5	;volatile
  4533                           
  4534                           ;logger.c: 85:             break;
  4535  02E7  0008               	return
  4536  02E8                     l564:	
  4537                           ;logger.c: 89:             do { LATAbits.LATA5 = 1; } while(0);
  4538                           
  4539                           ;logger.c: 87:         case 'O':
  4540                           
  4541  02E8  0022               	movlb	2	; select bank2
  4542  02E9  168C               	bsf	12,5	;volatile
  4543                           
  4544                           ;logger.c: 94:     }
  4545                           
  4546                           ;logger.c: 93:             break;
  4547                           
  4548                           ;logger.c: 92:         default:
  4549                           
  4550                           ;logger.c: 90:             break;
  4551  02EA  0008               	return
  4552  02EB                     l3228:	
  4553  02EB  0020               	movlb	0	; select bank0
  4554  02EC  083C               	movf	process_message@message,w
  4555  02ED  00BD               	movwf	??_process_message
  4556  02EE  01BE               	clrf	??_process_message+1
  4557                           
  4558                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4559                           ; Switch size 1, requested type "space"
  4560                           ; Number of cases is 1, Range of values is 0 to 0
  4561                           ; switch strategies available:
  4562                           ; Name         Instructions Cycles
  4563                           ; simple_byte            4     3 (average)
  4564                           ; direct_byte            8     6 (fixed)
  4565                           ; jumptable            260     6 (fixed)
  4566                           ;	Chosen strategy is simple_byte
  4567  02EF  083E               	movf	??_process_message+1,w
  4568  02F0  3A00               	xorlw	0	; case 0
  4569  02F1  1903               	skipnz
  4570  02F2  2AF4               	goto	l3444
  4571  02F3  2B0B               	goto	l558
  4572  02F4                     l3444:	
  4573                           
  4574                           ; Switch size 1, requested type "space"
  4575                           ; Number of cases is 7, Range of values is 79 to 116
  4576                           ; switch strategies available:
  4577                           ; Name         Instructions Cycles
  4578                           ; simple_byte           22    12 (average)
  4579                           ; direct_byte           85     9 (fixed)
  4580                           ; jumptable            263     9 (fixed)
  4581                           ;	Chosen strategy is simple_byte
  4582  02F4  083D               	movf	??_process_message,w
  4583  02F5  3A4F               	xorlw	79	; case 79
  4584  02F6  1903               	skipnz
  4585  02F7  2AE8               	goto	l564
  4586  02F8  3A1C               	xorlw	28	; case 83
  4587  02F9  1903               	skipnz
  4588  02FA  2AE1               	goto	l3222
  4589  02FB  3A07               	xorlw	7	; case 84
  4590  02FC  1903               	skipnz
  4591  02FD  2AD4               	goto	l3212
  4592  02FE  3A35               	xorlw	53	; case 97
  4593  02FF  1903               	skipnz
  4594  0300  2AD2               	goto	l3210
  4595  0301  3A0E               	xorlw	14	; case 111
  4596  0302  1903               	skipnz
  4597  0303  2AE5               	goto	l561
  4598  0304  3A1C               	xorlw	28	; case 115
  4599  0305  1903               	skipnz
  4600  0306  2AD6               	goto	l3214
  4601  0307  3A07               	xorlw	7	; case 116
  4602  0308  1903               	skipnz
  4603  0309  2AC7               	goto	l3208
  4604  030A  2B0B               	goto	l558
  4605  030B                     l558:	
  4606  030B  0008               	return
  4607  030C                     __end_of_process_message:	
  4608                           
  4609                           	psect	text23
  4610  05CC                     __ptext23:	
  4611 ;; *************** function _toggle_format *****************
  4612 ;; Defined at:
  4613 ;;		line 150 in file "logger.c"
  4614 ;; Parameters:    Size  Location     Type
  4615 ;;		None
  4616 ;; Auto vars:     Size  Location     Type
  4617 ;;		None
  4618 ;; Return value:  Size  Location     Type
  4619 ;;                  1    wreg      void 
  4620 ;; Registers used:
  4621 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4622 ;; Tracked objects:
  4623 ;;		On entry : 0/0
  4624 ;;		On exit  : 0/0
  4625 ;;		Unchanged: 0/0
  4626 ;; Data sizes:     COMMON   BANK0   BANK1
  4627 ;;      Params:         0       0       0
  4628 ;;      Locals:         0       0       0
  4629 ;;      Temps:          0       1       0
  4630 ;;      Totals:         0       1       0
  4631 ;;Total ram usage:        1 bytes
  4632 ;; Hardware stack levels used:    1
  4633 ;; Hardware stack levels required when called:   10
  4634 ;; This function calls:
  4635 ;;		_ESP_write
  4636 ;; This function is called by:
  4637 ;;		_process_message
  4638 ;; This function uses a non-reentrant model
  4639 ;;
  4640                           
  4641                           
  4642                           ;psect for function _toggle_format
  4643  05CC                     _toggle_format:	
  4644                           
  4645                           ;logger.c: 152:     if (message_format == MESSAGE_BINARY) {
  4646                           
  4647                           ;incstack = 0
  4648                           ; Regs used in _toggle_format: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4649  05CC  0020               	movlb	0	; select bank0
  4650  05CD  0865               	movf	_message_format,w	;volatile
  4651  05CE  1D03               	btfss	3,2
  4652  05CF  2DDE               	goto	l3202
  4653                           
  4654                           ;logger.c: 153:         message_format = MESSAGE_TEXT;
  4655  05D0  3001               	movlw	1
  4656  05D1  00BB               	movwf	??_toggle_format
  4657  05D2  083B               	movf	??_toggle_format,w
  4658  05D3  00E5               	movwf	_message_format	;volatile
  4659                           
  4660                           ;logger.c: 157:             ESP_write("tmode\n",6);
  4661  05D4  307D               	movlw	low (STR_19| (0+32768))
  4662  05D5  00B3               	movwf	ESP_write@pt
  4663  05D6  3087               	movlw	high (STR_19| (0+32768))
  4664  05D7  00B4               	movwf	ESP_write@pt+1
  4665  05D8  3006               	movlw	6
  4666  05D9  00BB               	movwf	??_toggle_format
  4667  05DA  083B               	movf	??_toggle_format,w
  4668  05DB  00B5               	movwf	ESP_write@length
  4669  05DC  20D8               	fcall	_ESP_write
  4670                           
  4671                           ;logger.c: 159:     } else {
  4672  05DD  0008               	return
  4673  05DE                     l3202:	
  4674                           
  4675                           ;logger.c: 160:         message_format = MESSAGE_BINARY;
  4676  05DE  0020               	movlb	0	; select bank0
  4677  05DF  01E5               	clrf	_message_format	;volatile
  4678                           
  4679                           ;logger.c: 164:             ESP_write("bmode\n",6);
  4680  05E0  3076               	movlw	low (STR_20| (0+32768))
  4681  05E1  00B3               	movwf	ESP_write@pt
  4682  05E2  3087               	movlw	high (STR_20| (0+32768))
  4683  05E3  00B4               	movwf	ESP_write@pt+1
  4684  05E4  3006               	movlw	6
  4685  05E5  00BB               	movwf	??_toggle_format
  4686  05E6  083B               	movf	??_toggle_format,w
  4687  05E7  00B5               	movwf	ESP_write@length
  4688  05E8  20D8               	fcall	_ESP_write
  4689  05E9  0008               	return
  4690  05EA                     __end_of_toggle_format:	
  4691                           ;logger.c: 166:     }
  4692                           
  4693                           
  4694                           	psect	text24
  4695  00D8                     __ptext24:	
  4696 ;; *************** function _ESP_write *****************
  4697 ;; Defined at:
  4698 ;;		line 180 in file "esp1.c"
  4699 ;; Parameters:    Size  Location     Type
  4700 ;;  pt              2   19[BANK0 ] PTR unsigned char 
  4701 ;;		 -> STR_20(7), STR_19(7), read_analog@mess(6), STR_18(4), 
  4702 ;;  length          1   21[BANK0 ] unsigned char 
  4703 ;; Auto vars:     Size  Location     Type
  4704 ;;  aux             1   26[BANK0 ] unsigned char 
  4705 ;;  res             1   25[BANK0 ] unsigned char 
  4706 ;; Return value:  Size  Location     Type
  4707 ;;                  1    wreg      void 
  4708 ;; Registers used:
  4709 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4710 ;; Tracked objects:
  4711 ;;		On entry : 0/0
  4712 ;;		On exit  : 0/0
  4713 ;;		Unchanged: 0/0
  4714 ;; Data sizes:     COMMON   BANK0   BANK1
  4715 ;;      Params:         0       3       0
  4716 ;;      Locals:         0       2       0
  4717 ;;      Temps:          0       3       0
  4718 ;;      Totals:         0       8       0
  4719 ;;Total ram usage:        8 bytes
  4720 ;; Hardware stack levels used:    1
  4721 ;; Hardware stack levels required when called:    9
  4722 ;; This function calls:
  4723 ;;		_ESP_wait_for
  4724 ;;		___awdiv
  4725 ;;		___awmod
  4726 ;;		__puts
  4727 ;;		_write
  4728 ;; This function is called by:
  4729 ;;		_process_message
  4730 ;;		_read_analog
  4731 ;;		_toggle_format
  4732 ;; This function uses a non-reentrant model
  4733 ;;
  4734                           
  4735                           
  4736                           ;psect for function _ESP_write
  4737  00D8                     _ESP_write:	
  4738                           
  4739                           ;esp1.c: 180: void ESP_write(unsigned char *pt, unsigned char length);esp1.c: 181: {;esp
      +                          1.c: 182:     unsigned char aux, res;;esp1.c: 184:     _puts("AT+CIPSEND=");
  4740                           
  4741                           ;incstack = 0
  4742                           ; Regs used in _ESP_write: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4743  00D8  302A               	movlw	low (STR_14| (0+32768))
  4744  00D9  00F5               	movwf	__puts@pt
  4745  00DA  3087               	movlw	high (STR_14| (0+32768))
  4746  00DB  00F6               	movwf	__puts@pt+1
  4747  00DC  24B1               	fcall	__puts
  4748                           
  4749                           ;esp1.c: 185:     aux = esp_channel;
  4750  00DD  0020               	movlb	0	; select bank0
  4751  00DE  0866               	movf	_esp_channel,w	;volatile
  4752  00DF  00B6               	movwf	??_ESP_write
  4753  00E0  0836               	movf	??_ESP_write,w
  4754  00E1  00BA               	movwf	ESP_write@aux
  4755                           
  4756                           ;esp1.c: 186:     write(&aux,1);
  4757  00E2  303A               	movlw	low ESP_write@aux
  4758  00E3  00F5               	movwf	write@pt
  4759  00E4  3000               	movlw	high ESP_write@aux
  4760  00E5  00F6               	movwf	write@pt+1
  4761  00E6  01F7               	clrf	write@lenght
  4762  00E7  0AF7               	incf	write@lenght,f
  4763  00E8  2626               	fcall	_write
  4764                           
  4765                           ;esp1.c: 187:     _puts(",");
  4766  00E9  30F7               	movlw	low (STR_15| (0+32768))
  4767  00EA  00F5               	movwf	__puts@pt
  4768  00EB  3087               	movlw	high (STR_15| (0+32768))
  4769  00EC  00F6               	movwf	__puts@pt+1
  4770  00ED  24B1               	fcall	__puts
  4771                           
  4772                           ;esp1.c: 189:     aux = length;
  4773  00EE  0020               	movlb	0	; select bank0
  4774  00EF  0835               	movf	ESP_write@length,w
  4775  00F0  00B6               	movwf	??_ESP_write
  4776  00F1  0836               	movf	??_ESP_write,w
  4777  00F2  00BA               	movwf	ESP_write@aux
  4778                           
  4779                           ;esp1.c: 190:     if (aux > 9) {
  4780  00F3  300A               	movlw	10
  4781  00F4  023A               	subwf	ESP_write@aux,w
  4782  00F5  1C03               	skipc
  4783  00F6  292C               	goto	l3184
  4784                           
  4785                           ;esp1.c: 191:         res = aux%10;
  4786  00F7  300A               	movlw	10
  4787  00F8  00F3               	movwf	___awmod@divisor
  4788  00F9  3000               	movlw	0
  4789  00FA  00F4               	movwf	___awmod@divisor+1
  4790  00FB  083A               	movf	ESP_write@aux,w
  4791  00FC  00B6               	movwf	??_ESP_write
  4792  00FD  01B7               	clrf	??_ESP_write+1
  4793  00FE  0836               	movf	??_ESP_write,w
  4794  00FF  00F5               	movwf	___awmod@dividend
  4795  0100  0837               	movf	??_ESP_write+1,w
  4796  0101  00F6               	movwf	___awmod@dividend+1
  4797  0102  230C               	fcall	___awmod
  4798  0103  0873               	movf	?___awmod,w
  4799  0104  0020               	movlb	0	; select bank0
  4800  0105  00B8               	movwf	??_ESP_write+2
  4801  0106  0838               	movf	??_ESP_write+2,w
  4802  0107  00B9               	movwf	ESP_write@res
  4803                           
  4804                           ;esp1.c: 192:         res += '0';
  4805  0108  3030               	movlw	48
  4806  0109  00B6               	movwf	??_ESP_write
  4807  010A  0836               	movf	??_ESP_write,w
  4808  010B  07B9               	addwf	ESP_write@res,f
  4809                           
  4810                           ;esp1.c: 193:         aux /= 10;
  4811  010C  300A               	movlw	10
  4812  010D  00F3               	movwf	___awdiv@divisor
  4813  010E  3000               	movlw	0
  4814  010F  00F4               	movwf	___awdiv@divisor+1
  4815  0110  083A               	movf	ESP_write@aux,w
  4816  0111  00B6               	movwf	??_ESP_write
  4817  0112  01B7               	clrf	??_ESP_write+1
  4818  0113  0836               	movf	??_ESP_write,w
  4819  0114  00F5               	movwf	___awdiv@dividend
  4820  0115  0837               	movf	??_ESP_write+1,w
  4821  0116  00F6               	movwf	___awdiv@dividend+1
  4822  0117  2274               	fcall	___awdiv
  4823  0118  0873               	movf	?___awdiv,w
  4824  0119  0020               	movlb	0	; select bank0
  4825  011A  00B8               	movwf	??_ESP_write+2
  4826  011B  0838               	movf	??_ESP_write+2,w
  4827  011C  00BA               	movwf	ESP_write@aux
  4828                           
  4829                           ;esp1.c: 194:         aux += '0';
  4830  011D  3030               	movlw	48
  4831  011E  00B6               	movwf	??_ESP_write
  4832  011F  0836               	movf	??_ESP_write,w
  4833  0120  07BA               	addwf	ESP_write@aux,f
  4834                           
  4835                           ;esp1.c: 195:         write(&aux,1);
  4836  0121  303A               	movlw	low ESP_write@aux
  4837  0122  00F5               	movwf	write@pt
  4838  0123  3000               	movlw	high ESP_write@aux
  4839  0124  00F6               	movwf	write@pt+1
  4840  0125  01F7               	clrf	write@lenght
  4841  0126  0AF7               	incf	write@lenght,f
  4842  0127  2626               	fcall	_write
  4843                           
  4844                           ;esp1.c: 196:         write(&res,1);
  4845  0128  3039               	movlw	low ESP_write@res
  4846  0129  00F5               	movwf	write@pt
  4847  012A  3000               	movlw	high ESP_write@res
  4848  012B  2935               	goto	L1
  4849  012C                     l3184:	
  4850                           ;esp1.c: 198:     } else {
  4851                           
  4852                           
  4853                           ;esp1.c: 199:         aux = length + '0';
  4854  012C  0020               	movlb	0	; select bank0
  4855  012D  0835               	movf	ESP_write@length,w
  4856  012E  3E30               	addlw	48
  4857  012F  00B6               	movwf	??_ESP_write
  4858  0130  0836               	movf	??_ESP_write,w
  4859  0131  00BA               	movwf	ESP_write@aux
  4860                           
  4861                           ;esp1.c: 200:         write(&aux,1);
  4862  0132  303A               	movlw	low ESP_write@aux
  4863  0133  00F5               	movwf	write@pt
  4864  0134  3000               	movlw	high ESP_write@aux
  4865  0135                     L1:	
  4866  0135  00F6               	movwf	write@pt+1
  4867  0136  01F7               	clrf	write@lenght
  4868  0137  0AF7               	incf	write@lenght,f
  4869  0138  2626               	fcall	_write
  4870                           
  4871                           ;esp1.c: 203:     _puts("\r\n");
  4872                           
  4873                           ;esp1.c: 201:     }
  4874  0139  3069               	movlw	low ((STR_10+31)| (0+32768))
  4875  013A  00F5               	movwf	__puts@pt
  4876  013B  3085               	movlw	high ((STR_10+31)| (0+32768))
  4877  013C  00F6               	movwf	__puts@pt+1
  4878  013D  24B1               	fcall	__puts
  4879                           
  4880                           ;esp1.c: 205:     ESP_wait_for(ESP_OK);
  4881  013E  3002               	movlw	2
  4882  013F  24D9               	fcall	_ESP_wait_for
  4883                           
  4884                           ;esp1.c: 207:     write(pt,length);
  4885  0140  0020               	movlb	0	; select bank0
  4886  0141  0834               	movf	ESP_write@pt+1,w
  4887  0142  00F6               	movwf	write@pt+1
  4888  0143  0833               	movf	ESP_write@pt,w
  4889  0144  00F5               	movwf	write@pt
  4890  0145  0835               	movf	ESP_write@length,w
  4891  0146  00B6               	movwf	??_ESP_write
  4892  0147  0836               	movf	??_ESP_write,w
  4893  0148  00F7               	movwf	write@lenght
  4894  0149  2626               	fcall	_write
  4895                           
  4896                           ;esp1.c: 208:     _puts("\r\n");
  4897  014A  3069               	movlw	low ((STR_10+31)| (0+32768))
  4898  014B  00F5               	movwf	__puts@pt
  4899  014C  3085               	movlw	high ((STR_10+31)| (0+32768))
  4900  014D  00F6               	movwf	__puts@pt+1
  4901  014E  24B1               	fcall	__puts
  4902  014F  0008               	return
  4903  0150                     __end_of_ESP_write:	
  4904                           
  4905                           	psect	text25
  4906  0626                     __ptext25:	
  4907 ;; *************** function _write *****************
  4908 ;; Defined at:
  4909 ;;		line 15 in file "comm.c"
  4910 ;; Parameters:    Size  Location     Type
  4911 ;;  pt              2    5[COMMON] PTR unsigned char 
  4912 ;;		 -> STR_20(7), STR_19(7), read_analog@mess(6), STR_18(4), 
  4913 ;;		 -> ESP_write@res(1), ESP_write@aux(1), 
  4914 ;;  lenght          1    7[COMMON] unsigned char 
  4915 ;; Auto vars:     Size  Location     Type
  4916 ;;  i               1    8[COMMON] unsigned char 
  4917 ;; Return value:  Size  Location     Type
  4918 ;;                  1    wreg      void 
  4919 ;; Registers used:
  4920 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4921 ;; Tracked objects:
  4922 ;;		On entry : 0/0
  4923 ;;		On exit  : 0/0
  4924 ;;		Unchanged: 0/0
  4925 ;; Data sizes:     COMMON   BANK0   BANK1
  4926 ;;      Params:         3       0       0
  4927 ;;      Locals:         1       0       0
  4928 ;;      Temps:          0       2       0
  4929 ;;      Totals:         4       2       0
  4930 ;;Total ram usage:        6 bytes
  4931 ;; Hardware stack levels used:    1
  4932 ;; Hardware stack levels required when called:    5
  4933 ;; This function calls:
  4934 ;;		_EUSART_Write
  4935 ;;		_EUSART_is_tx_ready
  4936 ;; This function is called by:
  4937 ;;		_ESP_write
  4938 ;; This function uses a non-reentrant model
  4939 ;;
  4940                           
  4941                           
  4942                           ;psect for function _write
  4943  0626                     _write:	
  4944                           
  4945                           ;comm.c: 15: void write(unsigned char *pt, unsigned char lenght);comm.c: 16: {;comm.c: 1
      +                          7:     unsigned char i;;comm.c: 19:     for (i=0; i<lenght; i++) {
  4946                           
  4947                           ;incstack = 0
  4948                           ; Regs used in _write: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4949  0626  01F8               	clrf	write@i
  4950  0627                     l3052:	
  4951  0627  0877               	movf	write@lenght,w
  4952  0628  0278               	subwf	write@i,w
  4953  0629  1803               	btfsc	3,0
  4954  062A  0008               	return
  4955  062B                     l3046:	
  4956                           ;comm.c: 20:         while(!EUSART_is_tx_ready());
  4957                           
  4958  062B  27FB               	fcall	_EUSART_is_tx_ready
  4959  062C  3A00               	xorlw	0
  4960  062D  1903               	skipnz
  4961  062E  2E2B               	goto	l3046
  4962                           
  4963                           ;comm.c: 21:         EUSART_Write(pt[i]);
  4964  062F  0876               	movf	write@pt+1,w
  4965  0630  0020               	movlb	0	; select bank0
  4966  0631  00A1               	movwf	??_write+1
  4967  0632  0875               	movf	write@pt,w
  4968  0633  00A0               	movwf	??_write
  4969  0634  0878               	movf	write@i,w
  4970  0635  0720               	addwf	??_write,w
  4971  0636  0084               	movwf	4
  4972  0637  0821               	movf	??_write+1,w
  4973  0638  1803               	skipnc
  4974  0639  0A21               	incf	??_write+1,w
  4975  063A  0085               	movwf	5
  4976  063B  0800               	movf	0,w	;code access
  4977  063C  256C               	fcall	_EUSART_Write
  4978                           
  4979                           ;comm.c: 22:     }
  4980  063D  3001               	movlw	1
  4981  063E  0020               	movlb	0	; select bank0
  4982  063F  00A0               	movwf	??_write
  4983  0640  0820               	movf	??_write,w
  4984  0641  07F8               	addwf	write@i,f
  4985  0642  2E27               	goto	l3052
  4986  0643                     __end_of_write:	
  4987                           
  4988                           	psect	text26
  4989  030C                     __ptext26:	
  4990 ;; *************** function ___awmod *****************
  4991 ;; Defined at:
  4992 ;;		line 5 in file "/pkg/microchip/xc8/v2.00/pic/sources/c99/common/awmod.c"
  4993 ;; Parameters:    Size  Location     Type
  4994 ;;  divisor         2    3[COMMON] int 
  4995 ;;  dividend        2    5[COMMON] int 
  4996 ;; Auto vars:     Size  Location     Type
  4997 ;;  sign            1    1[BANK0 ] unsigned char 
  4998 ;;  counter         1    0[BANK0 ] unsigned char 
  4999 ;; Return value:  Size  Location     Type
  5000 ;;                  2    3[COMMON] int 
  5001 ;; Registers used:
  5002 ;;		wreg, status,2, status,0
  5003 ;; Tracked objects:
  5004 ;;		On entry : 0/0
  5005 ;;		On exit  : 0/0
  5006 ;;		Unchanged: 0/0
  5007 ;; Data sizes:     COMMON   BANK0   BANK1
  5008 ;;      Params:         4       0       0
  5009 ;;      Locals:         0       2       0
  5010 ;;      Temps:          1       0       0
  5011 ;;      Totals:         5       2       0
  5012 ;;Total ram usage:        7 bytes
  5013 ;; Hardware stack levels used:    1
  5014 ;; Hardware stack levels required when called:    4
  5015 ;; This function calls:
  5016 ;;		Nothing
  5017 ;; This function is called by:
  5018 ;;		_ESP_write
  5019 ;; This function uses a non-reentrant model
  5020 ;;
  5021                           
  5022                           
  5023                           ;psect for function ___awmod
  5024  030C                     ___awmod:	
  5025                           
  5026                           ;incstack = 0
  5027                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5028  030C  0020               	movlb	0	; select bank0
  5029  030D  01A1               	clrf	___awmod@sign
  5030  030E  1FF6               	btfss	___awmod@dividend+1,7
  5031  030F  2B17               	goto	l3132
  5032  0310  09F5               	comf	___awmod@dividend,f
  5033  0311  09F6               	comf	___awmod@dividend+1,f
  5034  0312  0AF5               	incf	___awmod@dividend,f
  5035  0313  1903               	skipnz
  5036  0314  0AF6               	incf	___awmod@dividend+1,f
  5037  0315  01A1               	clrf	___awmod@sign
  5038  0316  0AA1               	incf	___awmod@sign,f
  5039  0317                     l3132:	
  5040  0317  1FF4               	btfss	___awmod@divisor+1,7
  5041  0318  2B1E               	goto	l3136
  5042  0319  09F3               	comf	___awmod@divisor,f
  5043  031A  09F4               	comf	___awmod@divisor+1,f
  5044  031B  0AF3               	incf	___awmod@divisor,f
  5045  031C  1903               	skipnz
  5046  031D  0AF4               	incf	___awmod@divisor+1,f
  5047  031E                     l3136:	
  5048  031E  0873               	movf	___awmod@divisor,w
  5049  031F  0474               	iorwf	___awmod@divisor+1,w
  5050  0320  1903               	btfsc	3,2
  5051  0321  2B45               	goto	l3154
  5052  0322  01A0               	clrf	___awmod@counter
  5053  0323  0AA0               	incf	___awmod@counter,f
  5054  0324                     l3144:	
  5055  0324  1BF4               	btfsc	___awmod@divisor+1,7
  5056  0325  2B30               	goto	l3146
  5057  0326  3001               	movlw	1
  5058  0327                     u2505:	
  5059  0327  35F3               	lslf	___awmod@divisor,f
  5060  0328  0DF4               	rlf	___awmod@divisor+1,f
  5061  0329  0B89               	decfsz	9,f
  5062  032A  2B27               	goto	u2505
  5063  032B  3001               	movlw	1
  5064  032C  00F7               	movwf	??___awmod
  5065  032D  0877               	movf	??___awmod,w
  5066  032E  07A0               	addwf	___awmod@counter,f
  5067  032F  2B24               	goto	l3144
  5068  0330                     l3146:	
  5069  0330  0874               	movf	___awmod@divisor+1,w
  5070  0331  0276               	subwf	___awmod@dividend+1,w
  5071  0332  1D03               	skipz
  5072  0333  2B36               	goto	u2525
  5073  0334  0873               	movf	___awmod@divisor,w
  5074  0335  0275               	subwf	___awmod@dividend,w
  5075  0336                     u2525:	
  5076  0336  1C03               	skipc
  5077  0337  2B3C               	goto	l3150
  5078  0338  0873               	movf	___awmod@divisor,w
  5079  0339  02F5               	subwf	___awmod@dividend,f
  5080  033A  0874               	movf	___awmod@divisor+1,w
  5081  033B  3BF6               	subwfb	___awmod@dividend+1,f
  5082  033C                     l3150:	
  5083  033C  3001               	movlw	1
  5084  033D                     u2535:	
  5085  033D  36F4               	lsrf	___awmod@divisor+1,f
  5086  033E  0CF3               	rrf	___awmod@divisor,f
  5087  033F  0B89               	decfsz	9,f
  5088  0340  2B3D               	goto	u2535
  5089  0341  3001               	movlw	1
  5090  0342  02A0               	subwf	___awmod@counter,f
  5091  0343  1D03               	btfss	3,2
  5092  0344  2B30               	goto	l3146
  5093  0345                     l3154:	
  5094  0345  0821               	movf	___awmod@sign,w
  5095  0346  1903               	btfsc	3,2
  5096  0347  2B4D               	goto	l3158
  5097  0348  09F5               	comf	___awmod@dividend,f
  5098  0349  09F6               	comf	___awmod@dividend+1,f
  5099  034A  0AF5               	incf	___awmod@dividend,f
  5100  034B  1903               	skipnz
  5101  034C  0AF6               	incf	___awmod@dividend+1,f
  5102  034D                     l3158:	
  5103  034D  0876               	movf	___awmod@dividend+1,w
  5104  034E  00F4               	movwf	?___awmod+1
  5105  034F  0875               	movf	___awmod@dividend,w
  5106  0350  00F3               	movwf	?___awmod
  5107  0351  0008               	return
  5108  0352                     __end_of___awmod:	
  5109                           
  5110                           	psect	text27
  5111  0274                     __ptext27:	
  5112 ;; *************** function ___awdiv *****************
  5113 ;; Defined at:
  5114 ;;		line 5 in file "/pkg/microchip/xc8/v2.00/pic/sources/c99/common/awdiv.c"
  5115 ;; Parameters:    Size  Location     Type
  5116 ;;  divisor         2    3[COMMON] int 
  5117 ;;  dividend        2    5[COMMON] int 
  5118 ;; Auto vars:     Size  Location     Type
  5119 ;;  quotient        2    2[BANK0 ] int 
  5120 ;;  sign            1    1[BANK0 ] unsigned char 
  5121 ;;  counter         1    0[BANK0 ] unsigned char 
  5122 ;; Return value:  Size  Location     Type
  5123 ;;                  2    3[COMMON] int 
  5124 ;; Registers used:
  5125 ;;		wreg, status,2, status,0
  5126 ;; Tracked objects:
  5127 ;;		On entry : 0/0
  5128 ;;		On exit  : 0/0
  5129 ;;		Unchanged: 0/0
  5130 ;; Data sizes:     COMMON   BANK0   BANK1
  5131 ;;      Params:         4       0       0
  5132 ;;      Locals:         0       4       0
  5133 ;;      Temps:          1       0       0
  5134 ;;      Totals:         5       4       0
  5135 ;;Total ram usage:        9 bytes
  5136 ;; Hardware stack levels used:    1
  5137 ;; Hardware stack levels required when called:    4
  5138 ;; This function calls:
  5139 ;;		Nothing
  5140 ;; This function is called by:
  5141 ;;		_ESP_write
  5142 ;; This function uses a non-reentrant model
  5143 ;;
  5144                           
  5145                           
  5146                           ;psect for function ___awdiv
  5147  0274                     ___awdiv:	
  5148                           
  5149                           ;incstack = 0
  5150                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5151  0274  0020               	movlb	0	; select bank0
  5152  0275  01A1               	clrf	___awdiv@sign
  5153  0276  1FF4               	btfss	___awdiv@divisor+1,7
  5154  0277  2A7F               	goto	l3088
  5155  0278  09F3               	comf	___awdiv@divisor,f
  5156  0279  09F4               	comf	___awdiv@divisor+1,f
  5157  027A  0AF3               	incf	___awdiv@divisor,f
  5158  027B  1903               	skipnz
  5159  027C  0AF4               	incf	___awdiv@divisor+1,f
  5160  027D  01A1               	clrf	___awdiv@sign
  5161  027E  0AA1               	incf	___awdiv@sign,f
  5162  027F                     l3088:	
  5163  027F  1FF6               	btfss	___awdiv@dividend+1,7
  5164  0280  2A8A               	goto	l3094
  5165  0281  09F5               	comf	___awdiv@dividend,f
  5166  0282  09F6               	comf	___awdiv@dividend+1,f
  5167  0283  0AF5               	incf	___awdiv@dividend,f
  5168  0284  1903               	skipnz
  5169  0285  0AF6               	incf	___awdiv@dividend+1,f
  5170  0286  3001               	movlw	1
  5171  0287  00F7               	movwf	??___awdiv
  5172  0288  0877               	movf	??___awdiv,w
  5173  0289  06A1               	xorwf	___awdiv@sign,f
  5174  028A                     l3094:	
  5175  028A  01A2               	clrf	___awdiv@quotient
  5176  028B  01A3               	clrf	___awdiv@quotient+1
  5177  028C  0873               	movf	___awdiv@divisor,w
  5178  028D  0474               	iorwf	___awdiv@divisor+1,w
  5179  028E  1903               	btfsc	3,2
  5180  028F  2AB9               	goto	l3116
  5181  0290  01A0               	clrf	___awdiv@counter
  5182  0291  0AA0               	incf	___awdiv@counter,f
  5183  0292                     l3104:	
  5184  0292  1BF4               	btfsc	___awdiv@divisor+1,7
  5185  0293  2A9E               	goto	l3106
  5186  0294  3001               	movlw	1
  5187  0295                     u2405:	
  5188  0295  35F3               	lslf	___awdiv@divisor,f
  5189  0296  0DF4               	rlf	___awdiv@divisor+1,f
  5190  0297  0B89               	decfsz	9,f
  5191  0298  2A95               	goto	u2405
  5192  0299  3001               	movlw	1
  5193  029A  00F7               	movwf	??___awdiv
  5194  029B  0877               	movf	??___awdiv,w
  5195  029C  07A0               	addwf	___awdiv@counter,f
  5196  029D  2A92               	goto	l3104
  5197  029E                     l3106:	
  5198  029E  3001               	movlw	1
  5199  029F                     u2425:	
  5200  029F  35A2               	lslf	___awdiv@quotient,f
  5201  02A0  0DA3               	rlf	___awdiv@quotient+1,f
  5202  02A1  0B89               	decfsz	9,f
  5203  02A2  2A9F               	goto	u2425
  5204  02A3  0874               	movf	___awdiv@divisor+1,w
  5205  02A4  0276               	subwf	___awdiv@dividend+1,w
  5206  02A5  1D03               	skipz
  5207  02A6  2AA9               	goto	u2435
  5208  02A7  0873               	movf	___awdiv@divisor,w
  5209  02A8  0275               	subwf	___awdiv@dividend,w
  5210  02A9                     u2435:	
  5211  02A9  1C03               	skipc
  5212  02AA  2AB0               	goto	l3112
  5213  02AB  0873               	movf	___awdiv@divisor,w
  5214  02AC  02F5               	subwf	___awdiv@dividend,f
  5215  02AD  0874               	movf	___awdiv@divisor+1,w
  5216  02AE  3BF6               	subwfb	___awdiv@dividend+1,f
  5217  02AF  1422               	bsf	___awdiv@quotient,0
  5218  02B0                     l3112:	
  5219  02B0  3001               	movlw	1
  5220  02B1                     u2445:	
  5221  02B1  36F4               	lsrf	___awdiv@divisor+1,f
  5222  02B2  0CF3               	rrf	___awdiv@divisor,f
  5223  02B3  0B89               	decfsz	9,f
  5224  02B4  2AB1               	goto	u2445
  5225  02B5  3001               	movlw	1
  5226  02B6  02A0               	subwf	___awdiv@counter,f
  5227  02B7  1D03               	btfss	3,2
  5228  02B8  2A9E               	goto	l3106
  5229  02B9                     l3116:	
  5230  02B9  0821               	movf	___awdiv@sign,w
  5231  02BA  1903               	btfsc	3,2
  5232  02BB  2AC1               	goto	l3120
  5233  02BC  09A2               	comf	___awdiv@quotient,f
  5234  02BD  09A3               	comf	___awdiv@quotient+1,f
  5235  02BE  0AA2               	incf	___awdiv@quotient,f
  5236  02BF  1903               	skipnz
  5237  02C0  0AA3               	incf	___awdiv@quotient+1,f
  5238  02C1                     l3120:	
  5239  02C1  0823               	movf	___awdiv@quotient+1,w
  5240  02C2  00F4               	movwf	?___awdiv+1
  5241  02C3  0822               	movf	___awdiv@quotient,w
  5242  02C4  00F3               	movwf	?___awdiv
  5243  02C5  0008               	return
  5244  02C6                     __end_of___awdiv:	
  5245                           
  5246                           	psect	text28
  5247  07E5                     __ptext28:	
  5248 ;; *************** function _TMR1_StopTimer *****************
  5249 ;; Defined at:
  5250 ;;		line 99 in file "mcc_generated_files/tmr1.c"
  5251 ;; Parameters:    Size  Location     Type
  5252 ;;		None
  5253 ;; Auto vars:     Size  Location     Type
  5254 ;;		None
  5255 ;; Return value:  Size  Location     Type
  5256 ;;                  1    wreg      void 
  5257 ;; Registers used:
  5258 ;;		None
  5259 ;; Tracked objects:
  5260 ;;		On entry : 0/0
  5261 ;;		On exit  : 0/0
  5262 ;;		Unchanged: 0/0
  5263 ;; Data sizes:     COMMON   BANK0   BANK1
  5264 ;;      Params:         0       0       0
  5265 ;;      Locals:         0       0       0
  5266 ;;      Temps:          0       0       0
  5267 ;;      Totals:         0       0       0
  5268 ;;Total ram usage:        0 bytes
  5269 ;; Hardware stack levels used:    1
  5270 ;; Hardware stack levels required when called:    4
  5271 ;; This function calls:
  5272 ;;		Nothing
  5273 ;; This function is called by:
  5274 ;;		_logger_initialize
  5275 ;;		_process_message
  5276 ;; This function uses a non-reentrant model
  5277 ;;
  5278                           
  5279                           
  5280                           ;psect for function _TMR1_StopTimer
  5281  07E5                     _TMR1_StopTimer:	
  5282                           
  5283                           ;mcc_generated_files/tmr1.c: 102:     T1CONbits.TMR1ON = 0;
  5284                           
  5285                           ;incstack = 0
  5286                           ; Regs used in _TMR1_StopTimer: []
  5287  07E5  0020               	movlb	0	; select bank0
  5288  07E6  1018               	bcf	24,0	;volatile
  5289  07E7  0008               	return
  5290  07E8                     __end_of_TMR1_StopTimer:	
  5291                           
  5292                           	psect	text29
  5293  07E8                     __ptext29:	
  5294 ;; *************** function _TMR1_StartTimer *****************
  5295 ;; Defined at:
  5296 ;;		line 93 in file "mcc_generated_files/tmr1.c"
  5297 ;; Parameters:    Size  Location     Type
  5298 ;;		None
  5299 ;; Auto vars:     Size  Location     Type
  5300 ;;		None
  5301 ;; Return value:  Size  Location     Type
  5302 ;;                  1    wreg      void 
  5303 ;; Registers used:
  5304 ;;		None
  5305 ;; Tracked objects:
  5306 ;;		On entry : 0/0
  5307 ;;		On exit  : 0/0
  5308 ;;		Unchanged: 0/0
  5309 ;; Data sizes:     COMMON   BANK0   BANK1
  5310 ;;      Params:         0       0       0
  5311 ;;      Locals:         0       0       0
  5312 ;;      Temps:          0       0       0
  5313 ;;      Totals:         0       0       0
  5314 ;;Total ram usage:        0 bytes
  5315 ;; Hardware stack levels used:    1
  5316 ;; Hardware stack levels required when called:    4
  5317 ;; This function calls:
  5318 ;;		Nothing
  5319 ;; This function is called by:
  5320 ;;		_process_message
  5321 ;; This function uses a non-reentrant model
  5322 ;;
  5323                           
  5324                           
  5325                           ;psect for function _TMR1_StartTimer
  5326  07E8                     _TMR1_StartTimer:	
  5327                           
  5328                           ;mcc_generated_files/tmr1.c: 96:     T1CONbits.TMR1ON = 1;
  5329                           
  5330                           ;incstack = 0
  5331                           ; Regs used in _TMR1_StartTimer: []
  5332  07E8  0020               	movlb	0	; select bank0
  5333  07E9  1418               	bsf	24,0	;volatile
  5334  07EA  0008               	return
  5335  07EB                     __end_of_TMR1_StartTimer:	
  5336                           
  5337                           	psect	text30
  5338  07EB                     __ptext30:	
  5339 ;; *************** function _ADC_StartConversion *****************
  5340 ;; Defined at:
  5341 ;;		line 93 in file "mcc_generated_files/adc.c"
  5342 ;; Parameters:    Size  Location     Type
  5343 ;;		None
  5344 ;; Auto vars:     Size  Location     Type
  5345 ;;		None
  5346 ;; Return value:  Size  Location     Type
  5347 ;;                  1    wreg      void 
  5348 ;; Registers used:
  5349 ;;		None
  5350 ;; Tracked objects:
  5351 ;;		On entry : 0/0
  5352 ;;		On exit  : 0/0
  5353 ;;		Unchanged: 0/0
  5354 ;; Data sizes:     COMMON   BANK0   BANK1
  5355 ;;      Params:         0       0       0
  5356 ;;      Locals:         0       0       0
  5357 ;;      Temps:          0       0       0
  5358 ;;      Totals:         0       0       0
  5359 ;;Total ram usage:        0 bytes
  5360 ;; Hardware stack levels used:    1
  5361 ;; Hardware stack levels required when called:    4
  5362 ;; This function calls:
  5363 ;;		Nothing
  5364 ;; This function is called by:
  5365 ;;		_process_message
  5366 ;; This function uses a non-reentrant model
  5367 ;;
  5368                           
  5369                           
  5370                           ;psect for function _ADC_StartConversion
  5371  07EB                     _ADC_StartConversion:	
  5372                           
  5373                           ;mcc_generated_files/adc.c: 96:     ADCON0bits.GO_nDONE = 1;
  5374                           
  5375                           ;incstack = 0
  5376                           ; Regs used in _ADC_StartConversion: []
  5377  07EB  0021               	movlb	1	; select bank1
  5378  07EC  149D               	bsf	29,1	;volatile
  5379  07ED  0008               	return
  5380  07EE                     __end_of_ADC_StartConversion:	
  5381                           
  5382                           	psect	text31
  5383  075D                     __ptext31:	
  5384 ;; *************** function _ESP_initialize *****************
  5385 ;; Defined at:
  5386 ;;		line 18 in file "esp1.c"
  5387 ;; Parameters:    Size  Location     Type
  5388 ;;		None
  5389 ;; Auto vars:     Size  Location     Type
  5390 ;;		None
  5391 ;; Return value:  Size  Location     Type
  5392 ;;                  1    wreg      void 
  5393 ;; Registers used:
  5394 ;;		wreg, status,2, status,0, pclath, cstack
  5395 ;; Tracked objects:
  5396 ;;		On entry : 0/0
  5397 ;;		On exit  : 0/0
  5398 ;;		Unchanged: 0/0
  5399 ;; Data sizes:     COMMON   BANK0   BANK1
  5400 ;;      Params:         0       0       0
  5401 ;;      Locals:         0       0       0
  5402 ;;      Temps:          0       0       0
  5403 ;;      Totals:         0       0       0
  5404 ;;Total ram usage:        0 bytes
  5405 ;; Hardware stack levels used:    1
  5406 ;; Hardware stack levels required when called:    5
  5407 ;; This function calls:
  5408 ;;		_ESP_Set_application_handler
  5409 ;; This function is called by:
  5410 ;;		_main
  5411 ;; This function uses a non-reentrant model
  5412 ;;
  5413                           
  5414                           
  5415                           ;psect for function _ESP_initialize
  5416  075D                     _ESP_initialize:	
  5417                           
  5418                           ;esp1.c: 20:     esp_channel = 0;
  5419                           
  5420                           ;incstack = 0
  5421                           ; Regs used in _ESP_initialize: [wreg+status,2+status,0+pclath+cstack]
  5422  075D  0020               	movlb	0	; select bank0
  5423  075E  01E6               	clrf	_esp_channel	;volatile
  5424                           
  5425                           ;esp1.c: 21:     ESP_wait_exception = ESP_OTHER;
  5426  075F  01E8               	clrf	_ESP_wait_exception	;volatile
  5427                           
  5428                           ;esp1.c: 24:     ESP_Set_application_handler(ESP_default_application_handler);
  5429  0760  30FD               	movlw	low _ESP_default_application_handler
  5430  0761  00F3               	movwf	ESP_Set_application_handler@applicationHandler
  5431  0762  3007               	movlw	high _ESP_default_application_handler
  5432  0763  00F4               	movwf	ESP_Set_application_handler@applicationHandler+1
  5433  0764  27B6               	fcall	_ESP_Set_application_handler
  5434  0765  0008               	return
  5435  0766                     __end_of_ESP_initialize:	
  5436                           
  5437                           	psect	text32
  5438  07B6                     __ptext32:	
  5439 ;; *************** function _ESP_Set_application_handler *****************
  5440 ;; Defined at:
  5441 ;;		line 217 in file "esp1.c"
  5442 ;; Parameters:    Size  Location     Type
  5443 ;;  applicationH    2    3[COMMON] PTR FTN(unsigned char ,)
  5444 ;;		 -> ESP_default_application_handler(1), process_message(1), 
  5445 ;; Auto vars:     Size  Location     Type
  5446 ;;		None
  5447 ;; Return value:  Size  Location     Type
  5448 ;;                  1    wreg      void 
  5449 ;; Registers used:
  5450 ;;		wreg
  5451 ;; Tracked objects:
  5452 ;;		On entry : 0/0
  5453 ;;		On exit  : 0/0
  5454 ;;		Unchanged: 0/0
  5455 ;; Data sizes:     COMMON   BANK0   BANK1
  5456 ;;      Params:         2       0       0
  5457 ;;      Locals:         0       0       0
  5458 ;;      Temps:          0       0       0
  5459 ;;      Totals:         2       0       0
  5460 ;;Total ram usage:        2 bytes
  5461 ;; Hardware stack levels used:    1
  5462 ;; Hardware stack levels required when called:    4
  5463 ;; This function calls:
  5464 ;;		Nothing
  5465 ;; This function is called by:
  5466 ;;		_ESP_initialize
  5467 ;;		_logger_initialize
  5468 ;; This function uses a non-reentrant model
  5469 ;;
  5470                           
  5471                           
  5472                           ;psect for function _ESP_Set_application_handler
  5473  07B6                     _ESP_Set_application_handler:	
  5474                           
  5475                           ;esp1.c: 217: void ESP_Set_application_handler(void (* applicationHandler)(unsigned char
      +                          ));esp1.c: 218: {;esp1.c: 219:     ESP_external_message_handler = applicationHandler;
  5476                           
  5477                           ;incstack = 0
  5478                           ; Regs used in _ESP_Set_application_handler: [wreg]
  5479  07B6  0874               	movf	ESP_Set_application_handler@applicationHandler+1,w
  5480  07B7  0020               	movlb	0	; select bank0
  5481  07B8  00D7               	movwf	_ESP_external_message_handler+1
  5482  07B9  0873               	movf	ESP_Set_application_handler@applicationHandler,w
  5483  07BA  00D6               	movwf	_ESP_external_message_handler
  5484  07BB  0008               	return
  5485  07BC                     __end_of_ESP_Set_application_handler:	
  5486                           
  5487                           	psect	text33
  5488  0392                     __ptext33:	
  5489 ;; *************** function _ESP_config *****************
  5490 ;; Defined at:
  5491 ;;		line 82 in file "esp1.c"
  5492 ;; Parameters:    Size  Location     Type
  5493 ;;		None
  5494 ;; Auto vars:     Size  Location     Type
  5495 ;;		None
  5496 ;; Return value:  Size  Location     Type
  5497 ;;                  1    wreg      void 
  5498 ;; Registers used:
  5499 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5500 ;; Tracked objects:
  5501 ;;		On entry : 0/0
  5502 ;;		On exit  : 0/0
  5503 ;;		Unchanged: 0/0
  5504 ;; Data sizes:     COMMON   BANK0   BANK1
  5505 ;;      Params:         0       0       0
  5506 ;;      Locals:         0       0       0
  5507 ;;      Temps:          0       2       0
  5508 ;;      Totals:         0       2       0
  5509 ;;Total ram usage:        2 bytes
  5510 ;; Hardware stack levels used:    1
  5511 ;; Hardware stack levels required when called:    9
  5512 ;; This function calls:
  5513 ;;		_ESP_wait_for
  5514 ;;		_EUSART_Read
  5515 ;;		_EUSART_is_rx_ready
  5516 ;;		__puts
  5517 ;; This function is called by:
  5518 ;;		_main
  5519 ;; This function uses a non-reentrant model
  5520 ;;
  5521                           
  5522                           
  5523                           ;psect for function _ESP_config
  5524  0392                     _ESP_config:	
  5525                           
  5526                           ;esp1.c: 87:     _delay((unsigned long)((250)*(32000000/4000.0)));
  5527                           
  5528                           ;incstack = 0
  5529                           ; Regs used in _ESP_config: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5530  0392  300B               	movlw	11
  5531  0393  0020               	movlb	0	; select bank0
  5532  0394  00B4               	movwf	??_ESP_config+1
  5533  0395  3026               	movlw	38
  5534  0396  00B3               	movwf	??_ESP_config
  5535  0397  305D               	movlw	93
  5536  0398                     u2777:	
  5537  0398  0B89               	decfsz	9,f
  5538  0399  2B98               	goto	u2777
  5539  039A  0BB3               	decfsz	??_ESP_config,f
  5540  039B  2B98               	goto	u2777
  5541  039C  0BB4               	decfsz	??_ESP_config+1,f
  5542  039D  2B98               	goto	u2777
  5543  039E  3200               	nop2
  5544  039F                     l3322:	
  5545                           ;esp1.c: 88:     while(EUSART_is_rx_ready())
  5546                           
  5547                           
  5548                           ;esp1.c: 88:     while(EUSART_is_rx_ready())
  5549  039F  27EE               	fcall	_EUSART_is_rx_ready
  5550  03A0  3A00               	xorlw	0
  5551  03A1  1903               	btfsc	3,2
  5552  03A2  2BA5               	goto	l3324
  5553                           
  5554                           ;esp1.c: 89:         EUSART_Read();
  5555  03A3  25EA               	fcall	_EUSART_Read
  5556  03A4  2B9F               	goto	l3322
  5557  03A5                     l3324:	
  5558                           
  5559                           ;esp1.c: 91:     _puts("AT\r\n");
  5560  03A5  30C8               	movlw	low (STR_8| (0+32768))
  5561  03A6  00F5               	movwf	__puts@pt
  5562  03A7  3087               	movlw	high (STR_8| (0+32768))
  5563  03A8  00F6               	movwf	__puts@pt+1
  5564  03A9  24B1               	fcall	__puts
  5565                           
  5566                           ;esp1.c: 92:     ESP_wait_for(ESP_OK);
  5567  03AA  3002               	movlw	2
  5568  03AB  24D9               	fcall	_ESP_wait_for
  5569                           
  5570                           ;esp1.c: 95:     _puts("AT+CWMODE=1\r\n");
  5571  03AC  30F4               	movlw	low (STR_9| (0+32768))
  5572  03AD  00F5               	movwf	__puts@pt
  5573  03AE  3086               	movlw	high (STR_9| (0+32768))
  5574  03AF  00F6               	movwf	__puts@pt+1
  5575  03B0  24B1               	fcall	__puts
  5576                           
  5577                           ;esp1.c: 96:     ESP_wait_for(ESP_OK);
  5578  03B1  3002               	movlw	2
  5579  03B2  24D9               	fcall	_ESP_wait_for
  5580                           
  5581                           ;esp1.c: 99:     _puts("AT+CWJAP=\"saul2\",\"rickhunter02\"\r\n");
  5582  03B3  304A               	movlw	low (STR_10| (0+32768))
  5583  03B4  00F5               	movwf	__puts@pt
  5584  03B5  3085               	movlw	high (STR_10| (0+32768))
  5585  03B6  00F6               	movwf	__puts@pt+1
  5586  03B7  24B1               	fcall	__puts
  5587                           
  5588                           ;esp1.c: 100:     ESP_wait_for(ESP_OK);
  5589  03B8  3002               	movlw	2
  5590  03B9  24D9               	fcall	_ESP_wait_for
  5591                           
  5592                           ;esp1.c: 103:     _puts("AT+CIPMUX=1\r\n");
  5593  03BA  3002               	movlw	low (STR_11| (0+32768))
  5594  03BB  00F5               	movwf	__puts@pt
  5595  03BC  3087               	movlw	high (STR_11| (0+32768))
  5596  03BD  00F6               	movwf	__puts@pt+1
  5597  03BE  24B1               	fcall	__puts
  5598                           
  5599                           ;esp1.c: 104:     ESP_wait_for(ESP_OK);
  5600  03BF  3002               	movlw	2
  5601  03C0  24D9               	fcall	_ESP_wait_for
  5602                           
  5603                           ;esp1.c: 107:     _puts("AT+CIPSERVER=1,80\r\n");
  5604  03C1  30AC               	movlw	low (STR_12| (0+32768))
  5605  03C2  00F5               	movwf	__puts@pt
  5606  03C3  3086               	movlw	high (STR_12| (0+32768))
  5607  03C4  00F6               	movwf	__puts@pt+1
  5608  03C5  24B1               	fcall	__puts
  5609                           
  5610                           ;esp1.c: 108:     ESP_wait_for(ESP_OK);
  5611  03C6  3002               	movlw	2
  5612  03C7  24D9               	fcall	_ESP_wait_for
  5613  03C8  0008               	return
  5614  03C9                     __end_of_ESP_config:	
  5615                           
  5616                           	psect	text34
  5617  04B1                     __ptext34:	
  5618 ;; *************** function __puts *****************
  5619 ;; Defined at:
  5620 ;;		line 5 in file "comm.c"
  5621 ;; Parameters:    Size  Location     Type
  5622 ;;  pt              2    5[COMMON] PTR unsigned char 
  5623 ;;		 -> STR_22(3), STR_21(3), STR_17(3), STR_16(3), 
  5624 ;;		 -> STR_15(2), STR_14(12), STR_12(20), STR_11(14), 
  5625 ;;		 -> STR_10(34), STR_9(14), STR_8(5), 
  5626 ;; Auto vars:     Size  Location     Type
  5627 ;;  index           1    7[COMMON] unsigned char 
  5628 ;; Return value:  Size  Location     Type
  5629 ;;                  1    wreg      void 
  5630 ;; Registers used:
  5631 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5632 ;; Tracked objects:
  5633 ;;		On entry : 0/0
  5634 ;;		On exit  : 0/0
  5635 ;;		Unchanged: 0/0
  5636 ;; Data sizes:     COMMON   BANK0   BANK1
  5637 ;;      Params:         2       0       0
  5638 ;;      Locals:         1       0       0
  5639 ;;      Temps:          0       3       0
  5640 ;;      Totals:         3       3       0
  5641 ;;Total ram usage:        6 bytes
  5642 ;; Hardware stack levels used:    1
  5643 ;; Hardware stack levels required when called:    5
  5644 ;; This function calls:
  5645 ;;		_EUSART_Write
  5646 ;;		_EUSART_is_tx_ready
  5647 ;; This function is called by:
  5648 ;;		_ESP_config
  5649 ;;		_ESP_write
  5650 ;;		_process_ioc
  5651 ;; This function uses a non-reentrant model
  5652 ;;
  5653                           
  5654                           
  5655                           ;psect for function __puts
  5656  04B1                     __puts:	
  5657                           
  5658                           ;comm.c: 5: void _puts(char *pt);comm.c: 6: {;comm.c: 7:     unsigned char index;;comm.c
      +                          : 8:     index = 0;
  5659                           
  5660                           ;incstack = 0
  5661                           ; Regs used in __puts: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5662  04B1  01F7               	clrf	__puts@index
  5663  04B2                     l3042:	
  5664                           ;comm.c: 12:     }
  5665                           
  5666                           ;comm.c: 9:     while(pt[index]) {
  5667                           
  5668                           
  5669                           ;comm.c: 9:     while(pt[index]) {
  5670  04B2  0876               	movf	__puts@pt+1,w
  5671  04B3  0020               	movlb	0	; select bank0
  5672  04B4  00A1               	movwf	??__puts+1
  5673  04B5  0875               	movf	__puts@pt,w
  5674  04B6  00A0               	movwf	??__puts
  5675  04B7  0877               	movf	__puts@index,w
  5676  04B8  0720               	addwf	??__puts,w
  5677  04B9  0084               	movwf	4
  5678  04BA  0821               	movf	??__puts+1,w
  5679  04BB  1803               	skipnc
  5680  04BC  0A21               	incf	??__puts+1,w
  5681  04BD  0085               	movwf	5
  5682  04BE  0012               	moviw fsr0++
  5683  04BF  1903               	btfsc	3,2
  5684  04C0  0008               	return
  5685  04C1                     l3036:	
  5686                           ;comm.c: 10:         while(!EUSART_is_tx_ready());
  5687                           
  5688  04C1  27FB               	fcall	_EUSART_is_tx_ready
  5689  04C2  3A00               	xorlw	0
  5690  04C3  1903               	skipnz
  5691  04C4  2CC1               	goto	l3036
  5692                           
  5693                           ;comm.c: 11:         EUSART_Write(pt[index++]);
  5694  04C5  0876               	movf	__puts@pt+1,w
  5695  04C6  0020               	movlb	0	; select bank0
  5696  04C7  00A1               	movwf	??__puts+1
  5697  04C8  0875               	movf	__puts@pt,w
  5698  04C9  00A0               	movwf	??__puts
  5699  04CA  0877               	movf	__puts@index,w
  5700  04CB  0720               	addwf	??__puts,w
  5701  04CC  0084               	movwf	4
  5702  04CD  0821               	movf	??__puts+1,w
  5703  04CE  1803               	skipnc
  5704  04CF  0A21               	incf	??__puts+1,w
  5705  04D0  0085               	movwf	5
  5706  04D1  0800               	movf	0,w	;code access
  5707  04D2  256C               	fcall	_EUSART_Write
  5708  04D3  3001               	movlw	1
  5709  04D4  0020               	movlb	0	; select bank0
  5710  04D5  00A0               	movwf	??__puts
  5711  04D6  0820               	movf	??__puts,w
  5712  04D7  07F7               	addwf	__puts@index,f
  5713  04D8  2CB2               	goto	l3042
  5714  04D9                     __end_of__puts:	
  5715                           
  5716                           	psect	text35
  5717  07FB                     __ptext35:	
  5718 ;; *************** function _EUSART_is_tx_ready *****************
  5719 ;; Defined at:
  5720 ;;		line 113 in file "mcc_generated_files/eusart.c"
  5721 ;; Parameters:    Size  Location     Type
  5722 ;;		None
  5723 ;; Auto vars:     Size  Location     Type
  5724 ;;		None
  5725 ;; Return value:  Size  Location     Type
  5726 ;;                  1    wreg      unsigned char 
  5727 ;; Registers used:
  5728 ;;		wreg
  5729 ;; Tracked objects:
  5730 ;;		On entry : 0/0
  5731 ;;		On exit  : 0/0
  5732 ;;		Unchanged: 0/0
  5733 ;; Data sizes:     COMMON   BANK0   BANK1
  5734 ;;      Params:         0       0       0
  5735 ;;      Locals:         0       0       0
  5736 ;;      Temps:          0       0       0
  5737 ;;      Totals:         0       0       0
  5738 ;;Total ram usage:        0 bytes
  5739 ;; Hardware stack levels used:    1
  5740 ;; Hardware stack levels required when called:    4
  5741 ;; This function calls:
  5742 ;;		Nothing
  5743 ;; This function is called by:
  5744 ;;		__puts
  5745 ;;		_write
  5746 ;; This function uses a non-reentrant model
  5747 ;;
  5748                           
  5749                           
  5750                           ;psect for function _EUSART_is_tx_ready
  5751  07FB                     _EUSART_is_tx_ready:	
  5752                           
  5753                           ;mcc_generated_files/eusart.c: 115:     return eusartTxBufferRemaining;
  5754                           
  5755                           ;incstack = 0
  5756                           ; Regs used in _EUSART_is_tx_ready: [wreg]
  5757  07FB  0879               	movf	_eusartTxBufferRemaining,w	;volatile
  5758  07FC  0008               	return
  5759  07FD                     __end_of_EUSART_is_tx_ready:	
  5760                           
  5761                           	psect	text36
  5762  056C                     __ptext36:	
  5763 ;; *************** function _EUSART_Write *****************
  5764 ;; Defined at:
  5765 ;;		line 148 in file "mcc_generated_files/eusart.c"
  5766 ;; Parameters:    Size  Location     Type
  5767 ;;  txData          1    wreg     unsigned char 
  5768 ;; Auto vars:     Size  Location     Type
  5769 ;;  txData          1    4[COMMON] unsigned char 
  5770 ;; Return value:  Size  Location     Type
  5771 ;;                  1    wreg      void 
  5772 ;; Registers used:
  5773 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5774 ;; Tracked objects:
  5775 ;;		On entry : 0/0
  5776 ;;		On exit  : 0/0
  5777 ;;		Unchanged: 0/0
  5778 ;; Data sizes:     COMMON   BANK0   BANK1
  5779 ;;      Params:         0       0       0
  5780 ;;      Locals:         1       0       0
  5781 ;;      Temps:          1       0       0
  5782 ;;      Totals:         2       0       0
  5783 ;;Total ram usage:        2 bytes
  5784 ;; Hardware stack levels used:    1
  5785 ;; Hardware stack levels required when called:    4
  5786 ;; This function calls:
  5787 ;;		Nothing
  5788 ;; This function is called by:
  5789 ;;		__puts
  5790 ;;		_write
  5791 ;; This function uses a non-reentrant model
  5792 ;;
  5793                           
  5794                           
  5795                           ;psect for function _EUSART_Write
  5796  056C                     _EUSART_Write:	
  5797                           
  5798                           ;incstack = 0
  5799                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  5800                           ;EUSART_Write@txData stored from wreg
  5801  056C  00F4               	movwf	EUSART_Write@txData
  5802  056D                     l2202:	
  5803                           ;mcc_generated_files/eusart.c: 151:     {;mcc_generated_files/eusart.c: 152:     }
  5804                           
  5805                           ;mcc_generated_files/eusart.c: 148: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 149: {;mcc_generated_files/eusart.c: 150:     while(0 == eusartTxBufferRemai
      +                          ning)
  5806                           
  5807                           
  5808                           ;mcc_generated_files/eusart.c: 150:     while(0 == eusartTxBufferRemaining)
  5809  056D  0879               	movf	_eusartTxBufferRemaining,w	;volatile
  5810  056E  1903               	btfsc	3,2
  5811  056F  2D6D               	goto	l2202
  5812                           
  5813                           ;mcc_generated_files/eusart.c: 154:     if(0 == PIE1bits.TXIE)
  5814  0570  0021               	movlb	1	; select bank1
  5815  0571  1A11               	btfsc	17,4	;volatile
  5816  0572  2D77               	goto	l159
  5817                           
  5818                           ;mcc_generated_files/eusart.c: 155:     {;mcc_generated_files/eusart.c: 156:         TXR
      +                          EG = txData;
  5819  0573  0874               	movf	EUSART_Write@txData,w
  5820  0574  0023               	movlb	3	; select bank3
  5821  0575  009A               	movwf	26	;volatile
  5822                           
  5823                           ;mcc_generated_files/eusart.c: 157:     }
  5824  0576  2D8A               	goto	l2216
  5825  0577                     l159:	
  5826                           ;mcc_generated_files/eusart.c: 158:     else
  5827                           
  5828                           
  5829                           ;mcc_generated_files/eusart.c: 159:     {;mcc_generated_files/eusart.c: 160:         PIE
      +                          1bits.TXIE = 0;
  5830  0577  1211               	bcf	17,4	;volatile
  5831                           
  5832                           ;mcc_generated_files/eusart.c: 161:         eusartTxBuffer[eusartTxHead++] = txData;
  5833  0578  0874               	movf	EUSART_Write@txData,w
  5834  0579  00F3               	movwf	??_EUSART_Write
  5835  057A  087A               	movf	_eusartTxHead,w
  5836  057B  3E4C               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  5837  057C  0086               	movwf	6
  5838  057D  0187               	clrf	7
  5839  057E  0873               	movf	??_EUSART_Write,w
  5840  057F  0081               	movwf	1
  5841  0580  3001               	movlw	1
  5842  0581  00F3               	movwf	??_EUSART_Write
  5843  0582  0873               	movf	??_EUSART_Write,w
  5844  0583  07FA               	addwf	_eusartTxHead,f	;volatile
  5845                           
  5846                           ;mcc_generated_files/eusart.c: 162:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
  5847  0584  300A               	movlw	10
  5848  0585  027A               	subwf	_eusartTxHead,w	;volatile
  5849  0586  1803               	btfsc	3,0
  5850                           
  5851                           ;mcc_generated_files/eusart.c: 163:         {;mcc_generated_files/eusart.c: 164:        
      +                               eusartTxHead = 0;
  5852  0587  01FA               	clrf	_eusartTxHead	;volatile
  5853                           
  5854                           ;mcc_generated_files/eusart.c: 166:         eusartTxBufferRemaining--;
  5855                           
  5856                           ;mcc_generated_files/eusart.c: 165:         }
  5857  0588  3001               	movlw	1
  5858  0589  02F9               	subwf	_eusartTxBufferRemaining,f	;volatile
  5859  058A                     l2216:	
  5860                           ;mcc_generated_files/eusart.c: 167:     }
  5861                           
  5862                           
  5863                           ;mcc_generated_files/eusart.c: 168:     PIE1bits.TXIE = 1;
  5864  058A  0021               	movlb	1	; select bank1
  5865  058B  1611               	bsf	17,4	;volatile
  5866  058C  0008               	return
  5867  058D                     __end_of_EUSART_Write:	
  5868                           
  5869                           	psect	text37
  5870  07EE                     __ptext37:	
  5871 ;; *************** function _EUSART_is_rx_ready *****************
  5872 ;; Defined at:
  5873 ;;		line 118 in file "mcc_generated_files/eusart.c"
  5874 ;; Parameters:    Size  Location     Type
  5875 ;;		None
  5876 ;; Auto vars:     Size  Location     Type
  5877 ;;		None
  5878 ;; Return value:  Size  Location     Type
  5879 ;;                  1    wreg      unsigned char 
  5880 ;; Registers used:
  5881 ;;		wreg
  5882 ;; Tracked objects:
  5883 ;;		On entry : 0/0
  5884 ;;		On exit  : 0/0
  5885 ;;		Unchanged: 0/0
  5886 ;; Data sizes:     COMMON   BANK0   BANK1
  5887 ;;      Params:         0       0       0
  5888 ;;      Locals:         0       0       0
  5889 ;;      Temps:          0       0       0
  5890 ;;      Totals:         0       0       0
  5891 ;;Total ram usage:        0 bytes
  5892 ;; Hardware stack levels used:    1
  5893 ;; Hardware stack levels required when called:    4
  5894 ;; This function calls:
  5895 ;;		Nothing
  5896 ;; This function is called by:
  5897 ;;		_main
  5898 ;;		_ESP_config
  5899 ;; This function uses a non-reentrant model
  5900 ;;
  5901                           
  5902                           
  5903                           ;psect for function _EUSART_is_rx_ready
  5904  07EE                     _EUSART_is_rx_ready:	
  5905                           
  5906                           ;mcc_generated_files/eusart.c: 120:     return eusartRxCount;
  5907                           
  5908                           ;incstack = 0
  5909                           ; Regs used in _EUSART_is_rx_ready: [wreg]
  5910  07EE  0020               	movlb	0	; select bank0
  5911  07EF  0869               	movf	_eusartRxCount,w	;volatile
  5912  07F0  0008               	return
  5913  07F1                     __end_of_EUSART_is_rx_ready:	
  5914                           
  5915                           	psect	text38
  5916  04D9                     __ptext38:	
  5917 ;; *************** function _ESP_wait_for *****************
  5918 ;; Defined at:
  5919 ;;		line 113 in file "esp1.c"
  5920 ;; Parameters:    Size  Location     Type
  5921 ;;  esp_mess        1    wreg     unsigned char 
  5922 ;; Auto vars:     Size  Location     Type
  5923 ;;  esp_mess        1   17[BANK0 ] unsigned char 
  5924 ;;  ret             1   18[BANK0 ] unsigned char 
  5925 ;; Return value:  Size  Location     Type
  5926 ;;                  1    wreg      void 
  5927 ;; Registers used:
  5928 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5929 ;; Tracked objects:
  5930 ;;		On entry : 0/0
  5931 ;;		On exit  : 0/0
  5932 ;;		Unchanged: 0/0
  5933 ;; Data sizes:     COMMON   BANK0   BANK1
  5934 ;;      Params:         0       0       0
  5935 ;;      Locals:         0       2       0
  5936 ;;      Temps:          0       1       0
  5937 ;;      Totals:         0       3       0
  5938 ;;Total ram usage:        3 bytes
  5939 ;; Hardware stack levels used:    1
  5940 ;; Hardware stack levels required when called:    8
  5941 ;; This function calls:
  5942 ;;		_ESP_read
  5943 ;; This function is called by:
  5944 ;;		_ESP_config
  5945 ;;		_ESP_write
  5946 ;;		_read_analog
  5947 ;; This function uses a non-reentrant model
  5948 ;;
  5949                           
  5950                           
  5951                           ;psect for function _ESP_wait_for
  5952  04D9                     _ESP_wait_for:	
  5953                           
  5954                           ;incstack = 0
  5955                           ; Regs used in _ESP_wait_for: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5956                           ;ESP_wait_for@esp_mess stored from wreg
  5957  04D9  0020               	movlb	0	; select bank0
  5958  04DA  00B1               	movwf	ESP_wait_for@esp_mess
  5959  04DB                     l459:	
  5960                           ;esp1.c: 113: void ESP_wait_for(unsigned char esp_mess);esp1.c: 114: {;esp1.c: 115:     
      +                          unsigned char ret;;esp1.c: 118:     do {
  5961                           
  5962                           
  5963                           ;esp1.c: 119:         ret = ESP_read();
  5964  04DB  242E               	fcall	_ESP_read
  5965  04DC  0020               	movlb	0	; select bank0
  5966  04DD  00B0               	movwf	??_ESP_wait_for
  5967  04DE  0830               	movf	??_ESP_wait_for,w
  5968  04DF  00B2               	movwf	ESP_wait_for@ret
  5969                           
  5970                           ;esp1.c: 121:         if (ret != esp_mess) {
  5971  04E0  0832               	movf	ESP_wait_for@ret,w
  5972  04E1  0631               	xorwf	ESP_wait_for@esp_mess,w
  5973  04E2  1903               	skipnz
  5974  04E3  2CFB               	goto	l3078
  5975                           
  5976                           ;esp1.c: 122:             if (ret == ESP_SEND_FAIL) return;
  5977  04E4  3007               	movlw	7
  5978  04E5  0632               	xorwf	ESP_wait_for@ret,w
  5979  04E6  1903               	btfsc	3,2
  5980  04E7  0008               	return
  5981                           
  5982                           ;esp1.c: 123:             if (ret == ESP_CLOSED) {
  5983  04E8  3008               	movlw	8
  5984  04E9  0632               	xorwf	ESP_wait_for@ret,w
  5985  04EA  1D03               	btfss	3,2
  5986  04EB  2CEE               	goto	l3068
  5987                           
  5988                           ;esp1.c: 124:                 esp_channel = 0;
  5989  04EC  01E6               	clrf	_esp_channel	;volatile
  5990                           
  5991                           ;esp1.c: 125:                 return;
  5992  04ED  0008               	return
  5993  04EE                     l3068:	
  5994                           ;esp1.c: 126:             }
  5995                           
  5996                           
  5997                           ;esp1.c: 127:             if (ret == ESP_ERROR) return;
  5998  04EE  3009               	movlw	9
  5999  04EF  0632               	xorwf	ESP_wait_for@ret,w
  6000  04F0  1903               	btfsc	3,2
  6001  04F1  0008               	return
  6002                           
  6003                           ;esp1.c: 128:             if (ret == ESP_RX) {
  6004  04F2  3004               	movlw	4
  6005  04F3  0632               	xorwf	ESP_wait_for@ret,w
  6006  04F4  1D03               	btfss	3,2
  6007  04F5  2CFB               	goto	l3078
  6008                           
  6009                           ;esp1.c: 130:                 ESP_wait_exception = ESP_RX;
  6010  04F6  3004               	movlw	4
  6011  04F7  00B0               	movwf	??_ESP_wait_for
  6012  04F8  0830               	movf	??_ESP_wait_for,w
  6013  04F9  00E8               	movwf	_ESP_wait_exception	;volatile
  6014                           
  6015                           ;esp1.c: 131:                 return;
  6016  04FA  0008               	return
  6017  04FB                     l3078:	
  6018                           ;esp1.c: 133:         }
  6019                           
  6020                           ;esp1.c: 132:             }
  6021                           
  6022                           
  6023                           ;esp1.c: 134:     } while (ret != esp_mess);
  6024  04FB  0832               	movf	ESP_wait_for@ret,w
  6025  04FC  0631               	xorwf	ESP_wait_for@esp_mess,w
  6026  04FD  1903               	btfsc	3,2
  6027  04FE  0008               	return
  6028  04FF  2CDB               	goto	l459
  6029  0500                     __end_of_ESP_wait_for:	
  6030                           
  6031                           	psect	text39
  6032  042E                     __ptext39:	
  6033 ;; *************** function _ESP_read *****************
  6034 ;; Defined at:
  6035 ;;		line 27 in file "esp1.c"
  6036 ;; Parameters:    Size  Location     Type
  6037 ;;		None
  6038 ;; Auto vars:     Size  Location     Type
  6039 ;;  ret             1   15[BANK0 ] unsigned char 
  6040 ;; Return value:  Size  Location     Type
  6041 ;;                  1    wreg      unsigned char 
  6042 ;; Registers used:
  6043 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6044 ;; Tracked objects:
  6045 ;;		On entry : 0/0
  6046 ;;		On exit  : 0/0
  6047 ;;		Unchanged: 0/0
  6048 ;; Data sizes:     COMMON   BANK0   BANK1
  6049 ;;      Params:         0       0       0
  6050 ;;      Locals:         0       1       0
  6051 ;;      Temps:          0       1       0
  6052 ;;      Totals:         0       2       0
  6053 ;;Total ram usage:        2 bytes
  6054 ;; Hardware stack levels used:    1
  6055 ;; Hardware stack levels required when called:    7
  6056 ;; This function calls:
  6057 ;;		_ESP_process_message
  6058 ;;		_EUSART_Read
  6059 ;; This function is called by:
  6060 ;;		_ESP_wait_for
  6061 ;;		_ESP_message_handler
  6062 ;; This function uses a non-reentrant model
  6063 ;;
  6064                           
  6065                           
  6066                           ;psect for function _ESP_read
  6067  042E                     _ESP_read:	
  6068                           
  6069                           ;esp1.c: 29:     unsigned char ret;;esp1.c: 31:     esp_read_data[esp_read_data_index] =
      +                           EUSART_Read();
  6070                           
  6071                           ;incstack = 0
  6072                           ; Regs used in _ESP_read: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6073  042E  25EA               	fcall	_EUSART_Read
  6074  042F  0020               	movlb	0	; select bank0
  6075  0430  00AE               	movwf	??_ESP_read
  6076  0431  0867               	movf	_esp_read_data_index,w
  6077  0432  3EAC               	addlw	(low (_esp_read_data| 0))& (0+255)
  6078  0433  0086               	movwf	6
  6079  0434  0187               	clrf	7
  6080  0435  082E               	movf	??_ESP_read,w
  6081  0436  0081               	movwf	1
  6082                           
  6083                           ;esp1.c: 34:     if (esp_read_data[esp_read_data_index] == 0x0a) {
  6084  0437  0867               	movf	_esp_read_data_index,w
  6085  0438  3EAC               	addlw	(low (_esp_read_data| 0))& (0+255)
  6086  0439  0086               	movwf	6
  6087  043A  0187               	clrf	7
  6088  043B  300A               	movlw	10
  6089  043C  0601               	xorwf	1,w
  6090  043D  1D03               	btfss	3,2
  6091  043E  2C53               	goto	l3024
  6092                           
  6093                           ;esp1.c: 36:         if (esp_read_data_index <= 1) {
  6094  043F  3002               	movlw	2
  6095  0440  0267               	subwf	_esp_read_data_index,w	;volatile
  6096  0441  1803               	skipnc
  6097  0442  2C45               	goto	l3014
  6098                           
  6099                           ;esp1.c: 37:             ret = ESP_EOL;
  6100  0443  3003               	movlw	3
  6101  0444  2C4D               	goto	L2
  6102  0445                     l3014:	
  6103                           ;esp1.c: 38:         } else {
  6104                           
  6105                           
  6106                           ;esp1.c: 39:             esp_read_data[(esp_read_data_index-1)] = 0x00;
  6107  0445  0867               	movf	_esp_read_data_index,w
  6108  0446  3EFF               	addlw	255
  6109  0447  3EAC               	addlw	(low (_esp_read_data| 0))& (0+255)
  6110  0448  0086               	movwf	6
  6111  0449  0187               	clrf	7
  6112  044A  0181               	clrf	1
  6113                           
  6114                           ;esp1.c: 40:             ret = ESP_process_message();
  6115  044B  2150               	fcall	_ESP_process_message
  6116  044C  0020               	movlb	0	; select bank0
  6117  044D                     L2:	
  6118  044D  00AE               	movwf	??_ESP_read
  6119  044E  082E               	movf	??_ESP_read,w
  6120  044F  00AF               	movwf	ESP_read@ret
  6121                           
  6122                           ;esp1.c: 43:         esp_read_data_index = 0;
  6123                           
  6124                           ;esp1.c: 41:         }
  6125  0450  01E7               	clrf	_esp_read_data_index	;volatile
  6126                           
  6127                           ;esp1.c: 44:         return ret;
  6128  0451  082F               	movf	ESP_read@ret,w
  6129  0452  0008               	return
  6130  0453                     l3024:	
  6131                           ;esp1.c: 45:     }
  6132                           
  6133                           
  6134                           ;esp1.c: 47:     esp_read_data_index++;
  6135  0453  3001               	movlw	1
  6136  0454  00AE               	movwf	??_ESP_read
  6137  0455  082E               	movf	??_ESP_read,w
  6138  0456  07E7               	addwf	_esp_read_data_index,f	;volatile
  6139                           
  6140                           ;esp1.c: 48:     if (esp_read_data_index >= 20)
  6141  0457  3014               	movlw	20
  6142  0458  0267               	subwf	_esp_read_data_index,w	;volatile
  6143  0459  1803               	btfsc	3,0
  6144                           
  6145                           ;esp1.c: 49:         esp_read_data_index = 0;
  6146  045A  01E7               	clrf	_esp_read_data_index	;volatile
  6147                           
  6148                           ;esp1.c: 51:     return ESP_OTHER;
  6149  045B  3000               	movlw	0
  6150  045C  0008               	return
  6151  045D                     __end_of_ESP_read:	
  6152                           
  6153                           	psect	text40
  6154  05EA                     __ptext40:	
  6155 ;; *************** function _EUSART_Read *****************
  6156 ;; Defined at:
  6157 ;;		line 128 in file "mcc_generated_files/eusart.c"
  6158 ;; Parameters:    Size  Location     Type
  6159 ;;		None
  6160 ;; Auto vars:     Size  Location     Type
  6161 ;;  readValue       1    4[COMMON] unsigned char 
  6162 ;; Return value:  Size  Location     Type
  6163 ;;                  1    wreg      unsigned char 
  6164 ;; Registers used:
  6165 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6166 ;; Tracked objects:
  6167 ;;		On entry : 0/0
  6168 ;;		On exit  : 0/0
  6169 ;;		Unchanged: 0/0
  6170 ;; Data sizes:     COMMON   BANK0   BANK1
  6171 ;;      Params:         0       0       0
  6172 ;;      Locals:         1       0       0
  6173 ;;      Temps:          1       0       0
  6174 ;;      Totals:         2       0       0
  6175 ;;Total ram usage:        2 bytes
  6176 ;; Hardware stack levels used:    1
  6177 ;; Hardware stack levels required when called:    4
  6178 ;; This function calls:
  6179 ;;		Nothing
  6180 ;; This function is called by:
  6181 ;;		_ESP_read
  6182 ;;		_ESP_config
  6183 ;;		_bt_message_handler
  6184 ;; This function uses a non-reentrant model
  6185 ;;
  6186                           
  6187                           
  6188                           ;psect for function _EUSART_Read
  6189  05EA                     _EUSART_Read:	
  6190                           
  6191                           ;mcc_generated_files/eusart.c: 130:     uint8_t readValue = 0;
  6192                           
  6193                           ;incstack = 0
  6194                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  6195  05EA  01F4               	clrf	EUSART_Read@readValue
  6196  05EB                     l2116:	
  6197                           ;mcc_generated_files/eusart.c: 133:     {;mcc_generated_files/eusart.c: 134:     }
  6198                           
  6199                           ;mcc_generated_files/eusart.c: 132:     while(0 == eusartRxCount)
  6200                           
  6201                           
  6202                           ;mcc_generated_files/eusart.c: 132:     while(0 == eusartRxCount)
  6203  05EB  0020               	movlb	0	; select bank0
  6204  05EC  0869               	movf	_eusartRxCount,w	;volatile
  6205  05ED  1903               	btfsc	3,2
  6206  05EE  2DEB               	goto	l2116
  6207                           
  6208                           ;mcc_generated_files/eusart.c: 136:     readValue = eusartRxBuffer[eusartRxTail++];
  6209  05EF  086A               	movf	_eusartRxTail,w
  6210  05F0  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  6211  05F1  0086               	movwf	6
  6212  05F2  0187               	clrf	7
  6213  05F3  0801               	movf	1,w
  6214  05F4  00F3               	movwf	??_EUSART_Read
  6215  05F5  0873               	movf	??_EUSART_Read,w
  6216  05F6  00F4               	movwf	EUSART_Read@readValue
  6217  05F7  3001               	movlw	1
  6218  05F8  00F3               	movwf	??_EUSART_Read
  6219  05F9  0873               	movf	??_EUSART_Read,w
  6220  05FA  07EA               	addwf	_eusartRxTail,f	;volatile
  6221                           
  6222                           ;mcc_generated_files/eusart.c: 137:     if(sizeof(eusartRxBuffer) <= eusartRxTail)
  6223  05FB  300C               	movlw	12
  6224  05FC  026A               	subwf	_eusartRxTail,w	;volatile
  6225  05FD  1803               	btfsc	3,0
  6226                           
  6227                           ;mcc_generated_files/eusart.c: 138:     {;mcc_generated_files/eusart.c: 139:         eus
      +                          artRxTail = 0;
  6228  05FE  01EA               	clrf	_eusartRxTail	;volatile
  6229                           
  6230                           ;mcc_generated_files/eusart.c: 141:     PIE1bits.RCIE = 0;
  6231                           
  6232                           ;mcc_generated_files/eusart.c: 140:     }
  6233  05FF  0021               	movlb	1	; select bank1
  6234  0600  1291               	bcf	17,5	;volatile
  6235                           
  6236                           ;mcc_generated_files/eusart.c: 142:     eusartRxCount--;
  6237  0601  3001               	movlw	1
  6238  0602  0020               	movlb	0	; select bank0
  6239  0603  02E9               	subwf	_eusartRxCount,f	;volatile
  6240                           
  6241                           ;mcc_generated_files/eusart.c: 143:     PIE1bits.RCIE = 1;
  6242  0604  0021               	movlb	1	; select bank1
  6243  0605  1691               	bsf	17,5	;volatile
  6244                           
  6245                           ;mcc_generated_files/eusart.c: 145:     return readValue;
  6246  0606  0874               	movf	EUSART_Read@readValue,w
  6247  0607  0008               	return
  6248  0608                     __end_of_EUSART_Read:	
  6249                           
  6250                           	psect	text41
  6251  0150                     __ptext41:	
  6252 ;; *************** function _ESP_process_message *****************
  6253 ;; Defined at:
  6254 ;;		line 55 in file "esp1.c"
  6255 ;; Parameters:    Size  Location     Type
  6256 ;;		None
  6257 ;; Auto vars:     Size  Location     Type
  6258 ;;  aux             1   13[BANK0 ] PTR unsigned char 
  6259 ;;		 -> NULL(0), esp_read_data(20), 
  6260 ;; Return value:  Size  Location     Type
  6261 ;;                  1    wreg      unsigned char 
  6262 ;; Registers used:
  6263 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6264 ;; Tracked objects:
  6265 ;;		On entry : 0/0
  6266 ;;		On exit  : 0/0
  6267 ;;		Unchanged: 0/0
  6268 ;; Data sizes:     COMMON   BANK0   BANK1
  6269 ;;      Params:         0       0       0
  6270 ;;      Locals:         0       1       0
  6271 ;;      Temps:          0       1       0
  6272 ;;      Totals:         0       2       0
  6273 ;;Total ram usage:        2 bytes
  6274 ;; Hardware stack levels used:    1
  6275 ;; Hardware stack levels required when called:    6
  6276 ;; This function calls:
  6277 ;;		_strstr
  6278 ;; This function is called by:
  6279 ;;		_ESP_read
  6280 ;; This function uses a non-reentrant model
  6281 ;;
  6282                           
  6283                           
  6284                           ;psect for function _ESP_process_message
  6285  0150                     _ESP_process_message:	
  6286                           
  6287                           ;esp1.c: 56:     unsigned char *aux;;esp1.c: 58:     aux = strstr(esp_read_data,"SEND OK
      +                          ");
  6288                           
  6289                           ;incstack = 0
  6290                           ; Regs used in _ESP_process_message: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6291  0150  3066               	movlw	low (STR_1| (0+32768))
  6292  0151  0020               	movlb	0	; select bank0
  6293  0152  00A4               	movwf	strstr@n
  6294  0153  3087               	movlw	high (STR_1| (0+32768))
  6295  0154  00A5               	movwf	strstr@n+1
  6296  0155  30AC               	movlw	(low (_esp_read_data| 0))& (0+255)
  6297  0156  2352               	fcall	_strstr
  6298  0157  0020               	movlb	0	; select bank0
  6299  0158  00AC               	movwf	??_ESP_process_message
  6300  0159  082C               	movf	??_ESP_process_message,w
  6301  015A  00AD               	movwf	ESP_process_message@aux
  6302                           
  6303                           ;esp1.c: 59:     if (aux) return ESP_SEND_OK;
  6304  015B  082D               	movf	ESP_process_message@aux,w
  6305  015C  1903               	btfsc	3,2
  6306  015D  2960               	goto	l2954
  6307  015E  3001               	movlw	1
  6308  015F  0008               	return
  6309  0160                     l2954:	
  6310                           
  6311                           ;esp1.c: 61:     aux = strstr(esp_read_data,"OK");
  6312  0160  306B               	movlw	low ((STR_1+5)| (0+32768))
  6313  0161  00A4               	movwf	strstr@n
  6314  0162  3087               	movlw	high ((STR_1+5)| (0+32768))
  6315  0163  00A5               	movwf	strstr@n+1
  6316  0164  30AC               	movlw	(low (_esp_read_data| 0))& (0+255)
  6317  0165  2352               	fcall	_strstr
  6318  0166  0020               	movlb	0	; select bank0
  6319  0167  00AC               	movwf	??_ESP_process_message
  6320  0168  082C               	movf	??_ESP_process_message,w
  6321  0169  00AD               	movwf	ESP_process_message@aux
  6322                           
  6323                           ;esp1.c: 62:     if (aux) return ESP_OK;
  6324  016A  082D               	movf	ESP_process_message@aux,w
  6325  016B  1903               	btfsc	3,2
  6326  016C  296F               	goto	l2962
  6327  016D  3002               	movlw	2
  6328  016E  0008               	return
  6329  016F                     l2962:	
  6330                           
  6331                           ;esp1.c: 64:     aux = strstr(esp_read_data,"SEND FAIL");
  6332  016F  3036               	movlw	low (STR_3| (0+32768))
  6333  0170  00A4               	movwf	strstr@n
  6334  0171  3087               	movlw	high (STR_3| (0+32768))
  6335  0172  00A5               	movwf	strstr@n+1
  6336  0173  30AC               	movlw	(low (_esp_read_data| 0))& (0+255)
  6337  0174  2352               	fcall	_strstr
  6338  0175  0020               	movlb	0	; select bank0
  6339  0176  00AC               	movwf	??_ESP_process_message
  6340  0177  082C               	movf	??_ESP_process_message,w
  6341  0178  00AD               	movwf	ESP_process_message@aux
  6342                           
  6343                           ;esp1.c: 65:     if (aux) return ESP_SEND_FAIL;
  6344  0179  082D               	movf	ESP_process_message@aux,w
  6345  017A  1903               	btfsc	3,2
  6346  017B  297E               	goto	l2970
  6347  017C  3007               	movlw	7
  6348  017D  0008               	return
  6349  017E                     l2970:	
  6350                           
  6351                           ;esp1.c: 67:     aux = strstr(esp_read_data,"ERROR");
  6352  017E  3092               	movlw	low (STR_4| (0+32768))
  6353  017F  00A4               	movwf	strstr@n
  6354  0180  3087               	movlw	high (STR_4| (0+32768))
  6355  0181  00A5               	movwf	strstr@n+1
  6356  0182  30AC               	movlw	(low (_esp_read_data| 0))& (0+255)
  6357  0183  2352               	fcall	_strstr
  6358  0184  0020               	movlb	0	; select bank0
  6359  0185  00AC               	movwf	??_ESP_process_message
  6360  0186  082C               	movf	??_ESP_process_message,w
  6361  0187  00AD               	movwf	ESP_process_message@aux
  6362                           
  6363                           ;esp1.c: 68:     if (aux) return ESP_ERROR;
  6364  0188  082D               	movf	ESP_process_message@aux,w
  6365  0189  1903               	btfsc	3,2
  6366  018A  298D               	goto	l2978
  6367  018B  3009               	movlw	9
  6368  018C  0008               	return
  6369  018D                     l2978:	
  6370                           
  6371                           ;esp1.c: 70:     aux = strstr(esp_read_data,"+IPD");
  6372  018D  30CD               	movlw	low (STR_5| (0+32768))
  6373  018E  00A4               	movwf	strstr@n
  6374  018F  3087               	movlw	high (STR_5| (0+32768))
  6375  0190  00A5               	movwf	strstr@n+1
  6376  0191  30AC               	movlw	(low (_esp_read_data| 0))& (0+255)
  6377  0192  2352               	fcall	_strstr
  6378  0193  0020               	movlb	0	; select bank0
  6379  0194  00AC               	movwf	??_ESP_process_message
  6380  0195  082C               	movf	??_ESP_process_message,w
  6381  0196  00AD               	movwf	ESP_process_message@aux
  6382                           
  6383                           ;esp1.c: 71:     if (aux) return ESP_RX;
  6384  0197  082D               	movf	ESP_process_message@aux,w
  6385  0198  1903               	btfsc	3,2
  6386  0199  299C               	goto	l2986
  6387  019A  3004               	movlw	4
  6388  019B  0008               	return
  6389  019C                     l2986:	
  6390                           
  6391                           ;esp1.c: 73:     aux = strstr(esp_read_data,"CONNECT");
  6392  019C  306E               	movlw	low (STR_6| (0+32768))
  6393  019D  00A4               	movwf	strstr@n
  6394  019E  3087               	movlw	high (STR_6| (0+32768))
  6395  019F  00A5               	movwf	strstr@n+1
  6396  01A0  30AC               	movlw	(low (_esp_read_data| 0))& (0+255)
  6397  01A1  2352               	fcall	_strstr
  6398  01A2  0020               	movlb	0	; select bank0
  6399  01A3  00AC               	movwf	??_ESP_process_message
  6400  01A4  082C               	movf	??_ESP_process_message,w
  6401  01A5  00AD               	movwf	ESP_process_message@aux
  6402                           
  6403                           ;esp1.c: 74:     if (aux) return ESP_CONNECT;
  6404  01A6  082D               	movf	ESP_process_message@aux,w
  6405  01A7  1903               	btfsc	3,2
  6406  01A8  29AB               	goto	l2994
  6407  01A9  3006               	movlw	6
  6408  01AA  0008               	return
  6409  01AB                     l2994:	
  6410                           
  6411                           ;esp1.c: 76:     aux = strstr(esp_read_data,"CLOSED");
  6412  01AB  3084               	movlw	low (STR_7| (0+32768))
  6413  01AC  00A4               	movwf	strstr@n
  6414  01AD  3087               	movlw	high (STR_7| (0+32768))
  6415  01AE  00A5               	movwf	strstr@n+1
  6416  01AF  30AC               	movlw	(low (_esp_read_data| 0))& (0+255)
  6417  01B0  2352               	fcall	_strstr
  6418  01B1  0020               	movlb	0	; select bank0
  6419  01B2  00AC               	movwf	??_ESP_process_message
  6420  01B3  082C               	movf	??_ESP_process_message,w
  6421  01B4  00AD               	movwf	ESP_process_message@aux
  6422                           
  6423                           ;esp1.c: 77:     if (aux) return ESP_CLOSED;
  6424  01B5  082D               	movf	ESP_process_message@aux,w
  6425  01B6  1903               	btfsc	3,2
  6426  01B7  29BA               	goto	l3002
  6427  01B8  3008               	movlw	8
  6428  01B9  0008               	return
  6429  01BA                     l3002:	
  6430                           
  6431                           ;esp1.c: 79:     return ESP_OTHER;
  6432  01BA  3000               	movlw	0
  6433  01BB  0008               	return
  6434  01BC                     __end_of_ESP_process_message:	
  6435                           
  6436                           	psect	text42
  6437  0352                     __ptext42:	
  6438 ;; *************** function _strstr *****************
  6439 ;; Defined at:
  6440 ;;		line 143 in file "/pkg/microchip/xc8/v2.00/pic/sources/c99/common/strstr.c"
  6441 ;; Parameters:    Size  Location     Type
  6442 ;;  h               1    wreg     PTR const unsigned char 
  6443 ;;		 -> NULL(0), esp_read_data(20), 
  6444 ;;  n               2    4[BANK0 ] PTR const unsigned char 
  6445 ;;		 -> STR_13(2), STR_7(7), STR_6(8), STR_5(5), 
  6446 ;;		 -> STR_4(6), STR_3(10), STR_2(3), STR_1(8), 
  6447 ;; Auto vars:     Size  Location     Type
  6448 ;;  h               1   11[BANK0 ] PTR const unsigned char 
  6449 ;;		 -> NULL(0), esp_read_data(20), 
  6450 ;;  nl              2    9[BANK0 ] unsigned int 
  6451 ;; Return value:  Size  Location     Type
  6452 ;;                  1    wreg      PTR unsigned char 
  6453 ;; Registers used:
  6454 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6455 ;; Tracked objects:
  6456 ;;		On entry : 0/0
  6457 ;;		On exit  : 0/0
  6458 ;;		Unchanged: 0/0
  6459 ;; Data sizes:     COMMON   BANK0   BANK1
  6460 ;;      Params:         0       2       0
  6461 ;;      Locals:         0       3       0
  6462 ;;      Temps:          0       3       0
  6463 ;;      Totals:         0       8       0
  6464 ;;Total ram usage:        8 bytes
  6465 ;; Hardware stack levels used:    1
  6466 ;; Hardware stack levels required when called:    5
  6467 ;; This function calls:
  6468 ;;		_strchr
  6469 ;;		_strlen
  6470 ;;		_strncmp
  6471 ;; This function is called by:
  6472 ;;		_ESP_process_message
  6473 ;;		_ESP_process_rx_data
  6474 ;; This function uses a non-reentrant model
  6475 ;;
  6476                           
  6477                           
  6478                           ;psect for function _strstr
  6479  0352                     _strstr:	
  6480                           
  6481                           ;incstack = 0
  6482                           ; Regs used in _strstr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6483                           ;strstr@h stored from wreg
  6484  0352  0020               	movlb	0	; select bank0
  6485  0353  00AB               	movwf	strstr@h
  6486  0354  0824               	movf	strstr@n,w
  6487  0355  0425               	iorwf	strstr@n+1,w
  6488  0356  1903               	btfsc	3,2
  6489  0357  2B90               	goto	l2942
  6490  0358  0825               	movf	strstr@n+1,w
  6491  0359  00F4               	movwf	strlen@s+1
  6492  035A  0824               	movf	strstr@n,w
  6493  035B  00F3               	movwf	strlen@s
  6494  035C  2608               	fcall	_strlen
  6495  035D  0874               	movf	?_strlen+1,w
  6496  035E  0020               	movlb	0	; select bank0
  6497  035F  00AA               	movwf	strstr@nl+1
  6498  0360  0873               	movf	?_strlen,w
  6499  0361  00A9               	movwf	strstr@nl
  6500  0362  2B87               	goto	l2938
  6501  0363                     l2930:	
  6502  0363  0825               	movf	strstr@n+1,w
  6503  0364  00F4               	movwf	strncmp@_r+1
  6504  0365  0824               	movf	strstr@n,w
  6505  0366  00F3               	movwf	strncmp@_r
  6506  0367  082A               	movf	strstr@nl+1,w
  6507  0368  00F6               	movwf	strncmp@n+1
  6508  0369  0829               	movf	strstr@nl,w
  6509  036A  00F5               	movwf	strncmp@n
  6510  036B  082B               	movf	strstr@h,w
  6511  036C  221C               	fcall	_strncmp
  6512  036D  0873               	movf	?_strncmp,w
  6513  036E  0474               	iorwf	?_strncmp+1,w
  6514  036F  1D03               	btfss	3,2
  6515  0370  2B74               	goto	l2936
  6516  0371  0020               	movlb	0	; select bank0
  6517  0372  082B               	movf	strstr@h,w
  6518  0373  0008               	return
  6519  0374                     l2936:	
  6520  0374  0020               	movlb	0	; select bank0
  6521  0375  0824               	movf	strstr@n,w
  6522  0376  0084               	movwf	4
  6523  0377  0825               	movf	strstr@n+1,w
  6524  0378  0085               	movwf	5
  6525  0379  0800               	movf	0,w	;code access
  6526  037A  00A6               	movwf	??_strstr
  6527  037B  01A7               	clrf	??_strstr+1
  6528  037C  0826               	movf	??_strstr,w
  6529  037D  00F3               	movwf	strchr@c
  6530  037E  0827               	movf	??_strstr+1,w
  6531  037F  00F4               	movwf	strchr@c+1
  6532  0380  082B               	movf	strstr@h,w
  6533  0381  3E01               	addlw	1
  6534  0382  26C0               	fcall	_strchr
  6535  0383  0020               	movlb	0	; select bank0
  6536  0384  00A8               	movwf	??_strstr+2
  6537  0385  0828               	movf	??_strstr+2,w
  6538  0386  00AB               	movwf	strstr@h
  6539  0387                     l2938:	
  6540  0387  082B               	movf	strstr@h,w
  6541  0388  1903               	btfsc	3,2
  6542  0389  2B90               	goto	l2942
  6543  038A  082B               	movf	strstr@h,w
  6544  038B  0086               	movwf	6
  6545  038C  0187               	clrf	7
  6546  038D  0801               	movf	1,w
  6547  038E  1D03               	btfss	3,2
  6548  038F  2B63               	goto	l2930
  6549  0390                     l2942:	
  6550  0390  3000               	movlw	0
  6551  0391  0008               	return
  6552  0392                     __end_of_strstr:	
  6553                           
  6554                           	psect	text43
  6555  021C                     __ptext43:	
  6556 ;; *************** function _strncmp *****************
  6557 ;; Defined at:
  6558 ;;		line 3 in file "/pkg/microchip/xc8/v2.00/pic/sources/c99/common/strncmp.c"
  6559 ;; Parameters:    Size  Location     Type
  6560 ;;  _l              1    wreg     PTR const unsigned char 
  6561 ;;		 -> NULL(0), esp_read_data(20), 
  6562 ;;  _r              2    3[COMMON] PTR const unsigned char 
  6563 ;;		 -> STR_13(2), STR_7(7), STR_6(8), STR_5(5), 
  6564 ;;		 -> STR_4(6), STR_3(10), STR_2(3), STR_1(8), 
  6565 ;;  n               2    5[COMMON] unsigned int 
  6566 ;; Auto vars:     Size  Location     Type
  6567 ;;  _l              1    0[BANK0 ] PTR const unsigned char 
  6568 ;;		 -> NULL(0), esp_read_data(20), 
  6569 ;;  r               2    1[BANK0 ] PTR const unsigned char 
  6570 ;;		 -> STR_13(2), STR_7(7), STR_6(8), STR_5(5), 
  6571 ;;		 -> STR_4(6), STR_3(10), STR_2(3), STR_1(8), 
  6572 ;;  l               1    3[BANK0 ] PTR const unsigned char 
  6573 ;;		 -> NULL(0), esp_read_data(20), 
  6574 ;; Return value:  Size  Location     Type
  6575 ;;                  2    3[COMMON] int 
  6576 ;; Registers used:
  6577 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  6578 ;; Tracked objects:
  6579 ;;		On entry : 0/0
  6580 ;;		On exit  : 0/0
  6581 ;;		Unchanged: 0/0
  6582 ;; Data sizes:     COMMON   BANK0   BANK1
  6583 ;;      Params:         4       0       0
  6584 ;;      Locals:         0       4       0
  6585 ;;      Temps:          2       0       0
  6586 ;;      Totals:         6       4       0
  6587 ;;Total ram usage:       10 bytes
  6588 ;; Hardware stack levels used:    1
  6589 ;; Hardware stack levels required when called:    4
  6590 ;; This function calls:
  6591 ;;		Nothing
  6592 ;; This function is called by:
  6593 ;;		_strstr
  6594 ;; This function uses a non-reentrant model
  6595 ;;
  6596                           
  6597                           
  6598                           ;psect for function _strncmp
  6599  021C                     _strncmp:	
  6600                           
  6601                           ;incstack = 0
  6602                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
  6603                           ;strncmp@_l stored from wreg
  6604  021C  0020               	movlb	0	; select bank0
  6605  021D  00A0               	movwf	strncmp@_l
  6606  021E  0820               	movf	strncmp@_l,w
  6607  021F  00F7               	movwf	??_strncmp
  6608  0220  0877               	movf	??_strncmp,w
  6609  0221  00A3               	movwf	strncmp@l
  6610  0222  0874               	movf	strncmp@_r+1,w
  6611  0223  00A2               	movwf	strncmp@r+1
  6612  0224  0873               	movf	strncmp@_r,w
  6613  0225  00A1               	movwf	strncmp@r
  6614  0226  3001               	movlw	1
  6615  0227  02F5               	subwf	strncmp@n,f
  6616  0228  3000               	movlw	0
  6617  0229  3BF6               	subwfb	strncmp@n+1,f
  6618  022A  0A75               	incf	strncmp@n,w
  6619  022B  1D03               	skipz
  6620  022C  2A3F               	goto	l2914
  6621  022D  0A76               	incf	strncmp@n+1,w
  6622  022E  1D03               	btfss	3,2
  6623  022F  2A3F               	goto	l2914
  6624  0230  01F3               	clrf	?_strncmp
  6625  0231  01F4               	clrf	?_strncmp+1
  6626  0232  0008               	return
  6627  0233                     l2908:	
  6628  0233  3001               	movlw	1
  6629  0234  00F7               	movwf	??_strncmp
  6630  0235  0877               	movf	??_strncmp,w
  6631  0236  07A3               	addwf	strncmp@l,f
  6632  0237  3001               	movlw	1
  6633  0238  07A1               	addwf	strncmp@r,f
  6634  0239  3000               	movlw	0
  6635  023A  3DA2               	addwfc	strncmp@r+1,f
  6636  023B  3001               	movlw	1
  6637  023C  02F5               	subwf	strncmp@n,f
  6638  023D  3000               	movlw	0
  6639  023E  3BF6               	subwfb	strncmp@n+1,f
  6640  023F                     l2914:	
  6641  023F  0823               	movf	strncmp@l,w
  6642  0240  0086               	movwf	6
  6643  0241  0187               	clrf	7
  6644  0242  0801               	movf	1,w
  6645  0243  1903               	btfsc	3,2
  6646  0244  2A5D               	goto	l2922
  6647  0245  0821               	movf	strncmp@r,w
  6648  0246  0084               	movwf	4
  6649  0247  0822               	movf	strncmp@r+1,w
  6650  0248  0085               	movwf	5
  6651  0249  0012               	moviw fsr0++
  6652  024A  1903               	btfsc	3,2
  6653  024B  2A5D               	goto	l2922
  6654  024C  0875               	movf	strncmp@n,w
  6655  024D  0476               	iorwf	strncmp@n+1,w
  6656  024E  1903               	btfsc	3,2
  6657  024F  2A5D               	goto	l2922
  6658  0250  0821               	movf	strncmp@r,w
  6659  0251  0084               	movwf	4
  6660  0252  0822               	movf	strncmp@r+1,w
  6661  0253  0085               	movwf	5
  6662  0254  0800               	movf	0,w	;code access
  6663  0255  00F7               	movwf	??_strncmp
  6664  0256  0823               	movf	strncmp@l,w
  6665  0257  0086               	movwf	6
  6666  0258  0187               	clrf	7
  6667  0259  0801               	movf	1,w
  6668  025A  0677               	xorwf	??_strncmp,w
  6669  025B  1903               	skipnz
  6670  025C  2A33               	goto	l2908
  6671  025D                     l2922:	
  6672  025D  0821               	movf	strncmp@r,w
  6673  025E  0084               	movwf	4
  6674  025F  0822               	movf	strncmp@r+1,w
  6675  0260  0085               	movwf	5
  6676  0261  0800               	movf	0,w	;code access
  6677  0262  00F7               	movwf	??_strncmp
  6678  0263  01F8               	clrf	??_strncmp+1
  6679  0264  09F7               	comf	??_strncmp,f
  6680  0265  09F8               	comf	??_strncmp+1,f
  6681  0266  0AF7               	incf	??_strncmp,f
  6682  0267  1903               	skipnz
  6683  0268  0AF8               	incf	??_strncmp+1,f
  6684  0269  0823               	movf	strncmp@l,w
  6685  026A  0086               	movwf	6
  6686  026B  0187               	clrf	7
  6687  026C  0801               	movf	1,w
  6688  026D  0777               	addwf	??_strncmp,w
  6689  026E  00F3               	movwf	?_strncmp
  6690  026F  0878               	movf	??_strncmp+1,w
  6691  0270  1803               	skipnc
  6692  0271  0A78               	incf	??_strncmp+1,w
  6693  0272  00F4               	movwf	?_strncmp+1
  6694  0273  0008               	return
  6695  0274                     __end_of_strncmp:	
  6696                           
  6697                           	psect	text44
  6698  0608                     __ptext44:	
  6699 ;; *************** function _strlen *****************
  6700 ;; Defined at:
  6701 ;;		line 12 in file "/pkg/microchip/xc8/v2.00/pic/sources/c99/common/strlen.c"
  6702 ;; Parameters:    Size  Location     Type
  6703 ;;  s               2    3[COMMON] PTR const unsigned char 
  6704 ;;		 -> STR_13(2), STR_7(7), STR_6(8), STR_5(5), 
  6705 ;;		 -> STR_4(6), STR_3(10), STR_2(3), STR_1(8), 
  6706 ;; Auto vars:     Size  Location     Type
  6707 ;;  a               2    7[COMMON] PTR const unsigned char 
  6708 ;;		 -> STR_13(2), STR_7(7), STR_6(8), STR_5(5), 
  6709 ;;		 -> STR_4(6), STR_3(10), STR_2(3), STR_1(8), 
  6710 ;; Return value:  Size  Location     Type
  6711 ;;                  2    3[COMMON] unsigned int 
  6712 ;; Registers used:
  6713 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6714 ;; Tracked objects:
  6715 ;;		On entry : 0/0
  6716 ;;		On exit  : 0/0
  6717 ;;		Unchanged: 0/0
  6718 ;; Data sizes:     COMMON   BANK0   BANK1
  6719 ;;      Params:         2       0       0
  6720 ;;      Locals:         2       0       0
  6721 ;;      Temps:          2       0       0
  6722 ;;      Totals:         6       0       0
  6723 ;;Total ram usage:        6 bytes
  6724 ;; Hardware stack levels used:    1
  6725 ;; Hardware stack levels required when called:    4
  6726 ;; This function calls:
  6727 ;;		Nothing
  6728 ;; This function is called by:
  6729 ;;		_strstr
  6730 ;; This function uses a non-reentrant model
  6731 ;;
  6732                           
  6733                           
  6734                           ;psect for function _strlen
  6735  0608                     _strlen:	
  6736                           
  6737                           ;incstack = 0
  6738                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
  6739  0608  0874               	movf	strlen@s+1,w
  6740  0609  00F8               	movwf	strlen@a+1
  6741  060A  0873               	movf	strlen@s,w
  6742  060B  00F7               	movwf	strlen@a
  6743  060C                     l2050:	
  6744  060C  0873               	movf	strlen@s,w
  6745  060D  0084               	movwf	4
  6746  060E  0874               	movf	strlen@s+1,w
  6747  060F  0085               	movwf	5
  6748  0610  0012               	moviw fsr0++
  6749  0611  1903               	btfsc	3,2
  6750  0612  2E18               	goto	l2052
  6751  0613  3001               	movlw	1
  6752  0614  07F3               	addwf	strlen@s,f
  6753  0615  3000               	movlw	0
  6754  0616  3DF4               	addwfc	strlen@s+1,f
  6755  0617  2E0C               	goto	l2050
  6756  0618                     l2052:	
  6757  0618  0977               	comf	strlen@a,w
  6758  0619  00F5               	movwf	??_strlen
  6759  061A  0978               	comf	strlen@a+1,w
  6760  061B  00F6               	movwf	??_strlen+1
  6761  061C  0AF5               	incf	??_strlen,f
  6762  061D  1903               	skipnz
  6763  061E  0AF6               	incf	??_strlen+1,f
  6764  061F  0873               	movf	strlen@s,w
  6765  0620  0775               	addwf	??_strlen,w
  6766  0621  00F3               	movwf	?_strlen
  6767  0622  0874               	movf	strlen@s+1,w
  6768  0623  3D76               	addwfc	??_strlen+1,w
  6769  0624  00F4               	movwf	?_strlen+1
  6770  0625  0008               	return
  6771  0626                     __end_of_strlen:	
  6772                           
  6773                           	psect	text45
  6774  06C0                     __ptext45:	
  6775 ;; *************** function _strchr *****************
  6776 ;; Defined at:
  6777 ;;		line 7 in file "/pkg/microchip/xc8/v2.00/pic/sources/c99/common/strchr.c"
  6778 ;; Parameters:    Size  Location     Type
  6779 ;;  s               1    wreg     PTR const unsigned char 
  6780 ;;		 -> NULL(0), esp_read_data(20), 
  6781 ;;  c               2    3[COMMON] int 
  6782 ;; Auto vars:     Size  Location     Type
  6783 ;;  s               1    5[COMMON] PTR const unsigned char 
  6784 ;;		 -> NULL(0), esp_read_data(20), 
  6785 ;; Return value:  Size  Location     Type
  6786 ;;                  1    wreg      PTR unsigned char 
  6787 ;; Registers used:
  6788 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6789 ;; Tracked objects:
  6790 ;;		On entry : 0/0
  6791 ;;		On exit  : 0/0
  6792 ;;		Unchanged: 0/0
  6793 ;; Data sizes:     COMMON   BANK0   BANK1
  6794 ;;      Params:         2       0       0
  6795 ;;      Locals:         1       0       0
  6796 ;;      Temps:          0       0       0
  6797 ;;      Totals:         3       0       0
  6798 ;;Total ram usage:        3 bytes
  6799 ;; Hardware stack levels used:    1
  6800 ;; Hardware stack levels required when called:    4
  6801 ;; This function calls:
  6802 ;;		Nothing
  6803 ;; This function is called by:
  6804 ;;		_strstr
  6805 ;; This function uses a non-reentrant model
  6806 ;;
  6807                           
  6808                           
  6809                           ;psect for function _strchr
  6810  06C0                     _strchr:	
  6811                           
  6812                           ;incstack = 0
  6813                           ; Regs used in _strchr: [wreg+fsr1l+fsr1h+status,2+status,0]
  6814                           ;strchr@s stored from wreg
  6815  06C0  00F5               	movwf	strchr@s
  6816  06C1                     l1130:	
  6817  06C1  0875               	movf	strchr@s,w
  6818  06C2  0086               	movwf	6
  6819  06C3  0187               	clrf	7
  6820  06C4  0801               	movf	1,w
  6821  06C5  0673               	xorwf	strchr@c,w
  6822  06C6  1D03               	skipz
  6823  06C7  2ECA               	goto	l2088
  6824  06C8  0875               	movf	strchr@s,w
  6825  06C9  0008               	return
  6826  06CA                     l2088:	
  6827  06CA  0875               	movf	strchr@s,w
  6828  06CB  0086               	movwf	6
  6829  06CC  0187               	clrf	7
  6830  06CD  0AF5               	incf	strchr@s,f
  6831  06CE  0801               	movf	1,w
  6832  06CF  1D03               	btfss	3,2
  6833  06D0  2EC1               	goto	l1130
  6834  06D1  3000               	movlw	0
  6835  06D2  0008               	return
  6836  06D3                     __end_of_strchr:	
  6837                           
  6838                           	psect	intentry
  6839  0004                     __pintentry:	
  6840 ;; *************** function _INTERRUPT_InterruptManager *****************
  6841 ;; Defined at:
  6842 ;;		line 55 in file "mcc_generated_files/interrupt_manager.c"
  6843 ;; Parameters:    Size  Location     Type
  6844 ;;		None
  6845 ;; Auto vars:     Size  Location     Type
  6846 ;;		None
  6847 ;; Return value:  Size  Location     Type
  6848 ;;                  1    wreg      void 
  6849 ;; Registers used:
  6850 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6851 ;; Tracked objects:
  6852 ;;		On entry : 0/0
  6853 ;;		On exit  : 0/0
  6854 ;;		Unchanged: 0/0
  6855 ;; Data sizes:     COMMON   BANK0   BANK1
  6856 ;;      Params:         0       0       0
  6857 ;;      Locals:         0       0       0
  6858 ;;      Temps:          1       0       0
  6859 ;;      Totals:         1       0       0
  6860 ;;Total ram usage:        1 bytes
  6861 ;; Hardware stack levels used:    1
  6862 ;; Hardware stack levels required when called:    3
  6863 ;; This function calls:
  6864 ;;		Absolute function
  6865 ;;		_ADC_GetConversionResult
  6866 ;;		_ADC_ISR
  6867 ;;		_EUSART_Receive_ISR
  6868 ;;		_EUSART_Transmit_ISR
  6869 ;;		_PIN_MANAGER_IOC
  6870 ;;		_TMR1_ISR
  6871 ;; This function is called by:
  6872 ;;		Interrupt level 1
  6873 ;; This function uses a non-reentrant model
  6874 ;;
  6875                           
  6876  0004                     _INTERRUPT_InterruptManager:	
  6877                           
  6878                           ;incstack = 0
  6879  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  6880                           
  6881                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6882  0005  3180               	pagesel	$
  6883                           
  6884                           ;mcc_generated_files/interrupt_manager.c: 58:     if(INTCONbits.IOCIE == 1 && INTCONbits
      +                          .IOCIF == 1)
  6885  0006  198B               	btfsc	11,3	;volatile
  6886  0007  1C0B               	btfss	11,0	;volatile
  6887  0008  280B               	goto	i1l74
  6888                           
  6889                           ;mcc_generated_files/interrupt_manager.c: 59:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 60:         PIN_MANAGER_IOC();
  6890  0009  27D2               	fcall	_PIN_MANAGER_IOC
  6891                           
  6892                           ;mcc_generated_files/interrupt_manager.c: 61:     }
  6893  000A  283E               	goto	i1l86
  6894  000B                     i1l74:	
  6895                           ;mcc_generated_files/interrupt_manager.c: 62:     else if(INTCONbits.PEIE == 1)
  6896                           
  6897  000B  1F0B               	btfss	11,6	;volatile
  6898  000C  283E               	goto	i1l86
  6899                           
  6900                           ;mcc_generated_files/interrupt_manager.c: 63:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 64:         if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  6901  000D  0021               	movlb	1	; select bank1
  6902  000E  1C11               	btfss	17,0	;volatile
  6903  000F  2815               	goto	i1l77
  6904  0010  0020               	movlb	0	; select bank0
  6905  0011  1C11               	btfss	17,0	;volatile
  6906  0012  2815               	goto	i1l77
  6907                           
  6908                           ;mcc_generated_files/interrupt_manager.c: 65:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 66:             TMR1_ISR();
  6909  0013  26D3               	fcall	_TMR1_ISR
  6910                           
  6911                           ;mcc_generated_files/interrupt_manager.c: 67:         }
  6912  0014  283E               	goto	i1l86
  6913  0015                     i1l77:	
  6914                           ;mcc_generated_files/interrupt_manager.c: 68:         else if(PIE1bits.ADIE == 1 && PIR1
      +                          bits.ADIF == 1)
  6915                           
  6916  0015  0021               	movlb	1	; select bank1
  6917  0016  1F11               	btfss	17,6	;volatile
  6918  0017  2827               	goto	i1l79
  6919  0018  0020               	movlb	0	; select bank0
  6920  0019  1F11               	btfss	17,6	;volatile
  6921  001A  2827               	goto	i1l79
  6922                           
  6923                           ;mcc_generated_files/interrupt_manager.c: 69:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 70:             ADC_value = ADC_GetConversionResult();
  6924  001B  27C2               	fcall	_ADC_GetConversionResult
  6925  001C  0871               	movf	?_ADC_GetConversionResult+1,w
  6926  001D  0020               	movlb	0	; select bank0
  6927  001E  00DD               	movwf	_ADC_value+1	;volatile
  6928  001F  0870               	movf	?_ADC_GetConversionResult,w
  6929  0020  00DC               	movwf	_ADC_value	;volatile
  6930                           
  6931                           ;mcc_generated_files/interrupt_manager.c: 78:             ADC_state = ADC_READY;
  6932  0021  3001               	movlw	1
  6933  0022  00F2               	movwf	??_INTERRUPT_InterruptManager
  6934  0023  0872               	movf	??_INTERRUPT_InterruptManager,w
  6935  0024  00ED               	movwf	_ADC_state	;volatile
  6936                           
  6937                           ;mcc_generated_files/interrupt_manager.c: 80:             ADC_ISR();
  6938  0025  27F4               	fcall	_ADC_ISR
  6939                           
  6940                           ;mcc_generated_files/interrupt_manager.c: 81:         }
  6941  0026  283E               	goto	i1l86
  6942  0027                     i1l79:	
  6943                           ;mcc_generated_files/interrupt_manager.c: 82:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
  6944                           
  6945  0027  0021               	movlb	1	; select bank1
  6946  0028  1E91               	btfss	17,5	;volatile
  6947  0029  2833               	goto	i1l81
  6948  002A  0020               	movlb	0	; select bank0
  6949  002B  1E91               	btfss	17,5	;volatile
  6950  002C  2833               	goto	i1l81
  6951                           
  6952                           ;mcc_generated_files/interrupt_manager.c: 83:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 84:             EUSART_RxDefaultInterruptHandler();
  6953  002D  085F               	movf	_EUSART_RxDefaultInterruptHandler+1,w
  6954  002E  008A               	movwf	10
  6955  002F  085E               	movf	_EUSART_RxDefaultInterruptHandler,w
  6956  0030  000A               	callw
  6957  0031  3180               	pagesel	$
  6958                           
  6959                           ;mcc_generated_files/interrupt_manager.c: 85:         }
  6960  0032  283E               	goto	i1l86
  6961  0033                     i1l81:	
  6962                           ;mcc_generated_files/interrupt_manager.c: 86:         else if(PIE1bits.TXIE == 1 && PIR1
      +                          bits.TXIF == 1)
  6963                           
  6964  0033  0021               	movlb	1	; select bank1
  6965  0034  1E11               	btfss	17,4	;volatile
  6966  0035  283E               	goto	i1l86
  6967  0036  0020               	movlb	0	; select bank0
  6968  0037  1E11               	btfss	17,4	;volatile
  6969  0038  283E               	goto	i1l86
  6970                           
  6971                           ;mcc_generated_files/interrupt_manager.c: 87:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 88:             EUSART_TxDefaultInterruptHandler();
  6972  0039  0861               	movf	_EUSART_TxDefaultInterruptHandler+1,w
  6973  003A  008A               	movwf	10
  6974  003B  0860               	movf	_EUSART_TxDefaultInterruptHandler,w
  6975  003C  000A               	callw
  6976  003D  3180               	pagesel	$
  6977  003E                     i1l86:	
  6978                           ;mcc_generated_files/interrupt_manager.c: 96:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 98:     }
  6979                           
  6980                           ;mcc_generated_files/interrupt_manager.c: 95:     else
  6981                           
  6982                           ;mcc_generated_files/interrupt_manager.c: 94:     }
  6983                           
  6984                           ;mcc_generated_files/interrupt_manager.c: 91:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 93:         }
  6985                           
  6986                           ;mcc_generated_files/interrupt_manager.c: 90:         else
  6987                           
  6988                           ;mcc_generated_files/interrupt_manager.c: 89:         }
  6989                           
  6990  003E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  6991  003F  0009               	retfie
  6992  0040                     __end_of_INTERRUPT_InterruptManager:	
  6993                           
  6994                           	psect	text47
  6995  06D3                     __ptext47:	
  6996 ;; *************** function _TMR1_ISR *****************
  6997 ;; Defined at:
  6998 ;;		line 157 in file "mcc_generated_files/tmr1.c"
  6999 ;; Parameters:    Size  Location     Type
  7000 ;;		None
  7001 ;; Auto vars:     Size  Location     Type
  7002 ;;		None
  7003 ;; Return value:  Size  Location     Type
  7004 ;;                  1    wreg      void 
  7005 ;; Registers used:
  7006 ;;		wreg, status,2, status,0, pclath, cstack
  7007 ;; Tracked objects:
  7008 ;;		On entry : 0/0
  7009 ;;		On exit  : 0/0
  7010 ;;		Unchanged: 0/0
  7011 ;; Data sizes:     COMMON   BANK0   BANK1
  7012 ;;      Params:         0       0       0
  7013 ;;      Locals:         0       0       0
  7014 ;;      Temps:          0       0       0
  7015 ;;      Totals:         0       0       0
  7016 ;;Total ram usage:        0 bytes
  7017 ;; Hardware stack levels used:    1
  7018 ;; Hardware stack levels required when called:    2
  7019 ;; This function calls:
  7020 ;;		Absolute function
  7021 ;;		_TMR1_DefaultInterruptHandler
  7022 ;;		_TMR1_WriteTimer
  7023 ;;		__TMR1_Ready
  7024 ;; This function is called by:
  7025 ;;		_INTERRUPT_InterruptManager
  7026 ;; This function uses a non-reentrant model
  7027 ;;
  7028                           
  7029                           
  7030                           ;psect for function _TMR1_ISR
  7031  06D3                     _TMR1_ISR:	
  7032                           
  7033                           ;mcc_generated_files/tmr1.c: 161:     PIR1bits.TMR1IF = 0;
  7034                           
  7035                           ;incstack = 0
  7036                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
  7037  06D3  0020               	movlb	0	; select bank0
  7038  06D4  1011               	bcf	17,0	;volatile
  7039                           
  7040                           ;mcc_generated_files/tmr1.c: 162:     TMR1_WriteTimer(timer1ReloadVal);
  7041  06D5  085B               	movf	_timer1ReloadVal+1,w	;volatile
  7042  06D6  00F1               	movwf	TMR1_WriteTimer@timerVal+1
  7043  06D7  085A               	movf	_timer1ReloadVal,w	;volatile
  7044  06D8  00F0               	movwf	TMR1_WriteTimer@timerVal
  7045  06D9  26E5               	fcall	_TMR1_WriteTimer
  7046                           
  7047                           ;mcc_generated_files/tmr1.c: 164:     if(TMR1_InterruptHandler)
  7048  06DA  0020               	movlb	0	; select bank0
  7049  06DB  0858               	movf	_TMR1_InterruptHandler,w
  7050  06DC  0459               	iorwf	_TMR1_InterruptHandler+1,w
  7051  06DD  1903               	btfsc	3,2
  7052  06DE  0008               	return
  7053                           
  7054                           ;mcc_generated_files/tmr1.c: 165:     {;mcc_generated_files/tmr1.c: 166:         TMR1_In
      +                          terruptHandler();
  7055  06DF  0859               	movf	_TMR1_InterruptHandler+1,w
  7056  06E0  008A               	movwf	10
  7057  06E1  0858               	movf	_TMR1_InterruptHandler,w
  7058  06E2  000A               	callw
  7059  06E3  3186               	pagesel	$
  7060  06E4  0008               	return
  7061  06E5                     __end_of_TMR1_ISR:	
  7062                           ;mcc_generated_files/tmr1.c: 167:     }
  7063                           
  7064                           
  7065                           	psect	text48
  7066  07FE                     __ptext48:	
  7067 ;; *************** function _TMR1_DefaultInterruptHandler *****************
  7068 ;; Defined at:
  7069 ;;		line 175 in file "mcc_generated_files/tmr1.c"
  7070 ;; Parameters:    Size  Location     Type
  7071 ;;		None
  7072 ;; Auto vars:     Size  Location     Type
  7073 ;;		None
  7074 ;; Return value:  Size  Location     Type
  7075 ;;                  1    wreg      void 
  7076 ;; Registers used:
  7077 ;;		None
  7078 ;; Tracked objects:
  7079 ;;		On entry : 0/0
  7080 ;;		On exit  : 0/0
  7081 ;;		Unchanged: 0/0
  7082 ;; Data sizes:     COMMON   BANK0   BANK1
  7083 ;;      Params:         0       0       0
  7084 ;;      Locals:         0       0       0
  7085 ;;      Temps:          0       0       0
  7086 ;;      Totals:         0       0       0
  7087 ;;Total ram usage:        0 bytes
  7088 ;; Hardware stack levels used:    1
  7089 ;; This function calls:
  7090 ;;		Nothing
  7091 ;; This function is called by:
  7092 ;;		_TMR1_Initialize
  7093 ;;		_TMR1_ISR
  7094 ;; This function uses a non-reentrant model
  7095 ;;
  7096                           
  7097                           
  7098                           ;psect for function _TMR1_DefaultInterruptHandler
  7099  07FE                     _TMR1_DefaultInterruptHandler:	
  7100                           
  7101                           ;incstack = 0
  7102                           ; Regs used in _TMR1_DefaultInterruptHandler: []
  7103  07FE  0008               	return
  7104  07FF                     __end_of_TMR1_DefaultInterruptHandler:	
  7105                           
  7106                           	psect	text49
  7107  07BC                     __ptext49:	
  7108 ;; *************** function __TMR1_Ready *****************
  7109 ;; Defined at:
  7110 ;;		line 169 in file "logger.c"
  7111 ;; Parameters:    Size  Location     Type
  7112 ;;		None
  7113 ;; Auto vars:     Size  Location     Type
  7114 ;;		None
  7115 ;; Return value:  Size  Location     Type
  7116 ;;                  1    wreg      void 
  7117 ;; Registers used:
  7118 ;;		wreg, status,2, status,0, pclath, cstack
  7119 ;; Tracked objects:
  7120 ;;		On entry : 0/0
  7121 ;;		On exit  : 0/0
  7122 ;;		Unchanged: 0/0
  7123 ;; Data sizes:     COMMON   BANK0   BANK1
  7124 ;;      Params:         0       0       0
  7125 ;;      Locals:         0       0       0
  7126 ;;      Temps:          0       0       0
  7127 ;;      Totals:         0       0       0
  7128 ;;Total ram usage:        0 bytes
  7129 ;; Hardware stack levels used:    1
  7130 ;; Hardware stack levels required when called:    1
  7131 ;; This function calls:
  7132 ;;		i1_ADC_StartConversion
  7133 ;; This function is called by:
  7134 ;;		_logger_initialize
  7135 ;;		_TMR1_ISR
  7136 ;; This function uses a non-reentrant model
  7137 ;;
  7138                           
  7139                           
  7140                           ;psect for function __TMR1_Ready
  7141  07BC                     __TMR1_Ready:	
  7142                           
  7143                           ;logger.c: 171:     if (TMR1_state == TMR1_RUNNING) {
  7144                           
  7145                           ;incstack = 0
  7146                           ; Regs used in __TMR1_Ready: [wreg+status,2+status,0+pclath+cstack]
  7147  07BC  0020               	movlb	0	; select bank0
  7148  07BD  0364               	decf	_TMR1_state,w	;volatile
  7149  07BE  1D03               	btfss	3,2
  7150  07BF  0008               	return
  7151                           
  7152                           ;logger.c: 180:         ADC_StartConversion();
  7153  07C0  27F1               	fcall	i1_ADC_StartConversion
  7154  07C1  0008               	return
  7155  07C2                     __end_of__TMR1_Ready:	
  7156                           ;logger.c: 184:     }
  7157                           
  7158                           
  7159                           	psect	text50
  7160  07F1                     __ptext50:	
  7161 ;; *************** function i1_ADC_StartConversion *****************
  7162 ;; Defined at:
  7163 ;;		line 93 in file "mcc_generated_files/adc.c"
  7164 ;; Parameters:    Size  Location     Type
  7165 ;;		None
  7166 ;; Auto vars:     Size  Location     Type
  7167 ;;		None
  7168 ;; Return value:  Size  Location     Type
  7169 ;;                  1    wreg      void 
  7170 ;; Registers used:
  7171 ;;		None
  7172 ;; Tracked objects:
  7173 ;;		On entry : 0/0
  7174 ;;		On exit  : 0/0
  7175 ;;		Unchanged: 0/0
  7176 ;; Data sizes:     COMMON   BANK0   BANK1
  7177 ;;      Params:         0       0       0
  7178 ;;      Locals:         0       0       0
  7179 ;;      Temps:          0       0       0
  7180 ;;      Totals:         0       0       0
  7181 ;;Total ram usage:        0 bytes
  7182 ;; Hardware stack levels used:    1
  7183 ;; This function calls:
  7184 ;;		Nothing
  7185 ;; This function is called by:
  7186 ;;		__TMR1_Ready
  7187 ;; This function uses a non-reentrant model
  7188 ;;
  7189                           
  7190                           
  7191                           ;psect for function i1_ADC_StartConversion
  7192  07F1                     i1_ADC_StartConversion:	
  7193                           
  7194                           ;mcc_generated_files/adc.c: 96:     ADCON0bits.GO_nDONE = 1;
  7195                           
  7196                           ;incstack = 0
  7197                           ; Regs used in i1_ADC_StartConversion: []
  7198  07F1  0021               	movlb	1	; select bank1
  7199  07F2  149D               	bsf	29,1	;volatile
  7200  07F3  0008               	return
  7201  07F4                     __end_ofi1_ADC_StartConversion:	
  7202                           
  7203                           	psect	text51
  7204  06E5                     __ptext51:	
  7205 ;; *************** function _TMR1_WriteTimer *****************
  7206 ;; Defined at:
  7207 ;;		line 120 in file "mcc_generated_files/tmr1.c"
  7208 ;; Parameters:    Size  Location     Type
  7209 ;;  timerVal        2    0[COMMON] unsigned short 
  7210 ;; Auto vars:     Size  Location     Type
  7211 ;;		None
  7212 ;; Return value:  Size  Location     Type
  7213 ;;                  1    wreg      void 
  7214 ;; Registers used:
  7215 ;;		wreg, status,2
  7216 ;; Tracked objects:
  7217 ;;		On entry : 0/0
  7218 ;;		On exit  : 0/0
  7219 ;;		Unchanged: 0/0
  7220 ;; Data sizes:     COMMON   BANK0   BANK1
  7221 ;;      Params:         2       0       0
  7222 ;;      Locals:         0       0       0
  7223 ;;      Temps:          0       0       0
  7224 ;;      Totals:         2       0       0
  7225 ;;Total ram usage:        2 bytes
  7226 ;; Hardware stack levels used:    1
  7227 ;; This function calls:
  7228 ;;		Nothing
  7229 ;; This function is called by:
  7230 ;;		_TMR1_ISR
  7231 ;;		_TMR1_Reload
  7232 ;; This function uses a non-reentrant model
  7233 ;;
  7234                           
  7235                           
  7236                           ;psect for function _TMR1_WriteTimer
  7237  06E5                     _TMR1_WriteTimer:	
  7238                           
  7239                           ;mcc_generated_files/tmr1.c: 120: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr1.c: 121: {;mcc_generated_files/tmr1.c: 122:     if (T1CONbits.nT1SYNC == 1)
  7240                           
  7241                           ;incstack = 0
  7242                           ; Regs used in _TMR1_WriteTimer: [wreg+status,2]
  7243  06E5  0020               	movlb	0	; select bank0
  7244  06E6  1D18               	btfss	24,2	;volatile
  7245  06E7  2EEF               	goto	i1l2622
  7246                           
  7247                           ;mcc_generated_files/tmr1.c: 123:     {;mcc_generated_files/tmr1.c: 125:         T1CONbi
      +                          ts.TMR1ON = 0;
  7248  06E8  1018               	bcf	24,0	;volatile
  7249                           
  7250                           ;mcc_generated_files/tmr1.c: 128:         TMR1H = (timerVal >> 8);
  7251  06E9  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  7252  06EA  0097               	movwf	23	;volatile
  7253                           
  7254                           ;mcc_generated_files/tmr1.c: 129:         TMR1L = timerVal;
  7255  06EB  0870               	movf	TMR1_WriteTimer@timerVal,w
  7256  06EC  0096               	movwf	22	;volatile
  7257                           
  7258                           ;mcc_generated_files/tmr1.c: 132:         T1CONbits.TMR1ON =1;
  7259  06ED  1418               	bsf	24,0	;volatile
  7260                           
  7261                           ;mcc_generated_files/tmr1.c: 133:     }
  7262  06EE  0008               	return
  7263  06EF                     i1l2622:	
  7264                           ;mcc_generated_files/tmr1.c: 134:     else
  7265                           
  7266                           
  7267                           ;mcc_generated_files/tmr1.c: 135:     {;mcc_generated_files/tmr1.c: 137:         TMR1H =
      +                           (timerVal >> 8);
  7268  06EF  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  7269  06F0  0097               	movwf	23	;volatile
  7270                           
  7271                           ;mcc_generated_files/tmr1.c: 138:         TMR1L = timerVal;
  7272  06F1  0870               	movf	TMR1_WriteTimer@timerVal,w
  7273  06F2  0096               	movwf	22	;volatile
  7274  06F3  0008               	return
  7275  06F4                     __end_of_TMR1_WriteTimer:	
  7276                           ;mcc_generated_files/tmr1.c: 139:     }
  7277                           
  7278                           
  7279                           	psect	text52
  7280  07D2                     __ptext52:	
  7281 ;; *************** function _PIN_MANAGER_IOC *****************
  7282 ;; Defined at:
  7283 ;;		line 115 in file "mcc_generated_files/pin_manager.c"
  7284 ;; Parameters:    Size  Location     Type
  7285 ;;		None
  7286 ;; Auto vars:     Size  Location     Type
  7287 ;;		None
  7288 ;; Return value:  Size  Location     Type
  7289 ;;                  1    wreg      void 
  7290 ;; Registers used:
  7291 ;;		wreg, status,2, status,0, pclath, cstack
  7292 ;; Tracked objects:
  7293 ;;		On entry : 0/0
  7294 ;;		On exit  : 0/0
  7295 ;;		Unchanged: 0/0
  7296 ;; Data sizes:     COMMON   BANK0   BANK1
  7297 ;;      Params:         0       0       0
  7298 ;;      Locals:         0       0       0
  7299 ;;      Temps:          0       0       0
  7300 ;;      Totals:         0       0       0
  7301 ;;Total ram usage:        0 bytes
  7302 ;; Hardware stack levels used:    1
  7303 ;; Hardware stack levels required when called:    2
  7304 ;; This function calls:
  7305 ;;		_IOCAF4_ISR
  7306 ;; This function is called by:
  7307 ;;		_INTERRUPT_InterruptManager
  7308 ;; This function uses a non-reentrant model
  7309 ;;
  7310                           
  7311                           
  7312                           ;psect for function _PIN_MANAGER_IOC
  7313  07D2                     _PIN_MANAGER_IOC:	
  7314                           
  7315                           ;mcc_generated_files/pin_manager.c: 118:     if(IOCAFbits.IOCAF4 == 1)
  7316                           
  7317                           ;incstack = 0
  7318                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
  7319  07D2  0027               	movlb	7	; select bank7
  7320  07D3  1E13               	btfss	19,4	;volatile
  7321  07D4  0008               	return
  7322                           
  7323                           ;mcc_generated_files/pin_manager.c: 119:     {;mcc_generated_files/pin_manager.c: 120:  
      +                                 IOCAF4_ISR();
  7324  07D5  271D               	fcall	_IOCAF4_ISR
  7325  07D6  0008               	return
  7326  07D7                     __end_of_PIN_MANAGER_IOC:	
  7327                           ;mcc_generated_files/pin_manager.c: 121:     }
  7328                           
  7329                           
  7330                           	psect	text53
  7331  071D                     __ptext53:	
  7332 ;; *************** function _IOCAF4_ISR *****************
  7333 ;; Defined at:
  7334 ;;		line 127 in file "mcc_generated_files/pin_manager.c"
  7335 ;; Parameters:    Size  Location     Type
  7336 ;;		None
  7337 ;; Auto vars:     Size  Location     Type
  7338 ;;		None
  7339 ;; Return value:  Size  Location     Type
  7340 ;;                  1    wreg      void 
  7341 ;; Registers used:
  7342 ;;		wreg, status,2, status,0, pclath, cstack
  7343 ;; Tracked objects:
  7344 ;;		On entry : 0/0
  7345 ;;		On exit  : 0/0
  7346 ;;		Unchanged: 0/0
  7347 ;; Data sizes:     COMMON   BANK0   BANK1
  7348 ;;      Params:         0       0       0
  7349 ;;      Locals:         0       0       0
  7350 ;;      Temps:          0       0       0
  7351 ;;      Totals:         0       0       0
  7352 ;;Total ram usage:        0 bytes
  7353 ;; Hardware stack levels used:    1
  7354 ;; Hardware stack levels required when called:    1
  7355 ;; This function calls:
  7356 ;;		Absolute function
  7357 ;;		_IOCAF4_DefaultInterruptHandler
  7358 ;;		__IOC_Ready
  7359 ;; This function is called by:
  7360 ;;		_PIN_MANAGER_IOC
  7361 ;; This function uses a non-reentrant model
  7362 ;;
  7363                           
  7364                           
  7365                           ;psect for function _IOCAF4_ISR
  7366  071D                     _IOCAF4_ISR:	
  7367                           
  7368                           ;mcc_generated_files/pin_manager.c: 132:     if(IOCAF4_InterruptHandler)
  7369                           
  7370                           ;incstack = 0
  7371                           ; Regs used in _IOCAF4_ISR: [wreg+status,2+status,0+pclath+cstack]
  7372  071D  0020               	movlb	0	; select bank0
  7373  071E  086E               	movf	_IOCAF4_InterruptHandler,w
  7374  071F  046F               	iorwf	_IOCAF4_InterruptHandler+1,w
  7375  0720  1903               	btfsc	3,2
  7376  0721  2F27               	goto	i1l2630
  7377                           
  7378                           ;mcc_generated_files/pin_manager.c: 133:     {;mcc_generated_files/pin_manager.c: 134:  
      +                                 IOCAF4_InterruptHandler();
  7379  0722  086F               	movf	_IOCAF4_InterruptHandler+1,w
  7380  0723  008A               	movwf	10
  7381  0724  086E               	movf	_IOCAF4_InterruptHandler,w
  7382  0725  000A               	callw
  7383  0726  3187               	pagesel	$
  7384  0727                     i1l2630:	
  7385                           ;mcc_generated_files/pin_manager.c: 135:     }
  7386                           
  7387                           
  7388                           ;mcc_generated_files/pin_manager.c: 136:     IOCAFbits.IOCAF4 = 0;
  7389  0727  0027               	movlb	7	; select bank7
  7390  0728  1213               	bcf	19,4	;volatile
  7391  0729  0008               	return
  7392  072A                     __end_of_IOCAF4_ISR:	
  7393                           
  7394                           	psect	text54
  7395  07FF                     __ptext54:	
  7396 ;; *************** function _IOCAF4_DefaultInterruptHandler *****************
  7397 ;; Defined at:
  7398 ;;		line 149 in file "mcc_generated_files/pin_manager.c"
  7399 ;; Parameters:    Size  Location     Type
  7400 ;;		None
  7401 ;; Auto vars:     Size  Location     Type
  7402 ;;		None
  7403 ;; Return value:  Size  Location     Type
  7404 ;;                  1    wreg      void 
  7405 ;; Registers used:
  7406 ;;		None
  7407 ;; Tracked objects:
  7408 ;;		On entry : 0/0
  7409 ;;		On exit  : 0/0
  7410 ;;		Unchanged: 0/0
  7411 ;; Data sizes:     COMMON   BANK0   BANK1
  7412 ;;      Params:         0       0       0
  7413 ;;      Locals:         0       0       0
  7414 ;;      Temps:          0       0       0
  7415 ;;      Totals:         0       0       0
  7416 ;;Total ram usage:        0 bytes
  7417 ;; Hardware stack levels used:    1
  7418 ;; This function calls:
  7419 ;;		Nothing
  7420 ;; This function is called by:
  7421 ;;		_PIN_MANAGER_Initialize
  7422 ;;		_IOCAF4_ISR
  7423 ;; This function uses a non-reentrant model
  7424 ;;
  7425                           
  7426                           
  7427                           ;psect for function _IOCAF4_DefaultInterruptHandler
  7428  07FF                     _IOCAF4_DefaultInterruptHandler:	
  7429                           
  7430                           ;incstack = 0
  7431                           ; Regs used in _IOCAF4_DefaultInterruptHandler: []
  7432  07FF  0008               	return
  7433  0800                     __end_of_IOCAF4_DefaultInterruptHandler:	
  7434                           
  7435                           	psect	text55
  7436  074A                     __ptext55:	
  7437 ;; *************** function __IOC_Ready *****************
  7438 ;; Defined at:
  7439 ;;		line 187 in file "logger.c"
  7440 ;; Parameters:    Size  Location     Type
  7441 ;;		None
  7442 ;; Auto vars:     Size  Location     Type
  7443 ;;		None
  7444 ;; Return value:  Size  Location     Type
  7445 ;;                  1    wreg      void 
  7446 ;; Registers used:
  7447 ;;		wreg, status,2
  7448 ;; Tracked objects:
  7449 ;;		On entry : 0/0
  7450 ;;		On exit  : 0/0
  7451 ;;		Unchanged: 0/0
  7452 ;; Data sizes:     COMMON   BANK0   BANK1
  7453 ;;      Params:         0       0       0
  7454 ;;      Locals:         0       0       0
  7455 ;;      Temps:          1       0       0
  7456 ;;      Totals:         1       0       0
  7457 ;;Total ram usage:        1 bytes
  7458 ;; Hardware stack levels used:    1
  7459 ;; This function calls:
  7460 ;;		Nothing
  7461 ;; This function is called by:
  7462 ;;		_logger_initialize
  7463 ;;		_IOCAF4_ISR
  7464 ;; This function uses a non-reentrant model
  7465 ;;
  7466                           
  7467                           
  7468                           ;psect for function __IOC_Ready
  7469  074A                     __IOC_Ready:	
  7470                           
  7471                           ;logger.c: 190:     IOC_value = PORTAbits.RA4;
  7472                           
  7473                           ;incstack = 0
  7474                           ; Regs used in __IOC_Ready: [wreg+status,2]
  7475  074A  3000               	movlw	0
  7476  074B  0020               	movlb	0	; select bank0
  7477  074C  1A0C               	btfsc	12,4	;volatile
  7478  074D  3001               	movlw	1
  7479  074E  00E2               	movwf	_IOC_value	;volatile
  7480                           
  7481                           ;logger.c: 191:     IOC_state = IOC_READY;
  7482  074F  3001               	movlw	1
  7483  0750  00F0               	movwf	??__IOC_Ready
  7484  0751  0870               	movf	??__IOC_Ready,w
  7485  0752  00E3               	movwf	_IOC_state	;volatile
  7486  0753  0008               	return
  7487  0754                     __end_of__IOC_Ready:	
  7488                           
  7489                           	psect	text56
  7490  0643                     __ptext56:	
  7491 ;; *************** function _EUSART_Transmit_ISR *****************
  7492 ;; Defined at:
  7493 ;;		line 172 in file "mcc_generated_files/eusart.c"
  7494 ;; Parameters:    Size  Location     Type
  7495 ;;		None
  7496 ;; Auto vars:     Size  Location     Type
  7497 ;;		None
  7498 ;; Return value:  Size  Location     Type
  7499 ;;                  1    wreg      void 
  7500 ;; Registers used:
  7501 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7502 ;; Tracked objects:
  7503 ;;		On entry : 0/0
  7504 ;;		On exit  : 0/0
  7505 ;;		Unchanged: 0/0
  7506 ;; Data sizes:     COMMON   BANK0   BANK1
  7507 ;;      Params:         0       0       0
  7508 ;;      Locals:         0       0       0
  7509 ;;      Temps:          1       0       0
  7510 ;;      Totals:         1       0       0
  7511 ;;Total ram usage:        1 bytes
  7512 ;; Hardware stack levels used:    1
  7513 ;; This function calls:
  7514 ;;		Nothing
  7515 ;; This function is called by:
  7516 ;;		_EUSART_Initialize
  7517 ;;		_INTERRUPT_InterruptManager
  7518 ;; This function uses a non-reentrant model
  7519 ;;
  7520                           
  7521                           
  7522                           ;psect for function _EUSART_Transmit_ISR
  7523  0643                     _EUSART_Transmit_ISR:	
  7524                           
  7525                           ;mcc_generated_files/eusart.c: 176:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
  7526                           
  7527                           ;incstack = 0
  7528                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  7529  0643  300A               	movlw	10
  7530  0644  0279               	subwf	_eusartTxBufferRemaining,w	;volatile
  7531  0645  1803               	skipnc
  7532  0646  2E5D               	goto	i1l165
  7533                           
  7534                           ;mcc_generated_files/eusart.c: 177:     {;mcc_generated_files/eusart.c: 178:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
  7535  0647  0020               	movlb	0	; select bank0
  7536  0648  086C               	movf	_eusartTxTail,w
  7537  0649  3E4C               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  7538  064A  0086               	movwf	6
  7539  064B  0187               	clrf	7
  7540  064C  0801               	movf	1,w
  7541  064D  0023               	movlb	3	; select bank3
  7542  064E  009A               	movwf	26	;volatile
  7543  064F  3001               	movlw	1
  7544  0650  00F0               	movwf	??_EUSART_Transmit_ISR
  7545  0651  0870               	movf	??_EUSART_Transmit_ISR,w
  7546  0652  0020               	movlb	0	; select bank0
  7547  0653  07EC               	addwf	_eusartTxTail,f	;volatile
  7548                           
  7549                           ;mcc_generated_files/eusart.c: 179:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
  7550  0654  300A               	movlw	10
  7551  0655  026C               	subwf	_eusartTxTail,w	;volatile
  7552  0656  1803               	btfsc	3,0
  7553                           
  7554                           ;mcc_generated_files/eusart.c: 180:         {;mcc_generated_files/eusart.c: 181:        
      +                               eusartTxTail = 0;
  7555  0657  01EC               	clrf	_eusartTxTail	;volatile
  7556                           
  7557                           ;mcc_generated_files/eusart.c: 183:         eusartTxBufferRemaining++;
  7558                           
  7559                           ;mcc_generated_files/eusart.c: 182:         }
  7560  0658  3001               	movlw	1
  7561  0659  00F0               	movwf	??_EUSART_Transmit_ISR
  7562  065A  0870               	movf	??_EUSART_Transmit_ISR,w
  7563  065B  07F9               	addwf	_eusartTxBufferRemaining,f	;volatile
  7564                           
  7565                           ;mcc_generated_files/eusart.c: 184:     }
  7566  065C  0008               	return
  7567  065D                     i1l165:	
  7568                           ;mcc_generated_files/eusart.c: 185:     else
  7569                           
  7570                           
  7571                           ;mcc_generated_files/eusart.c: 186:     {;mcc_generated_files/eusart.c: 187:         PIE
      +                          1bits.TXIE = 0;
  7572  065D  0021               	movlb	1	; select bank1
  7573  065E  1211               	bcf	17,4	;volatile
  7574  065F  0008               	return
  7575  0660                     __end_of_EUSART_Transmit_ISR:	
  7576                           ;mcc_generated_files/eusart.c: 188:     }
  7577                           
  7578                           
  7579                           	psect	text57
  7580  067B                     __ptext57:	
  7581 ;; *************** function _EUSART_Receive_ISR *****************
  7582 ;; Defined at:
  7583 ;;		line 191 in file "mcc_generated_files/eusart.c"
  7584 ;; Parameters:    Size  Location     Type
  7585 ;;		None
  7586 ;; Auto vars:     Size  Location     Type
  7587 ;;		None
  7588 ;; Return value:  Size  Location     Type
  7589 ;;                  1    wreg      void 
  7590 ;; Registers used:
  7591 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7592 ;; Tracked objects:
  7593 ;;		On entry : 0/0
  7594 ;;		On exit  : 0/0
  7595 ;;		Unchanged: 0/0
  7596 ;; Data sizes:     COMMON   BANK0   BANK1
  7597 ;;      Params:         0       0       0
  7598 ;;      Locals:         0       0       0
  7599 ;;      Temps:          1       0       0
  7600 ;;      Totals:         1       0       0
  7601 ;;Total ram usage:        1 bytes
  7602 ;; Hardware stack levels used:    1
  7603 ;; This function calls:
  7604 ;;		Nothing
  7605 ;; This function is called by:
  7606 ;;		_EUSART_Initialize
  7607 ;;		_INTERRUPT_InterruptManager
  7608 ;; This function uses a non-reentrant model
  7609 ;;
  7610                           
  7611                           
  7612                           ;psect for function _EUSART_Receive_ISR
  7613  067B                     _EUSART_Receive_ISR:	
  7614                           
  7615                           ;mcc_generated_files/eusart.c: 194:     if(1 == RCSTAbits.OERR)
  7616                           
  7617                           ;incstack = 0
  7618                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  7619  067B  0023               	movlb	3	; select bank3
  7620  067C  1C9D               	btfss	29,1	;volatile
  7621  067D  2E80               	goto	i1l2712
  7622                           
  7623                           ;mcc_generated_files/eusart.c: 195:     {;mcc_generated_files/eusart.c: 198:         RCS
      +                          TAbits.CREN = 0;
  7624  067E  121D               	bcf	29,4	;volatile
  7625                           
  7626                           ;mcc_generated_files/eusart.c: 199:         RCSTAbits.CREN = 1;
  7627  067F  161D               	bsf	29,4	;volatile
  7628  0680                     i1l2712:	
  7629                           ;mcc_generated_files/eusart.c: 200:     }
  7630                           
  7631                           
  7632                           ;mcc_generated_files/eusart.c: 203:     eusartRxBuffer[eusartRxHead++] = RCREG;
  7633  0680  0819               	movf	25,w	;volatile
  7634  0681  00F0               	movwf	??_EUSART_Receive_ISR
  7635  0682  0020               	movlb	0	; select bank0
  7636  0683  086B               	movf	_eusartRxHead,w
  7637  0684  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  7638  0685  0086               	movwf	6
  7639  0686  0187               	clrf	7
  7640  0687  0870               	movf	??_EUSART_Receive_ISR,w
  7641  0688  0081               	movwf	1
  7642  0689  3001               	movlw	1
  7643  068A  00F0               	movwf	??_EUSART_Receive_ISR
  7644  068B  0870               	movf	??_EUSART_Receive_ISR,w
  7645  068C  07EB               	addwf	_eusartRxHead,f	;volatile
  7646                           
  7647                           ;mcc_generated_files/eusart.c: 204:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
  7648  068D  300C               	movlw	12
  7649  068E  026B               	subwf	_eusartRxHead,w	;volatile
  7650  068F  1803               	btfsc	3,0
  7651                           
  7652                           ;mcc_generated_files/eusart.c: 205:     {;mcc_generated_files/eusart.c: 206:         eus
      +                          artRxHead = 0;
  7653  0690  01EB               	clrf	_eusartRxHead	;volatile
  7654                           
  7655                           ;mcc_generated_files/eusart.c: 208:     eusartRxCount++;
  7656                           
  7657                           ;mcc_generated_files/eusart.c: 207:     }
  7658  0691  3001               	movlw	1
  7659  0692  00F0               	movwf	??_EUSART_Receive_ISR
  7660  0693  0870               	movf	??_EUSART_Receive_ISR,w
  7661  0694  07E9               	addwf	_eusartRxCount,f	;volatile
  7662  0695  0008               	return
  7663  0696                     __end_of_EUSART_Receive_ISR:	
  7664                           
  7665                           	psect	text58
  7666  07F4                     __ptext58:	
  7667 ;; *************** function _ADC_ISR *****************
  7668 ;; Defined at:
  7669 ;;		line 140 in file "mcc_generated_files/adc.c"
  7670 ;; Parameters:    Size  Location     Type
  7671 ;;		None
  7672 ;; Auto vars:     Size  Location     Type
  7673 ;;		None
  7674 ;; Return value:  Size  Location     Type
  7675 ;;                  1    wreg      void 
  7676 ;; Registers used:
  7677 ;;		None
  7678 ;; Tracked objects:
  7679 ;;		On entry : 0/0
  7680 ;;		On exit  : 0/0
  7681 ;;		Unchanged: 0/0
  7682 ;; Data sizes:     COMMON   BANK0   BANK1
  7683 ;;      Params:         0       0       0
  7684 ;;      Locals:         0       0       0
  7685 ;;      Temps:          0       0       0
  7686 ;;      Totals:         0       0       0
  7687 ;;Total ram usage:        0 bytes
  7688 ;; Hardware stack levels used:    1
  7689 ;; This function calls:
  7690 ;;		Nothing
  7691 ;; This function is called by:
  7692 ;;		_INTERRUPT_InterruptManager
  7693 ;; This function uses a non-reentrant model
  7694 ;;
  7695                           
  7696                           
  7697                           ;psect for function _ADC_ISR
  7698  07F4                     _ADC_ISR:	
  7699                           
  7700                           ;mcc_generated_files/adc.c: 143:     PIR1bits.ADIF = 0;
  7701                           
  7702                           ;incstack = 0
  7703                           ; Regs used in _ADC_ISR: []
  7704  07F4  0020               	movlb	0	; select bank0
  7705  07F5  1311               	bcf	17,6	;volatile
  7706  07F6  0008               	return
  7707  07F7                     __end_of_ADC_ISR:	
  7708                           
  7709                           	psect	text59
  7710  07C2                     __ptext59:	
  7711 ;; *************** function _ADC_GetConversionResult *****************
  7712 ;; Defined at:
  7713 ;;		line 106 in file "mcc_generated_files/adc.c"
  7714 ;; Parameters:    Size  Location     Type
  7715 ;;		None
  7716 ;; Auto vars:     Size  Location     Type
  7717 ;;		None
  7718 ;; Return value:  Size  Location     Type
  7719 ;;                  2    0[COMMON] unsigned short 
  7720 ;; Registers used:
  7721 ;;		wreg
  7722 ;; Tracked objects:
  7723 ;;		On entry : 0/0
  7724 ;;		On exit  : 0/0
  7725 ;;		Unchanged: 0/0
  7726 ;; Data sizes:     COMMON   BANK0   BANK1
  7727 ;;      Params:         2       0       0
  7728 ;;      Locals:         0       0       0
  7729 ;;      Temps:          0       0       0
  7730 ;;      Totals:         2       0       0
  7731 ;;Total ram usage:        2 bytes
  7732 ;; Hardware stack levels used:    1
  7733 ;; This function calls:
  7734 ;;		Nothing
  7735 ;; This function is called by:
  7736 ;;		_INTERRUPT_InterruptManager
  7737 ;; This function uses a non-reentrant model
  7738 ;;
  7739                           
  7740                           
  7741                           ;psect for function _ADC_GetConversionResult
  7742  07C2                     _ADC_GetConversionResult:	
  7743                           
  7744                           ;mcc_generated_files/adc.c: 109:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
  7745                           
  7746                           ;incstack = 0
  7747                           ; Regs used in _ADC_GetConversionResult: [wreg]
  7748  07C2  0021               	movlb	1	; select bank1
  7749  07C3  081C               	movf	28,w	;volatile
  7750  07C4  00F1               	movwf	?_ADC_GetConversionResult+1
  7751  07C5  081B               	movf	27,w	;volatile
  7752  07C6  00F0               	movwf	?_ADC_GetConversionResult
  7753  07C7  0008               	return
  7754  07C8                     __end_of_ADC_GetConversionResult:	
  7755  007E                     btemp	set	126	;btemp
  7756  007E                     int$flags	set	126
  7757  007E                     wtemp0	set	126


Data Sizes:
    Strings     171
    Constant    0
    Data        0
    BSS         68
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      11
    BANK0            80     44      80
    BANK1            32      0      32

Pointer List with Targets:

    strncmp@_r	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_13(CODE[2]), STR_7(CODE[7]), STR_6(CODE[8]), STR_5(CODE[5]), 
		 -> STR_4(CODE[6]), STR_3(CODE[10]), STR_2(CODE[3]), STR_1(CODE[8]), 

    strncmp@r	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_13(CODE[2]), STR_7(CODE[7]), STR_6(CODE[8]), STR_5(CODE[5]), 
		 -> STR_4(CODE[6]), STR_3(CODE[10]), STR_2(CODE[3]), STR_1(CODE[8]), 

    strncmp@_l	PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), esp_read_data(BANK1[20]), 

    strncmp@l	PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), esp_read_data(BANK1[20]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_13(CODE[2]), STR_7(CODE[7]), STR_6(CODE[8]), STR_5(CODE[5]), 
		 -> STR_4(CODE[6]), STR_3(CODE[10]), STR_2(CODE[3]), STR_1(CODE[8]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_13(CODE[2]), STR_7(CODE[7]), STR_6(CODE[8]), STR_5(CODE[5]), 
		 -> STR_4(CODE[6]), STR_3(CODE[10]), STR_2(CODE[3]), STR_1(CODE[8]), 

    strchr@s	PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), esp_read_data(BANK1[20]), 

    sp__strchr	PTR unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), esp_read_data(BANK1[20]), 

    strstr@h	PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), esp_read_data(BANK1[20]), 

    strstr@n	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_13(CODE[2]), STR_7(CODE[7]), STR_6(CODE[8]), STR_5(CODE[5]), 
		 -> STR_4(CODE[6]), STR_3(CODE[10]), STR_2(CODE[3]), STR_1(CODE[8]), 

    ESP_Set_application_handler@applicationHandler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> ESP_default_application_handler(), process_message(), 

    ESP_write@pt	PTR unsigned char  size(2) Largest target is 7
		 -> STR_20(CODE[7]), STR_19(CODE[7]), read_analog@mess(BANK0[6]), STR_18(CODE[4]), 

    ESP_external_message_handler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> ESP_default_application_handler(), process_message(), Absolute function(), 

    ESP_process_rx_data@index	PTR unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), esp_read_data(BANK1[20]), 

    sp__strstr	PTR unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), esp_read_data(BANK1[20]), 

    ESP_process_message@aux	PTR unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), esp_read_data(BANK1[20]), 

    _sprintf@mess	PTR unsigned char  size(1) Largest target is 6
		 -> read_analog@mess(BANK0[6]), 

    write@pt	PTR unsigned char  size(2) Largest target is 7
		 -> STR_20(CODE[7]), STR_19(CODE[7]), read_analog@mess(BANK0[6]), STR_18(CODE[4]), 
		 -> ESP_write@res(BANK0[1]), ESP_write@aux(BANK0[1]), 

    _puts@pt	PTR unsigned char  size(2) Largest target is 34
		 -> STR_22(CODE[3]), STR_21(CODE[3]), STR_17(CODE[3]), STR_16(CODE[3]), 
		 -> STR_15(CODE[2]), STR_14(CODE[12]), STR_12(CODE[20]), STR_11(CODE[14]), 
		 -> STR_10(CODE[34]), STR_9(CODE[14]), STR_8(CODE[5]), 

    IOCAF4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> _IOC_Ready(), IOCAF4_DefaultInterruptHandler(), 

    IOCAF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> _IOC_Ready(), IOCAF4_DefaultInterruptHandler(), Absolute function(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> _TMR1_Ready(), TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> _TMR1_Ready(), Absolute function(), TMR1_DefaultInterruptHandler(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Transmit_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Receive_ISR(), 


Critical Paths under _main in COMMON

    __sprintf->___lwmod
    _logger_initialize->_ADC_SelectChannel
    _logger_initialize->_ESP_Set_application_handler
    _logger_initialize->_IOCAF4_SetInterruptHandler
    _logger_initialize->_TMR1_SetInterruptHandler
    _SYSTEM_Initialize->_EUSART_Initialize
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF4_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _ESP_write->_write
    _write->_EUSART_Write
    _ESP_initialize->_ESP_Set_application_handler
    __puts->_EUSART_Write
    _strstr->_strlen
    _strstr->_strncmp

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_ADC_GetConversionResult
    _TMR1_ISR->_TMR1_WriteTimer
    _IOCAF4_ISR->__IOC_Ready

Critical Paths under _main in BANK0

    _main->_read_analog
    _read_analog->_ESP_write
    __sprintf->___lwdiv
    _ESP_message_handler->_ESP_process_rx_data
    _ESP_process_rx_data->_process_message
    _process_message->_toggle_format
    _toggle_format->_ESP_write
    _ESP_write->_ESP_wait_for
    _ESP_config->_ESP_wait_for
    _ESP_wait_for->_ESP_read
    _ESP_read->_ESP_process_message
    _ESP_process_message->_strstr
    _strstr->_strncmp

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   53621
                                             43 BANK0      1     1      0
                         _ESP_config
                     _ESP_initialize
                _ESP_message_handler
                 _EUSART_is_rx_ready
                  _SYSTEM_Initialize
                  _logger_initialize
                    _process_message
                        _read_analog
 ---------------------------------------------------------------------------------
 (1) _read_analog                                         16    16      0   13025
                                             27 BANK0     16    16      0
                       _ESP_wait_for
                          _ESP_write
                             ___lmul
                           __sprintf
 ---------------------------------------------------------------------------------
 (2) __sprintf                                             6     4      2    2036
                                              3 BANK0      6     4      2
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     615
                                              3 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     781
                                              3 COMMON     5     1      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     316
                                              3 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (1) _logger_initialize                                    1     1      0     544
                                              5 COMMON     1     1      0
                  _ADC_SelectChannel
        _ESP_Set_application_handler
         _IOCAF4_SetInterruptHandler
           _TMR1_SetInterruptHandler
                     _TMR1_StopTimer
 ---------------------------------------------------------------------------------
 (2) _ADC_SelectChannel                                    2     2      0      22
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     544
                     _ADC_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     174
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR1_SetInterruptHandler                             2     0      2     174
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     174
         _IOCAF4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _IOCAF4_SetInterruptHandler                           2     0      2     174
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     196
                                              5 COMMON     1     1      0
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2      98
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ESP_message_handler                                  6     6      0   20139
                                             35 BANK0      3     3      0
                _ESP_process_rx_data
                           _ESP_read
 ---------------------------------------------------------------------------------
 (2) _ESP_process_rx_data                                  4     4      0   17578
                                             31 BANK0      4     4      0
                   Absolute function *
    _ESP_default_application_handler *
                    _process_message *
                             _strstr
 ---------------------------------------------------------------------------------
 (1) _process_message                                      3     2      1   15229
                                             28 BANK0      3     2      1
                _ADC_StartConversion
                          _ESP_write
                    _TMR1_StartTimer
                     _TMR1_StopTimer
                      _toggle_format
 ---------------------------------------------------------------------------------
 (2) _toggle_format                                        1     1      0    7522
                                             27 BANK0      1     1      0
                          _ESP_write
 ---------------------------------------------------------------------------------
 (2) _ESP_write                                            8     5      3    7522
                                             19 BANK0      8     5      3
                       _ESP_wait_for
                            ___awdiv
                            ___awmod
                              __puts
                              _write
 ---------------------------------------------------------------------------------
 (3) _write                                                6     3      3    1074
                                              5 COMMON     4     1      3
                                              0 BANK0      2     2      0
                       _EUSART_Write
                 _EUSART_is_tx_ready
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     613
                                              3 COMMON     5     1      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     625
                                              3 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ESP_default_application_handler                      1     0      1      53
                                             28 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ESP_initialize                                       0     0      0     174
        _ESP_Set_application_handler
 ---------------------------------------------------------------------------------
 (2) _ESP_Set_application_handler                          2     0      2     174
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ESP_config                                           2     2      0    3966
                                             19 BANK0      2     2      0
                       _ESP_wait_for
                        _EUSART_Read
                 _EUSART_is_rx_ready
                              __puts
 ---------------------------------------------------------------------------------
 (3) __puts                                                6     4      2    1164
                                              5 COMMON     3     1      2
                                              0 BANK0      3     3      0
                       _EUSART_Write
                 _EUSART_is_tx_ready
 ---------------------------------------------------------------------------------
 (4) _EUSART_is_tx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      44
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ESP_wait_for                                         3     3      0    2778
                                             16 BANK0      3     3      0
                           _ESP_read
 ---------------------------------------------------------------------------------
 (4) _ESP_read                                             2     2      0    2527
                                             14 BANK0      2     2      0
                _ESP_process_message
                        _EUSART_Read
 ---------------------------------------------------------------------------------
 (5) _EUSART_Read                                          2     2      0      24
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _ESP_process_message                                  2     2      0    2466
                                             12 BANK0      2     2      0
                             _strstr
 ---------------------------------------------------------------------------------
 (6) _strstr                                               8     6      2    2228
                                              4 BANK0      8     6      2
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (7) _strncmp                                             10     6      4     541
                                              3 COMMON     6     2      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (7) _strlen                                               6     4      2     166
                                              3 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (7) _strchr                                               3     1      2     197
                                              3 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                          1     1      0     240
                                              2 COMMON     1     1      0
                   Absolute function *
            _ADC_GetConversionResult
                            _ADC_ISR
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                    _PIN_MANAGER_IOC
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     240
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                    _TMR1_WriteTimer
                        __TMR1_Ready *
 ---------------------------------------------------------------------------------
 (13) __TMR1_Ready                                         0     0      0       0
              i1_ADC_StartConversion
 ---------------------------------------------------------------------------------
 (14) i1_ADC_StartConversion                               0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _TMR1_WriteTimer                                     2     0      2     240
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (13) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _PIN_MANAGER_IOC                                     0     0      0       0
                         _IOCAF4_ISR
 ---------------------------------------------------------------------------------
 (13) _IOCAF4_ISR                                          0     0      0       0
                   Absolute function *
     _IOCAF4_DefaultInterruptHandler *
                         __IOC_Ready *
 ---------------------------------------------------------------------------------
 (14) __IOC_Ready                                          1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (14) _IOCAF4_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART_Transmit_ISR                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _EUSART_Receive_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _ADC_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _ADC_GetConversionResult                             2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ESP_config
     _ESP_wait_for
       _ESP_read
         _ESP_process_message
           _strstr
             _strchr
             _strlen
             _strncmp
         _EUSART_Read
     _EUSART_Read
     _EUSART_is_rx_ready
     __puts
       _EUSART_Write
       _EUSART_is_tx_ready
   _ESP_initialize
     _ESP_Set_application_handler
   _ESP_message_handler
     _ESP_process_rx_data
       Absolute function(Fake) *
       _ESP_default_application_handler *
       _process_message *
         _ADC_StartConversion
         _ESP_write
           _ESP_wait_for
             _ESP_read
               _ESP_process_message
                 _strstr
                   _strchr
                   _strlen
                   _strncmp
               _EUSART_Read
           ___awdiv
           ___awmod
           __puts
             _EUSART_Write
             _EUSART_is_tx_ready
           _write
             _EUSART_Write
             _EUSART_is_tx_ready
         _TMR1_StartTimer
         _TMR1_StopTimer
         _toggle_format
           _ESP_write
             _ESP_wait_for
               _ESP_read
                 _ESP_process_message
                   _strstr
                     _strchr
                     _strlen
                     _strncmp
                 _EUSART_Read
             ___awdiv
             ___awmod
             __puts
               _EUSART_Write
               _EUSART_is_tx_ready
             _write
               _EUSART_Write
               _EUSART_is_tx_ready
       _strstr *
         _strchr
         _strlen
         _strncmp
     _ESP_read
       _ESP_process_message
         _strstr
           _strchr
           _strlen
           _strncmp
       _EUSART_Read
   _EUSART_is_rx_ready
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCAF4_SetInterruptHandler
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _WDT_Initialize
   _logger_initialize
     _ADC_SelectChannel
     _ESP_Set_application_handler
     _IOCAF4_SetInterruptHandler
     _TMR1_SetInterruptHandler
     _TMR1_StopTimer
   _process_message
     _ADC_StartConversion
     _ESP_write
       _ESP_wait_for
         _ESP_read
           _ESP_process_message
             _strstr
               _strchr
               _strlen
               _strncmp
           _EUSART_Read
       ___awdiv
       ___awmod
       __puts
         _EUSART_Write
         _EUSART_is_tx_ready
       _write
         _EUSART_Write
         _EUSART_is_tx_ready
     _TMR1_StartTimer
     _TMR1_StopTimer
     _toggle_format
       _ESP_write
         _ESP_wait_for
           _ESP_read
             _ESP_process_message
               _strstr
                 _strchr
                 _strlen
                 _strncmp
             _EUSART_Read
         ___awdiv
         ___awmod
         __puts
           _EUSART_Write
           _EUSART_is_tx_ready
         _write
           _EUSART_Write
           _EUSART_is_tx_ready
   _read_analog
     _ESP_wait_for
       _ESP_read
         _ESP_process_message
           _strstr
             _strchr
             _strlen
             _strncmp
         _EUSART_Read
     _ESP_write
       _ESP_wait_for
         _ESP_read
           _ESP_process_message
             _strstr
               _strchr
               _strlen
               _strncmp
           _EUSART_Read
       ___awdiv
       ___awmod
       __puts
         _EUSART_Write
         _EUSART_is_tx_ready
       _write
         _EUSART_Write
         _EUSART_is_tx_ready
     ___lmul
     __sprintf
       ___lwdiv
       ___lwmod

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _ADC_GetConversionResult *
   _ADC_ISR *
   _EUSART_Receive_ISR *
   _EUSART_Transmit_ISR *
   _PIN_MANAGER_IOC *
     _IOCAF4_ISR
       Absolute function(Fake) *
       _IOCAF4_DefaultInterruptHandler *
       __IOC_Ready *
   _TMR1_ISR *
     Absolute function(Fake) *
     _TMR1_DefaultInterruptHandler *
     _TMR1_WriteTimer *
     __TMR1_Ready *
       i1_ADC_StartConversion

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      7B       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2C      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0      20       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      7B       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Mon Aug  6 19:49:07 2018

                ?_EUSART_SetRxInterruptHandler 0073                                    __CFG_CP$OFF 0000  
                                 ___awdiv@sign 0021                                            l211 0746  
                                          l159 0577                                            l561 02E5  
                                          l459 04DB                                            l564 02E8  
                                          l558 030B                                            l479 04B0  
                                 __CFG_CPD$OFF 0000                                _timer1ReloadVal 005A  
                              __end_of_ADC_ISR 07F7                                   ___awmod@sign 0021  
                                 __CFG_BORV$LO 0000                                            wreg 0009  
                                 __CFG_IESO$ON 0000                                   ?_EUSART_Read 0070  
                                 __CFG_LVP$OFF 0000                                 ?_toggle_format 0070  
                                         l1130 06C1                                           l2050 060C  
                                         l3002 01BA                                           l2202 056D  
                                         l2052 0618                                           l2116 05EB  
                                         l3014 0445                                           l3024 0453  
                                         l2216 058A                                           l3120 02C1  
                                         l3112 02B0                                           l3104 0292  
                                         l3042 04B2                                           l3106 029E  
                                         l3202 05DE                                           l3210 02D2  
                                         l3036 04C1                                           l3116 02B9  
                                         l3132 0317                                           l3052 0627  
                                         l3212 02D4                                           l2500 046F  
                                         l3150 033C                                           l3046 062B  
                                         l3222 02E1                                           l3214 02D6  
                                         l2088 06CA                                           l3144 0324  
                                         l3136 031E                                           l3208 02C7  
                                         l2504 047B                                           l3322 039F  
                                         l3146 0330                                           l3154 0345  
                                         l3330 0491                                           l3068 04EE  
                                         l3324 03A5                                           l3228 02EB  
                                         l3332 0498                                           l3252 03F0  
                                         l3244 03D2                                           l2508 0484  
                                         l3078 04FB                                           l3094 028A  
                                         l3158 034D                                           l3246 03DE  
                                         l3088 027F                                           l3184 012C  
                                         l3328 048F                                           l3336 049A  
                                         l3256 03F9                                           l3442 04A2  
                                         l3444 02F4                                           l3292 0411  
                                         l3356 01D9                                           l3380 066B  
                                         l3288 0406                                           l3384 0670  
                                         l3376 0666                                           l2922 025D  
                                         l2914 023F                                           l2930 0363  
                                         l2498 0463                                           l2908 0233  
                                         l2942 0390                                           l2936 0374  
                                         l2938 0387                                           l2970 017E  
                                         l2962 016F                                           l2954 0160  
                                         l2994 01AB                                           l2986 019C  
                                         l2978 018D                                           STR_1 0766  
                                         STR_2 076B                                           STR_3 0736  
                                         STR_4 0792                                           STR_5 07CD  
                                         STR_6 076E                                           STR_7 0784  
                                         STR_8 07C8                                           STR_9 06F4  
                                         _LATA 010C                                           _LATC 010E  
                                         u2405 0295                                           u2425 029F  
                                         u2505 0327                                           u2435 02A9  
                                         u1715 0466                                           u2445 02B1  
                                         u2525 0336                                           u2605 03D5  
                                         u2535 033D                                           u1735 0475  
                                         u2625 03DF                                           u1745 047C  
                                         u2635 03E9                                           u2645 03F1  
                                         u2725 01FB                                           u2675 0412  
                                         u2685 0419                                           u2777 0398  
                                         i1l81 0033                                           i1l74 000B  
                                         i1l77 0015                                           i1l86 003E  
                                         i1l79 0027                                           _PLLR 04D6  
                                         _WPUA 020C                                           _WPUC 020E  
                                 __CFG_WRT$OFF 0000                                  __CFG_FCMEN$ON 0000  
                                         _main 0660                                           fsr0h 0005  
                                         fsr1h 0007                                           indf0 0000  
                                         fsr0l 0004                                           indf1 0001  
                                         fsr1l 0006                                           btemp 007E  
                                  ?_ESP_config 0070                                  __CFG_BOREN$ON 0000  
                                   __IOC_Ready 074A                                           start 0040  
                   ??_TMR1_SetInterruptHandler 0075                                  __CFG_MCLRE$ON 0000  
                          __end_of__TMR1_Ready 07C2                             _ESP_wait_exception 0068  
                                __CFG_PLLEN$ON 0000                                  ?_EUSART_Write 0070  
               __size_of_OSCILLATOR_Initialize 000A                            __size_of_IOCAF4_ISR 000D  
                __end_of_OSCILLATOR_Initialize 074A                             __size_of_ESP_write 0078  
                                        ?_main 0070                                __end_of___awdiv 02C6  
                                        STR_10 054A                                          STR_11 0702  
                                        STR_20 0776                                          STR_12 06AC  
                                        STR_13 07F9                                          STR_21 07DF  
                                        STR_22 07E2                                          STR_14 072A  
                                        STR_15 07F7                                          STR_16 0569  
                                        STR_17 0569                                  __CFG_WDTE$OFF 0000  
                                        STR_18 07D7                                          STR_19 077D  
                              __end_of___awmod 0352                                _TMR1_StartTimer 07E8  
                              ___awdiv@divisor 0073                                          _T1CON 0018  
                              __end_of___lwdiv 03FE                                          i1l165 065D  
                              __end_of___lwmod 0489                                ___awdiv@counter 0020  
                 ?_ESP_Set_application_handler 0073                                          _RCREG 0199  
                                        _RCSTA 019D                               __end_of_ESP_read 045D  
                                        _TMR1H 0017                                          _TMR1L 0016  
                                        _TRISA 008C                                          _TRISC 008E  
                       ?i1_ADC_StartConversion 0070                                          _TXREG 019A  
                                        _TXSTA 019E               __size_of_ADC_GetConversionResult 0006  
                                 ?_read_analog 0070                            ___lmul@multiplicand 0024  
                             __end_of_TMR1_ISR 06E5                        __end_of_PIN_MANAGER_IOC 07D7  
                                        __puts 04B1                                 _WDT_Initialize 07DB  
                                        _write 0626                        __end_of_TMR1_Initialize 06AC  
                                        pclath 000A                                          status 0003  
                                        wtemp0 007E                     __size_of_logger_initialize 001F  
                              __end_of_strncmp 0274                                _TMR1_WriteTimer 06E5  
                              __initialization 0041                                   __end_of_main 067B  
                               ??_EUSART_Write 0073                                      ??_ADC_ISR 0070  
                  ?_INTERRUPT_InterruptManager 0070                 ??_EUSART_SetRxInterruptHandler 0075  
                                       ??_main 004B                            __size_of_ESP_config 0037  
                      _IOCAF4_InterruptHandler 006E                         __end_of_WDT_Initialize 07DF  
                ??_ESP_Set_application_handler 0075                                ??_toggle_format 003B  
                                       ?__puts 0075                                         _ADCON0 009D  
                                       _ADCON1 009E                                         _ADRESH 009C  
                                       _ADRESL 009B                               ___awdiv@dividend 0075  
                                       _APFCON 011D                                         _ANSELA 018C  
                                       _ANSELC 018E                     __end_of_EUSART_is_rx_ready 07F1  
                                       _BORCON 0116                                         _T1GCON 0019  
                                       ?_write 0075                        TMR1_WriteTimer@timerVal 0070  
                                       i1l2630 0727                                         i1l2622 06EF  
                                       i1l2712 0680                     __end_of_EUSART_is_tx_ready 07FD  
                                       _OSCCON 0099                                         _SPBRGH 019C  
                                       _SPBRGL 019B                                    __TMR1_Ready 07BC  
                                       _WDTCON 0097                              __end_of_ESP_write 0150  
                                  ?__IOC_Ready 0070                                 __CFG_PWRTE$OFF 0000  
                             ??_ESP_initialize 0075           __end_of_TMR1_DefaultInterruptHandler 07FF  
        __size_of_TMR1_DefaultInterruptHandler 0001                                  _esp_read_data 00AC  
                 _TMR1_DefaultInterruptHandler 07FE                               __end_of__sprintf 00D8  
                                       ___lmul 03FE                        __end_of_TMR1_StartTimer 07EB  
                                    ??___awdiv 0077                                 __CFG_STVREN$ON 0000  
                                    ??___awmod 0077                                      ??___lwdiv 0077  
                                    ??___lwmod 0077                            _EUSART_Transmit_ISR 0643  
                             ___awdiv@quotient 0022                                ___awmod@divisor 0073  
                              ___awmod@counter 0020                                         _strchr 06C0  
                                       _strlen 0608                                         _strstr 0352  
                              ?_WDT_Initialize 0070                       ESP_process_rx_data@index 0041  
   IOCAF4_SetInterruptHandler@InterruptHandler 0073       TMR1_SetInterruptHandler@InterruptHandler 0073  
                             ?_PIN_MANAGER_IOC 0070                                         write@i 0078  
                      __end_of_TMR1_WriteTimer 06F4                                      ??_strncmp 0077  
                                 ??_IOCAF4_ISR 0071                           ?_EUSART_Transmit_ISR 0070  
                             ?_TMR1_Initialize 0070                           __size_of_EUSART_Read 001E  
                            _SYSTEM_Initialize 078B                        __end_of__initialization 004F  
                                ?_ESP_wait_for 0070                             read_analog@adc_val 0049  
                           ?_SYSTEM_Initialize 0070           __size_of_ESP_Set_application_handler 0006  
         __end_of_EUSART_SetTxInterruptHandler 07B0          __size_of_EUSART_SetTxInterruptHandler 0006  
                 _EUSART_SetTxInterruptHandler 07AA                                      ?_ESP_read 0070  
                 __size_of_ADC_StartConversion 0003                                    ESP_read@ret 002F  
                               __pcstackCOMMON 0070                            ??_SYSTEM_Initialize 0076  
                                    ?_TMR1_ISR 0070                  ?_TMR1_DefaultInterruptHandler 0070  
                                __end_of__puts 04D9         __end_of_IOCAF4_DefaultInterruptHandler 0800  
      __size_of_IOCAF4_DefaultInterruptHandler 0001                 _IOCAF4_DefaultInterruptHandler 07FF  
                                __end_of_write 0643                             __end_of_IOCAF4_ISR 072A  
                      _ADC_GetConversionResult 07C2                                 _OPTION_REGbits 0095  
                          __size_of__IOC_Ready 000A                       __size_of_process_message 0046  
                                  ESP_write@pt 0033                                        ??__puts 0020  
                         __size_of_read_analog 0060                      __end_of_SYSTEM_Initialize 0792  
                        ??_EUSART_Transmit_ISR 0070                                        ??_write 0020  
                                   __pbssBANK0 004C                                     __pbssBANK1 00A0  
                               ??_ESP_wait_for 0030                           __end_of_EUSART_Write 058D  
                                 ??_ESP_config 0033                    __size_of_EUSART_Receive_ISR 001B  
                                   ??_ESP_read 002E                                     __pmaintext 0660  
                ?_EUSART_SetTxInterruptHandler 0073               _EUSART_TxDefaultInterruptHandler 0060  
                                      ?___lmul 0020                   __size_of_ESP_process_message 006C  
                 __size_of_ESP_message_handler 0028                               ?_TMR1_StartTimer 0070  
                                   ??_TMR1_ISR 0072                                     __pintentry 0004  
                 __size_of_ESP_process_rx_data 0025                                        _ADC_ISR 07F4  
                                      _BAUDCON 019F                                 ___lmul@product 0073  
                      ??i1_ADC_StartConversion 0070                        __size_of_ADC_Initialize 0009  
                                      ?_strchr 0073                                        ?_strlen 0073  
                      __size_of_TMR1_StopTimer 0003                                        ?_strstr 0024  
                                _eusartRxCount 0069                             __end_of_ESP_config 03C9  
                                      _OSCTUNE 0098                                      ?__sprintf 0023  
                             ?_TMR1_WriteTimer 0070                                      _ADC_value 005C  
                                    _ADC_state 006D                                        ___awdiv 0274  
                              __size_of___lmul 0030                                        ___awmod 030C  
                                      ___lwdiv 03C9                                        ___lwmod 045D  
                    ??_ADC_GetConversionResult 0072                                        __ptext1 01BC  
                                      __ptext2 0052                                        __ptext3 045D  
                                      __ptext4 03C9                                        __ptext5 03FE  
                                      __ptext6 05AD                                        __ptext7 0710  
                                      __ptext8 078B                                        __ptext9 07DB  
               ??_TMR1_DefaultInterruptHandler 0070                                __size_of_strchr 0013  
                              __size_of_strlen 001E                                      _T1CONbits 0018  
                       ESP_process_message@aux 002D                                __size_of_strstr 0040  
                        _OSCILLATOR_Initialize 0740                               ___awmod@dividend 0075  
            __size_of_TMR1_SetInterruptHandler 0006                       ??_PIN_MANAGER_Initialize 0075  
                    ?_TMR1_SetInterruptHandler 0073                                      _IOCAFbits 0393  
                                    _IOCANbits 0392                                      _IOCAPbits 0391  
                   __size_of_SYSTEM_Initialize 0007                                        clrloop0 0799  
                                   ??__sprintf 0025                                        _strncmp 021C  
                       ESP_message_handler@ret 0045                           end_of_initialization 004F  
                                 ?__TMR1_Ready 0070                              ??_process_message 003D  
                                 ??__IOC_Ready 0070                              _EUSART_Initialize 0500  
                                    _IOC_value 0062                                      _IOC_state 0063  
                           ?_EUSART_Initialize 0070                                      _ESP_write 00D8  
                                    _RCSTAbits 019D                             _EUSART_is_rx_ready 07EE  
                           _EUSART_is_tx_ready 07FB                                   __sprintf@aux 0026  
                                 __sprintf@val 0023                                        strchr@c 0073  
                                      strchr@s 0075                                        strlen@a 0077  
                                      strlen@s 0073                            ??_EUSART_Initialize 0075  
                                      write@pt 0075                               ??_WDT_Initialize 0073  
               ??_EUSART_SetTxInterruptHandler 0075                           __end_of_ESP_wait_for 0500  
                                      strstr@h 002B                                        strstr@n 0024  
                                    _PORTAbits 000C                            ?_EUSART_is_rx_ready 0070  
                          ?_EUSART_is_tx_ready 0070                               __CFG_FOSC$INTOSC 0000  
                           __end_of__IOC_Ready 0754                          __size_of_EUSART_Write 0021  
                          _ADC_StartConversion 07EB                   ??_IOCAF4_SetInterruptHandler 0075  
                        __end_of_toggle_format 05EA                      __end_of_EUSART_Initialize 0525  
                         ??_EUSART_is_rx_ready 0073                           ??_EUSART_is_tx_ready 0073  
                                    _TXSTAbits 019E                                     ?_ESP_write 0033  
                         ?_ADC_StartConversion 0070                              __size_of_ESP_read 002F  
                 _ESP_external_message_handler 0056                                 __end_of___lmul 042E  
ESP_Set_application_handler@applicationHandler 0073                                   _EUSART_Write 056C  
                            __size_of_TMR1_ISR 0012                                 _ADC_Initialize 0754  
          __size_of_IOCAF4_SetInterruptHandler 0006                                 _TMR1_StopTimer 07E5  
                       ?_OSCILLATOR_Initialize 0070            __end_of_ESP_Set_application_handler 07BC  
                  _ESP_Set_application_handler 07B6                         ESP_process_rx_data@aux 0042  
                               __end_of_strchr 06D3                                 __end_of_strlen 0626  
                               __end_of_strstr 0392                            start_initialization 0041  
              __size_of_PIN_MANAGER_Initialize 0020                                  ??_EUSART_Read 0073  
                          _ESP_process_message 0150                            _ESP_message_handler 0489  
 EUSART_SetRxInterruptHandler@interruptHandler 0073   EUSART_SetTxInterruptHandler@interruptHandler 0073  
                          _ESP_process_rx_data 0525                       __size_of_PIN_MANAGER_IOC 0005  
                              ESP_wait_for@ret 0032                          ??_ADC_StartConversion 0073  
                     __size_of_TMR1_Initialize 0016                           ?_ESP_process_message 0070  
                                     ??___lmul 0073                           ?_ESP_message_handler 0070  
                                 ESP_write@aux 003A                                   ESP_write@res 0039  
                       __end_of_ADC_Initialize 075D                         __end_of_TMR1_StopTimer 07E8  
                         ?_ESP_process_rx_data 0070                                       ?_ADC_ISR 0070  
                                     ??_strchr 0075                                       ??_strlen 0075  
                      __size_of_ESP_initialize 0009                                       ??_strstr 0026  
               __size_ofi1_ADC_StartConversion 0003                  __end_ofi1_ADC_StartConversion 07F4  
                  __end_of_EUSART_Transmit_ISR 0660                                  ??_read_analog 003B  
                                  __pbssCOMMON 0079                                      ___latbits 0000  
      __end_of_ESP_default_application_handler 07FE       __size_of_ESP_default_application_handler 0001  
             ?_ESP_default_application_handler 003C              ??_ESP_default_application_handler 0079  
              _ESP_default_application_handler 07FD                                  __pcstackBANK0 0020  
                   __end_of_EUSART_Receive_ISR 0696                     __size_of_EUSART_Initialize 0025  
                            __size_of__sprintf 0086               _EUSART_RxDefaultInterruptHandler 005E  
                          __end_of_EUSART_Read 0608                                read_analog@aux1 003F  
                                    __pnvBANK0 006E                                read_analog@mess 0043  
                         __size_of__TMR1_Ready 0006                               ___lwdiv@dividend 0075  
                       _PIN_MANAGER_Initialize 058D                                    ??_ESP_write 0036  
                        ??_ESP_process_message 002C                           EUSART_Read@readValue 0074  
                        ??_ESP_message_handler 0043                          __size_of_ESP_wait_for 0027  
                            _ADC_SelectChannel 0710               __end_of_TMR1_SetInterruptHandler 07A4  
                                     ?___awdiv 0073                                       ?___awmod 0073  
                        ??_ESP_process_rx_data 003F                                       ?___lwdiv 0073  
                                     ?___lwmod 0073                                ?_ADC_Initialize 0070  
                                 _eusartRxHead 006B                                ?_TMR1_StopTimer 0070  
                           ?_ADC_SelectChannel 0070                                   _eusartTxHead 007A  
                                 _eusartRxTail 006A                                   _eusartTxTail 006C  
                 ??_INTERRUPT_InterruptManager 0072                        _eusartTxBufferRemaining 0079  
                     __size_of_TMR1_StartTimer 0003                            ??_ADC_SelectChannel 0073  
                              _process_message 02C6             __end_of_IOCAF4_SetInterruptHandler 07AA  
                   _IOCAF4_SetInterruptHandler 07A4                               ___lwdiv@quotient 0021  
                               __size_of__puts 0028                                       ?_strncmp 0073  
                               __size_of_write 001D                            __end_of_read_analog 021C  
                               _eusartRxBuffer 00A0                                 _eusartTxBuffer 004C  
                                 _ESP_wait_for 04D9                                       _LATAbits 010C  
                                    clear_ram0 0798                                    __puts@index 0077  
                                     _PIE1bits 0091                      __end_of_ADC_SelectChannel 071D  
                     __size_of_TMR1_WriteTimer 000F            __size_of_INTERRUPT_InterruptManager 003C  
                                     _ESP_read 042E                                    write@lenght 0077  
                                     _PIR1bits 0011                                       _TMR1_ISR 06D3  
                            ??_PIN_MANAGER_IOC 0071                              ??_TMR1_Initialize 0075  
                             __size_of_ADC_ISR 0003                                     _ADCON0bits 009D  
                     ADC_SelectChannel@channel 0074                                    _EUSART_Read 05EA  
                            ___lmul@multiplier 0020                                    _esp_channel 0066  
                     ?_ADC_GetConversionResult 0070                        ??_OSCILLATOR_Initialize 0073  
                             __size_of___awdiv 0052                               __size_of___awmod 0046  
                             __size_of___lwdiv 0035                        __end_of_process_message 030C  
                             __size_of___lwmod 002C                       _TMR1_SetInterruptHandler 079E  
                               _ESP_initialize 075D                          _TMR1_InterruptHandler 0058  
                                  _read_analog 01BC                            _esp_read_data_index 0067  
                              ___lwdiv@divisor 0073                                ___lwdiv@counter 0020  
                                     __ptext10 0696                                       __ptext11 079E  
                                     __ptext20 0525                                       __ptext12 058D  
                                     __ptext21 07FD                                       __ptext13 07A4  
                                   _T1GCONbits 0019                                       __ptext30 07EB  
                                     __ptext22 02C6                                       __ptext14 0740  
                                     __ptext31 075D                                       __ptext23 05CC  
                                     __ptext15 0500                                       __ptext40 05EA  
                                     __ptext32 07B6                                       __ptext24 00D8  
                                     __ptext16 07AA                                       __ptext41 0150  
                                     __ptext33 0392                                       __ptext25 0626  
                                     __ptext17 07B0                                       __ptext50 07F1  
                                     __ptext42 0352                                       __ptext34 04B1  
                                     __ptext26 030C                                       __ptext18 0754  
                                     __ptext51 06E5                                       __ptext43 021C  
                                     __ptext35 07FB                                       __ptext27 0274  
                                     __ptext19 0489                                       __ptext52 07D2  
                                     __ptext44 0608                                       __ptext36 056C  
                                     __ptext28 07E5                                       __ptext53 071D  
                                     __ptext45 06C0                                       __ptext37 07EE  
                                     __ptext29 07E8                                       __ptext54 07FF  
                                     __ptext38 04D9                                       __ptext55 074A  
                                     __ptext47 06D3                                       __ptext39 042E  
                                     __ptext56 0643                                       __ptext48 07FE  
                                     __ptext57 067B                                       __ptext49 07BC  
                                     __ptext58 07F4                                       __ptext59 07C2  
                                     __puts@pt 0075                         process_message@message 003C  
                                     __sprintf 0052                              ??_TMR1_StartTimer 0073  
                                   _IOCAF4_ISR 071D                               __size_of_strncmp 0058  
                               _message_format 0065                    __size_of_EUSART_is_rx_ready 0003  
                                __size_of_main 001B                                ESP_write@length 0035  
                  __size_of_EUSART_is_tx_ready 0002                     __size_of_ADC_SelectChannel 000D  
                                     int$flags 007E                         __size_of_toggle_format 001E  
                       __end_of_ESP_initialize 0766             __end_of_INTERRUPT_InterruptManager 0040  
                   _INTERRUPT_InterruptManager 0004                              ??_TMR1_WriteTimer 0072  
                                   _INTCONbits 000B                                 __pstringtext10 077D  
                               __pstringtext11 0784                                 __pstringtext20 0000  
                               __pstringtext12 0792                                 __pstringtext13 07C8  
                               __pstringtext14 07CD                                 __pstringtext15 07D7  
                               __pstringtext16 07DF                                 __pstringtext17 07E2  
                               __pstringtext18 07F7                                 __pstringtext19 07F9  
          ESP_default_application_handler@data 003C                        __size_of_WDT_Initialize 0004  
                                     intlevel1 0000                    __end_of_ADC_StartConversion 07EE  
                             ___lwmod@dividend 0075                        ?_PIN_MANAGER_Initialize 0070  
              __end_of_ADC_GetConversionResult 07C8                              __CFG_CLKOUTEN$OFF 0000  
                                   _ESP_config 0392                                      strncmp@_l 0020  
                                    strncmp@_r 0073                               ??_ADC_Initialize 0073  
         __end_of_EUSART_SetRxInterruptHandler 07B6          __size_of_EUSART_SetRxInterruptHandler 0006  
                 _EUSART_SetRxInterruptHandler 07B0                              _logger_initialize 05AD  
                             ??_TMR1_StopTimer 0073                             ?_logger_initialize 0070  
                           _EUSART_Receive_ISR 067B                                ?_ESP_initialize 0070  
                             ?_process_message 003C                                  __sprintf@mess 0028  
                                __pstringtext1 054A                                  __pstringtext2 06AC  
                                __pstringtext3 06F4                                  __pstringtext4 0702  
                                __pstringtext5 072A                                  __pstringtext6 0736  
                                __pstringtext7 0766                                  __pstringtext8 076E  
                                __pstringtext9 0776                            ??_logger_initialize 0075  
                          ?_EUSART_Receive_ISR 0070                                ___lwmod@divisor 0073  
                              ___lwmod@counter 0078                                       strncmp@l 0023  
                                     strncmp@n 0075                                       strncmp@r 0021  
                         ESP_wait_for@esp_mess 0031                          i1_ADC_StartConversion 07F1  
                  ?_IOCAF4_SetInterruptHandler 0073                                       strstr@nl 0029  
                                _toggle_format 05CC                                    ?_IOCAF4_ISR 0070  
                           EUSART_Write@txData 0074                   __size_of_EUSART_Transmit_ISR 001D  
                                   _TMR1_state 0064                 __end_of_PIN_MANAGER_Initialize 05AD  
                                ??__TMR1_Ready 0070               ??_IOCAF4_DefaultInterruptHandler 0070  
              ?_IOCAF4_DefaultInterruptHandler 0070                    __end_of_ESP_process_message 01BC  
                  __end_of_ESP_message_handler 04B1                                _PIN_MANAGER_IOC 07D2  
                    __end_of_logger_initialize 05CC                           ??_EUSART_Receive_ISR 0070  
                  __end_of_ESP_process_rx_data 054A                                _TMR1_Initialize 0696  
