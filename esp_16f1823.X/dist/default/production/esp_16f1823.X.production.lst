

Microchip Technology PIC PRO Macro Assembler V2.00 build -1524193055 
                                                                                               Wed Aug  8 11:58:53 2018

Microchip Technology Omniscient Code Generator v2.00 (PRO mode) build 20180527130849
     1                           	processor	16F1823
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	stringtext13,global,class=STRCODE,delta=2
    18                           	psect	stringtext14,global,class=STRCODE,delta=2
    19                           	psect	stringtext15,global,class=STRCODE,delta=2
    20                           	psect	stringtext16,global,class=STRCODE,delta=2
    21                           	psect	stringtext17,global,class=STRCODE,delta=2
    22                           	psect	stringtext18,global,class=STRCODE,delta=2
    23                           	psect	stringtext19,global,class=STRCODE,delta=2
    24                           	psect	stringtext20,global,class=STRCODE,delta=2
    25                           	psect	cinit,global,class=CODE,merge=1,delta=2
    26                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    27                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    28                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    29                           	psect	clrtext,global,class=CODE,delta=2
    30                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    31                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    32                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    33                           	psect	text1,local,class=CODE,merge=1,delta=2
    34                           	psect	text2,local,class=CODE,merge=1,delta=2
    35                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text6,local,class=CODE,merge=1,delta=2
    39                           	psect	text7,local,class=CODE,merge=1,delta=2
    40                           	psect	text8,local,class=CODE,merge=1,delta=2
    41                           	psect	text9,local,class=CODE,merge=1,delta=2
    42                           	psect	text10,local,class=CODE,merge=1,delta=2
    43                           	psect	text11,local,class=CODE,merge=1,delta=2
    44                           	psect	text12,local,class=CODE,merge=1,delta=2
    45                           	psect	text13,local,class=CODE,merge=1,delta=2
    46                           	psect	text14,local,class=CODE,merge=1,delta=2
    47                           	psect	text15,local,class=CODE,merge=1,delta=2
    48                           	psect	text16,local,class=CODE,merge=1,delta=2
    49                           	psect	text17,local,class=CODE,merge=1,delta=2
    50                           	psect	text18,local,class=CODE,merge=1,delta=2
    51                           	psect	text19,local,class=CODE,merge=1,delta=2
    52                           	psect	text20,local,class=CODE,merge=1,delta=2
    53                           	psect	text21,local,class=CODE,merge=1,delta=2
    54                           	psect	text22,local,class=CODE,merge=1,delta=2
    55                           	psect	text23,local,class=CODE,merge=1,delta=2
    56                           	psect	text24,local,class=CODE,merge=1,delta=2
    57                           	psect	text25,local,class=CODE,merge=1,delta=2
    58                           	psect	text26,local,class=CODE,merge=1,delta=2
    59                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text29,local,class=CODE,merge=1,delta=2
    62                           	psect	text30,local,class=CODE,merge=1,delta=2
    63                           	psect	text31,local,class=CODE,merge=1,delta=2
    64                           	psect	text32,local,class=CODE,merge=1,delta=2
    65                           	psect	text33,local,class=CODE,merge=1,delta=2
    66                           	psect	text34,local,class=CODE,merge=1,delta=2
    67                           	psect	text35,local,class=CODE,merge=1,delta=2
    68                           	psect	text36,local,class=CODE,merge=1,delta=2
    69                           	psect	text37,local,class=CODE,merge=1,delta=2
    70                           	psect	text38,local,class=CODE,merge=1,delta=2
    71                           	psect	text39,local,class=CODE,merge=1,delta=2
    72                           	psect	text40,local,class=CODE,merge=1,delta=2
    73                           	psect	text41,local,class=CODE,merge=1,delta=2
    74                           	psect	text42,local,class=CODE,merge=1,delta=2
    75                           	psect	text43,local,class=CODE,merge=1,delta=2,group=2
    76                           	psect	text44,local,class=CODE,merge=1,delta=2,group=2
    77                           	psect	text45,local,class=CODE,merge=1,delta=2,group=2
    78                           	psect	text46,local,class=CODE,merge=1,delta=2,group=2
    79                           	psect	intentry,global,class=CODE,delta=2
    80                           	psect	text48,local,class=CODE,merge=1,delta=2
    81                           	psect	text49,local,class=CODE,merge=1,delta=2
    82                           	psect	text50,local,class=CODE,merge=1,delta=2
    83                           	psect	text51,local,class=CODE,merge=1,delta=2
    84                           	psect	text52,local,class=CODE,merge=1,delta=2
    85                           	psect	text53,local,class=CODE,merge=1,delta=2
    86                           	psect	text54,local,class=CODE,merge=1,delta=2
    87                           	psect	text55,local,class=CODE,merge=1,delta=2
    88                           	psect	text56,local,class=CODE,merge=1,delta=2
    89                           	psect	text57,local,class=CODE,merge=1,delta=2
    90                           	psect	text58,local,class=CODE,merge=1,delta=2
    91                           	psect	text59,local,class=CODE,merge=1,delta=2
    92                           	psect	text60,local,class=CODE,merge=1,delta=2
    93                           	psect	pa_nodes0,global,class=CODE,delta=2
    94                           	dabs	1,0x7E,2
    95  0000                     
    96                           ; Version 2.00
    97                           ; Generated 27/05/2018 GMT
    98                           ; 
    99                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   100                           ; All rights reserved.
   101                           ; 
   102                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   103                           ; 
   104                           ; Redistribution and use in source and binary forms, with or without modification, are
   105                           ; permitted provided that the following conditions are met:
   106                           ; 
   107                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   108                           ;        conditions and the following disclaimer.
   109                           ; 
   110                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   111                           ;        of conditions and the following disclaimer in the documentation and/or other
   112                           ;        materials provided with the distribution.
   113                           ; 
   114                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   115                           ;        software without specific prior written permission.
   116                           ; 
   117                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   118                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   119                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   120                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   121                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   122                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   123                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   124                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   125                           ; 
   126                           ; 
   127                           ; Code-generator required, PIC16F1823 Definitions
   128                           ; 
   129                           ; SFR Addresses
   130  0000                     	;# 
   131  0001                     	;# 
   132  0002                     	;# 
   133  0003                     	;# 
   134  0004                     	;# 
   135  0005                     	;# 
   136  0006                     	;# 
   137  0007                     	;# 
   138  0008                     	;# 
   139  0009                     	;# 
   140  000A                     	;# 
   141  000B                     	;# 
   142  000C                     	;# 
   143  000E                     	;# 
   144  0011                     	;# 
   145  0012                     	;# 
   146  0015                     	;# 
   147  0016                     	;# 
   148  0016                     	;# 
   149  0017                     	;# 
   150  0018                     	;# 
   151  0019                     	;# 
   152  001A                     	;# 
   153  001B                     	;# 
   154  001C                     	;# 
   155  001E                     	;# 
   156  001F                     	;# 
   157  008C                     	;# 
   158  008E                     	;# 
   159  0091                     	;# 
   160  0092                     	;# 
   161  0095                     	;# 
   162  0096                     	;# 
   163  0097                     	;# 
   164  0098                     	;# 
   165  0099                     	;# 
   166  009A                     	;# 
   167  009B                     	;# 
   168  009B                     	;# 
   169  009C                     	;# 
   170  009D                     	;# 
   171  009E                     	;# 
   172  010C                     	;# 
   173  010E                     	;# 
   174  0111                     	;# 
   175  0112                     	;# 
   176  0113                     	;# 
   177  0114                     	;# 
   178  0115                     	;# 
   179  0116                     	;# 
   180  0117                     	;# 
   181  0118                     	;# 
   182  0119                     	;# 
   183  011A                     	;# 
   184  011B                     	;# 
   185  011D                     	;# 
   186  011D                     	;# 
   187  018C                     	;# 
   188  018E                     	;# 
   189  0191                     	;# 
   190  0191                     	;# 
   191  0192                     	;# 
   192  0193                     	;# 
   193  0193                     	;# 
   194  0193                     	;# 
   195  0194                     	;# 
   196  0195                     	;# 
   197  0196                     	;# 
   198  0199                     	;# 
   199  019A                     	;# 
   200  019B                     	;# 
   201  019B                     	;# 
   202  019B                     	;# 
   203  019B                     	;# 
   204  019C                     	;# 
   205  019C                     	;# 
   206  019D                     	;# 
   207  019E                     	;# 
   208  019F                     	;# 
   209  020C                     	;# 
   210  020E                     	;# 
   211  0211                     	;# 
   212  0211                     	;# 
   213  0212                     	;# 
   214  0212                     	;# 
   215  0213                     	;# 
   216  0213                     	;# 
   217  0214                     	;# 
   218  0214                     	;# 
   219  0215                     	;# 
   220  0215                     	;# 
   221  0215                     	;# 
   222  0216                     	;# 
   223  0216                     	;# 
   224  0217                     	;# 
   225  0217                     	;# 
   226  0291                     	;# 
   227  0291                     	;# 
   228  0292                     	;# 
   229  0293                     	;# 
   230  0294                     	;# 
   231  0295                     	;# 
   232  0295                     	;# 
   233  0296                     	;# 
   234  0391                     	;# 
   235  0392                     	;# 
   236  0393                     	;# 
   237  039A                     	;# 
   238  039C                     	;# 
   239  039D                     	;# 
   240  039E                     	;# 
   241  039F                     	;# 
   242  0FE4                     	;# 
   243  0FE5                     	;# 
   244  0FE6                     	;# 
   245  0FE7                     	;# 
   246  0FE8                     	;# 
   247  0FE9                     	;# 
   248  0FEA                     	;# 
   249  0FEB                     	;# 
   250  0FED                     	;# 
   251  0FEE                     	;# 
   252  0FEF                     	;# 
   253  0000                     	;# 
   254  0001                     	;# 
   255  0002                     	;# 
   256  0003                     	;# 
   257  0004                     	;# 
   258  0005                     	;# 
   259  0006                     	;# 
   260  0007                     	;# 
   261  0008                     	;# 
   262  0009                     	;# 
   263  000A                     	;# 
   264  000B                     	;# 
   265  000C                     	;# 
   266  000E                     	;# 
   267  0011                     	;# 
   268  0012                     	;# 
   269  0015                     	;# 
   270  0016                     	;# 
   271  0016                     	;# 
   272  0017                     	;# 
   273  0018                     	;# 
   274  0019                     	;# 
   275  001A                     	;# 
   276  001B                     	;# 
   277  001C                     	;# 
   278  001E                     	;# 
   279  001F                     	;# 
   280  008C                     	;# 
   281  008E                     	;# 
   282  0091                     	;# 
   283  0092                     	;# 
   284  0095                     	;# 
   285  0096                     	;# 
   286  0097                     	;# 
   287  0098                     	;# 
   288  0099                     	;# 
   289  009A                     	;# 
   290  009B                     	;# 
   291  009B                     	;# 
   292  009C                     	;# 
   293  009D                     	;# 
   294  009E                     	;# 
   295  010C                     	;# 
   296  010E                     	;# 
   297  0111                     	;# 
   298  0112                     	;# 
   299  0113                     	;# 
   300  0114                     	;# 
   301  0115                     	;# 
   302  0116                     	;# 
   303  0117                     	;# 
   304  0118                     	;# 
   305  0119                     	;# 
   306  011A                     	;# 
   307  011B                     	;# 
   308  011D                     	;# 
   309  011D                     	;# 
   310  018C                     	;# 
   311  018E                     	;# 
   312  0191                     	;# 
   313  0191                     	;# 
   314  0192                     	;# 
   315  0193                     	;# 
   316  0193                     	;# 
   317  0193                     	;# 
   318  0194                     	;# 
   319  0195                     	;# 
   320  0196                     	;# 
   321  0199                     	;# 
   322  019A                     	;# 
   323  019B                     	;# 
   324  019B                     	;# 
   325  019B                     	;# 
   326  019B                     	;# 
   327  019C                     	;# 
   328  019C                     	;# 
   329  019D                     	;# 
   330  019E                     	;# 
   331  019F                     	;# 
   332  020C                     	;# 
   333  020E                     	;# 
   334  0211                     	;# 
   335  0211                     	;# 
   336  0212                     	;# 
   337  0212                     	;# 
   338  0213                     	;# 
   339  0213                     	;# 
   340  0214                     	;# 
   341  0214                     	;# 
   342  0215                     	;# 
   343  0215                     	;# 
   344  0215                     	;# 
   345  0216                     	;# 
   346  0216                     	;# 
   347  0217                     	;# 
   348  0217                     	;# 
   349  0291                     	;# 
   350  0291                     	;# 
   351  0292                     	;# 
   352  0293                     	;# 
   353  0294                     	;# 
   354  0295                     	;# 
   355  0295                     	;# 
   356  0296                     	;# 
   357  0391                     	;# 
   358  0392                     	;# 
   359  0393                     	;# 
   360  039A                     	;# 
   361  039C                     	;# 
   362  039D                     	;# 
   363  039E                     	;# 
   364  039F                     	;# 
   365  0FE4                     	;# 
   366  0FE5                     	;# 
   367  0FE6                     	;# 
   368  0FE7                     	;# 
   369  0FE8                     	;# 
   370  0FE9                     	;# 
   371  0FEA                     	;# 
   372  0FEB                     	;# 
   373  0FED                     	;# 
   374  0FEE                     	;# 
   375  0FEF                     	;# 
   376  0000                     	;# 
   377  0001                     	;# 
   378  0002                     	;# 
   379  0003                     	;# 
   380  0004                     	;# 
   381  0005                     	;# 
   382  0006                     	;# 
   383  0007                     	;# 
   384  0008                     	;# 
   385  0009                     	;# 
   386  000A                     	;# 
   387  000B                     	;# 
   388  000C                     	;# 
   389  000E                     	;# 
   390  0011                     	;# 
   391  0012                     	;# 
   392  0015                     	;# 
   393  0016                     	;# 
   394  0016                     	;# 
   395  0017                     	;# 
   396  0018                     	;# 
   397  0019                     	;# 
   398  001A                     	;# 
   399  001B                     	;# 
   400  001C                     	;# 
   401  001E                     	;# 
   402  001F                     	;# 
   403  008C                     	;# 
   404  008E                     	;# 
   405  0091                     	;# 
   406  0092                     	;# 
   407  0095                     	;# 
   408  0096                     	;# 
   409  0097                     	;# 
   410  0098                     	;# 
   411  0099                     	;# 
   412  009A                     	;# 
   413  009B                     	;# 
   414  009B                     	;# 
   415  009C                     	;# 
   416  009D                     	;# 
   417  009E                     	;# 
   418  010C                     	;# 
   419  010E                     	;# 
   420  0111                     	;# 
   421  0112                     	;# 
   422  0113                     	;# 
   423  0114                     	;# 
   424  0115                     	;# 
   425  0116                     	;# 
   426  0117                     	;# 
   427  0118                     	;# 
   428  0119                     	;# 
   429  011A                     	;# 
   430  011B                     	;# 
   431  011D                     	;# 
   432  011D                     	;# 
   433  018C                     	;# 
   434  018E                     	;# 
   435  0191                     	;# 
   436  0191                     	;# 
   437  0192                     	;# 
   438  0193                     	;# 
   439  0193                     	;# 
   440  0193                     	;# 
   441  0194                     	;# 
   442  0195                     	;# 
   443  0196                     	;# 
   444  0199                     	;# 
   445  019A                     	;# 
   446  019B                     	;# 
   447  019B                     	;# 
   448  019B                     	;# 
   449  019B                     	;# 
   450  019C                     	;# 
   451  019C                     	;# 
   452  019D                     	;# 
   453  019E                     	;# 
   454  019F                     	;# 
   455  020C                     	;# 
   456  020E                     	;# 
   457  0211                     	;# 
   458  0211                     	;# 
   459  0212                     	;# 
   460  0212                     	;# 
   461  0213                     	;# 
   462  0213                     	;# 
   463  0214                     	;# 
   464  0214                     	;# 
   465  0215                     	;# 
   466  0215                     	;# 
   467  0215                     	;# 
   468  0216                     	;# 
   469  0216                     	;# 
   470  0217                     	;# 
   471  0217                     	;# 
   472  0291                     	;# 
   473  0291                     	;# 
   474  0292                     	;# 
   475  0293                     	;# 
   476  0294                     	;# 
   477  0295                     	;# 
   478  0295                     	;# 
   479  0296                     	;# 
   480  0391                     	;# 
   481  0392                     	;# 
   482  0393                     	;# 
   483  039A                     	;# 
   484  039C                     	;# 
   485  039D                     	;# 
   486  039E                     	;# 
   487  039F                     	;# 
   488  0FE4                     	;# 
   489  0FE5                     	;# 
   490  0FE6                     	;# 
   491  0FE7                     	;# 
   492  0FE8                     	;# 
   493  0FE9                     	;# 
   494  0FEA                     	;# 
   495  0FEB                     	;# 
   496  0FED                     	;# 
   497  0FEE                     	;# 
   498  0FEF                     	;# 
   499  0000                     	;# 
   500  0001                     	;# 
   501  0002                     	;# 
   502  0003                     	;# 
   503  0004                     	;# 
   504  0005                     	;# 
   505  0006                     	;# 
   506  0007                     	;# 
   507  0008                     	;# 
   508  0009                     	;# 
   509  000A                     	;# 
   510  000B                     	;# 
   511  000C                     	;# 
   512  000E                     	;# 
   513  0011                     	;# 
   514  0012                     	;# 
   515  0015                     	;# 
   516  0016                     	;# 
   517  0016                     	;# 
   518  0017                     	;# 
   519  0018                     	;# 
   520  0019                     	;# 
   521  001A                     	;# 
   522  001B                     	;# 
   523  001C                     	;# 
   524  001E                     	;# 
   525  001F                     	;# 
   526  008C                     	;# 
   527  008E                     	;# 
   528  0091                     	;# 
   529  0092                     	;# 
   530  0095                     	;# 
   531  0096                     	;# 
   532  0097                     	;# 
   533  0098                     	;# 
   534  0099                     	;# 
   535  009A                     	;# 
   536  009B                     	;# 
   537  009B                     	;# 
   538  009C                     	;# 
   539  009D                     	;# 
   540  009E                     	;# 
   541  010C                     	;# 
   542  010E                     	;# 
   543  0111                     	;# 
   544  0112                     	;# 
   545  0113                     	;# 
   546  0114                     	;# 
   547  0115                     	;# 
   548  0116                     	;# 
   549  0117                     	;# 
   550  0118                     	;# 
   551  0119                     	;# 
   552  011A                     	;# 
   553  011B                     	;# 
   554  011D                     	;# 
   555  011D                     	;# 
   556  018C                     	;# 
   557  018E                     	;# 
   558  0191                     	;# 
   559  0191                     	;# 
   560  0192                     	;# 
   561  0193                     	;# 
   562  0193                     	;# 
   563  0193                     	;# 
   564  0194                     	;# 
   565  0195                     	;# 
   566  0196                     	;# 
   567  0199                     	;# 
   568  019A                     	;# 
   569  019B                     	;# 
   570  019B                     	;# 
   571  019B                     	;# 
   572  019B                     	;# 
   573  019C                     	;# 
   574  019C                     	;# 
   575  019D                     	;# 
   576  019E                     	;# 
   577  019F                     	;# 
   578  020C                     	;# 
   579  020E                     	;# 
   580  0211                     	;# 
   581  0211                     	;# 
   582  0212                     	;# 
   583  0212                     	;# 
   584  0213                     	;# 
   585  0213                     	;# 
   586  0214                     	;# 
   587  0214                     	;# 
   588  0215                     	;# 
   589  0215                     	;# 
   590  0215                     	;# 
   591  0216                     	;# 
   592  0216                     	;# 
   593  0217                     	;# 
   594  0217                     	;# 
   595  0291                     	;# 
   596  0291                     	;# 
   597  0292                     	;# 
   598  0293                     	;# 
   599  0294                     	;# 
   600  0295                     	;# 
   601  0295                     	;# 
   602  0296                     	;# 
   603  0391                     	;# 
   604  0392                     	;# 
   605  0393                     	;# 
   606  039A                     	;# 
   607  039C                     	;# 
   608  039D                     	;# 
   609  039E                     	;# 
   610  039F                     	;# 
   611  0FE4                     	;# 
   612  0FE5                     	;# 
   613  0FE6                     	;# 
   614  0FE7                     	;# 
   615  0FE8                     	;# 
   616  0FE9                     	;# 
   617  0FEA                     	;# 
   618  0FEB                     	;# 
   619  0FED                     	;# 
   620  0FEE                     	;# 
   621  0FEF                     	;# 
   622  0000                     	;# 
   623  0001                     	;# 
   624  0002                     	;# 
   625  0003                     	;# 
   626  0004                     	;# 
   627  0005                     	;# 
   628  0006                     	;# 
   629  0007                     	;# 
   630  0008                     	;# 
   631  0009                     	;# 
   632  000A                     	;# 
   633  000B                     	;# 
   634  000C                     	;# 
   635  000E                     	;# 
   636  0011                     	;# 
   637  0012                     	;# 
   638  0015                     	;# 
   639  0016                     	;# 
   640  0016                     	;# 
   641  0017                     	;# 
   642  0018                     	;# 
   643  0019                     	;# 
   644  001A                     	;# 
   645  001B                     	;# 
   646  001C                     	;# 
   647  001E                     	;# 
   648  001F                     	;# 
   649  008C                     	;# 
   650  008E                     	;# 
   651  0091                     	;# 
   652  0092                     	;# 
   653  0095                     	;# 
   654  0096                     	;# 
   655  0097                     	;# 
   656  0098                     	;# 
   657  0099                     	;# 
   658  009A                     	;# 
   659  009B                     	;# 
   660  009B                     	;# 
   661  009C                     	;# 
   662  009D                     	;# 
   663  009E                     	;# 
   664  010C                     	;# 
   665  010E                     	;# 
   666  0111                     	;# 
   667  0112                     	;# 
   668  0113                     	;# 
   669  0114                     	;# 
   670  0115                     	;# 
   671  0116                     	;# 
   672  0117                     	;# 
   673  0118                     	;# 
   674  0119                     	;# 
   675  011A                     	;# 
   676  011B                     	;# 
   677  011D                     	;# 
   678  011D                     	;# 
   679  018C                     	;# 
   680  018E                     	;# 
   681  0191                     	;# 
   682  0191                     	;# 
   683  0192                     	;# 
   684  0193                     	;# 
   685  0193                     	;# 
   686  0193                     	;# 
   687  0194                     	;# 
   688  0195                     	;# 
   689  0196                     	;# 
   690  0199                     	;# 
   691  019A                     	;# 
   692  019B                     	;# 
   693  019B                     	;# 
   694  019B                     	;# 
   695  019B                     	;# 
   696  019C                     	;# 
   697  019C                     	;# 
   698  019D                     	;# 
   699  019E                     	;# 
   700  019F                     	;# 
   701  020C                     	;# 
   702  020E                     	;# 
   703  0211                     	;# 
   704  0211                     	;# 
   705  0212                     	;# 
   706  0212                     	;# 
   707  0213                     	;# 
   708  0213                     	;# 
   709  0214                     	;# 
   710  0214                     	;# 
   711  0215                     	;# 
   712  0215                     	;# 
   713  0215                     	;# 
   714  0216                     	;# 
   715  0216                     	;# 
   716  0217                     	;# 
   717  0217                     	;# 
   718  0291                     	;# 
   719  0291                     	;# 
   720  0292                     	;# 
   721  0293                     	;# 
   722  0294                     	;# 
   723  0295                     	;# 
   724  0295                     	;# 
   725  0296                     	;# 
   726  0391                     	;# 
   727  0392                     	;# 
   728  0393                     	;# 
   729  039A                     	;# 
   730  039C                     	;# 
   731  039D                     	;# 
   732  039E                     	;# 
   733  039F                     	;# 
   734  0FE4                     	;# 
   735  0FE5                     	;# 
   736  0FE6                     	;# 
   737  0FE7                     	;# 
   738  0FE8                     	;# 
   739  0FE9                     	;# 
   740  0FEA                     	;# 
   741  0FEB                     	;# 
   742  0FED                     	;# 
   743  0FEE                     	;# 
   744  0FEF                     	;# 
   745  0000                     	;# 
   746  0001                     	;# 
   747  0002                     	;# 
   748  0003                     	;# 
   749  0004                     	;# 
   750  0005                     	;# 
   751  0006                     	;# 
   752  0007                     	;# 
   753  0008                     	;# 
   754  0009                     	;# 
   755  000A                     	;# 
   756  000B                     	;# 
   757  000C                     	;# 
   758  000E                     	;# 
   759  0011                     	;# 
   760  0012                     	;# 
   761  0015                     	;# 
   762  0016                     	;# 
   763  0016                     	;# 
   764  0017                     	;# 
   765  0018                     	;# 
   766  0019                     	;# 
   767  001A                     	;# 
   768  001B                     	;# 
   769  001C                     	;# 
   770  001E                     	;# 
   771  001F                     	;# 
   772  008C                     	;# 
   773  008E                     	;# 
   774  0091                     	;# 
   775  0092                     	;# 
   776  0095                     	;# 
   777  0096                     	;# 
   778  0097                     	;# 
   779  0098                     	;# 
   780  0099                     	;# 
   781  009A                     	;# 
   782  009B                     	;# 
   783  009B                     	;# 
   784  009C                     	;# 
   785  009D                     	;# 
   786  009E                     	;# 
   787  010C                     	;# 
   788  010E                     	;# 
   789  0111                     	;# 
   790  0112                     	;# 
   791  0113                     	;# 
   792  0114                     	;# 
   793  0115                     	;# 
   794  0116                     	;# 
   795  0117                     	;# 
   796  0118                     	;# 
   797  0119                     	;# 
   798  011A                     	;# 
   799  011B                     	;# 
   800  011D                     	;# 
   801  011D                     	;# 
   802  018C                     	;# 
   803  018E                     	;# 
   804  0191                     	;# 
   805  0191                     	;# 
   806  0192                     	;# 
   807  0193                     	;# 
   808  0193                     	;# 
   809  0193                     	;# 
   810  0194                     	;# 
   811  0195                     	;# 
   812  0196                     	;# 
   813  0199                     	;# 
   814  019A                     	;# 
   815  019B                     	;# 
   816  019B                     	;# 
   817  019B                     	;# 
   818  019B                     	;# 
   819  019C                     	;# 
   820  019C                     	;# 
   821  019D                     	;# 
   822  019E                     	;# 
   823  019F                     	;# 
   824  020C                     	;# 
   825  020E                     	;# 
   826  0211                     	;# 
   827  0211                     	;# 
   828  0212                     	;# 
   829  0212                     	;# 
   830  0213                     	;# 
   831  0213                     	;# 
   832  0214                     	;# 
   833  0214                     	;# 
   834  0215                     	;# 
   835  0215                     	;# 
   836  0215                     	;# 
   837  0216                     	;# 
   838  0216                     	;# 
   839  0217                     	;# 
   840  0217                     	;# 
   841  0291                     	;# 
   842  0291                     	;# 
   843  0292                     	;# 
   844  0293                     	;# 
   845  0294                     	;# 
   846  0295                     	;# 
   847  0295                     	;# 
   848  0296                     	;# 
   849  0391                     	;# 
   850  0392                     	;# 
   851  0393                     	;# 
   852  039A                     	;# 
   853  039C                     	;# 
   854  039D                     	;# 
   855  039E                     	;# 
   856  039F                     	;# 
   857  0FE4                     	;# 
   858  0FE5                     	;# 
   859  0FE6                     	;# 
   860  0FE7                     	;# 
   861  0FE8                     	;# 
   862  0FE9                     	;# 
   863  0FEA                     	;# 
   864  0FEB                     	;# 
   865  0FED                     	;# 
   866  0FEE                     	;# 
   867  0FEF                     	;# 
   868  0000                     	;# 
   869  0001                     	;# 
   870  0002                     	;# 
   871  0003                     	;# 
   872  0004                     	;# 
   873  0005                     	;# 
   874  0006                     	;# 
   875  0007                     	;# 
   876  0008                     	;# 
   877  0009                     	;# 
   878  000A                     	;# 
   879  000B                     	;# 
   880  000C                     	;# 
   881  000E                     	;# 
   882  0011                     	;# 
   883  0012                     	;# 
   884  0015                     	;# 
   885  0016                     	;# 
   886  0016                     	;# 
   887  0017                     	;# 
   888  0018                     	;# 
   889  0019                     	;# 
   890  001A                     	;# 
   891  001B                     	;# 
   892  001C                     	;# 
   893  001E                     	;# 
   894  001F                     	;# 
   895  008C                     	;# 
   896  008E                     	;# 
   897  0091                     	;# 
   898  0092                     	;# 
   899  0095                     	;# 
   900  0096                     	;# 
   901  0097                     	;# 
   902  0098                     	;# 
   903  0099                     	;# 
   904  009A                     	;# 
   905  009B                     	;# 
   906  009B                     	;# 
   907  009C                     	;# 
   908  009D                     	;# 
   909  009E                     	;# 
   910  010C                     	;# 
   911  010E                     	;# 
   912  0111                     	;# 
   913  0112                     	;# 
   914  0113                     	;# 
   915  0114                     	;# 
   916  0115                     	;# 
   917  0116                     	;# 
   918  0117                     	;# 
   919  0118                     	;# 
   920  0119                     	;# 
   921  011A                     	;# 
   922  011B                     	;# 
   923  011D                     	;# 
   924  011D                     	;# 
   925  018C                     	;# 
   926  018E                     	;# 
   927  0191                     	;# 
   928  0191                     	;# 
   929  0192                     	;# 
   930  0193                     	;# 
   931  0193                     	;# 
   932  0193                     	;# 
   933  0194                     	;# 
   934  0195                     	;# 
   935  0196                     	;# 
   936  0199                     	;# 
   937  019A                     	;# 
   938  019B                     	;# 
   939  019B                     	;# 
   940  019B                     	;# 
   941  019B                     	;# 
   942  019C                     	;# 
   943  019C                     	;# 
   944  019D                     	;# 
   945  019E                     	;# 
   946  019F                     	;# 
   947  020C                     	;# 
   948  020E                     	;# 
   949  0211                     	;# 
   950  0211                     	;# 
   951  0212                     	;# 
   952  0212                     	;# 
   953  0213                     	;# 
   954  0213                     	;# 
   955  0214                     	;# 
   956  0214                     	;# 
   957  0215                     	;# 
   958  0215                     	;# 
   959  0215                     	;# 
   960  0216                     	;# 
   961  0216                     	;# 
   962  0217                     	;# 
   963  0217                     	;# 
   964  0291                     	;# 
   965  0291                     	;# 
   966  0292                     	;# 
   967  0293                     	;# 
   968  0294                     	;# 
   969  0295                     	;# 
   970  0295                     	;# 
   971  0296                     	;# 
   972  0391                     	;# 
   973  0392                     	;# 
   974  0393                     	;# 
   975  039A                     	;# 
   976  039C                     	;# 
   977  039D                     	;# 
   978  039E                     	;# 
   979  039F                     	;# 
   980  0FE4                     	;# 
   981  0FE5                     	;# 
   982  0FE6                     	;# 
   983  0FE7                     	;# 
   984  0FE8                     	;# 
   985  0FE9                     	;# 
   986  0FEA                     	;# 
   987  0FEB                     	;# 
   988  0FED                     	;# 
   989  0FEE                     	;# 
   990  0FEF                     	;# 
   991  0000                     	;# 
   992  0001                     	;# 
   993  0002                     	;# 
   994  0003                     	;# 
   995  0004                     	;# 
   996  0005                     	;# 
   997  0006                     	;# 
   998  0007                     	;# 
   999  0008                     	;# 
  1000  0009                     	;# 
  1001  000A                     	;# 
  1002  000B                     	;# 
  1003  000C                     	;# 
  1004  000E                     	;# 
  1005  0011                     	;# 
  1006  0012                     	;# 
  1007  0015                     	;# 
  1008  0016                     	;# 
  1009  0016                     	;# 
  1010  0017                     	;# 
  1011  0018                     	;# 
  1012  0019                     	;# 
  1013  001A                     	;# 
  1014  001B                     	;# 
  1015  001C                     	;# 
  1016  001E                     	;# 
  1017  001F                     	;# 
  1018  008C                     	;# 
  1019  008E                     	;# 
  1020  0091                     	;# 
  1021  0092                     	;# 
  1022  0095                     	;# 
  1023  0096                     	;# 
  1024  0097                     	;# 
  1025  0098                     	;# 
  1026  0099                     	;# 
  1027  009A                     	;# 
  1028  009B                     	;# 
  1029  009B                     	;# 
  1030  009C                     	;# 
  1031  009D                     	;# 
  1032  009E                     	;# 
  1033  010C                     	;# 
  1034  010E                     	;# 
  1035  0111                     	;# 
  1036  0112                     	;# 
  1037  0113                     	;# 
  1038  0114                     	;# 
  1039  0115                     	;# 
  1040  0116                     	;# 
  1041  0117                     	;# 
  1042  0118                     	;# 
  1043  0119                     	;# 
  1044  011A                     	;# 
  1045  011B                     	;# 
  1046  011D                     	;# 
  1047  011D                     	;# 
  1048  018C                     	;# 
  1049  018E                     	;# 
  1050  0191                     	;# 
  1051  0191                     	;# 
  1052  0192                     	;# 
  1053  0193                     	;# 
  1054  0193                     	;# 
  1055  0193                     	;# 
  1056  0194                     	;# 
  1057  0195                     	;# 
  1058  0196                     	;# 
  1059  0199                     	;# 
  1060  019A                     	;# 
  1061  019B                     	;# 
  1062  019B                     	;# 
  1063  019B                     	;# 
  1064  019B                     	;# 
  1065  019C                     	;# 
  1066  019C                     	;# 
  1067  019D                     	;# 
  1068  019E                     	;# 
  1069  019F                     	;# 
  1070  020C                     	;# 
  1071  020E                     	;# 
  1072  0211                     	;# 
  1073  0211                     	;# 
  1074  0212                     	;# 
  1075  0212                     	;# 
  1076  0213                     	;# 
  1077  0213                     	;# 
  1078  0214                     	;# 
  1079  0214                     	;# 
  1080  0215                     	;# 
  1081  0215                     	;# 
  1082  0215                     	;# 
  1083  0216                     	;# 
  1084  0216                     	;# 
  1085  0217                     	;# 
  1086  0217                     	;# 
  1087  0291                     	;# 
  1088  0291                     	;# 
  1089  0292                     	;# 
  1090  0293                     	;# 
  1091  0294                     	;# 
  1092  0295                     	;# 
  1093  0295                     	;# 
  1094  0296                     	;# 
  1095  0391                     	;# 
  1096  0392                     	;# 
  1097  0393                     	;# 
  1098  039A                     	;# 
  1099  039C                     	;# 
  1100  039D                     	;# 
  1101  039E                     	;# 
  1102  039F                     	;# 
  1103  0FE4                     	;# 
  1104  0FE5                     	;# 
  1105  0FE6                     	;# 
  1106  0FE7                     	;# 
  1107  0FE8                     	;# 
  1108  0FE9                     	;# 
  1109  0FEA                     	;# 
  1110  0FEB                     	;# 
  1111  0FED                     	;# 
  1112  0FEE                     	;# 
  1113  0FEF                     	;# 
  1114  0000                     	;# 
  1115  0001                     	;# 
  1116  0002                     	;# 
  1117  0003                     	;# 
  1118  0004                     	;# 
  1119  0005                     	;# 
  1120  0006                     	;# 
  1121  0007                     	;# 
  1122  0008                     	;# 
  1123  0009                     	;# 
  1124  000A                     	;# 
  1125  000B                     	;# 
  1126  000C                     	;# 
  1127  000E                     	;# 
  1128  0011                     	;# 
  1129  0012                     	;# 
  1130  0015                     	;# 
  1131  0016                     	;# 
  1132  0016                     	;# 
  1133  0017                     	;# 
  1134  0018                     	;# 
  1135  0019                     	;# 
  1136  001A                     	;# 
  1137  001B                     	;# 
  1138  001C                     	;# 
  1139  001E                     	;# 
  1140  001F                     	;# 
  1141  008C                     	;# 
  1142  008E                     	;# 
  1143  0091                     	;# 
  1144  0092                     	;# 
  1145  0095                     	;# 
  1146  0096                     	;# 
  1147  0097                     	;# 
  1148  0098                     	;# 
  1149  0099                     	;# 
  1150  009A                     	;# 
  1151  009B                     	;# 
  1152  009B                     	;# 
  1153  009C                     	;# 
  1154  009D                     	;# 
  1155  009E                     	;# 
  1156  010C                     	;# 
  1157  010E                     	;# 
  1158  0111                     	;# 
  1159  0112                     	;# 
  1160  0113                     	;# 
  1161  0114                     	;# 
  1162  0115                     	;# 
  1163  0116                     	;# 
  1164  0117                     	;# 
  1165  0118                     	;# 
  1166  0119                     	;# 
  1167  011A                     	;# 
  1168  011B                     	;# 
  1169  011D                     	;# 
  1170  011D                     	;# 
  1171  018C                     	;# 
  1172  018E                     	;# 
  1173  0191                     	;# 
  1174  0191                     	;# 
  1175  0192                     	;# 
  1176  0193                     	;# 
  1177  0193                     	;# 
  1178  0193                     	;# 
  1179  0194                     	;# 
  1180  0195                     	;# 
  1181  0196                     	;# 
  1182  0199                     	;# 
  1183  019A                     	;# 
  1184  019B                     	;# 
  1185  019B                     	;# 
  1186  019B                     	;# 
  1187  019B                     	;# 
  1188  019C                     	;# 
  1189  019C                     	;# 
  1190  019D                     	;# 
  1191  019E                     	;# 
  1192  019F                     	;# 
  1193  020C                     	;# 
  1194  020E                     	;# 
  1195  0211                     	;# 
  1196  0211                     	;# 
  1197  0212                     	;# 
  1198  0212                     	;# 
  1199  0213                     	;# 
  1200  0213                     	;# 
  1201  0214                     	;# 
  1202  0214                     	;# 
  1203  0215                     	;# 
  1204  0215                     	;# 
  1205  0215                     	;# 
  1206  0216                     	;# 
  1207  0216                     	;# 
  1208  0217                     	;# 
  1209  0217                     	;# 
  1210  0291                     	;# 
  1211  0291                     	;# 
  1212  0292                     	;# 
  1213  0293                     	;# 
  1214  0294                     	;# 
  1215  0295                     	;# 
  1216  0295                     	;# 
  1217  0296                     	;# 
  1218  0391                     	;# 
  1219  0392                     	;# 
  1220  0393                     	;# 
  1221  039A                     	;# 
  1222  039C                     	;# 
  1223  039D                     	;# 
  1224  039E                     	;# 
  1225  039F                     	;# 
  1226  0FE4                     	;# 
  1227  0FE5                     	;# 
  1228  0FE6                     	;# 
  1229  0FE7                     	;# 
  1230  0FE8                     	;# 
  1231  0FE9                     	;# 
  1232  0FEA                     	;# 
  1233  0FEB                     	;# 
  1234  0FED                     	;# 
  1235  0FEE                     	;# 
  1236  0FEF                     	;# 
  1237  0000                     	;# 
  1238  0001                     	;# 
  1239  0002                     	;# 
  1240  0003                     	;# 
  1241  0004                     	;# 
  1242  0005                     	;# 
  1243  0006                     	;# 
  1244  0007                     	;# 
  1245  0008                     	;# 
  1246  0009                     	;# 
  1247  000A                     	;# 
  1248  000B                     	;# 
  1249  000C                     	;# 
  1250  000E                     	;# 
  1251  0011                     	;# 
  1252  0012                     	;# 
  1253  0015                     	;# 
  1254  0016                     	;# 
  1255  0016                     	;# 
  1256  0017                     	;# 
  1257  0018                     	;# 
  1258  0019                     	;# 
  1259  001A                     	;# 
  1260  001B                     	;# 
  1261  001C                     	;# 
  1262  001E                     	;# 
  1263  001F                     	;# 
  1264  008C                     	;# 
  1265  008E                     	;# 
  1266  0091                     	;# 
  1267  0092                     	;# 
  1268  0095                     	;# 
  1269  0096                     	;# 
  1270  0097                     	;# 
  1271  0098                     	;# 
  1272  0099                     	;# 
  1273  009A                     	;# 
  1274  009B                     	;# 
  1275  009B                     	;# 
  1276  009C                     	;# 
  1277  009D                     	;# 
  1278  009E                     	;# 
  1279  010C                     	;# 
  1280  010E                     	;# 
  1281  0111                     	;# 
  1282  0112                     	;# 
  1283  0113                     	;# 
  1284  0114                     	;# 
  1285  0115                     	;# 
  1286  0116                     	;# 
  1287  0117                     	;# 
  1288  0118                     	;# 
  1289  0119                     	;# 
  1290  011A                     	;# 
  1291  011B                     	;# 
  1292  011D                     	;# 
  1293  011D                     	;# 
  1294  018C                     	;# 
  1295  018E                     	;# 
  1296  0191                     	;# 
  1297  0191                     	;# 
  1298  0192                     	;# 
  1299  0193                     	;# 
  1300  0193                     	;# 
  1301  0193                     	;# 
  1302  0194                     	;# 
  1303  0195                     	;# 
  1304  0196                     	;# 
  1305  0199                     	;# 
  1306  019A                     	;# 
  1307  019B                     	;# 
  1308  019B                     	;# 
  1309  019B                     	;# 
  1310  019B                     	;# 
  1311  019C                     	;# 
  1312  019C                     	;# 
  1313  019D                     	;# 
  1314  019E                     	;# 
  1315  019F                     	;# 
  1316  020C                     	;# 
  1317  020E                     	;# 
  1318  0211                     	;# 
  1319  0211                     	;# 
  1320  0212                     	;# 
  1321  0212                     	;# 
  1322  0213                     	;# 
  1323  0213                     	;# 
  1324  0214                     	;# 
  1325  0214                     	;# 
  1326  0215                     	;# 
  1327  0215                     	;# 
  1328  0215                     	;# 
  1329  0216                     	;# 
  1330  0216                     	;# 
  1331  0217                     	;# 
  1332  0217                     	;# 
  1333  0291                     	;# 
  1334  0291                     	;# 
  1335  0292                     	;# 
  1336  0293                     	;# 
  1337  0294                     	;# 
  1338  0295                     	;# 
  1339  0295                     	;# 
  1340  0296                     	;# 
  1341  0391                     	;# 
  1342  0392                     	;# 
  1343  0393                     	;# 
  1344  039A                     	;# 
  1345  039C                     	;# 
  1346  039D                     	;# 
  1347  039E                     	;# 
  1348  039F                     	;# 
  1349  0FE4                     	;# 
  1350  0FE5                     	;# 
  1351  0FE6                     	;# 
  1352  0FE7                     	;# 
  1353  0FE8                     	;# 
  1354  0FE9                     	;# 
  1355  0FEA                     	;# 
  1356  0FEB                     	;# 
  1357  0FED                     	;# 
  1358  0FEE                     	;# 
  1359  0FEF                     	;# 
  1360  0000                     	;# 
  1361  0001                     	;# 
  1362  0002                     	;# 
  1363  0003                     	;# 
  1364  0004                     	;# 
  1365  0005                     	;# 
  1366  0006                     	;# 
  1367  0007                     	;# 
  1368  0008                     	;# 
  1369  0009                     	;# 
  1370  000A                     	;# 
  1371  000B                     	;# 
  1372  000C                     	;# 
  1373  000E                     	;# 
  1374  0011                     	;# 
  1375  0012                     	;# 
  1376  0015                     	;# 
  1377  0016                     	;# 
  1378  0016                     	;# 
  1379  0017                     	;# 
  1380  0018                     	;# 
  1381  0019                     	;# 
  1382  001A                     	;# 
  1383  001B                     	;# 
  1384  001C                     	;# 
  1385  001E                     	;# 
  1386  001F                     	;# 
  1387  008C                     	;# 
  1388  008E                     	;# 
  1389  0091                     	;# 
  1390  0092                     	;# 
  1391  0095                     	;# 
  1392  0096                     	;# 
  1393  0097                     	;# 
  1394  0098                     	;# 
  1395  0099                     	;# 
  1396  009A                     	;# 
  1397  009B                     	;# 
  1398  009B                     	;# 
  1399  009C                     	;# 
  1400  009D                     	;# 
  1401  009E                     	;# 
  1402  010C                     	;# 
  1403  010E                     	;# 
  1404  0111                     	;# 
  1405  0112                     	;# 
  1406  0113                     	;# 
  1407  0114                     	;# 
  1408  0115                     	;# 
  1409  0116                     	;# 
  1410  0117                     	;# 
  1411  0118                     	;# 
  1412  0119                     	;# 
  1413  011A                     	;# 
  1414  011B                     	;# 
  1415  011D                     	;# 
  1416  011D                     	;# 
  1417  018C                     	;# 
  1418  018E                     	;# 
  1419  0191                     	;# 
  1420  0191                     	;# 
  1421  0192                     	;# 
  1422  0193                     	;# 
  1423  0193                     	;# 
  1424  0193                     	;# 
  1425  0194                     	;# 
  1426  0195                     	;# 
  1427  0196                     	;# 
  1428  0199                     	;# 
  1429  019A                     	;# 
  1430  019B                     	;# 
  1431  019B                     	;# 
  1432  019B                     	;# 
  1433  019B                     	;# 
  1434  019C                     	;# 
  1435  019C                     	;# 
  1436  019D                     	;# 
  1437  019E                     	;# 
  1438  019F                     	;# 
  1439  020C                     	;# 
  1440  020E                     	;# 
  1441  0211                     	;# 
  1442  0211                     	;# 
  1443  0212                     	;# 
  1444  0212                     	;# 
  1445  0213                     	;# 
  1446  0213                     	;# 
  1447  0214                     	;# 
  1448  0214                     	;# 
  1449  0215                     	;# 
  1450  0215                     	;# 
  1451  0215                     	;# 
  1452  0216                     	;# 
  1453  0216                     	;# 
  1454  0217                     	;# 
  1455  0217                     	;# 
  1456  0291                     	;# 
  1457  0291                     	;# 
  1458  0292                     	;# 
  1459  0293                     	;# 
  1460  0294                     	;# 
  1461  0295                     	;# 
  1462  0295                     	;# 
  1463  0296                     	;# 
  1464  0391                     	;# 
  1465  0392                     	;# 
  1466  0393                     	;# 
  1467  039A                     	;# 
  1468  039C                     	;# 
  1469  039D                     	;# 
  1470  039E                     	;# 
  1471  039F                     	;# 
  1472  0FE4                     	;# 
  1473  0FE5                     	;# 
  1474  0FE6                     	;# 
  1475  0FE7                     	;# 
  1476  0FE8                     	;# 
  1477  0FE9                     	;# 
  1478  0FEA                     	;# 
  1479  0FEB                     	;# 
  1480  0FED                     	;# 
  1481  0FEE                     	;# 
  1482  0FEF                     	;# 
  1483                           
  1484                           	psect	nvBANK0
  1485  006C                     __pnvBANK0:	
  1486  006C                     _IOCAF4_InterruptHandler:	
  1487  006C                     	ds	2
  1488  000C                     _PORTAbits	set	12
  1489  0018                     _T1CONbits	set	24
  1490  0018                     _T1CON	set	24
  1491  0016                     _TMR1L	set	22
  1492  0017                     _TMR1H	set	23
  1493  0019                     _T1GCON	set	25
  1494  000B                     _INTCONbits	set	11
  1495  0011                     _PIR1bits	set	17
  1496  0095                     _OPTION_REGbits	set	149
  1497  008E                     _TRISC	set	142
  1498  008C                     _TRISA	set	140
  1499  0097                     _WDTCON	set	151
  1500  0098                     _OSCTUNE	set	152
  1501  0099                     _OSCCON	set	153
  1502  009D                     _ADCON0bits	set	157
  1503  0091                     _PIE1bits	set	145
  1504  009C                     _ADRESH	set	156
  1505  009B                     _ADRESL	set	155
  1506  009E                     _ADCON1	set	158
  1507  009D                     _ADCON0	set	157
  1508  04D6                     _PLLR	set	1238
  1509  010C                     _LATAbits	set	268
  1510  011D                     _APFCON	set	285
  1511  010E                     _LATC	set	270
  1512  010C                     _LATA	set	268
  1513  0116                     _BORCON	set	278
  1514  018C                     _ANSELA	set	396
  1515  018E                     _ANSELC	set	398
  1516  0199                     _RCREG	set	409
  1517  019D                     _RCSTAbits	set	413
  1518  019A                     _TXREG	set	410
  1519  019C                     _SPBRGH	set	412
  1520  019B                     _SPBRGL	set	411
  1521  019E                     _TXSTA	set	414
  1522  019D                     _RCSTA	set	413
  1523  019F                     _BAUDCON	set	415
  1524  020E                     _WPUC	set	526
  1525  020C                     _WPUA	set	524
  1526  0391                     _IOCAPbits	set	913
  1527  0392                     _IOCANbits	set	914
  1528  0393                     _IOCAFbits	set	915
  1529                           
  1530                           	psect	stringtext1
  1531  0313                     __pstringtext1:	
  1532  0313                     STR_10:	
  1533  0313  3441               	retlw	65	;'A'
  1534  0314  3454               	retlw	84	;'T'
  1535  0315  342B               	retlw	43	;'+'
  1536  0316  3443               	retlw	67	;'C'
  1537  0317  3457               	retlw	87	;'W'
  1538  0318  344A               	retlw	74	;'J'
  1539  0319  3441               	retlw	65	;'A'
  1540  031A  3450               	retlw	80	;'P'
  1541  031B  343D               	retlw	61	;'='
  1542  031C  3422               	retlw	34	;'"'
  1543  031D  3473               	retlw	115	;'s'
  1544  031E  3461               	retlw	97	;'a'
  1545  031F  3475               	retlw	117	;'u'
  1546  0320  346C               	retlw	108	;'l'
  1547  0321  3432               	retlw	50	;'2'
  1548  0322  3422               	retlw	34	;'"'
  1549  0323  342C               	retlw	44	;','
  1550  0324  3422               	retlw	34	;'"'
  1551  0325  3472               	retlw	114	;'r'
  1552  0326  3469               	retlw	105	;'i'
  1553  0327  3463               	retlw	99	;'c'
  1554  0328  346B               	retlw	107	;'k'
  1555  0329  3468               	retlw	104	;'h'
  1556  032A  3475               	retlw	117	;'u'
  1557  032B  346E               	retlw	110	;'n'
  1558  032C  3474               	retlw	116	;'t'
  1559  032D  3465               	retlw	101	;'e'
  1560  032E  3472               	retlw	114	;'r'
  1561  032F  3430               	retlw	48	;'0'
  1562  0330  3432               	retlw	50	;'2'
  1563  0331  3422               	retlw	34	;'"'
  1564  0332  340D               	retlw	13
  1565  0333  340A               	retlw	10
  1566  0334  3400               	retlw	0
  1567                           
  1568                           	psect	stringtext2
  1569  050B                     __pstringtext2:	
  1570  050B                     STR_12:	
  1571  050B  3441               	retlw	65	;'A'
  1572  050C  3454               	retlw	84	;'T'
  1573  050D  342B               	retlw	43	;'+'
  1574  050E  3443               	retlw	67	;'C'
  1575  050F  3449               	retlw	73	;'I'
  1576  0510  3450               	retlw	80	;'P'
  1577  0511  3453               	retlw	83	;'S'
  1578  0512  3445               	retlw	69	;'E'
  1579  0513  3452               	retlw	82	;'R'
  1580  0514  3456               	retlw	86	;'V'
  1581  0515  3445               	retlw	69	;'E'
  1582  0516  3452               	retlw	82	;'R'
  1583  0517  343D               	retlw	61	;'='
  1584  0518  3431               	retlw	49	;'1'
  1585  0519  342C               	retlw	44	;','
  1586  051A  3438               	retlw	56	;'8'
  1587  051B  3430               	retlw	48	;'0'
  1588  051C  340D               	retlw	13
  1589  051D  340A               	retlw	10
  1590  051E  3400               	retlw	0
  1591                           
  1592                           	psect	stringtext3
  1593  0555                     __pstringtext3:	
  1594  0555                     STR_9:	
  1595  0555  3441               	retlw	65	;'A'
  1596  0556  3454               	retlw	84	;'T'
  1597  0557  342B               	retlw	43	;'+'
  1598  0558  3443               	retlw	67	;'C'
  1599  0559  3457               	retlw	87	;'W'
  1600  055A  344D               	retlw	77	;'M'
  1601  055B  344F               	retlw	79	;'O'
  1602  055C  3444               	retlw	68	;'D'
  1603  055D  3445               	retlw	69	;'E'
  1604  055E  343D               	retlw	61	;'='
  1605  055F  3431               	retlw	49	;'1'
  1606  0560  340D               	retlw	13
  1607  0561  340A               	retlw	10
  1608  0562  3400               	retlw	0
  1609                           
  1610                           	psect	stringtext4
  1611  0563                     __pstringtext4:	
  1612  0563                     STR_11:	
  1613  0563  3441               	retlw	65	;'A'
  1614  0564  3454               	retlw	84	;'T'
  1615  0565  342B               	retlw	43	;'+'
  1616  0566  3443               	retlw	67	;'C'
  1617  0567  3449               	retlw	73	;'I'
  1618  0568  3450               	retlw	80	;'P'
  1619  0569  344D               	retlw	77	;'M'
  1620  056A  3455               	retlw	85	;'U'
  1621  056B  3458               	retlw	88	;'X'
  1622  056C  343D               	retlw	61	;'='
  1623  056D  3431               	retlw	49	;'1'
  1624  056E  340D               	retlw	13
  1625  056F  340A               	retlw	10
  1626  0570  3400               	retlw	0
  1627                           
  1628                           	psect	stringtext5
  1629  058C                     __pstringtext5:	
  1630  058C                     STR_14:	
  1631  058C  3441               	retlw	65	;'A'
  1632  058D  3454               	retlw	84	;'T'
  1633  058E  342B               	retlw	43	;'+'
  1634  058F  3443               	retlw	67	;'C'
  1635  0590  3449               	retlw	73	;'I'
  1636  0591  3450               	retlw	80	;'P'
  1637  0592  3453               	retlw	83	;'S'
  1638  0593  3445               	retlw	69	;'E'
  1639  0594  344E               	retlw	78	;'N'
  1640  0595  3444               	retlw	68	;'D'
  1641  0596  343D               	retlw	61	;'='
  1642  0597  3400               	retlw	0
  1643                           
  1644                           	psect	stringtext6
  1645  05A4                     __pstringtext6:	
  1646  05A4                     STR_3:	
  1647  05A4  3453               	retlw	83	;'S'
  1648  05A5  3445               	retlw	69	;'E'
  1649  05A6  344E               	retlw	78	;'N'
  1650  05A7  3444               	retlw	68	;'D'
  1651  05A8  3420               	retlw	32	;' '
  1652  05A9  3446               	retlw	70	;'F'
  1653  05AA  3441               	retlw	65	;'A'
  1654  05AB  3449               	retlw	73	;'I'
  1655  05AC  344C               	retlw	76	;'L'
  1656  05AD  3400               	retlw	0
  1657                           
  1658                           	psect	stringtext7
  1659  05CA                     __pstringtext7:	
  1660  05CA                     STR_1:	
  1661  05CA  3453               	retlw	83	;'S'
  1662  05CB  3445               	retlw	69	;'E'
  1663  05CC  344E               	retlw	78	;'N'
  1664  05CD  3444               	retlw	68	;'D'
  1665  05CE  3420               	retlw	32	;' '
  1666  05CF  344F               	retlw	79	;'O'
  1667  05D0  344B               	retlw	75	;'K'
  1668  05D1  3400               	retlw	0
  1669                           
  1670                           	psect	stringtext8
  1671  05D2                     __pstringtext8:	
  1672  05D2                     STR_6:	
  1673  05D2  3443               	retlw	67	;'C'
  1674  05D3  344F               	retlw	79	;'O'
  1675  05D4  344E               	retlw	78	;'N'
  1676  05D5  344E               	retlw	78	;'N'
  1677  05D6  3445               	retlw	69	;'E'
  1678  05D7  3443               	retlw	67	;'C'
  1679  05D8  3454               	retlw	84	;'T'
  1680  05D9  3400               	retlw	0
  1681                           
  1682                           	psect	stringtext9
  1683  05E2                     __pstringtext9:	
  1684  05E2                     STR_20:	
  1685  05E2  3462               	retlw	98	;'b'
  1686  05E3  346D               	retlw	109	;'m'
  1687  05E4  346F               	retlw	111	;'o'
  1688  05E5  3464               	retlw	100	;'d'
  1689  05E6  3465               	retlw	101	;'e'
  1690  05E7  340A               	retlw	10
  1691  05E8  3400               	retlw	0
  1692                           
  1693                           	psect	stringtext10
  1694  05E9                     __pstringtext10:	
  1695  05E9                     STR_19:	
  1696  05E9  3474               	retlw	116	;'t'
  1697  05EA  346D               	retlw	109	;'m'
  1698  05EB  346F               	retlw	111	;'o'
  1699  05EC  3464               	retlw	100	;'d'
  1700  05ED  3465               	retlw	101	;'e'
  1701  05EE  340A               	retlw	10
  1702  05EF  3400               	retlw	0
  1703                           
  1704                           	psect	stringtext11
  1705  05F0                     __pstringtext11:	
  1706  05F0                     STR_7:	
  1707  05F0  3443               	retlw	67	;'C'
  1708  05F1  344C               	retlw	76	;'L'
  1709  05F2  344F               	retlw	79	;'O'
  1710  05F3  3453               	retlw	83	;'S'
  1711  05F4  3445               	retlw	69	;'E'
  1712  05F5  3444               	retlw	68	;'D'
  1713  05F6  3400               	retlw	0
  1714                           
  1715                           	psect	stringtext12
  1716  05FE                     __pstringtext12:	
  1717  05FE                     STR_4:	
  1718  05FE  3445               	retlw	69	;'E'
  1719  05FF  3452               	retlw	82	;'R'
  1720  0600  3452               	retlw	82	;'R'
  1721  0601  344F               	retlw	79	;'O'
  1722  0602  3452               	retlw	82	;'R'
  1723  0603  3400               	retlw	0
  1724                           
  1725                           	psect	stringtext13
  1726  0628                     __pstringtext13:	
  1727  0628                     STR_8:	
  1728  0628  3441               	retlw	65	;'A'
  1729  0629  3454               	retlw	84	;'T'
  1730  062A  340D               	retlw	13
  1731  062B  340A               	retlw	10
  1732  062C  3400               	retlw	0
  1733                           
  1734                           	psect	stringtext14
  1735  062D                     __pstringtext14:	
  1736  062D                     STR_5:	
  1737  062D  342B               	retlw	43	;'+'
  1738  062E  3449               	retlw	73	;'I'
  1739  062F  3450               	retlw	80	;'P'
  1740  0630  3444               	retlw	68	;'D'
  1741  0631  3400               	retlw	0
  1742                           
  1743                           	psect	stringtext15
  1744  0637                     __pstringtext15:	
  1745  0637                     STR_18:	
  1746  0637  344F               	retlw	79	;'O'
  1747  0638  346B               	retlw	107	;'k'
  1748  0639  340A               	retlw	10
  1749  063A  3400               	retlw	0
  1750                           
  1751                           	psect	stringtext16
  1752  0643                     __pstringtext16:	
  1753  0643                     STR_21:	
  1754  0643  3443               	retlw	67	;'C'
  1755  0644  3448               	retlw	72	;'H'
  1756  0645  3400               	retlw	0
  1757                           
  1758                           	psect	stringtext17
  1759  0646                     __pstringtext17:	
  1760  0646                     STR_22:	
  1761  0646  3443               	retlw	67	;'C'
  1762  0647  344C               	retlw	76	;'L'
  1763  0648  3400               	retlw	0
  1764                           
  1765                           	psect	stringtext18
  1766  0655                     __pstringtext18:	
  1767  0655                     STR_15:	
  1768  0655  342C               	retlw	44	;','
  1769  0656  3400               	retlw	0
  1770                           
  1771                           	psect	stringtext19
  1772  0657                     __pstringtext19:	
  1773  0657                     STR_13:	
  1774  0657  343A               	retlw	58	;':'
  1775  0658  3400               	retlw	0
  1776                           
  1777                           	psect	stringtext20
  1778  0000                     __pstringtext20:	
  1779  0332                     
  1780                           ; #config settings
  1781  0000                     
  1782                           	psect	cinit
  1783  003F                     start_initialization:	
  1784  003F                     __initialization:	
  1785  003F  3020               	movlw	low __pbssBANK0
  1786                           
  1787                           ; Clear objects allocated to COMMON
  1788  0040  01FA               	clrf	__pbssCOMMON& (0+127)
  1789  0041  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  1790                           
  1791                           ; Clear objects allocated to BANK0
  1792  0042  0084               	movwf	4
  1793  0043  3000               	movlw	high __pbssBANK0
  1794  0044  0085               	movwf	5
  1795  0045  302C               	movlw	44
  1796  0046  2604               	fcall	clear_ram0
  1797                           
  1798                           ; Clear objects allocated to BANK1
  1799  0047  30A0               	movlw	low __pbssBANK1
  1800  0048  0084               	movwf	4
  1801  0049  3000               	movlw	high __pbssBANK1
  1802  004A  0085               	movwf	5
  1803  004B  3016               	movlw	22
  1804  004C  2604               	fcall	clear_ram0
  1805  004D                     end_of_initialization:	
  1806                           ;End of C runtime variable initialization code
  1807                           
  1808  004D                     __end_of__initialization:	
  1809  004D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  1810  004E  0020               	movlb	0
  1811  004F  2BD8               	ljmp	_main	;jump to C main() function
  1812                           
  1813                           	psect	bssCOMMON
  1814  007A                     __pbssCOMMON:	
  1815  007A                     _eusartTxBufferRemaining:	
  1816  007A                     	ds	1
  1817  007B                     _eusartTxHead:	
  1818  007B                     	ds	1
  1819                           
  1820                           	psect	bssBANK0
  1821  0020                     __pbssBANK0:	
  1822  0020                     _ESP_external_message_handler:	
  1823  0020                     	ds	2
  1824  0022                     _TMR1_InterruptHandler:	
  1825  0022                     	ds	2
  1826  0024                     _timer1ReloadVal:	
  1827  0024                     	ds	2
  1828  0026                     _ADC_value:	
  1829  0026                     	ds	2
  1830  0028                     _EUSART_RxDefaultInterruptHandler:	
  1831  0028                     	ds	2
  1832  002A                     _EUSART_TxDefaultInterruptHandler:	
  1833  002A                     	ds	2
  1834  002C                     _IOC_value:	
  1835  002C                     	ds	1
  1836  002D                     _TMR1_state:	
  1837  002D                     	ds	1
  1838  002E                     _message_format:	
  1839  002E                     	ds	1
  1840  002F                     _esp_channel:	
  1841  002F                     	ds	1
  1842  0030                     _esp_read_data_index:	
  1843  0030                     	ds	1
  1844  0031                     _IOC_state:	
  1845  0031                     	ds	1
  1846  0032                     _ESP_wait_exception:	
  1847  0032                     	ds	1
  1848  0033                     _eusartRxCount:	
  1849  0033                     	ds	1
  1850  0034                     _eusartRxTail:	
  1851  0034                     	ds	1
  1852  0035                     _eusartRxHead:	
  1853  0035                     	ds	1
  1854  0036                     _eusartTxTail:	
  1855  0036                     	ds	1
  1856  0037                     _ADC_state:	
  1857  0037                     	ds	1
  1858  0038                     _esp_read_data:	
  1859  0038                     	ds	20
  1860                           
  1861                           	psect	bssBANK1
  1862  00A0                     __pbssBANK1:	
  1863  00A0                     _eusartRxBuffer:	
  1864  00A0                     	ds	12
  1865  00AC                     _eusartTxBuffer:	
  1866  00AC                     	ds	10
  1867                           
  1868                           	psect	clrtext
  1869  0604                     clear_ram0:	
  1870                           ;	Called with FSR0 containing the base address, and
  1871                           ;	WREG with the size to clear
  1872                           
  1873  0604  0064               	clrwdt	;clear the watchdog before getting into this loop
  1874  0605                     clrloop0:	
  1875  0605  0180               	clrf	0	;clear RAM location pointed to by FSR
  1876  0606  3101               	addfsr 0,1
  1877  0607  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1878  0608  2E05               	goto	clrloop0	;have we reached the end yet?
  1879  0609  3400               	retlw	0	;all done for this memory range, return
  1880                           
  1881                           	psect	cstackCOMMON
  1882  0070                     __pcstackCOMMON:	
  1883  0070                     ?_PIN_MANAGER_IOC:	
  1884  0070                     ??_PIN_MANAGER_IOC:	
  1885                           ; 1 bytes @ 0x0
  1886                           
  1887  0070                     ?_TMR1_ISR:	
  1888                           ; 1 bytes @ 0x0
  1889                           
  1890  0070                     ?_EUSART_Receive_ISR:	
  1891                           ; 1 bytes @ 0x0
  1892                           
  1893  0070                     ??_EUSART_Receive_ISR:	
  1894                           ; 1 bytes @ 0x0
  1895                           
  1896  0070                     ?_EUSART_Transmit_ISR:	
  1897                           ; 1 bytes @ 0x0
  1898                           
  1899  0070                     ??_EUSART_Transmit_ISR:	
  1900                           ; 1 bytes @ 0x0
  1901                           
  1902  0070                     ?_PIN_MANAGER_Initialize:	
  1903                           ; 1 bytes @ 0x0
  1904                           
  1905  0070                     ?_OSCILLATOR_Initialize:	
  1906                           ; 1 bytes @ 0x0
  1907                           
  1908  0070                     ?_WDT_Initialize:	
  1909                           ; 1 bytes @ 0x0
  1910                           
  1911  0070                     ?_TMR1_Initialize:	
  1912                           ; 1 bytes @ 0x0
  1913                           
  1914  0070                     ?_TMR1_DefaultInterruptHandler:	
  1915                           ; 1 bytes @ 0x0
  1916                           
  1917  0070                     ??_TMR1_DefaultInterruptHandler:	
  1918                           ; 1 bytes @ 0x0
  1919                           
  1920  0070                     ?_IOCAF4_DefaultInterruptHandler:	
  1921                           ; 1 bytes @ 0x0
  1922                           
  1923  0070                     ??_IOCAF4_DefaultInterruptHandler:	
  1924                           ; 1 bytes @ 0x0
  1925                           
  1926  0070                     ?_IOCAF4_ISR:	
  1927                           ; 1 bytes @ 0x0
  1928                           
  1929  0070                     ??_IOCAF4_ISR:	
  1930                           ; 1 bytes @ 0x0
  1931                           
  1932  0070                     ?_ESP_initialize:	
  1933                           ; 1 bytes @ 0x0
  1934                           
  1935  0070                     ?_logger_initialize:	
  1936                           ; 1 bytes @ 0x0
  1937                           
  1938  0070                     ?_ESP_config:	
  1939                           ; 1 bytes @ 0x0
  1940                           
  1941  0070                     ?_ESP_message_handler:	
  1942                           ; 1 bytes @ 0x0
  1943                           
  1944  0070                     ?_read_analog:	
  1945                           ; 1 bytes @ 0x0
  1946                           
  1947  0070                     ?_process_ioc:	
  1948                           ; 1 bytes @ 0x0
  1949                           
  1950  0070                     ?_ESP_process_message:	
  1951                           ; 1 bytes @ 0x0
  1952                           
  1953  0070                     ?_ESP_wait_for:	
  1954                           ; 1 bytes @ 0x0
  1955                           
  1956  0070                     ?__TMR1_Ready:	
  1957                           ; 1 bytes @ 0x0
  1958                           
  1959  0070                     ??__TMR1_Ready:	
  1960                           ; 1 bytes @ 0x0
  1961                           
  1962  0070                     ?__IOC_Ready:	
  1963                           ; 1 bytes @ 0x0
  1964                           
  1965  0070                     ??__IOC_Ready:	
  1966                           ; 1 bytes @ 0x0
  1967                           
  1968  0070                     ?_toggle_format:	
  1969                           ; 1 bytes @ 0x0
  1970                           
  1971  0070                     ?_ADC_Initialize:	
  1972                           ; 1 bytes @ 0x0
  1973                           
  1974  0070                     ?_ADC_SelectChannel:	
  1975                           ; 1 bytes @ 0x0
  1976                           
  1977  0070                     ?_ADC_StartConversion:	
  1978                           ; 1 bytes @ 0x0
  1979                           
  1980  0070                     ?_ADC_ISR:	
  1981                           ; 1 bytes @ 0x0
  1982                           
  1983  0070                     ??_ADC_ISR:	
  1984                           ; 1 bytes @ 0x0
  1985                           
  1986  0070                     ?_INTERRUPT_InterruptManager:	
  1987                           ; 1 bytes @ 0x0
  1988                           
  1989  0070                     ?_EUSART_Initialize:	
  1990                           ; 1 bytes @ 0x0
  1991                           
  1992  0070                     ?_EUSART_is_tx_ready:	
  1993                           ; 1 bytes @ 0x0
  1994                           
  1995  0070                     ?_EUSART_is_rx_ready:	
  1996                           ; 1 bytes @ 0x0
  1997                           
  1998  0070                     ?_EUSART_Read:	
  1999                           ; 1 bytes @ 0x0
  2000                           
  2001  0070                     ?_EUSART_Write:	
  2002                           ; 1 bytes @ 0x0
  2003                           
  2004  0070                     ?_SYSTEM_Initialize:	
  2005                           ; 1 bytes @ 0x0
  2006                           
  2007  0070                     ?_TMR1_StartTimer:	
  2008                           ; 1 bytes @ 0x0
  2009                           
  2010  0070                     ?_TMR1_StopTimer:	
  2011                           ; 1 bytes @ 0x0
  2012                           
  2013  0070                     ?_TMR1_WriteTimer:	
  2014                           ; 1 bytes @ 0x0
  2015                           
  2016  0070                     ?_main:	
  2017                           ; 1 bytes @ 0x0
  2018                           
  2019  0070                     ?_ESP_read:	
  2020                           ; 1 bytes @ 0x0
  2021                           
  2022  0070                     ?_ESP_process_rx_data:	
  2023                           ; 1 bytes @ 0x0
  2024                           
  2025  0070                     ?i1_ADC_StartConversion:	
  2026                           ; 1 bytes @ 0x0
  2027                           
  2028  0070                     ??i1_ADC_StartConversion:	
  2029                           ; 1 bytes @ 0x0
  2030                           
  2031  0070                     ?_ADC_GetConversionResult:	
  2032                           ; 1 bytes @ 0x0
  2033                           
  2034  0070                     TMR1_WriteTimer@timerVal:	
  2035                           ; 2 bytes @ 0x0
  2036                           
  2037                           
  2038                           ; 2 bytes @ 0x0
  2039  0070                     	ds	2
  2040  0072                     ??_TMR1_ISR:	
  2041  0072                     ?_EUSART_SetRxInterruptHandler:	
  2042                           ; 1 bytes @ 0x2
  2043                           
  2044  0072                     ?_EUSART_SetTxInterruptHandler:	
  2045                           ; 1 bytes @ 0x2
  2046                           
  2047  0072                     ??_OSCILLATOR_Initialize:	
  2048                           ; 1 bytes @ 0x2
  2049                           
  2050  0072                     ??_WDT_Initialize:	
  2051                           ; 1 bytes @ 0x2
  2052                           
  2053  0072                     ?_TMR1_SetInterruptHandler:	
  2054                           ; 1 bytes @ 0x2
  2055                           
  2056  0072                     ?_IOCAF4_SetInterruptHandler:	
  2057                           ; 1 bytes @ 0x2
  2058                           
  2059  0072                     ?_ESP_Set_application_handler:	
  2060                           ; 1 bytes @ 0x2
  2061                           
  2062  0072                     ?_strchr:	
  2063                           ; 1 bytes @ 0x2
  2064                           
  2065  0072                     ??_ADC_Initialize:	
  2066                           ; 1 bytes @ 0x2
  2067                           
  2068  0072                     ??_ADC_SelectChannel:	
  2069                           ; 1 bytes @ 0x2
  2070                           
  2071  0072                     ??_ADC_StartConversion:	
  2072                           ; 1 bytes @ 0x2
  2073                           
  2074  0072                     ??_ADC_GetConversionResult:	
  2075                           ; 1 bytes @ 0x2
  2076                           
  2077  0072                     ??_INTERRUPT_InterruptManager:	
  2078                           ; 1 bytes @ 0x2
  2079                           
  2080  0072                     ??_EUSART_is_tx_ready:	
  2081                           ; 1 bytes @ 0x2
  2082                           
  2083  0072                     ??_EUSART_is_rx_ready:	
  2084                           ; 1 bytes @ 0x2
  2085                           
  2086  0072                     ??_EUSART_Read:	
  2087                           ; 1 bytes @ 0x2
  2088                           
  2089  0072                     ??_EUSART_Write:	
  2090                           ; 1 bytes @ 0x2
  2091                           
  2092  0072                     ??_TMR1_StartTimer:	
  2093                           ; 1 bytes @ 0x2
  2094                           
  2095  0072                     ??_TMR1_StopTimer:	
  2096                           ; 1 bytes @ 0x2
  2097                           
  2098  0072                     ??_TMR1_WriteTimer:	
  2099                           ; 1 bytes @ 0x2
  2100                           
  2101  0072                     ?___lbmod:	
  2102                           ; 1 bytes @ 0x2
  2103                           
  2104  0072                     ?_strlen:	
  2105                           ; 1 bytes @ 0x2
  2106                           
  2107  0072                     ?_strncmp:	
  2108                           ; 2 bytes @ 0x2
  2109                           
  2110  0072                     ?___awdiv:	
  2111                           ; 2 bytes @ 0x2
  2112                           
  2113  0072                     ?___lwdiv:	
  2114                           ; 2 bytes @ 0x2
  2115                           
  2116  0072                     ?___lwmod:	
  2117                           ; 2 bytes @ 0x2
  2118                           
  2119  0072                     ?___lmul:	
  2120                           ; 2 bytes @ 0x2
  2121                           
  2122  0072                     EUSART_Read@readValue:	
  2123                           ; 4 bytes @ 0x2
  2124                           
  2125  0072                     EUSART_Write@txData:	
  2126                           ; 1 bytes @ 0x2
  2127                           
  2128  0072                     ___lbmod@divisor:	
  2129                           ; 1 bytes @ 0x2
  2130                           
  2131  0072                     EUSART_SetTxInterruptHandler@interruptHandler:	
  2132                           ; 1 bytes @ 0x2
  2133                           
  2134  0072                     EUSART_SetRxInterruptHandler@interruptHandler:	
  2135                           ; 2 bytes @ 0x2
  2136                           
  2137  0072                     TMR1_SetInterruptHandler@InterruptHandler:	
  2138                           ; 2 bytes @ 0x2
  2139                           
  2140  0072                     IOCAF4_SetInterruptHandler@InterruptHandler:	
  2141                           ; 2 bytes @ 0x2
  2142                           
  2143  0072                     ESP_Set_application_handler@applicationHandler:	
  2144                           ; 2 bytes @ 0x2
  2145                           
  2146  0072                     ___awdiv@divisor:	
  2147                           ; 2 bytes @ 0x2
  2148                           
  2149  0072                     ___lwdiv@divisor:	
  2150                           ; 2 bytes @ 0x2
  2151                           
  2152  0072                     ___lwmod@divisor:	
  2153                           ; 2 bytes @ 0x2
  2154                           
  2155  0072                     strchr@c:	
  2156                           ; 2 bytes @ 0x2
  2157                           
  2158  0072                     strlen@s:	
  2159                           ; 2 bytes @ 0x2
  2160                           
  2161  0072                     strncmp@_r:	
  2162                           ; 2 bytes @ 0x2
  2163                           
  2164  0072                     ___lmul@multiplier:	
  2165                           ; 2 bytes @ 0x2
  2166                           
  2167                           
  2168                           ; 4 bytes @ 0x2
  2169  0072                     	ds	1
  2170  0073                     ?__puts:	
  2171  0073                     ?_write:	
  2172                           ; 1 bytes @ 0x3
  2173                           
  2174  0073                     ??___lbmod:	
  2175                           ; 1 bytes @ 0x3
  2176                           
  2177  0073                     ADC_SelectChannel@channel:	
  2178                           ; 1 bytes @ 0x3
  2179                           
  2180  0073                     __puts@pt:	
  2181                           ; 1 bytes @ 0x3
  2182                           
  2183  0073                     write@pt:	
  2184                           ; 2 bytes @ 0x3
  2185                           
  2186                           
  2187                           ; 2 bytes @ 0x3
  2188  0073                     	ds	1
  2189  0074                     ??_EUSART_SetRxInterruptHandler:	
  2190  0074                     ??_EUSART_SetTxInterruptHandler:	
  2191                           ; 1 bytes @ 0x4
  2192                           
  2193  0074                     ??_PIN_MANAGER_Initialize:	
  2194                           ; 1 bytes @ 0x4
  2195                           
  2196  0074                     ??_TMR1_Initialize:	
  2197                           ; 1 bytes @ 0x4
  2198                           
  2199  0074                     ??_TMR1_SetInterruptHandler:	
  2200                           ; 1 bytes @ 0x4
  2201                           
  2202  0074                     ??_IOCAF4_SetInterruptHandler:	
  2203                           ; 1 bytes @ 0x4
  2204                           
  2205  0074                     ??_ESP_initialize:	
  2206                           ; 1 bytes @ 0x4
  2207                           
  2208  0074                     ??_logger_initialize:	
  2209                           ; 1 bytes @ 0x4
  2210                           
  2211  0074                     ??_ESP_Set_application_handler:	
  2212                           ; 1 bytes @ 0x4
  2213                           
  2214  0074                     ??_strlen:	
  2215                           ; 1 bytes @ 0x4
  2216                           
  2217  0074                     ??_strchr:	
  2218                           ; 1 bytes @ 0x4
  2219                           
  2220  0074                     ??_EUSART_Initialize:	
  2221                           ; 1 bytes @ 0x4
  2222                           
  2223  0074                     ??_SYSTEM_Initialize:	
  2224                           ; 1 bytes @ 0x4
  2225                           
  2226  0074                     ___lbmod@dividend:	
  2227                           ; 1 bytes @ 0x4
  2228                           
  2229  0074                     strchr@s:	
  2230                           ; 1 bytes @ 0x4
  2231                           
  2232  0074                     ___awdiv@dividend:	
  2233                           ; 1 bytes @ 0x4
  2234                           
  2235  0074                     ___lwdiv@dividend:	
  2236                           ; 2 bytes @ 0x4
  2237                           
  2238  0074                     ___lwmod@dividend:	
  2239                           ; 2 bytes @ 0x4
  2240                           
  2241  0074                     strncmp@n:	
  2242                           ; 2 bytes @ 0x4
  2243                           
  2244                           
  2245                           ; 2 bytes @ 0x4
  2246  0074                     	ds	1
  2247  0075                     ??__puts:	
  2248  0075                     write@lenght:	
  2249                           ; 1 bytes @ 0x5
  2250                           
  2251  0075                     ___lbmod@counter:	
  2252                           ; 1 bytes @ 0x5
  2253                           
  2254  0075                     strlen@a:	
  2255                           ; 1 bytes @ 0x5
  2256                           
  2257                           
  2258                           ; 2 bytes @ 0x5
  2259  0075                     	ds	1
  2260  0076                     ??_strncmp:	
  2261  0076                     ??_write:	
  2262                           ; 1 bytes @ 0x6
  2263                           
  2264  0076                     ??___awdiv:	
  2265                           ; 1 bytes @ 0x6
  2266                           
  2267  0076                     ??___lwdiv:	
  2268                           ; 1 bytes @ 0x6
  2269                           
  2270  0076                     ??___lwmod:	
  2271                           ; 1 bytes @ 0x6
  2272                           
  2273  0076                     ___awdiv@counter:	
  2274                           ; 1 bytes @ 0x6
  2275                           
  2276  0076                     ___lbmod@rem:	
  2277                           ; 1 bytes @ 0x6
  2278                           
  2279  0076                     ___lwmod@counter:	
  2280                           ; 1 bytes @ 0x6
  2281                           
  2282  0076                     ___lwdiv@quotient:	
  2283                           ; 1 bytes @ 0x6
  2284                           
  2285  0076                     ___lmul@multiplicand:	
  2286                           ; 2 bytes @ 0x6
  2287                           
  2288                           
  2289                           ; 4 bytes @ 0x6
  2290  0076                     	ds	1
  2291  0077                     ??_strstr:	
  2292  0077                     ___awdiv@sign:	
  2293                           ; 1 bytes @ 0x7
  2294                           
  2295  0077                     strstr@nl:	
  2296                           ; 1 bytes @ 0x7
  2297                           
  2298                           
  2299                           ; 2 bytes @ 0x7
  2300  0077                     	ds	1
  2301  0078                     __puts@index:	
  2302  0078                     write@i:	
  2303                           ; 1 bytes @ 0x8
  2304                           
  2305  0078                     ___lwdiv@counter:	
  2306                           ; 1 bytes @ 0x8
  2307                           
  2308  0078                     ___awdiv@quotient:	
  2309                           ; 1 bytes @ 0x8
  2310                           
  2311                           
  2312                           ; 2 bytes @ 0x8
  2313  0078                     	ds	1
  2314  0079                     ??__sprintf:	
  2315  0079                     strstr@h:	
  2316                           ; 1 bytes @ 0x9
  2317                           
  2318                           
  2319                           ; 1 bytes @ 0x9
  2320  0079                     	ds	1
  2321  007A                     ??_process_ioc:	
  2322  007A                     ??_ESP_default_application_handler:	
  2323                           ; 1 bytes @ 0xA
  2324                           
  2325  007A                     ??_ESP_process_message:	
  2326                           ; 1 bytes @ 0xA
  2327                           
  2328  007A                     ??_ESP_wait_for:	
  2329                           ; 1 bytes @ 0xA
  2330                           
  2331  007A                     ??_toggle_format:	
  2332                           ; 1 bytes @ 0xA
  2333                           
  2334  007A                     ??_main:	
  2335                           ; 1 bytes @ 0xA
  2336                           
  2337  007A                     ??_ESP_process_rx_data:	
  2338                           ; 1 bytes @ 0xA
  2339                           
  2340  007A                     ??_ESP_write:	
  2341                           ; 1 bytes @ 0xA
  2342                           
  2343  007A                     ??___lmul:	
  2344                           ; 1 bytes @ 0xA
  2345                           
  2346                           
  2347                           	psect	cstackBANK0
  2348  004C                     __pcstackBANK0:	
  2349                           ; 1 bytes @ 0xA
  2350                           
  2351  004C                     ?__sprintf:	
  2352  004C                     strncmp@_l:	
  2353                           ; 1 bytes @ 0x0
  2354                           
  2355  004C                     __sprintf@val:	
  2356                           ; 1 bytes @ 0x0
  2357                           
  2358  004C                     ___lmul@product:	
  2359                           ; 2 bytes @ 0x0
  2360                           
  2361                           
  2362                           ; 4 bytes @ 0x0
  2363  004C                     	ds	1
  2364  004D                     strncmp@r:	
  2365                           
  2366                           ; 2 bytes @ 0x1
  2367  004D                     	ds	1
  2368  004E                     __sprintf@aux:	
  2369                           
  2370                           ; 2 bytes @ 0x2
  2371  004E                     	ds	1
  2372  004F                     strncmp@l:	
  2373                           
  2374                           ; 1 bytes @ 0x3
  2375  004F                     	ds	1
  2376  0050                     ?_strstr:	
  2377  0050                     __sprintf@mess:	
  2378                           ; 1 bytes @ 0x4
  2379                           
  2380  0050                     strstr@n:	
  2381                           ; 1 bytes @ 0x4
  2382                           
  2383                           
  2384                           ; 2 bytes @ 0x4
  2385  0050                     	ds	2
  2386  0052                     ESP_process_message@aux:	
  2387                           
  2388                           ; 1 bytes @ 0x6
  2389  0052                     	ds	1
  2390  0053                     ??_ESP_read:	
  2391                           
  2392                           ; 1 bytes @ 0x7
  2393  0053                     	ds	1
  2394  0054                     ESP_read@ret:	
  2395                           
  2396                           ; 1 bytes @ 0x8
  2397  0054                     	ds	1
  2398  0055                     ESP_wait_for@esp_mess:	
  2399                           
  2400                           ; 1 bytes @ 0x9
  2401  0055                     	ds	1
  2402  0056                     ESP_wait_for@ret:	
  2403                           
  2404                           ; 1 bytes @ 0xA
  2405  0056                     	ds	1
  2406  0057                     ??_ESP_config:	
  2407  0057                     ?_ESP_write:	
  2408                           ; 1 bytes @ 0xB
  2409                           
  2410  0057                     ESP_write@pt:	
  2411                           ; 1 bytes @ 0xB
  2412                           
  2413                           
  2414                           ; 2 bytes @ 0xB
  2415  0057                     	ds	2
  2416  0059                     ESP_write@length:	
  2417                           
  2418                           ; 1 bytes @ 0xD
  2419  0059                     	ds	1
  2420  005A                     ESP_write@res:	
  2421                           
  2422                           ; 1 bytes @ 0xE
  2423  005A                     	ds	1
  2424  005B                     ESP_write@aux:	
  2425                           
  2426                           ; 1 bytes @ 0xF
  2427  005B                     	ds	1
  2428  005C                     ??_read_analog:	
  2429  005C                     ?_process_message:	
  2430                           ; 1 bytes @ 0x10
  2431                           
  2432  005C                     ?_ESP_default_application_handler:	
  2433                           ; 1 bytes @ 0x10
  2434                           
  2435  005C                     ESP_default_application_handler@data:	
  2436                           ; 1 bytes @ 0x10
  2437                           
  2438  005C                     process_message@message:	
  2439                           ; 1 bytes @ 0x10
  2440                           
  2441                           
  2442                           ; 1 bytes @ 0x10
  2443  005C                     	ds	1
  2444  005D                     ??_process_message:	
  2445                           
  2446                           ; 1 bytes @ 0x11
  2447  005D                     	ds	2
  2448  005F                     ESP_process_rx_data@index:	
  2449                           
  2450                           ; 1 bytes @ 0x13
  2451  005F                     	ds	1
  2452  0060                     ESP_process_rx_data@aux:	
  2453  0060                     read_analog@aux1:	
  2454                           ; 1 bytes @ 0x14
  2455                           
  2456                           
  2457                           ; 4 bytes @ 0x14
  2458  0060                     	ds	1
  2459  0061                     ??_ESP_message_handler:	
  2460                           
  2461                           ; 1 bytes @ 0x15
  2462  0061                     	ds	2
  2463  0063                     ESP_message_handler@ret:	
  2464                           
  2465                           ; 1 bytes @ 0x17
  2466  0063                     	ds	1
  2467  0064                     read_analog@mess:	
  2468                           
  2469                           ; 6 bytes @ 0x18
  2470  0064                     	ds	6
  2471  006A                     read_analog@adc_val:	
  2472                           
  2473                           ; 2 bytes @ 0x1E
  2474  006A                     	ds	2
  2475                           
  2476                           	psect	maintext
  2477  03D8                     __pmaintext:	
  2478 ;;
  2479 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2480 ;;
  2481 ;; *************** function _main *****************
  2482 ;; Defined at:
  2483 ;;		line 52 in file "main.c"
  2484 ;; Parameters:    Size  Location     Type
  2485 ;;		None
  2486 ;; Auto vars:     Size  Location     Type
  2487 ;;		None
  2488 ;; Return value:  Size  Location     Type
  2489 ;;                  1    wreg      void 
  2490 ;; Registers used:
  2491 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2492 ;; Tracked objects:
  2493 ;;		On entry : B1F/0
  2494 ;;		On exit  : 1F/0
  2495 ;;		Unchanged: 0/0
  2496 ;; Data sizes:     COMMON   BANK0   BANK1
  2497 ;;      Params:         0       0       0
  2498 ;;      Locals:         0       0       0
  2499 ;;      Temps:          0       0       0
  2500 ;;      Totals:         0       0       0
  2501 ;;Total ram usage:        0 bytes
  2502 ;; Hardware stack levels required when called:   14
  2503 ;; This function calls:
  2504 ;;		_ESP_config
  2505 ;;		_ESP_initialize
  2506 ;;		_ESP_message_handler
  2507 ;;		_EUSART_is_rx_ready
  2508 ;;		_SYSTEM_Initialize
  2509 ;;		_logger_initialize
  2510 ;;		_process_ioc
  2511 ;;		_process_message
  2512 ;;		_read_analog
  2513 ;; This function is called by:
  2514 ;;		Startup code after reset
  2515 ;; This function uses a non-reentrant model
  2516 ;;
  2517                           
  2518                           
  2519                           ;psect for function _main
  2520  03D8                     _main:	
  2521                           
  2522                           ;main.c: 55:     SYSTEM_Initialize();
  2523                           
  2524                           ;incstack = 0
  2525                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2526  03D8  260A               	fcall	_SYSTEM_Initialize
  2527                           
  2528                           ;main.c: 58:     ESP_initialize();
  2529  03D9  25DA               	fcall	_ESP_initialize
  2530                           
  2531                           ;main.c: 61:     logger_initialize();
  2532  03DA  2428               	fcall	_logger_initialize
  2533                           
  2534                           ;main.c: 66:     (INTCONbits.GIE = 1);
  2535  03DB  178B               	bsf	11,7	;volatile
  2536                           
  2537                           ;main.c: 69:     (INTCONbits.PEIE = 1);
  2538  03DC  170B               	bsf	11,6	;volatile
  2539                           
  2540                           ;main.c: 77:     ESP_config();
  2541  03DD  223B               	fcall	_ESP_config
  2542  03DE                     l3173:	
  2543                           
  2544                           ;main.c: 81:     {;main.c: 84:          if (EUSART_is_rx_ready()) {
  2545  03DE  264F               	fcall	_EUSART_is_rx_ready
  2546  03DF  3A00               	xorlw	0
  2547  03E0  1903               	skipnz
  2548  03E1  2BE3               	goto	l3177
  2549                           
  2550                           ;main.c: 88:                 ESP_message_handler();
  2551  03E2  23B8               	fcall	_ESP_message_handler
  2552  03E3                     l3177:	
  2553                           
  2554                           ;main.c: 92:           if (ADC_state == ADC_READY) {
  2555  03E3  0020               	movlb	0	; select bank0
  2556  03E4  0B37               	decfsz	_ADC_state,w	;volatile
  2557  03E5  2BE7               	goto	l3181
  2558                           
  2559                           ;main.c: 93:             read_analog();
  2560  03E6  20A1               	fcall	_read_analog
  2561  03E7                     l3181:	
  2562                           
  2563                           ;main.c: 97:         if (ESP_wait_exception) {
  2564  03E7  0832               	movf	_ESP_wait_exception,w	;volatile
  2565  03E8  1903               	btfsc	3,2
  2566  03E9  2BEE               	goto	l3187
  2567                           
  2568                           ;main.c: 98:             ESP_wait_exception = 0;
  2569  03EA  01B2               	clrf	_ESP_wait_exception	;volatile
  2570                           
  2571                           ;main.c: 99:             process_message('S');
  2572  03EB  3053               	movlw	83
  2573  03EC  00DC               	movwf	process_message@message
  2574  03ED  2201               	fcall	_process_message
  2575  03EE                     l3187:	
  2576                           
  2577                           ;main.c: 103:         if (IOC_state == IOC_READY) {
  2578  03EE  0020               	movlb	0	; select bank0
  2579  03EF  0B31               	decfsz	_IOC_state,w	;volatile
  2580  03F0  2BDE               	goto	l3173
  2581                           
  2582                           ;main.c: 104:             process_ioc();
  2583  03F1  2488               	fcall	_process_ioc
  2584  03F2  2BDE               	goto	l3173
  2585  03F3                     __end_of_main:	
  2586                           
  2587                           	psect	text1
  2588  00A1                     __ptext1:	
  2589 ;; *************** function _read_analog *****************
  2590 ;; Defined at:
  2591 ;;		line 91 in file "logger.c"
  2592 ;; Parameters:    Size  Location     Type
  2593 ;;		None
  2594 ;; Auto vars:     Size  Location     Type
  2595 ;;  mess            6   24[BANK0 ] unsigned char [6]
  2596 ;;  aux1            4   20[BANK0 ] unsigned long 
  2597 ;;  adc_val         2   30[BANK0 ] unsigned short 
  2598 ;; Return value:  Size  Location     Type
  2599 ;;                  1    wreg      void 
  2600 ;; Registers used:
  2601 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2602 ;; Tracked objects:
  2603 ;;		On entry : 1F/0
  2604 ;;		On exit  : 1F/0
  2605 ;;		Unchanged: 0/0
  2606 ;; Data sizes:     COMMON   BANK0   BANK1
  2607 ;;      Params:         0       0       0
  2608 ;;      Locals:         0      12       0
  2609 ;;      Temps:          0       4       0
  2610 ;;      Totals:         0      16       0
  2611 ;;Total ram usage:       16 bytes
  2612 ;; Hardware stack levels used:    1
  2613 ;; Hardware stack levels required when called:   10
  2614 ;; This function calls:
  2615 ;;		_ESP_wait_for
  2616 ;;		_ESP_write
  2617 ;;		___lmul
  2618 ;;		__sprintf
  2619 ;; This function is called by:
  2620 ;;		_main
  2621 ;; This function uses a non-reentrant model
  2622 ;;
  2623                           
  2624                           
  2625                           ;psect for function _read_analog
  2626  00A1                     _read_analog:	
  2627                           
  2628                           ;logger.c: 93:     unsigned short adc_val;;logger.c: 95:     unsigned long aux1;;logger.
      +                          c: 96:     unsigned char mess[6];;logger.c: 98:     adc_val = ADC_value;
  2629                           
  2630                           ;incstack = 0
  2631                           ; Regs used in _read_analog: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2632  00A1  0827               	movf	_ADC_value+1,w	;volatile
  2633  00A2  00EB               	movwf	read_analog@adc_val+1
  2634  00A3  0826               	movf	_ADC_value,w	;volatile
  2635  00A4  00EA               	movwf	read_analog@adc_val
  2636                           
  2637                           ;logger.c: 99:     ADC_state = ADC_IDLE;
  2638  00A5  01B7               	clrf	_ADC_state	;volatile
  2639                           
  2640                           ;logger.c: 101:     if (message_format == MESSAGE_BINARY) {
  2641  00A6  082E               	movf	_message_format,w	;volatile
  2642  00A7  1D03               	btfss	3,2
  2643  00A8  28B6               	goto	l3145
  2644                           
  2645                           ;logger.c: 102:         mess[0] = (unsigned char)(adc_val & 0xff);
  2646  00A9  086A               	movf	read_analog@adc_val,w
  2647  00AA  00E4               	movwf	read_analog@mess
  2648                           
  2649                           ;logger.c: 103:         mess[1] = (unsigned char)((adc_val >> 8) & 0xff);
  2650  00AB  086B               	movf	read_analog@adc_val+1,w
  2651  00AC  00E5               	movwf	read_analog@mess+1
  2652                           
  2653                           ;logger.c: 109:         ESP_write(mess,2);
  2654  00AD  3064               	movlw	low read_analog@mess
  2655  00AE  00D7               	movwf	ESP_write@pt
  2656  00AF  3000               	movlw	high read_analog@mess
  2657  00B0  00D8               	movwf	ESP_write@pt+1
  2658  00B1  3002               	movlw	2
  2659  00B2  00D9               	movwf	ESP_write@length
  2660  00B3  2050               	fcall	_ESP_write
  2661                           
  2662                           ;logger.c: 110:         ESP_wait_for(ESP_SEND_OK);
  2663  00B4  3001               	movlw	1
  2664  00B5  2B57               	ljmp	_ESP_wait_for
  2665  00B6                     l3145:	
  2666                           ;logger.c: 113:     } else {
  2667                           
  2668                           
  2669                           ;logger.c: 116:             aux1 = (unsigned long)adc_val*3300UL;
  2670  00B6  086A               	movf	read_analog@adc_val,w
  2671  00B7  00F2               	movwf	___lmul@multiplier
  2672  00B8  086B               	movf	read_analog@adc_val+1,w
  2673  00B9  00F3               	movwf	___lmul@multiplier+1
  2674  00BA  300C               	movlw	12
  2675  00BB  01F4               	clrf	___lmul@multiplier+2
  2676  00BC  01F5               	clrf	___lmul@multiplier+3
  2677  00BD  01F9               	clrf	___lmul@multiplicand+3
  2678  00BE  01F8               	clrf	___lmul@multiplicand+2
  2679  00BF  00F7               	movwf	___lmul@multiplicand+1
  2680  00C0  30E4               	movlw	228
  2681  00C1  00F6               	movwf	___lmul@multiplicand
  2682  00C2  22C9               	fcall	___lmul
  2683  00C3  0875               	movf	?___lmul+3,w
  2684  00C4  00E3               	movwf	read_analog@aux1+3
  2685  00C5  0874               	movf	?___lmul+2,w
  2686  00C6  00E2               	movwf	read_analog@aux1+2
  2687  00C7  0873               	movf	?___lmul+1,w
  2688  00C8  00E1               	movwf	read_analog@aux1+1
  2689  00C9  0872               	movf	?___lmul,w
  2690  00CA  00E0               	movwf	read_analog@aux1
  2691                           
  2692                           ;logger.c: 117:             adc_val = (unsigned short)(aux1 >> 10);
  2693  00CB  00DC               	movwf	??_read_analog
  2694  00CC  0861               	movf	read_analog@aux1+1,w
  2695  00CD  00DD               	movwf	??_read_analog+1
  2696  00CE  0862               	movf	read_analog@aux1+2,w
  2697  00CF  00DE               	movwf	??_read_analog+2
  2698  00D0  0863               	movf	read_analog@aux1+3,w
  2699  00D1  00DF               	movwf	??_read_analog+3
  2700  00D2  300A               	movlw	10
  2701  00D3                     u2095:	
  2702  00D3  36DF               	lsrf	??_read_analog+3,f
  2703  00D4  0CDE               	rrf	??_read_analog+2,f
  2704  00D5  0CDD               	rrf	??_read_analog+1,f
  2705  00D6  0CDC               	rrf	??_read_analog,f
  2706  00D7  0B89               	decfsz	9,f
  2707  00D8  28D3               	goto	u2095
  2708  00D9  085D               	movf	??_read_analog+1,w
  2709  00DA  00EB               	movwf	read_analog@adc_val+1
  2710  00DB  085C               	movf	??_read_analog,w
  2711  00DC  00EA               	movwf	read_analog@adc_val
  2712                           
  2713                           ;logger.c: 119:             _sprintf(mess,adc_val);
  2714  00DD  086B               	movf	read_analog@adc_val+1,w
  2715  00DE  00CD               	movwf	__sprintf@val+1
  2716  00DF  086A               	movf	read_analog@adc_val,w
  2717  00E0  00CC               	movwf	__sprintf@val
  2718  00E1  3064               	movlw	(low (read_analog@mess| 0))& (0+255)
  2719  00E2  20EE               	fcall	__sprintf
  2720                           
  2721                           ;logger.c: 120:             mess[5] = '\n';
  2722  00E3  300A               	movlw	10
  2723  00E4  00E9               	movwf	read_analog@mess+5
  2724                           
  2725                           ;logger.c: 124:             ESP_write(mess,6);
  2726  00E5  3064               	movlw	low read_analog@mess
  2727  00E6  00D7               	movwf	ESP_write@pt
  2728  00E7  3000               	movlw	high read_analog@mess
  2729  00E8  00D8               	movwf	ESP_write@pt+1
  2730  00E9  3006               	movlw	6
  2731  00EA  00D9               	movwf	ESP_write@length
  2732  00EB  2050               	fcall	_ESP_write
  2733                           
  2734                           ;logger.c: 125:             ESP_wait_for(ESP_SEND_OK);
  2735  00EC  3001               	movlw	1
  2736  00ED  2B57               	ljmp	_ESP_wait_for
  2737  00EE                     __end_of_read_analog:	
  2738                           
  2739                           	psect	text2
  2740  00EE                     __ptext2:	
  2741 ;; *************** function __sprintf *****************
  2742 ;; Defined at:
  2743 ;;		line 25 in file "comm.c"
  2744 ;; Parameters:    Size  Location     Type
  2745 ;;  mess            1    wreg     PTR unsigned char 
  2746 ;;		 -> read_analog@mess(6), 
  2747 ;;  val             2    0[BANK0 ] unsigned short 
  2748 ;; Auto vars:     Size  Location     Type
  2749 ;;  mess            1    4[BANK0 ] PTR unsigned char 
  2750 ;;		 -> read_analog@mess(6), 
  2751 ;;  aux             2    2[BANK0 ] unsigned short 
  2752 ;; Return value:  Size  Location     Type
  2753 ;;                  1    wreg      void 
  2754 ;; Registers used:
  2755 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2756 ;; Tracked objects:
  2757 ;;		On entry : 1F/0
  2758 ;;		On exit  : 1F/0
  2759 ;;		Unchanged: 0/0
  2760 ;; Data sizes:     COMMON   BANK0   BANK1
  2761 ;;      Params:         0       2       0
  2762 ;;      Locals:         0       3       0
  2763 ;;      Temps:          0       0       0
  2764 ;;      Totals:         0       5       0
  2765 ;;Total ram usage:        5 bytes
  2766 ;; Hardware stack levels used:    1
  2767 ;; Hardware stack levels required when called:    5
  2768 ;; This function calls:
  2769 ;;		___lwdiv
  2770 ;;		___lwmod
  2771 ;; This function is called by:
  2772 ;;		_read_analog
  2773 ;; This function uses a non-reentrant model
  2774 ;;
  2775                           
  2776                           
  2777                           ;psect for function __sprintf
  2778  00EE                     __sprintf:	
  2779                           
  2780                           ;incstack = 0
  2781                           ; Regs used in __sprintf: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2782                           ;__sprintf@mess stored from wreg
  2783  00EE  00D0               	movwf	__sprintf@mess
  2784                           
  2785                           ;comm.c: 25: void _sprintf(char *mess, unsigned short val);comm.c: 26: {;comm.c: 27:   u
      +                          nsigned short aux;;comm.c: 31:   aux = val%10;
  2786  00EF  2122               	fcall	PL6	;call to abstracted procedure
  2787  00F0  2378               	fcall	___lwmod
  2788                           
  2789                           ;comm.c: 32:   val /= 10;
  2790  00F1  2116               	fcall	PL2	;call to abstracted procedure
  2791  00F2  22A4               	fcall	___lwdiv
  2792                           
  2793                           ;comm.c: 34:   mess[5] = 0x00;
  2794  00F3  212A               	fcall	PL8	;call to abstracted procedure
  2795  00F4  3E05               	addlw	5
  2796  00F5  0086               	movwf	6
  2797  00F6  0187               	clrf	7
  2798  00F7  0181               	clrf	1
  2799                           
  2800                           ;comm.c: 36:   mess[4] = (unsigned char)aux+'0';
  2801  00F8  0850               	movf	__sprintf@mess,w
  2802  00F9  3E04               	addlw	4
  2803  00FA  0086               	movwf	6
  2804  00FB  084E               	movf	__sprintf@aux,w
  2805  00FC  3E30               	addlw	48
  2806  00FD  0081               	movwf	1
  2807                           
  2808                           ;comm.c: 38:   aux = val%10;
  2809  00FE  2122               	fcall	PL6	;call to abstracted procedure
  2810  00FF  2378               	fcall	___lwmod
  2811                           
  2812                           ;comm.c: 39:   val /= 10;
  2813  0100  2116               	fcall	PL2	;call to abstracted procedure
  2814  0101  22A4               	fcall	___lwdiv
  2815                           
  2816                           ;comm.c: 41:   mess[3] = (unsigned char)aux+'0';
  2817  0102  212A               	fcall	PL8	;call to abstracted procedure
  2818  0103  3E03               	addlw	3
  2819  0104  2130               	fcall	PL14	;call to abstracted procedure
  2820                           
  2821                           ;comm.c: 43:   aux = val%10;
  2822  0105  2122               	fcall	PL6	;call to abstracted procedure
  2823  0106  2378               	fcall	___lwmod
  2824                           
  2825                           ;comm.c: 44:   val /= 10;
  2826  0107  2116               	fcall	PL2	;call to abstracted procedure
  2827  0108  22A4               	fcall	___lwdiv
  2828                           
  2829                           ;comm.c: 46:   mess[2] = (unsigned char)aux+'0';
  2830  0109  212A               	fcall	PL8	;call to abstracted procedure
  2831  010A  3E02               	addlw	2
  2832  010B  2130               	fcall	PL14	;call to abstracted procedure
  2833                           
  2834                           ;comm.c: 47:   mess[1] = '.';
  2835  010C  0A50               	incf	__sprintf@mess,w
  2836  010D  0086               	movwf	6
  2837  010E  302E               	movlw	46
  2838  010F  0081               	movwf	1
  2839                           
  2840                           ;comm.c: 48:   mess[0] = (unsigned char)val+'0';
  2841  0110  0850               	movf	__sprintf@mess,w
  2842  0111  0086               	movwf	6
  2843  0112  084C               	movf	__sprintf@val,w
  2844  0113  3E30               	addlw	48
  2845  0114  0081               	movwf	1
  2846  0115  0008               	return
  2847  0116                     __end_of__sprintf:	
  2848  0116                     PL2:	
  2849  0116  0873               	movf	?___lwmod+1,w
  2850  0117  00CF               	movwf	__sprintf@aux+1
  2851  0118  0872               	movf	?___lwmod,w
  2852  0119  00CE               	movwf	__sprintf@aux
  2853  011A  300A               	movlw	10
  2854  011B  00F2               	movwf	___lwdiv@divisor
  2855  011C  01F3               	clrf	___lwdiv@divisor+1
  2856  011D  084D               	movf	__sprintf@val+1,w
  2857  011E  00F5               	movwf	___lwdiv@dividend+1
  2858  011F  084C               	movf	__sprintf@val,w
  2859  0120  00F4               	movwf	___lwdiv@dividend
  2860  0121  0008               	return
  2861  0122                     __end_ofPL2:	
  2862  0122                     PL6:	
  2863  0122  300A               	movlw	10
  2864  0123  00F2               	movwf	___lwmod@divisor
  2865  0124  01F3               	clrf	___lwmod@divisor+1
  2866  0125  084D               	movf	__sprintf@val+1,w
  2867  0126  00F5               	movwf	___lwmod@dividend+1
  2868  0127  084C               	movf	__sprintf@val,w
  2869  0128  00F4               	movwf	___lwmod@dividend
  2870  0129  0008               	return
  2871  012A                     __end_ofPL6:	
  2872  012A                     PL8:	
  2873  012A  0873               	movf	?___lwdiv+1,w
  2874  012B  00CD               	movwf	__sprintf@val+1
  2875  012C  0872               	movf	?___lwdiv,w
  2876  012D  00CC               	movwf	__sprintf@val
  2877  012E  0850               	movf	__sprintf@mess,w
  2878  012F  0008               	return
  2879  0130                     __end_ofPL8:	
  2880  0130                     PL14:	
  2881  0130  0086               	movwf	6
  2882  0131  0187               	clrf	7
  2883  0132  084E               	movf	__sprintf@aux,w
  2884  0133  3E30               	addlw	48
  2885  0134  0081               	movwf	1
  2886  0135  0008               	return
  2887  0136                     __end_ofPL14:	
  2888                           
  2889                           	psect	text3
  2890  0378                     __ptext3:	
  2891 ;; *************** function ___lwmod *****************
  2892 ;; Defined at:
  2893 ;;		line 5 in file "/pkg/microchip/xc8/v2.00/pic/sources/c99/common/lwmod.c"
  2894 ;; Parameters:    Size  Location     Type
  2895 ;;  divisor         2    2[COMMON] unsigned int 
  2896 ;;  dividend        2    4[COMMON] unsigned int 
  2897 ;; Auto vars:     Size  Location     Type
  2898 ;;  counter         1    6[COMMON] unsigned char 
  2899 ;; Return value:  Size  Location     Type
  2900 ;;                  2    2[COMMON] unsigned int 
  2901 ;; Registers used:
  2902 ;;		wreg, status,2, status,0
  2903 ;; Tracked objects:
  2904 ;;		On entry : 1F/0
  2905 ;;		On exit  : 1F/0
  2906 ;;		Unchanged: 1F/0
  2907 ;; Data sizes:     COMMON   BANK0   BANK1
  2908 ;;      Params:         4       0       0
  2909 ;;      Locals:         1       0       0
  2910 ;;      Temps:          0       0       0
  2911 ;;      Totals:         5       0       0
  2912 ;;Total ram usage:        5 bytes
  2913 ;; Hardware stack levels used:    1
  2914 ;; Hardware stack levels required when called:    4
  2915 ;; This function calls:
  2916 ;;		Nothing
  2917 ;; This function is called by:
  2918 ;;		__sprintf
  2919 ;; This function uses a non-reentrant model
  2920 ;;
  2921                           
  2922                           
  2923                           ;psect for function ___lwmod
  2924  0378                     ___lwmod:	
  2925                           
  2926                           ;incstack = 0
  2927                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2928  0378  0872               	movf	___lwmod@divisor,w
  2929  0379  0473               	iorwf	___lwmod@divisor+1,w
  2930  037A  1903               	btfsc	3,2
  2931  037B  2B93               	goto	l2427
  2932  037C  01F6               	clrf	___lwmod@counter
  2933  037D                     L1:	
  2934  037D  0AF6               	incf	___lwmod@counter,f
  2935  037E  1BF3               	btfsc	___lwmod@divisor+1,7
  2936  037F  2B83               	goto	l2419
  2937  0380  35F2               	lslf	___lwmod@divisor,f
  2938  0381  0DF3               	rlf	___lwmod@divisor+1,f
  2939  0382  2B7D               	goto	L1
  2940  0383                     l2419:	
  2941  0383  0873               	movf	___lwmod@divisor+1,w
  2942  0384  0275               	subwf	___lwmod@dividend+1,w
  2943  0385  1D03               	skipz
  2944  0386  2B89               	goto	u1435
  2945  0387  0872               	movf	___lwmod@divisor,w
  2946  0388  0274               	subwf	___lwmod@dividend,w
  2947  0389                     u1435:	
  2948  0389  1C03               	skipc
  2949  038A  2B8F               	goto	l2423
  2950  038B  0872               	movf	___lwmod@divisor,w
  2951  038C  02F4               	subwf	___lwmod@dividend,f
  2952  038D  0873               	movf	___lwmod@divisor+1,w
  2953  038E  3BF5               	subwfb	___lwmod@dividend+1,f
  2954  038F                     l2423:	
  2955  038F  36F3               	lsrf	___lwmod@divisor+1,f
  2956  0390  0CF2               	rrf	___lwmod@divisor,f
  2957  0391  0BF6               	decfsz	___lwmod@counter,f
  2958  0392  2B83               	goto	l2419
  2959  0393                     l2427:	
  2960  0393  0875               	movf	___lwmod@dividend+1,w
  2961  0394  00F3               	movwf	?___lwmod+1
  2962  0395  0874               	movf	___lwmod@dividend,w
  2963  0396  00F2               	movwf	?___lwmod
  2964  0397  0008               	return
  2965  0398                     __end_of___lwmod:	
  2966                           
  2967                           	psect	text4
  2968  02A4                     __ptext4:	
  2969 ;; *************** function ___lwdiv *****************
  2970 ;; Defined at:
  2971 ;;		line 5 in file "/pkg/microchip/xc8/v2.00/pic/sources/c99/common/lwdiv.c"
  2972 ;; Parameters:    Size  Location     Type
  2973 ;;  divisor         2    2[COMMON] unsigned int 
  2974 ;;  dividend        2    4[COMMON] unsigned int 
  2975 ;; Auto vars:     Size  Location     Type
  2976 ;;  quotient        2    6[COMMON] unsigned int 
  2977 ;;  counter         1    8[COMMON] unsigned char 
  2978 ;; Return value:  Size  Location     Type
  2979 ;;                  2    2[COMMON] unsigned int 
  2980 ;; Registers used:
  2981 ;;		wreg, status,2, status,0
  2982 ;; Tracked objects:
  2983 ;;		On entry : 1F/0
  2984 ;;		On exit  : 1F/0
  2985 ;;		Unchanged: 1F/0
  2986 ;; Data sizes:     COMMON   BANK0   BANK1
  2987 ;;      Params:         4       0       0
  2988 ;;      Locals:         3       0       0
  2989 ;;      Temps:          0       0       0
  2990 ;;      Totals:         7       0       0
  2991 ;;Total ram usage:        7 bytes
  2992 ;; Hardware stack levels used:    1
  2993 ;; Hardware stack levels required when called:    4
  2994 ;; This function calls:
  2995 ;;		Nothing
  2996 ;; This function is called by:
  2997 ;;		__sprintf
  2998 ;; This function uses a non-reentrant model
  2999 ;;
  3000                           
  3001                           
  3002                           ;psect for function ___lwdiv
  3003  02A4                     ___lwdiv:	
  3004                           
  3005                           ;incstack = 0
  3006                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3007  02A4  01F6               	clrf	___lwdiv@quotient
  3008  02A5  01F7               	clrf	___lwdiv@quotient+1
  3009  02A6  0872               	movf	___lwdiv@divisor,w
  3010  02A7  0473               	iorwf	___lwdiv@divisor+1,w
  3011  02A8  1903               	btfsc	3,2
  3012  02A9  2AC4               	goto	l2407
  3013  02AA  01F8               	clrf	___lwdiv@counter
  3014  02AB                     L2:	
  3015  02AB  0AF8               	incf	___lwdiv@counter,f
  3016  02AC  1BF3               	btfsc	___lwdiv@divisor+1,7
  3017  02AD  2AB1               	goto	l2395
  3018  02AE  35F2               	lslf	___lwdiv@divisor,f
  3019  02AF  0DF3               	rlf	___lwdiv@divisor+1,f
  3020  02B0  2AAB               	goto	L2
  3021  02B1                     l2395:	
  3022  02B1  35F6               	lslf	___lwdiv@quotient,f
  3023  02B2  0DF7               	rlf	___lwdiv@quotient+1,f
  3024  02B3  0873               	movf	___lwdiv@divisor+1,w
  3025  02B4  0275               	subwf	___lwdiv@dividend+1,w
  3026  02B5  1D03               	skipz
  3027  02B6  2AB9               	goto	u1395
  3028  02B7  0872               	movf	___lwdiv@divisor,w
  3029  02B8  0274               	subwf	___lwdiv@dividend,w
  3030  02B9                     u1395:	
  3031  02B9  1C03               	skipc
  3032  02BA  2AC0               	goto	l2403
  3033  02BB  0872               	movf	___lwdiv@divisor,w
  3034  02BC  02F4               	subwf	___lwdiv@dividend,f
  3035  02BD  0873               	movf	___lwdiv@divisor+1,w
  3036  02BE  3BF5               	subwfb	___lwdiv@dividend+1,f
  3037  02BF  1476               	bsf	___lwdiv@quotient,0
  3038  02C0                     l2403:	
  3039  02C0  36F3               	lsrf	___lwdiv@divisor+1,f
  3040  02C1  0CF2               	rrf	___lwdiv@divisor,f
  3041  02C2  0BF8               	decfsz	___lwdiv@counter,f
  3042  02C3  2AB1               	goto	l2395
  3043  02C4                     l2407:	
  3044  02C4  0877               	movf	___lwdiv@quotient+1,w
  3045  02C5  00F3               	movwf	?___lwdiv+1
  3046  02C6  0876               	movf	___lwdiv@quotient,w
  3047  02C7  00F2               	movwf	?___lwdiv
  3048  02C8  0008               	return
  3049  02C9                     __end_of___lwdiv:	
  3050                           
  3051                           	psect	text5
  3052  02C9                     __ptext5:	
  3053 ;; *************** function ___lmul *****************
  3054 ;; Defined at:
  3055 ;;		line 15 in file "/pkg/microchip/xc8/v2.00/pic/sources/c99/common/Umul32.c"
  3056 ;; Parameters:    Size  Location     Type
  3057 ;;  multiplier      4    2[COMMON] unsigned long 
  3058 ;;  multiplicand    4    6[COMMON] unsigned long 
  3059 ;; Auto vars:     Size  Location     Type
  3060 ;;  product         4    0[BANK0 ] unsigned long 
  3061 ;; Return value:  Size  Location     Type
  3062 ;;                  4    2[COMMON] unsigned long 
  3063 ;; Registers used:
  3064 ;;		wreg, status,2, status,0
  3065 ;; Tracked objects:
  3066 ;;		On entry : 1F/0
  3067 ;;		On exit  : 1F/0
  3068 ;;		Unchanged: 0/0
  3069 ;; Data sizes:     COMMON   BANK0   BANK1
  3070 ;;      Params:         8       0       0
  3071 ;;      Locals:         0       4       0
  3072 ;;      Temps:          0       0       0
  3073 ;;      Totals:         8       4       0
  3074 ;;Total ram usage:       12 bytes
  3075 ;; Hardware stack levels used:    1
  3076 ;; Hardware stack levels required when called:    4
  3077 ;; This function calls:
  3078 ;;		Nothing
  3079 ;; This function is called by:
  3080 ;;		_read_analog
  3081 ;; This function uses a non-reentrant model
  3082 ;;
  3083                           
  3084                           
  3085                           ;psect for function ___lmul
  3086  02C9                     ___lmul:	
  3087                           
  3088                           ;incstack = 0
  3089                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3090  02C9  01CC               	clrf	___lmul@product
  3091  02CA  01CD               	clrf	___lmul@product+1
  3092  02CB  01CE               	clrf	___lmul@product+2
  3093  02CC  01CF               	clrf	___lmul@product+3
  3094  02CD                     l688:	
  3095  02CD  1C72               	btfss	___lmul@multiplier,0
  3096  02CE  2AD7               	goto	l2585
  3097  02CF  0876               	movf	___lmul@multiplicand,w
  3098  02D0  07CC               	addwf	___lmul@product,f
  3099  02D1  0877               	movf	___lmul@multiplicand+1,w
  3100  02D2  3DCD               	addwfc	___lmul@product+1,f
  3101  02D3  0878               	movf	___lmul@multiplicand+2,w
  3102  02D4  3DCE               	addwfc	___lmul@product+2,f
  3103  02D5  0879               	movf	___lmul@multiplicand+3,w
  3104  02D6  3DCF               	addwfc	___lmul@product+3,f
  3105  02D7                     l2585:	
  3106  02D7  35F6               	lslf	___lmul@multiplicand,f
  3107  02D8  0DF7               	rlf	___lmul@multiplicand+1,f
  3108  02D9  0DF8               	rlf	___lmul@multiplicand+2,f
  3109  02DA  0DF9               	rlf	___lmul@multiplicand+3,f
  3110  02DB  36F5               	lsrf	___lmul@multiplier+3,f
  3111  02DC  0CF4               	rrf	___lmul@multiplier+2,f
  3112  02DD  0CF3               	rrf	___lmul@multiplier+1,f
  3113  02DE  0CF2               	rrf	___lmul@multiplier,f
  3114  02DF  0875               	movf	___lmul@multiplier+3,w
  3115  02E0  0474               	iorwf	___lmul@multiplier+2,w
  3116  02E1  0473               	iorwf	___lmul@multiplier+1,w
  3117  02E2  0472               	iorwf	___lmul@multiplier,w
  3118  02E3  1D03               	skipz
  3119  02E4  2ACD               	goto	l688
  3120  02E5  084F               	movf	___lmul@product+3,w
  3121  02E6  00F5               	movwf	?___lmul+3
  3122  02E7  084E               	movf	___lmul@product+2,w
  3123  02E8  00F4               	movwf	?___lmul+2
  3124  02E9  084D               	movf	___lmul@product+1,w
  3125  02EA  00F3               	movwf	?___lmul+1
  3126  02EB  084C               	movf	___lmul@product,w
  3127  02EC  00F2               	movwf	?___lmul
  3128  02ED  0008               	return
  3129  02EE                     __end_of___lmul:	
  3130                           
  3131                           	psect	text6
  3132  0488                     __ptext6:	
  3133 ;; *************** function _process_ioc *****************
  3134 ;; Defined at:
  3135 ;;		line 167 in file "logger.c"
  3136 ;; Parameters:    Size  Location     Type
  3137 ;;		None
  3138 ;; Auto vars:     Size  Location     Type
  3139 ;;		None
  3140 ;; Return value:  Size  Location     Type
  3141 ;;                  1    wreg      void 
  3142 ;; Registers used:
  3143 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3144 ;; Tracked objects:
  3145 ;;		On entry : 1F/0
  3146 ;;		On exit  : 1F/0
  3147 ;;		Unchanged: 0/0
  3148 ;; Data sizes:     COMMON   BANK0   BANK1
  3149 ;;      Params:         0       0       0
  3150 ;;      Locals:         0       0       0
  3151 ;;      Temps:          0       0       0
  3152 ;;      Totals:         0       0       0
  3153 ;;Total ram usage:        0 bytes
  3154 ;; Hardware stack levels used:    1
  3155 ;; Hardware stack levels required when called:   10
  3156 ;; This function calls:
  3157 ;;		_ESP_wait_for
  3158 ;;		_ESP_write
  3159 ;; This function is called by:
  3160 ;;		_main
  3161 ;; This function uses a non-reentrant model
  3162 ;;
  3163                           
  3164                           
  3165                           ;psect for function _process_ioc
  3166  0488                     _process_ioc:	
  3167                           
  3168                           ;logger.c: 169:     IOC_state = IOC_IDLE;
  3169                           
  3170                           ;incstack = 0
  3171                           ; Regs used in _process_ioc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3172  0488  01B1               	clrf	_IOC_state	;volatile
  3173                           
  3174                           ;logger.c: 170:      if (IOC_value) {
  3175  0489  082C               	movf	_IOC_value,w	;volatile
  3176  048A  1903               	btfsc	3,2
  3177  048B  2C95               	goto	l3163
  3178                           
  3179                           ;logger.c: 174:             ESP_write("CH",2);
  3180  048C  3043               	movlw	low (STR_21| (0+32768))
  3181  048D  00D7               	movwf	ESP_write@pt
  3182  048E  3086               	movlw	high (STR_21| (0+32768))
  3183  048F  00D8               	movwf	ESP_write@pt+1
  3184  0490  3002               	movlw	2
  3185  0491  00D9               	movwf	ESP_write@length
  3186  0492  2050               	fcall	_ESP_write
  3187                           
  3188                           ;logger.c: 175:             ESP_wait_for(ESP_SEND_OK);
  3189  0493  3001               	movlw	1
  3190  0494  2B57               	ljmp	_ESP_wait_for
  3191  0495                     l3163:	
  3192                           ;logger.c: 177:     } else {
  3193                           
  3194                           
  3195                           ;logger.c: 181:             ESP_write("CL",2);
  3196  0495  3046               	movlw	low (STR_22| (0+32768))
  3197  0496  00D7               	movwf	ESP_write@pt
  3198  0497  3086               	movlw	high (STR_22| (0+32768))
  3199  0498  00D8               	movwf	ESP_write@pt+1
  3200  0499  3002               	movlw	2
  3201  049A  00D9               	movwf	ESP_write@length
  3202  049B  2050               	fcall	_ESP_write
  3203                           
  3204                           ;logger.c: 182:             ESP_wait_for(ESP_SEND_OK);
  3205  049C  3001               	movlw	1
  3206  049D  2B57               	ljmp	_ESP_wait_for
  3207  049E                     __end_of_process_ioc:	
  3208                           
  3209                           	psect	text7
  3210  0428                     __ptext7:	
  3211 ;; *************** function _logger_initialize *****************
  3212 ;; Defined at:
  3213 ;;		line 17 in file "logger.c"
  3214 ;; Parameters:    Size  Location     Type
  3215 ;;		None
  3216 ;; Auto vars:     Size  Location     Type
  3217 ;;		None
  3218 ;; Return value:  Size  Location     Type
  3219 ;;                  1    wreg      void 
  3220 ;; Registers used:
  3221 ;;		wreg, status,2, status,0, pclath, cstack
  3222 ;; Tracked objects:
  3223 ;;		On entry : 1F/0
  3224 ;;		On exit  : 1F/0
  3225 ;;		Unchanged: 0/0
  3226 ;; Data sizes:     COMMON   BANK0   BANK1
  3227 ;;      Params:         0       0       0
  3228 ;;      Locals:         0       0       0
  3229 ;;      Temps:          0       0       0
  3230 ;;      Totals:         0       0       0
  3231 ;;Total ram usage:        0 bytes
  3232 ;; Hardware stack levels used:    1
  3233 ;; Hardware stack levels required when called:    5
  3234 ;; This function calls:
  3235 ;;		_ADC_SelectChannel
  3236 ;;		_ESP_Set_application_handler
  3237 ;;		_IOCAF4_SetInterruptHandler
  3238 ;;		_TMR1_SetInterruptHandler
  3239 ;;		_TMR1_StopTimer
  3240 ;; This function is called by:
  3241 ;;		_main
  3242 ;; This function uses a non-reentrant model
  3243 ;;
  3244                           
  3245                           
  3246                           ;psect for function _logger_initialize
  3247  0428                     _logger_initialize:	
  3248                           
  3249                           ;logger.c: 19:     message_format = MESSAGE_BINARY;
  3250                           
  3251                           ;incstack = 0
  3252                           ; Regs used in _logger_initialize: [wreg+status,2+status,0+pclath+cstack]
  3253  0428  01AE               	clrf	_message_format	;volatile
  3254                           
  3255                           ;logger.c: 21:     ADC_SelectChannel(channel_AN2);
  3256  0429  3002               	movlw	2
  3257  042A  2598               	fcall	_ADC_SelectChannel
  3258                           
  3259                           ;logger.c: 22:     ADC_state = ADC_IDLE;
  3260  042B  0020               	movlb	0	; select bank0
  3261  042C  01B7               	clrf	_ADC_state	;volatile
  3262                           
  3263                           ;logger.c: 26:     TMR1_StopTimer();
  3264  042D  2659               	fcall	_TMR1_StopTimer
  3265                           
  3266                           ;logger.c: 27:     TMR1_state = TMR1_STOP;
  3267  042E  01AD               	clrf	_TMR1_state	;volatile
  3268                           
  3269                           ;logger.c: 28:     TMR1_SetInterruptHandler(_TMR1_Ready);
  3270  042F  303B               	movlw	low __TMR1_Ready
  3271  0430  00F2               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  3272  0431  3006               	movlw	high __TMR1_Ready
  3273  0432  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  3274  0433  2610               	fcall	_TMR1_SetInterruptHandler
  3275                           
  3276                           ;logger.c: 31:     IOCAF4_SetInterruptHandler(_IOC_Ready);
  3277  0434  30F7               	movlw	low __IOC_Ready
  3278  0435  00F2               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler
  3279  0436  3005               	movlw	high __IOC_Ready
  3280  0437  00F3               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler+1
  3281  0438  2616               	fcall	_IOCAF4_SetInterruptHandler
  3282                           
  3283                           ;logger.c: 32:     IOC_state = IOC_IDLE;
  3284  0439  01B1               	clrf	_IOC_state	;volatile
  3285                           
  3286                           ;logger.c: 33:     IOC_value = 1;
  3287  043A  3001               	movlw	1
  3288  043B  00AC               	movwf	_IOC_value	;volatile
  3289                           
  3290                           ;logger.c: 35:     ESP_Set_application_handler(process_message);
  3291  043C  3001               	movlw	low _process_message
  3292  043D  00F2               	movwf	ESP_Set_application_handler@applicationHandler
  3293  043E  3002               	movlw	high _process_message
  3294  043F  00F3               	movwf	ESP_Set_application_handler@applicationHandler+1
  3295  0440  2E32               	ljmp	l2567
  3296  0441                     __end_of_logger_initialize:	
  3297                           
  3298                           	psect	text8
  3299  0598                     __ptext8:	
  3300 ;; *************** function _ADC_SelectChannel *****************
  3301 ;; Defined at:
  3302 ;;		line 85 in file "mcc_generated_files/adc.c"
  3303 ;; Parameters:    Size  Location     Type
  3304 ;;  channel         1    wreg     enum E2157
  3305 ;; Auto vars:     Size  Location     Type
  3306 ;;  channel         1    3[COMMON] enum E2157
  3307 ;; Return value:  Size  Location     Type
  3308 ;;                  1    wreg      void 
  3309 ;; Registers used:
  3310 ;;		wreg, status,2, status,0
  3311 ;; Tracked objects:
  3312 ;;		On entry : 1F/0
  3313 ;;		On exit  : 1F/1
  3314 ;;		Unchanged: 0/0
  3315 ;; Data sizes:     COMMON   BANK0   BANK1
  3316 ;;      Params:         0       0       0
  3317 ;;      Locals:         1       0       0
  3318 ;;      Temps:          1       0       0
  3319 ;;      Totals:         2       0       0
  3320 ;;Total ram usage:        2 bytes
  3321 ;; Hardware stack levels used:    1
  3322 ;; Hardware stack levels required when called:    4
  3323 ;; This function calls:
  3324 ;;		Nothing
  3325 ;; This function is called by:
  3326 ;;		_logger_initialize
  3327 ;; This function uses a non-reentrant model
  3328 ;;
  3329                           
  3330                           
  3331                           ;psect for function _ADC_SelectChannel
  3332  0598                     _ADC_SelectChannel:	
  3333                           
  3334                           ;incstack = 0
  3335                           ; Regs used in _ADC_SelectChannel: [wreg+status,2+status,0]
  3336                           ;ADC_SelectChannel@channel stored from wreg
  3337  0598  00F3               	movwf	ADC_SelectChannel@channel
  3338                           
  3339                           ;mcc_generated_files/adc.c: 85: void ADC_SelectChannel(adc_channel_t channel);mcc_genera
      +                          ted_files/adc.c: 86: {;mcc_generated_files/adc.c: 88:     ADCON0bits.CHS = channel;
  3340  0599  00F2               	movwf	??_ADC_SelectChannel
  3341  059A  0DF2               	rlf	??_ADC_SelectChannel,f
  3342  059B  0DF2               	rlf	??_ADC_SelectChannel,f
  3343  059C  0021               	movlb	1	; select bank1
  3344  059D  081D               	movf	29,w	;volatile
  3345  059E  0672               	xorwf	??_ADC_SelectChannel,w
  3346  059F  3983               	andlw	-125
  3347  05A0  0672               	xorwf	??_ADC_SelectChannel,w
  3348  05A1  009D               	movwf	29	;volatile
  3349                           
  3350                           ;mcc_generated_files/adc.c: 90:     ADCON0bits.ADON = 1;
  3351  05A2  141D               	bsf	29,0	;volatile
  3352  05A3  0008               	return
  3353  05A4                     __end_of_ADC_SelectChannel:	
  3354                           
  3355                           	psect	text9
  3356  060A                     __ptext9:	
  3357 ;; *************** function _SYSTEM_Initialize *****************
  3358 ;; Defined at:
  3359 ;;		line 50 in file "mcc_generated_files/mcc.c"
  3360 ;; Parameters:    Size  Location     Type
  3361 ;;		None
  3362 ;; Auto vars:     Size  Location     Type
  3363 ;;		None
  3364 ;; Return value:  Size  Location     Type
  3365 ;;                  1    wreg      void 
  3366 ;; Registers used:
  3367 ;;		wreg, status,2, status,0, pclath, cstack
  3368 ;; Tracked objects:
  3369 ;;		On entry : B1F/0
  3370 ;;		On exit  : 1F/1
  3371 ;;		Unchanged: 0/0
  3372 ;; Data sizes:     COMMON   BANK0   BANK1
  3373 ;;      Params:         0       0       0
  3374 ;;      Locals:         0       0       0
  3375 ;;      Temps:          0       0       0
  3376 ;;      Totals:         0       0       0
  3377 ;;Total ram usage:        0 bytes
  3378 ;; Hardware stack levels used:    1
  3379 ;; Hardware stack levels required when called:    6
  3380 ;; This function calls:
  3381 ;;		_ADC_Initialize
  3382 ;;		_EUSART_Initialize
  3383 ;;		_OSCILLATOR_Initialize
  3384 ;;		_PIN_MANAGER_Initialize
  3385 ;;		_TMR1_Initialize
  3386 ;;		_WDT_Initialize
  3387 ;; This function is called by:
  3388 ;;		_main
  3389 ;; This function uses a non-reentrant model
  3390 ;;
  3391                           
  3392                           
  3393                           ;psect for function _SYSTEM_Initialize
  3394  060A                     _SYSTEM_Initialize:	
  3395                           
  3396                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  3397                           
  3398                           ;incstack = 0
  3399                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3400  060A  2398               	fcall	_PIN_MANAGER_Initialize
  3401                           
  3402                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  3403  060B  25AE               	fcall	_OSCILLATOR_Initialize
  3404                           
  3405                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  3406  060C  2649               	fcall	_WDT_Initialize
  3407                           
  3408                           ;mcc_generated_files/mcc.c: 56:     TMR1_Initialize();
  3409  060D  249E               	fcall	_TMR1_Initialize
  3410                           
  3411                           ;mcc_generated_files/mcc.c: 57:     ADC_Initialize();
  3412  060E  25B8               	fcall	_ADC_Initialize
  3413                           
  3414                           ;mcc_generated_files/mcc.c: 58:     EUSART_Initialize();
  3415  060F  2B35               	ljmp	l2445
  3416  0610                     __end_of_SYSTEM_Initialize:	
  3417                           
  3418                           	psect	text10
  3419  0649                     __ptext10:	
  3420 ;; *************** function _WDT_Initialize *****************
  3421 ;; Defined at:
  3422 ;;		line 75 in file "mcc_generated_files/mcc.c"
  3423 ;; Parameters:    Size  Location     Type
  3424 ;;		None
  3425 ;; Auto vars:     Size  Location     Type
  3426 ;;		None
  3427 ;; Return value:  Size  Location     Type
  3428 ;;                  1    wreg      void 
  3429 ;; Registers used:
  3430 ;;		wreg
  3431 ;; Tracked objects:
  3432 ;;		On entry : 1F/1
  3433 ;;		On exit  : 1F/1
  3434 ;;		Unchanged: 0/0
  3435 ;; Data sizes:     COMMON   BANK0   BANK1
  3436 ;;      Params:         0       0       0
  3437 ;;      Locals:         0       0       0
  3438 ;;      Temps:          0       0       0
  3439 ;;      Totals:         0       0       0
  3440 ;;Total ram usage:        0 bytes
  3441 ;; Hardware stack levels used:    1
  3442 ;; Hardware stack levels required when called:    4
  3443 ;; This function calls:
  3444 ;;		Nothing
  3445 ;; This function is called by:
  3446 ;;		_SYSTEM_Initialize
  3447 ;; This function uses a non-reentrant model
  3448 ;;
  3449                           
  3450                           
  3451                           ;psect for function _WDT_Initialize
  3452  0649                     _WDT_Initialize:	
  3453                           
  3454                           ;mcc_generated_files/mcc.c: 78:     WDTCON = 0x16;
  3455                           
  3456                           ;incstack = 0
  3457                           ; Regs used in _WDT_Initialize: [wreg]
  3458  0649  3016               	movlw	22
  3459  064A  0097               	movwf	23	;volatile
  3460  064B  0008               	return
  3461  064C                     __end_of_WDT_Initialize:	
  3462                           
  3463                           	psect	text11
  3464  049E                     __ptext11:	
  3465 ;; *************** function _TMR1_Initialize *****************
  3466 ;; Defined at:
  3467 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  3468 ;; Parameters:    Size  Location     Type
  3469 ;;		None
  3470 ;; Auto vars:     Size  Location     Type
  3471 ;;		None
  3472 ;; Return value:  Size  Location     Type
  3473 ;;                  1    wreg      void 
  3474 ;; Registers used:
  3475 ;;		wreg, status,2, status,0, pclath, cstack
  3476 ;; Tracked objects:
  3477 ;;		On entry : 1F/1
  3478 ;;		On exit  : 1F/0
  3479 ;;		Unchanged: 0/0
  3480 ;; Data sizes:     COMMON   BANK0   BANK1
  3481 ;;      Params:         0       0       0
  3482 ;;      Locals:         0       0       0
  3483 ;;      Temps:          0       0       0
  3484 ;;      Totals:         0       0       0
  3485 ;;Total ram usage:        0 bytes
  3486 ;; Hardware stack levels used:    1
  3487 ;; Hardware stack levels required when called:    5
  3488 ;; This function calls:
  3489 ;;		_TMR1_SetInterruptHandler
  3490 ;; This function is called by:
  3491 ;;		_SYSTEM_Initialize
  3492 ;; This function uses a non-reentrant model
  3493 ;;
  3494                           
  3495                           
  3496                           ;psect for function _TMR1_Initialize
  3497  049E                     _TMR1_Initialize:	
  3498                           
  3499                           ;mcc_generated_files/tmr1.c: 69:     T1GCON = 0x00;
  3500                           
  3501                           ;incstack = 0
  3502                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3503  049E  0020               	movlb	0	; select bank0
  3504  049F  0199               	clrf	25	;volatile
  3505                           
  3506                           ;mcc_generated_files/tmr1.c: 72:     TMR1H = 0x63;
  3507  04A0  3063               	movlw	99
  3508  04A1  0097               	movwf	23	;volatile
  3509                           
  3510                           ;mcc_generated_files/tmr1.c: 75:     TMR1L = 0xC0;
  3511  04A2  30C0               	movlw	192
  3512  04A3  0096               	movwf	22	;volatile
  3513                           
  3514                           ;mcc_generated_files/tmr1.c: 78:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  3515  04A4  0817               	movf	23,w	;volatile
  3516  04A5  00A5               	movwf	_timer1ReloadVal+1	;volatile
  3517  04A6  01A4               	clrf	_timer1ReloadVal	;volatile
  3518  04A7  0816               	movf	22,w	;volatile
  3519  04A8  04A4               	iorwf	_timer1ReloadVal,f	;volatile
  3520                           
  3521                           ;mcc_generated_files/tmr1.c: 81:     PIR1bits.TMR1IF = 0;
  3522  04A9  1011               	bcf	17,0	;volatile
  3523                           
  3524                           ;mcc_generated_files/tmr1.c: 84:     PIE1bits.TMR1IE = 1;
  3525  04AA  0021               	movlb	1	; select bank1
  3526  04AB  1411               	bsf	17,0	;volatile
  3527                           
  3528                           ;mcc_generated_files/tmr1.c: 87:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
  3529  04AC  3062               	movlw	low _TMR1_DefaultInterruptHandler
  3530  04AD  00F2               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  3531  04AE  3006               	movlw	high _TMR1_DefaultInterruptHandler
  3532  04AF  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  3533  04B0  2610               	fcall	_TMR1_SetInterruptHandler
  3534                           
  3535                           ;mcc_generated_files/tmr1.c: 90:     T1CON = 0x11;
  3536  04B1  3011               	movlw	17
  3537  04B2  0098               	movwf	24	;volatile
  3538  04B3  0008               	return
  3539  04B4                     __end_of_TMR1_Initialize:	
  3540                           
  3541                           	psect	text12
  3542  0610                     __ptext12:	
  3543 ;; *************** function _TMR1_SetInterruptHandler *****************
  3544 ;; Defined at:
  3545 ;;		line 171 in file "mcc_generated_files/tmr1.c"
  3546 ;; Parameters:    Size  Location     Type
  3547 ;;  InterruptHan    2    2[COMMON] PTR FTN()void 
  3548 ;;		 -> _TMR1_Ready(1), TMR1_DefaultInterruptHandler(1), 
  3549 ;; Auto vars:     Size  Location     Type
  3550 ;;		None
  3551 ;; Return value:  Size  Location     Type
  3552 ;;                  1    wreg      void 
  3553 ;; Registers used:
  3554 ;;		wreg
  3555 ;; Tracked objects:
  3556 ;;		On entry : 1E/0
  3557 ;;		On exit  : 1F/0
  3558 ;;		Unchanged: 0/0
  3559 ;; Data sizes:     COMMON   BANK0   BANK1
  3560 ;;      Params:         2       0       0
  3561 ;;      Locals:         0       0       0
  3562 ;;      Temps:          0       0       0
  3563 ;;      Totals:         2       0       0
  3564 ;;Total ram usage:        2 bytes
  3565 ;; Hardware stack levels used:    1
  3566 ;; Hardware stack levels required when called:    4
  3567 ;; This function calls:
  3568 ;;		Nothing
  3569 ;; This function is called by:
  3570 ;;		_TMR1_Initialize
  3571 ;;		_logger_initialize
  3572 ;; This function uses a non-reentrant model
  3573 ;;
  3574                           
  3575                           
  3576                           ;psect for function _TMR1_SetInterruptHandler
  3577  0610                     _TMR1_SetInterruptHandler:	
  3578                           
  3579                           ;mcc_generated_files/tmr1.c: 172:     TMR1_InterruptHandler = InterruptHandler;
  3580                           
  3581                           ;incstack = 0
  3582                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  3583  0610  0873               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  3584  0611  0020               	movlb	0	; select bank0
  3585  0612  00A3               	movwf	_TMR1_InterruptHandler+1
  3586  0613  0872               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  3587  0614  00A2               	movwf	_TMR1_InterruptHandler
  3588  0615  0008               	return
  3589  0616                     __end_of_TMR1_SetInterruptHandler:	
  3590                           
  3591                           	psect	text13
  3592  0398                     __ptext13:	
  3593 ;; *************** function _PIN_MANAGER_Initialize *****************
  3594 ;; Defined at:
  3595 ;;		line 59 in file "mcc_generated_files/pin_manager.c"
  3596 ;; Parameters:    Size  Location     Type
  3597 ;;		None
  3598 ;; Auto vars:     Size  Location     Type
  3599 ;;		None
  3600 ;; Return value:  Size  Location     Type
  3601 ;;                  1    wreg      void 
  3602 ;; Registers used:
  3603 ;;		wreg, status,2, status,0, pclath, cstack
  3604 ;; Tracked objects:
  3605 ;;		On entry : B1F/0
  3606 ;;		On exit  : 1F/0
  3607 ;;		Unchanged: 0/0
  3608 ;; Data sizes:     COMMON   BANK0   BANK1
  3609 ;;      Params:         0       0       0
  3610 ;;      Locals:         0       0       0
  3611 ;;      Temps:          0       0       0
  3612 ;;      Totals:         0       0       0
  3613 ;;Total ram usage:        0 bytes
  3614 ;; Hardware stack levels used:    1
  3615 ;; Hardware stack levels required when called:    5
  3616 ;; This function calls:
  3617 ;;		_IOCAF4_SetInterruptHandler
  3618 ;; This function is called by:
  3619 ;;		_SYSTEM_Initialize
  3620 ;; This function uses a non-reentrant model
  3621 ;;
  3622                           
  3623                           
  3624                           ;psect for function _PIN_MANAGER_Initialize
  3625  0398                     _PIN_MANAGER_Initialize:	
  3626                           
  3627                           ;mcc_generated_files/pin_manager.c: 64:     LATA = 0x00;
  3628                           
  3629                           ;incstack = 0
  3630                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3631  0398  0022               	movlb	2	; select bank2
  3632  0399  018C               	clrf	12	;volatile
  3633                           
  3634                           ;mcc_generated_files/pin_manager.c: 65:     LATC = 0x00;
  3635  039A  018E               	clrf	14	;volatile
  3636                           
  3637                           ;mcc_generated_files/pin_manager.c: 70:     TRISA = 0x1F;
  3638  039B  301F               	movlw	31
  3639  039C  0021               	movlb	1	; select bank1
  3640  039D  008C               	movwf	12	;volatile
  3641                           
  3642                           ;mcc_generated_files/pin_manager.c: 71:     TRISC = 0x2F;
  3643  039E  302F               	movlw	47
  3644  039F  008E               	movwf	14	;volatile
  3645                           
  3646                           ;mcc_generated_files/pin_manager.c: 76:     ANSELC = 0x0F;
  3647  03A0  300F               	movlw	15
  3648  03A1  0023               	movlb	3	; select bank3
  3649  03A2  008E               	movwf	14	;volatile
  3650                           
  3651                           ;mcc_generated_files/pin_manager.c: 77:     ANSELA = 0x07;
  3652  03A3  3007               	movlw	7
  3653  03A4  008C               	movwf	12	;volatile
  3654                           
  3655                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x10;
  3656  03A5  3010               	movlw	16
  3657  03A6  0024               	movlb	4	; select bank4
  3658  03A7  008C               	movwf	12	;volatile
  3659                           
  3660                           ;mcc_generated_files/pin_manager.c: 83:     WPUC = 0x00;
  3661  03A8  018E               	clrf	14	;volatile
  3662                           
  3663                           ;mcc_generated_files/pin_manager.c: 84:     OPTION_REGbits.nWPUEN = 0;
  3664  03A9  0021               	movlb	1	; select bank1
  3665  03AA  1395               	bcf	21,7	;volatile
  3666                           
  3667                           ;mcc_generated_files/pin_manager.c: 93:     APFCON = 0x00;
  3668  03AB  0022               	movlb	2	; select bank2
  3669  03AC  019D               	clrf	29	;volatile
  3670                           
  3671                           ;mcc_generated_files/pin_manager.c: 99:     IOCAFbits.IOCAF4 = 0;
  3672  03AD  0027               	movlb	7	; select bank7
  3673  03AE  1213               	bcf	19,4	;volatile
  3674                           
  3675                           ;mcc_generated_files/pin_manager.c: 101:     IOCANbits.IOCAN4 = 1;
  3676  03AF  1612               	bsf	18,4	;volatile
  3677                           
  3678                           ;mcc_generated_files/pin_manager.c: 103:     IOCAPbits.IOCAP4 = 1;
  3679  03B0  1611               	bsf	17,4	;volatile
  3680                           
  3681                           ;mcc_generated_files/pin_manager.c: 108:     IOCAF4_SetInterruptHandler(IOCAF4_DefaultIn
      +                          terruptHandler);
  3682  03B1  3063               	movlw	low _IOCAF4_DefaultInterruptHandler
  3683  03B2  00F2               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler
  3684  03B3  3006               	movlw	high _IOCAF4_DefaultInterruptHandler
  3685  03B4  00F3               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler+1
  3686  03B5  2616               	fcall	_IOCAF4_SetInterruptHandler
  3687                           
  3688                           ;mcc_generated_files/pin_manager.c: 111:     INTCONbits.IOCIE = 1;
  3689  03B6  158B               	bsf	11,3	;volatile
  3690  03B7  0008               	return
  3691  03B8                     __end_of_PIN_MANAGER_Initialize:	
  3692                           
  3693                           	psect	text14
  3694  0616                     __ptext14:	
  3695 ;; *************** function _IOCAF4_SetInterruptHandler *****************
  3696 ;; Defined at:
  3697 ;;		line 142 in file "mcc_generated_files/pin_manager.c"
  3698 ;; Parameters:    Size  Location     Type
  3699 ;;  InterruptHan    2    2[COMMON] PTR FTN()void 
  3700 ;;		 -> _IOC_Ready(1), IOCAF4_DefaultInterruptHandler(1), 
  3701 ;; Auto vars:     Size  Location     Type
  3702 ;;		None
  3703 ;; Return value:  Size  Location     Type
  3704 ;;                  1    wreg      void 
  3705 ;; Registers used:
  3706 ;;		wreg
  3707 ;; Tracked objects:
  3708 ;;		On entry : 18/0
  3709 ;;		On exit  : 1F/0
  3710 ;;		Unchanged: 0/0
  3711 ;; Data sizes:     COMMON   BANK0   BANK1
  3712 ;;      Params:         2       0       0
  3713 ;;      Locals:         0       0       0
  3714 ;;      Temps:          0       0       0
  3715 ;;      Totals:         2       0       0
  3716 ;;Total ram usage:        2 bytes
  3717 ;; Hardware stack levels used:    1
  3718 ;; Hardware stack levels required when called:    4
  3719 ;; This function calls:
  3720 ;;		Nothing
  3721 ;; This function is called by:
  3722 ;;		_PIN_MANAGER_Initialize
  3723 ;;		_logger_initialize
  3724 ;; This function uses a non-reentrant model
  3725 ;;
  3726                           
  3727                           
  3728                           ;psect for function _IOCAF4_SetInterruptHandler
  3729  0616                     _IOCAF4_SetInterruptHandler:	
  3730                           
  3731                           ;mcc_generated_files/pin_manager.c: 143:     IOCAF4_InterruptHandler = InterruptHandler;
  3732                           
  3733                           ;incstack = 0
  3734                           ; Regs used in _IOCAF4_SetInterruptHandler: [wreg]
  3735  0616  0873               	movf	IOCAF4_SetInterruptHandler@InterruptHandler+1,w
  3736  0617  0020               	movlb	0	; select bank0
  3737  0618  00ED               	movwf	_IOCAF4_InterruptHandler+1
  3738  0619  0872               	movf	IOCAF4_SetInterruptHandler@InterruptHandler,w
  3739  061A  00EC               	movwf	_IOCAF4_InterruptHandler
  3740  061B  0008               	return
  3741  061C                     __end_of_IOCAF4_SetInterruptHandler:	
  3742                           
  3743                           	psect	text15
  3744  05AE                     __ptext15:	
  3745 ;; *************** function _OSCILLATOR_Initialize *****************
  3746 ;; Defined at:
  3747 ;;		line 61 in file "mcc_generated_files/mcc.c"
  3748 ;; Parameters:    Size  Location     Type
  3749 ;;		None
  3750 ;; Auto vars:     Size  Location     Type
  3751 ;;		None
  3752 ;; Return value:  Size  Location     Type
  3753 ;;                  1    wreg      void 
  3754 ;; Registers used:
  3755 ;;		wreg, status,2
  3756 ;; Tracked objects:
  3757 ;;		On entry : 1F/0
  3758 ;;		On exit  : 1F/1
  3759 ;;		Unchanged: 0/0
  3760 ;; Data sizes:     COMMON   BANK0   BANK1
  3761 ;;      Params:         0       0       0
  3762 ;;      Locals:         0       0       0
  3763 ;;      Temps:          0       0       0
  3764 ;;      Totals:         0       0       0
  3765 ;;Total ram usage:        0 bytes
  3766 ;; Hardware stack levels used:    1
  3767 ;; Hardware stack levels required when called:    4
  3768 ;; This function calls:
  3769 ;;		Nothing
  3770 ;; This function is called by:
  3771 ;;		_SYSTEM_Initialize
  3772 ;; This function uses a non-reentrant model
  3773 ;;
  3774                           
  3775                           
  3776                           ;psect for function _OSCILLATOR_Initialize
  3777  05AE                     _OSCILLATOR_Initialize:	
  3778                           
  3779                           ;mcc_generated_files/mcc.c: 64:     OSCCON = 0x70;
  3780                           
  3781                           ;incstack = 0
  3782                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3783  05AE  3070               	movlw	112
  3784  05AF  0021               	movlb	1	; select bank1
  3785  05B0  0099               	movwf	25	;volatile
  3786                           
  3787                           ;mcc_generated_files/mcc.c: 66:     OSCTUNE = 0x00;
  3788  05B1  0198               	clrf	24	;volatile
  3789                           
  3790                           ;mcc_generated_files/mcc.c: 68:     BORCON = 0x00;
  3791  05B2  0022               	movlb	2	; select bank2
  3792  05B3  0196               	clrf	22	;volatile
  3793  05B4                     l211:	
  3794                           ;mcc_generated_files/mcc.c: 71:     {;mcc_generated_files/mcc.c: 72:     }
  3795                           
  3796                           
  3797                           ;mcc_generated_files/mcc.c: 70:     while(PLLR == 0)
  3798  05B4  0021               	movlb	1	; select bank1
  3799  05B5  1B1A               	btfsc	26,6	;volatile
  3800  05B6  0008               	return
  3801  05B7  2DB4               	goto	l211
  3802  05B8                     __end_of_OSCILLATOR_Initialize:	
  3803                           
  3804                           	psect	text16
  3805  0335                     __ptext16:	
  3806 ;; *************** function _EUSART_Initialize *****************
  3807 ;; Defined at:
  3808 ;;		line 75 in file "mcc_generated_files/eusart.c"
  3809 ;; Parameters:    Size  Location     Type
  3810 ;;		None
  3811 ;; Auto vars:     Size  Location     Type
  3812 ;;		None
  3813 ;; Return value:  Size  Location     Type
  3814 ;;                  1    wreg      void 
  3815 ;; Registers used:
  3816 ;;		wreg, status,2, status,0, pclath, cstack
  3817 ;; Tracked objects:
  3818 ;;		On entry : 1F/1
  3819 ;;		On exit  : 1F/1
  3820 ;;		Unchanged: 0/0
  3821 ;; Data sizes:     COMMON   BANK0   BANK1
  3822 ;;      Params:         0       0       0
  3823 ;;      Locals:         0       0       0
  3824 ;;      Temps:          0       0       0
  3825 ;;      Totals:         0       0       0
  3826 ;;Total ram usage:        0 bytes
  3827 ;; Hardware stack levels used:    1
  3828 ;; Hardware stack levels required when called:    5
  3829 ;; This function calls:
  3830 ;;		_EUSART_SetRxInterruptHandler
  3831 ;;		_EUSART_SetTxInterruptHandler
  3832 ;; This function is called by:
  3833 ;;		_SYSTEM_Initialize
  3834 ;; This function uses a non-reentrant model
  3835 ;;
  3836                           
  3837                           
  3838                           ;psect for function _EUSART_Initialize
  3839  0335                     _EUSART_Initialize:	
  3840  0335                     l2445:	
  3841                           ;incstack = 0
  3842                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3843                           
  3844                           
  3845                           ;mcc_generated_files/eusart.c: 78:     PIE1bits.RCIE = 0;
  3846  0335  1291               	bcf	17,5	;volatile
  3847                           
  3848                           ;mcc_generated_files/eusart.c: 79:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  3849  0336  30F6               	movlw	low _EUSART_Receive_ISR
  3850  0337  00F2               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  3851  0338  3004               	movlw	high _EUSART_Receive_ISR
  3852  0339  00F3               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  3853  033A  2622               	fcall	_EUSART_SetRxInterruptHandler
  3854                           
  3855                           ;mcc_generated_files/eusart.c: 80:     PIE1bits.TXIE = 0;
  3856  033B  0021               	movlb	1	; select bank1
  3857  033C  1211               	bcf	17,4	;volatile
  3858                           
  3859                           ;mcc_generated_files/eusart.c: 81:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  3860  033D  30E0               	movlw	low _EUSART_Transmit_ISR
  3861  033E  00F2               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
  3862  033F  3004               	movlw	high _EUSART_Transmit_ISR
  3863  0340  00F3               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
  3864  0341  261C               	fcall	_EUSART_SetTxInterruptHandler
  3865                           
  3866                           ;mcc_generated_files/eusart.c: 85:     BAUDCON = 0x08;
  3867  0342  3008               	movlw	8
  3868  0343  0023               	movlb	3	; select bank3
  3869  0344  009F               	movwf	31	;volatile
  3870                           
  3871                           ;mcc_generated_files/eusart.c: 88:     RCSTA = 0x90;
  3872  0345  3090               	movlw	144
  3873  0346  009D               	movwf	29	;volatile
  3874                           
  3875                           ;mcc_generated_files/eusart.c: 91:     TXSTA = 0x24;
  3876  0347  3024               	movlw	36
  3877  0348  009E               	movwf	30	;volatile
  3878                           
  3879                           ;mcc_generated_files/eusart.c: 94:     SPBRGL = 0x44;
  3880  0349  3044               	movlw	68
  3881  034A  009B               	movwf	27	;volatile
  3882                           
  3883                           ;mcc_generated_files/eusart.c: 97:     SPBRGH = 0x00;
  3884  034B  019C               	clrf	28	;volatile
  3885                           
  3886                           ;mcc_generated_files/eusart.c: 101:     eusartTxHead = 0;
  3887  034C  01FB               	clrf	_eusartTxHead	;volatile
  3888                           
  3889                           ;mcc_generated_files/eusart.c: 102:     eusartTxTail = 0;
  3890  034D  0020               	movlb	0	; select bank0
  3891  034E  01B6               	clrf	_eusartTxTail	;volatile
  3892                           
  3893                           ;mcc_generated_files/eusart.c: 103:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  3894  034F  300A               	movlw	10
  3895  0350  00FA               	movwf	_eusartTxBufferRemaining	;volatile
  3896                           
  3897                           ;mcc_generated_files/eusart.c: 105:     eusartRxHead = 0;
  3898  0351  01B5               	clrf	_eusartRxHead	;volatile
  3899                           
  3900                           ;mcc_generated_files/eusart.c: 106:     eusartRxTail = 0;
  3901  0352  01B4               	clrf	_eusartRxTail	;volatile
  3902                           
  3903                           ;mcc_generated_files/eusart.c: 107:     eusartRxCount = 0;
  3904  0353  01B3               	clrf	_eusartRxCount	;volatile
  3905                           
  3906                           ;mcc_generated_files/eusart.c: 110:     PIE1bits.RCIE = 1;
  3907  0354  0021               	movlb	1	; select bank1
  3908  0355  1691               	bsf	17,5	;volatile
  3909  0356  0008               	return
  3910  0357                     __end_of_EUSART_Initialize:	
  3911                           
  3912                           	psect	text17
  3913  061C                     __ptext17:	
  3914 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  3915 ;; Defined at:
  3916 ;;		line 211 in file "mcc_generated_files/eusart.c"
  3917 ;; Parameters:    Size  Location     Type
  3918 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  3919 ;;		 -> EUSART_Transmit_ISR(1), 
  3920 ;; Auto vars:     Size  Location     Type
  3921 ;;		None
  3922 ;; Return value:  Size  Location     Type
  3923 ;;                  1    wreg      void 
  3924 ;; Registers used:
  3925 ;;		wreg
  3926 ;; Tracked objects:
  3927 ;;		On entry : 1F/1
  3928 ;;		On exit  : 1F/0
  3929 ;;		Unchanged: 0/0
  3930 ;; Data sizes:     COMMON   BANK0   BANK1
  3931 ;;      Params:         2       0       0
  3932 ;;      Locals:         0       0       0
  3933 ;;      Temps:          0       0       0
  3934 ;;      Totals:         2       0       0
  3935 ;;Total ram usage:        2 bytes
  3936 ;; Hardware stack levels used:    1
  3937 ;; Hardware stack levels required when called:    4
  3938 ;; This function calls:
  3939 ;;		Nothing
  3940 ;; This function is called by:
  3941 ;;		_EUSART_Initialize
  3942 ;; This function uses a non-reentrant model
  3943 ;;
  3944                           
  3945                           
  3946                           ;psect for function _EUSART_SetTxInterruptHandler
  3947  061C                     _EUSART_SetTxInterruptHandler:	
  3948                           
  3949                           ;mcc_generated_files/eusart.c: 212:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  3950                           
  3951                           ;incstack = 0
  3952                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  3953  061C  0873               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
  3954  061D  0020               	movlb	0	; select bank0
  3955  061E  00AB               	movwf	_EUSART_TxDefaultInterruptHandler+1
  3956  061F  0872               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
  3957  0620  00AA               	movwf	_EUSART_TxDefaultInterruptHandler
  3958  0621  0008               	return
  3959  0622                     __end_of_EUSART_SetTxInterruptHandler:	
  3960                           
  3961                           	psect	text18
  3962  0622                     __ptext18:	
  3963 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  3964 ;; Defined at:
  3965 ;;		line 215 in file "mcc_generated_files/eusart.c"
  3966 ;; Parameters:    Size  Location     Type
  3967 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  3968 ;;		 -> EUSART_Receive_ISR(1), 
  3969 ;; Auto vars:     Size  Location     Type
  3970 ;;		None
  3971 ;; Return value:  Size  Location     Type
  3972 ;;                  1    wreg      void 
  3973 ;; Registers used:
  3974 ;;		wreg
  3975 ;; Tracked objects:
  3976 ;;		On entry : 1F/1
  3977 ;;		On exit  : 1F/0
  3978 ;;		Unchanged: 0/0
  3979 ;; Data sizes:     COMMON   BANK0   BANK1
  3980 ;;      Params:         2       0       0
  3981 ;;      Locals:         0       0       0
  3982 ;;      Temps:          0       0       0
  3983 ;;      Totals:         2       0       0
  3984 ;;Total ram usage:        2 bytes
  3985 ;; Hardware stack levels used:    1
  3986 ;; Hardware stack levels required when called:    4
  3987 ;; This function calls:
  3988 ;;		Nothing
  3989 ;; This function is called by:
  3990 ;;		_EUSART_Initialize
  3991 ;; This function uses a non-reentrant model
  3992 ;;
  3993                           
  3994                           
  3995                           ;psect for function _EUSART_SetRxInterruptHandler
  3996  0622                     _EUSART_SetRxInterruptHandler:	
  3997                           
  3998                           ;mcc_generated_files/eusart.c: 216:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  3999                           
  4000                           ;incstack = 0
  4001                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  4002  0622  0873               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  4003  0623  0020               	movlb	0	; select bank0
  4004  0624  00A9               	movwf	_EUSART_RxDefaultInterruptHandler+1
  4005  0625  0872               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  4006  0626  00A8               	movwf	_EUSART_RxDefaultInterruptHandler
  4007  0627  0008               	return
  4008  0628                     __end_of_EUSART_SetRxInterruptHandler:	
  4009                           
  4010                           	psect	text19
  4011  05B8                     __ptext19:	
  4012 ;; *************** function _ADC_Initialize *****************
  4013 ;; Defined at:
  4014 ;;		line 65 in file "mcc_generated_files/adc.c"
  4015 ;; Parameters:    Size  Location     Type
  4016 ;;		None
  4017 ;; Auto vars:     Size  Location     Type
  4018 ;;		None
  4019 ;; Return value:  Size  Location     Type
  4020 ;;                  1    wreg      void 
  4021 ;; Registers used:
  4022 ;;		wreg, status,2
  4023 ;; Tracked objects:
  4024 ;;		On entry : 1F/0
  4025 ;;		On exit  : 1F/1
  4026 ;;		Unchanged: 0/0
  4027 ;; Data sizes:     COMMON   BANK0   BANK1
  4028 ;;      Params:         0       0       0
  4029 ;;      Locals:         0       0       0
  4030 ;;      Temps:          0       0       0
  4031 ;;      Totals:         0       0       0
  4032 ;;Total ram usage:        0 bytes
  4033 ;; Hardware stack levels used:    1
  4034 ;; Hardware stack levels required when called:    4
  4035 ;; This function calls:
  4036 ;;		Nothing
  4037 ;; This function is called by:
  4038 ;;		_SYSTEM_Initialize
  4039 ;; This function uses a non-reentrant model
  4040 ;;
  4041                           
  4042                           
  4043                           ;psect for function _ADC_Initialize
  4044  05B8                     _ADC_Initialize:	
  4045                           
  4046                           ;mcc_generated_files/adc.c: 70:     ADCON0 = 0x01;
  4047                           
  4048                           ;incstack = 0
  4049                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  4050  05B8  3001               	movlw	1
  4051  05B9  0021               	movlb	1	; select bank1
  4052  05BA  009D               	movwf	29	;volatile
  4053                           
  4054                           ;mcc_generated_files/adc.c: 73:     ADCON1 = 0xF0;
  4055  05BB  30F0               	movlw	240
  4056  05BC  009E               	movwf	30	;volatile
  4057                           
  4058                           ;mcc_generated_files/adc.c: 76:     ADRESL = 0x00;
  4059  05BD  019B               	clrf	27	;volatile
  4060                           
  4061                           ;mcc_generated_files/adc.c: 79:     ADRESH = 0x00;
  4062  05BE  019C               	clrf	28	;volatile
  4063                           
  4064                           ;mcc_generated_files/adc.c: 82:     PIE1bits.ADIE = 1;
  4065  05BF  1711               	bsf	17,6	;volatile
  4066  05C0  0008               	return
  4067  05C1                     __end_of_ADC_Initialize:	
  4068                           
  4069                           	psect	text20
  4070  03B8                     __ptext20:	
  4071 ;; *************** function _ESP_message_handler *****************
  4072 ;; Defined at:
  4073 ;;		line 152 in file "esp1.c"
  4074 ;; Parameters:    Size  Location     Type
  4075 ;;		None
  4076 ;; Auto vars:     Size  Location     Type
  4077 ;;  index           2    0        PTR unsigned char 
  4078 ;;  ret             1   23[BANK0 ] unsigned char 
  4079 ;;  aux             1    0        unsigned char 
  4080 ;; Return value:  Size  Location     Type
  4081 ;;                  1    wreg      void 
  4082 ;; Registers used:
  4083 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4084 ;; Tracked objects:
  4085 ;;		On entry : 1F/0
  4086 ;;		On exit  : 0/0
  4087 ;;		Unchanged: 0/0
  4088 ;; Data sizes:     COMMON   BANK0   BANK1
  4089 ;;      Params:         0       0       0
  4090 ;;      Locals:         0       1       0
  4091 ;;      Temps:          0       2       0
  4092 ;;      Totals:         0       3       0
  4093 ;;Total ram usage:        3 bytes
  4094 ;; Hardware stack levels used:    1
  4095 ;; Hardware stack levels required when called:   13
  4096 ;; This function calls:
  4097 ;;		_ESP_process_rx_data
  4098 ;;		_ESP_read
  4099 ;; This function is called by:
  4100 ;;		_main
  4101 ;; This function uses a non-reentrant model
  4102 ;;
  4103                           
  4104                           
  4105                           ;psect for function _ESP_message_handler
  4106  03B8                     _ESP_message_handler:	
  4107                           
  4108                           ;esp1.c: 154:     unsigned char ret,aux;;esp1.c: 155:     char *index;;esp1.c: 157:     
      +                          ret = ESP_read();
  4109                           
  4110                           ;incstack = 0
  4111                           ; Regs used in _ESP_message_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4112  03B8  22EE               	fcall	_ESP_read
  4113  03B9  00E3               	movwf	ESP_message_handler@ret
  4114                           
  4115                           ;esp1.c: 159:     switch (ret) {
  4116  03BA  2BC1               	goto	l3127
  4117  03BB                     l3119:	
  4118                           
  4119                           ;esp1.c: 164:             ESP_process_rx_data();
  4120  03BB  2CB4               	ljmp	l3083
  4121  03BC                     l3121:	
  4122                           ;esp1.c: 165:             break;
  4123                           
  4124                           
  4125                           ;esp1.c: 168:             esp_channel = esp_read_data[0];
  4126  03BC  0838               	movf	_esp_read_data,w	;volatile
  4127  03BD  00AF               	movwf	_esp_channel	;volatile
  4128                           
  4129                           ;esp1.c: 169:             break;
  4130  03BE  0008               	return
  4131  03BF                     l3123:	
  4132                           
  4133                           ;esp1.c: 172:             esp_channel = 0;
  4134  03BF  01AF               	clrf	_esp_channel	;volatile
  4135                           
  4136                           ;esp1.c: 173:             break;
  4137  03C0  0008               	return
  4138  03C1                     l3127:	
  4139  03C1  0863               	movf	ESP_message_handler@ret,w
  4140  03C2  00E1               	movwf	??_ESP_message_handler
  4141  03C3  01E2               	clrf	??_ESP_message_handler+1
  4142                           
  4143                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4144                           ; Switch size 1, requested type "space"
  4145                           ; Number of cases is 1, Range of values is 0 to 0
  4146                           ; switch strategies available:
  4147                           ; Name         Instructions Cycles
  4148                           ; simple_byte            4     3 (average)
  4149                           ; direct_byte            8     6 (fixed)
  4150                           ; jumptable            260     6 (fixed)
  4151                           ;	Chosen strategy is simple_byte
  4152  03C4  0862               	movf	??_ESP_message_handler+1,w
  4153  03C5  3A00               	xorlw	0	; case 0
  4154  03C6  1903               	skipnz
  4155  03C7  2BC9               	goto	l3231
  4156  03C8  2BD7               	goto	l484
  4157  03C9                     l3231:	
  4158                           
  4159                           ; Switch size 1, requested type "space"
  4160                           ; Number of cases is 4, Range of values is 0 to 8
  4161                           ; switch strategies available:
  4162                           ; Name         Instructions Cycles
  4163                           ; simple_byte           13     7 (average)
  4164                           ; direct_byte           24     6 (fixed)
  4165                           ; jumptable            260     6 (fixed)
  4166                           ;	Chosen strategy is simple_byte
  4167  03C9  0861               	movf	??_ESP_message_handler,w
  4168  03CA  3A00               	xorlw	0	; case 0
  4169  03CB  1903               	skipnz
  4170  03CC  2BD7               	goto	l484
  4171  03CD  3A04               	xorlw	4	; case 4
  4172  03CE  1903               	skipnz
  4173  03CF  2BBB               	goto	l3119
  4174  03D0  3A02               	xorlw	2	; case 6
  4175  03D1  1903               	skipnz
  4176  03D2  2BBC               	goto	l3121
  4177  03D3  3A0E               	xorlw	14	; case 8
  4178  03D4  1903               	skipnz
  4179  03D5  2BBF               	goto	l3123
  4180  03D6  2BD7               	goto	l484
  4181  03D7                     l484:	
  4182  03D7  0008               	return
  4183  03D8                     __end_of_ESP_message_handler:	
  4184                           
  4185                           	psect	text21
  4186  04B4                     __ptext21:	
  4187 ;; *************** function _ESP_process_rx_data *****************
  4188 ;; Defined at:
  4189 ;;		line 137 in file "esp1.c"
  4190 ;; Parameters:    Size  Location     Type
  4191 ;;		None
  4192 ;; Auto vars:     Size  Location     Type
  4193 ;;  aux             1   20[BANK0 ] unsigned char 
  4194 ;;  index           1   19[BANK0 ] PTR unsigned char 
  4195 ;;		 -> NULL(0), esp_read_data(20), 
  4196 ;; Return value:  Size  Location     Type
  4197 ;;                  1    wreg      void 
  4198 ;; Registers used:
  4199 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4200 ;; Tracked objects:
  4201 ;;		On entry : 1F/0
  4202 ;;		On exit  : 0/0
  4203 ;;		Unchanged: 0/0
  4204 ;; Data sizes:     COMMON   BANK0   BANK1
  4205 ;;      Params:         0       0       0
  4206 ;;      Locals:         0       2       0
  4207 ;;      Temps:          0       0       0
  4208 ;;      Totals:         0       2       0
  4209 ;;Total ram usage:        2 bytes
  4210 ;; Hardware stack levels used:    1
  4211 ;; Hardware stack levels required when called:   12
  4212 ;; This function calls:
  4213 ;;		Absolute function
  4214 ;;		_ESP_default_application_handler
  4215 ;;		_process_message
  4216 ;;		_strstr
  4217 ;; This function is called by:
  4218 ;;		_ESP_message_handler
  4219 ;; This function uses a non-reentrant model
  4220 ;;
  4221                           
  4222                           
  4223                           ;psect for function _ESP_process_rx_data
  4224  04B4                     _ESP_process_rx_data:	
  4225  04B4                     l3083:	
  4226                           ;incstack = 0
  4227                           ; Regs used in _ESP_process_rx_data: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4228                           
  4229                           
  4230                           ;esp1.c: 139:     char *index;;esp1.c: 140:     unsigned char aux;;esp1.c: 142:     esp_
      +                          channel = esp_read_data[5];
  4231  04B4  083D               	movf	_esp_read_data+5,w	;volatile
  4232  04B5  00AF               	movwf	_esp_channel	;volatile
  4233                           
  4234                           ;esp1.c: 143:     index = strstr(esp_read_data,":");
  4235  04B6  3057               	movlw	low (STR_13| (0+32768))
  4236  04B7  00D0               	movwf	strstr@n
  4237  04B8  3086               	movlw	high (STR_13| (0+32768))
  4238  04B9  00D1               	movwf	strstr@n+1
  4239  04BA  3038               	movlw	(low (_esp_read_data| 0))& (0+255)
  4240  04BB  2271               	fcall	_strstr
  4241  04BC  00DF               	movwf	ESP_process_rx_data@index
  4242                           
  4243                           ;esp1.c: 144:     aux = *(++index);
  4244  04BD  0ADF               	incf	ESP_process_rx_data@index,f
  4245  04BE  085F               	movf	ESP_process_rx_data@index,w
  4246  04BF  0086               	movwf	6
  4247  04C0  0187               	clrf	7
  4248  04C1  0801               	movf	1,w
  4249  04C2  00E0               	movwf	ESP_process_rx_data@aux
  4250                           
  4251                           ;esp1.c: 149:     ESP_external_message_handler(aux);
  4252  04C3  00DC               	movwf	ESP_default_application_handler@data
  4253  04C4  0821               	movf	_ESP_external_message_handler+1,w
  4254  04C5  008A               	movwf	10
  4255  04C6  0820               	movf	_ESP_external_message_handler,w
  4256  04C7  000A               	callw
  4257  04C8  3184               	pagesel	$
  4258  04C9  0008               	return
  4259  04CA                     __end_of_ESP_process_rx_data:	
  4260                           
  4261                           	psect	text22
  4262  0661                     __ptext22:	
  4263 ;; *************** function _ESP_default_application_handler *****************
  4264 ;; Defined at:
  4265 ;;		line 212 in file "esp1.c"
  4266 ;; Parameters:    Size  Location     Type
  4267 ;;  data            1   16[BANK0 ] unsigned char 
  4268 ;; Auto vars:     Size  Location     Type
  4269 ;;		None
  4270 ;; Return value:  Size  Location     Type
  4271 ;;                  1    wreg      void 
  4272 ;; Registers used:
  4273 ;;		None
  4274 ;; Tracked objects:
  4275 ;;		On entry : 1F/0
  4276 ;;		On exit  : 1F/0
  4277 ;;		Unchanged: 1F/0
  4278 ;; Data sizes:     COMMON   BANK0   BANK1
  4279 ;;      Params:         0       1       0
  4280 ;;      Locals:         0       0       0
  4281 ;;      Temps:          0       0       0
  4282 ;;      Totals:         0       1       0
  4283 ;;Total ram usage:        1 bytes
  4284 ;; Hardware stack levels used:    1
  4285 ;; Hardware stack levels required when called:    4
  4286 ;; This function calls:
  4287 ;;		Nothing
  4288 ;; This function is called by:
  4289 ;;		_ESP_initialize
  4290 ;;		_ESP_process_rx_data
  4291 ;; This function uses a non-reentrant model
  4292 ;;
  4293                           
  4294                           
  4295                           ;psect for function _ESP_default_application_handler
  4296  0661                     _ESP_default_application_handler:	
  4297                           
  4298                           ;incstack = 0
  4299                           ; Regs used in _ESP_default_application_handler: []
  4300  0661  0008               	return
  4301  0662                     __end_of_ESP_default_application_handler:	
  4302                           
  4303                           	psect	text23
  4304  0201                     __ptext23:	
  4305 ;; *************** function _process_message *****************
  4306 ;; Defined at:
  4307 ;;		line 45 in file "logger.c"
  4308 ;; Parameters:    Size  Location     Type
  4309 ;;  message         1   16[BANK0 ] unsigned char 
  4310 ;; Auto vars:     Size  Location     Type
  4311 ;;		None
  4312 ;; Return value:  Size  Location     Type
  4313 ;;                  1    wreg      void 
  4314 ;; Registers used:
  4315 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4316 ;; Tracked objects:
  4317 ;;		On entry : 1F/0
  4318 ;;		On exit  : 0/0
  4319 ;;		Unchanged: 0/0
  4320 ;; Data sizes:     COMMON   BANK0   BANK1
  4321 ;;      Params:         0       1       0
  4322 ;;      Locals:         0       0       0
  4323 ;;      Temps:          0       2       0
  4324 ;;      Totals:         0       3       0
  4325 ;;Total ram usage:        3 bytes
  4326 ;; Hardware stack levels used:    1
  4327 ;; Hardware stack levels required when called:   11
  4328 ;; This function calls:
  4329 ;;		_ADC_StartConversion
  4330 ;;		_ESP_write
  4331 ;;		_TMR1_StartTimer
  4332 ;;		_TMR1_StopTimer
  4333 ;;		_toggle_format
  4334 ;; This function is called by:
  4335 ;;		_main
  4336 ;;		_logger_initialize
  4337 ;;		_ESP_process_rx_data
  4338 ;; This function uses a non-reentrant model
  4339 ;;
  4340                           
  4341                           
  4342                           ;psect for function _process_message
  4343  0201                     _process_message:	
  4344                           
  4345                           ;logger.c: 45: void process_message(unsigned char message);logger.c: 46: {;logger.c: 49:
      +                               switch (message) {
  4346                           
  4347                           ;incstack = 0
  4348                           ; Regs used in _process_message: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4349  0201  2A1B               	goto	l3059
  4350  0202                     l3039:	
  4351                           
  4352                           ;logger.c: 54:             ESP_write("Ok\n",3);
  4353  0202  3037               	movlw	low (STR_18| (0+32768))
  4354  0203  00D7               	movwf	ESP_write@pt
  4355  0204  3086               	movlw	high (STR_18| (0+32768))
  4356  0205  00D8               	movwf	ESP_write@pt+1
  4357  0206  3003               	movlw	3
  4358  0207  00D9               	movwf	ESP_write@length
  4359  0208  2850               	ljmp	l2993
  4360  0209                     l3041:	
  4361                           ;logger.c: 56:             break;
  4362                           
  4363                           
  4364                           ;logger.c: 59:             ADC_StartConversion();
  4365  0209  2E4C               	ljmp	l2329
  4366  020A                     l3043:	
  4367                           ;logger.c: 60:             break;
  4368                           
  4369                           
  4370                           ;logger.c: 63:             toggle_format();
  4371  020A  2D1F               	ljmp	l3027
  4372  020B                     l3045:	
  4373                           ;logger.c: 64:             break;
  4374                           
  4375                           
  4376                           ;logger.c: 67:             if (TMR1_state == TMR1_RUNNING)
  4377  020B  0B2D               	decfsz	_TMR1_state,w	;volatile
  4378  020C  2A0E               	goto	l3049
  4379  020D  0008               	return
  4380  020E                     l3049:	
  4381                           
  4382                           ;logger.c: 69:             TMR1_StartTimer();
  4383  020E  265B               	fcall	_TMR1_StartTimer
  4384                           
  4385                           ;logger.c: 70:             TMR1_state = TMR1_RUNNING;
  4386  020F  3001               	movlw	1
  4387  0210  00AD               	movwf	_TMR1_state	;volatile
  4388                           
  4389                           ;logger.c: 71:             break;
  4390  0211  0008               	return
  4391  0212                     l3053:	
  4392                           
  4393                           ;logger.c: 74:             TMR1_StopTimer();
  4394  0212  2659               	fcall	_TMR1_StopTimer
  4395                           
  4396                           ;logger.c: 75:             TMR1_state = TMR1_STOP;
  4397  0213  01AD               	clrf	_TMR1_state	;volatile
  4398                           
  4399                           ;logger.c: 76:             break;
  4400  0214  0008               	return
  4401  0215                     l564:	
  4402                           ;logger.c: 79:             do { LATAbits.LATA5 = 0; } while(0);
  4403                           
  4404  0215  0022               	movlb	2	; select bank2
  4405  0216  128C               	bcf	12,5	;volatile
  4406  0217  0008               	return
  4407  0218                     l567:	
  4408                           ;logger.c: 83:             do { LATAbits.LATA5 = 1; } while(0);
  4409                           
  4410  0218  0022               	movlb	2	; select bank2
  4411  0219  168C               	bsf	12,5	;volatile
  4412  021A  0008               	return
  4413  021B                     l3059:	
  4414  021B  085C               	movf	process_message@message,w
  4415  021C  00DD               	movwf	??_process_message
  4416  021D  01DE               	clrf	??_process_message+1
  4417                           
  4418                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4419                           ; Switch size 1, requested type "space"
  4420                           ; Number of cases is 1, Range of values is 0 to 0
  4421                           ; switch strategies available:
  4422                           ; Name         Instructions Cycles
  4423                           ; simple_byte            4     3 (average)
  4424                           ; direct_byte            8     6 (fixed)
  4425                           ; jumptable            260     6 (fixed)
  4426                           ;	Chosen strategy is simple_byte
  4427  021E  085E               	movf	??_process_message+1,w
  4428  021F  3A00               	xorlw	0	; case 0
  4429  0220  1903               	skipnz
  4430  0221  2A23               	goto	l3233
  4431  0222  2A3A               	goto	l561
  4432  0223                     l3233:	
  4433                           
  4434                           ; Switch size 1, requested type "space"
  4435                           ; Number of cases is 7, Range of values is 79 to 116
  4436                           ; switch strategies available:
  4437                           ; Name         Instructions Cycles
  4438                           ; simple_byte           22    12 (average)
  4439                           ; direct_byte           85     9 (fixed)
  4440                           ; jumptable            263     9 (fixed)
  4441                           ;	Chosen strategy is simple_byte
  4442  0223  085D               	movf	??_process_message,w
  4443  0224  3A4F               	xorlw	79	; case 79
  4444  0225  1903               	skipnz
  4445  0226  2A18               	goto	l567
  4446  0227  3A1C               	xorlw	28	; case 83
  4447  0228  1903               	skipnz
  4448  0229  2A12               	goto	l3053
  4449  022A  3A07               	xorlw	7	; case 84
  4450  022B  1903               	skipnz
  4451  022C  2A0A               	goto	l3043
  4452  022D  3A35               	xorlw	53	; case 97
  4453  022E  1903               	skipnz
  4454  022F  2A09               	goto	l3041
  4455  0230  3A0E               	xorlw	14	; case 111
  4456  0231  1903               	skipnz
  4457  0232  2A15               	goto	l564
  4458  0233  3A1C               	xorlw	28	; case 115
  4459  0234  1903               	skipnz
  4460  0235  2A0B               	goto	l3045
  4461  0236  3A07               	xorlw	7	; case 116
  4462  0237  1903               	skipnz
  4463  0238  2A02               	goto	l3039
  4464  0239  2A3A               	goto	l561
  4465  023A                     l561:	
  4466  023A  0008               	return
  4467  023B                     __end_of_process_message:	
  4468                           
  4469                           	psect	text24
  4470  051F                     __ptext24:	
  4471 ;; *************** function _toggle_format *****************
  4472 ;; Defined at:
  4473 ;;		line 134 in file "logger.c"
  4474 ;; Parameters:    Size  Location     Type
  4475 ;;		None
  4476 ;; Auto vars:     Size  Location     Type
  4477 ;;		None
  4478 ;; Return value:  Size  Location     Type
  4479 ;;                  1    wreg      void 
  4480 ;; Registers used:
  4481 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4482 ;; Tracked objects:
  4483 ;;		On entry : 1F/0
  4484 ;;		On exit  : 0/0
  4485 ;;		Unchanged: 0/0
  4486 ;; Data sizes:     COMMON   BANK0   BANK1
  4487 ;;      Params:         0       0       0
  4488 ;;      Locals:         0       0       0
  4489 ;;      Temps:          0       0       0
  4490 ;;      Totals:         0       0       0
  4491 ;;Total ram usage:        0 bytes
  4492 ;; Hardware stack levels used:    1
  4493 ;; Hardware stack levels required when called:   10
  4494 ;; This function calls:
  4495 ;;		_ESP_write
  4496 ;; This function is called by:
  4497 ;;		_process_message
  4498 ;; This function uses a non-reentrant model
  4499 ;;
  4500                           
  4501                           
  4502                           ;psect for function _toggle_format
  4503  051F                     _toggle_format:	
  4504  051F                     l3027:	
  4505                           ;incstack = 0
  4506                           ; Regs used in _toggle_format: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4507                           
  4508                           
  4509                           ;logger.c: 136:     if (message_format == MESSAGE_BINARY) {
  4510  051F  082E               	movf	_message_format,w	;volatile
  4511  0520  1D03               	btfss	3,2
  4512  0521  2D2B               	goto	l3033
  4513                           
  4514                           ;logger.c: 137:         message_format = MESSAGE_TEXT;
  4515  0522  3001               	movlw	1
  4516  0523  00AE               	movwf	_message_format	;volatile
  4517                           
  4518                           ;logger.c: 141:             ESP_write("tmode\n",6);
  4519  0524  30E9               	movlw	low (STR_19| (0+32768))
  4520  0525  00D7               	movwf	ESP_write@pt
  4521  0526  3085               	movlw	high (STR_19| (0+32768))
  4522  0527  00D8               	movwf	ESP_write@pt+1
  4523  0528  3006               	movlw	6
  4524  0529  00D9               	movwf	ESP_write@length
  4525  052A  2850               	ljmp	l2993
  4526  052B                     l3033:	
  4527                           ;logger.c: 143:     } else {
  4528                           
  4529                           
  4530                           ;logger.c: 144:         message_format = MESSAGE_BINARY;
  4531  052B  01AE               	clrf	_message_format	;volatile
  4532                           
  4533                           ;logger.c: 148:             ESP_write("bmode\n",6);
  4534  052C  30E2               	movlw	low (STR_20| (0+32768))
  4535  052D  00D7               	movwf	ESP_write@pt
  4536  052E  3085               	movlw	high (STR_20| (0+32768))
  4537  052F  00D8               	movwf	ESP_write@pt+1
  4538  0530  3006               	movlw	6
  4539  0531  00D9               	movwf	ESP_write@length
  4540  0532  2850               	ljmp	l2993
  4541  0533                     __end_of_toggle_format:	
  4542                           
  4543                           	psect	text25
  4544  0050                     __ptext25:	
  4545 ;; *************** function _ESP_write *****************
  4546 ;; Defined at:
  4547 ;;		line 180 in file "esp1.c"
  4548 ;; Parameters:    Size  Location     Type
  4549 ;;  pt              2   11[BANK0 ] PTR unsigned char 
  4550 ;;		 -> STR_22(3), STR_21(3), STR_20(7), STR_19(7), 
  4551 ;;		 -> read_analog@mess(6), STR_18(4), 
  4552 ;;  length          1   13[BANK0 ] unsigned char 
  4553 ;; Auto vars:     Size  Location     Type
  4554 ;;  aux             1   15[BANK0 ] unsigned char 
  4555 ;;  res             1   14[BANK0 ] unsigned char 
  4556 ;; Return value:  Size  Location     Type
  4557 ;;                  1    wreg      void 
  4558 ;; Registers used:
  4559 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4560 ;; Tracked objects:
  4561 ;;		On entry : 1F/0
  4562 ;;		On exit  : 0/0
  4563 ;;		Unchanged: 0/0
  4564 ;; Data sizes:     COMMON   BANK0   BANK1
  4565 ;;      Params:         0       3       0
  4566 ;;      Locals:         0       2       0
  4567 ;;      Temps:          0       0       0
  4568 ;;      Totals:         0       5       0
  4569 ;;Total ram usage:        5 bytes
  4570 ;; Hardware stack levels used:    1
  4571 ;; Hardware stack levels required when called:    9
  4572 ;; This function calls:
  4573 ;;		_ESP_wait_for
  4574 ;;		___awdiv
  4575 ;;		___lbmod
  4576 ;;		__puts
  4577 ;;		_write
  4578 ;; This function is called by:
  4579 ;;		_process_message
  4580 ;;		_read_analog
  4581 ;;		_toggle_format
  4582 ;;		_process_ioc
  4583 ;; This function uses a non-reentrant model
  4584 ;;
  4585                           
  4586                           
  4587                           ;psect for function _ESP_write
  4588  0050                     _ESP_write:	
  4589  0050                     l2993:	
  4590                           ;incstack = 0
  4591                           ; Regs used in _ESP_write: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4592                           
  4593                           
  4594                           ;esp1.c: 180: void ESP_write(unsigned char *pt, unsigned char length);esp1.c: 181: {;esp
      +                          1.c: 182:     unsigned char aux, res;;esp1.c: 184:     _puts("AT+CIPSEND=");
  4595  0050  308C               	movlw	low (STR_14| (0+32768))
  4596  0051  00F3               	movwf	__puts@pt
  4597  0052  3085               	movlw	high (STR_14| (0+32768))
  4598  0053  00F4               	movwf	__puts@pt+1
  4599  0054  240E               	fcall	__puts
  4600                           
  4601                           ;esp1.c: 185:     aux = esp_channel;
  4602  0055  0020               	movlb	0	; select bank0
  4603  0056  082F               	movf	_esp_channel,w	;volatile
  4604  0057  00DB               	movwf	ESP_write@aux
  4605                           
  4606                           ;esp1.c: 186:     write(&aux,1);
  4607  0058  2095               	fcall	PL10	;call to abstracted procedure
  4608  0059  2441               	fcall	_write
  4609                           
  4610                           ;esp1.c: 187:     _puts(",");
  4611  005A  3055               	movlw	low (STR_15| (0+32768))
  4612  005B  00F3               	movwf	__puts@pt
  4613  005C  3086               	movlw	high (STR_15| (0+32768))
  4614  005D  00F4               	movwf	__puts@pt+1
  4615  005E  240E               	fcall	__puts
  4616                           
  4617                           ;esp1.c: 189:     aux = length;
  4618  005F  0020               	movlb	0	; select bank0
  4619  0060  0859               	movf	ESP_write@length,w
  4620  0061  00DB               	movwf	ESP_write@aux
  4621                           
  4622                           ;esp1.c: 190:     if (aux > 9) {
  4623  0062  300A               	movlw	10
  4624  0063  025B               	subwf	ESP_write@aux,w
  4625  0064  1C03               	skipc
  4626  0065  287E               	goto	l3015
  4627                           
  4628                           ;esp1.c: 191:         res = aux%10;
  4629  0066  300A               	movlw	10
  4630  0067  00F2               	movwf	___lbmod@divisor
  4631  0068  085B               	movf	ESP_write@aux,w
  4632  0069  2459               	fcall	___lbmod
  4633  006A  00DA               	movwf	ESP_write@res
  4634                           
  4635                           ;esp1.c: 192:         res += '0';
  4636  006B  3030               	movlw	48
  4637  006C  07DA               	addwf	ESP_write@res,f
  4638                           
  4639                           ;esp1.c: 193:         aux /= 10;
  4640  006D  300A               	movlw	10
  4641  006E  00F2               	movwf	___awdiv@divisor
  4642  006F  01F3               	clrf	___awdiv@divisor+1
  4643  0070  085B               	movf	ESP_write@aux,w
  4644  0071  00F4               	movwf	___awdiv@dividend
  4645  0072  01F5               	clrf	___awdiv@dividend+1
  4646  0073  21C1               	fcall	___awdiv
  4647  0074  0872               	movf	?___awdiv,w
  4648  0075  00DB               	movwf	ESP_write@aux
  4649                           
  4650                           ;esp1.c: 194:         aux += '0';
  4651  0076  3030               	movlw	48
  4652  0077  07DB               	addwf	ESP_write@aux,f
  4653                           
  4654                           ;esp1.c: 195:         write(&aux,1);
  4655  0078  2095               	fcall	PL10	;call to abstracted procedure
  4656  0079  2441               	fcall	_write
  4657                           
  4658                           ;esp1.c: 196:         write(&res,1);
  4659  007A  305A               	movlw	low ESP_write@res
  4660  007B  00F3               	movwf	write@pt
  4661  007C  3000               	movlw	high ESP_write@res
  4662  007D  2884               	goto	L3
  4663  007E                     l3015:	
  4664                           ;esp1.c: 198:     } else {
  4665                           
  4666                           
  4667                           ;esp1.c: 199:         aux = length + '0';
  4668  007E  0859               	movf	ESP_write@length,w
  4669  007F  3E30               	addlw	48
  4670  0080  00DB               	movwf	ESP_write@aux
  4671                           
  4672                           ;esp1.c: 200:         write(&aux,1);
  4673  0081  305B               	movlw	low ESP_write@aux
  4674  0082  00F3               	movwf	write@pt
  4675  0083  3000               	movlw	high ESP_write@aux
  4676  0084                     L3:	
  4677  0084  00F4               	movwf	write@pt+1
  4678  0085  01F5               	clrf	write@lenght
  4679  0086  0AF5               	incf	write@lenght,f
  4680  0087  2441               	fcall	_write
  4681                           
  4682                           ;esp1.c: 203:     _puts("\r\n");
  4683  0088  209C               	fcall	PL16	;call to abstracted procedure
  4684  0089  240E               	fcall	__puts
  4685                           
  4686                           ;esp1.c: 205:     ESP_wait_for(ESP_OK);
  4687  008A  3002               	movlw	2
  4688  008B  2357               	fcall	_ESP_wait_for
  4689                           
  4690                           ;esp1.c: 207:     write(pt,length);
  4691  008C  0858               	movf	ESP_write@pt+1,w
  4692  008D  00F4               	movwf	write@pt+1
  4693  008E  0857               	movf	ESP_write@pt,w
  4694  008F  00F3               	movwf	write@pt
  4695  0090  0859               	movf	ESP_write@length,w
  4696  0091  00F5               	movwf	write@lenght
  4697  0092  2441               	fcall	_write
  4698                           
  4699                           ;esp1.c: 208:     _puts("\r\n");
  4700  0093  209C               	fcall	PL16	;call to abstracted procedure
  4701  0094  2C0E               	ljmp	l2187
  4702  0095                     __end_of_ESP_write:	
  4703  0095                     PL10:	
  4704  0095  305B               	movlw	low ESP_write@aux
  4705  0096  00F3               	movwf	write@pt
  4706  0097  3000               	movlw	high ESP_write@aux
  4707  0098  00F4               	movwf	write@pt+1
  4708  0099  01F5               	clrf	write@lenght
  4709  009A  0AF5               	incf	write@lenght,f
  4710  009B  0008               	return
  4711  009C                     __end_ofPL10:	
  4712  009C                     PL16:	
  4713  009C  3032               	movlw	low ((STR_10+31)| (0+32768))
  4714  009D  00F3               	movwf	__puts@pt
  4715  009E  3083               	movlw	high ((STR_10+31)| (0+32768))
  4716  009F  00F4               	movwf	__puts@pt+1
  4717  00A0  0008               	return
  4718  00A1                     __end_ofPL16:	
  4719                           
  4720                           	psect	text26
  4721  0441                     __ptext26:	
  4722 ;; *************** function _write *****************
  4723 ;; Defined at:
  4724 ;;		line 15 in file "comm.c"
  4725 ;; Parameters:    Size  Location     Type
  4726 ;;  pt              2    3[COMMON] PTR unsigned char 
  4727 ;;		 -> STR_22(3), STR_21(3), STR_20(7), STR_19(7), 
  4728 ;;		 -> read_analog@mess(6), STR_18(4), ESP_write@res(1), ESP_write@aux(1), 
  4729 ;;  lenght          1    5[COMMON] unsigned char 
  4730 ;; Auto vars:     Size  Location     Type
  4731 ;;  i               1    8[COMMON] unsigned char 
  4732 ;; Return value:  Size  Location     Type
  4733 ;;                  1    wreg      void 
  4734 ;; Registers used:
  4735 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4736 ;; Tracked objects:
  4737 ;;		On entry : 0/0
  4738 ;;		On exit  : 0/0
  4739 ;;		Unchanged: 0/0
  4740 ;; Data sizes:     COMMON   BANK0   BANK1
  4741 ;;      Params:         3       0       0
  4742 ;;      Locals:         1       0       0
  4743 ;;      Temps:          2       0       0
  4744 ;;      Totals:         6       0       0
  4745 ;;Total ram usage:        6 bytes
  4746 ;; Hardware stack levels used:    1
  4747 ;; Hardware stack levels required when called:    5
  4748 ;; This function calls:
  4749 ;;		_EUSART_Write
  4750 ;;		_EUSART_is_tx_ready
  4751 ;; This function is called by:
  4752 ;;		_ESP_write
  4753 ;; This function uses a non-reentrant model
  4754 ;;
  4755                           
  4756                           
  4757                           ;psect for function _write
  4758  0441                     _write:	
  4759                           
  4760                           ;comm.c: 15: void write(unsigned char *pt, unsigned char lenght);comm.c: 16: {;comm.c: 1
      +                          7:     unsigned char i;;comm.c: 19:     for (i=0; i<lenght; i++) {
  4761                           
  4762                           ;incstack = 0
  4763                           ; Regs used in _write: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4764  0441  01F8               	clrf	write@i
  4765  0442                     l2205:	
  4766  0442  0875               	movf	write@lenght,w
  4767  0443  0278               	subwf	write@i,w
  4768  0444  1803               	btfsc	3,0
  4769  0445  0008               	return
  4770  0446                     l2199:	
  4771  0446  265D               	fcall	_EUSART_is_tx_ready
  4772  0447  3A00               	xorlw	0
  4773  0448  1903               	skipnz
  4774  0449  2C46               	goto	l2199
  4775                           
  4776                           ;comm.c: 21:         EUSART_Write(pt[i]);
  4777  044A  0874               	movf	write@pt+1,w
  4778  044B  00F7               	movwf	??_write+1
  4779  044C  0873               	movf	write@pt,w
  4780  044D  00F6               	movwf	??_write
  4781  044E  0878               	movf	write@i,w
  4782  044F  0776               	addwf	??_write,w
  4783  0450  0084               	movwf	4
  4784  0451  0877               	movf	??_write+1,w
  4785  0452  1803               	skipnc
  4786  0453  0A77               	incf	??_write+1,w
  4787  0454  0085               	movwf	5
  4788  0455  0800               	movf	0,w	;code access
  4789  0456  23F3               	fcall	_EUSART_Write
  4790                           
  4791                           ;comm.c: 22:     }
  4792  0457  0AF8               	incf	write@i,f
  4793  0458  2C42               	goto	l2205
  4794  0459                     __end_of_write:	
  4795                           
  4796                           	psect	text27
  4797  0459                     __ptext27:	
  4798 ;; *************** function ___lbmod *****************
  4799 ;; Defined at:
  4800 ;;		line 4 in file "/pkg/microchip/xc8/v2.00/pic/sources/c99/common/lbmod.c"
  4801 ;; Parameters:    Size  Location     Type
  4802 ;;  dividend        1    wreg     unsigned char 
  4803 ;;  divisor         1    2[COMMON] unsigned char 
  4804 ;; Auto vars:     Size  Location     Type
  4805 ;;  dividend        1    4[COMMON] unsigned char 
  4806 ;;  rem             1    6[COMMON] unsigned char 
  4807 ;;  counter         1    5[COMMON] unsigned char 
  4808 ;; Return value:  Size  Location     Type
  4809 ;;                  1    wreg      unsigned char 
  4810 ;; Registers used:
  4811 ;;		wreg, status,2, status,0
  4812 ;; Tracked objects:
  4813 ;;		On entry : 1F/0
  4814 ;;		On exit  : 1F/0
  4815 ;;		Unchanged: 1F/0
  4816 ;; Data sizes:     COMMON   BANK0   BANK1
  4817 ;;      Params:         1       0       0
  4818 ;;      Locals:         3       0       0
  4819 ;;      Temps:          1       0       0
  4820 ;;      Totals:         5       0       0
  4821 ;;Total ram usage:        5 bytes
  4822 ;; Hardware stack levels used:    1
  4823 ;; Hardware stack levels required when called:    4
  4824 ;; This function calls:
  4825 ;;		Nothing
  4826 ;; This function is called by:
  4827 ;;		_ESP_write
  4828 ;; This function uses a non-reentrant model
  4829 ;;
  4830                           
  4831                           
  4832                           ;psect for function ___lbmod
  4833  0459                     ___lbmod:	
  4834                           
  4835                           ;incstack = 0
  4836                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  4837                           ;___lbmod@dividend stored from wreg
  4838  0459  00F4               	movwf	___lbmod@dividend
  4839  045A  3008               	movlw	8
  4840  045B  00F5               	movwf	___lbmod@counter
  4841  045C  01F6               	clrf	___lbmod@rem
  4842  045D                     l2281:	
  4843  045D  0874               	movf	___lbmod@dividend,w
  4844  045E  00F3               	movwf	??___lbmod
  4845  045F  3007               	movlw	7
  4846  0460                     u1315:	
  4847  0460  36F3               	lsrf	??___lbmod,f
  4848  0461  0B89               	decfsz	9,f
  4849  0462  2C60               	goto	u1315
  4850  0463  3576               	lslf	___lbmod@rem,w
  4851  0464  0473               	iorwf	??___lbmod,w
  4852  0465  00F6               	movwf	___lbmod@rem
  4853  0466  35F4               	lslf	___lbmod@dividend,f
  4854  0467  0872               	movf	___lbmod@divisor,w
  4855  0468  0276               	subwf	___lbmod@rem,w
  4856  0469  1C03               	skipc
  4857  046A  2C6D               	goto	l2289
  4858  046B  0872               	movf	___lbmod@divisor,w
  4859  046C  02F6               	subwf	___lbmod@rem,f
  4860  046D                     l2289:	
  4861  046D  0BF5               	decfsz	___lbmod@counter,f
  4862  046E  2C5D               	goto	l2281
  4863  046F  0876               	movf	___lbmod@rem,w
  4864  0470  0008               	return
  4865  0471                     __end_of___lbmod:	
  4866                           
  4867                           	psect	text28
  4868  01C1                     __ptext28:	
  4869 ;; *************** function ___awdiv *****************
  4870 ;; Defined at:
  4871 ;;		line 5 in file "/pkg/microchip/xc8/v2.00/pic/sources/c99/common/awdiv.c"
  4872 ;; Parameters:    Size  Location     Type
  4873 ;;  divisor         2    2[COMMON] int 
  4874 ;;  dividend        2    4[COMMON] int 
  4875 ;; Auto vars:     Size  Location     Type
  4876 ;;  quotient        2    8[COMMON] int 
  4877 ;;  sign            1    7[COMMON] unsigned char 
  4878 ;;  counter         1    6[COMMON] unsigned char 
  4879 ;; Return value:  Size  Location     Type
  4880 ;;                  2    2[COMMON] int 
  4881 ;; Registers used:
  4882 ;;		wreg, status,2, status,0
  4883 ;; Tracked objects:
  4884 ;;		On entry : 1F/0
  4885 ;;		On exit  : 1F/0
  4886 ;;		Unchanged: 1F/0
  4887 ;; Data sizes:     COMMON   BANK0   BANK1
  4888 ;;      Params:         4       0       0
  4889 ;;      Locals:         4       0       0
  4890 ;;      Temps:          0       0       0
  4891 ;;      Totals:         8       0       0
  4892 ;;Total ram usage:        8 bytes
  4893 ;; Hardware stack levels used:    1
  4894 ;; Hardware stack levels required when called:    4
  4895 ;; This function calls:
  4896 ;;		Nothing
  4897 ;; This function is called by:
  4898 ;;		_ESP_write
  4899 ;; This function uses a non-reentrant model
  4900 ;;
  4901                           
  4902                           
  4903                           ;psect for function ___awdiv
  4904  01C1                     ___awdiv:	
  4905                           
  4906                           ;incstack = 0
  4907                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4908  01C1  01F7               	clrf	___awdiv@sign
  4909  01C2  1FF3               	btfss	___awdiv@divisor+1,7
  4910  01C3  29CB               	goto	l2241
  4911  01C4  09F2               	comf	___awdiv@divisor,f
  4912  01C5  09F3               	comf	___awdiv@divisor+1,f
  4913  01C6  0AF2               	incf	___awdiv@divisor,f
  4914  01C7  1903               	skipnz
  4915  01C8  0AF3               	incf	___awdiv@divisor+1,f
  4916  01C9  01F7               	clrf	___awdiv@sign
  4917  01CA  0AF7               	incf	___awdiv@sign,f
  4918  01CB                     l2241:	
  4919  01CB  1FF5               	btfss	___awdiv@dividend+1,7
  4920  01CC  29D4               	goto	l2247
  4921  01CD  09F4               	comf	___awdiv@dividend,f
  4922  01CE  09F5               	comf	___awdiv@dividend+1,f
  4923  01CF  0AF4               	incf	___awdiv@dividend,f
  4924  01D0  1903               	skipnz
  4925  01D1  0AF5               	incf	___awdiv@dividend+1,f
  4926  01D2  3001               	movlw	1
  4927  01D3  06F7               	xorwf	___awdiv@sign,f
  4928  01D4                     l2247:	
  4929  01D4  01F8               	clrf	___awdiv@quotient
  4930  01D5  01F9               	clrf	___awdiv@quotient+1
  4931  01D6  0872               	movf	___awdiv@divisor,w
  4932  01D7  0473               	iorwf	___awdiv@divisor+1,w
  4933  01D8  1903               	btfsc	3,2
  4934  01D9  29F4               	goto	l2269
  4935  01DA  01F6               	clrf	___awdiv@counter
  4936  01DB                     L4:	
  4937  01DB  0AF6               	incf	___awdiv@counter,f
  4938  01DC  1BF3               	btfsc	___awdiv@divisor+1,7
  4939  01DD  29E1               	goto	l2257
  4940  01DE  35F2               	lslf	___awdiv@divisor,f
  4941  01DF  0DF3               	rlf	___awdiv@divisor+1,f
  4942  01E0  29DB               	goto	L4
  4943  01E1                     l2257:	
  4944  01E1  35F8               	lslf	___awdiv@quotient,f
  4945  01E2  0DF9               	rlf	___awdiv@quotient+1,f
  4946  01E3  0873               	movf	___awdiv@divisor+1,w
  4947  01E4  0275               	subwf	___awdiv@dividend+1,w
  4948  01E5  1D03               	skipz
  4949  01E6  29E9               	goto	u1285
  4950  01E7  0872               	movf	___awdiv@divisor,w
  4951  01E8  0274               	subwf	___awdiv@dividend,w
  4952  01E9                     u1285:	
  4953  01E9  1C03               	skipc
  4954  01EA  29F0               	goto	l2265
  4955  01EB  0872               	movf	___awdiv@divisor,w
  4956  01EC  02F4               	subwf	___awdiv@dividend,f
  4957  01ED  0873               	movf	___awdiv@divisor+1,w
  4958  01EE  3BF5               	subwfb	___awdiv@dividend+1,f
  4959  01EF  1478               	bsf	___awdiv@quotient,0
  4960  01F0                     l2265:	
  4961  01F0  36F3               	lsrf	___awdiv@divisor+1,f
  4962  01F1  0CF2               	rrf	___awdiv@divisor,f
  4963  01F2  0BF6               	decfsz	___awdiv@counter,f
  4964  01F3  29E1               	goto	l2257
  4965  01F4                     l2269:	
  4966  01F4  0877               	movf	___awdiv@sign,w
  4967  01F5  1903               	btfsc	3,2
  4968  01F6  29FC               	goto	l2273
  4969  01F7  09F8               	comf	___awdiv@quotient,f
  4970  01F8  09F9               	comf	___awdiv@quotient+1,f
  4971  01F9  0AF8               	incf	___awdiv@quotient,f
  4972  01FA  1903               	skipnz
  4973  01FB  0AF9               	incf	___awdiv@quotient+1,f
  4974  01FC                     l2273:	
  4975  01FC  0879               	movf	___awdiv@quotient+1,w
  4976  01FD  00F3               	movwf	?___awdiv+1
  4977  01FE  0878               	movf	___awdiv@quotient,w
  4978  01FF  00F2               	movwf	?___awdiv
  4979  0200  0008               	return
  4980  0201                     __end_of___awdiv:	
  4981                           
  4982                           	psect	text29
  4983  0659                     __ptext29:	
  4984 ;; *************** function _TMR1_StopTimer *****************
  4985 ;; Defined at:
  4986 ;;		line 99 in file "mcc_generated_files/tmr1.c"
  4987 ;; Parameters:    Size  Location     Type
  4988 ;;		None
  4989 ;; Auto vars:     Size  Location     Type
  4990 ;;		None
  4991 ;; Return value:  Size  Location     Type
  4992 ;;                  1    wreg      void 
  4993 ;; Registers used:
  4994 ;;		None
  4995 ;; Tracked objects:
  4996 ;;		On entry : 1F/0
  4997 ;;		On exit  : 1F/0
  4998 ;;		Unchanged: 0/0
  4999 ;; Data sizes:     COMMON   BANK0   BANK1
  5000 ;;      Params:         0       0       0
  5001 ;;      Locals:         0       0       0
  5002 ;;      Temps:          0       0       0
  5003 ;;      Totals:         0       0       0
  5004 ;;Total ram usage:        0 bytes
  5005 ;; Hardware stack levels used:    1
  5006 ;; Hardware stack levels required when called:    4
  5007 ;; This function calls:
  5008 ;;		Nothing
  5009 ;; This function is called by:
  5010 ;;		_logger_initialize
  5011 ;;		_process_message
  5012 ;; This function uses a non-reentrant model
  5013 ;;
  5014                           
  5015                           
  5016                           ;psect for function _TMR1_StopTimer
  5017  0659                     _TMR1_StopTimer:	
  5018                           
  5019                           ;mcc_generated_files/tmr1.c: 102:     T1CONbits.TMR1ON = 0;
  5020                           
  5021                           ;incstack = 0
  5022                           ; Regs used in _TMR1_StopTimer: []
  5023  0659  1018               	bcf	24,0	;volatile
  5024  065A  0008               	return
  5025  065B                     __end_of_TMR1_StopTimer:	
  5026                           
  5027                           	psect	text30
  5028  065B                     __ptext30:	
  5029 ;; *************** function _TMR1_StartTimer *****************
  5030 ;; Defined at:
  5031 ;;		line 93 in file "mcc_generated_files/tmr1.c"
  5032 ;; Parameters:    Size  Location     Type
  5033 ;;		None
  5034 ;; Auto vars:     Size  Location     Type
  5035 ;;		None
  5036 ;; Return value:  Size  Location     Type
  5037 ;;                  1    wreg      void 
  5038 ;; Registers used:
  5039 ;;		None
  5040 ;; Tracked objects:
  5041 ;;		On entry : 1F/0
  5042 ;;		On exit  : 1F/0
  5043 ;;		Unchanged: 0/0
  5044 ;; Data sizes:     COMMON   BANK0   BANK1
  5045 ;;      Params:         0       0       0
  5046 ;;      Locals:         0       0       0
  5047 ;;      Temps:          0       0       0
  5048 ;;      Totals:         0       0       0
  5049 ;;Total ram usage:        0 bytes
  5050 ;; Hardware stack levels used:    1
  5051 ;; Hardware stack levels required when called:    4
  5052 ;; This function calls:
  5053 ;;		Nothing
  5054 ;; This function is called by:
  5055 ;;		_process_message
  5056 ;; This function uses a non-reentrant model
  5057 ;;
  5058                           
  5059                           
  5060                           ;psect for function _TMR1_StartTimer
  5061  065B                     _TMR1_StartTimer:	
  5062                           
  5063                           ;mcc_generated_files/tmr1.c: 96:     T1CONbits.TMR1ON = 1;
  5064                           
  5065                           ;incstack = 0
  5066                           ; Regs used in _TMR1_StartTimer: []
  5067  065B  1418               	bsf	24,0	;volatile
  5068  065C  0008               	return
  5069  065D                     __end_of_TMR1_StartTimer:	
  5070                           
  5071                           	psect	text31
  5072  064C                     __ptext31:	
  5073 ;; *************** function _ADC_StartConversion *****************
  5074 ;; Defined at:
  5075 ;;		line 93 in file "mcc_generated_files/adc.c"
  5076 ;; Parameters:    Size  Location     Type
  5077 ;;		None
  5078 ;; Auto vars:     Size  Location     Type
  5079 ;;		None
  5080 ;; Return value:  Size  Location     Type
  5081 ;;                  1    wreg      void 
  5082 ;; Registers used:
  5083 ;;		None
  5084 ;; Tracked objects:
  5085 ;;		On entry : 1F/0
  5086 ;;		On exit  : 1F/1
  5087 ;;		Unchanged: 0/0
  5088 ;; Data sizes:     COMMON   BANK0   BANK1
  5089 ;;      Params:         0       0       0
  5090 ;;      Locals:         0       0       0
  5091 ;;      Temps:          0       0       0
  5092 ;;      Totals:         0       0       0
  5093 ;;Total ram usage:        0 bytes
  5094 ;; Hardware stack levels used:    1
  5095 ;; Hardware stack levels required when called:    4
  5096 ;; This function calls:
  5097 ;;		Nothing
  5098 ;; This function is called by:
  5099 ;;		_process_message
  5100 ;; This function uses a non-reentrant model
  5101 ;;
  5102                           
  5103                           
  5104                           ;psect for function _ADC_StartConversion
  5105  064C                     _ADC_StartConversion:	
  5106  064C                     l2329:	
  5107                           ;incstack = 0
  5108                           ; Regs used in _ADC_StartConversion: []
  5109                           
  5110                           
  5111                           ;mcc_generated_files/adc.c: 96:     ADCON0bits.GO_nDONE = 1;
  5112  064C  0021               	movlb	1	; select bank1
  5113  064D  149D               	bsf	29,1	;volatile
  5114  064E  0008               	return
  5115  064F                     __end_of_ADC_StartConversion:	
  5116                           
  5117                           	psect	text32
  5118  05DA                     __ptext32:	
  5119 ;; *************** function _ESP_initialize *****************
  5120 ;; Defined at:
  5121 ;;		line 18 in file "esp1.c"
  5122 ;; Parameters:    Size  Location     Type
  5123 ;;		None
  5124 ;; Auto vars:     Size  Location     Type
  5125 ;;		None
  5126 ;; Return value:  Size  Location     Type
  5127 ;;                  1    wreg      void 
  5128 ;; Registers used:
  5129 ;;		wreg, status,2, status,0, pclath, cstack
  5130 ;; Tracked objects:
  5131 ;;		On entry : 1F/1
  5132 ;;		On exit  : 1F/0
  5133 ;;		Unchanged: 0/0
  5134 ;; Data sizes:     COMMON   BANK0   BANK1
  5135 ;;      Params:         0       0       0
  5136 ;;      Locals:         0       0       0
  5137 ;;      Temps:          0       0       0
  5138 ;;      Totals:         0       0       0
  5139 ;;Total ram usage:        0 bytes
  5140 ;; Hardware stack levels used:    1
  5141 ;; Hardware stack levels required when called:    5
  5142 ;; This function calls:
  5143 ;;		_ESP_Set_application_handler
  5144 ;; This function is called by:
  5145 ;;		_main
  5146 ;; This function uses a non-reentrant model
  5147 ;;
  5148                           
  5149                           
  5150                           ;psect for function _ESP_initialize
  5151  05DA                     _ESP_initialize:	
  5152                           
  5153                           ;esp1.c: 20:     esp_channel = 0;
  5154                           
  5155                           ;incstack = 0
  5156                           ; Regs used in _ESP_initialize: [wreg+status,2+status,0+pclath+cstack]
  5157  05DA  0020               	movlb	0	; select bank0
  5158  05DB  01AF               	clrf	_esp_channel	;volatile
  5159                           
  5160                           ;esp1.c: 21:     ESP_wait_exception = ESP_OTHER;
  5161  05DC  01B2               	clrf	_ESP_wait_exception	;volatile
  5162                           
  5163                           ;esp1.c: 24:     ESP_Set_application_handler(ESP_default_application_handler);
  5164  05DD  3061               	movlw	low _ESP_default_application_handler
  5165  05DE  00F2               	movwf	ESP_Set_application_handler@applicationHandler
  5166  05DF  3006               	movlw	high _ESP_default_application_handler
  5167  05E0  00F3               	movwf	ESP_Set_application_handler@applicationHandler+1
  5168  05E1  2E32               	ljmp	l2567
  5169  05E2                     __end_of_ESP_initialize:	
  5170                           
  5171                           	psect	text33
  5172  0632                     __ptext33:	
  5173 ;; *************** function _ESP_Set_application_handler *****************
  5174 ;; Defined at:
  5175 ;;		line 217 in file "esp1.c"
  5176 ;; Parameters:    Size  Location     Type
  5177 ;;  applicationH    2    2[COMMON] PTR FTN(unsigned char ,)
  5178 ;;		 -> ESP_default_application_handler(1), process_message(1), 
  5179 ;; Auto vars:     Size  Location     Type
  5180 ;;		None
  5181 ;; Return value:  Size  Location     Type
  5182 ;;                  1    wreg      void 
  5183 ;; Registers used:
  5184 ;;		wreg
  5185 ;; Tracked objects:
  5186 ;;		On entry : 1F/0
  5187 ;;		On exit  : 1F/0
  5188 ;;		Unchanged: 0/0
  5189 ;; Data sizes:     COMMON   BANK0   BANK1
  5190 ;;      Params:         2       0       0
  5191 ;;      Locals:         0       0       0
  5192 ;;      Temps:          0       0       0
  5193 ;;      Totals:         2       0       0
  5194 ;;Total ram usage:        2 bytes
  5195 ;; Hardware stack levels used:    1
  5196 ;; Hardware stack levels required when called:    4
  5197 ;; This function calls:
  5198 ;;		Nothing
  5199 ;; This function is called by:
  5200 ;;		_ESP_initialize
  5201 ;;		_logger_initialize
  5202 ;; This function uses a non-reentrant model
  5203 ;;
  5204                           
  5205                           
  5206                           ;psect for function _ESP_Set_application_handler
  5207  0632                     _ESP_Set_application_handler:	
  5208  0632                     l2567:	
  5209                           ;incstack = 0
  5210                           ; Regs used in _ESP_Set_application_handler: [wreg]
  5211                           
  5212                           
  5213                           ;esp1.c: 217: void ESP_Set_application_handler(void (* applicationHandler)(unsigned char
      +                          ));esp1.c: 218: {;esp1.c: 219:     ESP_external_message_handler = applicationHandler;
  5214  0632  0873               	movf	ESP_Set_application_handler@applicationHandler+1,w
  5215  0633  00A1               	movwf	_ESP_external_message_handler+1
  5216  0634  0872               	movf	ESP_Set_application_handler@applicationHandler,w
  5217  0635  00A0               	movwf	_ESP_external_message_handler
  5218  0636  0008               	return
  5219  0637                     __end_of_ESP_Set_application_handler:	
  5220                           
  5221                           	psect	text34
  5222  023B                     __ptext34:	
  5223 ;; *************** function _ESP_config *****************
  5224 ;; Defined at:
  5225 ;;		line 82 in file "esp1.c"
  5226 ;; Parameters:    Size  Location     Type
  5227 ;;		None
  5228 ;; Auto vars:     Size  Location     Type
  5229 ;;		None
  5230 ;; Return value:  Size  Location     Type
  5231 ;;                  1    wreg      void 
  5232 ;; Registers used:
  5233 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5234 ;; Tracked objects:
  5235 ;;		On entry : 1F/0
  5236 ;;		On exit  : 1F/0
  5237 ;;		Unchanged: 0/0
  5238 ;; Data sizes:     COMMON   BANK0   BANK1
  5239 ;;      Params:         0       0       0
  5240 ;;      Locals:         0       0       0
  5241 ;;      Temps:          0       2       0
  5242 ;;      Totals:         0       2       0
  5243 ;;Total ram usage:        2 bytes
  5244 ;; Hardware stack levels used:    1
  5245 ;; Hardware stack levels required when called:    9
  5246 ;; This function calls:
  5247 ;;		_ESP_wait_for
  5248 ;;		_EUSART_Read
  5249 ;;		_EUSART_is_rx_ready
  5250 ;;		__puts
  5251 ;; This function is called by:
  5252 ;;		_main
  5253 ;; This function uses a non-reentrant model
  5254 ;;
  5255                           
  5256                           
  5257                           ;psect for function _ESP_config
  5258  023B                     _ESP_config:	
  5259                           
  5260                           ;esp1.c: 87:     _delay((unsigned long)((250)*(32000000/4000.0)));
  5261                           
  5262                           ;incstack = 0
  5263                           ; Regs used in _ESP_config: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5264  023B  300B               	movlw	11
  5265  023C  0020               	movlb	0	; select bank0
  5266  023D  00D8               	movwf	??_ESP_config+1
  5267  023E  3026               	movlw	38
  5268  023F  00D7               	movwf	??_ESP_config
  5269  0240  305D               	movlw	93
  5270  0241                     u2157:	
  5271  0241  0B89               	decfsz	9,f
  5272  0242  2A41               	goto	u2157
  5273  0243  0BD7               	decfsz	??_ESP_config,f
  5274  0244  2A41               	goto	u2157
  5275  0245  0BD8               	decfsz	??_ESP_config+1,f
  5276  0246  2A41               	goto	u2157
  5277  0247  3200               	nop2
  5278  0248                     l3113:	
  5279                           ;esp1.c: 88:     while(EUSART_is_rx_ready())
  5280                           
  5281                           
  5282                           ;esp1.c: 88:     while(EUSART_is_rx_ready())
  5283  0248  264F               	fcall	_EUSART_is_rx_ready
  5284  0249  3A00               	xorlw	0
  5285  024A  1903               	btfsc	3,2
  5286  024B  2A4E               	goto	l3115
  5287                           
  5288                           ;esp1.c: 89:         EUSART_Read();
  5289  024C  2471               	fcall	_EUSART_Read
  5290  024D  2A48               	goto	l3113
  5291  024E                     l3115:	
  5292                           
  5293                           ;esp1.c: 91:     _puts("AT\r\n");
  5294  024E  3028               	movlw	low (STR_8| (0+32768))
  5295  024F  00F3               	movwf	__puts@pt
  5296  0250  3086               	movlw	high (STR_8| (0+32768))
  5297  0251  00F4               	movwf	__puts@pt+1
  5298  0252  240E               	fcall	__puts
  5299                           
  5300                           ;esp1.c: 92:     ESP_wait_for(ESP_OK);
  5301  0253  3002               	movlw	2
  5302  0254  2357               	fcall	_ESP_wait_for
  5303                           
  5304                           ;esp1.c: 95:     _puts("AT+CWMODE=1\r\n");
  5305  0255  3055               	movlw	low (STR_9| (0+32768))
  5306  0256  00F3               	movwf	__puts@pt
  5307  0257  3085               	movlw	high (STR_9| (0+32768))
  5308  0258  00F4               	movwf	__puts@pt+1
  5309  0259  240E               	fcall	__puts
  5310                           
  5311                           ;esp1.c: 96:     ESP_wait_for(ESP_OK);
  5312  025A  3002               	movlw	2
  5313  025B  2357               	fcall	_ESP_wait_for
  5314                           
  5315                           ;esp1.c: 99:     _puts("AT+CWJAP=\"saul2\",\"rickhunter02\"\r\n");
  5316  025C  3013               	movlw	low (STR_10| (0+32768))
  5317  025D  00F3               	movwf	__puts@pt
  5318  025E  3083               	movlw	high (STR_10| (0+32768))
  5319  025F  00F4               	movwf	__puts@pt+1
  5320  0260  240E               	fcall	__puts
  5321                           
  5322                           ;esp1.c: 100:     ESP_wait_for(ESP_OK);
  5323  0261  3002               	movlw	2
  5324  0262  2357               	fcall	_ESP_wait_for
  5325                           
  5326                           ;esp1.c: 103:     _puts("AT+CIPMUX=1\r\n");
  5327  0263  3063               	movlw	low (STR_11| (0+32768))
  5328  0264  00F3               	movwf	__puts@pt
  5329  0265  3085               	movlw	high (STR_11| (0+32768))
  5330  0266  00F4               	movwf	__puts@pt+1
  5331  0267  240E               	fcall	__puts
  5332                           
  5333                           ;esp1.c: 104:     ESP_wait_for(ESP_OK);
  5334  0268  3002               	movlw	2
  5335  0269  2357               	fcall	_ESP_wait_for
  5336                           
  5337                           ;esp1.c: 107:     _puts("AT+CIPSERVER=1,80\r\n");
  5338  026A  300B               	movlw	low (STR_12| (0+32768))
  5339  026B  00F3               	movwf	__puts@pt
  5340  026C  3085               	movlw	high (STR_12| (0+32768))
  5341  026D  00F4               	movwf	__puts@pt+1
  5342  026E  240E               	fcall	__puts
  5343                           
  5344                           ;esp1.c: 108:     ESP_wait_for(ESP_OK);
  5345  026F  3002               	movlw	2
  5346  0270  2B57               	ljmp	_ESP_wait_for
  5347  0271                     __end_of_ESP_config:	
  5348                           
  5349                           	psect	text35
  5350  040E                     __ptext35:	
  5351 ;; *************** function __puts *****************
  5352 ;; Defined at:
  5353 ;;		line 5 in file "comm.c"
  5354 ;; Parameters:    Size  Location     Type
  5355 ;;  pt              2    3[COMMON] PTR unsigned char 
  5356 ;;		 -> STR_17(3), STR_16(3), STR_15(2), STR_14(12), 
  5357 ;;		 -> STR_12(20), STR_11(14), STR_10(34), STR_9(14), 
  5358 ;;		 -> STR_8(5), 
  5359 ;; Auto vars:     Size  Location     Type
  5360 ;;  index           1    8[COMMON] unsigned char 
  5361 ;; Return value:  Size  Location     Type
  5362 ;;                  1    wreg      void 
  5363 ;; Registers used:
  5364 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5365 ;; Tracked objects:
  5366 ;;		On entry : 0/0
  5367 ;;		On exit  : 0/0
  5368 ;;		Unchanged: 0/0
  5369 ;; Data sizes:     COMMON   BANK0   BANK1
  5370 ;;      Params:         2       0       0
  5371 ;;      Locals:         1       0       0
  5372 ;;      Temps:          3       0       0
  5373 ;;      Totals:         6       0       0
  5374 ;;Total ram usage:        6 bytes
  5375 ;; Hardware stack levels used:    1
  5376 ;; Hardware stack levels required when called:    5
  5377 ;; This function calls:
  5378 ;;		_EUSART_Write
  5379 ;;		_EUSART_is_tx_ready
  5380 ;; This function is called by:
  5381 ;;		_ESP_config
  5382 ;;		_ESP_write
  5383 ;; This function uses a non-reentrant model
  5384 ;;
  5385                           
  5386                           
  5387                           ;psect for function __puts
  5388  040E                     __puts:	
  5389  040E                     l2187:	
  5390                           ;incstack = 0
  5391                           ; Regs used in __puts: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5392                           
  5393                           
  5394                           ;comm.c: 5: void _puts(char *pt);comm.c: 6: {;comm.c: 7:     unsigned char index;;comm.c
      +                          : 8:     index = 0;
  5395  040E  01F8               	clrf	__puts@index
  5396  040F                     l2195:	
  5397                           ;comm.c: 9:     while(pt[index]) {
  5398                           
  5399                           
  5400                           ;comm.c: 9:     while(pt[index]) {
  5401  040F  241C               	fcall	PL4	;call to abstracted procedure
  5402  0410  0012               	moviw fsr0++
  5403  0411  1903               	btfsc	3,2
  5404  0412  0008               	return
  5405  0413                     l2189:	
  5406  0413  265D               	fcall	_EUSART_is_tx_ready
  5407  0414  3A00               	xorlw	0
  5408  0415  1903               	skipnz
  5409  0416  2C13               	goto	l2189
  5410                           
  5411                           ;comm.c: 11:         EUSART_Write(pt[index++]);
  5412  0417  241C               	fcall	PL4	;call to abstracted procedure
  5413  0418  0800               	movf	0,w	;code access
  5414  0419  23F3               	fcall	_EUSART_Write
  5415  041A  0AF8               	incf	__puts@index,f
  5416  041B  2C0F               	goto	l2195
  5417  041C                     __end_of__puts:	
  5418  041C                     PL4:	
  5419  041C  0874               	movf	__puts@pt+1,w
  5420  041D  00F6               	movwf	??__puts+1
  5421  041E  0873               	movf	__puts@pt,w
  5422  041F  00F5               	movwf	??__puts
  5423  0420  0878               	movf	__puts@index,w
  5424  0421  0775               	addwf	??__puts,w
  5425  0422  0084               	movwf	4
  5426  0423  0876               	movf	??__puts+1,w
  5427  0424  1803               	skipnc
  5428  0425  0A76               	incf	??__puts+1,w
  5429  0426  0085               	movwf	5
  5430  0427  0008               	return
  5431  0428                     __end_ofPL4:	
  5432                           
  5433                           	psect	text36
  5434  065D                     __ptext36:	
  5435 ;; *************** function _EUSART_is_tx_ready *****************
  5436 ;; Defined at:
  5437 ;;		line 113 in file "mcc_generated_files/eusart.c"
  5438 ;; Parameters:    Size  Location     Type
  5439 ;;		None
  5440 ;; Auto vars:     Size  Location     Type
  5441 ;;		None
  5442 ;; Return value:  Size  Location     Type
  5443 ;;                  1    wreg      unsigned char 
  5444 ;; Registers used:
  5445 ;;		wreg
  5446 ;; Tracked objects:
  5447 ;;		On entry : 0/0
  5448 ;;		On exit  : 0/0
  5449 ;;		Unchanged: 0/0
  5450 ;; Data sizes:     COMMON   BANK0   BANK1
  5451 ;;      Params:         0       0       0
  5452 ;;      Locals:         0       0       0
  5453 ;;      Temps:          0       0       0
  5454 ;;      Totals:         0       0       0
  5455 ;;Total ram usage:        0 bytes
  5456 ;; Hardware stack levels used:    1
  5457 ;; Hardware stack levels required when called:    4
  5458 ;; This function calls:
  5459 ;;		Nothing
  5460 ;; This function is called by:
  5461 ;;		__puts
  5462 ;;		_write
  5463 ;; This function uses a non-reentrant model
  5464 ;;
  5465                           
  5466                           
  5467                           ;psect for function _EUSART_is_tx_ready
  5468  065D                     _EUSART_is_tx_ready:	
  5469                           
  5470                           ;mcc_generated_files/eusart.c: 115:     return eusartTxBufferRemaining;
  5471                           
  5472                           ;incstack = 0
  5473                           ; Regs used in _EUSART_is_tx_ready: [wreg]
  5474  065D  087A               	movf	_eusartTxBufferRemaining,w	;volatile
  5475  065E  0008               	return
  5476  065F                     __end_of_EUSART_is_tx_ready:	
  5477                           
  5478                           	psect	text37
  5479  03F3                     __ptext37:	
  5480 ;; *************** function _EUSART_Write *****************
  5481 ;; Defined at:
  5482 ;;		line 148 in file "mcc_generated_files/eusart.c"
  5483 ;; Parameters:    Size  Location     Type
  5484 ;;  txData          1    wreg     unsigned char 
  5485 ;; Auto vars:     Size  Location     Type
  5486 ;;  txData          1    2[COMMON] unsigned char 
  5487 ;; Return value:  Size  Location     Type
  5488 ;;                  1    wreg      void 
  5489 ;; Registers used:
  5490 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5491 ;; Tracked objects:
  5492 ;;		On entry : 0/0
  5493 ;;		On exit  : 1F/1
  5494 ;;		Unchanged: 0/0
  5495 ;; Data sizes:     COMMON   BANK0   BANK1
  5496 ;;      Params:         0       0       0
  5497 ;;      Locals:         1       0       0
  5498 ;;      Temps:          0       0       0
  5499 ;;      Totals:         1       0       0
  5500 ;;Total ram usage:        1 bytes
  5501 ;; Hardware stack levels used:    1
  5502 ;; Hardware stack levels required when called:    4
  5503 ;; This function calls:
  5504 ;;		Nothing
  5505 ;; This function is called by:
  5506 ;;		__puts
  5507 ;;		_write
  5508 ;; This function uses a non-reentrant model
  5509 ;;
  5510                           
  5511                           
  5512                           ;psect for function _EUSART_Write
  5513  03F3                     _EUSART_Write:	
  5514                           
  5515                           ;incstack = 0
  5516                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  5517                           ;EUSART_Write@txData stored from wreg
  5518  03F3  00F2               	movwf	EUSART_Write@txData
  5519  03F4                     l2143:	
  5520                           ;mcc_generated_files/eusart.c: 148: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 149: {;mcc_generated_files/eusart.c: 150:     while(0 == eusartTxBufferRemai
      +                          ning)
  5521                           
  5522                           
  5523                           ;mcc_generated_files/eusart.c: 150:     while(0 == eusartTxBufferRemaining)
  5524  03F4  087A               	movf	_eusartTxBufferRemaining,w	;volatile
  5525  03F5  1903               	btfsc	3,2
  5526  03F6  2BF4               	goto	l2143
  5527                           
  5528                           ;mcc_generated_files/eusart.c: 154:     if(0 == PIE1bits.TXIE)
  5529  03F7  0021               	movlb	1	; select bank1
  5530  03F8  1A11               	btfsc	17,4	;volatile
  5531  03F9  2BFE               	goto	l159
  5532                           
  5533                           ;mcc_generated_files/eusart.c: 155:     {;mcc_generated_files/eusart.c: 156:         TXR
      +                          EG = txData;
  5534  03FA  0872               	movf	EUSART_Write@txData,w
  5535  03FB  0023               	movlb	3	; select bank3
  5536  03FC  009A               	movwf	26	;volatile
  5537                           
  5538                           ;mcc_generated_files/eusart.c: 157:     }
  5539  03FD  2C0B               	goto	l2157
  5540  03FE                     l159:	
  5541                           ;mcc_generated_files/eusart.c: 158:     else
  5542                           
  5543                           
  5544                           ;mcc_generated_files/eusart.c: 159:     {;mcc_generated_files/eusart.c: 160:         PIE
      +                          1bits.TXIE = 0;
  5545  03FE  1211               	bcf	17,4	;volatile
  5546                           
  5547                           ;mcc_generated_files/eusart.c: 161:         eusartTxBuffer[eusartTxHead++] = txData;
  5548  03FF  087B               	movf	_eusartTxHead,w
  5549  0400  3EAC               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  5550  0401  0086               	movwf	6
  5551  0402  0187               	clrf	7
  5552  0403  0872               	movf	EUSART_Write@txData,w
  5553  0404  0081               	movwf	1
  5554  0405  0AFB               	incf	_eusartTxHead,f	;volatile
  5555                           
  5556                           ;mcc_generated_files/eusart.c: 162:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
  5557  0406  300A               	movlw	10
  5558  0407  027B               	subwf	_eusartTxHead,w
  5559  0408  1803               	btfsc	3,0
  5560                           
  5561                           ;mcc_generated_files/eusart.c: 163:         {;mcc_generated_files/eusart.c: 164:        
      +                               eusartTxHead = 0;
  5562  0409  01FB               	clrf	_eusartTxHead	;volatile
  5563                           
  5564                           ;mcc_generated_files/eusart.c: 166:         eusartTxBufferRemaining--;
  5565  040A  03FA               	decf	_eusartTxBufferRemaining,f	;volatile
  5566  040B                     l2157:	
  5567                           
  5568                           ;mcc_generated_files/eusart.c: 168:     PIE1bits.TXIE = 1;
  5569  040B  0021               	movlb	1	; select bank1
  5570  040C  1611               	bsf	17,4	;volatile
  5571  040D  0008               	return
  5572  040E                     __end_of_EUSART_Write:	
  5573                           
  5574                           	psect	text38
  5575  064F                     __ptext38:	
  5576 ;; *************** function _EUSART_is_rx_ready *****************
  5577 ;; Defined at:
  5578 ;;		line 118 in file "mcc_generated_files/eusart.c"
  5579 ;; Parameters:    Size  Location     Type
  5580 ;;		None
  5581 ;; Auto vars:     Size  Location     Type
  5582 ;;		None
  5583 ;; Return value:  Size  Location     Type
  5584 ;;                  1    wreg      unsigned char 
  5585 ;; Registers used:
  5586 ;;		wreg
  5587 ;; Tracked objects:
  5588 ;;		On entry : 0/0
  5589 ;;		On exit  : 1F/0
  5590 ;;		Unchanged: 0/0
  5591 ;; Data sizes:     COMMON   BANK0   BANK1
  5592 ;;      Params:         0       0       0
  5593 ;;      Locals:         0       0       0
  5594 ;;      Temps:          0       0       0
  5595 ;;      Totals:         0       0       0
  5596 ;;Total ram usage:        0 bytes
  5597 ;; Hardware stack levels used:    1
  5598 ;; Hardware stack levels required when called:    4
  5599 ;; This function calls:
  5600 ;;		Nothing
  5601 ;; This function is called by:
  5602 ;;		_main
  5603 ;;		_ESP_config
  5604 ;; This function uses a non-reentrant model
  5605 ;;
  5606                           
  5607                           
  5608                           ;psect for function _EUSART_is_rx_ready
  5609  064F                     _EUSART_is_rx_ready:	
  5610                           
  5611                           ;mcc_generated_files/eusart.c: 120:     return eusartRxCount;
  5612                           
  5613                           ;incstack = 0
  5614                           ; Regs used in _EUSART_is_rx_ready: [wreg]
  5615  064F  0020               	movlb	0	; select bank0
  5616  0650  0833               	movf	_eusartRxCount,w	;volatile
  5617  0651  0008               	return
  5618  0652                     __end_of_EUSART_is_rx_ready:	
  5619                           
  5620                           	psect	text39
  5621  0357                     __ptext39:	
  5622 ;; *************** function _ESP_wait_for *****************
  5623 ;; Defined at:
  5624 ;;		line 113 in file "esp1.c"
  5625 ;; Parameters:    Size  Location     Type
  5626 ;;  esp_mess        1    wreg     unsigned char 
  5627 ;; Auto vars:     Size  Location     Type
  5628 ;;  esp_mess        1    9[BANK0 ] unsigned char 
  5629 ;;  ret             1   10[BANK0 ] unsigned char 
  5630 ;; Return value:  Size  Location     Type
  5631 ;;                  1    wreg      void 
  5632 ;; Registers used:
  5633 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5634 ;; Tracked objects:
  5635 ;;		On entry : 0/0
  5636 ;;		On exit  : 1F/0
  5637 ;;		Unchanged: 0/0
  5638 ;; Data sizes:     COMMON   BANK0   BANK1
  5639 ;;      Params:         0       0       0
  5640 ;;      Locals:         0       2       0
  5641 ;;      Temps:          0       0       0
  5642 ;;      Totals:         0       2       0
  5643 ;;Total ram usage:        2 bytes
  5644 ;; Hardware stack levels used:    1
  5645 ;; Hardware stack levels required when called:    8
  5646 ;; This function calls:
  5647 ;;		_ESP_read
  5648 ;; This function is called by:
  5649 ;;		_ESP_config
  5650 ;;		_ESP_write
  5651 ;;		_read_analog
  5652 ;;		_process_ioc
  5653 ;; This function uses a non-reentrant model
  5654 ;;
  5655                           
  5656                           
  5657                           ;psect for function _ESP_wait_for
  5658  0357                     _ESP_wait_for:	
  5659                           
  5660                           ;incstack = 0
  5661                           ; Regs used in _ESP_wait_for: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5662                           ;ESP_wait_for@esp_mess stored from wreg
  5663  0357  0020               	movlb	0	; select bank0
  5664  0358  00D5               	movwf	ESP_wait_for@esp_mess
  5665  0359                     l464:	
  5666                           ;esp1.c: 113: void ESP_wait_for(unsigned char esp_mess);esp1.c: 114: {;esp1.c: 115:     
      +                          unsigned char ret;;esp1.c: 118:     do {
  5667                           
  5668                           
  5669                           ;esp1.c: 119:         ret = ESP_read();
  5670  0359  22EE               	fcall	_ESP_read
  5671  035A  00D6               	movwf	ESP_wait_for@ret
  5672                           
  5673                           ;esp1.c: 121:         if (ret != esp_mess) {
  5674  035B  0655               	xorwf	ESP_wait_for@esp_mess,w
  5675  035C  1903               	skipnz
  5676  035D  2B73               	goto	l2991
  5677                           
  5678                           ;esp1.c: 122:             if (ret == ESP_SEND_FAIL) return;
  5679  035E  3007               	movlw	7
  5680  035F  0656               	xorwf	ESP_wait_for@ret,w
  5681  0360  1903               	btfsc	3,2
  5682  0361  0008               	return
  5683                           
  5684                           ;esp1.c: 123:             if (ret == ESP_CLOSED) {
  5685  0362  3008               	movlw	8
  5686  0363  0656               	xorwf	ESP_wait_for@ret,w
  5687  0364  1D03               	btfss	3,2
  5688  0365  2B68               	goto	l2981
  5689                           
  5690                           ;esp1.c: 124:                 esp_channel = 0;
  5691  0366  01AF               	clrf	_esp_channel	;volatile
  5692  0367  0008               	return
  5693  0368                     l2981:	
  5694                           
  5695                           ;esp1.c: 127:             if (ret == ESP_ERROR) return;
  5696  0368  3009               	movlw	9
  5697  0369  0656               	xorwf	ESP_wait_for@ret,w
  5698  036A  1903               	btfsc	3,2
  5699  036B  0008               	return
  5700                           
  5701                           ;esp1.c: 128:             if (ret == ESP_RX) {
  5702  036C  3004               	movlw	4
  5703  036D  0656               	xorwf	ESP_wait_for@ret,w
  5704  036E  1D03               	btfss	3,2
  5705  036F  2B73               	goto	l2991
  5706                           
  5707                           ;esp1.c: 130:                 ESP_wait_exception = ESP_RX;
  5708  0370  3004               	movlw	4
  5709  0371  00B2               	movwf	_ESP_wait_exception	;volatile
  5710  0372  0008               	return
  5711  0373                     l2991:	
  5712                           
  5713                           ;esp1.c: 134:     } while (ret != esp_mess);
  5714  0373  0856               	movf	ESP_wait_for@ret,w
  5715  0374  0655               	xorwf	ESP_wait_for@esp_mess,w
  5716  0375  1903               	btfsc	3,2
  5717  0376  0008               	return
  5718  0377  2B59               	goto	l464
  5719  0378                     __end_of_ESP_wait_for:	
  5720                           
  5721                           	psect	text40
  5722  02EE                     __ptext40:	
  5723 ;; *************** function _ESP_read *****************
  5724 ;; Defined at:
  5725 ;;		line 27 in file "esp1.c"
  5726 ;; Parameters:    Size  Location     Type
  5727 ;;		None
  5728 ;; Auto vars:     Size  Location     Type
  5729 ;;  ret             1    8[BANK0 ] unsigned char 
  5730 ;; Return value:  Size  Location     Type
  5731 ;;                  1    wreg      unsigned char 
  5732 ;; Registers used:
  5733 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5734 ;; Tracked objects:
  5735 ;;		On entry : 0/0
  5736 ;;		On exit  : 1F/0
  5737 ;;		Unchanged: 0/0
  5738 ;; Data sizes:     COMMON   BANK0   BANK1
  5739 ;;      Params:         0       0       0
  5740 ;;      Locals:         0       1       0
  5741 ;;      Temps:          0       1       0
  5742 ;;      Totals:         0       2       0
  5743 ;;Total ram usage:        2 bytes
  5744 ;; Hardware stack levels used:    1
  5745 ;; Hardware stack levels required when called:    7
  5746 ;; This function calls:
  5747 ;;		_ESP_process_message
  5748 ;;		_EUSART_Read
  5749 ;; This function is called by:
  5750 ;;		_ESP_wait_for
  5751 ;;		_ESP_message_handler
  5752 ;; This function uses a non-reentrant model
  5753 ;;
  5754                           
  5755                           
  5756                           ;psect for function _ESP_read
  5757  02EE                     _ESP_read:	
  5758                           
  5759                           ;esp1.c: 29:     unsigned char ret;;esp1.c: 31:     esp_read_data[esp_read_data_index] =
      +                           EUSART_Read();
  5760                           
  5761                           ;incstack = 0
  5762                           ; Regs used in _ESP_read: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5763  02EE  2471               	fcall	_EUSART_Read
  5764  02EF  0020               	movlb	0	; select bank0
  5765  02F0  00D3               	movwf	??_ESP_read
  5766  02F1  0830               	movf	_esp_read_data_index,w
  5767  02F2  3E38               	addlw	(low (_esp_read_data| 0))& (0+255)
  5768  02F3  0086               	movwf	6
  5769  02F4  0187               	clrf	7
  5770  02F5  0853               	movf	??_ESP_read,w
  5771  02F6  0081               	movwf	1
  5772                           
  5773                           ;esp1.c: 34:     if (esp_read_data[esp_read_data_index] == 0x0a) {
  5774  02F7  0830               	movf	_esp_read_data_index,w
  5775  02F8  3E38               	addlw	(low (_esp_read_data| 0))& (0+255)
  5776  02F9  0086               	movwf	6
  5777  02FA  300A               	movlw	10
  5778  02FB  0601               	xorwf	1,w
  5779  02FC  1D03               	btfss	3,2
  5780  02FD  2B0D               	goto	l2957
  5781                           
  5782                           ;esp1.c: 36:         if (esp_read_data_index <= 1) {
  5783  02FE  3002               	movlw	2
  5784  02FF  0230               	subwf	_esp_read_data_index,w	;volatile
  5785  0300  1803               	skipnc
  5786  0301  2B04               	goto	l2947
  5787                           
  5788                           ;esp1.c: 37:             ret = ESP_EOL;
  5789  0302  3003               	movlw	3
  5790  0303  2B0A               	goto	L5
  5791  0304                     l2947:	
  5792                           ;esp1.c: 38:         } else {
  5793                           
  5794                           
  5795                           ;esp1.c: 39:             esp_read_data[(esp_read_data_index-1)] = 0x00;
  5796  0304  0830               	movf	_esp_read_data_index,w
  5797  0305  3E37               	addlw	(low ((_esp_read_data| 0+255)))& (0+255)
  5798  0306  0086               	movwf	6
  5799  0307  0187               	clrf	7
  5800  0308  0181               	clrf	1
  5801                           
  5802                           ;esp1.c: 40:             ret = ESP_process_message();
  5803  0309  2136               	fcall	_ESP_process_message
  5804  030A                     L5:	
  5805  030A  00D4               	movwf	ESP_read@ret
  5806                           
  5807                           ;esp1.c: 43:         esp_read_data_index = 0;
  5808  030B  01B0               	clrf	_esp_read_data_index	;volatile
  5809                           
  5810                           ;esp1.c: 44:         return ret;
  5811  030C  0008               	return
  5812  030D                     l2957:	
  5813                           
  5814                           ;esp1.c: 47:     esp_read_data_index++;
  5815  030D  0AB0               	incf	_esp_read_data_index,f	;volatile
  5816                           
  5817                           ;esp1.c: 48:     if (esp_read_data_index >= 20)
  5818  030E  3014               	movlw	20
  5819  030F  0230               	subwf	_esp_read_data_index,w	;volatile
  5820  0310  1803               	btfsc	3,0
  5821                           
  5822                           ;esp1.c: 49:         esp_read_data_index = 0;
  5823  0311  01B0               	clrf	_esp_read_data_index	;volatile
  5824                           
  5825                           ;esp1.c: 51:     return ESP_OTHER;
  5826  0312  3400               	retlw	0
  5827  0313                     __end_of_ESP_read:	
  5828                           
  5829                           	psect	text41
  5830  0471                     __ptext41:	
  5831 ;; *************** function _EUSART_Read *****************
  5832 ;; Defined at:
  5833 ;;		line 128 in file "mcc_generated_files/eusart.c"
  5834 ;; Parameters:    Size  Location     Type
  5835 ;;		None
  5836 ;; Auto vars:     Size  Location     Type
  5837 ;;  readValue       1    2[COMMON] unsigned char 
  5838 ;; Return value:  Size  Location     Type
  5839 ;;                  1    wreg      unsigned char 
  5840 ;; Registers used:
  5841 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5842 ;; Tracked objects:
  5843 ;;		On entry : 0/0
  5844 ;;		On exit  : 1F/1
  5845 ;;		Unchanged: 0/0
  5846 ;; Data sizes:     COMMON   BANK0   BANK1
  5847 ;;      Params:         0       0       0
  5848 ;;      Locals:         1       0       0
  5849 ;;      Temps:          0       0       0
  5850 ;;      Totals:         1       0       0
  5851 ;;Total ram usage:        1 bytes
  5852 ;; Hardware stack levels used:    1
  5853 ;; Hardware stack levels required when called:    4
  5854 ;; This function calls:
  5855 ;;		Nothing
  5856 ;; This function is called by:
  5857 ;;		_ESP_read
  5858 ;;		_ESP_config
  5859 ;; This function uses a non-reentrant model
  5860 ;;
  5861                           
  5862                           
  5863                           ;psect for function _EUSART_Read
  5864  0471                     _EUSART_Read:	
  5865  0471                     l2057:	
  5866                           ;mcc_generated_files/eusart.c: 132:     while(0 == eusartRxCount)
  5867                           
  5868                           ;incstack = 0
  5869                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  5870                           
  5871                           
  5872                           ;mcc_generated_files/eusart.c: 132:     while(0 == eusartRxCount)
  5873  0471  0020               	movlb	0	; select bank0
  5874  0472  0833               	movf	_eusartRxCount,w	;volatile
  5875  0473  1903               	btfsc	3,2
  5876  0474  2C71               	goto	l2057
  5877                           
  5878                           ;mcc_generated_files/eusart.c: 136:     readValue = eusartRxBuffer[eusartRxTail++];
  5879  0475  0834               	movf	_eusartRxTail,w
  5880  0476  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  5881  0477  0086               	movwf	6
  5882  0478  0187               	clrf	7
  5883  0479  0801               	movf	1,w
  5884  047A  00F2               	movwf	EUSART_Read@readValue
  5885  047B  0AB4               	incf	_eusartRxTail,f	;volatile
  5886                           
  5887                           ;mcc_generated_files/eusart.c: 137:     if(sizeof(eusartRxBuffer) <= eusartRxTail)
  5888  047C  300C               	movlw	12
  5889  047D  0234               	subwf	_eusartRxTail,w
  5890  047E  1803               	btfsc	3,0
  5891                           
  5892                           ;mcc_generated_files/eusart.c: 138:     {;mcc_generated_files/eusart.c: 139:         eus
      +                          artRxTail = 0;
  5893  047F  01B4               	clrf	_eusartRxTail	;volatile
  5894                           
  5895                           ;mcc_generated_files/eusart.c: 141:     PIE1bits.RCIE = 0;
  5896  0480  0021               	movlb	1	; select bank1
  5897  0481  1291               	bcf	17,5	;volatile
  5898                           
  5899                           ;mcc_generated_files/eusart.c: 142:     eusartRxCount--;
  5900  0482  0020               	movlb	0	; select bank0
  5901  0483  03B3               	decf	_eusartRxCount,f	;volatile
  5902                           
  5903                           ;mcc_generated_files/eusart.c: 143:     PIE1bits.RCIE = 1;
  5904  0484  0021               	movlb	1	; select bank1
  5905  0485  1691               	bsf	17,5	;volatile
  5906                           
  5907                           ;mcc_generated_files/eusart.c: 145:     return readValue;
  5908  0486  0872               	movf	EUSART_Read@readValue,w
  5909  0487  0008               	return
  5910  0488                     __end_of_EUSART_Read:	
  5911                           
  5912                           	psect	text42
  5913  0136                     __ptext42:	
  5914 ;; *************** function _ESP_process_message *****************
  5915 ;; Defined at:
  5916 ;;		line 55 in file "esp1.c"
  5917 ;; Parameters:    Size  Location     Type
  5918 ;;		None
  5919 ;; Auto vars:     Size  Location     Type
  5920 ;;  aux             1    6[BANK0 ] PTR unsigned char 
  5921 ;;		 -> NULL(0), esp_read_data(20), 
  5922 ;; Return value:  Size  Location     Type
  5923 ;;                  1    wreg      unsigned char 
  5924 ;; Registers used:
  5925 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5926 ;; Tracked objects:
  5927 ;;		On entry : 1F/0
  5928 ;;		On exit  : 1F/0
  5929 ;;		Unchanged: 0/0
  5930 ;; Data sizes:     COMMON   BANK0   BANK1
  5931 ;;      Params:         0       0       0
  5932 ;;      Locals:         0       1       0
  5933 ;;      Temps:          0       0       0
  5934 ;;      Totals:         0       1       0
  5935 ;;Total ram usage:        1 bytes
  5936 ;; Hardware stack levels used:    1
  5937 ;; Hardware stack levels required when called:    6
  5938 ;; This function calls:
  5939 ;;		_strstr
  5940 ;; This function is called by:
  5941 ;;		_ESP_read
  5942 ;; This function uses a non-reentrant model
  5943 ;;
  5944                           
  5945                           
  5946                           ;psect for function _ESP_process_message
  5947  0136                     _ESP_process_message:	
  5948                           
  5949                           ;esp1.c: 56:     unsigned char *aux;;esp1.c: 58:     aux = strstr(esp_read_data,"SEND OK
      +                          ");
  5950                           
  5951                           ;incstack = 0
  5952                           ; Regs used in _ESP_process_message: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5953  0136  30CA               	movlw	low (STR_1| (0+32768))
  5954  0137  00D0               	movwf	strstr@n
  5955  0138  3085               	movlw	high (STR_1| (0+32768))
  5956  0139  00D1               	movwf	strstr@n+1
  5957  013A  3038               	movlw	(low (_esp_read_data| 0))& (0+255)
  5958  013B  2271               	fcall	_strstr
  5959  013C  00D2               	movwf	ESP_process_message@aux
  5960                           
  5961                           ;esp1.c: 59:     if (aux) return ESP_SEND_OK;
  5962  013D  0852               	movf	ESP_process_message@aux,w
  5963  013E  1D03               	btfss	3,2
  5964  013F  3401               	retlw	1
  5965                           
  5966                           ;esp1.c: 61:     aux = strstr(esp_read_data,"OK");
  5967  0140  30CF               	movlw	low ((STR_1+5)| (0+32768))
  5968  0141  00D0               	movwf	strstr@n
  5969  0142  3085               	movlw	high ((STR_1+5)| (0+32768))
  5970  0143  00D1               	movwf	strstr@n+1
  5971  0144  3038               	movlw	(low (_esp_read_data| 0))& (0+255)
  5972  0145  2271               	fcall	_strstr
  5973  0146  00D2               	movwf	ESP_process_message@aux
  5974                           
  5975                           ;esp1.c: 62:     if (aux) return ESP_OK;
  5976  0147  0852               	movf	ESP_process_message@aux,w
  5977  0148  1D03               	btfss	3,2
  5978  0149  3402               	retlw	2
  5979                           
  5980                           ;esp1.c: 64:     aux = strstr(esp_read_data,"SEND FAIL");
  5981  014A  30A4               	movlw	low (STR_3| (0+32768))
  5982  014B  00D0               	movwf	strstr@n
  5983  014C  3085               	movlw	high (STR_3| (0+32768))
  5984  014D  00D1               	movwf	strstr@n+1
  5985  014E  3038               	movlw	(low (_esp_read_data| 0))& (0+255)
  5986  014F  2271               	fcall	_strstr
  5987  0150  00D2               	movwf	ESP_process_message@aux
  5988                           
  5989                           ;esp1.c: 65:     if (aux) return ESP_SEND_FAIL;
  5990  0151  0852               	movf	ESP_process_message@aux,w
  5991  0152  1D03               	btfss	3,2
  5992  0153  3407               	retlw	7
  5993                           
  5994                           ;esp1.c: 67:     aux = strstr(esp_read_data,"ERROR");
  5995  0154  30FE               	movlw	low (STR_4| (0+32768))
  5996  0155  00D0               	movwf	strstr@n
  5997  0156  3085               	movlw	high (STR_4| (0+32768))
  5998  0157  00D1               	movwf	strstr@n+1
  5999  0158  3038               	movlw	(low (_esp_read_data| 0))& (0+255)
  6000  0159  2271               	fcall	_strstr
  6001  015A  00D2               	movwf	ESP_process_message@aux
  6002                           
  6003                           ;esp1.c: 68:     if (aux) return ESP_ERROR;
  6004  015B  0852               	movf	ESP_process_message@aux,w
  6005  015C  1D03               	btfss	3,2
  6006  015D  3409               	retlw	9
  6007                           
  6008                           ;esp1.c: 70:     aux = strstr(esp_read_data,"+IPD");
  6009  015E  302D               	movlw	low (STR_5| (0+32768))
  6010  015F  00D0               	movwf	strstr@n
  6011  0160  3086               	movlw	high (STR_5| (0+32768))
  6012  0161  00D1               	movwf	strstr@n+1
  6013  0162  3038               	movlw	(low (_esp_read_data| 0))& (0+255)
  6014  0163  2271               	fcall	_strstr
  6015  0164  00D2               	movwf	ESP_process_message@aux
  6016                           
  6017                           ;esp1.c: 71:     if (aux) return ESP_RX;
  6018  0165  0852               	movf	ESP_process_message@aux,w
  6019  0166  1D03               	btfss	3,2
  6020  0167  3404               	retlw	4
  6021                           
  6022                           ;esp1.c: 73:     aux = strstr(esp_read_data,"CONNECT");
  6023  0168  30D2               	movlw	low (STR_6| (0+32768))
  6024  0169  00D0               	movwf	strstr@n
  6025  016A  3085               	movlw	high (STR_6| (0+32768))
  6026  016B  00D1               	movwf	strstr@n+1
  6027  016C  3038               	movlw	(low (_esp_read_data| 0))& (0+255)
  6028  016D  2271               	fcall	_strstr
  6029  016E  00D2               	movwf	ESP_process_message@aux
  6030                           
  6031                           ;esp1.c: 74:     if (aux) return ESP_CONNECT;
  6032  016F  0852               	movf	ESP_process_message@aux,w
  6033  0170  1D03               	btfss	3,2
  6034  0171  3406               	retlw	6
  6035                           
  6036                           ;esp1.c: 76:     aux = strstr(esp_read_data,"CLOSED");
  6037  0172  30F0               	movlw	low (STR_7| (0+32768))
  6038  0173  00D0               	movwf	strstr@n
  6039  0174  3085               	movlw	high (STR_7| (0+32768))
  6040  0175  00D1               	movwf	strstr@n+1
  6041  0176  3038               	movlw	(low (_esp_read_data| 0))& (0+255)
  6042  0177  2271               	fcall	_strstr
  6043  0178  00D2               	movwf	ESP_process_message@aux
  6044                           
  6045                           ;esp1.c: 77:     if (aux) return ESP_CLOSED;
  6046  0179  0852               	movf	ESP_process_message@aux,w
  6047  017A  1D03               	btfss	3,2
  6048  017B  3408               	retlw	8
  6049                           
  6050                           ;esp1.c: 79:     return ESP_OTHER;
  6051  017C  3400               	retlw	0
  6052  017D                     __end_of_ESP_process_message:	
  6053                           
  6054                           	psect	text43
  6055  0271                     __ptext43:	
  6056 ;; *************** function _strstr *****************
  6057 ;; Defined at:
  6058 ;;		line 143 in file "/pkg/microchip/xc8/v2.00/pic/sources/c99/common/strstr.c"
  6059 ;; Parameters:    Size  Location     Type
  6060 ;;  h               1    wreg     PTR const unsigned char 
  6061 ;;		 -> NULL(0), esp_read_data(20), 
  6062 ;;  n               2    4[BANK0 ] PTR const unsigned char 
  6063 ;;		 -> STR_13(2), STR_7(7), STR_6(8), STR_5(5), 
  6064 ;;		 -> STR_4(6), STR_3(10), STR_2(3), STR_1(8), 
  6065 ;; Auto vars:     Size  Location     Type
  6066 ;;  h               1    9[COMMON] PTR const unsigned char 
  6067 ;;		 -> NULL(0), esp_read_data(20), 
  6068 ;;  nl              2    7[COMMON] unsigned int 
  6069 ;; Return value:  Size  Location     Type
  6070 ;;                  1    wreg      PTR unsigned char 
  6071 ;; Registers used:
  6072 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6073 ;; Tracked objects:
  6074 ;;		On entry : 1F/0
  6075 ;;		On exit  : 1F/0
  6076 ;;		Unchanged: 0/0
  6077 ;; Data sizes:     COMMON   BANK0   BANK1
  6078 ;;      Params:         0       2       0
  6079 ;;      Locals:         3       0       0
  6080 ;;      Temps:          0       0       0
  6081 ;;      Totals:         3       2       0
  6082 ;;Total ram usage:        5 bytes
  6083 ;; Hardware stack levels used:    1
  6084 ;; Hardware stack levels required when called:    5
  6085 ;; This function calls:
  6086 ;;		_strchr
  6087 ;;		_strlen
  6088 ;;		_strncmp
  6089 ;; This function is called by:
  6090 ;;		_ESP_process_message
  6091 ;;		_ESP_process_rx_data
  6092 ;; This function uses a non-reentrant model
  6093 ;;
  6094                           
  6095                           
  6096                           ;psect for function _strstr
  6097  0271                     _strstr:	
  6098                           
  6099                           ;incstack = 0
  6100                           ; Regs used in _strstr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6101                           ;strstr@h stored from wreg
  6102  0271  00F9               	movwf	strstr@h
  6103  0272  0850               	movf	strstr@n,w
  6104  0273  0451               	iorwf	strstr@n+1,w
  6105  0274  1903               	btfsc	3,2
  6106  0275  3400               	retlw	0
  6107  0276  0851               	movf	strstr@n+1,w
  6108  0277  00F3               	movwf	strlen@s+1
  6109  0278  0850               	movf	strstr@n,w
  6110  0279  00F2               	movwf	strlen@s
  6111  027A  24CA               	fcall	_strlen
  6112  027B  0873               	movf	?_strlen+1,w
  6113  027C  00F8               	movwf	strstr@nl+1
  6114  027D  0872               	movf	?_strlen,w
  6115  027E  00F7               	movwf	strstr@nl
  6116  027F                     l2871:	
  6117  027F  0879               	movf	strstr@h,w
  6118  0280  1903               	btfsc	3,2
  6119  0281  3400               	retlw	0
  6120  0282  0879               	movf	strstr@h,w
  6121  0283  0086               	movwf	6
  6122  0284  0187               	clrf	7
  6123  0285  0801               	movf	1,w
  6124  0286  1903               	btfsc	3,2
  6125  0287  3400               	retlw	0
  6126  0288  0851               	movf	strstr@n+1,w
  6127  0289  00F3               	movwf	strncmp@_r+1
  6128  028A  0850               	movf	strstr@n,w
  6129  028B  00F2               	movwf	strncmp@_r
  6130  028C  0878               	movf	strstr@nl+1,w
  6131  028D  00F5               	movwf	strncmp@n+1
  6132  028E  0877               	movf	strstr@nl,w
  6133  028F  00F4               	movwf	strncmp@n
  6134  0290  0879               	movf	strstr@h,w
  6135  0291  217D               	fcall	_strncmp
  6136  0292  0872               	movf	?_strncmp,w
  6137  0293  0473               	iorwf	?_strncmp+1,w
  6138  0294  1D03               	btfss	3,2
  6139  0295  2A98               	goto	l2869
  6140  0296  0879               	movf	strstr@h,w
  6141  0297  0008               	return
  6142  0298                     l2869:	
  6143  0298  0850               	movf	strstr@n,w
  6144  0299  0084               	movwf	4
  6145  029A  0851               	movf	strstr@n+1,w
  6146  029B  0085               	movwf	5
  6147  029C  0800               	movf	0,w	;code access
  6148  029D  00F2               	movwf	strchr@c
  6149  029E  01F3               	clrf	strchr@c+1
  6150  029F  0879               	movf	strstr@h,w
  6151  02A0  3E01               	addlw	1
  6152  02A1  2533               	fcall	_strchr
  6153  02A2  00F9               	movwf	strstr@h
  6154  02A3  2A7F               	goto	l2871
  6155  02A4                     __end_of_strstr:	
  6156                           
  6157                           	psect	text44
  6158  017D                     __ptext44:	
  6159 ;; *************** function _strncmp *****************
  6160 ;; Defined at:
  6161 ;;		line 3 in file "/pkg/microchip/xc8/v2.00/pic/sources/c99/common/strncmp.c"
  6162 ;; Parameters:    Size  Location     Type
  6163 ;;  _l              1    wreg     PTR const unsigned char 
  6164 ;;		 -> NULL(0), esp_read_data(20), 
  6165 ;;  _r              2    2[COMMON] PTR const unsigned char 
  6166 ;;		 -> STR_13(2), STR_7(7), STR_6(8), STR_5(5), 
  6167 ;;		 -> STR_4(6), STR_3(10), STR_2(3), STR_1(8), 
  6168 ;;  n               2    4[COMMON] unsigned int 
  6169 ;; Auto vars:     Size  Location     Type
  6170 ;;  _l              1    0[BANK0 ] PTR const unsigned char 
  6171 ;;		 -> NULL(0), esp_read_data(20), 
  6172 ;;  r               2    1[BANK0 ] PTR const unsigned char 
  6173 ;;		 -> STR_13(2), STR_7(7), STR_6(8), STR_5(5), 
  6174 ;;		 -> STR_4(6), STR_3(10), STR_2(3), STR_1(8), 
  6175 ;;  l               1    3[BANK0 ] PTR const unsigned char 
  6176 ;;		 -> NULL(0), esp_read_data(20), 
  6177 ;; Return value:  Size  Location     Type
  6178 ;;                  2    2[COMMON] int 
  6179 ;; Registers used:
  6180 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  6181 ;; Tracked objects:
  6182 ;;		On entry : 1F/0
  6183 ;;		On exit  : 1F/0
  6184 ;;		Unchanged: 0/0
  6185 ;; Data sizes:     COMMON   BANK0   BANK1
  6186 ;;      Params:         4       0       0
  6187 ;;      Locals:         0       4       0
  6188 ;;      Temps:          1       0       0
  6189 ;;      Totals:         5       4       0
  6190 ;;Total ram usage:        9 bytes
  6191 ;; Hardware stack levels used:    1
  6192 ;; Hardware stack levels required when called:    4
  6193 ;; This function calls:
  6194 ;;		Nothing
  6195 ;; This function is called by:
  6196 ;;		_strstr
  6197 ;; This function uses a non-reentrant model
  6198 ;;
  6199                           
  6200                           
  6201                           ;psect for function _strncmp
  6202  017D                     _strncmp:	
  6203                           
  6204                           ;incstack = 0
  6205                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
  6206                           ;strncmp@_l stored from wreg
  6207  017D  00CC               	movwf	strncmp@_l
  6208  017E  00CF               	movwf	strncmp@l
  6209  017F  0873               	movf	strncmp@_r+1,w
  6210  0180  00CE               	movwf	strncmp@r+1
  6211  0181  0872               	movf	strncmp@_r,w
  6212  0182  00CD               	movwf	strncmp@r
  6213  0183  21BC               	fcall	PL18	;call to abstracted procedure
  6214  0184  0F74               	incfsz	strncmp@n,w
  6215  0185  29A4               	goto	l2833
  6216  0186  0A75               	incf	strncmp@n+1,w
  6217  0187  1D03               	btfss	3,2
  6218  0188  29A4               	goto	l2833
  6219  0189  01F2               	clrf	?_strncmp
  6220  018A  01F3               	clrf	?_strncmp+1
  6221  018B  0008               	return
  6222  018C                     l2835:	
  6223  018C  084D               	movf	strncmp@r,w
  6224  018D  0084               	movwf	4
  6225  018E  084E               	movf	strncmp@r+1,w
  6226  018F  0085               	movwf	5
  6227  0190  0012               	moviw fsr0++
  6228  0191  1903               	btfsc	3,2
  6229  0192  29AA               	goto	l2841
  6230  0193  0874               	movf	strncmp@n,w
  6231  0194  0475               	iorwf	strncmp@n+1,w
  6232  0195  1903               	btfsc	3,2
  6233  0196  29AA               	goto	l2841
  6234  0197  21B5               	fcall	PL12	;call to abstracted procedure
  6235  0198  084F               	movf	strncmp@l,w
  6236  0199  0086               	movwf	6
  6237  019A  0187               	clrf	7
  6238  019B  0801               	movf	1,w
  6239  019C  0676               	xorwf	??_strncmp,w
  6240  019D  1D03               	btfss	3,2
  6241  019E  29AA               	goto	l2841
  6242  019F  0ACF               	incf	strncmp@l,f
  6243  01A0  0ACD               	incf	strncmp@r,f
  6244  01A1  1903               	skipnz
  6245  01A2  0ACE               	incf	strncmp@r+1,f
  6246  01A3  21BC               	fcall	PL18	;call to abstracted procedure
  6247  01A4                     l2833:	
  6248  01A4  084F               	movf	strncmp@l,w
  6249  01A5  0086               	movwf	6
  6250  01A6  0187               	clrf	7
  6251  01A7  0801               	movf	1,w
  6252  01A8  1D03               	btfss	3,2
  6253  01A9  298C               	goto	l2835
  6254  01AA                     l2841:	
  6255  01AA  084F               	movf	strncmp@l,w
  6256  01AB  0086               	movwf	6
  6257  01AC  0187               	clrf	7
  6258  01AD  0801               	movf	1,w
  6259  01AE  00F2               	movwf	?_strncmp
  6260  01AF  01F3               	clrf	?_strncmp+1
  6261  01B0  21B5               	fcall	PL12	;call to abstracted procedure
  6262  01B1  02F2               	subwf	?_strncmp,f
  6263  01B2  1C03               	skipc
  6264  01B3  03F3               	decf	?_strncmp+1,f
  6265  01B4  0008               	return
  6266  01B5                     __end_of_strncmp:	
  6267  01B5                     PL12:	
  6268  01B5  084D               	movf	strncmp@r,w
  6269  01B6  0084               	movwf	4
  6270  01B7  084E               	movf	strncmp@r+1,w
  6271  01B8  0085               	movwf	5
  6272  01B9  0800               	movf	0,w	;code access
  6273  01BA  00F6               	movwf	??_strncmp
  6274  01BB  0008               	return
  6275  01BC                     __end_ofPL12:	
  6276  01BC                     PL18:	
  6277  01BC  3001               	movlw	1
  6278  01BD  02F4               	subwf	strncmp@n,f
  6279  01BE  3000               	movlw	0
  6280  01BF  3BF5               	subwfb	strncmp@n+1,f
  6281  01C0  0008               	return
  6282  01C1                     __end_ofPL18:	
  6283                           
  6284                           	psect	text45
  6285  04CA                     __ptext45:	
  6286 ;; *************** function _strlen *****************
  6287 ;; Defined at:
  6288 ;;		line 12 in file "/pkg/microchip/xc8/v2.00/pic/sources/c99/common/strlen.c"
  6289 ;; Parameters:    Size  Location     Type
  6290 ;;  s               2    2[COMMON] PTR const unsigned char 
  6291 ;;		 -> STR_13(2), STR_7(7), STR_6(8), STR_5(5), 
  6292 ;;		 -> STR_4(6), STR_3(10), STR_2(3), STR_1(8), 
  6293 ;; Auto vars:     Size  Location     Type
  6294 ;;  a               2    5[COMMON] PTR const unsigned char 
  6295 ;;		 -> STR_13(2), STR_7(7), STR_6(8), STR_5(5), 
  6296 ;;		 -> STR_4(6), STR_3(10), STR_2(3), STR_1(8), 
  6297 ;; Return value:  Size  Location     Type
  6298 ;;                  2    2[COMMON] unsigned int 
  6299 ;; Registers used:
  6300 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6301 ;; Tracked objects:
  6302 ;;		On entry : 1F/0
  6303 ;;		On exit  : 1F/0
  6304 ;;		Unchanged: 1F/0
  6305 ;; Data sizes:     COMMON   BANK0   BANK1
  6306 ;;      Params:         2       0       0
  6307 ;;      Locals:         2       0       0
  6308 ;;      Temps:          1       0       0
  6309 ;;      Totals:         5       0       0
  6310 ;;Total ram usage:        5 bytes
  6311 ;; Hardware stack levels used:    1
  6312 ;; Hardware stack levels required when called:    4
  6313 ;; This function calls:
  6314 ;;		Nothing
  6315 ;; This function is called by:
  6316 ;;		_strstr
  6317 ;; This function uses a non-reentrant model
  6318 ;;
  6319                           
  6320                           
  6321                           ;psect for function _strlen
  6322  04CA                     _strlen:	
  6323                           
  6324                           ;incstack = 0
  6325                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
  6326  04CA  0873               	movf	strlen@s+1,w
  6327  04CB  00F6               	movwf	strlen@a+1
  6328  04CC  0872               	movf	strlen@s,w
  6329  04CD  00F5               	movwf	strlen@a
  6330  04CE                     l2815:	
  6331  04CE  0872               	movf	strlen@s,w
  6332  04CF  0084               	movwf	4
  6333  04D0  0873               	movf	strlen@s+1,w
  6334  04D1  0085               	movwf	5
  6335  04D2  0012               	moviw fsr0++
  6336  04D3  1903               	btfsc	3,2
  6337  04D4  2CD9               	goto	l2817
  6338  04D5  0AF2               	incf	strlen@s,f
  6339  04D6  1903               	skipnz
  6340  04D7  0AF3               	incf	strlen@s+1,f
  6341  04D8  2CCE               	goto	l2815
  6342  04D9                     l2817:	
  6343  04D9  0875               	movf	strlen@a,w
  6344  04DA  0272               	subwf	strlen@s,w
  6345  04DB  00F2               	movwf	?_strlen
  6346  04DC  0876               	movf	strlen@a+1,w
  6347  04DD  3B73               	subwfb	strlen@s+1,w
  6348  04DE  00F3               	movwf	?_strlen+1
  6349  04DF  0008               	return
  6350  04E0                     __end_of_strlen:	
  6351                           
  6352                           	psect	text46
  6353  0533                     __ptext46:	
  6354 ;; *************** function _strchr *****************
  6355 ;; Defined at:
  6356 ;;		line 7 in file "/pkg/microchip/xc8/v2.00/pic/sources/c99/common/strchr.c"
  6357 ;; Parameters:    Size  Location     Type
  6358 ;;  s               1    wreg     PTR const unsigned char 
  6359 ;;		 -> NULL(0), esp_read_data(20), 
  6360 ;;  c               2    2[COMMON] int 
  6361 ;; Auto vars:     Size  Location     Type
  6362 ;;  s               1    4[COMMON] PTR const unsigned char 
  6363 ;;		 -> NULL(0), esp_read_data(20), 
  6364 ;; Return value:  Size  Location     Type
  6365 ;;                  1    wreg      PTR unsigned char 
  6366 ;; Registers used:
  6367 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6368 ;; Tracked objects:
  6369 ;;		On entry : 1F/0
  6370 ;;		On exit  : 1F/0
  6371 ;;		Unchanged: 1F/0
  6372 ;; Data sizes:     COMMON   BANK0   BANK1
  6373 ;;      Params:         2       0       0
  6374 ;;      Locals:         1       0       0
  6375 ;;      Temps:          0       0       0
  6376 ;;      Totals:         3       0       0
  6377 ;;Total ram usage:        3 bytes
  6378 ;; Hardware stack levels used:    1
  6379 ;; Hardware stack levels required when called:    4
  6380 ;; This function calls:
  6381 ;;		Nothing
  6382 ;; This function is called by:
  6383 ;;		_strstr
  6384 ;; This function uses a non-reentrant model
  6385 ;;
  6386                           
  6387                           
  6388                           ;psect for function _strchr
  6389  0533                     _strchr:	
  6390                           
  6391                           ;incstack = 0
  6392                           ; Regs used in _strchr: [wreg+fsr1l+fsr1h+status,2+status,0]
  6393                           ;strchr@s stored from wreg
  6394  0533  00F4               	movwf	strchr@s
  6395  0534                     l1133:	
  6396  0534  0874               	movf	strchr@s,w
  6397  0535  0086               	movwf	6
  6398  0536  0187               	clrf	7
  6399  0537  0801               	movf	1,w
  6400  0538  0672               	xorwf	strchr@c,w
  6401  0539  1D03               	skipz
  6402  053A  2D3D               	goto	l2853
  6403  053B  0874               	movf	strchr@s,w
  6404  053C  0008               	return
  6405  053D                     l2853:	
  6406  053D  0874               	movf	strchr@s,w
  6407  053E  0086               	movwf	6
  6408  053F  0187               	clrf	7
  6409  0540  0AF4               	incf	strchr@s,f
  6410  0541  0801               	movf	1,w
  6411  0542  1903               	btfsc	3,2
  6412  0543  3400               	retlw	0
  6413  0544  2D34               	goto	l1133
  6414  0545                     __end_of_strchr:	
  6415                           
  6416                           	psect	intentry
  6417  0004                     __pintentry:	
  6418 ;; *************** function _INTERRUPT_InterruptManager *****************
  6419 ;; Defined at:
  6420 ;;		line 55 in file "mcc_generated_files/interrupt_manager.c"
  6421 ;; Parameters:    Size  Location     Type
  6422 ;;		None
  6423 ;; Auto vars:     Size  Location     Type
  6424 ;;		None
  6425 ;; Return value:  Size  Location     Type
  6426 ;;                  1    wreg      void 
  6427 ;; Registers used:
  6428 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6429 ;; Tracked objects:
  6430 ;;		On entry : 0/0
  6431 ;;		On exit  : 0/0
  6432 ;;		Unchanged: 0/0
  6433 ;; Data sizes:     COMMON   BANK0   BANK1
  6434 ;;      Params:         0       0       0
  6435 ;;      Locals:         0       0       0
  6436 ;;      Temps:          0       0       0
  6437 ;;      Totals:         0       0       0
  6438 ;;Total ram usage:        0 bytes
  6439 ;; Hardware stack levels used:    1
  6440 ;; Hardware stack levels required when called:    3
  6441 ;; This function calls:
  6442 ;;		Absolute function
  6443 ;;		_ADC_GetConversionResult
  6444 ;;		_ADC_ISR
  6445 ;;		_EUSART_Receive_ISR
  6446 ;;		_EUSART_Transmit_ISR
  6447 ;;		_PIN_MANAGER_IOC
  6448 ;;		_TMR1_ISR
  6449 ;; This function is called by:
  6450 ;;		Interrupt level 1
  6451 ;; This function uses a non-reentrant model
  6452 ;;
  6453                           
  6454  0004                     _INTERRUPT_InterruptManager:	
  6455                           
  6456                           ;incstack = 0
  6457  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  6458                           
  6459                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6460  0005  3180               	pagesel	$
  6461                           
  6462                           ;mcc_generated_files/interrupt_manager.c: 58:     if(INTCONbits.IOCIE == 1 && INTCONbits
      +                          .IOCIF == 1)
  6463  0006  198B               	btfsc	11,3	;volatile
  6464  0007  1C0B               	btfss	11,0	;volatile
  6465  0008  280B               	goto	i1l74
  6466                           
  6467                           ;mcc_generated_files/interrupt_manager.c: 59:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 60:         PIN_MANAGER_IOC();
  6468  0009  263F               	fcall	_PIN_MANAGER_IOC
  6469                           
  6470                           ;mcc_generated_files/interrupt_manager.c: 61:     }
  6471  000A  283C               	goto	i1l86
  6472  000B                     i1l74:	
  6473                           ;mcc_generated_files/interrupt_manager.c: 62:     else if(INTCONbits.PEIE == 1)
  6474                           
  6475  000B  1F0B               	btfss	11,6	;volatile
  6476  000C  283C               	goto	i1l86
  6477                           
  6478                           ;mcc_generated_files/interrupt_manager.c: 63:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 64:         if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  6479  000D  0021               	movlb	1	; select bank1
  6480  000E  1C11               	btfss	17,0	;volatile
  6481  000F  2815               	goto	i1l77
  6482  0010  0020               	movlb	0	; select bank0
  6483  0011  1C11               	btfss	17,0	;volatile
  6484  0012  2815               	goto	i1l77
  6485                           
  6486                           ;mcc_generated_files/interrupt_manager.c: 65:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 66:             TMR1_ISR();
  6487  0013  2545               	fcall	_TMR1_ISR
  6488                           
  6489                           ;mcc_generated_files/interrupt_manager.c: 67:         }
  6490  0014  283C               	goto	i1l86
  6491  0015                     i1l77:	
  6492                           ;mcc_generated_files/interrupt_manager.c: 68:         else if(PIE1bits.ADIE == 1 && PIR1
      +                          bits.ADIF == 1)
  6493                           
  6494  0015  0021               	movlb	1	; select bank1
  6495  0016  1F11               	btfss	17,6	;volatile
  6496  0017  2825               	goto	i1l79
  6497  0018  0020               	movlb	0	; select bank0
  6498  0019  1F11               	btfss	17,6	;volatile
  6499  001A  2825               	goto	i1l79
  6500                           
  6501                           ;mcc_generated_files/interrupt_manager.c: 69:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 70:             ADC_value = ADC_GetConversionResult();
  6502  001B  25C1               	fcall	_ADC_GetConversionResult
  6503  001C  0871               	movf	?_ADC_GetConversionResult+1,w
  6504  001D  0020               	movlb	0	; select bank0
  6505  001E  00A7               	movwf	_ADC_value+1	;volatile
  6506  001F  0870               	movf	?_ADC_GetConversionResult,w
  6507  0020  00A6               	movwf	_ADC_value	;volatile
  6508                           
  6509                           ;mcc_generated_files/interrupt_manager.c: 78:             ADC_state = ADC_READY;
  6510  0021  3001               	movlw	1
  6511  0022  00B7               	movwf	_ADC_state	;volatile
  6512                           
  6513                           ;mcc_generated_files/interrupt_manager.c: 80:             ADC_ISR();
  6514  0023  265F               	fcall	_ADC_ISR
  6515                           
  6516                           ;mcc_generated_files/interrupt_manager.c: 81:         }
  6517  0024  283C               	goto	i1l86
  6518  0025                     i1l79:	
  6519                           ;mcc_generated_files/interrupt_manager.c: 82:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
  6520                           
  6521  0025  0021               	movlb	1	; select bank1
  6522  0026  1E91               	btfss	17,5	;volatile
  6523  0027  2831               	goto	i1l81
  6524  0028  0020               	movlb	0	; select bank0
  6525  0029  1E91               	btfss	17,5	;volatile
  6526  002A  2831               	goto	i1l81
  6527                           
  6528                           ;mcc_generated_files/interrupt_manager.c: 83:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 84:             EUSART_RxDefaultInterruptHandler();
  6529  002B  0829               	movf	_EUSART_RxDefaultInterruptHandler+1,w
  6530  002C  008A               	movwf	10
  6531  002D  0828               	movf	_EUSART_RxDefaultInterruptHandler,w
  6532  002E  000A               	callw
  6533  002F  3180               	pagesel	$
  6534                           
  6535                           ;mcc_generated_files/interrupt_manager.c: 85:         }
  6536  0030  283C               	goto	i1l86
  6537  0031                     i1l81:	
  6538                           ;mcc_generated_files/interrupt_manager.c: 86:         else if(PIE1bits.TXIE == 1 && PIR1
      +                          bits.TXIF == 1)
  6539                           
  6540  0031  0021               	movlb	1	; select bank1
  6541  0032  1E11               	btfss	17,4	;volatile
  6542  0033  283C               	goto	i1l86
  6543  0034  0020               	movlb	0	; select bank0
  6544  0035  1E11               	btfss	17,4	;volatile
  6545  0036  283C               	goto	i1l86
  6546                           
  6547                           ;mcc_generated_files/interrupt_manager.c: 87:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 88:             EUSART_TxDefaultInterruptHandler();
  6548  0037  082B               	movf	_EUSART_TxDefaultInterruptHandler+1,w
  6549  0038  008A               	movwf	10
  6550  0039  082A               	movf	_EUSART_TxDefaultInterruptHandler,w
  6551  003A  000A               	callw
  6552  003B  3180               	pagesel	$
  6553  003C                     i1l86:	
  6554                           ;mcc_generated_files/interrupt_manager.c: 89:         }
  6555                           
  6556  003C  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  6557  003D  0009               	retfie
  6558  003E                     __end_of_INTERRUPT_InterruptManager:	
  6559                           
  6560                           	psect	text48
  6561  0545                     __ptext48:	
  6562 ;; *************** function _TMR1_ISR *****************
  6563 ;; Defined at:
  6564 ;;		line 157 in file "mcc_generated_files/tmr1.c"
  6565 ;; Parameters:    Size  Location     Type
  6566 ;;		None
  6567 ;; Auto vars:     Size  Location     Type
  6568 ;;		None
  6569 ;; Return value:  Size  Location     Type
  6570 ;;                  1    wreg      void 
  6571 ;; Registers used:
  6572 ;;		wreg, status,2, status,0, pclath, cstack
  6573 ;; Tracked objects:
  6574 ;;		On entry : 1F/0
  6575 ;;		On exit  : 0/0
  6576 ;;		Unchanged: 0/0
  6577 ;; Data sizes:     COMMON   BANK0   BANK1
  6578 ;;      Params:         0       0       0
  6579 ;;      Locals:         0       0       0
  6580 ;;      Temps:          0       0       0
  6581 ;;      Totals:         0       0       0
  6582 ;;Total ram usage:        0 bytes
  6583 ;; Hardware stack levels used:    1
  6584 ;; Hardware stack levels required when called:    2
  6585 ;; This function calls:
  6586 ;;		Absolute function
  6587 ;;		_TMR1_DefaultInterruptHandler
  6588 ;;		_TMR1_WriteTimer
  6589 ;;		__TMR1_Ready
  6590 ;; This function is called by:
  6591 ;;		_INTERRUPT_InterruptManager
  6592 ;; This function uses a non-reentrant model
  6593 ;;
  6594                           
  6595                           
  6596                           ;psect for function _TMR1_ISR
  6597  0545                     _TMR1_ISR:	
  6598                           
  6599                           ;mcc_generated_files/tmr1.c: 161:     PIR1bits.TMR1IF = 0;
  6600                           
  6601                           ;incstack = 0
  6602                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
  6603  0545  1011               	bcf	17,0	;volatile
  6604                           
  6605                           ;mcc_generated_files/tmr1.c: 162:     TMR1_WriteTimer(timer1ReloadVal);
  6606  0546  0825               	movf	_timer1ReloadVal+1,w	;volatile
  6607  0547  00F1               	movwf	TMR1_WriteTimer@timerVal+1
  6608  0548  0824               	movf	_timer1ReloadVal,w	;volatile
  6609  0549  00F0               	movwf	TMR1_WriteTimer@timerVal
  6610  054A  2571               	fcall	_TMR1_WriteTimer
  6611                           
  6612                           ;mcc_generated_files/tmr1.c: 164:     if(TMR1_InterruptHandler)
  6613  054B  0822               	movf	_TMR1_InterruptHandler,w
  6614  054C  0423               	iorwf	_TMR1_InterruptHandler+1,w
  6615  054D  1903               	btfsc	3,2
  6616  054E  0008               	return
  6617                           
  6618                           ;mcc_generated_files/tmr1.c: 165:     {;mcc_generated_files/tmr1.c: 166:         TMR1_In
      +                          terruptHandler();
  6619  054F  0823               	movf	_TMR1_InterruptHandler+1,w
  6620  0550  008A               	movwf	10
  6621  0551  0822               	movf	_TMR1_InterruptHandler,w
  6622  0552  000A               	callw
  6623  0553  3185               	pagesel	$
  6624  0554  0008               	return
  6625  0555                     __end_of_TMR1_ISR:	
  6626                           
  6627                           	psect	text49
  6628  0662                     __ptext49:	
  6629 ;; *************** function _TMR1_DefaultInterruptHandler *****************
  6630 ;; Defined at:
  6631 ;;		line 175 in file "mcc_generated_files/tmr1.c"
  6632 ;; Parameters:    Size  Location     Type
  6633 ;;		None
  6634 ;; Auto vars:     Size  Location     Type
  6635 ;;		None
  6636 ;; Return value:  Size  Location     Type
  6637 ;;                  1    wreg      void 
  6638 ;; Registers used:
  6639 ;;		None
  6640 ;; Tracked objects:
  6641 ;;		On entry : 1F/0
  6642 ;;		On exit  : 1F/0
  6643 ;;		Unchanged: 1F/0
  6644 ;; Data sizes:     COMMON   BANK0   BANK1
  6645 ;;      Params:         0       0       0
  6646 ;;      Locals:         0       0       0
  6647 ;;      Temps:          0       0       0
  6648 ;;      Totals:         0       0       0
  6649 ;;Total ram usage:        0 bytes
  6650 ;; Hardware stack levels used:    1
  6651 ;; This function calls:
  6652 ;;		Nothing
  6653 ;; This function is called by:
  6654 ;;		_TMR1_Initialize
  6655 ;;		_TMR1_ISR
  6656 ;; This function uses a non-reentrant model
  6657 ;;
  6658                           
  6659                           
  6660                           ;psect for function _TMR1_DefaultInterruptHandler
  6661  0662                     _TMR1_DefaultInterruptHandler:	
  6662                           
  6663                           ;incstack = 0
  6664                           ; Regs used in _TMR1_DefaultInterruptHandler: []
  6665  0662  0008               	return
  6666  0663                     __end_of_TMR1_DefaultInterruptHandler:	
  6667                           
  6668                           	psect	text50
  6669  063B                     __ptext50:	
  6670 ;; *************** function __TMR1_Ready *****************
  6671 ;; Defined at:
  6672 ;;		line 153 in file "logger.c"
  6673 ;; Parameters:    Size  Location     Type
  6674 ;;		None
  6675 ;; Auto vars:     Size  Location     Type
  6676 ;;		None
  6677 ;; Return value:  Size  Location     Type
  6678 ;;                  1    wreg      void 
  6679 ;; Registers used:
  6680 ;;		wreg, status,2, status,0, pclath, cstack
  6681 ;; Tracked objects:
  6682 ;;		On entry : 1F/0
  6683 ;;		On exit  : 1E/0
  6684 ;;		Unchanged: 0/0
  6685 ;; Data sizes:     COMMON   BANK0   BANK1
  6686 ;;      Params:         0       0       0
  6687 ;;      Locals:         0       0       0
  6688 ;;      Temps:          0       0       0
  6689 ;;      Totals:         0       0       0
  6690 ;;Total ram usage:        0 bytes
  6691 ;; Hardware stack levels used:    1
  6692 ;; Hardware stack levels required when called:    1
  6693 ;; This function calls:
  6694 ;;		i1_ADC_StartConversion
  6695 ;; This function is called by:
  6696 ;;		_logger_initialize
  6697 ;;		_TMR1_ISR
  6698 ;; This function uses a non-reentrant model
  6699 ;;
  6700                           
  6701                           
  6702                           ;psect for function __TMR1_Ready
  6703  063B                     __TMR1_Ready:	
  6704                           
  6705                           ;logger.c: 155:     if (TMR1_state == TMR1_RUNNING) {
  6706                           
  6707                           ;incstack = 0
  6708                           ; Regs used in __TMR1_Ready: [wreg+status,2+status,0+pclath+cstack]
  6709  063B  0B2D               	decfsz	_TMR1_state,w	;volatile
  6710  063C  0008               	return
  6711                           
  6712                           ;logger.c: 156:         ADC_StartConversion();
  6713  063D  2652               	fcall	i1_ADC_StartConversion
  6714  063E  0008               	return
  6715  063F                     __end_of__TMR1_Ready:	
  6716                           
  6717                           	psect	text51
  6718  0652                     __ptext51:	
  6719 ;; *************** function i1_ADC_StartConversion *****************
  6720 ;; Defined at:
  6721 ;;		line 93 in file "mcc_generated_files/adc.c"
  6722 ;; Parameters:    Size  Location     Type
  6723 ;;		None
  6724 ;; Auto vars:     Size  Location     Type
  6725 ;;		None
  6726 ;; Return value:  Size  Location     Type
  6727 ;;                  1    wreg      void 
  6728 ;; Registers used:
  6729 ;;		None
  6730 ;; Tracked objects:
  6731 ;;		On entry : 1F/0
  6732 ;;		On exit  : 1F/1
  6733 ;;		Unchanged: 0/0
  6734 ;; Data sizes:     COMMON   BANK0   BANK1
  6735 ;;      Params:         0       0       0
  6736 ;;      Locals:         0       0       0
  6737 ;;      Temps:          0       0       0
  6738 ;;      Totals:         0       0       0
  6739 ;;Total ram usage:        0 bytes
  6740 ;; Hardware stack levels used:    1
  6741 ;; This function calls:
  6742 ;;		Nothing
  6743 ;; This function is called by:
  6744 ;;		__TMR1_Ready
  6745 ;; This function uses a non-reentrant model
  6746 ;;
  6747                           
  6748                           
  6749                           ;psect for function i1_ADC_StartConversion
  6750  0652                     i1_ADC_StartConversion:	
  6751                           
  6752                           ;mcc_generated_files/adc.c: 96:     ADCON0bits.GO_nDONE = 1;
  6753                           
  6754                           ;incstack = 0
  6755                           ; Regs used in i1_ADC_StartConversion: []
  6756  0652  0021               	movlb	1	; select bank1
  6757  0653  149D               	bsf	29,1	;volatile
  6758  0654  0008               	return
  6759  0655                     __end_ofi1_ADC_StartConversion:	
  6760                           
  6761                           	psect	text52
  6762  0571                     __ptext52:	
  6763 ;; *************** function _TMR1_WriteTimer *****************
  6764 ;; Defined at:
  6765 ;;		line 120 in file "mcc_generated_files/tmr1.c"
  6766 ;; Parameters:    Size  Location     Type
  6767 ;;  timerVal        2    0[COMMON] unsigned short 
  6768 ;; Auto vars:     Size  Location     Type
  6769 ;;		None
  6770 ;; Return value:  Size  Location     Type
  6771 ;;                  1    wreg      void 
  6772 ;; Registers used:
  6773 ;;		wreg
  6774 ;; Tracked objects:
  6775 ;;		On entry : 1F/0
  6776 ;;		On exit  : 1F/0
  6777 ;;		Unchanged: 0/0
  6778 ;; Data sizes:     COMMON   BANK0   BANK1
  6779 ;;      Params:         2       0       0
  6780 ;;      Locals:         0       0       0
  6781 ;;      Temps:          0       0       0
  6782 ;;      Totals:         2       0       0
  6783 ;;Total ram usage:        2 bytes
  6784 ;; Hardware stack levels used:    1
  6785 ;; This function calls:
  6786 ;;		Nothing
  6787 ;; This function is called by:
  6788 ;;		_TMR1_ISR
  6789 ;; This function uses a non-reentrant model
  6790 ;;
  6791                           
  6792                           
  6793                           ;psect for function _TMR1_WriteTimer
  6794  0571                     _TMR1_WriteTimer:	
  6795                           
  6796                           ;mcc_generated_files/tmr1.c: 120: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr1.c: 121: {;mcc_generated_files/tmr1.c: 122:     if (T1CONbits.nT1SYNC == 1)
  6797                           
  6798                           ;incstack = 0
  6799                           ; Regs used in _TMR1_WriteTimer: [wreg]
  6800  0571  1D18               	btfss	24,2	;volatile
  6801  0572  2D7A               	goto	i1l2541
  6802                           
  6803                           ;mcc_generated_files/tmr1.c: 123:     {;mcc_generated_files/tmr1.c: 125:         T1CONbi
      +                          ts.TMR1ON = 0;
  6804  0573  1018               	bcf	24,0	;volatile
  6805                           
  6806                           ;mcc_generated_files/tmr1.c: 128:         TMR1H = (timerVal >> 8);
  6807  0574  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  6808  0575  0097               	movwf	23	;volatile
  6809                           
  6810                           ;mcc_generated_files/tmr1.c: 129:         TMR1L = timerVal;
  6811  0576  0870               	movf	TMR1_WriteTimer@timerVal,w
  6812  0577  0096               	movwf	22	;volatile
  6813                           
  6814                           ;mcc_generated_files/tmr1.c: 132:         T1CONbits.TMR1ON =1;
  6815  0578  1418               	bsf	24,0	;volatile
  6816                           
  6817                           ;mcc_generated_files/tmr1.c: 133:     }
  6818  0579  0008               	return
  6819  057A                     i1l2541:	
  6820                           
  6821                           ;mcc_generated_files/tmr1.c: 135:     {;mcc_generated_files/tmr1.c: 137:         TMR1H =
      +                           (timerVal >> 8);
  6822  057A  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  6823  057B  0097               	movwf	23	;volatile
  6824                           
  6825                           ;mcc_generated_files/tmr1.c: 138:         TMR1L = timerVal;
  6826  057C  0870               	movf	TMR1_WriteTimer@timerVal,w
  6827  057D  0096               	movwf	22	;volatile
  6828  057E  0008               	return
  6829  057F                     __end_of_TMR1_WriteTimer:	
  6830                           
  6831                           	psect	text53
  6832  063F                     __ptext53:	
  6833 ;; *************** function _PIN_MANAGER_IOC *****************
  6834 ;; Defined at:
  6835 ;;		line 115 in file "mcc_generated_files/pin_manager.c"
  6836 ;; Parameters:    Size  Location     Type
  6837 ;;		None
  6838 ;; Auto vars:     Size  Location     Type
  6839 ;;		None
  6840 ;; Return value:  Size  Location     Type
  6841 ;;                  1    wreg      void 
  6842 ;; Registers used:
  6843 ;;		wreg, status,2, status,0, pclath, cstack
  6844 ;; Tracked objects:
  6845 ;;		On entry : 0/0
  6846 ;;		On exit  : 1F/7
  6847 ;;		Unchanged: 0/0
  6848 ;; Data sizes:     COMMON   BANK0   BANK1
  6849 ;;      Params:         0       0       0
  6850 ;;      Locals:         0       0       0
  6851 ;;      Temps:          0       0       0
  6852 ;;      Totals:         0       0       0
  6853 ;;Total ram usage:        0 bytes
  6854 ;; Hardware stack levels used:    1
  6855 ;; Hardware stack levels required when called:    2
  6856 ;; This function calls:
  6857 ;;		_IOCAF4_ISR
  6858 ;; This function is called by:
  6859 ;;		_INTERRUPT_InterruptManager
  6860 ;; This function uses a non-reentrant model
  6861 ;;
  6862                           
  6863                           
  6864                           ;psect for function _PIN_MANAGER_IOC
  6865  063F                     _PIN_MANAGER_IOC:	
  6866                           
  6867                           ;mcc_generated_files/pin_manager.c: 118:     if(IOCAFbits.IOCAF4 == 1)
  6868                           
  6869                           ;incstack = 0
  6870                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
  6871  063F  0027               	movlb	7	; select bank7
  6872  0640  1E13               	btfss	19,4	;volatile
  6873  0641  0008               	return
  6874                           
  6875                           ;mcc_generated_files/pin_manager.c: 119:     {;mcc_generated_files/pin_manager.c: 120:  
      +                                 IOCAF4_ISR();
  6876  0642  2D7F               	ljmp	i1l2543
  6877  0643                     __end_of_PIN_MANAGER_IOC:	
  6878                           
  6879                           	psect	text54
  6880  057F                     __ptext54:	
  6881 ;; *************** function _IOCAF4_ISR *****************
  6882 ;; Defined at:
  6883 ;;		line 127 in file "mcc_generated_files/pin_manager.c"
  6884 ;; Parameters:    Size  Location     Type
  6885 ;;		None
  6886 ;; Auto vars:     Size  Location     Type
  6887 ;;		None
  6888 ;; Return value:  Size  Location     Type
  6889 ;;                  1    wreg      void 
  6890 ;; Registers used:
  6891 ;;		wreg, status,2, status,0, pclath, cstack
  6892 ;; Tracked objects:
  6893 ;;		On entry : 1F/7
  6894 ;;		On exit  : 1F/7
  6895 ;;		Unchanged: 0/0
  6896 ;; Data sizes:     COMMON   BANK0   BANK1
  6897 ;;      Params:         0       0       0
  6898 ;;      Locals:         0       0       0
  6899 ;;      Temps:          0       0       0
  6900 ;;      Totals:         0       0       0
  6901 ;;Total ram usage:        0 bytes
  6902 ;; Hardware stack levels used:    1
  6903 ;; Hardware stack levels required when called:    1
  6904 ;; This function calls:
  6905 ;;		Absolute function
  6906 ;;		_IOCAF4_DefaultInterruptHandler
  6907 ;;		__IOC_Ready
  6908 ;; This function is called by:
  6909 ;;		_PIN_MANAGER_IOC
  6910 ;; This function uses a non-reentrant model
  6911 ;;
  6912                           
  6913                           
  6914                           ;psect for function _IOCAF4_ISR
  6915  057F                     _IOCAF4_ISR:	
  6916  057F                     i1l2543:	
  6917                           ;incstack = 0
  6918                           ; Regs used in _IOCAF4_ISR: [wreg+status,2+status,0+pclath+cstack]
  6919                           
  6920                           
  6921                           ;mcc_generated_files/pin_manager.c: 132:     if(IOCAF4_InterruptHandler)
  6922  057F  0020               	movlb	0	; select bank0
  6923  0580  086C               	movf	_IOCAF4_InterruptHandler,w
  6924  0581  046D               	iorwf	_IOCAF4_InterruptHandler+1,w
  6925  0582  1903               	btfsc	3,2
  6926  0583  2D89               	goto	i1l2547
  6927                           
  6928                           ;mcc_generated_files/pin_manager.c: 133:     {;mcc_generated_files/pin_manager.c: 134:  
      +                                 IOCAF4_InterruptHandler();
  6929  0584  086D               	movf	_IOCAF4_InterruptHandler+1,w
  6930  0585  008A               	movwf	10
  6931  0586  086C               	movf	_IOCAF4_InterruptHandler,w
  6932  0587  000A               	callw
  6933  0588  3185               	pagesel	$
  6934  0589                     i1l2547:	
  6935                           
  6936                           ;mcc_generated_files/pin_manager.c: 136:     IOCAFbits.IOCAF4 = 0;
  6937  0589  0027               	movlb	7	; select bank7
  6938  058A  1213               	bcf	19,4	;volatile
  6939  058B  0008               	return
  6940  058C                     __end_of_IOCAF4_ISR:	
  6941                           
  6942                           	psect	text55
  6943  0663                     __ptext55:	
  6944 ;; *************** function _IOCAF4_DefaultInterruptHandler *****************
  6945 ;; Defined at:
  6946 ;;		line 149 in file "mcc_generated_files/pin_manager.c"
  6947 ;; Parameters:    Size  Location     Type
  6948 ;;		None
  6949 ;; Auto vars:     Size  Location     Type
  6950 ;;		None
  6951 ;; Return value:  Size  Location     Type
  6952 ;;                  1    wreg      void 
  6953 ;; Registers used:
  6954 ;;		None
  6955 ;; Tracked objects:
  6956 ;;		On entry : 1F/0
  6957 ;;		On exit  : 1F/0
  6958 ;;		Unchanged: 1F/0
  6959 ;; Data sizes:     COMMON   BANK0   BANK1
  6960 ;;      Params:         0       0       0
  6961 ;;      Locals:         0       0       0
  6962 ;;      Temps:          0       0       0
  6963 ;;      Totals:         0       0       0
  6964 ;;Total ram usage:        0 bytes
  6965 ;; Hardware stack levels used:    1
  6966 ;; This function calls:
  6967 ;;		Nothing
  6968 ;; This function is called by:
  6969 ;;		_PIN_MANAGER_Initialize
  6970 ;;		_IOCAF4_ISR
  6971 ;; This function uses a non-reentrant model
  6972 ;;
  6973                           
  6974                           
  6975                           ;psect for function _IOCAF4_DefaultInterruptHandler
  6976  0663                     _IOCAF4_DefaultInterruptHandler:	
  6977                           
  6978                           ;incstack = 0
  6979                           ; Regs used in _IOCAF4_DefaultInterruptHandler: []
  6980  0663  0008               	return
  6981  0664                     __end_of_IOCAF4_DefaultInterruptHandler:	
  6982                           
  6983                           	psect	text56
  6984  05F7                     __ptext56:	
  6985 ;; *************** function __IOC_Ready *****************
  6986 ;; Defined at:
  6987 ;;		line 160 in file "logger.c"
  6988 ;; Parameters:    Size  Location     Type
  6989 ;;		None
  6990 ;; Auto vars:     Size  Location     Type
  6991 ;;		None
  6992 ;; Return value:  Size  Location     Type
  6993 ;;                  1    wreg      void 
  6994 ;; Registers used:
  6995 ;;		wreg, status,2
  6996 ;; Tracked objects:
  6997 ;;		On entry : 1F/0
  6998 ;;		On exit  : 1F/0
  6999 ;;		Unchanged: 0/0
  7000 ;; Data sizes:     COMMON   BANK0   BANK1
  7001 ;;      Params:         0       0       0
  7002 ;;      Locals:         0       0       0
  7003 ;;      Temps:          0       0       0
  7004 ;;      Totals:         0       0       0
  7005 ;;Total ram usage:        0 bytes
  7006 ;; Hardware stack levels used:    1
  7007 ;; This function calls:
  7008 ;;		Nothing
  7009 ;; This function is called by:
  7010 ;;		_logger_initialize
  7011 ;;		_IOCAF4_ISR
  7012 ;; This function uses a non-reentrant model
  7013 ;;
  7014                           
  7015                           
  7016                           ;psect for function __IOC_Ready
  7017  05F7                     __IOC_Ready:	
  7018                           
  7019                           ;logger.c: 163:     IOC_value = PORTAbits.RA4;
  7020                           
  7021                           ;incstack = 0
  7022                           ; Regs used in __IOC_Ready: [wreg+status,2]
  7023  05F7  3000               	movlw	0
  7024  05F8  1A0C               	btfsc	12,4	;volatile
  7025  05F9  3001               	movlw	1
  7026  05FA  00AC               	movwf	_IOC_value	;volatile
  7027                           
  7028                           ;logger.c: 164:     IOC_state = IOC_READY;
  7029  05FB  3001               	movlw	1
  7030  05FC  00B1               	movwf	_IOC_state	;volatile
  7031  05FD  0008               	return
  7032  05FE                     __end_of__IOC_Ready:	
  7033                           
  7034                           	psect	text57
  7035  04E0                     __ptext57:	
  7036 ;; *************** function _EUSART_Transmit_ISR *****************
  7037 ;; Defined at:
  7038 ;;		line 172 in file "mcc_generated_files/eusart.c"
  7039 ;; Parameters:    Size  Location     Type
  7040 ;;		None
  7041 ;; Auto vars:     Size  Location     Type
  7042 ;;		None
  7043 ;; Return value:  Size  Location     Type
  7044 ;;                  1    wreg      void 
  7045 ;; Registers used:
  7046 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7047 ;; Tracked objects:
  7048 ;;		On entry : 1F/0
  7049 ;;		On exit  : 1E/0
  7050 ;;		Unchanged: 0/0
  7051 ;; Data sizes:     COMMON   BANK0   BANK1
  7052 ;;      Params:         0       0       0
  7053 ;;      Locals:         0       0       0
  7054 ;;      Temps:          0       0       0
  7055 ;;      Totals:         0       0       0
  7056 ;;Total ram usage:        0 bytes
  7057 ;; Hardware stack levels used:    1
  7058 ;; This function calls:
  7059 ;;		Nothing
  7060 ;; This function is called by:
  7061 ;;		_EUSART_Initialize
  7062 ;;		_INTERRUPT_InterruptManager
  7063 ;; This function uses a non-reentrant model
  7064 ;;
  7065                           
  7066                           
  7067                           ;psect for function _EUSART_Transmit_ISR
  7068  04E0                     _EUSART_Transmit_ISR:	
  7069                           
  7070                           ;mcc_generated_files/eusart.c: 176:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
  7071                           
  7072                           ;incstack = 0
  7073                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  7074  04E0  300A               	movlw	10
  7075  04E1  027A               	subwf	_eusartTxBufferRemaining,w
  7076  04E2  1803               	skipnc
  7077  04E3  2CF3               	goto	i1l165
  7078                           
  7079                           ;mcc_generated_files/eusart.c: 177:     {;mcc_generated_files/eusart.c: 178:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
  7080  04E4  0836               	movf	_eusartTxTail,w
  7081  04E5  3EAC               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  7082  04E6  0086               	movwf	6
  7083  04E7  0187               	clrf	7
  7084  04E8  0801               	movf	1,w
  7085  04E9  0023               	movlb	3	; select bank3
  7086  04EA  009A               	movwf	26	;volatile
  7087  04EB  0020               	movlb	0	; select bank0
  7088  04EC  0AB6               	incf	_eusartTxTail,f	;volatile
  7089                           
  7090                           ;mcc_generated_files/eusart.c: 179:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
  7091  04ED  300A               	movlw	10
  7092  04EE  0236               	subwf	_eusartTxTail,w
  7093  04EF  1803               	btfsc	3,0
  7094                           
  7095                           ;mcc_generated_files/eusart.c: 180:         {;mcc_generated_files/eusart.c: 181:        
      +                               eusartTxTail = 0;
  7096  04F0  01B6               	clrf	_eusartTxTail	;volatile
  7097                           
  7098                           ;mcc_generated_files/eusart.c: 183:         eusartTxBufferRemaining++;
  7099  04F1  0AFA               	incf	_eusartTxBufferRemaining,f	;volatile
  7100                           
  7101                           ;mcc_generated_files/eusart.c: 184:     }
  7102  04F2  0008               	return
  7103  04F3                     i1l165:	
  7104                           ;mcc_generated_files/eusart.c: 185:     else
  7105                           
  7106                           
  7107                           ;mcc_generated_files/eusart.c: 186:     {;mcc_generated_files/eusart.c: 187:         PIE
      +                          1bits.TXIE = 0;
  7108  04F3  0021               	movlb	1	; select bank1
  7109  04F4  1211               	bcf	17,4	;volatile
  7110  04F5  0008               	return
  7111  04F6                     __end_of_EUSART_Transmit_ISR:	
  7112                           
  7113                           	psect	text58
  7114  04F6                     __ptext58:	
  7115 ;; *************** function _EUSART_Receive_ISR *****************
  7116 ;; Defined at:
  7117 ;;		line 191 in file "mcc_generated_files/eusart.c"
  7118 ;; Parameters:    Size  Location     Type
  7119 ;;		None
  7120 ;; Auto vars:     Size  Location     Type
  7121 ;;		None
  7122 ;; Return value:  Size  Location     Type
  7123 ;;                  1    wreg      void 
  7124 ;; Registers used:
  7125 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7126 ;; Tracked objects:
  7127 ;;		On entry : 1F/0
  7128 ;;		On exit  : 1F/0
  7129 ;;		Unchanged: 0/0
  7130 ;; Data sizes:     COMMON   BANK0   BANK1
  7131 ;;      Params:         0       0       0
  7132 ;;      Locals:         0       0       0
  7133 ;;      Temps:          0       0       0
  7134 ;;      Totals:         0       0       0
  7135 ;;Total ram usage:        0 bytes
  7136 ;; Hardware stack levels used:    1
  7137 ;; This function calls:
  7138 ;;		Nothing
  7139 ;; This function is called by:
  7140 ;;		_EUSART_Initialize
  7141 ;;		_INTERRUPT_InterruptManager
  7142 ;; This function uses a non-reentrant model
  7143 ;;
  7144                           
  7145                           
  7146                           ;psect for function _EUSART_Receive_ISR
  7147  04F6                     _EUSART_Receive_ISR:	
  7148                           
  7149                           ;mcc_generated_files/eusart.c: 194:     if(1 == RCSTAbits.OERR)
  7150                           
  7151                           ;incstack = 0
  7152                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  7153  04F6  0023               	movlb	3	; select bank3
  7154  04F7  1C9D               	btfss	29,1	;volatile
  7155  04F8  2CFB               	goto	i1l2627
  7156                           
  7157                           ;mcc_generated_files/eusart.c: 195:     {;mcc_generated_files/eusart.c: 198:         RCS
      +                          TAbits.CREN = 0;
  7158  04F9  121D               	bcf	29,4	;volatile
  7159                           
  7160                           ;mcc_generated_files/eusart.c: 199:         RCSTAbits.CREN = 1;
  7161  04FA  161D               	bsf	29,4	;volatile
  7162  04FB                     i1l2627:	
  7163                           
  7164                           ;mcc_generated_files/eusart.c: 203:     eusartRxBuffer[eusartRxHead++] = RCREG;
  7165  04FB  0020               	movlb	0	; select bank0
  7166  04FC  0835               	movf	_eusartRxHead,w
  7167  04FD  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  7168  04FE  0086               	movwf	6
  7169  04FF  0187               	clrf	7
  7170  0500  0023               	movlb	3	; select bank3
  7171  0501  0819               	movf	25,w	;volatile
  7172  0502  0081               	movwf	1
  7173  0503  0020               	movlb	0	; select bank0
  7174  0504  0AB5               	incf	_eusartRxHead,f	;volatile
  7175                           
  7176                           ;mcc_generated_files/eusart.c: 204:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
  7177  0505  300C               	movlw	12
  7178  0506  0235               	subwf	_eusartRxHead,w
  7179  0507  1803               	btfsc	3,0
  7180                           
  7181                           ;mcc_generated_files/eusart.c: 205:     {;mcc_generated_files/eusart.c: 206:         eus
      +                          artRxHead = 0;
  7182  0508  01B5               	clrf	_eusartRxHead	;volatile
  7183                           
  7184                           ;mcc_generated_files/eusart.c: 208:     eusartRxCount++;
  7185  0509  0AB3               	incf	_eusartRxCount,f	;volatile
  7186  050A  0008               	return
  7187  050B                     __end_of_EUSART_Receive_ISR:	
  7188                           
  7189                           	psect	text59
  7190  065F                     __ptext59:	
  7191 ;; *************** function _ADC_ISR *****************
  7192 ;; Defined at:
  7193 ;;		line 140 in file "mcc_generated_files/adc.c"
  7194 ;; Parameters:    Size  Location     Type
  7195 ;;		None
  7196 ;; Auto vars:     Size  Location     Type
  7197 ;;		None
  7198 ;; Return value:  Size  Location     Type
  7199 ;;                  1    wreg      void 
  7200 ;; Registers used:
  7201 ;;		None
  7202 ;; Tracked objects:
  7203 ;;		On entry : 1F/0
  7204 ;;		On exit  : 1F/0
  7205 ;;		Unchanged: 0/0
  7206 ;; Data sizes:     COMMON   BANK0   BANK1
  7207 ;;      Params:         0       0       0
  7208 ;;      Locals:         0       0       0
  7209 ;;      Temps:          0       0       0
  7210 ;;      Totals:         0       0       0
  7211 ;;Total ram usage:        0 bytes
  7212 ;; Hardware stack levels used:    1
  7213 ;; This function calls:
  7214 ;;		Nothing
  7215 ;; This function is called by:
  7216 ;;		_INTERRUPT_InterruptManager
  7217 ;; This function uses a non-reentrant model
  7218 ;;
  7219                           
  7220                           
  7221                           ;psect for function _ADC_ISR
  7222  065F                     _ADC_ISR:	
  7223                           
  7224                           ;mcc_generated_files/adc.c: 143:     PIR1bits.ADIF = 0;
  7225                           
  7226                           ;incstack = 0
  7227                           ; Regs used in _ADC_ISR: []
  7228  065F  1311               	bcf	17,6	;volatile
  7229  0660  0008               	return
  7230  0661                     __end_of_ADC_ISR:	
  7231                           
  7232                           	psect	text60
  7233  05C1                     __ptext60:	
  7234 ;; *************** function _ADC_GetConversionResult *****************
  7235 ;; Defined at:
  7236 ;;		line 106 in file "mcc_generated_files/adc.c"
  7237 ;; Parameters:    Size  Location     Type
  7238 ;;		None
  7239 ;; Auto vars:     Size  Location     Type
  7240 ;;		None
  7241 ;; Return value:  Size  Location     Type
  7242 ;;                  2    0[COMMON] unsigned short 
  7243 ;; Registers used:
  7244 ;;		wreg
  7245 ;; Tracked objects:
  7246 ;;		On entry : 1F/0
  7247 ;;		On exit  : 1F/1
  7248 ;;		Unchanged: 0/0
  7249 ;; Data sizes:     COMMON   BANK0   BANK1
  7250 ;;      Params:         2       0       0
  7251 ;;      Locals:         0       0       0
  7252 ;;      Temps:          0       0       0
  7253 ;;      Totals:         2       0       0
  7254 ;;Total ram usage:        2 bytes
  7255 ;; Hardware stack levels used:    1
  7256 ;; This function calls:
  7257 ;;		Nothing
  7258 ;; This function is called by:
  7259 ;;		_INTERRUPT_InterruptManager
  7260 ;; This function uses a non-reentrant model
  7261 ;;
  7262                           
  7263                           
  7264                           ;psect for function _ADC_GetConversionResult
  7265  05C1                     _ADC_GetConversionResult:	
  7266                           
  7267                           ;mcc_generated_files/adc.c: 109:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
  7268                           
  7269                           ;incstack = 0
  7270                           ; Regs used in _ADC_GetConversionResult: [wreg]
  7271  05C1  0021               	movlb	1	; select bank1
  7272  05C2  081C               	movf	28,w	;volatile
  7273  05C3  00F1               	movwf	?_ADC_GetConversionResult+1
  7274  05C4  01F0               	clrf	?_ADC_GetConversionResult
  7275  05C5  081B               	movf	27,w	;volatile
  7276  05C6  07F0               	addwf	?_ADC_GetConversionResult,f
  7277  05C7  1803               	skipnc
  7278  05C8  0AF1               	incf	?_ADC_GetConversionResult+1,f
  7279  05C9  0008               	return
  7280  05CA                     __end_of_ADC_GetConversionResult:	
  7281  007E                     btemp	set	126	;btemp
  7282  007E                     int$flags	set	126
  7283  007E                     wtemp0	set	126


Data Sizes:
    Strings     171
    Constant    0
    Data        0
    BSS         68
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     32      78
    BANK1            32      0      22

Pointer List with Targets:

    strncmp@_r	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_13(CODE[2]), STR_7(CODE[7]), STR_6(CODE[8]), STR_5(CODE[5]), 
		 -> STR_4(CODE[6]), STR_3(CODE[10]), STR_2(CODE[3]), STR_1(CODE[8]), 

    strncmp@r	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_13(CODE[2]), STR_7(CODE[7]), STR_6(CODE[8]), STR_5(CODE[5]), 
		 -> STR_4(CODE[6]), STR_3(CODE[10]), STR_2(CODE[3]), STR_1(CODE[8]), 

    strncmp@_l	PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), esp_read_data(BANK0[20]), 

    strncmp@l	PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), esp_read_data(BANK0[20]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_13(CODE[2]), STR_7(CODE[7]), STR_6(CODE[8]), STR_5(CODE[5]), 
		 -> STR_4(CODE[6]), STR_3(CODE[10]), STR_2(CODE[3]), STR_1(CODE[8]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_13(CODE[2]), STR_7(CODE[7]), STR_6(CODE[8]), STR_5(CODE[5]), 
		 -> STR_4(CODE[6]), STR_3(CODE[10]), STR_2(CODE[3]), STR_1(CODE[8]), 

    strchr@s	PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), esp_read_data(BANK0[20]), 

    sp__strchr	PTR unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), esp_read_data(BANK0[20]), 

    strstr@h	PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), esp_read_data(BANK0[20]), 

    strstr@n	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_13(CODE[2]), STR_7(CODE[7]), STR_6(CODE[8]), STR_5(CODE[5]), 
		 -> STR_4(CODE[6]), STR_3(CODE[10]), STR_2(CODE[3]), STR_1(CODE[8]), 

    ESP_Set_application_handler@applicationHandler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> ESP_default_application_handler(), process_message(), 

    ESP_write@pt	PTR unsigned char  size(2) Largest target is 7
		 -> STR_22(CODE[3]), STR_21(CODE[3]), STR_20(CODE[7]), STR_19(CODE[7]), 
		 -> read_analog@mess(BANK0[6]), STR_18(CODE[4]), 

    ESP_external_message_handler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> ESP_default_application_handler(), process_message(), Absolute function(), 

    ESP_process_rx_data@index	PTR unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), esp_read_data(BANK0[20]), 

    sp__strstr	PTR unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), esp_read_data(BANK0[20]), 

    ESP_process_message@aux	PTR unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), esp_read_data(BANK0[20]), 

    _sprintf@mess	PTR unsigned char  size(1) Largest target is 6
		 -> read_analog@mess(BANK0[6]), 

    write@pt	PTR unsigned char  size(2) Largest target is 7
		 -> STR_22(CODE[3]), STR_21(CODE[3]), STR_20(CODE[7]), STR_19(CODE[7]), 
		 -> read_analog@mess(BANK0[6]), STR_18(CODE[4]), ESP_write@res(BANK0[1]), ESP_write@aux(BANK0[1]), 

    _puts@pt	PTR unsigned char  size(2) Largest target is 34
		 -> STR_17(CODE[3]), STR_16(CODE[3]), STR_15(CODE[2]), STR_14(CODE[12]), 
		 -> STR_12(CODE[20]), STR_11(CODE[14]), STR_10(CODE[34]), STR_9(CODE[14]), 
		 -> STR_8(CODE[5]), 

    IOCAF4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> _IOC_Ready(), IOCAF4_DefaultInterruptHandler(), 

    IOCAF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> _IOC_Ready(), IOCAF4_DefaultInterruptHandler(), Absolute function(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> _TMR1_Ready(), TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> _TMR1_Ready(), Absolute function(), TMR1_DefaultInterruptHandler(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Transmit_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Receive_ISR(), 


Critical Paths under _main in COMMON

    _read_analog->___lmul
    __sprintf->___lwdiv
    _logger_initialize->_ADC_SelectChannel
    _logger_initialize->_ESP_Set_application_handler
    _logger_initialize->_IOCAF4_SetInterruptHandler
    _logger_initialize->_TMR1_SetInterruptHandler
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF4_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _ESP_process_rx_data->_strstr
    _ESP_write->___awdiv
    _write->_EUSART_Write
    _ESP_initialize->_ESP_Set_application_handler
    __puts->_EUSART_Write
    _ESP_process_message->_strstr
    _strstr->_strlen
    _strstr->_strncmp

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_ADC_GetConversionResult
    _TMR1_ISR->_TMR1_WriteTimer

Critical Paths under _main in BANK0

    _main->_read_analog
    _read_analog->_ESP_write
    _process_ioc->_ESP_write
    _ESP_message_handler->_ESP_process_rx_data
    _ESP_process_rx_data->_process_message
    _process_message->_ESP_write
    _toggle_format->_ESP_write
    _ESP_write->_ESP_wait_for
    _ESP_config->_ESP_wait_for
    _ESP_wait_for->_ESP_read
    _ESP_read->_ESP_process_message
    _ESP_process_message->_strstr
    _strstr->_strncmp

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   60178
                         _ESP_config
                     _ESP_initialize
                _ESP_message_handler
                 _EUSART_is_rx_ready
                  _SYSTEM_Initialize
                  _logger_initialize
                        _process_ioc
                    _process_message
                        _read_analog
 ---------------------------------------------------------------------------------
 (1) _read_analog                                         16    16      0   12290
                                             16 BANK0     16    16      0
                       _ESP_wait_for
                          _ESP_write
                             ___lmul
                           __sprintf
 ---------------------------------------------------------------------------------
 (2) __sprintf                                             5     3      2    1873
                                              0 BANK0      5     3      2
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     615
                                              2 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     618
                                              2 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     244
                                              2 COMMON     8     0      8
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _process_ioc                                          0     0      0    9797
                       _ESP_wait_for
                          _ESP_write
 ---------------------------------------------------------------------------------
 (1) _logger_initialize                                    0     0      0     544
                  _ADC_SelectChannel
        _ESP_Set_application_handler
         _IOCAF4_SetInterruptHandler
           _TMR1_SetInterruptHandler
                     _TMR1_StopTimer
 ---------------------------------------------------------------------------------
 (2) _ADC_SelectChannel                                    2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     544
                     _ADC_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     174
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR1_SetInterruptHandler                             2     0      2     174
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     174
         _IOCAF4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _IOCAF4_SetInterruptHandler                           2     0      2     174
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     196
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ESP_message_handler                                  6     6      0   19113
                                             21 BANK0      3     3      0
                _ESP_process_rx_data
                           _ESP_read
 ---------------------------------------------------------------------------------
 (2) _ESP_process_rx_data                                  2     2      0   16445
                                             19 BANK0      2     2      0
                   Absolute function *
    _ESP_default_application_handler *
                    _process_message *
                             _strstr
 ---------------------------------------------------------------------------------
 (1) _process_message                                      3     2      1   13989
                                             16 BANK0      3     2      1
                _ADC_StartConversion
                          _ESP_write
                    _TMR1_StartTimer
                     _TMR1_StopTimer
                      _toggle_format
 ---------------------------------------------------------------------------------
 (2) _toggle_format                                        0     0      0    6912
                          _ESP_write
 ---------------------------------------------------------------------------------
 (2) _ESP_write                                            5     2      3    6912
                                             11 BANK0      5     2      3
                       _ESP_wait_for
                            ___awdiv
                            ___lbmod
                              __puts
                              _write
 ---------------------------------------------------------------------------------
 (3) _write                                                6     3      3     894
                                              3 COMMON     6     3      3
                       _EUSART_Write
                 _EUSART_is_tx_ready
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              5     4      1     235
                                              2 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     452
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _TMR1_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ESP_default_application_handler                      1     0      1      53
                                             16 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ESP_initialize                                       0     0      0     174
        _ESP_Set_application_handler
 ---------------------------------------------------------------------------------
 (2) _ESP_Set_application_handler                          2     0      2     174
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ESP_config                                           2     2      0    3727
                                             11 BANK0      2     2      0
                       _ESP_wait_for
                        _EUSART_Read
                 _EUSART_is_rx_ready
                              __puts
 ---------------------------------------------------------------------------------
 (3) __puts                                                6     4      2     818
                                              3 COMMON     6     4      2
                       _EUSART_Write
                 _EUSART_is_tx_ready
 ---------------------------------------------------------------------------------
 (4) _EUSART_is_tx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         1     1      0      44
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ESP_wait_for                                         2     2      0    2885
                                              9 BANK0      2     2      0
                           _ESP_read
 ---------------------------------------------------------------------------------
 (4) _ESP_read                                             2     2      0    2634
                                              7 BANK0      2     2      0
                _ESP_process_message
                        _EUSART_Read
 ---------------------------------------------------------------------------------
 (5) _EUSART_Read                                          1     1      0      24
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _ESP_process_message                                  1     1      0    2573
                                              6 BANK0      1     1      0
                             _strstr
 ---------------------------------------------------------------------------------
 (6) _strstr                                               5     3      2    2335
                                              7 COMMON     3     3      0
                                              4 BANK0      2     0      2
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (7) _strncmp                                              9     5      4     541
                                              2 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (7) _strlen                                               5     3      2     220
                                              2 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (7) _strchr                                               3     1      2     250
                                              2 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                          0     0      0     229
                   Absolute function *
            _ADC_GetConversionResult
                            _ADC_ISR
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                    _PIN_MANAGER_IOC
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     229
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                    _TMR1_WriteTimer
                        __TMR1_Ready *
 ---------------------------------------------------------------------------------
 (13) __TMR1_Ready                                         0     0      0       0
              i1_ADC_StartConversion
 ---------------------------------------------------------------------------------
 (14) i1_ADC_StartConversion                               0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _TMR1_WriteTimer                                     2     0      2     229
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (13) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _PIN_MANAGER_IOC                                     0     0      0       0
                         _IOCAF4_ISR
 ---------------------------------------------------------------------------------
 (13) _IOCAF4_ISR                                          0     0      0       0
                   Absolute function *
     _IOCAF4_DefaultInterruptHandler *
                         __IOC_Ready *
 ---------------------------------------------------------------------------------
 (14) __IOC_Ready                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _IOCAF4_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _ADC_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _ADC_GetConversionResult                             2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ESP_config
     _ESP_wait_for
       _ESP_read
         _ESP_process_message
           _strstr
             _strchr
             _strlen
             _strncmp
         _EUSART_Read
     _EUSART_Read
     _EUSART_is_rx_ready
     __puts
       _EUSART_Write
       _EUSART_is_tx_ready
   _ESP_initialize
     _ESP_Set_application_handler
   _ESP_message_handler
     _ESP_process_rx_data
       Absolute function(Fake) *
       _ESP_default_application_handler *
       _process_message *
         _ADC_StartConversion
         _ESP_write
           _ESP_wait_for
             _ESP_read
               _ESP_process_message
                 _strstr
                   _strchr
                   _strlen
                   _strncmp
               _EUSART_Read
           ___awdiv
           ___lbmod
           __puts
             _EUSART_Write
             _EUSART_is_tx_ready
           _write
             _EUSART_Write
             _EUSART_is_tx_ready
         _TMR1_StartTimer
         _TMR1_StopTimer
         _toggle_format
           _ESP_write
             _ESP_wait_for
               _ESP_read
                 _ESP_process_message
                   _strstr
                     _strchr
                     _strlen
                     _strncmp
                 _EUSART_Read
             ___awdiv
             ___lbmod
             __puts
               _EUSART_Write
               _EUSART_is_tx_ready
             _write
               _EUSART_Write
               _EUSART_is_tx_ready
       _strstr *
         _strchr
         _strlen
         _strncmp
     _ESP_read
       _ESP_process_message
         _strstr
           _strchr
           _strlen
           _strncmp
       _EUSART_Read
   _EUSART_is_rx_ready
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCAF4_SetInterruptHandler
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _WDT_Initialize
   _logger_initialize
     _ADC_SelectChannel
     _ESP_Set_application_handler
     _IOCAF4_SetInterruptHandler
     _TMR1_SetInterruptHandler
     _TMR1_StopTimer
   _process_ioc
     _ESP_wait_for
       _ESP_read
         _ESP_process_message
           _strstr
             _strchr
             _strlen
             _strncmp
         _EUSART_Read
     _ESP_write
       _ESP_wait_for
         _ESP_read
           _ESP_process_message
             _strstr
               _strchr
               _strlen
               _strncmp
           _EUSART_Read
       ___awdiv
       ___lbmod
       __puts
         _EUSART_Write
         _EUSART_is_tx_ready
       _write
         _EUSART_Write
         _EUSART_is_tx_ready
   _process_message
     _ADC_StartConversion
     _ESP_write
       _ESP_wait_for
         _ESP_read
           _ESP_process_message
             _strstr
               _strchr
               _strlen
               _strncmp
           _EUSART_Read
       ___awdiv
       ___lbmod
       __puts
         _EUSART_Write
         _EUSART_is_tx_ready
       _write
         _EUSART_Write
         _EUSART_is_tx_ready
     _TMR1_StartTimer
     _TMR1_StopTimer
     _toggle_format
       _ESP_write
         _ESP_wait_for
           _ESP_read
             _ESP_process_message
               _strstr
                 _strchr
                 _strlen
                 _strncmp
             _EUSART_Read
         ___awdiv
         ___lbmod
         __puts
           _EUSART_Write
           _EUSART_is_tx_ready
         _write
           _EUSART_Write
           _EUSART_is_tx_ready
   _read_analog
     _ESP_wait_for
       _ESP_read
         _ESP_process_message
           _strstr
             _strchr
             _strlen
             _strncmp
         _EUSART_Read
     _ESP_write
       _ESP_wait_for
         _ESP_read
           _ESP_process_message
             _strstr
               _strchr
               _strlen
               _strncmp
           _EUSART_Read
       ___awdiv
       ___lbmod
       __puts
         _EUSART_Write
         _EUSART_is_tx_ready
       _write
         _EUSART_Write
         _EUSART_is_tx_ready
     ___lmul
     __sprintf
       ___lwdiv
       ___lwmod

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _ADC_GetConversionResult *
   _ADC_ISR *
   _EUSART_Receive_ISR *
   _EUSART_Transmit_ISR *
   _PIN_MANAGER_IOC *
     _IOCAF4_ISR
       Absolute function(Fake) *
       _IOCAF4_DefaultInterruptHandler *
       __IOC_Ready *
   _TMR1_ISR *
     Absolute function(Fake) *
     _TMR1_DefaultInterruptHandler *
     _TMR1_WriteTimer *
     __TMR1_Ready *
       i1_ADC_StartConversion

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      70       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     20      4E       6       97.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0      16       8       68.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      70       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Wed Aug  8 11:58:53 2018

                ?_EUSART_SetRxInterruptHandler 0072                                    __CFG_CP$OFF 0000  
                                           PL2 0116                                             PL4 041C  
                                           PL6 0122                                             PL8 012A  
                                 ___awdiv@sign 0077                                            PL10 0095  
                                          PL12 01B5                                            PL14 0130  
                                          PL16 009C                                            PL18 01BC  
                                          l211 05B4                                            l159 03FE  
                                          l464 0359                                            l561 023A  
                                          l564 0215                                            l484 03D7  
                                          l567 0218                                            l688 02CD  
                                 __CFG_CPD$OFF 0000                                _timer1ReloadVal 0024  
                              __end_of_ADC_ISR 0661                                   __CFG_BORV$LO 0000  
                                          wreg 0009                                   __CFG_IESO$ON 0000  
                                 ?_EUSART_Read 0070                                   __CFG_LVP$OFF 0000  
                               ?_toggle_format 0070                                           l1133 0534  
                                         l2205 0442                                           l2143 03F4  
                                         l3015 007E                                           l2057 0471  
                                         l3113 0248                                           l2241 01CB  
                                         l3033 052B                                           l3041 0209  
                                         l3121 03BC                                           l3115 024E  
                                         l3027 051F                                           l3043 020A  
                                         l3123 03BF                                           l2403 02C0  
                                         l2157 040B                                           l3053 0212  
                                         l3045 020B                                           l2247 01D4  
                                         l3039 0202                                           l3231 03C9  
                                         l3119 03BB                                           l3127 03C1  
                                         l2407 02C4                                           l2423 038F  
                                         l2329 064C                                           l2273 01FC  
                                         l2265 01F0                                           l2257 01E1  
                                         l2281 045D                                           l3233 0223  
                                         l3049 020E                                           l3145 00B6  
                                         l2195 040F                                           l2187 040E  
                                         l3059 021B                                           l3083 04B4  
                                         l3163 0495                                           l2419 0383  
                                         l2427 0393                                           l2189 0413  
                                         l2269 01F4                                           l2445 0335  
                                         l3181 03E7                                           l3173 03DE  
                                         l2199 0446                                           l2289 046D  
                                         l3177 03E3                                           l2395 02B1  
                                         l3187 03EE                                           l2815 04CE  
                                         l2567 0632                                           l2817 04D9  
                                         l2841 01AA                                           l2833 01A4  
                                         l2585 02D7                                           l2835 018C  
                                         l2853 053D                                           l2871 027F  
                                         l2947 0304                                           l2869 0298  
                                         l2957 030D                                           l2981 0368  
                                         l2991 0373                                           l2993 0050  
                                         STR_1 05CA                                           STR_2 05CF  
                                         STR_3 05A4                                           STR_4 05FE  
                                         STR_5 062D                                           STR_6 05D2  
                                         STR_7 05F0                                           STR_8 0628  
                                         STR_9 0555                                           u1315 0460  
                                         _LATA 010C                                           _LATC 010E  
                                         u1435 0389                                           u2157 0241  
                                         u1285 01E9                                           u2095 00D3  
                                         u1395 02B9                                           i1l81 0031  
                                         i1l74 000B                                           i1l77 0015  
                                         i1l86 003C                                           i1l79 0025  
                                         _PLLR 04D6                                           _WPUA 020C  
                                         _WPUC 020E                                   __CFG_WRT$OFF 0000  
                                __CFG_FCMEN$ON 0000                                           _main 03D8  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                                         btemp 007E                                    ?_ESP_config 0070  
                                __CFG_BOREN$ON 0000                                     __IOC_Ready 05F7  
                                         start 003E                     ??_TMR1_SetInterruptHandler 0074  
                                __CFG_MCLRE$ON 0000                            __end_of__TMR1_Ready 063F  
                           _ESP_wait_exception 0032                                  __CFG_PLLEN$ON 0000  
                                ?_EUSART_Write 0070                 __size_of_OSCILLATOR_Initialize 000A  
                          __size_of_IOCAF4_ISR 000D                  __end_of_OSCILLATOR_Initialize 05B8  
                           __size_of_ESP_write 0045                                          ?_main 0070  
                              __end_of___awdiv 0201                                          STR_10 0313  
                                        STR_11 0563                                          STR_20 05E2  
                                        STR_12 050B                                          STR_13 0657  
                                        STR_21 0643                                          STR_22 0646  
                                        STR_14 058C                                          STR_15 0655  
                                        STR_16 0332                                          STR_17 0332  
                                __CFG_WDTE$OFF 0000                                          STR_18 0637  
                                        STR_19 05E9                                __end_of___lbmod 0471  
                              _TMR1_StartTimer 065B                                ___awdiv@divisor 0072  
                                        _T1CON 0018                                __end_of___lwdiv 02C9  
                                        i1l165 04F3                                __end_of___lwmod 0398  
                              ___awdiv@counter 0076                   ?_ESP_Set_application_handler 0072  
                                        _RCREG 0199                                          _RCSTA 019D  
                             __end_of_ESP_read 0313                                          _TMR1H 0017  
                                        _TMR1L 0016                                          _TRISA 008C  
                                        _TRISC 008E                         ?i1_ADC_StartConversion 0070  
                                        _TXREG 019A                                          _TXSTA 019E  
             __size_of_ADC_GetConversionResult 0009                                   ?_read_analog 0070  
                          ___lmul@multiplicand 0076                               __end_of_TMR1_ISR 0555  
                      __end_of_PIN_MANAGER_IOC 0643                                          __puts 040E  
                               _WDT_Initialize 0649                                          _write 0441  
                      __end_of_TMR1_Initialize 04B4                                          pclath 000A  
                                        status 0003                                          wtemp0 007E  
                   __size_of_logger_initialize 0019                                __end_of_strncmp 01B5  
                              _TMR1_WriteTimer 0571                                __initialization 003F  
                                 __end_of_main 03F3                                 ??_EUSART_Write 0072  
                                    ??_ADC_ISR 0070                    ?_INTERRUPT_InterruptManager 0070  
               ??_EUSART_SetRxInterruptHandler 0074                                         ??_main 007A  
                          __size_of_ESP_config 0036                        _IOCAF4_InterruptHandler 006C  
                       __end_of_WDT_Initialize 064C                  ??_ESP_Set_application_handler 0074  
                              ??_toggle_format 007A                                         ?__puts 0073  
                                       _ADCON0 009D                                         _ADCON1 009E  
                                       _ADRESH 009C                                         _ADRESL 009B  
                             ___awdiv@dividend 0074                                         _APFCON 011D  
                                       _ANSELA 018C                                         _ANSELC 018E  
                   __end_of_EUSART_is_rx_ready 0652                                         _BORCON 0116  
                                       _T1GCON 0019                                         ?_write 0073  
                      TMR1_WriteTimer@timerVal 0070                                         i1l2541 057A  
                                       i1l2543 057F                                         i1l2627 04FB  
                                       i1l2547 0589                     __end_of_EUSART_is_tx_ready 065F  
                                       _OSCCON 0099                                         _SPBRGH 019C  
                                       _SPBRGL 019B                                    __TMR1_Ready 063B  
                                       _WDTCON 0097                              __end_of_ESP_write 0095  
                                  ?__IOC_Ready 0070                                 __CFG_PWRTE$OFF 0000  
                             ??_ESP_initialize 0074           __end_of_TMR1_DefaultInterruptHandler 0663  
        __size_of_TMR1_DefaultInterruptHandler 0001                                  _esp_read_data 0038  
                 _TMR1_DefaultInterruptHandler 0662                               __end_of__sprintf 0116  
                                       ___lmul 02C9                        __end_of_TMR1_StartTimer 065D  
                                    ??___awdiv 0076                                 __CFG_STVREN$ON 0000  
                                    ??___lbmod 0073                                      ??___lwdiv 0076  
                                    ??___lwmod 0076                            _EUSART_Transmit_ISR 04E0  
                             ___awdiv@quotient 0078                                         _strchr 0533  
                                       _strlen 04CA                                         _strstr 0271  
                              ?_WDT_Initialize 0070                       ESP_process_rx_data@index 005F  
   IOCAF4_SetInterruptHandler@InterruptHandler 0072       TMR1_SetInterruptHandler@InterruptHandler 0072  
                             ?_PIN_MANAGER_IOC 0070                                         write@i 0078  
                      __end_of_TMR1_WriteTimer 057F                                      ??_strncmp 0076  
                                 ??_IOCAF4_ISR 0070                           ?_EUSART_Transmit_ISR 0070  
                                 ?_process_ioc 0070                               ?_TMR1_Initialize 0070  
                         __size_of_EUSART_Read 0017                              _SYSTEM_Initialize 060A  
                              ___lbmod@divisor 0072                        __end_of__initialization 004D  
                                ?_ESP_wait_for 0070                                ___lbmod@counter 0075  
                           read_analog@adc_val 006A                             ?_SYSTEM_Initialize 0070  
         __size_of_ESP_Set_application_handler 0005           __end_of_EUSART_SetTxInterruptHandler 0622  
        __size_of_EUSART_SetTxInterruptHandler 0006                   _EUSART_SetTxInterruptHandler 061C  
                                    ?_ESP_read 0070                   __size_of_ADC_StartConversion 0003  
                                  ESP_read@ret 0054                                 __pcstackCOMMON 0070  
                          ??_SYSTEM_Initialize 0074                                      ?_TMR1_ISR 0070  
                ?_TMR1_DefaultInterruptHandler 0070                                  __end_of__puts 041C  
       __end_of_IOCAF4_DefaultInterruptHandler 0664        __size_of_IOCAF4_DefaultInterruptHandler 0001  
               _IOCAF4_DefaultInterruptHandler 0663                                  __end_of_write 0459  
                                   __end_ofPL2 0122                                     __end_ofPL4 0428  
                                   __end_ofPL6 012A                                     __end_ofPL8 0130  
                           __end_of_IOCAF4_ISR 058C                        _ADC_GetConversionResult 05C1  
                               _OPTION_REGbits 0095                            __size_of__IOC_Ready 0007  
                     __size_of_process_message 003A                                    ESP_write@pt 0057  
                                      ??__puts 0075                           __size_of_read_analog 004D  
                    __end_of_SYSTEM_Initialize 0610                          ??_EUSART_Transmit_ISR 0070  
                                      ??_write 0076                                     __pbssBANK0 0020  
                                   __pbssBANK1 00A0                                 ??_ESP_wait_for 007A  
                         __end_of_EUSART_Write 040E                                   ??_ESP_config 0057  
                  __size_of_EUSART_Receive_ISR 0015                                     ??_ESP_read 0053  
                                   __pmaintext 03D8                  ?_EUSART_SetTxInterruptHandler 0072  
             _EUSART_TxDefaultInterruptHandler 002A                                        ?___lmul 0072  
                 __size_of_ESP_process_message 0047                   __size_of_ESP_message_handler 0020  
                             ?_TMR1_StartTimer 0070                                     ??_TMR1_ISR 0072  
                                   __pintentry 0004                   __size_of_ESP_process_rx_data 0016  
                                      _ADC_ISR 065F                                        _BAUDCON 019F  
                               ___lmul@product 004C                        ??i1_ADC_StartConversion 0070  
                      __size_of_ADC_Initialize 0009                                        ?_strchr 0072  
                                      ?_strlen 0072                        __size_of_TMR1_StopTimer 0002  
                                      ?_strstr 0050                                  _eusartRxCount 0033  
                           __end_of_ESP_config 0271                                        _OSCTUNE 0098  
                                    ?__sprintf 004C                               ?_TMR1_WriteTimer 0070  
                                    _ADC_value 0026                                      _ADC_state 0037  
                                      ___awdiv 01C1                                __size_of___lmul 0025  
                                      ___lbmod 0459                                        ___lwdiv 02A4  
                                      ___lwmod 0378                      ??_ADC_GetConversionResult 0072  
                                      __ptext1 00A1                                        __ptext2 00EE  
                                      __ptext3 0378                                        __ptext4 02A4  
                                      __ptext5 02C9                                        __ptext6 0488  
                                      __ptext7 0428                                        __ptext8 0598  
                                      __ptext9 060A                 ??_TMR1_DefaultInterruptHandler 0070  
                              __size_of_strchr 0012                                __size_of_strlen 0016  
                                    _T1CONbits 0018                         ESP_process_message@aux 0052  
                              __size_of_strstr 0033                          _OSCILLATOR_Initialize 05AE  
            __size_of_TMR1_SetInterruptHandler 0006                       ??_PIN_MANAGER_Initialize 0074  
                    ?_TMR1_SetInterruptHandler 0072                                      _IOCAFbits 0393  
                                    _IOCANbits 0392                                      _IOCAPbits 0391  
                   __size_of_SYSTEM_Initialize 0006                                        clrloop0 0605  
                                   ??__sprintf 0079                                        _strncmp 017D  
                       ESP_message_handler@ret 0063                           end_of_initialization 004D  
                                 ?__TMR1_Ready 0070                              ??_process_message 005D  
                         __size_of_process_ioc 0016                                   ??__IOC_Ready 0070  
                            _EUSART_Initialize 0335                                      _IOC_value 002C  
                                    _IOC_state 0031                             ?_EUSART_Initialize 0070  
                                    _ESP_write 0050                                      _RCSTAbits 019D  
                           _EUSART_is_rx_ready 064F                             _EUSART_is_tx_ready 065D  
                                 __sprintf@aux 004E                                   __sprintf@val 004C  
                                      strchr@c 0072                                        strchr@s 0074  
                                      strlen@a 0075                                        strlen@s 0072  
                          ??_EUSART_Initialize 0074                                        write@pt 0073  
                             ??_WDT_Initialize 0072                 ??_EUSART_SetTxInterruptHandler 0074  
                         __end_of_ESP_wait_for 0378                                        strstr@h 0079  
                                      strstr@n 0050                                      _PORTAbits 000C  
                          ?_EUSART_is_rx_ready 0070                            ?_EUSART_is_tx_ready 0070  
                             __CFG_FOSC$INTOSC 0000                               ___lbmod@dividend 0074  
                           __end_of__IOC_Ready 05FE                          __size_of_EUSART_Write 001B  
                          _ADC_StartConversion 064C                   ??_IOCAF4_SetInterruptHandler 0074  
                        __end_of_toggle_format 0533                                    ___lbmod@rem 0076  
                    __end_of_EUSART_Initialize 0357                           ??_EUSART_is_rx_ready 0072  
                         ??_EUSART_is_tx_ready 0072                                     ?_ESP_write 0057  
                         ?_ADC_StartConversion 0070                              __size_of_ESP_read 0025  
                 _ESP_external_message_handler 0020                                 __end_of___lmul 02EE  
ESP_Set_application_handler@applicationHandler 0072                                   _EUSART_Write 03F3  
                            __size_of_TMR1_ISR 0010                                 _ADC_Initialize 05B8  
          __size_of_IOCAF4_SetInterruptHandler 0006                                 _TMR1_StopTimer 0659  
                       ?_OSCILLATOR_Initialize 0070            __end_of_ESP_Set_application_handler 0637  
                  _ESP_Set_application_handler 0632                         ESP_process_rx_data@aux 0060  
                               __end_of_strchr 0545                                 __end_of_strlen 04E0  
                               __end_of_strstr 02A4                                    __end_ofPL10 009C  
                                  __end_ofPL12 01BC                                    __end_ofPL14 0136  
                                  __end_ofPL16 00A1                                    __end_ofPL18 01C1  
                          start_initialization 003F                __size_of_PIN_MANAGER_Initialize 0020  
                                ??_EUSART_Read 0072                            _ESP_process_message 0136  
                          _ESP_message_handler 03B8   EUSART_SetRxInterruptHandler@interruptHandler 0072  
 EUSART_SetTxInterruptHandler@interruptHandler 0072                            _ESP_process_rx_data 04B4  
                     __size_of_PIN_MANAGER_IOC 0004                                ESP_wait_for@ret 0056  
                        ??_ADC_StartConversion 0072                       __size_of_TMR1_Initialize 0016  
                         ?_ESP_process_message 0070                                       ??___lmul 007A  
                         ?_ESP_message_handler 0070                                   ESP_write@aux 005B  
                                 ESP_write@res 005A                         __end_of_ADC_Initialize 05C1  
                       __end_of_TMR1_StopTimer 065B                           ?_ESP_process_rx_data 0070  
                                     ?_ADC_ISR 0070                                       ??_strchr 0074  
                                     ??_strlen 0074                        __size_of_ESP_initialize 0008  
                                     ??_strstr 0077                 __size_ofi1_ADC_StartConversion 0003  
                __end_ofi1_ADC_StartConversion 0655                    __end_of_EUSART_Transmit_ISR 04F6  
                                ??_read_analog 005C                                    __pbssCOMMON 007A  
                                    ___latbits 0000        __end_of_ESP_default_application_handler 0662  
     __size_of_ESP_default_application_handler 0001               ?_ESP_default_application_handler 005C  
            ??_ESP_default_application_handler 007A                _ESP_default_application_handler 0661  
                                __pcstackBANK0 004C                     __end_of_EUSART_Receive_ISR 050B  
                   __size_of_EUSART_Initialize 0022                              __size_of__sprintf 0028  
             _EUSART_RxDefaultInterruptHandler 0028                            __end_of_EUSART_Read 0488  
                              read_analog@aux1 0060                                      __pnvBANK0 006C  
                              read_analog@mess 0064                           __size_of__TMR1_Ready 0004  
                             ___lwdiv@dividend 0074                         _PIN_MANAGER_Initialize 0398  
                                  ??_ESP_write 007A                          ??_ESP_process_message 007A  
                         EUSART_Read@readValue 0072                          ??_ESP_message_handler 0061  
                        __size_of_ESP_wait_for 0021                              _ADC_SelectChannel 0598  
             __end_of_TMR1_SetInterruptHandler 0616                                       ?___awdiv 0072  
                                     ?___lbmod 0072                          ??_ESP_process_rx_data 007A  
                                     ?___lwdiv 0072                                       ?___lwmod 0072  
                              ?_ADC_Initialize 0070                                   _eusartRxHead 0035  
                              ?_TMR1_StopTimer 0070                             ?_ADC_SelectChannel 0070  
                                 _eusartTxHead 007B                                   _eusartRxTail 0034  
                                 _eusartTxTail 0036                   ??_INTERRUPT_InterruptManager 0072  
                      _eusartTxBufferRemaining 007A                       __size_of_TMR1_StartTimer 0002  
                          ??_ADC_SelectChannel 0072                                _process_message 0201  
           __end_of_IOCAF4_SetInterruptHandler 061C                     _IOCAF4_SetInterruptHandler 0616  
                             ___lwdiv@quotient 0076                                 __size_of__puts 000E  
                                     ?_strncmp 0072                                 __size_of_write 0018  
                          __end_of_read_analog 00EE                                 _eusartRxBuffer 00A0  
                               _eusartTxBuffer 00AC                                   _ESP_wait_for 0357  
                                     _LATAbits 010C                                      clear_ram0 0604  
                                  __puts@index 0078                                       _PIE1bits 0091  
                    __end_of_ADC_SelectChannel 05A4                       __size_of_TMR1_WriteTimer 000E  
          __size_of_INTERRUPT_InterruptManager 003A                                       _ESP_read 02EE  
                                  write@lenght 0075                                       _PIR1bits 0011  
                                     _TMR1_ISR 0545                              ??_PIN_MANAGER_IOC 0070  
                            ??_TMR1_Initialize 0074                               __size_of_ADC_ISR 0002  
                                   _ADCON0bits 009D                       ADC_SelectChannel@channel 0073  
                                  _EUSART_Read 0471                              ___lmul@multiplier 0072  
                                ??_process_ioc 007A                                    _esp_channel 002F  
                     ?_ADC_GetConversionResult 0070                        ??_OSCILLATOR_Initialize 0072  
                             __size_of___awdiv 0040                               __size_of___lbmod 0018  
                             __size_of___lwdiv 0025                        __end_of_process_message 023B  
                             __size_of___lwmod 0020                       _TMR1_SetInterruptHandler 0610  
                               _ESP_initialize 05DA                          _TMR1_InterruptHandler 0022  
                                  _read_analog 00A1                            _esp_read_data_index 0030  
                              ___lwdiv@divisor 0072                                ___lwdiv@counter 0078  
                                     __ptext10 0649                                       __ptext11 049E  
                                     __ptext20 03B8                                       __ptext12 0610  
                                     __ptext21 04B4                                       __ptext13 0398  
                                     __ptext30 065B                                       __ptext22 0661  
                                     __ptext14 0616                                       __ptext31 064C  
                                     __ptext23 0201                                       __ptext15 05AE  
                                     __ptext40 02EE                                       __ptext32 05DA  
                                     __ptext24 051F                                       __ptext16 0335  
                                     __ptext41 0471                                       __ptext33 0632  
                                     __ptext25 0050                                       __ptext17 061C  
                                     __ptext50 063B                                       __ptext42 0136  
                                     __ptext34 023B                                       __ptext26 0441  
                                     __ptext18 0622                                       __ptext51 0652  
                                     __ptext43 0271                                       __ptext35 040E  
                                     __ptext27 0459                                       __ptext19 05B8  
                                     __ptext60 05C1                                       __ptext52 0571  
                                     __ptext44 017D                                       __ptext36 065D  
                                     __ptext28 01C1                                       __ptext53 063F  
                                     __ptext45 04CA                                       __ptext37 03F3  
                                     __ptext29 0659                                       __ptext54 057F  
                                     __ptext46 0533                                       __ptext38 064F  
                                     __ptext55 0663                                       __ptext39 0357  
                                     __ptext56 05F7                                       __ptext48 0545  
                                     __ptext57 04E0                                       __ptext49 0662  
                                     __ptext58 04F6                                       __ptext59 065F  
                                     __puts@pt 0073                         process_message@message 005C  
                                     __sprintf 00EE                              ??_TMR1_StartTimer 0072  
                                   _IOCAF4_ISR 057F                               __size_of_strncmp 0038  
                               _message_format 002E                    __size_of_EUSART_is_rx_ready 0003  
                                __size_of_main 001B                                ESP_write@length 0059  
                  __size_of_EUSART_is_tx_ready 0002                     __size_of_ADC_SelectChannel 000C  
                          __end_of_process_ioc 049E                                       int$flags 007E  
                       __size_of_toggle_format 0014                         __end_of_ESP_initialize 05E2  
           __end_of_INTERRUPT_InterruptManager 003E                     _INTERRUPT_InterruptManager 0004  
                            ??_TMR1_WriteTimer 0072                                     _INTCONbits 000B  
                               __pstringtext10 05E9                                 __pstringtext11 05F0  
                               __pstringtext20 0000                                 __pstringtext12 05FE  
                               __pstringtext13 0628                                 __pstringtext14 062D  
                               __pstringtext15 0637                                 __pstringtext16 0643  
                               __pstringtext17 0646                                 __pstringtext18 0655  
                               __pstringtext19 0657            ESP_default_application_handler@data 005C  
                      __size_of_WDT_Initialize 0003                                       intlevel1 0000  
                  __end_of_ADC_StartConversion 064F                               ___lwmod@dividend 0074  
                      ?_PIN_MANAGER_Initialize 0070                __end_of_ADC_GetConversionResult 05CA  
                            __CFG_CLKOUTEN$OFF 0000                                     _ESP_config 023B  
                                    strncmp@_l 004C                                      strncmp@_r 0072  
                             ??_ADC_Initialize 0072           __end_of_EUSART_SetRxInterruptHandler 0628  
        __size_of_EUSART_SetRxInterruptHandler 0006                   _EUSART_SetRxInterruptHandler 0622  
                            _logger_initialize 0428                               ??_TMR1_StopTimer 0072  
                           ?_logger_initialize 0070                             _EUSART_Receive_ISR 04F6  
                              ?_ESP_initialize 0070                               ?_process_message 005C  
                                __sprintf@mess 0050                                  __pstringtext1 0313  
                                __pstringtext2 050B                                  __pstringtext3 0555  
                                __pstringtext4 0563                                  __pstringtext5 058C  
                                __pstringtext6 05A4                                  __pstringtext7 05CA  
                                __pstringtext8 05D2                                  __pstringtext9 05E2  
                          ??_logger_initialize 0074                            ?_EUSART_Receive_ISR 0070  
                              ___lwmod@divisor 0072                                ___lwmod@counter 0076  
                                     strncmp@l 004F                                       strncmp@n 0074  
                                     strncmp@r 004D                           ESP_wait_for@esp_mess 0055  
                        i1_ADC_StartConversion 0652                    ?_IOCAF4_SetInterruptHandler 0072  
                                     strstr@nl 0077                                  _toggle_format 051F  
                                  ?_IOCAF4_ISR 0070                             EUSART_Write@txData 0072  
                 __size_of_EUSART_Transmit_ISR 0016                                     _TMR1_state 002D  
               __end_of_PIN_MANAGER_Initialize 03B8                                    _process_ioc 0488  
                                ??__TMR1_Ready 0070               ??_IOCAF4_DefaultInterruptHandler 0070  
              ?_IOCAF4_DefaultInterruptHandler 0070                    __end_of_ESP_process_message 017D  
                  __end_of_ESP_message_handler 03D8                                _PIN_MANAGER_IOC 063F  
                    __end_of_logger_initialize 0441                           ??_EUSART_Receive_ISR 0070  
                  __end_of_ESP_process_rx_data 04CA                                _TMR1_Initialize 049E  
