

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Sat Aug  4 23:46:24 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16F1823
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	stringtext13,global,class=STRCODE,delta=2
    18                           	psect	stringtext14,global,class=STRCODE,delta=2
    19                           	psect	stringtext15,global,class=STRCODE,delta=2
    20                           	psect	stringtext16,global,class=STRCODE,delta=2
    21                           	psect	stringtext17,global,class=STRCODE,delta=2
    22                           	psect	stringtext18,global,class=STRCODE,delta=2
    23                           	psect	stringtext19,global,class=STRCODE,delta=2
    24                           	psect	stringtext20,global,class=STRCODE,delta=2
    25                           	psect	cinit,global,class=CODE,merge=1,delta=2
    26                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    27                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    28                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    29                           	psect	clrtext,global,class=CODE,delta=2
    30                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    31                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    32                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    33                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    34                           	psect	text1,local,class=CODE,merge=1,delta=2
    35                           	psect	text2,local,class=CODE,merge=1,delta=2
    36                           	psect	text3,local,class=CODE,merge=1,delta=2
    37                           	psect	text4,local,class=CODE,merge=1,delta=2
    38                           	psect	text5,local,class=CODE,merge=1,delta=2
    39                           	psect	text6,local,class=CODE,merge=1,delta=2
    40                           	psect	text7,local,class=CODE,merge=1,delta=2
    41                           	psect	text8,local,class=CODE,merge=1,delta=2
    42                           	psect	text9,local,class=CODE,merge=1,delta=2
    43                           	psect	text10,local,class=CODE,merge=1,delta=2
    44                           	psect	text11,local,class=CODE,merge=1,delta=2
    45                           	psect	text12,local,class=CODE,merge=1,delta=2
    46                           	psect	text13,local,class=CODE,merge=1,delta=2
    47                           	psect	text14,local,class=CODE,merge=1,delta=2
    48                           	psect	text15,local,class=CODE,merge=1,delta=2
    49                           	psect	text16,local,class=CODE,merge=1,delta=2
    50                           	psect	text17,local,class=CODE,merge=1,delta=2
    51                           	psect	text18,local,class=CODE,merge=1,delta=2
    52                           	psect	text19,local,class=CODE,merge=1,delta=2
    53                           	psect	text20,local,class=CODE,merge=1,delta=2
    54                           	psect	text21,local,class=CODE,merge=1,delta=2
    55                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    57                           	psect	text24,local,class=CODE,merge=1,delta=2
    58                           	psect	text25,local,class=CODE,merge=1,delta=2
    59                           	psect	text26,local,class=CODE,merge=1,delta=2
    60                           	psect	text27,local,class=CODE,merge=1,delta=2
    61                           	psect	text28,local,class=CODE,merge=1,delta=2
    62                           	psect	text29,local,class=CODE,merge=1,delta=2
    63                           	psect	text30,local,class=CODE,merge=1,delta=2
    64                           	psect	text31,local,class=CODE,merge=1,delta=2
    65                           	psect	text32,local,class=CODE,merge=1,delta=2
    66                           	psect	text33,local,class=CODE,merge=1,delta=2
    67                           	psect	text34,local,class=CODE,merge=1,delta=2
    68                           	psect	text35,local,class=CODE,merge=1,delta=2
    69                           	psect	text36,local,class=CODE,merge=1,delta=2
    70                           	psect	text37,local,class=CODE,merge=1,delta=2
    71                           	psect	text38,local,class=CODE,merge=1,delta=2,group=2
    72                           	psect	text39,local,class=CODE,merge=1,delta=2,group=2
    73                           	psect	text40,local,class=CODE,merge=1,delta=2,group=2
    74                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
    75                           	psect	intentry,global,class=CODE,delta=2
    76                           	psect	text43,local,class=CODE,merge=1,delta=2
    77                           	psect	text44,local,class=CODE,merge=1,delta=2
    78                           	psect	text45,local,class=CODE,merge=1,delta=2
    79                           	psect	text46,local,class=CODE,merge=1,delta=2
    80                           	psect	text47,local,class=CODE,merge=1,delta=2
    81                           	psect	text48,local,class=CODE,merge=1,delta=2
    82                           	psect	text49,local,class=CODE,merge=1,delta=2
    83                           	psect	text50,local,class=CODE,merge=1,delta=2
    84                           	psect	text51,local,class=CODE,merge=1,delta=2
    85                           	psect	text52,local,class=CODE,merge=1,delta=2
    86                           	psect	text53,local,class=CODE,merge=1,delta=2
    87                           	psect	text54,local,class=CODE,merge=1,delta=2
    88                           	psect	text55,local,class=CODE,merge=1,delta=2
    89                           	dabs	1,0x7E,2
    90  0000                     
    91                           ; Version 2.00
    92                           ; Generated 27/05/2018 GMT
    93                           ; 
    94                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    95                           ; All rights reserved.
    96                           ; 
    97                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    98                           ; 
    99                           ; Redistribution and use in source and binary forms, with or without modification, are
   100                           ; permitted provided that the following conditions are met:
   101                           ; 
   102                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   103                           ;        conditions and the following disclaimer.
   104                           ; 
   105                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   106                           ;        of conditions and the following disclaimer in the documentation and/or other
   107                           ;        materials provided with the distribution.
   108                           ; 
   109                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   110                           ;        software without specific prior written permission.
   111                           ; 
   112                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   113                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   114                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   115                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   116                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   117                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   118                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   119                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   120                           ; 
   121                           ; 
   122                           ; Code-generator required, PIC16F1823 Definitions
   123                           ; 
   124                           ; SFR Addresses
   125  0000                     	;# 
   126  0001                     	;# 
   127  0002                     	;# 
   128  0003                     	;# 
   129  0004                     	;# 
   130  0005                     	;# 
   131  0006                     	;# 
   132  0007                     	;# 
   133  0008                     	;# 
   134  0009                     	;# 
   135  000A                     	;# 
   136  000B                     	;# 
   137  000C                     	;# 
   138  000E                     	;# 
   139  0011                     	;# 
   140  0012                     	;# 
   141  0015                     	;# 
   142  0016                     	;# 
   143  0016                     	;# 
   144  0017                     	;# 
   145  0018                     	;# 
   146  0019                     	;# 
   147  001A                     	;# 
   148  001B                     	;# 
   149  001C                     	;# 
   150  001E                     	;# 
   151  001F                     	;# 
   152  008C                     	;# 
   153  008E                     	;# 
   154  0091                     	;# 
   155  0092                     	;# 
   156  0095                     	;# 
   157  0096                     	;# 
   158  0097                     	;# 
   159  0098                     	;# 
   160  0099                     	;# 
   161  009A                     	;# 
   162  009B                     	;# 
   163  009B                     	;# 
   164  009C                     	;# 
   165  009D                     	;# 
   166  009E                     	;# 
   167  010C                     	;# 
   168  010E                     	;# 
   169  0111                     	;# 
   170  0112                     	;# 
   171  0113                     	;# 
   172  0114                     	;# 
   173  0115                     	;# 
   174  0116                     	;# 
   175  0117                     	;# 
   176  0118                     	;# 
   177  0119                     	;# 
   178  011A                     	;# 
   179  011B                     	;# 
   180  011D                     	;# 
   181  011D                     	;# 
   182  018C                     	;# 
   183  018E                     	;# 
   184  0191                     	;# 
   185  0191                     	;# 
   186  0192                     	;# 
   187  0193                     	;# 
   188  0193                     	;# 
   189  0193                     	;# 
   190  0194                     	;# 
   191  0195                     	;# 
   192  0196                     	;# 
   193  0199                     	;# 
   194  019A                     	;# 
   195  019B                     	;# 
   196  019B                     	;# 
   197  019B                     	;# 
   198  019B                     	;# 
   199  019C                     	;# 
   200  019C                     	;# 
   201  019D                     	;# 
   202  019E                     	;# 
   203  019F                     	;# 
   204  020C                     	;# 
   205  020E                     	;# 
   206  0211                     	;# 
   207  0211                     	;# 
   208  0212                     	;# 
   209  0212                     	;# 
   210  0213                     	;# 
   211  0213                     	;# 
   212  0214                     	;# 
   213  0214                     	;# 
   214  0215                     	;# 
   215  0215                     	;# 
   216  0215                     	;# 
   217  0216                     	;# 
   218  0216                     	;# 
   219  0217                     	;# 
   220  0217                     	;# 
   221  0291                     	;# 
   222  0291                     	;# 
   223  0292                     	;# 
   224  0293                     	;# 
   225  0294                     	;# 
   226  0295                     	;# 
   227  0295                     	;# 
   228  0296                     	;# 
   229  0391                     	;# 
   230  0392                     	;# 
   231  0393                     	;# 
   232  039A                     	;# 
   233  039C                     	;# 
   234  039D                     	;# 
   235  039E                     	;# 
   236  039F                     	;# 
   237  0FE4                     	;# 
   238  0FE5                     	;# 
   239  0FE6                     	;# 
   240  0FE7                     	;# 
   241  0FE8                     	;# 
   242  0FE9                     	;# 
   243  0FEA                     	;# 
   244  0FEB                     	;# 
   245  0FED                     	;# 
   246  0FEE                     	;# 
   247  0FEF                     	;# 
   248  0000                     	;# 
   249  0001                     	;# 
   250  0002                     	;# 
   251  0003                     	;# 
   252  0004                     	;# 
   253  0005                     	;# 
   254  0006                     	;# 
   255  0007                     	;# 
   256  0008                     	;# 
   257  0009                     	;# 
   258  000A                     	;# 
   259  000B                     	;# 
   260  000C                     	;# 
   261  000E                     	;# 
   262  0011                     	;# 
   263  0012                     	;# 
   264  0015                     	;# 
   265  0016                     	;# 
   266  0016                     	;# 
   267  0017                     	;# 
   268  0018                     	;# 
   269  0019                     	;# 
   270  001A                     	;# 
   271  001B                     	;# 
   272  001C                     	;# 
   273  001E                     	;# 
   274  001F                     	;# 
   275  008C                     	;# 
   276  008E                     	;# 
   277  0091                     	;# 
   278  0092                     	;# 
   279  0095                     	;# 
   280  0096                     	;# 
   281  0097                     	;# 
   282  0098                     	;# 
   283  0099                     	;# 
   284  009A                     	;# 
   285  009B                     	;# 
   286  009B                     	;# 
   287  009C                     	;# 
   288  009D                     	;# 
   289  009E                     	;# 
   290  010C                     	;# 
   291  010E                     	;# 
   292  0111                     	;# 
   293  0112                     	;# 
   294  0113                     	;# 
   295  0114                     	;# 
   296  0115                     	;# 
   297  0116                     	;# 
   298  0117                     	;# 
   299  0118                     	;# 
   300  0119                     	;# 
   301  011A                     	;# 
   302  011B                     	;# 
   303  011D                     	;# 
   304  011D                     	;# 
   305  018C                     	;# 
   306  018E                     	;# 
   307  0191                     	;# 
   308  0191                     	;# 
   309  0192                     	;# 
   310  0193                     	;# 
   311  0193                     	;# 
   312  0193                     	;# 
   313  0194                     	;# 
   314  0195                     	;# 
   315  0196                     	;# 
   316  0199                     	;# 
   317  019A                     	;# 
   318  019B                     	;# 
   319  019B                     	;# 
   320  019B                     	;# 
   321  019B                     	;# 
   322  019C                     	;# 
   323  019C                     	;# 
   324  019D                     	;# 
   325  019E                     	;# 
   326  019F                     	;# 
   327  020C                     	;# 
   328  020E                     	;# 
   329  0211                     	;# 
   330  0211                     	;# 
   331  0212                     	;# 
   332  0212                     	;# 
   333  0213                     	;# 
   334  0213                     	;# 
   335  0214                     	;# 
   336  0214                     	;# 
   337  0215                     	;# 
   338  0215                     	;# 
   339  0215                     	;# 
   340  0216                     	;# 
   341  0216                     	;# 
   342  0217                     	;# 
   343  0217                     	;# 
   344  0291                     	;# 
   345  0291                     	;# 
   346  0292                     	;# 
   347  0293                     	;# 
   348  0294                     	;# 
   349  0295                     	;# 
   350  0295                     	;# 
   351  0296                     	;# 
   352  0391                     	;# 
   353  0392                     	;# 
   354  0393                     	;# 
   355  039A                     	;# 
   356  039C                     	;# 
   357  039D                     	;# 
   358  039E                     	;# 
   359  039F                     	;# 
   360  0FE4                     	;# 
   361  0FE5                     	;# 
   362  0FE6                     	;# 
   363  0FE7                     	;# 
   364  0FE8                     	;# 
   365  0FE9                     	;# 
   366  0FEA                     	;# 
   367  0FEB                     	;# 
   368  0FED                     	;# 
   369  0FEE                     	;# 
   370  0FEF                     	;# 
   371  0000                     	;# 
   372  0001                     	;# 
   373  0002                     	;# 
   374  0003                     	;# 
   375  0004                     	;# 
   376  0005                     	;# 
   377  0006                     	;# 
   378  0007                     	;# 
   379  0008                     	;# 
   380  0009                     	;# 
   381  000A                     	;# 
   382  000B                     	;# 
   383  000C                     	;# 
   384  000E                     	;# 
   385  0011                     	;# 
   386  0012                     	;# 
   387  0015                     	;# 
   388  0016                     	;# 
   389  0016                     	;# 
   390  0017                     	;# 
   391  0018                     	;# 
   392  0019                     	;# 
   393  001A                     	;# 
   394  001B                     	;# 
   395  001C                     	;# 
   396  001E                     	;# 
   397  001F                     	;# 
   398  008C                     	;# 
   399  008E                     	;# 
   400  0091                     	;# 
   401  0092                     	;# 
   402  0095                     	;# 
   403  0096                     	;# 
   404  0097                     	;# 
   405  0098                     	;# 
   406  0099                     	;# 
   407  009A                     	;# 
   408  009B                     	;# 
   409  009B                     	;# 
   410  009C                     	;# 
   411  009D                     	;# 
   412  009E                     	;# 
   413  010C                     	;# 
   414  010E                     	;# 
   415  0111                     	;# 
   416  0112                     	;# 
   417  0113                     	;# 
   418  0114                     	;# 
   419  0115                     	;# 
   420  0116                     	;# 
   421  0117                     	;# 
   422  0118                     	;# 
   423  0119                     	;# 
   424  011A                     	;# 
   425  011B                     	;# 
   426  011D                     	;# 
   427  011D                     	;# 
   428  018C                     	;# 
   429  018E                     	;# 
   430  0191                     	;# 
   431  0191                     	;# 
   432  0192                     	;# 
   433  0193                     	;# 
   434  0193                     	;# 
   435  0193                     	;# 
   436  0194                     	;# 
   437  0195                     	;# 
   438  0196                     	;# 
   439  0199                     	;# 
   440  019A                     	;# 
   441  019B                     	;# 
   442  019B                     	;# 
   443  019B                     	;# 
   444  019B                     	;# 
   445  019C                     	;# 
   446  019C                     	;# 
   447  019D                     	;# 
   448  019E                     	;# 
   449  019F                     	;# 
   450  020C                     	;# 
   451  020E                     	;# 
   452  0211                     	;# 
   453  0211                     	;# 
   454  0212                     	;# 
   455  0212                     	;# 
   456  0213                     	;# 
   457  0213                     	;# 
   458  0214                     	;# 
   459  0214                     	;# 
   460  0215                     	;# 
   461  0215                     	;# 
   462  0215                     	;# 
   463  0216                     	;# 
   464  0216                     	;# 
   465  0217                     	;# 
   466  0217                     	;# 
   467  0291                     	;# 
   468  0291                     	;# 
   469  0292                     	;# 
   470  0293                     	;# 
   471  0294                     	;# 
   472  0295                     	;# 
   473  0295                     	;# 
   474  0296                     	;# 
   475  0391                     	;# 
   476  0392                     	;# 
   477  0393                     	;# 
   478  039A                     	;# 
   479  039C                     	;# 
   480  039D                     	;# 
   481  039E                     	;# 
   482  039F                     	;# 
   483  0FE4                     	;# 
   484  0FE5                     	;# 
   485  0FE6                     	;# 
   486  0FE7                     	;# 
   487  0FE8                     	;# 
   488  0FE9                     	;# 
   489  0FEA                     	;# 
   490  0FEB                     	;# 
   491  0FED                     	;# 
   492  0FEE                     	;# 
   493  0FEF                     	;# 
   494  0000                     	;# 
   495  0001                     	;# 
   496  0002                     	;# 
   497  0003                     	;# 
   498  0004                     	;# 
   499  0005                     	;# 
   500  0006                     	;# 
   501  0007                     	;# 
   502  0008                     	;# 
   503  0009                     	;# 
   504  000A                     	;# 
   505  000B                     	;# 
   506  000C                     	;# 
   507  000E                     	;# 
   508  0011                     	;# 
   509  0012                     	;# 
   510  0015                     	;# 
   511  0016                     	;# 
   512  0016                     	;# 
   513  0017                     	;# 
   514  0018                     	;# 
   515  0019                     	;# 
   516  001A                     	;# 
   517  001B                     	;# 
   518  001C                     	;# 
   519  001E                     	;# 
   520  001F                     	;# 
   521  008C                     	;# 
   522  008E                     	;# 
   523  0091                     	;# 
   524  0092                     	;# 
   525  0095                     	;# 
   526  0096                     	;# 
   527  0097                     	;# 
   528  0098                     	;# 
   529  0099                     	;# 
   530  009A                     	;# 
   531  009B                     	;# 
   532  009B                     	;# 
   533  009C                     	;# 
   534  009D                     	;# 
   535  009E                     	;# 
   536  010C                     	;# 
   537  010E                     	;# 
   538  0111                     	;# 
   539  0112                     	;# 
   540  0113                     	;# 
   541  0114                     	;# 
   542  0115                     	;# 
   543  0116                     	;# 
   544  0117                     	;# 
   545  0118                     	;# 
   546  0119                     	;# 
   547  011A                     	;# 
   548  011B                     	;# 
   549  011D                     	;# 
   550  011D                     	;# 
   551  018C                     	;# 
   552  018E                     	;# 
   553  0191                     	;# 
   554  0191                     	;# 
   555  0192                     	;# 
   556  0193                     	;# 
   557  0193                     	;# 
   558  0193                     	;# 
   559  0194                     	;# 
   560  0195                     	;# 
   561  0196                     	;# 
   562  0199                     	;# 
   563  019A                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019B                     	;# 
   567  019B                     	;# 
   568  019C                     	;# 
   569  019C                     	;# 
   570  019D                     	;# 
   571  019E                     	;# 
   572  019F                     	;# 
   573  020C                     	;# 
   574  020E                     	;# 
   575  0211                     	;# 
   576  0211                     	;# 
   577  0212                     	;# 
   578  0212                     	;# 
   579  0213                     	;# 
   580  0213                     	;# 
   581  0214                     	;# 
   582  0214                     	;# 
   583  0215                     	;# 
   584  0215                     	;# 
   585  0215                     	;# 
   586  0216                     	;# 
   587  0216                     	;# 
   588  0217                     	;# 
   589  0217                     	;# 
   590  0291                     	;# 
   591  0291                     	;# 
   592  0292                     	;# 
   593  0293                     	;# 
   594  0294                     	;# 
   595  0295                     	;# 
   596  0295                     	;# 
   597  0296                     	;# 
   598  0391                     	;# 
   599  0392                     	;# 
   600  0393                     	;# 
   601  039A                     	;# 
   602  039C                     	;# 
   603  039D                     	;# 
   604  039E                     	;# 
   605  039F                     	;# 
   606  0FE4                     	;# 
   607  0FE5                     	;# 
   608  0FE6                     	;# 
   609  0FE7                     	;# 
   610  0FE8                     	;# 
   611  0FE9                     	;# 
   612  0FEA                     	;# 
   613  0FEB                     	;# 
   614  0FED                     	;# 
   615  0FEE                     	;# 
   616  0FEF                     	;# 
   617  0000                     	;# 
   618  0001                     	;# 
   619  0002                     	;# 
   620  0003                     	;# 
   621  0004                     	;# 
   622  0005                     	;# 
   623  0006                     	;# 
   624  0007                     	;# 
   625  0008                     	;# 
   626  0009                     	;# 
   627  000A                     	;# 
   628  000B                     	;# 
   629  000C                     	;# 
   630  000E                     	;# 
   631  0011                     	;# 
   632  0012                     	;# 
   633  0015                     	;# 
   634  0016                     	;# 
   635  0016                     	;# 
   636  0017                     	;# 
   637  0018                     	;# 
   638  0019                     	;# 
   639  001A                     	;# 
   640  001B                     	;# 
   641  001C                     	;# 
   642  001E                     	;# 
   643  001F                     	;# 
   644  008C                     	;# 
   645  008E                     	;# 
   646  0091                     	;# 
   647  0092                     	;# 
   648  0095                     	;# 
   649  0096                     	;# 
   650  0097                     	;# 
   651  0098                     	;# 
   652  0099                     	;# 
   653  009A                     	;# 
   654  009B                     	;# 
   655  009B                     	;# 
   656  009C                     	;# 
   657  009D                     	;# 
   658  009E                     	;# 
   659  010C                     	;# 
   660  010E                     	;# 
   661  0111                     	;# 
   662  0112                     	;# 
   663  0113                     	;# 
   664  0114                     	;# 
   665  0115                     	;# 
   666  0116                     	;# 
   667  0117                     	;# 
   668  0118                     	;# 
   669  0119                     	;# 
   670  011A                     	;# 
   671  011B                     	;# 
   672  011D                     	;# 
   673  011D                     	;# 
   674  018C                     	;# 
   675  018E                     	;# 
   676  0191                     	;# 
   677  0191                     	;# 
   678  0192                     	;# 
   679  0193                     	;# 
   680  0193                     	;# 
   681  0193                     	;# 
   682  0194                     	;# 
   683  0195                     	;# 
   684  0196                     	;# 
   685  0199                     	;# 
   686  019A                     	;# 
   687  019B                     	;# 
   688  019B                     	;# 
   689  019B                     	;# 
   690  019B                     	;# 
   691  019C                     	;# 
   692  019C                     	;# 
   693  019D                     	;# 
   694  019E                     	;# 
   695  019F                     	;# 
   696  020C                     	;# 
   697  020E                     	;# 
   698  0211                     	;# 
   699  0211                     	;# 
   700  0212                     	;# 
   701  0212                     	;# 
   702  0213                     	;# 
   703  0213                     	;# 
   704  0214                     	;# 
   705  0214                     	;# 
   706  0215                     	;# 
   707  0215                     	;# 
   708  0215                     	;# 
   709  0216                     	;# 
   710  0216                     	;# 
   711  0217                     	;# 
   712  0217                     	;# 
   713  0291                     	;# 
   714  0291                     	;# 
   715  0292                     	;# 
   716  0293                     	;# 
   717  0294                     	;# 
   718  0295                     	;# 
   719  0295                     	;# 
   720  0296                     	;# 
   721  0391                     	;# 
   722  0392                     	;# 
   723  0393                     	;# 
   724  039A                     	;# 
   725  039C                     	;# 
   726  039D                     	;# 
   727  039E                     	;# 
   728  039F                     	;# 
   729  0FE4                     	;# 
   730  0FE5                     	;# 
   731  0FE6                     	;# 
   732  0FE7                     	;# 
   733  0FE8                     	;# 
   734  0FE9                     	;# 
   735  0FEA                     	;# 
   736  0FEB                     	;# 
   737  0FED                     	;# 
   738  0FEE                     	;# 
   739  0FEF                     	;# 
   740  0000                     	;# 
   741  0001                     	;# 
   742  0002                     	;# 
   743  0003                     	;# 
   744  0004                     	;# 
   745  0005                     	;# 
   746  0006                     	;# 
   747  0007                     	;# 
   748  0008                     	;# 
   749  0009                     	;# 
   750  000A                     	;# 
   751  000B                     	;# 
   752  000C                     	;# 
   753  000E                     	;# 
   754  0011                     	;# 
   755  0012                     	;# 
   756  0015                     	;# 
   757  0016                     	;# 
   758  0016                     	;# 
   759  0017                     	;# 
   760  0018                     	;# 
   761  0019                     	;# 
   762  001A                     	;# 
   763  001B                     	;# 
   764  001C                     	;# 
   765  001E                     	;# 
   766  001F                     	;# 
   767  008C                     	;# 
   768  008E                     	;# 
   769  0091                     	;# 
   770  0092                     	;# 
   771  0095                     	;# 
   772  0096                     	;# 
   773  0097                     	;# 
   774  0098                     	;# 
   775  0099                     	;# 
   776  009A                     	;# 
   777  009B                     	;# 
   778  009B                     	;# 
   779  009C                     	;# 
   780  009D                     	;# 
   781  009E                     	;# 
   782  010C                     	;# 
   783  010E                     	;# 
   784  0111                     	;# 
   785  0112                     	;# 
   786  0113                     	;# 
   787  0114                     	;# 
   788  0115                     	;# 
   789  0116                     	;# 
   790  0117                     	;# 
   791  0118                     	;# 
   792  0119                     	;# 
   793  011A                     	;# 
   794  011B                     	;# 
   795  011D                     	;# 
   796  011D                     	;# 
   797  018C                     	;# 
   798  018E                     	;# 
   799  0191                     	;# 
   800  0191                     	;# 
   801  0192                     	;# 
   802  0193                     	;# 
   803  0193                     	;# 
   804  0193                     	;# 
   805  0194                     	;# 
   806  0195                     	;# 
   807  0196                     	;# 
   808  0199                     	;# 
   809  019A                     	;# 
   810  019B                     	;# 
   811  019B                     	;# 
   812  019B                     	;# 
   813  019B                     	;# 
   814  019C                     	;# 
   815  019C                     	;# 
   816  019D                     	;# 
   817  019E                     	;# 
   818  019F                     	;# 
   819  020C                     	;# 
   820  020E                     	;# 
   821  0211                     	;# 
   822  0211                     	;# 
   823  0212                     	;# 
   824  0212                     	;# 
   825  0213                     	;# 
   826  0213                     	;# 
   827  0214                     	;# 
   828  0214                     	;# 
   829  0215                     	;# 
   830  0215                     	;# 
   831  0215                     	;# 
   832  0216                     	;# 
   833  0216                     	;# 
   834  0217                     	;# 
   835  0217                     	;# 
   836  0291                     	;# 
   837  0291                     	;# 
   838  0292                     	;# 
   839  0293                     	;# 
   840  0294                     	;# 
   841  0295                     	;# 
   842  0295                     	;# 
   843  0296                     	;# 
   844  0391                     	;# 
   845  0392                     	;# 
   846  0393                     	;# 
   847  039A                     	;# 
   848  039C                     	;# 
   849  039D                     	;# 
   850  039E                     	;# 
   851  039F                     	;# 
   852  0FE4                     	;# 
   853  0FE5                     	;# 
   854  0FE6                     	;# 
   855  0FE7                     	;# 
   856  0FE8                     	;# 
   857  0FE9                     	;# 
   858  0FEA                     	;# 
   859  0FEB                     	;# 
   860  0FED                     	;# 
   861  0FEE                     	;# 
   862  0FEF                     	;# 
   863  0000                     	;# 
   864  0001                     	;# 
   865  0002                     	;# 
   866  0003                     	;# 
   867  0004                     	;# 
   868  0005                     	;# 
   869  0006                     	;# 
   870  0007                     	;# 
   871  0008                     	;# 
   872  0009                     	;# 
   873  000A                     	;# 
   874  000B                     	;# 
   875  000C                     	;# 
   876  000E                     	;# 
   877  0011                     	;# 
   878  0012                     	;# 
   879  0015                     	;# 
   880  0016                     	;# 
   881  0016                     	;# 
   882  0017                     	;# 
   883  0018                     	;# 
   884  0019                     	;# 
   885  001A                     	;# 
   886  001B                     	;# 
   887  001C                     	;# 
   888  001E                     	;# 
   889  001F                     	;# 
   890  008C                     	;# 
   891  008E                     	;# 
   892  0091                     	;# 
   893  0092                     	;# 
   894  0095                     	;# 
   895  0096                     	;# 
   896  0097                     	;# 
   897  0098                     	;# 
   898  0099                     	;# 
   899  009A                     	;# 
   900  009B                     	;# 
   901  009B                     	;# 
   902  009C                     	;# 
   903  009D                     	;# 
   904  009E                     	;# 
   905  010C                     	;# 
   906  010E                     	;# 
   907  0111                     	;# 
   908  0112                     	;# 
   909  0113                     	;# 
   910  0114                     	;# 
   911  0115                     	;# 
   912  0116                     	;# 
   913  0117                     	;# 
   914  0118                     	;# 
   915  0119                     	;# 
   916  011A                     	;# 
   917  011B                     	;# 
   918  011D                     	;# 
   919  011D                     	;# 
   920  018C                     	;# 
   921  018E                     	;# 
   922  0191                     	;# 
   923  0191                     	;# 
   924  0192                     	;# 
   925  0193                     	;# 
   926  0193                     	;# 
   927  0193                     	;# 
   928  0194                     	;# 
   929  0195                     	;# 
   930  0196                     	;# 
   931  0199                     	;# 
   932  019A                     	;# 
   933  019B                     	;# 
   934  019B                     	;# 
   935  019B                     	;# 
   936  019B                     	;# 
   937  019C                     	;# 
   938  019C                     	;# 
   939  019D                     	;# 
   940  019E                     	;# 
   941  019F                     	;# 
   942  020C                     	;# 
   943  020E                     	;# 
   944  0211                     	;# 
   945  0211                     	;# 
   946  0212                     	;# 
   947  0212                     	;# 
   948  0213                     	;# 
   949  0213                     	;# 
   950  0214                     	;# 
   951  0214                     	;# 
   952  0215                     	;# 
   953  0215                     	;# 
   954  0215                     	;# 
   955  0216                     	;# 
   956  0216                     	;# 
   957  0217                     	;# 
   958  0217                     	;# 
   959  0291                     	;# 
   960  0291                     	;# 
   961  0292                     	;# 
   962  0293                     	;# 
   963  0294                     	;# 
   964  0295                     	;# 
   965  0295                     	;# 
   966  0296                     	;# 
   967  0391                     	;# 
   968  0392                     	;# 
   969  0393                     	;# 
   970  039A                     	;# 
   971  039C                     	;# 
   972  039D                     	;# 
   973  039E                     	;# 
   974  039F                     	;# 
   975  0FE4                     	;# 
   976  0FE5                     	;# 
   977  0FE6                     	;# 
   978  0FE7                     	;# 
   979  0FE8                     	;# 
   980  0FE9                     	;# 
   981  0FEA                     	;# 
   982  0FEB                     	;# 
   983  0FED                     	;# 
   984  0FEE                     	;# 
   985  0FEF                     	;# 
   986  0000                     	;# 
   987  0001                     	;# 
   988  0002                     	;# 
   989  0003                     	;# 
   990  0004                     	;# 
   991  0005                     	;# 
   992  0006                     	;# 
   993  0007                     	;# 
   994  0008                     	;# 
   995  0009                     	;# 
   996  000A                     	;# 
   997  000B                     	;# 
   998  000C                     	;# 
   999  000E                     	;# 
  1000  0011                     	;# 
  1001  0012                     	;# 
  1002  0015                     	;# 
  1003  0016                     	;# 
  1004  0016                     	;# 
  1005  0017                     	;# 
  1006  0018                     	;# 
  1007  0019                     	;# 
  1008  001A                     	;# 
  1009  001B                     	;# 
  1010  001C                     	;# 
  1011  001E                     	;# 
  1012  001F                     	;# 
  1013  008C                     	;# 
  1014  008E                     	;# 
  1015  0091                     	;# 
  1016  0092                     	;# 
  1017  0095                     	;# 
  1018  0096                     	;# 
  1019  0097                     	;# 
  1020  0098                     	;# 
  1021  0099                     	;# 
  1022  009A                     	;# 
  1023  009B                     	;# 
  1024  009B                     	;# 
  1025  009C                     	;# 
  1026  009D                     	;# 
  1027  009E                     	;# 
  1028  010C                     	;# 
  1029  010E                     	;# 
  1030  0111                     	;# 
  1031  0112                     	;# 
  1032  0113                     	;# 
  1033  0114                     	;# 
  1034  0115                     	;# 
  1035  0116                     	;# 
  1036  0117                     	;# 
  1037  0118                     	;# 
  1038  0119                     	;# 
  1039  011A                     	;# 
  1040  011B                     	;# 
  1041  011D                     	;# 
  1042  011D                     	;# 
  1043  018C                     	;# 
  1044  018E                     	;# 
  1045  0191                     	;# 
  1046  0191                     	;# 
  1047  0192                     	;# 
  1048  0193                     	;# 
  1049  0193                     	;# 
  1050  0193                     	;# 
  1051  0194                     	;# 
  1052  0195                     	;# 
  1053  0196                     	;# 
  1054  0199                     	;# 
  1055  019A                     	;# 
  1056  019B                     	;# 
  1057  019B                     	;# 
  1058  019B                     	;# 
  1059  019B                     	;# 
  1060  019C                     	;# 
  1061  019C                     	;# 
  1062  019D                     	;# 
  1063  019E                     	;# 
  1064  019F                     	;# 
  1065  020C                     	;# 
  1066  020E                     	;# 
  1067  0211                     	;# 
  1068  0211                     	;# 
  1069  0212                     	;# 
  1070  0212                     	;# 
  1071  0213                     	;# 
  1072  0213                     	;# 
  1073  0214                     	;# 
  1074  0214                     	;# 
  1075  0215                     	;# 
  1076  0215                     	;# 
  1077  0215                     	;# 
  1078  0216                     	;# 
  1079  0216                     	;# 
  1080  0217                     	;# 
  1081  0217                     	;# 
  1082  0291                     	;# 
  1083  0291                     	;# 
  1084  0292                     	;# 
  1085  0293                     	;# 
  1086  0294                     	;# 
  1087  0295                     	;# 
  1088  0295                     	;# 
  1089  0296                     	;# 
  1090  0391                     	;# 
  1091  0392                     	;# 
  1092  0393                     	;# 
  1093  039A                     	;# 
  1094  039C                     	;# 
  1095  039D                     	;# 
  1096  039E                     	;# 
  1097  039F                     	;# 
  1098  0FE4                     	;# 
  1099  0FE5                     	;# 
  1100  0FE6                     	;# 
  1101  0FE7                     	;# 
  1102  0FE8                     	;# 
  1103  0FE9                     	;# 
  1104  0FEA                     	;# 
  1105  0FEB                     	;# 
  1106  0FED                     	;# 
  1107  0FEE                     	;# 
  1108  0FEF                     	;# 
  1109  0000                     	;# 
  1110  0001                     	;# 
  1111  0002                     	;# 
  1112  0003                     	;# 
  1113  0004                     	;# 
  1114  0005                     	;# 
  1115  0006                     	;# 
  1116  0007                     	;# 
  1117  0008                     	;# 
  1118  0009                     	;# 
  1119  000A                     	;# 
  1120  000B                     	;# 
  1121  000C                     	;# 
  1122  000E                     	;# 
  1123  0011                     	;# 
  1124  0012                     	;# 
  1125  0015                     	;# 
  1126  0016                     	;# 
  1127  0016                     	;# 
  1128  0017                     	;# 
  1129  0018                     	;# 
  1130  0019                     	;# 
  1131  001A                     	;# 
  1132  001B                     	;# 
  1133  001C                     	;# 
  1134  001E                     	;# 
  1135  001F                     	;# 
  1136  008C                     	;# 
  1137  008E                     	;# 
  1138  0091                     	;# 
  1139  0092                     	;# 
  1140  0095                     	;# 
  1141  0096                     	;# 
  1142  0097                     	;# 
  1143  0098                     	;# 
  1144  0099                     	;# 
  1145  009A                     	;# 
  1146  009B                     	;# 
  1147  009B                     	;# 
  1148  009C                     	;# 
  1149  009D                     	;# 
  1150  009E                     	;# 
  1151  010C                     	;# 
  1152  010E                     	;# 
  1153  0111                     	;# 
  1154  0112                     	;# 
  1155  0113                     	;# 
  1156  0114                     	;# 
  1157  0115                     	;# 
  1158  0116                     	;# 
  1159  0117                     	;# 
  1160  0118                     	;# 
  1161  0119                     	;# 
  1162  011A                     	;# 
  1163  011B                     	;# 
  1164  011D                     	;# 
  1165  011D                     	;# 
  1166  018C                     	;# 
  1167  018E                     	;# 
  1168  0191                     	;# 
  1169  0191                     	;# 
  1170  0192                     	;# 
  1171  0193                     	;# 
  1172  0193                     	;# 
  1173  0193                     	;# 
  1174  0194                     	;# 
  1175  0195                     	;# 
  1176  0196                     	;# 
  1177  0199                     	;# 
  1178  019A                     	;# 
  1179  019B                     	;# 
  1180  019B                     	;# 
  1181  019B                     	;# 
  1182  019B                     	;# 
  1183  019C                     	;# 
  1184  019C                     	;# 
  1185  019D                     	;# 
  1186  019E                     	;# 
  1187  019F                     	;# 
  1188  020C                     	;# 
  1189  020E                     	;# 
  1190  0211                     	;# 
  1191  0211                     	;# 
  1192  0212                     	;# 
  1193  0212                     	;# 
  1194  0213                     	;# 
  1195  0213                     	;# 
  1196  0214                     	;# 
  1197  0214                     	;# 
  1198  0215                     	;# 
  1199  0215                     	;# 
  1200  0215                     	;# 
  1201  0216                     	;# 
  1202  0216                     	;# 
  1203  0217                     	;# 
  1204  0217                     	;# 
  1205  0291                     	;# 
  1206  0291                     	;# 
  1207  0292                     	;# 
  1208  0293                     	;# 
  1209  0294                     	;# 
  1210  0295                     	;# 
  1211  0295                     	;# 
  1212  0296                     	;# 
  1213  0391                     	;# 
  1214  0392                     	;# 
  1215  0393                     	;# 
  1216  039A                     	;# 
  1217  039C                     	;# 
  1218  039D                     	;# 
  1219  039E                     	;# 
  1220  039F                     	;# 
  1221  0FE4                     	;# 
  1222  0FE5                     	;# 
  1223  0FE6                     	;# 
  1224  0FE7                     	;# 
  1225  0FE8                     	;# 
  1226  0FE9                     	;# 
  1227  0FEA                     	;# 
  1228  0FEB                     	;# 
  1229  0FED                     	;# 
  1230  0FEE                     	;# 
  1231  0FEF                     	;# 
  1232  0000                     	;# 
  1233  0001                     	;# 
  1234  0002                     	;# 
  1235  0003                     	;# 
  1236  0004                     	;# 
  1237  0005                     	;# 
  1238  0006                     	;# 
  1239  0007                     	;# 
  1240  0008                     	;# 
  1241  0009                     	;# 
  1242  000A                     	;# 
  1243  000B                     	;# 
  1244  000C                     	;# 
  1245  000E                     	;# 
  1246  0011                     	;# 
  1247  0012                     	;# 
  1248  0015                     	;# 
  1249  0016                     	;# 
  1250  0016                     	;# 
  1251  0017                     	;# 
  1252  0018                     	;# 
  1253  0019                     	;# 
  1254  001A                     	;# 
  1255  001B                     	;# 
  1256  001C                     	;# 
  1257  001E                     	;# 
  1258  001F                     	;# 
  1259  008C                     	;# 
  1260  008E                     	;# 
  1261  0091                     	;# 
  1262  0092                     	;# 
  1263  0095                     	;# 
  1264  0096                     	;# 
  1265  0097                     	;# 
  1266  0098                     	;# 
  1267  0099                     	;# 
  1268  009A                     	;# 
  1269  009B                     	;# 
  1270  009B                     	;# 
  1271  009C                     	;# 
  1272  009D                     	;# 
  1273  009E                     	;# 
  1274  010C                     	;# 
  1275  010E                     	;# 
  1276  0111                     	;# 
  1277  0112                     	;# 
  1278  0113                     	;# 
  1279  0114                     	;# 
  1280  0115                     	;# 
  1281  0116                     	;# 
  1282  0117                     	;# 
  1283  0118                     	;# 
  1284  0119                     	;# 
  1285  011A                     	;# 
  1286  011B                     	;# 
  1287  011D                     	;# 
  1288  011D                     	;# 
  1289  018C                     	;# 
  1290  018E                     	;# 
  1291  0191                     	;# 
  1292  0191                     	;# 
  1293  0192                     	;# 
  1294  0193                     	;# 
  1295  0193                     	;# 
  1296  0193                     	;# 
  1297  0194                     	;# 
  1298  0195                     	;# 
  1299  0196                     	;# 
  1300  0199                     	;# 
  1301  019A                     	;# 
  1302  019B                     	;# 
  1303  019B                     	;# 
  1304  019B                     	;# 
  1305  019B                     	;# 
  1306  019C                     	;# 
  1307  019C                     	;# 
  1308  019D                     	;# 
  1309  019E                     	;# 
  1310  019F                     	;# 
  1311  020C                     	;# 
  1312  020E                     	;# 
  1313  0211                     	;# 
  1314  0211                     	;# 
  1315  0212                     	;# 
  1316  0212                     	;# 
  1317  0213                     	;# 
  1318  0213                     	;# 
  1319  0214                     	;# 
  1320  0214                     	;# 
  1321  0215                     	;# 
  1322  0215                     	;# 
  1323  0215                     	;# 
  1324  0216                     	;# 
  1325  0216                     	;# 
  1326  0217                     	;# 
  1327  0217                     	;# 
  1328  0291                     	;# 
  1329  0291                     	;# 
  1330  0292                     	;# 
  1331  0293                     	;# 
  1332  0294                     	;# 
  1333  0295                     	;# 
  1334  0295                     	;# 
  1335  0296                     	;# 
  1336  0391                     	;# 
  1337  0392                     	;# 
  1338  0393                     	;# 
  1339  039A                     	;# 
  1340  039C                     	;# 
  1341  039D                     	;# 
  1342  039E                     	;# 
  1343  039F                     	;# 
  1344  0FE4                     	;# 
  1345  0FE5                     	;# 
  1346  0FE6                     	;# 
  1347  0FE7                     	;# 
  1348  0FE8                     	;# 
  1349  0FE9                     	;# 
  1350  0FEA                     	;# 
  1351  0FEB                     	;# 
  1352  0FED                     	;# 
  1353  0FEE                     	;# 
  1354  0FEF                     	;# 
  1355  0000                     	;# 
  1356  0001                     	;# 
  1357  0002                     	;# 
  1358  0003                     	;# 
  1359  0004                     	;# 
  1360  0005                     	;# 
  1361  0006                     	;# 
  1362  0007                     	;# 
  1363  0008                     	;# 
  1364  0009                     	;# 
  1365  000A                     	;# 
  1366  000B                     	;# 
  1367  000C                     	;# 
  1368  000E                     	;# 
  1369  0011                     	;# 
  1370  0012                     	;# 
  1371  0015                     	;# 
  1372  0016                     	;# 
  1373  0016                     	;# 
  1374  0017                     	;# 
  1375  0018                     	;# 
  1376  0019                     	;# 
  1377  001A                     	;# 
  1378  001B                     	;# 
  1379  001C                     	;# 
  1380  001E                     	;# 
  1381  001F                     	;# 
  1382  008C                     	;# 
  1383  008E                     	;# 
  1384  0091                     	;# 
  1385  0092                     	;# 
  1386  0095                     	;# 
  1387  0096                     	;# 
  1388  0097                     	;# 
  1389  0098                     	;# 
  1390  0099                     	;# 
  1391  009A                     	;# 
  1392  009B                     	;# 
  1393  009B                     	;# 
  1394  009C                     	;# 
  1395  009D                     	;# 
  1396  009E                     	;# 
  1397  010C                     	;# 
  1398  010E                     	;# 
  1399  0111                     	;# 
  1400  0112                     	;# 
  1401  0113                     	;# 
  1402  0114                     	;# 
  1403  0115                     	;# 
  1404  0116                     	;# 
  1405  0117                     	;# 
  1406  0118                     	;# 
  1407  0119                     	;# 
  1408  011A                     	;# 
  1409  011B                     	;# 
  1410  011D                     	;# 
  1411  011D                     	;# 
  1412  018C                     	;# 
  1413  018E                     	;# 
  1414  0191                     	;# 
  1415  0191                     	;# 
  1416  0192                     	;# 
  1417  0193                     	;# 
  1418  0193                     	;# 
  1419  0193                     	;# 
  1420  0194                     	;# 
  1421  0195                     	;# 
  1422  0196                     	;# 
  1423  0199                     	;# 
  1424  019A                     	;# 
  1425  019B                     	;# 
  1426  019B                     	;# 
  1427  019B                     	;# 
  1428  019B                     	;# 
  1429  019C                     	;# 
  1430  019C                     	;# 
  1431  019D                     	;# 
  1432  019E                     	;# 
  1433  019F                     	;# 
  1434  020C                     	;# 
  1435  020E                     	;# 
  1436  0211                     	;# 
  1437  0211                     	;# 
  1438  0212                     	;# 
  1439  0212                     	;# 
  1440  0213                     	;# 
  1441  0213                     	;# 
  1442  0214                     	;# 
  1443  0214                     	;# 
  1444  0215                     	;# 
  1445  0215                     	;# 
  1446  0215                     	;# 
  1447  0216                     	;# 
  1448  0216                     	;# 
  1449  0217                     	;# 
  1450  0217                     	;# 
  1451  0291                     	;# 
  1452  0291                     	;# 
  1453  0292                     	;# 
  1454  0293                     	;# 
  1455  0294                     	;# 
  1456  0295                     	;# 
  1457  0295                     	;# 
  1458  0296                     	;# 
  1459  0391                     	;# 
  1460  0392                     	;# 
  1461  0393                     	;# 
  1462  039A                     	;# 
  1463  039C                     	;# 
  1464  039D                     	;# 
  1465  039E                     	;# 
  1466  039F                     	;# 
  1467  0FE4                     	;# 
  1468  0FE5                     	;# 
  1469  0FE6                     	;# 
  1470  0FE7                     	;# 
  1471  0FE8                     	;# 
  1472  0FE9                     	;# 
  1473  0FEA                     	;# 
  1474  0FEB                     	;# 
  1475  0FED                     	;# 
  1476  0FEE                     	;# 
  1477  0FEF                     	;# 
  1478                           
  1479                           	psect	nvBANK0
  1480  006E                     __pnvBANK0:	
  1481  006E                     _IOCAF4_InterruptHandler:	
  1482  006E                     	ds	2
  1483  000C                     _PORTAbits	set	12
  1484  0019                     _T1GCONbits	set	25
  1485  0018                     _T1CONbits	set	24
  1486  0018                     _T1CON	set	24
  1487  0016                     _TMR1L	set	22
  1488  0017                     _TMR1H	set	23
  1489  0019                     _T1GCON	set	25
  1490  000B                     _INTCONbits	set	11
  1491  0011                     _PIR1bits	set	17
  1492  0095                     _OPTION_REGbits	set	149
  1493  008E                     _TRISC	set	142
  1494  008C                     _TRISA	set	140
  1495  0097                     _WDTCON	set	151
  1496  0098                     _OSCTUNE	set	152
  1497  0099                     _OSCCON	set	153
  1498  009D                     _ADCON0bits	set	157
  1499  0091                     _PIE1bits	set	145
  1500  009C                     _ADRESH	set	156
  1501  009B                     _ADRESL	set	155
  1502  009E                     _ADCON1	set	158
  1503  009D                     _ADCON0	set	157
  1504  04D6                     _PLLR	set	1238
  1505  010C                     _LATAbits	set	268
  1506  011D                     _APFCON	set	285
  1507  010E                     _LATC	set	270
  1508  010C                     _LATA	set	268
  1509  0116                     _BORCON	set	278
  1510  018C                     _ANSELA	set	396
  1511  018E                     _ANSELC	set	398
  1512  0199                     _RCREG	set	409
  1513  019D                     _RCSTAbits	set	413
  1514  019A                     _TXREG	set	410
  1515  019E                     _TXSTAbits	set	414
  1516  019C                     _SPBRGH	set	412
  1517  019B                     _SPBRGL	set	411
  1518  019E                     _TXSTA	set	414
  1519  019D                     _RCSTA	set	413
  1520  019F                     _BAUDCON	set	415
  1521  020E                     _WPUC	set	526
  1522  020C                     _WPUA	set	524
  1523  0391                     _IOCAPbits	set	913
  1524  0392                     _IOCANbits	set	914
  1525  0393                     _IOCAFbits	set	915
  1526                           
  1527                           	psect	stringtext1
  1528  03DA                     __pstringtext1:	
  1529  03DA                     STR_10:	
  1530  03DA  3441               	retlw	65	;'A'
  1531  03DB  3454               	retlw	84	;'T'
  1532  03DC  342B               	retlw	43	;'+'
  1533  03DD  3443               	retlw	67	;'C'
  1534  03DE  3457               	retlw	87	;'W'
  1535  03DF  344A               	retlw	74	;'J'
  1536  03E0  3441               	retlw	65	;'A'
  1537  03E1  3450               	retlw	80	;'P'
  1538  03E2  343D               	retlw	61	;'='
  1539  03E3  3422               	retlw	34	;'"'
  1540  03E4  3473               	retlw	115	;'s'
  1541  03E5  3461               	retlw	97	;'a'
  1542  03E6  3475               	retlw	117	;'u'
  1543  03E7  346C               	retlw	108	;'l'
  1544  03E8  3432               	retlw	50	;'2'
  1545  03E9  3422               	retlw	34	;'"'
  1546  03EA  342C               	retlw	44	;','
  1547  03EB  3422               	retlw	34	;'"'
  1548  03EC  3472               	retlw	114	;'r'
  1549  03ED  3469               	retlw	105	;'i'
  1550  03EE  3463               	retlw	99	;'c'
  1551  03EF  346B               	retlw	107	;'k'
  1552  03F0  3468               	retlw	104	;'h'
  1553  03F1  3475               	retlw	117	;'u'
  1554  03F2  346E               	retlw	110	;'n'
  1555  03F3  3474               	retlw	116	;'t'
  1556  03F4  3465               	retlw	101	;'e'
  1557  03F5  3472               	retlw	114	;'r'
  1558  03F6  3430               	retlw	48	;'0'
  1559  03F7  3432               	retlw	50	;'2'
  1560  03F8  3422               	retlw	34	;'"'
  1561  03F9  340D               	retlw	13
  1562  03FA  340A               	retlw	10
  1563  03FB  3400               	retlw	0
  1564                           
  1565                           	psect	stringtext2
  1566  0575                     __pstringtext2:	
  1567  0575                     STR_12:	
  1568  0575  3441               	retlw	65	;'A'
  1569  0576  3454               	retlw	84	;'T'
  1570  0577  342B               	retlw	43	;'+'
  1571  0578  3443               	retlw	67	;'C'
  1572  0579  3449               	retlw	73	;'I'
  1573  057A  3450               	retlw	80	;'P'
  1574  057B  3453               	retlw	83	;'S'
  1575  057C  3445               	retlw	69	;'E'
  1576  057D  3452               	retlw	82	;'R'
  1577  057E  3456               	retlw	86	;'V'
  1578  057F  3445               	retlw	69	;'E'
  1579  0580  3452               	retlw	82	;'R'
  1580  0581  343D               	retlw	61	;'='
  1581  0582  3431               	retlw	49	;'1'
  1582  0583  342C               	retlw	44	;','
  1583  0584  3438               	retlw	56	;'8'
  1584  0585  3430               	retlw	48	;'0'
  1585  0586  340D               	retlw	13
  1586  0587  340A               	retlw	10
  1587  0588  3400               	retlw	0
  1588                           
  1589                           	psect	stringtext3
  1590  05BD                     __pstringtext3:	
  1591  05BD                     STR_9:	
  1592  05BD  3441               	retlw	65	;'A'
  1593  05BE  3454               	retlw	84	;'T'
  1594  05BF  342B               	retlw	43	;'+'
  1595  05C0  3443               	retlw	67	;'C'
  1596  05C1  3457               	retlw	87	;'W'
  1597  05C2  344D               	retlw	77	;'M'
  1598  05C3  344F               	retlw	79	;'O'
  1599  05C4  3444               	retlw	68	;'D'
  1600  05C5  3445               	retlw	69	;'E'
  1601  05C6  343D               	retlw	61	;'='
  1602  05C7  3431               	retlw	49	;'1'
  1603  05C8  340D               	retlw	13
  1604  05C9  340A               	retlw	10
  1605  05CA  3400               	retlw	0
  1606                           
  1607                           	psect	stringtext4
  1608  05CB                     __pstringtext4:	
  1609  05CB                     STR_11:	
  1610  05CB  3441               	retlw	65	;'A'
  1611  05CC  3454               	retlw	84	;'T'
  1612  05CD  342B               	retlw	43	;'+'
  1613  05CE  3443               	retlw	67	;'C'
  1614  05CF  3449               	retlw	73	;'I'
  1615  05D0  3450               	retlw	80	;'P'
  1616  05D1  344D               	retlw	77	;'M'
  1617  05D2  3455               	retlw	85	;'U'
  1618  05D3  3458               	retlw	88	;'X'
  1619  05D4  343D               	retlw	61	;'='
  1620  05D5  3431               	retlw	49	;'1'
  1621  05D6  340D               	retlw	13
  1622  05D7  340A               	retlw	10
  1623  05D8  3400               	retlw	0
  1624                           
  1625                           	psect	stringtext5
  1626  05F3                     __pstringtext5:	
  1627  05F3                     STR_14:	
  1628  05F3  3441               	retlw	65	;'A'
  1629  05F4  3454               	retlw	84	;'T'
  1630  05F5  342B               	retlw	43	;'+'
  1631  05F6  3443               	retlw	67	;'C'
  1632  05F7  3449               	retlw	73	;'I'
  1633  05F8  3450               	retlw	80	;'P'
  1634  05F9  3453               	retlw	83	;'S'
  1635  05FA  3445               	retlw	69	;'E'
  1636  05FB  344E               	retlw	78	;'N'
  1637  05FC  3444               	retlw	68	;'D'
  1638  05FD  343D               	retlw	61	;'='
  1639  05FE  3400               	retlw	0
  1640                           
  1641                           	psect	stringtext6
  1642  05FF                     __pstringtext6:	
  1643  05FF                     STR_3:	
  1644  05FF  3453               	retlw	83	;'S'
  1645  0600  3445               	retlw	69	;'E'
  1646  0601  344E               	retlw	78	;'N'
  1647  0602  3444               	retlw	68	;'D'
  1648  0603  3420               	retlw	32	;' '
  1649  0604  3446               	retlw	70	;'F'
  1650  0605  3441               	retlw	65	;'A'
  1651  0606  3449               	retlw	73	;'I'
  1652  0607  344C               	retlw	76	;'L'
  1653  0608  3400               	retlw	0
  1654                           
  1655                           	psect	stringtext7
  1656  062F                     __pstringtext7:	
  1657  062F                     STR_1:	
  1658  062F  3453               	retlw	83	;'S'
  1659  0630  3445               	retlw	69	;'E'
  1660  0631  344E               	retlw	78	;'N'
  1661  0632  3444               	retlw	68	;'D'
  1662  0633  3420               	retlw	32	;' '
  1663  0634  344F               	retlw	79	;'O'
  1664  0635  344B               	retlw	75	;'K'
  1665  0636  3400               	retlw	0
  1666                           
  1667                           	psect	stringtext8
  1668  0637                     __pstringtext8:	
  1669  0637                     STR_6:	
  1670  0637  3443               	retlw	67	;'C'
  1671  0638  344F               	retlw	79	;'O'
  1672  0639  344E               	retlw	78	;'N'
  1673  063A  344E               	retlw	78	;'N'
  1674  063B  3445               	retlw	69	;'E'
  1675  063C  3443               	retlw	67	;'C'
  1676  063D  3454               	retlw	84	;'T'
  1677  063E  3400               	retlw	0
  1678                           
  1679                           	psect	stringtext9
  1680  063F                     __pstringtext9:	
  1681  063F                     STR_20:	
  1682  063F  3462               	retlw	98	;'b'
  1683  0640  346D               	retlw	109	;'m'
  1684  0641  346F               	retlw	111	;'o'
  1685  0642  3464               	retlw	100	;'d'
  1686  0643  3465               	retlw	101	;'e'
  1687  0644  340A               	retlw	10
  1688  0645  3400               	retlw	0
  1689                           
  1690                           	psect	stringtext10
  1691  0646                     __pstringtext10:	
  1692  0646                     STR_19:	
  1693  0646  3474               	retlw	116	;'t'
  1694  0647  346D               	retlw	109	;'m'
  1695  0648  346F               	retlw	111	;'o'
  1696  0649  3464               	retlw	100	;'d'
  1697  064A  3465               	retlw	101	;'e'
  1698  064B  340A               	retlw	10
  1699  064C  3400               	retlw	0
  1700                           
  1701                           	psect	stringtext11
  1702  064D                     __pstringtext11:	
  1703  064D                     STR_7:	
  1704  064D  3443               	retlw	67	;'C'
  1705  064E  344C               	retlw	76	;'L'
  1706  064F  344F               	retlw	79	;'O'
  1707  0650  3453               	retlw	83	;'S'
  1708  0651  3445               	retlw	69	;'E'
  1709  0652  3444               	retlw	68	;'D'
  1710  0653  3400               	retlw	0
  1711                           
  1712                           	psect	stringtext12
  1713  065B                     __pstringtext12:	
  1714  065B                     STR_4:	
  1715  065B  3445               	retlw	69	;'E'
  1716  065C  3452               	retlw	82	;'R'
  1717  065D  3452               	retlw	82	;'R'
  1718  065E  344F               	retlw	79	;'O'
  1719  065F  3452               	retlw	82	;'R'
  1720  0660  3400               	retlw	0
  1721                           
  1722                           	psect	stringtext13
  1723  0691                     __pstringtext13:	
  1724  0691                     STR_8:	
  1725  0691  3441               	retlw	65	;'A'
  1726  0692  3454               	retlw	84	;'T'
  1727  0693  340D               	retlw	13
  1728  0694  340A               	retlw	10
  1729  0695  3400               	retlw	0
  1730                           
  1731                           	psect	stringtext14
  1732  0696                     __pstringtext14:	
  1733  0696                     STR_5:	
  1734  0696  342B               	retlw	43	;'+'
  1735  0697  3449               	retlw	73	;'I'
  1736  0698  3450               	retlw	80	;'P'
  1737  0699  3444               	retlw	68	;'D'
  1738  069A  3400               	retlw	0
  1739                           
  1740                           	psect	stringtext15
  1741  06A0                     __pstringtext15:	
  1742  06A0                     STR_18:	
  1743  06A0  344F               	retlw	79	;'O'
  1744  06A1  346B               	retlw	107	;'k'
  1745  06A2  340A               	retlw	10
  1746  06A3  3400               	retlw	0
  1747                           
  1748                           	psect	stringtext16
  1749  06A8                     __pstringtext16:	
  1750  06A8                     STR_21:	
  1751  06A8  3443               	retlw	67	;'C'
  1752  06A9  3448               	retlw	72	;'H'
  1753  06AA  3400               	retlw	0
  1754                           
  1755                           	psect	stringtext17
  1756  06AB                     __pstringtext17:	
  1757  06AB                     STR_22:	
  1758  06AB  3443               	retlw	67	;'C'
  1759  06AC  344C               	retlw	76	;'L'
  1760  06AD  3400               	retlw	0
  1761                           
  1762                           	psect	stringtext18
  1763  06BD                     __pstringtext18:	
  1764  06BD                     STR_15:	
  1765  06BD  342C               	retlw	44	;','
  1766  06BE  3400               	retlw	0
  1767                           
  1768                           	psect	stringtext19
  1769  06BF                     __pstringtext19:	
  1770  06BF                     STR_13:	
  1771  06BF  343A               	retlw	58	;':'
  1772  06C0  3400               	retlw	0
  1773                           
  1774                           	psect	stringtext20
  1775  0000                     __pstringtext20:	
  1776  03F9                     
  1777                           ; #config settings
  1778  0000                     
  1779                           	psect	cinit
  1780  0041                     start_initialization:	
  1781  0041                     __initialization:	
  1782                           
  1783                           ; Clear objects allocated to COMMON
  1784  0041  01F9               	clrf	__pbssCOMMON& (0+127)
  1785  0042  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
  1786                           
  1787                           ; Clear objects allocated to BANK0
  1788  0043  304E               	movlw	low __pbssBANK0
  1789  0044  0084               	movwf	4
  1790  0045  3000               	movlw	high __pbssBANK0
  1791  0046  0085               	movwf	5
  1792  0047  3020               	movlw	32
  1793  0048  2661               	fcall	clear_ram0
  1794                           
  1795                           ; Clear objects allocated to BANK1
  1796  0049  30A0               	movlw	low __pbssBANK1
  1797  004A  0084               	movwf	4
  1798  004B  3000               	movlw	high __pbssBANK1
  1799  004C  0085               	movwf	5
  1800  004D  3018               	movlw	24
  1801  004E  2661               	fcall	clear_ram0
  1802  004F                     end_of_initialization:	
  1803                           ;End of C runtime variable initialization code
  1804                           
  1805  004F                     __end_of__initialization:	
  1806  004F  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1807  0050  0020               	movlb	0
  1808  0051  2CD4               	ljmp	_main	;jump to C main() function
  1809                           
  1810                           	psect	bssCOMMON
  1811  0079                     __pbssCOMMON:	
  1812  0079                     _eusartTxBufferRemaining:	
  1813  0079                     	ds	1
  1814  007A                     _eusartTxHead:	
  1815  007A                     	ds	1
  1816                           
  1817                           	psect	bssBANK0
  1818  004E                     __pbssBANK0:	
  1819  004E                     _eusartTxBuffer:	
  1820  004E                     	ds	8
  1821  0056                     _ESP_external_message_handler:	
  1822  0056                     	ds	2
  1823  0058                     _TMR1_InterruptHandler:	
  1824  0058                     	ds	2
  1825  005A                     _timer1ReloadVal:	
  1826  005A                     	ds	2
  1827  005C                     _ADC_value:	
  1828  005C                     	ds	2
  1829  005E                     _EUSART_RxDefaultInterruptHandler:	
  1830  005E                     	ds	2
  1831  0060                     _EUSART_TxDefaultInterruptHandler:	
  1832  0060                     	ds	2
  1833  0062                     _IOC_value:	
  1834  0062                     	ds	1
  1835  0063                     _IOC_state:	
  1836  0063                     	ds	1
  1837  0064                     _TMR1_state:	
  1838  0064                     	ds	1
  1839  0065                     _message_format:	
  1840  0065                     	ds	1
  1841  0066                     _esp_channel:	
  1842  0066                     	ds	1
  1843  0067                     _esp_read_data_index:	
  1844  0067                     	ds	1
  1845  0068                     _ESP_wait_exception:	
  1846  0068                     	ds	1
  1847  0069                     _eusartRxCount:	
  1848  0069                     	ds	1
  1849  006A                     _eusartRxTail:	
  1850  006A                     	ds	1
  1851  006B                     _eusartRxHead:	
  1852  006B                     	ds	1
  1853  006C                     _eusartTxTail:	
  1854  006C                     	ds	1
  1855  006D                     _ADC_state:	
  1856  006D                     	ds	1
  1857                           
  1858                           	psect	bssBANK1
  1859  00A0                     __pbssBANK1:	
  1860  00A0                     _eusartRxBuffer:	
  1861  00A0                     	ds	8
  1862  00A8                     _esp_read_data:	
  1863  00A8                     	ds	16
  1864                           
  1865                           	psect	clrtext
  1866  0661                     clear_ram0:	
  1867                           ;	Called with FSR0 containing the base address, and
  1868                           ;	WREG with the size to clear
  1869                           
  1870  0661  0064               	clrwdt	;clear the watchdog before getting into this loop
  1871  0662                     clrloop0:	
  1872  0662  0180               	clrf	0	;clear RAM location pointed to by FSR
  1873  0663  3101               	addfsr 0,1
  1874  0664  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1875  0665  2E62               	goto	clrloop0	;have we reached the end yet?
  1876  0666  3400               	retlw	0	;all done for this memory range, return
  1877                           
  1878                           	psect	cstackBANK1
  1879  00B8                     __pcstackBANK1:	
  1880  00B8                     ??_main:	
  1881                           
  1882                           ; 1 bytes @ 0x0
  1883  00B8                     	ds	1
  1884                           
  1885                           	psect	cstackCOMMON
  1886  0070                     __pcstackCOMMON:	
  1887  0070                     ?_PIN_MANAGER_IOC:	
  1888  0070                     ?_TMR1_ISR:	
  1889                           ; 1 bytes @ 0x0
  1890                           
  1891  0070                     ?_EUSART_Receive_ISR:	
  1892                           ; 1 bytes @ 0x0
  1893                           
  1894  0070                     ??_EUSART_Receive_ISR:	
  1895                           ; 1 bytes @ 0x0
  1896                           
  1897  0070                     ?_EUSART_Transmit_ISR:	
  1898                           ; 1 bytes @ 0x0
  1899                           
  1900  0070                     ??_EUSART_Transmit_ISR:	
  1901                           ; 1 bytes @ 0x0
  1902                           
  1903  0070                     ?_PIN_MANAGER_Initialize:	
  1904                           ; 1 bytes @ 0x0
  1905                           
  1906  0070                     ?_OSCILLATOR_Initialize:	
  1907                           ; 1 bytes @ 0x0
  1908                           
  1909  0070                     ?_WDT_Initialize:	
  1910                           ; 1 bytes @ 0x0
  1911                           
  1912  0070                     ?_TMR1_Initialize:	
  1913                           ; 1 bytes @ 0x0
  1914                           
  1915  0070                     ?_TMR1_DefaultInterruptHandler:	
  1916                           ; 1 bytes @ 0x0
  1917                           
  1918  0070                     ??_TMR1_DefaultInterruptHandler:	
  1919                           ; 1 bytes @ 0x0
  1920                           
  1921  0070                     ?_IOCAF4_DefaultInterruptHandler:	
  1922                           ; 1 bytes @ 0x0
  1923                           
  1924  0070                     ??_IOCAF4_DefaultInterruptHandler:	
  1925                           ; 1 bytes @ 0x0
  1926                           
  1927  0070                     ?_IOCAF4_ISR:	
  1928                           ; 1 bytes @ 0x0
  1929                           
  1930  0070                     ?_ESP_initialize:	
  1931                           ; 1 bytes @ 0x0
  1932                           
  1933  0070                     ?_logger_initialize:	
  1934                           ; 1 bytes @ 0x0
  1935                           
  1936  0070                     ?_ESP_config:	
  1937                           ; 1 bytes @ 0x0
  1938                           
  1939  0070                     ?_ESP_message_handler:	
  1940                           ; 1 bytes @ 0x0
  1941                           
  1942  0070                     ?_read_analog:	
  1943                           ; 1 bytes @ 0x0
  1944                           
  1945  0070                     ?_ESP_process_message:	
  1946                           ; 1 bytes @ 0x0
  1947                           
  1948  0070                     ?_ESP_wait_for:	
  1949                           ; 1 bytes @ 0x0
  1950                           
  1951  0070                     ?__TMR1_Ready:	
  1952                           ; 1 bytes @ 0x0
  1953                           
  1954  0070                     ??__TMR1_Ready:	
  1955                           ; 1 bytes @ 0x0
  1956                           
  1957  0070                     ?__IOC_Ready:	
  1958                           ; 1 bytes @ 0x0
  1959                           
  1960  0070                     ??__IOC_Ready:	
  1961                           ; 1 bytes @ 0x0
  1962                           
  1963  0070                     ?_toggle_format:	
  1964                           ; 1 bytes @ 0x0
  1965                           
  1966  0070                     ?_ADC_Initialize:	
  1967                           ; 1 bytes @ 0x0
  1968                           
  1969  0070                     ?_ADC_SelectChannel:	
  1970                           ; 1 bytes @ 0x0
  1971                           
  1972  0070                     ?_ADC_StartConversion:	
  1973                           ; 1 bytes @ 0x0
  1974                           
  1975  0070                     ??_ADC_StartConversion:	
  1976                           ; 1 bytes @ 0x0
  1977                           
  1978  0070                     ?_ADC_ISR:	
  1979                           ; 1 bytes @ 0x0
  1980                           
  1981  0070                     ??_ADC_ISR:	
  1982                           ; 1 bytes @ 0x0
  1983                           
  1984  0070                     ?_INTERRUPT_InterruptManager:	
  1985                           ; 1 bytes @ 0x0
  1986                           
  1987  0070                     ?_EUSART_Initialize:	
  1988                           ; 1 bytes @ 0x0
  1989                           
  1990  0070                     ?_EUSART_is_tx_ready:	
  1991                           ; 1 bytes @ 0x0
  1992                           
  1993  0070                     ?_EUSART_is_rx_ready:	
  1994                           ; 1 bytes @ 0x0
  1995                           
  1996  0070                     ?_EUSART_Read:	
  1997                           ; 1 bytes @ 0x0
  1998                           
  1999  0070                     ?_EUSART_Write:	
  2000                           ; 1 bytes @ 0x0
  2001                           
  2002  0070                     ?_SYSTEM_Initialize:	
  2003                           ; 1 bytes @ 0x0
  2004                           
  2005  0070                     ?_TMR1_StartTimer:	
  2006                           ; 1 bytes @ 0x0
  2007                           
  2008  0070                     ?_TMR1_StopTimer:	
  2009                           ; 1 bytes @ 0x0
  2010                           
  2011  0070                     ?_TMR1_WriteTimer:	
  2012                           ; 1 bytes @ 0x0
  2013                           
  2014  0070                     ?_main:	
  2015                           ; 1 bytes @ 0x0
  2016                           
  2017  0070                     ?_ESP_read:	
  2018                           ; 1 bytes @ 0x0
  2019                           
  2020  0070                     ?_ESP_process_rx_data:	
  2021                           ; 1 bytes @ 0x0
  2022                           
  2023  0070                     ?_ADC_GetConversionResult:	
  2024                           ; 1 bytes @ 0x0
  2025                           
  2026  0070                     TMR1_WriteTimer@timerVal:	
  2027                           ; 2 bytes @ 0x0
  2028                           
  2029                           
  2030                           ; 2 bytes @ 0x0
  2031  0070                     	ds	1
  2032  0071                     ??_PIN_MANAGER_IOC:	
  2033  0071                     ??_IOCAF4_ISR:	
  2034                           ; 1 bytes @ 0x1
  2035                           
  2036                           
  2037                           ; 1 bytes @ 0x1
  2038  0071                     	ds	1
  2039  0072                     ??_TMR1_ISR:	
  2040  0072                     ??_ADC_GetConversionResult:	
  2041                           ; 1 bytes @ 0x2
  2042                           
  2043  0072                     ??_INTERRUPT_InterruptManager:	
  2044                           ; 1 bytes @ 0x2
  2045                           
  2046  0072                     ??_TMR1_WriteTimer:	
  2047                           ; 1 bytes @ 0x2
  2048                           
  2049                           
  2050                           ; 1 bytes @ 0x2
  2051  0072                     	ds	1
  2052  0073                     ?_EUSART_SetRxInterruptHandler:	
  2053  0073                     ?_EUSART_SetTxInterruptHandler:	
  2054                           ; 1 bytes @ 0x3
  2055                           
  2056  0073                     ??_OSCILLATOR_Initialize:	
  2057                           ; 1 bytes @ 0x3
  2058                           
  2059  0073                     ??_WDT_Initialize:	
  2060                           ; 1 bytes @ 0x3
  2061                           
  2062  0073                     ?_TMR1_SetInterruptHandler:	
  2063                           ; 1 bytes @ 0x3
  2064                           
  2065  0073                     ?_IOCAF4_SetInterruptHandler:	
  2066                           ; 1 bytes @ 0x3
  2067                           
  2068  0073                     ?_ESP_Set_application_handler:	
  2069                           ; 1 bytes @ 0x3
  2070                           
  2071  0073                     ?_strchr:	
  2072                           ; 1 bytes @ 0x3
  2073                           
  2074  0073                     ??_ADC_Initialize:	
  2075                           ; 1 bytes @ 0x3
  2076                           
  2077  0073                     ??_ADC_SelectChannel:	
  2078                           ; 1 bytes @ 0x3
  2079                           
  2080  0073                     ??_EUSART_is_tx_ready:	
  2081                           ; 1 bytes @ 0x3
  2082                           
  2083  0073                     ??_EUSART_is_rx_ready:	
  2084                           ; 1 bytes @ 0x3
  2085                           
  2086  0073                     ??_EUSART_Read:	
  2087                           ; 1 bytes @ 0x3
  2088                           
  2089  0073                     ??_EUSART_Write:	
  2090                           ; 1 bytes @ 0x3
  2091                           
  2092  0073                     ??_TMR1_StartTimer:	
  2093                           ; 1 bytes @ 0x3
  2094                           
  2095  0073                     ??_TMR1_StopTimer:	
  2096                           ; 1 bytes @ 0x3
  2097                           
  2098  0073                     ?_strlen:	
  2099                           ; 1 bytes @ 0x3
  2100                           
  2101  0073                     ?_strncmp:	
  2102                           ; 2 bytes @ 0x3
  2103                           
  2104  0073                     ?_ADC_GetConversion:	
  2105                           ; 2 bytes @ 0x3
  2106                           
  2107  0073                     ?___awdiv:	
  2108                           ; 2 bytes @ 0x3
  2109                           
  2110  0073                     ?___awmod:	
  2111                           ; 2 bytes @ 0x3
  2112                           
  2113  0073                     EUSART_SetTxInterruptHandler@interruptHandler:	
  2114                           ; 2 bytes @ 0x3
  2115                           
  2116  0073                     EUSART_SetRxInterruptHandler@interruptHandler:	
  2117                           ; 2 bytes @ 0x3
  2118                           
  2119  0073                     TMR1_SetInterruptHandler@InterruptHandler:	
  2120                           ; 2 bytes @ 0x3
  2121                           
  2122  0073                     IOCAF4_SetInterruptHandler@InterruptHandler:	
  2123                           ; 2 bytes @ 0x3
  2124                           
  2125  0073                     ESP_Set_application_handler@applicationHandler:	
  2126                           ; 2 bytes @ 0x3
  2127                           
  2128  0073                     ___awdiv@divisor:	
  2129                           ; 2 bytes @ 0x3
  2130                           
  2131  0073                     ___awmod@divisor:	
  2132                           ; 2 bytes @ 0x3
  2133                           
  2134  0073                     strchr@c:	
  2135                           ; 2 bytes @ 0x3
  2136                           
  2137  0073                     strlen@s:	
  2138                           ; 2 bytes @ 0x3
  2139                           
  2140  0073                     strncmp@_r:	
  2141                           ; 2 bytes @ 0x3
  2142                           
  2143                           
  2144                           ; 2 bytes @ 0x3
  2145  0073                     	ds	1
  2146  0074                     ADC_SelectChannel@channel:	
  2147  0074                     EUSART_Read@readValue:	
  2148                           ; 1 bytes @ 0x4
  2149                           
  2150  0074                     EUSART_Write@txData:	
  2151                           ; 1 bytes @ 0x4
  2152                           
  2153                           
  2154                           ; 1 bytes @ 0x4
  2155  0074                     	ds	1
  2156  0075                     ??_EUSART_SetRxInterruptHandler:	
  2157  0075                     ??_EUSART_SetTxInterruptHandler:	
  2158                           ; 1 bytes @ 0x5
  2159                           
  2160  0075                     ??_PIN_MANAGER_Initialize:	
  2161                           ; 1 bytes @ 0x5
  2162                           
  2163  0075                     ??_TMR1_Initialize:	
  2164                           ; 1 bytes @ 0x5
  2165                           
  2166  0075                     ??_TMR1_SetInterruptHandler:	
  2167                           ; 1 bytes @ 0x5
  2168                           
  2169  0075                     ??_IOCAF4_SetInterruptHandler:	
  2170                           ; 1 bytes @ 0x5
  2171                           
  2172  0075                     ??_ESP_initialize:	
  2173                           ; 1 bytes @ 0x5
  2174                           
  2175  0075                     ??_logger_initialize:	
  2176                           ; 1 bytes @ 0x5
  2177                           
  2178  0075                     ??_ESP_Set_application_handler:	
  2179                           ; 1 bytes @ 0x5
  2180                           
  2181  0075                     ??_strlen:	
  2182                           ; 1 bytes @ 0x5
  2183                           
  2184  0075                     ??_strchr:	
  2185                           ; 1 bytes @ 0x5
  2186                           
  2187  0075                     ??_ADC_GetConversion:	
  2188                           ; 1 bytes @ 0x5
  2189                           
  2190  0075                     ??_EUSART_Initialize:	
  2191                           ; 1 bytes @ 0x5
  2192                           
  2193  0075                     ?__puts:	
  2194                           ; 1 bytes @ 0x5
  2195                           
  2196  0075                     ?_write:	
  2197                           ; 1 bytes @ 0x5
  2198                           
  2199  0075                     strchr@s:	
  2200                           ; 1 bytes @ 0x5
  2201                           
  2202  0075                     __puts@pt:	
  2203                           ; 1 bytes @ 0x5
  2204                           
  2205  0075                     write@pt:	
  2206                           ; 2 bytes @ 0x5
  2207                           
  2208  0075                     ___awdiv@dividend:	
  2209                           ; 2 bytes @ 0x5
  2210                           
  2211  0075                     ___awmod@dividend:	
  2212                           ; 2 bytes @ 0x5
  2213                           
  2214  0075                     strncmp@n:	
  2215                           ; 2 bytes @ 0x5
  2216                           
  2217                           
  2218                           ; 2 bytes @ 0x5
  2219  0075                     	ds	1
  2220  0076                     ??_SYSTEM_Initialize:	
  2221  0076                     ADC_GetConversion@channel:	
  2222                           ; 1 bytes @ 0x6
  2223                           
  2224                           
  2225                           ; 1 bytes @ 0x6
  2226  0076                     	ds	1
  2227  0077                     ??_strncmp:	
  2228  0077                     ??___awdiv:	
  2229                           ; 1 bytes @ 0x7
  2230                           
  2231  0077                     ??___awmod:	
  2232                           ; 1 bytes @ 0x7
  2233                           
  2234  0077                     __puts@index:	
  2235                           ; 1 bytes @ 0x7
  2236                           
  2237  0077                     write@lenght:	
  2238                           ; 1 bytes @ 0x7
  2239                           
  2240  0077                     strlen@a:	
  2241                           ; 1 bytes @ 0x7
  2242                           
  2243                           
  2244                           ; 2 bytes @ 0x7
  2245  0077                     	ds	1
  2246  0078                     write@i:	
  2247                           
  2248                           ; 1 bytes @ 0x8
  2249  0078                     	ds	1
  2250  0079                     ??_ESP_default_application_handler:	
  2251                           
  2252                           	psect	cstackBANK0
  2253  0020                     __pcstackBANK0:	
  2254                           ; 1 bytes @ 0x9
  2255                           
  2256  0020                     ??__puts:	
  2257  0020                     ??_write:	
  2258                           ; 1 bytes @ 0x0
  2259                           
  2260  0020                     ___awdiv@counter:	
  2261                           ; 1 bytes @ 0x0
  2262                           
  2263  0020                     ___awmod@counter:	
  2264                           ; 1 bytes @ 0x0
  2265                           
  2266  0020                     strncmp@_l:	
  2267                           ; 1 bytes @ 0x0
  2268                           
  2269                           
  2270                           ; 1 bytes @ 0x0
  2271  0020                     	ds	1
  2272  0021                     ___awdiv@sign:	
  2273  0021                     ___awmod@sign:	
  2274                           ; 1 bytes @ 0x1
  2275                           
  2276  0021                     strncmp@r:	
  2277                           ; 1 bytes @ 0x1
  2278                           
  2279                           
  2280                           ; 2 bytes @ 0x1
  2281  0021                     	ds	1
  2282  0022                     ___awdiv@quotient:	
  2283                           
  2284                           ; 2 bytes @ 0x2
  2285  0022                     	ds	1
  2286  0023                     strncmp@l:	
  2287                           
  2288                           ; 1 bytes @ 0x3
  2289  0023                     	ds	1
  2290  0024                     ?_strstr:	
  2291  0024                     strstr@n:	
  2292                           ; 1 bytes @ 0x4
  2293                           
  2294                           
  2295                           ; 2 bytes @ 0x4
  2296  0024                     	ds	2
  2297  0026                     ??_strstr:	
  2298                           
  2299                           ; 1 bytes @ 0x6
  2300  0026                     	ds	3
  2301  0029                     strstr@nl:	
  2302                           
  2303                           ; 2 bytes @ 0x9
  2304  0029                     	ds	2
  2305  002B                     strstr@h:	
  2306                           
  2307                           ; 1 bytes @ 0xB
  2308  002B                     	ds	1
  2309  002C                     ??_ESP_process_message:	
  2310                           
  2311                           ; 1 bytes @ 0xC
  2312  002C                     	ds	1
  2313  002D                     ESP_process_message@aux:	
  2314                           
  2315                           ; 1 bytes @ 0xD
  2316  002D                     	ds	1
  2317  002E                     ??_ESP_read:	
  2318                           
  2319                           ; 1 bytes @ 0xE
  2320  002E                     	ds	1
  2321  002F                     ESP_read@ret:	
  2322                           
  2323                           ; 1 bytes @ 0xF
  2324  002F                     	ds	1
  2325  0030                     ??_ESP_wait_for:	
  2326                           
  2327                           ; 1 bytes @ 0x10
  2328  0030                     	ds	1
  2329  0031                     ESP_wait_for@esp_mess:	
  2330                           
  2331                           ; 1 bytes @ 0x11
  2332  0031                     	ds	1
  2333  0032                     ESP_wait_for@ret:	
  2334                           
  2335                           ; 1 bytes @ 0x12
  2336  0032                     	ds	1
  2337  0033                     ??_ESP_config:	
  2338  0033                     ?_ESP_write:	
  2339                           ; 1 bytes @ 0x13
  2340                           
  2341  0033                     ESP_write@pt:	
  2342                           ; 1 bytes @ 0x13
  2343                           
  2344                           
  2345                           ; 2 bytes @ 0x13
  2346  0033                     	ds	2
  2347  0035                     ESP_write@length:	
  2348                           
  2349                           ; 1 bytes @ 0x15
  2350  0035                     	ds	1
  2351  0036                     ??_ESP_write:	
  2352                           
  2353                           ; 1 bytes @ 0x16
  2354  0036                     	ds	3
  2355  0039                     ESP_write@res:	
  2356                           
  2357                           ; 1 bytes @ 0x19
  2358  0039                     	ds	1
  2359  003A                     ESP_write@aux:	
  2360                           
  2361                           ; 1 bytes @ 0x1A
  2362  003A                     	ds	1
  2363  003B                     ??_read_analog:	
  2364  003B                     ??_toggle_format:	
  2365                           ; 1 bytes @ 0x1B
  2366                           
  2367                           
  2368                           ; 1 bytes @ 0x1B
  2369  003B                     	ds	1
  2370  003C                     read_analog@mess:	
  2371                           
  2372                           ; 6 bytes @ 0x1C
  2373  003C                     	ds	6
  2374  0042                     read_analog@adc_val:	
  2375                           
  2376                           ; 2 bytes @ 0x22
  2377  0042                     	ds	2
  2378  0044                     ?_process_message:	
  2379  0044                     ?_ESP_default_application_handler:	
  2380                           ; 1 bytes @ 0x24
  2381                           
  2382  0044                     ESP_default_application_handler@data:	
  2383                           ; 1 bytes @ 0x24
  2384                           
  2385  0044                     process_message@message:	
  2386                           ; 1 bytes @ 0x24
  2387                           
  2388                           
  2389                           ; 1 bytes @ 0x24
  2390  0044                     	ds	1
  2391  0045                     ??_process_message:	
  2392                           
  2393                           ; 1 bytes @ 0x25
  2394  0045                     	ds	2
  2395  0047                     ??_ESP_process_rx_data:	
  2396                           
  2397                           ; 1 bytes @ 0x27
  2398  0047                     	ds	2
  2399  0049                     ESP_process_rx_data@index:	
  2400                           
  2401                           ; 1 bytes @ 0x29
  2402  0049                     	ds	1
  2403  004A                     ESP_process_rx_data@aux:	
  2404                           
  2405                           ; 1 bytes @ 0x2A
  2406  004A                     	ds	1
  2407  004B                     ??_ESP_message_handler:	
  2408                           
  2409                           ; 1 bytes @ 0x2B
  2410  004B                     	ds	2
  2411  004D                     ESP_message_handler@ret:	
  2412                           
  2413                           ; 1 bytes @ 0x2D
  2414  004D                     	ds	1
  2415                           
  2416                           	psect	maintext
  2417  04D4                     __pmaintext:	
  2418 ;;
  2419 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2420 ;;
  2421 ;; *************** function _main *****************
  2422 ;; Defined at:
  2423 ;;		line 52 in file "main.c"
  2424 ;; Parameters:    Size  Location     Type
  2425 ;;		None
  2426 ;; Auto vars:     Size  Location     Type
  2427 ;;		None
  2428 ;; Return value:  Size  Location     Type
  2429 ;;                  1    wreg      void 
  2430 ;; Registers used:
  2431 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2432 ;; Tracked objects:
  2433 ;;		On entry : B1F/0
  2434 ;;		On exit  : 0/0
  2435 ;;		Unchanged: 0/0
  2436 ;; Data sizes:     COMMON   BANK0   BANK1
  2437 ;;      Params:         0       0       0
  2438 ;;      Locals:         0       0       0
  2439 ;;      Temps:          0       0       1
  2440 ;;      Totals:         0       0       1
  2441 ;;Total ram usage:        1 bytes
  2442 ;; Hardware stack levels required when called:   14
  2443 ;; This function calls:
  2444 ;;		_ESP_config
  2445 ;;		_ESP_initialize
  2446 ;;		_ESP_message_handler
  2447 ;;		_EUSART_is_rx_ready
  2448 ;;		_SYSTEM_Initialize
  2449 ;;		_logger_initialize
  2450 ;;		_process_message
  2451 ;;		_read_analog
  2452 ;; This function is called by:
  2453 ;;		Startup code after reset
  2454 ;; This function uses a non-reentrant model
  2455 ;;
  2456                           
  2457                           
  2458                           ;psect for function _main
  2459  04D4                     _main:	
  2460                           
  2461                           ;main.c: 55:     SYSTEM_Initialize();
  2462                           
  2463                           ;incstack = 0
  2464                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2465  04D4  2654               	fcall	_SYSTEM_Initialize
  2466                           
  2467                           ;main.c: 58:     ESP_initialize();
  2468  04D5  2626               	fcall	_ESP_initialize
  2469                           
  2470                           ;main.c: 61:     logger_initialize();
  2471  04D6  243D               	fcall	_logger_initialize
  2472                           
  2473                           ;main.c: 66:     (INTCONbits.GIE = 1);
  2474  04D7  178B               	bsf	11,7	;volatile
  2475                           
  2476                           ;main.c: 69:     (INTCONbits.PEIE = 1);
  2477  04D8  170B               	bsf	11,6	;volatile
  2478                           
  2479                           ;main.c: 77:     ESP_config();
  2480  04D9  22B3               	fcall	_ESP_config
  2481  04DA                     l3138:	
  2482                           ;main.c: 80:     while (1)
  2483                           
  2484                           
  2485                           ;main.c: 81:     {;main.c: 84:          if (EUSART_is_rx_ready()) {
  2486  04DA  26B4               	fcall	_EUSART_is_rx_ready
  2487  04DB  3A00               	xorlw	0
  2488  04DC  1903               	skipnz
  2489  04DD  2CDF               	goto	l3142
  2490                           
  2491                           ;main.c: 88:                 ESP_message_handler();
  2492  04DE  2319               	fcall	_ESP_message_handler
  2493  04DF                     l3142:	
  2494                           ;main.c: 90:         }
  2495                           
  2496                           
  2497                           ;main.c: 92:           if (ADC_state == ADC_READY) {
  2498  04DF  0020               	movlb	0	; select bank0
  2499  04E0  036D               	decf	_ADC_state,w	;volatile
  2500  04E1  1D03               	btfss	3,2
  2501  04E2  2CE4               	goto	l3146
  2502                           
  2503                           ;main.c: 93:             read_analog();
  2504  04E3  247A               	fcall	_read_analog
  2505  04E4                     l3146:	
  2506                           ;main.c: 94:         }
  2507                           
  2508                           
  2509                           ;main.c: 96:         if (ESP_wait_exception) {
  2510  04E4  0020               	movlb	0	; select bank0
  2511  04E5  0868               	movf	_ESP_wait_exception,w	;volatile
  2512  04E6  1903               	btfsc	3,2
  2513  04E7  2CDA               	goto	l3138
  2514                           
  2515                           ;main.c: 97:             ESP_wait_exception = 0;
  2516  04E8  01E8               	clrf	_ESP_wait_exception	;volatile
  2517                           
  2518                           ;main.c: 98:             process_message('S');
  2519  04E9  3053               	movlw	83
  2520  04EA  0021               	movlb	1	; select bank1
  2521  04EB  00B8               	movwf	??_main^(0+128)
  2522  04EC  0838               	movf	??_main^(0+128),w
  2523  04ED  0020               	movlb	0	; select bank0
  2524  04EE  00C4               	movwf	process_message@message
  2525  04EF  21E0               	fcall	_process_message
  2526                           
  2527                           ;main.c: 102:     }
  2528                           
  2529                           ;main.c: 99:         }
  2530  04F0  2CDA               	goto	l3138
  2531  04F1                     __end_of_main:	
  2532                           
  2533                           	psect	text1
  2534  043D                     __ptext1:	
  2535 ;; *************** function _logger_initialize *****************
  2536 ;; Defined at:
  2537 ;;		line 17 in file "logger.c"
  2538 ;; Parameters:    Size  Location     Type
  2539 ;;		None
  2540 ;; Auto vars:     Size  Location     Type
  2541 ;;		None
  2542 ;; Return value:  Size  Location     Type
  2543 ;;                  1    wreg      void 
  2544 ;; Registers used:
  2545 ;;		wreg, status,2, status,0, pclath, cstack
  2546 ;; Tracked objects:
  2547 ;;		On entry : 0/0
  2548 ;;		On exit  : 0/0
  2549 ;;		Unchanged: 0/0
  2550 ;; Data sizes:     COMMON   BANK0   BANK1
  2551 ;;      Params:         0       0       0
  2552 ;;      Locals:         0       0       0
  2553 ;;      Temps:          1       0       0
  2554 ;;      Totals:         1       0       0
  2555 ;;Total ram usage:        1 bytes
  2556 ;; Hardware stack levels used:    1
  2557 ;; Hardware stack levels required when called:    5
  2558 ;; This function calls:
  2559 ;;		_ADC_SelectChannel
  2560 ;;		_ESP_Set_application_handler
  2561 ;;		_IOCAF4_SetInterruptHandler
  2562 ;;		_TMR1_SetInterruptHandler
  2563 ;;		_TMR1_StopTimer
  2564 ;; This function is called by:
  2565 ;;		_main
  2566 ;; This function uses a non-reentrant model
  2567 ;;
  2568                           
  2569                           
  2570                           ;psect for function _logger_initialize
  2571  043D                     _logger_initialize:	
  2572                           
  2573                           ;logger.c: 19:     message_format = MESSAGE_BINARY;
  2574                           
  2575                           ;incstack = 0
  2576                           ; Regs used in _logger_initialize: [wreg+status,2+status,0+pclath+cstack]
  2577  043D  0020               	movlb	0	; select bank0
  2578  043E  01E5               	clrf	_message_format	;volatile
  2579                           
  2580                           ;logger.c: 21:     ADC_SelectChannel(channel_AN2);
  2581  043F  3002               	movlw	2
  2582  0440  25D9               	fcall	_ADC_SelectChannel
  2583                           
  2584                           ;logger.c: 22:     ADC_state = ADC_IDLE;
  2585  0441  0020               	movlb	0	; select bank0
  2586  0442  01ED               	clrf	_ADC_state	;volatile
  2587                           
  2588                           ;logger.c: 26:     TMR1_StopTimer();
  2589  0443  26AE               	fcall	_TMR1_StopTimer
  2590                           
  2591                           ;logger.c: 27:     TMR1_state = TMR1_STOP;
  2592  0444  0020               	movlb	0	; select bank0
  2593  0445  01E4               	clrf	_TMR1_state	;volatile
  2594                           
  2595                           ;logger.c: 28:     TMR1_SetInterruptHandler(_TMR1_Ready);
  2596  0446  3085               	movlw	low __TMR1_Ready
  2597  0447  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  2598  0448  3006               	movlw	high __TMR1_Ready
  2599  0449  00F4               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  2600  044A  2667               	fcall	_TMR1_SetInterruptHandler
  2601                           
  2602                           ;logger.c: 31:     IOCAF4_SetInterruptHandler(_IOC_Ready);
  2603  044B  3013               	movlw	low __IOC_Ready
  2604  044C  00F3               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler
  2605  044D  3006               	movlw	high __IOC_Ready
  2606  044E  00F4               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler+1
  2607  044F  266D               	fcall	_IOCAF4_SetInterruptHandler
  2608                           
  2609                           ;logger.c: 32:     IOC_state = IOC_IDLE;
  2610  0450  0020               	movlb	0	; select bank0
  2611  0451  01E3               	clrf	_IOC_state	;volatile
  2612                           
  2613                           ;logger.c: 33:     IOC_value = 1;
  2614  0452  3001               	movlw	1
  2615  0453  00F5               	movwf	??_logger_initialize
  2616  0454  0875               	movf	??_logger_initialize,w
  2617  0455  00E2               	movwf	_IOC_value	;volatile
  2618                           
  2619                           ;logger.c: 35:     ESP_Set_application_handler(process_message);
  2620  0456  30E0               	movlw	low _process_message
  2621  0457  00F3               	movwf	ESP_Set_application_handler@applicationHandler
  2622  0458  3001               	movlw	high _process_message
  2623  0459  00F4               	movwf	ESP_Set_application_handler@applicationHandler+1
  2624  045A  267F               	fcall	_ESP_Set_application_handler
  2625  045B  0008               	return
  2626  045C                     __end_of_logger_initialize:	
  2627                           
  2628                           	psect	text2
  2629  05D9                     __ptext2:	
  2630 ;; *************** function _ADC_SelectChannel *****************
  2631 ;; Defined at:
  2632 ;;		line 85 in file "mcc_generated_files/adc.c"
  2633 ;; Parameters:    Size  Location     Type
  2634 ;;  channel         1    wreg     enum E2157
  2635 ;; Auto vars:     Size  Location     Type
  2636 ;;  channel         1    4[COMMON] enum E2157
  2637 ;; Return value:  Size  Location     Type
  2638 ;;                  1    wreg      void 
  2639 ;; Registers used:
  2640 ;;		wreg, status,2, status,0
  2641 ;; Tracked objects:
  2642 ;;		On entry : 0/0
  2643 ;;		On exit  : 0/0
  2644 ;;		Unchanged: 0/0
  2645 ;; Data sizes:     COMMON   BANK0   BANK1
  2646 ;;      Params:         0       0       0
  2647 ;;      Locals:         1       0       0
  2648 ;;      Temps:          1       0       0
  2649 ;;      Totals:         2       0       0
  2650 ;;Total ram usage:        2 bytes
  2651 ;; Hardware stack levels used:    1
  2652 ;; Hardware stack levels required when called:    4
  2653 ;; This function calls:
  2654 ;;		Nothing
  2655 ;; This function is called by:
  2656 ;;		_logger_initialize
  2657 ;; This function uses a non-reentrant model
  2658 ;;
  2659                           
  2660                           
  2661                           ;psect for function _ADC_SelectChannel
  2662  05D9                     _ADC_SelectChannel:	
  2663                           
  2664                           ;incstack = 0
  2665                           ; Regs used in _ADC_SelectChannel: [wreg+status,2+status,0]
  2666                           ;ADC_SelectChannel@channel stored from wreg
  2667  05D9  00F4               	movwf	ADC_SelectChannel@channel
  2668                           
  2669                           ;mcc_generated_files/adc.c: 85: void ADC_SelectChannel(adc_channel_t channel);mcc_genera
      +                          ted_files/adc.c: 86: {;mcc_generated_files/adc.c: 88:     ADCON0bits.CHS = channel;
  2670  05DA  0874               	movf	ADC_SelectChannel@channel,w
  2671  05DB  00F3               	movwf	??_ADC_SelectChannel
  2672  05DC  0DF3               	rlf	??_ADC_SelectChannel,f
  2673  05DD  0DF3               	rlf	??_ADC_SelectChannel,f
  2674  05DE  0021               	movlb	1	; select bank1
  2675  05DF  081D               	movf	29,w	;volatile
  2676  05E0  0673               	xorwf	??_ADC_SelectChannel,w
  2677  05E1  3983               	andlw	-125
  2678  05E2  0673               	xorwf	??_ADC_SelectChannel,w
  2679  05E3  009D               	movwf	29	;volatile
  2680                           
  2681                           ;mcc_generated_files/adc.c: 90:     ADCON0bits.ADON = 1;
  2682  05E4  141D               	bsf	29,0	;volatile
  2683  05E5  0008               	return
  2684  05E6                     __end_of_ADC_SelectChannel:	
  2685                           
  2686                           	psect	text3
  2687  0654                     __ptext3:	
  2688 ;; *************** function _SYSTEM_Initialize *****************
  2689 ;; Defined at:
  2690 ;;		line 50 in file "mcc_generated_files/mcc.c"
  2691 ;; Parameters:    Size  Location     Type
  2692 ;;		None
  2693 ;; Auto vars:     Size  Location     Type
  2694 ;;		None
  2695 ;; Return value:  Size  Location     Type
  2696 ;;                  1    wreg      void 
  2697 ;; Registers used:
  2698 ;;		wreg, status,2, status,0, pclath, cstack
  2699 ;; Tracked objects:
  2700 ;;		On entry : 0/0
  2701 ;;		On exit  : 0/0
  2702 ;;		Unchanged: 0/0
  2703 ;; Data sizes:     COMMON   BANK0   BANK1
  2704 ;;      Params:         0       0       0
  2705 ;;      Locals:         0       0       0
  2706 ;;      Temps:          0       0       0
  2707 ;;      Totals:         0       0       0
  2708 ;;Total ram usage:        0 bytes
  2709 ;; Hardware stack levels used:    1
  2710 ;; Hardware stack levels required when called:    6
  2711 ;; This function calls:
  2712 ;;		_ADC_Initialize
  2713 ;;		_EUSART_Initialize
  2714 ;;		_OSCILLATOR_Initialize
  2715 ;;		_PIN_MANAGER_Initialize
  2716 ;;		_TMR1_Initialize
  2717 ;;		_WDT_Initialize
  2718 ;; This function is called by:
  2719 ;;		_main
  2720 ;; This function uses a non-reentrant model
  2721 ;;
  2722                           
  2723                           
  2724                           ;psect for function _SYSTEM_Initialize
  2725  0654                     _SYSTEM_Initialize:	
  2726                           
  2727                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  2728                           
  2729                           ;incstack = 0
  2730                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2731  0654  241D               	fcall	_PIN_MANAGER_Initialize
  2732                           
  2733                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  2734  0655  2609               	fcall	_OSCILLATOR_Initialize
  2735                           
  2736                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  2737  0656  26A4               	fcall	_WDT_Initialize
  2738                           
  2739                           ;mcc_generated_files/mcc.c: 56:     TMR1_Initialize();
  2740  0657  255F               	fcall	_TMR1_Initialize
  2741                           
  2742                           ;mcc_generated_files/mcc.c: 57:     ADC_Initialize();
  2743  0658  261D               	fcall	_ADC_Initialize
  2744                           
  2745                           ;mcc_generated_files/mcc.c: 58:     EUSART_Initialize();
  2746  0659  2390               	fcall	_EUSART_Initialize
  2747  065A  0008               	return
  2748  065B                     __end_of_SYSTEM_Initialize:	
  2749                           
  2750                           	psect	text4
  2751  06A4                     __ptext4:	
  2752 ;; *************** function _WDT_Initialize *****************
  2753 ;; Defined at:
  2754 ;;		line 75 in file "mcc_generated_files/mcc.c"
  2755 ;; Parameters:    Size  Location     Type
  2756 ;;		None
  2757 ;; Auto vars:     Size  Location     Type
  2758 ;;		None
  2759 ;; Return value:  Size  Location     Type
  2760 ;;                  1    wreg      void 
  2761 ;; Registers used:
  2762 ;;		wreg
  2763 ;; Tracked objects:
  2764 ;;		On entry : 0/0
  2765 ;;		On exit  : 0/0
  2766 ;;		Unchanged: 0/0
  2767 ;; Data sizes:     COMMON   BANK0   BANK1
  2768 ;;      Params:         0       0       0
  2769 ;;      Locals:         0       0       0
  2770 ;;      Temps:          0       0       0
  2771 ;;      Totals:         0       0       0
  2772 ;;Total ram usage:        0 bytes
  2773 ;; Hardware stack levels used:    1
  2774 ;; Hardware stack levels required when called:    4
  2775 ;; This function calls:
  2776 ;;		Nothing
  2777 ;; This function is called by:
  2778 ;;		_SYSTEM_Initialize
  2779 ;; This function uses a non-reentrant model
  2780 ;;
  2781                           
  2782                           
  2783                           ;psect for function _WDT_Initialize
  2784  06A4                     _WDT_Initialize:	
  2785                           
  2786                           ;mcc_generated_files/mcc.c: 78:     WDTCON = 0x16;
  2787                           
  2788                           ;incstack = 0
  2789                           ; Regs used in _WDT_Initialize: [wreg]
  2790  06A4  3016               	movlw	22
  2791  06A5  0021               	movlb	1	; select bank1
  2792  06A6  0097               	movwf	23	;volatile
  2793  06A7  0008               	return
  2794  06A8                     __end_of_WDT_Initialize:	
  2795                           
  2796                           	psect	text5
  2797  055F                     __ptext5:	
  2798 ;; *************** function _TMR1_Initialize *****************
  2799 ;; Defined at:
  2800 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  2801 ;; Parameters:    Size  Location     Type
  2802 ;;		None
  2803 ;; Auto vars:     Size  Location     Type
  2804 ;;		None
  2805 ;; Return value:  Size  Location     Type
  2806 ;;                  1    wreg      void 
  2807 ;; Registers used:
  2808 ;;		wreg, status,2, status,0, pclath, cstack
  2809 ;; Tracked objects:
  2810 ;;		On entry : 0/0
  2811 ;;		On exit  : 0/0
  2812 ;;		Unchanged: 0/0
  2813 ;; Data sizes:     COMMON   BANK0   BANK1
  2814 ;;      Params:         0       0       0
  2815 ;;      Locals:         0       0       0
  2816 ;;      Temps:          0       0       0
  2817 ;;      Totals:         0       0       0
  2818 ;;Total ram usage:        0 bytes
  2819 ;; Hardware stack levels used:    1
  2820 ;; Hardware stack levels required when called:    5
  2821 ;; This function calls:
  2822 ;;		_TMR1_SetInterruptHandler
  2823 ;; This function is called by:
  2824 ;;		_SYSTEM_Initialize
  2825 ;; This function uses a non-reentrant model
  2826 ;;
  2827                           
  2828                           
  2829                           ;psect for function _TMR1_Initialize
  2830  055F                     _TMR1_Initialize:	
  2831                           
  2832                           ;mcc_generated_files/tmr1.c: 69:     T1GCON = 0x00;
  2833                           
  2834                           ;incstack = 0
  2835                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2836  055F  0020               	movlb	0	; select bank0
  2837  0560  0199               	clrf	25	;volatile
  2838                           
  2839                           ;mcc_generated_files/tmr1.c: 72:     TMR1H = 0x63;
  2840  0561  3063               	movlw	99
  2841  0562  0097               	movwf	23	;volatile
  2842                           
  2843                           ;mcc_generated_files/tmr1.c: 75:     TMR1L = 0xC0;
  2844  0563  30C0               	movlw	192
  2845  0564  0096               	movwf	22	;volatile
  2846                           
  2847                           ;mcc_generated_files/tmr1.c: 78:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  2848  0565  0817               	movf	23,w	;volatile
  2849  0566  00DB               	movwf	_timer1ReloadVal+1	;volatile
  2850  0567  0816               	movf	22,w	;volatile
  2851  0568  00DA               	movwf	_timer1ReloadVal	;volatile
  2852                           
  2853                           ;mcc_generated_files/tmr1.c: 81:     PIR1bits.TMR1IF = 0;
  2854  0569  1011               	bcf	17,0	;volatile
  2855                           
  2856                           ;mcc_generated_files/tmr1.c: 84:     PIE1bits.TMR1IE = 1;
  2857  056A  0021               	movlb	1	; select bank1
  2858  056B  1411               	bsf	17,0	;volatile
  2859                           
  2860                           ;mcc_generated_files/tmr1.c: 87:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
  2861  056C  30C4               	movlw	low _TMR1_DefaultInterruptHandler
  2862  056D  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  2863  056E  3006               	movlw	high _TMR1_DefaultInterruptHandler
  2864  056F  00F4               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  2865  0570  2667               	fcall	_TMR1_SetInterruptHandler
  2866                           
  2867                           ;mcc_generated_files/tmr1.c: 90:     T1CON = 0x11;
  2868  0571  3011               	movlw	17
  2869  0572  0020               	movlb	0	; select bank0
  2870  0573  0098               	movwf	24	;volatile
  2871  0574  0008               	return
  2872  0575                     __end_of_TMR1_Initialize:	
  2873                           
  2874                           	psect	text6
  2875  0667                     __ptext6:	
  2876 ;; *************** function _TMR1_SetInterruptHandler *****************
  2877 ;; Defined at:
  2878 ;;		line 171 in file "mcc_generated_files/tmr1.c"
  2879 ;; Parameters:    Size  Location     Type
  2880 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  2881 ;;		 -> _TMR1_Ready(1), TMR1_DefaultInterruptHandler(1), 
  2882 ;; Auto vars:     Size  Location     Type
  2883 ;;		None
  2884 ;; Return value:  Size  Location     Type
  2885 ;;                  1    wreg      void 
  2886 ;; Registers used:
  2887 ;;		wreg
  2888 ;; Tracked objects:
  2889 ;;		On entry : 0/0
  2890 ;;		On exit  : 0/0
  2891 ;;		Unchanged: 0/0
  2892 ;; Data sizes:     COMMON   BANK0   BANK1
  2893 ;;      Params:         2       0       0
  2894 ;;      Locals:         0       0       0
  2895 ;;      Temps:          0       0       0
  2896 ;;      Totals:         2       0       0
  2897 ;;Total ram usage:        2 bytes
  2898 ;; Hardware stack levels used:    1
  2899 ;; Hardware stack levels required when called:    4
  2900 ;; This function calls:
  2901 ;;		Nothing
  2902 ;; This function is called by:
  2903 ;;		_TMR1_Initialize
  2904 ;;		_logger_initialize
  2905 ;; This function uses a non-reentrant model
  2906 ;;
  2907                           
  2908                           
  2909                           ;psect for function _TMR1_SetInterruptHandler
  2910  0667                     _TMR1_SetInterruptHandler:	
  2911                           
  2912                           ;mcc_generated_files/tmr1.c: 172:     TMR1_InterruptHandler = InterruptHandler;
  2913                           
  2914                           ;incstack = 0
  2915                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  2916  0667  0874               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  2917  0668  0020               	movlb	0	; select bank0
  2918  0669  00D9               	movwf	_TMR1_InterruptHandler+1
  2919  066A  0873               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  2920  066B  00D8               	movwf	_TMR1_InterruptHandler
  2921  066C  0008               	return
  2922  066D                     __end_of_TMR1_SetInterruptHandler:	
  2923                           
  2924                           	psect	text7
  2925  041D                     __ptext7:	
  2926 ;; *************** function _PIN_MANAGER_Initialize *****************
  2927 ;; Defined at:
  2928 ;;		line 59 in file "mcc_generated_files/pin_manager.c"
  2929 ;; Parameters:    Size  Location     Type
  2930 ;;		None
  2931 ;; Auto vars:     Size  Location     Type
  2932 ;;		None
  2933 ;; Return value:  Size  Location     Type
  2934 ;;                  1    wreg      void 
  2935 ;; Registers used:
  2936 ;;		wreg, status,2, status,0, pclath, cstack
  2937 ;; Tracked objects:
  2938 ;;		On entry : 0/0
  2939 ;;		On exit  : 0/0
  2940 ;;		Unchanged: 0/0
  2941 ;; Data sizes:     COMMON   BANK0   BANK1
  2942 ;;      Params:         0       0       0
  2943 ;;      Locals:         0       0       0
  2944 ;;      Temps:          0       0       0
  2945 ;;      Totals:         0       0       0
  2946 ;;Total ram usage:        0 bytes
  2947 ;; Hardware stack levels used:    1
  2948 ;; Hardware stack levels required when called:    5
  2949 ;; This function calls:
  2950 ;;		_IOCAF4_SetInterruptHandler
  2951 ;; This function is called by:
  2952 ;;		_SYSTEM_Initialize
  2953 ;; This function uses a non-reentrant model
  2954 ;;
  2955                           
  2956                           
  2957                           ;psect for function _PIN_MANAGER_Initialize
  2958  041D                     _PIN_MANAGER_Initialize:	
  2959                           
  2960                           ;mcc_generated_files/pin_manager.c: 64:     LATA = 0x00;
  2961                           
  2962                           ;incstack = 0
  2963                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2964  041D  0022               	movlb	2	; select bank2
  2965  041E  018C               	clrf	12	;volatile
  2966                           
  2967                           ;mcc_generated_files/pin_manager.c: 65:     LATC = 0x00;
  2968  041F  018E               	clrf	14	;volatile
  2969                           
  2970                           ;mcc_generated_files/pin_manager.c: 70:     TRISA = 0x1F;
  2971  0420  301F               	movlw	31
  2972  0421  0021               	movlb	1	; select bank1
  2973  0422  008C               	movwf	12	;volatile
  2974                           
  2975                           ;mcc_generated_files/pin_manager.c: 71:     TRISC = 0x2F;
  2976  0423  302F               	movlw	47
  2977  0424  008E               	movwf	14	;volatile
  2978                           
  2979                           ;mcc_generated_files/pin_manager.c: 76:     ANSELC = 0x0F;
  2980  0425  300F               	movlw	15
  2981  0426  0023               	movlb	3	; select bank3
  2982  0427  008E               	movwf	14	;volatile
  2983                           
  2984                           ;mcc_generated_files/pin_manager.c: 77:     ANSELA = 0x07;
  2985  0428  3007               	movlw	7
  2986  0429  008C               	movwf	12	;volatile
  2987                           
  2988                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x10;
  2989  042A  3010               	movlw	16
  2990  042B  0024               	movlb	4	; select bank4
  2991  042C  008C               	movwf	12	;volatile
  2992                           
  2993                           ;mcc_generated_files/pin_manager.c: 83:     WPUC = 0x00;
  2994  042D  018E               	clrf	14	;volatile
  2995                           
  2996                           ;mcc_generated_files/pin_manager.c: 84:     OPTION_REGbits.nWPUEN = 0;
  2997  042E  0021               	movlb	1	; select bank1
  2998  042F  1395               	bcf	21,7	;volatile
  2999                           
  3000                           ;mcc_generated_files/pin_manager.c: 93:     APFCON = 0x00;
  3001  0430  0022               	movlb	2	; select bank2
  3002  0431  019D               	clrf	29	;volatile
  3003                           
  3004                           ;mcc_generated_files/pin_manager.c: 99:     IOCAFbits.IOCAF4 = 0;
  3005  0432  0027               	movlb	7	; select bank7
  3006  0433  1213               	bcf	19,4	;volatile
  3007                           
  3008                           ;mcc_generated_files/pin_manager.c: 101:     IOCANbits.IOCAN4 = 1;
  3009  0434  1612               	bsf	18,4	;volatile
  3010                           
  3011                           ;mcc_generated_files/pin_manager.c: 103:     IOCAPbits.IOCAP4 = 1;
  3012  0435  1611               	bsf	17,4	;volatile
  3013                           
  3014                           ;mcc_generated_files/pin_manager.c: 108:     IOCAF4_SetInterruptHandler(IOCAF4_DefaultIn
      +                          terruptHandler);
  3015  0436  30C5               	movlw	low _IOCAF4_DefaultInterruptHandler
  3016  0437  00F3               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler
  3017  0438  3006               	movlw	high _IOCAF4_DefaultInterruptHandler
  3018  0439  00F4               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler+1
  3019  043A  266D               	fcall	_IOCAF4_SetInterruptHandler
  3020                           
  3021                           ;mcc_generated_files/pin_manager.c: 111:     INTCONbits.IOCIE = 1;
  3022  043B  158B               	bsf	11,3	;volatile
  3023  043C  0008               	return
  3024  043D                     __end_of_PIN_MANAGER_Initialize:	
  3025                           
  3026                           	psect	text8
  3027  066D                     __ptext8:	
  3028 ;; *************** function _IOCAF4_SetInterruptHandler *****************
  3029 ;; Defined at:
  3030 ;;		line 142 in file "mcc_generated_files/pin_manager.c"
  3031 ;; Parameters:    Size  Location     Type
  3032 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  3033 ;;		 -> _IOC_Ready(1), IOCAF4_DefaultInterruptHandler(1), 
  3034 ;; Auto vars:     Size  Location     Type
  3035 ;;		None
  3036 ;; Return value:  Size  Location     Type
  3037 ;;                  1    wreg      void 
  3038 ;; Registers used:
  3039 ;;		wreg
  3040 ;; Tracked objects:
  3041 ;;		On entry : 0/0
  3042 ;;		On exit  : 0/0
  3043 ;;		Unchanged: 0/0
  3044 ;; Data sizes:     COMMON   BANK0   BANK1
  3045 ;;      Params:         2       0       0
  3046 ;;      Locals:         0       0       0
  3047 ;;      Temps:          0       0       0
  3048 ;;      Totals:         2       0       0
  3049 ;;Total ram usage:        2 bytes
  3050 ;; Hardware stack levels used:    1
  3051 ;; Hardware stack levels required when called:    4
  3052 ;; This function calls:
  3053 ;;		Nothing
  3054 ;; This function is called by:
  3055 ;;		_PIN_MANAGER_Initialize
  3056 ;;		_logger_initialize
  3057 ;; This function uses a non-reentrant model
  3058 ;;
  3059                           
  3060                           
  3061                           ;psect for function _IOCAF4_SetInterruptHandler
  3062  066D                     _IOCAF4_SetInterruptHandler:	
  3063                           
  3064                           ;mcc_generated_files/pin_manager.c: 143:     IOCAF4_InterruptHandler = InterruptHandler;
  3065                           
  3066                           ;incstack = 0
  3067                           ; Regs used in _IOCAF4_SetInterruptHandler: [wreg]
  3068  066D  0874               	movf	IOCAF4_SetInterruptHandler@InterruptHandler+1,w
  3069  066E  0020               	movlb	0	; select bank0
  3070  066F  00EF               	movwf	_IOCAF4_InterruptHandler+1
  3071  0670  0873               	movf	IOCAF4_SetInterruptHandler@InterruptHandler,w
  3072  0671  00EE               	movwf	_IOCAF4_InterruptHandler
  3073  0672  0008               	return
  3074  0673                     __end_of_IOCAF4_SetInterruptHandler:	
  3075                           
  3076                           	psect	text9
  3077  0609                     __ptext9:	
  3078 ;; *************** function _OSCILLATOR_Initialize *****************
  3079 ;; Defined at:
  3080 ;;		line 61 in file "mcc_generated_files/mcc.c"
  3081 ;; Parameters:    Size  Location     Type
  3082 ;;		None
  3083 ;; Auto vars:     Size  Location     Type
  3084 ;;		None
  3085 ;; Return value:  Size  Location     Type
  3086 ;;                  1    wreg      void 
  3087 ;; Registers used:
  3088 ;;		wreg, status,2
  3089 ;; Tracked objects:
  3090 ;;		On entry : 0/0
  3091 ;;		On exit  : 0/0
  3092 ;;		Unchanged: 0/0
  3093 ;; Data sizes:     COMMON   BANK0   BANK1
  3094 ;;      Params:         0       0       0
  3095 ;;      Locals:         0       0       0
  3096 ;;      Temps:          0       0       0
  3097 ;;      Totals:         0       0       0
  3098 ;;Total ram usage:        0 bytes
  3099 ;; Hardware stack levels used:    1
  3100 ;; Hardware stack levels required when called:    4
  3101 ;; This function calls:
  3102 ;;		Nothing
  3103 ;; This function is called by:
  3104 ;;		_SYSTEM_Initialize
  3105 ;; This function uses a non-reentrant model
  3106 ;;
  3107                           
  3108                           
  3109                           ;psect for function _OSCILLATOR_Initialize
  3110  0609                     _OSCILLATOR_Initialize:	
  3111                           
  3112                           ;mcc_generated_files/mcc.c: 64:     OSCCON = 0x70;
  3113                           
  3114                           ;incstack = 0
  3115                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3116  0609  3070               	movlw	112
  3117  060A  0021               	movlb	1	; select bank1
  3118  060B  0099               	movwf	25	;volatile
  3119                           
  3120                           ;mcc_generated_files/mcc.c: 66:     OSCTUNE = 0x00;
  3121  060C  0198               	clrf	24	;volatile
  3122                           
  3123                           ;mcc_generated_files/mcc.c: 68:     BORCON = 0x00;
  3124  060D  0022               	movlb	2	; select bank2
  3125  060E  0196               	clrf	22	;volatile
  3126  060F                     l211:	
  3127                           ;mcc_generated_files/mcc.c: 71:     {;mcc_generated_files/mcc.c: 72:     }
  3128                           
  3129                           ;mcc_generated_files/mcc.c: 70:     while(PLLR == 0)
  3130                           
  3131                           
  3132                           ;mcc_generated_files/mcc.c: 70:     while(PLLR == 0)
  3133  060F  0021               	movlb	1	; select bank1
  3134  0610  1B1A               	btfsc	26,6	;volatile
  3135  0611  0008               	return
  3136  0612  2E0F               	goto	l211
  3137  0613                     __end_of_OSCILLATOR_Initialize:	
  3138                           
  3139                           	psect	text10
  3140  0390                     __ptext10:	
  3141 ;; *************** function _EUSART_Initialize *****************
  3142 ;; Defined at:
  3143 ;;		line 75 in file "mcc_generated_files/eusart.c"
  3144 ;; Parameters:    Size  Location     Type
  3145 ;;		None
  3146 ;; Auto vars:     Size  Location     Type
  3147 ;;		None
  3148 ;; Return value:  Size  Location     Type
  3149 ;;                  1    wreg      void 
  3150 ;; Registers used:
  3151 ;;		wreg, status,2, status,0, pclath, cstack
  3152 ;; Tracked objects:
  3153 ;;		On entry : 0/0
  3154 ;;		On exit  : 0/0
  3155 ;;		Unchanged: 0/0
  3156 ;; Data sizes:     COMMON   BANK0   BANK1
  3157 ;;      Params:         0       0       0
  3158 ;;      Locals:         0       0       0
  3159 ;;      Temps:          1       0       0
  3160 ;;      Totals:         1       0       0
  3161 ;;Total ram usage:        1 bytes
  3162 ;; Hardware stack levels used:    1
  3163 ;; Hardware stack levels required when called:    5
  3164 ;; This function calls:
  3165 ;;		_EUSART_SetRxInterruptHandler
  3166 ;;		_EUSART_SetTxInterruptHandler
  3167 ;; This function is called by:
  3168 ;;		_SYSTEM_Initialize
  3169 ;; This function uses a non-reentrant model
  3170 ;;
  3171                           
  3172                           
  3173                           ;psect for function _EUSART_Initialize
  3174  0390                     _EUSART_Initialize:	
  3175                           
  3176                           ;mcc_generated_files/eusart.c: 78:     PIE1bits.RCIE = 0;
  3177                           
  3178                           ;incstack = 0
  3179                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3180  0390  0021               	movlb	1	; select bank1
  3181  0391  1291               	bcf	17,5	;volatile
  3182                           
  3183                           ;mcc_generated_files/eusart.c: 79:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  3184  0392  302B               	movlw	low _EUSART_Receive_ISR
  3185  0393  00F3               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  3186  0394  3005               	movlw	high _EUSART_Receive_ISR
  3187  0395  00F4               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  3188  0396  2679               	fcall	_EUSART_SetRxInterruptHandler
  3189                           
  3190                           ;mcc_generated_files/eusart.c: 80:     PIE1bits.TXIE = 0;
  3191  0397  0021               	movlb	1	; select bank1
  3192  0398  1211               	bcf	17,4	;volatile
  3193                           
  3194                           ;mcc_generated_files/eusart.c: 81:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  3195  0399  300E               	movlw	low _EUSART_Transmit_ISR
  3196  039A  00F3               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
  3197  039B  3005               	movlw	high _EUSART_Transmit_ISR
  3198  039C  00F4               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
  3199  039D  2673               	fcall	_EUSART_SetTxInterruptHandler
  3200                           
  3201                           ;mcc_generated_files/eusart.c: 85:     BAUDCON = 0x08;
  3202  039E  3008               	movlw	8
  3203  039F  0023               	movlb	3	; select bank3
  3204  03A0  009F               	movwf	31	;volatile
  3205                           
  3206                           ;mcc_generated_files/eusart.c: 88:     RCSTA = 0x90;
  3207  03A1  3090               	movlw	144
  3208  03A2  009D               	movwf	29	;volatile
  3209                           
  3210                           ;mcc_generated_files/eusart.c: 91:     TXSTA = 0x24;
  3211  03A3  3024               	movlw	36
  3212  03A4  009E               	movwf	30	;volatile
  3213                           
  3214                           ;mcc_generated_files/eusart.c: 94:     SPBRGL = 0x44;
  3215  03A5  3044               	movlw	68
  3216  03A6  009B               	movwf	27	;volatile
  3217                           
  3218                           ;mcc_generated_files/eusart.c: 97:     SPBRGH = 0x00;
  3219  03A7  019C               	clrf	28	;volatile
  3220                           
  3221                           ;mcc_generated_files/eusart.c: 101:     eusartTxHead = 0;
  3222  03A8  01FA               	clrf	_eusartTxHead	;volatile
  3223                           
  3224                           ;mcc_generated_files/eusart.c: 102:     eusartTxTail = 0;
  3225  03A9  0020               	movlb	0	; select bank0
  3226  03AA  01EC               	clrf	_eusartTxTail	;volatile
  3227                           
  3228                           ;mcc_generated_files/eusart.c: 103:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  3229  03AB  3008               	movlw	8
  3230  03AC  00F5               	movwf	??_EUSART_Initialize
  3231  03AD  0875               	movf	??_EUSART_Initialize,w
  3232  03AE  00F9               	movwf	_eusartTxBufferRemaining	;volatile
  3233                           
  3234                           ;mcc_generated_files/eusart.c: 105:     eusartRxHead = 0;
  3235  03AF  01EB               	clrf	_eusartRxHead	;volatile
  3236                           
  3237                           ;mcc_generated_files/eusart.c: 106:     eusartRxTail = 0;
  3238  03B0  01EA               	clrf	_eusartRxTail	;volatile
  3239                           
  3240                           ;mcc_generated_files/eusart.c: 107:     eusartRxCount = 0;
  3241  03B1  01E9               	clrf	_eusartRxCount	;volatile
  3242                           
  3243                           ;mcc_generated_files/eusart.c: 110:     PIE1bits.RCIE = 1;
  3244  03B2  0021               	movlb	1	; select bank1
  3245  03B3  1691               	bsf	17,5	;volatile
  3246  03B4  0008               	return
  3247  03B5                     __end_of_EUSART_Initialize:	
  3248                           
  3249                           	psect	text11
  3250  0673                     __ptext11:	
  3251 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  3252 ;; Defined at:
  3253 ;;		line 211 in file "mcc_generated_files/eusart.c"
  3254 ;; Parameters:    Size  Location     Type
  3255 ;;  interruptHan    2    3[COMMON] PTR FTN()void 
  3256 ;;		 -> EUSART_Transmit_ISR(1), 
  3257 ;; Auto vars:     Size  Location     Type
  3258 ;;		None
  3259 ;; Return value:  Size  Location     Type
  3260 ;;                  1    wreg      void 
  3261 ;; Registers used:
  3262 ;;		wreg
  3263 ;; Tracked objects:
  3264 ;;		On entry : 0/0
  3265 ;;		On exit  : 0/0
  3266 ;;		Unchanged: 0/0
  3267 ;; Data sizes:     COMMON   BANK0   BANK1
  3268 ;;      Params:         2       0       0
  3269 ;;      Locals:         0       0       0
  3270 ;;      Temps:          0       0       0
  3271 ;;      Totals:         2       0       0
  3272 ;;Total ram usage:        2 bytes
  3273 ;; Hardware stack levels used:    1
  3274 ;; Hardware stack levels required when called:    4
  3275 ;; This function calls:
  3276 ;;		Nothing
  3277 ;; This function is called by:
  3278 ;;		_EUSART_Initialize
  3279 ;; This function uses a non-reentrant model
  3280 ;;
  3281                           
  3282                           
  3283                           ;psect for function _EUSART_SetTxInterruptHandler
  3284  0673                     _EUSART_SetTxInterruptHandler:	
  3285                           
  3286                           ;mcc_generated_files/eusart.c: 212:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  3287                           
  3288                           ;incstack = 0
  3289                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  3290  0673  0874               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
  3291  0674  0020               	movlb	0	; select bank0
  3292  0675  00E1               	movwf	_EUSART_TxDefaultInterruptHandler+1
  3293  0676  0873               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
  3294  0677  00E0               	movwf	_EUSART_TxDefaultInterruptHandler
  3295  0678  0008               	return
  3296  0679                     __end_of_EUSART_SetTxInterruptHandler:	
  3297                           
  3298                           	psect	text12
  3299  0679                     __ptext12:	
  3300 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  3301 ;; Defined at:
  3302 ;;		line 215 in file "mcc_generated_files/eusart.c"
  3303 ;; Parameters:    Size  Location     Type
  3304 ;;  interruptHan    2    3[COMMON] PTR FTN()void 
  3305 ;;		 -> EUSART_Receive_ISR(1), 
  3306 ;; Auto vars:     Size  Location     Type
  3307 ;;		None
  3308 ;; Return value:  Size  Location     Type
  3309 ;;                  1    wreg      void 
  3310 ;; Registers used:
  3311 ;;		wreg
  3312 ;; Tracked objects:
  3313 ;;		On entry : 0/0
  3314 ;;		On exit  : 0/0
  3315 ;;		Unchanged: 0/0
  3316 ;; Data sizes:     COMMON   BANK0   BANK1
  3317 ;;      Params:         2       0       0
  3318 ;;      Locals:         0       0       0
  3319 ;;      Temps:          0       0       0
  3320 ;;      Totals:         2       0       0
  3321 ;;Total ram usage:        2 bytes
  3322 ;; Hardware stack levels used:    1
  3323 ;; Hardware stack levels required when called:    4
  3324 ;; This function calls:
  3325 ;;		Nothing
  3326 ;; This function is called by:
  3327 ;;		_EUSART_Initialize
  3328 ;; This function uses a non-reentrant model
  3329 ;;
  3330                           
  3331                           
  3332                           ;psect for function _EUSART_SetRxInterruptHandler
  3333  0679                     _EUSART_SetRxInterruptHandler:	
  3334                           
  3335                           ;mcc_generated_files/eusart.c: 216:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  3336                           
  3337                           ;incstack = 0
  3338                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  3339  0679  0874               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  3340  067A  0020               	movlb	0	; select bank0
  3341  067B  00DF               	movwf	_EUSART_RxDefaultInterruptHandler+1
  3342  067C  0873               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  3343  067D  00DE               	movwf	_EUSART_RxDefaultInterruptHandler
  3344  067E  0008               	return
  3345  067F                     __end_of_EUSART_SetRxInterruptHandler:	
  3346                           
  3347                           	psect	text13
  3348  061D                     __ptext13:	
  3349 ;; *************** function _ADC_Initialize *****************
  3350 ;; Defined at:
  3351 ;;		line 65 in file "mcc_generated_files/adc.c"
  3352 ;; Parameters:    Size  Location     Type
  3353 ;;		None
  3354 ;; Auto vars:     Size  Location     Type
  3355 ;;		None
  3356 ;; Return value:  Size  Location     Type
  3357 ;;                  1    wreg      void 
  3358 ;; Registers used:
  3359 ;;		wreg, status,2
  3360 ;; Tracked objects:
  3361 ;;		On entry : 0/0
  3362 ;;		On exit  : 0/0
  3363 ;;		Unchanged: 0/0
  3364 ;; Data sizes:     COMMON   BANK0   BANK1
  3365 ;;      Params:         0       0       0
  3366 ;;      Locals:         0       0       0
  3367 ;;      Temps:          0       0       0
  3368 ;;      Totals:         0       0       0
  3369 ;;Total ram usage:        0 bytes
  3370 ;; Hardware stack levels used:    1
  3371 ;; Hardware stack levels required when called:    4
  3372 ;; This function calls:
  3373 ;;		Nothing
  3374 ;; This function is called by:
  3375 ;;		_SYSTEM_Initialize
  3376 ;; This function uses a non-reentrant model
  3377 ;;
  3378                           
  3379                           
  3380                           ;psect for function _ADC_Initialize
  3381  061D                     _ADC_Initialize:	
  3382                           
  3383                           ;mcc_generated_files/adc.c: 70:     ADCON0 = 0x01;
  3384                           
  3385                           ;incstack = 0
  3386                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  3387  061D  3001               	movlw	1
  3388  061E  0021               	movlb	1	; select bank1
  3389  061F  009D               	movwf	29	;volatile
  3390                           
  3391                           ;mcc_generated_files/adc.c: 73:     ADCON1 = 0xF0;
  3392  0620  30F0               	movlw	240
  3393  0621  009E               	movwf	30	;volatile
  3394                           
  3395                           ;mcc_generated_files/adc.c: 76:     ADRESL = 0x00;
  3396  0622  019B               	clrf	27	;volatile
  3397                           
  3398                           ;mcc_generated_files/adc.c: 79:     ADRESH = 0x00;
  3399  0623  019C               	clrf	28	;volatile
  3400                           
  3401                           ;mcc_generated_files/adc.c: 82:     PIE1bits.ADIE = 1;
  3402  0624  1711               	bsf	17,6	;volatile
  3403  0625  0008               	return
  3404  0626                     __end_of_ADC_Initialize:	
  3405                           
  3406                           	psect	text14
  3407  0319                     __ptext14:	
  3408 ;; *************** function _ESP_message_handler *****************
  3409 ;; Defined at:
  3410 ;;		line 152 in file "esp1.c"
  3411 ;; Parameters:    Size  Location     Type
  3412 ;;		None
  3413 ;; Auto vars:     Size  Location     Type
  3414 ;;  index           2    0        PTR unsigned char 
  3415 ;;  ret             1   45[BANK0 ] unsigned char 
  3416 ;;  aux             1    0        unsigned char 
  3417 ;; Return value:  Size  Location     Type
  3418 ;;                  1    wreg      void 
  3419 ;; Registers used:
  3420 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3421 ;; Tracked objects:
  3422 ;;		On entry : 0/0
  3423 ;;		On exit  : 0/0
  3424 ;;		Unchanged: 0/0
  3425 ;; Data sizes:     COMMON   BANK0   BANK1
  3426 ;;      Params:         0       0       0
  3427 ;;      Locals:         0       1       0
  3428 ;;      Temps:          0       2       0
  3429 ;;      Totals:         0       3       0
  3430 ;;Total ram usage:        3 bytes
  3431 ;; Hardware stack levels used:    1
  3432 ;; Hardware stack levels required when called:   13
  3433 ;; This function calls:
  3434 ;;		_ESP_process_rx_data
  3435 ;;		_ESP_read
  3436 ;; This function is called by:
  3437 ;;		_main
  3438 ;; This function uses a non-reentrant model
  3439 ;;
  3440                           
  3441                           
  3442                           ;psect for function _ESP_message_handler
  3443  0319                     _ESP_message_handler:	
  3444                           
  3445                           ;esp1.c: 154:     unsigned char ret,aux;;esp1.c: 155:     char *index;;esp1.c: 157:     
      +                          ret = ESP_read();
  3446                           
  3447                           ;incstack = 0
  3448                           ; Regs used in _ESP_message_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3449  0319  22EA               	fcall	_ESP_read
  3450  031A  0020               	movlb	0	; select bank0
  3451  031B  00CB               	movwf	??_ESP_message_handler
  3452  031C  084B               	movf	??_ESP_message_handler,w
  3453  031D  00CD               	movwf	ESP_message_handler@ret
  3454                           
  3455                           ;esp1.c: 159:     switch (ret) {
  3456  031E  2B2A               	goto	l3124
  3457  031F                     l3116:	
  3458                           ;esp1.c: 163:         case ESP_RX:
  3459                           
  3460                           ;esp1.c: 161:             break;
  3461                           
  3462                           ;esp1.c: 160:         case ESP_OTHER:
  3463                           
  3464                           
  3465                           ;esp1.c: 164:             ESP_process_rx_data();
  3466  031F  23B5               	fcall	_ESP_process_rx_data
  3467                           
  3468                           ;esp1.c: 165:             break;
  3469  0320  0008               	return
  3470  0321                     l3118:	
  3471                           ;esp1.c: 167:         case ESP_CONNECT:
  3472                           
  3473                           
  3474                           ;esp1.c: 168:             esp_channel = esp_read_data[0];
  3475  0321  0021               	movlb	1	; select bank1
  3476  0322  0828               	movf	_esp_read_data^(0+128),w	;volatile
  3477  0323  0020               	movlb	0	; select bank0
  3478  0324  00CB               	movwf	??_ESP_message_handler
  3479  0325  084B               	movf	??_ESP_message_handler,w
  3480  0326  00E6               	movwf	_esp_channel	;volatile
  3481                           
  3482                           ;esp1.c: 169:             break;
  3483  0327  0008               	return
  3484  0328                     l3120:	
  3485                           ;esp1.c: 171:         case ESP_CLOSED:
  3486                           
  3487                           
  3488                           ;esp1.c: 172:             esp_channel = 0;
  3489  0328  01E6               	clrf	_esp_channel	;volatile
  3490                           
  3491                           ;esp1.c: 177:     }
  3492                           
  3493                           ;esp1.c: 176:             break;
  3494                           
  3495                           ;esp1.c: 175:         default:
  3496                           
  3497                           ;esp1.c: 173:             break;
  3498  0329  0008               	return
  3499  032A                     l3124:	
  3500  032A  084D               	movf	ESP_message_handler@ret,w
  3501  032B  00CB               	movwf	??_ESP_message_handler
  3502  032C  01CC               	clrf	??_ESP_message_handler+1
  3503                           
  3504                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3505                           ; Switch size 1, requested type "space"
  3506                           ; Number of cases is 1, Range of values is 0 to 0
  3507                           ; switch strategies available:
  3508                           ; Name         Instructions Cycles
  3509                           ; simple_byte            4     3 (average)
  3510                           ; direct_byte            8     6 (fixed)
  3511                           ; jumptable            260     6 (fixed)
  3512                           ;	Chosen strategy is simple_byte
  3513  032D  084C               	movf	??_ESP_message_handler+1,w
  3514  032E  3A00               	xorlw	0	; case 0
  3515  032F  1903               	skipnz
  3516  0330  2B32               	goto	l3204
  3517  0331  2B40               	goto	l479
  3518  0332                     l3204:	
  3519                           
  3520                           ; Switch size 1, requested type "space"
  3521                           ; Number of cases is 4, Range of values is 0 to 8
  3522                           ; switch strategies available:
  3523                           ; Name         Instructions Cycles
  3524                           ; simple_byte           13     7 (average)
  3525                           ; direct_byte           24     6 (fixed)
  3526                           ; jumptable            260     6 (fixed)
  3527                           ;	Chosen strategy is simple_byte
  3528  0332  084B               	movf	??_ESP_message_handler,w
  3529  0333  3A00               	xorlw	0	; case 0
  3530  0334  1903               	skipnz
  3531  0335  2B40               	goto	l479
  3532  0336  3A04               	xorlw	4	; case 4
  3533  0337  1903               	skipnz
  3534  0338  2B1F               	goto	l3116
  3535  0339  3A02               	xorlw	2	; case 6
  3536  033A  1903               	skipnz
  3537  033B  2B21               	goto	l3118
  3538  033C  3A0E               	xorlw	14	; case 8
  3539  033D  1903               	skipnz
  3540  033E  2B28               	goto	l3120
  3541  033F  2B40               	goto	l479
  3542  0340                     l479:	
  3543  0340  0008               	return
  3544  0341                     __end_of_ESP_message_handler:	
  3545                           
  3546                           	psect	text15
  3547  03B5                     __ptext15:	
  3548 ;; *************** function _ESP_process_rx_data *****************
  3549 ;; Defined at:
  3550 ;;		line 137 in file "esp1.c"
  3551 ;; Parameters:    Size  Location     Type
  3552 ;;		None
  3553 ;; Auto vars:     Size  Location     Type
  3554 ;;  aux             1   42[BANK0 ] unsigned char 
  3555 ;;  index           1   41[BANK0 ] PTR unsigned char 
  3556 ;;		 -> NULL(0), esp_read_data(16), 
  3557 ;; Return value:  Size  Location     Type
  3558 ;;                  1    wreg      void 
  3559 ;; Registers used:
  3560 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3561 ;; Tracked objects:
  3562 ;;		On entry : 0/0
  3563 ;;		On exit  : 0/0
  3564 ;;		Unchanged: 0/0
  3565 ;; Data sizes:     COMMON   BANK0   BANK1
  3566 ;;      Params:         0       0       0
  3567 ;;      Locals:         0       2       0
  3568 ;;      Temps:          0       2       0
  3569 ;;      Totals:         0       4       0
  3570 ;;Total ram usage:        4 bytes
  3571 ;; Hardware stack levels used:    1
  3572 ;; Hardware stack levels required when called:   12
  3573 ;; This function calls:
  3574 ;;		Absolute function
  3575 ;;		_ESP_default_application_handler
  3576 ;;		_process_message
  3577 ;;		_strstr
  3578 ;; This function is called by:
  3579 ;;		_ESP_message_handler
  3580 ;; This function uses a non-reentrant model
  3581 ;;
  3582                           
  3583                           
  3584                           ;psect for function _ESP_process_rx_data
  3585  03B5                     _ESP_process_rx_data:	
  3586                           
  3587                           ;esp1.c: 139:     char *index;;esp1.c: 140:     unsigned char aux;;esp1.c: 142:     esp_
      +                          channel = esp_read_data[5];
  3588                           
  3589                           ;incstack = 0
  3590                           ; Regs used in _ESP_process_rx_data: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3591  03B5  0021               	movlb	1	; select bank1
  3592  03B6  082D               	movf	(_esp_read_data^(0+128)+5),w	;volatile
  3593  03B7  0020               	movlb	0	; select bank0
  3594  03B8  00C7               	movwf	??_ESP_process_rx_data
  3595  03B9  0847               	movf	??_ESP_process_rx_data,w
  3596  03BA  00E6               	movwf	_esp_channel	;volatile
  3597                           
  3598                           ;esp1.c: 143:     index = strstr(esp_read_data,":");
  3599  03BB  30BF               	movlw	low (STR_13| (0+32768))
  3600  03BC  00A4               	movwf	strstr@n
  3601  03BD  3086               	movlw	high (STR_13| (0+32768))
  3602  03BE  00A5               	movwf	strstr@n+1
  3603  03BF  30A8               	movlw	(low (_esp_read_data| 0))& (0+255)
  3604  03C0  2273               	fcall	_strstr
  3605  03C1  0020               	movlb	0	; select bank0
  3606  03C2  00C7               	movwf	??_ESP_process_rx_data
  3607  03C3  0847               	movf	??_ESP_process_rx_data,w
  3608  03C4  00C9               	movwf	ESP_process_rx_data@index
  3609                           
  3610                           ;esp1.c: 144:     aux = *(++index);
  3611  03C5  3001               	movlw	1
  3612  03C6  00C7               	movwf	??_ESP_process_rx_data
  3613  03C7  0847               	movf	??_ESP_process_rx_data,w
  3614  03C8  07C9               	addwf	ESP_process_rx_data@index,f
  3615  03C9  0849               	movf	ESP_process_rx_data@index,w
  3616  03CA  0086               	movwf	6
  3617  03CB  0187               	clrf	7
  3618  03CC  0801               	movf	1,w
  3619  03CD  00C8               	movwf	??_ESP_process_rx_data+1
  3620  03CE  0848               	movf	??_ESP_process_rx_data+1,w
  3621  03CF  00CA               	movwf	ESP_process_rx_data@aux
  3622                           
  3623                           ;esp1.c: 149:     ESP_external_message_handler(aux);
  3624  03D0  084A               	movf	ESP_process_rx_data@aux,w
  3625  03D1  00C7               	movwf	??_ESP_process_rx_data
  3626  03D2  0847               	movf	??_ESP_process_rx_data,w
  3627  03D3  00C4               	movwf	ESP_default_application_handler@data
  3628  03D4  0857               	movf	_ESP_external_message_handler+1,w
  3629  03D5  008A               	movwf	10
  3630  03D6  0856               	movf	_ESP_external_message_handler,w
  3631  03D7  000A               	callw
  3632  03D8  3183               	pagesel	$
  3633  03D9  0008               	return
  3634  03DA                     __end_of_ESP_process_rx_data:	
  3635                           
  3636                           	psect	text16
  3637  06C3                     __ptext16:	
  3638 ;; *************** function _ESP_default_application_handler *****************
  3639 ;; Defined at:
  3640 ;;		line 212 in file "esp1.c"
  3641 ;; Parameters:    Size  Location     Type
  3642 ;;  data            1   36[BANK0 ] unsigned char 
  3643 ;; Auto vars:     Size  Location     Type
  3644 ;;		None
  3645 ;; Return value:  Size  Location     Type
  3646 ;;                  1    wreg      void 
  3647 ;; Registers used:
  3648 ;;		None
  3649 ;; Tracked objects:
  3650 ;;		On entry : 0/0
  3651 ;;		On exit  : 0/0
  3652 ;;		Unchanged: 0/0
  3653 ;; Data sizes:     COMMON   BANK0   BANK1
  3654 ;;      Params:         0       1       0
  3655 ;;      Locals:         0       0       0
  3656 ;;      Temps:          0       0       0
  3657 ;;      Totals:         0       1       0
  3658 ;;Total ram usage:        1 bytes
  3659 ;; Hardware stack levels used:    1
  3660 ;; Hardware stack levels required when called:    4
  3661 ;; This function calls:
  3662 ;;		Nothing
  3663 ;; This function is called by:
  3664 ;;		_ESP_initialize
  3665 ;;		_ESP_process_rx_data
  3666 ;; This function uses a non-reentrant model
  3667 ;;
  3668                           
  3669                           
  3670                           ;psect for function _ESP_default_application_handler
  3671  06C3                     _ESP_default_application_handler:	
  3672                           
  3673                           ;incstack = 0
  3674                           ; Regs used in _ESP_default_application_handler: []
  3675  06C3  0008               	return
  3676  06C4                     __end_of_ESP_default_application_handler:	
  3677                           
  3678                           	psect	text17
  3679  01E0                     __ptext17:	
  3680 ;; *************** function _process_message *****************
  3681 ;; Defined at:
  3682 ;;		line 45 in file "logger.c"
  3683 ;; Parameters:    Size  Location     Type
  3684 ;;  message         1   36[BANK0 ] unsigned char 
  3685 ;; Auto vars:     Size  Location     Type
  3686 ;;		None
  3687 ;; Return value:  Size  Location     Type
  3688 ;;                  1    wreg      void 
  3689 ;; Registers used:
  3690 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3691 ;; Tracked objects:
  3692 ;;		On entry : 0/0
  3693 ;;		On exit  : 0/0
  3694 ;;		Unchanged: 0/0
  3695 ;; Data sizes:     COMMON   BANK0   BANK1
  3696 ;;      Params:         0       1       0
  3697 ;;      Locals:         0       0       0
  3698 ;;      Temps:          0       2       0
  3699 ;;      Totals:         0       3       0
  3700 ;;Total ram usage:        3 bytes
  3701 ;; Hardware stack levels used:    1
  3702 ;; Hardware stack levels required when called:   11
  3703 ;; This function calls:
  3704 ;;		_ADC_GetConversion
  3705 ;;		_ESP_write
  3706 ;;		_TMR1_StartTimer
  3707 ;;		_TMR1_StopTimer
  3708 ;;		_read_analog
  3709 ;;		_toggle_format
  3710 ;; This function is called by:
  3711 ;;		_main
  3712 ;;		_logger_initialize
  3713 ;;		_bt_message_handler
  3714 ;;		_ESP_process_rx_data
  3715 ;; This function uses a non-reentrant model
  3716 ;;
  3717                           
  3718                           
  3719                           ;psect for function _process_message
  3720  01E0                     _process_message:	
  3721                           
  3722                           ;logger.c: 45: void process_message(unsigned char message);logger.c: 46: {;logger.c: 49:
      +                               switch (message) {
  3723                           
  3724                           ;incstack = 0
  3725                           ; Regs used in _process_message: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3726  01E0  2A0C               	goto	l3074
  3727  01E1                     l3052:	
  3728                           ;logger.c: 50:         case 't':
  3729                           
  3730                           
  3731                           ;logger.c: 54:             ESP_write("Ok\n",3);
  3732  01E1  30A0               	movlw	low (STR_18| (0+32768))
  3733  01E2  0020               	movlb	0	; select bank0
  3734  01E3  00B3               	movwf	ESP_write@pt
  3735  01E4  3086               	movlw	high (STR_18| (0+32768))
  3736  01E5  00B4               	movwf	ESP_write@pt+1
  3737  01E6  3003               	movlw	3
  3738  01E7  00C5               	movwf	??_process_message
  3739  01E8  0845               	movf	??_process_message,w
  3740  01E9  00B5               	movwf	ESP_write@length
  3741  01EA  2052               	fcall	_ESP_write
  3742                           
  3743                           ;logger.c: 56:             break;
  3744  01EB  0008               	return
  3745  01EC                     l3054:	
  3746                           ;logger.c: 58:         case 'a':
  3747                           
  3748                           
  3749                           ;logger.c: 59:             ADC_value = ADC_GetConversion(channel_AN2);
  3750  01EC  3002               	movlw	2
  3751  01ED  2546               	fcall	_ADC_GetConversion
  3752  01EE  0874               	movf	?_ADC_GetConversion+1,w
  3753  01EF  0020               	movlb	0	; select bank0
  3754  01F0  00DD               	movwf	_ADC_value+1	;volatile
  3755  01F1  0873               	movf	?_ADC_GetConversion,w
  3756  01F2  00DC               	movwf	_ADC_value	;volatile
  3757                           
  3758                           ;logger.c: 60:             read_analog();
  3759  01F3  247A               	fcall	_read_analog
  3760                           
  3761                           ;logger.c: 61:             break;
  3762  01F4  0008               	return
  3763  01F5                     l3058:	
  3764                           ;logger.c: 63:         case 'T':
  3765                           
  3766                           
  3767                           ;logger.c: 64:             toggle_format();
  3768  01F5  245C               	fcall	_toggle_format
  3769                           
  3770                           ;logger.c: 65:             break;
  3771  01F6  0008               	return
  3772  01F7                     l3060:	
  3773                           ;logger.c: 67:         case 's':
  3774                           
  3775                           
  3776                           ;logger.c: 68:             if (TMR1_state == TMR1_RUNNING)
  3777  01F7  0020               	movlb	0	; select bank0
  3778  01F8  0364               	decf	_TMR1_state,w	;volatile
  3779  01F9  1903               	btfsc	3,2
  3780  01FA  0008               	return
  3781                           
  3782                           ;logger.c: 70:             TMR1_StartTimer();
  3783                           
  3784                           ;logger.c: 69:                 return;
  3785  01FB  26B1               	fcall	_TMR1_StartTimer
  3786                           
  3787                           ;logger.c: 71:             TMR1_state = TMR1_RUNNING;
  3788  01FC  3001               	movlw	1
  3789  01FD  0020               	movlb	0	; select bank0
  3790  01FE  00C5               	movwf	??_process_message
  3791  01FF  0845               	movf	??_process_message,w
  3792  0200  00E4               	movwf	_TMR1_state	;volatile
  3793                           
  3794                           ;logger.c: 73:             break;
  3795  0201  0008               	return
  3796  0202                     l3068:	
  3797                           ;logger.c: 75:         case 'S':
  3798                           
  3799                           
  3800                           ;logger.c: 77:             TMR1_StopTimer();
  3801  0202  26AE               	fcall	_TMR1_StopTimer
  3802                           
  3803                           ;logger.c: 78:             TMR1_state = TMR1_STOP;
  3804  0203  0020               	movlb	0	; select bank0
  3805  0204  01E4               	clrf	_TMR1_state	;volatile
  3806                           
  3807                           ;logger.c: 79:             break;
  3808  0205  0008               	return
  3809  0206                     l563:	
  3810                           ;logger.c: 83:             do { LATAbits.LATA5 = 0; } while(0);
  3811                           
  3812                           ;logger.c: 81:         case 'o':
  3813                           
  3814  0206  0022               	movlb	2	; select bank2
  3815  0207  128C               	bcf	12,5	;volatile
  3816                           
  3817                           ;logger.c: 84:             break;
  3818  0208  0008               	return
  3819  0209                     l566:	
  3820                           ;logger.c: 88:             do { LATAbits.LATA5 = 1; } while(0);
  3821                           
  3822                           ;logger.c: 86:         case 'O':
  3823                           
  3824  0209  0022               	movlb	2	; select bank2
  3825  020A  168C               	bsf	12,5	;volatile
  3826                           
  3827                           ;logger.c: 93:     }
  3828                           
  3829                           ;logger.c: 92:             break;
  3830                           
  3831                           ;logger.c: 91:         default:
  3832                           
  3833                           ;logger.c: 89:             break;
  3834  020B  0008               	return
  3835  020C                     l3074:	
  3836  020C  0020               	movlb	0	; select bank0
  3837  020D  0844               	movf	process_message@message,w
  3838  020E  00C5               	movwf	??_process_message
  3839  020F  01C6               	clrf	??_process_message+1
  3840                           
  3841                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3842                           ; Switch size 1, requested type "space"
  3843                           ; Number of cases is 1, Range of values is 0 to 0
  3844                           ; switch strategies available:
  3845                           ; Name         Instructions Cycles
  3846                           ; simple_byte            4     3 (average)
  3847                           ; direct_byte            8     6 (fixed)
  3848                           ; jumptable            260     6 (fixed)
  3849                           ;	Chosen strategy is simple_byte
  3850  0210  0846               	movf	??_process_message+1,w
  3851  0211  3A00               	xorlw	0	; case 0
  3852  0212  1903               	skipnz
  3853  0213  2A15               	goto	l3206
  3854  0214  2A2C               	goto	l560
  3855  0215                     l3206:	
  3856                           
  3857                           ; Switch size 1, requested type "space"
  3858                           ; Number of cases is 7, Range of values is 79 to 116
  3859                           ; switch strategies available:
  3860                           ; Name         Instructions Cycles
  3861                           ; simple_byte           22    12 (average)
  3862                           ; direct_byte           85     9 (fixed)
  3863                           ; jumptable            263     9 (fixed)
  3864                           ;	Chosen strategy is simple_byte
  3865  0215  0845               	movf	??_process_message,w
  3866  0216  3A4F               	xorlw	79	; case 79
  3867  0217  1903               	skipnz
  3868  0218  2A09               	goto	l566
  3869  0219  3A1C               	xorlw	28	; case 83
  3870  021A  1903               	skipnz
  3871  021B  2A02               	goto	l3068
  3872  021C  3A07               	xorlw	7	; case 84
  3873  021D  1903               	skipnz
  3874  021E  29F5               	goto	l3058
  3875  021F  3A35               	xorlw	53	; case 97
  3876  0220  1903               	skipnz
  3877  0221  29EC               	goto	l3054
  3878  0222  3A0E               	xorlw	14	; case 111
  3879  0223  1903               	skipnz
  3880  0224  2A06               	goto	l563
  3881  0225  3A1C               	xorlw	28	; case 115
  3882  0226  1903               	skipnz
  3883  0227  29F7               	goto	l3060
  3884  0228  3A07               	xorlw	7	; case 116
  3885  0229  1903               	skipnz
  3886  022A  29E1               	goto	l3052
  3887  022B  2A2C               	goto	l560
  3888  022C                     l560:	
  3889  022C  0008               	return
  3890  022D                     __end_of_process_message:	
  3891                           
  3892                           	psect	text18
  3893  045C                     __ptext18:	
  3894 ;; *************** function _toggle_format *****************
  3895 ;; Defined at:
  3896 ;;		line 152 in file "logger.c"
  3897 ;; Parameters:    Size  Location     Type
  3898 ;;		None
  3899 ;; Auto vars:     Size  Location     Type
  3900 ;;		None
  3901 ;; Return value:  Size  Location     Type
  3902 ;;                  1    wreg      void 
  3903 ;; Registers used:
  3904 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3905 ;; Tracked objects:
  3906 ;;		On entry : 0/0
  3907 ;;		On exit  : 0/0
  3908 ;;		Unchanged: 0/0
  3909 ;; Data sizes:     COMMON   BANK0   BANK1
  3910 ;;      Params:         0       0       0
  3911 ;;      Locals:         0       0       0
  3912 ;;      Temps:          0       1       0
  3913 ;;      Totals:         0       1       0
  3914 ;;Total ram usage:        1 bytes
  3915 ;; Hardware stack levels used:    1
  3916 ;; Hardware stack levels required when called:   10
  3917 ;; This function calls:
  3918 ;;		_ESP_write
  3919 ;; This function is called by:
  3920 ;;		_process_message
  3921 ;; This function uses a non-reentrant model
  3922 ;;
  3923                           
  3924                           
  3925                           ;psect for function _toggle_format
  3926  045C                     _toggle_format:	
  3927                           
  3928                           ;logger.c: 154:     if (message_format == MESSAGE_BINARY) {
  3929                           
  3930                           ;incstack = 0
  3931                           ; Regs used in _toggle_format: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3932  045C  0020               	movlb	0	; select bank0
  3933  045D  0865               	movf	_message_format,w	;volatile
  3934  045E  1D03               	btfss	3,2
  3935  045F  2C6E               	goto	l3046
  3936                           
  3937                           ;logger.c: 155:         message_format = MESSAGE_TEXT;
  3938  0460  3001               	movlw	1
  3939  0461  00BB               	movwf	??_toggle_format
  3940  0462  083B               	movf	??_toggle_format,w
  3941  0463  00E5               	movwf	_message_format	;volatile
  3942                           
  3943                           ;logger.c: 159:             ESP_write("tmode\n",6);
  3944  0464  3046               	movlw	low (STR_19| (0+32768))
  3945  0465  00B3               	movwf	ESP_write@pt
  3946  0466  3086               	movlw	high (STR_19| (0+32768))
  3947  0467  00B4               	movwf	ESP_write@pt+1
  3948  0468  3006               	movlw	6
  3949  0469  00BB               	movwf	??_toggle_format
  3950  046A  083B               	movf	??_toggle_format,w
  3951  046B  00B5               	movwf	ESP_write@length
  3952  046C  2052               	fcall	_ESP_write
  3953                           
  3954                           ;logger.c: 161:     } else {
  3955  046D  0008               	return
  3956  046E                     l3046:	
  3957                           
  3958                           ;logger.c: 162:         message_format = MESSAGE_BINARY;
  3959  046E  0020               	movlb	0	; select bank0
  3960  046F  01E5               	clrf	_message_format	;volatile
  3961                           
  3962                           ;logger.c: 166:             ESP_write("bmode\n",6);
  3963  0470  303F               	movlw	low (STR_20| (0+32768))
  3964  0471  00B3               	movwf	ESP_write@pt
  3965  0472  3086               	movlw	high (STR_20| (0+32768))
  3966  0473  00B4               	movwf	ESP_write@pt+1
  3967  0474  3006               	movlw	6
  3968  0475  00BB               	movwf	??_toggle_format
  3969  0476  083B               	movf	??_toggle_format,w
  3970  0477  00B5               	movwf	ESP_write@length
  3971  0478  2052               	fcall	_ESP_write
  3972  0479  0008               	return
  3973  047A                     __end_of_toggle_format:	
  3974                           ;logger.c: 168:     }
  3975                           
  3976                           
  3977                           	psect	text19
  3978  047A                     __ptext19:	
  3979 ;; *************** function _read_analog *****************
  3980 ;; Defined at:
  3981 ;;		line 96 in file "logger.c"
  3982 ;; Parameters:    Size  Location     Type
  3983 ;;		None
  3984 ;; Auto vars:     Size  Location     Type
  3985 ;;  mess            6   28[BANK0 ] unsigned char [6]
  3986 ;;  aux1            4    0        unsigned long 
  3987 ;;  adc_val         2   34[BANK0 ] unsigned short 
  3988 ;; Return value:  Size  Location     Type
  3989 ;;                  1    wreg      void 
  3990 ;; Registers used:
  3991 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3992 ;; Tracked objects:
  3993 ;;		On entry : 0/0
  3994 ;;		On exit  : 0/0
  3995 ;;		Unchanged: 0/0
  3996 ;; Data sizes:     COMMON   BANK0   BANK1
  3997 ;;      Params:         0       0       0
  3998 ;;      Locals:         0       8       0
  3999 ;;      Temps:          0       1       0
  4000 ;;      Totals:         0       9       0
  4001 ;;Total ram usage:        9 bytes
  4002 ;; Hardware stack levels used:    1
  4003 ;; Hardware stack levels required when called:   10
  4004 ;; This function calls:
  4005 ;;		_ESP_wait_for
  4006 ;;		_ESP_write
  4007 ;; This function is called by:
  4008 ;;		_main
  4009 ;;		_process_message
  4010 ;; This function uses a non-reentrant model
  4011 ;;
  4012                           
  4013                           
  4014                           ;psect for function _read_analog
  4015  047A                     _read_analog:	
  4016                           
  4017                           ;logger.c: 98:     unsigned short adc_val;;logger.c: 100:     unsigned long aux1;;logger
      +                          .c: 101:     unsigned char mess[6];;logger.c: 103:     adc_val = ADC_value;
  4018                           
  4019                           ;incstack = 0
  4020                           ; Regs used in _read_analog: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4021  047A  0020               	movlb	0	; select bank0
  4022  047B  085D               	movf	_ADC_value+1,w	;volatile
  4023  047C  00C3               	movwf	read_analog@adc_val+1
  4024  047D  085C               	movf	_ADC_value,w	;volatile
  4025  047E  00C2               	movwf	read_analog@adc_val
  4026                           
  4027                           ;logger.c: 106:     if (message_format == MESSAGE_BINARY) {
  4028  047F  0865               	movf	_message_format,w	;volatile
  4029  0480  1D03               	btfss	3,2
  4030  0481  2C95               	goto	l3038
  4031                           
  4032                           ;logger.c: 107:         mess[0] = (unsigned char)(adc_val & 0xff);
  4033  0482  0842               	movf	read_analog@adc_val,w
  4034  0483  00BB               	movwf	??_read_analog
  4035  0484  083B               	movf	??_read_analog,w
  4036  0485  00BC               	movwf	read_analog@mess
  4037                           
  4038                           ;logger.c: 108:         mess[1] = (unsigned char)((adc_val >> 8) & 0xff);
  4039  0486  0843               	movf	read_analog@adc_val+1,w
  4040  0487  00BB               	movwf	??_read_analog
  4041  0488  083B               	movf	??_read_analog,w
  4042  0489  00BD               	movwf	read_analog@mess+1
  4043                           
  4044                           ;logger.c: 125:         ESP_write(mess,2);
  4045  048A  303C               	movlw	low read_analog@mess
  4046  048B  00B3               	movwf	ESP_write@pt
  4047  048C  3000               	movlw	high read_analog@mess
  4048  048D  00B4               	movwf	ESP_write@pt+1
  4049  048E  3002               	movlw	2
  4050  048F  00BB               	movwf	??_read_analog
  4051  0490  083B               	movf	??_read_analog,w
  4052  0491  00B5               	movwf	ESP_write@length
  4053  0492  2052               	fcall	_ESP_write
  4054                           
  4055                           ;logger.c: 126:         ESP_wait_for(ESP_SEND_OK);
  4056  0493  3001               	movlw	1
  4057  0494  2369               	fcall	_ESP_wait_for
  4058  0495                     l3038:	
  4059                           ;logger.c: 147:     }
  4060                           
  4061                           ;logger.c: 129:     } else {
  4062                           
  4063                           
  4064                           ;logger.c: 149:     ADC_state = ADC_IDLE;
  4065  0495  0020               	movlb	0	; select bank0
  4066  0496  01ED               	clrf	_ADC_state	;volatile
  4067  0497  0008               	return
  4068  0498                     __end_of_read_analog:	
  4069                           
  4070                           	psect	text20
  4071  0052                     __ptext20:	
  4072 ;; *************** function _ESP_write *****************
  4073 ;; Defined at:
  4074 ;;		line 180 in file "esp1.c"
  4075 ;; Parameters:    Size  Location     Type
  4076 ;;  pt              2   19[BANK0 ] PTR unsigned char 
  4077 ;;		 -> STR_20(7), STR_19(7), read_analog@mess(6), STR_18(4), 
  4078 ;;  length          1   21[BANK0 ] unsigned char 
  4079 ;; Auto vars:     Size  Location     Type
  4080 ;;  aux             1   26[BANK0 ] unsigned char 
  4081 ;;  res             1   25[BANK0 ] unsigned char 
  4082 ;; Return value:  Size  Location     Type
  4083 ;;                  1    wreg      void 
  4084 ;; Registers used:
  4085 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4086 ;; Tracked objects:
  4087 ;;		On entry : 0/0
  4088 ;;		On exit  : 0/0
  4089 ;;		Unchanged: 0/0
  4090 ;; Data sizes:     COMMON   BANK0   BANK1
  4091 ;;      Params:         0       3       0
  4092 ;;      Locals:         0       2       0
  4093 ;;      Temps:          0       3       0
  4094 ;;      Totals:         0       8       0
  4095 ;;Total ram usage:        8 bytes
  4096 ;; Hardware stack levels used:    1
  4097 ;; Hardware stack levels required when called:    9
  4098 ;; This function calls:
  4099 ;;		_ESP_wait_for
  4100 ;;		___awdiv
  4101 ;;		___awmod
  4102 ;;		__puts
  4103 ;;		_write
  4104 ;; This function is called by:
  4105 ;;		_process_message
  4106 ;;		_read_analog
  4107 ;;		_toggle_format
  4108 ;; This function uses a non-reentrant model
  4109 ;;
  4110                           
  4111                           
  4112                           ;psect for function _ESP_write
  4113  0052                     _ESP_write:	
  4114                           
  4115                           ;esp1.c: 180: void ESP_write(unsigned char *pt, unsigned char length);esp1.c: 181: {;esp
      +                          1.c: 182:     unsigned char aux, res;;esp1.c: 184:     _puts("AT+CIPSEND=");
  4116                           
  4117                           ;incstack = 0
  4118                           ; Regs used in _ESP_write: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4119  0052  30F3               	movlw	low (STR_14| (0+32768))
  4120  0053  00F5               	movwf	__puts@pt
  4121  0054  3085               	movlw	high (STR_14| (0+32768))
  4122  0055  00F6               	movwf	__puts@pt+1
  4123  0056  2341               	fcall	__puts
  4124                           
  4125                           ;esp1.c: 185:     aux = esp_channel;
  4126  0057  0020               	movlb	0	; select bank0
  4127  0058  0866               	movf	_esp_channel,w	;volatile
  4128  0059  00B6               	movwf	??_ESP_write
  4129  005A  0836               	movf	??_ESP_write,w
  4130  005B  00BA               	movwf	ESP_write@aux
  4131                           
  4132                           ;esp1.c: 186:     write(&aux,1);
  4133  005C  303A               	movlw	low ESP_write@aux
  4134  005D  00F5               	movwf	write@pt
  4135  005E  3000               	movlw	high ESP_write@aux
  4136  005F  00F6               	movwf	write@pt+1
  4137  0060  01F7               	clrf	write@lenght
  4138  0061  0AF7               	incf	write@lenght,f
  4139  0062  24F1               	fcall	_write
  4140                           
  4141                           ;esp1.c: 187:     _puts(",");
  4142  0063  30BD               	movlw	low (STR_15| (0+32768))
  4143  0064  00F5               	movwf	__puts@pt
  4144  0065  3086               	movlw	high (STR_15| (0+32768))
  4145  0066  00F6               	movwf	__puts@pt+1
  4146  0067  2341               	fcall	__puts
  4147                           
  4148                           ;esp1.c: 189:     aux = length;
  4149  0068  0020               	movlb	0	; select bank0
  4150  0069  0835               	movf	ESP_write@length,w
  4151  006A  00B6               	movwf	??_ESP_write
  4152  006B  0836               	movf	??_ESP_write,w
  4153  006C  00BA               	movwf	ESP_write@aux
  4154                           
  4155                           ;esp1.c: 190:     if (aux > 9) {
  4156  006D  300A               	movlw	10
  4157  006E  023A               	subwf	ESP_write@aux,w
  4158  006F  1C03               	skipc
  4159  0070  28A6               	goto	l3014
  4160                           
  4161                           ;esp1.c: 191:         res = aux%10;
  4162  0071  300A               	movlw	10
  4163  0072  00F3               	movwf	___awmod@divisor
  4164  0073  3000               	movlw	0
  4165  0074  00F4               	movwf	___awmod@divisor+1
  4166  0075  083A               	movf	ESP_write@aux,w
  4167  0076  00B6               	movwf	??_ESP_write
  4168  0077  01B7               	clrf	??_ESP_write+1
  4169  0078  0836               	movf	??_ESP_write,w
  4170  0079  00F5               	movwf	___awmod@dividend
  4171  007A  0837               	movf	??_ESP_write+1,w
  4172  007B  00F6               	movwf	___awmod@dividend+1
  4173  007C  222D               	fcall	___awmod
  4174  007D  0873               	movf	?___awmod,w
  4175  007E  0020               	movlb	0	; select bank0
  4176  007F  00B8               	movwf	??_ESP_write+2
  4177  0080  0838               	movf	??_ESP_write+2,w
  4178  0081  00B9               	movwf	ESP_write@res
  4179                           
  4180                           ;esp1.c: 192:         res += '0';
  4181  0082  3030               	movlw	48
  4182  0083  00B6               	movwf	??_ESP_write
  4183  0084  0836               	movf	??_ESP_write,w
  4184  0085  07B9               	addwf	ESP_write@res,f
  4185                           
  4186                           ;esp1.c: 193:         aux /= 10;
  4187  0086  300A               	movlw	10
  4188  0087  00F3               	movwf	___awdiv@divisor
  4189  0088  3000               	movlw	0
  4190  0089  00F4               	movwf	___awdiv@divisor+1
  4191  008A  083A               	movf	ESP_write@aux,w
  4192  008B  00B6               	movwf	??_ESP_write
  4193  008C  01B7               	clrf	??_ESP_write+1
  4194  008D  0836               	movf	??_ESP_write,w
  4195  008E  00F5               	movwf	___awdiv@dividend
  4196  008F  0837               	movf	??_ESP_write+1,w
  4197  0090  00F6               	movwf	___awdiv@dividend+1
  4198  0091  218E               	fcall	___awdiv
  4199  0092  0873               	movf	?___awdiv,w
  4200  0093  0020               	movlb	0	; select bank0
  4201  0094  00B8               	movwf	??_ESP_write+2
  4202  0095  0838               	movf	??_ESP_write+2,w
  4203  0096  00BA               	movwf	ESP_write@aux
  4204                           
  4205                           ;esp1.c: 194:         aux += '0';
  4206  0097  3030               	movlw	48
  4207  0098  00B6               	movwf	??_ESP_write
  4208  0099  0836               	movf	??_ESP_write,w
  4209  009A  07BA               	addwf	ESP_write@aux,f
  4210                           
  4211                           ;esp1.c: 195:         write(&aux,1);
  4212  009B  303A               	movlw	low ESP_write@aux
  4213  009C  00F5               	movwf	write@pt
  4214  009D  3000               	movlw	high ESP_write@aux
  4215  009E  00F6               	movwf	write@pt+1
  4216  009F  01F7               	clrf	write@lenght
  4217  00A0  0AF7               	incf	write@lenght,f
  4218  00A1  24F1               	fcall	_write
  4219                           
  4220                           ;esp1.c: 196:         write(&res,1);
  4221  00A2  3039               	movlw	low ESP_write@res
  4222  00A3  00F5               	movwf	write@pt
  4223  00A4  3000               	movlw	high ESP_write@res
  4224  00A5  28AF               	goto	L1
  4225  00A6                     l3014:	
  4226                           ;esp1.c: 198:     } else {
  4227                           
  4228                           
  4229                           ;esp1.c: 199:         aux = length + '0';
  4230  00A6  0020               	movlb	0	; select bank0
  4231  00A7  0835               	movf	ESP_write@length,w
  4232  00A8  3E30               	addlw	48
  4233  00A9  00B6               	movwf	??_ESP_write
  4234  00AA  0836               	movf	??_ESP_write,w
  4235  00AB  00BA               	movwf	ESP_write@aux
  4236                           
  4237                           ;esp1.c: 200:         write(&aux,1);
  4238  00AC  303A               	movlw	low ESP_write@aux
  4239  00AD  00F5               	movwf	write@pt
  4240  00AE  3000               	movlw	high ESP_write@aux
  4241  00AF                     L1:	
  4242  00AF  00F6               	movwf	write@pt+1
  4243  00B0  01F7               	clrf	write@lenght
  4244  00B1  0AF7               	incf	write@lenght,f
  4245  00B2  24F1               	fcall	_write
  4246                           
  4247                           ;esp1.c: 203:     _puts("\r\n");
  4248                           
  4249                           ;esp1.c: 201:     }
  4250  00B3  30F9               	movlw	low ((STR_10+31)| (0+32768))
  4251  00B4  00F5               	movwf	__puts@pt
  4252  00B5  3083               	movlw	high ((STR_10+31)| (0+32768))
  4253  00B6  00F6               	movwf	__puts@pt+1
  4254  00B7  2341               	fcall	__puts
  4255                           
  4256                           ;esp1.c: 205:     ESP_wait_for(ESP_OK);
  4257  00B8  3002               	movlw	2
  4258  00B9  2369               	fcall	_ESP_wait_for
  4259                           
  4260                           ;esp1.c: 207:     write(pt,length);
  4261  00BA  0020               	movlb	0	; select bank0
  4262  00BB  0834               	movf	ESP_write@pt+1,w
  4263  00BC  00F6               	movwf	write@pt+1
  4264  00BD  0833               	movf	ESP_write@pt,w
  4265  00BE  00F5               	movwf	write@pt
  4266  00BF  0835               	movf	ESP_write@length,w
  4267  00C0  00B6               	movwf	??_ESP_write
  4268  00C1  0836               	movf	??_ESP_write,w
  4269  00C2  00F7               	movwf	write@lenght
  4270  00C3  24F1               	fcall	_write
  4271                           
  4272                           ;esp1.c: 208:     _puts("\r\n");
  4273  00C4  30F9               	movlw	low ((STR_10+31)| (0+32768))
  4274  00C5  00F5               	movwf	__puts@pt
  4275  00C6  3083               	movlw	high ((STR_10+31)| (0+32768))
  4276  00C7  00F6               	movwf	__puts@pt+1
  4277  00C8  2341               	fcall	__puts
  4278  00C9  0008               	return
  4279  00CA                     __end_of_ESP_write:	
  4280                           
  4281                           	psect	text21
  4282  04F1                     __ptext21:	
  4283 ;; *************** function _write *****************
  4284 ;; Defined at:
  4285 ;;		line 15 in file "comm.c"
  4286 ;; Parameters:    Size  Location     Type
  4287 ;;  pt              2    5[COMMON] PTR unsigned char 
  4288 ;;		 -> STR_20(7), STR_19(7), read_analog@mess(6), STR_18(4), 
  4289 ;;		 -> ESP_write@res(1), ESP_write@aux(1), 
  4290 ;;  lenght          1    7[COMMON] unsigned char 
  4291 ;; Auto vars:     Size  Location     Type
  4292 ;;  i               1    8[COMMON] unsigned char 
  4293 ;; Return value:  Size  Location     Type
  4294 ;;                  1    wreg      void 
  4295 ;; Registers used:
  4296 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4297 ;; Tracked objects:
  4298 ;;		On entry : 0/0
  4299 ;;		On exit  : 0/0
  4300 ;;		Unchanged: 0/0
  4301 ;; Data sizes:     COMMON   BANK0   BANK1
  4302 ;;      Params:         3       0       0
  4303 ;;      Locals:         1       0       0
  4304 ;;      Temps:          0       2       0
  4305 ;;      Totals:         4       2       0
  4306 ;;Total ram usage:        6 bytes
  4307 ;; Hardware stack levels used:    1
  4308 ;; Hardware stack levels required when called:    5
  4309 ;; This function calls:
  4310 ;;		_EUSART_Write
  4311 ;;		_EUSART_is_tx_ready
  4312 ;; This function is called by:
  4313 ;;		_ESP_write
  4314 ;; This function uses a non-reentrant model
  4315 ;;
  4316                           
  4317                           
  4318                           ;psect for function _write
  4319  04F1                     _write:	
  4320                           
  4321                           ;comm.c: 15: void write(unsigned char *pt, unsigned char lenght);comm.c: 16: {;comm.c: 1
      +                          7:     unsigned char i;;comm.c: 19:     for (i=0; i<lenght; i++) {
  4322                           
  4323                           ;incstack = 0
  4324                           ; Regs used in _write: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4325  04F1  01F8               	clrf	write@i
  4326  04F2                     l2882:	
  4327  04F2  0877               	movf	write@lenght,w
  4328  04F3  0278               	subwf	write@i,w
  4329  04F4  1803               	btfsc	3,0
  4330  04F5  0008               	return
  4331  04F6                     l2876:	
  4332                           ;comm.c: 20:         while(!EUSART_is_tx_ready());
  4333                           
  4334  04F6  26C1               	fcall	_EUSART_is_tx_ready
  4335  04F7  3A00               	xorlw	0
  4336  04F8  1903               	skipnz
  4337  04F9  2CF6               	goto	l2876
  4338                           
  4339                           ;comm.c: 21:         EUSART_Write(pt[i]);
  4340  04FA  0876               	movf	write@pt+1,w
  4341  04FB  0020               	movlb	0	; select bank0
  4342  04FC  00A1               	movwf	??_write+1
  4343  04FD  0875               	movf	write@pt,w
  4344  04FE  00A0               	movwf	??_write
  4345  04FF  0878               	movf	write@i,w
  4346  0500  0720               	addwf	??_write,w
  4347  0501  0084               	movwf	4
  4348  0502  0821               	movf	??_write+1,w
  4349  0503  1803               	skipnc
  4350  0504  0A21               	incf	??_write+1,w
  4351  0505  0085               	movwf	5
  4352  0506  0800               	movf	0,w	;code access
  4353  0507  23FC               	fcall	_EUSART_Write
  4354                           
  4355                           ;comm.c: 22:     }
  4356  0508  3001               	movlw	1
  4357  0509  0020               	movlb	0	; select bank0
  4358  050A  00A0               	movwf	??_write
  4359  050B  0820               	movf	??_write,w
  4360  050C  07F8               	addwf	write@i,f
  4361  050D  2CF2               	goto	l2882
  4362  050E                     __end_of_write:	
  4363                           
  4364                           	psect	text22
  4365  022D                     __ptext22:	
  4366 ;; *************** function ___awmod *****************
  4367 ;; Defined at:
  4368 ;;		line 5 in file "/pkg/microchip/xc8/v2.00/pic/sources/c99/common/awmod.c"
  4369 ;; Parameters:    Size  Location     Type
  4370 ;;  divisor         2    3[COMMON] int 
  4371 ;;  dividend        2    5[COMMON] int 
  4372 ;; Auto vars:     Size  Location     Type
  4373 ;;  sign            1    1[BANK0 ] unsigned char 
  4374 ;;  counter         1    0[BANK0 ] unsigned char 
  4375 ;; Return value:  Size  Location     Type
  4376 ;;                  2    3[COMMON] int 
  4377 ;; Registers used:
  4378 ;;		wreg, status,2, status,0
  4379 ;; Tracked objects:
  4380 ;;		On entry : 0/0
  4381 ;;		On exit  : 0/0
  4382 ;;		Unchanged: 0/0
  4383 ;; Data sizes:     COMMON   BANK0   BANK1
  4384 ;;      Params:         4       0       0
  4385 ;;      Locals:         0       2       0
  4386 ;;      Temps:          1       0       0
  4387 ;;      Totals:         5       2       0
  4388 ;;Total ram usage:        7 bytes
  4389 ;; Hardware stack levels used:    1
  4390 ;; Hardware stack levels required when called:    4
  4391 ;; This function calls:
  4392 ;;		Nothing
  4393 ;; This function is called by:
  4394 ;;		_ESP_write
  4395 ;; This function uses a non-reentrant model
  4396 ;;
  4397                           
  4398                           
  4399                           ;psect for function ___awmod
  4400  022D                     ___awmod:	
  4401                           
  4402                           ;incstack = 0
  4403                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4404  022D  0020               	movlb	0	; select bank0
  4405  022E  01A1               	clrf	___awmod@sign
  4406  022F  1FF6               	btfss	___awmod@dividend+1,7
  4407  0230  2A38               	goto	l2962
  4408  0231  09F5               	comf	___awmod@dividend,f
  4409  0232  09F6               	comf	___awmod@dividend+1,f
  4410  0233  0AF5               	incf	___awmod@dividend,f
  4411  0234  1903               	skipnz
  4412  0235  0AF6               	incf	___awmod@dividend+1,f
  4413  0236  01A1               	clrf	___awmod@sign
  4414  0237  0AA1               	incf	___awmod@sign,f
  4415  0238                     l2962:	
  4416  0238  1FF4               	btfss	___awmod@divisor+1,7
  4417  0239  2A3F               	goto	l2966
  4418  023A  09F3               	comf	___awmod@divisor,f
  4419  023B  09F4               	comf	___awmod@divisor+1,f
  4420  023C  0AF3               	incf	___awmod@divisor,f
  4421  023D  1903               	skipnz
  4422  023E  0AF4               	incf	___awmod@divisor+1,f
  4423  023F                     l2966:	
  4424  023F  0873               	movf	___awmod@divisor,w
  4425  0240  0474               	iorwf	___awmod@divisor+1,w
  4426  0241  1903               	btfsc	3,2
  4427  0242  2A66               	goto	l2984
  4428  0243  01A0               	clrf	___awmod@counter
  4429  0244  0AA0               	incf	___awmod@counter,f
  4430  0245                     l2974:	
  4431  0245  1BF4               	btfsc	___awmod@divisor+1,7
  4432  0246  2A51               	goto	l2976
  4433  0247  3001               	movlw	1
  4434  0248                     u2155:	
  4435  0248  35F3               	lslf	___awmod@divisor,f
  4436  0249  0DF4               	rlf	___awmod@divisor+1,f
  4437  024A  0B89               	decfsz	9,f
  4438  024B  2A48               	goto	u2155
  4439  024C  3001               	movlw	1
  4440  024D  00F7               	movwf	??___awmod
  4441  024E  0877               	movf	??___awmod,w
  4442  024F  07A0               	addwf	___awmod@counter,f
  4443  0250  2A45               	goto	l2974
  4444  0251                     l2976:	
  4445  0251  0874               	movf	___awmod@divisor+1,w
  4446  0252  0276               	subwf	___awmod@dividend+1,w
  4447  0253  1D03               	skipz
  4448  0254  2A57               	goto	u2175
  4449  0255  0873               	movf	___awmod@divisor,w
  4450  0256  0275               	subwf	___awmod@dividend,w
  4451  0257                     u2175:	
  4452  0257  1C03               	skipc
  4453  0258  2A5D               	goto	l2980
  4454  0259  0873               	movf	___awmod@divisor,w
  4455  025A  02F5               	subwf	___awmod@dividend,f
  4456  025B  0874               	movf	___awmod@divisor+1,w
  4457  025C  3BF6               	subwfb	___awmod@dividend+1,f
  4458  025D                     l2980:	
  4459  025D  3001               	movlw	1
  4460  025E                     u2185:	
  4461  025E  36F4               	lsrf	___awmod@divisor+1,f
  4462  025F  0CF3               	rrf	___awmod@divisor,f
  4463  0260  0B89               	decfsz	9,f
  4464  0261  2A5E               	goto	u2185
  4465  0262  3001               	movlw	1
  4466  0263  02A0               	subwf	___awmod@counter,f
  4467  0264  1D03               	btfss	3,2
  4468  0265  2A51               	goto	l2976
  4469  0266                     l2984:	
  4470  0266  0821               	movf	___awmod@sign,w
  4471  0267  1903               	btfsc	3,2
  4472  0268  2A6E               	goto	l2988
  4473  0269  09F5               	comf	___awmod@dividend,f
  4474  026A  09F6               	comf	___awmod@dividend+1,f
  4475  026B  0AF5               	incf	___awmod@dividend,f
  4476  026C  1903               	skipnz
  4477  026D  0AF6               	incf	___awmod@dividend+1,f
  4478  026E                     l2988:	
  4479  026E  0876               	movf	___awmod@dividend+1,w
  4480  026F  00F4               	movwf	?___awmod+1
  4481  0270  0875               	movf	___awmod@dividend,w
  4482  0271  00F3               	movwf	?___awmod
  4483  0272  0008               	return
  4484  0273                     __end_of___awmod:	
  4485                           
  4486                           	psect	text23
  4487  018E                     __ptext23:	
  4488 ;; *************** function ___awdiv *****************
  4489 ;; Defined at:
  4490 ;;		line 5 in file "/pkg/microchip/xc8/v2.00/pic/sources/c99/common/awdiv.c"
  4491 ;; Parameters:    Size  Location     Type
  4492 ;;  divisor         2    3[COMMON] int 
  4493 ;;  dividend        2    5[COMMON] int 
  4494 ;; Auto vars:     Size  Location     Type
  4495 ;;  quotient        2    2[BANK0 ] int 
  4496 ;;  sign            1    1[BANK0 ] unsigned char 
  4497 ;;  counter         1    0[BANK0 ] unsigned char 
  4498 ;; Return value:  Size  Location     Type
  4499 ;;                  2    3[COMMON] int 
  4500 ;; Registers used:
  4501 ;;		wreg, status,2, status,0
  4502 ;; Tracked objects:
  4503 ;;		On entry : 0/0
  4504 ;;		On exit  : 0/0
  4505 ;;		Unchanged: 0/0
  4506 ;; Data sizes:     COMMON   BANK0   BANK1
  4507 ;;      Params:         4       0       0
  4508 ;;      Locals:         0       4       0
  4509 ;;      Temps:          1       0       0
  4510 ;;      Totals:         5       4       0
  4511 ;;Total ram usage:        9 bytes
  4512 ;; Hardware stack levels used:    1
  4513 ;; Hardware stack levels required when called:    4
  4514 ;; This function calls:
  4515 ;;		Nothing
  4516 ;; This function is called by:
  4517 ;;		_ESP_write
  4518 ;; This function uses a non-reentrant model
  4519 ;;
  4520                           
  4521                           
  4522                           ;psect for function ___awdiv
  4523  018E                     ___awdiv:	
  4524                           
  4525                           ;incstack = 0
  4526                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4527  018E  0020               	movlb	0	; select bank0
  4528  018F  01A1               	clrf	___awdiv@sign
  4529  0190  1FF4               	btfss	___awdiv@divisor+1,7
  4530  0191  2999               	goto	l2918
  4531  0192  09F3               	comf	___awdiv@divisor,f
  4532  0193  09F4               	comf	___awdiv@divisor+1,f
  4533  0194  0AF3               	incf	___awdiv@divisor,f
  4534  0195  1903               	skipnz
  4535  0196  0AF4               	incf	___awdiv@divisor+1,f
  4536  0197  01A1               	clrf	___awdiv@sign
  4537  0198  0AA1               	incf	___awdiv@sign,f
  4538  0199                     l2918:	
  4539  0199  1FF6               	btfss	___awdiv@dividend+1,7
  4540  019A  29A4               	goto	l2924
  4541  019B  09F5               	comf	___awdiv@dividend,f
  4542  019C  09F6               	comf	___awdiv@dividend+1,f
  4543  019D  0AF5               	incf	___awdiv@dividend,f
  4544  019E  1903               	skipnz
  4545  019F  0AF6               	incf	___awdiv@dividend+1,f
  4546  01A0  3001               	movlw	1
  4547  01A1  00F7               	movwf	??___awdiv
  4548  01A2  0877               	movf	??___awdiv,w
  4549  01A3  06A1               	xorwf	___awdiv@sign,f
  4550  01A4                     l2924:	
  4551  01A4  01A2               	clrf	___awdiv@quotient
  4552  01A5  01A3               	clrf	___awdiv@quotient+1
  4553  01A6  0873               	movf	___awdiv@divisor,w
  4554  01A7  0474               	iorwf	___awdiv@divisor+1,w
  4555  01A8  1903               	btfsc	3,2
  4556  01A9  29D3               	goto	l2946
  4557  01AA  01A0               	clrf	___awdiv@counter
  4558  01AB  0AA0               	incf	___awdiv@counter,f
  4559  01AC                     l2934:	
  4560  01AC  1BF4               	btfsc	___awdiv@divisor+1,7
  4561  01AD  29B8               	goto	l2936
  4562  01AE  3001               	movlw	1
  4563  01AF                     u2055:	
  4564  01AF  35F3               	lslf	___awdiv@divisor,f
  4565  01B0  0DF4               	rlf	___awdiv@divisor+1,f
  4566  01B1  0B89               	decfsz	9,f
  4567  01B2  29AF               	goto	u2055
  4568  01B3  3001               	movlw	1
  4569  01B4  00F7               	movwf	??___awdiv
  4570  01B5  0877               	movf	??___awdiv,w
  4571  01B6  07A0               	addwf	___awdiv@counter,f
  4572  01B7  29AC               	goto	l2934
  4573  01B8                     l2936:	
  4574  01B8  3001               	movlw	1
  4575  01B9                     u2075:	
  4576  01B9  35A2               	lslf	___awdiv@quotient,f
  4577  01BA  0DA3               	rlf	___awdiv@quotient+1,f
  4578  01BB  0B89               	decfsz	9,f
  4579  01BC  29B9               	goto	u2075
  4580  01BD  0874               	movf	___awdiv@divisor+1,w
  4581  01BE  0276               	subwf	___awdiv@dividend+1,w
  4582  01BF  1D03               	skipz
  4583  01C0  29C3               	goto	u2085
  4584  01C1  0873               	movf	___awdiv@divisor,w
  4585  01C2  0275               	subwf	___awdiv@dividend,w
  4586  01C3                     u2085:	
  4587  01C3  1C03               	skipc
  4588  01C4  29CA               	goto	l2942
  4589  01C5  0873               	movf	___awdiv@divisor,w
  4590  01C6  02F5               	subwf	___awdiv@dividend,f
  4591  01C7  0874               	movf	___awdiv@divisor+1,w
  4592  01C8  3BF6               	subwfb	___awdiv@dividend+1,f
  4593  01C9  1422               	bsf	___awdiv@quotient,0
  4594  01CA                     l2942:	
  4595  01CA  3001               	movlw	1
  4596  01CB                     u2095:	
  4597  01CB  36F4               	lsrf	___awdiv@divisor+1,f
  4598  01CC  0CF3               	rrf	___awdiv@divisor,f
  4599  01CD  0B89               	decfsz	9,f
  4600  01CE  29CB               	goto	u2095
  4601  01CF  3001               	movlw	1
  4602  01D0  02A0               	subwf	___awdiv@counter,f
  4603  01D1  1D03               	btfss	3,2
  4604  01D2  29B8               	goto	l2936
  4605  01D3                     l2946:	
  4606  01D3  0821               	movf	___awdiv@sign,w
  4607  01D4  1903               	btfsc	3,2
  4608  01D5  29DB               	goto	l2950
  4609  01D6  09A2               	comf	___awdiv@quotient,f
  4610  01D7  09A3               	comf	___awdiv@quotient+1,f
  4611  01D8  0AA2               	incf	___awdiv@quotient,f
  4612  01D9  1903               	skipnz
  4613  01DA  0AA3               	incf	___awdiv@quotient+1,f
  4614  01DB                     l2950:	
  4615  01DB  0823               	movf	___awdiv@quotient+1,w
  4616  01DC  00F4               	movwf	?___awdiv+1
  4617  01DD  0822               	movf	___awdiv@quotient,w
  4618  01DE  00F3               	movwf	?___awdiv
  4619  01DF  0008               	return
  4620  01E0                     __end_of___awdiv:	
  4621                           
  4622                           	psect	text24
  4623  06AE                     __ptext24:	
  4624 ;; *************** function _TMR1_StopTimer *****************
  4625 ;; Defined at:
  4626 ;;		line 99 in file "mcc_generated_files/tmr1.c"
  4627 ;; Parameters:    Size  Location     Type
  4628 ;;		None
  4629 ;; Auto vars:     Size  Location     Type
  4630 ;;		None
  4631 ;; Return value:  Size  Location     Type
  4632 ;;                  1    wreg      void 
  4633 ;; Registers used:
  4634 ;;		None
  4635 ;; Tracked objects:
  4636 ;;		On entry : 0/0
  4637 ;;		On exit  : 0/0
  4638 ;;		Unchanged: 0/0
  4639 ;; Data sizes:     COMMON   BANK0   BANK1
  4640 ;;      Params:         0       0       0
  4641 ;;      Locals:         0       0       0
  4642 ;;      Temps:          0       0       0
  4643 ;;      Totals:         0       0       0
  4644 ;;Total ram usage:        0 bytes
  4645 ;; Hardware stack levels used:    1
  4646 ;; Hardware stack levels required when called:    4
  4647 ;; This function calls:
  4648 ;;		Nothing
  4649 ;; This function is called by:
  4650 ;;		_logger_initialize
  4651 ;;		_process_message
  4652 ;; This function uses a non-reentrant model
  4653 ;;
  4654                           
  4655                           
  4656                           ;psect for function _TMR1_StopTimer
  4657  06AE                     _TMR1_StopTimer:	
  4658                           
  4659                           ;mcc_generated_files/tmr1.c: 102:     T1CONbits.TMR1ON = 0;
  4660                           
  4661                           ;incstack = 0
  4662                           ; Regs used in _TMR1_StopTimer: []
  4663  06AE  0020               	movlb	0	; select bank0
  4664  06AF  1018               	bcf	24,0	;volatile
  4665  06B0  0008               	return
  4666  06B1                     __end_of_TMR1_StopTimer:	
  4667                           
  4668                           	psect	text25
  4669  06B1                     __ptext25:	
  4670 ;; *************** function _TMR1_StartTimer *****************
  4671 ;; Defined at:
  4672 ;;		line 93 in file "mcc_generated_files/tmr1.c"
  4673 ;; Parameters:    Size  Location     Type
  4674 ;;		None
  4675 ;; Auto vars:     Size  Location     Type
  4676 ;;		None
  4677 ;; Return value:  Size  Location     Type
  4678 ;;                  1    wreg      void 
  4679 ;; Registers used:
  4680 ;;		None
  4681 ;; Tracked objects:
  4682 ;;		On entry : 0/0
  4683 ;;		On exit  : 0/0
  4684 ;;		Unchanged: 0/0
  4685 ;; Data sizes:     COMMON   BANK0   BANK1
  4686 ;;      Params:         0       0       0
  4687 ;;      Locals:         0       0       0
  4688 ;;      Temps:          0       0       0
  4689 ;;      Totals:         0       0       0
  4690 ;;Total ram usage:        0 bytes
  4691 ;; Hardware stack levels used:    1
  4692 ;; Hardware stack levels required when called:    4
  4693 ;; This function calls:
  4694 ;;		Nothing
  4695 ;; This function is called by:
  4696 ;;		_process_message
  4697 ;; This function uses a non-reentrant model
  4698 ;;
  4699                           
  4700                           
  4701                           ;psect for function _TMR1_StartTimer
  4702  06B1                     _TMR1_StartTimer:	
  4703                           
  4704                           ;mcc_generated_files/tmr1.c: 96:     T1CONbits.TMR1ON = 1;
  4705                           
  4706                           ;incstack = 0
  4707                           ; Regs used in _TMR1_StartTimer: []
  4708  06B1  0020               	movlb	0	; select bank0
  4709  06B2  1418               	bsf	24,0	;volatile
  4710  06B3  0008               	return
  4711  06B4                     __end_of_TMR1_StartTimer:	
  4712                           
  4713                           	psect	text26
  4714  0546                     __ptext26:	
  4715 ;; *************** function _ADC_GetConversion *****************
  4716 ;; Defined at:
  4717 ;;		line 112 in file "mcc_generated_files/adc.c"
  4718 ;; Parameters:    Size  Location     Type
  4719 ;;  channel         1    wreg     enum E2157
  4720 ;; Auto vars:     Size  Location     Type
  4721 ;;  channel         1    6[COMMON] enum E2157
  4722 ;; Return value:  Size  Location     Type
  4723 ;;                  2    3[COMMON] unsigned short 
  4724 ;; Registers used:
  4725 ;;		wreg, status,2, status,0
  4726 ;; Tracked objects:
  4727 ;;		On entry : 0/0
  4728 ;;		On exit  : 0/0
  4729 ;;		Unchanged: 0/0
  4730 ;; Data sizes:     COMMON   BANK0   BANK1
  4731 ;;      Params:         2       0       0
  4732 ;;      Locals:         1       0       0
  4733 ;;      Temps:          1       0       0
  4734 ;;      Totals:         4       0       0
  4735 ;;Total ram usage:        4 bytes
  4736 ;; Hardware stack levels used:    1
  4737 ;; Hardware stack levels required when called:    4
  4738 ;; This function calls:
  4739 ;;		Nothing
  4740 ;; This function is called by:
  4741 ;;		_process_message
  4742 ;; This function uses a non-reentrant model
  4743 ;;
  4744                           
  4745                           
  4746                           ;psect for function _ADC_GetConversion
  4747  0546                     _ADC_GetConversion:	
  4748                           
  4749                           ;incstack = 0
  4750                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
  4751                           ;ADC_GetConversion@channel stored from wreg
  4752  0546  00F6               	movwf	ADC_GetConversion@channel
  4753                           
  4754                           ;mcc_generated_files/adc.c: 112: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 113: {;mcc_generated_files/adc.c: 115:     ADCON0bits.CHS = ch
      +                          annel;
  4755  0547  0876               	movf	ADC_GetConversion@channel,w
  4756  0548  00F5               	movwf	??_ADC_GetConversion
  4757  0549  0DF5               	rlf	??_ADC_GetConversion,f
  4758  054A  0DF5               	rlf	??_ADC_GetConversion,f
  4759  054B  0021               	movlb	1	; select bank1
  4760  054C  081D               	movf	29,w	;volatile
  4761  054D  0675               	xorwf	??_ADC_GetConversion,w
  4762  054E  3983               	andlw	-125
  4763  054F  0675               	xorwf	??_ADC_GetConversion,w
  4764  0550  009D               	movwf	29	;volatile
  4765                           
  4766                           ;mcc_generated_files/adc.c: 118:     ADCON0bits.ADON = 1;
  4767  0551  141D               	bsf	29,0	;volatile
  4768                           
  4769                           ;mcc_generated_files/adc.c: 121:     _delay((unsigned long)((5)*(32000000/4000000.0)));
  4770  0552  300D               	movlw	13
  4771  0553                     u2307:	
  4772  0553  0B89               	decfsz	9,f
  4773  0554  2D53               	goto	u2307
  4774  0555  0000               	nop
  4775                           
  4776                           ;mcc_generated_files/adc.c: 124:     ADCON0bits.GO_nDONE = 1;
  4777  0556  0021               	movlb	1	; select bank1
  4778  0557  149D               	bsf	29,1	;volatile
  4779  0558                     l38:	
  4780                           ;mcc_generated_files/adc.c: 128:     {;mcc_generated_files/adc.c: 129:     }
  4781                           
  4782                           ;mcc_generated_files/adc.c: 127:     while (ADCON0bits.GO_nDONE)
  4783                           
  4784                           
  4785                           ;mcc_generated_files/adc.c: 127:     while (ADCON0bits.GO_nDONE)
  4786  0558  189D               	btfsc	29,1	;volatile
  4787  0559  2D58               	goto	l38
  4788                           
  4789                           ;mcc_generated_files/adc.c: 132:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
  4790  055A  081C               	movf	28,w	;volatile
  4791  055B  00F4               	movwf	?_ADC_GetConversion+1
  4792  055C  081B               	movf	27,w	;volatile
  4793  055D  00F3               	movwf	?_ADC_GetConversion
  4794  055E  0008               	return
  4795  055F                     __end_of_ADC_GetConversion:	
  4796                           
  4797                           	psect	text27
  4798  0626                     __ptext27:	
  4799 ;; *************** function _ESP_initialize *****************
  4800 ;; Defined at:
  4801 ;;		line 18 in file "esp1.c"
  4802 ;; Parameters:    Size  Location     Type
  4803 ;;		None
  4804 ;; Auto vars:     Size  Location     Type
  4805 ;;		None
  4806 ;; Return value:  Size  Location     Type
  4807 ;;                  1    wreg      void 
  4808 ;; Registers used:
  4809 ;;		wreg, status,2, status,0, pclath, cstack
  4810 ;; Tracked objects:
  4811 ;;		On entry : 0/0
  4812 ;;		On exit  : 0/0
  4813 ;;		Unchanged: 0/0
  4814 ;; Data sizes:     COMMON   BANK0   BANK1
  4815 ;;      Params:         0       0       0
  4816 ;;      Locals:         0       0       0
  4817 ;;      Temps:          0       0       0
  4818 ;;      Totals:         0       0       0
  4819 ;;Total ram usage:        0 bytes
  4820 ;; Hardware stack levels used:    1
  4821 ;; Hardware stack levels required when called:    5
  4822 ;; This function calls:
  4823 ;;		_ESP_Set_application_handler
  4824 ;; This function is called by:
  4825 ;;		_main
  4826 ;; This function uses a non-reentrant model
  4827 ;;
  4828                           
  4829                           
  4830                           ;psect for function _ESP_initialize
  4831  0626                     _ESP_initialize:	
  4832                           
  4833                           ;esp1.c: 20:     esp_channel = 0;
  4834                           
  4835                           ;incstack = 0
  4836                           ; Regs used in _ESP_initialize: [wreg+status,2+status,0+pclath+cstack]
  4837  0626  0020               	movlb	0	; select bank0
  4838  0627  01E6               	clrf	_esp_channel	;volatile
  4839                           
  4840                           ;esp1.c: 21:     ESP_wait_exception = ESP_OTHER;
  4841  0628  01E8               	clrf	_ESP_wait_exception	;volatile
  4842                           
  4843                           ;esp1.c: 24:     ESP_Set_application_handler(ESP_default_application_handler);
  4844  0629  30C3               	movlw	low _ESP_default_application_handler
  4845  062A  00F3               	movwf	ESP_Set_application_handler@applicationHandler
  4846  062B  3006               	movlw	high _ESP_default_application_handler
  4847  062C  00F4               	movwf	ESP_Set_application_handler@applicationHandler+1
  4848  062D  267F               	fcall	_ESP_Set_application_handler
  4849  062E  0008               	return
  4850  062F                     __end_of_ESP_initialize:	
  4851                           
  4852                           	psect	text28
  4853  067F                     __ptext28:	
  4854 ;; *************** function _ESP_Set_application_handler *****************
  4855 ;; Defined at:
  4856 ;;		line 217 in file "esp1.c"
  4857 ;; Parameters:    Size  Location     Type
  4858 ;;  applicationH    2    3[COMMON] PTR FTN(unsigned char ,)
  4859 ;;		 -> ESP_default_application_handler(1), process_message(1), 
  4860 ;; Auto vars:     Size  Location     Type
  4861 ;;		None
  4862 ;; Return value:  Size  Location     Type
  4863 ;;                  1    wreg      void 
  4864 ;; Registers used:
  4865 ;;		wreg
  4866 ;; Tracked objects:
  4867 ;;		On entry : 0/0
  4868 ;;		On exit  : 0/0
  4869 ;;		Unchanged: 0/0
  4870 ;; Data sizes:     COMMON   BANK0   BANK1
  4871 ;;      Params:         2       0       0
  4872 ;;      Locals:         0       0       0
  4873 ;;      Temps:          0       0       0
  4874 ;;      Totals:         2       0       0
  4875 ;;Total ram usage:        2 bytes
  4876 ;; Hardware stack levels used:    1
  4877 ;; Hardware stack levels required when called:    4
  4878 ;; This function calls:
  4879 ;;		Nothing
  4880 ;; This function is called by:
  4881 ;;		_ESP_initialize
  4882 ;;		_logger_initialize
  4883 ;; This function uses a non-reentrant model
  4884 ;;
  4885                           
  4886                           
  4887                           ;psect for function _ESP_Set_application_handler
  4888  067F                     _ESP_Set_application_handler:	
  4889                           
  4890                           ;esp1.c: 217: void ESP_Set_application_handler(void (* applicationHandler)(unsigned char
      +                          ));esp1.c: 218: {;esp1.c: 219:     ESP_external_message_handler = applicationHandler;
  4891                           
  4892                           ;incstack = 0
  4893                           ; Regs used in _ESP_Set_application_handler: [wreg]
  4894  067F  0874               	movf	ESP_Set_application_handler@applicationHandler+1,w
  4895  0680  0020               	movlb	0	; select bank0
  4896  0681  00D7               	movwf	_ESP_external_message_handler+1
  4897  0682  0873               	movf	ESP_Set_application_handler@applicationHandler,w
  4898  0683  00D6               	movwf	_ESP_external_message_handler
  4899  0684  0008               	return
  4900  0685                     __end_of_ESP_Set_application_handler:	
  4901                           
  4902                           	psect	text29
  4903  02B3                     __ptext29:	
  4904 ;; *************** function _ESP_config *****************
  4905 ;; Defined at:
  4906 ;;		line 82 in file "esp1.c"
  4907 ;; Parameters:    Size  Location     Type
  4908 ;;		None
  4909 ;; Auto vars:     Size  Location     Type
  4910 ;;		None
  4911 ;; Return value:  Size  Location     Type
  4912 ;;                  1    wreg      void 
  4913 ;; Registers used:
  4914 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4915 ;; Tracked objects:
  4916 ;;		On entry : 0/0
  4917 ;;		On exit  : 0/0
  4918 ;;		Unchanged: 0/0
  4919 ;; Data sizes:     COMMON   BANK0   BANK1
  4920 ;;      Params:         0       0       0
  4921 ;;      Locals:         0       0       0
  4922 ;;      Temps:          0       2       0
  4923 ;;      Totals:         0       2       0
  4924 ;;Total ram usage:        2 bytes
  4925 ;; Hardware stack levels used:    1
  4926 ;; Hardware stack levels required when called:    9
  4927 ;; This function calls:
  4928 ;;		_ESP_wait_for
  4929 ;;		_EUSART_Read
  4930 ;;		_EUSART_is_rx_ready
  4931 ;;		__puts
  4932 ;; This function is called by:
  4933 ;;		_main
  4934 ;; This function uses a non-reentrant model
  4935 ;;
  4936                           
  4937                           
  4938                           ;psect for function _ESP_config
  4939  02B3                     _ESP_config:	
  4940                           
  4941                           ;esp1.c: 87:     _delay((unsigned long)((250)*(32000000/4000.0)));
  4942                           
  4943                           ;incstack = 0
  4944                           ; Regs used in _ESP_config: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4945  02B3  300B               	movlw	11
  4946  02B4  0020               	movlb	0	; select bank0
  4947  02B5  00B4               	movwf	??_ESP_config+1
  4948  02B6  3026               	movlw	38
  4949  02B7  00B3               	movwf	??_ESP_config
  4950  02B8  305D               	movlw	93
  4951  02B9                     u2317:	
  4952  02B9  0B89               	decfsz	9,f
  4953  02BA  2AB9               	goto	u2317
  4954  02BB  0BB3               	decfsz	??_ESP_config,f
  4955  02BC  2AB9               	goto	u2317
  4956  02BD  0BB4               	decfsz	??_ESP_config+1,f
  4957  02BE  2AB9               	goto	u2317
  4958  02BF  3200               	nop2
  4959  02C0                     l3110:	
  4960                           ;esp1.c: 88:     while(EUSART_is_rx_ready())
  4961                           
  4962                           
  4963                           ;esp1.c: 88:     while(EUSART_is_rx_ready())
  4964  02C0  26B4               	fcall	_EUSART_is_rx_ready
  4965  02C1  3A00               	xorlw	0
  4966  02C2  1903               	btfsc	3,2
  4967  02C3  2AC6               	goto	l3112
  4968                           
  4969                           ;esp1.c: 89:         EUSART_Read();
  4970  02C4  2498               	fcall	_EUSART_Read
  4971  02C5  2AC0               	goto	l3110
  4972  02C6                     l3112:	
  4973                           
  4974                           ;esp1.c: 91:     _puts("AT\r\n");
  4975  02C6  3091               	movlw	low (STR_8| (0+32768))
  4976  02C7  00F5               	movwf	__puts@pt
  4977  02C8  3086               	movlw	high (STR_8| (0+32768))
  4978  02C9  00F6               	movwf	__puts@pt+1
  4979  02CA  2341               	fcall	__puts
  4980                           
  4981                           ;esp1.c: 92:     ESP_wait_for(ESP_OK);
  4982  02CB  3002               	movlw	2
  4983  02CC  2369               	fcall	_ESP_wait_for
  4984                           
  4985                           ;esp1.c: 95:     _puts("AT+CWMODE=1\r\n");
  4986  02CD  30BD               	movlw	low (STR_9| (0+32768))
  4987  02CE  00F5               	movwf	__puts@pt
  4988  02CF  3085               	movlw	high (STR_9| (0+32768))
  4989  02D0  00F6               	movwf	__puts@pt+1
  4990  02D1  2341               	fcall	__puts
  4991                           
  4992                           ;esp1.c: 96:     ESP_wait_for(ESP_OK);
  4993  02D2  3002               	movlw	2
  4994  02D3  2369               	fcall	_ESP_wait_for
  4995                           
  4996                           ;esp1.c: 99:     _puts("AT+CWJAP=\"saul2\",\"rickhunter02\"\r\n");
  4997  02D4  30DA               	movlw	low (STR_10| (0+32768))
  4998  02D5  00F5               	movwf	__puts@pt
  4999  02D6  3083               	movlw	high (STR_10| (0+32768))
  5000  02D7  00F6               	movwf	__puts@pt+1
  5001  02D8  2341               	fcall	__puts
  5002                           
  5003                           ;esp1.c: 100:     ESP_wait_for(ESP_OK);
  5004  02D9  3002               	movlw	2
  5005  02DA  2369               	fcall	_ESP_wait_for
  5006                           
  5007                           ;esp1.c: 103:     _puts("AT+CIPMUX=1\r\n");
  5008  02DB  30CB               	movlw	low (STR_11| (0+32768))
  5009  02DC  00F5               	movwf	__puts@pt
  5010  02DD  3085               	movlw	high (STR_11| (0+32768))
  5011  02DE  00F6               	movwf	__puts@pt+1
  5012  02DF  2341               	fcall	__puts
  5013                           
  5014                           ;esp1.c: 104:     ESP_wait_for(ESP_OK);
  5015  02E0  3002               	movlw	2
  5016  02E1  2369               	fcall	_ESP_wait_for
  5017                           
  5018                           ;esp1.c: 107:     _puts("AT+CIPSERVER=1,80\r\n");
  5019  02E2  3075               	movlw	low (STR_12| (0+32768))
  5020  02E3  00F5               	movwf	__puts@pt
  5021  02E4  3085               	movlw	high (STR_12| (0+32768))
  5022  02E5  00F6               	movwf	__puts@pt+1
  5023  02E6  2341               	fcall	__puts
  5024                           
  5025                           ;esp1.c: 108:     ESP_wait_for(ESP_OK);
  5026  02E7  3002               	movlw	2
  5027  02E8  2369               	fcall	_ESP_wait_for
  5028  02E9  0008               	return
  5029  02EA                     __end_of_ESP_config:	
  5030                           
  5031                           	psect	text30
  5032  0341                     __ptext30:	
  5033 ;; *************** function __puts *****************
  5034 ;; Defined at:
  5035 ;;		line 5 in file "comm.c"
  5036 ;; Parameters:    Size  Location     Type
  5037 ;;  pt              2    5[COMMON] PTR unsigned char 
  5038 ;;		 -> STR_22(3), STR_21(3), STR_17(3), STR_16(3), 
  5039 ;;		 -> STR_15(2), STR_14(12), STR_12(20), STR_11(14), 
  5040 ;;		 -> STR_10(34), STR_9(14), STR_8(5), 
  5041 ;; Auto vars:     Size  Location     Type
  5042 ;;  index           1    7[COMMON] unsigned char 
  5043 ;; Return value:  Size  Location     Type
  5044 ;;                  1    wreg      void 
  5045 ;; Registers used:
  5046 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5047 ;; Tracked objects:
  5048 ;;		On entry : 0/0
  5049 ;;		On exit  : 0/0
  5050 ;;		Unchanged: 0/0
  5051 ;; Data sizes:     COMMON   BANK0   BANK1
  5052 ;;      Params:         2       0       0
  5053 ;;      Locals:         1       0       0
  5054 ;;      Temps:          0       3       0
  5055 ;;      Totals:         3       3       0
  5056 ;;Total ram usage:        6 bytes
  5057 ;; Hardware stack levels used:    1
  5058 ;; Hardware stack levels required when called:    5
  5059 ;; This function calls:
  5060 ;;		_EUSART_Write
  5061 ;;		_EUSART_is_tx_ready
  5062 ;; This function is called by:
  5063 ;;		_ESP_config
  5064 ;;		_ESP_write
  5065 ;;		_process_ioc
  5066 ;; This function uses a non-reentrant model
  5067 ;;
  5068                           
  5069                           
  5070                           ;psect for function __puts
  5071  0341                     __puts:	
  5072                           
  5073                           ;comm.c: 5: void _puts(char *pt);comm.c: 6: {;comm.c: 7:     unsigned char index;;comm.c
      +                          : 8:     index = 0;
  5074                           
  5075                           ;incstack = 0
  5076                           ; Regs used in __puts: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5077  0341  01F7               	clrf	__puts@index
  5078  0342                     l2872:	
  5079                           ;comm.c: 12:     }
  5080                           
  5081                           ;comm.c: 9:     while(pt[index]) {
  5082                           
  5083                           
  5084                           ;comm.c: 9:     while(pt[index]) {
  5085  0342  0876               	movf	__puts@pt+1,w
  5086  0343  0020               	movlb	0	; select bank0
  5087  0344  00A1               	movwf	??__puts+1
  5088  0345  0875               	movf	__puts@pt,w
  5089  0346  00A0               	movwf	??__puts
  5090  0347  0877               	movf	__puts@index,w
  5091  0348  0720               	addwf	??__puts,w
  5092  0349  0084               	movwf	4
  5093  034A  0821               	movf	??__puts+1,w
  5094  034B  1803               	skipnc
  5095  034C  0A21               	incf	??__puts+1,w
  5096  034D  0085               	movwf	5
  5097  034E  0012               	moviw fsr0++
  5098  034F  1903               	btfsc	3,2
  5099  0350  0008               	return
  5100  0351                     l2866:	
  5101                           ;comm.c: 10:         while(!EUSART_is_tx_ready());
  5102                           
  5103  0351  26C1               	fcall	_EUSART_is_tx_ready
  5104  0352  3A00               	xorlw	0
  5105  0353  1903               	skipnz
  5106  0354  2B51               	goto	l2866
  5107                           
  5108                           ;comm.c: 11:         EUSART_Write(pt[index++]);
  5109  0355  0876               	movf	__puts@pt+1,w
  5110  0356  0020               	movlb	0	; select bank0
  5111  0357  00A1               	movwf	??__puts+1
  5112  0358  0875               	movf	__puts@pt,w
  5113  0359  00A0               	movwf	??__puts
  5114  035A  0877               	movf	__puts@index,w
  5115  035B  0720               	addwf	??__puts,w
  5116  035C  0084               	movwf	4
  5117  035D  0821               	movf	??__puts+1,w
  5118  035E  1803               	skipnc
  5119  035F  0A21               	incf	??__puts+1,w
  5120  0360  0085               	movwf	5
  5121  0361  0800               	movf	0,w	;code access
  5122  0362  23FC               	fcall	_EUSART_Write
  5123  0363  3001               	movlw	1
  5124  0364  0020               	movlb	0	; select bank0
  5125  0365  00A0               	movwf	??__puts
  5126  0366  0820               	movf	??__puts,w
  5127  0367  07F7               	addwf	__puts@index,f
  5128  0368  2B42               	goto	l2872
  5129  0369                     __end_of__puts:	
  5130                           
  5131                           	psect	text31
  5132  06C1                     __ptext31:	
  5133 ;; *************** function _EUSART_is_tx_ready *****************
  5134 ;; Defined at:
  5135 ;;		line 113 in file "mcc_generated_files/eusart.c"
  5136 ;; Parameters:    Size  Location     Type
  5137 ;;		None
  5138 ;; Auto vars:     Size  Location     Type
  5139 ;;		None
  5140 ;; Return value:  Size  Location     Type
  5141 ;;                  1    wreg      unsigned char 
  5142 ;; Registers used:
  5143 ;;		wreg
  5144 ;; Tracked objects:
  5145 ;;		On entry : 0/0
  5146 ;;		On exit  : 0/0
  5147 ;;		Unchanged: 0/0
  5148 ;; Data sizes:     COMMON   BANK0   BANK1
  5149 ;;      Params:         0       0       0
  5150 ;;      Locals:         0       0       0
  5151 ;;      Temps:          0       0       0
  5152 ;;      Totals:         0       0       0
  5153 ;;Total ram usage:        0 bytes
  5154 ;; Hardware stack levels used:    1
  5155 ;; Hardware stack levels required when called:    4
  5156 ;; This function calls:
  5157 ;;		Nothing
  5158 ;; This function is called by:
  5159 ;;		__puts
  5160 ;;		_write
  5161 ;; This function uses a non-reentrant model
  5162 ;;
  5163                           
  5164                           
  5165                           ;psect for function _EUSART_is_tx_ready
  5166  06C1                     _EUSART_is_tx_ready:	
  5167                           
  5168                           ;mcc_generated_files/eusart.c: 115:     return eusartTxBufferRemaining;
  5169                           
  5170                           ;incstack = 0
  5171                           ; Regs used in _EUSART_is_tx_ready: [wreg]
  5172  06C1  0879               	movf	_eusartTxBufferRemaining,w	;volatile
  5173  06C2  0008               	return
  5174  06C3                     __end_of_EUSART_is_tx_ready:	
  5175                           
  5176                           	psect	text32
  5177  03FC                     __ptext32:	
  5178 ;; *************** function _EUSART_Write *****************
  5179 ;; Defined at:
  5180 ;;		line 148 in file "mcc_generated_files/eusart.c"
  5181 ;; Parameters:    Size  Location     Type
  5182 ;;  txData          1    wreg     unsigned char 
  5183 ;; Auto vars:     Size  Location     Type
  5184 ;;  txData          1    4[COMMON] unsigned char 
  5185 ;; Return value:  Size  Location     Type
  5186 ;;                  1    wreg      void 
  5187 ;; Registers used:
  5188 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5189 ;; Tracked objects:
  5190 ;;		On entry : 0/0
  5191 ;;		On exit  : 0/0
  5192 ;;		Unchanged: 0/0
  5193 ;; Data sizes:     COMMON   BANK0   BANK1
  5194 ;;      Params:         0       0       0
  5195 ;;      Locals:         1       0       0
  5196 ;;      Temps:          1       0       0
  5197 ;;      Totals:         2       0       0
  5198 ;;Total ram usage:        2 bytes
  5199 ;; Hardware stack levels used:    1
  5200 ;; Hardware stack levels required when called:    4
  5201 ;; This function calls:
  5202 ;;		Nothing
  5203 ;; This function is called by:
  5204 ;;		__puts
  5205 ;;		_write
  5206 ;; This function uses a non-reentrant model
  5207 ;;
  5208                           
  5209                           
  5210                           ;psect for function _EUSART_Write
  5211  03FC                     _EUSART_Write:	
  5212                           
  5213                           ;incstack = 0
  5214                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  5215                           ;EUSART_Write@txData stored from wreg
  5216  03FC  00F4               	movwf	EUSART_Write@txData
  5217  03FD                     l2112:	
  5218                           ;mcc_generated_files/eusart.c: 151:     {;mcc_generated_files/eusart.c: 152:     }
  5219                           
  5220                           ;mcc_generated_files/eusart.c: 148: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 149: {;mcc_generated_files/eusart.c: 150:     while(0 == eusartTxBufferRemai
      +                          ning)
  5221                           
  5222                           
  5223                           ;mcc_generated_files/eusart.c: 150:     while(0 == eusartTxBufferRemaining)
  5224  03FD  0879               	movf	_eusartTxBufferRemaining,w	;volatile
  5225  03FE  1903               	btfsc	3,2
  5226  03FF  2BFD               	goto	l2112
  5227                           
  5228                           ;mcc_generated_files/eusart.c: 154:     if(0 == PIE1bits.TXIE)
  5229  0400  0021               	movlb	1	; select bank1
  5230  0401  1A11               	btfsc	17,4	;volatile
  5231  0402  2C07               	goto	l159
  5232                           
  5233                           ;mcc_generated_files/eusart.c: 155:     {;mcc_generated_files/eusart.c: 156:         TXR
      +                          EG = txData;
  5234  0403  0874               	movf	EUSART_Write@txData,w
  5235  0404  0023               	movlb	3	; select bank3
  5236  0405  009A               	movwf	26	;volatile
  5237                           
  5238                           ;mcc_generated_files/eusart.c: 157:     }
  5239  0406  2C1A               	goto	l2126
  5240  0407                     l159:	
  5241                           ;mcc_generated_files/eusart.c: 158:     else
  5242                           
  5243                           
  5244                           ;mcc_generated_files/eusart.c: 159:     {;mcc_generated_files/eusart.c: 160:         PIE
      +                          1bits.TXIE = 0;
  5245  0407  1211               	bcf	17,4	;volatile
  5246                           
  5247                           ;mcc_generated_files/eusart.c: 161:         eusartTxBuffer[eusartTxHead++] = txData;
  5248  0408  0874               	movf	EUSART_Write@txData,w
  5249  0409  00F3               	movwf	??_EUSART_Write
  5250  040A  087A               	movf	_eusartTxHead,w
  5251  040B  3E4E               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  5252  040C  0086               	movwf	6
  5253  040D  0187               	clrf	7
  5254  040E  0873               	movf	??_EUSART_Write,w
  5255  040F  0081               	movwf	1
  5256  0410  3001               	movlw	1
  5257  0411  00F3               	movwf	??_EUSART_Write
  5258  0412  0873               	movf	??_EUSART_Write,w
  5259  0413  07FA               	addwf	_eusartTxHead,f	;volatile
  5260                           
  5261                           ;mcc_generated_files/eusart.c: 162:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
  5262  0414  3008               	movlw	8
  5263  0415  027A               	subwf	_eusartTxHead,w	;volatile
  5264  0416  1803               	btfsc	3,0
  5265                           
  5266                           ;mcc_generated_files/eusart.c: 163:         {;mcc_generated_files/eusart.c: 164:        
      +                               eusartTxHead = 0;
  5267  0417  01FA               	clrf	_eusartTxHead	;volatile
  5268                           
  5269                           ;mcc_generated_files/eusart.c: 166:         eusartTxBufferRemaining--;
  5270                           
  5271                           ;mcc_generated_files/eusart.c: 165:         }
  5272  0418  3001               	movlw	1
  5273  0419  02F9               	subwf	_eusartTxBufferRemaining,f	;volatile
  5274  041A                     l2126:	
  5275                           ;mcc_generated_files/eusart.c: 167:     }
  5276                           
  5277                           
  5278                           ;mcc_generated_files/eusart.c: 168:     PIE1bits.TXIE = 1;
  5279  041A  0021               	movlb	1	; select bank1
  5280  041B  1611               	bsf	17,4	;volatile
  5281  041C  0008               	return
  5282  041D                     __end_of_EUSART_Write:	
  5283                           
  5284                           	psect	text33
  5285  06B4                     __ptext33:	
  5286 ;; *************** function _EUSART_is_rx_ready *****************
  5287 ;; Defined at:
  5288 ;;		line 118 in file "mcc_generated_files/eusart.c"
  5289 ;; Parameters:    Size  Location     Type
  5290 ;;		None
  5291 ;; Auto vars:     Size  Location     Type
  5292 ;;		None
  5293 ;; Return value:  Size  Location     Type
  5294 ;;                  1    wreg      unsigned char 
  5295 ;; Registers used:
  5296 ;;		wreg
  5297 ;; Tracked objects:
  5298 ;;		On entry : 0/0
  5299 ;;		On exit  : 0/0
  5300 ;;		Unchanged: 0/0
  5301 ;; Data sizes:     COMMON   BANK0   BANK1
  5302 ;;      Params:         0       0       0
  5303 ;;      Locals:         0       0       0
  5304 ;;      Temps:          0       0       0
  5305 ;;      Totals:         0       0       0
  5306 ;;Total ram usage:        0 bytes
  5307 ;; Hardware stack levels used:    1
  5308 ;; Hardware stack levels required when called:    4
  5309 ;; This function calls:
  5310 ;;		Nothing
  5311 ;; This function is called by:
  5312 ;;		_main
  5313 ;;		_ESP_config
  5314 ;; This function uses a non-reentrant model
  5315 ;;
  5316                           
  5317                           
  5318                           ;psect for function _EUSART_is_rx_ready
  5319  06B4                     _EUSART_is_rx_ready:	
  5320                           
  5321                           ;mcc_generated_files/eusart.c: 120:     return eusartRxCount;
  5322                           
  5323                           ;incstack = 0
  5324                           ; Regs used in _EUSART_is_rx_ready: [wreg]
  5325  06B4  0020               	movlb	0	; select bank0
  5326  06B5  0869               	movf	_eusartRxCount,w	;volatile
  5327  06B6  0008               	return
  5328  06B7                     __end_of_EUSART_is_rx_ready:	
  5329                           
  5330                           	psect	text34
  5331  0369                     __ptext34:	
  5332 ;; *************** function _ESP_wait_for *****************
  5333 ;; Defined at:
  5334 ;;		line 113 in file "esp1.c"
  5335 ;; Parameters:    Size  Location     Type
  5336 ;;  esp_mess        1    wreg     unsigned char 
  5337 ;; Auto vars:     Size  Location     Type
  5338 ;;  esp_mess        1   17[BANK0 ] unsigned char 
  5339 ;;  ret             1   18[BANK0 ] unsigned char 
  5340 ;; Return value:  Size  Location     Type
  5341 ;;                  1    wreg      void 
  5342 ;; Registers used:
  5343 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5344 ;; Tracked objects:
  5345 ;;		On entry : 0/0
  5346 ;;		On exit  : 0/0
  5347 ;;		Unchanged: 0/0
  5348 ;; Data sizes:     COMMON   BANK0   BANK1
  5349 ;;      Params:         0       0       0
  5350 ;;      Locals:         0       2       0
  5351 ;;      Temps:          0       1       0
  5352 ;;      Totals:         0       3       0
  5353 ;;Total ram usage:        3 bytes
  5354 ;; Hardware stack levels used:    1
  5355 ;; Hardware stack levels required when called:    8
  5356 ;; This function calls:
  5357 ;;		_ESP_read
  5358 ;; This function is called by:
  5359 ;;		_ESP_config
  5360 ;;		_ESP_write
  5361 ;;		_read_analog
  5362 ;; This function uses a non-reentrant model
  5363 ;;
  5364                           
  5365                           
  5366                           ;psect for function _ESP_wait_for
  5367  0369                     _ESP_wait_for:	
  5368                           
  5369                           ;incstack = 0
  5370                           ; Regs used in _ESP_wait_for: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5371                           ;ESP_wait_for@esp_mess stored from wreg
  5372  0369  0020               	movlb	0	; select bank0
  5373  036A  00B1               	movwf	ESP_wait_for@esp_mess
  5374  036B                     l459:	
  5375                           ;esp1.c: 113: void ESP_wait_for(unsigned char esp_mess);esp1.c: 114: {;esp1.c: 115:     
      +                          unsigned char ret;;esp1.c: 118:     do {
  5376                           
  5377                           
  5378                           ;esp1.c: 119:         ret = ESP_read();
  5379  036B  22EA               	fcall	_ESP_read
  5380  036C  0020               	movlb	0	; select bank0
  5381  036D  00B0               	movwf	??_ESP_wait_for
  5382  036E  0830               	movf	??_ESP_wait_for,w
  5383  036F  00B2               	movwf	ESP_wait_for@ret
  5384                           
  5385                           ;esp1.c: 121:         if (ret != esp_mess) {
  5386  0370  0832               	movf	ESP_wait_for@ret,w
  5387  0371  0631               	xorwf	ESP_wait_for@esp_mess,w
  5388  0372  1903               	skipnz
  5389  0373  2B8B               	goto	l2908
  5390                           
  5391                           ;esp1.c: 122:             if (ret == ESP_SEND_FAIL) return;
  5392  0374  3007               	movlw	7
  5393  0375  0632               	xorwf	ESP_wait_for@ret,w
  5394  0376  1903               	btfsc	3,2
  5395  0377  0008               	return
  5396                           
  5397                           ;esp1.c: 123:             if (ret == ESP_CLOSED) {
  5398  0378  3008               	movlw	8
  5399  0379  0632               	xorwf	ESP_wait_for@ret,w
  5400  037A  1D03               	btfss	3,2
  5401  037B  2B7E               	goto	l2898
  5402                           
  5403                           ;esp1.c: 124:                 esp_channel = 0;
  5404  037C  01E6               	clrf	_esp_channel	;volatile
  5405                           
  5406                           ;esp1.c: 125:                 return;
  5407  037D  0008               	return
  5408  037E                     l2898:	
  5409                           ;esp1.c: 126:             }
  5410                           
  5411                           
  5412                           ;esp1.c: 127:             if (ret == ESP_ERROR) return;
  5413  037E  3009               	movlw	9
  5414  037F  0632               	xorwf	ESP_wait_for@ret,w
  5415  0380  1903               	btfsc	3,2
  5416  0381  0008               	return
  5417                           
  5418                           ;esp1.c: 128:             if (ret == ESP_RX) {
  5419  0382  3004               	movlw	4
  5420  0383  0632               	xorwf	ESP_wait_for@ret,w
  5421  0384  1D03               	btfss	3,2
  5422  0385  2B8B               	goto	l2908
  5423                           
  5424                           ;esp1.c: 130:                 ESP_wait_exception = ESP_RX;
  5425  0386  3004               	movlw	4
  5426  0387  00B0               	movwf	??_ESP_wait_for
  5427  0388  0830               	movf	??_ESP_wait_for,w
  5428  0389  00E8               	movwf	_ESP_wait_exception	;volatile
  5429                           
  5430                           ;esp1.c: 131:                 return;
  5431  038A  0008               	return
  5432  038B                     l2908:	
  5433                           ;esp1.c: 133:         }
  5434                           
  5435                           ;esp1.c: 132:             }
  5436                           
  5437                           
  5438                           ;esp1.c: 134:     } while (ret != esp_mess);
  5439  038B  0832               	movf	ESP_wait_for@ret,w
  5440  038C  0631               	xorwf	ESP_wait_for@esp_mess,w
  5441  038D  1903               	btfsc	3,2
  5442  038E  0008               	return
  5443  038F  2B6B               	goto	l459
  5444  0390                     __end_of_ESP_wait_for:	
  5445                           
  5446                           	psect	text35
  5447  02EA                     __ptext35:	
  5448 ;; *************** function _ESP_read *****************
  5449 ;; Defined at:
  5450 ;;		line 27 in file "esp1.c"
  5451 ;; Parameters:    Size  Location     Type
  5452 ;;		None
  5453 ;; Auto vars:     Size  Location     Type
  5454 ;;  ret             1   15[BANK0 ] unsigned char 
  5455 ;; Return value:  Size  Location     Type
  5456 ;;                  1    wreg      unsigned char 
  5457 ;; Registers used:
  5458 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5459 ;; Tracked objects:
  5460 ;;		On entry : 0/0
  5461 ;;		On exit  : 0/0
  5462 ;;		Unchanged: 0/0
  5463 ;; Data sizes:     COMMON   BANK0   BANK1
  5464 ;;      Params:         0       0       0
  5465 ;;      Locals:         0       1       0
  5466 ;;      Temps:          0       1       0
  5467 ;;      Totals:         0       2       0
  5468 ;;Total ram usage:        2 bytes
  5469 ;; Hardware stack levels used:    1
  5470 ;; Hardware stack levels required when called:    7
  5471 ;; This function calls:
  5472 ;;		_ESP_process_message
  5473 ;;		_EUSART_Read
  5474 ;; This function is called by:
  5475 ;;		_ESP_wait_for
  5476 ;;		_ESP_message_handler
  5477 ;; This function uses a non-reentrant model
  5478 ;;
  5479                           
  5480                           
  5481                           ;psect for function _ESP_read
  5482  02EA                     _ESP_read:	
  5483                           
  5484                           ;esp1.c: 29:     unsigned char ret;;esp1.c: 31:     esp_read_data[esp_read_data_index] =
      +                           EUSART_Read();
  5485                           
  5486                           ;incstack = 0
  5487                           ; Regs used in _ESP_read: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5488  02EA  2498               	fcall	_EUSART_Read
  5489  02EB  0020               	movlb	0	; select bank0
  5490  02EC  00AE               	movwf	??_ESP_read
  5491  02ED  0867               	movf	_esp_read_data_index,w
  5492  02EE  3EA8               	addlw	(low (_esp_read_data| 0))& (0+255)
  5493  02EF  0086               	movwf	6
  5494  02F0  0187               	clrf	7
  5495  02F1  082E               	movf	??_ESP_read,w
  5496  02F2  0081               	movwf	1
  5497                           
  5498                           ;esp1.c: 34:     if (esp_read_data[esp_read_data_index] == 0x0a) {
  5499  02F3  0867               	movf	_esp_read_data_index,w
  5500  02F4  3EA8               	addlw	(low (_esp_read_data| 0))& (0+255)
  5501  02F5  0086               	movwf	6
  5502  02F6  0187               	clrf	7
  5503  02F7  300A               	movlw	10
  5504  02F8  0601               	xorwf	1,w
  5505  02F9  1D03               	btfss	3,2
  5506  02FA  2B0F               	goto	l2854
  5507                           
  5508                           ;esp1.c: 36:         if (esp_read_data_index <= 1) {
  5509  02FB  3002               	movlw	2
  5510  02FC  0267               	subwf	_esp_read_data_index,w	;volatile
  5511  02FD  1803               	skipnc
  5512  02FE  2B01               	goto	l2844
  5513                           
  5514                           ;esp1.c: 37:             ret = ESP_EOL;
  5515  02FF  3003               	movlw	3
  5516  0300  2B09               	goto	L2
  5517  0301                     l2844:	
  5518                           ;esp1.c: 38:         } else {
  5519                           
  5520                           
  5521                           ;esp1.c: 39:             esp_read_data[(esp_read_data_index-1)] = 0x00;
  5522  0301  0867               	movf	_esp_read_data_index,w
  5523  0302  3EFF               	addlw	255
  5524  0303  3EA8               	addlw	(low (_esp_read_data| 0))& (0+255)
  5525  0304  0086               	movwf	6
  5526  0305  0187               	clrf	7
  5527  0306  0181               	clrf	1
  5528                           
  5529                           ;esp1.c: 40:             ret = ESP_process_message();
  5530  0307  20CA               	fcall	_ESP_process_message
  5531  0308  0020               	movlb	0	; select bank0
  5532  0309                     L2:	
  5533  0309  00AE               	movwf	??_ESP_read
  5534  030A  082E               	movf	??_ESP_read,w
  5535  030B  00AF               	movwf	ESP_read@ret
  5536                           
  5537                           ;esp1.c: 43:         esp_read_data_index = 0;
  5538                           
  5539                           ;esp1.c: 41:         }
  5540  030C  01E7               	clrf	_esp_read_data_index	;volatile
  5541                           
  5542                           ;esp1.c: 44:         return ret;
  5543  030D  082F               	movf	ESP_read@ret,w
  5544  030E  0008               	return
  5545  030F                     l2854:	
  5546                           ;esp1.c: 45:     }
  5547                           
  5548                           
  5549                           ;esp1.c: 47:     esp_read_data_index++;
  5550  030F  3001               	movlw	1
  5551  0310  00AE               	movwf	??_ESP_read
  5552  0311  082E               	movf	??_ESP_read,w
  5553  0312  07E7               	addwf	_esp_read_data_index,f	;volatile
  5554                           
  5555                           ;esp1.c: 48:     if (esp_read_data_index >= 16)
  5556  0313  3010               	movlw	16
  5557  0314  0267               	subwf	_esp_read_data_index,w	;volatile
  5558  0315  1803               	btfsc	3,0
  5559                           
  5560                           ;esp1.c: 49:         esp_read_data_index = 0;
  5561  0316  01E7               	clrf	_esp_read_data_index	;volatile
  5562                           
  5563                           ;esp1.c: 51:     return ESP_OTHER;
  5564  0317  3000               	movlw	0
  5565  0318  0008               	return
  5566  0319                     __end_of_ESP_read:	
  5567                           
  5568                           	psect	text36
  5569  0498                     __ptext36:	
  5570 ;; *************** function _EUSART_Read *****************
  5571 ;; Defined at:
  5572 ;;		line 128 in file "mcc_generated_files/eusart.c"
  5573 ;; Parameters:    Size  Location     Type
  5574 ;;		None
  5575 ;; Auto vars:     Size  Location     Type
  5576 ;;  readValue       1    4[COMMON] unsigned char 
  5577 ;; Return value:  Size  Location     Type
  5578 ;;                  1    wreg      unsigned char 
  5579 ;; Registers used:
  5580 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5581 ;; Tracked objects:
  5582 ;;		On entry : 0/0
  5583 ;;		On exit  : 0/0
  5584 ;;		Unchanged: 0/0
  5585 ;; Data sizes:     COMMON   BANK0   BANK1
  5586 ;;      Params:         0       0       0
  5587 ;;      Locals:         1       0       0
  5588 ;;      Temps:          1       0       0
  5589 ;;      Totals:         2       0       0
  5590 ;;Total ram usage:        2 bytes
  5591 ;; Hardware stack levels used:    1
  5592 ;; Hardware stack levels required when called:    4
  5593 ;; This function calls:
  5594 ;;		Nothing
  5595 ;; This function is called by:
  5596 ;;		_ESP_read
  5597 ;;		_ESP_config
  5598 ;;		_bt_message_handler
  5599 ;; This function uses a non-reentrant model
  5600 ;;
  5601                           
  5602                           
  5603                           ;psect for function _EUSART_Read
  5604  0498                     _EUSART_Read:	
  5605                           
  5606                           ;mcc_generated_files/eusart.c: 130:     uint8_t readValue = 0;
  5607                           
  5608                           ;incstack = 0
  5609                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  5610  0498  01F4               	clrf	EUSART_Read@readValue
  5611  0499                     l2026:	
  5612                           ;mcc_generated_files/eusart.c: 133:     {;mcc_generated_files/eusart.c: 134:     }
  5613                           
  5614                           ;mcc_generated_files/eusart.c: 132:     while(0 == eusartRxCount)
  5615                           
  5616                           
  5617                           ;mcc_generated_files/eusart.c: 132:     while(0 == eusartRxCount)
  5618  0499  0020               	movlb	0	; select bank0
  5619  049A  0869               	movf	_eusartRxCount,w	;volatile
  5620  049B  1903               	btfsc	3,2
  5621  049C  2C99               	goto	l2026
  5622                           
  5623                           ;mcc_generated_files/eusart.c: 136:     readValue = eusartRxBuffer[eusartRxTail++];
  5624  049D  086A               	movf	_eusartRxTail,w
  5625  049E  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  5626  049F  0086               	movwf	6
  5627  04A0  0187               	clrf	7
  5628  04A1  0801               	movf	1,w
  5629  04A2  00F3               	movwf	??_EUSART_Read
  5630  04A3  0873               	movf	??_EUSART_Read,w
  5631  04A4  00F4               	movwf	EUSART_Read@readValue
  5632  04A5  3001               	movlw	1
  5633  04A6  00F3               	movwf	??_EUSART_Read
  5634  04A7  0873               	movf	??_EUSART_Read,w
  5635  04A8  07EA               	addwf	_eusartRxTail,f	;volatile
  5636                           
  5637                           ;mcc_generated_files/eusart.c: 137:     if(sizeof(eusartRxBuffer) <= eusartRxTail)
  5638  04A9  3008               	movlw	8
  5639  04AA  026A               	subwf	_eusartRxTail,w	;volatile
  5640  04AB  1803               	btfsc	3,0
  5641                           
  5642                           ;mcc_generated_files/eusart.c: 138:     {;mcc_generated_files/eusart.c: 139:         eus
      +                          artRxTail = 0;
  5643  04AC  01EA               	clrf	_eusartRxTail	;volatile
  5644                           
  5645                           ;mcc_generated_files/eusart.c: 141:     PIE1bits.RCIE = 0;
  5646                           
  5647                           ;mcc_generated_files/eusart.c: 140:     }
  5648  04AD  0021               	movlb	1	; select bank1
  5649  04AE  1291               	bcf	17,5	;volatile
  5650                           
  5651                           ;mcc_generated_files/eusart.c: 142:     eusartRxCount--;
  5652  04AF  3001               	movlw	1
  5653  04B0  0020               	movlb	0	; select bank0
  5654  04B1  02E9               	subwf	_eusartRxCount,f	;volatile
  5655                           
  5656                           ;mcc_generated_files/eusart.c: 143:     PIE1bits.RCIE = 1;
  5657  04B2  0021               	movlb	1	; select bank1
  5658  04B3  1691               	bsf	17,5	;volatile
  5659                           
  5660                           ;mcc_generated_files/eusart.c: 145:     return readValue;
  5661  04B4  0874               	movf	EUSART_Read@readValue,w
  5662  04B5  0008               	return
  5663  04B6                     __end_of_EUSART_Read:	
  5664                           
  5665                           	psect	text37
  5666  00CA                     __ptext37:	
  5667 ;; *************** function _ESP_process_message *****************
  5668 ;; Defined at:
  5669 ;;		line 55 in file "esp1.c"
  5670 ;; Parameters:    Size  Location     Type
  5671 ;;		None
  5672 ;; Auto vars:     Size  Location     Type
  5673 ;;  aux             1   13[BANK0 ] PTR unsigned char 
  5674 ;;		 -> NULL(0), esp_read_data(16), 
  5675 ;; Return value:  Size  Location     Type
  5676 ;;                  1    wreg      unsigned char 
  5677 ;; Registers used:
  5678 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5679 ;; Tracked objects:
  5680 ;;		On entry : 0/0
  5681 ;;		On exit  : 0/0
  5682 ;;		Unchanged: 0/0
  5683 ;; Data sizes:     COMMON   BANK0   BANK1
  5684 ;;      Params:         0       0       0
  5685 ;;      Locals:         0       1       0
  5686 ;;      Temps:          0       1       0
  5687 ;;      Totals:         0       2       0
  5688 ;;Total ram usage:        2 bytes
  5689 ;; Hardware stack levels used:    1
  5690 ;; Hardware stack levels required when called:    6
  5691 ;; This function calls:
  5692 ;;		_strstr
  5693 ;; This function is called by:
  5694 ;;		_ESP_read
  5695 ;; This function uses a non-reentrant model
  5696 ;;
  5697                           
  5698                           
  5699                           ;psect for function _ESP_process_message
  5700  00CA                     _ESP_process_message:	
  5701                           
  5702                           ;esp1.c: 56:     unsigned char *aux;;esp1.c: 58:     aux = strstr(esp_read_data,"SEND OK
      +                          ");
  5703                           
  5704                           ;incstack = 0
  5705                           ; Regs used in _ESP_process_message: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5706  00CA  302F               	movlw	low (STR_1| (0+32768))
  5707  00CB  0020               	movlb	0	; select bank0
  5708  00CC  00A4               	movwf	strstr@n
  5709  00CD  3086               	movlw	high (STR_1| (0+32768))
  5710  00CE  00A5               	movwf	strstr@n+1
  5711  00CF  30A8               	movlw	(low (_esp_read_data| 0))& (0+255)
  5712  00D0  2273               	fcall	_strstr
  5713  00D1  0020               	movlb	0	; select bank0
  5714  00D2  00AC               	movwf	??_ESP_process_message
  5715  00D3  082C               	movf	??_ESP_process_message,w
  5716  00D4  00AD               	movwf	ESP_process_message@aux
  5717                           
  5718                           ;esp1.c: 59:     if (aux) return ESP_SEND_OK;
  5719  00D5  082D               	movf	ESP_process_message@aux,w
  5720  00D6  1903               	btfsc	3,2
  5721  00D7  28DA               	goto	l2784
  5722  00D8  3001               	movlw	1
  5723  00D9  0008               	return
  5724  00DA                     l2784:	
  5725                           
  5726                           ;esp1.c: 61:     aux = strstr(esp_read_data,"OK");
  5727  00DA  3034               	movlw	low ((STR_1+5)| (0+32768))
  5728  00DB  00A4               	movwf	strstr@n
  5729  00DC  3086               	movlw	high ((STR_1+5)| (0+32768))
  5730  00DD  00A5               	movwf	strstr@n+1
  5731  00DE  30A8               	movlw	(low (_esp_read_data| 0))& (0+255)
  5732  00DF  2273               	fcall	_strstr
  5733  00E0  0020               	movlb	0	; select bank0
  5734  00E1  00AC               	movwf	??_ESP_process_message
  5735  00E2  082C               	movf	??_ESP_process_message,w
  5736  00E3  00AD               	movwf	ESP_process_message@aux
  5737                           
  5738                           ;esp1.c: 62:     if (aux) return ESP_OK;
  5739  00E4  082D               	movf	ESP_process_message@aux,w
  5740  00E5  1903               	btfsc	3,2
  5741  00E6  28E9               	goto	l2792
  5742  00E7  3002               	movlw	2
  5743  00E8  0008               	return
  5744  00E9                     l2792:	
  5745                           
  5746                           ;esp1.c: 64:     aux = strstr(esp_read_data,"SEND FAIL");
  5747  00E9  30FF               	movlw	low (STR_3| (0+32768))
  5748  00EA  00A4               	movwf	strstr@n
  5749  00EB  3085               	movlw	high (STR_3| (0+32768))
  5750  00EC  00A5               	movwf	strstr@n+1
  5751  00ED  30A8               	movlw	(low (_esp_read_data| 0))& (0+255)
  5752  00EE  2273               	fcall	_strstr
  5753  00EF  0020               	movlb	0	; select bank0
  5754  00F0  00AC               	movwf	??_ESP_process_message
  5755  00F1  082C               	movf	??_ESP_process_message,w
  5756  00F2  00AD               	movwf	ESP_process_message@aux
  5757                           
  5758                           ;esp1.c: 65:     if (aux) return ESP_SEND_FAIL;
  5759  00F3  082D               	movf	ESP_process_message@aux,w
  5760  00F4  1903               	btfsc	3,2
  5761  00F5  28F8               	goto	l2800
  5762  00F6  3007               	movlw	7
  5763  00F7  0008               	return
  5764  00F8                     l2800:	
  5765                           
  5766                           ;esp1.c: 67:     aux = strstr(esp_read_data,"ERROR");
  5767  00F8  305B               	movlw	low (STR_4| (0+32768))
  5768  00F9  00A4               	movwf	strstr@n
  5769  00FA  3086               	movlw	high (STR_4| (0+32768))
  5770  00FB  00A5               	movwf	strstr@n+1
  5771  00FC  30A8               	movlw	(low (_esp_read_data| 0))& (0+255)
  5772  00FD  2273               	fcall	_strstr
  5773  00FE  0020               	movlb	0	; select bank0
  5774  00FF  00AC               	movwf	??_ESP_process_message
  5775  0100  082C               	movf	??_ESP_process_message,w
  5776  0101  00AD               	movwf	ESP_process_message@aux
  5777                           
  5778                           ;esp1.c: 68:     if (aux) return ESP_ERROR;
  5779  0102  082D               	movf	ESP_process_message@aux,w
  5780  0103  1903               	btfsc	3,2
  5781  0104  2907               	goto	l2808
  5782  0105  3009               	movlw	9
  5783  0106  0008               	return
  5784  0107                     l2808:	
  5785                           
  5786                           ;esp1.c: 70:     aux = strstr(esp_read_data,"+IPD");
  5787  0107  3096               	movlw	low (STR_5| (0+32768))
  5788  0108  00A4               	movwf	strstr@n
  5789  0109  3086               	movlw	high (STR_5| (0+32768))
  5790  010A  00A5               	movwf	strstr@n+1
  5791  010B  30A8               	movlw	(low (_esp_read_data| 0))& (0+255)
  5792  010C  2273               	fcall	_strstr
  5793  010D  0020               	movlb	0	; select bank0
  5794  010E  00AC               	movwf	??_ESP_process_message
  5795  010F  082C               	movf	??_ESP_process_message,w
  5796  0110  00AD               	movwf	ESP_process_message@aux
  5797                           
  5798                           ;esp1.c: 71:     if (aux) return ESP_RX;
  5799  0111  082D               	movf	ESP_process_message@aux,w
  5800  0112  1903               	btfsc	3,2
  5801  0113  2916               	goto	l2816
  5802  0114  3004               	movlw	4
  5803  0115  0008               	return
  5804  0116                     l2816:	
  5805                           
  5806                           ;esp1.c: 73:     aux = strstr(esp_read_data,"CONNECT");
  5807  0116  3037               	movlw	low (STR_6| (0+32768))
  5808  0117  00A4               	movwf	strstr@n
  5809  0118  3086               	movlw	high (STR_6| (0+32768))
  5810  0119  00A5               	movwf	strstr@n+1
  5811  011A  30A8               	movlw	(low (_esp_read_data| 0))& (0+255)
  5812  011B  2273               	fcall	_strstr
  5813  011C  0020               	movlb	0	; select bank0
  5814  011D  00AC               	movwf	??_ESP_process_message
  5815  011E  082C               	movf	??_ESP_process_message,w
  5816  011F  00AD               	movwf	ESP_process_message@aux
  5817                           
  5818                           ;esp1.c: 74:     if (aux) return ESP_CONNECT;
  5819  0120  082D               	movf	ESP_process_message@aux,w
  5820  0121  1903               	btfsc	3,2
  5821  0122  2925               	goto	l2824
  5822  0123  3006               	movlw	6
  5823  0124  0008               	return
  5824  0125                     l2824:	
  5825                           
  5826                           ;esp1.c: 76:     aux = strstr(esp_read_data,"CLOSED");
  5827  0125  304D               	movlw	low (STR_7| (0+32768))
  5828  0126  00A4               	movwf	strstr@n
  5829  0127  3086               	movlw	high (STR_7| (0+32768))
  5830  0128  00A5               	movwf	strstr@n+1
  5831  0129  30A8               	movlw	(low (_esp_read_data| 0))& (0+255)
  5832  012A  2273               	fcall	_strstr
  5833  012B  0020               	movlb	0	; select bank0
  5834  012C  00AC               	movwf	??_ESP_process_message
  5835  012D  082C               	movf	??_ESP_process_message,w
  5836  012E  00AD               	movwf	ESP_process_message@aux
  5837                           
  5838                           ;esp1.c: 77:     if (aux) return ESP_CLOSED;
  5839  012F  082D               	movf	ESP_process_message@aux,w
  5840  0130  1903               	btfsc	3,2
  5841  0131  2934               	goto	l2832
  5842  0132  3008               	movlw	8
  5843  0133  0008               	return
  5844  0134                     l2832:	
  5845                           
  5846                           ;esp1.c: 79:     return ESP_OTHER;
  5847  0134  3000               	movlw	0
  5848  0135  0008               	return
  5849  0136                     __end_of_ESP_process_message:	
  5850                           
  5851                           	psect	text38
  5852  0273                     __ptext38:	
  5853 ;; *************** function _strstr *****************
  5854 ;; Defined at:
  5855 ;;		line 143 in file "/pkg/microchip/xc8/v2.00/pic/sources/c99/common/strstr.c"
  5856 ;; Parameters:    Size  Location     Type
  5857 ;;  h               1    wreg     PTR const unsigned char 
  5858 ;;		 -> NULL(0), esp_read_data(16), 
  5859 ;;  n               2    4[BANK0 ] PTR const unsigned char 
  5860 ;;		 -> STR_13(2), STR_7(7), STR_6(8), STR_5(5), 
  5861 ;;		 -> STR_4(6), STR_3(10), STR_2(3), STR_1(8), 
  5862 ;; Auto vars:     Size  Location     Type
  5863 ;;  h               1   11[BANK0 ] PTR const unsigned char 
  5864 ;;		 -> NULL(0), esp_read_data(16), 
  5865 ;;  nl              2    9[BANK0 ] unsigned int 
  5866 ;; Return value:  Size  Location     Type
  5867 ;;                  1    wreg      PTR unsigned char 
  5868 ;; Registers used:
  5869 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5870 ;; Tracked objects:
  5871 ;;		On entry : 0/0
  5872 ;;		On exit  : 0/0
  5873 ;;		Unchanged: 0/0
  5874 ;; Data sizes:     COMMON   BANK0   BANK1
  5875 ;;      Params:         0       2       0
  5876 ;;      Locals:         0       3       0
  5877 ;;      Temps:          0       3       0
  5878 ;;      Totals:         0       8       0
  5879 ;;Total ram usage:        8 bytes
  5880 ;; Hardware stack levels used:    1
  5881 ;; Hardware stack levels required when called:    5
  5882 ;; This function calls:
  5883 ;;		_strchr
  5884 ;;		_strlen
  5885 ;;		_strncmp
  5886 ;; This function is called by:
  5887 ;;		_ESP_process_message
  5888 ;;		_ESP_process_rx_data
  5889 ;; This function uses a non-reentrant model
  5890 ;;
  5891                           
  5892                           
  5893                           ;psect for function _strstr
  5894  0273                     _strstr:	
  5895                           
  5896                           ;incstack = 0
  5897                           ; Regs used in _strstr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5898                           ;strstr@h stored from wreg
  5899  0273  0020               	movlb	0	; select bank0
  5900  0274  00AB               	movwf	strstr@h
  5901  0275  0824               	movf	strstr@n,w
  5902  0276  0425               	iorwf	strstr@n+1,w
  5903  0277  1903               	btfsc	3,2
  5904  0278  2AB1               	goto	l2772
  5905  0279  0825               	movf	strstr@n+1,w
  5906  027A  00F4               	movwf	strlen@s+1
  5907  027B  0824               	movf	strstr@n,w
  5908  027C  00F3               	movwf	strlen@s
  5909  027D  24B6               	fcall	_strlen
  5910  027E  0874               	movf	?_strlen+1,w
  5911  027F  0020               	movlb	0	; select bank0
  5912  0280  00AA               	movwf	strstr@nl+1
  5913  0281  0873               	movf	?_strlen,w
  5914  0282  00A9               	movwf	strstr@nl
  5915  0283  2AA8               	goto	l2768
  5916  0284                     l2760:	
  5917  0284  0825               	movf	strstr@n+1,w
  5918  0285  00F4               	movwf	strncmp@_r+1
  5919  0286  0824               	movf	strstr@n,w
  5920  0287  00F3               	movwf	strncmp@_r
  5921  0288  082A               	movf	strstr@nl+1,w
  5922  0289  00F6               	movwf	strncmp@n+1
  5923  028A  0829               	movf	strstr@nl,w
  5924  028B  00F5               	movwf	strncmp@n
  5925  028C  082B               	movf	strstr@h,w
  5926  028D  2136               	fcall	_strncmp
  5927  028E  0873               	movf	?_strncmp,w
  5928  028F  0474               	iorwf	?_strncmp+1,w
  5929  0290  1D03               	btfss	3,2
  5930  0291  2A95               	goto	l2766
  5931  0292  0020               	movlb	0	; select bank0
  5932  0293  082B               	movf	strstr@h,w
  5933  0294  0008               	return
  5934  0295                     l2766:	
  5935  0295  0020               	movlb	0	; select bank0
  5936  0296  0824               	movf	strstr@n,w
  5937  0297  0084               	movwf	4
  5938  0298  0825               	movf	strstr@n+1,w
  5939  0299  0085               	movwf	5
  5940  029A  0800               	movf	0,w	;code access
  5941  029B  00A6               	movwf	??_strstr
  5942  029C  01A7               	clrf	??_strstr+1
  5943  029D  0826               	movf	??_strstr,w
  5944  029E  00F3               	movwf	strchr@c
  5945  029F  0827               	movf	??_strstr+1,w
  5946  02A0  00F4               	movwf	strchr@c+1
  5947  02A1  082B               	movf	strstr@h,w
  5948  02A2  3E01               	addlw	1
  5949  02A3  2589               	fcall	_strchr
  5950  02A4  0020               	movlb	0	; select bank0
  5951  02A5  00A8               	movwf	??_strstr+2
  5952  02A6  0828               	movf	??_strstr+2,w
  5953  02A7  00AB               	movwf	strstr@h
  5954  02A8                     l2768:	
  5955  02A8  082B               	movf	strstr@h,w
  5956  02A9  1903               	btfsc	3,2
  5957  02AA  2AB1               	goto	l2772
  5958  02AB  082B               	movf	strstr@h,w
  5959  02AC  0086               	movwf	6
  5960  02AD  0187               	clrf	7
  5961  02AE  0801               	movf	1,w
  5962  02AF  1D03               	btfss	3,2
  5963  02B0  2A84               	goto	l2760
  5964  02B1                     l2772:	
  5965  02B1  3000               	movlw	0
  5966  02B2  0008               	return
  5967  02B3                     __end_of_strstr:	
  5968                           
  5969                           	psect	text39
  5970  0136                     __ptext39:	
  5971 ;; *************** function _strncmp *****************
  5972 ;; Defined at:
  5973 ;;		line 3 in file "/pkg/microchip/xc8/v2.00/pic/sources/c99/common/strncmp.c"
  5974 ;; Parameters:    Size  Location     Type
  5975 ;;  _l              1    wreg     PTR const unsigned char 
  5976 ;;		 -> NULL(0), esp_read_data(16), 
  5977 ;;  _r              2    3[COMMON] PTR const unsigned char 
  5978 ;;		 -> STR_13(2), STR_7(7), STR_6(8), STR_5(5), 
  5979 ;;		 -> STR_4(6), STR_3(10), STR_2(3), STR_1(8), 
  5980 ;;  n               2    5[COMMON] unsigned int 
  5981 ;; Auto vars:     Size  Location     Type
  5982 ;;  _l              1    0[BANK0 ] PTR const unsigned char 
  5983 ;;		 -> NULL(0), esp_read_data(16), 
  5984 ;;  r               2    1[BANK0 ] PTR const unsigned char 
  5985 ;;		 -> STR_13(2), STR_7(7), STR_6(8), STR_5(5), 
  5986 ;;		 -> STR_4(6), STR_3(10), STR_2(3), STR_1(8), 
  5987 ;;  l               1    3[BANK0 ] PTR const unsigned char 
  5988 ;;		 -> NULL(0), esp_read_data(16), 
  5989 ;; Return value:  Size  Location     Type
  5990 ;;                  2    3[COMMON] int 
  5991 ;; Registers used:
  5992 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  5993 ;; Tracked objects:
  5994 ;;		On entry : 0/0
  5995 ;;		On exit  : 0/0
  5996 ;;		Unchanged: 0/0
  5997 ;; Data sizes:     COMMON   BANK0   BANK1
  5998 ;;      Params:         4       0       0
  5999 ;;      Locals:         0       4       0
  6000 ;;      Temps:          2       0       0
  6001 ;;      Totals:         6       4       0
  6002 ;;Total ram usage:       10 bytes
  6003 ;; Hardware stack levels used:    1
  6004 ;; Hardware stack levels required when called:    4
  6005 ;; This function calls:
  6006 ;;		Nothing
  6007 ;; This function is called by:
  6008 ;;		_strstr
  6009 ;; This function uses a non-reentrant model
  6010 ;;
  6011                           
  6012                           
  6013                           ;psect for function _strncmp
  6014  0136                     _strncmp:	
  6015                           
  6016                           ;incstack = 0
  6017                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
  6018                           ;strncmp@_l stored from wreg
  6019  0136  0020               	movlb	0	; select bank0
  6020  0137  00A0               	movwf	strncmp@_l
  6021  0138  0820               	movf	strncmp@_l,w
  6022  0139  00F7               	movwf	??_strncmp
  6023  013A  0877               	movf	??_strncmp,w
  6024  013B  00A3               	movwf	strncmp@l
  6025  013C  0874               	movf	strncmp@_r+1,w
  6026  013D  00A2               	movwf	strncmp@r+1
  6027  013E  0873               	movf	strncmp@_r,w
  6028  013F  00A1               	movwf	strncmp@r
  6029  0140  3001               	movlw	1
  6030  0141  02F5               	subwf	strncmp@n,f
  6031  0142  3000               	movlw	0
  6032  0143  3BF6               	subwfb	strncmp@n+1,f
  6033  0144  0A75               	incf	strncmp@n,w
  6034  0145  1D03               	skipz
  6035  0146  2959               	goto	l2744
  6036  0147  0A76               	incf	strncmp@n+1,w
  6037  0148  1D03               	btfss	3,2
  6038  0149  2959               	goto	l2744
  6039  014A  01F3               	clrf	?_strncmp
  6040  014B  01F4               	clrf	?_strncmp+1
  6041  014C  0008               	return
  6042  014D                     l2738:	
  6043  014D  3001               	movlw	1
  6044  014E  00F7               	movwf	??_strncmp
  6045  014F  0877               	movf	??_strncmp,w
  6046  0150  07A3               	addwf	strncmp@l,f
  6047  0151  3001               	movlw	1
  6048  0152  07A1               	addwf	strncmp@r,f
  6049  0153  3000               	movlw	0
  6050  0154  3DA2               	addwfc	strncmp@r+1,f
  6051  0155  3001               	movlw	1
  6052  0156  02F5               	subwf	strncmp@n,f
  6053  0157  3000               	movlw	0
  6054  0158  3BF6               	subwfb	strncmp@n+1,f
  6055  0159                     l2744:	
  6056  0159  0823               	movf	strncmp@l,w
  6057  015A  0086               	movwf	6
  6058  015B  0187               	clrf	7
  6059  015C  0801               	movf	1,w
  6060  015D  1903               	btfsc	3,2
  6061  015E  2977               	goto	l2752
  6062  015F  0821               	movf	strncmp@r,w
  6063  0160  0084               	movwf	4
  6064  0161  0822               	movf	strncmp@r+1,w
  6065  0162  0085               	movwf	5
  6066  0163  0012               	moviw fsr0++
  6067  0164  1903               	btfsc	3,2
  6068  0165  2977               	goto	l2752
  6069  0166  0875               	movf	strncmp@n,w
  6070  0167  0476               	iorwf	strncmp@n+1,w
  6071  0168  1903               	btfsc	3,2
  6072  0169  2977               	goto	l2752
  6073  016A  0821               	movf	strncmp@r,w
  6074  016B  0084               	movwf	4
  6075  016C  0822               	movf	strncmp@r+1,w
  6076  016D  0085               	movwf	5
  6077  016E  0800               	movf	0,w	;code access
  6078  016F  00F7               	movwf	??_strncmp
  6079  0170  0823               	movf	strncmp@l,w
  6080  0171  0086               	movwf	6
  6081  0172  0187               	clrf	7
  6082  0173  0801               	movf	1,w
  6083  0174  0677               	xorwf	??_strncmp,w
  6084  0175  1903               	skipnz
  6085  0176  294D               	goto	l2738
  6086  0177                     l2752:	
  6087  0177  0821               	movf	strncmp@r,w
  6088  0178  0084               	movwf	4
  6089  0179  0822               	movf	strncmp@r+1,w
  6090  017A  0085               	movwf	5
  6091  017B  0800               	movf	0,w	;code access
  6092  017C  00F7               	movwf	??_strncmp
  6093  017D  01F8               	clrf	??_strncmp+1
  6094  017E  09F7               	comf	??_strncmp,f
  6095  017F  09F8               	comf	??_strncmp+1,f
  6096  0180  0AF7               	incf	??_strncmp,f
  6097  0181  1903               	skipnz
  6098  0182  0AF8               	incf	??_strncmp+1,f
  6099  0183  0823               	movf	strncmp@l,w
  6100  0184  0086               	movwf	6
  6101  0185  0187               	clrf	7
  6102  0186  0801               	movf	1,w
  6103  0187  0777               	addwf	??_strncmp,w
  6104  0188  00F3               	movwf	?_strncmp
  6105  0189  0878               	movf	??_strncmp+1,w
  6106  018A  1803               	skipnc
  6107  018B  0A78               	incf	??_strncmp+1,w
  6108  018C  00F4               	movwf	?_strncmp+1
  6109  018D  0008               	return
  6110  018E                     __end_of_strncmp:	
  6111                           
  6112                           	psect	text40
  6113  04B6                     __ptext40:	
  6114 ;; *************** function _strlen *****************
  6115 ;; Defined at:
  6116 ;;		line 12 in file "/pkg/microchip/xc8/v2.00/pic/sources/c99/common/strlen.c"
  6117 ;; Parameters:    Size  Location     Type
  6118 ;;  s               2    3[COMMON] PTR const unsigned char 
  6119 ;;		 -> STR_13(2), STR_7(7), STR_6(8), STR_5(5), 
  6120 ;;		 -> STR_4(6), STR_3(10), STR_2(3), STR_1(8), 
  6121 ;; Auto vars:     Size  Location     Type
  6122 ;;  a               2    7[COMMON] PTR const unsigned char 
  6123 ;;		 -> STR_13(2), STR_7(7), STR_6(8), STR_5(5), 
  6124 ;;		 -> STR_4(6), STR_3(10), STR_2(3), STR_1(8), 
  6125 ;; Return value:  Size  Location     Type
  6126 ;;                  2    3[COMMON] unsigned int 
  6127 ;; Registers used:
  6128 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6129 ;; Tracked objects:
  6130 ;;		On entry : 0/0
  6131 ;;		On exit  : 0/0
  6132 ;;		Unchanged: 0/0
  6133 ;; Data sizes:     COMMON   BANK0   BANK1
  6134 ;;      Params:         2       0       0
  6135 ;;      Locals:         2       0       0
  6136 ;;      Temps:          2       0       0
  6137 ;;      Totals:         6       0       0
  6138 ;;Total ram usage:        6 bytes
  6139 ;; Hardware stack levels used:    1
  6140 ;; Hardware stack levels required when called:    4
  6141 ;; This function calls:
  6142 ;;		Nothing
  6143 ;; This function is called by:
  6144 ;;		_strstr
  6145 ;; This function uses a non-reentrant model
  6146 ;;
  6147                           
  6148                           
  6149                           ;psect for function _strlen
  6150  04B6                     _strlen:	
  6151                           
  6152                           ;incstack = 0
  6153                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
  6154  04B6  0874               	movf	strlen@s+1,w
  6155  04B7  00F8               	movwf	strlen@a+1
  6156  04B8  0873               	movf	strlen@s,w
  6157  04B9  00F7               	movwf	strlen@a
  6158  04BA                     l1960:	
  6159  04BA  0873               	movf	strlen@s,w
  6160  04BB  0084               	movwf	4
  6161  04BC  0874               	movf	strlen@s+1,w
  6162  04BD  0085               	movwf	5
  6163  04BE  0012               	moviw fsr0++
  6164  04BF  1903               	btfsc	3,2
  6165  04C0  2CC6               	goto	l1962
  6166  04C1  3001               	movlw	1
  6167  04C2  07F3               	addwf	strlen@s,f
  6168  04C3  3000               	movlw	0
  6169  04C4  3DF4               	addwfc	strlen@s+1,f
  6170  04C5  2CBA               	goto	l1960
  6171  04C6                     l1962:	
  6172  04C6  0977               	comf	strlen@a,w
  6173  04C7  00F5               	movwf	??_strlen
  6174  04C8  0978               	comf	strlen@a+1,w
  6175  04C9  00F6               	movwf	??_strlen+1
  6176  04CA  0AF5               	incf	??_strlen,f
  6177  04CB  1903               	skipnz
  6178  04CC  0AF6               	incf	??_strlen+1,f
  6179  04CD  0873               	movf	strlen@s,w
  6180  04CE  0775               	addwf	??_strlen,w
  6181  04CF  00F3               	movwf	?_strlen
  6182  04D0  0874               	movf	strlen@s+1,w
  6183  04D1  3D76               	addwfc	??_strlen+1,w
  6184  04D2  00F4               	movwf	?_strlen+1
  6185  04D3  0008               	return
  6186  04D4                     __end_of_strlen:	
  6187                           
  6188                           	psect	text41
  6189  0589                     __ptext41:	
  6190 ;; *************** function _strchr *****************
  6191 ;; Defined at:
  6192 ;;		line 7 in file "/pkg/microchip/xc8/v2.00/pic/sources/c99/common/strchr.c"
  6193 ;; Parameters:    Size  Location     Type
  6194 ;;  s               1    wreg     PTR const unsigned char 
  6195 ;;		 -> NULL(0), esp_read_data(16), 
  6196 ;;  c               2    3[COMMON] int 
  6197 ;; Auto vars:     Size  Location     Type
  6198 ;;  s               1    5[COMMON] PTR const unsigned char 
  6199 ;;		 -> NULL(0), esp_read_data(16), 
  6200 ;; Return value:  Size  Location     Type
  6201 ;;                  1    wreg      PTR unsigned char 
  6202 ;; Registers used:
  6203 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6204 ;; Tracked objects:
  6205 ;;		On entry : 0/0
  6206 ;;		On exit  : 0/0
  6207 ;;		Unchanged: 0/0
  6208 ;; Data sizes:     COMMON   BANK0   BANK1
  6209 ;;      Params:         2       0       0
  6210 ;;      Locals:         1       0       0
  6211 ;;      Temps:          0       0       0
  6212 ;;      Totals:         3       0       0
  6213 ;;Total ram usage:        3 bytes
  6214 ;; Hardware stack levels used:    1
  6215 ;; Hardware stack levels required when called:    4
  6216 ;; This function calls:
  6217 ;;		Nothing
  6218 ;; This function is called by:
  6219 ;;		_strstr
  6220 ;; This function uses a non-reentrant model
  6221 ;;
  6222                           
  6223                           
  6224                           ;psect for function _strchr
  6225  0589                     _strchr:	
  6226                           
  6227                           ;incstack = 0
  6228                           ; Regs used in _strchr: [wreg+fsr1l+fsr1h+status,2+status,0]
  6229                           ;strchr@s stored from wreg
  6230  0589  00F5               	movwf	strchr@s
  6231  058A                     l1132:	
  6232  058A  0875               	movf	strchr@s,w
  6233  058B  0086               	movwf	6
  6234  058C  0187               	clrf	7
  6235  058D  0801               	movf	1,w
  6236  058E  0673               	xorwf	strchr@c,w
  6237  058F  1D03               	skipz
  6238  0590  2D93               	goto	l1998
  6239  0591  0875               	movf	strchr@s,w
  6240  0592  0008               	return
  6241  0593                     l1998:	
  6242  0593  0875               	movf	strchr@s,w
  6243  0594  0086               	movwf	6
  6244  0595  0187               	clrf	7
  6245  0596  0AF5               	incf	strchr@s,f
  6246  0597  0801               	movf	1,w
  6247  0598  1D03               	btfss	3,2
  6248  0599  2D8A               	goto	l1132
  6249  059A  3000               	movlw	0
  6250  059B  0008               	return
  6251  059C                     __end_of_strchr:	
  6252                           
  6253                           	psect	intentry
  6254  0004                     __pintentry:	
  6255 ;; *************** function _INTERRUPT_InterruptManager *****************
  6256 ;; Defined at:
  6257 ;;		line 55 in file "mcc_generated_files/interrupt_manager.c"
  6258 ;; Parameters:    Size  Location     Type
  6259 ;;		None
  6260 ;; Auto vars:     Size  Location     Type
  6261 ;;		None
  6262 ;; Return value:  Size  Location     Type
  6263 ;;                  1    wreg      void 
  6264 ;; Registers used:
  6265 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6266 ;; Tracked objects:
  6267 ;;		On entry : 0/0
  6268 ;;		On exit  : 0/0
  6269 ;;		Unchanged: 0/0
  6270 ;; Data sizes:     COMMON   BANK0   BANK1
  6271 ;;      Params:         0       0       0
  6272 ;;      Locals:         0       0       0
  6273 ;;      Temps:          1       0       0
  6274 ;;      Totals:         1       0       0
  6275 ;;Total ram usage:        1 bytes
  6276 ;; Hardware stack levels used:    1
  6277 ;; Hardware stack levels required when called:    3
  6278 ;; This function calls:
  6279 ;;		Absolute function
  6280 ;;		_ADC_GetConversionResult
  6281 ;;		_ADC_ISR
  6282 ;;		_EUSART_Receive_ISR
  6283 ;;		_EUSART_Transmit_ISR
  6284 ;;		_PIN_MANAGER_IOC
  6285 ;;		_TMR1_ISR
  6286 ;; This function is called by:
  6287 ;;		Interrupt level 1
  6288 ;; This function uses a non-reentrant model
  6289 ;;
  6290                           
  6291  0004                     _INTERRUPT_InterruptManager:	
  6292                           
  6293                           ;incstack = 0
  6294  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  6295                           
  6296                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6297  0005  3180               	pagesel	$
  6298                           
  6299                           ;mcc_generated_files/interrupt_manager.c: 58:     if(INTCONbits.IOCIE == 1 && INTCONbits
      +                          .IOCIF == 1)
  6300  0006  198B               	btfsc	11,3	;volatile
  6301  0007  1C0B               	btfss	11,0	;volatile
  6302  0008  280B               	goto	i1l74
  6303                           
  6304                           ;mcc_generated_files/interrupt_manager.c: 59:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 60:         PIN_MANAGER_IOC();
  6305  0009  269B               	fcall	_PIN_MANAGER_IOC
  6306                           
  6307                           ;mcc_generated_files/interrupt_manager.c: 61:     }
  6308  000A  283E               	goto	i1l86
  6309  000B                     i1l74:	
  6310                           ;mcc_generated_files/interrupt_manager.c: 62:     else if(INTCONbits.PEIE == 1)
  6311                           
  6312  000B  1F0B               	btfss	11,6	;volatile
  6313  000C  283E               	goto	i1l86
  6314                           
  6315                           ;mcc_generated_files/interrupt_manager.c: 63:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 64:         if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  6316  000D  0021               	movlb	1	; select bank1
  6317  000E  1C11               	btfss	17,0	;volatile
  6318  000F  2815               	goto	i1l77
  6319  0010  0020               	movlb	0	; select bank0
  6320  0011  1C11               	btfss	17,0	;volatile
  6321  0012  2815               	goto	i1l77
  6322                           
  6323                           ;mcc_generated_files/interrupt_manager.c: 65:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 66:             TMR1_ISR();
  6324  0013  259C               	fcall	_TMR1_ISR
  6325                           
  6326                           ;mcc_generated_files/interrupt_manager.c: 67:         }
  6327  0014  283E               	goto	i1l86
  6328  0015                     i1l77:	
  6329                           ;mcc_generated_files/interrupt_manager.c: 68:         else if(PIE1bits.ADIE == 1 && PIR1
      +                          bits.ADIF == 1)
  6330                           
  6331  0015  0021               	movlb	1	; select bank1
  6332  0016  1F11               	btfss	17,6	;volatile
  6333  0017  2827               	goto	i1l79
  6334  0018  0020               	movlb	0	; select bank0
  6335  0019  1F11               	btfss	17,6	;volatile
  6336  001A  2827               	goto	i1l79
  6337                           
  6338                           ;mcc_generated_files/interrupt_manager.c: 69:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 70:             ADC_value = ADC_GetConversionResult();
  6339  001B  268B               	fcall	_ADC_GetConversionResult
  6340  001C  0871               	movf	?_ADC_GetConversionResult+1,w
  6341  001D  0020               	movlb	0	; select bank0
  6342  001E  00DD               	movwf	_ADC_value+1	;volatile
  6343  001F  0870               	movf	?_ADC_GetConversionResult,w
  6344  0020  00DC               	movwf	_ADC_value	;volatile
  6345                           
  6346                           ;mcc_generated_files/interrupt_manager.c: 78:             ADC_state = ADC_READY;
  6347  0021  3001               	movlw	1
  6348  0022  00F2               	movwf	??_INTERRUPT_InterruptManager
  6349  0023  0872               	movf	??_INTERRUPT_InterruptManager,w
  6350  0024  00ED               	movwf	_ADC_state	;volatile
  6351                           
  6352                           ;mcc_generated_files/interrupt_manager.c: 80:             ADC_ISR();
  6353  0025  26BA               	fcall	_ADC_ISR
  6354                           
  6355                           ;mcc_generated_files/interrupt_manager.c: 81:         }
  6356  0026  283E               	goto	i1l86
  6357  0027                     i1l79:	
  6358                           ;mcc_generated_files/interrupt_manager.c: 82:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
  6359                           
  6360  0027  0021               	movlb	1	; select bank1
  6361  0028  1E91               	btfss	17,5	;volatile
  6362  0029  2833               	goto	i1l81
  6363  002A  0020               	movlb	0	; select bank0
  6364  002B  1E91               	btfss	17,5	;volatile
  6365  002C  2833               	goto	i1l81
  6366                           
  6367                           ;mcc_generated_files/interrupt_manager.c: 83:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 84:             EUSART_RxDefaultInterruptHandler();
  6368  002D  085F               	movf	_EUSART_RxDefaultInterruptHandler+1,w
  6369  002E  008A               	movwf	10
  6370  002F  085E               	movf	_EUSART_RxDefaultInterruptHandler,w
  6371  0030  000A               	callw
  6372  0031  3180               	pagesel	$
  6373                           
  6374                           ;mcc_generated_files/interrupt_manager.c: 85:         }
  6375  0032  283E               	goto	i1l86
  6376  0033                     i1l81:	
  6377                           ;mcc_generated_files/interrupt_manager.c: 86:         else if(PIE1bits.TXIE == 1 && PIR1
      +                          bits.TXIF == 1)
  6378                           
  6379  0033  0021               	movlb	1	; select bank1
  6380  0034  1E11               	btfss	17,4	;volatile
  6381  0035  283E               	goto	i1l86
  6382  0036  0020               	movlb	0	; select bank0
  6383  0037  1E11               	btfss	17,4	;volatile
  6384  0038  283E               	goto	i1l86
  6385                           
  6386                           ;mcc_generated_files/interrupt_manager.c: 87:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 88:             EUSART_TxDefaultInterruptHandler();
  6387  0039  0861               	movf	_EUSART_TxDefaultInterruptHandler+1,w
  6388  003A  008A               	movwf	10
  6389  003B  0860               	movf	_EUSART_TxDefaultInterruptHandler,w
  6390  003C  000A               	callw
  6391  003D  3180               	pagesel	$
  6392  003E                     i1l86:	
  6393                           ;mcc_generated_files/interrupt_manager.c: 96:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 98:     }
  6394                           
  6395                           ;mcc_generated_files/interrupt_manager.c: 95:     else
  6396                           
  6397                           ;mcc_generated_files/interrupt_manager.c: 94:     }
  6398                           
  6399                           ;mcc_generated_files/interrupt_manager.c: 91:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 93:         }
  6400                           
  6401                           ;mcc_generated_files/interrupt_manager.c: 90:         else
  6402                           
  6403                           ;mcc_generated_files/interrupt_manager.c: 89:         }
  6404                           
  6405  003E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  6406  003F  0009               	retfie
  6407  0040                     __end_of_INTERRUPT_InterruptManager:	
  6408                           
  6409                           	psect	text43
  6410  059C                     __ptext43:	
  6411 ;; *************** function _TMR1_ISR *****************
  6412 ;; Defined at:
  6413 ;;		line 157 in file "mcc_generated_files/tmr1.c"
  6414 ;; Parameters:    Size  Location     Type
  6415 ;;		None
  6416 ;; Auto vars:     Size  Location     Type
  6417 ;;		None
  6418 ;; Return value:  Size  Location     Type
  6419 ;;                  1    wreg      void 
  6420 ;; Registers used:
  6421 ;;		wreg, status,2, status,0, pclath, cstack
  6422 ;; Tracked objects:
  6423 ;;		On entry : 0/0
  6424 ;;		On exit  : 0/0
  6425 ;;		Unchanged: 0/0
  6426 ;; Data sizes:     COMMON   BANK0   BANK1
  6427 ;;      Params:         0       0       0
  6428 ;;      Locals:         0       0       0
  6429 ;;      Temps:          0       0       0
  6430 ;;      Totals:         0       0       0
  6431 ;;Total ram usage:        0 bytes
  6432 ;; Hardware stack levels used:    1
  6433 ;; Hardware stack levels required when called:    2
  6434 ;; This function calls:
  6435 ;;		Absolute function
  6436 ;;		_TMR1_DefaultInterruptHandler
  6437 ;;		_TMR1_WriteTimer
  6438 ;;		__TMR1_Ready
  6439 ;; This function is called by:
  6440 ;;		_INTERRUPT_InterruptManager
  6441 ;; This function uses a non-reentrant model
  6442 ;;
  6443                           
  6444                           
  6445                           ;psect for function _TMR1_ISR
  6446  059C                     _TMR1_ISR:	
  6447                           
  6448                           ;mcc_generated_files/tmr1.c: 161:     PIR1bits.TMR1IF = 0;
  6449                           
  6450                           ;incstack = 0
  6451                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
  6452  059C  0020               	movlb	0	; select bank0
  6453  059D  1011               	bcf	17,0	;volatile
  6454                           
  6455                           ;mcc_generated_files/tmr1.c: 162:     TMR1_WriteTimer(timer1ReloadVal);
  6456  059E  085B               	movf	_timer1ReloadVal+1,w	;volatile
  6457  059F  00F1               	movwf	TMR1_WriteTimer@timerVal+1
  6458  05A0  085A               	movf	_timer1ReloadVal,w	;volatile
  6459  05A1  00F0               	movwf	TMR1_WriteTimer@timerVal
  6460  05A2  25AE               	fcall	_TMR1_WriteTimer
  6461                           
  6462                           ;mcc_generated_files/tmr1.c: 164:     if(TMR1_InterruptHandler)
  6463  05A3  0020               	movlb	0	; select bank0
  6464  05A4  0858               	movf	_TMR1_InterruptHandler,w
  6465  05A5  0459               	iorwf	_TMR1_InterruptHandler+1,w
  6466  05A6  1903               	btfsc	3,2
  6467  05A7  0008               	return
  6468                           
  6469                           ;mcc_generated_files/tmr1.c: 165:     {;mcc_generated_files/tmr1.c: 166:         TMR1_In
      +                          terruptHandler();
  6470  05A8  0859               	movf	_TMR1_InterruptHandler+1,w
  6471  05A9  008A               	movwf	10
  6472  05AA  0858               	movf	_TMR1_InterruptHandler,w
  6473  05AB  000A               	callw
  6474  05AC  3185               	pagesel	$
  6475  05AD  0008               	return
  6476  05AE                     __end_of_TMR1_ISR:	
  6477                           ;mcc_generated_files/tmr1.c: 167:     }
  6478                           
  6479                           
  6480                           	psect	text44
  6481  06C4                     __ptext44:	
  6482 ;; *************** function _TMR1_DefaultInterruptHandler *****************
  6483 ;; Defined at:
  6484 ;;		line 175 in file "mcc_generated_files/tmr1.c"
  6485 ;; Parameters:    Size  Location     Type
  6486 ;;		None
  6487 ;; Auto vars:     Size  Location     Type
  6488 ;;		None
  6489 ;; Return value:  Size  Location     Type
  6490 ;;                  1    wreg      void 
  6491 ;; Registers used:
  6492 ;;		None
  6493 ;; Tracked objects:
  6494 ;;		On entry : 0/0
  6495 ;;		On exit  : 0/0
  6496 ;;		Unchanged: 0/0
  6497 ;; Data sizes:     COMMON   BANK0   BANK1
  6498 ;;      Params:         0       0       0
  6499 ;;      Locals:         0       0       0
  6500 ;;      Temps:          0       0       0
  6501 ;;      Totals:         0       0       0
  6502 ;;Total ram usage:        0 bytes
  6503 ;; Hardware stack levels used:    1
  6504 ;; This function calls:
  6505 ;;		Nothing
  6506 ;; This function is called by:
  6507 ;;		_TMR1_Initialize
  6508 ;;		_TMR1_ISR
  6509 ;; This function uses a non-reentrant model
  6510 ;;
  6511                           
  6512                           
  6513                           ;psect for function _TMR1_DefaultInterruptHandler
  6514  06C4                     _TMR1_DefaultInterruptHandler:	
  6515                           
  6516                           ;incstack = 0
  6517                           ; Regs used in _TMR1_DefaultInterruptHandler: []
  6518  06C4  0008               	return
  6519  06C5                     __end_of_TMR1_DefaultInterruptHandler:	
  6520                           
  6521                           	psect	text45
  6522  0685                     __ptext45:	
  6523 ;; *************** function __TMR1_Ready *****************
  6524 ;; Defined at:
  6525 ;;		line 171 in file "logger.c"
  6526 ;; Parameters:    Size  Location     Type
  6527 ;;		None
  6528 ;; Auto vars:     Size  Location     Type
  6529 ;;		None
  6530 ;; Return value:  Size  Location     Type
  6531 ;;                  1    wreg      void 
  6532 ;; Registers used:
  6533 ;;		wreg, status,2, status,0, pclath, cstack
  6534 ;; Tracked objects:
  6535 ;;		On entry : 0/0
  6536 ;;		On exit  : 0/0
  6537 ;;		Unchanged: 0/0
  6538 ;; Data sizes:     COMMON   BANK0   BANK1
  6539 ;;      Params:         0       0       0
  6540 ;;      Locals:         0       0       0
  6541 ;;      Temps:          0       0       0
  6542 ;;      Totals:         0       0       0
  6543 ;;Total ram usage:        0 bytes
  6544 ;; Hardware stack levels used:    1
  6545 ;; Hardware stack levels required when called:    1
  6546 ;; This function calls:
  6547 ;;		_ADC_StartConversion
  6548 ;; This function is called by:
  6549 ;;		_logger_initialize
  6550 ;;		_TMR1_ISR
  6551 ;; This function uses a non-reentrant model
  6552 ;;
  6553                           
  6554                           
  6555                           ;psect for function __TMR1_Ready
  6556  0685                     __TMR1_Ready:	
  6557                           
  6558                           ;logger.c: 173:     if (TMR1_state == TMR1_RUNNING) {
  6559                           
  6560                           ;incstack = 0
  6561                           ; Regs used in __TMR1_Ready: [wreg+status,2+status,0+pclath+cstack]
  6562  0685  0020               	movlb	0	; select bank0
  6563  0686  0364               	decf	_TMR1_state,w	;volatile
  6564  0687  1D03               	btfss	3,2
  6565  0688  0008               	return
  6566                           
  6567                           ;logger.c: 182:         ADC_StartConversion();
  6568  0689  26B7               	fcall	_ADC_StartConversion
  6569  068A  0008               	return
  6570  068B                     __end_of__TMR1_Ready:	
  6571                           ;logger.c: 186:     }
  6572                           
  6573                           
  6574                           	psect	text46
  6575  06B7                     __ptext46:	
  6576 ;; *************** function _ADC_StartConversion *****************
  6577 ;; Defined at:
  6578 ;;		line 93 in file "mcc_generated_files/adc.c"
  6579 ;; Parameters:    Size  Location     Type
  6580 ;;		None
  6581 ;; Auto vars:     Size  Location     Type
  6582 ;;		None
  6583 ;; Return value:  Size  Location     Type
  6584 ;;                  1    wreg      void 
  6585 ;; Registers used:
  6586 ;;		None
  6587 ;; Tracked objects:
  6588 ;;		On entry : 0/0
  6589 ;;		On exit  : 0/0
  6590 ;;		Unchanged: 0/0
  6591 ;; Data sizes:     COMMON   BANK0   BANK1
  6592 ;;      Params:         0       0       0
  6593 ;;      Locals:         0       0       0
  6594 ;;      Temps:          0       0       0
  6595 ;;      Totals:         0       0       0
  6596 ;;Total ram usage:        0 bytes
  6597 ;; Hardware stack levels used:    1
  6598 ;; This function calls:
  6599 ;;		Nothing
  6600 ;; This function is called by:
  6601 ;;		__TMR1_Ready
  6602 ;; This function uses a non-reentrant model
  6603 ;;
  6604                           
  6605                           
  6606                           ;psect for function _ADC_StartConversion
  6607  06B7                     _ADC_StartConversion:	
  6608                           
  6609                           ;mcc_generated_files/adc.c: 96:     ADCON0bits.GO_nDONE = 1;
  6610                           
  6611                           ;incstack = 0
  6612                           ; Regs used in _ADC_StartConversion: []
  6613  06B7  0021               	movlb	1	; select bank1
  6614  06B8  149D               	bsf	29,1	;volatile
  6615  06B9  0008               	return
  6616  06BA                     __end_of_ADC_StartConversion:	
  6617                           
  6618                           	psect	text47
  6619  05AE                     __ptext47:	
  6620 ;; *************** function _TMR1_WriteTimer *****************
  6621 ;; Defined at:
  6622 ;;		line 120 in file "mcc_generated_files/tmr1.c"
  6623 ;; Parameters:    Size  Location     Type
  6624 ;;  timerVal        2    0[COMMON] unsigned short 
  6625 ;; Auto vars:     Size  Location     Type
  6626 ;;		None
  6627 ;; Return value:  Size  Location     Type
  6628 ;;                  1    wreg      void 
  6629 ;; Registers used:
  6630 ;;		wreg, status,2
  6631 ;; Tracked objects:
  6632 ;;		On entry : 0/0
  6633 ;;		On exit  : 0/0
  6634 ;;		Unchanged: 0/0
  6635 ;; Data sizes:     COMMON   BANK0   BANK1
  6636 ;;      Params:         2       0       0
  6637 ;;      Locals:         0       0       0
  6638 ;;      Temps:          0       0       0
  6639 ;;      Totals:         2       0       0
  6640 ;;Total ram usage:        2 bytes
  6641 ;; Hardware stack levels used:    1
  6642 ;; This function calls:
  6643 ;;		Nothing
  6644 ;; This function is called by:
  6645 ;;		_TMR1_ISR
  6646 ;;		_TMR1_Reload
  6647 ;; This function uses a non-reentrant model
  6648 ;;
  6649                           
  6650                           
  6651                           ;psect for function _TMR1_WriteTimer
  6652  05AE                     _TMR1_WriteTimer:	
  6653                           
  6654                           ;mcc_generated_files/tmr1.c: 120: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr1.c: 121: {;mcc_generated_files/tmr1.c: 122:     if (T1CONbits.nT1SYNC == 1)
  6655                           
  6656                           ;incstack = 0
  6657                           ; Regs used in _TMR1_WriteTimer: [wreg+status,2]
  6658  05AE  0020               	movlb	0	; select bank0
  6659  05AF  1D18               	btfss	24,2	;volatile
  6660  05B0  2DB8               	goto	i1l2510
  6661                           
  6662                           ;mcc_generated_files/tmr1.c: 123:     {;mcc_generated_files/tmr1.c: 125:         T1CONbi
      +                          ts.TMR1ON = 0;
  6663  05B1  1018               	bcf	24,0	;volatile
  6664                           
  6665                           ;mcc_generated_files/tmr1.c: 128:         TMR1H = (timerVal >> 8);
  6666  05B2  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  6667  05B3  0097               	movwf	23	;volatile
  6668                           
  6669                           ;mcc_generated_files/tmr1.c: 129:         TMR1L = timerVal;
  6670  05B4  0870               	movf	TMR1_WriteTimer@timerVal,w
  6671  05B5  0096               	movwf	22	;volatile
  6672                           
  6673                           ;mcc_generated_files/tmr1.c: 132:         T1CONbits.TMR1ON =1;
  6674  05B6  1418               	bsf	24,0	;volatile
  6675                           
  6676                           ;mcc_generated_files/tmr1.c: 133:     }
  6677  05B7  0008               	return
  6678  05B8                     i1l2510:	
  6679                           ;mcc_generated_files/tmr1.c: 134:     else
  6680                           
  6681                           
  6682                           ;mcc_generated_files/tmr1.c: 135:     {;mcc_generated_files/tmr1.c: 137:         TMR1H =
      +                           (timerVal >> 8);
  6683  05B8  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  6684  05B9  0097               	movwf	23	;volatile
  6685                           
  6686                           ;mcc_generated_files/tmr1.c: 138:         TMR1L = timerVal;
  6687  05BA  0870               	movf	TMR1_WriteTimer@timerVal,w
  6688  05BB  0096               	movwf	22	;volatile
  6689  05BC  0008               	return
  6690  05BD                     __end_of_TMR1_WriteTimer:	
  6691                           ;mcc_generated_files/tmr1.c: 139:     }
  6692                           
  6693                           
  6694                           	psect	text48
  6695  069B                     __ptext48:	
  6696 ;; *************** function _PIN_MANAGER_IOC *****************
  6697 ;; Defined at:
  6698 ;;		line 115 in file "mcc_generated_files/pin_manager.c"
  6699 ;; Parameters:    Size  Location     Type
  6700 ;;		None
  6701 ;; Auto vars:     Size  Location     Type
  6702 ;;		None
  6703 ;; Return value:  Size  Location     Type
  6704 ;;                  1    wreg      void 
  6705 ;; Registers used:
  6706 ;;		wreg, status,2, status,0, pclath, cstack
  6707 ;; Tracked objects:
  6708 ;;		On entry : 0/0
  6709 ;;		On exit  : 0/0
  6710 ;;		Unchanged: 0/0
  6711 ;; Data sizes:     COMMON   BANK0   BANK1
  6712 ;;      Params:         0       0       0
  6713 ;;      Locals:         0       0       0
  6714 ;;      Temps:          0       0       0
  6715 ;;      Totals:         0       0       0
  6716 ;;Total ram usage:        0 bytes
  6717 ;; Hardware stack levels used:    1
  6718 ;; Hardware stack levels required when called:    2
  6719 ;; This function calls:
  6720 ;;		_IOCAF4_ISR
  6721 ;; This function is called by:
  6722 ;;		_INTERRUPT_InterruptManager
  6723 ;; This function uses a non-reentrant model
  6724 ;;
  6725                           
  6726                           
  6727                           ;psect for function _PIN_MANAGER_IOC
  6728  069B                     _PIN_MANAGER_IOC:	
  6729                           
  6730                           ;mcc_generated_files/pin_manager.c: 118:     if(IOCAFbits.IOCAF4 == 1)
  6731                           
  6732                           ;incstack = 0
  6733                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
  6734  069B  0027               	movlb	7	; select bank7
  6735  069C  1E13               	btfss	19,4	;volatile
  6736  069D  0008               	return
  6737                           
  6738                           ;mcc_generated_files/pin_manager.c: 119:     {;mcc_generated_files/pin_manager.c: 120:  
      +                                 IOCAF4_ISR();
  6739  069E  25E6               	fcall	_IOCAF4_ISR
  6740  069F  0008               	return
  6741  06A0                     __end_of_PIN_MANAGER_IOC:	
  6742                           ;mcc_generated_files/pin_manager.c: 121:     }
  6743                           
  6744                           
  6745                           	psect	text49
  6746  05E6                     __ptext49:	
  6747 ;; *************** function _IOCAF4_ISR *****************
  6748 ;; Defined at:
  6749 ;;		line 127 in file "mcc_generated_files/pin_manager.c"
  6750 ;; Parameters:    Size  Location     Type
  6751 ;;		None
  6752 ;; Auto vars:     Size  Location     Type
  6753 ;;		None
  6754 ;; Return value:  Size  Location     Type
  6755 ;;                  1    wreg      void 
  6756 ;; Registers used:
  6757 ;;		wreg, status,2, status,0, pclath, cstack
  6758 ;; Tracked objects:
  6759 ;;		On entry : 0/0
  6760 ;;		On exit  : 0/0
  6761 ;;		Unchanged: 0/0
  6762 ;; Data sizes:     COMMON   BANK0   BANK1
  6763 ;;      Params:         0       0       0
  6764 ;;      Locals:         0       0       0
  6765 ;;      Temps:          0       0       0
  6766 ;;      Totals:         0       0       0
  6767 ;;Total ram usage:        0 bytes
  6768 ;; Hardware stack levels used:    1
  6769 ;; Hardware stack levels required when called:    1
  6770 ;; This function calls:
  6771 ;;		Absolute function
  6772 ;;		_IOCAF4_DefaultInterruptHandler
  6773 ;;		__IOC_Ready
  6774 ;; This function is called by:
  6775 ;;		_PIN_MANAGER_IOC
  6776 ;; This function uses a non-reentrant model
  6777 ;;
  6778                           
  6779                           
  6780                           ;psect for function _IOCAF4_ISR
  6781  05E6                     _IOCAF4_ISR:	
  6782                           
  6783                           ;mcc_generated_files/pin_manager.c: 132:     if(IOCAF4_InterruptHandler)
  6784                           
  6785                           ;incstack = 0
  6786                           ; Regs used in _IOCAF4_ISR: [wreg+status,2+status,0+pclath+cstack]
  6787  05E6  0020               	movlb	0	; select bank0
  6788  05E7  086E               	movf	_IOCAF4_InterruptHandler,w
  6789  05E8  046F               	iorwf	_IOCAF4_InterruptHandler+1,w
  6790  05E9  1903               	btfsc	3,2
  6791  05EA  2DF0               	goto	i1l2518
  6792                           
  6793                           ;mcc_generated_files/pin_manager.c: 133:     {;mcc_generated_files/pin_manager.c: 134:  
      +                                 IOCAF4_InterruptHandler();
  6794  05EB  086F               	movf	_IOCAF4_InterruptHandler+1,w
  6795  05EC  008A               	movwf	10
  6796  05ED  086E               	movf	_IOCAF4_InterruptHandler,w
  6797  05EE  000A               	callw
  6798  05EF  3185               	pagesel	$
  6799  05F0                     i1l2518:	
  6800                           ;mcc_generated_files/pin_manager.c: 135:     }
  6801                           
  6802                           
  6803                           ;mcc_generated_files/pin_manager.c: 136:     IOCAFbits.IOCAF4 = 0;
  6804  05F0  0027               	movlb	7	; select bank7
  6805  05F1  1213               	bcf	19,4	;volatile
  6806  05F2  0008               	return
  6807  05F3                     __end_of_IOCAF4_ISR:	
  6808                           
  6809                           	psect	text50
  6810  06C5                     __ptext50:	
  6811 ;; *************** function _IOCAF4_DefaultInterruptHandler *****************
  6812 ;; Defined at:
  6813 ;;		line 149 in file "mcc_generated_files/pin_manager.c"
  6814 ;; Parameters:    Size  Location     Type
  6815 ;;		None
  6816 ;; Auto vars:     Size  Location     Type
  6817 ;;		None
  6818 ;; Return value:  Size  Location     Type
  6819 ;;                  1    wreg      void 
  6820 ;; Registers used:
  6821 ;;		None
  6822 ;; Tracked objects:
  6823 ;;		On entry : 0/0
  6824 ;;		On exit  : 0/0
  6825 ;;		Unchanged: 0/0
  6826 ;; Data sizes:     COMMON   BANK0   BANK1
  6827 ;;      Params:         0       0       0
  6828 ;;      Locals:         0       0       0
  6829 ;;      Temps:          0       0       0
  6830 ;;      Totals:         0       0       0
  6831 ;;Total ram usage:        0 bytes
  6832 ;; Hardware stack levels used:    1
  6833 ;; This function calls:
  6834 ;;		Nothing
  6835 ;; This function is called by:
  6836 ;;		_PIN_MANAGER_Initialize
  6837 ;;		_IOCAF4_ISR
  6838 ;; This function uses a non-reentrant model
  6839 ;;
  6840                           
  6841                           
  6842                           ;psect for function _IOCAF4_DefaultInterruptHandler
  6843  06C5                     _IOCAF4_DefaultInterruptHandler:	
  6844                           
  6845                           ;incstack = 0
  6846                           ; Regs used in _IOCAF4_DefaultInterruptHandler: []
  6847  06C5  0008               	return
  6848  06C6                     __end_of_IOCAF4_DefaultInterruptHandler:	
  6849                           
  6850                           	psect	text51
  6851  0613                     __ptext51:	
  6852 ;; *************** function __IOC_Ready *****************
  6853 ;; Defined at:
  6854 ;;		line 189 in file "logger.c"
  6855 ;; Parameters:    Size  Location     Type
  6856 ;;		None
  6857 ;; Auto vars:     Size  Location     Type
  6858 ;;		None
  6859 ;; Return value:  Size  Location     Type
  6860 ;;                  1    wreg      void 
  6861 ;; Registers used:
  6862 ;;		wreg, status,2
  6863 ;; Tracked objects:
  6864 ;;		On entry : 0/0
  6865 ;;		On exit  : 0/0
  6866 ;;		Unchanged: 0/0
  6867 ;; Data sizes:     COMMON   BANK0   BANK1
  6868 ;;      Params:         0       0       0
  6869 ;;      Locals:         0       0       0
  6870 ;;      Temps:          1       0       0
  6871 ;;      Totals:         1       0       0
  6872 ;;Total ram usage:        1 bytes
  6873 ;; Hardware stack levels used:    1
  6874 ;; This function calls:
  6875 ;;		Nothing
  6876 ;; This function is called by:
  6877 ;;		_logger_initialize
  6878 ;;		_IOCAF4_ISR
  6879 ;; This function uses a non-reentrant model
  6880 ;;
  6881                           
  6882                           
  6883                           ;psect for function __IOC_Ready
  6884  0613                     __IOC_Ready:	
  6885                           
  6886                           ;logger.c: 192:     IOC_value = PORTAbits.RA4;
  6887                           
  6888                           ;incstack = 0
  6889                           ; Regs used in __IOC_Ready: [wreg+status,2]
  6890  0613  3000               	movlw	0
  6891  0614  0020               	movlb	0	; select bank0
  6892  0615  1A0C               	btfsc	12,4	;volatile
  6893  0616  3001               	movlw	1
  6894  0617  00E2               	movwf	_IOC_value	;volatile
  6895                           
  6896                           ;logger.c: 193:     IOC_state = IOC_READY;
  6897  0618  3001               	movlw	1
  6898  0619  00F0               	movwf	??__IOC_Ready
  6899  061A  0870               	movf	??__IOC_Ready,w
  6900  061B  00E3               	movwf	_IOC_state	;volatile
  6901  061C  0008               	return
  6902  061D                     __end_of__IOC_Ready:	
  6903                           
  6904                           	psect	text52
  6905  050E                     __ptext52:	
  6906 ;; *************** function _EUSART_Transmit_ISR *****************
  6907 ;; Defined at:
  6908 ;;		line 172 in file "mcc_generated_files/eusart.c"
  6909 ;; Parameters:    Size  Location     Type
  6910 ;;		None
  6911 ;; Auto vars:     Size  Location     Type
  6912 ;;		None
  6913 ;; Return value:  Size  Location     Type
  6914 ;;                  1    wreg      void 
  6915 ;; Registers used:
  6916 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6917 ;; Tracked objects:
  6918 ;;		On entry : 0/0
  6919 ;;		On exit  : 0/0
  6920 ;;		Unchanged: 0/0
  6921 ;; Data sizes:     COMMON   BANK0   BANK1
  6922 ;;      Params:         0       0       0
  6923 ;;      Locals:         0       0       0
  6924 ;;      Temps:          1       0       0
  6925 ;;      Totals:         1       0       0
  6926 ;;Total ram usage:        1 bytes
  6927 ;; Hardware stack levels used:    1
  6928 ;; This function calls:
  6929 ;;		Nothing
  6930 ;; This function is called by:
  6931 ;;		_EUSART_Initialize
  6932 ;;		_INTERRUPT_InterruptManager
  6933 ;; This function uses a non-reentrant model
  6934 ;;
  6935                           
  6936                           
  6937                           ;psect for function _EUSART_Transmit_ISR
  6938  050E                     _EUSART_Transmit_ISR:	
  6939                           
  6940                           ;mcc_generated_files/eusart.c: 176:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
  6941                           
  6942                           ;incstack = 0
  6943                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  6944  050E  3008               	movlw	8
  6945  050F  0279               	subwf	_eusartTxBufferRemaining,w	;volatile
  6946  0510  1803               	skipnc
  6947  0511  2D28               	goto	i1l165
  6948                           
  6949                           ;mcc_generated_files/eusart.c: 177:     {;mcc_generated_files/eusart.c: 178:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
  6950  0512  0020               	movlb	0	; select bank0
  6951  0513  086C               	movf	_eusartTxTail,w
  6952  0514  3E4E               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  6953  0515  0086               	movwf	6
  6954  0516  0187               	clrf	7
  6955  0517  0801               	movf	1,w
  6956  0518  0023               	movlb	3	; select bank3
  6957  0519  009A               	movwf	26	;volatile
  6958  051A  3001               	movlw	1
  6959  051B  00F0               	movwf	??_EUSART_Transmit_ISR
  6960  051C  0870               	movf	??_EUSART_Transmit_ISR,w
  6961  051D  0020               	movlb	0	; select bank0
  6962  051E  07EC               	addwf	_eusartTxTail,f	;volatile
  6963                           
  6964                           ;mcc_generated_files/eusart.c: 179:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
  6965  051F  3008               	movlw	8
  6966  0520  026C               	subwf	_eusartTxTail,w	;volatile
  6967  0521  1803               	btfsc	3,0
  6968                           
  6969                           ;mcc_generated_files/eusart.c: 180:         {;mcc_generated_files/eusart.c: 181:        
      +                               eusartTxTail = 0;
  6970  0522  01EC               	clrf	_eusartTxTail	;volatile
  6971                           
  6972                           ;mcc_generated_files/eusart.c: 183:         eusartTxBufferRemaining++;
  6973                           
  6974                           ;mcc_generated_files/eusart.c: 182:         }
  6975  0523  3001               	movlw	1
  6976  0524  00F0               	movwf	??_EUSART_Transmit_ISR
  6977  0525  0870               	movf	??_EUSART_Transmit_ISR,w
  6978  0526  07F9               	addwf	_eusartTxBufferRemaining,f	;volatile
  6979                           
  6980                           ;mcc_generated_files/eusart.c: 184:     }
  6981  0527  0008               	return
  6982  0528                     i1l165:	
  6983                           ;mcc_generated_files/eusart.c: 185:     else
  6984                           
  6985                           
  6986                           ;mcc_generated_files/eusart.c: 186:     {;mcc_generated_files/eusart.c: 187:         PIE
      +                          1bits.TXIE = 0;
  6987  0528  0021               	movlb	1	; select bank1
  6988  0529  1211               	bcf	17,4	;volatile
  6989  052A  0008               	return
  6990  052B                     __end_of_EUSART_Transmit_ISR:	
  6991                           ;mcc_generated_files/eusart.c: 188:     }
  6992                           
  6993                           
  6994                           	psect	text53
  6995  052B                     __ptext53:	
  6996 ;; *************** function _EUSART_Receive_ISR *****************
  6997 ;; Defined at:
  6998 ;;		line 191 in file "mcc_generated_files/eusart.c"
  6999 ;; Parameters:    Size  Location     Type
  7000 ;;		None
  7001 ;; Auto vars:     Size  Location     Type
  7002 ;;		None
  7003 ;; Return value:  Size  Location     Type
  7004 ;;                  1    wreg      void 
  7005 ;; Registers used:
  7006 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7007 ;; Tracked objects:
  7008 ;;		On entry : 0/0
  7009 ;;		On exit  : 0/0
  7010 ;;		Unchanged: 0/0
  7011 ;; Data sizes:     COMMON   BANK0   BANK1
  7012 ;;      Params:         0       0       0
  7013 ;;      Locals:         0       0       0
  7014 ;;      Temps:          1       0       0
  7015 ;;      Totals:         1       0       0
  7016 ;;Total ram usage:        1 bytes
  7017 ;; Hardware stack levels used:    1
  7018 ;; This function calls:
  7019 ;;		Nothing
  7020 ;; This function is called by:
  7021 ;;		_EUSART_Initialize
  7022 ;;		_INTERRUPT_InterruptManager
  7023 ;; This function uses a non-reentrant model
  7024 ;;
  7025                           
  7026                           
  7027                           ;psect for function _EUSART_Receive_ISR
  7028  052B                     _EUSART_Receive_ISR:	
  7029                           
  7030                           ;mcc_generated_files/eusart.c: 194:     if(1 == RCSTAbits.OERR)
  7031                           
  7032                           ;incstack = 0
  7033                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  7034  052B  0023               	movlb	3	; select bank3
  7035  052C  1C9D               	btfss	29,1	;volatile
  7036  052D  2D30               	goto	i1l2568
  7037                           
  7038                           ;mcc_generated_files/eusart.c: 195:     {;mcc_generated_files/eusart.c: 198:         RCS
      +                          TAbits.CREN = 0;
  7039  052E  121D               	bcf	29,4	;volatile
  7040                           
  7041                           ;mcc_generated_files/eusart.c: 199:         RCSTAbits.CREN = 1;
  7042  052F  161D               	bsf	29,4	;volatile
  7043  0530                     i1l2568:	
  7044                           ;mcc_generated_files/eusart.c: 200:     }
  7045                           
  7046                           
  7047                           ;mcc_generated_files/eusart.c: 203:     eusartRxBuffer[eusartRxHead++] = RCREG;
  7048  0530  0819               	movf	25,w	;volatile
  7049  0531  00F0               	movwf	??_EUSART_Receive_ISR
  7050  0532  0020               	movlb	0	; select bank0
  7051  0533  086B               	movf	_eusartRxHead,w
  7052  0534  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  7053  0535  0086               	movwf	6
  7054  0536  0187               	clrf	7
  7055  0537  0870               	movf	??_EUSART_Receive_ISR,w
  7056  0538  0081               	movwf	1
  7057  0539  3001               	movlw	1
  7058  053A  00F0               	movwf	??_EUSART_Receive_ISR
  7059  053B  0870               	movf	??_EUSART_Receive_ISR,w
  7060  053C  07EB               	addwf	_eusartRxHead,f	;volatile
  7061                           
  7062                           ;mcc_generated_files/eusart.c: 204:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
  7063  053D  3008               	movlw	8
  7064  053E  026B               	subwf	_eusartRxHead,w	;volatile
  7065  053F  1803               	btfsc	3,0
  7066                           
  7067                           ;mcc_generated_files/eusart.c: 205:     {;mcc_generated_files/eusart.c: 206:         eus
      +                          artRxHead = 0;
  7068  0540  01EB               	clrf	_eusartRxHead	;volatile
  7069                           
  7070                           ;mcc_generated_files/eusart.c: 208:     eusartRxCount++;
  7071                           
  7072                           ;mcc_generated_files/eusart.c: 207:     }
  7073  0541  3001               	movlw	1
  7074  0542  00F0               	movwf	??_EUSART_Receive_ISR
  7075  0543  0870               	movf	??_EUSART_Receive_ISR,w
  7076  0544  07E9               	addwf	_eusartRxCount,f	;volatile
  7077  0545  0008               	return
  7078  0546                     __end_of_EUSART_Receive_ISR:	
  7079                           
  7080                           	psect	text54
  7081  06BA                     __ptext54:	
  7082 ;; *************** function _ADC_ISR *****************
  7083 ;; Defined at:
  7084 ;;		line 140 in file "mcc_generated_files/adc.c"
  7085 ;; Parameters:    Size  Location     Type
  7086 ;;		None
  7087 ;; Auto vars:     Size  Location     Type
  7088 ;;		None
  7089 ;; Return value:  Size  Location     Type
  7090 ;;                  1    wreg      void 
  7091 ;; Registers used:
  7092 ;;		None
  7093 ;; Tracked objects:
  7094 ;;		On entry : 0/0
  7095 ;;		On exit  : 0/0
  7096 ;;		Unchanged: 0/0
  7097 ;; Data sizes:     COMMON   BANK0   BANK1
  7098 ;;      Params:         0       0       0
  7099 ;;      Locals:         0       0       0
  7100 ;;      Temps:          0       0       0
  7101 ;;      Totals:         0       0       0
  7102 ;;Total ram usage:        0 bytes
  7103 ;; Hardware stack levels used:    1
  7104 ;; This function calls:
  7105 ;;		Nothing
  7106 ;; This function is called by:
  7107 ;;		_INTERRUPT_InterruptManager
  7108 ;; This function uses a non-reentrant model
  7109 ;;
  7110                           
  7111                           
  7112                           ;psect for function _ADC_ISR
  7113  06BA                     _ADC_ISR:	
  7114                           
  7115                           ;mcc_generated_files/adc.c: 143:     PIR1bits.ADIF = 0;
  7116                           
  7117                           ;incstack = 0
  7118                           ; Regs used in _ADC_ISR: []
  7119  06BA  0020               	movlb	0	; select bank0
  7120  06BB  1311               	bcf	17,6	;volatile
  7121  06BC  0008               	return
  7122  06BD                     __end_of_ADC_ISR:	
  7123                           
  7124                           	psect	text55
  7125  068B                     __ptext55:	
  7126 ;; *************** function _ADC_GetConversionResult *****************
  7127 ;; Defined at:
  7128 ;;		line 106 in file "mcc_generated_files/adc.c"
  7129 ;; Parameters:    Size  Location     Type
  7130 ;;		None
  7131 ;; Auto vars:     Size  Location     Type
  7132 ;;		None
  7133 ;; Return value:  Size  Location     Type
  7134 ;;                  2    0[COMMON] unsigned short 
  7135 ;; Registers used:
  7136 ;;		wreg
  7137 ;; Tracked objects:
  7138 ;;		On entry : 0/0
  7139 ;;		On exit  : 0/0
  7140 ;;		Unchanged: 0/0
  7141 ;; Data sizes:     COMMON   BANK0   BANK1
  7142 ;;      Params:         2       0       0
  7143 ;;      Locals:         0       0       0
  7144 ;;      Temps:          0       0       0
  7145 ;;      Totals:         2       0       0
  7146 ;;Total ram usage:        2 bytes
  7147 ;; Hardware stack levels used:    1
  7148 ;; This function calls:
  7149 ;;		Nothing
  7150 ;; This function is called by:
  7151 ;;		_INTERRUPT_InterruptManager
  7152 ;; This function uses a non-reentrant model
  7153 ;;
  7154                           
  7155                           
  7156                           ;psect for function _ADC_GetConversionResult
  7157  068B                     _ADC_GetConversionResult:	
  7158                           
  7159                           ;mcc_generated_files/adc.c: 109:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
  7160                           
  7161                           ;incstack = 0
  7162                           ; Regs used in _ADC_GetConversionResult: [wreg]
  7163  068B  0021               	movlb	1	; select bank1
  7164  068C  081C               	movf	28,w	;volatile
  7165  068D  00F1               	movwf	?_ADC_GetConversionResult+1
  7166  068E  081B               	movf	27,w	;volatile
  7167  068F  00F0               	movwf	?_ADC_GetConversionResult
  7168  0690  0008               	return
  7169  0691                     __end_of_ADC_GetConversionResult:	
  7170  007E                     btemp	set	126	;btemp
  7171  007E                     int$flags	set	126
  7172  007E                     wtemp0	set	126


Data Sizes:
    Strings     171
    Constant    0
    Data        0
    BSS         58
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      11
    BANK0            80     46      80
    BANK1            32      1      25

Pointer List with Targets:

    strncmp@_r	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_13(CODE[2]), STR_7(CODE[7]), STR_6(CODE[8]), STR_5(CODE[5]), 
		 -> STR_4(CODE[6]), STR_3(CODE[10]), STR_2(CODE[3]), STR_1(CODE[8]), 

    strncmp@r	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_13(CODE[2]), STR_7(CODE[7]), STR_6(CODE[8]), STR_5(CODE[5]), 
		 -> STR_4(CODE[6]), STR_3(CODE[10]), STR_2(CODE[3]), STR_1(CODE[8]), 

    strncmp@_l	PTR const unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), esp_read_data(BANK1[16]), 

    strncmp@l	PTR const unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), esp_read_data(BANK1[16]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_13(CODE[2]), STR_7(CODE[7]), STR_6(CODE[8]), STR_5(CODE[5]), 
		 -> STR_4(CODE[6]), STR_3(CODE[10]), STR_2(CODE[3]), STR_1(CODE[8]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_13(CODE[2]), STR_7(CODE[7]), STR_6(CODE[8]), STR_5(CODE[5]), 
		 -> STR_4(CODE[6]), STR_3(CODE[10]), STR_2(CODE[3]), STR_1(CODE[8]), 

    strchr@s	PTR const unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), esp_read_data(BANK1[16]), 

    sp__strchr	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), esp_read_data(BANK1[16]), 

    strstr@h	PTR const unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), esp_read_data(BANK1[16]), 

    strstr@n	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_13(CODE[2]), STR_7(CODE[7]), STR_6(CODE[8]), STR_5(CODE[5]), 
		 -> STR_4(CODE[6]), STR_3(CODE[10]), STR_2(CODE[3]), STR_1(CODE[8]), 

    ESP_Set_application_handler@applicationHandler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> ESP_default_application_handler(), process_message(), 

    ESP_write@pt	PTR unsigned char  size(2) Largest target is 7
		 -> STR_20(CODE[7]), STR_19(CODE[7]), read_analog@mess(BANK0[6]), STR_18(CODE[4]), 

    ESP_external_message_handler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> ESP_default_application_handler(), process_message(), Absolute function(), 

    ESP_process_rx_data@index	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), esp_read_data(BANK1[16]), 

    sp__strstr	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), esp_read_data(BANK1[16]), 

    ESP_process_message@aux	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), esp_read_data(BANK1[16]), 

    write@pt	PTR unsigned char  size(2) Largest target is 7
		 -> STR_20(CODE[7]), STR_19(CODE[7]), read_analog@mess(BANK0[6]), STR_18(CODE[4]), 
		 -> ESP_write@res(BANK0[1]), ESP_write@aux(BANK0[1]), 

    _puts@pt	PTR unsigned char  size(2) Largest target is 34
		 -> STR_22(CODE[3]), STR_21(CODE[3]), STR_17(CODE[3]), STR_16(CODE[3]), 
		 -> STR_15(CODE[2]), STR_14(CODE[12]), STR_12(CODE[20]), STR_11(CODE[14]), 
		 -> STR_10(CODE[34]), STR_9(CODE[14]), STR_8(CODE[5]), 

    IOCAF4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> _IOC_Ready(), IOCAF4_DefaultInterruptHandler(), 

    IOCAF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> _IOC_Ready(), IOCAF4_DefaultInterruptHandler(), Absolute function(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> _TMR1_Ready(), TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> _TMR1_Ready(), Absolute function(), TMR1_DefaultInterruptHandler(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Transmit_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Receive_ISR(), 


Critical Paths under _main in COMMON

    _logger_initialize->_ADC_SelectChannel
    _logger_initialize->_ESP_Set_application_handler
    _logger_initialize->_IOCAF4_SetInterruptHandler
    _logger_initialize->_TMR1_SetInterruptHandler
    _SYSTEM_Initialize->_EUSART_Initialize
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF4_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _ESP_write->_write
    _write->_EUSART_Write
    _ESP_initialize->_ESP_Set_application_handler
    __puts->_EUSART_Write
    _strstr->_strlen
    _strstr->_strncmp

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_ADC_GetConversionResult
    _TMR1_ISR->_TMR1_WriteTimer
    _IOCAF4_ISR->__IOC_Ready

Critical Paths under _main in BANK0

    _main->_ESP_message_handler
    _ESP_message_handler->_ESP_process_rx_data
    _ESP_process_rx_data->_process_message
    _process_message->_read_analog
    _toggle_format->_ESP_write
    _read_analog->_ESP_write
    _ESP_write->_ESP_wait_for
    _ESP_config->_ESP_wait_for
    _ESP_wait_for->_ESP_read
    _ESP_read->_ESP_process_message
    _ESP_process_message->_strstr
    _strstr->_strncmp

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   70697
                                              0 BANK1      1     1      0
                         _ESP_config
                     _ESP_initialize
                _ESP_message_handler
                 _EUSART_is_rx_ready
                  _SYSTEM_Initialize
                  _logger_initialize
                    _process_message
                        _read_analog
 ---------------------------------------------------------------------------------
 (1) _logger_initialize                                    1     1      0     544
                                              5 COMMON     1     1      0
                  _ADC_SelectChannel
        _ESP_Set_application_handler
         _IOCAF4_SetInterruptHandler
           _TMR1_SetInterruptHandler
                     _TMR1_StopTimer
 ---------------------------------------------------------------------------------
 (2) _ADC_SelectChannel                                    2     2      0      22
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     544
                     _ADC_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     174
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR1_SetInterruptHandler                             2     0      2     174
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     174
         _IOCAF4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _IOCAF4_SetInterruptHandler                           2     0      2     174
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     196
                                              5 COMMON     1     1      0
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2      98
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ESP_message_handler                                  6     6      0   30060
                                             43 BANK0      3     3      0
                _ESP_process_rx_data
                           _ESP_read
 ---------------------------------------------------------------------------------
 (2) _ESP_process_rx_data                                  4     4      0   27499
                                             39 BANK0      4     4      0
                   Absolute function *
    _ESP_default_application_handler *
                    _process_message *
                             _strstr
 ---------------------------------------------------------------------------------
 (1) _process_message                                      3     2      1   25150
                                             36 BANK0      3     2      1
                  _ADC_GetConversion
                          _ESP_write
                    _TMR1_StartTimer
                     _TMR1_StopTimer
                        _read_analog
                      _toggle_format
 ---------------------------------------------------------------------------------
 (2) _toggle_format                                        1     1      0    7342
                                             27 BANK0      1     1      0
                          _ESP_write
 ---------------------------------------------------------------------------------
 (1) _read_analog                                         13    13      0   10259
                                             27 BANK0      9     9      0
                       _ESP_wait_for
                          _ESP_write
 ---------------------------------------------------------------------------------
 (2) _ESP_write                                            8     5      3    7342
                                             19 BANK0      8     5      3
                       _ESP_wait_for
                            ___awdiv
                            ___awmod
                              __puts
                              _write
 ---------------------------------------------------------------------------------
 (3) _write                                                6     3      3    1074
                                              5 COMMON     4     1      3
                                              0 BANK0      2     2      0
                       _EUSART_Write
                 _EUSART_is_tx_ready
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     613
                                              3 COMMON     5     1      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     625
                                              3 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    4     2      2      22
                                              3 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (3) _ESP_default_application_handler                      1     0      1      53
                                             36 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ESP_initialize                                       0     0      0     174
        _ESP_Set_application_handler
 ---------------------------------------------------------------------------------
 (2) _ESP_Set_application_handler                          2     0      2     174
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ESP_config                                           2     2      0    3966
                                             19 BANK0      2     2      0
                       _ESP_wait_for
                        _EUSART_Read
                 _EUSART_is_rx_ready
                              __puts
 ---------------------------------------------------------------------------------
 (3) __puts                                                6     4      2    1164
                                              5 COMMON     3     1      2
                                              0 BANK0      3     3      0
                       _EUSART_Write
                 _EUSART_is_tx_ready
 ---------------------------------------------------------------------------------
 (4) _EUSART_is_tx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      44
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ESP_wait_for                                         3     3      0    2778
                                             16 BANK0      3     3      0
                           _ESP_read
 ---------------------------------------------------------------------------------
 (4) _ESP_read                                             2     2      0    2527
                                             14 BANK0      2     2      0
                _ESP_process_message
                        _EUSART_Read
 ---------------------------------------------------------------------------------
 (5) _EUSART_Read                                          2     2      0      24
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _ESP_process_message                                  2     2      0    2466
                                             12 BANK0      2     2      0
                             _strstr
 ---------------------------------------------------------------------------------
 (6) _strstr                                               8     6      2    2228
                                              4 BANK0      8     6      2
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (7) _strncmp                                             10     6      4     541
                                              3 COMMON     6     2      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (7) _strlen                                               6     4      2     166
                                              3 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (7) _strchr                                               3     1      2     197
                                              3 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                          1     1      0     240
                                              2 COMMON     1     1      0
                   Absolute function *
            _ADC_GetConversionResult
                            _ADC_ISR
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                    _PIN_MANAGER_IOC
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     240
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                    _TMR1_WriteTimer
                        __TMR1_Ready *
 ---------------------------------------------------------------------------------
 (13) __TMR1_Ready                                         0     0      0       0
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (14) _ADC_StartConversion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _TMR1_WriteTimer                                     2     0      2     240
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (13) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _PIN_MANAGER_IOC                                     0     0      0       0
                         _IOCAF4_ISR
 ---------------------------------------------------------------------------------
 (13) _IOCAF4_ISR                                          0     0      0       0
                   Absolute function *
     _IOCAF4_DefaultInterruptHandler *
                         __IOC_Ready *
 ---------------------------------------------------------------------------------
 (14) __IOC_Ready                                          1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (14) _IOCAF4_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART_Transmit_ISR                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _EUSART_Receive_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _ADC_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _ADC_GetConversionResult                             2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ESP_config
     _ESP_wait_for
       _ESP_read
         _ESP_process_message
           _strstr
             _strchr
             _strlen
             _strncmp
         _EUSART_Read
     _EUSART_Read
     _EUSART_is_rx_ready
     __puts
       _EUSART_Write
       _EUSART_is_tx_ready
   _ESP_initialize
     _ESP_Set_application_handler
   _ESP_message_handler
     _ESP_process_rx_data
       Absolute function(Fake) *
       _ESP_default_application_handler *
       _process_message *
         _ADC_GetConversion
         _ESP_write
           _ESP_wait_for
             _ESP_read
               _ESP_process_message
                 _strstr
                   _strchr
                   _strlen
                   _strncmp
               _EUSART_Read
           ___awdiv
           ___awmod
           __puts
             _EUSART_Write
             _EUSART_is_tx_ready
           _write
             _EUSART_Write
             _EUSART_is_tx_ready
         _TMR1_StartTimer
         _TMR1_StopTimer
         _read_analog
           _ESP_wait_for
             _ESP_read
               _ESP_process_message
                 _strstr
                   _strchr
                   _strlen
                   _strncmp
               _EUSART_Read
           _ESP_write
             _ESP_wait_for
               _ESP_read
                 _ESP_process_message
                   _strstr
                     _strchr
                     _strlen
                     _strncmp
                 _EUSART_Read
             ___awdiv
             ___awmod
             __puts
               _EUSART_Write
               _EUSART_is_tx_ready
             _write
               _EUSART_Write
               _EUSART_is_tx_ready
         _toggle_format
           _ESP_write
             _ESP_wait_for
               _ESP_read
                 _ESP_process_message
                   _strstr
                     _strchr
                     _strlen
                     _strncmp
                 _EUSART_Read
             ___awdiv
             ___awmod
             __puts
               _EUSART_Write
               _EUSART_is_tx_ready
             _write
               _EUSART_Write
               _EUSART_is_tx_ready
       _strstr *
         _strchr
         _strlen
         _strncmp
     _ESP_read
       _ESP_process_message
         _strstr
           _strchr
           _strlen
           _strncmp
       _EUSART_Read
   _EUSART_is_rx_ready
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCAF4_SetInterruptHandler
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _WDT_Initialize
   _logger_initialize
     _ADC_SelectChannel
     _ESP_Set_application_handler
     _IOCAF4_SetInterruptHandler
     _TMR1_SetInterruptHandler
     _TMR1_StopTimer
   _process_message
     _ADC_GetConversion
     _ESP_write
       _ESP_wait_for
         _ESP_read
           _ESP_process_message
             _strstr
               _strchr
               _strlen
               _strncmp
           _EUSART_Read
       ___awdiv
       ___awmod
       __puts
         _EUSART_Write
         _EUSART_is_tx_ready
       _write
         _EUSART_Write
         _EUSART_is_tx_ready
     _TMR1_StartTimer
     _TMR1_StopTimer
     _read_analog
       _ESP_wait_for
         _ESP_read
           _ESP_process_message
             _strstr
               _strchr
               _strlen
               _strncmp
           _EUSART_Read
       _ESP_write
         _ESP_wait_for
           _ESP_read
             _ESP_process_message
               _strstr
                 _strchr
                 _strlen
                 _strncmp
             _EUSART_Read
         ___awdiv
         ___awmod
         __puts
           _EUSART_Write
           _EUSART_is_tx_ready
         _write
           _EUSART_Write
           _EUSART_is_tx_ready
     _toggle_format
       _ESP_write
         _ESP_wait_for
           _ESP_read
             _ESP_process_message
               _strstr
                 _strchr
                 _strlen
                 _strncmp
             _EUSART_Read
         ___awdiv
         ___awmod
         __puts
           _EUSART_Write
           _EUSART_is_tx_ready
         _write
           _EUSART_Write
           _EUSART_is_tx_ready
   _read_analog
     _ESP_wait_for
       _ESP_read
         _ESP_process_message
           _strstr
             _strchr
             _strlen
             _strncmp
         _EUSART_Read
     _ESP_write
       _ESP_wait_for
         _ESP_read
           _ESP_process_message
             _strstr
               _strchr
               _strlen
               _strncmp
           _EUSART_Read
       ___awdiv
       ___awmod
       __puts
         _EUSART_Write
         _EUSART_is_tx_ready
       _write
         _EUSART_Write
         _EUSART_is_tx_ready

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _ADC_GetConversionResult *
   _ADC_ISR *
   _EUSART_Receive_ISR *
   _EUSART_Transmit_ISR *
   _PIN_MANAGER_IOC *
     _IOCAF4_ISR
       Absolute function(Fake) *
       _IOCAF4_DefaultInterruptHandler *
       __IOC_Ready *
   _TMR1_ISR *
     Absolute function(Fake) *
     _TMR1_DefaultInterruptHandler *
     _TMR1_WriteTimer *
     __TMR1_Ready *
       _ADC_StartConversion

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      74       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2E      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      1      19       8       78.1%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      74       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Sat Aug  4 23:46:24 2018

                ?_EUSART_SetRxInterruptHandler 0073                                    __CFG_CP$OFF 0000  
                                           l38 0558                                   ___awdiv@sign 0021  
                                          l211 060F                                            l159 0407  
                                          l560 022C                                            l459 036B  
                                          l563 0206                                            l566 0209  
                                          l479 0340                                   __CFG_CPD$OFF 0000  
                              _timer1ReloadVal 005A                                __end_of_ADC_ISR 06BD  
                                 ___awmod@sign 0021                                   __CFG_BORV$LO 0000  
                                          wreg 0009                                   __CFG_IESO$ON 0000  
                                 ?_EUSART_Read 0070                                   __CFG_LVP$OFF 0000  
                               ?_toggle_format 0070                                           l1132 058A  
                                         l2112 03FD                                           l2026 0499  
                                         l2126 041A                                           l3110 02C0  
                                         l3014 00A6                                           l3112 02C6  
                                         l3120 0328                                           l3060 01F7  
                                         l3052 01E1                                           l3204 0332  
                                         l3116 031F                                           l3124 032A  
                                         l3038 0495                                           l3046 046E  
                                         l3206 0215                                           l3054 01EC  
                                         l3118 0321                                           l3142 04DF  
                                         l3058 01F5                                           l3074 020C  
                                         l3146 04E4                                           l3138 04DA  
                                         l3068 0202                                           l2800 00F8  
                                         l1960 04BA                                           l2752 0177  
                                         l2744 0159                                           l2760 0284  
                                         l2832 0134                                           l2824 0125  
                                         l2816 0116                                           l2808 0107  
                                         l1962 04C6                                           l2738 014D  
                                         l2772 02B1                                           l2844 0301  
                                         l2908 038B                                           l2924 01A4  
                                         l2766 0295                                           l2854 030F  
                                         l2950 01DB                                           l2942 01CA  
                                         l2934 01AC                                           l2918 0199  
                                         l2768 02A8                                           l2792 00E9  
                                         l2784 00DA                                           l2872 0342  
                                         l2936 01B8                                           l2866 0351  
                                         l2946 01D3                                           l2962 0238  
                                         l2882 04F2                                           l2980 025D  
                                         l2876 04F6                                           l1998 0593  
                                         l2974 0245                                           l2966 023F  
                                         l2976 0251                                           l2984 0266  
                                         l2898 037E                                           l2988 026E  
                                         STR_1 062F                                           STR_2 0634  
                                         STR_3 05FF                                           STR_4 065B  
                                         STR_5 0696                                           STR_6 0637  
                                         STR_7 064D                                           STR_8 0691  
                                         STR_9 05BD                                           _LATA 010C  
                                         u2055 01AF                                           _LATC 010E  
                                         u2307 0553                                           u2075 01B9  
                                         u2155 0248                                           u2317 02B9  
                                         u2085 01C3                                           u2095 01CB  
                                         u2175 0257                                           u2185 025E  
                                         i1l81 0033                                           i1l74 000B  
                                         i1l77 0015                                           i1l86 003E  
                                         i1l79 0027                                           _PLLR 04D6  
                                         _WPUA 020C                                           _WPUC 020E  
                                 __CFG_WRT$OFF 0000                                  __CFG_FCMEN$ON 0000  
                                         _main 04D4                                           fsr0h 0005  
                                         fsr1h 0007                                           indf0 0000  
                                         fsr0l 0004                                           indf1 0001  
                                         fsr1l 0006                                           btemp 007E  
                                  ?_ESP_config 0070                                  __CFG_BOREN$ON 0000  
                                   __IOC_Ready 0613                                           start 0040  
                   ??_TMR1_SetInterruptHandler 0075                                  __CFG_MCLRE$ON 0000  
                          __end_of__TMR1_Ready 068B                             _ESP_wait_exception 0068  
                                __CFG_PLLEN$ON 0000                                  ?_EUSART_Write 0070  
               __size_of_OSCILLATOR_Initialize 000A                            __size_of_IOCAF4_ISR 000D  
                __end_of_OSCILLATOR_Initialize 0613                             __size_of_ESP_write 0078  
                                        ?_main 0070                                __end_of___awdiv 01E0  
                                        STR_10 03DA                                          STR_11 05CB  
                                        STR_20 063F                                          STR_12 0575  
                                        STR_13 06BF                                          STR_21 06A8  
                                        STR_22 06AB                                          STR_14 05F3  
                                        STR_15 06BD                                          STR_16 03F9  
                                        STR_17 03F9                                  __CFG_WDTE$OFF 0000  
                                        STR_18 06A0                                          STR_19 0646  
                              __end_of___awmod 0273                                _TMR1_StartTimer 06B1  
                              ___awdiv@divisor 0073                                          _T1CON 0018  
                                        i1l165 0528                                ___awdiv@counter 0020  
                 ?_ESP_Set_application_handler 0073                                          _RCREG 0199  
                                        _RCSTA 019D                               __end_of_ESP_read 0319  
                                        _TMR1H 0017                                          _TMR1L 0016  
                                        _TRISA 008C                                          _TRISC 008E  
                                        _TXREG 019A                                          _TXSTA 019E  
             __size_of_ADC_GetConversionResult 0006                                   ?_read_analog 0070  
                             __end_of_TMR1_ISR 05AE                        __end_of_PIN_MANAGER_IOC 06A0  
                                        __puts 0341                                 _WDT_Initialize 06A4  
                                        _write 04F1                        __end_of_TMR1_Initialize 0575  
                                        pclath 000A                                          status 0003  
                                        wtemp0 007E                     __size_of_logger_initialize 001F  
                              __end_of_strncmp 018E                                _TMR1_WriteTimer 05AE  
                              __initialization 0041                                   __end_of_main 04F1  
                               ??_EUSART_Write 0073                                      ??_ADC_ISR 0070  
                  ?_INTERRUPT_InterruptManager 0070                 ??_EUSART_SetRxInterruptHandler 0075  
                                       ??_main 00B8                            __size_of_ESP_config 0037  
                      _IOCAF4_InterruptHandler 006E                         __end_of_WDT_Initialize 06A8  
                ??_ESP_Set_application_handler 0075                                ??_toggle_format 003B  
                                       ?__puts 0075                                         _ADCON0 009D  
                                       _ADCON1 009E                                         _ADRESH 009C  
                                       _ADRESL 009B                               ___awdiv@dividend 0075  
                                       _APFCON 011D                                         _ANSELA 018C  
                                       _ANSELC 018E                     __end_of_EUSART_is_rx_ready 06B7  
                                       _BORCON 0116                                         _T1GCON 0019  
                                       ?_write 0075                        TMR1_WriteTimer@timerVal 0070  
                                       i1l2510 05B8                                         i1l2518 05F0  
                                       i1l2568 0530                     __end_of_EUSART_is_tx_ready 06C3  
                                       _OSCCON 0099                                         _SPBRGH 019C  
                                       _SPBRGL 019B                                    __TMR1_Ready 0685  
                                       _WDTCON 0097                              __end_of_ESP_write 00CA  
                                  ?__IOC_Ready 0070                                 __CFG_PWRTE$OFF 0000  
                             ??_ESP_initialize 0075           __end_of_TMR1_DefaultInterruptHandler 06C5  
        __size_of_TMR1_DefaultInterruptHandler 0001                                  _esp_read_data 00A8  
                 _TMR1_DefaultInterruptHandler 06C4                        __end_of_TMR1_StartTimer 06B4  
                                    ??___awdiv 0077                                 __CFG_STVREN$ON 0000  
                                    ??___awmod 0077                            _EUSART_Transmit_ISR 050E  
                             ___awdiv@quotient 0022                                ___awmod@divisor 0073  
                              ___awmod@counter 0020                                         _strchr 0589  
                                       _strlen 04B6                                         _strstr 0273  
                              ?_WDT_Initialize 0070                       ADC_GetConversion@channel 0076  
                     ESP_process_rx_data@index 0049     IOCAF4_SetInterruptHandler@InterruptHandler 0073  
     TMR1_SetInterruptHandler@InterruptHandler 0073                               ?_PIN_MANAGER_IOC 0070  
                                       write@i 0078                        __end_of_TMR1_WriteTimer 05BD  
                                    ??_strncmp 0077                                   ??_IOCAF4_ISR 0071  
                         ?_EUSART_Transmit_ISR 0070                               ?_TMR1_Initialize 0070  
                         __size_of_EUSART_Read 001E                              _SYSTEM_Initialize 0654  
                      __end_of__initialization 004F                                  ?_ESP_wait_for 0070  
                           read_analog@adc_val 0042                             ?_SYSTEM_Initialize 0070  
         __size_of_ESP_Set_application_handler 0006           __end_of_EUSART_SetTxInterruptHandler 0679  
        __size_of_EUSART_SetTxInterruptHandler 0006                   _EUSART_SetTxInterruptHandler 0673  
                                    ?_ESP_read 0070                   __size_of_ADC_StartConversion 0003  
                                  ESP_read@ret 002F                                 __pcstackCOMMON 0070  
                          ??_SYSTEM_Initialize 0076                                      ?_TMR1_ISR 0070  
                ?_TMR1_DefaultInterruptHandler 0070                                  __end_of__puts 0369  
       __end_of_IOCAF4_DefaultInterruptHandler 06C6        __size_of_IOCAF4_DefaultInterruptHandler 0001  
               _IOCAF4_DefaultInterruptHandler 06C5                                  __end_of_write 050E  
                           __end_of_IOCAF4_ISR 05F3                        _ADC_GetConversionResult 068B  
                               _OPTION_REGbits 0095                            __size_of__IOC_Ready 000A  
                     __size_of_process_message 004D                                    ESP_write@pt 0033  
                                      ??__puts 0020                           __size_of_read_analog 001E  
                    __end_of_SYSTEM_Initialize 065B                          ??_EUSART_Transmit_ISR 0070  
                                      ??_write 0020                                     __pbssBANK0 004E  
                                   __pbssBANK1 00A0                                 ??_ESP_wait_for 0030  
                         __end_of_EUSART_Write 041D                                   ??_ESP_config 0033  
                  __size_of_EUSART_Receive_ISR 001B                                     ??_ESP_read 002E  
                                   __pmaintext 04D4                  ?_EUSART_SetTxInterruptHandler 0073  
             _EUSART_TxDefaultInterruptHandler 0060                   __size_of_ESP_process_message 006C  
                 __size_of_ESP_message_handler 0028                               ?_TMR1_StartTimer 0070  
                                   ??_TMR1_ISR 0072                                     __pintentry 0004  
                 __size_of_ESP_process_rx_data 0025                                        _ADC_ISR 06BA  
                                      _BAUDCON 019F                        __size_of_ADC_Initialize 0009  
                                      ?_strchr 0073                                        ?_strlen 0073  
                      __size_of_TMR1_StopTimer 0003                                        ?_strstr 0024  
                                _eusartRxCount 0069                             __end_of_ESP_config 02EA  
                                      _OSCTUNE 0098                               ?_TMR1_WriteTimer 0070  
                                    _ADC_value 005C                                      _ADC_state 006D  
                                      ___awdiv 018E                                        ___awmod 022D  
                    ??_ADC_GetConversionResult 0072                                        __ptext1 043D  
                                      __ptext2 05D9                                        __ptext3 0654  
                                      __ptext4 06A4                                        __ptext5 055F  
                                      __ptext6 0667                                        __ptext7 041D  
                                      __ptext8 066D                                        __ptext9 0609  
               ??_TMR1_DefaultInterruptHandler 0070                                __size_of_strchr 0013  
                              __size_of_strlen 001E                                      _T1CONbits 0018  
                       ESP_process_message@aux 002D                                __size_of_strstr 0040  
                        _OSCILLATOR_Initialize 0609                               ___awmod@dividend 0075  
            __size_of_TMR1_SetInterruptHandler 0006                       ??_PIN_MANAGER_Initialize 0075  
                    ?_TMR1_SetInterruptHandler 0073                                      _IOCAFbits 0393  
                                    _IOCANbits 0392                                      _IOCAPbits 0391  
                   __size_of_SYSTEM_Initialize 0007                                        clrloop0 0662  
                                      _strncmp 0136                         ESP_message_handler@ret 004D  
                         end_of_initialization 004F                                   ?__TMR1_Ready 0070  
                            ??_process_message 0045                                   ??__IOC_Ready 0070  
                            _EUSART_Initialize 0390                                      _IOC_value 0062  
                                    _IOC_state 0063                             ?_EUSART_Initialize 0070  
                                    _ESP_write 0052                                      _RCSTAbits 019D  
                           _EUSART_is_rx_ready 06B4                             _EUSART_is_tx_ready 06C1  
                                      strchr@c 0073                                        strchr@s 0075  
                                      strlen@a 0077                                        strlen@s 0073  
                          ??_EUSART_Initialize 0075                                        write@pt 0075  
                             ??_WDT_Initialize 0073                 ??_EUSART_SetTxInterruptHandler 0075  
                         __end_of_ESP_wait_for 0390                                        strstr@h 002B  
                                      strstr@n 0024                                      _PORTAbits 000C  
                          ?_EUSART_is_rx_ready 0070                            ?_EUSART_is_tx_ready 0070  
                             __CFG_FOSC$INTOSC 0000                             __end_of__IOC_Ready 061D  
                        __size_of_EUSART_Write 0021                            _ADC_StartConversion 06B7  
                 ??_IOCAF4_SetInterruptHandler 0075                          __end_of_toggle_format 047A  
                    __end_of_EUSART_Initialize 03B5                           ??_EUSART_is_rx_ready 0073  
                         ??_EUSART_is_tx_ready 0073                                      _TXSTAbits 019E  
                                   ?_ESP_write 0033                           ?_ADC_StartConversion 0070  
                            __size_of_ESP_read 002F                   _ESP_external_message_handler 0056  
ESP_Set_application_handler@applicationHandler 0073                                   _EUSART_Write 03FC  
                            __size_of_TMR1_ISR 0012                                 _ADC_Initialize 061D  
          __size_of_IOCAF4_SetInterruptHandler 0006                                 _TMR1_StopTimer 06AE  
                       ?_OSCILLATOR_Initialize 0070            __end_of_ESP_Set_application_handler 0685  
                  _ESP_Set_application_handler 067F                         ESP_process_rx_data@aux 004A  
                               __end_of_strchr 059C                                 __end_of_strlen 04D4  
                               __end_of_strstr 02B3                            start_initialization 0041  
              __size_of_PIN_MANAGER_Initialize 0020                                  ??_EUSART_Read 0073  
                          _ESP_process_message 00CA                            _ESP_message_handler 0319  
 EUSART_SetRxInterruptHandler@interruptHandler 0073   EUSART_SetTxInterruptHandler@interruptHandler 0073  
                          _ESP_process_rx_data 03B5                       __size_of_PIN_MANAGER_IOC 0005  
                              ESP_wait_for@ret 0032                          ??_ADC_StartConversion 0070  
                     __size_of_TMR1_Initialize 0016                           ?_ESP_process_message 0070  
                         ?_ESP_message_handler 0070                                   ESP_write@aux 003A  
                                 ESP_write@res 0039                         __end_of_ADC_Initialize 0626  
                       __end_of_TMR1_StopTimer 06B1                           ?_ESP_process_rx_data 0070  
                                     ?_ADC_ISR 0070                                       ??_strchr 0075  
                                     ??_strlen 0075                        __size_of_ESP_initialize 0009  
                                     ??_strstr 0026                    __end_of_EUSART_Transmit_ISR 052B  
                                ??_read_analog 003B                                    __pbssCOMMON 0079  
                                    ___latbits 0000        __end_of_ESP_default_application_handler 06C4  
     __size_of_ESP_default_application_handler 0001               ?_ESP_default_application_handler 0044  
            ??_ESP_default_application_handler 0079                _ESP_default_application_handler 06C3  
                                __pcstackBANK0 0020                                  __pcstackBANK1 00B8  
                   __end_of_EUSART_Receive_ISR 0546                     __size_of_EUSART_Initialize 0025  
             _EUSART_RxDefaultInterruptHandler 005E                            __end_of_EUSART_Read 04B6  
                                    __pnvBANK0 006E                                read_analog@mess 003C  
                         __size_of__TMR1_Ready 0006                         _PIN_MANAGER_Initialize 041D  
                                  ??_ESP_write 0036                          ??_ESP_process_message 002C  
                         EUSART_Read@readValue 0074                          ??_ESP_message_handler 004B  
                        __size_of_ESP_wait_for 0027                              _ADC_SelectChannel 05D9  
             __end_of_TMR1_SetInterruptHandler 066D                                       ?___awdiv 0073  
                                     ?___awmod 0073                          ??_ESP_process_rx_data 0047  
                              ?_ADC_Initialize 0070                                   _eusartRxHead 006B  
                              ?_TMR1_StopTimer 0070                             ?_ADC_SelectChannel 0070  
                                 _eusartTxHead 007A                                   _eusartRxTail 006A  
                                 _eusartTxTail 006C                   ??_INTERRUPT_InterruptManager 0072  
                      _eusartTxBufferRemaining 0079                       __size_of_TMR1_StartTimer 0003  
                          ??_ADC_SelectChannel 0073                                _process_message 01E0  
           __end_of_IOCAF4_SetInterruptHandler 0673                     _IOCAF4_SetInterruptHandler 066D  
                               __size_of__puts 0028                                       ?_strncmp 0073  
                               __size_of_write 001D                            __end_of_read_analog 0498  
                               _eusartRxBuffer 00A0                                 _eusartTxBuffer 004E  
                                 _ESP_wait_for 0369                                       _LATAbits 010C  
                                    clear_ram0 0661                                    __puts@index 0077  
                                     _PIE1bits 0091                      __end_of_ADC_SelectChannel 05E6  
                     __size_of_TMR1_WriteTimer 000F            __size_of_INTERRUPT_InterruptManager 003C  
                                     _ESP_read 02EA                                    write@lenght 0077  
                                     _PIR1bits 0011                                       _TMR1_ISR 059C  
                            ??_PIN_MANAGER_IOC 0071                              ??_TMR1_Initialize 0075  
                             __size_of_ADC_ISR 0003                                     _ADCON0bits 009D  
                     ADC_SelectChannel@channel 0074                                    _EUSART_Read 0498  
                                  _esp_channel 0066                       ?_ADC_GetConversionResult 0070  
                            _ADC_GetConversion 0546                        ??_OSCILLATOR_Initialize 0073  
                           ?_ADC_GetConversion 0073                               __size_of___awdiv 0052  
                             __size_of___awmod 0046                        __end_of_process_message 022D  
                     _TMR1_SetInterruptHandler 0667                                 _ESP_initialize 0626  
                        _TMR1_InterruptHandler 0058                            ??_ADC_GetConversion 0075  
                                  _read_analog 047A                            _esp_read_data_index 0067  
                                     __ptext10 0390                                       __ptext11 0673  
                                     __ptext20 0052                                       __ptext12 0679  
                                     __ptext21 04F1                                       __ptext13 061D  
                                   _T1GCONbits 0019                                       __ptext30 0341  
                                     __ptext22 022D                                       __ptext14 0319  
                                     __ptext31 06C1                                       __ptext23 018E  
                                     __ptext15 03B5                                       __ptext40 04B6  
                                     __ptext32 03FC                                       __ptext24 06AE  
                                     __ptext16 06C3                                       __ptext41 0589  
                                     __ptext33 06B4                                       __ptext25 06B1  
                                     __ptext17 01E0                                       __ptext50 06C5  
                                     __ptext34 0369                                       __ptext26 0546  
                                     __ptext18 045C                                       __ptext51 0613  
                                     __ptext43 059C                                       __ptext35 02EA  
                                     __ptext27 0626                                       __ptext19 047A  
                                     __ptext52 050E                                       __ptext44 06C4  
                                     __ptext36 0498                                       __ptext28 067F  
                                     __ptext53 052B                                       __ptext45 0685  
                                     __ptext37 00CA                                       __ptext29 02B3  
                                     __ptext54 06BA                                       __ptext46 06B7  
                                     __ptext38 0273                                       __ptext55 068B  
                                     __ptext47 05AE                                       __ptext39 0136  
                                     __ptext48 069B                                       __ptext49 05E6  
                                     __puts@pt 0075                         process_message@message 0044  
                            ??_TMR1_StartTimer 0073                                     _IOCAF4_ISR 05E6  
                             __size_of_strncmp 0058                                 _message_format 0065  
                  __size_of_EUSART_is_rx_ready 0003                                  __size_of_main 001D  
                              ESP_write@length 0035                    __size_of_EUSART_is_tx_ready 0002  
                    __end_of_ADC_GetConversion 055F                     __size_of_ADC_SelectChannel 000D  
                                     int$flags 007E                         __size_of_toggle_format 001E  
                       __end_of_ESP_initialize 062F             __end_of_INTERRUPT_InterruptManager 0040  
                   _INTERRUPT_InterruptManager 0004                              ??_TMR1_WriteTimer 0072  
                                   _INTCONbits 000B                                 __pstringtext10 0646  
                               __pstringtext11 064D                                 __pstringtext20 0000  
                               __pstringtext12 065B                                 __pstringtext13 0691  
                               __pstringtext14 0696                                 __pstringtext15 06A0  
                               __pstringtext16 06A8                                 __pstringtext17 06AB  
                               __pstringtext18 06BD                                 __pstringtext19 06BF  
          ESP_default_application_handler@data 0044                        __size_of_WDT_Initialize 0004  
                                     intlevel1 0000                    __end_of_ADC_StartConversion 06BA  
                      ?_PIN_MANAGER_Initialize 0070                __end_of_ADC_GetConversionResult 0691  
                            __CFG_CLKOUTEN$OFF 0000                                     _ESP_config 02B3  
                                    strncmp@_l 0020                                      strncmp@_r 0073  
                             ??_ADC_Initialize 0073           __end_of_EUSART_SetRxInterruptHandler 067F  
        __size_of_EUSART_SetRxInterruptHandler 0006                   _EUSART_SetRxInterruptHandler 0679  
                            _logger_initialize 043D                               ??_TMR1_StopTimer 0073  
                           ?_logger_initialize 0070                             _EUSART_Receive_ISR 052B  
                              ?_ESP_initialize 0070                               ?_process_message 0044  
                                __pstringtext1 03DA                                  __pstringtext2 0575  
                                __pstringtext3 05BD                                  __pstringtext4 05CB  
                                __pstringtext5 05F3                                  __pstringtext6 05FF  
                                __pstringtext7 062F                                  __pstringtext8 0637  
                                __pstringtext9 063F                            ??_logger_initialize 0075  
                          ?_EUSART_Receive_ISR 0070                                       strncmp@l 0023  
                                     strncmp@n 0075                                       strncmp@r 0021  
                         ESP_wait_for@esp_mess 0031                    ?_IOCAF4_SetInterruptHandler 0073  
                                     strstr@nl 0029                                  _toggle_format 045C  
                                  ?_IOCAF4_ISR 0070                             EUSART_Write@txData 0074  
                 __size_of_EUSART_Transmit_ISR 001D                                     _TMR1_state 0064  
               __end_of_PIN_MANAGER_Initialize 043D                                  ??__TMR1_Ready 0070  
             ??_IOCAF4_DefaultInterruptHandler 0070                ?_IOCAF4_DefaultInterruptHandler 0070  
                  __end_of_ESP_process_message 0136                    __end_of_ESP_message_handler 0341  
                              _PIN_MANAGER_IOC 069B                      __end_of_logger_initialize 045C  
                         ??_EUSART_Receive_ISR 0070                     __size_of_ADC_GetConversion 0019  
                  __end_of_ESP_process_rx_data 03DA                                _TMR1_Initialize 055F  
