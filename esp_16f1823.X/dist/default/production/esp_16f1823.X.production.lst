

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Mon Aug  6 21:44:30 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16F1823
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	stringtext13,global,class=STRCODE,delta=2
    18                           	psect	stringtext14,global,class=STRCODE,delta=2
    19                           	psect	stringtext15,global,class=STRCODE,delta=2
    20                           	psect	stringtext16,global,class=STRCODE,delta=2
    21                           	psect	stringtext17,global,class=STRCODE,delta=2
    22                           	psect	cinit,global,class=CODE,merge=1,delta=2
    23                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    24                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    25                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    26                           	psect	clrtext,global,class=CODE,delta=2
    27                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    28                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    29                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    30                           	psect	text1,local,class=CODE,merge=1,delta=2
    31                           	psect	text2,local,class=CODE,merge=1,delta=2
    32                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text6,local,class=CODE,merge=1,delta=2
    36                           	psect	text7,local,class=CODE,merge=1,delta=2
    37                           	psect	text8,local,class=CODE,merge=1,delta=2
    38                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text11,local,class=CODE,merge=1,delta=2
    41                           	psect	text12,local,class=CODE,merge=1,delta=2
    42                           	psect	text13,local,class=CODE,merge=1,delta=2
    43                           	psect	text14,local,class=CODE,merge=1,delta=2
    44                           	psect	text15,local,class=CODE,merge=1,delta=2
    45                           	psect	text16,local,class=CODE,merge=1,delta=2
    46                           	psect	text17,local,class=CODE,merge=1,delta=2
    47                           	psect	text18,local,class=CODE,merge=1,delta=2
    48                           	psect	text19,local,class=CODE,merge=1,delta=2
    49                           	psect	text20,local,class=CODE,merge=1,delta=2
    50                           	psect	text21,local,class=CODE,merge=1,delta=2
    51                           	psect	text22,local,class=CODE,merge=1,delta=2
    52                           	psect	text23,local,class=CODE,merge=1,delta=2
    53                           	psect	text24,local,class=CODE,merge=1,delta=2
    54                           	psect	text25,local,class=CODE,merge=1,delta=2
    55                           	psect	text26,local,class=CODE,merge=1,delta=2
    56                           	psect	text27,local,class=CODE,merge=1,delta=2
    57                           	psect	text28,local,class=CODE,merge=1,delta=2
    58                           	psect	text29,local,class=CODE,merge=1,delta=2
    59                           	psect	text30,local,class=CODE,merge=1,delta=2
    60                           	psect	text31,local,class=CODE,merge=1,delta=2
    61                           	psect	text32,local,class=CODE,merge=1,delta=2
    62                           	psect	text33,local,class=CODE,merge=1,delta=2
    63                           	psect	text34,local,class=CODE,merge=1,delta=2
    64                           	psect	text35,local,class=CODE,merge=1,delta=2
    65                           	psect	text36,local,class=CODE,merge=1,delta=2
    66                           	psect	text37,local,class=CODE,merge=1,delta=2
    67                           	psect	text38,local,class=CODE,merge=1,delta=2
    68                           	psect	text39,local,class=CODE,merge=1,delta=2
    69                           	psect	text40,local,class=CODE,merge=1,delta=2
    70                           	psect	text41,local,class=CODE,merge=1,delta=2
    71                           	psect	text42,local,class=CODE,merge=1,delta=2
    72                           	psect	text43,local,class=CODE,merge=1,delta=2,group=2
    73                           	psect	text44,local,class=CODE,merge=1,delta=2,group=2
    74                           	psect	text45,local,class=CODE,merge=1,delta=2,group=2
    75                           	psect	text46,local,class=CODE,merge=1,delta=2,group=2
    76                           	psect	intentry,global,class=CODE,delta=2
    77                           	psect	text48,local,class=CODE,merge=1,delta=2
    78                           	psect	text49,local,class=CODE,merge=1,delta=2
    79                           	psect	text50,local,class=CODE,merge=1,delta=2
    80                           	psect	text51,local,class=CODE,merge=1,delta=2
    81                           	psect	text52,local,class=CODE,merge=1,delta=2
    82                           	psect	text53,local,class=CODE,merge=1,delta=2
    83                           	psect	text54,local,class=CODE,merge=1,delta=2
    84                           	psect	text55,local,class=CODE,merge=1,delta=2
    85                           	psect	text56,local,class=CODE,merge=1,delta=2
    86                           	psect	text57,local,class=CODE,merge=1,delta=2
    87                           	psect	text58,local,class=CODE,merge=1,delta=2
    88                           	psect	text59,local,class=CODE,merge=1,delta=2
    89                           	psect	text60,local,class=CODE,merge=1,delta=2
    90                           	dabs	1,0x7E,2
    91  0000                     
    92                           ; Version 2.00
    93                           ; Generated 27/05/2018 GMT
    94                           ; 
    95                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    96                           ; All rights reserved.
    97                           ; 
    98                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    99                           ; 
   100                           ; Redistribution and use in source and binary forms, with or without modification, are
   101                           ; permitted provided that the following conditions are met:
   102                           ; 
   103                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   104                           ;        conditions and the following disclaimer.
   105                           ; 
   106                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   107                           ;        of conditions and the following disclaimer in the documentation and/or other
   108                           ;        materials provided with the distribution.
   109                           ; 
   110                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   111                           ;        software without specific prior written permission.
   112                           ; 
   113                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   114                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   115                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   116                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   117                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   118                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   119                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   120                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   121                           ; 
   122                           ; 
   123                           ; Code-generator required, PIC16F1823 Definitions
   124                           ; 
   125                           ; SFR Addresses
   126  0000                     	;# 
   127  0001                     	;# 
   128  0002                     	;# 
   129  0003                     	;# 
   130  0004                     	;# 
   131  0005                     	;# 
   132  0006                     	;# 
   133  0007                     	;# 
   134  0008                     	;# 
   135  0009                     	;# 
   136  000A                     	;# 
   137  000B                     	;# 
   138  000C                     	;# 
   139  000E                     	;# 
   140  0011                     	;# 
   141  0012                     	;# 
   142  0015                     	;# 
   143  0016                     	;# 
   144  0016                     	;# 
   145  0017                     	;# 
   146  0018                     	;# 
   147  0019                     	;# 
   148  001A                     	;# 
   149  001B                     	;# 
   150  001C                     	;# 
   151  001E                     	;# 
   152  001F                     	;# 
   153  008C                     	;# 
   154  008E                     	;# 
   155  0091                     	;# 
   156  0092                     	;# 
   157  0095                     	;# 
   158  0096                     	;# 
   159  0097                     	;# 
   160  0098                     	;# 
   161  0099                     	;# 
   162  009A                     	;# 
   163  009B                     	;# 
   164  009B                     	;# 
   165  009C                     	;# 
   166  009D                     	;# 
   167  009E                     	;# 
   168  010C                     	;# 
   169  010E                     	;# 
   170  0111                     	;# 
   171  0112                     	;# 
   172  0113                     	;# 
   173  0114                     	;# 
   174  0115                     	;# 
   175  0116                     	;# 
   176  0117                     	;# 
   177  0118                     	;# 
   178  0119                     	;# 
   179  011A                     	;# 
   180  011B                     	;# 
   181  011D                     	;# 
   182  011D                     	;# 
   183  018C                     	;# 
   184  018E                     	;# 
   185  0191                     	;# 
   186  0191                     	;# 
   187  0192                     	;# 
   188  0193                     	;# 
   189  0193                     	;# 
   190  0193                     	;# 
   191  0194                     	;# 
   192  0195                     	;# 
   193  0196                     	;# 
   194  0199                     	;# 
   195  019A                     	;# 
   196  019B                     	;# 
   197  019B                     	;# 
   198  019B                     	;# 
   199  019B                     	;# 
   200  019C                     	;# 
   201  019C                     	;# 
   202  019D                     	;# 
   203  019E                     	;# 
   204  019F                     	;# 
   205  020C                     	;# 
   206  020E                     	;# 
   207  0211                     	;# 
   208  0211                     	;# 
   209  0212                     	;# 
   210  0212                     	;# 
   211  0213                     	;# 
   212  0213                     	;# 
   213  0214                     	;# 
   214  0214                     	;# 
   215  0215                     	;# 
   216  0215                     	;# 
   217  0215                     	;# 
   218  0216                     	;# 
   219  0216                     	;# 
   220  0217                     	;# 
   221  0217                     	;# 
   222  0291                     	;# 
   223  0291                     	;# 
   224  0292                     	;# 
   225  0293                     	;# 
   226  0294                     	;# 
   227  0295                     	;# 
   228  0295                     	;# 
   229  0296                     	;# 
   230  0391                     	;# 
   231  0392                     	;# 
   232  0393                     	;# 
   233  039A                     	;# 
   234  039C                     	;# 
   235  039D                     	;# 
   236  039E                     	;# 
   237  039F                     	;# 
   238  0FE4                     	;# 
   239  0FE5                     	;# 
   240  0FE6                     	;# 
   241  0FE7                     	;# 
   242  0FE8                     	;# 
   243  0FE9                     	;# 
   244  0FEA                     	;# 
   245  0FEB                     	;# 
   246  0FED                     	;# 
   247  0FEE                     	;# 
   248  0FEF                     	;# 
   249  0000                     	;# 
   250  0001                     	;# 
   251  0002                     	;# 
   252  0003                     	;# 
   253  0004                     	;# 
   254  0005                     	;# 
   255  0006                     	;# 
   256  0007                     	;# 
   257  0008                     	;# 
   258  0009                     	;# 
   259  000A                     	;# 
   260  000B                     	;# 
   261  000C                     	;# 
   262  000E                     	;# 
   263  0011                     	;# 
   264  0012                     	;# 
   265  0015                     	;# 
   266  0016                     	;# 
   267  0016                     	;# 
   268  0017                     	;# 
   269  0018                     	;# 
   270  0019                     	;# 
   271  001A                     	;# 
   272  001B                     	;# 
   273  001C                     	;# 
   274  001E                     	;# 
   275  001F                     	;# 
   276  008C                     	;# 
   277  008E                     	;# 
   278  0091                     	;# 
   279  0092                     	;# 
   280  0095                     	;# 
   281  0096                     	;# 
   282  0097                     	;# 
   283  0098                     	;# 
   284  0099                     	;# 
   285  009A                     	;# 
   286  009B                     	;# 
   287  009B                     	;# 
   288  009C                     	;# 
   289  009D                     	;# 
   290  009E                     	;# 
   291  010C                     	;# 
   292  010E                     	;# 
   293  0111                     	;# 
   294  0112                     	;# 
   295  0113                     	;# 
   296  0114                     	;# 
   297  0115                     	;# 
   298  0116                     	;# 
   299  0117                     	;# 
   300  0118                     	;# 
   301  0119                     	;# 
   302  011A                     	;# 
   303  011B                     	;# 
   304  011D                     	;# 
   305  011D                     	;# 
   306  018C                     	;# 
   307  018E                     	;# 
   308  0191                     	;# 
   309  0191                     	;# 
   310  0192                     	;# 
   311  0193                     	;# 
   312  0193                     	;# 
   313  0193                     	;# 
   314  0194                     	;# 
   315  0195                     	;# 
   316  0196                     	;# 
   317  0199                     	;# 
   318  019A                     	;# 
   319  019B                     	;# 
   320  019B                     	;# 
   321  019B                     	;# 
   322  019B                     	;# 
   323  019C                     	;# 
   324  019C                     	;# 
   325  019D                     	;# 
   326  019E                     	;# 
   327  019F                     	;# 
   328  020C                     	;# 
   329  020E                     	;# 
   330  0211                     	;# 
   331  0211                     	;# 
   332  0212                     	;# 
   333  0212                     	;# 
   334  0213                     	;# 
   335  0213                     	;# 
   336  0214                     	;# 
   337  0214                     	;# 
   338  0215                     	;# 
   339  0215                     	;# 
   340  0215                     	;# 
   341  0216                     	;# 
   342  0216                     	;# 
   343  0217                     	;# 
   344  0217                     	;# 
   345  0291                     	;# 
   346  0291                     	;# 
   347  0292                     	;# 
   348  0293                     	;# 
   349  0294                     	;# 
   350  0295                     	;# 
   351  0295                     	;# 
   352  0296                     	;# 
   353  0391                     	;# 
   354  0392                     	;# 
   355  0393                     	;# 
   356  039A                     	;# 
   357  039C                     	;# 
   358  039D                     	;# 
   359  039E                     	;# 
   360  039F                     	;# 
   361  0FE4                     	;# 
   362  0FE5                     	;# 
   363  0FE6                     	;# 
   364  0FE7                     	;# 
   365  0FE8                     	;# 
   366  0FE9                     	;# 
   367  0FEA                     	;# 
   368  0FEB                     	;# 
   369  0FED                     	;# 
   370  0FEE                     	;# 
   371  0FEF                     	;# 
   372  0000                     	;# 
   373  0001                     	;# 
   374  0002                     	;# 
   375  0003                     	;# 
   376  0004                     	;# 
   377  0005                     	;# 
   378  0006                     	;# 
   379  0007                     	;# 
   380  0008                     	;# 
   381  0009                     	;# 
   382  000A                     	;# 
   383  000B                     	;# 
   384  000C                     	;# 
   385  000E                     	;# 
   386  0011                     	;# 
   387  0012                     	;# 
   388  0015                     	;# 
   389  0016                     	;# 
   390  0016                     	;# 
   391  0017                     	;# 
   392  0018                     	;# 
   393  0019                     	;# 
   394  001A                     	;# 
   395  001B                     	;# 
   396  001C                     	;# 
   397  001E                     	;# 
   398  001F                     	;# 
   399  008C                     	;# 
   400  008E                     	;# 
   401  0091                     	;# 
   402  0092                     	;# 
   403  0095                     	;# 
   404  0096                     	;# 
   405  0097                     	;# 
   406  0098                     	;# 
   407  0099                     	;# 
   408  009A                     	;# 
   409  009B                     	;# 
   410  009B                     	;# 
   411  009C                     	;# 
   412  009D                     	;# 
   413  009E                     	;# 
   414  010C                     	;# 
   415  010E                     	;# 
   416  0111                     	;# 
   417  0112                     	;# 
   418  0113                     	;# 
   419  0114                     	;# 
   420  0115                     	;# 
   421  0116                     	;# 
   422  0117                     	;# 
   423  0118                     	;# 
   424  0119                     	;# 
   425  011A                     	;# 
   426  011B                     	;# 
   427  011D                     	;# 
   428  011D                     	;# 
   429  018C                     	;# 
   430  018E                     	;# 
   431  0191                     	;# 
   432  0191                     	;# 
   433  0192                     	;# 
   434  0193                     	;# 
   435  0193                     	;# 
   436  0193                     	;# 
   437  0194                     	;# 
   438  0195                     	;# 
   439  0196                     	;# 
   440  0199                     	;# 
   441  019A                     	;# 
   442  019B                     	;# 
   443  019B                     	;# 
   444  019B                     	;# 
   445  019B                     	;# 
   446  019C                     	;# 
   447  019C                     	;# 
   448  019D                     	;# 
   449  019E                     	;# 
   450  019F                     	;# 
   451  020C                     	;# 
   452  020E                     	;# 
   453  0211                     	;# 
   454  0211                     	;# 
   455  0212                     	;# 
   456  0212                     	;# 
   457  0213                     	;# 
   458  0213                     	;# 
   459  0214                     	;# 
   460  0214                     	;# 
   461  0215                     	;# 
   462  0215                     	;# 
   463  0215                     	;# 
   464  0216                     	;# 
   465  0216                     	;# 
   466  0217                     	;# 
   467  0217                     	;# 
   468  0291                     	;# 
   469  0291                     	;# 
   470  0292                     	;# 
   471  0293                     	;# 
   472  0294                     	;# 
   473  0295                     	;# 
   474  0295                     	;# 
   475  0296                     	;# 
   476  0391                     	;# 
   477  0392                     	;# 
   478  0393                     	;# 
   479  039A                     	;# 
   480  039C                     	;# 
   481  039D                     	;# 
   482  039E                     	;# 
   483  039F                     	;# 
   484  0FE4                     	;# 
   485  0FE5                     	;# 
   486  0FE6                     	;# 
   487  0FE7                     	;# 
   488  0FE8                     	;# 
   489  0FE9                     	;# 
   490  0FEA                     	;# 
   491  0FEB                     	;# 
   492  0FED                     	;# 
   493  0FEE                     	;# 
   494  0FEF                     	;# 
   495  0000                     	;# 
   496  0001                     	;# 
   497  0002                     	;# 
   498  0003                     	;# 
   499  0004                     	;# 
   500  0005                     	;# 
   501  0006                     	;# 
   502  0007                     	;# 
   503  0008                     	;# 
   504  0009                     	;# 
   505  000A                     	;# 
   506  000B                     	;# 
   507  000C                     	;# 
   508  000E                     	;# 
   509  0011                     	;# 
   510  0012                     	;# 
   511  0015                     	;# 
   512  0016                     	;# 
   513  0016                     	;# 
   514  0017                     	;# 
   515  0018                     	;# 
   516  0019                     	;# 
   517  001A                     	;# 
   518  001B                     	;# 
   519  001C                     	;# 
   520  001E                     	;# 
   521  001F                     	;# 
   522  008C                     	;# 
   523  008E                     	;# 
   524  0091                     	;# 
   525  0092                     	;# 
   526  0095                     	;# 
   527  0096                     	;# 
   528  0097                     	;# 
   529  0098                     	;# 
   530  0099                     	;# 
   531  009A                     	;# 
   532  009B                     	;# 
   533  009B                     	;# 
   534  009C                     	;# 
   535  009D                     	;# 
   536  009E                     	;# 
   537  010C                     	;# 
   538  010E                     	;# 
   539  0111                     	;# 
   540  0112                     	;# 
   541  0113                     	;# 
   542  0114                     	;# 
   543  0115                     	;# 
   544  0116                     	;# 
   545  0117                     	;# 
   546  0118                     	;# 
   547  0119                     	;# 
   548  011A                     	;# 
   549  011B                     	;# 
   550  011D                     	;# 
   551  011D                     	;# 
   552  018C                     	;# 
   553  018E                     	;# 
   554  0191                     	;# 
   555  0191                     	;# 
   556  0192                     	;# 
   557  0193                     	;# 
   558  0193                     	;# 
   559  0193                     	;# 
   560  0194                     	;# 
   561  0195                     	;# 
   562  0196                     	;# 
   563  0199                     	;# 
   564  019A                     	;# 
   565  019B                     	;# 
   566  019B                     	;# 
   567  019B                     	;# 
   568  019B                     	;# 
   569  019C                     	;# 
   570  019C                     	;# 
   571  019D                     	;# 
   572  019E                     	;# 
   573  019F                     	;# 
   574  020C                     	;# 
   575  020E                     	;# 
   576  0211                     	;# 
   577  0211                     	;# 
   578  0212                     	;# 
   579  0212                     	;# 
   580  0213                     	;# 
   581  0213                     	;# 
   582  0214                     	;# 
   583  0214                     	;# 
   584  0215                     	;# 
   585  0215                     	;# 
   586  0215                     	;# 
   587  0216                     	;# 
   588  0216                     	;# 
   589  0217                     	;# 
   590  0217                     	;# 
   591  0291                     	;# 
   592  0291                     	;# 
   593  0292                     	;# 
   594  0293                     	;# 
   595  0294                     	;# 
   596  0295                     	;# 
   597  0295                     	;# 
   598  0296                     	;# 
   599  0391                     	;# 
   600  0392                     	;# 
   601  0393                     	;# 
   602  039A                     	;# 
   603  039C                     	;# 
   604  039D                     	;# 
   605  039E                     	;# 
   606  039F                     	;# 
   607  0FE4                     	;# 
   608  0FE5                     	;# 
   609  0FE6                     	;# 
   610  0FE7                     	;# 
   611  0FE8                     	;# 
   612  0FE9                     	;# 
   613  0FEA                     	;# 
   614  0FEB                     	;# 
   615  0FED                     	;# 
   616  0FEE                     	;# 
   617  0FEF                     	;# 
   618  0000                     	;# 
   619  0001                     	;# 
   620  0002                     	;# 
   621  0003                     	;# 
   622  0004                     	;# 
   623  0005                     	;# 
   624  0006                     	;# 
   625  0007                     	;# 
   626  0008                     	;# 
   627  0009                     	;# 
   628  000A                     	;# 
   629  000B                     	;# 
   630  000C                     	;# 
   631  000E                     	;# 
   632  0011                     	;# 
   633  0012                     	;# 
   634  0015                     	;# 
   635  0016                     	;# 
   636  0016                     	;# 
   637  0017                     	;# 
   638  0018                     	;# 
   639  0019                     	;# 
   640  001A                     	;# 
   641  001B                     	;# 
   642  001C                     	;# 
   643  001E                     	;# 
   644  001F                     	;# 
   645  008C                     	;# 
   646  008E                     	;# 
   647  0091                     	;# 
   648  0092                     	;# 
   649  0095                     	;# 
   650  0096                     	;# 
   651  0097                     	;# 
   652  0098                     	;# 
   653  0099                     	;# 
   654  009A                     	;# 
   655  009B                     	;# 
   656  009B                     	;# 
   657  009C                     	;# 
   658  009D                     	;# 
   659  009E                     	;# 
   660  010C                     	;# 
   661  010E                     	;# 
   662  0111                     	;# 
   663  0112                     	;# 
   664  0113                     	;# 
   665  0114                     	;# 
   666  0115                     	;# 
   667  0116                     	;# 
   668  0117                     	;# 
   669  0118                     	;# 
   670  0119                     	;# 
   671  011A                     	;# 
   672  011B                     	;# 
   673  011D                     	;# 
   674  011D                     	;# 
   675  018C                     	;# 
   676  018E                     	;# 
   677  0191                     	;# 
   678  0191                     	;# 
   679  0192                     	;# 
   680  0193                     	;# 
   681  0193                     	;# 
   682  0193                     	;# 
   683  0194                     	;# 
   684  0195                     	;# 
   685  0196                     	;# 
   686  0199                     	;# 
   687  019A                     	;# 
   688  019B                     	;# 
   689  019B                     	;# 
   690  019B                     	;# 
   691  019B                     	;# 
   692  019C                     	;# 
   693  019C                     	;# 
   694  019D                     	;# 
   695  019E                     	;# 
   696  019F                     	;# 
   697  020C                     	;# 
   698  020E                     	;# 
   699  0211                     	;# 
   700  0211                     	;# 
   701  0212                     	;# 
   702  0212                     	;# 
   703  0213                     	;# 
   704  0213                     	;# 
   705  0214                     	;# 
   706  0214                     	;# 
   707  0215                     	;# 
   708  0215                     	;# 
   709  0215                     	;# 
   710  0216                     	;# 
   711  0216                     	;# 
   712  0217                     	;# 
   713  0217                     	;# 
   714  0291                     	;# 
   715  0291                     	;# 
   716  0292                     	;# 
   717  0293                     	;# 
   718  0294                     	;# 
   719  0295                     	;# 
   720  0295                     	;# 
   721  0296                     	;# 
   722  0391                     	;# 
   723  0392                     	;# 
   724  0393                     	;# 
   725  039A                     	;# 
   726  039C                     	;# 
   727  039D                     	;# 
   728  039E                     	;# 
   729  039F                     	;# 
   730  0FE4                     	;# 
   731  0FE5                     	;# 
   732  0FE6                     	;# 
   733  0FE7                     	;# 
   734  0FE8                     	;# 
   735  0FE9                     	;# 
   736  0FEA                     	;# 
   737  0FEB                     	;# 
   738  0FED                     	;# 
   739  0FEE                     	;# 
   740  0FEF                     	;# 
   741  0000                     	;# 
   742  0001                     	;# 
   743  0002                     	;# 
   744  0003                     	;# 
   745  0004                     	;# 
   746  0005                     	;# 
   747  0006                     	;# 
   748  0007                     	;# 
   749  0008                     	;# 
   750  0009                     	;# 
   751  000A                     	;# 
   752  000B                     	;# 
   753  000C                     	;# 
   754  000E                     	;# 
   755  0011                     	;# 
   756  0012                     	;# 
   757  0015                     	;# 
   758  0016                     	;# 
   759  0016                     	;# 
   760  0017                     	;# 
   761  0018                     	;# 
   762  0019                     	;# 
   763  001A                     	;# 
   764  001B                     	;# 
   765  001C                     	;# 
   766  001E                     	;# 
   767  001F                     	;# 
   768  008C                     	;# 
   769  008E                     	;# 
   770  0091                     	;# 
   771  0092                     	;# 
   772  0095                     	;# 
   773  0096                     	;# 
   774  0097                     	;# 
   775  0098                     	;# 
   776  0099                     	;# 
   777  009A                     	;# 
   778  009B                     	;# 
   779  009B                     	;# 
   780  009C                     	;# 
   781  009D                     	;# 
   782  009E                     	;# 
   783  010C                     	;# 
   784  010E                     	;# 
   785  0111                     	;# 
   786  0112                     	;# 
   787  0113                     	;# 
   788  0114                     	;# 
   789  0115                     	;# 
   790  0116                     	;# 
   791  0117                     	;# 
   792  0118                     	;# 
   793  0119                     	;# 
   794  011A                     	;# 
   795  011B                     	;# 
   796  011D                     	;# 
   797  011D                     	;# 
   798  018C                     	;# 
   799  018E                     	;# 
   800  0191                     	;# 
   801  0191                     	;# 
   802  0192                     	;# 
   803  0193                     	;# 
   804  0193                     	;# 
   805  0193                     	;# 
   806  0194                     	;# 
   807  0195                     	;# 
   808  0196                     	;# 
   809  0199                     	;# 
   810  019A                     	;# 
   811  019B                     	;# 
   812  019B                     	;# 
   813  019B                     	;# 
   814  019B                     	;# 
   815  019C                     	;# 
   816  019C                     	;# 
   817  019D                     	;# 
   818  019E                     	;# 
   819  019F                     	;# 
   820  020C                     	;# 
   821  020E                     	;# 
   822  0211                     	;# 
   823  0211                     	;# 
   824  0212                     	;# 
   825  0212                     	;# 
   826  0213                     	;# 
   827  0213                     	;# 
   828  0214                     	;# 
   829  0214                     	;# 
   830  0215                     	;# 
   831  0215                     	;# 
   832  0215                     	;# 
   833  0216                     	;# 
   834  0216                     	;# 
   835  0217                     	;# 
   836  0217                     	;# 
   837  0291                     	;# 
   838  0291                     	;# 
   839  0292                     	;# 
   840  0293                     	;# 
   841  0294                     	;# 
   842  0295                     	;# 
   843  0295                     	;# 
   844  0296                     	;# 
   845  0391                     	;# 
   846  0392                     	;# 
   847  0393                     	;# 
   848  039A                     	;# 
   849  039C                     	;# 
   850  039D                     	;# 
   851  039E                     	;# 
   852  039F                     	;# 
   853  0FE4                     	;# 
   854  0FE5                     	;# 
   855  0FE6                     	;# 
   856  0FE7                     	;# 
   857  0FE8                     	;# 
   858  0FE9                     	;# 
   859  0FEA                     	;# 
   860  0FEB                     	;# 
   861  0FED                     	;# 
   862  0FEE                     	;# 
   863  0FEF                     	;# 
   864  0000                     	;# 
   865  0001                     	;# 
   866  0002                     	;# 
   867  0003                     	;# 
   868  0004                     	;# 
   869  0005                     	;# 
   870  0006                     	;# 
   871  0007                     	;# 
   872  0008                     	;# 
   873  0009                     	;# 
   874  000A                     	;# 
   875  000B                     	;# 
   876  000C                     	;# 
   877  000E                     	;# 
   878  0011                     	;# 
   879  0012                     	;# 
   880  0015                     	;# 
   881  0016                     	;# 
   882  0016                     	;# 
   883  0017                     	;# 
   884  0018                     	;# 
   885  0019                     	;# 
   886  001A                     	;# 
   887  001B                     	;# 
   888  001C                     	;# 
   889  001E                     	;# 
   890  001F                     	;# 
   891  008C                     	;# 
   892  008E                     	;# 
   893  0091                     	;# 
   894  0092                     	;# 
   895  0095                     	;# 
   896  0096                     	;# 
   897  0097                     	;# 
   898  0098                     	;# 
   899  0099                     	;# 
   900  009A                     	;# 
   901  009B                     	;# 
   902  009B                     	;# 
   903  009C                     	;# 
   904  009D                     	;# 
   905  009E                     	;# 
   906  010C                     	;# 
   907  010E                     	;# 
   908  0111                     	;# 
   909  0112                     	;# 
   910  0113                     	;# 
   911  0114                     	;# 
   912  0115                     	;# 
   913  0116                     	;# 
   914  0117                     	;# 
   915  0118                     	;# 
   916  0119                     	;# 
   917  011A                     	;# 
   918  011B                     	;# 
   919  011D                     	;# 
   920  011D                     	;# 
   921  018C                     	;# 
   922  018E                     	;# 
   923  0191                     	;# 
   924  0191                     	;# 
   925  0192                     	;# 
   926  0193                     	;# 
   927  0193                     	;# 
   928  0193                     	;# 
   929  0194                     	;# 
   930  0195                     	;# 
   931  0196                     	;# 
   932  0199                     	;# 
   933  019A                     	;# 
   934  019B                     	;# 
   935  019B                     	;# 
   936  019B                     	;# 
   937  019B                     	;# 
   938  019C                     	;# 
   939  019C                     	;# 
   940  019D                     	;# 
   941  019E                     	;# 
   942  019F                     	;# 
   943  020C                     	;# 
   944  020E                     	;# 
   945  0211                     	;# 
   946  0211                     	;# 
   947  0212                     	;# 
   948  0212                     	;# 
   949  0213                     	;# 
   950  0213                     	;# 
   951  0214                     	;# 
   952  0214                     	;# 
   953  0215                     	;# 
   954  0215                     	;# 
   955  0215                     	;# 
   956  0216                     	;# 
   957  0216                     	;# 
   958  0217                     	;# 
   959  0217                     	;# 
   960  0291                     	;# 
   961  0291                     	;# 
   962  0292                     	;# 
   963  0293                     	;# 
   964  0294                     	;# 
   965  0295                     	;# 
   966  0295                     	;# 
   967  0296                     	;# 
   968  0391                     	;# 
   969  0392                     	;# 
   970  0393                     	;# 
   971  039A                     	;# 
   972  039C                     	;# 
   973  039D                     	;# 
   974  039E                     	;# 
   975  039F                     	;# 
   976  0FE4                     	;# 
   977  0FE5                     	;# 
   978  0FE6                     	;# 
   979  0FE7                     	;# 
   980  0FE8                     	;# 
   981  0FE9                     	;# 
   982  0FEA                     	;# 
   983  0FEB                     	;# 
   984  0FED                     	;# 
   985  0FEE                     	;# 
   986  0FEF                     	;# 
   987  0000                     	;# 
   988  0001                     	;# 
   989  0002                     	;# 
   990  0003                     	;# 
   991  0004                     	;# 
   992  0005                     	;# 
   993  0006                     	;# 
   994  0007                     	;# 
   995  0008                     	;# 
   996  0009                     	;# 
   997  000A                     	;# 
   998  000B                     	;# 
   999  000C                     	;# 
  1000  000E                     	;# 
  1001  0011                     	;# 
  1002  0012                     	;# 
  1003  0015                     	;# 
  1004  0016                     	;# 
  1005  0016                     	;# 
  1006  0017                     	;# 
  1007  0018                     	;# 
  1008  0019                     	;# 
  1009  001A                     	;# 
  1010  001B                     	;# 
  1011  001C                     	;# 
  1012  001E                     	;# 
  1013  001F                     	;# 
  1014  008C                     	;# 
  1015  008E                     	;# 
  1016  0091                     	;# 
  1017  0092                     	;# 
  1018  0095                     	;# 
  1019  0096                     	;# 
  1020  0097                     	;# 
  1021  0098                     	;# 
  1022  0099                     	;# 
  1023  009A                     	;# 
  1024  009B                     	;# 
  1025  009B                     	;# 
  1026  009C                     	;# 
  1027  009D                     	;# 
  1028  009E                     	;# 
  1029  010C                     	;# 
  1030  010E                     	;# 
  1031  0111                     	;# 
  1032  0112                     	;# 
  1033  0113                     	;# 
  1034  0114                     	;# 
  1035  0115                     	;# 
  1036  0116                     	;# 
  1037  0117                     	;# 
  1038  0118                     	;# 
  1039  0119                     	;# 
  1040  011A                     	;# 
  1041  011B                     	;# 
  1042  011D                     	;# 
  1043  011D                     	;# 
  1044  018C                     	;# 
  1045  018E                     	;# 
  1046  0191                     	;# 
  1047  0191                     	;# 
  1048  0192                     	;# 
  1049  0193                     	;# 
  1050  0193                     	;# 
  1051  0193                     	;# 
  1052  0194                     	;# 
  1053  0195                     	;# 
  1054  0196                     	;# 
  1055  0199                     	;# 
  1056  019A                     	;# 
  1057  019B                     	;# 
  1058  019B                     	;# 
  1059  019B                     	;# 
  1060  019B                     	;# 
  1061  019C                     	;# 
  1062  019C                     	;# 
  1063  019D                     	;# 
  1064  019E                     	;# 
  1065  019F                     	;# 
  1066  020C                     	;# 
  1067  020E                     	;# 
  1068  0211                     	;# 
  1069  0211                     	;# 
  1070  0212                     	;# 
  1071  0212                     	;# 
  1072  0213                     	;# 
  1073  0213                     	;# 
  1074  0214                     	;# 
  1075  0214                     	;# 
  1076  0215                     	;# 
  1077  0215                     	;# 
  1078  0215                     	;# 
  1079  0216                     	;# 
  1080  0216                     	;# 
  1081  0217                     	;# 
  1082  0217                     	;# 
  1083  0291                     	;# 
  1084  0291                     	;# 
  1085  0292                     	;# 
  1086  0293                     	;# 
  1087  0294                     	;# 
  1088  0295                     	;# 
  1089  0295                     	;# 
  1090  0296                     	;# 
  1091  0391                     	;# 
  1092  0392                     	;# 
  1093  0393                     	;# 
  1094  039A                     	;# 
  1095  039C                     	;# 
  1096  039D                     	;# 
  1097  039E                     	;# 
  1098  039F                     	;# 
  1099  0FE4                     	;# 
  1100  0FE5                     	;# 
  1101  0FE6                     	;# 
  1102  0FE7                     	;# 
  1103  0FE8                     	;# 
  1104  0FE9                     	;# 
  1105  0FEA                     	;# 
  1106  0FEB                     	;# 
  1107  0FED                     	;# 
  1108  0FEE                     	;# 
  1109  0FEF                     	;# 
  1110  0000                     	;# 
  1111  0001                     	;# 
  1112  0002                     	;# 
  1113  0003                     	;# 
  1114  0004                     	;# 
  1115  0005                     	;# 
  1116  0006                     	;# 
  1117  0007                     	;# 
  1118  0008                     	;# 
  1119  0009                     	;# 
  1120  000A                     	;# 
  1121  000B                     	;# 
  1122  000C                     	;# 
  1123  000E                     	;# 
  1124  0011                     	;# 
  1125  0012                     	;# 
  1126  0015                     	;# 
  1127  0016                     	;# 
  1128  0016                     	;# 
  1129  0017                     	;# 
  1130  0018                     	;# 
  1131  0019                     	;# 
  1132  001A                     	;# 
  1133  001B                     	;# 
  1134  001C                     	;# 
  1135  001E                     	;# 
  1136  001F                     	;# 
  1137  008C                     	;# 
  1138  008E                     	;# 
  1139  0091                     	;# 
  1140  0092                     	;# 
  1141  0095                     	;# 
  1142  0096                     	;# 
  1143  0097                     	;# 
  1144  0098                     	;# 
  1145  0099                     	;# 
  1146  009A                     	;# 
  1147  009B                     	;# 
  1148  009B                     	;# 
  1149  009C                     	;# 
  1150  009D                     	;# 
  1151  009E                     	;# 
  1152  010C                     	;# 
  1153  010E                     	;# 
  1154  0111                     	;# 
  1155  0112                     	;# 
  1156  0113                     	;# 
  1157  0114                     	;# 
  1158  0115                     	;# 
  1159  0116                     	;# 
  1160  0117                     	;# 
  1161  0118                     	;# 
  1162  0119                     	;# 
  1163  011A                     	;# 
  1164  011B                     	;# 
  1165  011D                     	;# 
  1166  011D                     	;# 
  1167  018C                     	;# 
  1168  018E                     	;# 
  1169  0191                     	;# 
  1170  0191                     	;# 
  1171  0192                     	;# 
  1172  0193                     	;# 
  1173  0193                     	;# 
  1174  0193                     	;# 
  1175  0194                     	;# 
  1176  0195                     	;# 
  1177  0196                     	;# 
  1178  0199                     	;# 
  1179  019A                     	;# 
  1180  019B                     	;# 
  1181  019B                     	;# 
  1182  019B                     	;# 
  1183  019B                     	;# 
  1184  019C                     	;# 
  1185  019C                     	;# 
  1186  019D                     	;# 
  1187  019E                     	;# 
  1188  019F                     	;# 
  1189  020C                     	;# 
  1190  020E                     	;# 
  1191  0211                     	;# 
  1192  0211                     	;# 
  1193  0212                     	;# 
  1194  0212                     	;# 
  1195  0213                     	;# 
  1196  0213                     	;# 
  1197  0214                     	;# 
  1198  0214                     	;# 
  1199  0215                     	;# 
  1200  0215                     	;# 
  1201  0215                     	;# 
  1202  0216                     	;# 
  1203  0216                     	;# 
  1204  0217                     	;# 
  1205  0217                     	;# 
  1206  0291                     	;# 
  1207  0291                     	;# 
  1208  0292                     	;# 
  1209  0293                     	;# 
  1210  0294                     	;# 
  1211  0295                     	;# 
  1212  0295                     	;# 
  1213  0296                     	;# 
  1214  0391                     	;# 
  1215  0392                     	;# 
  1216  0393                     	;# 
  1217  039A                     	;# 
  1218  039C                     	;# 
  1219  039D                     	;# 
  1220  039E                     	;# 
  1221  039F                     	;# 
  1222  0FE4                     	;# 
  1223  0FE5                     	;# 
  1224  0FE6                     	;# 
  1225  0FE7                     	;# 
  1226  0FE8                     	;# 
  1227  0FE9                     	;# 
  1228  0FEA                     	;# 
  1229  0FEB                     	;# 
  1230  0FED                     	;# 
  1231  0FEE                     	;# 
  1232  0FEF                     	;# 
  1233  0000                     	;# 
  1234  0001                     	;# 
  1235  0002                     	;# 
  1236  0003                     	;# 
  1237  0004                     	;# 
  1238  0005                     	;# 
  1239  0006                     	;# 
  1240  0007                     	;# 
  1241  0008                     	;# 
  1242  0009                     	;# 
  1243  000A                     	;# 
  1244  000B                     	;# 
  1245  000C                     	;# 
  1246  000E                     	;# 
  1247  0011                     	;# 
  1248  0012                     	;# 
  1249  0015                     	;# 
  1250  0016                     	;# 
  1251  0016                     	;# 
  1252  0017                     	;# 
  1253  0018                     	;# 
  1254  0019                     	;# 
  1255  001A                     	;# 
  1256  001B                     	;# 
  1257  001C                     	;# 
  1258  001E                     	;# 
  1259  001F                     	;# 
  1260  008C                     	;# 
  1261  008E                     	;# 
  1262  0091                     	;# 
  1263  0092                     	;# 
  1264  0095                     	;# 
  1265  0096                     	;# 
  1266  0097                     	;# 
  1267  0098                     	;# 
  1268  0099                     	;# 
  1269  009A                     	;# 
  1270  009B                     	;# 
  1271  009B                     	;# 
  1272  009C                     	;# 
  1273  009D                     	;# 
  1274  009E                     	;# 
  1275  010C                     	;# 
  1276  010E                     	;# 
  1277  0111                     	;# 
  1278  0112                     	;# 
  1279  0113                     	;# 
  1280  0114                     	;# 
  1281  0115                     	;# 
  1282  0116                     	;# 
  1283  0117                     	;# 
  1284  0118                     	;# 
  1285  0119                     	;# 
  1286  011A                     	;# 
  1287  011B                     	;# 
  1288  011D                     	;# 
  1289  011D                     	;# 
  1290  018C                     	;# 
  1291  018E                     	;# 
  1292  0191                     	;# 
  1293  0191                     	;# 
  1294  0192                     	;# 
  1295  0193                     	;# 
  1296  0193                     	;# 
  1297  0193                     	;# 
  1298  0194                     	;# 
  1299  0195                     	;# 
  1300  0196                     	;# 
  1301  0199                     	;# 
  1302  019A                     	;# 
  1303  019B                     	;# 
  1304  019B                     	;# 
  1305  019B                     	;# 
  1306  019B                     	;# 
  1307  019C                     	;# 
  1308  019C                     	;# 
  1309  019D                     	;# 
  1310  019E                     	;# 
  1311  019F                     	;# 
  1312  020C                     	;# 
  1313  020E                     	;# 
  1314  0211                     	;# 
  1315  0211                     	;# 
  1316  0212                     	;# 
  1317  0212                     	;# 
  1318  0213                     	;# 
  1319  0213                     	;# 
  1320  0214                     	;# 
  1321  0214                     	;# 
  1322  0215                     	;# 
  1323  0215                     	;# 
  1324  0215                     	;# 
  1325  0216                     	;# 
  1326  0216                     	;# 
  1327  0217                     	;# 
  1328  0217                     	;# 
  1329  0291                     	;# 
  1330  0291                     	;# 
  1331  0292                     	;# 
  1332  0293                     	;# 
  1333  0294                     	;# 
  1334  0295                     	;# 
  1335  0295                     	;# 
  1336  0296                     	;# 
  1337  0391                     	;# 
  1338  0392                     	;# 
  1339  0393                     	;# 
  1340  039A                     	;# 
  1341  039C                     	;# 
  1342  039D                     	;# 
  1343  039E                     	;# 
  1344  039F                     	;# 
  1345  0FE4                     	;# 
  1346  0FE5                     	;# 
  1347  0FE6                     	;# 
  1348  0FE7                     	;# 
  1349  0FE8                     	;# 
  1350  0FE9                     	;# 
  1351  0FEA                     	;# 
  1352  0FEB                     	;# 
  1353  0FED                     	;# 
  1354  0FEE                     	;# 
  1355  0FEF                     	;# 
  1356  0000                     	;# 
  1357  0001                     	;# 
  1358  0002                     	;# 
  1359  0003                     	;# 
  1360  0004                     	;# 
  1361  0005                     	;# 
  1362  0006                     	;# 
  1363  0007                     	;# 
  1364  0008                     	;# 
  1365  0009                     	;# 
  1366  000A                     	;# 
  1367  000B                     	;# 
  1368  000C                     	;# 
  1369  000E                     	;# 
  1370  0011                     	;# 
  1371  0012                     	;# 
  1372  0015                     	;# 
  1373  0016                     	;# 
  1374  0016                     	;# 
  1375  0017                     	;# 
  1376  0018                     	;# 
  1377  0019                     	;# 
  1378  001A                     	;# 
  1379  001B                     	;# 
  1380  001C                     	;# 
  1381  001E                     	;# 
  1382  001F                     	;# 
  1383  008C                     	;# 
  1384  008E                     	;# 
  1385  0091                     	;# 
  1386  0092                     	;# 
  1387  0095                     	;# 
  1388  0096                     	;# 
  1389  0097                     	;# 
  1390  0098                     	;# 
  1391  0099                     	;# 
  1392  009A                     	;# 
  1393  009B                     	;# 
  1394  009B                     	;# 
  1395  009C                     	;# 
  1396  009D                     	;# 
  1397  009E                     	;# 
  1398  010C                     	;# 
  1399  010E                     	;# 
  1400  0111                     	;# 
  1401  0112                     	;# 
  1402  0113                     	;# 
  1403  0114                     	;# 
  1404  0115                     	;# 
  1405  0116                     	;# 
  1406  0117                     	;# 
  1407  0118                     	;# 
  1408  0119                     	;# 
  1409  011A                     	;# 
  1410  011B                     	;# 
  1411  011D                     	;# 
  1412  011D                     	;# 
  1413  018C                     	;# 
  1414  018E                     	;# 
  1415  0191                     	;# 
  1416  0191                     	;# 
  1417  0192                     	;# 
  1418  0193                     	;# 
  1419  0193                     	;# 
  1420  0193                     	;# 
  1421  0194                     	;# 
  1422  0195                     	;# 
  1423  0196                     	;# 
  1424  0199                     	;# 
  1425  019A                     	;# 
  1426  019B                     	;# 
  1427  019B                     	;# 
  1428  019B                     	;# 
  1429  019B                     	;# 
  1430  019C                     	;# 
  1431  019C                     	;# 
  1432  019D                     	;# 
  1433  019E                     	;# 
  1434  019F                     	;# 
  1435  020C                     	;# 
  1436  020E                     	;# 
  1437  0211                     	;# 
  1438  0211                     	;# 
  1439  0212                     	;# 
  1440  0212                     	;# 
  1441  0213                     	;# 
  1442  0213                     	;# 
  1443  0214                     	;# 
  1444  0214                     	;# 
  1445  0215                     	;# 
  1446  0215                     	;# 
  1447  0215                     	;# 
  1448  0216                     	;# 
  1449  0216                     	;# 
  1450  0217                     	;# 
  1451  0217                     	;# 
  1452  0291                     	;# 
  1453  0291                     	;# 
  1454  0292                     	;# 
  1455  0293                     	;# 
  1456  0294                     	;# 
  1457  0295                     	;# 
  1458  0295                     	;# 
  1459  0296                     	;# 
  1460  0391                     	;# 
  1461  0392                     	;# 
  1462  0393                     	;# 
  1463  039A                     	;# 
  1464  039C                     	;# 
  1465  039D                     	;# 
  1466  039E                     	;# 
  1467  039F                     	;# 
  1468  0FE4                     	;# 
  1469  0FE5                     	;# 
  1470  0FE6                     	;# 
  1471  0FE7                     	;# 
  1472  0FE8                     	;# 
  1473  0FE9                     	;# 
  1474  0FEA                     	;# 
  1475  0FEB                     	;# 
  1476  0FED                     	;# 
  1477  0FEE                     	;# 
  1478  0FEF                     	;# 
  1479                           
  1480                           	psect	nvBANK0
  1481  006E                     __pnvBANK0:	
  1482  006E                     _IOCAF4_InterruptHandler:	
  1483  006E                     	ds	2
  1484  000C                     _PORTAbits	set	12
  1485  0019                     _T1GCONbits	set	25
  1486  0018                     _T1CONbits	set	24
  1487  0018                     _T1CON	set	24
  1488  0016                     _TMR1L	set	22
  1489  0017                     _TMR1H	set	23
  1490  0019                     _T1GCON	set	25
  1491  000B                     _INTCONbits	set	11
  1492  0011                     _PIR1bits	set	17
  1493  0095                     _OPTION_REGbits	set	149
  1494  008E                     _TRISC	set	142
  1495  008C                     _TRISA	set	140
  1496  0097                     _WDTCON	set	151
  1497  0098                     _OSCTUNE	set	152
  1498  0099                     _OSCCON	set	153
  1499  009D                     _ADCON0bits	set	157
  1500  0091                     _PIE1bits	set	145
  1501  009C                     _ADRESH	set	156
  1502  009B                     _ADRESL	set	155
  1503  009E                     _ADCON1	set	158
  1504  009D                     _ADCON0	set	157
  1505  04D6                     _PLLR	set	1238
  1506  010C                     _LATAbits	set	268
  1507  011D                     _APFCON	set	285
  1508  010E                     _LATC	set	270
  1509  010C                     _LATA	set	268
  1510  0116                     _BORCON	set	278
  1511  018C                     _ANSELA	set	396
  1512  018E                     _ANSELC	set	398
  1513  0199                     _RCREG	set	409
  1514  019D                     _RCSTAbits	set	413
  1515  019A                     _TXREG	set	410
  1516  019E                     _TXSTAbits	set	414
  1517  019C                     _SPBRGH	set	412
  1518  019B                     _SPBRGL	set	411
  1519  019E                     _TXSTA	set	414
  1520  019D                     _RCSTA	set	413
  1521  019F                     _BAUDCON	set	415
  1522  020E                     _WPUC	set	526
  1523  020C                     _WPUA	set	524
  1524  0391                     _IOCAPbits	set	913
  1525  0392                     _IOCANbits	set	914
  1526  0393                     _IOCAFbits	set	915
  1527                           
  1528                           	psect	stringtext1
  1529  053B                     __pstringtext1:	
  1530  053B                     STR_10:	
  1531  053B  3441               	retlw	65	;'A'
  1532  053C  3454               	retlw	84	;'T'
  1533  053D  342B               	retlw	43	;'+'
  1534  053E  3443               	retlw	67	;'C'
  1535  053F  3457               	retlw	87	;'W'
  1536  0540  344A               	retlw	74	;'J'
  1537  0541  3441               	retlw	65	;'A'
  1538  0542  3450               	retlw	80	;'P'
  1539  0543  343D               	retlw	61	;'='
  1540  0544  3422               	retlw	34	;'"'
  1541  0545  3473               	retlw	115	;'s'
  1542  0546  3461               	retlw	97	;'a'
  1543  0547  3475               	retlw	117	;'u'
  1544  0548  346C               	retlw	108	;'l'
  1545  0549  3432               	retlw	50	;'2'
  1546  054A  3422               	retlw	34	;'"'
  1547  054B  342C               	retlw	44	;','
  1548  054C  3422               	retlw	34	;'"'
  1549  054D  3472               	retlw	114	;'r'
  1550  054E  3469               	retlw	105	;'i'
  1551  054F  3463               	retlw	99	;'c'
  1552  0550  346B               	retlw	107	;'k'
  1553  0551  3468               	retlw	104	;'h'
  1554  0552  3475               	retlw	117	;'u'
  1555  0553  346E               	retlw	110	;'n'
  1556  0554  3474               	retlw	116	;'t'
  1557  0555  3465               	retlw	101	;'e'
  1558  0556  3472               	retlw	114	;'r'
  1559  0557  3430               	retlw	48	;'0'
  1560  0558  3432               	retlw	50	;'2'
  1561  0559  3422               	retlw	34	;'"'
  1562  055A  340D               	retlw	13
  1563  055B  340A               	retlw	10
  1564  055C  3400               	retlw	0
  1565                           
  1566                           	psect	stringtext2
  1567  06A2                     __pstringtext2:	
  1568  06A2                     STR_12:	
  1569  06A2  3441               	retlw	65	;'A'
  1570  06A3  3454               	retlw	84	;'T'
  1571  06A4  342B               	retlw	43	;'+'
  1572  06A5  3443               	retlw	67	;'C'
  1573  06A6  3449               	retlw	73	;'I'
  1574  06A7  3450               	retlw	80	;'P'
  1575  06A8  3453               	retlw	83	;'S'
  1576  06A9  3445               	retlw	69	;'E'
  1577  06AA  3452               	retlw	82	;'R'
  1578  06AB  3456               	retlw	86	;'V'
  1579  06AC  3445               	retlw	69	;'E'
  1580  06AD  3452               	retlw	82	;'R'
  1581  06AE  343D               	retlw	61	;'='
  1582  06AF  3431               	retlw	49	;'1'
  1583  06B0  342C               	retlw	44	;','
  1584  06B1  3438               	retlw	56	;'8'
  1585  06B2  3430               	retlw	48	;'0'
  1586  06B3  340D               	retlw	13
  1587  06B4  340A               	retlw	10
  1588  06B5  3400               	retlw	0
  1589                           
  1590                           	psect	stringtext3
  1591  06EA                     __pstringtext3:	
  1592  06EA                     STR_9:	
  1593  06EA  3441               	retlw	65	;'A'
  1594  06EB  3454               	retlw	84	;'T'
  1595  06EC  342B               	retlw	43	;'+'
  1596  06ED  3443               	retlw	67	;'C'
  1597  06EE  3457               	retlw	87	;'W'
  1598  06EF  344D               	retlw	77	;'M'
  1599  06F0  344F               	retlw	79	;'O'
  1600  06F1  3444               	retlw	68	;'D'
  1601  06F2  3445               	retlw	69	;'E'
  1602  06F3  343D               	retlw	61	;'='
  1603  06F4  3431               	retlw	49	;'1'
  1604  06F5  340D               	retlw	13
  1605  06F6  340A               	retlw	10
  1606  06F7  3400               	retlw	0
  1607                           
  1608                           	psect	stringtext4
  1609  06F8                     __pstringtext4:	
  1610  06F8                     STR_11:	
  1611  06F8  3441               	retlw	65	;'A'
  1612  06F9  3454               	retlw	84	;'T'
  1613  06FA  342B               	retlw	43	;'+'
  1614  06FB  3443               	retlw	67	;'C'
  1615  06FC  3449               	retlw	73	;'I'
  1616  06FD  3450               	retlw	80	;'P'
  1617  06FE  344D               	retlw	77	;'M'
  1618  06FF  3455               	retlw	85	;'U'
  1619  0700  3458               	retlw	88	;'X'
  1620  0701  343D               	retlw	61	;'='
  1621  0702  3431               	retlw	49	;'1'
  1622  0703  340D               	retlw	13
  1623  0704  340A               	retlw	10
  1624  0705  3400               	retlw	0
  1625                           
  1626                           	psect	stringtext5
  1627  0720                     __pstringtext5:	
  1628  0720                     STR_14:	
  1629  0720  3441               	retlw	65	;'A'
  1630  0721  3454               	retlw	84	;'T'
  1631  0722  342B               	retlw	43	;'+'
  1632  0723  3443               	retlw	67	;'C'
  1633  0724  3449               	retlw	73	;'I'
  1634  0725  3450               	retlw	80	;'P'
  1635  0726  3453               	retlw	83	;'S'
  1636  0727  3445               	retlw	69	;'E'
  1637  0728  344E               	retlw	78	;'N'
  1638  0729  3444               	retlw	68	;'D'
  1639  072A  343D               	retlw	61	;'='
  1640  072B  3400               	retlw	0
  1641                           
  1642                           	psect	stringtext6
  1643  0737                     __pstringtext6:	
  1644  0737                     STR_3:	
  1645  0737  3453               	retlw	83	;'S'
  1646  0738  3445               	retlw	69	;'E'
  1647  0739  344E               	retlw	78	;'N'
  1648  073A  3444               	retlw	68	;'D'
  1649  073B  3420               	retlw	32	;' '
  1650  073C  3446               	retlw	70	;'F'
  1651  073D  3441               	retlw	65	;'A'
  1652  073E  3449               	retlw	73	;'I'
  1653  073F  344C               	retlw	76	;'L'
  1654  0740  3400               	retlw	0
  1655                           
  1656                           	psect	stringtext7
  1657  0767                     __pstringtext7:	
  1658  0767                     STR_1:	
  1659  0767  3453               	retlw	83	;'S'
  1660  0768  3445               	retlw	69	;'E'
  1661  0769  344E               	retlw	78	;'N'
  1662  076A  3444               	retlw	68	;'D'
  1663  076B  3420               	retlw	32	;' '
  1664  076C  344F               	retlw	79	;'O'
  1665  076D  344B               	retlw	75	;'K'
  1666  076E  3400               	retlw	0
  1667                           
  1668                           	psect	stringtext8
  1669  076F                     __pstringtext8:	
  1670  076F                     STR_6:	
  1671  076F  3443               	retlw	67	;'C'
  1672  0770  344F               	retlw	79	;'O'
  1673  0771  344E               	retlw	78	;'N'
  1674  0772  344E               	retlw	78	;'N'
  1675  0773  3445               	retlw	69	;'E'
  1676  0774  3443               	retlw	67	;'C'
  1677  0775  3454               	retlw	84	;'T'
  1678  0776  3400               	retlw	0
  1679                           
  1680                           	psect	stringtext9
  1681  0777                     __pstringtext9:	
  1682  0777                     STR_7:	
  1683  0777  3443               	retlw	67	;'C'
  1684  0778  344C               	retlw	76	;'L'
  1685  0779  344F               	retlw	79	;'O'
  1686  077A  3453               	retlw	83	;'S'
  1687  077B  3445               	retlw	69	;'E'
  1688  077C  3444               	retlw	68	;'D'
  1689  077D  3400               	retlw	0
  1690                           
  1691                           	psect	stringtext10
  1692  0785                     __pstringtext10:	
  1693  0785                     STR_4:	
  1694  0785  3445               	retlw	69	;'E'
  1695  0786  3452               	retlw	82	;'R'
  1696  0787  3452               	retlw	82	;'R'
  1697  0788  344F               	retlw	79	;'O'
  1698  0789  3452               	retlw	82	;'R'
  1699  078A  3400               	retlw	0
  1700                           
  1701                           	psect	stringtext11
  1702  07BB                     __pstringtext11:	
  1703  07BB                     STR_8:	
  1704  07BB  3441               	retlw	65	;'A'
  1705  07BC  3454               	retlw	84	;'T'
  1706  07BD  340D               	retlw	13
  1707  07BE  340A               	retlw	10
  1708  07BF  3400               	retlw	0
  1709                           
  1710                           	psect	stringtext12
  1711  07C0                     __pstringtext12:	
  1712  07C0                     STR_5:	
  1713  07C0  342B               	retlw	43	;'+'
  1714  07C1  3449               	retlw	73	;'I'
  1715  07C2  3450               	retlw	80	;'P'
  1716  07C3  3444               	retlw	68	;'D'
  1717  07C4  3400               	retlw	0
  1718                           
  1719                           	psect	stringtext13
  1720  07CE                     __pstringtext13:	
  1721  07CE                     STR_18:	
  1722  07CE  3443               	retlw	67	;'C'
  1723  07CF  3448               	retlw	72	;'H'
  1724  07D0  3400               	retlw	0
  1725                           
  1726                           	psect	stringtext14
  1727  07D1                     __pstringtext14:	
  1728  07D1                     STR_19:	
  1729  07D1  3443               	retlw	67	;'C'
  1730  07D2  344C               	retlw	76	;'L'
  1731  07D3  3400               	retlw	0
  1732                           
  1733                           	psect	stringtext15
  1734  07E6                     __pstringtext15:	
  1735  07E6                     STR_15:	
  1736  07E6  342C               	retlw	44	;','
  1737  07E7  3400               	retlw	0
  1738                           
  1739                           	psect	stringtext16
  1740  07E8                     __pstringtext16:	
  1741  07E8                     STR_13:	
  1742  07E8  343A               	retlw	58	;':'
  1743  07E9  3400               	retlw	0
  1744                           
  1745                           	psect	stringtext17
  1746  0000                     __pstringtext17:	
  1747  055A                     
  1748                           ; #config settings
  1749  0000                     
  1750                           	psect	cinit
  1751  0041                     start_initialization:	
  1752  0041                     __initialization:	
  1753                           
  1754                           ; Clear objects allocated to COMMON
  1755  0041  01F9               	clrf	__pbssCOMMON& (0+127)
  1756  0042  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
  1757                           
  1758                           ; Clear objects allocated to BANK0
  1759  0043  304C               	movlw	low __pbssBANK0
  1760  0044  0084               	movwf	4
  1761  0045  3000               	movlw	high __pbssBANK0
  1762  0046  0085               	movwf	5
  1763  0047  3022               	movlw	34
  1764  0048  278B               	fcall	clear_ram0
  1765                           
  1766                           ; Clear objects allocated to BANK1
  1767  0049  30A0               	movlw	low __pbssBANK1
  1768  004A  0084               	movwf	4
  1769  004B  3000               	movlw	high __pbssBANK1
  1770  004C  0085               	movwf	5
  1771  004D  3020               	movlw	32
  1772  004E  278B               	fcall	clear_ram0
  1773  004F                     end_of_initialization:	
  1774                           ;End of C runtime variable initialization code
  1775                           
  1776  004F                     __end_of__initialization:	
  1777  004F  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1778  0050  0020               	movlb	0
  1779  0051  2D7E               	ljmp	_main	;jump to C main() function
  1780                           
  1781                           	psect	bssCOMMON
  1782  0079                     __pbssCOMMON:	
  1783  0079                     _eusartTxBufferRemaining:	
  1784  0079                     	ds	1
  1785  007A                     _eusartTxHead:	
  1786  007A                     	ds	1
  1787                           
  1788                           	psect	bssBANK0
  1789  004C                     __pbssBANK0:	
  1790  004C                     _eusartTxBuffer:	
  1791  004C                     	ds	10
  1792  0056                     _ESP_external_message_handler:	
  1793  0056                     	ds	2
  1794  0058                     _TMR1_InterruptHandler:	
  1795  0058                     	ds	2
  1796  005A                     _timer1ReloadVal:	
  1797  005A                     	ds	2
  1798  005C                     _ADC_value:	
  1799  005C                     	ds	2
  1800  005E                     _EUSART_RxDefaultInterruptHandler:	
  1801  005E                     	ds	2
  1802  0060                     _EUSART_TxDefaultInterruptHandler:	
  1803  0060                     	ds	2
  1804  0062                     _IOC_value:	
  1805  0062                     	ds	1
  1806  0063                     _TMR1_state:	
  1807  0063                     	ds	1
  1808  0064                     _message_format:	
  1809  0064                     	ds	1
  1810  0065                     _esp_channel:	
  1811  0065                     	ds	1
  1812  0066                     _esp_read_data_index:	
  1813  0066                     	ds	1
  1814  0067                     _IOC_state:	
  1815  0067                     	ds	1
  1816  0068                     _ESP_wait_exception:	
  1817  0068                     	ds	1
  1818  0069                     _eusartRxCount:	
  1819  0069                     	ds	1
  1820  006A                     _eusartRxTail:	
  1821  006A                     	ds	1
  1822  006B                     _eusartRxHead:	
  1823  006B                     	ds	1
  1824  006C                     _eusartTxTail:	
  1825  006C                     	ds	1
  1826  006D                     _ADC_state:	
  1827  006D                     	ds	1
  1828                           
  1829                           	psect	bssBANK1
  1830  00A0                     __pbssBANK1:	
  1831  00A0                     _eusartRxBuffer:	
  1832  00A0                     	ds	12
  1833  00AC                     _esp_read_data:	
  1834  00AC                     	ds	20
  1835                           
  1836                           	psect	clrtext
  1837  078B                     clear_ram0:	
  1838                           ;	Called with FSR0 containing the base address, and
  1839                           ;	WREG with the size to clear
  1840                           
  1841  078B  0064               	clrwdt	;clear the watchdog before getting into this loop
  1842  078C                     clrloop0:	
  1843  078C  0180               	clrf	0	;clear RAM location pointed to by FSR
  1844  078D  3101               	addfsr 0,1
  1845  078E  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1846  078F  2F8C               	goto	clrloop0	;have we reached the end yet?
  1847  0790  3400               	retlw	0	;all done for this memory range, return
  1848                           
  1849                           	psect	cstackCOMMON
  1850  0070                     __pcstackCOMMON:	
  1851  0070                     ?_PIN_MANAGER_IOC:	
  1852  0070                     ?_TMR1_ISR:	
  1853                           ; 1 bytes @ 0x0
  1854                           
  1855  0070                     ?_EUSART_Receive_ISR:	
  1856                           ; 1 bytes @ 0x0
  1857                           
  1858  0070                     ??_EUSART_Receive_ISR:	
  1859                           ; 1 bytes @ 0x0
  1860                           
  1861  0070                     ?_EUSART_Transmit_ISR:	
  1862                           ; 1 bytes @ 0x0
  1863                           
  1864  0070                     ??_EUSART_Transmit_ISR:	
  1865                           ; 1 bytes @ 0x0
  1866                           
  1867  0070                     ?_PIN_MANAGER_Initialize:	
  1868                           ; 1 bytes @ 0x0
  1869                           
  1870  0070                     ?_OSCILLATOR_Initialize:	
  1871                           ; 1 bytes @ 0x0
  1872                           
  1873  0070                     ?_WDT_Initialize:	
  1874                           ; 1 bytes @ 0x0
  1875                           
  1876  0070                     ?_TMR1_Initialize:	
  1877                           ; 1 bytes @ 0x0
  1878                           
  1879  0070                     ?_TMR1_DefaultInterruptHandler:	
  1880                           ; 1 bytes @ 0x0
  1881                           
  1882  0070                     ??_TMR1_DefaultInterruptHandler:	
  1883                           ; 1 bytes @ 0x0
  1884                           
  1885  0070                     ?_IOCAF4_DefaultInterruptHandler:	
  1886                           ; 1 bytes @ 0x0
  1887                           
  1888  0070                     ??_IOCAF4_DefaultInterruptHandler:	
  1889                           ; 1 bytes @ 0x0
  1890                           
  1891  0070                     ?_IOCAF4_ISR:	
  1892                           ; 1 bytes @ 0x0
  1893                           
  1894  0070                     ?_ESP_initialize:	
  1895                           ; 1 bytes @ 0x0
  1896                           
  1897  0070                     ?_logger_initialize:	
  1898                           ; 1 bytes @ 0x0
  1899                           
  1900  0070                     ?_ESP_config:	
  1901                           ; 1 bytes @ 0x0
  1902                           
  1903  0070                     ?_ESP_message_handler:	
  1904                           ; 1 bytes @ 0x0
  1905                           
  1906  0070                     ?_read_analog:	
  1907                           ; 1 bytes @ 0x0
  1908                           
  1909  0070                     ?_process_ioc:	
  1910                           ; 1 bytes @ 0x0
  1911                           
  1912  0070                     ?_ESP_process_message:	
  1913                           ; 1 bytes @ 0x0
  1914                           
  1915  0070                     ?_ESP_wait_for:	
  1916                           ; 1 bytes @ 0x0
  1917                           
  1918  0070                     ?__TMR1_Ready:	
  1919                           ; 1 bytes @ 0x0
  1920                           
  1921  0070                     ??__TMR1_Ready:	
  1922                           ; 1 bytes @ 0x0
  1923                           
  1924  0070                     ?__IOC_Ready:	
  1925                           ; 1 bytes @ 0x0
  1926                           
  1927  0070                     ??__IOC_Ready:	
  1928                           ; 1 bytes @ 0x0
  1929                           
  1930  0070                     ?_toggle_format:	
  1931                           ; 1 bytes @ 0x0
  1932                           
  1933  0070                     ?_ADC_Initialize:	
  1934                           ; 1 bytes @ 0x0
  1935                           
  1936  0070                     ?_ADC_SelectChannel:	
  1937                           ; 1 bytes @ 0x0
  1938                           
  1939  0070                     ?_ADC_StartConversion:	
  1940                           ; 1 bytes @ 0x0
  1941                           
  1942  0070                     ?_ADC_ISR:	
  1943                           ; 1 bytes @ 0x0
  1944                           
  1945  0070                     ??_ADC_ISR:	
  1946                           ; 1 bytes @ 0x0
  1947                           
  1948  0070                     ?_INTERRUPT_InterruptManager:	
  1949                           ; 1 bytes @ 0x0
  1950                           
  1951  0070                     ?_EUSART_Initialize:	
  1952                           ; 1 bytes @ 0x0
  1953                           
  1954  0070                     ?_EUSART_is_tx_ready:	
  1955                           ; 1 bytes @ 0x0
  1956                           
  1957  0070                     ?_EUSART_is_rx_ready:	
  1958                           ; 1 bytes @ 0x0
  1959                           
  1960  0070                     ?_EUSART_Read:	
  1961                           ; 1 bytes @ 0x0
  1962                           
  1963  0070                     ?_EUSART_Write:	
  1964                           ; 1 bytes @ 0x0
  1965                           
  1966  0070                     ?_SYSTEM_Initialize:	
  1967                           ; 1 bytes @ 0x0
  1968                           
  1969  0070                     ?_TMR1_StartTimer:	
  1970                           ; 1 bytes @ 0x0
  1971                           
  1972  0070                     ?_TMR1_StopTimer:	
  1973                           ; 1 bytes @ 0x0
  1974                           
  1975  0070                     ?_TMR1_WriteTimer:	
  1976                           ; 1 bytes @ 0x0
  1977                           
  1978  0070                     ?_main:	
  1979                           ; 1 bytes @ 0x0
  1980                           
  1981  0070                     ?_ESP_read:	
  1982                           ; 1 bytes @ 0x0
  1983                           
  1984  0070                     ?_ESP_process_rx_data:	
  1985                           ; 1 bytes @ 0x0
  1986                           
  1987  0070                     ?i1_ADC_StartConversion:	
  1988                           ; 1 bytes @ 0x0
  1989                           
  1990  0070                     ??i1_ADC_StartConversion:	
  1991                           ; 1 bytes @ 0x0
  1992                           
  1993  0070                     ?_ADC_GetConversionResult:	
  1994                           ; 1 bytes @ 0x0
  1995                           
  1996  0070                     TMR1_WriteTimer@timerVal:	
  1997                           ; 2 bytes @ 0x0
  1998                           
  1999                           
  2000                           ; 2 bytes @ 0x0
  2001  0070                     	ds	1
  2002  0071                     ??_PIN_MANAGER_IOC:	
  2003  0071                     ??_IOCAF4_ISR:	
  2004                           ; 1 bytes @ 0x1
  2005                           
  2006                           
  2007                           ; 1 bytes @ 0x1
  2008  0071                     	ds	1
  2009  0072                     ??_TMR1_ISR:	
  2010  0072                     ??_ADC_GetConversionResult:	
  2011                           ; 1 bytes @ 0x2
  2012                           
  2013  0072                     ??_INTERRUPT_InterruptManager:	
  2014                           ; 1 bytes @ 0x2
  2015                           
  2016  0072                     ??_TMR1_WriteTimer:	
  2017                           ; 1 bytes @ 0x2
  2018                           
  2019                           
  2020                           ; 1 bytes @ 0x2
  2021  0072                     	ds	1
  2022  0073                     ?_EUSART_SetRxInterruptHandler:	
  2023  0073                     ?_EUSART_SetTxInterruptHandler:	
  2024                           ; 1 bytes @ 0x3
  2025                           
  2026  0073                     ??_OSCILLATOR_Initialize:	
  2027                           ; 1 bytes @ 0x3
  2028                           
  2029  0073                     ??_WDT_Initialize:	
  2030                           ; 1 bytes @ 0x3
  2031                           
  2032  0073                     ?_TMR1_SetInterruptHandler:	
  2033                           ; 1 bytes @ 0x3
  2034                           
  2035  0073                     ?_IOCAF4_SetInterruptHandler:	
  2036                           ; 1 bytes @ 0x3
  2037                           
  2038  0073                     ?_ESP_Set_application_handler:	
  2039                           ; 1 bytes @ 0x3
  2040                           
  2041  0073                     ??_toggle_format:	
  2042                           ; 1 bytes @ 0x3
  2043                           
  2044  0073                     ?_strchr:	
  2045                           ; 1 bytes @ 0x3
  2046                           
  2047  0073                     ??_ADC_Initialize:	
  2048                           ; 1 bytes @ 0x3
  2049                           
  2050  0073                     ??_ADC_SelectChannel:	
  2051                           ; 1 bytes @ 0x3
  2052                           
  2053  0073                     ??_ADC_StartConversion:	
  2054                           ; 1 bytes @ 0x3
  2055                           
  2056  0073                     ??_EUSART_is_tx_ready:	
  2057                           ; 1 bytes @ 0x3
  2058                           
  2059  0073                     ??_EUSART_is_rx_ready:	
  2060                           ; 1 bytes @ 0x3
  2061                           
  2062  0073                     ??_EUSART_Read:	
  2063                           ; 1 bytes @ 0x3
  2064                           
  2065  0073                     ??_EUSART_Write:	
  2066                           ; 1 bytes @ 0x3
  2067                           
  2068  0073                     ??_TMR1_StartTimer:	
  2069                           ; 1 bytes @ 0x3
  2070                           
  2071  0073                     ??_TMR1_StopTimer:	
  2072                           ; 1 bytes @ 0x3
  2073                           
  2074  0073                     ??___lmul:	
  2075                           ; 1 bytes @ 0x3
  2076                           
  2077  0073                     ?_strlen:	
  2078                           ; 1 bytes @ 0x3
  2079                           
  2080  0073                     ?_strncmp:	
  2081                           ; 2 bytes @ 0x3
  2082                           
  2083  0073                     ?___awdiv:	
  2084                           ; 2 bytes @ 0x3
  2085                           
  2086  0073                     ?___awmod:	
  2087                           ; 2 bytes @ 0x3
  2088                           
  2089  0073                     ?___lwdiv:	
  2090                           ; 2 bytes @ 0x3
  2091                           
  2092  0073                     ?___lwmod:	
  2093                           ; 2 bytes @ 0x3
  2094                           
  2095  0073                     EUSART_SetTxInterruptHandler@interruptHandler:	
  2096                           ; 2 bytes @ 0x3
  2097                           
  2098  0073                     EUSART_SetRxInterruptHandler@interruptHandler:	
  2099                           ; 2 bytes @ 0x3
  2100                           
  2101  0073                     TMR1_SetInterruptHandler@InterruptHandler:	
  2102                           ; 2 bytes @ 0x3
  2103                           
  2104  0073                     IOCAF4_SetInterruptHandler@InterruptHandler:	
  2105                           ; 2 bytes @ 0x3
  2106                           
  2107  0073                     ESP_Set_application_handler@applicationHandler:	
  2108                           ; 2 bytes @ 0x3
  2109                           
  2110  0073                     ___awdiv@divisor:	
  2111                           ; 2 bytes @ 0x3
  2112                           
  2113  0073                     ___awmod@divisor:	
  2114                           ; 2 bytes @ 0x3
  2115                           
  2116  0073                     ___lwdiv@divisor:	
  2117                           ; 2 bytes @ 0x3
  2118                           
  2119  0073                     ___lwmod@divisor:	
  2120                           ; 2 bytes @ 0x3
  2121                           
  2122  0073                     strchr@c:	
  2123                           ; 2 bytes @ 0x3
  2124                           
  2125  0073                     strlen@s:	
  2126                           ; 2 bytes @ 0x3
  2127                           
  2128  0073                     strncmp@_r:	
  2129                           ; 2 bytes @ 0x3
  2130                           
  2131  0073                     ___lmul@product:	
  2132                           ; 2 bytes @ 0x3
  2133                           
  2134                           
  2135                           ; 4 bytes @ 0x3
  2136  0073                     	ds	1
  2137  0074                     ?_process_message:	
  2138  0074                     ?_ESP_default_application_handler:	
  2139                           ; 1 bytes @ 0x4
  2140                           
  2141  0074                     ADC_SelectChannel@channel:	
  2142                           ; 1 bytes @ 0x4
  2143                           
  2144  0074                     EUSART_Read@readValue:	
  2145                           ; 1 bytes @ 0x4
  2146                           
  2147  0074                     EUSART_Write@txData:	
  2148                           ; 1 bytes @ 0x4
  2149                           
  2150  0074                     ESP_default_application_handler@data:	
  2151                           ; 1 bytes @ 0x4
  2152                           
  2153  0074                     process_message@message:	
  2154                           ; 1 bytes @ 0x4
  2155                           
  2156                           
  2157                           ; 1 bytes @ 0x4
  2158  0074                     	ds	1
  2159  0075                     ??_EUSART_SetRxInterruptHandler:	
  2160  0075                     ??_EUSART_SetTxInterruptHandler:	
  2161                           ; 1 bytes @ 0x5
  2162                           
  2163  0075                     ??_PIN_MANAGER_Initialize:	
  2164                           ; 1 bytes @ 0x5
  2165                           
  2166  0075                     ??_TMR1_Initialize:	
  2167                           ; 1 bytes @ 0x5
  2168                           
  2169  0075                     ??_TMR1_SetInterruptHandler:	
  2170                           ; 1 bytes @ 0x5
  2171                           
  2172  0075                     ??_IOCAF4_SetInterruptHandler:	
  2173                           ; 1 bytes @ 0x5
  2174                           
  2175  0075                     ??_ESP_initialize:	
  2176                           ; 1 bytes @ 0x5
  2177                           
  2178  0075                     ??_logger_initialize:	
  2179                           ; 1 bytes @ 0x5
  2180                           
  2181  0075                     ??_process_message:	
  2182                           ; 1 bytes @ 0x5
  2183                           
  2184  0075                     ??_ESP_Set_application_handler:	
  2185                           ; 1 bytes @ 0x5
  2186                           
  2187  0075                     ??_ESP_default_application_handler:	
  2188                           ; 1 bytes @ 0x5
  2189                           
  2190  0075                     ??_strlen:	
  2191                           ; 1 bytes @ 0x5
  2192                           
  2193  0075                     ??_strchr:	
  2194                           ; 1 bytes @ 0x5
  2195                           
  2196  0075                     ??_EUSART_Initialize:	
  2197                           ; 1 bytes @ 0x5
  2198                           
  2199  0075                     ?__puts:	
  2200                           ; 1 bytes @ 0x5
  2201                           
  2202  0075                     ?_write:	
  2203                           ; 1 bytes @ 0x5
  2204                           
  2205  0075                     strchr@s:	
  2206                           ; 1 bytes @ 0x5
  2207                           
  2208  0075                     __puts@pt:	
  2209                           ; 1 bytes @ 0x5
  2210                           
  2211  0075                     write@pt:	
  2212                           ; 2 bytes @ 0x5
  2213                           
  2214  0075                     ___awdiv@dividend:	
  2215                           ; 2 bytes @ 0x5
  2216                           
  2217  0075                     ___awmod@dividend:	
  2218                           ; 2 bytes @ 0x5
  2219                           
  2220  0075                     ___lwdiv@dividend:	
  2221                           ; 2 bytes @ 0x5
  2222                           
  2223  0075                     ___lwmod@dividend:	
  2224                           ; 2 bytes @ 0x5
  2225                           
  2226  0075                     strncmp@n:	
  2227                           ; 2 bytes @ 0x5
  2228                           
  2229                           
  2230                           ; 2 bytes @ 0x5
  2231  0075                     	ds	1
  2232  0076                     ??_SYSTEM_Initialize:	
  2233                           
  2234                           ; 1 bytes @ 0x6
  2235  0076                     	ds	1
  2236  0077                     ??_strncmp:	
  2237  0077                     ??___awdiv:	
  2238                           ; 1 bytes @ 0x7
  2239                           
  2240  0077                     ??___awmod:	
  2241                           ; 1 bytes @ 0x7
  2242                           
  2243  0077                     ??___lwdiv:	
  2244                           ; 1 bytes @ 0x7
  2245                           
  2246  0077                     ??___lwmod:	
  2247                           ; 1 bytes @ 0x7
  2248                           
  2249  0077                     __puts@index:	
  2250                           ; 1 bytes @ 0x7
  2251                           
  2252  0077                     write@lenght:	
  2253                           ; 1 bytes @ 0x7
  2254                           
  2255  0077                     strlen@a:	
  2256                           ; 1 bytes @ 0x7
  2257                           
  2258                           
  2259                           ; 2 bytes @ 0x7
  2260  0077                     	ds	1
  2261  0078                     write@i:	
  2262  0078                     ___lwmod@counter:	
  2263                           ; 1 bytes @ 0x8
  2264                           
  2265                           
  2266                           ; 1 bytes @ 0x8
  2267  0078                     	ds	1
  2268                           
  2269                           	psect	cstackBANK0
  2270  0020                     __pcstackBANK0:	
  2271  0020                     ??__puts:	
  2272  0020                     ??_write:	
  2273                           ; 1 bytes @ 0x0
  2274                           
  2275  0020                     ?___lmul:	
  2276                           ; 1 bytes @ 0x0
  2277                           
  2278  0020                     ___awdiv@counter:	
  2279                           ; 4 bytes @ 0x0
  2280                           
  2281  0020                     ___awmod@counter:	
  2282                           ; 1 bytes @ 0x0
  2283                           
  2284  0020                     ___lwdiv@counter:	
  2285                           ; 1 bytes @ 0x0
  2286                           
  2287  0020                     strncmp@_l:	
  2288                           ; 1 bytes @ 0x0
  2289                           
  2290  0020                     ___lmul@multiplier:	
  2291                           ; 1 bytes @ 0x0
  2292                           
  2293                           
  2294                           ; 4 bytes @ 0x0
  2295  0020                     	ds	1
  2296  0021                     ___awdiv@sign:	
  2297  0021                     ___awmod@sign:	
  2298                           ; 1 bytes @ 0x1
  2299                           
  2300  0021                     ___lwdiv@quotient:	
  2301                           ; 1 bytes @ 0x1
  2302                           
  2303  0021                     strncmp@r:	
  2304                           ; 2 bytes @ 0x1
  2305                           
  2306                           
  2307                           ; 2 bytes @ 0x1
  2308  0021                     	ds	1
  2309  0022                     ___awdiv@quotient:	
  2310                           
  2311                           ; 2 bytes @ 0x2
  2312  0022                     	ds	1
  2313  0023                     ?__sprintf:	
  2314  0023                     strncmp@l:	
  2315                           ; 1 bytes @ 0x3
  2316                           
  2317  0023                     __sprintf@val:	
  2318                           ; 1 bytes @ 0x3
  2319                           
  2320                           
  2321                           ; 2 bytes @ 0x3
  2322  0023                     	ds	1
  2323  0024                     ?_strstr:	
  2324  0024                     strstr@n:	
  2325                           ; 1 bytes @ 0x4
  2326                           
  2327  0024                     ___lmul@multiplicand:	
  2328                           ; 2 bytes @ 0x4
  2329                           
  2330                           
  2331                           ; 4 bytes @ 0x4
  2332  0024                     	ds	1
  2333  0025                     ??__sprintf:	
  2334                           
  2335                           ; 1 bytes @ 0x5
  2336  0025                     	ds	1
  2337  0026                     ??_strstr:	
  2338  0026                     __sprintf@aux:	
  2339                           ; 1 bytes @ 0x6
  2340                           
  2341                           
  2342                           ; 2 bytes @ 0x6
  2343  0026                     	ds	2
  2344  0028                     __sprintf@mess:	
  2345                           
  2346                           ; 1 bytes @ 0x8
  2347  0028                     	ds	1
  2348  0029                     strstr@nl:	
  2349                           
  2350                           ; 2 bytes @ 0x9
  2351  0029                     	ds	2
  2352  002B                     strstr@h:	
  2353                           
  2354                           ; 1 bytes @ 0xB
  2355  002B                     	ds	1
  2356  002C                     ??_ESP_process_message:	
  2357  002C                     ??_ESP_process_rx_data:	
  2358                           ; 1 bytes @ 0xC
  2359                           
  2360                           
  2361                           ; 1 bytes @ 0xC
  2362  002C                     	ds	1
  2363  002D                     ESP_process_message@aux:	
  2364                           
  2365                           ; 1 bytes @ 0xD
  2366  002D                     	ds	1
  2367  002E                     ??_ESP_read:	
  2368  002E                     ESP_process_rx_data@index:	
  2369                           ; 1 bytes @ 0xE
  2370                           
  2371                           
  2372                           ; 1 bytes @ 0xE
  2373  002E                     	ds	1
  2374  002F                     ESP_read@ret:	
  2375  002F                     ESP_process_rx_data@aux:	
  2376                           ; 1 bytes @ 0xF
  2377                           
  2378                           
  2379                           ; 1 bytes @ 0xF
  2380  002F                     	ds	1
  2381  0030                     ??_ESP_message_handler:	
  2382  0030                     ??_ESP_wait_for:	
  2383                           ; 1 bytes @ 0x10
  2384                           
  2385                           
  2386                           ; 1 bytes @ 0x10
  2387  0030                     	ds	1
  2388  0031                     ESP_wait_for@esp_mess:	
  2389                           
  2390                           ; 1 bytes @ 0x11
  2391  0031                     	ds	1
  2392  0032                     ESP_wait_for@ret:	
  2393  0032                     ESP_message_handler@ret:	
  2394                           ; 1 bytes @ 0x12
  2395                           
  2396                           
  2397                           ; 1 bytes @ 0x12
  2398  0032                     	ds	1
  2399  0033                     ??_ESP_config:	
  2400  0033                     ?_ESP_write:	
  2401                           ; 1 bytes @ 0x13
  2402                           
  2403  0033                     ESP_write@pt:	
  2404                           ; 1 bytes @ 0x13
  2405                           
  2406                           
  2407                           ; 2 bytes @ 0x13
  2408  0033                     	ds	2
  2409  0035                     ESP_write@length:	
  2410                           
  2411                           ; 1 bytes @ 0x15
  2412  0035                     	ds	1
  2413  0036                     ??_ESP_write:	
  2414                           
  2415                           ; 1 bytes @ 0x16
  2416  0036                     	ds	3
  2417  0039                     ESP_write@res:	
  2418                           
  2419                           ; 1 bytes @ 0x19
  2420  0039                     	ds	1
  2421  003A                     ESP_write@aux:	
  2422                           
  2423                           ; 1 bytes @ 0x1A
  2424  003A                     	ds	1
  2425  003B                     ??_read_analog:	
  2426  003B                     ??_process_ioc:	
  2427                           ; 1 bytes @ 0x1B
  2428                           
  2429                           
  2430                           ; 1 bytes @ 0x1B
  2431  003B                     	ds	4
  2432  003F                     read_analog@aux1:	
  2433                           
  2434                           ; 4 bytes @ 0x1F
  2435  003F                     	ds	4
  2436  0043                     read_analog@mess:	
  2437                           
  2438                           ; 6 bytes @ 0x23
  2439  0043                     	ds	6
  2440  0049                     read_analog@adc_val:	
  2441                           
  2442                           ; 2 bytes @ 0x29
  2443  0049                     	ds	2
  2444  004B                     ??_main:	
  2445                           
  2446                           ; 1 bytes @ 0x2B
  2447  004B                     	ds	1
  2448                           
  2449                           	psect	maintext
  2450  057E                     __pmaintext:	
  2451 ;;
  2452 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2453 ;;
  2454 ;; *************** function _main *****************
  2455 ;; Defined at:
  2456 ;;		line 52 in file "main.c"
  2457 ;; Parameters:    Size  Location     Type
  2458 ;;		None
  2459 ;; Auto vars:     Size  Location     Type
  2460 ;;		None
  2461 ;; Return value:  Size  Location     Type
  2462 ;;                  1    wreg      void 
  2463 ;; Registers used:
  2464 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2465 ;; Tracked objects:
  2466 ;;		On entry : B1F/0
  2467 ;;		On exit  : 0/0
  2468 ;;		Unchanged: 0/0
  2469 ;; Data sizes:     COMMON   BANK0   BANK1
  2470 ;;      Params:         0       0       0
  2471 ;;      Locals:         0       0       0
  2472 ;;      Temps:          0       1       0
  2473 ;;      Totals:         0       1       0
  2474 ;;Total ram usage:        1 bytes
  2475 ;; Hardware stack levels required when called:   11
  2476 ;; This function calls:
  2477 ;;		_ESP_config
  2478 ;;		_ESP_initialize
  2479 ;;		_ESP_message_handler
  2480 ;;		_EUSART_is_rx_ready
  2481 ;;		_SYSTEM_Initialize
  2482 ;;		_logger_initialize
  2483 ;;		_process_ioc
  2484 ;;		_process_message
  2485 ;;		_read_analog
  2486 ;; This function is called by:
  2487 ;;		Startup code after reset
  2488 ;; This function uses a non-reentrant model
  2489 ;;
  2490                           
  2491                           
  2492                           ;psect for function _main
  2493  057E                     _main:	
  2494                           
  2495                           ;main.c: 55:     SYSTEM_Initialize();
  2496                           
  2497                           ;incstack = 0
  2498                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2499  057E  277E               	fcall	_SYSTEM_Initialize
  2500                           
  2501                           ;main.c: 58:     ESP_initialize();
  2502  057F  275E               	fcall	_ESP_initialize
  2503                           
  2504                           ;main.c: 61:     logger_initialize();
  2505  0580  25BE               	fcall	_logger_initialize
  2506                           
  2507                           ;main.c: 66:     (INTCONbits.GIE = 1);
  2508  0581  178B               	bsf	11,7	;volatile
  2509                           
  2510                           ;main.c: 69:     (INTCONbits.PEIE = 1);
  2511  0582  170B               	bsf	11,6	;volatile
  2512                           
  2513                           ;main.c: 77:     ESP_config();
  2514  0583  2383               	fcall	_ESP_config
  2515  0584                     l3324:	
  2516                           ;main.c: 80:     while (1)
  2517                           
  2518                           
  2519                           ;main.c: 81:     {;main.c: 84:          if (EUSART_is_rx_ready()) {
  2520  0584  27DD               	fcall	_EUSART_is_rx_ready
  2521  0585  3A00               	xorlw	0
  2522  0586  1903               	skipnz
  2523  0587  2D89               	goto	l3328
  2524                           
  2525                           ;main.c: 88:                 ESP_message_handler();
  2526  0588  247A               	fcall	_ESP_message_handler
  2527  0589                     l3328:	
  2528                           ;main.c: 90:         }
  2529                           
  2530                           
  2531                           ;main.c: 92:           if (ADC_state == ADC_READY) {
  2532  0589  0020               	movlb	0	; select bank0
  2533  058A  036D               	decf	_ADC_state,w	;volatile
  2534  058B  1D03               	btfss	3,2
  2535  058C  2D8E               	goto	l3332
  2536                           
  2537                           ;main.c: 93:             read_analog();
  2538  058D  21BC               	fcall	_read_analog
  2539  058E                     l3332:	
  2540                           ;main.c: 94:         }
  2541                           
  2542                           
  2543                           ;main.c: 97:         if (ESP_wait_exception) {
  2544  058E  0020               	movlb	0	; select bank0
  2545  058F  0868               	movf	_ESP_wait_exception,w	;volatile
  2546  0590  1903               	btfsc	3,2
  2547  0591  2D98               	goto	l3338
  2548                           
  2549                           ;main.c: 98:             ESP_wait_exception = 0;
  2550  0592  01E8               	clrf	_ESP_wait_exception	;volatile
  2551                           
  2552                           ;main.c: 99:             process_message('S');
  2553  0593  3053               	movlw	83
  2554  0594  00CB               	movwf	??_main
  2555  0595  084B               	movf	??_main,w
  2556  0596  00F4               	movwf	process_message@message
  2557  0597  234C               	fcall	_process_message
  2558  0598                     l3338:	
  2559                           ;main.c: 100:         }
  2560                           
  2561                           
  2562                           ;main.c: 103:         if (IOC_state == IOC_READY) {
  2563  0598  0020               	movlb	0	; select bank0
  2564  0599  0367               	decf	_IOC_state,w	;volatile
  2565  059A  1D03               	btfss	3,2
  2566  059B  2D84               	goto	l3324
  2567                           
  2568                           ;main.c: 104:             process_ioc();
  2569  059C  25DD               	fcall	_process_ioc
  2570                           
  2571                           ;main.c: 108:     }
  2572                           
  2573                           ;main.c: 105:         }
  2574  059D  2D84               	goto	l3324
  2575  059E                     __end_of_main:	
  2576                           
  2577                           	psect	text1
  2578  01BC                     __ptext1:	
  2579 ;; *************** function _read_analog *****************
  2580 ;; Defined at:
  2581 ;;		line 92 in file "logger.c"
  2582 ;; Parameters:    Size  Location     Type
  2583 ;;		None
  2584 ;; Auto vars:     Size  Location     Type
  2585 ;;  mess            6   35[BANK0 ] unsigned char [6]
  2586 ;;  aux1            4   31[BANK0 ] unsigned long 
  2587 ;;  adc_val         2   41[BANK0 ] unsigned short 
  2588 ;; Return value:  Size  Location     Type
  2589 ;;                  1    wreg      void 
  2590 ;; Registers used:
  2591 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2592 ;; Tracked objects:
  2593 ;;		On entry : 0/0
  2594 ;;		On exit  : 0/0
  2595 ;;		Unchanged: 0/0
  2596 ;; Data sizes:     COMMON   BANK0   BANK1
  2597 ;;      Params:         0       0       0
  2598 ;;      Locals:         0      12       0
  2599 ;;      Temps:          0       4       0
  2600 ;;      Totals:         0      16       0
  2601 ;;Total ram usage:       16 bytes
  2602 ;; Hardware stack levels used:    1
  2603 ;; Hardware stack levels required when called:   10
  2604 ;; This function calls:
  2605 ;;		_ESP_wait_for
  2606 ;;		_ESP_write
  2607 ;;		___lmul
  2608 ;;		__sprintf
  2609 ;; This function is called by:
  2610 ;;		_main
  2611 ;; This function uses a non-reentrant model
  2612 ;;
  2613                           
  2614                           
  2615                           ;psect for function _read_analog
  2616  01BC                     _read_analog:	
  2617                           
  2618                           ;logger.c: 94:     unsigned short adc_val;;logger.c: 96:     unsigned long aux1;;logger.
      +                          c: 97:     unsigned char mess[6];;logger.c: 99:     adc_val = ADC_value;
  2619                           
  2620                           ;incstack = 0
  2621                           ; Regs used in _read_analog: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2622  01BC  0020               	movlb	0	; select bank0
  2623  01BD  085D               	movf	_ADC_value+1,w	;volatile
  2624  01BE  00CA               	movwf	read_analog@adc_val+1
  2625  01BF  085C               	movf	_ADC_value,w	;volatile
  2626  01C0  00C9               	movwf	read_analog@adc_val
  2627                           
  2628                           ;logger.c: 100:     ADC_state = ADC_IDLE;
  2629  01C1  01ED               	clrf	_ADC_state	;volatile
  2630                           
  2631                           ;logger.c: 102:     if (message_format == MESSAGE_BINARY) {
  2632  01C2  0864               	movf	_message_format,w	;volatile
  2633  01C3  1D03               	btfss	3,2
  2634  01C4  29D9               	goto	l3296
  2635                           
  2636                           ;logger.c: 103:         mess[0] = (unsigned char)(adc_val & 0xff);
  2637  01C5  0849               	movf	read_analog@adc_val,w
  2638  01C6  00BB               	movwf	??_read_analog
  2639  01C7  083B               	movf	??_read_analog,w
  2640  01C8  00C3               	movwf	read_analog@mess
  2641                           
  2642                           ;logger.c: 104:         mess[1] = (unsigned char)((adc_val >> 8) & 0xff);
  2643  01C9  084A               	movf	read_analog@adc_val+1,w
  2644  01CA  00BB               	movwf	??_read_analog
  2645  01CB  083B               	movf	??_read_analog,w
  2646  01CC  00C4               	movwf	read_analog@mess+1
  2647                           
  2648                           ;logger.c: 110:         ESP_write(mess,2);
  2649  01CD  3043               	movlw	low read_analog@mess
  2650  01CE  00B3               	movwf	ESP_write@pt
  2651  01CF  3000               	movlw	high read_analog@mess
  2652  01D0  00B4               	movwf	ESP_write@pt+1
  2653  01D1  3002               	movlw	2
  2654  01D2  00BB               	movwf	??_read_analog
  2655  01D3  083B               	movf	??_read_analog,w
  2656  01D4  00B5               	movwf	ESP_write@length
  2657  01D5  20D8               	fcall	_ESP_write
  2658                           
  2659                           ;logger.c: 111:         ESP_wait_for(ESP_SEND_OK);
  2660  01D6  3001               	movlw	1
  2661  01D7  24CA               	fcall	_ESP_wait_for
  2662                           
  2663                           ;logger.c: 114:     } else {
  2664  01D8  0008               	return
  2665  01D9                     l3296:	
  2666                           
  2667                           ;logger.c: 117:             aux1 = (unsigned long)adc_val*3300UL;
  2668  01D9  0020               	movlb	0	; select bank0
  2669  01DA  0849               	movf	read_analog@adc_val,w
  2670  01DB  00A0               	movwf	___lmul@multiplier
  2671  01DC  084A               	movf	read_analog@adc_val+1,w
  2672  01DD  00A1               	movwf	___lmul@multiplier+1
  2673  01DE  01A2               	clrf	___lmul@multiplier+2
  2674  01DF  01A3               	clrf	___lmul@multiplier+3
  2675  01E0  3000               	movlw	0
  2676  01E1  00A7               	movwf	___lmul@multiplicand+3
  2677  01E2  3000               	movlw	0
  2678  01E3  00A6               	movwf	___lmul@multiplicand+2
  2679  01E4  300C               	movlw	12
  2680  01E5  00A5               	movwf	___lmul@multiplicand+1
  2681  01E6  30E4               	movlw	228
  2682  01E7  00A4               	movwf	___lmul@multiplicand
  2683  01E8  23EF               	fcall	___lmul
  2684  01E9  0020               	movlb	0	; select bank0
  2685  01EA  0823               	movf	?___lmul+3,w
  2686  01EB  00C2               	movwf	read_analog@aux1+3
  2687  01EC  0822               	movf	?___lmul+2,w
  2688  01ED  00C1               	movwf	read_analog@aux1+2
  2689  01EE  0821               	movf	?___lmul+1,w
  2690  01EF  00C0               	movwf	read_analog@aux1+1
  2691  01F0  0820               	movf	?___lmul,w
  2692  01F1  00BF               	movwf	read_analog@aux1
  2693                           
  2694                           ;logger.c: 118:             adc_val = (unsigned short)(aux1 >> 10);
  2695  01F2  083F               	movf	read_analog@aux1,w
  2696  01F3  00BB               	movwf	??_read_analog
  2697  01F4  0840               	movf	read_analog@aux1+1,w
  2698  01F5  00BC               	movwf	??_read_analog+1
  2699  01F6  0841               	movf	read_analog@aux1+2,w
  2700  01F7  00BD               	movwf	??_read_analog+2
  2701  01F8  0842               	movf	read_analog@aux1+3,w
  2702  01F9  00BE               	movwf	??_read_analog+3
  2703  01FA  300A               	movlw	10
  2704  01FB                     u2715:	
  2705  01FB  36BE               	lsrf	??_read_analog+3,f
  2706  01FC  0CBD               	rrf	??_read_analog+2,f
  2707  01FD  0CBC               	rrf	??_read_analog+1,f
  2708  01FE  0CBB               	rrf	??_read_analog,f
  2709  01FF  0B89               	decfsz	9,f
  2710  0200  29FB               	goto	u2715
  2711  0201  083C               	movf	??_read_analog+1,w
  2712  0202  00CA               	movwf	read_analog@adc_val+1
  2713  0203  083B               	movf	??_read_analog,w
  2714  0204  00C9               	movwf	read_analog@adc_val
  2715                           
  2716                           ;logger.c: 120:             _sprintf(mess,adc_val);
  2717  0205  084A               	movf	read_analog@adc_val+1,w
  2718  0206  00A4               	movwf	__sprintf@val+1
  2719  0207  0849               	movf	read_analog@adc_val,w
  2720  0208  00A3               	movwf	__sprintf@val
  2721  0209  3043               	movlw	(low (read_analog@mess| 0))& (0+255)
  2722  020A  2052               	fcall	__sprintf
  2723                           
  2724                           ;logger.c: 121:             mess[5] = '\n';
  2725  020B  300A               	movlw	10
  2726  020C  0020               	movlb	0	; select bank0
  2727  020D  00BB               	movwf	??_read_analog
  2728  020E  083B               	movf	??_read_analog,w
  2729  020F  00C8               	movwf	read_analog@mess+5
  2730                           
  2731                           ;logger.c: 125:             ESP_write(mess,6);
  2732  0210  3043               	movlw	low read_analog@mess
  2733  0211  00B3               	movwf	ESP_write@pt
  2734  0212  3000               	movlw	high read_analog@mess
  2735  0213  00B4               	movwf	ESP_write@pt+1
  2736  0214  3006               	movlw	6
  2737  0215  00BB               	movwf	??_read_analog
  2738  0216  083B               	movf	??_read_analog,w
  2739  0217  00B5               	movwf	ESP_write@length
  2740  0218  20D8               	fcall	_ESP_write
  2741                           
  2742                           ;logger.c: 126:             ESP_wait_for(ESP_SEND_OK);
  2743  0219  3001               	movlw	1
  2744  021A  24CA               	fcall	_ESP_wait_for
  2745  021B  0008               	return
  2746  021C                     __end_of_read_analog:	
  2747                           ;logger.c: 130:     }
  2748                           
  2749                           
  2750                           	psect	text2
  2751  0052                     __ptext2:	
  2752 ;; *************** function __sprintf *****************
  2753 ;; Defined at:
  2754 ;;		line 25 in file "comm.c"
  2755 ;; Parameters:    Size  Location     Type
  2756 ;;  mess            1    wreg     PTR unsigned char 
  2757 ;;		 -> read_analog@mess(6), 
  2758 ;;  val             2    3[BANK0 ] unsigned short 
  2759 ;; Auto vars:     Size  Location     Type
  2760 ;;  mess            1    8[BANK0 ] PTR unsigned char 
  2761 ;;		 -> read_analog@mess(6), 
  2762 ;;  aux             2    6[BANK0 ] unsigned short 
  2763 ;; Return value:  Size  Location     Type
  2764 ;;                  1    wreg      void 
  2765 ;; Registers used:
  2766 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2767 ;; Tracked objects:
  2768 ;;		On entry : 0/0
  2769 ;;		On exit  : 0/0
  2770 ;;		Unchanged: 0/0
  2771 ;; Data sizes:     COMMON   BANK0   BANK1
  2772 ;;      Params:         0       2       0
  2773 ;;      Locals:         0       3       0
  2774 ;;      Temps:          0       1       0
  2775 ;;      Totals:         0       6       0
  2776 ;;Total ram usage:        6 bytes
  2777 ;; Hardware stack levels used:    1
  2778 ;; Hardware stack levels required when called:    5
  2779 ;; This function calls:
  2780 ;;		___lwdiv
  2781 ;;		___lwmod
  2782 ;; This function is called by:
  2783 ;;		_read_analog
  2784 ;; This function uses a non-reentrant model
  2785 ;;
  2786                           
  2787                           
  2788                           ;psect for function __sprintf
  2789  0052                     __sprintf:	
  2790                           
  2791                           ;incstack = 0
  2792                           ; Regs used in __sprintf: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2793                           ;__sprintf@mess stored from wreg
  2794  0052  0020               	movlb	0	; select bank0
  2795  0053  00A8               	movwf	__sprintf@mess
  2796                           
  2797                           ;comm.c: 25: void _sprintf(char *mess, unsigned short val);comm.c: 26: {;comm.c: 27:   u
      +                          nsigned short aux;;comm.c: 31:   aux = val%10;
  2798  0054  300A               	movlw	10
  2799  0055  00F3               	movwf	___lwmod@divisor
  2800  0056  3000               	movlw	0
  2801  0057  00F4               	movwf	___lwmod@divisor+1
  2802  0058  0824               	movf	__sprintf@val+1,w
  2803  0059  00F6               	movwf	___lwmod@dividend+1
  2804  005A  0823               	movf	__sprintf@val,w
  2805  005B  00F5               	movwf	___lwmod@dividend
  2806  005C  244E               	fcall	___lwmod
  2807  005D  0874               	movf	?___lwmod+1,w
  2808  005E  0020               	movlb	0	; select bank0
  2809  005F  00A7               	movwf	__sprintf@aux+1
  2810  0060  0873               	movf	?___lwmod,w
  2811  0061  00A6               	movwf	__sprintf@aux
  2812                           
  2813                           ;comm.c: 32:   val /= 10;
  2814  0062  300A               	movlw	10
  2815  0063  00F3               	movwf	___lwdiv@divisor
  2816  0064  3000               	movlw	0
  2817  0065  00F4               	movwf	___lwdiv@divisor+1
  2818  0066  0824               	movf	__sprintf@val+1,w
  2819  0067  00F6               	movwf	___lwdiv@dividend+1
  2820  0068  0823               	movf	__sprintf@val,w
  2821  0069  00F5               	movwf	___lwdiv@dividend
  2822  006A  23BA               	fcall	___lwdiv
  2823  006B  0874               	movf	?___lwdiv+1,w
  2824  006C  0020               	movlb	0	; select bank0
  2825  006D  00A4               	movwf	__sprintf@val+1
  2826  006E  0873               	movf	?___lwdiv,w
  2827  006F  00A3               	movwf	__sprintf@val
  2828                           
  2829                           ;comm.c: 34:   mess[5] = 0x00;
  2830  0070  0828               	movf	__sprintf@mess,w
  2831  0071  3E05               	addlw	5
  2832  0072  0086               	movwf	6
  2833  0073  0187               	clrf	7
  2834  0074  0181               	clrf	1
  2835                           
  2836                           ;comm.c: 36:   mess[4] = (unsigned char)aux+'0';
  2837  0075  0826               	movf	__sprintf@aux,w
  2838  0076  3E30               	addlw	48
  2839  0077  00A5               	movwf	??__sprintf
  2840  0078  0828               	movf	__sprintf@mess,w
  2841  0079  3E04               	addlw	4
  2842  007A  0086               	movwf	6
  2843  007B  0187               	clrf	7
  2844  007C  0825               	movf	??__sprintf,w
  2845  007D  0081               	movwf	1
  2846                           
  2847                           ;comm.c: 38:   aux = val%10;
  2848  007E  300A               	movlw	10
  2849  007F  00F3               	movwf	___lwmod@divisor
  2850  0080  3000               	movlw	0
  2851  0081  00F4               	movwf	___lwmod@divisor+1
  2852  0082  0824               	movf	__sprintf@val+1,w
  2853  0083  00F6               	movwf	___lwmod@dividend+1
  2854  0084  0823               	movf	__sprintf@val,w
  2855  0085  00F5               	movwf	___lwmod@dividend
  2856  0086  244E               	fcall	___lwmod
  2857  0087  0874               	movf	?___lwmod+1,w
  2858  0088  0020               	movlb	0	; select bank0
  2859  0089  00A7               	movwf	__sprintf@aux+1
  2860  008A  0873               	movf	?___lwmod,w
  2861  008B  00A6               	movwf	__sprintf@aux
  2862                           
  2863                           ;comm.c: 39:   val /= 10;
  2864  008C  300A               	movlw	10
  2865  008D  00F3               	movwf	___lwdiv@divisor
  2866  008E  3000               	movlw	0
  2867  008F  00F4               	movwf	___lwdiv@divisor+1
  2868  0090  0824               	movf	__sprintf@val+1,w
  2869  0091  00F6               	movwf	___lwdiv@dividend+1
  2870  0092  0823               	movf	__sprintf@val,w
  2871  0093  00F5               	movwf	___lwdiv@dividend
  2872  0094  23BA               	fcall	___lwdiv
  2873  0095  0874               	movf	?___lwdiv+1,w
  2874  0096  0020               	movlb	0	; select bank0
  2875  0097  00A4               	movwf	__sprintf@val+1
  2876  0098  0873               	movf	?___lwdiv,w
  2877  0099  00A3               	movwf	__sprintf@val
  2878                           
  2879                           ;comm.c: 41:   mess[3] = (unsigned char)aux+'0';
  2880  009A  0826               	movf	__sprintf@aux,w
  2881  009B  3E30               	addlw	48
  2882  009C  00A5               	movwf	??__sprintf
  2883  009D  0828               	movf	__sprintf@mess,w
  2884  009E  3E03               	addlw	3
  2885  009F  0086               	movwf	6
  2886  00A0  0187               	clrf	7
  2887  00A1  0825               	movf	??__sprintf,w
  2888  00A2  0081               	movwf	1
  2889                           
  2890                           ;comm.c: 43:   aux = val%10;
  2891  00A3  300A               	movlw	10
  2892  00A4  00F3               	movwf	___lwmod@divisor
  2893  00A5  3000               	movlw	0
  2894  00A6  00F4               	movwf	___lwmod@divisor+1
  2895  00A7  0824               	movf	__sprintf@val+1,w
  2896  00A8  00F6               	movwf	___lwmod@dividend+1
  2897  00A9  0823               	movf	__sprintf@val,w
  2898  00AA  00F5               	movwf	___lwmod@dividend
  2899  00AB  244E               	fcall	___lwmod
  2900  00AC  0874               	movf	?___lwmod+1,w
  2901  00AD  0020               	movlb	0	; select bank0
  2902  00AE  00A7               	movwf	__sprintf@aux+1
  2903  00AF  0873               	movf	?___lwmod,w
  2904  00B0  00A6               	movwf	__sprintf@aux
  2905                           
  2906                           ;comm.c: 44:   val /= 10;
  2907  00B1  300A               	movlw	10
  2908  00B2  00F3               	movwf	___lwdiv@divisor
  2909  00B3  3000               	movlw	0
  2910  00B4  00F4               	movwf	___lwdiv@divisor+1
  2911  00B5  0824               	movf	__sprintf@val+1,w
  2912  00B6  00F6               	movwf	___lwdiv@dividend+1
  2913  00B7  0823               	movf	__sprintf@val,w
  2914  00B8  00F5               	movwf	___lwdiv@dividend
  2915  00B9  23BA               	fcall	___lwdiv
  2916  00BA  0874               	movf	?___lwdiv+1,w
  2917  00BB  0020               	movlb	0	; select bank0
  2918  00BC  00A4               	movwf	__sprintf@val+1
  2919  00BD  0873               	movf	?___lwdiv,w
  2920  00BE  00A3               	movwf	__sprintf@val
  2921                           
  2922                           ;comm.c: 46:   mess[2] = (unsigned char)aux+'0';
  2923  00BF  0826               	movf	__sprintf@aux,w
  2924  00C0  3E30               	addlw	48
  2925  00C1  00A5               	movwf	??__sprintf
  2926  00C2  0828               	movf	__sprintf@mess,w
  2927  00C3  3E02               	addlw	2
  2928  00C4  0086               	movwf	6
  2929  00C5  0187               	clrf	7
  2930  00C6  0825               	movf	??__sprintf,w
  2931  00C7  0081               	movwf	1
  2932                           
  2933                           ;comm.c: 47:   mess[1] = '.';
  2934  00C8  302E               	movlw	46
  2935  00C9  00A5               	movwf	??__sprintf
  2936  00CA  0A28               	incf	__sprintf@mess,w
  2937  00CB  0086               	movwf	6
  2938  00CC  0187               	clrf	7
  2939  00CD  0825               	movf	??__sprintf,w
  2940  00CE  0081               	movwf	1
  2941                           
  2942                           ;comm.c: 48:   mess[0] = (unsigned char)val+'0';
  2943  00CF  0823               	movf	__sprintf@val,w
  2944  00D0  3E30               	addlw	48
  2945  00D1  00A5               	movwf	??__sprintf
  2946  00D2  0828               	movf	__sprintf@mess,w
  2947  00D3  0086               	movwf	6
  2948  00D4  0187               	clrf	7
  2949  00D5  0825               	movf	??__sprintf,w
  2950  00D6  0081               	movwf	1
  2951  00D7  0008               	return
  2952  00D8                     __end_of__sprintf:	
  2953                           
  2954                           	psect	text3
  2955  044E                     __ptext3:	
  2956 ;; *************** function ___lwmod *****************
  2957 ;; Defined at:
  2958 ;;		line 5 in file "/pkg/microchip/xc8/v2.00/pic/sources/c99/common/lwmod.c"
  2959 ;; Parameters:    Size  Location     Type
  2960 ;;  divisor         2    3[COMMON] unsigned int 
  2961 ;;  dividend        2    5[COMMON] unsigned int 
  2962 ;; Auto vars:     Size  Location     Type
  2963 ;;  counter         1    8[COMMON] unsigned char 
  2964 ;; Return value:  Size  Location     Type
  2965 ;;                  2    3[COMMON] unsigned int 
  2966 ;; Registers used:
  2967 ;;		wreg, status,2, status,0
  2968 ;; Tracked objects:
  2969 ;;		On entry : 0/0
  2970 ;;		On exit  : 0/0
  2971 ;;		Unchanged: 0/0
  2972 ;; Data sizes:     COMMON   BANK0   BANK1
  2973 ;;      Params:         4       0       0
  2974 ;;      Locals:         1       0       0
  2975 ;;      Temps:          1       0       0
  2976 ;;      Totals:         6       0       0
  2977 ;;Total ram usage:        6 bytes
  2978 ;; Hardware stack levels used:    1
  2979 ;; Hardware stack levels required when called:    4
  2980 ;; This function calls:
  2981 ;;		Nothing
  2982 ;; This function is called by:
  2983 ;;		__sprintf
  2984 ;; This function uses a non-reentrant model
  2985 ;;
  2986                           
  2987                           
  2988                           ;psect for function ___lwmod
  2989  044E                     ___lwmod:	
  2990                           
  2991                           ;incstack = 0
  2992                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2993  044E  0873               	movf	___lwmod@divisor,w
  2994  044F  0474               	iorwf	___lwmod@divisor+1,w
  2995  0450  1903               	btfsc	3,2
  2996  0451  2C75               	goto	l2466
  2997  0452  01F8               	clrf	___lwmod@counter
  2998  0453  0AF8               	incf	___lwmod@counter,f
  2999  0454                     l2456:	
  3000  0454  1BF4               	btfsc	___lwmod@divisor+1,7
  3001  0455  2C60               	goto	l2458
  3002  0456  3001               	movlw	1
  3003  0457                     u1705:	
  3004  0457  35F3               	lslf	___lwmod@divisor,f
  3005  0458  0DF4               	rlf	___lwmod@divisor+1,f
  3006  0459  0B89               	decfsz	9,f
  3007  045A  2C57               	goto	u1705
  3008  045B  3001               	movlw	1
  3009  045C  00F7               	movwf	??___lwmod
  3010  045D  0877               	movf	??___lwmod,w
  3011  045E  07F8               	addwf	___lwmod@counter,f
  3012  045F  2C54               	goto	l2456
  3013  0460                     l2458:	
  3014  0460  0874               	movf	___lwmod@divisor+1,w
  3015  0461  0276               	subwf	___lwmod@dividend+1,w
  3016  0462  1D03               	skipz
  3017  0463  2C66               	goto	u1725
  3018  0464  0873               	movf	___lwmod@divisor,w
  3019  0465  0275               	subwf	___lwmod@dividend,w
  3020  0466                     u1725:	
  3021  0466  1C03               	skipc
  3022  0467  2C6C               	goto	l2462
  3023  0468  0873               	movf	___lwmod@divisor,w
  3024  0469  02F5               	subwf	___lwmod@dividend,f
  3025  046A  0874               	movf	___lwmod@divisor+1,w
  3026  046B  3BF6               	subwfb	___lwmod@dividend+1,f
  3027  046C                     l2462:	
  3028  046C  3001               	movlw	1
  3029  046D                     u1735:	
  3030  046D  36F4               	lsrf	___lwmod@divisor+1,f
  3031  046E  0CF3               	rrf	___lwmod@divisor,f
  3032  046F  0B89               	decfsz	9,f
  3033  0470  2C6D               	goto	u1735
  3034  0471  3001               	movlw	1
  3035  0472  02F8               	subwf	___lwmod@counter,f
  3036  0473  1D03               	btfss	3,2
  3037  0474  2C60               	goto	l2458
  3038  0475                     l2466:	
  3039  0475  0876               	movf	___lwmod@dividend+1,w
  3040  0476  00F4               	movwf	?___lwmod+1
  3041  0477  0875               	movf	___lwmod@dividend,w
  3042  0478  00F3               	movwf	?___lwmod
  3043  0479  0008               	return
  3044  047A                     __end_of___lwmod:	
  3045                           
  3046                           	psect	text4
  3047  03BA                     __ptext4:	
  3048 ;; *************** function ___lwdiv *****************
  3049 ;; Defined at:
  3050 ;;		line 5 in file "/pkg/microchip/xc8/v2.00/pic/sources/c99/common/lwdiv.c"
  3051 ;; Parameters:    Size  Location     Type
  3052 ;;  divisor         2    3[COMMON] unsigned int 
  3053 ;;  dividend        2    5[COMMON] unsigned int 
  3054 ;; Auto vars:     Size  Location     Type
  3055 ;;  quotient        2    1[BANK0 ] unsigned int 
  3056 ;;  counter         1    0[BANK0 ] unsigned char 
  3057 ;; Return value:  Size  Location     Type
  3058 ;;                  2    3[COMMON] unsigned int 
  3059 ;; Registers used:
  3060 ;;		wreg, status,2, status,0
  3061 ;; Tracked objects:
  3062 ;;		On entry : 0/0
  3063 ;;		On exit  : 0/0
  3064 ;;		Unchanged: 0/0
  3065 ;; Data sizes:     COMMON   BANK0   BANK1
  3066 ;;      Params:         4       0       0
  3067 ;;      Locals:         0       3       0
  3068 ;;      Temps:          1       0       0
  3069 ;;      Totals:         5       3       0
  3070 ;;Total ram usage:        8 bytes
  3071 ;; Hardware stack levels used:    1
  3072 ;; Hardware stack levels required when called:    4
  3073 ;; This function calls:
  3074 ;;		Nothing
  3075 ;; This function is called by:
  3076 ;;		__sprintf
  3077 ;; This function uses a non-reentrant model
  3078 ;;
  3079                           
  3080                           
  3081                           ;psect for function ___lwdiv
  3082  03BA                     ___lwdiv:	
  3083                           
  3084                           ;incstack = 0
  3085                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3086  03BA  0020               	movlb	0	; select bank0
  3087  03BB  01A1               	clrf	___lwdiv@quotient
  3088  03BC  01A2               	clrf	___lwdiv@quotient+1
  3089  03BD  0873               	movf	___lwdiv@divisor,w
  3090  03BE  0474               	iorwf	___lwdiv@divisor+1,w
  3091  03BF  1903               	btfsc	3,2
  3092  03C0  2BEA               	goto	l3180
  3093  03C1  01A0               	clrf	___lwdiv@counter
  3094  03C2  0AA0               	incf	___lwdiv@counter,f
  3095  03C3                     l3168:	
  3096  03C3  1BF4               	btfsc	___lwdiv@divisor+1,7
  3097  03C4  2BCF               	goto	l3170
  3098  03C5  3001               	movlw	1
  3099  03C6                     u2585:	
  3100  03C6  35F3               	lslf	___lwdiv@divisor,f
  3101  03C7  0DF4               	rlf	___lwdiv@divisor+1,f
  3102  03C8  0B89               	decfsz	9,f
  3103  03C9  2BC6               	goto	u2585
  3104  03CA  3001               	movlw	1
  3105  03CB  00F7               	movwf	??___lwdiv
  3106  03CC  0877               	movf	??___lwdiv,w
  3107  03CD  07A0               	addwf	___lwdiv@counter,f
  3108  03CE  2BC3               	goto	l3168
  3109  03CF                     l3170:	
  3110  03CF  3001               	movlw	1
  3111  03D0                     u2605:	
  3112  03D0  35A1               	lslf	___lwdiv@quotient,f
  3113  03D1  0DA2               	rlf	___lwdiv@quotient+1,f
  3114  03D2  0B89               	decfsz	9,f
  3115  03D3  2BD0               	goto	u2605
  3116  03D4  0874               	movf	___lwdiv@divisor+1,w
  3117  03D5  0276               	subwf	___lwdiv@dividend+1,w
  3118  03D6  1D03               	skipz
  3119  03D7  2BDA               	goto	u2615
  3120  03D8  0873               	movf	___lwdiv@divisor,w
  3121  03D9  0275               	subwf	___lwdiv@dividend,w
  3122  03DA                     u2615:	
  3123  03DA  1C03               	skipc
  3124  03DB  2BE1               	goto	l3176
  3125  03DC  0873               	movf	___lwdiv@divisor,w
  3126  03DD  02F5               	subwf	___lwdiv@dividend,f
  3127  03DE  0874               	movf	___lwdiv@divisor+1,w
  3128  03DF  3BF6               	subwfb	___lwdiv@dividend+1,f
  3129  03E0  1421               	bsf	___lwdiv@quotient,0
  3130  03E1                     l3176:	
  3131  03E1  3001               	movlw	1
  3132  03E2                     u2625:	
  3133  03E2  36F4               	lsrf	___lwdiv@divisor+1,f
  3134  03E3  0CF3               	rrf	___lwdiv@divisor,f
  3135  03E4  0B89               	decfsz	9,f
  3136  03E5  2BE2               	goto	u2625
  3137  03E6  3001               	movlw	1
  3138  03E7  02A0               	subwf	___lwdiv@counter,f
  3139  03E8  1D03               	btfss	3,2
  3140  03E9  2BCF               	goto	l3170
  3141  03EA                     l3180:	
  3142  03EA  0822               	movf	___lwdiv@quotient+1,w
  3143  03EB  00F4               	movwf	?___lwdiv+1
  3144  03EC  0821               	movf	___lwdiv@quotient,w
  3145  03ED  00F3               	movwf	?___lwdiv
  3146  03EE  0008               	return
  3147  03EF                     __end_of___lwdiv:	
  3148                           
  3149                           	psect	text5
  3150  03EF                     __ptext5:	
  3151 ;; *************** function ___lmul *****************
  3152 ;; Defined at:
  3153 ;;		line 15 in file "/pkg/microchip/xc8/v2.00/pic/sources/c99/common/Umul32.c"
  3154 ;; Parameters:    Size  Location     Type
  3155 ;;  multiplier      4    0[BANK0 ] unsigned long 
  3156 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  3157 ;; Auto vars:     Size  Location     Type
  3158 ;;  product         4    3[COMMON] unsigned long 
  3159 ;; Return value:  Size  Location     Type
  3160 ;;                  4    0[BANK0 ] unsigned long 
  3161 ;; Registers used:
  3162 ;;		wreg, status,2, status,0
  3163 ;; Tracked objects:
  3164 ;;		On entry : 0/0
  3165 ;;		On exit  : 0/0
  3166 ;;		Unchanged: 0/0
  3167 ;; Data sizes:     COMMON   BANK0   BANK1
  3168 ;;      Params:         0       8       0
  3169 ;;      Locals:         4       0       0
  3170 ;;      Temps:          0       0       0
  3171 ;;      Totals:         4       8       0
  3172 ;;Total ram usage:       12 bytes
  3173 ;; Hardware stack levels used:    1
  3174 ;; Hardware stack levels required when called:    4
  3175 ;; This function calls:
  3176 ;;		Nothing
  3177 ;; This function is called by:
  3178 ;;		_read_analog
  3179 ;; This function uses a non-reentrant model
  3180 ;;
  3181                           
  3182                           
  3183                           ;psect for function ___lmul
  3184  03EF                     ___lmul:	
  3185                           
  3186                           ;incstack = 0
  3187                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3188  03EF  3000               	movlw	0
  3189  03F0  00F6               	movwf	___lmul@product+3
  3190  03F1  3000               	movlw	0
  3191  03F2  00F5               	movwf	___lmul@product+2
  3192  03F3  3000               	movlw	0
  3193  03F4  00F4               	movwf	___lmul@product+1
  3194  03F5  3000               	movlw	0
  3195  03F6  00F3               	movwf	___lmul@product
  3196  03F7                     l3246:	
  3197  03F7  0020               	movlb	0	; select bank0
  3198  03F8  1C20               	btfss	___lmul@multiplier,0
  3199  03F9  2C02               	goto	l3250
  3200  03FA  0824               	movf	___lmul@multiplicand,w
  3201  03FB  07F3               	addwf	___lmul@product,f
  3202  03FC  0825               	movf	___lmul@multiplicand+1,w
  3203  03FD  3DF4               	addwfc	___lmul@product+1,f
  3204  03FE  0826               	movf	___lmul@multiplicand+2,w
  3205  03FF  3DF5               	addwfc	___lmul@product+2,f
  3206  0400  0827               	movf	___lmul@multiplicand+3,w
  3207  0401  3DF6               	addwfc	___lmul@product+3,f
  3208  0402                     l3250:	
  3209  0402  3001               	movlw	1
  3210  0403                     u2665:	
  3211  0403  35A4               	lslf	___lmul@multiplicand,f
  3212  0404  0DA5               	rlf	___lmul@multiplicand+1,f
  3213  0405  0DA6               	rlf	___lmul@multiplicand+2,f
  3214  0406  0DA7               	rlf	___lmul@multiplicand+3,f
  3215  0407  0B89               	decfsz	9,f
  3216  0408  2C03               	goto	u2665
  3217  0409  3001               	movlw	1
  3218  040A                     u2675:	
  3219  040A  36A3               	lsrf	___lmul@multiplier+3,f
  3220  040B  0CA2               	rrf	___lmul@multiplier+2,f
  3221  040C  0CA1               	rrf	___lmul@multiplier+1,f
  3222  040D  0CA0               	rrf	___lmul@multiplier,f
  3223  040E  0B89               	decfsz	9,f
  3224  040F  2C0A               	goto	u2675
  3225  0410  0823               	movf	___lmul@multiplier+3,w
  3226  0411  0422               	iorwf	___lmul@multiplier+2,w
  3227  0412  0421               	iorwf	___lmul@multiplier+1,w
  3228  0413  0420               	iorwf	___lmul@multiplier,w
  3229  0414  1D03               	skipz
  3230  0415  2BF7               	goto	l3246
  3231  0416  0876               	movf	___lmul@product+3,w
  3232  0417  00A3               	movwf	?___lmul+3
  3233  0418  0875               	movf	___lmul@product+2,w
  3234  0419  00A2               	movwf	?___lmul+2
  3235  041A  0874               	movf	___lmul@product+1,w
  3236  041B  00A1               	movwf	?___lmul+1
  3237  041C  0873               	movf	___lmul@product,w
  3238  041D  00A0               	movwf	?___lmul
  3239  041E  0008               	return
  3240  041F                     __end_of___lmul:	
  3241                           
  3242                           	psect	text6
  3243  05DD                     __ptext6:	
  3244 ;; *************** function _process_ioc *****************
  3245 ;; Defined at:
  3246 ;;		line 168 in file "logger.c"
  3247 ;; Parameters:    Size  Location     Type
  3248 ;;		None
  3249 ;; Auto vars:     Size  Location     Type
  3250 ;;		None
  3251 ;; Return value:  Size  Location     Type
  3252 ;;                  1    wreg      void 
  3253 ;; Registers used:
  3254 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3255 ;; Tracked objects:
  3256 ;;		On entry : 0/0
  3257 ;;		On exit  : 0/0
  3258 ;;		Unchanged: 0/0
  3259 ;; Data sizes:     COMMON   BANK0   BANK1
  3260 ;;      Params:         0       0       0
  3261 ;;      Locals:         0       0       0
  3262 ;;      Temps:          0       1       0
  3263 ;;      Totals:         0       1       0
  3264 ;;Total ram usage:        1 bytes
  3265 ;; Hardware stack levels used:    1
  3266 ;; Hardware stack levels required when called:   10
  3267 ;; This function calls:
  3268 ;;		_ESP_wait_for
  3269 ;;		_ESP_write
  3270 ;; This function is called by:
  3271 ;;		_main
  3272 ;; This function uses a non-reentrant model
  3273 ;;
  3274                           
  3275                           
  3276                           ;psect for function _process_ioc
  3277  05DD                     _process_ioc:	
  3278                           
  3279                           ;logger.c: 170:     IOC_state = IOC_IDLE;
  3280                           
  3281                           ;incstack = 0
  3282                           ; Regs used in _process_ioc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3283  05DD  0020               	movlb	0	; select bank0
  3284  05DE  01E7               	clrf	_IOC_state	;volatile
  3285                           
  3286                           ;logger.c: 171:      if (IOC_value) {
  3287  05DF  0862               	movf	_IOC_value,w	;volatile
  3288  05E0  1903               	btfsc	3,2
  3289  05E1  2DEE               	goto	l3314
  3290                           
  3291                           ;logger.c: 175:             ESP_write("CH",2);
  3292  05E2  30CE               	movlw	low (STR_18| (0+32768))
  3293  05E3  00B3               	movwf	ESP_write@pt
  3294  05E4  3087               	movlw	high (STR_18| (0+32768))
  3295  05E5  00B4               	movwf	ESP_write@pt+1
  3296  05E6  3002               	movlw	2
  3297  05E7  00BB               	movwf	??_process_ioc
  3298  05E8  083B               	movf	??_process_ioc,w
  3299  05E9  00B5               	movwf	ESP_write@length
  3300  05EA  20D8               	fcall	_ESP_write
  3301                           
  3302                           ;logger.c: 176:             ESP_wait_for(ESP_SEND_OK);
  3303  05EB  3001               	movlw	1
  3304  05EC  24CA               	fcall	_ESP_wait_for
  3305                           
  3306                           ;logger.c: 178:     } else {
  3307  05ED  0008               	return
  3308  05EE                     l3314:	
  3309                           
  3310                           ;logger.c: 182:             ESP_write("CL",2);
  3311  05EE  30D1               	movlw	low (STR_19| (0+32768))
  3312  05EF  0020               	movlb	0	; select bank0
  3313  05F0  00B3               	movwf	ESP_write@pt
  3314  05F1  3087               	movlw	high (STR_19| (0+32768))
  3315  05F2  00B4               	movwf	ESP_write@pt+1
  3316  05F3  3002               	movlw	2
  3317  05F4  00BB               	movwf	??_process_ioc
  3318  05F5  083B               	movf	??_process_ioc,w
  3319  05F6  00B5               	movwf	ESP_write@length
  3320  05F7  20D8               	fcall	_ESP_write
  3321                           
  3322                           ;logger.c: 183:             ESP_wait_for(ESP_SEND_OK);
  3323  05F8  3001               	movlw	1
  3324  05F9  24CA               	fcall	_ESP_wait_for
  3325  05FA  0008               	return
  3326  05FB                     __end_of_process_ioc:	
  3327                           ;logger.c: 186:     }
  3328                           
  3329                           
  3330                           	psect	text7
  3331  00D8                     __ptext7:	
  3332 ;; *************** function _ESP_write *****************
  3333 ;; Defined at:
  3334 ;;		line 180 in file "esp1.c"
  3335 ;; Parameters:    Size  Location     Type
  3336 ;;  pt              2   19[BANK0 ] PTR unsigned char 
  3337 ;;		 -> STR_19(3), STR_18(3), read_analog@mess(6), 
  3338 ;;  length          1   21[BANK0 ] unsigned char 
  3339 ;; Auto vars:     Size  Location     Type
  3340 ;;  aux             1   26[BANK0 ] unsigned char 
  3341 ;;  res             1   25[BANK0 ] unsigned char 
  3342 ;; Return value:  Size  Location     Type
  3343 ;;                  1    wreg      void 
  3344 ;; Registers used:
  3345 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3346 ;; Tracked objects:
  3347 ;;		On entry : 0/0
  3348 ;;		On exit  : 0/0
  3349 ;;		Unchanged: 0/0
  3350 ;; Data sizes:     COMMON   BANK0   BANK1
  3351 ;;      Params:         0       3       0
  3352 ;;      Locals:         0       2       0
  3353 ;;      Temps:          0       3       0
  3354 ;;      Totals:         0       8       0
  3355 ;;Total ram usage:        8 bytes
  3356 ;; Hardware stack levels used:    1
  3357 ;; Hardware stack levels required when called:    9
  3358 ;; This function calls:
  3359 ;;		_ESP_wait_for
  3360 ;;		___awdiv
  3361 ;;		___awmod
  3362 ;;		__puts
  3363 ;;		_write
  3364 ;; This function is called by:
  3365 ;;		_read_analog
  3366 ;;		_process_ioc
  3367 ;; This function uses a non-reentrant model
  3368 ;;
  3369                           
  3370                           
  3371                           ;psect for function _ESP_write
  3372  00D8                     _ESP_write:	
  3373                           
  3374                           ;esp1.c: 180: void ESP_write(unsigned char *pt, unsigned char length);esp1.c: 181: {;esp
      +                          1.c: 182:     unsigned char aux, res;;esp1.c: 184:     _puts("AT+CIPSEND=");
  3375                           
  3376                           ;incstack = 0
  3377                           ; Regs used in _ESP_write: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3378  00D8  3020               	movlw	low (STR_14| (0+32768))
  3379  00D9  00F5               	movwf	__puts@pt
  3380  00DA  3087               	movlw	high (STR_14| (0+32768))
  3381  00DB  00F6               	movwf	__puts@pt+1
  3382  00DC  24A2               	fcall	__puts
  3383                           
  3384                           ;esp1.c: 185:     aux = esp_channel;
  3385  00DD  0020               	movlb	0	; select bank0
  3386  00DE  0865               	movf	_esp_channel,w	;volatile
  3387  00DF  00B6               	movwf	??_ESP_write
  3388  00E0  0836               	movf	??_ESP_write,w
  3389  00E1  00BA               	movwf	ESP_write@aux
  3390                           
  3391                           ;esp1.c: 186:     write(&aux,1);
  3392  00E2  303A               	movlw	low ESP_write@aux
  3393  00E3  00F5               	movwf	write@pt
  3394  00E4  3000               	movlw	high ESP_write@aux
  3395  00E5  00F6               	movwf	write@pt+1
  3396  00E6  01F7               	clrf	write@lenght
  3397  00E7  0AF7               	incf	write@lenght,f
  3398  00E8  2637               	fcall	_write
  3399                           
  3400                           ;esp1.c: 187:     _puts(",");
  3401  00E9  30E6               	movlw	low (STR_15| (0+32768))
  3402  00EA  00F5               	movwf	__puts@pt
  3403  00EB  3087               	movlw	high (STR_15| (0+32768))
  3404  00EC  00F6               	movwf	__puts@pt+1
  3405  00ED  24A2               	fcall	__puts
  3406                           
  3407                           ;esp1.c: 189:     aux = length;
  3408  00EE  0020               	movlb	0	; select bank0
  3409  00EF  0835               	movf	ESP_write@length,w
  3410  00F0  00B6               	movwf	??_ESP_write
  3411  00F1  0836               	movf	??_ESP_write,w
  3412  00F2  00BA               	movwf	ESP_write@aux
  3413                           
  3414                           ;esp1.c: 190:     if (aux > 9) {
  3415  00F3  300A               	movlw	10
  3416  00F4  023A               	subwf	ESP_write@aux,w
  3417  00F5  1C03               	skipc
  3418  00F6  292C               	goto	l3232
  3419                           
  3420                           ;esp1.c: 191:         res = aux%10;
  3421  00F7  300A               	movlw	10
  3422  00F8  00F3               	movwf	___awmod@divisor
  3423  00F9  3000               	movlw	0
  3424  00FA  00F4               	movwf	___awmod@divisor+1
  3425  00FB  083A               	movf	ESP_write@aux,w
  3426  00FC  00B6               	movwf	??_ESP_write
  3427  00FD  01B7               	clrf	??_ESP_write+1
  3428  00FE  0836               	movf	??_ESP_write,w
  3429  00FF  00F5               	movwf	___awmod@dividend
  3430  0100  0837               	movf	??_ESP_write+1,w
  3431  0101  00F6               	movwf	___awmod@dividend+1
  3432  0102  22C6               	fcall	___awmod
  3433  0103  0873               	movf	?___awmod,w
  3434  0104  0020               	movlb	0	; select bank0
  3435  0105  00B8               	movwf	??_ESP_write+2
  3436  0106  0838               	movf	??_ESP_write+2,w
  3437  0107  00B9               	movwf	ESP_write@res
  3438                           
  3439                           ;esp1.c: 192:         res += '0';
  3440  0108  3030               	movlw	48
  3441  0109  00B6               	movwf	??_ESP_write
  3442  010A  0836               	movf	??_ESP_write,w
  3443  010B  07B9               	addwf	ESP_write@res,f
  3444                           
  3445                           ;esp1.c: 193:         aux /= 10;
  3446  010C  300A               	movlw	10
  3447  010D  00F3               	movwf	___awdiv@divisor
  3448  010E  3000               	movlw	0
  3449  010F  00F4               	movwf	___awdiv@divisor+1
  3450  0110  083A               	movf	ESP_write@aux,w
  3451  0111  00B6               	movwf	??_ESP_write
  3452  0112  01B7               	clrf	??_ESP_write+1
  3453  0113  0836               	movf	??_ESP_write,w
  3454  0114  00F5               	movwf	___awdiv@dividend
  3455  0115  0837               	movf	??_ESP_write+1,w
  3456  0116  00F6               	movwf	___awdiv@dividend+1
  3457  0117  2274               	fcall	___awdiv
  3458  0118  0873               	movf	?___awdiv,w
  3459  0119  0020               	movlb	0	; select bank0
  3460  011A  00B8               	movwf	??_ESP_write+2
  3461  011B  0838               	movf	??_ESP_write+2,w
  3462  011C  00BA               	movwf	ESP_write@aux
  3463                           
  3464                           ;esp1.c: 194:         aux += '0';
  3465  011D  3030               	movlw	48
  3466  011E  00B6               	movwf	??_ESP_write
  3467  011F  0836               	movf	??_ESP_write,w
  3468  0120  07BA               	addwf	ESP_write@aux,f
  3469                           
  3470                           ;esp1.c: 195:         write(&aux,1);
  3471  0121  303A               	movlw	low ESP_write@aux
  3472  0122  00F5               	movwf	write@pt
  3473  0123  3000               	movlw	high ESP_write@aux
  3474  0124  00F6               	movwf	write@pt+1
  3475  0125  01F7               	clrf	write@lenght
  3476  0126  0AF7               	incf	write@lenght,f
  3477  0127  2637               	fcall	_write
  3478                           
  3479                           ;esp1.c: 196:         write(&res,1);
  3480  0128  3039               	movlw	low ESP_write@res
  3481  0129  00F5               	movwf	write@pt
  3482  012A  3000               	movlw	high ESP_write@res
  3483  012B  2935               	goto	L1
  3484  012C                     l3232:	
  3485                           ;esp1.c: 198:     } else {
  3486                           
  3487                           
  3488                           ;esp1.c: 199:         aux = length + '0';
  3489  012C  0020               	movlb	0	; select bank0
  3490  012D  0835               	movf	ESP_write@length,w
  3491  012E  3E30               	addlw	48
  3492  012F  00B6               	movwf	??_ESP_write
  3493  0130  0836               	movf	??_ESP_write,w
  3494  0131  00BA               	movwf	ESP_write@aux
  3495                           
  3496                           ;esp1.c: 200:         write(&aux,1);
  3497  0132  303A               	movlw	low ESP_write@aux
  3498  0133  00F5               	movwf	write@pt
  3499  0134  3000               	movlw	high ESP_write@aux
  3500  0135                     L1:	
  3501  0135  00F6               	movwf	write@pt+1
  3502  0136  01F7               	clrf	write@lenght
  3503  0137  0AF7               	incf	write@lenght,f
  3504  0138  2637               	fcall	_write
  3505                           
  3506                           ;esp1.c: 203:     _puts("\r\n");
  3507                           
  3508                           ;esp1.c: 201:     }
  3509  0139  305A               	movlw	low ((STR_10+31)| (0+32768))
  3510  013A  00F5               	movwf	__puts@pt
  3511  013B  3085               	movlw	high ((STR_10+31)| (0+32768))
  3512  013C  00F6               	movwf	__puts@pt+1
  3513  013D  24A2               	fcall	__puts
  3514                           
  3515                           ;esp1.c: 205:     ESP_wait_for(ESP_OK);
  3516  013E  3002               	movlw	2
  3517  013F  24CA               	fcall	_ESP_wait_for
  3518                           
  3519                           ;esp1.c: 207:     write(pt,length);
  3520  0140  0020               	movlb	0	; select bank0
  3521  0141  0834               	movf	ESP_write@pt+1,w
  3522  0142  00F6               	movwf	write@pt+1
  3523  0143  0833               	movf	ESP_write@pt,w
  3524  0144  00F5               	movwf	write@pt
  3525  0145  0835               	movf	ESP_write@length,w
  3526  0146  00B6               	movwf	??_ESP_write
  3527  0147  0836               	movf	??_ESP_write,w
  3528  0148  00F7               	movwf	write@lenght
  3529  0149  2637               	fcall	_write
  3530                           
  3531                           ;esp1.c: 208:     _puts("\r\n");
  3532  014A  305A               	movlw	low ((STR_10+31)| (0+32768))
  3533  014B  00F5               	movwf	__puts@pt
  3534  014C  3085               	movlw	high ((STR_10+31)| (0+32768))
  3535  014D  00F6               	movwf	__puts@pt+1
  3536  014E  24A2               	fcall	__puts
  3537  014F  0008               	return
  3538  0150                     __end_of_ESP_write:	
  3539                           
  3540                           	psect	text8
  3541  0637                     __ptext8:	
  3542 ;; *************** function _write *****************
  3543 ;; Defined at:
  3544 ;;		line 15 in file "comm.c"
  3545 ;; Parameters:    Size  Location     Type
  3546 ;;  pt              2    5[COMMON] PTR unsigned char 
  3547 ;;		 -> STR_19(3), STR_18(3), read_analog@mess(6), ESP_write@res(1), 
  3548 ;;		 -> ESP_write@aux(1), 
  3549 ;;  lenght          1    7[COMMON] unsigned char 
  3550 ;; Auto vars:     Size  Location     Type
  3551 ;;  i               1    8[COMMON] unsigned char 
  3552 ;; Return value:  Size  Location     Type
  3553 ;;                  1    wreg      void 
  3554 ;; Registers used:
  3555 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3556 ;; Tracked objects:
  3557 ;;		On entry : 0/0
  3558 ;;		On exit  : 0/0
  3559 ;;		Unchanged: 0/0
  3560 ;; Data sizes:     COMMON   BANK0   BANK1
  3561 ;;      Params:         3       0       0
  3562 ;;      Locals:         1       0       0
  3563 ;;      Temps:          0       2       0
  3564 ;;      Totals:         4       2       0
  3565 ;;Total ram usage:        6 bytes
  3566 ;; Hardware stack levels used:    1
  3567 ;; Hardware stack levels required when called:    5
  3568 ;; This function calls:
  3569 ;;		_EUSART_Write
  3570 ;;		_EUSART_is_tx_ready
  3571 ;; This function is called by:
  3572 ;;		_ESP_write
  3573 ;; This function uses a non-reentrant model
  3574 ;;
  3575                           
  3576                           
  3577                           ;psect for function _write
  3578  0637                     _write:	
  3579                           
  3580                           ;comm.c: 15: void write(unsigned char *pt, unsigned char lenght);comm.c: 16: {;comm.c: 1
      +                          7:     unsigned char i;;comm.c: 19:     for (i=0; i<lenght; i++) {
  3581                           
  3582                           ;incstack = 0
  3583                           ; Regs used in _write: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3584  0637  01F8               	clrf	write@i
  3585  0638                     l3048:	
  3586  0638  0877               	movf	write@lenght,w
  3587  0639  0278               	subwf	write@i,w
  3588  063A  1803               	btfsc	3,0
  3589  063B  0008               	return
  3590  063C                     l3042:	
  3591                           ;comm.c: 20:         while(!EUSART_is_tx_ready());
  3592                           
  3593  063C  27EA               	fcall	_EUSART_is_tx_ready
  3594  063D  3A00               	xorlw	0
  3595  063E  1903               	skipnz
  3596  063F  2E3C               	goto	l3042
  3597                           
  3598                           ;comm.c: 21:         EUSART_Write(pt[i]);
  3599  0640  0876               	movf	write@pt+1,w
  3600  0641  0020               	movlb	0	; select bank0
  3601  0642  00A1               	movwf	??_write+1
  3602  0643  0875               	movf	write@pt,w
  3603  0644  00A0               	movwf	??_write
  3604  0645  0878               	movf	write@i,w
  3605  0646  0720               	addwf	??_write,w
  3606  0647  0084               	movwf	4
  3607  0648  0821               	movf	??_write+1,w
  3608  0649  1803               	skipnc
  3609  064A  0A21               	incf	??_write+1,w
  3610  064B  0085               	movwf	5
  3611  064C  0800               	movf	0,w	;code access
  3612  064D  255D               	fcall	_EUSART_Write
  3613                           
  3614                           ;comm.c: 22:     }
  3615  064E  3001               	movlw	1
  3616  064F  0020               	movlb	0	; select bank0
  3617  0650  00A0               	movwf	??_write
  3618  0651  0820               	movf	??_write,w
  3619  0652  07F8               	addwf	write@i,f
  3620  0653  2E38               	goto	l3048
  3621  0654                     __end_of_write:	
  3622                           
  3623                           	psect	text9
  3624  02C6                     __ptext9:	
  3625 ;; *************** function ___awmod *****************
  3626 ;; Defined at:
  3627 ;;		line 5 in file "/pkg/microchip/xc8/v2.00/pic/sources/c99/common/awmod.c"
  3628 ;; Parameters:    Size  Location     Type
  3629 ;;  divisor         2    3[COMMON] int 
  3630 ;;  dividend        2    5[COMMON] int 
  3631 ;; Auto vars:     Size  Location     Type
  3632 ;;  sign            1    1[BANK0 ] unsigned char 
  3633 ;;  counter         1    0[BANK0 ] unsigned char 
  3634 ;; Return value:  Size  Location     Type
  3635 ;;                  2    3[COMMON] int 
  3636 ;; Registers used:
  3637 ;;		wreg, status,2, status,0
  3638 ;; Tracked objects:
  3639 ;;		On entry : 0/0
  3640 ;;		On exit  : 0/0
  3641 ;;		Unchanged: 0/0
  3642 ;; Data sizes:     COMMON   BANK0   BANK1
  3643 ;;      Params:         4       0       0
  3644 ;;      Locals:         0       2       0
  3645 ;;      Temps:          1       0       0
  3646 ;;      Totals:         5       2       0
  3647 ;;Total ram usage:        7 bytes
  3648 ;; Hardware stack levels used:    1
  3649 ;; Hardware stack levels required when called:    4
  3650 ;; This function calls:
  3651 ;;		Nothing
  3652 ;; This function is called by:
  3653 ;;		_ESP_write
  3654 ;; This function uses a non-reentrant model
  3655 ;;
  3656                           
  3657                           
  3658                           ;psect for function ___awmod
  3659  02C6                     ___awmod:	
  3660                           
  3661                           ;incstack = 0
  3662                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  3663  02C6  0020               	movlb	0	; select bank0
  3664  02C7  01A1               	clrf	___awmod@sign
  3665  02C8  1FF6               	btfss	___awmod@dividend+1,7
  3666  02C9  2AD1               	goto	l3128
  3667  02CA  09F5               	comf	___awmod@dividend,f
  3668  02CB  09F6               	comf	___awmod@dividend+1,f
  3669  02CC  0AF5               	incf	___awmod@dividend,f
  3670  02CD  1903               	skipnz
  3671  02CE  0AF6               	incf	___awmod@dividend+1,f
  3672  02CF  01A1               	clrf	___awmod@sign
  3673  02D0  0AA1               	incf	___awmod@sign,f
  3674  02D1                     l3128:	
  3675  02D1  1FF4               	btfss	___awmod@divisor+1,7
  3676  02D2  2AD8               	goto	l3132
  3677  02D3  09F3               	comf	___awmod@divisor,f
  3678  02D4  09F4               	comf	___awmod@divisor+1,f
  3679  02D5  0AF3               	incf	___awmod@divisor,f
  3680  02D6  1903               	skipnz
  3681  02D7  0AF4               	incf	___awmod@divisor+1,f
  3682  02D8                     l3132:	
  3683  02D8  0873               	movf	___awmod@divisor,w
  3684  02D9  0474               	iorwf	___awmod@divisor+1,w
  3685  02DA  1903               	btfsc	3,2
  3686  02DB  2AFF               	goto	l3150
  3687  02DC  01A0               	clrf	___awmod@counter
  3688  02DD  0AA0               	incf	___awmod@counter,f
  3689  02DE                     l3140:	
  3690  02DE  1BF4               	btfsc	___awmod@divisor+1,7
  3691  02DF  2AEA               	goto	l3142
  3692  02E0  3001               	movlw	1
  3693  02E1                     u2515:	
  3694  02E1  35F3               	lslf	___awmod@divisor,f
  3695  02E2  0DF4               	rlf	___awmod@divisor+1,f
  3696  02E3  0B89               	decfsz	9,f
  3697  02E4  2AE1               	goto	u2515
  3698  02E5  3001               	movlw	1
  3699  02E6  00F7               	movwf	??___awmod
  3700  02E7  0877               	movf	??___awmod,w
  3701  02E8  07A0               	addwf	___awmod@counter,f
  3702  02E9  2ADE               	goto	l3140
  3703  02EA                     l3142:	
  3704  02EA  0874               	movf	___awmod@divisor+1,w
  3705  02EB  0276               	subwf	___awmod@dividend+1,w
  3706  02EC  1D03               	skipz
  3707  02ED  2AF0               	goto	u2535
  3708  02EE  0873               	movf	___awmod@divisor,w
  3709  02EF  0275               	subwf	___awmod@dividend,w
  3710  02F0                     u2535:	
  3711  02F0  1C03               	skipc
  3712  02F1  2AF6               	goto	l3146
  3713  02F2  0873               	movf	___awmod@divisor,w
  3714  02F3  02F5               	subwf	___awmod@dividend,f
  3715  02F4  0874               	movf	___awmod@divisor+1,w
  3716  02F5  3BF6               	subwfb	___awmod@dividend+1,f
  3717  02F6                     l3146:	
  3718  02F6  3001               	movlw	1
  3719  02F7                     u2545:	
  3720  02F7  36F4               	lsrf	___awmod@divisor+1,f
  3721  02F8  0CF3               	rrf	___awmod@divisor,f
  3722  02F9  0B89               	decfsz	9,f
  3723  02FA  2AF7               	goto	u2545
  3724  02FB  3001               	movlw	1
  3725  02FC  02A0               	subwf	___awmod@counter,f
  3726  02FD  1D03               	btfss	3,2
  3727  02FE  2AEA               	goto	l3142
  3728  02FF                     l3150:	
  3729  02FF  0821               	movf	___awmod@sign,w
  3730  0300  1903               	btfsc	3,2
  3731  0301  2B07               	goto	l3154
  3732  0302  09F5               	comf	___awmod@dividend,f
  3733  0303  09F6               	comf	___awmod@dividend+1,f
  3734  0304  0AF5               	incf	___awmod@dividend,f
  3735  0305  1903               	skipnz
  3736  0306  0AF6               	incf	___awmod@dividend+1,f
  3737  0307                     l3154:	
  3738  0307  0876               	movf	___awmod@dividend+1,w
  3739  0308  00F4               	movwf	?___awmod+1
  3740  0309  0875               	movf	___awmod@dividend,w
  3741  030A  00F3               	movwf	?___awmod
  3742  030B  0008               	return
  3743  030C                     __end_of___awmod:	
  3744                           
  3745                           	psect	text10
  3746  0274                     __ptext10:	
  3747 ;; *************** function ___awdiv *****************
  3748 ;; Defined at:
  3749 ;;		line 5 in file "/pkg/microchip/xc8/v2.00/pic/sources/c99/common/awdiv.c"
  3750 ;; Parameters:    Size  Location     Type
  3751 ;;  divisor         2    3[COMMON] int 
  3752 ;;  dividend        2    5[COMMON] int 
  3753 ;; Auto vars:     Size  Location     Type
  3754 ;;  quotient        2    2[BANK0 ] int 
  3755 ;;  sign            1    1[BANK0 ] unsigned char 
  3756 ;;  counter         1    0[BANK0 ] unsigned char 
  3757 ;; Return value:  Size  Location     Type
  3758 ;;                  2    3[COMMON] int 
  3759 ;; Registers used:
  3760 ;;		wreg, status,2, status,0
  3761 ;; Tracked objects:
  3762 ;;		On entry : 0/0
  3763 ;;		On exit  : 0/0
  3764 ;;		Unchanged: 0/0
  3765 ;; Data sizes:     COMMON   BANK0   BANK1
  3766 ;;      Params:         4       0       0
  3767 ;;      Locals:         0       4       0
  3768 ;;      Temps:          1       0       0
  3769 ;;      Totals:         5       4       0
  3770 ;;Total ram usage:        9 bytes
  3771 ;; Hardware stack levels used:    1
  3772 ;; Hardware stack levels required when called:    4
  3773 ;; This function calls:
  3774 ;;		Nothing
  3775 ;; This function is called by:
  3776 ;;		_ESP_write
  3777 ;; This function uses a non-reentrant model
  3778 ;;
  3779                           
  3780                           
  3781                           ;psect for function ___awdiv
  3782  0274                     ___awdiv:	
  3783                           
  3784                           ;incstack = 0
  3785                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3786  0274  0020               	movlb	0	; select bank0
  3787  0275  01A1               	clrf	___awdiv@sign
  3788  0276  1FF4               	btfss	___awdiv@divisor+1,7
  3789  0277  2A7F               	goto	l3084
  3790  0278  09F3               	comf	___awdiv@divisor,f
  3791  0279  09F4               	comf	___awdiv@divisor+1,f
  3792  027A  0AF3               	incf	___awdiv@divisor,f
  3793  027B  1903               	skipnz
  3794  027C  0AF4               	incf	___awdiv@divisor+1,f
  3795  027D  01A1               	clrf	___awdiv@sign
  3796  027E  0AA1               	incf	___awdiv@sign,f
  3797  027F                     l3084:	
  3798  027F  1FF6               	btfss	___awdiv@dividend+1,7
  3799  0280  2A8A               	goto	l3090
  3800  0281  09F5               	comf	___awdiv@dividend,f
  3801  0282  09F6               	comf	___awdiv@dividend+1,f
  3802  0283  0AF5               	incf	___awdiv@dividend,f
  3803  0284  1903               	skipnz
  3804  0285  0AF6               	incf	___awdiv@dividend+1,f
  3805  0286  3001               	movlw	1
  3806  0287  00F7               	movwf	??___awdiv
  3807  0288  0877               	movf	??___awdiv,w
  3808  0289  06A1               	xorwf	___awdiv@sign,f
  3809  028A                     l3090:	
  3810  028A  01A2               	clrf	___awdiv@quotient
  3811  028B  01A3               	clrf	___awdiv@quotient+1
  3812  028C  0873               	movf	___awdiv@divisor,w
  3813  028D  0474               	iorwf	___awdiv@divisor+1,w
  3814  028E  1903               	btfsc	3,2
  3815  028F  2AB9               	goto	l3112
  3816  0290  01A0               	clrf	___awdiv@counter
  3817  0291  0AA0               	incf	___awdiv@counter,f
  3818  0292                     l3100:	
  3819  0292  1BF4               	btfsc	___awdiv@divisor+1,7
  3820  0293  2A9E               	goto	l3102
  3821  0294  3001               	movlw	1
  3822  0295                     u2415:	
  3823  0295  35F3               	lslf	___awdiv@divisor,f
  3824  0296  0DF4               	rlf	___awdiv@divisor+1,f
  3825  0297  0B89               	decfsz	9,f
  3826  0298  2A95               	goto	u2415
  3827  0299  3001               	movlw	1
  3828  029A  00F7               	movwf	??___awdiv
  3829  029B  0877               	movf	??___awdiv,w
  3830  029C  07A0               	addwf	___awdiv@counter,f
  3831  029D  2A92               	goto	l3100
  3832  029E                     l3102:	
  3833  029E  3001               	movlw	1
  3834  029F                     u2435:	
  3835  029F  35A2               	lslf	___awdiv@quotient,f
  3836  02A0  0DA3               	rlf	___awdiv@quotient+1,f
  3837  02A1  0B89               	decfsz	9,f
  3838  02A2  2A9F               	goto	u2435
  3839  02A3  0874               	movf	___awdiv@divisor+1,w
  3840  02A4  0276               	subwf	___awdiv@dividend+1,w
  3841  02A5  1D03               	skipz
  3842  02A6  2AA9               	goto	u2445
  3843  02A7  0873               	movf	___awdiv@divisor,w
  3844  02A8  0275               	subwf	___awdiv@dividend,w
  3845  02A9                     u2445:	
  3846  02A9  1C03               	skipc
  3847  02AA  2AB0               	goto	l3108
  3848  02AB  0873               	movf	___awdiv@divisor,w
  3849  02AC  02F5               	subwf	___awdiv@dividend,f
  3850  02AD  0874               	movf	___awdiv@divisor+1,w
  3851  02AE  3BF6               	subwfb	___awdiv@dividend+1,f
  3852  02AF  1422               	bsf	___awdiv@quotient,0
  3853  02B0                     l3108:	
  3854  02B0  3001               	movlw	1
  3855  02B1                     u2455:	
  3856  02B1  36F4               	lsrf	___awdiv@divisor+1,f
  3857  02B2  0CF3               	rrf	___awdiv@divisor,f
  3858  02B3  0B89               	decfsz	9,f
  3859  02B4  2AB1               	goto	u2455
  3860  02B5  3001               	movlw	1
  3861  02B6  02A0               	subwf	___awdiv@counter,f
  3862  02B7  1D03               	btfss	3,2
  3863  02B8  2A9E               	goto	l3102
  3864  02B9                     l3112:	
  3865  02B9  0821               	movf	___awdiv@sign,w
  3866  02BA  1903               	btfsc	3,2
  3867  02BB  2AC1               	goto	l3116
  3868  02BC  09A2               	comf	___awdiv@quotient,f
  3869  02BD  09A3               	comf	___awdiv@quotient+1,f
  3870  02BE  0AA2               	incf	___awdiv@quotient,f
  3871  02BF  1903               	skipnz
  3872  02C0  0AA3               	incf	___awdiv@quotient+1,f
  3873  02C1                     l3116:	
  3874  02C1  0823               	movf	___awdiv@quotient+1,w
  3875  02C2  00F4               	movwf	?___awdiv+1
  3876  02C3  0822               	movf	___awdiv@quotient,w
  3877  02C4  00F3               	movwf	?___awdiv
  3878  02C5  0008               	return
  3879  02C6                     __end_of___awdiv:	
  3880                           
  3881                           	psect	text11
  3882  05BE                     __ptext11:	
  3883 ;; *************** function _logger_initialize *****************
  3884 ;; Defined at:
  3885 ;;		line 17 in file "logger.c"
  3886 ;; Parameters:    Size  Location     Type
  3887 ;;		None
  3888 ;; Auto vars:     Size  Location     Type
  3889 ;;		None
  3890 ;; Return value:  Size  Location     Type
  3891 ;;                  1    wreg      void 
  3892 ;; Registers used:
  3893 ;;		wreg, status,2, status,0, pclath, cstack
  3894 ;; Tracked objects:
  3895 ;;		On entry : 0/0
  3896 ;;		On exit  : 0/0
  3897 ;;		Unchanged: 0/0
  3898 ;; Data sizes:     COMMON   BANK0   BANK1
  3899 ;;      Params:         0       0       0
  3900 ;;      Locals:         0       0       0
  3901 ;;      Temps:          1       0       0
  3902 ;;      Totals:         1       0       0
  3903 ;;Total ram usage:        1 bytes
  3904 ;; Hardware stack levels used:    1
  3905 ;; Hardware stack levels required when called:    5
  3906 ;; This function calls:
  3907 ;;		_ADC_SelectChannel
  3908 ;;		_ESP_Set_application_handler
  3909 ;;		_IOCAF4_SetInterruptHandler
  3910 ;;		_TMR1_SetInterruptHandler
  3911 ;;		_TMR1_StopTimer
  3912 ;; This function is called by:
  3913 ;;		_main
  3914 ;; This function uses a non-reentrant model
  3915 ;;
  3916                           
  3917                           
  3918                           ;psect for function _logger_initialize
  3919  05BE                     _logger_initialize:	
  3920                           
  3921                           ;logger.c: 19:     message_format = MESSAGE_BINARY;
  3922                           
  3923                           ;incstack = 0
  3924                           ; Regs used in _logger_initialize: [wreg+status,2+status,0+pclath+cstack]
  3925  05BE  0020               	movlb	0	; select bank0
  3926  05BF  01E4               	clrf	_message_format	;volatile
  3927                           
  3928                           ;logger.c: 21:     ADC_SelectChannel(channel_AN2);
  3929  05C0  3002               	movlw	2
  3930  05C1  2706               	fcall	_ADC_SelectChannel
  3931                           
  3932                           ;logger.c: 22:     ADC_state = ADC_IDLE;
  3933  05C2  0020               	movlb	0	; select bank0
  3934  05C3  01ED               	clrf	_ADC_state	;volatile
  3935                           
  3936                           ;logger.c: 26:     TMR1_StopTimer();
  3937  05C4  27D4               	fcall	_TMR1_StopTimer
  3938                           
  3939                           ;logger.c: 27:     TMR1_state = TMR1_STOP;
  3940  05C5  0020               	movlb	0	; select bank0
  3941  05C6  01E3               	clrf	_TMR1_state	;volatile
  3942                           
  3943                           ;logger.c: 28:     TMR1_SetInterruptHandler(_TMR1_Ready);
  3944  05C7  30AF               	movlw	low __TMR1_Ready
  3945  05C8  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  3946  05C9  3007               	movlw	high __TMR1_Ready
  3947  05CA  00F4               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  3948  05CB  2791               	fcall	_TMR1_SetInterruptHandler
  3949                           
  3950                           ;logger.c: 31:     IOCAF4_SetInterruptHandler(_IOC_Ready);
  3951  05CC  304B               	movlw	low __IOC_Ready
  3952  05CD  00F3               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler
  3953  05CE  3007               	movlw	high __IOC_Ready
  3954  05CF  00F4               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler+1
  3955  05D0  2797               	fcall	_IOCAF4_SetInterruptHandler
  3956                           
  3957                           ;logger.c: 32:     IOC_state = IOC_IDLE;
  3958  05D1  0020               	movlb	0	; select bank0
  3959  05D2  01E7               	clrf	_IOC_state	;volatile
  3960                           
  3961                           ;logger.c: 33:     IOC_value = 1;
  3962  05D3  3001               	movlw	1
  3963  05D4  00F5               	movwf	??_logger_initialize
  3964  05D5  0875               	movf	??_logger_initialize,w
  3965  05D6  00E2               	movwf	_IOC_value	;volatile
  3966                           
  3967                           ;logger.c: 35:     ESP_Set_application_handler(process_message);
  3968  05D7  304C               	movlw	low _process_message
  3969  05D8  00F3               	movwf	ESP_Set_application_handler@applicationHandler
  3970  05D9  3003               	movlw	high _process_message
  3971  05DA  00F4               	movwf	ESP_Set_application_handler@applicationHandler+1
  3972  05DB  27A9               	fcall	_ESP_Set_application_handler
  3973  05DC  0008               	return
  3974  05DD                     __end_of_logger_initialize:	
  3975                           
  3976                           	psect	text12
  3977  0706                     __ptext12:	
  3978 ;; *************** function _ADC_SelectChannel *****************
  3979 ;; Defined at:
  3980 ;;		line 85 in file "mcc_generated_files/adc.c"
  3981 ;; Parameters:    Size  Location     Type
  3982 ;;  channel         1    wreg     enum E2157
  3983 ;; Auto vars:     Size  Location     Type
  3984 ;;  channel         1    4[COMMON] enum E2157
  3985 ;; Return value:  Size  Location     Type
  3986 ;;                  1    wreg      void 
  3987 ;; Registers used:
  3988 ;;		wreg, status,2, status,0
  3989 ;; Tracked objects:
  3990 ;;		On entry : 0/0
  3991 ;;		On exit  : 0/0
  3992 ;;		Unchanged: 0/0
  3993 ;; Data sizes:     COMMON   BANK0   BANK1
  3994 ;;      Params:         0       0       0
  3995 ;;      Locals:         1       0       0
  3996 ;;      Temps:          1       0       0
  3997 ;;      Totals:         2       0       0
  3998 ;;Total ram usage:        2 bytes
  3999 ;; Hardware stack levels used:    1
  4000 ;; Hardware stack levels required when called:    4
  4001 ;; This function calls:
  4002 ;;		Nothing
  4003 ;; This function is called by:
  4004 ;;		_logger_initialize
  4005 ;; This function uses a non-reentrant model
  4006 ;;
  4007                           
  4008                           
  4009                           ;psect for function _ADC_SelectChannel
  4010  0706                     _ADC_SelectChannel:	
  4011                           
  4012                           ;incstack = 0
  4013                           ; Regs used in _ADC_SelectChannel: [wreg+status,2+status,0]
  4014                           ;ADC_SelectChannel@channel stored from wreg
  4015  0706  00F4               	movwf	ADC_SelectChannel@channel
  4016                           
  4017                           ;mcc_generated_files/adc.c: 85: void ADC_SelectChannel(adc_channel_t channel);mcc_genera
      +                          ted_files/adc.c: 86: {;mcc_generated_files/adc.c: 88:     ADCON0bits.CHS = channel;
  4018  0707  0874               	movf	ADC_SelectChannel@channel,w
  4019  0708  00F3               	movwf	??_ADC_SelectChannel
  4020  0709  0DF3               	rlf	??_ADC_SelectChannel,f
  4021  070A  0DF3               	rlf	??_ADC_SelectChannel,f
  4022  070B  0021               	movlb	1	; select bank1
  4023  070C  081D               	movf	29,w	;volatile
  4024  070D  0673               	xorwf	??_ADC_SelectChannel,w
  4025  070E  3983               	andlw	-125
  4026  070F  0673               	xorwf	??_ADC_SelectChannel,w
  4027  0710  009D               	movwf	29	;volatile
  4028                           
  4029                           ;mcc_generated_files/adc.c: 90:     ADCON0bits.ADON = 1;
  4030  0711  141D               	bsf	29,0	;volatile
  4031  0712  0008               	return
  4032  0713                     __end_of_ADC_SelectChannel:	
  4033                           
  4034                           	psect	text13
  4035  077E                     __ptext13:	
  4036 ;; *************** function _SYSTEM_Initialize *****************
  4037 ;; Defined at:
  4038 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4039 ;; Parameters:    Size  Location     Type
  4040 ;;		None
  4041 ;; Auto vars:     Size  Location     Type
  4042 ;;		None
  4043 ;; Return value:  Size  Location     Type
  4044 ;;                  1    wreg      void 
  4045 ;; Registers used:
  4046 ;;		wreg, status,2, status,0, pclath, cstack
  4047 ;; Tracked objects:
  4048 ;;		On entry : 0/0
  4049 ;;		On exit  : 0/0
  4050 ;;		Unchanged: 0/0
  4051 ;; Data sizes:     COMMON   BANK0   BANK1
  4052 ;;      Params:         0       0       0
  4053 ;;      Locals:         0       0       0
  4054 ;;      Temps:          0       0       0
  4055 ;;      Totals:         0       0       0
  4056 ;;Total ram usage:        0 bytes
  4057 ;; Hardware stack levels used:    1
  4058 ;; Hardware stack levels required when called:    6
  4059 ;; This function calls:
  4060 ;;		_ADC_Initialize
  4061 ;;		_EUSART_Initialize
  4062 ;;		_OSCILLATOR_Initialize
  4063 ;;		_PIN_MANAGER_Initialize
  4064 ;;		_TMR1_Initialize
  4065 ;;		_WDT_Initialize
  4066 ;; This function is called by:
  4067 ;;		_main
  4068 ;; This function uses a non-reentrant model
  4069 ;;
  4070                           
  4071                           
  4072                           ;psect for function _SYSTEM_Initialize
  4073  077E                     _SYSTEM_Initialize:	
  4074                           
  4075                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  4076                           
  4077                           ;incstack = 0
  4078                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4079  077E  259E               	fcall	_PIN_MANAGER_Initialize
  4080                           
  4081                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  4082  077F  2741               	fcall	_OSCILLATOR_Initialize
  4083                           
  4084                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  4085  0780  27CA               	fcall	_WDT_Initialize
  4086                           
  4087                           ;mcc_generated_files/mcc.c: 56:     TMR1_Initialize();
  4088  0781  268C               	fcall	_TMR1_Initialize
  4089                           
  4090                           ;mcc_generated_files/mcc.c: 57:     ADC_Initialize();
  4091  0782  2755               	fcall	_ADC_Initialize
  4092                           
  4093                           ;mcc_generated_files/mcc.c: 58:     EUSART_Initialize();
  4094  0783  24F1               	fcall	_EUSART_Initialize
  4095  0784  0008               	return
  4096  0785                     __end_of_SYSTEM_Initialize:	
  4097                           
  4098                           	psect	text14
  4099  07CA                     __ptext14:	
  4100 ;; *************** function _WDT_Initialize *****************
  4101 ;; Defined at:
  4102 ;;		line 75 in file "mcc_generated_files/mcc.c"
  4103 ;; Parameters:    Size  Location     Type
  4104 ;;		None
  4105 ;; Auto vars:     Size  Location     Type
  4106 ;;		None
  4107 ;; Return value:  Size  Location     Type
  4108 ;;                  1    wreg      void 
  4109 ;; Registers used:
  4110 ;;		wreg
  4111 ;; Tracked objects:
  4112 ;;		On entry : 0/0
  4113 ;;		On exit  : 0/0
  4114 ;;		Unchanged: 0/0
  4115 ;; Data sizes:     COMMON   BANK0   BANK1
  4116 ;;      Params:         0       0       0
  4117 ;;      Locals:         0       0       0
  4118 ;;      Temps:          0       0       0
  4119 ;;      Totals:         0       0       0
  4120 ;;Total ram usage:        0 bytes
  4121 ;; Hardware stack levels used:    1
  4122 ;; Hardware stack levels required when called:    4
  4123 ;; This function calls:
  4124 ;;		Nothing
  4125 ;; This function is called by:
  4126 ;;		_SYSTEM_Initialize
  4127 ;; This function uses a non-reentrant model
  4128 ;;
  4129                           
  4130                           
  4131                           ;psect for function _WDT_Initialize
  4132  07CA                     _WDT_Initialize:	
  4133                           
  4134                           ;mcc_generated_files/mcc.c: 78:     WDTCON = 0x16;
  4135                           
  4136                           ;incstack = 0
  4137                           ; Regs used in _WDT_Initialize: [wreg]
  4138  07CA  3016               	movlw	22
  4139  07CB  0021               	movlb	1	; select bank1
  4140  07CC  0097               	movwf	23	;volatile
  4141  07CD  0008               	return
  4142  07CE                     __end_of_WDT_Initialize:	
  4143                           
  4144                           	psect	text15
  4145  068C                     __ptext15:	
  4146 ;; *************** function _TMR1_Initialize *****************
  4147 ;; Defined at:
  4148 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  4149 ;; Parameters:    Size  Location     Type
  4150 ;;		None
  4151 ;; Auto vars:     Size  Location     Type
  4152 ;;		None
  4153 ;; Return value:  Size  Location     Type
  4154 ;;                  1    wreg      void 
  4155 ;; Registers used:
  4156 ;;		wreg, status,2, status,0, pclath, cstack
  4157 ;; Tracked objects:
  4158 ;;		On entry : 0/0
  4159 ;;		On exit  : 0/0
  4160 ;;		Unchanged: 0/0
  4161 ;; Data sizes:     COMMON   BANK0   BANK1
  4162 ;;      Params:         0       0       0
  4163 ;;      Locals:         0       0       0
  4164 ;;      Temps:          0       0       0
  4165 ;;      Totals:         0       0       0
  4166 ;;Total ram usage:        0 bytes
  4167 ;; Hardware stack levels used:    1
  4168 ;; Hardware stack levels required when called:    5
  4169 ;; This function calls:
  4170 ;;		_TMR1_SetInterruptHandler
  4171 ;; This function is called by:
  4172 ;;		_SYSTEM_Initialize
  4173 ;; This function uses a non-reentrant model
  4174 ;;
  4175                           
  4176                           
  4177                           ;psect for function _TMR1_Initialize
  4178  068C                     _TMR1_Initialize:	
  4179                           
  4180                           ;mcc_generated_files/tmr1.c: 69:     T1GCON = 0x00;
  4181                           
  4182                           ;incstack = 0
  4183                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4184  068C  0020               	movlb	0	; select bank0
  4185  068D  0199               	clrf	25	;volatile
  4186                           
  4187                           ;mcc_generated_files/tmr1.c: 72:     TMR1H = 0x63;
  4188  068E  3063               	movlw	99
  4189  068F  0097               	movwf	23	;volatile
  4190                           
  4191                           ;mcc_generated_files/tmr1.c: 75:     TMR1L = 0xC0;
  4192  0690  30C0               	movlw	192
  4193  0691  0096               	movwf	22	;volatile
  4194                           
  4195                           ;mcc_generated_files/tmr1.c: 78:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  4196  0692  0817               	movf	23,w	;volatile
  4197  0693  00DB               	movwf	_timer1ReloadVal+1	;volatile
  4198  0694  0816               	movf	22,w	;volatile
  4199  0695  00DA               	movwf	_timer1ReloadVal	;volatile
  4200                           
  4201                           ;mcc_generated_files/tmr1.c: 81:     PIR1bits.TMR1IF = 0;
  4202  0696  1011               	bcf	17,0	;volatile
  4203                           
  4204                           ;mcc_generated_files/tmr1.c: 84:     PIE1bits.TMR1IE = 1;
  4205  0697  0021               	movlb	1	; select bank1
  4206  0698  1411               	bsf	17,0	;volatile
  4207                           
  4208                           ;mcc_generated_files/tmr1.c: 87:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
  4209  0699  30ED               	movlw	low _TMR1_DefaultInterruptHandler
  4210  069A  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  4211  069B  3007               	movlw	high _TMR1_DefaultInterruptHandler
  4212  069C  00F4               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  4213  069D  2791               	fcall	_TMR1_SetInterruptHandler
  4214                           
  4215                           ;mcc_generated_files/tmr1.c: 90:     T1CON = 0x11;
  4216  069E  3011               	movlw	17
  4217  069F  0020               	movlb	0	; select bank0
  4218  06A0  0098               	movwf	24	;volatile
  4219  06A1  0008               	return
  4220  06A2                     __end_of_TMR1_Initialize:	
  4221                           
  4222                           	psect	text16
  4223  0791                     __ptext16:	
  4224 ;; *************** function _TMR1_SetInterruptHandler *****************
  4225 ;; Defined at:
  4226 ;;		line 171 in file "mcc_generated_files/tmr1.c"
  4227 ;; Parameters:    Size  Location     Type
  4228 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  4229 ;;		 -> _TMR1_Ready(1), TMR1_DefaultInterruptHandler(1), 
  4230 ;; Auto vars:     Size  Location     Type
  4231 ;;		None
  4232 ;; Return value:  Size  Location     Type
  4233 ;;                  1    wreg      void 
  4234 ;; Registers used:
  4235 ;;		wreg
  4236 ;; Tracked objects:
  4237 ;;		On entry : 0/0
  4238 ;;		On exit  : 0/0
  4239 ;;		Unchanged: 0/0
  4240 ;; Data sizes:     COMMON   BANK0   BANK1
  4241 ;;      Params:         2       0       0
  4242 ;;      Locals:         0       0       0
  4243 ;;      Temps:          0       0       0
  4244 ;;      Totals:         2       0       0
  4245 ;;Total ram usage:        2 bytes
  4246 ;; Hardware stack levels used:    1
  4247 ;; Hardware stack levels required when called:    4
  4248 ;; This function calls:
  4249 ;;		Nothing
  4250 ;; This function is called by:
  4251 ;;		_TMR1_Initialize
  4252 ;;		_logger_initialize
  4253 ;; This function uses a non-reentrant model
  4254 ;;
  4255                           
  4256                           
  4257                           ;psect for function _TMR1_SetInterruptHandler
  4258  0791                     _TMR1_SetInterruptHandler:	
  4259                           
  4260                           ;mcc_generated_files/tmr1.c: 172:     TMR1_InterruptHandler = InterruptHandler;
  4261                           
  4262                           ;incstack = 0
  4263                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  4264  0791  0874               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  4265  0792  0020               	movlb	0	; select bank0
  4266  0793  00D9               	movwf	_TMR1_InterruptHandler+1
  4267  0794  0873               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  4268  0795  00D8               	movwf	_TMR1_InterruptHandler
  4269  0796  0008               	return
  4270  0797                     __end_of_TMR1_SetInterruptHandler:	
  4271                           
  4272                           	psect	text17
  4273  059E                     __ptext17:	
  4274 ;; *************** function _PIN_MANAGER_Initialize *****************
  4275 ;; Defined at:
  4276 ;;		line 59 in file "mcc_generated_files/pin_manager.c"
  4277 ;; Parameters:    Size  Location     Type
  4278 ;;		None
  4279 ;; Auto vars:     Size  Location     Type
  4280 ;;		None
  4281 ;; Return value:  Size  Location     Type
  4282 ;;                  1    wreg      void 
  4283 ;; Registers used:
  4284 ;;		wreg, status,2, status,0, pclath, cstack
  4285 ;; Tracked objects:
  4286 ;;		On entry : 0/0
  4287 ;;		On exit  : 0/0
  4288 ;;		Unchanged: 0/0
  4289 ;; Data sizes:     COMMON   BANK0   BANK1
  4290 ;;      Params:         0       0       0
  4291 ;;      Locals:         0       0       0
  4292 ;;      Temps:          0       0       0
  4293 ;;      Totals:         0       0       0
  4294 ;;Total ram usage:        0 bytes
  4295 ;; Hardware stack levels used:    1
  4296 ;; Hardware stack levels required when called:    5
  4297 ;; This function calls:
  4298 ;;		_IOCAF4_SetInterruptHandler
  4299 ;; This function is called by:
  4300 ;;		_SYSTEM_Initialize
  4301 ;; This function uses a non-reentrant model
  4302 ;;
  4303                           
  4304                           
  4305                           ;psect for function _PIN_MANAGER_Initialize
  4306  059E                     _PIN_MANAGER_Initialize:	
  4307                           
  4308                           ;mcc_generated_files/pin_manager.c: 64:     LATA = 0x00;
  4309                           
  4310                           ;incstack = 0
  4311                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4312  059E  0022               	movlb	2	; select bank2
  4313  059F  018C               	clrf	12	;volatile
  4314                           
  4315                           ;mcc_generated_files/pin_manager.c: 65:     LATC = 0x00;
  4316  05A0  018E               	clrf	14	;volatile
  4317                           
  4318                           ;mcc_generated_files/pin_manager.c: 70:     TRISA = 0x1F;
  4319  05A1  301F               	movlw	31
  4320  05A2  0021               	movlb	1	; select bank1
  4321  05A3  008C               	movwf	12	;volatile
  4322                           
  4323                           ;mcc_generated_files/pin_manager.c: 71:     TRISC = 0x2F;
  4324  05A4  302F               	movlw	47
  4325  05A5  008E               	movwf	14	;volatile
  4326                           
  4327                           ;mcc_generated_files/pin_manager.c: 76:     ANSELC = 0x0F;
  4328  05A6  300F               	movlw	15
  4329  05A7  0023               	movlb	3	; select bank3
  4330  05A8  008E               	movwf	14	;volatile
  4331                           
  4332                           ;mcc_generated_files/pin_manager.c: 77:     ANSELA = 0x07;
  4333  05A9  3007               	movlw	7
  4334  05AA  008C               	movwf	12	;volatile
  4335                           
  4336                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x10;
  4337  05AB  3010               	movlw	16
  4338  05AC  0024               	movlb	4	; select bank4
  4339  05AD  008C               	movwf	12	;volatile
  4340                           
  4341                           ;mcc_generated_files/pin_manager.c: 83:     WPUC = 0x00;
  4342  05AE  018E               	clrf	14	;volatile
  4343                           
  4344                           ;mcc_generated_files/pin_manager.c: 84:     OPTION_REGbits.nWPUEN = 0;
  4345  05AF  0021               	movlb	1	; select bank1
  4346  05B0  1395               	bcf	21,7	;volatile
  4347                           
  4348                           ;mcc_generated_files/pin_manager.c: 93:     APFCON = 0x00;
  4349  05B1  0022               	movlb	2	; select bank2
  4350  05B2  019D               	clrf	29	;volatile
  4351                           
  4352                           ;mcc_generated_files/pin_manager.c: 99:     IOCAFbits.IOCAF4 = 0;
  4353  05B3  0027               	movlb	7	; select bank7
  4354  05B4  1213               	bcf	19,4	;volatile
  4355                           
  4356                           ;mcc_generated_files/pin_manager.c: 101:     IOCANbits.IOCAN4 = 1;
  4357  05B5  1612               	bsf	18,4	;volatile
  4358                           
  4359                           ;mcc_generated_files/pin_manager.c: 103:     IOCAPbits.IOCAP4 = 1;
  4360  05B6  1611               	bsf	17,4	;volatile
  4361                           
  4362                           ;mcc_generated_files/pin_manager.c: 108:     IOCAF4_SetInterruptHandler(IOCAF4_DefaultIn
      +                          terruptHandler);
  4363  05B7  30EE               	movlw	low _IOCAF4_DefaultInterruptHandler
  4364  05B8  00F3               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler
  4365  05B9  3007               	movlw	high _IOCAF4_DefaultInterruptHandler
  4366  05BA  00F4               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler+1
  4367  05BB  2797               	fcall	_IOCAF4_SetInterruptHandler
  4368                           
  4369                           ;mcc_generated_files/pin_manager.c: 111:     INTCONbits.IOCIE = 1;
  4370  05BC  158B               	bsf	11,3	;volatile
  4371  05BD  0008               	return
  4372  05BE                     __end_of_PIN_MANAGER_Initialize:	
  4373                           
  4374                           	psect	text18
  4375  0797                     __ptext18:	
  4376 ;; *************** function _IOCAF4_SetInterruptHandler *****************
  4377 ;; Defined at:
  4378 ;;		line 142 in file "mcc_generated_files/pin_manager.c"
  4379 ;; Parameters:    Size  Location     Type
  4380 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  4381 ;;		 -> _IOC_Ready(1), IOCAF4_DefaultInterruptHandler(1), 
  4382 ;; Auto vars:     Size  Location     Type
  4383 ;;		None
  4384 ;; Return value:  Size  Location     Type
  4385 ;;                  1    wreg      void 
  4386 ;; Registers used:
  4387 ;;		wreg
  4388 ;; Tracked objects:
  4389 ;;		On entry : 0/0
  4390 ;;		On exit  : 0/0
  4391 ;;		Unchanged: 0/0
  4392 ;; Data sizes:     COMMON   BANK0   BANK1
  4393 ;;      Params:         2       0       0
  4394 ;;      Locals:         0       0       0
  4395 ;;      Temps:          0       0       0
  4396 ;;      Totals:         2       0       0
  4397 ;;Total ram usage:        2 bytes
  4398 ;; Hardware stack levels used:    1
  4399 ;; Hardware stack levels required when called:    4
  4400 ;; This function calls:
  4401 ;;		Nothing
  4402 ;; This function is called by:
  4403 ;;		_PIN_MANAGER_Initialize
  4404 ;;		_logger_initialize
  4405 ;; This function uses a non-reentrant model
  4406 ;;
  4407                           
  4408                           
  4409                           ;psect for function _IOCAF4_SetInterruptHandler
  4410  0797                     _IOCAF4_SetInterruptHandler:	
  4411                           
  4412                           ;mcc_generated_files/pin_manager.c: 143:     IOCAF4_InterruptHandler = InterruptHandler;
  4413                           
  4414                           ;incstack = 0
  4415                           ; Regs used in _IOCAF4_SetInterruptHandler: [wreg]
  4416  0797  0874               	movf	IOCAF4_SetInterruptHandler@InterruptHandler+1,w
  4417  0798  0020               	movlb	0	; select bank0
  4418  0799  00EF               	movwf	_IOCAF4_InterruptHandler+1
  4419  079A  0873               	movf	IOCAF4_SetInterruptHandler@InterruptHandler,w
  4420  079B  00EE               	movwf	_IOCAF4_InterruptHandler
  4421  079C  0008               	return
  4422  079D                     __end_of_IOCAF4_SetInterruptHandler:	
  4423                           
  4424                           	psect	text19
  4425  0741                     __ptext19:	
  4426 ;; *************** function _OSCILLATOR_Initialize *****************
  4427 ;; Defined at:
  4428 ;;		line 61 in file "mcc_generated_files/mcc.c"
  4429 ;; Parameters:    Size  Location     Type
  4430 ;;		None
  4431 ;; Auto vars:     Size  Location     Type
  4432 ;;		None
  4433 ;; Return value:  Size  Location     Type
  4434 ;;                  1    wreg      void 
  4435 ;; Registers used:
  4436 ;;		wreg, status,2
  4437 ;; Tracked objects:
  4438 ;;		On entry : 0/0
  4439 ;;		On exit  : 0/0
  4440 ;;		Unchanged: 0/0
  4441 ;; Data sizes:     COMMON   BANK0   BANK1
  4442 ;;      Params:         0       0       0
  4443 ;;      Locals:         0       0       0
  4444 ;;      Temps:          0       0       0
  4445 ;;      Totals:         0       0       0
  4446 ;;Total ram usage:        0 bytes
  4447 ;; Hardware stack levels used:    1
  4448 ;; Hardware stack levels required when called:    4
  4449 ;; This function calls:
  4450 ;;		Nothing
  4451 ;; This function is called by:
  4452 ;;		_SYSTEM_Initialize
  4453 ;; This function uses a non-reentrant model
  4454 ;;
  4455                           
  4456                           
  4457                           ;psect for function _OSCILLATOR_Initialize
  4458  0741                     _OSCILLATOR_Initialize:	
  4459                           
  4460                           ;mcc_generated_files/mcc.c: 64:     OSCCON = 0x70;
  4461                           
  4462                           ;incstack = 0
  4463                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4464  0741  3070               	movlw	112
  4465  0742  0021               	movlb	1	; select bank1
  4466  0743  0099               	movwf	25	;volatile
  4467                           
  4468                           ;mcc_generated_files/mcc.c: 66:     OSCTUNE = 0x00;
  4469  0744  0198               	clrf	24	;volatile
  4470                           
  4471                           ;mcc_generated_files/mcc.c: 68:     BORCON = 0x00;
  4472  0745  0022               	movlb	2	; select bank2
  4473  0746  0196               	clrf	22	;volatile
  4474  0747                     l211:	
  4475                           ;mcc_generated_files/mcc.c: 71:     {;mcc_generated_files/mcc.c: 72:     }
  4476                           
  4477                           ;mcc_generated_files/mcc.c: 70:     while(PLLR == 0)
  4478                           
  4479                           
  4480                           ;mcc_generated_files/mcc.c: 70:     while(PLLR == 0)
  4481  0747  0021               	movlb	1	; select bank1
  4482  0748  1B1A               	btfsc	26,6	;volatile
  4483  0749  0008               	return
  4484  074A  2F47               	goto	l211
  4485  074B                     __end_of_OSCILLATOR_Initialize:	
  4486                           
  4487                           	psect	text20
  4488  04F1                     __ptext20:	
  4489 ;; *************** function _EUSART_Initialize *****************
  4490 ;; Defined at:
  4491 ;;		line 75 in file "mcc_generated_files/eusart.c"
  4492 ;; Parameters:    Size  Location     Type
  4493 ;;		None
  4494 ;; Auto vars:     Size  Location     Type
  4495 ;;		None
  4496 ;; Return value:  Size  Location     Type
  4497 ;;                  1    wreg      void 
  4498 ;; Registers used:
  4499 ;;		wreg, status,2, status,0, pclath, cstack
  4500 ;; Tracked objects:
  4501 ;;		On entry : 0/0
  4502 ;;		On exit  : 0/0
  4503 ;;		Unchanged: 0/0
  4504 ;; Data sizes:     COMMON   BANK0   BANK1
  4505 ;;      Params:         0       0       0
  4506 ;;      Locals:         0       0       0
  4507 ;;      Temps:          1       0       0
  4508 ;;      Totals:         1       0       0
  4509 ;;Total ram usage:        1 bytes
  4510 ;; Hardware stack levels used:    1
  4511 ;; Hardware stack levels required when called:    5
  4512 ;; This function calls:
  4513 ;;		_EUSART_SetRxInterruptHandler
  4514 ;;		_EUSART_SetTxInterruptHandler
  4515 ;; This function is called by:
  4516 ;;		_SYSTEM_Initialize
  4517 ;; This function uses a non-reentrant model
  4518 ;;
  4519                           
  4520                           
  4521                           ;psect for function _EUSART_Initialize
  4522  04F1                     _EUSART_Initialize:	
  4523                           
  4524                           ;mcc_generated_files/eusart.c: 78:     PIE1bits.RCIE = 0;
  4525                           
  4526                           ;incstack = 0
  4527                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4528  04F1  0021               	movlb	1	; select bank1
  4529  04F2  1291               	bcf	17,5	;volatile
  4530                           
  4531                           ;mcc_generated_files/eusart.c: 79:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  4532  04F3  3071               	movlw	low _EUSART_Receive_ISR
  4533  04F4  00F3               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  4534  04F5  3006               	movlw	high _EUSART_Receive_ISR
  4535  04F6  00F4               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  4536  04F7  27A3               	fcall	_EUSART_SetRxInterruptHandler
  4537                           
  4538                           ;mcc_generated_files/eusart.c: 80:     PIE1bits.TXIE = 0;
  4539  04F8  0021               	movlb	1	; select bank1
  4540  04F9  1211               	bcf	17,4	;volatile
  4541                           
  4542                           ;mcc_generated_files/eusart.c: 81:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  4543  04FA  3054               	movlw	low _EUSART_Transmit_ISR
  4544  04FB  00F3               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
  4545  04FC  3006               	movlw	high _EUSART_Transmit_ISR
  4546  04FD  00F4               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
  4547  04FE  279D               	fcall	_EUSART_SetTxInterruptHandler
  4548                           
  4549                           ;mcc_generated_files/eusart.c: 85:     BAUDCON = 0x08;
  4550  04FF  3008               	movlw	8
  4551  0500  0023               	movlb	3	; select bank3
  4552  0501  009F               	movwf	31	;volatile
  4553                           
  4554                           ;mcc_generated_files/eusart.c: 88:     RCSTA = 0x90;
  4555  0502  3090               	movlw	144
  4556  0503  009D               	movwf	29	;volatile
  4557                           
  4558                           ;mcc_generated_files/eusart.c: 91:     TXSTA = 0x24;
  4559  0504  3024               	movlw	36
  4560  0505  009E               	movwf	30	;volatile
  4561                           
  4562                           ;mcc_generated_files/eusart.c: 94:     SPBRGL = 0x44;
  4563  0506  3044               	movlw	68
  4564  0507  009B               	movwf	27	;volatile
  4565                           
  4566                           ;mcc_generated_files/eusart.c: 97:     SPBRGH = 0x00;
  4567  0508  019C               	clrf	28	;volatile
  4568                           
  4569                           ;mcc_generated_files/eusart.c: 101:     eusartTxHead = 0;
  4570  0509  01FA               	clrf	_eusartTxHead	;volatile
  4571                           
  4572                           ;mcc_generated_files/eusart.c: 102:     eusartTxTail = 0;
  4573  050A  0020               	movlb	0	; select bank0
  4574  050B  01EC               	clrf	_eusartTxTail	;volatile
  4575                           
  4576                           ;mcc_generated_files/eusart.c: 103:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  4577  050C  300A               	movlw	10
  4578  050D  00F5               	movwf	??_EUSART_Initialize
  4579  050E  0875               	movf	??_EUSART_Initialize,w
  4580  050F  00F9               	movwf	_eusartTxBufferRemaining	;volatile
  4581                           
  4582                           ;mcc_generated_files/eusart.c: 105:     eusartRxHead = 0;
  4583  0510  01EB               	clrf	_eusartRxHead	;volatile
  4584                           
  4585                           ;mcc_generated_files/eusart.c: 106:     eusartRxTail = 0;
  4586  0511  01EA               	clrf	_eusartRxTail	;volatile
  4587                           
  4588                           ;mcc_generated_files/eusart.c: 107:     eusartRxCount = 0;
  4589  0512  01E9               	clrf	_eusartRxCount	;volatile
  4590                           
  4591                           ;mcc_generated_files/eusart.c: 110:     PIE1bits.RCIE = 1;
  4592  0513  0021               	movlb	1	; select bank1
  4593  0514  1691               	bsf	17,5	;volatile
  4594  0515  0008               	return
  4595  0516                     __end_of_EUSART_Initialize:	
  4596                           
  4597                           	psect	text21
  4598  079D                     __ptext21:	
  4599 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  4600 ;; Defined at:
  4601 ;;		line 211 in file "mcc_generated_files/eusart.c"
  4602 ;; Parameters:    Size  Location     Type
  4603 ;;  interruptHan    2    3[COMMON] PTR FTN()void 
  4604 ;;		 -> EUSART_Transmit_ISR(1), 
  4605 ;; Auto vars:     Size  Location     Type
  4606 ;;		None
  4607 ;; Return value:  Size  Location     Type
  4608 ;;                  1    wreg      void 
  4609 ;; Registers used:
  4610 ;;		wreg
  4611 ;; Tracked objects:
  4612 ;;		On entry : 0/0
  4613 ;;		On exit  : 0/0
  4614 ;;		Unchanged: 0/0
  4615 ;; Data sizes:     COMMON   BANK0   BANK1
  4616 ;;      Params:         2       0       0
  4617 ;;      Locals:         0       0       0
  4618 ;;      Temps:          0       0       0
  4619 ;;      Totals:         2       0       0
  4620 ;;Total ram usage:        2 bytes
  4621 ;; Hardware stack levels used:    1
  4622 ;; Hardware stack levels required when called:    4
  4623 ;; This function calls:
  4624 ;;		Nothing
  4625 ;; This function is called by:
  4626 ;;		_EUSART_Initialize
  4627 ;; This function uses a non-reentrant model
  4628 ;;
  4629                           
  4630                           
  4631                           ;psect for function _EUSART_SetTxInterruptHandler
  4632  079D                     _EUSART_SetTxInterruptHandler:	
  4633                           
  4634                           ;mcc_generated_files/eusart.c: 212:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  4635                           
  4636                           ;incstack = 0
  4637                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  4638  079D  0874               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
  4639  079E  0020               	movlb	0	; select bank0
  4640  079F  00E1               	movwf	_EUSART_TxDefaultInterruptHandler+1
  4641  07A0  0873               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
  4642  07A1  00E0               	movwf	_EUSART_TxDefaultInterruptHandler
  4643  07A2  0008               	return
  4644  07A3                     __end_of_EUSART_SetTxInterruptHandler:	
  4645                           
  4646                           	psect	text22
  4647  07A3                     __ptext22:	
  4648 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  4649 ;; Defined at:
  4650 ;;		line 215 in file "mcc_generated_files/eusart.c"
  4651 ;; Parameters:    Size  Location     Type
  4652 ;;  interruptHan    2    3[COMMON] PTR FTN()void 
  4653 ;;		 -> EUSART_Receive_ISR(1), 
  4654 ;; Auto vars:     Size  Location     Type
  4655 ;;		None
  4656 ;; Return value:  Size  Location     Type
  4657 ;;                  1    wreg      void 
  4658 ;; Registers used:
  4659 ;;		wreg
  4660 ;; Tracked objects:
  4661 ;;		On entry : 0/0
  4662 ;;		On exit  : 0/0
  4663 ;;		Unchanged: 0/0
  4664 ;; Data sizes:     COMMON   BANK0   BANK1
  4665 ;;      Params:         2       0       0
  4666 ;;      Locals:         0       0       0
  4667 ;;      Temps:          0       0       0
  4668 ;;      Totals:         2       0       0
  4669 ;;Total ram usage:        2 bytes
  4670 ;; Hardware stack levels used:    1
  4671 ;; Hardware stack levels required when called:    4
  4672 ;; This function calls:
  4673 ;;		Nothing
  4674 ;; This function is called by:
  4675 ;;		_EUSART_Initialize
  4676 ;; This function uses a non-reentrant model
  4677 ;;
  4678                           
  4679                           
  4680                           ;psect for function _EUSART_SetRxInterruptHandler
  4681  07A3                     _EUSART_SetRxInterruptHandler:	
  4682                           
  4683                           ;mcc_generated_files/eusart.c: 216:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  4684                           
  4685                           ;incstack = 0
  4686                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  4687  07A3  0874               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  4688  07A4  0020               	movlb	0	; select bank0
  4689  07A5  00DF               	movwf	_EUSART_RxDefaultInterruptHandler+1
  4690  07A6  0873               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  4691  07A7  00DE               	movwf	_EUSART_RxDefaultInterruptHandler
  4692  07A8  0008               	return
  4693  07A9                     __end_of_EUSART_SetRxInterruptHandler:	
  4694                           
  4695                           	psect	text23
  4696  0755                     __ptext23:	
  4697 ;; *************** function _ADC_Initialize *****************
  4698 ;; Defined at:
  4699 ;;		line 65 in file "mcc_generated_files/adc.c"
  4700 ;; Parameters:    Size  Location     Type
  4701 ;;		None
  4702 ;; Auto vars:     Size  Location     Type
  4703 ;;		None
  4704 ;; Return value:  Size  Location     Type
  4705 ;;                  1    wreg      void 
  4706 ;; Registers used:
  4707 ;;		wreg, status,2
  4708 ;; Tracked objects:
  4709 ;;		On entry : 0/0
  4710 ;;		On exit  : 0/0
  4711 ;;		Unchanged: 0/0
  4712 ;; Data sizes:     COMMON   BANK0   BANK1
  4713 ;;      Params:         0       0       0
  4714 ;;      Locals:         0       0       0
  4715 ;;      Temps:          0       0       0
  4716 ;;      Totals:         0       0       0
  4717 ;;Total ram usage:        0 bytes
  4718 ;; Hardware stack levels used:    1
  4719 ;; Hardware stack levels required when called:    4
  4720 ;; This function calls:
  4721 ;;		Nothing
  4722 ;; This function is called by:
  4723 ;;		_SYSTEM_Initialize
  4724 ;; This function uses a non-reentrant model
  4725 ;;
  4726                           
  4727                           
  4728                           ;psect for function _ADC_Initialize
  4729  0755                     _ADC_Initialize:	
  4730                           
  4731                           ;mcc_generated_files/adc.c: 70:     ADCON0 = 0x01;
  4732                           
  4733                           ;incstack = 0
  4734                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  4735  0755  3001               	movlw	1
  4736  0756  0021               	movlb	1	; select bank1
  4737  0757  009D               	movwf	29	;volatile
  4738                           
  4739                           ;mcc_generated_files/adc.c: 73:     ADCON1 = 0xF0;
  4740  0758  30F0               	movlw	240
  4741  0759  009E               	movwf	30	;volatile
  4742                           
  4743                           ;mcc_generated_files/adc.c: 76:     ADRESL = 0x00;
  4744  075A  019B               	clrf	27	;volatile
  4745                           
  4746                           ;mcc_generated_files/adc.c: 79:     ADRESH = 0x00;
  4747  075B  019C               	clrf	28	;volatile
  4748                           
  4749                           ;mcc_generated_files/adc.c: 82:     PIE1bits.ADIE = 1;
  4750  075C  1711               	bsf	17,6	;volatile
  4751  075D  0008               	return
  4752  075E                     __end_of_ADC_Initialize:	
  4753                           
  4754                           	psect	text24
  4755  047A                     __ptext24:	
  4756 ;; *************** function _ESP_message_handler *****************
  4757 ;; Defined at:
  4758 ;;		line 152 in file "esp1.c"
  4759 ;; Parameters:    Size  Location     Type
  4760 ;;		None
  4761 ;; Auto vars:     Size  Location     Type
  4762 ;;  index           2    0        PTR unsigned char 
  4763 ;;  ret             1   18[BANK0 ] unsigned char 
  4764 ;;  aux             1    0        unsigned char 
  4765 ;; Return value:  Size  Location     Type
  4766 ;;                  1    wreg      void 
  4767 ;; Registers used:
  4768 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4769 ;; Tracked objects:
  4770 ;;		On entry : 0/0
  4771 ;;		On exit  : 0/0
  4772 ;;		Unchanged: 0/0
  4773 ;; Data sizes:     COMMON   BANK0   BANK1
  4774 ;;      Params:         0       0       0
  4775 ;;      Locals:         0       1       0
  4776 ;;      Temps:          0       2       0
  4777 ;;      Totals:         0       3       0
  4778 ;;Total ram usage:        3 bytes
  4779 ;; Hardware stack levels used:    1
  4780 ;; Hardware stack levels required when called:    8
  4781 ;; This function calls:
  4782 ;;		_ESP_process_rx_data
  4783 ;;		_ESP_read
  4784 ;; This function is called by:
  4785 ;;		_main
  4786 ;; This function uses a non-reentrant model
  4787 ;;
  4788                           
  4789                           
  4790                           ;psect for function _ESP_message_handler
  4791  047A                     _ESP_message_handler:	
  4792                           
  4793                           ;esp1.c: 154:     unsigned char ret,aux;;esp1.c: 155:     char *index;;esp1.c: 157:     
      +                          ret = ESP_read();
  4794                           
  4795                           ;incstack = 0
  4796                           ; Regs used in _ESP_message_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4797  047A  241F               	fcall	_ESP_read
  4798  047B  0020               	movlb	0	; select bank0
  4799  047C  00B0               	movwf	??_ESP_message_handler
  4800  047D  0830               	movf	??_ESP_message_handler,w
  4801  047E  00B2               	movwf	ESP_message_handler@ret
  4802                           
  4803                           ;esp1.c: 159:     switch (ret) {
  4804  047F  2C8B               	goto	l3276
  4805  0480                     l3268:	
  4806                           ;esp1.c: 163:         case ESP_RX:
  4807                           
  4808                           ;esp1.c: 161:             break;
  4809                           
  4810                           ;esp1.c: 160:         case ESP_OTHER:
  4811                           
  4812                           
  4813                           ;esp1.c: 164:             ESP_process_rx_data();
  4814  0480  2516               	fcall	_ESP_process_rx_data
  4815                           
  4816                           ;esp1.c: 165:             break;
  4817  0481  0008               	return
  4818  0482                     l3270:	
  4819                           ;esp1.c: 167:         case ESP_CONNECT:
  4820                           
  4821                           
  4822                           ;esp1.c: 168:             esp_channel = esp_read_data[0];
  4823  0482  0021               	movlb	1	; select bank1
  4824  0483  082C               	movf	_esp_read_data^(0+128),w	;volatile
  4825  0484  0020               	movlb	0	; select bank0
  4826  0485  00B0               	movwf	??_ESP_message_handler
  4827  0486  0830               	movf	??_ESP_message_handler,w
  4828  0487  00E5               	movwf	_esp_channel	;volatile
  4829                           
  4830                           ;esp1.c: 169:             break;
  4831  0488  0008               	return
  4832  0489                     l3272:	
  4833                           ;esp1.c: 171:         case ESP_CLOSED:
  4834                           
  4835                           
  4836                           ;esp1.c: 172:             esp_channel = 0;
  4837  0489  01E5               	clrf	_esp_channel	;volatile
  4838                           
  4839                           ;esp1.c: 177:     }
  4840                           
  4841                           ;esp1.c: 176:             break;
  4842                           
  4843                           ;esp1.c: 175:         default:
  4844                           
  4845                           ;esp1.c: 173:             break;
  4846  048A  0008               	return
  4847  048B                     l3276:	
  4848  048B  0832               	movf	ESP_message_handler@ret,w
  4849  048C  00B0               	movwf	??_ESP_message_handler
  4850  048D  01B1               	clrf	??_ESP_message_handler+1
  4851                           
  4852                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4853                           ; Switch size 1, requested type "space"
  4854                           ; Number of cases is 1, Range of values is 0 to 0
  4855                           ; switch strategies available:
  4856                           ; Name         Instructions Cycles
  4857                           ; simple_byte            4     3 (average)
  4858                           ; direct_byte            8     6 (fixed)
  4859                           ; jumptable            260     6 (fixed)
  4860                           ;	Chosen strategy is simple_byte
  4861  048E  0831               	movf	??_ESP_message_handler+1,w
  4862  048F  3A00               	xorlw	0	; case 0
  4863  0490  1903               	skipnz
  4864  0491  2C93               	goto	l3382
  4865  0492  2CA1               	goto	l484
  4866  0493                     l3382:	
  4867                           
  4868                           ; Switch size 1, requested type "space"
  4869                           ; Number of cases is 4, Range of values is 0 to 8
  4870                           ; switch strategies available:
  4871                           ; Name         Instructions Cycles
  4872                           ; simple_byte           13     7 (average)
  4873                           ; direct_byte           24     6 (fixed)
  4874                           ; jumptable            260     6 (fixed)
  4875                           ;	Chosen strategy is simple_byte
  4876  0493  0830               	movf	??_ESP_message_handler,w
  4877  0494  3A00               	xorlw	0	; case 0
  4878  0495  1903               	skipnz
  4879  0496  2CA1               	goto	l484
  4880  0497  3A04               	xorlw	4	; case 4
  4881  0498  1903               	skipnz
  4882  0499  2C80               	goto	l3268
  4883  049A  3A02               	xorlw	2	; case 6
  4884  049B  1903               	skipnz
  4885  049C  2C82               	goto	l3270
  4886  049D  3A0E               	xorlw	14	; case 8
  4887  049E  1903               	skipnz
  4888  049F  2C89               	goto	l3272
  4889  04A0  2CA1               	goto	l484
  4890  04A1                     l484:	
  4891  04A1  0008               	return
  4892  04A2                     __end_of_ESP_message_handler:	
  4893                           
  4894                           	psect	text25
  4895  0516                     __ptext25:	
  4896 ;; *************** function _ESP_process_rx_data *****************
  4897 ;; Defined at:
  4898 ;;		line 137 in file "esp1.c"
  4899 ;; Parameters:    Size  Location     Type
  4900 ;;		None
  4901 ;; Auto vars:     Size  Location     Type
  4902 ;;  aux             1   15[BANK0 ] unsigned char 
  4903 ;;  index           1   14[BANK0 ] PTR unsigned char 
  4904 ;;		 -> NULL(0), esp_read_data(20), 
  4905 ;; Return value:  Size  Location     Type
  4906 ;;                  1    wreg      void 
  4907 ;; Registers used:
  4908 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4909 ;; Tracked objects:
  4910 ;;		On entry : 0/0
  4911 ;;		On exit  : 0/0
  4912 ;;		Unchanged: 0/0
  4913 ;; Data sizes:     COMMON   BANK0   BANK1
  4914 ;;      Params:         0       0       0
  4915 ;;      Locals:         0       2       0
  4916 ;;      Temps:          0       2       0
  4917 ;;      Totals:         0       4       0
  4918 ;;Total ram usage:        4 bytes
  4919 ;; Hardware stack levels used:    1
  4920 ;; Hardware stack levels required when called:    6
  4921 ;; This function calls:
  4922 ;;		Absolute function
  4923 ;;		_ESP_default_application_handler
  4924 ;;		_process_message
  4925 ;;		_strstr
  4926 ;; This function is called by:
  4927 ;;		_ESP_message_handler
  4928 ;; This function uses a non-reentrant model
  4929 ;;
  4930                           
  4931                           
  4932                           ;psect for function _ESP_process_rx_data
  4933  0516                     _ESP_process_rx_data:	
  4934                           
  4935                           ;esp1.c: 139:     char *index;;esp1.c: 140:     unsigned char aux;;esp1.c: 142:     esp_
      +                          channel = esp_read_data[5];
  4936                           
  4937                           ;incstack = 0
  4938                           ; Regs used in _ESP_process_rx_data: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4939  0516  0021               	movlb	1	; select bank1
  4940  0517  0831               	movf	(_esp_read_data^(0+128)+5),w	;volatile
  4941  0518  0020               	movlb	0	; select bank0
  4942  0519  00AC               	movwf	??_ESP_process_rx_data
  4943  051A  082C               	movf	??_ESP_process_rx_data,w
  4944  051B  00E5               	movwf	_esp_channel	;volatile
  4945                           
  4946                           ;esp1.c: 143:     index = strstr(esp_read_data,":");
  4947  051C  30E8               	movlw	low (STR_13| (0+32768))
  4948  051D  00A4               	movwf	strstr@n
  4949  051E  3087               	movlw	high (STR_13| (0+32768))
  4950  051F  00A5               	movwf	strstr@n+1
  4951  0520  30AC               	movlw	(low (_esp_read_data| 0))& (0+255)
  4952  0521  230C               	fcall	_strstr
  4953  0522  0020               	movlb	0	; select bank0
  4954  0523  00AC               	movwf	??_ESP_process_rx_data
  4955  0524  082C               	movf	??_ESP_process_rx_data,w
  4956  0525  00AE               	movwf	ESP_process_rx_data@index
  4957                           
  4958                           ;esp1.c: 144:     aux = *(++index);
  4959  0526  3001               	movlw	1
  4960  0527  00AC               	movwf	??_ESP_process_rx_data
  4961  0528  082C               	movf	??_ESP_process_rx_data,w
  4962  0529  07AE               	addwf	ESP_process_rx_data@index,f
  4963  052A  082E               	movf	ESP_process_rx_data@index,w
  4964  052B  0086               	movwf	6
  4965  052C  0187               	clrf	7
  4966  052D  0801               	movf	1,w
  4967  052E  00AD               	movwf	??_ESP_process_rx_data+1
  4968  052F  082D               	movf	??_ESP_process_rx_data+1,w
  4969  0530  00AF               	movwf	ESP_process_rx_data@aux
  4970                           
  4971                           ;esp1.c: 149:     ESP_external_message_handler(aux);
  4972  0531  082F               	movf	ESP_process_rx_data@aux,w
  4973  0532  00AC               	movwf	??_ESP_process_rx_data
  4974  0533  082C               	movf	??_ESP_process_rx_data,w
  4975  0534  00F4               	movwf	ESP_default_application_handler@data
  4976  0535  0857               	movf	_ESP_external_message_handler+1,w
  4977  0536  008A               	movwf	10
  4978  0537  0856               	movf	_ESP_external_message_handler,w
  4979  0538  000A               	callw
  4980  0539  3185               	pagesel	$
  4981  053A  0008               	return
  4982  053B                     __end_of_ESP_process_rx_data:	
  4983                           
  4984                           	psect	text26
  4985  07EC                     __ptext26:	
  4986 ;; *************** function _ESP_default_application_handler *****************
  4987 ;; Defined at:
  4988 ;;		line 212 in file "esp1.c"
  4989 ;; Parameters:    Size  Location     Type
  4990 ;;  data            1    4[COMMON] unsigned char 
  4991 ;; Auto vars:     Size  Location     Type
  4992 ;;		None
  4993 ;; Return value:  Size  Location     Type
  4994 ;;                  1    wreg      void 
  4995 ;; Registers used:
  4996 ;;		None
  4997 ;; Tracked objects:
  4998 ;;		On entry : 0/0
  4999 ;;		On exit  : 0/0
  5000 ;;		Unchanged: 0/0
  5001 ;; Data sizes:     COMMON   BANK0   BANK1
  5002 ;;      Params:         1       0       0
  5003 ;;      Locals:         0       0       0
  5004 ;;      Temps:          0       0       0
  5005 ;;      Totals:         1       0       0
  5006 ;;Total ram usage:        1 bytes
  5007 ;; Hardware stack levels used:    1
  5008 ;; Hardware stack levels required when called:    4
  5009 ;; This function calls:
  5010 ;;		Nothing
  5011 ;; This function is called by:
  5012 ;;		_ESP_initialize
  5013 ;;		_ESP_process_rx_data
  5014 ;; This function uses a non-reentrant model
  5015 ;;
  5016                           
  5017                           
  5018                           ;psect for function _ESP_default_application_handler
  5019  07EC                     _ESP_default_application_handler:	
  5020                           
  5021                           ;incstack = 0
  5022                           ; Regs used in _ESP_default_application_handler: []
  5023  07EC  0008               	return
  5024  07ED                     __end_of_ESP_default_application_handler:	
  5025                           
  5026                           	psect	text27
  5027  034C                     __ptext27:	
  5028 ;; *************** function _process_message *****************
  5029 ;; Defined at:
  5030 ;;		line 45 in file "logger.c"
  5031 ;; Parameters:    Size  Location     Type
  5032 ;;  message         1    4[COMMON] unsigned char 
  5033 ;; Auto vars:     Size  Location     Type
  5034 ;;		None
  5035 ;; Return value:  Size  Location     Type
  5036 ;;                  1    wreg      void 
  5037 ;; Registers used:
  5038 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5039 ;; Tracked objects:
  5040 ;;		On entry : 0/0
  5041 ;;		On exit  : 0/0
  5042 ;;		Unchanged: 0/0
  5043 ;; Data sizes:     COMMON   BANK0   BANK1
  5044 ;;      Params:         1       0       0
  5045 ;;      Locals:         0       0       0
  5046 ;;      Temps:          2       0       0
  5047 ;;      Totals:         3       0       0
  5048 ;;Total ram usage:        3 bytes
  5049 ;; Hardware stack levels used:    1
  5050 ;; Hardware stack levels required when called:    5
  5051 ;; This function calls:
  5052 ;;		_ADC_StartConversion
  5053 ;;		_TMR1_StartTimer
  5054 ;;		_TMR1_StopTimer
  5055 ;;		_toggle_format
  5056 ;; This function is called by:
  5057 ;;		_main
  5058 ;;		_logger_initialize
  5059 ;;		_bt_message_handler
  5060 ;;		_ESP_process_rx_data
  5061 ;; This function uses a non-reentrant model
  5062 ;;
  5063                           
  5064                           
  5065                           ;psect for function _process_message
  5066  034C                     _process_message:	
  5067                           
  5068                           ;logger.c: 45: void process_message(unsigned char message);logger.c: 46: {;logger.c: 49:
      +                               switch (message) {
  5069                           
  5070                           ;incstack = 0
  5071                           ; Regs used in _process_message: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5072  034C  2B66               	goto	l2284
  5073  034D                     l2266:	
  5074                           ;logger.c: 59:         case 'a':
  5075                           
  5076                           
  5077                           ;logger.c: 60:             ADC_StartConversion();
  5078  034D  27DA               	fcall	_ADC_StartConversion
  5079                           
  5080                           ;logger.c: 61:             break;
  5081  034E  0008               	return
  5082  034F                     l2268:	
  5083                           ;logger.c: 63:         case 'T':
  5084                           
  5085                           
  5086                           ;logger.c: 64:             toggle_format();
  5087  034F  272C               	fcall	_toggle_format
  5088                           
  5089                           ;logger.c: 65:             break;
  5090  0350  0008               	return
  5091  0351                     l2270:	
  5092                           ;logger.c: 67:         case 's':
  5093                           
  5094                           
  5095                           ;logger.c: 68:             if (TMR1_state == TMR1_RUNNING)
  5096  0351  0020               	movlb	0	; select bank0
  5097  0352  0363               	decf	_TMR1_state,w	;volatile
  5098  0353  1903               	btfsc	3,2
  5099  0354  0008               	return
  5100                           
  5101                           ;logger.c: 70:             TMR1_StartTimer();
  5102                           
  5103                           ;logger.c: 69:                 return;
  5104  0355  27D7               	fcall	_TMR1_StartTimer
  5105                           
  5106                           ;logger.c: 71:             TMR1_state = TMR1_RUNNING;
  5107  0356  3001               	movlw	1
  5108  0357  00F5               	movwf	??_process_message
  5109  0358  0875               	movf	??_process_message,w
  5110  0359  0020               	movlb	0	; select bank0
  5111  035A  00E3               	movwf	_TMR1_state	;volatile
  5112                           
  5113                           ;logger.c: 72:             break;
  5114  035B  0008               	return
  5115  035C                     l2278:	
  5116                           ;logger.c: 74:         case 'S':
  5117                           
  5118                           
  5119                           ;logger.c: 75:             TMR1_StopTimer();
  5120  035C  27D4               	fcall	_TMR1_StopTimer
  5121                           
  5122                           ;logger.c: 76:             TMR1_state = TMR1_STOP;
  5123  035D  0020               	movlb	0	; select bank0
  5124  035E  01E3               	clrf	_TMR1_state	;volatile
  5125                           
  5126                           ;logger.c: 77:             break;
  5127  035F  0008               	return
  5128  0360                     l563:	
  5129                           ;logger.c: 80:             do { LATAbits.LATA5 = 0; } while(0);
  5130                           
  5131                           ;logger.c: 79:         case 'o':
  5132                           
  5133  0360  0022               	movlb	2	; select bank2
  5134  0361  128C               	bcf	12,5	;volatile
  5135                           
  5136                           ;logger.c: 81:             break;
  5137  0362  0008               	return
  5138  0363                     l566:	
  5139                           ;logger.c: 84:             do { LATAbits.LATA5 = 1; } while(0);
  5140                           
  5141                           ;logger.c: 83:         case 'O':
  5142                           
  5143  0363  0022               	movlb	2	; select bank2
  5144  0364  168C               	bsf	12,5	;volatile
  5145                           
  5146                           ;logger.c: 89:     }
  5147                           
  5148                           ;logger.c: 88:             break;
  5149                           
  5150                           ;logger.c: 87:         default:
  5151                           
  5152                           ;logger.c: 85:             break;
  5153  0365  0008               	return
  5154  0366                     l2284:	
  5155  0366  0874               	movf	process_message@message,w
  5156  0367  00F5               	movwf	??_process_message
  5157  0368  01F6               	clrf	??_process_message+1
  5158                           
  5159                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5160                           ; Switch size 1, requested type "space"
  5161                           ; Number of cases is 1, Range of values is 0 to 0
  5162                           ; switch strategies available:
  5163                           ; Name         Instructions Cycles
  5164                           ; simple_byte            4     3 (average)
  5165                           ; direct_byte            8     6 (fixed)
  5166                           ; jumptable            260     6 (fixed)
  5167                           ;	Chosen strategy is simple_byte
  5168  0369  0876               	movf	??_process_message+1,w
  5169  036A  3A00               	xorlw	0	; case 0
  5170  036B  1903               	skipnz
  5171  036C  2B6E               	goto	l3384
  5172  036D  2B82               	goto	l560
  5173  036E                     l3384:	
  5174                           
  5175                           ; Switch size 1, requested type "space"
  5176                           ; Number of cases is 6, Range of values is 79 to 115
  5177                           ; switch strategies available:
  5178                           ; Name         Instructions Cycles
  5179                           ; simple_byte           19    10 (average)
  5180                           ; direct_byte           83     9 (fixed)
  5181                           ; jumptable            263     9 (fixed)
  5182                           ;	Chosen strategy is simple_byte
  5183  036E  0875               	movf	??_process_message,w
  5184  036F  3A4F               	xorlw	79	; case 79
  5185  0370  1903               	skipnz
  5186  0371  2B63               	goto	l566
  5187  0372  3A1C               	xorlw	28	; case 83
  5188  0373  1903               	skipnz
  5189  0374  2B5C               	goto	l2278
  5190  0375  3A07               	xorlw	7	; case 84
  5191  0376  1903               	skipnz
  5192  0377  2B4F               	goto	l2268
  5193  0378  3A35               	xorlw	53	; case 97
  5194  0379  1903               	skipnz
  5195  037A  2B4D               	goto	l2266
  5196  037B  3A0E               	xorlw	14	; case 111
  5197  037C  1903               	skipnz
  5198  037D  2B60               	goto	l563
  5199  037E  3A1C               	xorlw	28	; case 115
  5200  037F  1903               	skipnz
  5201  0380  2B51               	goto	l2270
  5202  0381  2B82               	goto	l560
  5203  0382                     l560:	
  5204  0382  0008               	return
  5205  0383                     __end_of_process_message:	
  5206                           
  5207                           	psect	text28
  5208  072C                     __ptext28:	
  5209 ;; *************** function _toggle_format *****************
  5210 ;; Defined at:
  5211 ;;		line 135 in file "logger.c"
  5212 ;; Parameters:    Size  Location     Type
  5213 ;;		None
  5214 ;; Auto vars:     Size  Location     Type
  5215 ;;		None
  5216 ;; Return value:  Size  Location     Type
  5217 ;;                  1    wreg      void 
  5218 ;; Registers used:
  5219 ;;		wreg, status,2, status,0
  5220 ;; Tracked objects:
  5221 ;;		On entry : 0/0
  5222 ;;		On exit  : 0/0
  5223 ;;		Unchanged: 0/0
  5224 ;; Data sizes:     COMMON   BANK0   BANK1
  5225 ;;      Params:         0       0       0
  5226 ;;      Locals:         0       0       0
  5227 ;;      Temps:          1       0       0
  5228 ;;      Totals:         1       0       0
  5229 ;;Total ram usage:        1 bytes
  5230 ;; Hardware stack levels used:    1
  5231 ;; Hardware stack levels required when called:    4
  5232 ;; This function calls:
  5233 ;;		Nothing
  5234 ;; This function is called by:
  5235 ;;		_process_message
  5236 ;; This function uses a non-reentrant model
  5237 ;;
  5238                           
  5239                           
  5240                           ;psect for function _toggle_format
  5241  072C                     _toggle_format:	
  5242                           
  5243                           ;logger.c: 137:     if (message_format == MESSAGE_BINARY) {
  5244                           
  5245                           ;incstack = 0
  5246                           ; Regs used in _toggle_format: [wreg+status,2+status,0]
  5247  072C  0020               	movlb	0	; select bank0
  5248  072D  0864               	movf	_message_format,w	;volatile
  5249  072E  1D03               	btfss	3,2
  5250  072F  2F35               	goto	l2254
  5251                           
  5252                           ;logger.c: 138:         message_format = MESSAGE_TEXT;
  5253  0730  3001               	movlw	1
  5254  0731  00F3               	movwf	??_toggle_format
  5255  0732  0873               	movf	??_toggle_format,w
  5256  0733  00E4               	movwf	_message_format	;volatile
  5257                           
  5258                           ;logger.c: 144:     } else {
  5259  0734  0008               	return
  5260  0735                     l2254:	
  5261                           
  5262                           ;logger.c: 145:         message_format = MESSAGE_BINARY;
  5263  0735  01E4               	clrf	_message_format	;volatile
  5264  0736  0008               	return
  5265  0737                     __end_of_toggle_format:	
  5266                           ;logger.c: 151:     }
  5267                           
  5268                           
  5269                           	psect	text29
  5270  07D4                     __ptext29:	
  5271 ;; *************** function _TMR1_StopTimer *****************
  5272 ;; Defined at:
  5273 ;;		line 99 in file "mcc_generated_files/tmr1.c"
  5274 ;; Parameters:    Size  Location     Type
  5275 ;;		None
  5276 ;; Auto vars:     Size  Location     Type
  5277 ;;		None
  5278 ;; Return value:  Size  Location     Type
  5279 ;;                  1    wreg      void 
  5280 ;; Registers used:
  5281 ;;		None
  5282 ;; Tracked objects:
  5283 ;;		On entry : 0/0
  5284 ;;		On exit  : 0/0
  5285 ;;		Unchanged: 0/0
  5286 ;; Data sizes:     COMMON   BANK0   BANK1
  5287 ;;      Params:         0       0       0
  5288 ;;      Locals:         0       0       0
  5289 ;;      Temps:          0       0       0
  5290 ;;      Totals:         0       0       0
  5291 ;;Total ram usage:        0 bytes
  5292 ;; Hardware stack levels used:    1
  5293 ;; Hardware stack levels required when called:    4
  5294 ;; This function calls:
  5295 ;;		Nothing
  5296 ;; This function is called by:
  5297 ;;		_logger_initialize
  5298 ;;		_process_message
  5299 ;; This function uses a non-reentrant model
  5300 ;;
  5301                           
  5302                           
  5303                           ;psect for function _TMR1_StopTimer
  5304  07D4                     _TMR1_StopTimer:	
  5305                           
  5306                           ;mcc_generated_files/tmr1.c: 102:     T1CONbits.TMR1ON = 0;
  5307                           
  5308                           ;incstack = 0
  5309                           ; Regs used in _TMR1_StopTimer: []
  5310  07D4  0020               	movlb	0	; select bank0
  5311  07D5  1018               	bcf	24,0	;volatile
  5312  07D6  0008               	return
  5313  07D7                     __end_of_TMR1_StopTimer:	
  5314                           
  5315                           	psect	text30
  5316  07D7                     __ptext30:	
  5317 ;; *************** function _TMR1_StartTimer *****************
  5318 ;; Defined at:
  5319 ;;		line 93 in file "mcc_generated_files/tmr1.c"
  5320 ;; Parameters:    Size  Location     Type
  5321 ;;		None
  5322 ;; Auto vars:     Size  Location     Type
  5323 ;;		None
  5324 ;; Return value:  Size  Location     Type
  5325 ;;                  1    wreg      void 
  5326 ;; Registers used:
  5327 ;;		None
  5328 ;; Tracked objects:
  5329 ;;		On entry : 0/0
  5330 ;;		On exit  : 0/0
  5331 ;;		Unchanged: 0/0
  5332 ;; Data sizes:     COMMON   BANK0   BANK1
  5333 ;;      Params:         0       0       0
  5334 ;;      Locals:         0       0       0
  5335 ;;      Temps:          0       0       0
  5336 ;;      Totals:         0       0       0
  5337 ;;Total ram usage:        0 bytes
  5338 ;; Hardware stack levels used:    1
  5339 ;; Hardware stack levels required when called:    4
  5340 ;; This function calls:
  5341 ;;		Nothing
  5342 ;; This function is called by:
  5343 ;;		_process_message
  5344 ;; This function uses a non-reentrant model
  5345 ;;
  5346                           
  5347                           
  5348                           ;psect for function _TMR1_StartTimer
  5349  07D7                     _TMR1_StartTimer:	
  5350                           
  5351                           ;mcc_generated_files/tmr1.c: 96:     T1CONbits.TMR1ON = 1;
  5352                           
  5353                           ;incstack = 0
  5354                           ; Regs used in _TMR1_StartTimer: []
  5355  07D7  0020               	movlb	0	; select bank0
  5356  07D8  1418               	bsf	24,0	;volatile
  5357  07D9  0008               	return
  5358  07DA                     __end_of_TMR1_StartTimer:	
  5359                           
  5360                           	psect	text31
  5361  07DA                     __ptext31:	
  5362 ;; *************** function _ADC_StartConversion *****************
  5363 ;; Defined at:
  5364 ;;		line 93 in file "mcc_generated_files/adc.c"
  5365 ;; Parameters:    Size  Location     Type
  5366 ;;		None
  5367 ;; Auto vars:     Size  Location     Type
  5368 ;;		None
  5369 ;; Return value:  Size  Location     Type
  5370 ;;                  1    wreg      void 
  5371 ;; Registers used:
  5372 ;;		None
  5373 ;; Tracked objects:
  5374 ;;		On entry : 0/0
  5375 ;;		On exit  : 0/0
  5376 ;;		Unchanged: 0/0
  5377 ;; Data sizes:     COMMON   BANK0   BANK1
  5378 ;;      Params:         0       0       0
  5379 ;;      Locals:         0       0       0
  5380 ;;      Temps:          0       0       0
  5381 ;;      Totals:         0       0       0
  5382 ;;Total ram usage:        0 bytes
  5383 ;; Hardware stack levels used:    1
  5384 ;; Hardware stack levels required when called:    4
  5385 ;; This function calls:
  5386 ;;		Nothing
  5387 ;; This function is called by:
  5388 ;;		_process_message
  5389 ;; This function uses a non-reentrant model
  5390 ;;
  5391                           
  5392                           
  5393                           ;psect for function _ADC_StartConversion
  5394  07DA                     _ADC_StartConversion:	
  5395                           
  5396                           ;mcc_generated_files/adc.c: 96:     ADCON0bits.GO_nDONE = 1;
  5397                           
  5398                           ;incstack = 0
  5399                           ; Regs used in _ADC_StartConversion: []
  5400  07DA  0021               	movlb	1	; select bank1
  5401  07DB  149D               	bsf	29,1	;volatile
  5402  07DC  0008               	return
  5403  07DD                     __end_of_ADC_StartConversion:	
  5404                           
  5405                           	psect	text32
  5406  075E                     __ptext32:	
  5407 ;; *************** function _ESP_initialize *****************
  5408 ;; Defined at:
  5409 ;;		line 18 in file "esp1.c"
  5410 ;; Parameters:    Size  Location     Type
  5411 ;;		None
  5412 ;; Auto vars:     Size  Location     Type
  5413 ;;		None
  5414 ;; Return value:  Size  Location     Type
  5415 ;;                  1    wreg      void 
  5416 ;; Registers used:
  5417 ;;		wreg, status,2, status,0, pclath, cstack
  5418 ;; Tracked objects:
  5419 ;;		On entry : 0/0
  5420 ;;		On exit  : 0/0
  5421 ;;		Unchanged: 0/0
  5422 ;; Data sizes:     COMMON   BANK0   BANK1
  5423 ;;      Params:         0       0       0
  5424 ;;      Locals:         0       0       0
  5425 ;;      Temps:          0       0       0
  5426 ;;      Totals:         0       0       0
  5427 ;;Total ram usage:        0 bytes
  5428 ;; Hardware stack levels used:    1
  5429 ;; Hardware stack levels required when called:    5
  5430 ;; This function calls:
  5431 ;;		_ESP_Set_application_handler
  5432 ;; This function is called by:
  5433 ;;		_main
  5434 ;; This function uses a non-reentrant model
  5435 ;;
  5436                           
  5437                           
  5438                           ;psect for function _ESP_initialize
  5439  075E                     _ESP_initialize:	
  5440                           
  5441                           ;esp1.c: 20:     esp_channel = 0;
  5442                           
  5443                           ;incstack = 0
  5444                           ; Regs used in _ESP_initialize: [wreg+status,2+status,0+pclath+cstack]
  5445  075E  0020               	movlb	0	; select bank0
  5446  075F  01E5               	clrf	_esp_channel	;volatile
  5447                           
  5448                           ;esp1.c: 21:     ESP_wait_exception = ESP_OTHER;
  5449  0760  01E8               	clrf	_ESP_wait_exception	;volatile
  5450                           
  5451                           ;esp1.c: 24:     ESP_Set_application_handler(ESP_default_application_handler);
  5452  0761  30EC               	movlw	low _ESP_default_application_handler
  5453  0762  00F3               	movwf	ESP_Set_application_handler@applicationHandler
  5454  0763  3007               	movlw	high _ESP_default_application_handler
  5455  0764  00F4               	movwf	ESP_Set_application_handler@applicationHandler+1
  5456  0765  27A9               	fcall	_ESP_Set_application_handler
  5457  0766  0008               	return
  5458  0767                     __end_of_ESP_initialize:	
  5459                           
  5460                           	psect	text33
  5461  07A9                     __ptext33:	
  5462 ;; *************** function _ESP_Set_application_handler *****************
  5463 ;; Defined at:
  5464 ;;		line 217 in file "esp1.c"
  5465 ;; Parameters:    Size  Location     Type
  5466 ;;  applicationH    2    3[COMMON] PTR FTN(unsigned char ,)
  5467 ;;		 -> ESP_default_application_handler(1), process_message(1), 
  5468 ;; Auto vars:     Size  Location     Type
  5469 ;;		None
  5470 ;; Return value:  Size  Location     Type
  5471 ;;                  1    wreg      void 
  5472 ;; Registers used:
  5473 ;;		wreg
  5474 ;; Tracked objects:
  5475 ;;		On entry : 0/0
  5476 ;;		On exit  : 0/0
  5477 ;;		Unchanged: 0/0
  5478 ;; Data sizes:     COMMON   BANK0   BANK1
  5479 ;;      Params:         2       0       0
  5480 ;;      Locals:         0       0       0
  5481 ;;      Temps:          0       0       0
  5482 ;;      Totals:         2       0       0
  5483 ;;Total ram usage:        2 bytes
  5484 ;; Hardware stack levels used:    1
  5485 ;; Hardware stack levels required when called:    4
  5486 ;; This function calls:
  5487 ;;		Nothing
  5488 ;; This function is called by:
  5489 ;;		_ESP_initialize
  5490 ;;		_logger_initialize
  5491 ;; This function uses a non-reentrant model
  5492 ;;
  5493                           
  5494                           
  5495                           ;psect for function _ESP_Set_application_handler
  5496  07A9                     _ESP_Set_application_handler:	
  5497                           
  5498                           ;esp1.c: 217: void ESP_Set_application_handler(void (* applicationHandler)(unsigned char
      +                          ));esp1.c: 218: {;esp1.c: 219:     ESP_external_message_handler = applicationHandler;
  5499                           
  5500                           ;incstack = 0
  5501                           ; Regs used in _ESP_Set_application_handler: [wreg]
  5502  07A9  0874               	movf	ESP_Set_application_handler@applicationHandler+1,w
  5503  07AA  0020               	movlb	0	; select bank0
  5504  07AB  00D7               	movwf	_ESP_external_message_handler+1
  5505  07AC  0873               	movf	ESP_Set_application_handler@applicationHandler,w
  5506  07AD  00D6               	movwf	_ESP_external_message_handler
  5507  07AE  0008               	return
  5508  07AF                     __end_of_ESP_Set_application_handler:	
  5509                           
  5510                           	psect	text34
  5511  0383                     __ptext34:	
  5512 ;; *************** function _ESP_config *****************
  5513 ;; Defined at:
  5514 ;;		line 82 in file "esp1.c"
  5515 ;; Parameters:    Size  Location     Type
  5516 ;;		None
  5517 ;; Auto vars:     Size  Location     Type
  5518 ;;		None
  5519 ;; Return value:  Size  Location     Type
  5520 ;;                  1    wreg      void 
  5521 ;; Registers used:
  5522 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5523 ;; Tracked objects:
  5524 ;;		On entry : 0/0
  5525 ;;		On exit  : 0/0
  5526 ;;		Unchanged: 0/0
  5527 ;; Data sizes:     COMMON   BANK0   BANK1
  5528 ;;      Params:         0       0       0
  5529 ;;      Locals:         0       0       0
  5530 ;;      Temps:          0       2       0
  5531 ;;      Totals:         0       2       0
  5532 ;;Total ram usage:        2 bytes
  5533 ;; Hardware stack levels used:    1
  5534 ;; Hardware stack levels required when called:    9
  5535 ;; This function calls:
  5536 ;;		_ESP_wait_for
  5537 ;;		_EUSART_Read
  5538 ;;		_EUSART_is_rx_ready
  5539 ;;		__puts
  5540 ;; This function is called by:
  5541 ;;		_main
  5542 ;; This function uses a non-reentrant model
  5543 ;;
  5544                           
  5545                           
  5546                           ;psect for function _ESP_config
  5547  0383                     _ESP_config:	
  5548                           
  5549                           ;esp1.c: 87:     _delay((unsigned long)((250)*(32000000/4000.0)));
  5550                           
  5551                           ;incstack = 0
  5552                           ; Regs used in _ESP_config: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5553  0383  300B               	movlw	11
  5554  0384  0020               	movlb	0	; select bank0
  5555  0385  00B4               	movwf	??_ESP_config+1
  5556  0386  3026               	movlw	38
  5557  0387  00B3               	movwf	??_ESP_config
  5558  0388  305D               	movlw	93
  5559  0389                     u2777:	
  5560  0389  0B89               	decfsz	9,f
  5561  038A  2B89               	goto	u2777
  5562  038B  0BB3               	decfsz	??_ESP_config,f
  5563  038C  2B89               	goto	u2777
  5564  038D  0BB4               	decfsz	??_ESP_config+1,f
  5565  038E  2B89               	goto	u2777
  5566  038F  3200               	nop2
  5567  0390                     l3262:	
  5568                           ;esp1.c: 88:     while(EUSART_is_rx_ready())
  5569                           
  5570                           
  5571                           ;esp1.c: 88:     while(EUSART_is_rx_ready())
  5572  0390  27DD               	fcall	_EUSART_is_rx_ready
  5573  0391  3A00               	xorlw	0
  5574  0392  1903               	btfsc	3,2
  5575  0393  2B96               	goto	l3264
  5576                           
  5577                           ;esp1.c: 89:         EUSART_Read();
  5578  0394  25FB               	fcall	_EUSART_Read
  5579  0395  2B90               	goto	l3262
  5580  0396                     l3264:	
  5581                           
  5582                           ;esp1.c: 91:     _puts("AT\r\n");
  5583  0396  30BB               	movlw	low (STR_8| (0+32768))
  5584  0397  00F5               	movwf	__puts@pt
  5585  0398  3087               	movlw	high (STR_8| (0+32768))
  5586  0399  00F6               	movwf	__puts@pt+1
  5587  039A  24A2               	fcall	__puts
  5588                           
  5589                           ;esp1.c: 92:     ESP_wait_for(ESP_OK);
  5590  039B  3002               	movlw	2
  5591  039C  24CA               	fcall	_ESP_wait_for
  5592                           
  5593                           ;esp1.c: 95:     _puts("AT+CWMODE=1\r\n");
  5594  039D  30EA               	movlw	low (STR_9| (0+32768))
  5595  039E  00F5               	movwf	__puts@pt
  5596  039F  3086               	movlw	high (STR_9| (0+32768))
  5597  03A0  00F6               	movwf	__puts@pt+1
  5598  03A1  24A2               	fcall	__puts
  5599                           
  5600                           ;esp1.c: 96:     ESP_wait_for(ESP_OK);
  5601  03A2  3002               	movlw	2
  5602  03A3  24CA               	fcall	_ESP_wait_for
  5603                           
  5604                           ;esp1.c: 99:     _puts("AT+CWJAP=\"saul2\",\"rickhunter02\"\r\n");
  5605  03A4  303B               	movlw	low (STR_10| (0+32768))
  5606  03A5  00F5               	movwf	__puts@pt
  5607  03A6  3085               	movlw	high (STR_10| (0+32768))
  5608  03A7  00F6               	movwf	__puts@pt+1
  5609  03A8  24A2               	fcall	__puts
  5610                           
  5611                           ;esp1.c: 100:     ESP_wait_for(ESP_OK);
  5612  03A9  3002               	movlw	2
  5613  03AA  24CA               	fcall	_ESP_wait_for
  5614                           
  5615                           ;esp1.c: 103:     _puts("AT+CIPMUX=1\r\n");
  5616  03AB  30F8               	movlw	low (STR_11| (0+32768))
  5617  03AC  00F5               	movwf	__puts@pt
  5618  03AD  3086               	movlw	high (STR_11| (0+32768))
  5619  03AE  00F6               	movwf	__puts@pt+1
  5620  03AF  24A2               	fcall	__puts
  5621                           
  5622                           ;esp1.c: 104:     ESP_wait_for(ESP_OK);
  5623  03B0  3002               	movlw	2
  5624  03B1  24CA               	fcall	_ESP_wait_for
  5625                           
  5626                           ;esp1.c: 107:     _puts("AT+CIPSERVER=1,80\r\n");
  5627  03B2  30A2               	movlw	low (STR_12| (0+32768))
  5628  03B3  00F5               	movwf	__puts@pt
  5629  03B4  3086               	movlw	high (STR_12| (0+32768))
  5630  03B5  00F6               	movwf	__puts@pt+1
  5631  03B6  24A2               	fcall	__puts
  5632                           
  5633                           ;esp1.c: 108:     ESP_wait_for(ESP_OK);
  5634  03B7  3002               	movlw	2
  5635  03B8  24CA               	fcall	_ESP_wait_for
  5636  03B9  0008               	return
  5637  03BA                     __end_of_ESP_config:	
  5638                           
  5639                           	psect	text35
  5640  04A2                     __ptext35:	
  5641 ;; *************** function __puts *****************
  5642 ;; Defined at:
  5643 ;;		line 5 in file "comm.c"
  5644 ;; Parameters:    Size  Location     Type
  5645 ;;  pt              2    5[COMMON] PTR unsigned char 
  5646 ;;		 -> STR_17(3), STR_16(3), STR_15(2), STR_14(12), 
  5647 ;;		 -> STR_12(20), STR_11(14), STR_10(34), STR_9(14), 
  5648 ;;		 -> STR_8(5), 
  5649 ;; Auto vars:     Size  Location     Type
  5650 ;;  index           1    7[COMMON] unsigned char 
  5651 ;; Return value:  Size  Location     Type
  5652 ;;                  1    wreg      void 
  5653 ;; Registers used:
  5654 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5655 ;; Tracked objects:
  5656 ;;		On entry : 0/0
  5657 ;;		On exit  : 0/0
  5658 ;;		Unchanged: 0/0
  5659 ;; Data sizes:     COMMON   BANK0   BANK1
  5660 ;;      Params:         2       0       0
  5661 ;;      Locals:         1       0       0
  5662 ;;      Temps:          0       3       0
  5663 ;;      Totals:         3       3       0
  5664 ;;Total ram usage:        6 bytes
  5665 ;; Hardware stack levels used:    1
  5666 ;; Hardware stack levels required when called:    5
  5667 ;; This function calls:
  5668 ;;		_EUSART_Write
  5669 ;;		_EUSART_is_tx_ready
  5670 ;; This function is called by:
  5671 ;;		_ESP_config
  5672 ;;		_ESP_write
  5673 ;; This function uses a non-reentrant model
  5674 ;;
  5675                           
  5676                           
  5677                           ;psect for function __puts
  5678  04A2                     __puts:	
  5679                           
  5680                           ;comm.c: 5: void _puts(char *pt);comm.c: 6: {;comm.c: 7:     unsigned char index;;comm.c
      +                          : 8:     index = 0;
  5681                           
  5682                           ;incstack = 0
  5683                           ; Regs used in __puts: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5684  04A2  01F7               	clrf	__puts@index
  5685  04A3                     l3038:	
  5686                           ;comm.c: 12:     }
  5687                           
  5688                           ;comm.c: 9:     while(pt[index]) {
  5689                           
  5690                           
  5691                           ;comm.c: 9:     while(pt[index]) {
  5692  04A3  0876               	movf	__puts@pt+1,w
  5693  04A4  0020               	movlb	0	; select bank0
  5694  04A5  00A1               	movwf	??__puts+1
  5695  04A6  0875               	movf	__puts@pt,w
  5696  04A7  00A0               	movwf	??__puts
  5697  04A8  0877               	movf	__puts@index,w
  5698  04A9  0720               	addwf	??__puts,w
  5699  04AA  0084               	movwf	4
  5700  04AB  0821               	movf	??__puts+1,w
  5701  04AC  1803               	skipnc
  5702  04AD  0A21               	incf	??__puts+1,w
  5703  04AE  0085               	movwf	5
  5704  04AF  0012               	moviw fsr0++
  5705  04B0  1903               	btfsc	3,2
  5706  04B1  0008               	return
  5707  04B2                     l3032:	
  5708                           ;comm.c: 10:         while(!EUSART_is_tx_ready());
  5709                           
  5710  04B2  27EA               	fcall	_EUSART_is_tx_ready
  5711  04B3  3A00               	xorlw	0
  5712  04B4  1903               	skipnz
  5713  04B5  2CB2               	goto	l3032
  5714                           
  5715                           ;comm.c: 11:         EUSART_Write(pt[index++]);
  5716  04B6  0876               	movf	__puts@pt+1,w
  5717  04B7  0020               	movlb	0	; select bank0
  5718  04B8  00A1               	movwf	??__puts+1
  5719  04B9  0875               	movf	__puts@pt,w
  5720  04BA  00A0               	movwf	??__puts
  5721  04BB  0877               	movf	__puts@index,w
  5722  04BC  0720               	addwf	??__puts,w
  5723  04BD  0084               	movwf	4
  5724  04BE  0821               	movf	??__puts+1,w
  5725  04BF  1803               	skipnc
  5726  04C0  0A21               	incf	??__puts+1,w
  5727  04C1  0085               	movwf	5
  5728  04C2  0800               	movf	0,w	;code access
  5729  04C3  255D               	fcall	_EUSART_Write
  5730  04C4  3001               	movlw	1
  5731  04C5  0020               	movlb	0	; select bank0
  5732  04C6  00A0               	movwf	??__puts
  5733  04C7  0820               	movf	??__puts,w
  5734  04C8  07F7               	addwf	__puts@index,f
  5735  04C9  2CA3               	goto	l3038
  5736  04CA                     __end_of__puts:	
  5737                           
  5738                           	psect	text36
  5739  07EA                     __ptext36:	
  5740 ;; *************** function _EUSART_is_tx_ready *****************
  5741 ;; Defined at:
  5742 ;;		line 113 in file "mcc_generated_files/eusart.c"
  5743 ;; Parameters:    Size  Location     Type
  5744 ;;		None
  5745 ;; Auto vars:     Size  Location     Type
  5746 ;;		None
  5747 ;; Return value:  Size  Location     Type
  5748 ;;                  1    wreg      unsigned char 
  5749 ;; Registers used:
  5750 ;;		wreg
  5751 ;; Tracked objects:
  5752 ;;		On entry : 0/0
  5753 ;;		On exit  : 0/0
  5754 ;;		Unchanged: 0/0
  5755 ;; Data sizes:     COMMON   BANK0   BANK1
  5756 ;;      Params:         0       0       0
  5757 ;;      Locals:         0       0       0
  5758 ;;      Temps:          0       0       0
  5759 ;;      Totals:         0       0       0
  5760 ;;Total ram usage:        0 bytes
  5761 ;; Hardware stack levels used:    1
  5762 ;; Hardware stack levels required when called:    4
  5763 ;; This function calls:
  5764 ;;		Nothing
  5765 ;; This function is called by:
  5766 ;;		__puts
  5767 ;;		_write
  5768 ;; This function uses a non-reentrant model
  5769 ;;
  5770                           
  5771                           
  5772                           ;psect for function _EUSART_is_tx_ready
  5773  07EA                     _EUSART_is_tx_ready:	
  5774                           
  5775                           ;mcc_generated_files/eusart.c: 115:     return eusartTxBufferRemaining;
  5776                           
  5777                           ;incstack = 0
  5778                           ; Regs used in _EUSART_is_tx_ready: [wreg]
  5779  07EA  0879               	movf	_eusartTxBufferRemaining,w	;volatile
  5780  07EB  0008               	return
  5781  07EC                     __end_of_EUSART_is_tx_ready:	
  5782                           
  5783                           	psect	text37
  5784  055D                     __ptext37:	
  5785 ;; *************** function _EUSART_Write *****************
  5786 ;; Defined at:
  5787 ;;		line 148 in file "mcc_generated_files/eusart.c"
  5788 ;; Parameters:    Size  Location     Type
  5789 ;;  txData          1    wreg     unsigned char 
  5790 ;; Auto vars:     Size  Location     Type
  5791 ;;  txData          1    4[COMMON] unsigned char 
  5792 ;; Return value:  Size  Location     Type
  5793 ;;                  1    wreg      void 
  5794 ;; Registers used:
  5795 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5796 ;; Tracked objects:
  5797 ;;		On entry : 0/0
  5798 ;;		On exit  : 0/0
  5799 ;;		Unchanged: 0/0
  5800 ;; Data sizes:     COMMON   BANK0   BANK1
  5801 ;;      Params:         0       0       0
  5802 ;;      Locals:         1       0       0
  5803 ;;      Temps:          1       0       0
  5804 ;;      Totals:         2       0       0
  5805 ;;Total ram usage:        2 bytes
  5806 ;; Hardware stack levels used:    1
  5807 ;; Hardware stack levels required when called:    4
  5808 ;; This function calls:
  5809 ;;		Nothing
  5810 ;; This function is called by:
  5811 ;;		__puts
  5812 ;;		_write
  5813 ;; This function uses a non-reentrant model
  5814 ;;
  5815                           
  5816                           
  5817                           ;psect for function _EUSART_Write
  5818  055D                     _EUSART_Write:	
  5819                           
  5820                           ;incstack = 0
  5821                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  5822                           ;EUSART_Write@txData stored from wreg
  5823  055D  00F4               	movwf	EUSART_Write@txData
  5824  055E                     l2202:	
  5825                           ;mcc_generated_files/eusart.c: 151:     {;mcc_generated_files/eusart.c: 152:     }
  5826                           
  5827                           ;mcc_generated_files/eusart.c: 148: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 149: {;mcc_generated_files/eusart.c: 150:     while(0 == eusartTxBufferRemai
      +                          ning)
  5828                           
  5829                           
  5830                           ;mcc_generated_files/eusart.c: 150:     while(0 == eusartTxBufferRemaining)
  5831  055E  0879               	movf	_eusartTxBufferRemaining,w	;volatile
  5832  055F  1903               	btfsc	3,2
  5833  0560  2D5E               	goto	l2202
  5834                           
  5835                           ;mcc_generated_files/eusart.c: 154:     if(0 == PIE1bits.TXIE)
  5836  0561  0021               	movlb	1	; select bank1
  5837  0562  1A11               	btfsc	17,4	;volatile
  5838  0563  2D68               	goto	l159
  5839                           
  5840                           ;mcc_generated_files/eusart.c: 155:     {;mcc_generated_files/eusart.c: 156:         TXR
      +                          EG = txData;
  5841  0564  0874               	movf	EUSART_Write@txData,w
  5842  0565  0023               	movlb	3	; select bank3
  5843  0566  009A               	movwf	26	;volatile
  5844                           
  5845                           ;mcc_generated_files/eusart.c: 157:     }
  5846  0567  2D7B               	goto	l2216
  5847  0568                     l159:	
  5848                           ;mcc_generated_files/eusart.c: 158:     else
  5849                           
  5850                           
  5851                           ;mcc_generated_files/eusart.c: 159:     {;mcc_generated_files/eusart.c: 160:         PIE
      +                          1bits.TXIE = 0;
  5852  0568  1211               	bcf	17,4	;volatile
  5853                           
  5854                           ;mcc_generated_files/eusart.c: 161:         eusartTxBuffer[eusartTxHead++] = txData;
  5855  0569  0874               	movf	EUSART_Write@txData,w
  5856  056A  00F3               	movwf	??_EUSART_Write
  5857  056B  087A               	movf	_eusartTxHead,w
  5858  056C  3E4C               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  5859  056D  0086               	movwf	6
  5860  056E  0187               	clrf	7
  5861  056F  0873               	movf	??_EUSART_Write,w
  5862  0570  0081               	movwf	1
  5863  0571  3001               	movlw	1
  5864  0572  00F3               	movwf	??_EUSART_Write
  5865  0573  0873               	movf	??_EUSART_Write,w
  5866  0574  07FA               	addwf	_eusartTxHead,f	;volatile
  5867                           
  5868                           ;mcc_generated_files/eusart.c: 162:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
  5869  0575  300A               	movlw	10
  5870  0576  027A               	subwf	_eusartTxHead,w	;volatile
  5871  0577  1803               	btfsc	3,0
  5872                           
  5873                           ;mcc_generated_files/eusart.c: 163:         {;mcc_generated_files/eusart.c: 164:        
      +                               eusartTxHead = 0;
  5874  0578  01FA               	clrf	_eusartTxHead	;volatile
  5875                           
  5876                           ;mcc_generated_files/eusart.c: 166:         eusartTxBufferRemaining--;
  5877                           
  5878                           ;mcc_generated_files/eusart.c: 165:         }
  5879  0579  3001               	movlw	1
  5880  057A  02F9               	subwf	_eusartTxBufferRemaining,f	;volatile
  5881  057B                     l2216:	
  5882                           ;mcc_generated_files/eusart.c: 167:     }
  5883                           
  5884                           
  5885                           ;mcc_generated_files/eusart.c: 168:     PIE1bits.TXIE = 1;
  5886  057B  0021               	movlb	1	; select bank1
  5887  057C  1611               	bsf	17,4	;volatile
  5888  057D  0008               	return
  5889  057E                     __end_of_EUSART_Write:	
  5890                           
  5891                           	psect	text38
  5892  07DD                     __ptext38:	
  5893 ;; *************** function _EUSART_is_rx_ready *****************
  5894 ;; Defined at:
  5895 ;;		line 118 in file "mcc_generated_files/eusart.c"
  5896 ;; Parameters:    Size  Location     Type
  5897 ;;		None
  5898 ;; Auto vars:     Size  Location     Type
  5899 ;;		None
  5900 ;; Return value:  Size  Location     Type
  5901 ;;                  1    wreg      unsigned char 
  5902 ;; Registers used:
  5903 ;;		wreg
  5904 ;; Tracked objects:
  5905 ;;		On entry : 0/0
  5906 ;;		On exit  : 0/0
  5907 ;;		Unchanged: 0/0
  5908 ;; Data sizes:     COMMON   BANK0   BANK1
  5909 ;;      Params:         0       0       0
  5910 ;;      Locals:         0       0       0
  5911 ;;      Temps:          0       0       0
  5912 ;;      Totals:         0       0       0
  5913 ;;Total ram usage:        0 bytes
  5914 ;; Hardware stack levels used:    1
  5915 ;; Hardware stack levels required when called:    4
  5916 ;; This function calls:
  5917 ;;		Nothing
  5918 ;; This function is called by:
  5919 ;;		_main
  5920 ;;		_ESP_config
  5921 ;; This function uses a non-reentrant model
  5922 ;;
  5923                           
  5924                           
  5925                           ;psect for function _EUSART_is_rx_ready
  5926  07DD                     _EUSART_is_rx_ready:	
  5927                           
  5928                           ;mcc_generated_files/eusart.c: 120:     return eusartRxCount;
  5929                           
  5930                           ;incstack = 0
  5931                           ; Regs used in _EUSART_is_rx_ready: [wreg]
  5932  07DD  0020               	movlb	0	; select bank0
  5933  07DE  0869               	movf	_eusartRxCount,w	;volatile
  5934  07DF  0008               	return
  5935  07E0                     __end_of_EUSART_is_rx_ready:	
  5936                           
  5937                           	psect	text39
  5938  04CA                     __ptext39:	
  5939 ;; *************** function _ESP_wait_for *****************
  5940 ;; Defined at:
  5941 ;;		line 113 in file "esp1.c"
  5942 ;; Parameters:    Size  Location     Type
  5943 ;;  esp_mess        1    wreg     unsigned char 
  5944 ;; Auto vars:     Size  Location     Type
  5945 ;;  esp_mess        1   17[BANK0 ] unsigned char 
  5946 ;;  ret             1   18[BANK0 ] unsigned char 
  5947 ;; Return value:  Size  Location     Type
  5948 ;;                  1    wreg      void 
  5949 ;; Registers used:
  5950 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5951 ;; Tracked objects:
  5952 ;;		On entry : 0/0
  5953 ;;		On exit  : 0/0
  5954 ;;		Unchanged: 0/0
  5955 ;; Data sizes:     COMMON   BANK0   BANK1
  5956 ;;      Params:         0       0       0
  5957 ;;      Locals:         0       2       0
  5958 ;;      Temps:          0       1       0
  5959 ;;      Totals:         0       3       0
  5960 ;;Total ram usage:        3 bytes
  5961 ;; Hardware stack levels used:    1
  5962 ;; Hardware stack levels required when called:    8
  5963 ;; This function calls:
  5964 ;;		_ESP_read
  5965 ;; This function is called by:
  5966 ;;		_ESP_config
  5967 ;;		_ESP_write
  5968 ;;		_read_analog
  5969 ;;		_process_ioc
  5970 ;; This function uses a non-reentrant model
  5971 ;;
  5972                           
  5973                           
  5974                           ;psect for function _ESP_wait_for
  5975  04CA                     _ESP_wait_for:	
  5976                           
  5977                           ;incstack = 0
  5978                           ; Regs used in _ESP_wait_for: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5979                           ;ESP_wait_for@esp_mess stored from wreg
  5980  04CA  0020               	movlb	0	; select bank0
  5981  04CB  00B1               	movwf	ESP_wait_for@esp_mess
  5982  04CC                     l464:	
  5983                           ;esp1.c: 113: void ESP_wait_for(unsigned char esp_mess);esp1.c: 114: {;esp1.c: 115:     
      +                          unsigned char ret;;esp1.c: 118:     do {
  5984                           
  5985                           
  5986                           ;esp1.c: 119:         ret = ESP_read();
  5987  04CC  241F               	fcall	_ESP_read
  5988  04CD  0020               	movlb	0	; select bank0
  5989  04CE  00B0               	movwf	??_ESP_wait_for
  5990  04CF  0830               	movf	??_ESP_wait_for,w
  5991  04D0  00B2               	movwf	ESP_wait_for@ret
  5992                           
  5993                           ;esp1.c: 121:         if (ret != esp_mess) {
  5994  04D1  0832               	movf	ESP_wait_for@ret,w
  5995  04D2  0631               	xorwf	ESP_wait_for@esp_mess,w
  5996  04D3  1903               	skipnz
  5997  04D4  2CEC               	goto	l3074
  5998                           
  5999                           ;esp1.c: 122:             if (ret == ESP_SEND_FAIL) return;
  6000  04D5  3007               	movlw	7
  6001  04D6  0632               	xorwf	ESP_wait_for@ret,w
  6002  04D7  1903               	btfsc	3,2
  6003  04D8  0008               	return
  6004                           
  6005                           ;esp1.c: 123:             if (ret == ESP_CLOSED) {
  6006  04D9  3008               	movlw	8
  6007  04DA  0632               	xorwf	ESP_wait_for@ret,w
  6008  04DB  1D03               	btfss	3,2
  6009  04DC  2CDF               	goto	l3064
  6010                           
  6011                           ;esp1.c: 124:                 esp_channel = 0;
  6012  04DD  01E5               	clrf	_esp_channel	;volatile
  6013                           
  6014                           ;esp1.c: 125:                 return;
  6015  04DE  0008               	return
  6016  04DF                     l3064:	
  6017                           ;esp1.c: 126:             }
  6018                           
  6019                           
  6020                           ;esp1.c: 127:             if (ret == ESP_ERROR) return;
  6021  04DF  3009               	movlw	9
  6022  04E0  0632               	xorwf	ESP_wait_for@ret,w
  6023  04E1  1903               	btfsc	3,2
  6024  04E2  0008               	return
  6025                           
  6026                           ;esp1.c: 128:             if (ret == ESP_RX) {
  6027  04E3  3004               	movlw	4
  6028  04E4  0632               	xorwf	ESP_wait_for@ret,w
  6029  04E5  1D03               	btfss	3,2
  6030  04E6  2CEC               	goto	l3074
  6031                           
  6032                           ;esp1.c: 130:                 ESP_wait_exception = ESP_RX;
  6033  04E7  3004               	movlw	4
  6034  04E8  00B0               	movwf	??_ESP_wait_for
  6035  04E9  0830               	movf	??_ESP_wait_for,w
  6036  04EA  00E8               	movwf	_ESP_wait_exception	;volatile
  6037                           
  6038                           ;esp1.c: 131:                 return;
  6039  04EB  0008               	return
  6040  04EC                     l3074:	
  6041                           ;esp1.c: 133:         }
  6042                           
  6043                           ;esp1.c: 132:             }
  6044                           
  6045                           
  6046                           ;esp1.c: 134:     } while (ret != esp_mess);
  6047  04EC  0832               	movf	ESP_wait_for@ret,w
  6048  04ED  0631               	xorwf	ESP_wait_for@esp_mess,w
  6049  04EE  1903               	btfsc	3,2
  6050  04EF  0008               	return
  6051  04F0  2CCC               	goto	l464
  6052  04F1                     __end_of_ESP_wait_for:	
  6053                           
  6054                           	psect	text40
  6055  041F                     __ptext40:	
  6056 ;; *************** function _ESP_read *****************
  6057 ;; Defined at:
  6058 ;;		line 27 in file "esp1.c"
  6059 ;; Parameters:    Size  Location     Type
  6060 ;;		None
  6061 ;; Auto vars:     Size  Location     Type
  6062 ;;  ret             1   15[BANK0 ] unsigned char 
  6063 ;; Return value:  Size  Location     Type
  6064 ;;                  1    wreg      unsigned char 
  6065 ;; Registers used:
  6066 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6067 ;; Tracked objects:
  6068 ;;		On entry : 0/0
  6069 ;;		On exit  : 0/0
  6070 ;;		Unchanged: 0/0
  6071 ;; Data sizes:     COMMON   BANK0   BANK1
  6072 ;;      Params:         0       0       0
  6073 ;;      Locals:         0       1       0
  6074 ;;      Temps:          0       1       0
  6075 ;;      Totals:         0       2       0
  6076 ;;Total ram usage:        2 bytes
  6077 ;; Hardware stack levels used:    1
  6078 ;; Hardware stack levels required when called:    7
  6079 ;; This function calls:
  6080 ;;		_ESP_process_message
  6081 ;;		_EUSART_Read
  6082 ;; This function is called by:
  6083 ;;		_ESP_wait_for
  6084 ;;		_ESP_message_handler
  6085 ;; This function uses a non-reentrant model
  6086 ;;
  6087                           
  6088                           
  6089                           ;psect for function _ESP_read
  6090  041F                     _ESP_read:	
  6091                           
  6092                           ;esp1.c: 29:     unsigned char ret;;esp1.c: 31:     esp_read_data[esp_read_data_index] =
      +                           EUSART_Read();
  6093                           
  6094                           ;incstack = 0
  6095                           ; Regs used in _ESP_read: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6096  041F  25FB               	fcall	_EUSART_Read
  6097  0420  0020               	movlb	0	; select bank0
  6098  0421  00AE               	movwf	??_ESP_read
  6099  0422  0866               	movf	_esp_read_data_index,w
  6100  0423  3EAC               	addlw	(low (_esp_read_data| 0))& (0+255)
  6101  0424  0086               	movwf	6
  6102  0425  0187               	clrf	7
  6103  0426  082E               	movf	??_ESP_read,w
  6104  0427  0081               	movwf	1
  6105                           
  6106                           ;esp1.c: 34:     if (esp_read_data[esp_read_data_index] == 0x0a) {
  6107  0428  0866               	movf	_esp_read_data_index,w
  6108  0429  3EAC               	addlw	(low (_esp_read_data| 0))& (0+255)
  6109  042A  0086               	movwf	6
  6110  042B  0187               	clrf	7
  6111  042C  300A               	movlw	10
  6112  042D  0601               	xorwf	1,w
  6113  042E  1D03               	btfss	3,2
  6114  042F  2C44               	goto	l3020
  6115                           
  6116                           ;esp1.c: 36:         if (esp_read_data_index <= 1) {
  6117  0430  3002               	movlw	2
  6118  0431  0266               	subwf	_esp_read_data_index,w	;volatile
  6119  0432  1803               	skipnc
  6120  0433  2C36               	goto	l3010
  6121                           
  6122                           ;esp1.c: 37:             ret = ESP_EOL;
  6123  0434  3003               	movlw	3
  6124  0435  2C3E               	goto	L2
  6125  0436                     l3010:	
  6126                           ;esp1.c: 38:         } else {
  6127                           
  6128                           
  6129                           ;esp1.c: 39:             esp_read_data[(esp_read_data_index-1)] = 0x00;
  6130  0436  0866               	movf	_esp_read_data_index,w
  6131  0437  3EFF               	addlw	255
  6132  0438  3EAC               	addlw	(low (_esp_read_data| 0))& (0+255)
  6133  0439  0086               	movwf	6
  6134  043A  0187               	clrf	7
  6135  043B  0181               	clrf	1
  6136                           
  6137                           ;esp1.c: 40:             ret = ESP_process_message();
  6138  043C  2150               	fcall	_ESP_process_message
  6139  043D  0020               	movlb	0	; select bank0
  6140  043E                     L2:	
  6141  043E  00AE               	movwf	??_ESP_read
  6142  043F  082E               	movf	??_ESP_read,w
  6143  0440  00AF               	movwf	ESP_read@ret
  6144                           
  6145                           ;esp1.c: 43:         esp_read_data_index = 0;
  6146                           
  6147                           ;esp1.c: 41:         }
  6148  0441  01E6               	clrf	_esp_read_data_index	;volatile
  6149                           
  6150                           ;esp1.c: 44:         return ret;
  6151  0442  082F               	movf	ESP_read@ret,w
  6152  0443  0008               	return
  6153  0444                     l3020:	
  6154                           ;esp1.c: 45:     }
  6155                           
  6156                           
  6157                           ;esp1.c: 47:     esp_read_data_index++;
  6158  0444  3001               	movlw	1
  6159  0445  00AE               	movwf	??_ESP_read
  6160  0446  082E               	movf	??_ESP_read,w
  6161  0447  07E6               	addwf	_esp_read_data_index,f	;volatile
  6162                           
  6163                           ;esp1.c: 48:     if (esp_read_data_index >= 20)
  6164  0448  3014               	movlw	20
  6165  0449  0266               	subwf	_esp_read_data_index,w	;volatile
  6166  044A  1803               	btfsc	3,0
  6167                           
  6168                           ;esp1.c: 49:         esp_read_data_index = 0;
  6169  044B  01E6               	clrf	_esp_read_data_index	;volatile
  6170                           
  6171                           ;esp1.c: 51:     return ESP_OTHER;
  6172  044C  3000               	movlw	0
  6173  044D  0008               	return
  6174  044E                     __end_of_ESP_read:	
  6175                           
  6176                           	psect	text41
  6177  05FB                     __ptext41:	
  6178 ;; *************** function _EUSART_Read *****************
  6179 ;; Defined at:
  6180 ;;		line 128 in file "mcc_generated_files/eusart.c"
  6181 ;; Parameters:    Size  Location     Type
  6182 ;;		None
  6183 ;; Auto vars:     Size  Location     Type
  6184 ;;  readValue       1    4[COMMON] unsigned char 
  6185 ;; Return value:  Size  Location     Type
  6186 ;;                  1    wreg      unsigned char 
  6187 ;; Registers used:
  6188 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6189 ;; Tracked objects:
  6190 ;;		On entry : 0/0
  6191 ;;		On exit  : 0/0
  6192 ;;		Unchanged: 0/0
  6193 ;; Data sizes:     COMMON   BANK0   BANK1
  6194 ;;      Params:         0       0       0
  6195 ;;      Locals:         1       0       0
  6196 ;;      Temps:          1       0       0
  6197 ;;      Totals:         2       0       0
  6198 ;;Total ram usage:        2 bytes
  6199 ;; Hardware stack levels used:    1
  6200 ;; Hardware stack levels required when called:    4
  6201 ;; This function calls:
  6202 ;;		Nothing
  6203 ;; This function is called by:
  6204 ;;		_ESP_read
  6205 ;;		_ESP_config
  6206 ;;		_bt_message_handler
  6207 ;; This function uses a non-reentrant model
  6208 ;;
  6209                           
  6210                           
  6211                           ;psect for function _EUSART_Read
  6212  05FB                     _EUSART_Read:	
  6213                           
  6214                           ;mcc_generated_files/eusart.c: 130:     uint8_t readValue = 0;
  6215                           
  6216                           ;incstack = 0
  6217                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  6218  05FB  01F4               	clrf	EUSART_Read@readValue
  6219  05FC                     l2114:	
  6220                           ;mcc_generated_files/eusart.c: 133:     {;mcc_generated_files/eusart.c: 134:     }
  6221                           
  6222                           ;mcc_generated_files/eusart.c: 132:     while(0 == eusartRxCount)
  6223                           
  6224                           
  6225                           ;mcc_generated_files/eusart.c: 132:     while(0 == eusartRxCount)
  6226  05FC  0020               	movlb	0	; select bank0
  6227  05FD  0869               	movf	_eusartRxCount,w	;volatile
  6228  05FE  1903               	btfsc	3,2
  6229  05FF  2DFC               	goto	l2114
  6230                           
  6231                           ;mcc_generated_files/eusart.c: 136:     readValue = eusartRxBuffer[eusartRxTail++];
  6232  0600  086A               	movf	_eusartRxTail,w
  6233  0601  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  6234  0602  0086               	movwf	6
  6235  0603  0187               	clrf	7
  6236  0604  0801               	movf	1,w
  6237  0605  00F3               	movwf	??_EUSART_Read
  6238  0606  0873               	movf	??_EUSART_Read,w
  6239  0607  00F4               	movwf	EUSART_Read@readValue
  6240  0608  3001               	movlw	1
  6241  0609  00F3               	movwf	??_EUSART_Read
  6242  060A  0873               	movf	??_EUSART_Read,w
  6243  060B  07EA               	addwf	_eusartRxTail,f	;volatile
  6244                           
  6245                           ;mcc_generated_files/eusart.c: 137:     if(sizeof(eusartRxBuffer) <= eusartRxTail)
  6246  060C  300C               	movlw	12
  6247  060D  026A               	subwf	_eusartRxTail,w	;volatile
  6248  060E  1803               	btfsc	3,0
  6249                           
  6250                           ;mcc_generated_files/eusart.c: 138:     {;mcc_generated_files/eusart.c: 139:         eus
      +                          artRxTail = 0;
  6251  060F  01EA               	clrf	_eusartRxTail	;volatile
  6252                           
  6253                           ;mcc_generated_files/eusart.c: 141:     PIE1bits.RCIE = 0;
  6254                           
  6255                           ;mcc_generated_files/eusart.c: 140:     }
  6256  0610  0021               	movlb	1	; select bank1
  6257  0611  1291               	bcf	17,5	;volatile
  6258                           
  6259                           ;mcc_generated_files/eusart.c: 142:     eusartRxCount--;
  6260  0612  3001               	movlw	1
  6261  0613  0020               	movlb	0	; select bank0
  6262  0614  02E9               	subwf	_eusartRxCount,f	;volatile
  6263                           
  6264                           ;mcc_generated_files/eusart.c: 143:     PIE1bits.RCIE = 1;
  6265  0615  0021               	movlb	1	; select bank1
  6266  0616  1691               	bsf	17,5	;volatile
  6267                           
  6268                           ;mcc_generated_files/eusart.c: 145:     return readValue;
  6269  0617  0874               	movf	EUSART_Read@readValue,w
  6270  0618  0008               	return
  6271  0619                     __end_of_EUSART_Read:	
  6272                           
  6273                           	psect	text42
  6274  0150                     __ptext42:	
  6275 ;; *************** function _ESP_process_message *****************
  6276 ;; Defined at:
  6277 ;;		line 55 in file "esp1.c"
  6278 ;; Parameters:    Size  Location     Type
  6279 ;;		None
  6280 ;; Auto vars:     Size  Location     Type
  6281 ;;  aux             1   13[BANK0 ] PTR unsigned char 
  6282 ;;		 -> NULL(0), esp_read_data(20), 
  6283 ;; Return value:  Size  Location     Type
  6284 ;;                  1    wreg      unsigned char 
  6285 ;; Registers used:
  6286 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6287 ;; Tracked objects:
  6288 ;;		On entry : 0/0
  6289 ;;		On exit  : 0/0
  6290 ;;		Unchanged: 0/0
  6291 ;; Data sizes:     COMMON   BANK0   BANK1
  6292 ;;      Params:         0       0       0
  6293 ;;      Locals:         0       1       0
  6294 ;;      Temps:          0       1       0
  6295 ;;      Totals:         0       2       0
  6296 ;;Total ram usage:        2 bytes
  6297 ;; Hardware stack levels used:    1
  6298 ;; Hardware stack levels required when called:    6
  6299 ;; This function calls:
  6300 ;;		_strstr
  6301 ;; This function is called by:
  6302 ;;		_ESP_read
  6303 ;; This function uses a non-reentrant model
  6304 ;;
  6305                           
  6306                           
  6307                           ;psect for function _ESP_process_message
  6308  0150                     _ESP_process_message:	
  6309                           
  6310                           ;esp1.c: 56:     unsigned char *aux;;esp1.c: 58:     aux = strstr(esp_read_data,"SEND OK
      +                          ");
  6311                           
  6312                           ;incstack = 0
  6313                           ; Regs used in _ESP_process_message: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6314  0150  3067               	movlw	low (STR_1| (0+32768))
  6315  0151  0020               	movlb	0	; select bank0
  6316  0152  00A4               	movwf	strstr@n
  6317  0153  3087               	movlw	high (STR_1| (0+32768))
  6318  0154  00A5               	movwf	strstr@n+1
  6319  0155  30AC               	movlw	(low (_esp_read_data| 0))& (0+255)
  6320  0156  230C               	fcall	_strstr
  6321  0157  0020               	movlb	0	; select bank0
  6322  0158  00AC               	movwf	??_ESP_process_message
  6323  0159  082C               	movf	??_ESP_process_message,w
  6324  015A  00AD               	movwf	ESP_process_message@aux
  6325                           
  6326                           ;esp1.c: 59:     if (aux) return ESP_SEND_OK;
  6327  015B  082D               	movf	ESP_process_message@aux,w
  6328  015C  1903               	btfsc	3,2
  6329  015D  2960               	goto	l2950
  6330  015E  3001               	movlw	1
  6331  015F  0008               	return
  6332  0160                     l2950:	
  6333                           
  6334                           ;esp1.c: 61:     aux = strstr(esp_read_data,"OK");
  6335  0160  306C               	movlw	low ((STR_1+5)| (0+32768))
  6336  0161  00A4               	movwf	strstr@n
  6337  0162  3087               	movlw	high ((STR_1+5)| (0+32768))
  6338  0163  00A5               	movwf	strstr@n+1
  6339  0164  30AC               	movlw	(low (_esp_read_data| 0))& (0+255)
  6340  0165  230C               	fcall	_strstr
  6341  0166  0020               	movlb	0	; select bank0
  6342  0167  00AC               	movwf	??_ESP_process_message
  6343  0168  082C               	movf	??_ESP_process_message,w
  6344  0169  00AD               	movwf	ESP_process_message@aux
  6345                           
  6346                           ;esp1.c: 62:     if (aux) return ESP_OK;
  6347  016A  082D               	movf	ESP_process_message@aux,w
  6348  016B  1903               	btfsc	3,2
  6349  016C  296F               	goto	l2958
  6350  016D  3002               	movlw	2
  6351  016E  0008               	return
  6352  016F                     l2958:	
  6353                           
  6354                           ;esp1.c: 64:     aux = strstr(esp_read_data,"SEND FAIL");
  6355  016F  3037               	movlw	low (STR_3| (0+32768))
  6356  0170  00A4               	movwf	strstr@n
  6357  0171  3087               	movlw	high (STR_3| (0+32768))
  6358  0172  00A5               	movwf	strstr@n+1
  6359  0173  30AC               	movlw	(low (_esp_read_data| 0))& (0+255)
  6360  0174  230C               	fcall	_strstr
  6361  0175  0020               	movlb	0	; select bank0
  6362  0176  00AC               	movwf	??_ESP_process_message
  6363  0177  082C               	movf	??_ESP_process_message,w
  6364  0178  00AD               	movwf	ESP_process_message@aux
  6365                           
  6366                           ;esp1.c: 65:     if (aux) return ESP_SEND_FAIL;
  6367  0179  082D               	movf	ESP_process_message@aux,w
  6368  017A  1903               	btfsc	3,2
  6369  017B  297E               	goto	l2966
  6370  017C  3007               	movlw	7
  6371  017D  0008               	return
  6372  017E                     l2966:	
  6373                           
  6374                           ;esp1.c: 67:     aux = strstr(esp_read_data,"ERROR");
  6375  017E  3085               	movlw	low (STR_4| (0+32768))
  6376  017F  00A4               	movwf	strstr@n
  6377  0180  3087               	movlw	high (STR_4| (0+32768))
  6378  0181  00A5               	movwf	strstr@n+1
  6379  0182  30AC               	movlw	(low (_esp_read_data| 0))& (0+255)
  6380  0183  230C               	fcall	_strstr
  6381  0184  0020               	movlb	0	; select bank0
  6382  0185  00AC               	movwf	??_ESP_process_message
  6383  0186  082C               	movf	??_ESP_process_message,w
  6384  0187  00AD               	movwf	ESP_process_message@aux
  6385                           
  6386                           ;esp1.c: 68:     if (aux) return ESP_ERROR;
  6387  0188  082D               	movf	ESP_process_message@aux,w
  6388  0189  1903               	btfsc	3,2
  6389  018A  298D               	goto	l2974
  6390  018B  3009               	movlw	9
  6391  018C  0008               	return
  6392  018D                     l2974:	
  6393                           
  6394                           ;esp1.c: 70:     aux = strstr(esp_read_data,"+IPD");
  6395  018D  30C0               	movlw	low (STR_5| (0+32768))
  6396  018E  00A4               	movwf	strstr@n
  6397  018F  3087               	movlw	high (STR_5| (0+32768))
  6398  0190  00A5               	movwf	strstr@n+1
  6399  0191  30AC               	movlw	(low (_esp_read_data| 0))& (0+255)
  6400  0192  230C               	fcall	_strstr
  6401  0193  0020               	movlb	0	; select bank0
  6402  0194  00AC               	movwf	??_ESP_process_message
  6403  0195  082C               	movf	??_ESP_process_message,w
  6404  0196  00AD               	movwf	ESP_process_message@aux
  6405                           
  6406                           ;esp1.c: 71:     if (aux) return ESP_RX;
  6407  0197  082D               	movf	ESP_process_message@aux,w
  6408  0198  1903               	btfsc	3,2
  6409  0199  299C               	goto	l2982
  6410  019A  3004               	movlw	4
  6411  019B  0008               	return
  6412  019C                     l2982:	
  6413                           
  6414                           ;esp1.c: 73:     aux = strstr(esp_read_data,"CONNECT");
  6415  019C  306F               	movlw	low (STR_6| (0+32768))
  6416  019D  00A4               	movwf	strstr@n
  6417  019E  3087               	movlw	high (STR_6| (0+32768))
  6418  019F  00A5               	movwf	strstr@n+1
  6419  01A0  30AC               	movlw	(low (_esp_read_data| 0))& (0+255)
  6420  01A1  230C               	fcall	_strstr
  6421  01A2  0020               	movlb	0	; select bank0
  6422  01A3  00AC               	movwf	??_ESP_process_message
  6423  01A4  082C               	movf	??_ESP_process_message,w
  6424  01A5  00AD               	movwf	ESP_process_message@aux
  6425                           
  6426                           ;esp1.c: 74:     if (aux) return ESP_CONNECT;
  6427  01A6  082D               	movf	ESP_process_message@aux,w
  6428  01A7  1903               	btfsc	3,2
  6429  01A8  29AB               	goto	l2990
  6430  01A9  3006               	movlw	6
  6431  01AA  0008               	return
  6432  01AB                     l2990:	
  6433                           
  6434                           ;esp1.c: 76:     aux = strstr(esp_read_data,"CLOSED");
  6435  01AB  3077               	movlw	low (STR_7| (0+32768))
  6436  01AC  00A4               	movwf	strstr@n
  6437  01AD  3087               	movlw	high (STR_7| (0+32768))
  6438  01AE  00A5               	movwf	strstr@n+1
  6439  01AF  30AC               	movlw	(low (_esp_read_data| 0))& (0+255)
  6440  01B0  230C               	fcall	_strstr
  6441  01B1  0020               	movlb	0	; select bank0
  6442  01B2  00AC               	movwf	??_ESP_process_message
  6443  01B3  082C               	movf	??_ESP_process_message,w
  6444  01B4  00AD               	movwf	ESP_process_message@aux
  6445                           
  6446                           ;esp1.c: 77:     if (aux) return ESP_CLOSED;
  6447  01B5  082D               	movf	ESP_process_message@aux,w
  6448  01B6  1903               	btfsc	3,2
  6449  01B7  29BA               	goto	l2998
  6450  01B8  3008               	movlw	8
  6451  01B9  0008               	return
  6452  01BA                     l2998:	
  6453                           
  6454                           ;esp1.c: 79:     return ESP_OTHER;
  6455  01BA  3000               	movlw	0
  6456  01BB  0008               	return
  6457  01BC                     __end_of_ESP_process_message:	
  6458                           
  6459                           	psect	text43
  6460  030C                     __ptext43:	
  6461 ;; *************** function _strstr *****************
  6462 ;; Defined at:
  6463 ;;		line 143 in file "/pkg/microchip/xc8/v2.00/pic/sources/c99/common/strstr.c"
  6464 ;; Parameters:    Size  Location     Type
  6465 ;;  h               1    wreg     PTR const unsigned char 
  6466 ;;		 -> NULL(0), esp_read_data(20), 
  6467 ;;  n               2    4[BANK0 ] PTR const unsigned char 
  6468 ;;		 -> STR_13(2), STR_7(7), STR_6(8), STR_5(5), 
  6469 ;;		 -> STR_4(6), STR_3(10), STR_2(3), STR_1(8), 
  6470 ;; Auto vars:     Size  Location     Type
  6471 ;;  h               1   11[BANK0 ] PTR const unsigned char 
  6472 ;;		 -> NULL(0), esp_read_data(20), 
  6473 ;;  nl              2    9[BANK0 ] unsigned int 
  6474 ;; Return value:  Size  Location     Type
  6475 ;;                  1    wreg      PTR unsigned char 
  6476 ;; Registers used:
  6477 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6478 ;; Tracked objects:
  6479 ;;		On entry : 0/0
  6480 ;;		On exit  : 0/0
  6481 ;;		Unchanged: 0/0
  6482 ;; Data sizes:     COMMON   BANK0   BANK1
  6483 ;;      Params:         0       2       0
  6484 ;;      Locals:         0       3       0
  6485 ;;      Temps:          0       3       0
  6486 ;;      Totals:         0       8       0
  6487 ;;Total ram usage:        8 bytes
  6488 ;; Hardware stack levels used:    1
  6489 ;; Hardware stack levels required when called:    5
  6490 ;; This function calls:
  6491 ;;		_strchr
  6492 ;;		_strlen
  6493 ;;		_strncmp
  6494 ;; This function is called by:
  6495 ;;		_ESP_process_message
  6496 ;;		_ESP_process_rx_data
  6497 ;; This function uses a non-reentrant model
  6498 ;;
  6499                           
  6500                           
  6501                           ;psect for function _strstr
  6502  030C                     _strstr:	
  6503                           
  6504                           ;incstack = 0
  6505                           ; Regs used in _strstr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6506                           ;strstr@h stored from wreg
  6507  030C  0020               	movlb	0	; select bank0
  6508  030D  00AB               	movwf	strstr@h
  6509  030E  0824               	movf	strstr@n,w
  6510  030F  0425               	iorwf	strstr@n+1,w
  6511  0310  1903               	btfsc	3,2
  6512  0311  2B4A               	goto	l2938
  6513  0312  0825               	movf	strstr@n+1,w
  6514  0313  00F4               	movwf	strlen@s+1
  6515  0314  0824               	movf	strstr@n,w
  6516  0315  00F3               	movwf	strlen@s
  6517  0316  2619               	fcall	_strlen
  6518  0317  0874               	movf	?_strlen+1,w
  6519  0318  0020               	movlb	0	; select bank0
  6520  0319  00AA               	movwf	strstr@nl+1
  6521  031A  0873               	movf	?_strlen,w
  6522  031B  00A9               	movwf	strstr@nl
  6523  031C  2B41               	goto	l2934
  6524  031D                     l2926:	
  6525  031D  0825               	movf	strstr@n+1,w
  6526  031E  00F4               	movwf	strncmp@_r+1
  6527  031F  0824               	movf	strstr@n,w
  6528  0320  00F3               	movwf	strncmp@_r
  6529  0321  082A               	movf	strstr@nl+1,w
  6530  0322  00F6               	movwf	strncmp@n+1
  6531  0323  0829               	movf	strstr@nl,w
  6532  0324  00F5               	movwf	strncmp@n
  6533  0325  082B               	movf	strstr@h,w
  6534  0326  221C               	fcall	_strncmp
  6535  0327  0873               	movf	?_strncmp,w
  6536  0328  0474               	iorwf	?_strncmp+1,w
  6537  0329  1D03               	btfss	3,2
  6538  032A  2B2E               	goto	l2932
  6539  032B  0020               	movlb	0	; select bank0
  6540  032C  082B               	movf	strstr@h,w
  6541  032D  0008               	return
  6542  032E                     l2932:	
  6543  032E  0020               	movlb	0	; select bank0
  6544  032F  0824               	movf	strstr@n,w
  6545  0330  0084               	movwf	4
  6546  0331  0825               	movf	strstr@n+1,w
  6547  0332  0085               	movwf	5
  6548  0333  0800               	movf	0,w	;code access
  6549  0334  00A6               	movwf	??_strstr
  6550  0335  01A7               	clrf	??_strstr+1
  6551  0336  0826               	movf	??_strstr,w
  6552  0337  00F3               	movwf	strchr@c
  6553  0338  0827               	movf	??_strstr+1,w
  6554  0339  00F4               	movwf	strchr@c+1
  6555  033A  082B               	movf	strstr@h,w
  6556  033B  3E01               	addlw	1
  6557  033C  26B6               	fcall	_strchr
  6558  033D  0020               	movlb	0	; select bank0
  6559  033E  00A8               	movwf	??_strstr+2
  6560  033F  0828               	movf	??_strstr+2,w
  6561  0340  00AB               	movwf	strstr@h
  6562  0341                     l2934:	
  6563  0341  082B               	movf	strstr@h,w
  6564  0342  1903               	btfsc	3,2
  6565  0343  2B4A               	goto	l2938
  6566  0344  082B               	movf	strstr@h,w
  6567  0345  0086               	movwf	6
  6568  0346  0187               	clrf	7
  6569  0347  0801               	movf	1,w
  6570  0348  1D03               	btfss	3,2
  6571  0349  2B1D               	goto	l2926
  6572  034A                     l2938:	
  6573  034A  3000               	movlw	0
  6574  034B  0008               	return
  6575  034C                     __end_of_strstr:	
  6576                           
  6577                           	psect	text44
  6578  021C                     __ptext44:	
  6579 ;; *************** function _strncmp *****************
  6580 ;; Defined at:
  6581 ;;		line 3 in file "/pkg/microchip/xc8/v2.00/pic/sources/c99/common/strncmp.c"
  6582 ;; Parameters:    Size  Location     Type
  6583 ;;  _l              1    wreg     PTR const unsigned char 
  6584 ;;		 -> NULL(0), esp_read_data(20), 
  6585 ;;  _r              2    3[COMMON] PTR const unsigned char 
  6586 ;;		 -> STR_13(2), STR_7(7), STR_6(8), STR_5(5), 
  6587 ;;		 -> STR_4(6), STR_3(10), STR_2(3), STR_1(8), 
  6588 ;;  n               2    5[COMMON] unsigned int 
  6589 ;; Auto vars:     Size  Location     Type
  6590 ;;  _l              1    0[BANK0 ] PTR const unsigned char 
  6591 ;;		 -> NULL(0), esp_read_data(20), 
  6592 ;;  r               2    1[BANK0 ] PTR const unsigned char 
  6593 ;;		 -> STR_13(2), STR_7(7), STR_6(8), STR_5(5), 
  6594 ;;		 -> STR_4(6), STR_3(10), STR_2(3), STR_1(8), 
  6595 ;;  l               1    3[BANK0 ] PTR const unsigned char 
  6596 ;;		 -> NULL(0), esp_read_data(20), 
  6597 ;; Return value:  Size  Location     Type
  6598 ;;                  2    3[COMMON] int 
  6599 ;; Registers used:
  6600 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  6601 ;; Tracked objects:
  6602 ;;		On entry : 0/0
  6603 ;;		On exit  : 0/0
  6604 ;;		Unchanged: 0/0
  6605 ;; Data sizes:     COMMON   BANK0   BANK1
  6606 ;;      Params:         4       0       0
  6607 ;;      Locals:         0       4       0
  6608 ;;      Temps:          2       0       0
  6609 ;;      Totals:         6       4       0
  6610 ;;Total ram usage:       10 bytes
  6611 ;; Hardware stack levels used:    1
  6612 ;; Hardware stack levels required when called:    4
  6613 ;; This function calls:
  6614 ;;		Nothing
  6615 ;; This function is called by:
  6616 ;;		_strstr
  6617 ;; This function uses a non-reentrant model
  6618 ;;
  6619                           
  6620                           
  6621                           ;psect for function _strncmp
  6622  021C                     _strncmp:	
  6623                           
  6624                           ;incstack = 0
  6625                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
  6626                           ;strncmp@_l stored from wreg
  6627  021C  0020               	movlb	0	; select bank0
  6628  021D  00A0               	movwf	strncmp@_l
  6629  021E  0820               	movf	strncmp@_l,w
  6630  021F  00F7               	movwf	??_strncmp
  6631  0220  0877               	movf	??_strncmp,w
  6632  0221  00A3               	movwf	strncmp@l
  6633  0222  0874               	movf	strncmp@_r+1,w
  6634  0223  00A2               	movwf	strncmp@r+1
  6635  0224  0873               	movf	strncmp@_r,w
  6636  0225  00A1               	movwf	strncmp@r
  6637  0226  3001               	movlw	1
  6638  0227  02F5               	subwf	strncmp@n,f
  6639  0228  3000               	movlw	0
  6640  0229  3BF6               	subwfb	strncmp@n+1,f
  6641  022A  0A75               	incf	strncmp@n,w
  6642  022B  1D03               	skipz
  6643  022C  2A3F               	goto	l2910
  6644  022D  0A76               	incf	strncmp@n+1,w
  6645  022E  1D03               	btfss	3,2
  6646  022F  2A3F               	goto	l2910
  6647  0230  01F3               	clrf	?_strncmp
  6648  0231  01F4               	clrf	?_strncmp+1
  6649  0232  0008               	return
  6650  0233                     l2904:	
  6651  0233  3001               	movlw	1
  6652  0234  00F7               	movwf	??_strncmp
  6653  0235  0877               	movf	??_strncmp,w
  6654  0236  07A3               	addwf	strncmp@l,f
  6655  0237  3001               	movlw	1
  6656  0238  07A1               	addwf	strncmp@r,f
  6657  0239  3000               	movlw	0
  6658  023A  3DA2               	addwfc	strncmp@r+1,f
  6659  023B  3001               	movlw	1
  6660  023C  02F5               	subwf	strncmp@n,f
  6661  023D  3000               	movlw	0
  6662  023E  3BF6               	subwfb	strncmp@n+1,f
  6663  023F                     l2910:	
  6664  023F  0823               	movf	strncmp@l,w
  6665  0240  0086               	movwf	6
  6666  0241  0187               	clrf	7
  6667  0242  0801               	movf	1,w
  6668  0243  1903               	btfsc	3,2
  6669  0244  2A5D               	goto	l2918
  6670  0245  0821               	movf	strncmp@r,w
  6671  0246  0084               	movwf	4
  6672  0247  0822               	movf	strncmp@r+1,w
  6673  0248  0085               	movwf	5
  6674  0249  0012               	moviw fsr0++
  6675  024A  1903               	btfsc	3,2
  6676  024B  2A5D               	goto	l2918
  6677  024C  0875               	movf	strncmp@n,w
  6678  024D  0476               	iorwf	strncmp@n+1,w
  6679  024E  1903               	btfsc	3,2
  6680  024F  2A5D               	goto	l2918
  6681  0250  0821               	movf	strncmp@r,w
  6682  0251  0084               	movwf	4
  6683  0252  0822               	movf	strncmp@r+1,w
  6684  0253  0085               	movwf	5
  6685  0254  0800               	movf	0,w	;code access
  6686  0255  00F7               	movwf	??_strncmp
  6687  0256  0823               	movf	strncmp@l,w
  6688  0257  0086               	movwf	6
  6689  0258  0187               	clrf	7
  6690  0259  0801               	movf	1,w
  6691  025A  0677               	xorwf	??_strncmp,w
  6692  025B  1903               	skipnz
  6693  025C  2A33               	goto	l2904
  6694  025D                     l2918:	
  6695  025D  0821               	movf	strncmp@r,w
  6696  025E  0084               	movwf	4
  6697  025F  0822               	movf	strncmp@r+1,w
  6698  0260  0085               	movwf	5
  6699  0261  0800               	movf	0,w	;code access
  6700  0262  00F7               	movwf	??_strncmp
  6701  0263  01F8               	clrf	??_strncmp+1
  6702  0264  09F7               	comf	??_strncmp,f
  6703  0265  09F8               	comf	??_strncmp+1,f
  6704  0266  0AF7               	incf	??_strncmp,f
  6705  0267  1903               	skipnz
  6706  0268  0AF8               	incf	??_strncmp+1,f
  6707  0269  0823               	movf	strncmp@l,w
  6708  026A  0086               	movwf	6
  6709  026B  0187               	clrf	7
  6710  026C  0801               	movf	1,w
  6711  026D  0777               	addwf	??_strncmp,w
  6712  026E  00F3               	movwf	?_strncmp
  6713  026F  0878               	movf	??_strncmp+1,w
  6714  0270  1803               	skipnc
  6715  0271  0A78               	incf	??_strncmp+1,w
  6716  0272  00F4               	movwf	?_strncmp+1
  6717  0273  0008               	return
  6718  0274                     __end_of_strncmp:	
  6719                           
  6720                           	psect	text45
  6721  0619                     __ptext45:	
  6722 ;; *************** function _strlen *****************
  6723 ;; Defined at:
  6724 ;;		line 12 in file "/pkg/microchip/xc8/v2.00/pic/sources/c99/common/strlen.c"
  6725 ;; Parameters:    Size  Location     Type
  6726 ;;  s               2    3[COMMON] PTR const unsigned char 
  6727 ;;		 -> STR_13(2), STR_7(7), STR_6(8), STR_5(5), 
  6728 ;;		 -> STR_4(6), STR_3(10), STR_2(3), STR_1(8), 
  6729 ;; Auto vars:     Size  Location     Type
  6730 ;;  a               2    7[COMMON] PTR const unsigned char 
  6731 ;;		 -> STR_13(2), STR_7(7), STR_6(8), STR_5(5), 
  6732 ;;		 -> STR_4(6), STR_3(10), STR_2(3), STR_1(8), 
  6733 ;; Return value:  Size  Location     Type
  6734 ;;                  2    3[COMMON] unsigned int 
  6735 ;; Registers used:
  6736 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6737 ;; Tracked objects:
  6738 ;;		On entry : 0/0
  6739 ;;		On exit  : 0/0
  6740 ;;		Unchanged: 0/0
  6741 ;; Data sizes:     COMMON   BANK0   BANK1
  6742 ;;      Params:         2       0       0
  6743 ;;      Locals:         2       0       0
  6744 ;;      Temps:          2       0       0
  6745 ;;      Totals:         6       0       0
  6746 ;;Total ram usage:        6 bytes
  6747 ;; Hardware stack levels used:    1
  6748 ;; Hardware stack levels required when called:    4
  6749 ;; This function calls:
  6750 ;;		Nothing
  6751 ;; This function is called by:
  6752 ;;		_strstr
  6753 ;; This function uses a non-reentrant model
  6754 ;;
  6755                           
  6756                           
  6757                           ;psect for function _strlen
  6758  0619                     _strlen:	
  6759                           
  6760                           ;incstack = 0
  6761                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
  6762  0619  0874               	movf	strlen@s+1,w
  6763  061A  00F8               	movwf	strlen@a+1
  6764  061B  0873               	movf	strlen@s,w
  6765  061C  00F7               	movwf	strlen@a
  6766  061D                     l2048:	
  6767  061D  0873               	movf	strlen@s,w
  6768  061E  0084               	movwf	4
  6769  061F  0874               	movf	strlen@s+1,w
  6770  0620  0085               	movwf	5
  6771  0621  0012               	moviw fsr0++
  6772  0622  1903               	btfsc	3,2
  6773  0623  2E29               	goto	l2050
  6774  0624  3001               	movlw	1
  6775  0625  07F3               	addwf	strlen@s,f
  6776  0626  3000               	movlw	0
  6777  0627  3DF4               	addwfc	strlen@s+1,f
  6778  0628  2E1D               	goto	l2048
  6779  0629                     l2050:	
  6780  0629  0977               	comf	strlen@a,w
  6781  062A  00F5               	movwf	??_strlen
  6782  062B  0978               	comf	strlen@a+1,w
  6783  062C  00F6               	movwf	??_strlen+1
  6784  062D  0AF5               	incf	??_strlen,f
  6785  062E  1903               	skipnz
  6786  062F  0AF6               	incf	??_strlen+1,f
  6787  0630  0873               	movf	strlen@s,w
  6788  0631  0775               	addwf	??_strlen,w
  6789  0632  00F3               	movwf	?_strlen
  6790  0633  0874               	movf	strlen@s+1,w
  6791  0634  3D76               	addwfc	??_strlen+1,w
  6792  0635  00F4               	movwf	?_strlen+1
  6793  0636  0008               	return
  6794  0637                     __end_of_strlen:	
  6795                           
  6796                           	psect	text46
  6797  06B6                     __ptext46:	
  6798 ;; *************** function _strchr *****************
  6799 ;; Defined at:
  6800 ;;		line 7 in file "/pkg/microchip/xc8/v2.00/pic/sources/c99/common/strchr.c"
  6801 ;; Parameters:    Size  Location     Type
  6802 ;;  s               1    wreg     PTR const unsigned char 
  6803 ;;		 -> NULL(0), esp_read_data(20), 
  6804 ;;  c               2    3[COMMON] int 
  6805 ;; Auto vars:     Size  Location     Type
  6806 ;;  s               1    5[COMMON] PTR const unsigned char 
  6807 ;;		 -> NULL(0), esp_read_data(20), 
  6808 ;; Return value:  Size  Location     Type
  6809 ;;                  1    wreg      PTR unsigned char 
  6810 ;; Registers used:
  6811 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6812 ;; Tracked objects:
  6813 ;;		On entry : 0/0
  6814 ;;		On exit  : 0/0
  6815 ;;		Unchanged: 0/0
  6816 ;; Data sizes:     COMMON   BANK0   BANK1
  6817 ;;      Params:         2       0       0
  6818 ;;      Locals:         1       0       0
  6819 ;;      Temps:          0       0       0
  6820 ;;      Totals:         3       0       0
  6821 ;;Total ram usage:        3 bytes
  6822 ;; Hardware stack levels used:    1
  6823 ;; Hardware stack levels required when called:    4
  6824 ;; This function calls:
  6825 ;;		Nothing
  6826 ;; This function is called by:
  6827 ;;		_strstr
  6828 ;; This function uses a non-reentrant model
  6829 ;;
  6830                           
  6831                           
  6832                           ;psect for function _strchr
  6833  06B6                     _strchr:	
  6834                           
  6835                           ;incstack = 0
  6836                           ; Regs used in _strchr: [wreg+fsr1l+fsr1h+status,2+status,0]
  6837                           ;strchr@s stored from wreg
  6838  06B6  00F5               	movwf	strchr@s
  6839  06B7                     l1132:	
  6840  06B7  0875               	movf	strchr@s,w
  6841  06B8  0086               	movwf	6
  6842  06B9  0187               	clrf	7
  6843  06BA  0801               	movf	1,w
  6844  06BB  0673               	xorwf	strchr@c,w
  6845  06BC  1D03               	skipz
  6846  06BD  2EC0               	goto	l2086
  6847  06BE  0875               	movf	strchr@s,w
  6848  06BF  0008               	return
  6849  06C0                     l2086:	
  6850  06C0  0875               	movf	strchr@s,w
  6851  06C1  0086               	movwf	6
  6852  06C2  0187               	clrf	7
  6853  06C3  0AF5               	incf	strchr@s,f
  6854  06C4  0801               	movf	1,w
  6855  06C5  1D03               	btfss	3,2
  6856  06C6  2EB7               	goto	l1132
  6857  06C7  3000               	movlw	0
  6858  06C8  0008               	return
  6859  06C9                     __end_of_strchr:	
  6860                           
  6861                           	psect	intentry
  6862  0004                     __pintentry:	
  6863 ;; *************** function _INTERRUPT_InterruptManager *****************
  6864 ;; Defined at:
  6865 ;;		line 55 in file "mcc_generated_files/interrupt_manager.c"
  6866 ;; Parameters:    Size  Location     Type
  6867 ;;		None
  6868 ;; Auto vars:     Size  Location     Type
  6869 ;;		None
  6870 ;; Return value:  Size  Location     Type
  6871 ;;                  1    wreg      void 
  6872 ;; Registers used:
  6873 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6874 ;; Tracked objects:
  6875 ;;		On entry : 0/0
  6876 ;;		On exit  : 0/0
  6877 ;;		Unchanged: 0/0
  6878 ;; Data sizes:     COMMON   BANK0   BANK1
  6879 ;;      Params:         0       0       0
  6880 ;;      Locals:         0       0       0
  6881 ;;      Temps:          1       0       0
  6882 ;;      Totals:         1       0       0
  6883 ;;Total ram usage:        1 bytes
  6884 ;; Hardware stack levels used:    1
  6885 ;; Hardware stack levels required when called:    3
  6886 ;; This function calls:
  6887 ;;		Absolute function
  6888 ;;		_ADC_GetConversionResult
  6889 ;;		_ADC_ISR
  6890 ;;		_EUSART_Receive_ISR
  6891 ;;		_EUSART_Transmit_ISR
  6892 ;;		_PIN_MANAGER_IOC
  6893 ;;		_TMR1_ISR
  6894 ;; This function is called by:
  6895 ;;		Interrupt level 1
  6896 ;; This function uses a non-reentrant model
  6897 ;;
  6898                           
  6899  0004                     _INTERRUPT_InterruptManager:	
  6900                           
  6901                           ;incstack = 0
  6902  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  6903                           
  6904                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6905  0005  3180               	pagesel	$
  6906                           
  6907                           ;mcc_generated_files/interrupt_manager.c: 58:     if(INTCONbits.IOCIE == 1 && INTCONbits
      +                          .IOCIF == 1)
  6908  0006  198B               	btfsc	11,3	;volatile
  6909  0007  1C0B               	btfss	11,0	;volatile
  6910  0008  280B               	goto	i1l74
  6911                           
  6912                           ;mcc_generated_files/interrupt_manager.c: 59:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 60:         PIN_MANAGER_IOC();
  6913  0009  27C5               	fcall	_PIN_MANAGER_IOC
  6914                           
  6915                           ;mcc_generated_files/interrupt_manager.c: 61:     }
  6916  000A  283E               	goto	i1l86
  6917  000B                     i1l74:	
  6918                           ;mcc_generated_files/interrupt_manager.c: 62:     else if(INTCONbits.PEIE == 1)
  6919                           
  6920  000B  1F0B               	btfss	11,6	;volatile
  6921  000C  283E               	goto	i1l86
  6922                           
  6923                           ;mcc_generated_files/interrupt_manager.c: 63:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 64:         if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  6924  000D  0021               	movlb	1	; select bank1
  6925  000E  1C11               	btfss	17,0	;volatile
  6926  000F  2815               	goto	i1l77
  6927  0010  0020               	movlb	0	; select bank0
  6928  0011  1C11               	btfss	17,0	;volatile
  6929  0012  2815               	goto	i1l77
  6930                           
  6931                           ;mcc_generated_files/interrupt_manager.c: 65:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 66:             TMR1_ISR();
  6932  0013  26C9               	fcall	_TMR1_ISR
  6933                           
  6934                           ;mcc_generated_files/interrupt_manager.c: 67:         }
  6935  0014  283E               	goto	i1l86
  6936  0015                     i1l77:	
  6937                           ;mcc_generated_files/interrupt_manager.c: 68:         else if(PIE1bits.ADIE == 1 && PIR1
      +                          bits.ADIF == 1)
  6938                           
  6939  0015  0021               	movlb	1	; select bank1
  6940  0016  1F11               	btfss	17,6	;volatile
  6941  0017  2827               	goto	i1l79
  6942  0018  0020               	movlb	0	; select bank0
  6943  0019  1F11               	btfss	17,6	;volatile
  6944  001A  2827               	goto	i1l79
  6945                           
  6946                           ;mcc_generated_files/interrupt_manager.c: 69:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 70:             ADC_value = ADC_GetConversionResult();
  6947  001B  27B5               	fcall	_ADC_GetConversionResult
  6948  001C  0871               	movf	?_ADC_GetConversionResult+1,w
  6949  001D  0020               	movlb	0	; select bank0
  6950  001E  00DD               	movwf	_ADC_value+1	;volatile
  6951  001F  0870               	movf	?_ADC_GetConversionResult,w
  6952  0020  00DC               	movwf	_ADC_value	;volatile
  6953                           
  6954                           ;mcc_generated_files/interrupt_manager.c: 78:             ADC_state = ADC_READY;
  6955  0021  3001               	movlw	1
  6956  0022  00F2               	movwf	??_INTERRUPT_InterruptManager
  6957  0023  0872               	movf	??_INTERRUPT_InterruptManager,w
  6958  0024  00ED               	movwf	_ADC_state	;volatile
  6959                           
  6960                           ;mcc_generated_files/interrupt_manager.c: 80:             ADC_ISR();
  6961  0025  27E3               	fcall	_ADC_ISR
  6962                           
  6963                           ;mcc_generated_files/interrupt_manager.c: 81:         }
  6964  0026  283E               	goto	i1l86
  6965  0027                     i1l79:	
  6966                           ;mcc_generated_files/interrupt_manager.c: 82:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
  6967                           
  6968  0027  0021               	movlb	1	; select bank1
  6969  0028  1E91               	btfss	17,5	;volatile
  6970  0029  2833               	goto	i1l81
  6971  002A  0020               	movlb	0	; select bank0
  6972  002B  1E91               	btfss	17,5	;volatile
  6973  002C  2833               	goto	i1l81
  6974                           
  6975                           ;mcc_generated_files/interrupt_manager.c: 83:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 84:             EUSART_RxDefaultInterruptHandler();
  6976  002D  085F               	movf	_EUSART_RxDefaultInterruptHandler+1,w
  6977  002E  008A               	movwf	10
  6978  002F  085E               	movf	_EUSART_RxDefaultInterruptHandler,w
  6979  0030  000A               	callw
  6980  0031  3180               	pagesel	$
  6981                           
  6982                           ;mcc_generated_files/interrupt_manager.c: 85:         }
  6983  0032  283E               	goto	i1l86
  6984  0033                     i1l81:	
  6985                           ;mcc_generated_files/interrupt_manager.c: 86:         else if(PIE1bits.TXIE == 1 && PIR1
      +                          bits.TXIF == 1)
  6986                           
  6987  0033  0021               	movlb	1	; select bank1
  6988  0034  1E11               	btfss	17,4	;volatile
  6989  0035  283E               	goto	i1l86
  6990  0036  0020               	movlb	0	; select bank0
  6991  0037  1E11               	btfss	17,4	;volatile
  6992  0038  283E               	goto	i1l86
  6993                           
  6994                           ;mcc_generated_files/interrupt_manager.c: 87:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 88:             EUSART_TxDefaultInterruptHandler();
  6995  0039  0861               	movf	_EUSART_TxDefaultInterruptHandler+1,w
  6996  003A  008A               	movwf	10
  6997  003B  0860               	movf	_EUSART_TxDefaultInterruptHandler,w
  6998  003C  000A               	callw
  6999  003D  3180               	pagesel	$
  7000  003E                     i1l86:	
  7001                           ;mcc_generated_files/interrupt_manager.c: 96:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 98:     }
  7002                           
  7003                           ;mcc_generated_files/interrupt_manager.c: 95:     else
  7004                           
  7005                           ;mcc_generated_files/interrupt_manager.c: 94:     }
  7006                           
  7007                           ;mcc_generated_files/interrupt_manager.c: 91:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 93:         }
  7008                           
  7009                           ;mcc_generated_files/interrupt_manager.c: 90:         else
  7010                           
  7011                           ;mcc_generated_files/interrupt_manager.c: 89:         }
  7012                           
  7013  003E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  7014  003F  0009               	retfie
  7015  0040                     __end_of_INTERRUPT_InterruptManager:	
  7016                           
  7017                           	psect	text48
  7018  06C9                     __ptext48:	
  7019 ;; *************** function _TMR1_ISR *****************
  7020 ;; Defined at:
  7021 ;;		line 157 in file "mcc_generated_files/tmr1.c"
  7022 ;; Parameters:    Size  Location     Type
  7023 ;;		None
  7024 ;; Auto vars:     Size  Location     Type
  7025 ;;		None
  7026 ;; Return value:  Size  Location     Type
  7027 ;;                  1    wreg      void 
  7028 ;; Registers used:
  7029 ;;		wreg, status,2, status,0, pclath, cstack
  7030 ;; Tracked objects:
  7031 ;;		On entry : 0/0
  7032 ;;		On exit  : 0/0
  7033 ;;		Unchanged: 0/0
  7034 ;; Data sizes:     COMMON   BANK0   BANK1
  7035 ;;      Params:         0       0       0
  7036 ;;      Locals:         0       0       0
  7037 ;;      Temps:          0       0       0
  7038 ;;      Totals:         0       0       0
  7039 ;;Total ram usage:        0 bytes
  7040 ;; Hardware stack levels used:    1
  7041 ;; Hardware stack levels required when called:    2
  7042 ;; This function calls:
  7043 ;;		Absolute function
  7044 ;;		_TMR1_DefaultInterruptHandler
  7045 ;;		_TMR1_WriteTimer
  7046 ;;		__TMR1_Ready
  7047 ;; This function is called by:
  7048 ;;		_INTERRUPT_InterruptManager
  7049 ;; This function uses a non-reentrant model
  7050 ;;
  7051                           
  7052                           
  7053                           ;psect for function _TMR1_ISR
  7054  06C9                     _TMR1_ISR:	
  7055                           
  7056                           ;mcc_generated_files/tmr1.c: 161:     PIR1bits.TMR1IF = 0;
  7057                           
  7058                           ;incstack = 0
  7059                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
  7060  06C9  0020               	movlb	0	; select bank0
  7061  06CA  1011               	bcf	17,0	;volatile
  7062                           
  7063                           ;mcc_generated_files/tmr1.c: 162:     TMR1_WriteTimer(timer1ReloadVal);
  7064  06CB  085B               	movf	_timer1ReloadVal+1,w	;volatile
  7065  06CC  00F1               	movwf	TMR1_WriteTimer@timerVal+1
  7066  06CD  085A               	movf	_timer1ReloadVal,w	;volatile
  7067  06CE  00F0               	movwf	TMR1_WriteTimer@timerVal
  7068  06CF  26DB               	fcall	_TMR1_WriteTimer
  7069                           
  7070                           ;mcc_generated_files/tmr1.c: 164:     if(TMR1_InterruptHandler)
  7071  06D0  0020               	movlb	0	; select bank0
  7072  06D1  0858               	movf	_TMR1_InterruptHandler,w
  7073  06D2  0459               	iorwf	_TMR1_InterruptHandler+1,w
  7074  06D3  1903               	btfsc	3,2
  7075  06D4  0008               	return
  7076                           
  7077                           ;mcc_generated_files/tmr1.c: 165:     {;mcc_generated_files/tmr1.c: 166:         TMR1_In
      +                          terruptHandler();
  7078  06D5  0859               	movf	_TMR1_InterruptHandler+1,w
  7079  06D6  008A               	movwf	10
  7080  06D7  0858               	movf	_TMR1_InterruptHandler,w
  7081  06D8  000A               	callw
  7082  06D9  3186               	pagesel	$
  7083  06DA  0008               	return
  7084  06DB                     __end_of_TMR1_ISR:	
  7085                           ;mcc_generated_files/tmr1.c: 167:     }
  7086                           
  7087                           
  7088                           	psect	text49
  7089  07ED                     __ptext49:	
  7090 ;; *************** function _TMR1_DefaultInterruptHandler *****************
  7091 ;; Defined at:
  7092 ;;		line 175 in file "mcc_generated_files/tmr1.c"
  7093 ;; Parameters:    Size  Location     Type
  7094 ;;		None
  7095 ;; Auto vars:     Size  Location     Type
  7096 ;;		None
  7097 ;; Return value:  Size  Location     Type
  7098 ;;                  1    wreg      void 
  7099 ;; Registers used:
  7100 ;;		None
  7101 ;; Tracked objects:
  7102 ;;		On entry : 0/0
  7103 ;;		On exit  : 0/0
  7104 ;;		Unchanged: 0/0
  7105 ;; Data sizes:     COMMON   BANK0   BANK1
  7106 ;;      Params:         0       0       0
  7107 ;;      Locals:         0       0       0
  7108 ;;      Temps:          0       0       0
  7109 ;;      Totals:         0       0       0
  7110 ;;Total ram usage:        0 bytes
  7111 ;; Hardware stack levels used:    1
  7112 ;; This function calls:
  7113 ;;		Nothing
  7114 ;; This function is called by:
  7115 ;;		_TMR1_Initialize
  7116 ;;		_TMR1_ISR
  7117 ;; This function uses a non-reentrant model
  7118 ;;
  7119                           
  7120                           
  7121                           ;psect for function _TMR1_DefaultInterruptHandler
  7122  07ED                     _TMR1_DefaultInterruptHandler:	
  7123                           
  7124                           ;incstack = 0
  7125                           ; Regs used in _TMR1_DefaultInterruptHandler: []
  7126  07ED  0008               	return
  7127  07EE                     __end_of_TMR1_DefaultInterruptHandler:	
  7128                           
  7129                           	psect	text50
  7130  07AF                     __ptext50:	
  7131 ;; *************** function __TMR1_Ready *****************
  7132 ;; Defined at:
  7133 ;;		line 154 in file "logger.c"
  7134 ;; Parameters:    Size  Location     Type
  7135 ;;		None
  7136 ;; Auto vars:     Size  Location     Type
  7137 ;;		None
  7138 ;; Return value:  Size  Location     Type
  7139 ;;                  1    wreg      void 
  7140 ;; Registers used:
  7141 ;;		wreg, status,2, status,0, pclath, cstack
  7142 ;; Tracked objects:
  7143 ;;		On entry : 0/0
  7144 ;;		On exit  : 0/0
  7145 ;;		Unchanged: 0/0
  7146 ;; Data sizes:     COMMON   BANK0   BANK1
  7147 ;;      Params:         0       0       0
  7148 ;;      Locals:         0       0       0
  7149 ;;      Temps:          0       0       0
  7150 ;;      Totals:         0       0       0
  7151 ;;Total ram usage:        0 bytes
  7152 ;; Hardware stack levels used:    1
  7153 ;; Hardware stack levels required when called:    1
  7154 ;; This function calls:
  7155 ;;		i1_ADC_StartConversion
  7156 ;; This function is called by:
  7157 ;;		_logger_initialize
  7158 ;;		_TMR1_ISR
  7159 ;; This function uses a non-reentrant model
  7160 ;;
  7161                           
  7162                           
  7163                           ;psect for function __TMR1_Ready
  7164  07AF                     __TMR1_Ready:	
  7165                           
  7166                           ;logger.c: 156:     if (TMR1_state == TMR1_RUNNING) {
  7167                           
  7168                           ;incstack = 0
  7169                           ; Regs used in __TMR1_Ready: [wreg+status,2+status,0+pclath+cstack]
  7170  07AF  0020               	movlb	0	; select bank0
  7171  07B0  0363               	decf	_TMR1_state,w	;volatile
  7172  07B1  1D03               	btfss	3,2
  7173  07B2  0008               	return
  7174                           
  7175                           ;logger.c: 157:         ADC_StartConversion();
  7176  07B3  27E0               	fcall	i1_ADC_StartConversion
  7177  07B4  0008               	return
  7178  07B5                     __end_of__TMR1_Ready:	
  7179                           ;logger.c: 158:     }
  7180                           
  7181                           
  7182                           	psect	text51
  7183  07E0                     __ptext51:	
  7184 ;; *************** function i1_ADC_StartConversion *****************
  7185 ;; Defined at:
  7186 ;;		line 93 in file "mcc_generated_files/adc.c"
  7187 ;; Parameters:    Size  Location     Type
  7188 ;;		None
  7189 ;; Auto vars:     Size  Location     Type
  7190 ;;		None
  7191 ;; Return value:  Size  Location     Type
  7192 ;;                  1    wreg      void 
  7193 ;; Registers used:
  7194 ;;		None
  7195 ;; Tracked objects:
  7196 ;;		On entry : 0/0
  7197 ;;		On exit  : 0/0
  7198 ;;		Unchanged: 0/0
  7199 ;; Data sizes:     COMMON   BANK0   BANK1
  7200 ;;      Params:         0       0       0
  7201 ;;      Locals:         0       0       0
  7202 ;;      Temps:          0       0       0
  7203 ;;      Totals:         0       0       0
  7204 ;;Total ram usage:        0 bytes
  7205 ;; Hardware stack levels used:    1
  7206 ;; This function calls:
  7207 ;;		Nothing
  7208 ;; This function is called by:
  7209 ;;		__TMR1_Ready
  7210 ;; This function uses a non-reentrant model
  7211 ;;
  7212                           
  7213                           
  7214                           ;psect for function i1_ADC_StartConversion
  7215  07E0                     i1_ADC_StartConversion:	
  7216                           
  7217                           ;mcc_generated_files/adc.c: 96:     ADCON0bits.GO_nDONE = 1;
  7218                           
  7219                           ;incstack = 0
  7220                           ; Regs used in i1_ADC_StartConversion: []
  7221  07E0  0021               	movlb	1	; select bank1
  7222  07E1  149D               	bsf	29,1	;volatile
  7223  07E2  0008               	return
  7224  07E3                     __end_ofi1_ADC_StartConversion:	
  7225                           
  7226                           	psect	text52
  7227  06DB                     __ptext52:	
  7228 ;; *************** function _TMR1_WriteTimer *****************
  7229 ;; Defined at:
  7230 ;;		line 120 in file "mcc_generated_files/tmr1.c"
  7231 ;; Parameters:    Size  Location     Type
  7232 ;;  timerVal        2    0[COMMON] unsigned short 
  7233 ;; Auto vars:     Size  Location     Type
  7234 ;;		None
  7235 ;; Return value:  Size  Location     Type
  7236 ;;                  1    wreg      void 
  7237 ;; Registers used:
  7238 ;;		wreg, status,2
  7239 ;; Tracked objects:
  7240 ;;		On entry : 0/0
  7241 ;;		On exit  : 0/0
  7242 ;;		Unchanged: 0/0
  7243 ;; Data sizes:     COMMON   BANK0   BANK1
  7244 ;;      Params:         2       0       0
  7245 ;;      Locals:         0       0       0
  7246 ;;      Temps:          0       0       0
  7247 ;;      Totals:         2       0       0
  7248 ;;Total ram usage:        2 bytes
  7249 ;; Hardware stack levels used:    1
  7250 ;; This function calls:
  7251 ;;		Nothing
  7252 ;; This function is called by:
  7253 ;;		_TMR1_ISR
  7254 ;;		_TMR1_Reload
  7255 ;; This function uses a non-reentrant model
  7256 ;;
  7257                           
  7258                           
  7259                           ;psect for function _TMR1_WriteTimer
  7260  06DB                     _TMR1_WriteTimer:	
  7261                           
  7262                           ;mcc_generated_files/tmr1.c: 120: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr1.c: 121: {;mcc_generated_files/tmr1.c: 122:     if (T1CONbits.nT1SYNC == 1)
  7263                           
  7264                           ;incstack = 0
  7265                           ; Regs used in _TMR1_WriteTimer: [wreg+status,2]
  7266  06DB  0020               	movlb	0	; select bank0
  7267  06DC  1D18               	btfss	24,2	;volatile
  7268  06DD  2EE5               	goto	i1l2580
  7269                           
  7270                           ;mcc_generated_files/tmr1.c: 123:     {;mcc_generated_files/tmr1.c: 125:         T1CONbi
      +                          ts.TMR1ON = 0;
  7271  06DE  1018               	bcf	24,0	;volatile
  7272                           
  7273                           ;mcc_generated_files/tmr1.c: 128:         TMR1H = (timerVal >> 8);
  7274  06DF  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  7275  06E0  0097               	movwf	23	;volatile
  7276                           
  7277                           ;mcc_generated_files/tmr1.c: 129:         TMR1L = timerVal;
  7278  06E1  0870               	movf	TMR1_WriteTimer@timerVal,w
  7279  06E2  0096               	movwf	22	;volatile
  7280                           
  7281                           ;mcc_generated_files/tmr1.c: 132:         T1CONbits.TMR1ON =1;
  7282  06E3  1418               	bsf	24,0	;volatile
  7283                           
  7284                           ;mcc_generated_files/tmr1.c: 133:     }
  7285  06E4  0008               	return
  7286  06E5                     i1l2580:	
  7287                           ;mcc_generated_files/tmr1.c: 134:     else
  7288                           
  7289                           
  7290                           ;mcc_generated_files/tmr1.c: 135:     {;mcc_generated_files/tmr1.c: 137:         TMR1H =
      +                           (timerVal >> 8);
  7291  06E5  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  7292  06E6  0097               	movwf	23	;volatile
  7293                           
  7294                           ;mcc_generated_files/tmr1.c: 138:         TMR1L = timerVal;
  7295  06E7  0870               	movf	TMR1_WriteTimer@timerVal,w
  7296  06E8  0096               	movwf	22	;volatile
  7297  06E9  0008               	return
  7298  06EA                     __end_of_TMR1_WriteTimer:	
  7299                           ;mcc_generated_files/tmr1.c: 139:     }
  7300                           
  7301                           
  7302                           	psect	text53
  7303  07C5                     __ptext53:	
  7304 ;; *************** function _PIN_MANAGER_IOC *****************
  7305 ;; Defined at:
  7306 ;;		line 115 in file "mcc_generated_files/pin_manager.c"
  7307 ;; Parameters:    Size  Location     Type
  7308 ;;		None
  7309 ;; Auto vars:     Size  Location     Type
  7310 ;;		None
  7311 ;; Return value:  Size  Location     Type
  7312 ;;                  1    wreg      void 
  7313 ;; Registers used:
  7314 ;;		wreg, status,2, status,0, pclath, cstack
  7315 ;; Tracked objects:
  7316 ;;		On entry : 0/0
  7317 ;;		On exit  : 0/0
  7318 ;;		Unchanged: 0/0
  7319 ;; Data sizes:     COMMON   BANK0   BANK1
  7320 ;;      Params:         0       0       0
  7321 ;;      Locals:         0       0       0
  7322 ;;      Temps:          0       0       0
  7323 ;;      Totals:         0       0       0
  7324 ;;Total ram usage:        0 bytes
  7325 ;; Hardware stack levels used:    1
  7326 ;; Hardware stack levels required when called:    2
  7327 ;; This function calls:
  7328 ;;		_IOCAF4_ISR
  7329 ;; This function is called by:
  7330 ;;		_INTERRUPT_InterruptManager
  7331 ;; This function uses a non-reentrant model
  7332 ;;
  7333                           
  7334                           
  7335                           ;psect for function _PIN_MANAGER_IOC
  7336  07C5                     _PIN_MANAGER_IOC:	
  7337                           
  7338                           ;mcc_generated_files/pin_manager.c: 118:     if(IOCAFbits.IOCAF4 == 1)
  7339                           
  7340                           ;incstack = 0
  7341                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
  7342  07C5  0027               	movlb	7	; select bank7
  7343  07C6  1E13               	btfss	19,4	;volatile
  7344  07C7  0008               	return
  7345                           
  7346                           ;mcc_generated_files/pin_manager.c: 119:     {;mcc_generated_files/pin_manager.c: 120:  
      +                                 IOCAF4_ISR();
  7347  07C8  2713               	fcall	_IOCAF4_ISR
  7348  07C9  0008               	return
  7349  07CA                     __end_of_PIN_MANAGER_IOC:	
  7350                           ;mcc_generated_files/pin_manager.c: 121:     }
  7351                           
  7352                           
  7353                           	psect	text54
  7354  0713                     __ptext54:	
  7355 ;; *************** function _IOCAF4_ISR *****************
  7356 ;; Defined at:
  7357 ;;		line 127 in file "mcc_generated_files/pin_manager.c"
  7358 ;; Parameters:    Size  Location     Type
  7359 ;;		None
  7360 ;; Auto vars:     Size  Location     Type
  7361 ;;		None
  7362 ;; Return value:  Size  Location     Type
  7363 ;;                  1    wreg      void 
  7364 ;; Registers used:
  7365 ;;		wreg, status,2, status,0, pclath, cstack
  7366 ;; Tracked objects:
  7367 ;;		On entry : 0/0
  7368 ;;		On exit  : 0/0
  7369 ;;		Unchanged: 0/0
  7370 ;; Data sizes:     COMMON   BANK0   BANK1
  7371 ;;      Params:         0       0       0
  7372 ;;      Locals:         0       0       0
  7373 ;;      Temps:          0       0       0
  7374 ;;      Totals:         0       0       0
  7375 ;;Total ram usage:        0 bytes
  7376 ;; Hardware stack levels used:    1
  7377 ;; Hardware stack levels required when called:    1
  7378 ;; This function calls:
  7379 ;;		Absolute function
  7380 ;;		_IOCAF4_DefaultInterruptHandler
  7381 ;;		__IOC_Ready
  7382 ;; This function is called by:
  7383 ;;		_PIN_MANAGER_IOC
  7384 ;; This function uses a non-reentrant model
  7385 ;;
  7386                           
  7387                           
  7388                           ;psect for function _IOCAF4_ISR
  7389  0713                     _IOCAF4_ISR:	
  7390                           
  7391                           ;mcc_generated_files/pin_manager.c: 132:     if(IOCAF4_InterruptHandler)
  7392                           
  7393                           ;incstack = 0
  7394                           ; Regs used in _IOCAF4_ISR: [wreg+status,2+status,0+pclath+cstack]
  7395  0713  0020               	movlb	0	; select bank0
  7396  0714  086E               	movf	_IOCAF4_InterruptHandler,w
  7397  0715  046F               	iorwf	_IOCAF4_InterruptHandler+1,w
  7398  0716  1903               	btfsc	3,2
  7399  0717  2F1D               	goto	i1l2588
  7400                           
  7401                           ;mcc_generated_files/pin_manager.c: 133:     {;mcc_generated_files/pin_manager.c: 134:  
      +                                 IOCAF4_InterruptHandler();
  7402  0718  086F               	movf	_IOCAF4_InterruptHandler+1,w
  7403  0719  008A               	movwf	10
  7404  071A  086E               	movf	_IOCAF4_InterruptHandler,w
  7405  071B  000A               	callw
  7406  071C  3187               	pagesel	$
  7407  071D                     i1l2588:	
  7408                           ;mcc_generated_files/pin_manager.c: 135:     }
  7409                           
  7410                           
  7411                           ;mcc_generated_files/pin_manager.c: 136:     IOCAFbits.IOCAF4 = 0;
  7412  071D  0027               	movlb	7	; select bank7
  7413  071E  1213               	bcf	19,4	;volatile
  7414  071F  0008               	return
  7415  0720                     __end_of_IOCAF4_ISR:	
  7416                           
  7417                           	psect	text55
  7418  07EE                     __ptext55:	
  7419 ;; *************** function _IOCAF4_DefaultInterruptHandler *****************
  7420 ;; Defined at:
  7421 ;;		line 149 in file "mcc_generated_files/pin_manager.c"
  7422 ;; Parameters:    Size  Location     Type
  7423 ;;		None
  7424 ;; Auto vars:     Size  Location     Type
  7425 ;;		None
  7426 ;; Return value:  Size  Location     Type
  7427 ;;                  1    wreg      void 
  7428 ;; Registers used:
  7429 ;;		None
  7430 ;; Tracked objects:
  7431 ;;		On entry : 0/0
  7432 ;;		On exit  : 0/0
  7433 ;;		Unchanged: 0/0
  7434 ;; Data sizes:     COMMON   BANK0   BANK1
  7435 ;;      Params:         0       0       0
  7436 ;;      Locals:         0       0       0
  7437 ;;      Temps:          0       0       0
  7438 ;;      Totals:         0       0       0
  7439 ;;Total ram usage:        0 bytes
  7440 ;; Hardware stack levels used:    1
  7441 ;; This function calls:
  7442 ;;		Nothing
  7443 ;; This function is called by:
  7444 ;;		_PIN_MANAGER_Initialize
  7445 ;;		_IOCAF4_ISR
  7446 ;; This function uses a non-reentrant model
  7447 ;;
  7448                           
  7449                           
  7450                           ;psect for function _IOCAF4_DefaultInterruptHandler
  7451  07EE                     _IOCAF4_DefaultInterruptHandler:	
  7452                           
  7453                           ;incstack = 0
  7454                           ; Regs used in _IOCAF4_DefaultInterruptHandler: []
  7455  07EE  0008               	return
  7456  07EF                     __end_of_IOCAF4_DefaultInterruptHandler:	
  7457                           
  7458                           	psect	text56
  7459  074B                     __ptext56:	
  7460 ;; *************** function __IOC_Ready *****************
  7461 ;; Defined at:
  7462 ;;		line 161 in file "logger.c"
  7463 ;; Parameters:    Size  Location     Type
  7464 ;;		None
  7465 ;; Auto vars:     Size  Location     Type
  7466 ;;		None
  7467 ;; Return value:  Size  Location     Type
  7468 ;;                  1    wreg      void 
  7469 ;; Registers used:
  7470 ;;		wreg, status,2
  7471 ;; Tracked objects:
  7472 ;;		On entry : 0/0
  7473 ;;		On exit  : 0/0
  7474 ;;		Unchanged: 0/0
  7475 ;; Data sizes:     COMMON   BANK0   BANK1
  7476 ;;      Params:         0       0       0
  7477 ;;      Locals:         0       0       0
  7478 ;;      Temps:          1       0       0
  7479 ;;      Totals:         1       0       0
  7480 ;;Total ram usage:        1 bytes
  7481 ;; Hardware stack levels used:    1
  7482 ;; This function calls:
  7483 ;;		Nothing
  7484 ;; This function is called by:
  7485 ;;		_logger_initialize
  7486 ;;		_IOCAF4_ISR
  7487 ;; This function uses a non-reentrant model
  7488 ;;
  7489                           
  7490                           
  7491                           ;psect for function __IOC_Ready
  7492  074B                     __IOC_Ready:	
  7493                           
  7494                           ;logger.c: 164:     IOC_value = PORTAbits.RA4;
  7495                           
  7496                           ;incstack = 0
  7497                           ; Regs used in __IOC_Ready: [wreg+status,2]
  7498  074B  3000               	movlw	0
  7499  074C  0020               	movlb	0	; select bank0
  7500  074D  1A0C               	btfsc	12,4	;volatile
  7501  074E  3001               	movlw	1
  7502  074F  00E2               	movwf	_IOC_value	;volatile
  7503                           
  7504                           ;logger.c: 165:     IOC_state = IOC_READY;
  7505  0750  3001               	movlw	1
  7506  0751  00F0               	movwf	??__IOC_Ready
  7507  0752  0870               	movf	??__IOC_Ready,w
  7508  0753  00E7               	movwf	_IOC_state	;volatile
  7509  0754  0008               	return
  7510  0755                     __end_of__IOC_Ready:	
  7511                           
  7512                           	psect	text57
  7513  0654                     __ptext57:	
  7514 ;; *************** function _EUSART_Transmit_ISR *****************
  7515 ;; Defined at:
  7516 ;;		line 172 in file "mcc_generated_files/eusart.c"
  7517 ;; Parameters:    Size  Location     Type
  7518 ;;		None
  7519 ;; Auto vars:     Size  Location     Type
  7520 ;;		None
  7521 ;; Return value:  Size  Location     Type
  7522 ;;                  1    wreg      void 
  7523 ;; Registers used:
  7524 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7525 ;; Tracked objects:
  7526 ;;		On entry : 0/0
  7527 ;;		On exit  : 0/0
  7528 ;;		Unchanged: 0/0
  7529 ;; Data sizes:     COMMON   BANK0   BANK1
  7530 ;;      Params:         0       0       0
  7531 ;;      Locals:         0       0       0
  7532 ;;      Temps:          1       0       0
  7533 ;;      Totals:         1       0       0
  7534 ;;Total ram usage:        1 bytes
  7535 ;; Hardware stack levels used:    1
  7536 ;; This function calls:
  7537 ;;		Nothing
  7538 ;; This function is called by:
  7539 ;;		_EUSART_Initialize
  7540 ;;		_INTERRUPT_InterruptManager
  7541 ;; This function uses a non-reentrant model
  7542 ;;
  7543                           
  7544                           
  7545                           ;psect for function _EUSART_Transmit_ISR
  7546  0654                     _EUSART_Transmit_ISR:	
  7547                           
  7548                           ;mcc_generated_files/eusart.c: 176:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
  7549                           
  7550                           ;incstack = 0
  7551                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  7552  0654  300A               	movlw	10
  7553  0655  0279               	subwf	_eusartTxBufferRemaining,w	;volatile
  7554  0656  1803               	skipnc
  7555  0657  2E6E               	goto	i1l165
  7556                           
  7557                           ;mcc_generated_files/eusart.c: 177:     {;mcc_generated_files/eusart.c: 178:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
  7558  0658  0020               	movlb	0	; select bank0
  7559  0659  086C               	movf	_eusartTxTail,w
  7560  065A  3E4C               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  7561  065B  0086               	movwf	6
  7562  065C  0187               	clrf	7
  7563  065D  0801               	movf	1,w
  7564  065E  0023               	movlb	3	; select bank3
  7565  065F  009A               	movwf	26	;volatile
  7566  0660  3001               	movlw	1
  7567  0661  00F0               	movwf	??_EUSART_Transmit_ISR
  7568  0662  0870               	movf	??_EUSART_Transmit_ISR,w
  7569  0663  0020               	movlb	0	; select bank0
  7570  0664  07EC               	addwf	_eusartTxTail,f	;volatile
  7571                           
  7572                           ;mcc_generated_files/eusart.c: 179:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
  7573  0665  300A               	movlw	10
  7574  0666  026C               	subwf	_eusartTxTail,w	;volatile
  7575  0667  1803               	btfsc	3,0
  7576                           
  7577                           ;mcc_generated_files/eusart.c: 180:         {;mcc_generated_files/eusart.c: 181:        
      +                               eusartTxTail = 0;
  7578  0668  01EC               	clrf	_eusartTxTail	;volatile
  7579                           
  7580                           ;mcc_generated_files/eusart.c: 183:         eusartTxBufferRemaining++;
  7581                           
  7582                           ;mcc_generated_files/eusart.c: 182:         }
  7583  0669  3001               	movlw	1
  7584  066A  00F0               	movwf	??_EUSART_Transmit_ISR
  7585  066B  0870               	movf	??_EUSART_Transmit_ISR,w
  7586  066C  07F9               	addwf	_eusartTxBufferRemaining,f	;volatile
  7587                           
  7588                           ;mcc_generated_files/eusart.c: 184:     }
  7589  066D  0008               	return
  7590  066E                     i1l165:	
  7591                           ;mcc_generated_files/eusart.c: 185:     else
  7592                           
  7593                           
  7594                           ;mcc_generated_files/eusart.c: 186:     {;mcc_generated_files/eusart.c: 187:         PIE
      +                          1bits.TXIE = 0;
  7595  066E  0021               	movlb	1	; select bank1
  7596  066F  1211               	bcf	17,4	;volatile
  7597  0670  0008               	return
  7598  0671                     __end_of_EUSART_Transmit_ISR:	
  7599                           ;mcc_generated_files/eusart.c: 188:     }
  7600                           
  7601                           
  7602                           	psect	text58
  7603  0671                     __ptext58:	
  7604 ;; *************** function _EUSART_Receive_ISR *****************
  7605 ;; Defined at:
  7606 ;;		line 191 in file "mcc_generated_files/eusart.c"
  7607 ;; Parameters:    Size  Location     Type
  7608 ;;		None
  7609 ;; Auto vars:     Size  Location     Type
  7610 ;;		None
  7611 ;; Return value:  Size  Location     Type
  7612 ;;                  1    wreg      void 
  7613 ;; Registers used:
  7614 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7615 ;; Tracked objects:
  7616 ;;		On entry : 0/0
  7617 ;;		On exit  : 0/0
  7618 ;;		Unchanged: 0/0
  7619 ;; Data sizes:     COMMON   BANK0   BANK1
  7620 ;;      Params:         0       0       0
  7621 ;;      Locals:         0       0       0
  7622 ;;      Temps:          1       0       0
  7623 ;;      Totals:         1       0       0
  7624 ;;Total ram usage:        1 bytes
  7625 ;; Hardware stack levels used:    1
  7626 ;; This function calls:
  7627 ;;		Nothing
  7628 ;; This function is called by:
  7629 ;;		_EUSART_Initialize
  7630 ;;		_INTERRUPT_InterruptManager
  7631 ;; This function uses a non-reentrant model
  7632 ;;
  7633                           
  7634                           
  7635                           ;psect for function _EUSART_Receive_ISR
  7636  0671                     _EUSART_Receive_ISR:	
  7637                           
  7638                           ;mcc_generated_files/eusart.c: 194:     if(1 == RCSTAbits.OERR)
  7639                           
  7640                           ;incstack = 0
  7641                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  7642  0671  0023               	movlb	3	; select bank3
  7643  0672  1C9D               	btfss	29,1	;volatile
  7644  0673  2E76               	goto	i1l2704
  7645                           
  7646                           ;mcc_generated_files/eusart.c: 195:     {;mcc_generated_files/eusart.c: 198:         RCS
      +                          TAbits.CREN = 0;
  7647  0674  121D               	bcf	29,4	;volatile
  7648                           
  7649                           ;mcc_generated_files/eusart.c: 199:         RCSTAbits.CREN = 1;
  7650  0675  161D               	bsf	29,4	;volatile
  7651  0676                     i1l2704:	
  7652                           ;mcc_generated_files/eusart.c: 200:     }
  7653                           
  7654                           
  7655                           ;mcc_generated_files/eusart.c: 203:     eusartRxBuffer[eusartRxHead++] = RCREG;
  7656  0676  0819               	movf	25,w	;volatile
  7657  0677  00F0               	movwf	??_EUSART_Receive_ISR
  7658  0678  0020               	movlb	0	; select bank0
  7659  0679  086B               	movf	_eusartRxHead,w
  7660  067A  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  7661  067B  0086               	movwf	6
  7662  067C  0187               	clrf	7
  7663  067D  0870               	movf	??_EUSART_Receive_ISR,w
  7664  067E  0081               	movwf	1
  7665  067F  3001               	movlw	1
  7666  0680  00F0               	movwf	??_EUSART_Receive_ISR
  7667  0681  0870               	movf	??_EUSART_Receive_ISR,w
  7668  0682  07EB               	addwf	_eusartRxHead,f	;volatile
  7669                           
  7670                           ;mcc_generated_files/eusart.c: 204:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
  7671  0683  300C               	movlw	12
  7672  0684  026B               	subwf	_eusartRxHead,w	;volatile
  7673  0685  1803               	btfsc	3,0
  7674                           
  7675                           ;mcc_generated_files/eusart.c: 205:     {;mcc_generated_files/eusart.c: 206:         eus
      +                          artRxHead = 0;
  7676  0686  01EB               	clrf	_eusartRxHead	;volatile
  7677                           
  7678                           ;mcc_generated_files/eusart.c: 208:     eusartRxCount++;
  7679                           
  7680                           ;mcc_generated_files/eusart.c: 207:     }
  7681  0687  3001               	movlw	1
  7682  0688  00F0               	movwf	??_EUSART_Receive_ISR
  7683  0689  0870               	movf	??_EUSART_Receive_ISR,w
  7684  068A  07E9               	addwf	_eusartRxCount,f	;volatile
  7685  068B  0008               	return
  7686  068C                     __end_of_EUSART_Receive_ISR:	
  7687                           
  7688                           	psect	text59
  7689  07E3                     __ptext59:	
  7690 ;; *************** function _ADC_ISR *****************
  7691 ;; Defined at:
  7692 ;;		line 140 in file "mcc_generated_files/adc.c"
  7693 ;; Parameters:    Size  Location     Type
  7694 ;;		None
  7695 ;; Auto vars:     Size  Location     Type
  7696 ;;		None
  7697 ;; Return value:  Size  Location     Type
  7698 ;;                  1    wreg      void 
  7699 ;; Registers used:
  7700 ;;		None
  7701 ;; Tracked objects:
  7702 ;;		On entry : 0/0
  7703 ;;		On exit  : 0/0
  7704 ;;		Unchanged: 0/0
  7705 ;; Data sizes:     COMMON   BANK0   BANK1
  7706 ;;      Params:         0       0       0
  7707 ;;      Locals:         0       0       0
  7708 ;;      Temps:          0       0       0
  7709 ;;      Totals:         0       0       0
  7710 ;;Total ram usage:        0 bytes
  7711 ;; Hardware stack levels used:    1
  7712 ;; This function calls:
  7713 ;;		Nothing
  7714 ;; This function is called by:
  7715 ;;		_INTERRUPT_InterruptManager
  7716 ;; This function uses a non-reentrant model
  7717 ;;
  7718                           
  7719                           
  7720                           ;psect for function _ADC_ISR
  7721  07E3                     _ADC_ISR:	
  7722                           
  7723                           ;mcc_generated_files/adc.c: 143:     PIR1bits.ADIF = 0;
  7724                           
  7725                           ;incstack = 0
  7726                           ; Regs used in _ADC_ISR: []
  7727  07E3  0020               	movlb	0	; select bank0
  7728  07E4  1311               	bcf	17,6	;volatile
  7729  07E5  0008               	return
  7730  07E6                     __end_of_ADC_ISR:	
  7731                           
  7732                           	psect	text60
  7733  07B5                     __ptext60:	
  7734 ;; *************** function _ADC_GetConversionResult *****************
  7735 ;; Defined at:
  7736 ;;		line 106 in file "mcc_generated_files/adc.c"
  7737 ;; Parameters:    Size  Location     Type
  7738 ;;		None
  7739 ;; Auto vars:     Size  Location     Type
  7740 ;;		None
  7741 ;; Return value:  Size  Location     Type
  7742 ;;                  2    0[COMMON] unsigned short 
  7743 ;; Registers used:
  7744 ;;		wreg
  7745 ;; Tracked objects:
  7746 ;;		On entry : 0/0
  7747 ;;		On exit  : 0/0
  7748 ;;		Unchanged: 0/0
  7749 ;; Data sizes:     COMMON   BANK0   BANK1
  7750 ;;      Params:         2       0       0
  7751 ;;      Locals:         0       0       0
  7752 ;;      Temps:          0       0       0
  7753 ;;      Totals:         2       0       0
  7754 ;;Total ram usage:        2 bytes
  7755 ;; Hardware stack levels used:    1
  7756 ;; This function calls:
  7757 ;;		Nothing
  7758 ;; This function is called by:
  7759 ;;		_INTERRUPT_InterruptManager
  7760 ;; This function uses a non-reentrant model
  7761 ;;
  7762                           
  7763                           
  7764                           ;psect for function _ADC_GetConversionResult
  7765  07B5                     _ADC_GetConversionResult:	
  7766                           
  7767                           ;mcc_generated_files/adc.c: 109:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
  7768                           
  7769                           ;incstack = 0
  7770                           ; Regs used in _ADC_GetConversionResult: [wreg]
  7771  07B5  0021               	movlb	1	; select bank1
  7772  07B6  081C               	movf	28,w	;volatile
  7773  07B7  00F1               	movwf	?_ADC_GetConversionResult+1
  7774  07B8  081B               	movf	27,w	;volatile
  7775  07B9  00F0               	movwf	?_ADC_GetConversionResult
  7776  07BA  0008               	return
  7777  07BB                     __end_of_ADC_GetConversionResult:	
  7778  007E                     btemp	set	126	;btemp
  7779  007E                     int$flags	set	126
  7780  007E                     wtemp0	set	126


Data Sizes:
    Strings     153
    Constant    0
    Data        0
    BSS         68
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      11
    BANK0            80     44      80
    BANK1            32      0      32

Pointer List with Targets:

    strncmp@_r	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_13(CODE[2]), STR_7(CODE[7]), STR_6(CODE[8]), STR_5(CODE[5]), 
		 -> STR_4(CODE[6]), STR_3(CODE[10]), STR_2(CODE[3]), STR_1(CODE[8]), 

    strncmp@r	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_13(CODE[2]), STR_7(CODE[7]), STR_6(CODE[8]), STR_5(CODE[5]), 
		 -> STR_4(CODE[6]), STR_3(CODE[10]), STR_2(CODE[3]), STR_1(CODE[8]), 

    strncmp@_l	PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), esp_read_data(BANK1[20]), 

    strncmp@l	PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), esp_read_data(BANK1[20]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_13(CODE[2]), STR_7(CODE[7]), STR_6(CODE[8]), STR_5(CODE[5]), 
		 -> STR_4(CODE[6]), STR_3(CODE[10]), STR_2(CODE[3]), STR_1(CODE[8]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_13(CODE[2]), STR_7(CODE[7]), STR_6(CODE[8]), STR_5(CODE[5]), 
		 -> STR_4(CODE[6]), STR_3(CODE[10]), STR_2(CODE[3]), STR_1(CODE[8]), 

    strchr@s	PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), esp_read_data(BANK1[20]), 

    sp__strchr	PTR unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), esp_read_data(BANK1[20]), 

    strstr@h	PTR const unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), esp_read_data(BANK1[20]), 

    strstr@n	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_13(CODE[2]), STR_7(CODE[7]), STR_6(CODE[8]), STR_5(CODE[5]), 
		 -> STR_4(CODE[6]), STR_3(CODE[10]), STR_2(CODE[3]), STR_1(CODE[8]), 

    ESP_Set_application_handler@applicationHandler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> ESP_default_application_handler(), process_message(), 

    ESP_write@pt	PTR unsigned char  size(2) Largest target is 6
		 -> STR_19(CODE[3]), STR_18(CODE[3]), read_analog@mess(BANK0[6]), 

    ESP_external_message_handler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> ESP_default_application_handler(), process_message(), Absolute function(), 

    ESP_process_rx_data@index	PTR unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), esp_read_data(BANK1[20]), 

    sp__strstr	PTR unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), esp_read_data(BANK1[20]), 

    ESP_process_message@aux	PTR unsigned char  size(1) Largest target is 20
		 -> NULL(NULL[0]), esp_read_data(BANK1[20]), 

    _sprintf@mess	PTR unsigned char  size(1) Largest target is 6
		 -> read_analog@mess(BANK0[6]), 

    write@pt	PTR unsigned char  size(2) Largest target is 6
		 -> STR_19(CODE[3]), STR_18(CODE[3]), read_analog@mess(BANK0[6]), ESP_write@res(BANK0[1]), 
		 -> ESP_write@aux(BANK0[1]), 

    _puts@pt	PTR unsigned char  size(2) Largest target is 34
		 -> STR_17(CODE[3]), STR_16(CODE[3]), STR_15(CODE[2]), STR_14(CODE[12]), 
		 -> STR_12(CODE[20]), STR_11(CODE[14]), STR_10(CODE[34]), STR_9(CODE[14]), 
		 -> STR_8(CODE[5]), 

    IOCAF4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> _IOC_Ready(), IOCAF4_DefaultInterruptHandler(), 

    IOCAF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> _IOC_Ready(), IOCAF4_DefaultInterruptHandler(), Absolute function(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> _TMR1_Ready(), TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> _TMR1_Ready(), Absolute function(), TMR1_DefaultInterruptHandler(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Transmit_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Receive_ISR(), 


Critical Paths under _main in COMMON

    __sprintf->___lwmod
    _ESP_write->_write
    _write->_EUSART_Write
    _logger_initialize->_ADC_SelectChannel
    _logger_initialize->_ESP_Set_application_handler
    _logger_initialize->_IOCAF4_SetInterruptHandler
    _logger_initialize->_TMR1_SetInterruptHandler
    _SYSTEM_Initialize->_EUSART_Initialize
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF4_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _process_message->_toggle_format
    _ESP_initialize->_ESP_Set_application_handler
    __puts->_EUSART_Write
    _strstr->_strlen
    _strstr->_strncmp

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_ADC_GetConversionResult
    _TMR1_ISR->_TMR1_WriteTimer
    _IOCAF4_ISR->__IOC_Ready

Critical Paths under _main in BANK0

    _main->_read_analog
    _read_analog->_ESP_write
    __sprintf->___lwdiv
    _process_ioc->_ESP_write
    _ESP_write->_ESP_wait_for
    _ESP_message_handler->_ESP_process_rx_data
    _ESP_message_handler->_ESP_read
    _ESP_process_rx_data->_strstr
    _ESP_config->_ESP_wait_for
    _ESP_wait_for->_ESP_read
    _ESP_read->_ESP_process_message
    _ESP_process_message->_strstr
    _strstr->_strncmp

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   32863
                                             43 BANK0      1     1      0
                         _ESP_config
                     _ESP_initialize
                _ESP_message_handler
                 _EUSART_is_rx_ready
                  _SYSTEM_Initialize
                  _logger_initialize
                        _process_ioc
                    _process_message
                        _read_analog
 ---------------------------------------------------------------------------------
 (1) _read_analog                                         16    16      0   12665
                                             27 BANK0     16    16      0
                       _ESP_wait_for
                          _ESP_write
                             ___lmul
                           __sprintf
 ---------------------------------------------------------------------------------
 (2) __sprintf                                             6     4      2    2036
                                              3 BANK0      6     4      2
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     615
                                              3 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     781
                                              3 COMMON     5     1      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     316
                                              3 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (1) _process_ioc                                          1     1      0    9940
                                             27 BANK0      1     1      0
                       _ESP_wait_for
                          _ESP_write
 ---------------------------------------------------------------------------------
 (2) _ESP_write                                            8     5      3    7162
                                             19 BANK0      8     5      3
                       _ESP_wait_for
                            ___awdiv
                            ___awmod
                              __puts
                              _write
 ---------------------------------------------------------------------------------
 (3) _write                                                6     3      3    1074
                                              5 COMMON     4     1      3
                                              0 BANK0      2     2      0
                       _EUSART_Write
                 _EUSART_is_tx_ready
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     613
                                              3 COMMON     5     1      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     625
                                              3 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _logger_initialize                                    1     1      0     544
                                              5 COMMON     1     1      0
                  _ADC_SelectChannel
        _ESP_Set_application_handler
         _IOCAF4_SetInterruptHandler
           _TMR1_SetInterruptHandler
                     _TMR1_StopTimer
 ---------------------------------------------------------------------------------
 (2) _ADC_SelectChannel                                    2     2      0      22
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     544
                     _ADC_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     174
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR1_SetInterruptHandler                             2     0      2     174
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     174
         _IOCAF4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _IOCAF4_SetInterruptHandler                           2     0      2     174
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     196
                                              5 COMMON     1     1      0
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2      98
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ESP_message_handler                                  6     6      0    5060
                                             16 BANK0      3     3      0
                _ESP_process_rx_data
                           _ESP_read
 ---------------------------------------------------------------------------------
 (2) _ESP_process_rx_data                                  4     4      0    2499
                                             12 BANK0      4     4      0
                   Absolute function *
    _ESP_default_application_handler *
                    _process_message *
                             _strstr
 ---------------------------------------------------------------------------------
 (1) _process_message                                      3     2      1     150
                                              4 COMMON     3     2      1
                _ADC_StartConversion
                    _TMR1_StartTimer
                     _TMR1_StopTimer
                      _toggle_format
 ---------------------------------------------------------------------------------
 (2) _toggle_format                                        1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ESP_default_application_handler                      1     0      1      53
                                              4 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ESP_initialize                                       0     0      0     174
        _ESP_Set_application_handler
 ---------------------------------------------------------------------------------
 (2) _ESP_Set_application_handler                          2     0      2     174
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ESP_config                                           2     2      0    3786
                                             19 BANK0      2     2      0
                       _ESP_wait_for
                        _EUSART_Read
                 _EUSART_is_rx_ready
                              __puts
 ---------------------------------------------------------------------------------
 (3) __puts                                                6     4      2     984
                                              5 COMMON     3     1      2
                                              0 BANK0      3     3      0
                       _EUSART_Write
                 _EUSART_is_tx_ready
 ---------------------------------------------------------------------------------
 (4) _EUSART_is_tx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      44
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ESP_wait_for                                         3     3      0    2778
                                             16 BANK0      3     3      0
                           _ESP_read
 ---------------------------------------------------------------------------------
 (4) _ESP_read                                             2     2      0    2527
                                             14 BANK0      2     2      0
                _ESP_process_message
                        _EUSART_Read
 ---------------------------------------------------------------------------------
 (5) _EUSART_Read                                          2     2      0      24
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _ESP_process_message                                  2     2      0    2466
                                             12 BANK0      2     2      0
                             _strstr
 ---------------------------------------------------------------------------------
 (6) _strstr                                               8     6      2    2228
                                              4 BANK0      8     6      2
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (7) _strncmp                                             10     6      4     541
                                              3 COMMON     6     2      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (7) _strlen                                               6     4      2     166
                                              3 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (7) _strchr                                               3     1      2     197
                                              3 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           1     1      0     240
                                              2 COMMON     1     1      0
                   Absolute function *
            _ADC_GetConversionResult
                            _ADC_ISR
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                    _PIN_MANAGER_IOC
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR1_ISR                                             0     0      0     240
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                    _TMR1_WriteTimer
                        __TMR1_Ready *
 ---------------------------------------------------------------------------------
 (10) __TMR1_Ready                                         0     0      0       0
              i1_ADC_StartConversion
 ---------------------------------------------------------------------------------
 (11) i1_ADC_StartConversion                               0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _TMR1_WriteTimer                                     2     0      2     240
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (10) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _PIN_MANAGER_IOC                                      0     0      0       0
                         _IOCAF4_ISR
 ---------------------------------------------------------------------------------
 (10) _IOCAF4_ISR                                          0     0      0       0
                   Absolute function *
     _IOCAF4_DefaultInterruptHandler *
                         __IOC_Ready *
 ---------------------------------------------------------------------------------
 (11) __IOC_Ready                                          1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _IOCAF4_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _ADC_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _ADC_GetConversionResult                              2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ESP_config
     _ESP_wait_for
       _ESP_read
         _ESP_process_message
           _strstr
             _strchr
             _strlen
             _strncmp
         _EUSART_Read
     _EUSART_Read
     _EUSART_is_rx_ready
     __puts
       _EUSART_Write
       _EUSART_is_tx_ready
   _ESP_initialize
     _ESP_Set_application_handler
   _ESP_message_handler
     _ESP_process_rx_data
       Absolute function(Fake) *
       _ESP_default_application_handler *
       _process_message *
         _ADC_StartConversion
         _TMR1_StartTimer
         _TMR1_StopTimer
         _toggle_format
       _strstr *
         _strchr
         _strlen
         _strncmp
     _ESP_read
       _ESP_process_message
         _strstr
           _strchr
           _strlen
           _strncmp
       _EUSART_Read
   _EUSART_is_rx_ready
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCAF4_SetInterruptHandler
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _WDT_Initialize
   _logger_initialize
     _ADC_SelectChannel
     _ESP_Set_application_handler
     _IOCAF4_SetInterruptHandler
     _TMR1_SetInterruptHandler
     _TMR1_StopTimer
   _process_ioc
     _ESP_wait_for
       _ESP_read
         _ESP_process_message
           _strstr
             _strchr
             _strlen
             _strncmp
         _EUSART_Read
     _ESP_write
       _ESP_wait_for
         _ESP_read
           _ESP_process_message
             _strstr
               _strchr
               _strlen
               _strncmp
           _EUSART_Read
       ___awdiv
       ___awmod
       __puts
         _EUSART_Write
         _EUSART_is_tx_ready
       _write
         _EUSART_Write
         _EUSART_is_tx_ready
   _process_message
     _ADC_StartConversion
     _TMR1_StartTimer
     _TMR1_StopTimer
     _toggle_format
   _read_analog
     _ESP_wait_for
       _ESP_read
         _ESP_process_message
           _strstr
             _strchr
             _strlen
             _strncmp
         _EUSART_Read
     _ESP_write
       _ESP_wait_for
         _ESP_read
           _ESP_process_message
             _strstr
               _strchr
               _strlen
               _strncmp
           _EUSART_Read
       ___awdiv
       ___awmod
       __puts
         _EUSART_Write
         _EUSART_is_tx_ready
       _write
         _EUSART_Write
         _EUSART_is_tx_ready
     ___lmul
     __sprintf
       ___lwdiv
       ___lwmod

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _ADC_GetConversionResult *
   _ADC_ISR *
   _EUSART_Receive_ISR *
   _EUSART_Transmit_ISR *
   _PIN_MANAGER_IOC *
     _IOCAF4_ISR
       Absolute function(Fake) *
       _IOCAF4_DefaultInterruptHandler *
       __IOC_Ready *
   _TMR1_ISR *
     Absolute function(Fake) *
     _TMR1_DefaultInterruptHandler *
     _TMR1_WriteTimer *
     __TMR1_Ready *
       i1_ADC_StartConversion

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      7B       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2C      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0      20       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      7B       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Mon Aug  6 21:44:30 2018

                ?_EUSART_SetRxInterruptHandler 0073                                    __CFG_CP$OFF 0000  
                                 ___awdiv@sign 0021                                            l211 0747  
                                          l159 0568                                            l464 04CC  
                                          l560 0382                                            l563 0360  
                                          l484 04A1                                            l566 0363  
                                 __CFG_CPD$OFF 0000                                _timer1ReloadVal 005A  
                              __end_of_ADC_ISR 07E6                                   ___awmod@sign 0021  
                                 __CFG_BORV$LO 0000                                            wreg 0009  
                                 __CFG_IESO$ON 0000                                   ?_EUSART_Read 0070  
                                 __CFG_LVP$OFF 0000                                 ?_toggle_format 0070  
                                         l1132 06B7                                           l2050 0629  
                                         l2114 05FC                                           l3010 0436  
                                         l2202 055E                                           l3020 0444  
                                         l3100 0292                                           l3102 029E  
                                         l2048 061D                                           l2216 057B  
                                         l3032 04B2                                           l3112 02B9  
                                         l3042 063C                                           l3116 02C1  
                                         l3108 02B0                                           l3140 02DE  
                                         l3132 02D8                                           l2086 06C0  
                                         l3038 04A3                                           l2254 0735  
                                         l2270 0351                                           l3142 02EA  
                                         l3150 02FF                                           l3064 04DF  
                                         l3128 02D1                                           l3048 0638  
                                         l3232 012C                                           l3074 04EC  
                                         l2266 034D                                           l3090 028A  
                                         l3154 0307                                           l3146 02F6  
                                         l3314 05EE                                           l3250 0402  
                                         l3170 03CF                                           l2268 034F  
                                         l2284 0366                                           l3084 027F  
                                         l3180 03EA                                           l3332 058E  
                                         l3324 0584                                           l3262 0390  
                                         l2278 035C                                           l3270 0482  
                                         l3246 03F7                                           l2462 046C  
                                         l3264 0396                                           l3272 0489  
                                         l3176 03E1                                           l3168 03C3  
                                         l2456 0454                                           l3328 0589  
                                         l2458 0460                                           l2466 0475  
                                         l3338 0598                                           l3268 0480  
                                         l3276 048B                                           l2910 023F  
                                         l3382 0493                                           l2904 0233  
                                         l3384 036E                                           l3296 01D9  
                                         l2932 032E                                           l2918 025D  
                                         l2926 031D                                           l2934 0341  
                                         l2950 0160                                           l2938 034A  
                                         l2990 01AB                                           l2982 019C  
                                         l2974 018D                                           l2966 017E  
                                         l2958 016F                                           l2998 01BA  
                                         STR_1 0767                                           STR_2 076C  
                                         STR_3 0737                                           STR_4 0785  
                                         STR_5 07C0                                           STR_6 076F  
                                         STR_7 0777                                           STR_8 07BB  
                                         STR_9 06EA                                           _LATA 010C  
                                         _LATC 010E                                           u2415 0295  
                                         u1705 0457                                           u2435 029F  
                                         u2515 02E1                                           u2445 02A9  
                                         u2605 03D0                                           u1725 0466  
                                         u2455 02B1                                           u2535 02F0  
                                         u2615 03DA                                           u1735 046D  
                                         u2545 02F7                                           u2625 03E2  
                                         u2715 01FB                                           u2665 0403  
                                         u2585 03C6                                           u2675 040A  
                                         u2777 0389                                           i1l81 0033  
                                         i1l74 000B                                           i1l77 0015  
                                         i1l86 003E                                           i1l79 0027  
                                         _PLLR 04D6                                           _WPUA 020C  
                                         _WPUC 020E                                   __CFG_WRT$OFF 0000  
                                __CFG_FCMEN$ON 0000                                           _main 057E  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                                         btemp 007E                                    ?_ESP_config 0070  
                                __CFG_BOREN$ON 0000                                     __IOC_Ready 074B  
                                         start 0040                     ??_TMR1_SetInterruptHandler 0075  
                                __CFG_MCLRE$ON 0000                            __end_of__TMR1_Ready 07B5  
                           _ESP_wait_exception 0068                                  __CFG_PLLEN$ON 0000  
                                ?_EUSART_Write 0070                 __size_of_OSCILLATOR_Initialize 000A  
                          __size_of_IOCAF4_ISR 000D                  __end_of_OSCILLATOR_Initialize 074B  
                           __size_of_ESP_write 0078                                          ?_main 0070  
                              __end_of___awdiv 02C6                                          STR_10 053B  
                                        STR_11 06F8                                          STR_12 06A2  
                                        STR_13 07E8                                          STR_14 0720  
                                        STR_15 07E6                                          STR_16 055A  
                                        STR_17 055A                                  __CFG_WDTE$OFF 0000  
                                        STR_18 07CE                                          STR_19 07D1  
                              __end_of___awmod 030C                                _TMR1_StartTimer 07D7  
                              ___awdiv@divisor 0073                                          _T1CON 0018  
                              __end_of___lwdiv 03EF                                          i1l165 066E  
                              __end_of___lwmod 047A                                ___awdiv@counter 0020  
                 ?_ESP_Set_application_handler 0073                                          _RCREG 0199  
                                        _RCSTA 019D                               __end_of_ESP_read 044E  
                                        _TMR1H 0017                                          _TMR1L 0016  
                                        _TRISA 008C                                          _TRISC 008E  
                       ?i1_ADC_StartConversion 0070                                          _TXREG 019A  
                                        _TXSTA 019E               __size_of_ADC_GetConversionResult 0006  
                                 ?_read_analog 0070                            ___lmul@multiplicand 0024  
                             __end_of_TMR1_ISR 06DB                        __end_of_PIN_MANAGER_IOC 07CA  
                                        __puts 04A2                                 _WDT_Initialize 07CA  
                                        _write 0637                        __end_of_TMR1_Initialize 06A2  
                                        pclath 000A                                          status 0003  
                                        wtemp0 007E                     __size_of_logger_initialize 001F  
                              __end_of_strncmp 0274                                _TMR1_WriteTimer 06DB  
                              __initialization 0041                                   __end_of_main 059E  
                               ??_EUSART_Write 0073                                      ??_ADC_ISR 0070  
                  ?_INTERRUPT_InterruptManager 0070                 ??_EUSART_SetRxInterruptHandler 0075  
                                       ??_main 004B                            __size_of_ESP_config 0037  
                      _IOCAF4_InterruptHandler 006E                         __end_of_WDT_Initialize 07CE  
                ??_ESP_Set_application_handler 0075                                ??_toggle_format 0073  
                                       ?__puts 0075                                         _ADCON0 009D  
                                       _ADCON1 009E                                         _ADRESH 009C  
                                       _ADRESL 009B                               ___awdiv@dividend 0075  
                                       _APFCON 011D                                         _ANSELA 018C  
                                       _ANSELC 018E                     __end_of_EUSART_is_rx_ready 07E0  
                                       _BORCON 0116                                         _T1GCON 0019  
                                       ?_write 0075                        TMR1_WriteTimer@timerVal 0070  
                                       i1l2704 0676                                         i1l2580 06E5  
                                       i1l2588 071D                     __end_of_EUSART_is_tx_ready 07EC  
                                       _OSCCON 0099                                         _SPBRGH 019C  
                                       _SPBRGL 019B                                    __TMR1_Ready 07AF  
                                       _WDTCON 0097                              __end_of_ESP_write 0150  
                                  ?__IOC_Ready 0070                                 __CFG_PWRTE$OFF 0000  
                             ??_ESP_initialize 0075           __end_of_TMR1_DefaultInterruptHandler 07EE  
        __size_of_TMR1_DefaultInterruptHandler 0001                                  _esp_read_data 00AC  
                 _TMR1_DefaultInterruptHandler 07ED                               __end_of__sprintf 00D8  
                                       ___lmul 03EF                        __end_of_TMR1_StartTimer 07DA  
                                    ??___awdiv 0077                                 __CFG_STVREN$ON 0000  
                                    ??___awmod 0077                                      ??___lwdiv 0077  
                                    ??___lwmod 0077                            _EUSART_Transmit_ISR 0654  
                             ___awdiv@quotient 0022                                ___awmod@divisor 0073  
                              ___awmod@counter 0020                                         _strchr 06B6  
                                       _strlen 0619                                         _strstr 030C  
                              ?_WDT_Initialize 0070                       ESP_process_rx_data@index 002E  
   IOCAF4_SetInterruptHandler@InterruptHandler 0073       TMR1_SetInterruptHandler@InterruptHandler 0073  
                             ?_PIN_MANAGER_IOC 0070                                         write@i 0078  
                      __end_of_TMR1_WriteTimer 06EA                                      ??_strncmp 0077  
                                 ??_IOCAF4_ISR 0071                           ?_EUSART_Transmit_ISR 0070  
                                 ?_process_ioc 0070                               ?_TMR1_Initialize 0070  
                         __size_of_EUSART_Read 001E                              _SYSTEM_Initialize 077E  
                      __end_of__initialization 004F                                  ?_ESP_wait_for 0070  
                           read_analog@adc_val 0049                             ?_SYSTEM_Initialize 0070  
         __size_of_ESP_Set_application_handler 0006           __end_of_EUSART_SetTxInterruptHandler 07A3  
        __size_of_EUSART_SetTxInterruptHandler 0006                   _EUSART_SetTxInterruptHandler 079D  
                                    ?_ESP_read 0070                   __size_of_ADC_StartConversion 0003  
                                  ESP_read@ret 002F                                 __pcstackCOMMON 0070  
                          ??_SYSTEM_Initialize 0076                                      ?_TMR1_ISR 0070  
                ?_TMR1_DefaultInterruptHandler 0070                                  __end_of__puts 04CA  
       __end_of_IOCAF4_DefaultInterruptHandler 07EF        __size_of_IOCAF4_DefaultInterruptHandler 0001  
               _IOCAF4_DefaultInterruptHandler 07EE                                  __end_of_write 0654  
                           __end_of_IOCAF4_ISR 0720                        _ADC_GetConversionResult 07B5  
                               _OPTION_REGbits 0095                            __size_of__IOC_Ready 000A  
                     __size_of_process_message 0037                                    ESP_write@pt 0033  
                                      ??__puts 0020                           __size_of_read_analog 0060  
                    __end_of_SYSTEM_Initialize 0785                          ??_EUSART_Transmit_ISR 0070  
                                      ??_write 0020                                     __pbssBANK0 004C  
                                   __pbssBANK1 00A0                                 ??_ESP_wait_for 0030  
                         __end_of_EUSART_Write 057E                                   ??_ESP_config 0033  
                  __size_of_EUSART_Receive_ISR 001B                                     ??_ESP_read 002E  
                                   __pmaintext 057E                  ?_EUSART_SetTxInterruptHandler 0073  
             _EUSART_TxDefaultInterruptHandler 0060                                        ?___lmul 0020  
                 __size_of_ESP_process_message 006C                   __size_of_ESP_message_handler 0028  
                             ?_TMR1_StartTimer 0070                                     ??_TMR1_ISR 0072  
                                   __pintentry 0004                   __size_of_ESP_process_rx_data 0025  
                                      _ADC_ISR 07E3                                        _BAUDCON 019F  
                               ___lmul@product 0073                        ??i1_ADC_StartConversion 0070  
                      __size_of_ADC_Initialize 0009                                        ?_strchr 0073  
                                      ?_strlen 0073                        __size_of_TMR1_StopTimer 0003  
                                      ?_strstr 0024                                  _eusartRxCount 0069  
                           __end_of_ESP_config 03BA                                        _OSCTUNE 0098  
                                    ?__sprintf 0023                               ?_TMR1_WriteTimer 0070  
                                    _ADC_value 005C                                      _ADC_state 006D  
                                      ___awdiv 0274                                __size_of___lmul 0030  
                                      ___awmod 02C6                                        ___lwdiv 03BA  
                                      ___lwmod 044E                      ??_ADC_GetConversionResult 0072  
                                      __ptext1 01BC                                        __ptext2 0052  
                                      __ptext3 044E                                        __ptext4 03BA  
                                      __ptext5 03EF                                        __ptext6 05DD  
                                      __ptext7 00D8                                        __ptext8 0637  
                                      __ptext9 02C6                 ??_TMR1_DefaultInterruptHandler 0070  
                              __size_of_strchr 0013                                __size_of_strlen 001E  
                                    _T1CONbits 0018                         ESP_process_message@aux 002D  
                              __size_of_strstr 0040                          _OSCILLATOR_Initialize 0741  
                             ___awmod@dividend 0075              __size_of_TMR1_SetInterruptHandler 0006  
                     ??_PIN_MANAGER_Initialize 0075                      ?_TMR1_SetInterruptHandler 0073  
                                    _IOCAFbits 0393                                      _IOCANbits 0392  
                                    _IOCAPbits 0391                     __size_of_SYSTEM_Initialize 0007  
                                      clrloop0 078C                                     ??__sprintf 0025  
                                      _strncmp 021C                         ESP_message_handler@ret 0032  
                         end_of_initialization 004F                                   ?__TMR1_Ready 0070  
                            ??_process_message 0075                           __size_of_process_ioc 001E  
                                 ??__IOC_Ready 0070                              _EUSART_Initialize 04F1  
                                    _IOC_value 0062                                      _IOC_state 0067  
                           ?_EUSART_Initialize 0070                                      _ESP_write 00D8  
                                    _RCSTAbits 019D                             _EUSART_is_rx_ready 07DD  
                           _EUSART_is_tx_ready 07EA                                   __sprintf@aux 0026  
                                 __sprintf@val 0023                                        strchr@c 0073  
                                      strchr@s 0075                                        strlen@a 0077  
                                      strlen@s 0073                            ??_EUSART_Initialize 0075  
                                      write@pt 0075                               ??_WDT_Initialize 0073  
               ??_EUSART_SetTxInterruptHandler 0075                           __end_of_ESP_wait_for 04F1  
                                      strstr@h 002B                                        strstr@n 0024  
                                    _PORTAbits 000C                            ?_EUSART_is_rx_ready 0070  
                          ?_EUSART_is_tx_ready 0070                               __CFG_FOSC$INTOSC 0000  
                           __end_of__IOC_Ready 0755                          __size_of_EUSART_Write 0021  
                          _ADC_StartConversion 07DA                   ??_IOCAF4_SetInterruptHandler 0075  
                        __end_of_toggle_format 0737                      __end_of_EUSART_Initialize 0516  
                         ??_EUSART_is_rx_ready 0073                           ??_EUSART_is_tx_ready 0073  
                                    _TXSTAbits 019E                                     ?_ESP_write 0033  
                         ?_ADC_StartConversion 0070                              __size_of_ESP_read 002F  
                 _ESP_external_message_handler 0056                                 __end_of___lmul 041F  
ESP_Set_application_handler@applicationHandler 0073                                   _EUSART_Write 055D  
                            __size_of_TMR1_ISR 0012                                 _ADC_Initialize 0755  
          __size_of_IOCAF4_SetInterruptHandler 0006                                 _TMR1_StopTimer 07D4  
                       ?_OSCILLATOR_Initialize 0070            __end_of_ESP_Set_application_handler 07AF  
                  _ESP_Set_application_handler 07A9                         ESP_process_rx_data@aux 002F  
                               __end_of_strchr 06C9                                 __end_of_strlen 0637  
                               __end_of_strstr 034C                            start_initialization 0041  
              __size_of_PIN_MANAGER_Initialize 0020                                  ??_EUSART_Read 0073  
                          _ESP_process_message 0150                            _ESP_message_handler 047A  
 EUSART_SetRxInterruptHandler@interruptHandler 0073   EUSART_SetTxInterruptHandler@interruptHandler 0073  
                          _ESP_process_rx_data 0516                       __size_of_PIN_MANAGER_IOC 0005  
                              ESP_wait_for@ret 0032                          ??_ADC_StartConversion 0073  
                     __size_of_TMR1_Initialize 0016                           ?_ESP_process_message 0070  
                                     ??___lmul 0073                           ?_ESP_message_handler 0070  
                                 ESP_write@aux 003A                                   ESP_write@res 0039  
                       __end_of_ADC_Initialize 075E                         __end_of_TMR1_StopTimer 07D7  
                         ?_ESP_process_rx_data 0070                                       ?_ADC_ISR 0070  
                                     ??_strchr 0075                                       ??_strlen 0075  
                      __size_of_ESP_initialize 0009                                       ??_strstr 0026  
               __size_ofi1_ADC_StartConversion 0003                  __end_ofi1_ADC_StartConversion 07E3  
                  __end_of_EUSART_Transmit_ISR 0671                                  ??_read_analog 003B  
                                  __pbssCOMMON 0079                                      ___latbits 0000  
      __end_of_ESP_default_application_handler 07ED       __size_of_ESP_default_application_handler 0001  
            ??_ESP_default_application_handler 0075               ?_ESP_default_application_handler 0074  
              _ESP_default_application_handler 07EC                                  __pcstackBANK0 0020  
                   __end_of_EUSART_Receive_ISR 068C                     __size_of_EUSART_Initialize 0025  
                            __size_of__sprintf 0086               _EUSART_RxDefaultInterruptHandler 005E  
                          __end_of_EUSART_Read 0619                                read_analog@aux1 003F  
                                    __pnvBANK0 006E                                read_analog@mess 0043  
                         __size_of__TMR1_Ready 0006                               ___lwdiv@dividend 0075  
                       _PIN_MANAGER_Initialize 059E                                    ??_ESP_write 0036  
                        ??_ESP_process_message 002C                           EUSART_Read@readValue 0074  
                        ??_ESP_message_handler 0030                          __size_of_ESP_wait_for 0027  
                            _ADC_SelectChannel 0706               __end_of_TMR1_SetInterruptHandler 0797  
                                     ?___awdiv 0073                                       ?___awmod 0073  
                        ??_ESP_process_rx_data 002C                                       ?___lwdiv 0073  
                                     ?___lwmod 0073                                ?_ADC_Initialize 0070  
                                 _eusartRxHead 006B                                ?_TMR1_StopTimer 0070  
                           ?_ADC_SelectChannel 0070                                   _eusartTxHead 007A  
                                 _eusartRxTail 006A                                   _eusartTxTail 006C  
                 ??_INTERRUPT_InterruptManager 0072                        _eusartTxBufferRemaining 0079  
                     __size_of_TMR1_StartTimer 0003                            ??_ADC_SelectChannel 0073  
                              _process_message 034C             __end_of_IOCAF4_SetInterruptHandler 079D  
                   _IOCAF4_SetInterruptHandler 0797                               ___lwdiv@quotient 0021  
                               __size_of__puts 0028                                       ?_strncmp 0073  
                               __size_of_write 001D                            __end_of_read_analog 021C  
                               _eusartRxBuffer 00A0                                 _eusartTxBuffer 004C  
                                 _ESP_wait_for 04CA                                       _LATAbits 010C  
                                    clear_ram0 078B                                    __puts@index 0077  
                                     _PIE1bits 0091                      __end_of_ADC_SelectChannel 0713  
                     __size_of_TMR1_WriteTimer 000F            __size_of_INTERRUPT_InterruptManager 003C  
                                     _ESP_read 041F                                    write@lenght 0077  
                                     _PIR1bits 0011                                       _TMR1_ISR 06C9  
                            ??_PIN_MANAGER_IOC 0071                              ??_TMR1_Initialize 0075  
                             __size_of_ADC_ISR 0003                                     _ADCON0bits 009D  
                     ADC_SelectChannel@channel 0074                                    _EUSART_Read 05FB  
                            ___lmul@multiplier 0020                                  ??_process_ioc 003B  
                                  _esp_channel 0065                       ?_ADC_GetConversionResult 0070  
                      ??_OSCILLATOR_Initialize 0073                               __size_of___awdiv 0052  
                             __size_of___awmod 0046                               __size_of___lwdiv 0035  
                      __end_of_process_message 0383                               __size_of___lwmod 002C  
                     _TMR1_SetInterruptHandler 0791                                 _ESP_initialize 075E  
                        _TMR1_InterruptHandler 0058                                    _read_analog 01BC  
                          _esp_read_data_index 0066                                ___lwdiv@divisor 0073  
                              ___lwdiv@counter 0020                                       __ptext10 0274  
                                     __ptext11 05BE                                       __ptext20 04F1  
                                     __ptext12 0706                                       __ptext21 079D  
                                     __ptext13 077E                                     _T1GCONbits 0019  
                                     __ptext30 07D7                                       __ptext22 07A3  
                                     __ptext14 07CA                                       __ptext31 07DA  
                                     __ptext23 0755                                       __ptext15 068C  
                                     __ptext40 041F                                       __ptext32 075E  
                                     __ptext24 047A                                       __ptext16 0791  
                                     __ptext41 05FB                                       __ptext33 07A9  
                                     __ptext25 0516                                       __ptext17 059E  
                                     __ptext50 07AF                                       __ptext42 0150  
                                     __ptext34 0383                                       __ptext26 07EC  
                                     __ptext18 0797                                       __ptext51 07E0  
                                     __ptext43 030C                                       __ptext35 04A2  
                                     __ptext27 034C                                       __ptext19 0741  
                                     __ptext60 07B5                                       __ptext52 06DB  
                                     __ptext44 021C                                       __ptext36 07EA  
                                     __ptext28 072C                                       __ptext53 07C5  
                                     __ptext45 0619                                       __ptext37 055D  
                                     __ptext29 07D4                                       __ptext54 0713  
                                     __ptext46 06B6                                       __ptext38 07DD  
                                     __ptext55 07EE                                       __ptext39 04CA  
                                     __ptext56 074B                                       __ptext48 06C9  
                                     __ptext57 0654                                       __ptext49 07ED  
                                     __ptext58 0671                                       __ptext59 07E3  
                                     __puts@pt 0075                         process_message@message 0074  
                                     __sprintf 0052                              ??_TMR1_StartTimer 0073  
                                   _IOCAF4_ISR 0713                               __size_of_strncmp 0058  
                               _message_format 0064                    __size_of_EUSART_is_rx_ready 0003  
                                __size_of_main 0020                                ESP_write@length 0035  
                  __size_of_EUSART_is_tx_ready 0002                     __size_of_ADC_SelectChannel 000D  
                          __end_of_process_ioc 05FB                                       int$flags 007E  
                       __size_of_toggle_format 000B                         __end_of_ESP_initialize 0767  
           __end_of_INTERRUPT_InterruptManager 0040                     _INTERRUPT_InterruptManager 0004  
                            ??_TMR1_WriteTimer 0072                                     _INTCONbits 000B  
                               __pstringtext10 0785                                 __pstringtext11 07BB  
                               __pstringtext12 07C0                                 __pstringtext13 07CE  
                               __pstringtext14 07D1                                 __pstringtext15 07E6  
                               __pstringtext16 07E8                                 __pstringtext17 0000  
          ESP_default_application_handler@data 0074                        __size_of_WDT_Initialize 0004  
                                     intlevel1 0000                    __end_of_ADC_StartConversion 07DD  
                             ___lwmod@dividend 0075                        ?_PIN_MANAGER_Initialize 0070  
              __end_of_ADC_GetConversionResult 07BB                              __CFG_CLKOUTEN$OFF 0000  
                                   _ESP_config 0383                                      strncmp@_l 0020  
                                    strncmp@_r 0073                               ??_ADC_Initialize 0073  
         __end_of_EUSART_SetRxInterruptHandler 07A9          __size_of_EUSART_SetRxInterruptHandler 0006  
                 _EUSART_SetRxInterruptHandler 07A3                              _logger_initialize 05BE  
                             ??_TMR1_StopTimer 0073                             ?_logger_initialize 0070  
                           _EUSART_Receive_ISR 0671                                ?_ESP_initialize 0070  
                             ?_process_message 0074                                  __sprintf@mess 0028  
                                __pstringtext1 053B                                  __pstringtext2 06A2  
                                __pstringtext3 06EA                                  __pstringtext4 06F8  
                                __pstringtext5 0720                                  __pstringtext6 0737  
                                __pstringtext7 0767                                  __pstringtext8 076F  
                                __pstringtext9 0777                            ??_logger_initialize 0075  
                          ?_EUSART_Receive_ISR 0070                                ___lwmod@divisor 0073  
                              ___lwmod@counter 0078                                       strncmp@l 0023  
                                     strncmp@n 0075                                       strncmp@r 0021  
                         ESP_wait_for@esp_mess 0031                          i1_ADC_StartConversion 07E0  
                  ?_IOCAF4_SetInterruptHandler 0073                                       strstr@nl 0029  
                                _toggle_format 072C                                    ?_IOCAF4_ISR 0070  
                           EUSART_Write@txData 0074                   __size_of_EUSART_Transmit_ISR 001D  
                                   _TMR1_state 0063                 __end_of_PIN_MANAGER_Initialize 05BE  
                                  _process_ioc 05DD                                  ??__TMR1_Ready 0070  
             ??_IOCAF4_DefaultInterruptHandler 0070                ?_IOCAF4_DefaultInterruptHandler 0070  
                  __end_of_ESP_process_message 01BC                    __end_of_ESP_message_handler 04A2  
                              _PIN_MANAGER_IOC 07C5                      __end_of_logger_initialize 05DD  
                         ??_EUSART_Receive_ISR 0070                    __end_of_ESP_process_rx_data 053B  
                              _TMR1_Initialize 068C  
